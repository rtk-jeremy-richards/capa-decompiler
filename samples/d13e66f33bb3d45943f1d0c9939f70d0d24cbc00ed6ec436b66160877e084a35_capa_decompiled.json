{
    "00401160": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.00401160(void)\n\n{\n    int32_t iVar1;\n    uint var_3b0h;\n    uint var_3ach;\n    uint var_3a8h;\n    uint var_3a4h;\n    uint var_25fh;\n    uint var_23fh;\n    uint var_1b9h;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_ch = 300;\n    var_4h = 1;\n    var_8h = 0x421135;\n    *0x421118 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x421160 = *(*0x421118 + 0x3c);\n    do {\n        while (iVar1 = (**0x42114c)(*0x42116c, 0x42113c, 0, &var_4h, &var_140h, &var_ch),  iVar1 != 0) {\n            fcn.00401160();\n        }\n    } while (var_140h._1_1_ != 'A');\n    if (var_140h._3_1_ == 't') {\n        *0x421144 = 0x406e7d;\n    }\n    *0x421144 = *0x421144 + -0x3728;\n    if (var_140h._3_1_ == '1') {\n        *0x421144 = 0x404c1a;\n    }\n    *0x421144 = *0x421144 + -1;\n    *0x421168 = *(*0x421118 + *0x421160 + 0x50);\n    *0x42108c = *0x42108c - 0x14d;\n    if ((*0x421118 < *0x42108c) && (*0x42108c < *0x421168 + *0x421118)) {\n        *0x4210f0 = 0;\n    }\n    else {\n        *0x421118 = *0x42111c;\n        *0x4210f0 = 1;\n    }\n    return *0x421144;\n}\n",
        "token_count": 508
    },
    "00401960": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __fastcall fcn.00401960(uint param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = (**0x421154)(0x80000000, *0x421088, 0x42116c, param_1);\n    if (iVar1 == 0) {\n        return;\n    }\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 116
    },
    "00401420": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.00401420(void)\n\n{\n    *0x421130 = 0;\n    **0x421088 = 0x69;\n    (*0x421088)[*0x421130 + 1] = *0x421130 + 'n';\n    (*0x421088)[*0x421130 + 2] = *0x421130 + 't';\n    (*0x421088)[*0x421130 + 3] = *0x421130 + 'e';\n    (*0x421088)[*0x421130 + 4] = *0x421130 + 'r';\n    (*0x421088)[*0x421130 + 5] = *0x421130 + 'f';\n    (*0x421088)[*0x421130 + 6] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 7] = *0x421130 + 'c';\n    (*0x421088)[*0x421130 + 8] = *0x421130 + 'e';\n    (*0x421088)[*0x421130 + 9] = *0x421130 + '\\\\';\n    (*0x421088)[*0x421130 + 10] = *0x421130 + '{';\n    (*0x421088)[*0x421130 + 0xb] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0xc] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0xd] = *0x421130 + '5';\n    (*0x421088)[*0x421130 + 0xe] = *0x421130 + 'b';\n    (*0x421088)[*0x421130 + 0xf] = *0x421130 + '6';\n    (*0x421088)[*0x421130 + 0x10] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0x11] = *0x421130 + '8';\n    (*0x421088)[*0x421130 + 0x12] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x13] = *0x421130 + '-';\n    (*0x421088)[*0x421130 + 0x14] = *0x421130 + 'b';\n    (*0x421088)[*0x421130 + 0x15] = *0x421130 + '8';\n    (*0x421088)[*0x421130 + 0x16] = *0x421130 + '3';\n    (*0x421088)[*0x421130 + 0x17] = *0x421130 + '4';\n    (*0x421088)[*0x421130 + 0x18] = *0x421130 + '-';\n    (*0x421088)[*0x421130 + 0x19] = *0x421130 + '1';\n    (*0x421088)[*0x421130 + 0x1a] = *0x421130 + '1';\n    (*0x421088)[*0x421130 + 0x1b] = *0x421130 + 'd';\n    (*0x421088)[*0x421130 + 0x1c] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x1d] = *0x421130 + '-';\n    (*0x421088)[*0x421130 + 0x1e] = *0x421130 + '9';\n    (*0x421088)[*0x421130 + 0x1f] = *0x421130 + '3';\n    (*0x421088)[*0x421130 + 0x20] = *0x421130 + '2';\n    (*0x421088)[*0x421130 + 0x21] = *0x421130 + 'f';\n    (*0x421088)[*0x421130 + 0x22] = *0x421130 + '-';\n    (*0x421088)[*0x421130 + 0x23] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x24] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x25] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0x26] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x27] = *0x421130 + 'c';\n    (*0x421088)[*0x421130 + 0x28] = *0x421130 + '9';\n    (*0x421088)[*0x421130 + 0x29] = *0x421130 + '0';\n    (*0x421088)[*0x421130 + 0x2a] = *0x421130 + 'd';\n    (*0x421088)[*0x421130 + 0x2b] = *0x421130 + 'c';\n    (*0x421088)[*0x421130 + 0x2c] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0x2d] = *0x421130 + 'a';\n    (*0x421088)[*0x421130 + 0x2e] = *0x421130 + '9';\n    (*0x421088)[*0x421130 + 0x2f] = *0x421130 + '}';\n    (*0x421088)[*0x421130 + 0x30] = 0;\n    return;\n}\n",
        "token_count": 1350
    },
    "null": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint __cdecl entry0(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t arg_8h_00;\n    uint var_70h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 0x14d; var_4h = var_4h + 1) {\n        (*_sym.imp.USER32.dll_GetTopWindow)(0);\n    }\n    for (var_4h = 0; var_4h < 0x1487ce1b; var_4h = var_4h + 1) {\n    }\n    *0x42111c = arg_8h;\n    *0x421154 = _sym.imp.ADVAPI32.dll_RegOpenKeyA;\n    *0x4210fc = &stack0xfffffffc;\n    fcn.004019a0();\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"advapi32\", \"RegQueryValueExA\");\n    *0x42114c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    *0x421124 = fcn.00401160();\n    fcn.00401c30();\n    *0x421108 = 0;\n    *0x42110c = 0;\n    *0x421104 = 2;\n    while (arg_8h_00 = fcn.004010f0(*0x42100c, *0x4210e8),  *0x421108 < *0x4210e4) {\n        fcn.00401380(arg_8h_00);\n        *0x42110c = *0x421104 + *0x42100c + *0x42110c;\n        *0x421108 = *0x42100c + *0x421108;\n        *0x4210e8 = *0x4210e8 - arg_8h_00;\n        *0x4210ec = arg_8h_00;\n    }\n    fcn.00401000(2, 3);\n    uVar1 = fcn.004018a0();\n    return uVar1;\n}\n",
        "token_count": 651
    },
    "00401c60": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.00401c60(void)\n\n{\n    uint var_4h;\n    \n    return *(*0x421124 + -4);\n}\n",
        "token_count": 32
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401000(void)\n\n{\n    uint var_218h;\n    uint var_214h;\n    uint var_104h;\n    uint var_4eh;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_4h;\n    \n    // [00] -r-x section size 8192 named .text\n    for (var_4h = 0; var_4h < *0x4210e4; var_4h = var_4h + 4) {\n        *0x421170 = *0x421128 + var_4h;\n        fcn.00401130(0x2d, var_4h);\n        *0x421140 = var_4h + 0x47b;\n        *0x42115c = *0x421170;\n        fcn.004019c0();\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "00401380": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401380(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_20h;\n    uint var_18h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = *0x421128 + *0x421108;\n    iVar2 = *0x421124 + *0x42110c;\n    for (var_8h = 0; var_8h < arg_8h; var_8h = var_8h + 1) {\n        *(iVar1 + var_8h) = 0;\n        *(iVar1 + var_8h) = *(iVar2 + var_8h);\n    }\n    return;\n}\n",
        "token_count": 184
    },
    "00401c30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401c30(void)\n\n{\n    *0x4210e4 = fcn.00401c60(0x37);\n    *0x421130 = *0x4210e4;\n    fcn.004018b0(1);\n    return;\n}\n",
        "token_count": 63
    },
    "00401ca0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401ca0(int32_t arg_8h)\n\n{\n    uint var_4h;\n    \n    return arg_8h * 0x229;\n}\n",
        "token_count": 43
    },
    "00401cc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401cc0(void)\n\n{\n    *0x421158 = *0x421140 - 0x1159;\n    *0x421168 = **0x42115c ^ *0x421140;\n    *0x421148 = *0x421168;\n    **0x42115c = *0x421168;\n    return;\n}\n",
        "token_count": 82
    },
    "00401d40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401d40(int32_t arg_8h)\n\n{\n    return arg_8h + 0x13f7;\n}\n",
        "token_count": 37
    },
    "004010f0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004010f0(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h < arg_ch) {\n        arg_ch = arg_8h;\n    }\n    return arg_ch;\n}\n",
        "token_count": 72
    },
    "004018b0": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: dwSize\n\nvoid fcn.004018b0(void)\n\n{\n    uint uVar1;\n    uint dwSize;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"kernel32\", \"VirtualAlloc\", *0x4210e4);\n    *0x421150 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    return;\n}\n",
        "token_count": 115
    }
}