{
    "null": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid main(ulong argc)\n\n{\n    char cVar1;\n    char cVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int64_t arg1;\n    uchar *lpMultiByteStr;\n    uint8_t *arg1_00;\n    int64_t iVar8;\n    int64_t iVar9;\n    char *pcVar10;\n    uchar *puVar11;\n    char *arg2;\n    uint32_t uVar12;\n    ulong in_R8;\n    uchar *arg3;\n    ulong in_R9;\n    ulong unaff_R14;\n    bool bVar13;\n    ulong var_4f30h;\n    uchar auStack16456 [4096];\n    char acStack12360 [4096];\n    uchar auStack8264 [8192];\n    uint64_t uStack72;\n    ulong uStack64;\n    ulong uStack16;\n    \n    // [00] -r-x section size 167936 named .text\n    puVar4 = fcn.14000e3e0();\n    uVar7 = *puVar4;\n    puVar5 = fcn.14000e3d8();\n    puVar4 = fcn.1400067c0(*puVar5, uVar7);\n    uStack64 = 0x14000277d;\n    iVar6 = fcn.14000a130();\n    iVar6 = -iVar6;\n    uStack72 = *0x14003d018 ^ &stack0xffffffffffffffc8 + iVar6;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027a1;\n    uVar7 = fcn.140014310(2);\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027ab;\n    fcn.140014f7c(uVar7, 0, in_R8, in_R9);\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027b0;\n    arg1 = fcn.140001af0();\n    if (arg1 == 0) goto code_r0x0001400028cf;\n    uVar7 = *puVar4;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027c9;\n    iVar3 = fcn.140002cd0(&stack0xfffffffffffffff8 + iVar6, uVar7);\n    if (iVar3 == 0) goto code_r0x0001400028cf;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027e2;\n    iVar3 = fcn.140002ba0(&stack0xffffffffffffbfb8, &stack0xfffffffffffffff8 + iVar6);\n    if (iVar3 == 0) goto code_r0x0001400028cf;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400027fb;\n    iVar3 = fcn.140002c50(&stack0xffffffffffffcfb8, &stack0xfffffffffffffff8 + iVar6);\n    if (iVar3 == 0) goto code_r0x0001400028cf;\n    *(&stack0x00005058 + iVar6) = unaff_R14;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x140002817;\n    lpMultiByteStr = fcn.140005af0(\"_MEIPASS2\");\n    bVar13 = lpMultiByteStr != NULL;\n    if (lpMultiByteStr != NULL) {\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002838;\n        arg1_00 = fcn.140005af0();\n        if (arg1_00 != NULL) {\n            uVar12 = *arg1_00 - 0x31;\n            if (uVar12 == 0) {\n                uVar12 = arg1_00[1];\n            }\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002857;\n            fcn.140014138(arg1_00);\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002863;\n            fcn.1400060f0(\"_PYI_ONEDIR_MODE\");\n            bVar13 = uVar12 != 0 && bVar13;\n        }\n    }\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x140002878;\n    fcn.1400060f0(\"_MEIPASS2\");\n    arg3 = &stack0xfffffffffffffff8 + iVar6;\n    puVar11 = &stack0xfffffffffffffff8 + iVar6;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x14000288a;\n    iVar3 = fcn.1400019d0(arg1, puVar11, arg3);\n    if (iVar3 == 0) {\n        arg3 = &stack0xfffffffffffffff8 + iVar6;\n        puVar11 = &stack0xffffffffffffbfb8;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x1400028ae;\n        iVar3 = fcn.1400019d0(arg1, puVar11, arg3);\n        if (iVar3 == 0) {\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x1400028ca;\n            fcn.140001c50(\"Cannot open PyInstaller archive from executable (%s) or external archive (%s)\\n\", \n                          &stack0xfffffffffffffff8 + iVar6, &stack0xffffffffffffbfb8, in_R9);\n            goto code_r0x0001400028cf;\n        }\n        if (lpMultiByteStr != NULL) goto code_r0x00014000297d;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x14000290a;\n        iVar8 = fcn.140002de0(&stack0xfffffffffffffff8 + iVar6, 0x14002a570);\n        if (iVar8 == 0) {\n            uVar12 = 0xffffffff;\n        }\n        else {\n            puVar11 = &stack0xfffffffffffffff0 + iVar6;\n            *(&stack0xfffffffffffffff0 + iVar6) = *0x14002ca50;\n            arg3 = 0x8;\n            (&stack0xfffffffffffffff3)[iVar6] = (*0x14002ca50 >> 0x18) + '\\r';\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002940;\n            iVar9 = fcn.140006360(iVar8, puVar11, 8);\n            if (iVar9 != 0) {\n                *(arg1 + 0x5080) = argc;\n                *(arg1 + 0x5088) = puVar4;\n                goto code_r0x000140002990;\n            }\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x14000294d;\n            fcn.14000e60c(iVar8);\n            uVar12 = 1;\n        }\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002968;\n        fcn.140001c50(\"Cannot side-load external archive %s (code %d)!\\n\", &stack0xffffffffffffbfb8, uVar12, in_R9);\n        goto code_r0x0001400028cf;\n    }\ncode_r0x00014000297d:\n    *(arg1 + 0x5080) = argc;\n    *(arg1 + 0x5088) = puVar4;\n    if (lpMultiByteStr == NULL) {\ncode_r0x000140002990:\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002998;\n        iVar3 = fcn.1400024a0(arg1, puVar11, arg3, in_R9);\n        if (iVar3 == 0) {\n            lpMultiByteStr = &stack0xffffffffffffcfb8;\n            goto code_r0x0001400029a3;\n        }\n    }\n    else {\ncode_r0x0001400029a3:\n        arg3 = 0x1000;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x1400029b8;\n        puVar11 = lpMultiByteStr;\n        iVar8 = fcn.140006db0(&stack0xffffffffffffdfb8, lpMultiByteStr, 0x1000);\n        if (iVar8 == 0) {\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x1400029c9;\n            fcn.140001c50(\"Failed to convert DLL search path!\\n\", puVar11, arg3, in_R9);\n            goto code_r0x0001400028cf;\n        }\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x1400029db;\n        (*_sym.imp.KERNEL32.dll_SetDllDirectoryW)(&stack0xffffffffffffdfb8);\n    }\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400029e0;\n    uVar7 = fcn.140004fa0();\n    *(&stack0xffffffffffffffe8 + iVar6) = uVar7;\n    if (bVar13) {\ncode_r0x000140002a36:\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a40;\n        fcn.140004f20(&stack0xffffffffffffffe8 + iVar6);\n    }\n    else {\n        arg3 = NULL;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x1400029f8;\n        iVar3 = fcn.140004c40(uVar7, arg1, 0, in_R9);\n        if (iVar3 != 0) goto code_r0x000140002a36;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a09;\n        iVar3 = fcn.1400047a0(arg1);\n        if (iVar3 != 0) {\ncode_r0x000140002a2c:\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a36;\n            fcn.1400049f0(*(&stack0xffffffffffffffe8 + iVar6));\n            goto code_r0x000140002a36;\n        }\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a17;\n        iVar3 = fcn.140004730(*(&stack0xffffffffffffffe8 + iVar6));\n        if (iVar3 != 0) goto code_r0x000140002a2c;\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a2a;\n        fcn.140004df0(*(&stack0xffffffffffffffe8 + iVar6), &stack0xfffffffffffffff8 + iVar6);\n    }\n    if (lpMultiByteStr == NULL) {\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b03;\n        iVar3 = fcn.140002330(arg1, *(&stack0xffffffffffffffe8 + iVar6), arg3, in_R9);\n        if (iVar3 == 0) {\n            pcVar10 = arg1 + 0x3078;\n            arg2 = &stack0xffffffffffffcfb8;\n            if (*pcVar10 != '\\0') {\n                arg2 = pcVar10;\n            }\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b2b;\n            fcn.140006080(\"_MEIPASS2\", arg2);\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b37;\n            fcn.140005af0(\"_MEIPASS2\");\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b3f;\n            iVar3 = fcn.140004540(arg1);\n            if (iVar3 != -1) {\n                *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b4d;\n                fcn.140002490();\n                *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b60;\n                fcn.140006130(&stack0xfffffffffffffff8 + iVar6, arg1, argc, puVar4);\n                *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b6c;\n                fcn.1400049f0(*(&stack0xffffffffffffffe8 + iVar6));\n                *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b76;\n                fcn.140004f20(&stack0xffffffffffffffe8 + iVar6);\n                if (*(arg1 + 0x5078) == 1) {\n                    *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b87;\n                    fcn.140005df0(pcVar10);\n                }\n                *(&stack0xffffffffffffffc0 + iVar6) = 0x140002b8f;\n                fcn.140001ab0(arg1);\n            }\n        }\n    }\n    else {\n        pcVar10 = &stack0xffffffffffffcfb8;\n        iVar8 = lpMultiByteStr - pcVar10;\n        do {\n            cVar1 = *pcVar10;\n            cVar2 = pcVar10[iVar8];\n            if (cVar1 != cVar2) break;\n            pcVar10 = pcVar10 + 1;\n        } while (cVar2 != '\\0');\n        if (cVar1 != cVar2) {\n            pcVar10 = arg1 + 0x3078;\n            *(&stack0xffffffffffffffc0 + iVar6) = 0x140002a95;\n            iVar3 = fcn.140001b30(pcVar10, 0x1000, 0x14002a920, lpMultiByteStr);\n            if (0xfff < iVar3) goto code_r0x0001400028cf;\n            *(arg1 + 0x5078) = 1;\n            do {\n                cVar1 = *pcVar10;\n                pcVar10[0x1000] = cVar1;\n                pcVar10 = pcVar10 + 1;\n            } while (cVar1 != '\\0');\n        }\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002ac9;\n        fcn.140002490(arg1);\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002ad1;\n        fcn.1400022d0(arg1);\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002adb;\n        fcn.140002480(arg1);\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002ae5;\n        fcn.1400049f0(*(&stack0xffffffffffffffe8 + iVar6));\n        *(&stack0xffffffffffffffc0 + iVar6) = 0x140002aef;\n        fcn.140004f20(&stack0xffffffffffffffe8 + iVar6);\n    }\ncode_r0x0001400028cf:\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x1400028de;\n    fcn.14000a100(uStack72 ^ &stack0xffffffffffffffc8 + iVar6);\n    return;\n}\n",
        "token_count": 3436
    },
    "14000144": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.140001440(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t arg3;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t arg3_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    char *arg1_00;\n    char *arg2_00;\n    uint64_t arg2_01;\n    uint64_t uVar6;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t arg4;\n    \n    uVar3 = fcn.140005880(arg1);\n    if (uVar3 == -1) {\n        return uVar3;\n    }\n    arg3 = arg2 + 0x12;\n    arg3_00 = fcn.140005ba0(arg1 + 0x60f, arg3);\n    if (arg3_00 == 0) {\n        fcn.140001c10(\"fopen\", \"Failed to extract %s: failed to open target file!\\n\", arg3, in_R9);\n        return 0xffffffff;\n    }\n    iVar4 = *arg1;\n    if (iVar4 == 0) {\n        iVar4 = fcn.140002de0(arg1 + 0xf, 0x14002a570);\n        *arg1 = iVar4;\n        if (iVar4 == 0) {\n            fcn.140001c50(\"Failed to extract %s: failed to open archive file!\\n\", arg3, in_R8, in_R9);\n            uVar3 = 0xffffffff;\n            goto code_r0x000140001617;\n        }\n    }\n    iVar1 = fcn.14000ec94(iVar4, *(arg2 + 4) + arg1[1], 0);\n    if (iVar1 < 0) {\n        fcn.140001c10(\"fseek\", \"Failed to extract %s: failed to seek to the entry\\'s data!\\n\", arg3, in_R9);\n        uVar3 = 0xffffffff;\n    }\n    else if (*(arg2 + 0x10) == '\\x01') {\n        uVar2 = fcn.140001050(arg1, arg2, arg3_00, 0);\n        uVar3 = uVar2;\n    }\n    else {\n        uVar3 = 0;\n        iVar4 = fcn.14001414c(0x2000);\n        if (iVar4 == 0) {\n            fcn.140001c10(\"malloc\", \"Failed to extract %s: failed to allocate temporary buffer!\\n\", arg3, in_R9);\n            uVar3 = 0xffffffff;\n        }\n        else {\n            for (uVar6 = *(arg2 + 0xc); uVar6 != 0; uVar6 = uVar6 - arg2_01) {\n                arg4 = *arg1;\n                arg2_01 = uVar6;\n                if (0x2000 < uVar6) {\n                    arg2_01 = 0x2000;\n                }\n                iVar5 = fcn.14000e95c(iVar4, arg2_01, 1, arg4);\n                if (iVar5 == 0) {\n                    arg2_00 = \"Failed to extract %s: failed to read data chunk!\\n\";\n                    arg1_00 = \"fread\";\ncode_r0x0001400015f3:\n                    fcn.140001c10(arg1_00, arg2_00, arg3, arg4);\n                    uVar3 = 0xffffffff;\n                    break;\n                }\n                arg4 = arg3_00;\n                iVar5 = fcn.14000f09c(iVar4, arg2_01, 1);\n                if (iVar5 == 0) {\n                    arg2_00 = \"Failed to extract %s: failed to write data chunk!\\n\";\n                    arg1_00 = \"fwrite\";\n                    goto code_r0x0001400015f3;\n                }\n            }\n            fcn.140014138(iVar4);\n        }\n    }\ncode_r0x000140001617:\n    if (*arg1 != 0) {\n        fcn.14000e60c();\n        *arg1 = 0;\n    }\n    fcn.14000e60c(arg3_00);\n    return uVar3;\n}\n",
        "token_count": 966
    },
    "140001dc": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140001dc0(int64_t *param_1, ulong param_2)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    char cVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uchar *puVar8;\n    int64_t iVar9;\n    uint8_t *puVar10;\n    uint64_t arg2;\n    char *pcVar11;\n    uchar *arg2_00;\n    ulong arg2_01;\n    ulong unaff_RDI;\n    uint32_t uVar12;\n    uchar *arg4;\n    int64_t iStackX8;\n    uint auStackX16 [2];\n    int64_t iStackX24;\n    uint uStackX32;\n    uint8_t auStackX38 [2];\n    ulong var_3f50h;\n    ulong var_4f50h;\n    char acStack16424 [4096];\n    char acStack12328 [4096];\n    uchar auStack8232 [4096];\n    uchar auStack4136 [4096];\n    uint64_t uStack40;\n    ulong uStack32;\n    \n    uStack32 = 0x140001dd6;\n    iVar7 = fcn.14000a130();\n    iVar7 = -iVar7;\n    uStack40 = *0x14003d018 ^ &stack0xffffffffffffffe8 + iVar7;\n    iVar9 = *param_1;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001e0b;\n    iVar5 = fcn.140001b30(&stack0xffffffffffffbfd8, 0x1000, 0x14002a920, param_2);\n    if (0xfff < iVar5) goto code_r0x000140001f9c;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001e27;\n    puVar8 = fcn.14000b538(&stack0xffffffffffffbfd8, 0x3a);\n    if (puVar8 == NULL) goto code_r0x000140001f9c;\n    pcVar11 = puVar8 + 1;\n    *puVar8 = 0;\n    iVar4 = iVar7 - pcVar11;\n    do {\n        cVar2 = *pcVar11;\n        pcVar11[&stack0x00000038 + iVar4] = cVar2;\n        pcVar11 = pcVar11 + 1;\n    } while (cVar2 != '\\0');\n    if ((acStack16424[0] == '\\0') || ((&stack0x00000038)[iVar7] == '\\0')) goto code_r0x000140001f9c;\n    *(&stack0x00005078 + iVar7) = unaff_RDI;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001e7f;\n    fcn.140002c50(&stack0xffffffffffffefd8, &stack0xffffffffffffbfd8);\n    arg4 = 0x5c;\n    *(&stack0x00000018 + iVar7) = &stack0x00000038 + iVar7;\n    puVar8 = iVar9 + 0x2078;\n    *(&stack0x00000010 + iVar7) = 0x5c;\n    *(&stack0x00000008 + iVar7) = &stack0xffffffffffffefd8;\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001ebd;\n    iVar5 = fcn.140002230(&stack0xffffffffffffdfd8, \"%s%c%s%c%s\", puVar8, 0x5c);\n    if (iVar5 == 0) {\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001ec9;\n        iVar5 = fcn.140005880(iVar9);\n        if (iVar5 != -1) {\n            puVar8 = &stack0x00000038 + iVar7;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001eea;\n            iVar5 = fcn.140005760(&stack0xffffffffffffdfd8, iVar9 + 0x3078);\njoined_r0x000140001f78:\n            if (iVar5 != -1) goto code_r0x000140001f9c;\n        }\ncode_r0x000140001f7e:\n        arg2_00 = &stack0x00000038 + iVar7;\n        pcVar11 = \"Failed to copy %s\\n\";\n    }\n    else {\n        arg4 = 0x5c;\n        *(&stack0x00000028 + iVar7) = &stack0x00000038 + iVar7;\n        puVar8 = iVar9 + 0x2078;\n        *(&stack0x00000020 + iVar7) = 0x5c;\n        *(&stack0x00000018 + iVar7) = &stack0xffffffffffffefd8;\n        *(&stack0x00000010 + iVar7) = 0x5c;\n        *(&stack0x00000008 + iVar7) = 0x14002a9d4;\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f4c;\n        iVar5 = fcn.140002230(&stack0xffffffffffffdfd8, \"%s%c%s%c%s%c%s\", puVar8, 0x5c);\n        if (iVar5 == 0) {\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f58;\n            iVar5 = fcn.140005880(iVar9);\n            if (iVar5 != -1) {\n                puVar8 = &stack0x00000038 + iVar7;\n                *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f75;\n                iVar5 = fcn.140005760(&stack0xffffffffffffdfd8, iVar9 + 0x3078);\n                goto joined_r0x000140001f78;\n            }\n            goto code_r0x000140001f7e;\n        }\n        arg4 = 0x5c;\n        puVar8 = iVar9 + 0x2078;\n        *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n        *(&stack0xffffffffffffffe0 + iVar7) = 0x140001fe2;\n        iVar5 = fcn.140002230(&stack0xffffffffffffcfd8, \"%s%c%s.pkg\", puVar8, 0x5c);\n        if (iVar5 == 0) {\ncode_r0x00014000204a:\n            iVar9 = *param_1;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002052;\n            iVar5 = fcn.140005880(iVar9);\n            if (iVar5 == -1) goto code_r0x000140002211;\n            iVar9 = param_1[1];\n            iVar5 = 1;\n            if (iVar9 != 0) {\n                arg4 = 0x1;\n                do {\n                    pcVar11 = iVar9 + 0x78;\n                    puVar8 = &stack0xffffffffffffcfd8 + -pcVar11;\n                    do {\n                        cVar2 = *pcVar11;\n                        cVar3 = pcVar11[puVar8];\n                        if (cVar2 != cVar3) break;\n                        pcVar11 = pcVar11 + 1;\n                    } while (cVar3 != '\\0');\n                    if (cVar2 == cVar3) {\n                        if (iVar9 != 0) goto code_r0x00014000218e;\n                        arg2_00 = &stack0xffffffffffffcfd8;\n                        pcVar11 = \"Archive not found: %s\\n\";\n                        goto code_r0x000140001f8a;\n                    }\n                    iVar9 = param_1[arg4 + 1];\n                    arg4 = arg4 + 1;\n                    iVar5 = iVar5 + 1;\n                } while (iVar9 != 0);\n            }\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x1400020af;\n            iVar9 = fcn.140001af0();\n            if (iVar9 == 0) goto code_r0x000140002211;\n            arg2_01 = 0x1000;\n            arg4 = &stack0xffffffffffffcfd8;\n            puVar8 = 0x14002a920;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x1400020d7;\n            iVar6 = fcn.140001b30(iVar9 + 0x78, 0x1000, 0x14002a920, arg4);\n            if (0xfff < iVar6) {\ncode_r0x0001400021fd:\n                *(&stack0xffffffffffffffe0 + iVar7) = 0x140002209;\n                fcn.140001c50(\"Archive path exceeds PATH_MAX\\n\", arg2_01, puVar8, arg4);\ncode_r0x000140002209:\n                *(&stack0xffffffffffffffe0 + iVar7) = 0x140002211;\n                fcn.140001ab0(iVar9);\n                goto code_r0x000140002211;\n            }\n            arg4 = *param_1 + 0x2078;\n            puVar8 = 0x14002a920;\n            arg2_01 = 0x1000;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002104;\n            iVar6 = fcn.140001b30(iVar9 + 0x2078, 0x1000, 0x14002a920, arg4);\n            if (0xfff < iVar6) goto code_r0x0001400021fd;\n            arg4 = *param_1 + 0x3078;\n            puVar8 = 0x14002a920;\n            arg2_01 = 0x1000;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002131;\n            iVar6 = fcn.140001b30(iVar9 + 0x3078, 0x1000, 0x14002a920, arg4);\n            if (0xfff < iVar6) goto code_r0x0001400021fd;\n            *(iVar9 + 0x5078) = *(*param_1 + 0x5078);\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002153;\n            iVar6 = fcn.1400017b0(iVar9);\n            if (iVar6 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar7) = 0x14000216a;\n                fcn.140001c50(\"Failed to open archive %s!\\n\", &stack0xffffffffffffcfd8, puVar8, arg4);\n                goto code_r0x000140002209;\n            }\n            param_1[iVar5] = iVar9;\ncode_r0x00014000218e:\n            arg2 = *(iVar9 + 0x10);\n            if (arg2 < *(iVar9 + 0x18)) {\n                do {\n                    puVar10 = arg2 + 0x12;\n                    arg4 = &stack0x00000038 + (iVar7 - puVar10);\n                    do {\n                        puVar1 = puVar10 + arg4;\n                        uVar12 = *puVar10 - *puVar1;\n                        puVar8 = uVar12;\n                        if (uVar12 != 0) break;\n                        puVar10 = puVar10 + 1;\n                    } while (*puVar1 != 0);\n                    if (uVar12 == 0) {\n                        *(&stack0xffffffffffffffe0 + iVar7) = 0x1400021f1;\n                        iVar5 = fcn.140001440(iVar9, arg2);\n                        if (iVar5 != -1) goto code_r0x000140001f9c;\n                        break;\n                    }\n                    *(&stack0xffffffffffffffe0 + iVar7) = 0x1400021d2;\n                    arg2 = fcn.140001780(iVar9, arg2, puVar8, arg4);\n                } while (arg2 < *(iVar9 + 0x18));\n            }\n            arg2_00 = &stack0x00000038 + iVar7;\n            pcVar11 = \"Failed to extract %s\\n\";\n        }\n        else {\n            arg4 = 0x5c;\n            puVar8 = iVar9 + 0x2078;\n            *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002012;\n            iVar5 = fcn.140002230(&stack0xffffffffffffcfd8, \"%s%c%s.exe\", puVar8, 0x5c);\n            if (iVar5 == 0) goto code_r0x00014000204a;\n            arg4 = 0x5c;\n            puVar8 = iVar9 + 0x2078;\n            *(&stack0x00000008 + iVar7) = &stack0xffffffffffffbfd8;\n            *(&stack0xffffffffffffffe0 + iVar7) = 0x140002042;\n            iVar5 = fcn.140002230(&stack0xffffffffffffcfd8, \"%s%c%s\", puVar8, 0x5c);\n            if (iVar5 == 0) goto code_r0x00014000204a;\ncode_r0x000140002211:\n            arg2_00 = &stack0xffffffffffffcfd8;\n            pcVar11 = \"Archive not found: %s\\n\";\n        }\n    }\ncode_r0x000140001f8a:\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001f8f;\n    fcn.140001c50(pcVar11, arg2_00, puVar8, arg4);\ncode_r0x000140001f9c:\n    *(&stack0xffffffffffffffe0 + iVar7) = 0x140001fab;\n    fcn.14000a100(uStack40 ^ &stack0xffffffffffffffe8 + iVar7);\n    return;\n}\n",
        "token_count": 3200
    },
    "14000233": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140002330(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t arg2_00;\n    int64_t iVar3;\n    uchar auStack232 [32];\n    int64_t iStack200;\n    uchar auStack192 [16];\n    uchar auStack176 [16];\n    uchar auStack160 [16];\n    uchar auStack144 [16];\n    uchar auStack128 [16];\n    uchar auStack112 [16];\n    uchar auStack96 [16];\n    uchar auStack80 [16];\n    uchar auStack64 [16];\n    ulong uStack48;\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003d018 ^ auStack232;\n    arg2_00 = *(arg1 + 0x10);\n    auStack192 = ZEXT816(0);\n    auStack176 = ZEXT816(0);\n    auStack160 = ZEXT816(0);\n    auStack144 = ZEXT816(0);\n    auStack128 = ZEXT816(0);\n    auStack112 = ZEXT816(0);\n    uStack48 = 0;\n    auStack96 = ZEXT816(0);\n    auStack80 = ZEXT816(0);\n    auStack64 = ZEXT816(0);\n    iStack200 = arg1;\n    if (arg2_00 < *(arg1 + 0x18)) {\n        do {\n            uVar1 = *(arg2_00 + 0x11) - 0x5a;\n            if ((uVar1 < 0x1f) && ((0x40000101U >> (uVar1 & 0x1f) & 1) != 0)) {\n                if (arg2 != 0) {\n                    fcn.140004fe0(arg2, arg2_00);\n                }\n                iVar2 = fcn.140001440(arg1, arg2_00);\n                if (iVar2 != 0) break;\n            }\n            else if ((*(arg2_00 + 0x11) == 100) && (iVar2 = fcn.140001dc0(&iStack200, arg2_00 + 0x12),  iVar2 == -1))\n            break;\n            arg2_00 = fcn.140001780(arg1, arg2_00, arg3, arg4);\n        } while (arg2_00 < *(arg1 + 0x18));\n    }\n    iVar3 = 1;\n    while (auStack192._0_8_ != 0) {\n        fcn.140001ab0(auStack192._0_8_);\n        iVar3 = iVar3 + 1;\n        auStack192._0_8_ = *(auStack192 + iVar3 * 8 + -8);\n    }\n    fcn.14000a100(uStack40 ^ auStack232);\n    return;\n}\n",
        "token_count": 653
    },
    "140005ba": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140005ba0(ulong param_1, ulong param_2)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uint8_t *arg1;\n    int64_t iVar7;\n    ushort *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    ulong uStack16;\n    \n    uStack16 = 0x140005bb0;\n    iVar4 = fcn.14000a130();\n    iVar4 = -iVar4;\n    *(&stack0x00004048 + iVar4) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar4;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005be1;\n    iVar3 = fcn.140001b30(&stack0x00000048 + iVar4, 0x1000, 0x14002a920, param_1);\n    if (iVar3 < 0x1000) {\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x140005c08;\n        iVar3 = fcn.140001b30(&stack0x00001048 + iVar4, 0x1000, 0x14002a920, param_2);\n        if (iVar3 < 0x1000) {\n            uVar10 = 0xffffffffffffffff;\n            do {\n                uVar10 = uVar10 + 1;\n            } while ((&stack0x00000049)[uVar10 + iVar4 + -1] != '\\0');\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140005c3d;\n            iVar5 = fcn.140015158(&stack0x00001048 + iVar4, 0x14002cc00);\n            if (iVar5 != 0) {\n                while( true ) {\n                    iVar7 = -1;\n                    do {\n                        iVar7 = iVar7 + 1;\n                    } while (*(iVar5 + iVar7) != '\\0');\n                    uVar10 = uVar10 + 1 + iVar7;\n                    if (0xffe < uVar10) goto code_r0x000140005dad;\n                    puVar8 = &stack0x00000047 + iVar4;\n                    do {\n                        pcVar1 = puVar8 + 1;\n                        puVar8 = puVar8 + 1;\n                    } while (*pcVar1 != '\\0');\n                    *puVar8 = *0x14002cc00;\n                    puVar6 = &stack0x00000047 + iVar4;\n                    do {\n                        pcVar1 = puVar6 + 1;\n                        puVar6 = puVar6 + 1;\n                    } while (*pcVar1 != '\\0');\n                    iVar7 = 0;\n                    do {\n                        cVar2 = *(iVar5 + iVar7);\n                        puVar6[iVar7] = cVar2;\n                        iVar7 = iVar7 + 1;\n                    } while (cVar2 != '\\0');\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005ccd;\n                    iVar5 = fcn.140015158(0, 0x14002cc00);\n                    if (iVar5 == 0) break;\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005ced;\n                    fcn.140006db0(&stack0x00002048 + iVar4, &stack0x00000048 + iVar4, 0x1000);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005cff;\n                    iVar3 = fcn.140014f74(&stack0x00002048 + iVar4, &stack0x00000018 + iVar4);\n                    if (iVar3 < 0) {\n                        *(&stack0xfffffffffffffff0 + iVar4) = 0x140005d14;\n                        fcn.140006a60(&stack0x00002048 + iVar4);\n                    }\n                }\n            }\n            uVar10 = 0x1000;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140005d31;\n            fcn.140006db0(&stack0x00002048 + iVar4, &stack0x00000048 + iVar4, 0x1000);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140005d43;\n            iVar3 = fcn.140014f74(&stack0x00002048 + iVar4, &stack0x00000018 + iVar4);\n            if (iVar3 == 0) {\n                if (*0x14003d000 == 0xffffffff) {\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005d62;\n                    arg1 = fcn.140005af0(\"PYINSTALLER_STRICT_UNPACK_MODE\");\n                    uVar9 = *arg1 - 0x30;\n                    if (uVar9 == 0) {\n                        uVar9 = arg1[1];\n                    }\n                    uVar10 = uVar9 != 0;\n                    *0x14003d000 = uVar9 != 0;\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005d90;\n                    fcn.140014138(arg1);\n                }\n                if (*0x14003d000 != 0) {\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005dab;\n                    fcn.140001c50(\"ERROR: file already exists but should not: %s\\n\", &stack0x00000048 + iVar4, uVar10, \n                                  param_2);\n                    goto code_r0x000140005dad;\n                }\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x140005dda;\n                fcn.140001c50(\"WARNING: file already exists but should not: %s\\n\", &stack0x00000048 + iVar4, uVar10, \n                              param_2);\n            }\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x140005deb;\n            fcn.140002de0(&stack0x00000048 + iVar4, 0x14002cc6c);\n        }\n    }\ncode_r0x000140005dad:\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x140005dbd;\n    fcn.14000a100(*(&stack0x00004048 + iVar4) ^ &stack0xfffffffffffffff8 + iVar4);\n    return;\n}\n",
        "token_count": 1462
    },
    "14000c1a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14000c1a4(void)\n\n{\n    if (*0x14003d040 != 0xffffffff) {\n        fcn.14000c3e0(*0x14003d040);\n        *0x14003d040 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 68
    },
    "14000e6f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e6fc(uchar *arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    int64_t *arg1_00;\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint64_t uVar4;\n    uchar *arg2_00;\n    uint64_t arg3_00;\n    uint64_t uVar5;\n    uint32_t in_stack_00000028;\n    uint in_stack_0000002c;\n    \n    arg1_00 = CONCAT44(in_stack_0000002c, in_stack_00000028);\n    if ((arg3 != 0) && (arg4 != 0)) {\n        if (arg1 != NULL) {\n            if ((arg1_00 != NULL) &&\n               (arg4 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg3), 0))) {\ncode_r0x00014000e79a:\n                if ((*(arg1_00 + 0x14) & 0x4c0) == 0) {\n                    in_stack_00000028 = 0x1000;\n                }\n                else {\n                    in_stack_00000028 = *(arg1_00 + 4);\n                }\n                uVar4 = arg3 * arg4;\n                arg2_00 = arg1;\n                arg3_00 = arg2;\n                do {\n                    if (uVar4 == 0) {\n                        return arg4;\n                    }\n                    if ((*(arg1_00 + 0x14) & 0x4c0) == 0) {\ncode_r0x00014000e85a:\n                        if (uVar4 < in_stack_00000028) {\n                            iVar2 = fcn.14001b4dc(arg1_00);\n                            if (iVar2 == -1) goto code_r0x00014000e945;\n                            if (arg3_00 == 0) goto code_r0x00014000e91d;\n                            uVar4 = uVar4 - 1;\n                            arg3_00 = arg3_00 - 1;\n                            uVar5 = 1;\n                            *arg2_00 = iVar2;\n                            in_stack_00000028 = *(arg1_00 + 4);\n                        }\n                        else {\n                            uVar5 = uVar4 & 0xffffffff;\n                            if (0x7fffffff < uVar4) {\n                                uVar5 = 0x7fffffff;\n                            }\n                            if (in_stack_00000028 != 0) {\n                                uVar5 = uVar5 - uVar5 % in_stack_00000028;\n                            }\n                            if (arg3_00 < uVar5) {\ncode_r0x00014000e91d:\n                                if (arg2 != 0xffffffffffffffff) {\n                                    fcn.14000b880(arg1, 0, arg2);\n                                }\n                                puVar3 = fcn.140016088();\n                                *puVar3 = 0x22;\n                                goto code_r0x00014000e740;\n                            }\n                            *(arg1_00 + 2) = 0;\n                            *arg1_00 = arg1_00[1];\n                            uVar1 = fcn.1400192e4(arg1_00);\n                            iVar2 = fcn.14001b08c(uVar1, arg2_00, uVar5);\n                            if (iVar2 == 0) {\n                                LOCK();\n                                *(arg1_00 + 0x14) = *(arg1_00 + 0x14) | 8;\n                                goto code_r0x00014000e945;\n                            }\n                            if (iVar2 < 0) goto code_r0x00014000e940;\n                            uVar5 = iVar2;\n                            uVar4 = uVar4 - uVar5;\n                            arg3_00 = arg3_00 - uVar5;\n                        }\n                    }\n                    else {\n                        iVar2 = *(arg1_00 + 2);\n                        if (iVar2 == 0) goto code_r0x00014000e85a;\n                        if (iVar2 < 0) {\ncode_r0x00014000e940:\n                            LOCK();\n                            *(arg1_00 + 0x14) = *(arg1_00 + 0x14) | 0x10;\ncode_r0x00014000e945:\n                            return (arg3 * arg4 - uVar4) / arg3;\n                        }\n                        uVar5 = iVar2;\n                        if (uVar4 < iVar2) {\n                            uVar5 = uVar4;\n                        }\n                        uVar5 = uVar5 & 0xffffffff;\n                        if (arg3_00 < uVar5) goto code_r0x00014000e91d;\n                        if (uVar5 != 0) {\n                            if (arg2_00 != NULL) {\n                                if (*arg1_00 != 0) {\n                                    fcn.14000aec0(arg2_00, *arg1_00, uVar5);\n                                    goto code_r0x00014000e841;\n                                }\n                                fcn.14000b880(arg2_00, 0, arg3_00);\n                            }\n                            puVar3 = fcn.140016088();\n                            *puVar3 = 0x16;\n                            fcn.140019f10();\n                        }\ncode_r0x00014000e841:\n                        *(arg1_00 + 2) = *(arg1_00 + 2) - uVar5;\n                        uVar4 = uVar4 - uVar5;\n                        *arg1_00 = *arg1_00 + uVar5;\n                        arg3_00 = arg3_00 - uVar5;\n                    }\n                    arg2_00 = arg2_00 + uVar5;\n                } while( true );\n            }\n            if (arg2 != 0xffffffffffffffff) {\n                fcn.14000b880(arg1, 0, arg2);\n            }\n            if ((arg1_00 != NULL) &&\n               (arg4 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg3), 0)))\n            goto code_r0x00014000e79a;\n        }\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\ncode_r0x00014000e740:\n        fcn.140019f10();\n    }\n    return 0;\n}\n",
        "token_count": 1446
    },
    "14000ee8": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ee88(char *arg1, uint64_t arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int64_t in_stack_00000028;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        if ((arg4 != NULL) &&\n           ((arg1 != NULL && (arg3 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg2), 0)))))\n        {\n            if ((*(arg4 + 0x14) & 0x4c0) == 0) {\n                uVar7 = 0x1000;\n            }\n            else {\n                uVar7 = *(arg4 + 4);\n            }\n            uVar5 = arg2 * arg3;\n            do {\n                if (uVar5 == 0) {\n                    return arg3;\n                }\n                if (((*(arg4 + 0x14) & 0xc0) == 0) || (*(arg4 + 2) == 0)) {\n                    if (uVar7 <= uVar5) {\n                        if (((*(arg4 + 0x14) & 0xc0) != 0) &&\n                           (iVar1 = fcn.140015c6c(arg4, in_stack_00000028),  iVar1 != 0)) goto code_r0x00014000f03f;\n                        uVar3 = uVar5;\n                        if (uVar7 != 0) {\n                            uVar3 = uVar5 - uVar5 % uVar7;\n                        }\n                        uVar6 = 0xfffffffe;\n                        if (uVar3 < 0xfffffffe) {\n                            uVar6 = uVar3;\n                        }\n                        uVar2 = fcn.1400192e4(arg4);\n                        uVar2 = fcn.14001c470(uVar2, arg1, uVar6, in_stack_00000028);\n                        if (uVar2 != 0xffffffff) {\n                            uVar4 = uVar2;\n                            if (uVar6 < uVar2) {\n                                uVar4 = uVar6;\n                            }\n                            uVar3 = uVar4;\n                            uVar5 = uVar5 - uVar3;\n                            if (uVar6 <= uVar2) goto code_r0x00014000f086;\n                        }\ncode_r0x00014000f03a:\n                        LOCK();\n                        *(arg4 + 0x14) = *(arg4 + 0x14) | 0x10;\ncode_r0x00014000f03f:\n                        return (arg2 * arg3 - uVar5) / arg2;\n                    }\n                    iVar1 = fcn.14001ca0c(*arg1, arg4, in_stack_00000028);\n                    if (iVar1 == -1) goto code_r0x00014000f03f;\n                    uVar7 = *(arg4 + 4);\n                    uVar5 = uVar5 - 1;\n                    if (uVar7 < 1) {\n                        uVar7 = 1;\n                        uVar3 = 1;\n                    }\n                    else {\n                        uVar3 = 1;\n                    }\n                }\n                else {\n                    if (*(arg4 + 2) < 0) goto code_r0x00014000f03a;\n                    if ((*(arg4 + 0x14) & 1) != 0) goto code_r0x00014000f03f;\n                    uVar3 = uVar5;\n                    if (*(arg4 + 2) <= uVar5) {\n                        uVar3 = *(arg4 + 2);\n                    }\n                    fcn.14000aec0(*arg4, arg1, uVar3);\n                    *(arg4 + 2) = *(arg4 + 2) - uVar3;\n                    uVar5 = uVar5 - uVar3;\n                    *arg4 = *arg4 + uVar3;\n                }\ncode_r0x00014000f086:\n                arg1 = arg1 + uVar3;\n            } while( true );\n        }\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 1031
    },
    "14000f5c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f5c8(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack168;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.140016088();\n        *puVar7 = 0x16;\n        fcn.140019f10();\ncode_r0x00014000f641:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        goto code_r0x00014000f641;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = puVar2[1];\n        *arg2 = puVar2 + 2;\n    }\n    iStack168 = 0xa66;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x00014000f9fb;\n    if (uVar11 < 0x30) goto code_r0x00014000f967;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x00014000f7ad:\n        iVar5 = uVar11 - iVar5;\ncode_r0x00014000f962:\n        if (iVar5 == -1) goto code_r0x00014000f967;\ncode_r0x00014000f989:\n        if (iVar5 != 0) goto code_r0x00014000f9ec;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.140016088();\n                *puVar7 = 0x16;\n                fcn.140019f10();\n            }\n            goto code_r0x00014000f9fb;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x00014000f962;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x00014000f962;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x00014000f962;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x00014000f962;\n                            }\n                            if ((0xa65 < uVar11) &&\n                               ((iVar5 = iStack168,  uVar11 < 0xa70 ||\n                                ((iVar5 = 0xae6,  0xae5 < uVar11 &&\n                                 ((uVar11 < 0xaf0 ||\n                                  ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                   ((uVar11 < 0xb70 ||\n                                    ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                     ((uVar11 < 0xc70 ||\n                                      ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                       ((uVar11 < 0xcf0 ||\n                                        ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                         ((uVar11 < 0xd70 ||\n                                          ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                           ((uVar11 < 0xe5a ||\n                                            ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                             ((uVar11 < 0xeda ||\n                                              ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                               ((uVar11 < 0xf2a ||\n                                                ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                 ((uVar11 < 0x104a ||\n                                                  ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                   ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))))\n                                               )))))))))))))))))))))))))))))))))) goto code_r0x00014000f7ad;\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x00014000f962;\n        }\ncode_r0x00014000f967:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x00014000f989;\n        }\ncode_r0x00014000f9ec:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x00014000f9fb:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x00014000fbca;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x00014000fbc5:\n            if (uVar10 == 0xffffffff) goto code_r0x00014000fbca;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x00014000fbc5;\n                    }\n                    if (0x6ef < uVar11) {\n                        iVar5 = 0x6f0;\n                        if (uVar11 < 0x6fa) {\ncode_r0x00014000fa73:\n                            uVar10 = uVar11 - iVar5;\n                            goto code_r0x00014000fbc5;\n                        }\n                        if (0x965 < uVar11) {\n                            iVar5 = 0x966;\n                            if (uVar11 < 0x970) goto code_r0x00014000fa73;\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) goto code_r0x00014000fa73;\n                                if (0xa65 < uVar11) {\n                                    iVar5 = iStack168;\n                                    if (uVar11 < 0xa70) goto code_r0x00014000fa73;\n                                    iVar5 = 0xae6;\n                                    if (0xae5 < uVar11) {\n                                        if (uVar11 < 0xaf0) goto code_r0x00014000fa73;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x00014000fa73;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x00014000fa73;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x00014000fa73;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x00014000fa73;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x00014000fa73;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x00014000fa73;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x00014000fa73;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x00014000fa73;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x00014000fa73;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x00014000fbc5;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x00014000fbc5;\n            }\ncode_r0x00014000fbca:\n            uVar10 = uVar11;\n            if (((uVar11 < 0x41) || (0x5a < uVar11)) && ((uVar11 < 0x61 || (0x7a < uVar11)))) {\n                uVar10 = 0xffffffff;\n            }\n            else {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar11 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.140016088();\n        *puVar7 = 0x16;\n        fcn.140019f10();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014000fd10;\ncode_r0x00014000fd0d:\n            uVar9 = -uVar9;\n            goto code_r0x00014000fd10;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x00014000fd10;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x00014000fd0d;\n        uVar10 = 1;\n        uVar9 = uVar12;\n    }\n    else {\n        uVar9 = 1;\n        uVar10 = uVar12;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar9 & uVar10) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x00014000fd10:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3433
    },
    "1400121d": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400121dc(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint32_t uVar1;\n    ulong uVar2;\n    bool bVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t arg3;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x14003d018 ^ auStack120;\n    cVar4 = *(arg1 + 0x39);\n    uVar6 = 0x78;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x0001400122a5:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400122a9:\n            cVar4 = fcn.140010150(arg1);\n        }\n        else if (cVar4 < 'T') {\n            if (cVar4 == 'S') {\ncode_r0x0001400122e8:\n                cVar4 = fcn.140013684(arg1);\n            }\n            else {\n                if (cVar4 != 'A') {\n                    if (cVar4 == 'C') {\ncode_r0x000140012268:\n                        cVar4 = fcn.140013434(arg1);\n                        goto code_r0x000140012304;\n                    }\n                    if (((cVar4 != 'E') && (cVar4 != 'F')) && (cVar4 != 'G')) goto code_r0x0001400125ee;\n                }\ncode_r0x000140012242:\n                cVar4 = fcn.140012f78(arg1);\n            }\n        }\n        else {\n            if (cVar4 == 'X') goto code_r0x0001400122ff;\n            if (cVar4 != 'Z') {\n                if (cVar4 != 'a') {\n                    if (cVar4 != 'c') goto code_r0x0001400125ee;\n                    goto code_r0x000140012268;\n                }\n                goto code_r0x000140012242;\n            }\n            cVar4 = fcn.140012e7c(arg1);\n        }\n    }\n    else if (cVar4 < 'p') {\n        if (cVar4 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14000fd40(arg1);\n        }\n        else {\n            if (((cVar4 == 'e') || (cVar4 == 'f')) || (cVar4 == 'g')) goto code_r0x000140012242;\n            if (cVar4 == 'i') goto code_r0x0001400122a5;\n            if (cVar4 != 'n') goto code_r0x0001400125ee;\n            cVar4 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (cVar4 == 'p') {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (cVar4 == 's') goto code_r0x0001400122e8;\n            if (cVar4 == 'u') goto code_r0x0001400122a9;\n            if (cVar4 != 'x') goto code_r0x0001400125ee;\n        }\ncode_r0x0001400122ff:\n        cVar4 = fcn.140010560(arg1);\n    }\ncode_r0x000140012304:\n    if ((cVar4 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x0001400125ee;\n    uVar1 = *(arg1 + 0x28);\n    arg3 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar1 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar1 >> 6 & 1) == 0) {\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 >> 1 & 1) == 0) goto code_r0x00014001235b;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        arg3 = 1;\n    }\ncode_r0x00014001235b:\n    cVar4 = *(arg1 + 0x39);\n    if (((cVar4 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar4 + 0xbfU & 0xdf) == 0)) {\n        auStack68[arg3 + -4] = 0x30;\n        if ((cVar4 == 'X') || (cVar4 == 'A')) {\n            uVar6 = 0x58;\n        }\n        auStack68[arg3 + -3] = uVar6;\n        arg3 = arg3 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if ((uVar1 & 0xc) == 0) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar5 = fcn.14001dea0(0x20, *(arg1 + 0x460), uVar2),  iVar5 != -1))) {\n                iVar5 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x000140012412;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x000140012412:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140013a90(arg1_00, &uStack72, arg3, arg4);\n    }\n    else {\n        *arg4 = *arg4 + arg3;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.14001dea0(0x30, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x0001400124ba;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x0001400124ba:\n    if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140013a90(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar7 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar5 = fcn.14001db60(&uStack72, auStack68, 6);\n            if ((iVar5 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.140013a90(arg1_00, auStack68, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.14001dea0(0x20, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x0001400125ee;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x0001400125ee:\n    fcn.14000a100(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2626
    },
    "14001261": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140012614(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint32_t uVar1;\n    int64_t *piVar2;\n    bool bVar3;\n    char cVar4;\n    int64_t arg3;\n    int32_t iVar5;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int64_t iVar9;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_bp_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x14003d018 ^ auStack120;\n    uVar6 = 0x78;\n    cVar4 = *(arg1 + 0x39);\n    iVar9 = 1;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x0001400126f3:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400126f7:\n            cVar4 = fcn.140010150(arg1);\n        }\n        else if (cVar4 < 'T') {\n            if (cVar4 == 'S') {\ncode_r0x00014001273a:\n                cVar4 = fcn.140013684(arg1);\n            }\n            else {\n                if (cVar4 != 'A') {\n                    if (cVar4 == 'C') {\ncode_r0x0001400126ad:\n                        cVar4 = fcn.140013434(arg1);\n                        goto code_r0x00014001275d;\n                    }\n                    if (((cVar4 != 'E') && (cVar4 != 'F')) && (cVar4 != 'G')) goto code_r0x0001400129eb;\n                }\ncode_r0x000140012684:\n                cVar4 = fcn.140012f78(arg1);\n            }\n        }\n        else {\n            if (cVar4 == 'X') goto code_r0x000140012755;\n            if (cVar4 != 'Z') {\n                if (cVar4 != 'a') {\n                    if (cVar4 != 'c') goto code_r0x0001400129eb;\n                    goto code_r0x0001400126ad;\n                }\n                goto code_r0x000140012684;\n            }\n            cVar4 = fcn.140012e7c(arg1);\n        }\n    }\n    else if (cVar4 < 'p') {\n        if (cVar4 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14000fd40(arg1);\n        }\n        else {\n            if (((cVar4 == 'e') || (cVar4 == 'f')) || (cVar4 == 'g')) goto code_r0x000140012684;\n            if (cVar4 == 'i') goto code_r0x0001400126f3;\n            if (cVar4 != 'n') goto code_r0x0001400129eb;\n            cVar4 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (cVar4 == 'p') {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (cVar4 == 's') goto code_r0x00014001273a;\n            if (cVar4 == 'u') goto code_r0x0001400126f7;\n            if (cVar4 != 'x') goto code_r0x0001400129eb;\n        }\ncode_r0x000140012755:\n        cVar4 = fcn.140010560(arg1);\n    }\ncode_r0x00014001275d:\n    if ((cVar4 != '\\0') && (*(arg1 + 0x38) == '\\0')) {\n        uVar1 = *(arg1 + 0x28);\n        uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n        arg3 = 0;\n        if ((uVar1 >> 4 & 1) != 0) {\n            uStack72._1_3_ = uStack72 >> 8;\n            if ((uVar1 >> 6 & 1) == 0) {\n                if ((uVar1 & 1) == 0) {\n                    if ((uVar1 >> 1 & 1) != 0) {\n                        uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n                        arg3 = iVar9;\n                    }\n                }\n                else {\n                    uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n                    arg3 = iVar9;\n                }\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n                arg3 = iVar9;\n            }\n        }\n        cVar4 = *(arg1 + 0x39);\n        if (((cVar4 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n            bVar3 = true;\n        }\n        else {\n            bVar3 = false;\n        }\n        if ((bVar3) || ((cVar4 + 0xbfU & 0xdf) == 0)) {\n            auStack68[arg3 + -4] = 0x30;\n            if ((cVar4 == 'X') || (cVar4 == 'A')) {\n                uVar6 = 0x58;\n            }\n            auStack68[arg3 + -3] = uVar6;\n            arg3 = arg3 + 2;\n        }\n        iVar5 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n        if (((uVar1 & 0xc) == 0) && (iVar8 = 0,  0 < iVar5)) {\n            iVar7 = *(arg1 + 0x20);\n            do {\n                iVar9 = *(arg1 + 0x460);\n                if (*(iVar9 + 0x10) == *(iVar9 + 8)) {\n                    if (*(iVar9 + 0x18) == '\\0') {\n                        iVar7 = -1;\n                    }\n                    else {\n                        iVar7 = iVar7 + 1;\n                    }\n                    *(arg1 + 0x20) = iVar7;\n                }\n                else {\n                    *(arg1 + 0x20) = iVar7 + 1;\n                    *(iVar9 + 0x10) = *(iVar9 + 0x10) + 1;\n                    ***(arg1 + 0x460) = 0x20;\n                    **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                }\n                iVar7 = *(arg1 + 0x20);\n            } while ((iVar7 != -1) && (iVar8 = iVar8 + 1,  iVar8 < iVar5));\n        }\n        uStack88 = *(arg1 + 8);\n        arg4 = arg1 + 0x20;\n        arg1_00 = arg1 + 0x460;\n        fcn.140013944(arg1_00, &uStack72, arg3, arg4);\n        if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar8 = 0,  0 < iVar5)))) {\n            iVar7 = *arg4;\n            do {\n                piVar2 = *arg1_00;\n                if (piVar2[2] == piVar2[1]) {\n                    if (*(piVar2 + 3) == '\\0') {\n                        iVar7 = -1;\n                    }\n                    else {\n                        iVar7 = iVar7 + 1;\n                    }\n                    *arg4 = iVar7;\n                }\n                else {\n                    *arg4 = iVar7 + 1;\n                    piVar2[2] = piVar2[2] + 1;\n                    ***arg1_00 = 0x30;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar7 = *arg4;\n            } while ((iVar7 != -1) && (iVar8 = iVar8 + 1,  iVar8 < iVar5));\n        }\n        if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140013944(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            iVar8 = 0;\n            do {\n                uStack88 = *(arg1 + 8);\n                uStack72 = 0;\n                iVar7 = fcn.14001db60(&uStack72, auStack68, 6);\n                if ((iVar7 != 0) || (uStack72 == 0)) {\n                    *arg4 = -1;\n                    break;\n                }\n                uStack88 = *(arg1 + 8);\n                fcn.140013944(arg1_00, auStack68, uStack72, arg4);\n                iVar8 = iVar8 + 1;\n            } while (iVar8 != *(arg1 + 0x48));\n        }\n        iVar8 = *arg4;\n        if (((-1 < iVar8) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar7 = 0,  0 < iVar5)) {\n            do {\n                piVar2 = *arg1_00;\n                if (piVar2[2] == piVar2[1]) {\n                    if (*(piVar2 + 3) == '\\0') {\n                        iVar8 = -1;\n                    }\n                    else {\n                        iVar8 = iVar8 + 1;\n                    }\n                    *arg4 = iVar8;\n                }\n                else {\n                    *arg4 = iVar8 + 1;\n                    piVar2[2] = piVar2[2] + 1;\n                    ***arg1_00 = 0x20;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar8 = *arg4;\n            } while ((iVar8 != -1) && (iVar7 = iVar7 + 1,  iVar7 < iVar5));\n        }\n    }\ncode_r0x0001400129eb:\n    fcn.14000a100(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2517
    },
    "140012a1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140012a18(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    char cVar5;\n    uint16_t uVar6;\n    uint64_t uVar7;\n    int32_t iVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint32_t uVar12;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort auStack72 [2];\n    uint uStack68;\n    ushort uStack64;\n    uint64_t uStack56;\n    uint64_t uVar13;\n    \n    uStack56 = *0x14003d018 ^ auStack120;\n    uVar9 = 0x78;\n    uVar6 = *(arg1 + 0x3a);\n    if (uVar6 < 0x65) {\n        if (uVar6 == 100) {\ncode_r0x000140012af5:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140012af9:\n            cVar5 = fcn.140010354(arg1);\n        }\n        else if (uVar6 < 0x54) {\n            if (uVar6 == 0x53) {\ncode_r0x000140012b3b:\n                cVar5 = fcn.140013720(arg1);\n            }\n            else {\n                if (uVar6 != 0x41) {\n                    if (uVar6 == 0x43) {\ncode_r0x000140012aaf:\n                        cVar5 = fcn.140013508(arg1);\n                        goto code_r0x000140012b5d;\n                    }\n                    if (((uVar6 != 0x45) && (uVar6 != 0x46)) && (uVar6 != 0x47)) goto code_r0x000140012e51;\n                }\ncode_r0x000140012a87:\n                cVar5 = fcn.1400131cc(arg1);\n            }\n        }\n        else {\n            if (uVar6 == 0x58) goto code_r0x000140012b55;\n            if (uVar6 != 0x5a) {\n                if (uVar6 != 0x61) {\n                    if (uVar6 != 99) goto code_r0x000140012e51;\n                    goto code_r0x000140012aaf;\n                }\n                goto code_r0x000140012a87;\n            }\n            cVar5 = fcn.140012ef8(arg1);\n        }\n    }\n    else if (uVar6 < 0x70) {\n        if (uVar6 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar5 = fcn.14000ff44(arg1);\n        }\n        else {\n            if (((uVar6 == 0x65) || (uVar6 == 0x66)) || (uVar6 == 0x67)) goto code_r0x000140012a87;\n            if (uVar6 == 0x69) goto code_r0x000140012af5;\n            if (uVar6 != 0x6e) goto code_r0x000140012e51;\n            cVar5 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (uVar6 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar6 == 0x73) goto code_r0x000140012b3b;\n            if (uVar6 == 0x75) goto code_r0x000140012af9;\n            if (uVar6 != 0x78) goto code_r0x000140012e51;\n        }\ncode_r0x000140012b55:\n        cVar5 = fcn.140010764(arg1);\n    }\ncode_r0x000140012b5d:\n    uVar11 = 0;\n    if ((cVar5 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x000140012e51;\n    uVar12 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = 0;\n    uVar7 = uVar11;\n    if ((uVar12 >> 4 & 1) != 0) {\n        if ((uVar12 >> 6 & 1) == 0) {\n            if ((uVar12 & 1) != 0) {\n                uVar6 = 0x2b;\n                goto code_r0x000140012ba3;\n            }\n            if ((uVar12 >> 1 & 1) == 0) goto code_r0x000140012bc9;\n            uStack68 = 0x20;\n        }\n        else {\n            uVar6 = 0x2d;\ncode_r0x000140012ba3:\n            uStack68 = uVar6;\n        }\n        uVar7 = 1;\n    }\ncode_r0x000140012bc9:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || (bVar4 = true,  (uVar12 >> 5 & 1) == 0)) {\n        bVar4 = false;\n    }\n    if ((bVar4) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack68 + uVar7 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar9 = 0x58;\n        }\n        *(&uStack68 + uVar7 * 2 + 2) = uVar9;\n        uVar7 = uVar7 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - uVar7) - *(arg1 + 0x48);\n    if (((uVar12 & 0xc) == 0) && (0 < iVar8)) {\n        iVar10 = *(arg1 + 0x20);\n        uVar13 = uVar11;\n        do {\n            iVar2 = *(arg1 + 0x460);\n            if (*(iVar2 + 0x10) == *(iVar2 + 8)) {\n                if (*(iVar2 + 0x18) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *(arg1 + 0x20) = iVar10;\n            }\n            else {\n                *(arg1 + 0x20) = iVar10 + 1;\n                *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n            }\n            iVar10 = *(arg1 + 0x20);\n        } while ((iVar10 != -1) && (uVar12 = uVar13 + 1,  uVar13 = uVar12,  uVar12 < iVar8));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.1400139e8(arg1_00, &uStack68, uVar7, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar8)))) {\n        iVar10 = *arg4;\n        uVar7 = uVar11;\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *arg4 = iVar10;\n            }\n            else {\n                *arg4 = iVar10 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar10 = *arg4;\n        } while ((iVar10 != -1) && (uVar12 = uVar7 + 1,  uVar7 = uVar12,  uVar12 < iVar8));\n    }\n    if ((*(arg1 + 0x4c) == '\\0') && (0 < *(arg1 + 0x48))) {\n        iVar2 = *(arg1 + 8);\n        if (*(iVar2 + 0x28) == '\\0') {\n            fcn.140013830(iVar2);\n        }\n        arg2 = *(arg1 + 0x40);\n        uVar7 = uVar11;\n        if (*(arg1 + 0x48) != 0) {\n            do {\n                auStack72[0] = 0;\n                iVar10 = fcn.14001dd10(auStack72, arg2, *(*(iVar2 + 0x18) + 8), *(arg1 + 8));\n                if (iVar10 < 1) {\n                    *arg4 = -1;\n                    break;\n                }\n                piVar3 = *arg1_00;\n                if (piVar3[2] == piVar3[1]) {\n                    if (*(piVar3 + 3) == '\\0') {\n                        *arg4 = -1;\n                    }\n                    else {\n                        *arg4 = *arg4 + 1;\n                    }\n                }\n                else {\n                    *arg4 = *arg4 + 1;\n                    piVar3[2] = piVar3[2] + 1;\n                    ***arg1_00 = auStack72[0];\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar10;\n                uVar12 = uVar7 + 1;\n                uVar7 = uVar12;\n            } while (uVar12 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.1400139e8(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar10 = *arg4;\n    if (((-1 < iVar10) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (0 < iVar8)) {\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *arg4 = iVar10;\n            }\n            else {\n                *arg4 = iVar10 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar10 = *arg4;\n        } while ((iVar10 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\ncode_r0x000140012e51:\n    fcn.14000a100(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2768
    },
    "14001368": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140013684(int64_t arg1)\n\n{\n    int32_t iVar1;\n    char **ppcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    char *arg1_00;\n    \n    ppcVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppcVar2 + 1;\n    arg1_00 = *ppcVar2;\n    iVar3 = *(arg1 + 0x30);\n    iVar1 = *(arg1 + 0x34);\n    if (iVar3 == -1) {\n        iVar3 = 0x7fffffff;\n    }\n    *(arg1 + 0x40) = arg1_00;\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        if (arg1_00 == NULL) {\n            arg1_00 = \"(null)\";\n            *(arg1 + 0x40) = \"(null)\";\n        }\n        uVar4 = fcn.140016174(arg1_00, iVar3);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x140031560;\n            *(arg1 + 0x40) = 0x140031560;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar4 = fcn.1400162c4(arg1_00, iVar3);\n    }\n    *(arg1 + 0x48) = uVar4;\n    return 1;\n}\n",
        "token_count": 395
    },
    "14001372": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140013720(ulong *arg1)\n\n{\n    char **ppcVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    char *pcVar5;\n    char *arg1_00;\n    \n    ppcVar1 = arg1[3];\n    arg1[3] = ppcVar1 + 1;\n    uVar3 = *(arg1 + 6);\n    arg1_00 = *ppcVar1;\n    if (uVar3 == 0xffffffff) {\n        uVar3 = 0x7fffffff;\n    }\n    arg1[8] = arg1_00;\n    cVar2 = fcn.14000f2d4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cVar2 == '\\0') {\n        pcVar5 = \"(null)\";\n        if (arg1_00 != NULL) {\n            pcVar5 = arg1_00;\n        }\n        arg1[8] = pcVar5;\n        uVar4 = fcn.1400137bc(arg1, uVar3);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x140031560;\n            arg1[8] = 0x140031560;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar4 = fcn.1400162c4(arg1_00, uVar3);\n    }\n    *(arg1 + 9) = uVar4;\n    return 1;\n}\n",
        "token_count": 358
    },
    "140013a9": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140013a90(int64_t *arg1, char *arg2, ulong arg3, int32_t *arg4)\n\n{\n    ulong uVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    bool bVar4;\n    int64_t in_stack_00000028;\n    \n    pcVar3 = arg2 + arg3;\n    bVar4 = arg2 == pcVar3;\n    uVar1 = *(in_stack_00000028 + 0x2c);\n    do {\n        if (bVar4) {\ncode_r0x000140013b3f:\n            *(in_stack_00000028 + 0x2c) = uVar1;\n            return;\n        }\n        if (((*(*arg1 + 0x14) >> 0xc & 1) == 0) || (*(*arg1 + 8) != 0)) {\n            iVar2 = fcn.14001dea0(*arg2, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x000140013b2d;\n            if ((*(in_stack_00000028 + 0x30) == '\\0') || (*(in_stack_00000028 + 0x2c) != 0x2a)) {\n                *arg4 = -1;\n                goto code_r0x000140013b3f;\n            }\n            if (((*(*arg1 + 0x14) >> 0xc & 1) != 0) && (*(*arg1 + 8) == 0)) goto code_r0x000140013b2d;\n            iVar2 = fcn.14001dea0(0x3f, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x000140013b2d;\n            *arg4 = -1;\n        }\n        else {\ncode_r0x000140013b2d:\n            *arg4 = *arg4 + 1;\n        }\n        arg2 = arg2 + 1;\n        bVar4 = arg2 == pcVar3;\n    } while( true );\n}\n",
        "token_count": 478
    },
    "140015a4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140015a4c(ulong noname_0, ulong *arg2, int64_t **arg3, ulong *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    fcn.14001438c(*arg2);\n    if ((**arg3 != 0) && (uVar1 = *(**arg3 + 0x14),  (uVar1 >> 0xd & 1) != 0)) {\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            if ((*arg3[2] != '\\0') || ((*(**arg3 + 0x14) >> 1 & 1) != 0)) {\n                iVar2 = fcn.140015cf8(**arg3);\n                if (iVar2 == -1) {\n                    *arg3[3] = 0xffffffff;\n                }\n                else {\n                    *arg3[1] = *arg3[1] + 1;\n                }\n            }\n        }\n        else {\n            *arg3[1] = *arg3[1] + 1;\n        }\n    }\n    fcn.140014398(*arg4);\n    return;\n}\n",
        "token_count": 296
    },
    "1400174e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.1400174ec(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    if (arg1 != 0) {\n        fcn.14001438c(arg1);\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xffffffe7;\n        iVar1 = fcn.1400192e4(arg1);\n        if ((iVar1 == -1) || (iVar1 = fcn.1400192e4(arg1),  iVar1 == -2)) {\n            iVar4 = 0x14003d3e0;\n        }\n        else {\n            iVar1 = fcn.1400192e4(arg1);\n            uVar2 = fcn.1400192e4(arg1);\n            iVar4 = (uVar2 & 0x3f) * 0x48 + *((iVar1 >> 6) * 8 + 0x14004ca30);\n        }\n        *(iVar4 + 0x38) = *(iVar4 + 0x38) & 0xfd;\n        fcn.140014398(arg1);\n        return 0;\n    }\n    puVar3 = fcn.140016088();\n    *puVar3 = 0x16;\n    fcn.140019f10();\n    return 0x16;\n}\n",
        "token_count": 319
    },
    "1400193c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.1400193c4(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack168;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.140016088();\n        *puVar7 = 0x16;\n        fcn.140019f10();\ncode_r0x000140019440:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        goto code_r0x000140019440;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    if (*(arg1 + 0x28) == '\\0') {\n        fcn.140013830(arg1);\n    }\n    while (iVar5 = fcn.140017b40(uVar11, 8),  iVar5 != 0) {\n        uVar11 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    iStack168 = 0xae6;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x0001400197fc;\n    if (uVar11 < 0x30) goto code_r0x000140019781;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x0001400195c6:\n        iVar5 = uVar11 - iVar5;\ncode_r0x00014001977c:\n        if (iVar5 == -1) goto code_r0x000140019781;\ncode_r0x0001400197a7:\n        if (iVar5 != 0) goto code_r0x000140019856;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.140016088();\n                *puVar7 = 0x16;\n                fcn.140019f10();\n            }\n            goto code_r0x0001400197fc;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x00014001977c;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x00014001977c;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x00014001977c;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x00014001977c;\n                            }\n                            if (0xa65 < uVar11) {\n                                if (uVar11 < 0xa70) {\n                                    iVar5 = uVar11 - 0xa66;\n                                    goto code_r0x00014001977c;\n                                }\n                                if ((0xae5 < uVar11) &&\n                                   ((iVar5 = iStack168,  uVar11 < 0xaf0 ||\n                                    ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                     ((uVar11 < 0xb70 ||\n                                      ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                       ((uVar11 < 0xc70 ||\n                                        ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                         ((uVar11 < 0xcf0 ||\n                                          ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                           ((uVar11 < 0xd70 ||\n                                            ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                             ((uVar11 < 0xe5a ||\n                                              ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                               ((uVar11 < 0xeda ||\n                                                ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                                 ((uVar11 < 0xf2a ||\n                                                  ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                   ((uVar11 < 0x104a ||\n                                                    ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                     ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))\n                                                  )))))))))))))))))))))))))))))))) goto code_r0x0001400195c6;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x00014001977c;\n        }\ncode_r0x000140019781:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x0001400197a7;\n        }\ncode_r0x000140019856:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x0001400197fc:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x0001400199eb;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x0001400199e6:\n            if (uVar10 == 0xffffffff) goto code_r0x0001400199eb;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x0001400199e6;\n                    }\n                    if (0x6ef < uVar11) {\n                        iVar5 = 0x6f0;\n                        if (uVar11 < 0x6fa) {\ncode_r0x00014001989a:\n                            uVar10 = uVar11 - iVar5;\n                            goto code_r0x0001400199e6;\n                        }\n                        if (0x965 < uVar11) {\n                            iVar5 = 0x966;\n                            if (uVar11 < 0x970) goto code_r0x00014001989a;\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) goto code_r0x00014001989a;\n                                if (0xa65 < uVar11) {\n                                    iVar5 = 0xa66;\n                                    if (uVar11 < 0xa70) goto code_r0x00014001989a;\n                                    if (0xae5 < uVar11) {\n                                        iVar5 = iStack168;\n                                        if (uVar11 < 0xaf0) goto code_r0x00014001989a;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x00014001989a;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x00014001989a;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x00014001989a;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x00014001989a;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x00014001989a;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x00014001989a;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x00014001989a;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x00014001989a;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x00014001989a;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x0001400199e6;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x0001400199e6;\n            }\ncode_r0x0001400199eb:\n            uVar10 = uVar11;\n            if (((uVar11 < 0x41) || (0x5a < uVar11)) && ((uVar11 < 0x61 || (0x7a < uVar11)))) {\n                uVar10 = 0xffffffff;\n            }\n            else {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar11 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.140016088();\n        *puVar7 = 0x16;\n        fcn.140019f10();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x000140019b31;\ncode_r0x000140019b2e:\n            uVar9 = -uVar9;\n            goto code_r0x000140019b31;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x000140019b31;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x000140019b2e;\n        uVar10 = 1;\n        uVar9 = uVar12;\n    }\n    else {\n        uVar9 = 1;\n        uVar10 = uVar12;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar9 & uVar10) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x000140019b31:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3521
    },
    "14001a85": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14001a854(ulong noname_0, ulong lpFlsData)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*0x14003d16c == -1) || (iVar3 = sub.KERNEL32.dll_FlsGetValue(),  iVar3 == 0)) {\n        iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.14001deb8(1, 0x3c8);\n            if (iVar3 == 0) {\n                sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0);\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, iVar3);\n                if (iVar2 != 0) {\n                    fcn.14001a524(iVar3);\n                    fcn.140019f78(0);\n                    return iVar3;\n                }\n                sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0);\n            }\n            fcn.140019f78(iVar3);\n        }\n    }\n    else if (iVar3 != -1) {\n        return iVar3;\n    }\n    fcn.14001936c();\n    pcVar1 = swi(3);\n    iVar3 = (*pcVar1)();\n    return iVar3;\n}\n",
        "token_count": 338
    },
    "14001a9c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14001a9c0(ulong noname_0, int64_t lpFlsData)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if ((*0x14003d16c == -1) || (arg1 = sub.KERNEL32.dll_FlsGetValue(),  arg1 == 0)) {\n        iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0xffffffffffffffff);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        arg1 = fcn.14001deb8(1, 0x3c8);\n        if (arg1 == 0) {\n            sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0);\n            arg1 = 0;\n        }\n        else {\n            iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, arg1);\n            if (iVar1 != 0) {\n                fcn.14001a524(arg1);\n                fcn.140019f78(0);\n                goto code_r0x00014001aa61;\n            }\n            sub.KERNEL32.dll_FlsSetValue(*0x14003d16c, 0);\n        }\n        fcn.140019f78(arg1);\n    }\n    else {\n        if (arg1 == -1) {\n            return 0;\n        }\ncode_r0x00014001aa61:\n        iVar2 = lpFlsData * 0x3c8 + arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 364
    },
    "14001aac": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14001aac0(void)\n\n{\n    if (*0x14003d16c != -1) {\n        sub.KERNEL32.dll_FlsFree();\n        *0x14003d16c = -1;\n    }\n    return 1;\n}\n",
        "token_count": 58
    },
    "14001bbd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001bbd0(ulong *arg1, ulong arg2, uint8_t *arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint uVar3;\n    uint64_t uVar4;\n    char *pcVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint8_t *puVar11;\n    uint64_t uVar12;\n    int64_t arg3_00;\n    ulong uVar13;\n    int32_t iVar14;\n    uint64_t uVar15;\n    int64_t iVar16;\n    uchar *in_stack_00000028;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    uint uStack224;\n    ulong uStack216;\n    ulong uStack208;\n    uint16_t auStack200 [2];\n    uint uStack196;\n    uint32_t auStack192 [2];\n    uint8_t *puStack184;\n    uchar *puStack176;\n    uint64_t uStack168;\n    uint32_t uStack160;\n    int32_t iStack156;\n    uint8_t *puStack152;\n    int64_t iStack144;\n    ulong uStack136;\n    uchar *puStack128;\n    uint8_t *puStack120;\n    ulong uStack112;\n    int64_t iStack104;\n    ulong uStack96;\n    uchar auStack88 [8];\n    uint8_t uStack80;\n    uint8_t uStack79;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack64 = *0x14003d018 ^ auStack264;\n    puStack176 = in_stack_00000028;\n    iVar16 = arg2 >> 6;\n    uVar4 = arg2 & 0x3f;\n    uStack112 = *(*(iVar16 * 8 + 0x14004ca30) + 0x28 + uVar4 * 0x48);\n    puStack184 = arg3 + (arg4 & 0xffffffff);\n    puStack152 = arg3;\n    iStack144 = iVar16;\n    uStack160 = (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n    uVar12 = 0;\n    if (puStack176[0x28] == '\\0') {\n        fcn.140013830(puStack176);\n    }\n    iStack156 = *(*(puStack176 + 0x18) + 0xc);\n    *arg1 = 0;\n    *(arg1 + 1) = 0;\n    uVar6 = uVar12;\n    iVar9 = iVar16;\n    if (puStack152 < arg3 + (arg4 & 0xffffffff)) {\n        do {\n            iStack104 = iVar9;\n            auStack200[0] = auStack200[0] & 0xff00 | *arg3;\n            uStack196 = 0;\n            uVar15 = 1;\n            if (iStack156 == 0xfde9) {\n                pcVar5 = uVar4 * 0x48 + 0x3e + *(iStack104 * 8 + 0x14004ca30);\n                uVar6 = uVar12;\n                uVar15 = uVar12;\n                do {\n                    uVar7 = uVar6;\n                    if (*pcVar5 == '\\0') break;\n                    uVar7 = uVar7 + 1;\n                    uVar6 = uVar7;\n                    uVar15 = uVar15 + 1;\n                    pcVar5 = pcVar5 + 1;\n                } while (uVar15 < 5);\n                if (uVar15 < 1) {\n                    cVar2 = *(*arg3 + 0x14003d2e0);\n                    iVar14 = cVar2 + 1;\n                    iVar16 = puStack184 - arg3;\n                    if (iVar16 < iVar14) {\n                        uVar6 = uVar12;\n                        if (0 < iVar16) {\n                            do {\n                                *(*(iStack144 * 8 + 0x14004ca30) + uVar12 + 0x3e + uVar4 * 0x48) = arg3[uVar12];\n                                uVar7 = uVar6 + 1;\n                                uVar12 = uVar12 + 1;\n                                uVar6 = uVar7;\n                            } while (uVar7 < iVar16);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar16;\n                        break;\n                    }\n                    uStack168 = 0;\n                    uVar7 = (iVar14 == 4) + 1;\n                    puStack232 = puStack176;\n                    puStack120 = arg3;\n                    iVar16 = fcn.14001f5fc(&uStack196, &puStack120, uVar7, &uStack168);\n                    if (iVar16 == -1) break;\n                    uVar15 = uVar7;\n                    puVar11 = arg3 + cVar2;\n                    iVar16 = iStack144;\n                }\n                else {\n                    iVar14 = *(*(*(iVar16 * 8 + 0x14004ca30) + 0x3e + uVar4 * 0x48) + 0x14003d2e0) + 1;\n                    uVar7 = iVar14 - uVar7;\n                    uStack168 = uStack168 & 0xffffffff00000000 | uVar7;\n                    iVar9 = puStack184 - arg3;\n                    arg3_00 = uVar7;\n                    if (iVar9 < arg3_00) {\n                        if (0 < iVar9) {\n                            uVar6 = uVar15;\n                            do {\n                                *(*(iVar16 * 8 + 0x14004ca30) + uVar6 + 0x3e + uVar4 * 0x48) = arg3[uVar6 - uVar15];\n                                uVar7 = uVar12 + 1;\n                                uVar12 = uVar7;\n                                uVar6 = uVar6 + 1;\n                            } while (uVar7 < iVar9);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar9;\n                        break;\n                    }\n                    puVar10 = uVar4 * 0x48 + 0x3e + *(iStack104 * 8 + 0x14004ca30);\n                    uVar6 = uVar12;\n                    do {\n                        auStack88[uVar6] = *puVar10;\n                        uVar6 = uVar6 + 1;\n                        puVar10 = puVar10 + 1;\n                    } while (uVar6 < uVar15);\n                    uVar6 = uVar12;\n                    if (0 < arg3_00) {\n                        fcn.14000aec0(auStack88 + uVar15, arg3, arg3_00);\n                    }\n                    do {\n                        *(*(iVar16 * 8 + 0x14004ca30) + uVar6 + 0x3e + uVar4 * 0x48) = 0;\n                        uVar6 = uVar6 + 1;\n                    } while (uVar6 < uVar15);\n                    uStack136 = 0;\n                    puStack128 = auStack88;\n                    uVar7 = (iVar14 == 4) + 1;\n                    uVar15 = uVar7;\n                    puStack232 = puStack176;\n                    iVar9 = fcn.14001f5fc(&uStack196, &puStack128, uVar7, &uStack136);\n                    if (iVar9 == -1) break;\n                    puVar11 = arg3 + (uStack168 + -1);\n                }\n            }\n            else {\n                iVar9 = *(iVar16 * 8 + 0x14004ca30);\n                uVar1 = *(iVar9 + 0x3d + uVar4 * 0x48);\n                if ((uVar1 & 4) == 0) {\n                    if (*(**(puStack176 + 0x18) + *arg3 * 2) < 0) {\n                        puVar11 = arg3 + 1;\n                        if (puVar11 < puStack184) {\n                            iVar14 = fcn.14001dd10(&uStack196, arg3, 2, puStack176);\n                            if (iVar14 != -1) goto code_r0x00014001bec6;\n                        }\n                        else {\n                            *(iVar9 + 0x3e + uVar4 * 0x48) = *arg3;\n                            puVar11 = *(iVar16 * 8 + 0x14004ca30) + 0x3d + uVar4 * 0x48;\n                            *puVar11 = *puVar11 | 4;\n                            *(arg1 + 4) = uVar6 + 1;\n                        }\n                        break;\n                    }\n                    uVar13 = 1;\n                    puVar11 = arg3;\n                }\n                else {\n                    uStack80 = *(iVar9 + 0x3e + uVar4 * 0x48);\n                    uStack79 = *arg3;\n                    *(iVar9 + 0x3d + uVar4 * 0x48) = uVar1 & 0xfb;\n                    uVar13 = 2;\n                    puVar11 = &uStack80;\n                }\n                iVar14 = fcn.14001dd10(&uStack196, puVar11, uVar13, puStack176);\n                puVar11 = arg3;\n                if (iVar14 == -1) break;\n            }\ncode_r0x00014001bec6:\n            arg3 = puVar11 + 1;\n            uStack208 = 0;\n            uStack216 = 0;\n            uStack224 = 5;\n            puStack232 = auStack72;\n            uVar7 = fcn.14001f138(uStack160, 0, &uStack196, uVar15);\n            uVar13 = uStack112;\n            if (uVar7 == 0) break;\n            puStack232 = NULL;\n            iVar14 = (*_sym.imp.KERNEL32.dll_WriteFile)(uStack112, auStack72, uVar7, auStack192);\n            if (iVar14 == 0) {\ncode_r0x00014001c013:\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                *arg1 = uVar3;\n                break;\n            }\n            uVar8 = (arg3 - puStack152) + *(arg1 + 1);\n            *(arg1 + 4) = uVar8;\n            if (auStack192[0] < uVar7) break;\n            if (auStack200[0] == '\\n') {\n                auStack200[0] = 0xd;\n                puStack232 = NULL;\n                iVar14 = (*_sym.imp.KERNEL32.dll_WriteFile)(uVar13, auStack200, 1, auStack192);\n                if (iVar14 == 0) goto code_r0x00014001c013;\n                if (auStack192[0] == 0) break;\n                *(arg1 + 1) = *(arg1 + 1) + 1;\n                *(arg1 + 4) = *(arg1 + 4) + 1;\n                uVar8 = *(arg1 + 4);\n            }\n            uVar6 = uVar8;\n            iVar9 = iStack104;\n        } while (arg3 < puStack184);\n    }\n    fcn.14000a100(uStack64 ^ auStack264);\n    return;\n}\n",
        "token_count": 2596
    },
    "14001e4c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.14001e4c4(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    fcn.14001f808(8);\n    for (iVar3 = 3; iVar3 != *0x14004c780; iVar3 = iVar3 + 1) {\n        iVar4 = iVar3;\n        iVar1 = *(*0x14004c788 + iVar4 * 8);\n        if (iVar1 != 0) {\n            if (((*(iVar1 + 0x14) >> 0xd & 1) != 0) &&\n               (iVar2 = fcn.14000e60c(*(*0x14004c788 + iVar4 * 8)),  iVar2 != -1)) {\n                iStack24 = iStack24 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(*(*0x14004c788 + iVar4 * 8) + 0x30);\n            fcn.140019f78(*(*0x14004c788 + iVar4 * 8));\n            *(*0x14004c788 + iVar4 * 8) = 0;\n        }\n    }\n    fcn.14001f868(8);\n    return iStack24;\n}\n",
        "token_count": 308
    },
    "14001eb9": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_3ch\n\nvoid fcn.14001eb90(ulong arg1, ulong arg2, ulong arg3, ulong arg4, ulong noname_4, ulong noname_5, ulong noname_6, \n                  ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong arg_68h, ulong arg_70h, \n                  ulong arg_78h)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uchar auStack184 [32];\n    ulong uStack152;\n    uint uStack136;\n    uint uStack132;\n    int32_t iStack128;\n    uint32_t uStack124;\n    uint32_t uStack120;\n    uint32_t uStack116;\n    uint32_t uStack112;\n    uint32_t uStack104;\n    uint32_t uStack100;\n    int32_t iStack92;\n    uint64_t var_48h;\n    ulong var_3ch;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_1ch;\n    ulong var_10h;\n    \n    var_48h = *0x14003d018 ^ auStack184;\n    uVar5 = arg1 - 0x76c;\n    iVar3 = arg2;\n    iVar6 = iVar3;\n    if ((((((uVar5 < 0x46) || (0x44d < uVar5)) || (uStack124 = iVar3 - 1,  0xb < uStack124)) || (arg3 < 1)) ||\n        ((*(iVar6 * 4 + 0x1400376d0) - *(iVar6 * 4 + 0x1400376cc) < arg3 &&\n         (((cVar2 = fcn.14001e900(uVar5, arg2),  cVar2 == '\\0' || (iVar3 != 2)) || (0x1d < arg3)))))) ||\n       (((0x17 < arg4 || (0x3b < noname_4)) || (0x3b < noname_5)))) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n    }\n    else {\n        arg3._0_4_ = arg3 + *(iVar6 * 4 + 0x1400376cc);\n        cVar2 = fcn.14001e900(uVar5, arg2);\n        if ((cVar2 != '\\0') && (2 < iVar3)) {\n            arg3._0_4_ = arg3 + 1;\n        }\n        fcn.140025434();\n        iStack128 = 0;\n        uStack132 = 0;\n        uStack136 = 0;\n        iVar3 = fcn.140024838(&iStack128);\n        if (((iVar3 != 0) || (iVar3 = fcn.140024868(&uStack132),  iVar3 != 0)) ||\n           (iVar3 = fcn.140024898(&uStack136),  iVar3 != 0)) {\n            uStack152 = 0;\n            fcn.140019f30(0, 0, 0, 0);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (noname_6 != 1) {\n            uStack104 = uStack124;\n            uStack116 = noname_4;\n            uStack120 = noname_5;\n            uStack112 = arg4;\n            uStack100 = uVar5;\n            iStack92 = arg3;\n            if ((noname_6 == -1) && (iStack128 != 0)) {\n                fcn.140025478(&uStack120);\n            }\n        }\n    }\n    fcn.14000a100(var_48h ^ auStack184);\n    return;\n}\n",
        "token_count": 955
    },
    "1400258a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.1400258a0(ulong arg1, uint8_t *arg2, ulong arg3, char *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint32_t *puVar5;\n    uint *puVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint64_t uVar9;\n    uint32_t auStackX8 [2];\n    \n    uVar9 = arg1;\n    iVar8 = 0;\n    *arg4 = '\\0';\n    if (-1 < *(*((uVar9 >> 6) * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48)) {\n        return 0;\n    }\n    if ((arg3 & 0x74000) == 0) {\n        auStackX8[0] = 0;\n        iVar2 = fcn.1400157dc(auStackX8);\n        if (iVar2 != 0) {\n            fcn.140019f30(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar9 = (*pcVar1)();\n            return uVar9;\n        }\n        if ((auStackX8[0] & 0x74000) == 0) {\n            arg3._0_4_ = arg3 | 0x4000;\n        }\n        else {\n            arg3._0_4_ = arg3 | auStackX8[0] & 0x74000;\n        }\n    }\n    uVar7 = arg3 & 0x74000;\n    iVar2 = 2;\n    if (uVar7 == 0x4000) {\n        *arg4 = '\\0';\n    }\n    else if ((uVar7 - 0x10000 & 0xffffbfff) == 0) {\n        if ((arg3 & 0x301) == 0x301) goto code_r0x000140025967;\n    }\n    else if ((uVar7 - 0x20000 & 0xffffbfff) == 0) {\ncode_r0x000140025967:\n        *arg4 = '\\x02';\n    }\n    else if ((uVar7 - 0x40000 & 0xffffbfff) == 0) {\n        *arg4 = '\\x01';\n    }\n    if ((arg3 & 0x70000) == 0) {\n        return 0;\n    }\n    if ((*arg2 & 0x40) != 0) {\n        return 0;\n    }\n    uVar7 = *(arg2 + 4) & 0xc0000000;\n    if (uVar7 == 0x40000000) {\ncode_r0x0001400259ab:\n        iVar3 = *(arg2 + 8);\n        if ((iVar3 != 1) && (iVar3 != 2)) {\n            if ((iVar3 == 3) || (iVar3 == 4)) {\n                iVar4 = fcn.14001b8b4(uVar9 & 0xffffffff, 0);\n                if (iVar4 != 0) {\n                    iVar4 = fcn.14001b8b4(arg1, 0, 0);\n                    if (iVar4 == -1) goto code_r0x000140025a14;\n                    if ((*(arg2 + 4) & 0x80000000) == 0) {\n                        return 0;\n                    }\n                    goto code_r0x000140025a29;\n                }\n            }\n            else if (iVar3 != 5) {\n                return 0;\n            }\n        }\n        if (*arg4 == '\\x01') {\n            iVar2 = 3;\n            auStackX8[0] = 0xbfbbef;\n        }\n        else {\n            if (*arg4 != '\\x02') {\n                return 0;\n            }\n            auStackX8[0] = 0xfeff;\n        }\n        while (iVar3 = fcn.14001c3d8(uVar9 & 0xffffffff, auStackX8 + iVar8, iVar2 - iVar8),  iVar3 != -1) {\n            iVar8 = iVar8 + iVar3;\n            if (iVar2 <= iVar8) {\n                return 0;\n            }\n        }\n        goto code_r0x000140025a14;\n    }\n    if (uVar7 != 0x80000000) {\n        if (uVar7 != 0xc0000000) {\n            return 0;\n        }\n        goto code_r0x0001400259ab;\n    }\ncode_r0x000140025a29:\n    auStackX8[0] = 0;\n    iVar8 = fcn.14001b08c(uVar9 & 0xffffffff, auStackX8, 3);\n    if (iVar8 == -1) goto code_r0x000140025a14;\n    if (iVar8 == 2) {\ncode_r0x000140025a62:\n        if ((auStackX8[0] & 0xffff) == 0xfffe) {\n            puVar6 = fcn.140016088();\n            *puVar6 = 0x16;\n            goto code_r0x000140025a14;\n        }\n        if ((auStackX8[0] & 0xffff) == 0xfeff) {\n            iVar4 = fcn.14001b8b4(uVar9 & 0xffffffff, 2, 0);\n            if (iVar4 != -1) {\n                *arg4 = '\\x02';\n                return 0;\n            }\n            goto code_r0x000140025a14;\n        }\n    }\n    else if (iVar8 == 3) {\n        if (auStackX8[0] == 0xbfbbef) {\n            *arg4 = '\\x01';\n            return 0;\n        }\n        goto code_r0x000140025a62;\n    }\n    iVar4 = fcn.14001b8b4(uVar9 & 0xffffffff, 0, 0);\n    if (iVar4 != -1) {\n        return 0;\n    }\ncode_r0x000140025a14:\n    puVar5 = fcn.140016088();\n    return *puVar5;\n}\n",
        "token_count": 1419
    },
    "140025de": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140025dec(uint *arg1, uint32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uchar (*pauVar6) [16];\n    uint *puVar7;\n    int32_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uchar auStack168 [8];\n    uchar auStack160 [4];\n    uint32_t uStack156;\n    ulong uStack152;\n    ulong uStack144;\n    uint8_t uStack136;\n    ulong uStack128;\n    uint64_t uStack120;\n    uint64_t uStack112;\n    uint auStack104 [2];\n    ulong uStack96;\n    uint32_t uStack88;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    ulong uStack56;\n    \n    pauVar6 = fcn.140025b20(&uStack72, arg4, in_stack_00000028, in_stack_00000030);\n    _auStack160 = *pauVar6;\n    uStack144 = *pauVar6[1];\n    uVar10 = SUB168(_auStack160 >> 0x40, 0);\n    uVar11 = uVar10 >> 0x20;\n    iVar5 = SUB164(_auStack160 >> 0x60, 0);\n    uStack128 = uStack144;\n    uStack112 = uVar11;\n    if (iVar5 == -1) {\n        puVar7 = fcn.140016068(uVar10);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        goto code_r0x000140025e6d;\n    }\n    uVar4 = fcn.140016e60(uVar10);\n    *arg2 = uVar4;\n    if (uVar4 == 0xffffffff) {\n        puVar7 = fcn.140016068();\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        puVar7 = fcn.140016088();\n        *puVar7 = 0x18;\n        goto code_r0x000140025e6d;\n    }\n    uStack144._0_4_ = uStack144 >> 0x20 | uStack144;\n    uStack120 = uStack144;\n    uStack88 = ~(arg4 >> 7) & 1;\n    *arg1 = 1;\n    auStack104[0] = 0x18;\n    uStack96 = 0;\n    iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg3, _auStack160 >> 0x20, iVar5, auStack104, uStack152, uStack144, 0);\n    uVar4 = uStack156;\n    if (iVar9 == -1) {\n        if (((uStack156 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n            uVar4 = uStack156 & 0x7fffffff;\n            _auStack160 = _auStack160 & 0xffffffffffffffff;\n            iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                              (arg3, _auStack160 >> 0x20, uVar11, auStack104, uStack152, uStack144, 0);\n            if (iVar9 != -1) goto code_r0x000140025f84;\n        }\n        puVar1 = *((*arg2 >> 6) * 8 + 0x14004ca30) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140015ffc(uVar4);\n    }\n    else {\ncode_r0x000140025f84:\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetFileType)();\n        if (iVar5 != 0) {\n            if (iVar5 == 2) {\n                auStack160[0] = auStack160[0] | 0x40;\n            }\n            else if (iVar5 == 3) {\n                auStack160[0] = auStack160[0] | 8;\n            }\n            fcn.140016d78(*arg2, iVar9);\n            uStack136 = auStack160[0] | 1;\n            _auStack160 = CONCAT151(stack0xffffffffffffff61, auStack160[0]) | 0x1;\n            *(*((*arg2 >> 6) * 8 + 0x14004ca30) + 0x38 + (*arg2 & 0x3f) * 0x48) = uStack136;\n            *(*((*arg2 >> 6) * 8 + 0x14004ca30) + 0x39 + (*arg2 & 0x3f) * 0x48) = 0;\n            if (((arg4 & 2) == 0) || (iVar5 = fcn.140025d28(*arg2),  iVar5 == 0)) {\n                uStack72 = auStack160;\n                uStack68 = uStack156;\n                uStack64 = uStack152;\n                uStack60 = uStack152._4_4_;\n                auStack168[0] = 0;\n                uStack56 = uStack128;\n                iVar5 = fcn.1400258a0(*arg2, &uStack72, arg4, auStack168);\n                uVar2 = *arg2;\n                if (iVar5 == 0) {\n                    *(*((uVar2 >> 6) * 8 + 0x14004ca30) + 0x39 + (uVar2 & 0x3f) * 0x48) = auStack168[0];\n                    uVar10 = *arg2 & 0x3f;\n                    iVar3 = *((*arg2 >> 6) * 8 + 0x14004ca30);\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 ^ (arg4 >> 0x10 ^ *(iVar3 + 0x3d + uVar10 * 0x48)) & 1;\n                    if (((uStack136 & 0x48) == 0) && ((arg4 & 8) != 0)) {\n                        puVar1 = *((*arg2 >> 6) * 8 + 0x14004ca30) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                        *puVar1 = *puVar1 | 0x20;\n                    }\n                    if (((uVar4 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n                        _auStack160 = CONCAT88(uStack152, CONCAT44(uVar4, auStack160)) & 0xffffffffffffffff;\n                        iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                                          (arg3, _auStack160 >> 0x20, uStack112 & 0xffffffff, auStack104, uStack152, \n                                           uStack120, 0);\n                        if (iVar9 == -1) {\n                            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            fcn.140015ffc(uVar4);\n                            puVar1 = *((*arg2 >> 6) * 8 + 0x14004ca30) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                            *puVar1 = *puVar1 & 0xfe;\n                            fcn.140016fa0(*arg2);\n                            goto code_r0x000140025e6d;\n                        }\n                        *(*((*arg2 >> 6) * 8 + 0x14004ca30) + 0x28 + (*arg2 & 0x3f) * 0x48) = iVar9;\n                    }\n                    return 0;\n                }\n                uVar10 = uVar2 & 0xffffffff;\n            }\n            else {\n                uVar10 = *arg2;\n            }\n            fcn.14001a0f0(uVar10);\n            return iVar5;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140015ffc(uVar4);\n        puVar1 = *((*arg2 >> 6) * 8 + 0x14004ca30) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n        if (uVar4 == 0) {\n            puVar7 = fcn.140016088();\n            *puVar7 = 0xd;\n        }\n    }\ncode_r0x000140025e6d:\n    piVar8 = fcn.140016088();\n    return *piVar8;\n}\n",
        "token_count": 2121
    },
    "140027e3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.140027e30(uint64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint64_t arg3_00;\n    \n    arg1 = arg1 & 0xffffffff;\n    iVar3 = fcn.14001b8b4();\n    iVar4 = fcn.14001b8b4();\n    uVar6 = arg2 - iVar4;\n    if ((iVar3 == -1) || (iVar4 == -1)) {\n        if (*(arg3 + 0x30) == '\\0') {\n            uVar8 = 0x16;\n        }\n        else {\n            uVar8 = *(arg3 + 0x2c);\n        }\n    }\n    else {\n        uVar7 = 0;\n        if (uVar6 < 1) {\n            uVar8 = 0;\n            if (uVar6 < 0) {\n                iVar4 = fcn.14001b8b4(arg1, arg2, 0);\n                uVar8 = uVar7;\n                if (iVar4 == -1) {\n                    if (*(arg3 + 0x30) != '\\0') {\n                        uVar8 = *(arg3 + 0x2c);\n                    }\n                }\n                else {\n                    uVar5 = fcn.14001705c(arg1);\n                    iVar2 = (*_sym.imp.KERNEL32.dll_SetEndOfFile)(uVar5);\n                    if (iVar2 == 0) {\n                        uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        *(arg3 + 0x38) = 1;\n                        uVar8 = 0xd;\n                        *(arg3 + 0x34) = uVar7;\n                        *(arg3 + 0x30) = 1;\n                        *(arg3 + 0x2c) = 0xd;\n                    }\n                }\n            }\n        }\n        else {\n            iVar4 = fcn.14001deb8(0x1000, 1);\n            if (iVar4 == 0) {\n                uVar7 = 0xc;\n                *(arg3 + 0x30) = 1;\n                *(arg3 + 0x2c) = 0xc;\n            }\n            else {\n                uVar1 = fcn.140015968(arg1, 0x8000);\n                do {\n                    arg3_00 = uVar6 & 0xffffffff;\n                    if (0xfff < uVar6) {\n                        arg3_00 = 0x1000;\n                    }\n                    iVar2 = fcn.14001c590(arg1, iVar4, arg3_00, arg3);\n                    if (iVar2 == -1) {\n                        if ((*(arg3 + 0x38) != '\\0') && (*(arg3 + 0x34) == 5)) {\n                            *(arg3 + 0x30) = 1;\n                            *(arg3 + 0x2c) = 0xd;\n                        }\n                        if (*(arg3 + 0x30) != '\\0') {\n                            uVar7 = *(arg3 + 0x2c);\n                        }\n                        goto code_r0x000140027f21;\n                    }\n                    uVar6 = uVar6 - iVar2;\n                } while (0 < uVar6);\n                fcn.140015968(arg1, uVar1);\n            }\ncode_r0x000140027f21:\n            fcn.140019f78(iVar4);\n            uVar8 = uVar7;\n        }\n    }\n    fcn.14001b8b4(arg1, iVar3, 0);\n    return uVar8;\n}\n",
        "token_count": 851
    },
    "14002808": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140028084(int64_t *arg1, ulong arg2, ulong arg3, uint8_t *arg4, ulong noname_4, uint8_t *noname_5, \n                  ulong noname_6, ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11, \n                  ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong noname_16, ulong noname_17, \n                  ulong noname_18, ulong noname_19, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, ulong arg_c8h)\n\n{\n    int32_t *lpMem;\n    uint8_t uVar1;\n    ulong arg1_00;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    uint *arg3_00;\n    uint *puVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    uchar *puVar10;\n    uchar *puVar11;\n    ulong var_8h;\n    ulong var_10h;\n    ulong lpCPInfo;\n    ulong var_30h;\n    ulong var_48h;\n    uchar auStack216 [32];\n    ulong uStack184;\n    uint uStack176;\n    uint32_t auStack136 [2];\n    uint8_t *puStack128;\n    ulong uStack120;\n    uint32_t uStack112;\n    uint8_t auStack106 [18];\n    uint64_t uStack88;\n    \n    puVar9 = &stack0xffffffffffffff28;\n    puVar10 = &stack0xffffffffffffff28;\n    puVar11 = &stack0xffffffffffffff28;\n    uStack88 = *0x14003d018 ^ &stack0xffffffffffffff78;\n    auStack136[0] = arg3;\n    uStack120 = arg2;\n    puStack128 = noname_5;\n    if (noname_4 < 1) {\n        if (noname_4 < -1) goto code_r0x0001400283e3;\n    }\n    else {\n        noname_4._0_4_ = fcn.140028494(arg4, noname_4);\n    }\n    if (noname_6 < 1) {\n        puVar11 = &stack0xffffffffffffff28;\n        if (noname_6 < -1) goto code_r0x0001400283e3;\n    }\n    else {\n        noname_6._0_4_ = fcn.140028494(noname_5, noname_6);\n    }\n    if (noname_7 == 0) {\n        noname_7._0_4_ = *(*arg1 + 0xc);\n    }\n    if ((noname_4 == 0) || (noname_6 == 0)) {\n        puVar11 = &stack0xffffffffffffff28;\n        if ((noname_4 == noname_6) ||\n           (((puVar11 = &stack0xffffffffffffff28,  1 < noname_6 || (puVar11 = &stack0xffffffffffffff28,  1 < noname_4))\n            || (iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(noname_7, &stack0xffffffffffffff90), \n               puVar11 = &stack0xffffffffffffff28,  iVar2 == 0)))) goto code_r0x0001400283e3;\n        if (0 < noname_4) {\n            puVar11 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar11 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar11 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *arg4,  uVar1 < *puVar5 ||\n                        (puVar11 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x0001400283e3;\n        }\n        if (0 < noname_6) {\n            puVar11 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar11 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar11 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *noname_5,  uVar1 < *puVar5 ||\n                        (puVar11 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x0001400283e3;\n        }\n    }\n    uStack176 = 0;\n    uStack184 = 0;\n    uVar3 = fcn.14001e870(noname_7, 9);\n    puVar11 = &stack0xffffffffffffff28;\n    if ((uVar3 == 0) ||\n       (uVar8 = uVar3 * 2 + 0x10,  uVar8 = -(uVar3 * 2 < uVar8) & uVar8,  puVar11 = &stack0xffffffffffffff28, \n       uVar8 == 0)) goto code_r0x0001400283e3;\n    if (uVar8 < 0x401) {\n        iVar6 = fcn.14000a130();\n        iVar6 = -iVar6;\n        puVar9 = &stack0xffffffffffffff28 + iVar6;\n        arg3_00 = &stack0xffffffffffffff78 + iVar6;\n        puVar11 = &stack0xffffffffffffff28 + iVar6;\n        if (arg3_00 == NULL) goto code_r0x0001400283e3;\n        *arg3_00 = 0xcccc;\ncode_r0x00014002826c:\n        arg3_00 = arg3_00 + 4;\n        puVar10 = puVar9;\n    }\n    else {\n        arg3_00 = fcn.14001cc2c(uVar8);\n        if (arg3_00 != NULL) {\n            *arg3_00 = 0xdddd;\n            goto code_r0x00014002826c;\n        }\n    }\n    puVar11 = puVar10;\n    if (arg3_00 == NULL) goto code_r0x0001400283e3;\n    *(puVar10 + 0x28) = uVar3;\n    *(puVar10 + 0x20) = arg3_00;\n    *(puVar10 + -8) = 0x140028296;\n    iVar2 = fcn.14001e870(noname_7, 1);\n    if (iVar2 == 0) {\ncode_r0x0001400283d0:\n        iVar2 = arg3_00[-4];\n    }\n    else {\n        *(puVar10 + 0x28) = 0;\n        *(puVar10 + 0x20) = 0;\n        *(puVar10 + -8) = 0x1400282bc;\n        iVar2 = fcn.14001e870(noname_7, 9);\n        if ((iVar2 == 0) || (uVar8 = iVar2 * 2 + 0x10,  uVar8 = -(iVar2 * 2 < uVar8) & uVar8,  uVar8 == 0))\n        goto code_r0x0001400283d0;\n        if (uVar8 < 0x401) {\n            *(puVar10 + -8) = 0x140028305;\n            iVar6 = fcn.14000a130();\n            iVar6 = -iVar6;\n            puVar11 = puVar10 + iVar6;\n            puVar7 = puVar10 + iVar6 + 0x50;\n            if (puVar7 == NULL) goto code_r0x0001400283d0;\n            *puVar7 = 0xcccc;\n            puVar10 = puVar10 + iVar6;\ncode_r0x000140028331:\n            puVar7 = puVar7 + 4;\n            puVar11 = puVar10;\n        }\n        else {\n            *(puVar10 + -8) = 0x140028323;\n            puVar7 = fcn.14001cc2c(uVar8);\n            if (puVar7 != NULL) {\n                *puVar7 = 0xdddd;\n                goto code_r0x000140028331;\n            }\n        }\n        if (puVar7 == NULL) goto code_r0x0001400283d0;\n        lpMem = puVar7 + -4;\n        *(puVar11 + 0x28) = iVar2;\n        *(puVar11 + 0x20) = puVar7;\n        *(puVar11 + -8) = 0x140028360;\n        iVar4 = fcn.14001e870(noname_7, 1);\n        if (iVar4 != 0) {\n            uVar8 = auStack136[0];\n            *(puVar11 + 0x40) = 0;\n            *(puVar11 + 0x38) = 0;\n            *(puVar11 + 0x30) = 0;\n            arg1_00 = uStack120;\n            *(puVar11 + 0x28) = iVar2;\n            *(puVar11 + 0x20) = puVar7;\n            *(puVar11 + -8) = 0x1400283ab;\n            fcn.14001e188(arg1_00, uVar8, arg3_00, uVar3);\n            if (*lpMem == 0xdddd) {\n                *(puVar11 + -8) = 0x1400283bf;\n                fcn.140019f78(lpMem);\n            }\n            if (arg3_00[-4] == 0xdddd) {\n                *(puVar11 + -8) = 0x1400283cc;\n                fcn.140019f78(arg3_00 + -4);\n            }\n            goto code_r0x0001400283e3;\n        }\n        if (*lpMem == 0xdddd) {\n            *(puVar11 + -8) = 0x140028378;\n            fcn.140019f78(lpMem);\n        }\n        iVar2 = arg3_00[-4];\n    }\n    if (iVar2 == 0xdddd) {\n        *(puVar11 + -8) = 0x1400283e1;\n        fcn.140019f78(arg3_00 + -4);\n    }\ncode_r0x0001400283e3:\n    uVar8 = uStack88 ^ &stack0xffffffffffffff78;\n    *(puVar11 + -8) = 0x1400283ef;\n    fcn.14000a100(uVar8);\n    return;\n}\n",
        "token_count": 2552
    },
    "14000105": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140001050(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t noname_0;\n    int64_t arg2_00;\n    uint64_t uVar4;\n    int64_t iVar5;\n    uint64_t arg3_00;\n    int64_t arg3_01;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t iStack152;\n    uint uStack144;\n    int64_t iStack136;\n    uint32_t uStack128;\n    ulong uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    \n    arg2_00 = 0;\n    uStack104 = 0;\n    uStack96 = 0;\n    uStack88 = 0;\n    uStack144 = 0;\n    iStack152 = 0;\n    iVar6 = arg4;\n    uVar1 = fcn.140009990(&iStack152, \"1.2.13\", 0x58);\n    if (uVar1 != 0) {\n        fcn.140001c50(\"Failed to extract %s: inflateInit() failed with return code %d!\\n\", arg2 + 0x12, uVar1, iVar6);\n        return 0xffffffff;\n    }\n    noname_0 = fcn.14001414c(0x2000);\n    if (noname_0 == 0) {\n        fcn.140001c10(\"malloc\", \"Failed to extract %s: failed to allocate temporary input buffer!\\n\", arg2 + 0x12, iVar6\n                     );\n    }\n    else {\n        arg2_00 = fcn.14001414c(0x2000);\n        if (arg2_00 == 0) {\n            fcn.140001c10(\"malloc\", \"Failed to extract %s: failed to allocate temporary output buffer!\\n\", arg2 + 0x12, \n                          iVar6);\n        }\n        else {\n            uVar7 = *(arg2 + 8);\n            do {\n                iVar6 = *arg1;\n                arg3_00 = uVar7;\n                if (0x2000 < uVar7) {\n                    arg3_00 = 0x2000;\n                }\n                uVar4 = fcn.14000e95c(noname_0, 1, arg3_00, iVar6);\n                if ((uVar4 != arg3_00) || (iVar2 = fcn.14000e6d0(*arg1),  iVar2 != 0)) {\n                    uVar1 = 0xffffffff;\n                    goto code_r0x00014000126c;\n                }\n                uVar7 = uVar7 - arg3_00;\n                uStack144 = arg3_00;\n                iStack152 = noname_0;\n                do {\n                    uStack128 = 0x2000;\n                    iStack136 = arg2_00;\n                    uVar3 = fcn.140007de0(&iStack152, 0);\n                    uVar1 = 0xffffffff;\n                    if (uVar3 + 4 < 3) goto code_r0x000140001241;\n                    if (uVar3 == 2) {\n                        uVar3 = 0xfffffffd;\n                        goto code_r0x000140001241;\n                    }\n                    arg3_01 = 0x2000 - uStack128;\n                    if (arg3 == 0) {\n                        if (arg4 != 0) {\n                            fcn.14000aec0(arg4, arg2_00, arg3_01);\n                            arg4 = arg4 + arg3_01;\n                        }\n                    }\n                    else {\n                        iVar6 = arg3;\n                        iVar5 = fcn.14000f09c(arg2_00);\n                        if ((iVar5 != arg3_01) || (iVar2 = fcn.14000e6d0(arg3),  iVar2 != 0)) {\n                            uVar3 = 0xffffffff;\n                            goto code_r0x000140001241;\n                        }\n                    }\n                } while (uStack128 == 0);\n                if (uVar3 == 1) {\n                    uVar1 = 0;\n                    goto code_r0x00014000126c;\n                }\n            } while (uVar7 != 0);\ncode_r0x000140001241:\n            fcn.140001c50(\"Failed to extract %s: decompression resulted in return code %d!\\n\", arg2 + 0x12, uVar3, iVar6\n                         );\n        }\n    }\ncode_r0x00014000126c:\n    fcn.140009670(&iStack152);\n    fcn.140014138(noname_0);\n    fcn.140014138(arg2_00);\n    return uVar1;\n}\n",
        "token_count": 1089
    },
    "1400012b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.1400012b0(int64_t *arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t noname_0;\n    uint64_t arg2_00;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t arg4;\n    \n    iVar2 = *arg1;\n    if (iVar2 == 0) {\n        iVar2 = fcn.140002de0(arg1 + 0xf, 0x14002a570);\n        *arg1 = iVar2;\n        if (iVar2 == 0) {\n            fcn.140001c50(\"Failed to extract %s: failed to open archive file!\\n\", arg2 + 0x12, in_R8, in_R9);\n            return 0;\n        }\n    }\n    iVar1 = fcn.14000ec94(iVar2, *(arg2 + 4) + arg1[1]);\n    if (iVar1 < 0) {\n        fcn.140001c10(\"fseek\", \"Failed to extract %s: failed to seek to the entry\\'s data!\\n\", arg2 + 0x12, in_R9);\n        return 0;\n    }\n    iVar2 = fcn.14001414c(*(arg2 + 0xc));\n    if (iVar2 == 0) {\n        fcn.140001c10(\"malloc\", \"Failed to extract %s: failed to allocate data buffer (%u bytes)!\\n\", arg2 + 0x12, \n                      *(arg2 + 0xc));\n    }\n    else if (*(arg2 + 0x10) == '\\x01') {\n        iVar1 = fcn.140001050(arg1, arg2, 0, iVar2);\n        if (iVar1 != 0) {\ncode_r0x0001400013f5:\n            fcn.140014138(iVar2);\n            iVar2 = 0;\n        }\n    }\n    else {\n        noname_0 = iVar2;\n        for (uVar4 = *(arg2 + 0xc); uVar4 != 0; uVar4 = uVar4 - arg2_00) {\n            arg4 = *arg1;\n            arg2_00 = uVar4;\n            if (0x2000 < uVar4) {\n                arg2_00 = 0x2000;\n            }\n            iVar3 = fcn.14000e95c(noname_0, arg2_00, 1, arg4);\n            if (iVar3 == 0) {\n                fcn.140001c10(\"fread\", \"Failed to extract %s: failed to read data chunk!\\n\", arg2 + 0x12, arg4);\n                goto code_r0x0001400013f5;\n            }\n            noname_0 = noname_0 + arg2_00;\n        }\n    }\n    if (*arg1 != 0) {\n        fcn.14000e60c();\n        *arg1 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 693
    },
    "1400016d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar * fcn.1400016d0(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    char *pcVar3;\n    int32_t *piVar4;\n    int64_t arg2_00;\n    int64_t arg3_00;\n    int64_t iVar5;\n    \n    piVar2 = *(arg1 + 0x10);\n    arg3_00 = -1;\n    do {\n        iVar5 = arg3_00;\n        arg3_00 = iVar5 + 1;\n    } while (*(arg3_00 + arg2) != '\\0');\n    piVar4 = *(arg1 + 0x18);\n    arg2_00 = arg2;\n    if (piVar2 < piVar4) {\n        do {\n            if (*(piVar2 + 0x11) == 'o') {\n                arg2_00 = arg2;\n                arg3 = arg3_00;\n                iVar1 = fcn.140014170(piVar2 + 0x12, arg2, arg3_00);\n                if (iVar1 == 0) {\n                    pcVar3 = piVar2 + iVar5 + 0x13;\n                    if (*pcVar3 != '\\0') {\n                        return piVar2 + iVar5 + 0x14;\n                    }\n                    return pcVar3;\n                }\n                piVar4 = *(arg1 + 0x18);\n            }\n            piVar2 = *piVar2 + piVar2;\n            if (piVar2 < *(arg1 + 0x10)) {\n                fcn.140001c50(\"Cannot read Table of Contents.\\n\", arg2_00, arg3, arg4);\n                return NULL;\n            }\n        } while (piVar2 < piVar4);\n    }\n    return NULL;\n}\n",
        "token_count": 417
    },
    "1400017b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400017b0(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    uint32_t *puVar6;\n    char *arg2;\n    ulong uVar7;\n    ulong in_R9;\n    int64_t arg4;\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003d018 ^ auStack56;\n    iVar3 = *arg1;\n    if (iVar3 == 0) {\n        iVar3 = fcn.140002de0(arg1 + 0xf, 0x14002a570);\n        *arg1 = iVar3;\n        if (iVar3 == 0) goto code_r0x0001400019b3;\n    }\n    uStack24._0_4_ = CONCAT13((*0x14002ca50 >> 0x18) + '\\f', *0x14002ca50);\n    uStack24 = *0x14002ca50 & 0xffffffff00000000 | uStack24;\n    iVar3 = fcn.140006360(iVar3, &uStack24, 8);\n    if (iVar3 != 0) {\n        uVar7 = 0;\n        iVar2 = fcn.14000ec94(*arg1, iVar3);\n        if (iVar2 < 0) {\n            fcn.140001c10(\"fseek\", \"Failed to seek to cookie position!\\n\", uVar7, in_R9);\n        }\n        else {\n            arg4 = *arg1;\n            uVar7 = 1;\n            iVar4 = fcn.14000e95c(arg1 + 4, 0x58, 1, arg4);\n            if (iVar4 == 0) {\n                arg2 = \"Failed to read cookie!\\n\";\n            }\n            else {\n                uVar5 = *(arg1 + 5);\n                uVar7 = 0;\n                uVar1 = *(arg1 + 0x2c);\n                *(arg1 + 0x2c) = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                uVar1 = *(arg1 + 6);\n                *(arg1 + 6) = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                uVar1 = *(arg1 + 0x34);\n                uVar5 = uVar5 >> 0x18 | (uVar5 & 0xff0000) >> 8 | (uVar5 & 0xff00) << 8 | uVar5 << 0x18;\n                *(arg1 + 5) = uVar5;\n                *0x14003dc84 = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                *(arg1 + 0x34) = *0x14003dc84;\n                arg1[1] = (iVar3 - uVar5) + 0x58;\n                *(arg1 + 0x507c) = 0;\n                fcn.14000ec94(*arg1, *(arg1 + 0x2c) + arg1[1]);\n                iVar3 = fcn.14001414c(*(arg1 + 6));\n                arg1[2] = iVar3;\n                if (iVar3 == 0) {\n                    fcn.140001c10(\"malloc\", \"Could not allocate buffer for TOC!\\n\", uVar7, arg4);\n                    goto code_r0x0001400019b3;\n                }\n                iVar4 = *(arg1 + 6);\n                uVar7 = 1;\n                arg4 = *arg1;\n                iVar3 = fcn.14000e95c(iVar3, iVar4, 1, arg4);\n                if (iVar3 != 0) {\n                    arg1[3] = *(arg1 + 6) + arg1[2];\n                    iVar2 = fcn.14000e6d0(*arg1);\n                    if (iVar2 == 0) {\n                        puVar6 = arg1[2];\n                        if (puVar6 < arg1[3]) {\n                            do {\n                                uVar5 = puVar6[1];\n                                uVar1 = *puVar6;\n                                puVar6[1] = uVar5 >> 0x18 | (uVar5 & 0xff0000) >> 8 | (uVar5 & 0xff00) << 8 |\n                                            uVar5 << 0x18;\n                                uVar5 = puVar6[2];\n                                puVar6[2] = uVar5 >> 0x18 | (uVar5 & 0xff0000) >> 8 | (uVar5 & 0xff00) << 8 |\n                                            uVar5 << 0x18;\n                                uVar5 = puVar6[3];\n                                puVar6[3] = uVar5 >> 0x18 | (uVar5 & 0xff0000) >> 8 | (uVar5 & 0xff00) << 8 |\n                                            uVar5 << 0x18;\n                                uVar5 = uVar1 >> 0x18 | (uVar1 & 0xff0000) >> 8 | (uVar1 & 0xff00) << 8 | uVar1 << 0x18;\n                                *puVar6 = uVar5;\n                                puVar6 = uVar5 + puVar6;\n                                if (puVar6 < arg1[2]) {\n                                    fcn.140001c50(\"Cannot read Table of Contents.\\n\", uVar5, uVar7, arg4);\n                                    break;\n                                }\n                            } while (puVar6 < arg1[3]);\n                        }\n                        if (*arg1 != 0) {\n                            fcn.14000e60c();\n                            *arg1 = 0;\n                        }\n                    }\n                    else {\n                        fcn.140001c50(\"Error on file.\\n\", iVar4, uVar7, arg4);\n                    }\n                    goto code_r0x0001400019b3;\n                }\n                arg2 = \"Could not read full TOC!\\n\";\n            }\n            fcn.140001c10(\"fread\", arg2, uVar7, arg4);\n        }\n    }\ncode_r0x0001400019b3:\n    fcn.14000a100(uStack16 ^ auStack56);\n    return;\n}\n",
        "token_count": 1546
    },
    "14000248": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140002480(int64_t arg1)\n\n{\n    if (*(arg1 + 0x507c) == 1) {\n        (**0x14002a360)(\"import sys; sys.stdout.flush();                 (sys.__stdout__.flush if sys.__stdout__                 is not sys.stdout else (lambda: None))()\"\n                        , 0);\n        (**0x14002a360)(\"import sys; sys.stderr.flush();                 (sys.__stderr__.flush if sys.__stderr__                 is not sys.stderr else (lambda: None))()\"\n                        , 0);\n    // WARNING: Could not recover jumptable at 0x000140003834. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (2 cases) at 0x14002a360\n        (**0x14002a360)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 191
    },
    "140002ba": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140002ba0(int64_t arg1, char *arg2)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = arg1 - arg2;\n    do {\n        cVar1 = *arg2;\n        arg2[iVar3] = cVar1;\n        arg2 = arg2 + 1;\n    } while (cVar1 != '\\0');\n    iVar3 = -1;\n    do {\n        iVar2 = iVar3;\n        iVar3 = iVar2 + 1;\n    } while (*(arg1 + 1 + iVar2) != '\\0');\n    *(iVar2 + -2 + arg1) = 0x676b70;\n    return 1;\n}\n",
        "token_count": 165
    },
    "140002c5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140002c50(ushort *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    \n    iVar2 = fcn.140001b30(arg1, 0x1000, 0x14002a920, arg2);\n    if (0xfff < iVar2) {\n        return 0;\n    }\n    iVar1 = -1;\n    do {\n        iVar3 = iVar1;\n        iVar1 = iVar3 + 1;\n    } while (*(arg1 + iVar3 + 1) != '\\0');\n    if (*(iVar3 + arg1) == '\\\\') {\n        *(iVar3 + arg1) = 0;\n    }\n    puVar4 = fcn.14000b5b8(arg1, 0x5c);\n    if (puVar4 != NULL) {\n        *puVar4 = 0;\n        return 1;\n    }\n    *arg1 = 0x2e;\n    return 1;\n}\n",
        "token_count": 234
    },
    "140002e6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140002e60(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint64_t uVar4;\n    \n    iVar2 = fcn.140001b30(arg1, 0x1000, 0x14002a920, arg2);\n    uVar5 = iVar2;\n    if (uVar5 < 0xfff) {\n        if (*((uVar5 - 1) + arg1) != '\\\\') {\n            *(uVar5 + arg1) = 0x5c;\n            uVar5 = uVar5 + 2;\n        }\n        uVar5 = 0x1000 - uVar5;\n        uVar3 = 0xffffffffffffffff;\n        do {\n            uVar4 = uVar3;\n            uVar3 = uVar4 + 1;\n        } while (*(arg3 + uVar3) != '\\0');\n        if (uVar3 < uVar5) {\n            if (*(uVar4 + arg3) == '\\\\') {\n                fcn.140014fc0(arg1, arg3, uVar5);\n                iVar1 = -1;\n                do {\n                    iVar6 = iVar1;\n                    iVar1 = iVar6 + 1;\n                } while (*(arg1 + 1 + iVar6) != '\\0');\n                *(iVar6 + arg1) = 0;\n                return arg1;\n            }\n            fcn.140014fc0(arg1, arg3, uVar5);\n            return arg1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 377
    },
    "14000384": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140003840(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    uint64_t arg2;\n    int64_t iVar2;\n    char *arg3;\n    char *arg4;\n    \n    iVar2 = -1;\n    do {\n        iVar2 = iVar2 + 1;\n    } while (*(arg1 + 0x4078 + iVar2) != '\\0');\n    arg4 = \"strict\";\n    arg3 = \"utf-8\";\n    iVar1 = (**0x14002a360)();\n    if (iVar1 != 0) {\n        (**0x14002a360)(\"_MEIPASS\", iVar1);\n        arg2 = *(arg1 + 0x10);\n        if (arg2 < *(arg1 + 0x18)) {\n            do {\n                if ((*(arg2 + 0x11) + 0xb3U & 0xdf) == 0) {\n                    arg1_00 = fcn.1400012b0(arg1, arg2);\n                    iVar2 = (**0x14002a360)(arg1_00, *(arg2 + 0xc));\n                    if ((iVar2 == 0) || (iVar2 = (**0x14002a360)(arg2 + 0x12, iVar2),  iVar2 == 0)) {\n                        fcn.140001c50(\"Module object for %s is NULL!\\n\", arg2 + 0x12, arg3, arg4);\n                    }\n                    iVar2 = (**0x14002a360)();\n                    if (iVar2 != 0) {\n                        (**0x14002a360)();\n                        (**0x14002a360)();\n                    }\n                    fcn.140014138(arg1_00);\n                }\n                arg2 = fcn.140001780(arg1, arg2, arg3, arg4);\n            } while (arg2 < *(arg1 + 0x18));\n        }\n        return 0;\n    }\n    fcn.140001c50(\"Failed to get _MEIPASS as PyObject.\\n\", iVar2, arg3, arg4);\n    return 0xffffffff;\n}\n",
        "token_count": 472
    },
    "1400039a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400039a0(int64_t arg1, ulong noname_1, int64_t arg3, char *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    ulong arg2;\n    uint64_t arg2_00;\n    int64_t iVar3;\n    ulong arg2_01;\n    \n    arg2_00 = *(arg1 + 0x10);\n    if (arg2_00 < *(arg1 + 0x18)) {\n        do {\n            if (*(arg2_00 + 0x11) == 'z') {\n                arg3 = *(arg2_00 + 4) + *(arg1 + 8);\n                iVar3 = -1;\n                do {\n                    iVar3 = iVar3 + 1;\n                } while (*(arg1 + 0x78 + iVar3) != '\\0');\n                arg4 = \"strict\";\n                uVar2 = (**0x14002a360)(arg1 + 0x78, iVar3, \"utf-8\");\n                arg2_01 = uVar2;\n                arg2 = (**0x14002a360)(\"%U?%llu\");\n                (**0x14002a360)(uVar2);\n                iVar3 = (**0x14002a360)(\"path\");\n                if (iVar3 == 0) {\n                    fcn.140001c50(\"Installing PYZ: Could not get sys.path\\n\", arg2_01, arg3, arg4);\n                    (**0x14002a360)(arg2);\n                }\n                else {\n                    iVar1 = (**0x14002a360)(iVar3);\n                    if (iVar1 != 0) {\n                        fcn.140001c50(\"Failed to append to sys.path\\n\", arg2, arg3, arg4);\n                    }\n                }\n            }\n            arg2_00 = fcn.140001780(arg1, arg2_00, arg3, arg4);\n        } while (arg2_00 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 448
    },
    "140003ac": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003ac0(int64_t param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *arg3;\n    int64_t arg4;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140003ad0;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00002058 + iVar2) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar2;\n    arg4 = param_1 + 0x38;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b02;\n    iVar1 = fcn.140001b30(&stack0x00000018 + iVar2, 0x40, 0x14002a920, arg4);\n    if (iVar1 < 0x40) {\n        if (*(param_1 + 0x5078) != 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b4c;\n            iVar3 = fcn.140002e60(&stack0x00000058 + iVar2, param_1 + 0x3078, \"ucrtbase.dll\");\n            if (iVar3 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b6a;\n                fcn.140001c50(\"Path of ucrtbase.dll (%s) length exceeds buffer[%d] space\\n\", param_1 + 0x3078, 0x1000, \n                              arg4);\n            }\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b74;\n            iVar1 = fcn.140002d70(&stack0x00000058 + iVar2);\n            if (iVar1 != 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b82;\n                fcn.140006310(&stack0x00000058 + iVar2);\n            }\n        }\n        arg3 = &stack0x00000018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b9b;\n        iVar3 = fcn.140002e60(&stack0x00001058 + iVar2, param_1 + 0x4078, arg3);\n        if (iVar3 == 0) {\n            arg3 = 0x1000;\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003bb9;\n            fcn.140001c50(\"Path of DLL (%s) length exceeds buffer[%d] space\\n\", param_1 + 0x4078, 0x1000, arg4);\n        }\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003bc6;\n        iVar3 = fcn.140006310(&stack0x00001058 + iVar2);\n        if (iVar3 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003be6;\n            fcn.140001cb0(\"LoadLibrary\", \"Error loading Python DLL \\'%s\\'.\\n\", &stack0x00001058 + iVar2, arg4);\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140003bfb;\n            fcn.140002f20(iVar3, *0x14003dc84, arg3, arg4);\n        }\n    }\n    else {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140003b21;\n        fcn.140001c50(\"Reported length (%d) of DLL name (%s) length exceeds buffer[%d] space\\n\", iVar1, param_1 + 0x38, \n                      0x40);\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140003c0b;\n    fcn.14000a100(*(&stack0x00002058 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 930
    },
    "140003c2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140003c20(int64_t param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    char cVar1;\n    bool bVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint *puVar7;\n    uint64_t arg2;\n    ulong uVar8;\n    ulong uStack16;\n    \n    uStack16 = 0x140003c3a;\n    iVar5 = fcn.14000a130();\n    iVar5 = -iVar5;\n    *(&stack0x00002028 + iVar5) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar5;\n    bVar2 = false;\n    arg2 = *(param_1 + 0x10);\n    **0x14003dc90 = 1;\n    **0x14003dc88 = 1;\n    **0x14003dcb8 = 1;\n    **0x14003dcc0 = 1;\n    **0x14003dcb0 = 1;\n    **0x14003dca8 = 0;\n    if (arg2 < *(param_1 + 0x18)) {\n        do {\n            if (*(arg2 + 0x11) == 'o') {\n                param_3 = 4;\n                *(&stack0xfffffffffffffff0 + iVar5) = 0x140003cd0;\n                iVar3 = fcn.140014170(arg2 + 0x12, \"pyi-\", 4);\n                if (iVar3 != 0) {\n                    cVar1 = *(arg2 + 0x12);\n                    puVar7 = *0x14003dc98;\n                    if (cVar1 == 'O') {\ncode_r0x000140003d35:\n                        *puVar7 = 1;\n                    }\n                    else if (cVar1 == 'W') {\n                        param_3 = 0x1000;\n                        *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d10;\n                        iVar6 = fcn.140015740(&stack0x00000018 + iVar5, arg2 + 0x14);\n                        if (iVar6 == -1) {\n                            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003e39;\n                            fcn.140001c50(\"Failed to convert Wflag %s using mbstowcs (invalid multibyte string)\\n\", \n                                          arg2 + 0x14, param_3, param_4);\n                            goto code_r0x000140003e00;\n                        }\n                        *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d2c;\n                        (**0x14002a360)(&stack0x00000018 + iVar5);\n                    }\n                    else if (cVar1 == 'u') {\n                        bVar2 = true;\n                    }\n                    else {\n                        puVar7 = *0x14003dca8;\n                        if (cVar1 == 'v') goto code_r0x000140003d35;\n                    }\n                }\n            }\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d46;\n            arg2 = fcn.140001780(param_1, arg2, param_3, param_4);\n        } while (arg2 < *(param_1 + 0x18));\n        if (bVar2) {\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d62;\n            uVar8 = fcn.140014310(0);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d6a;\n            uVar4 = fcn.1400192e4(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d76;\n            fcn.14001584c(uVar4, 0x8000);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d80;\n            uVar8 = fcn.140014310(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d88;\n            uVar4 = fcn.1400192e4(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d94;\n            fcn.14001584c(uVar4, 0x8000);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003d9e;\n            uVar8 = fcn.140014310(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003da6;\n            fcn.140015dd4(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003db0;\n            uVar8 = fcn.140014310(2);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003db8;\n            fcn.140015dd4(uVar8);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003dbf;\n            uVar8 = fcn.140014310(0);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003dc9;\n            fcn.140014f7c(uVar8, 0, param_3, param_4);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003dd3;\n            uVar8 = fcn.140014310(1);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003ddd;\n            fcn.140014f7c(uVar8, 0, param_3, param_4);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003de7;\n            uVar8 = fcn.140014310(2);\n            *(&stack0xfffffffffffffff0 + iVar5) = 0x140003df1;\n            fcn.140014f7c(uVar8, 0, param_3, param_4);\n            **0x14003dcc8 = 1;\n        }\n    }\ncode_r0x000140003e00:\n    *(&stack0xfffffffffffffff0 + iVar5) = 0x140003e10;\n    fcn.14000a100(*(&stack0x00002028 + iVar5) ^ &stack0xfffffffffffffff8 + iVar5);\n    return;\n}\n",
        "token_count": 1450
    },
    "140003e4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140003e40(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *arg2;\n    ulong in_R8;\n    ulong uVar8;\n    int64_t *in_R9;\n    \n    pcVar4 = fcn.140005af0(\"PYTHONUTF8\");\n    if ((pcVar4 != NULL) && ((*pcVar4 != '0' || (pcVar4[1] != '\\0')))) {\n        if ((*pcVar4 == '1') && (pcVar4[1] == '\\0')) {\n            **0x14003dcd0 = 1;\n            goto code_r0x000140003e9b;\n        }\n        fcn.140001c50(\"Invalid value for PYTHONUTF8=%s; disabling utf-8 mode!\\n\", pcVar4, in_R8, in_R9);\n    }\n    **0x14003dcd0 = 0;\ncode_r0x000140003e9b:\n    iVar6 = arg1 + 0x1078;\n    uVar8 = 0x1000;\n    iVar5 = fcn.140006db0(0x140048eb0, iVar6, 0x1000);\n    if (iVar5 == 0) {\n        fcn.140001c50(\"Failed to convert progname to wchar_t\\n\", iVar6, uVar8, in_R9);\n        return 0xffffffff;\n    }\n    (**0x14002a360)(0x140048eb0);\n    piVar7 = arg1 + 0x4078;\n    uVar8 = 0x1000;\n    arg2 = piVar7;\n    iVar6 = fcn.140006db0(0x140046ea0, piVar7, 0x1000);\n    if (iVar6 == 0) {\n        pcVar4 = \"Failed to convert pyhome to wchar_t\\n\";\n    }\n    else {\n        (**0x14002a360)(0x140046ea0);\n        in_R9 = piVar7;\n        iVar3 = fcn.140001b30(0x14003de40, 0x3020, \"%s%c%s%c%s%c%s%c%s\", piVar7);\n        if (0x301f < iVar3) {\n            fcn.140001c50(\"sys.path (based on %s) exceeds buffer[%d] space\\n\", piVar7, 0x3020, in_R9);\n            return 0xffffffff;\n        }\n        uVar8 = 0x3020;\n        arg2 = 0x14003de40;\n        iVar6 = fcn.140006db0(0x140040e60, 0x14003de40, 0x3020);\n        if (iVar6 == 0) {\n            pcVar4 = \"Failed to convert pypath to wchar_t\\n\";\n        }\n        else {\n            (**0x14002a360)();\n            (**0x14002a360)(0x140040e60);\n            fcn.140003c20(arg1);\n            (**0x14002a360)();\n            (**0x14002a360)();\n            arg2 = *(arg1 + 0x5088);\n            piVar7 = fcn.140006fb0(*(arg1 + 0x5080), arg2);\n            if (piVar7 == NULL) {\n                pcVar4 = \"Failed to convert argv to wchar_t\\n\";\n            }\n            else {\n                uVar8 = 0;\n                arg2 = piVar7;\n                (**0x14002a360)(*(arg1 + 0x5080));\n                iVar6 = *piVar7;\n                piVar2 = piVar7;\n                while (iVar6 != 0) {\n                    fcn.140014138(iVar6);\n                    piVar1 = piVar2 + 1;\n                    piVar2 = piVar2 + 1;\n                    iVar6 = *piVar1;\n                }\n                fcn.140014138(piVar7);\n                iVar6 = (**0x14002a360)();\n                if (iVar6 == 0) {\n                    return 0;\n                }\n                pcVar4 = \"Error detected starting Python VM.\\n\";\n            }\n        }\n    }\n    fcn.140001c50(pcVar4, arg2, uVar8, in_R9);\n    return 0xffffffff;\n}\n",
        "token_count": 1008
    },
    "1400047a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400047a0(int64_t param_1, int64_t param_2, int64_t param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int32_t *arg1;\n    int32_t *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t arg2_00;\n    uint64_t uVar7;\n    ulong uStack64;\n    int64_t iVar6;\n    \n    uStack64 = 0x1400047ba;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00001ff8 + iVar2) = *0x14003d018 ^ &stack0xffffffffffffffc8 + iVar2;\n    iVar1 = 0;\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x1400047e6;\n    arg1 = fcn.140014130(1, 0x1014);\n    uVar7 = 0;\n    if (*(param_2 + 0x4038) != 0) {\n        do {\n            arg2_00 = *(param_2 + 0x4030) + uVar7;\n            *(&stack0xffffffffffffffc0 + iVar2) = 0x140004815;\n            arg2 = fcn.140001650(param_1, arg2_00);\n            if (arg2 == NULL) {\n                if (iVar1 != 0) {\n                    *(&stack0xffffffffffffffc0 + iVar2) = 0x14000490a;\n                    fcn.140001c50(\"SPLASH: Cannot find requirement %s in archive.\\n\", arg2_00, param_3, param_4);\n                    goto code_r0x0001400049b4;\n                }\n            }\n            else {\n                iVar1 = *arg2;\n                *(&stack0xffffffffffffffe8 + iVar2) = 1;\n                *(&stack0xffffffffffffffc0 + iVar2) = 0x140004833;\n                fcn.14000aec0(arg1, arg2, iVar1);\n                param_3 = arg2 + 0x12;\n                *(&stack0xffffffffffffffc0 + iVar2) = 0x140004848;\n                fcn.140002e60(arg1 + 0x12, param_2 + 0x3010, param_3);\n                iVar5 = -1;\n                do {\n                    iVar3 = iVar5 + 1;\n                    iVar6 = iVar5 + 0x13;\n                    iVar5 = iVar3;\n                } while (*(arg2 + iVar6) != '\\0');\n                iVar5 = -1;\n                do {\n                    iVar4 = iVar5 + 1;\n                    iVar6 = iVar5 + 0x13;\n                    iVar5 = iVar4;\n                } while (*(arg1 + iVar6) != '\\0');\n                *arg1 = (*arg2 - iVar3) + iVar4;\n                *(&stack0xffffffffffffffc0 + iVar2) = 0x14000488c;\n                iVar1 = fcn.140001440(param_1, arg1);\n                if (iVar1 != 0) {\n                    *(&stack0xffffffffffffffc0 + iVar2) = 0x1400048f1;\n                    fcn.140001c50(\"SPLASH: Cannot extract requirement %s.\\n\", arg2 + 0x12, param_3, param_4);\n                    goto code_r0x0001400049b4;\n                }\n                iVar1 = *(&stack0xffffffffffffffe8 + iVar2);\n            }\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (*(arg2_00 + iVar5) != '\\0');\n            uVar7 = uVar7 + iVar6 + 2;\n        } while (uVar7 < *(param_2 + 0x4038));\n        if (iVar1 != 0) {\n            *(&stack0xffffffffffffffc0 + iVar2) = 0x1400048df;\n            fcn.140002e60(&stack0x00000ff8 + iVar2, param_1 + 0x3078, param_2 + 0x3010);\n            goto code_r0x00014000492e;\n        }\n    }\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x14000492e;\n    fcn.140015e50(&stack0x00000ff8 + iVar2, param_1 + 0x2078, 0x1000);\ncode_r0x00014000492e:\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x140004942;\n    fcn.140015e50(&stack0xfffffffffffffff8 + iVar2, param_2 + 0x10, 0x1000);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x140004958;\n    fcn.140002e60(param_2 + 0x10, &stack0x00000ff8 + iVar2, &stack0xfffffffffffffff8 + iVar2);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x14000496f;\n    fcn.140015e50(&stack0xfffffffffffffff8 + iVar2, param_2 + 0x1010, 0x1000);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x140004988;\n    fcn.140002e60(param_2 + 0x1010, &stack0x00000ff8 + iVar2, &stack0xfffffffffffffff8 + iVar2);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x140004999;\n    fcn.140002bf0(&stack0xfffffffffffffff8 + iVar2, param_2 + 0x2010);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x1400049b2;\n    fcn.140002e60(param_2 + 0x2010, &stack0x00000ff8 + iVar2, &stack0xfffffffffffffff8 + iVar2);\ncode_r0x0001400049b4:\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x1400049bc;\n    fcn.140014138(arg1);\n    *(&stack0xffffffffffffffc0 + iVar2) = 0x1400049ce;\n    fcn.14000a100(*(&stack0x00001ff8 + iVar2) ^ &stack0xffffffffffffffc8 + iVar2);\n    return;\n}\n",
        "token_count": 1492
    },
    "140004c4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140004c40(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    uint64_t arg2_00;\n    int64_t arg2_01;\n    ulong uVar3;\n    int64_t iVar4;\n    int64_t arg2_02;\n    int64_t arg3_00;\n    \n    bVar1 = false;\n    arg2_01 = arg3;\n    if (arg3 == 0) {\n        arg2_00 = *(arg2 + 0x10);\n        arg2_01 = 0;\n        if (arg2_00 < *(arg2 + 0x18)) {\n            while (*(arg2_00 + 0x11) != 'l') {\n                arg2_00 = fcn.140001780(arg2, arg2_00, arg3, arg4);\n                if (*(arg2 + 0x18) <= arg2_00) {\n                    return 0xffffffff;\n                }\n            }\n            arg2_01 = fcn.1400012b0(arg2, arg2_00);\n        }\n        if (arg2_01 == 0) {\n            return 0xffffffff;\n        }\n        bVar1 = true;\n    }\n    fcn.140015e50(arg1 + 0x10, arg2_01, 0x10);\n    fcn.140015e50(arg1 + 0x1010, arg2_01 + 0x10, 0x10);\n    fcn.140015e50(arg1 + 0x3010, arg2_01 + 0x30, 0x10);\n    arg3_00 = arg2_01 + 0x20;\n    fcn.140002e60(arg1 + 0x2010, arg2 + 0x2078, arg3_00);\n    uVar2 = *(arg2_01 + 0x40);\n    uVar2 = uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18;\n    *(arg1 + 0x4018) = uVar2;\n    arg2_02 = uVar2 + 1;\n    uVar3 = fcn.140014130(1, arg2_02);\n    *(arg1 + 0x4010) = uVar3;\n    uVar2 = *(arg2_01 + 0x48);\n    uVar2 = uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18;\n    *(arg1 + 0x4028) = uVar2;\n    uVar3 = fcn.14001414c(uVar2);\n    *(arg1 + 0x4020) = uVar3;\n    uVar2 = *(arg2_01 + 0x50);\n    uVar2 = uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18;\n    *(arg1 + 0x4038) = uVar2;\n    iVar4 = fcn.14001414c(uVar2);\n    *(arg1 + 0x4030) = iVar4;\n    if (((*(arg1 + 0x4010) != 0) && (*(arg1 + 0x4020) != 0)) && (iVar4 != 0)) {\n        uVar2 = *(arg2_01 + 0x44);\n        fcn.14000aec0(*(arg1 + 0x4010), \n                      (uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18) + arg2_01, \n                      *(arg1 + 0x4018));\n        uVar2 = *(arg2_01 + 0x4c);\n        fcn.14000aec0(*(arg1 + 0x4020), \n                      (uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18) + arg2_01, \n                      *(arg1 + 0x4028));\n        uVar2 = *(arg2_01 + 0x54);\n        fcn.14000aec0(*(arg1 + 0x4030), \n                      (uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18) + arg2_01, \n                      *(arg1 + 0x4038));\n        if (bVar1) {\n            fcn.140014138(arg2_01);\n        }\n        return 0;\n    }\n    fcn.140001c50(\"Cannot allocate memory for necessary files.\\n\", arg2_02, arg3_00, arg4);\n    return 0xffffffff;\n}\n",
        "token_count": 1203
    },
    "140004df": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140004df0(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    int64_t arg3;\n    ulong arg4;\n    \n    (**0x14002a360)(0x14004aeb8);\n    if ((*(arg1 + 0x4048) != 0) && (*(arg1 + 0x4050) != 0)) {\n        (**0x14002a360)(arg2);\n        arg4 = 0;\n        arg2_00 = 0x140004190;\n        arg3 = arg1;\n        iVar1 = (**0x14002a360)(arg1 + 8);\n        if (iVar1 == 0) {\n            (**0x14002a360)(0x14004aec8);\n            (**0x14002a360)(0x14004aeb8);\n            (**0x14002a360)(0x14004aed0, 0x14004aec8, 0);\n            (**0x14002a360)(0x14004aec8);\n            (**0x14002a360)(0x14004aed0);\n            return 0;\n        }\n        fcn.140001c50(\"SPLASH: Tcl is not threaded. Only threaded tcl is supported.\\n\", arg2_00, arg3, arg4);\n        (**0x14002a360)(0x14004aeb8);\n        fcn.1400049f0(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 339
    },
    "14000588": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140005880(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong arg2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    if (*(arg1 + 0x5078) != 1) {\n        arg2 = fcn.1400016d0(arg1, \"pyi-runtime-tmpdir\", in_R8, in_R9);\n        iVar1 = fcn.1400058e0(arg1 + 0x3078);\n        if (iVar1 == 0) {\n            fcn.140001c50(\"INTERNAL ERROR: cannot create temporary directory!\\n\", arg2, in_R8, in_R9);\n            return 0xffffffff;\n        }\n        *(arg1 + 0x5078) = 1;\n    }\n    return 0;\n}\n",
        "token_count": 180
    },
    "140005af": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140005af0(ulong param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    char *arg1;\n    uchar auStackX32 [8];\n    ulong uStack8;\n    \n    uStack8 = 0x140005afa;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00004020 + iVar2) = *0x14003d018 ^ &stack0x00000000 + iVar2;\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b1c;\n    uVar3 = fcn.140006db0(0, param_1, 0);\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b30;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableW)(uVar3, &stack0x00000020 + iVar2, 0x2000);\n    if (iVar1 != 0) {\n        *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b4d;\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(&stack0x00000020 + iVar2, &stack0x00002020 + iVar2);\n        *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b5c;\n        arg1 = fcn.140006ec0(0, &stack0x00000020 + iVar2, 0);\n        if ((arg1 != NULL) && (*arg1 != '\\0')) {\n            *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b6e;\n            fcn.14001926c(arg1);\n            *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b7e;\n            fcn.14000a100(*(&stack0x00004020 + iVar2) ^ &stack0x00000000 + iVar2);\n            return;\n        }\n    }\n    *(&stack0xfffffffffffffff8 + iVar2) = 0x140005b98;\n    fcn.14000a100(*(&stack0x00004020 + iVar2) ^ &stack0x00000000 + iVar2);\n    return;\n}\n",
        "token_count": 513
    },
    "140005df": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140005df0(ulong param_1)\n\n{\n    int16_t *piVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint *puVar10;\n    int32_t iVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    uint *puVar14;\n    uint *puVar15;\n    uint *puVar16;\n    int64_t iVar17;\n    int64_t iVar18;\n    uint auStackX24 [4];\n    ulong uStack16;\n    \n    uStack16 = 0x140005e00;\n    iVar12 = fcn.14000a130();\n    iVar12 = -iVar12;\n    *(&stack0x00004498 + iVar12) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar12;\n    *(&stack0xfffffffffffffff0 + iVar12) = 0x140005e2b;\n    fcn.140006db0(&stack0x00002488 + iVar12, param_1, 0x1000);\n    iVar17 = 0;\n    do {\n        iVar13 = iVar17 + iVar12;\n        *(&stack0x00000478 + iVar17 + iVar12) = *(&stack0x00002488 + iVar13);\n        iVar17 = iVar17 + 2;\n    } while (*(&stack0x00002488 + iVar13) != 0);\n    iVar17 = -1;\n    do {\n        iVar13 = iVar17;\n        iVar17 = iVar13 + 1;\n    } while (*(&stack0x00000478 + iVar17 * 2 + iVar12) != 0);\n    if ((*(&stack0x00000476 + iVar17 * 2 + iVar12) != 0x2f) && (*(&stack0x00000476 + iVar17 * 2 + iVar12) != 0x5c)) {\n        puVar15 = &stack0x00000476 + iVar12;\n        do {\n            piVar1 = puVar15 + 2;\n            puVar15 = puVar15 + 2;\n        } while (*piVar1 != 0);\n        iVar17 = iVar13 + 2;\n        *puVar15 = *0x14002cbd4;\n    }\n    puVar15 = &stack0x00000476 + iVar12;\n    do {\n        piVar1 = puVar15 + 2;\n        puVar15 = puVar15 + 2;\n    } while (*piVar1 != 0);\n    *puVar15 = *0x14002cbd8;\n    *(&stack0xfffffffffffffff0 + iVar12) = 0x140005eda;\n    iVar13 = fcn.140016ba0(&stack0x00000478 + iVar12, &stack0x00000248 + iVar12);\n    if (iVar13 != -1) {\n        iVar18 = 4;\n        puVar15 = &stack0x00000018 + iVar12;\n        puVar10 = &stack0x00000248 + iVar12;\n        do {\n            puVar16 = puVar10;\n            puVar14 = puVar15;\n            uVar2 = puVar16[1];\n            uVar3 = puVar16[2];\n            uVar4 = puVar16[3];\n            uVar5 = puVar16[4];\n            uVar6 = puVar16[5];\n            uVar7 = puVar16[6];\n            uVar8 = puVar16[7];\n            *puVar14 = *puVar16;\n            puVar14[1] = uVar2;\n            puVar14[2] = uVar3;\n            puVar14[3] = uVar4;\n            uVar2 = puVar16[8];\n            uVar3 = puVar16[9];\n            uVar4 = puVar16[10];\n            uVar9 = puVar16[0xb];\n            puVar14[4] = uVar5;\n            puVar14[5] = uVar6;\n            puVar14[6] = uVar7;\n            puVar14[7] = uVar8;\n            uVar5 = puVar16[0xc];\n            uVar6 = puVar16[0xd];\n            uVar7 = puVar16[0xe];\n            uVar8 = puVar16[0xf];\n            puVar14[8] = uVar2;\n            puVar14[9] = uVar3;\n            puVar14[10] = uVar4;\n            puVar14[0xb] = uVar9;\n            uVar2 = puVar16[0x10];\n            uVar3 = puVar16[0x11];\n            uVar4 = puVar16[0x12];\n            uVar9 = puVar16[0x13];\n            puVar14[0xc] = uVar5;\n            puVar14[0xd] = uVar6;\n            puVar14[0xe] = uVar7;\n            puVar14[0xf] = uVar8;\n            uVar5 = puVar16[0x14];\n            uVar6 = puVar16[0x15];\n            uVar7 = puVar16[0x16];\n            uVar8 = puVar16[0x17];\n            puVar14[0x10] = uVar2;\n            puVar14[0x11] = uVar3;\n            puVar14[0x12] = uVar4;\n            puVar14[0x13] = uVar9;\n            uVar2 = puVar16[0x18];\n            uVar3 = puVar16[0x19];\n            uVar4 = puVar16[0x1a];\n            uVar9 = puVar16[0x1b];\n            puVar14[0x14] = uVar5;\n            puVar14[0x15] = uVar6;\n            puVar14[0x16] = uVar7;\n            puVar14[0x17] = uVar8;\n            uVar5 = puVar16[0x1c];\n            uVar6 = puVar16[0x1d];\n            uVar7 = puVar16[0x1e];\n            uVar8 = puVar16[0x1f];\n            puVar14[0x18] = uVar2;\n            puVar14[0x19] = uVar3;\n            puVar14[0x1a] = uVar4;\n            puVar14[0x1b] = uVar9;\n            puVar14[0x1c] = uVar5;\n            puVar14[0x1d] = uVar6;\n            puVar14[0x1e] = uVar7;\n            puVar14[0x1f] = uVar8;\n            iVar18 = iVar18 + -1;\n            puVar15 = puVar14 + 0x20;\n            puVar10 = puVar16 + 0x20;\n        } while (iVar18 != 0);\n        uVar6 = puVar16[0x21];\n        uVar7 = puVar16[0x22];\n        uVar8 = puVar16[0x23];\n        uVar2 = puVar16[0x24];\n        uVar3 = puVar16[0x25];\n        uVar4 = puVar16[0x26];\n        uVar5 = puVar16[0x27];\n        puVar14[0x20] = puVar16[0x20];\n        puVar14[0x21] = uVar6;\n        puVar14[0x22] = uVar7;\n        puVar14[0x23] = uVar8;\n        uVar6 = puVar16[0x28];\n        uVar7 = puVar16[0x29];\n        uVar8 = puVar16[0x2a];\n        uVar9 = puVar16[0x2b];\n        puVar14[0x24] = uVar2;\n        puVar14[0x25] = uVar3;\n        puVar14[0x26] = uVar4;\n        puVar14[0x27] = uVar5;\n        puVar14[0x28] = uVar6;\n        puVar14[0x29] = uVar7;\n        puVar14[0x2a] = uVar8;\n        puVar14[0x2b] = uVar9;\n        *(&stack0xfffffffffffffff0 + iVar12) = 0x140005f7e;\n        fcn.140006490(&stack0x00000478 + iVar12, iVar17, &stack0x00000018 + iVar12);\n        *(&stack0xfffffffffffffff0 + iVar12) = 0x140005f8e;\n        iVar11 = fcn.140016ba8(iVar13, &stack0x00000248 + iVar12);\n        while (iVar11 == 0) {\n            iVar18 = 4;\n            puVar15 = &stack0x00000248 + iVar12;\n            puVar10 = &stack0x00000018 + iVar12;\n            do {\n                puVar16 = puVar10;\n                puVar14 = puVar15;\n                uVar2 = puVar14[1];\n                uVar3 = puVar14[2];\n                uVar4 = puVar14[3];\n                uVar5 = puVar14[4];\n                uVar6 = puVar14[5];\n                uVar7 = puVar14[6];\n                uVar8 = puVar14[7];\n                *puVar16 = *puVar14;\n                puVar16[1] = uVar2;\n                puVar16[2] = uVar3;\n                puVar16[3] = uVar4;\n                uVar2 = puVar14[8];\n                uVar3 = puVar14[9];\n                uVar4 = puVar14[10];\n                uVar9 = puVar14[0xb];\n                puVar16[4] = uVar5;\n                puVar16[5] = uVar6;\n                puVar16[6] = uVar7;\n                puVar16[7] = uVar8;\n                uVar5 = puVar14[0xc];\n                uVar6 = puVar14[0xd];\n                uVar7 = puVar14[0xe];\n                uVar8 = puVar14[0xf];\n                puVar16[8] = uVar2;\n                puVar16[9] = uVar3;\n                puVar16[10] = uVar4;\n                puVar16[0xb] = uVar9;\n                uVar2 = puVar14[0x10];\n                uVar3 = puVar14[0x11];\n                uVar4 = puVar14[0x12];\n                uVar9 = puVar14[0x13];\n                puVar16[0xc] = uVar5;\n                puVar16[0xd] = uVar6;\n                puVar16[0xe] = uVar7;\n                puVar16[0xf] = uVar8;\n                uVar5 = puVar14[0x14];\n                uVar6 = puVar14[0x15];\n                uVar7 = puVar14[0x16];\n                uVar8 = puVar14[0x17];\n                puVar16[0x10] = uVar2;\n                puVar16[0x11] = uVar3;\n                puVar16[0x12] = uVar4;\n                puVar16[0x13] = uVar9;\n                uVar2 = puVar14[0x18];\n                uVar3 = puVar14[0x19];\n                uVar4 = puVar14[0x1a];\n                uVar9 = puVar14[0x1b];\n                puVar16[0x14] = uVar5;\n                puVar16[0x15] = uVar6;\n                puVar16[0x16] = uVar7;\n                puVar16[0x17] = uVar8;\n                uVar5 = puVar14[0x1c];\n                uVar6 = puVar14[0x1d];\n                uVar7 = puVar14[0x1e];\n                uVar8 = puVar14[0x1f];\n                puVar16[0x18] = uVar2;\n                puVar16[0x19] = uVar3;\n                puVar16[0x1a] = uVar4;\n                puVar16[0x1b] = uVar9;\n                puVar16[0x1c] = uVar5;\n                puVar16[0x1d] = uVar6;\n                puVar16[0x1e] = uVar7;\n                puVar16[0x1f] = uVar8;\n                iVar18 = iVar18 + -1;\n                puVar15 = puVar14 + 0x20;\n                puVar10 = puVar16 + 0x20;\n            } while (iVar18 != 0);\n            uVar6 = puVar14[0x21];\n            uVar7 = puVar14[0x22];\n            uVar8 = puVar14[0x23];\n            uVar2 = puVar14[0x24];\n            uVar3 = puVar14[0x25];\n            uVar4 = puVar14[0x26];\n            uVar5 = puVar14[0x27];\n            puVar16[0x20] = puVar14[0x20];\n            puVar16[0x21] = uVar6;\n            puVar16[0x22] = uVar7;\n            puVar16[0x23] = uVar8;\n            uVar6 = puVar14[0x28];\n            uVar7 = puVar14[0x29];\n            uVar8 = puVar14[0x2a];\n            uVar9 = puVar14[0x2b];\n            puVar16[0x24] = uVar2;\n            puVar16[0x25] = uVar3;\n            puVar16[0x26] = uVar4;\n            puVar16[0x27] = uVar5;\n            puVar16[0x28] = uVar6;\n            puVar16[0x29] = uVar7;\n            puVar16[0x2a] = uVar8;\n            puVar16[0x2b] = uVar9;\n            *(&stack0xfffffffffffffff0 + iVar12) = 0x14000602e;\n            fcn.140006490(&stack0x00000478 + iVar12, iVar17, &stack0x00000018 + iVar12);\n            *(&stack0xfffffffffffffff0 + iVar12) = 0x14000603e;\n            iVar11 = fcn.140016ba8(iVar13, &stack0x00000248 + iVar12);\n        }\n        *(&stack0xfffffffffffffff0 + iVar12) = 0x14000604e;\n        fcn.140016b78(iVar13);\n    }\n    *(&stack0xfffffffffffffff0 + iVar12) = 0x14000605b;\n    fcn.140016850(&stack0x00002488 + iVar12);\n    *(&stack0xfffffffffffffff0 + iVar12) = 0x14000606b;\n    fcn.14000a100(*(&stack0x00004498 + iVar12) ^ &stack0xfffffffffffffff8 + iVar12);\n    return;\n}\n",
        "token_count": 3481
    },
    "14000649": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140006490(int64_t param_1, int64_t param_2, uint *param_3)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint *puVar11;\n    int32_t iVar12;\n    int64_t iVar13;\n    uint *puVar14;\n    int64_t iVar15;\n    uint *puVar16;\n    int64_t iVar17;\n    uint auStackX24 [4];\n    ulong uStack16;\n    \n    uStack16 = 0x14000649c;\n    iVar13 = fcn.14000a130();\n    iVar13 = -iVar13;\n    *(&stack0x00001028 + iVar13) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar13;\n    iVar15 = 4;\n    puVar11 = &stack0x00000018 + iVar13;\n    do {\n        puVar16 = param_3;\n        puVar14 = puVar11;\n        uVar3 = puVar16[1];\n        uVar4 = puVar16[2];\n        uVar5 = puVar16[3];\n        uVar6 = puVar16[4];\n        uVar7 = puVar16[5];\n        uVar8 = puVar16[6];\n        uVar9 = puVar16[7];\n        *puVar14 = *puVar16;\n        puVar14[1] = uVar3;\n        puVar14[2] = uVar4;\n        puVar14[3] = uVar5;\n        uVar3 = puVar16[8];\n        uVar4 = puVar16[9];\n        uVar5 = puVar16[10];\n        uVar10 = puVar16[0xb];\n        puVar14[4] = uVar6;\n        puVar14[5] = uVar7;\n        puVar14[6] = uVar8;\n        puVar14[7] = uVar9;\n        uVar6 = puVar16[0xc];\n        uVar7 = puVar16[0xd];\n        uVar8 = puVar16[0xe];\n        uVar9 = puVar16[0xf];\n        puVar14[8] = uVar3;\n        puVar14[9] = uVar4;\n        puVar14[10] = uVar5;\n        puVar14[0xb] = uVar10;\n        uVar3 = puVar16[0x10];\n        uVar4 = puVar16[0x11];\n        uVar5 = puVar16[0x12];\n        uVar10 = puVar16[0x13];\n        puVar14[0xc] = uVar6;\n        puVar14[0xd] = uVar7;\n        puVar14[0xe] = uVar8;\n        puVar14[0xf] = uVar9;\n        uVar6 = puVar16[0x14];\n        uVar7 = puVar16[0x15];\n        uVar8 = puVar16[0x16];\n        uVar9 = puVar16[0x17];\n        puVar14[0x10] = uVar3;\n        puVar14[0x11] = uVar4;\n        puVar14[0x12] = uVar5;\n        puVar14[0x13] = uVar10;\n        uVar3 = puVar16[0x18];\n        uVar4 = puVar16[0x19];\n        uVar5 = puVar16[0x1a];\n        uVar10 = puVar16[0x1b];\n        puVar14[0x14] = uVar6;\n        puVar14[0x15] = uVar7;\n        puVar14[0x16] = uVar8;\n        puVar14[0x17] = uVar9;\n        uVar6 = puVar16[0x1c];\n        uVar7 = puVar16[0x1d];\n        uVar8 = puVar16[0x1e];\n        uVar9 = puVar16[0x1f];\n        puVar14[0x18] = uVar3;\n        puVar14[0x19] = uVar4;\n        puVar14[0x1a] = uVar5;\n        puVar14[0x1b] = uVar10;\n        puVar14[0x1c] = uVar6;\n        puVar14[0x1d] = uVar7;\n        puVar14[0x1e] = uVar8;\n        puVar14[0x1f] = uVar9;\n        iVar15 = iVar15 + -1;\n        puVar11 = puVar14 + 0x20;\n        param_3 = puVar16 + 0x20;\n    } while (iVar15 != 0);\n    uVar3 = puVar16[0x21];\n    uVar4 = puVar16[0x22];\n    uVar5 = puVar16[0x23];\n    uVar6 = puVar16[0x24];\n    uVar7 = puVar16[0x25];\n    uVar8 = puVar16[0x26];\n    uVar9 = puVar16[0x27];\n    puVar14[0x20] = puVar16[0x20];\n    puVar14[0x21] = uVar3;\n    puVar14[0x22] = uVar4;\n    puVar14[0x23] = uVar5;\n    uVar3 = puVar16[0x28];\n    uVar4 = puVar16[0x29];\n    uVar5 = puVar16[0x2a];\n    uVar10 = puVar16[0x2b];\n    puVar14[0x24] = uVar6;\n    puVar14[0x25] = uVar7;\n    puVar14[0x26] = uVar8;\n    puVar14[0x27] = uVar9;\n    puVar14[0x28] = uVar3;\n    puVar14[0x29] = uVar4;\n    puVar14[0x2a] = uVar5;\n    puVar14[0x2b] = uVar10;\n    if ((*(&stack0x0000003c + iVar13) != 0x2e) ||\n       ((*(&stack0x0000003e + iVar13) != 0 &&\n        ((*(&stack0x0000003e + iVar13) != 0x2e || (*(&stack0x00000040 + iVar13) != 0)))))) {\n        iVar15 = param_1 + -2;\n        *(param_1 + param_2 * 2) = 0;\n        do {\n            piVar1 = iVar15 + 2;\n            iVar15 = iVar15 + 2;\n        } while (*piVar1 != 0);\n        iVar17 = 0;\n        do {\n            iVar2 = *(&stack0x0000003c + iVar17 * 2 + iVar13);\n            *(iVar15 + iVar17 * 2) = iVar2;\n            iVar17 = iVar17 + 1;\n        } while (iVar2 != 0);\n        if (((&stack0x00000018)[iVar13] & 0x10) == 0) {\n            *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065d6;\n            iVar12 = fcn.1400170d4(param_1);\n            if (iVar12 != 0) {\n                *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065e5;\n                (*_sym.imp.KERNEL32.dll_Sleep)(100);\n                *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065ed;\n                fcn.1400170d4(param_1);\n            }\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065a4;\n            iVar12 = fcn.1400069e0(param_1);\n            if (iVar12 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065bb;\n                fcn.140006ec0(&stack0x00000018 + iVar13, param_1, 0x1000);\n                *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065c5;\n                fcn.140005df0(&stack0x00000018 + iVar13);\n            }\n            else {\n                *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065cf;\n                fcn.140016850(param_1);\n            }\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar13) = 0x1400065fd;\n    fcn.14000a100(*(&stack0x00001028 + iVar13) ^ &stack0xfffffffffffffff8 + iVar13);\n    return;\n}\n",
        "token_count": 2043
    },
    "14000696": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool fcn.140006960(ushort *arg1)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    \n    uVar2 = 0xffffffffffffffff;\n    do {\n        uVar3 = uVar2;\n        uVar2 = uVar3 + 1;\n    } while (arg1[uVar2] != 0);\n    if (uVar3 - 1 < 2) {\n        iVar1 = fcn.140017b40(*arg1, 0x103);\n        if ((iVar1 != 0) && (arg1[1] == 0x3a)) {\n            if (2 < uVar2) {\n                return arg1[2] == 0x5c;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n",
        "token_count": 184
    },
    "14000713": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t fcn.140007130(ulong arg1, uint8_t *arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    int32_t iVar19;\n    int64_t iVar20;\n    uint32_t uVar21;\n    uint64_t uVar22;\n    uint32_t uVar23;\n    uint64_t uVar24;\n    \n    uVar22 = arg3;\n    uVar23 = arg1 >> 0x10;\n    arg1._0_4_ = arg1 & 0xffff;\n    if (uVar22 == 1) {\n        arg1._0_4_ = *arg2 + arg1;\n        uVar21 = arg1 - 0xfff1;\n        if (arg1 < 0xfff1) {\n            uVar21 = arg1;\n        }\n        uVar23 = uVar21 + uVar23;\n        uVar3 = uVar23 - 0xfff1;\n        if (uVar23 < 0xfff1) {\n            uVar3 = uVar23;\n        }\n        return uVar3 << 0x10 | uVar21;\n    }\n    if (arg2 == NULL) {\n        return 1;\n    }\n    if (uVar22 < 0x10) {\n        for (; uVar22 != 0; uVar22 = uVar22 - 1) {\n            uVar2 = *arg2;\n            arg2 = arg2 + 1;\n            arg1._0_4_ = arg1 + uVar2;\n            uVar23 = uVar23 + arg1;\n        }\n        uVar21 = arg1 - 0xfff1;\n        if (arg1 < 0xfff1) {\n            uVar21 = arg1;\n        }\n        return ((uVar23 / 0xfff1) * 0xf + uVar23) * 0x10000 | uVar21;\n    }\n    if (0x15af < uVar22) {\n        iVar20 = SUB168(ZEXT816(0x79baa6bb6398b6f7) * ZEXT816(uVar22) >> 0x40, 0);\n        uVar24 = (uVar22 - iVar20 >> 1) + iVar20 >> 0xc;\n        uVar22 = uVar22 + uVar24 * -0x15b0;\n        do {\n            iVar19 = 0x15b;\n            do {\n                iVar4 = arg1 + *arg2;\n                iVar5 = iVar4 + arg2[1];\n                iVar6 = iVar5 + arg2[2];\n                iVar7 = iVar6 + arg2[3];\n                iVar8 = iVar7 + arg2[4];\n                iVar9 = iVar8 + arg2[5];\n                iVar10 = iVar9 + arg2[6];\n                iVar11 = iVar10 + arg2[7];\n                iVar12 = iVar11 + arg2[8];\n                iVar13 = iVar12 + arg2[9];\n                iVar14 = iVar13 + arg2[10];\n                iVar15 = iVar14 + arg2[0xb];\n                iVar16 = iVar15 + arg2[0xc];\n                iVar17 = iVar16 + arg2[0xd];\n                iVar18 = iVar17 + arg2[0xe];\n                puVar1 = arg2 + 0xf;\n                arg2 = arg2 + 0x10;\n                arg1._0_4_ = iVar18 + *puVar1;\n                uVar23 = uVar23 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar12 + iVar13 +\n                         iVar14 + iVar15 + iVar16 + iVar17 + iVar18 + arg1;\n                iVar19 = iVar19 + -1;\n            } while (iVar19 != 0);\n            arg1._0_4_ = arg1 % 0xfff1;\n            uVar23 = uVar23 % 0xfff1;\n            uVar24 = uVar24 - 1;\n        } while (uVar24 != 0);\n        if (uVar22 == 0) goto code_r0x00014000740b;\n        if (uVar22 < 0x10) goto code_r0x0001400073d2;\n    }\n    uVar24 = uVar22 >> 4;\n    uVar22 = uVar22 + uVar24 * -0x10;\n    do {\n        iVar19 = arg1 + *arg2;\n        iVar4 = iVar19 + arg2[1];\n        iVar5 = iVar4 + arg2[2];\n        iVar6 = iVar5 + arg2[3];\n        iVar7 = iVar6 + arg2[4];\n        iVar8 = iVar7 + arg2[5];\n        iVar9 = iVar8 + arg2[6];\n        iVar10 = iVar9 + arg2[7];\n        iVar11 = iVar10 + arg2[8];\n        iVar12 = iVar11 + arg2[9];\n        iVar13 = iVar12 + arg2[10];\n        iVar14 = iVar13 + arg2[0xb];\n        iVar15 = iVar14 + arg2[0xc];\n        iVar16 = iVar15 + arg2[0xd];\n        iVar17 = iVar16 + arg2[0xe];\n        puVar1 = arg2 + 0xf;\n        arg2 = arg2 + 0x10;\n        arg1._0_4_ = iVar17 + *puVar1;\n        uVar23 = uVar23 + iVar19 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar12 + iVar13 +\n                 iVar14 + iVar15 + iVar16 + iVar17 + arg1;\n        uVar24 = uVar24 - 1;\n    } while (uVar24 != 0);\n    for (; uVar22 != 0; uVar22 = uVar22 - 1) {\ncode_r0x0001400073d2:\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        arg1._0_4_ = arg1 + uVar2;\n        uVar23 = uVar23 + arg1;\n    }\n    arg1._0_4_ = arg1 % 0xfff1;\n    uVar23 = uVar23 % 0xfff1;\ncode_r0x00014000740b:\n    return uVar23 << 0x10 | arg1;\n}\n",
        "token_count": 1533
    },
    "1400078e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400078e0(uint8_t **arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uint8_t *puVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    char *pcVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    uint8_t *puVar20;\n    uint8_t *puVar21;\n    uint8_t *puVar22;\n    uint8_t *puVar23;\n    uint8_t *puVar24;\n    uint8_t *puVar25;\n    int64_t iVar26;\n    uint32_t uVar27;\n    int32_t iVar28;\n    int32_t iStack88;\n    \n    puVar7 = arg1[5];\n    puVar8 = arg1[2];\n    puVar20 = *arg1;\n    iVar28 = *(arg1 + 3);\n    puVar13 = puVar20 + (*(arg1 + 1) - 5);\n    uVar2 = *(puVar7 + 0x3c);\n    puVar9 = *(puVar7 + 0x40);\n    uVar19 = *(puVar7 + 0x48);\n    uVar27 = *(puVar7 + 0x4c);\n    uVar3 = *(puVar7 + 0x70);\n    iVar10 = *(puVar7 + 0x60);\n    iVar11 = *(puVar7 + 0x68);\n    iStack88 = puVar8 - (arg2 - iVar28);\n    iVar4 = *(puVar7 + 0x34);\n    uVar5 = *(puVar7 + 0x74);\n    uVar6 = *(puVar7 + 0x38);\n    puVar22 = puVar8;\ncode_r0x000140007980:\n    if (uVar27 < 0xf) {\n        uVar19 = uVar19 + (*puVar20 << (uVar27 & 0x1f)) + (puVar20[1] << (uVar27 + 8 & 0x1f));\n        puVar20 = puVar20 + 2;\n        uVar27 = uVar27 + 0x10;\n    }\n    uVar16 = (1 << (uVar3 & 0x1f)) - 1U & uVar19;\n    uVar1 = *(iVar10 + 1 + uVar16 * 4);\n    uVar19 = uVar19 >> (uVar1 & 0x1f);\n    uVar27 = uVar27 - uVar1;\n    uVar1 = *(iVar10 + uVar16 * 4);\n    while (iVar26 = iVar10 + uVar16 * 4,  uVar1 != 0) {\n        puVar24 = puVar22;\n        if ((uVar1 & 0x10) != 0) {\n            uVar12 = *(iVar26 + 2);\n            uVar17 = uVar1 & 0xf;\n            puVar21 = puVar20;\n            if ((uVar1 & 0xf) != 0) {\n                if (uVar27 < uVar17) {\n                    uVar1 = *puVar20;\n                    puVar20 = puVar20 + 1;\n                    uVar19 = uVar19 + (uVar1 << (uVar27 & 0x1f));\n                    uVar27 = uVar27 + 8;\n                }\n                uVar12 = (1 << uVar17) - 1U & uVar19;\n                uVar19 = uVar19 >> uVar17;\n                uVar12 = *(iVar26 + 2) + uVar12;\n                uVar27 = uVar27 - uVar17;\n                puVar21 = puVar20;\n            }\n            if (uVar27 < 0xf) {\n                uVar19 = uVar19 + (*puVar21 << (uVar27 & 0x1f)) + (puVar21[1] << (uVar27 + 8 & 0x1f));\n                puVar21 = puVar21 + 2;\n                uVar27 = uVar27 + 0x10;\n            }\n            puVar25 = ((1 << (uVar5 & 0x1f)) - 1U & uVar19) * 4 + iVar11;\n            uVar1 = *puVar25;\n            uVar27 = uVar27 - puVar25[1];\n            uVar19 = uVar19 >> (puVar25[1] & 0x1f);\n            if ((uVar1 & 0x10) == 0) goto code_r0x000140007a90;\n            goto code_r0x000140007acd;\n        }\n        if ((uVar1 & 0x40) != 0) {\n            if ((uVar1 & 0x20) == 0) {\n                arg1[4] = \"invalid literal/length code\";\n                *(puVar7 + 8) = 0x3f51;\n            }\n            else {\n                *(puVar7 + 8) = 0x3f3f;\n            }\n            goto code_r0x000140007d7e;\n        }\n        uVar16 = ((1 << (uVar1 & 0x1f)) - 1U & uVar19) + *(iVar26 + 2);\n        uVar1 = *(iVar10 + 1 + uVar16 * 4);\n        uVar19 = uVar19 >> (uVar1 & 0x1f);\n        uVar27 = uVar27 - uVar1;\n        uVar1 = *(iVar10 + uVar16 * 4);\n    }\n    *puVar22 = *(iVar26 + 2);\n    puVar24 = puVar22 + 1;\n    goto code_r0x000140007cff;\n    while( true ) {\n        puVar25 = (((1 << (uVar1 & 0x1f)) - 1U & uVar19) + *(puVar25 + 2)) * 4 + iVar11;\n        uVar1 = *puVar25;\n        uVar27 = uVar27 - puVar25[1];\n        uVar19 = uVar19 >> (puVar25[1] & 0x1f);\n        if ((uVar1 & 0x10) != 0) break;\ncode_r0x000140007a90:\n        if ((uVar1 & 0x40) != 0) {\n            pcVar14 = \"invalid distance code\";\n            goto code_r0x000140007d52;\n        }\n    }\ncode_r0x000140007acd:\n    uVar18 = uVar1 & 0xf;\n    puVar20 = puVar21;\n    uVar17 = uVar27;\n    if (uVar27 < uVar18) {\n        uVar17 = uVar27 + 8;\n        uVar19 = uVar19 + (*puVar21 << (uVar27 & 0x1f));\n        puVar20 = puVar21 + 1;\n        if (uVar17 < uVar18) {\n            uVar19 = uVar19 + (*puVar20 << (uVar17 & 0x1f));\n            puVar20 = puVar21 + 2;\n            uVar17 = uVar27 + 0x10;\n        }\n    }\n    uVar27 = uVar17 - uVar18;\n    uVar17 = (1 << uVar18) - 1U & uVar19;\n    uVar19 = uVar19 >> uVar18;\n    uVar17 = *(puVar25 + 2) + uVar17;\n    uVar18 = puVar22 - iStack88;\n    if (uVar17 <= uVar18) {\n        puVar21 = puVar22 + -uVar17;\n        do {\n            puVar23 = puVar22;\n            puVar25 = puVar21;\n            *puVar23 = *puVar25;\n            uVar12 = uVar12 - 3;\n            puVar23[1] = puVar25[1];\n            puVar23[2] = puVar25[2];\n            puVar24 = puVar23 + 3;\n            puVar21 = puVar25 + 3;\n            puVar22 = puVar24;\n        } while (2 < uVar12);\n        if (uVar12 != 0) {\n            *puVar24 = puVar25[3];\n            puVar24 = puVar23 + 4;\n            if (1 < uVar12) {\n                puVar23[4] = puVar25[4];\n                puVar24 = puVar23 + 5;\n            }\n        }\n        goto code_r0x000140007cff;\n    }\n    uVar18 = uVar17 - uVar18;\n    if ((uVar6 < uVar18) && (*(puVar7 + 0x1be0) != 0)) {\n        pcVar14 = \"invalid distance too far back\";\n        puVar21 = puVar20;\ncode_r0x000140007d52:\n        arg1[4] = pcVar14;\n        *(puVar7 + 8) = 0x3f51;\n        puVar20 = puVar21;\ncode_r0x000140007d7e:\n        arg1[2] = puVar24;\n        *(arg1 + 3) = ((puVar8 + (iVar28 - 0x101)) - puVar24) + 0x101;\n        *arg1 = puVar20 + -(uVar27 >> 3);\n        iVar28 = uVar27 - (uVar27 & 0xfffffff8);\n        *(arg1 + 1) = (puVar13 - (puVar20 + -(uVar27 >> 3))) + 5;\n        *(puVar7 + 0x4c) = iVar28;\n        *(puVar7 + 0x48) = (1 << (iVar28 & 0x1f)) - 1U & uVar19;\n        return;\n    }\n    if (uVar2 == 0) {\n        puVar21 = puVar9 + (iVar4 - uVar18);\n        if (uVar18 < uVar12) {\n            uVar12 = uVar12 - uVar18;\n            do {\n                uVar1 = *puVar21;\n                puVar21 = puVar21 + 1;\n                *puVar22 = uVar1;\n                puVar22 = puVar22 + 1;\n                uVar18 = uVar18 - 1;\n            } while (uVar18 != 0);\ncode_r0x000140007c03:\n            puVar21 = puVar22 + -uVar17;\n        }\n    }\n    else if (uVar2 < uVar18) {\n        uVar15 = uVar18 - uVar2;\n        puVar21 = puVar9 + (iVar4 + (uVar2 - uVar18));\n        if (uVar15 < uVar12) {\n            uVar12 = uVar12 - uVar15;\n            iVar26 = (puVar9 + (iVar4 + (uVar2 - uVar18))) - puVar22;\n            do {\n                *puVar22 = puVar22[iVar26];\n                puVar22 = puVar22 + 1;\n                uVar15 = uVar15 - 1;\n            } while (uVar15 != 0);\n            puVar21 = puVar9;\n            if (uVar2 < uVar12) {\n                uVar12 = uVar12 - uVar2;\n                puVar24 = puVar9;\n                uVar18 = uVar2;\n                do {\n                    uVar1 = *puVar24;\n                    puVar24 = puVar24 + 1;\n                    *puVar22 = uVar1;\n                    puVar22 = puVar22 + 1;\n                    uVar18 = uVar18 - 1;\n                } while (uVar18 != 0);\n                goto code_r0x000140007c03;\n            }\n        }\n    }\n    else {\n        puVar21 = puVar9 + (uVar2 - uVar18);\n        if (uVar18 < uVar12) {\n            uVar12 = uVar12 - uVar18;\n            do {\n                uVar1 = *puVar21;\n                puVar21 = puVar21 + 1;\n                *puVar22 = uVar1;\n                puVar22 = puVar22 + 1;\n                uVar18 = uVar18 - 1;\n            } while (uVar18 != 0);\n            goto code_r0x000140007c03;\n        }\n    }\n    if (2 < uVar12) {\n        uVar16 = (uVar12 - 3) / 3 + 1;\n        do {\n            uVar12 = uVar12 - 3;\n            *puVar22 = *puVar21;\n            puVar22[1] = puVar21[1];\n            puVar24 = puVar21 + 2;\n            puVar21 = puVar21 + 3;\n            puVar22[2] = *puVar24;\n            puVar22 = puVar22 + 3;\n            uVar16 = uVar16 - 1;\n        } while (uVar16 != 0);\n    }\n    puVar24 = puVar22;\n    if (uVar12 != 0) {\n        *puVar22 = *puVar21;\n        puVar24 = puVar22 + 1;\n        if (1 < uVar12) {\n            puVar22[1] = puVar21[1];\n            puVar24 = puVar22 + 2;\n        }\n    }\ncode_r0x000140007cff:\n    if ((puVar13 <= puVar20) || (puVar22 = puVar24,  puVar8 + (iVar28 - 0x101) <= puVar24)) goto code_r0x000140007d7e;\n    goto code_r0x000140007980;\n}\n",
        "token_count": 3194
    },
    "140007de": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140007de0(uint8_t **arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    uint8_t *puVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint16_t uVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int64_t iVar11;\n    uint32_t uVar12;\n    uint8_t *arg2_00;\n    uint32_t uVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint32_t uVar16;\n    ushort uVar17;\n    int32_t iVar18;\n    uint8_t *puVar19;\n    uint32_t uVar20;\n    uint32_t uStackX8;\n    int32_t iStackX24;\n    uint32_t uStackX32;\n    uint8_t uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uint uStack100;\n    uint32_t uStack96;\n    uint8_t *puStack88;\n    \n    if ((((((arg1 != NULL) && (arg1[6] != NULL)) && (arg1[7] != NULL)) &&\n         ((puVar2 = arg1[5],  puVar2 != NULL && (*puVar2 == arg1)))) && (*(puVar2 + 1) - 0x3f34U < 0x20)) &&\n       ((arg1[2] != NULL && ((*arg1 != NULL || (*(arg1 + 1) == 0)))))) {\n        puVar3 = arg1[5];\n        iVar4 = *(puVar3 + 8);\n        if (iVar4 == 0x3f3f) {\n            *(puVar3 + 8) = 0x3f40;\n            iVar4 = 0x3f40;\n        }\n        uVar16 = *(arg1 + 3);\n        puVar19 = arg1[2];\n        uVar13 = *(arg1 + 1);\n        arg2_00 = *arg1;\n        uVar20 = *(puVar3 + 0x48);\n        uVar12 = *(puVar3 + 0x4c);\n        iStackX24 = 0;\n        uStackX8 = uVar16;\n        uStackX32 = uVar16;\n        puStack88 = puVar19;\n        uStack96 = uVar13;\n        while (iVar4 - 0x3f34U < 0x20) {\n            uVar15 = 0;\n            uVar6 = 0;\n    // switch table (32 cases) at 0x1400095ec\n            switch(*((iVar4 - 0x3f34U) * 4 + 0x1400095ec) + 0x140000000) {\n            case 0x140007ee5:\n                if (*(puVar3 + 0x10) == 0) {\n                    *(puVar3 + 8) = 0x3f40;\n                }\n                else {\n                    for (; uVar12 < 0x10; uVar12 = uVar12 + 8) {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    if (((*(puVar3 + 0x10) & 2) == 0) || (uVar20 != 0x8b1f)) {\n                        if (*(puVar3 + 0x28) != 0) {\n                            *(*(puVar3 + 0x28) + 0x40) = 0xffffffff;\n                        }\n                        if (((puVar3[0x10] & 1) == 0) ||\n                           (uVar6 = (uVar20 & 0xff) * 0x100 + (uVar20 >> 8), \n                           uVar6 != ((uVar6 - uVar6 / 0x1f >> 1) + uVar6 / 0x1f >> 4) * 0x1f)) {\n                            arg1[4] = \"incorrect header check\";\n                            *(puVar3 + 8) = 0x3f51;\n                        }\n                        else if ((uVar20 & 0xf) == 8) {\n                            uVar12 = uVar12 - 4;\n                            uVar7 = (uVar20 >> 4 & 0xf) + 8;\n                            uVar6 = *(puVar3 + 0x30);\n                            if (*(puVar3 + 0x30) == 0) {\n                                *(puVar3 + 0x30) = uVar7;\n                                uVar6 = uVar7;\n                            }\n                            if ((uVar7 < 0x10) && (uVar7 <= uVar6)) {\n                                *(puVar3 + 0x18) = 0;\n                                *(puVar3 + 0x1c) = 1 << uVar7;\n                                uVar5 = fcn.140007130(0, 0, 0);\n                                uVar12 = 0;\n                                *(puVar3 + 0x20) = uVar5;\n                                *(arg1 + 0x4c) = uVar5;\n                                *(puVar3 + 8) = ~(uVar20 >> 0xc) & 2 | 0x3f3d;\n                                uVar20 = 0;\n                                puVar19 = puStack88;\n                                uVar16 = uStackX32;\n                            }\n                            else {\n                                arg1[4] = \"invalid window size\";\n                                *(puVar3 + 8) = 0x3f51;\n                                uVar20 = uVar20 >> 4;\n                            }\n                        }\n                        else {\n                            arg1[4] = \"unknown compression method\";\n                            *(puVar3 + 8) = 0x3f51;\n                        }\n                    }\n                    else {\n                        if (*(puVar3 + 0x30) == 0) {\n                            *(puVar3 + 0x30) = 0xf;\n                        }\n                        uVar5 = fcn.140007420(0, 0, 0);\n                        *(puVar3 + 0x20) = uVar5;\n                        uStack103 = 0x8b;\n                        uStack104 = uVar20;\n                        uVar5 = fcn.140007420(*(puVar3 + 0x20), &uStack104, 2);\n                        *(puVar3 + 0x20) = uVar5;\n                        uVar20 = 0;\n                        uVar12 = 0;\n                        *(puVar3 + 8) = 0x3f35;\n                        puVar19 = puStack88;\n                        uVar16 = uStackX32;\n                    }\n                }\n                break;\n            case 0x14000808d:\n                for (; uVar12 < 0x10; uVar12 = uVar12 + 8) {\n                    if (uVar13 == 0) goto code_r0x000140008761;\n                    uVar13 = uVar13 - 1;\n                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                *(puVar3 + 0x18) = uVar20;\n                if (uVar20 == 8) {\n                    if ((uVar20 & 0xe000) == 0) {\n                        if (*(puVar3 + 0x28) != NULL) {\n                            **(puVar3 + 0x28) = uVar20 >> 8 & 1;\n                        }\n                        if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                            uStack103 = uVar20 >> 8;\n                            uStack104 = uVar20;\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), &uStack104, 2);\n                            *(puVar3 + 0x20) = uVar5;\n                        }\n                        *(puVar3 + 8) = 0x3f36;\n                        uVar20 = uVar6;\n                        uVar12 = uVar6;\n                        do {\n                            if (uVar13 == 0) goto code_r0x000140008761;\n                            uVar13 = uVar13 - 1;\n                            uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                            uVar12 = uVar12 + 8;\njoined_r0x000140008152:\n                        } while (uVar12 < 0x20);\n                        if (*(puVar3 + 0x28) != 0) {\n                            *(*(puVar3 + 0x28) + 4) = uVar20;\n                        }\n                        if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                            uStack104 = uVar20;\n                            uStack103 = uVar20 >> 8;\n                            uStack102 = uVar20 >> 0x10;\n                            uStack101 = uVar20 >> 0x18;\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), &uStack104, 4);\n                            *(puVar3 + 0x20) = uVar5;\n                        }\n                        *(puVar3 + 8) = 0x3f37;\n                        uVar20 = uVar6;\n                        uVar12 = uVar6;\n                        do {\n                            if (uVar13 == 0) goto code_r0x000140008761;\n                            uVar13 = uVar13 - 1;\n                            uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                            uVar12 = uVar12 + 8;\njoined_r0x0001400081df:\n                        } while (uVar12 < 0x10);\n                        if (*(puVar3 + 0x28) != 0) {\n                            *(*(puVar3 + 0x28) + 8) = uVar20 & 0xff;\n                            *(*(puVar3 + 0x28) + 0xc) = uVar20 >> 8;\n                        }\n                        if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                            uStack104 = uVar20;\n                            uStack103 = uVar20 >> 8;\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), &uStack104, 2);\n                            *(puVar3 + 0x20) = uVar5;\n                        }\n                        *(puVar3 + 8) = 0x3f38;\n                        uVar20 = uVar6;\n                        uVar12 = uVar6;\n                        goto code_r0x00014000825e;\n                    }\n                    arg1[4] = \"unknown header flags set\";\n                    *(puVar3 + 8) = 0x3f51;\n                }\n                else {\n                    arg1[4] = \"unknown compression method\";\n                    *(puVar3 + 8) = 0x3f51;\n                }\n                break;\n            case 0x14000814f:\n                goto joined_r0x000140008152;\n            case 0x1400081dc:\n                goto joined_r0x0001400081df;\n            case 0x14000825e:\ncode_r0x00014000825e:\n                if ((*(puVar3 + 0x18) & 0x400) == 0) {\n                    uVar6 = uVar20;\n                    if (*(puVar3 + 0x28) != 0) {\n                        *(*(puVar3 + 0x28) + 0x10) = 0;\n                    }\n                }\n                else {\n                    for (; uVar12 < 0x10; uVar12 = uVar12 + 8) {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    *(puVar3 + 0x50) = uVar20;\n                    if (*(puVar3 + 0x28) != 0) {\n                        *(*(puVar3 + 0x28) + 0x18) = uVar20;\n                    }\n                    uVar12 = uVar6;\n                    if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                        uStack104 = uVar20;\n                        uStack103 = uVar20 >> 8;\n                        uVar5 = fcn.140007420(*(puVar3 + 0x20), &uStack104, 2);\n                        *(puVar3 + 0x20) = uVar5;\n                    }\n                }\n                uVar20 = uVar6;\n                *(puVar3 + 8) = 0x3f39;\n            case 0x1400082f5:\n                if ((*(puVar3 + 0x18) & 0x400) != 0) {\n                    uVar16 = *(puVar3 + 0x50);\n                    uVar6 = uVar13;\n                    if (uVar16 <= uVar13) {\n                        uVar6 = uVar16;\n                    }\n                    if (uVar6 != 0) {\n                        iVar11 = *(puVar3 + 0x28);\n                        if ((iVar11 != 0) && (*(iVar11 + 0x10) != 0)) {\n                            uVar7 = *(iVar11 + 0x1c);\n                            uVar16 = *(iVar11 + 0x18) - uVar16;\n                            if (uVar16 < uVar7) {\n                                uVar10 = uVar6;\n                                if (uVar7 < uVar6 + uVar16) {\n                                    uVar10 = uVar7 - uVar16;\n                                }\n                                fcn.14000aec0(uVar16 + *(iVar11 + 0x10), arg2_00, uVar10);\n                            }\n                        }\n                        if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), arg2_00, uVar6);\n                            *(puVar3 + 0x20) = uVar5;\n                        }\n                        uVar13 = uVar13 - uVar6;\n                        arg2_00 = arg2_00 + uVar6;\n                        *(puVar3 + 0x50) = *(puVar3 + 0x50) - uVar6;\n                        uVar16 = *(puVar3 + 0x50);\n                    }\n                    if (uVar16 != 0) goto code_r0x000140008761;\n                }\n                *(puVar3 + 0x50) = 0;\n                *(puVar3 + 8) = 0x3f3a;\ncode_r0x00014000839e:\n                if ((*(puVar3 + 0x18) & 0x800) == 0) {\n                    if (*(puVar3 + 0x28) != 0) {\n                        *(*(puVar3 + 0x28) + 0x20) = 0;\n                    }\ncode_r0x00014000843b:\n                    *(puVar3 + 0x50) = 0;\n                    *(puVar3 + 8) = 0x3f3b;\ncode_r0x000140008447:\n                    uVar15 = 0;\n                    if ((*(puVar3 + 0x18) & 0x1000) == 0) {\n                        if (*(puVar3 + 0x28) != 0) {\n                            *(*(puVar3 + 0x28) + 0x30) = 0;\n                        }\ncode_r0x0001400084db:\n                        *(puVar3 + 8) = 0x3f3c;\n                        puVar19 = puStack88;\n                        uVar16 = uStackX32;\ncode_r0x0001400084f0:\n                        if ((*(puVar3 + 0x18) >> 9 & 1) != 0) {\n                            for (; uVar12 < 0x10; uVar12 = uVar12 + 8) {\n                                if (uVar13 == 0) goto code_r0x000140008761;\n                                uVar13 = uVar13 - 1;\n                                uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                            }\n                            if (((puVar3[0x10] & 4) != 0) && (uVar20 != *(puVar3 + 0x20))) {\n                                arg1[4] = \"header crc mismatch\";\n                                *(puVar3 + 8) = 0x3f51;\n                                break;\n                            }\n                            uVar20 = 0;\n                            uVar12 = uVar20;\n                        }\n                        if (*(puVar3 + 0x28) != 0) {\n                            *(*(puVar3 + 0x28) + 0x3c) = *(puVar3 + 0x18) >> 9 & 1;\n                            *(*(puVar3 + 0x28) + 0x40) = 1;\n                        }\n                        uVar5 = fcn.140007420(0, 0, 0);\n                        *(puVar3 + 0x20) = uVar5;\n                        *(arg1 + 0x4c) = uVar5;\ncode_r0x00014000857f:\n                        *(puVar3 + 8) = 0x3f3f;\n                        puVar19 = puStack88;\n                        uVar16 = uStackX32;\n                        break;\n                    }\n                    if (uVar13 != 0) {\n                        do {\n                            uVar16 = uVar15 + 1;\n                            uVar14 = uVar16;\n                            uVar1 = arg2_00[uVar15];\n                            iVar11 = *(puVar3 + 0x28);\n                            if (((iVar11 != 0) && (*(iVar11 + 0x30) != 0)) && (*(puVar3 + 0x50) < *(iVar11 + 0x38))) {\n                                *(*(puVar3 + 0x50) + *(iVar11 + 0x30)) = uVar1;\n                                *(puVar3 + 0x50) = *(puVar3 + 0x50) + 1;\n                            }\n                        } while ((uVar1 != 0) && (uVar15 = uVar14,  uVar16 < uVar13));\n                        if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), arg2_00, uVar14);\n                            *(puVar3 + 0x20) = uVar5;\n                        }\n                        uVar13 = uVar13 - uVar16;\n                        arg2_00 = arg2_00 + uVar14;\n                        if (uVar1 == 0) goto code_r0x0001400084db;\n                    }\n                }\n                else if (uVar13 != 0) {\n                    do {\n                        uVar16 = uVar15 + 1;\n                        uVar14 = uVar16;\n                        uVar1 = arg2_00[uVar15];\n                        iVar11 = *(puVar3 + 0x28);\n                        if (((iVar11 != 0) && (*(iVar11 + 0x20) != 0)) && (*(puVar3 + 0x50) < *(iVar11 + 0x28))) {\n                            *(*(puVar3 + 0x50) + *(iVar11 + 0x20)) = uVar1;\n                            *(puVar3 + 0x50) = *(puVar3 + 0x50) + 1;\n                        }\n                    } while ((uVar1 != 0) && (uVar15 = uVar14,  uVar16 < uVar13));\n                    if (((*(puVar3 + 0x18) & 0x200) != 0) && ((puVar3[0x10] & 4) != 0)) {\n                        uVar5 = fcn.140007420(*(puVar3 + 0x20), arg2_00, uVar14);\n                        *(puVar3 + 0x20) = uVar5;\n                    }\n                    uVar13 = uVar13 - uVar16;\n                    arg2_00 = arg2_00 + uVar14;\n                    if (uVar1 == 0) goto code_r0x00014000843b;\n                }\n                goto code_r0x000140008761;\n            case 0x14000839e:\n                goto code_r0x00014000839e;\n            case 0x140008447:\n                goto code_r0x000140008447;\n            case 0x1400084f0:\n                goto code_r0x0001400084f0;\n            case 0x1400085bd:\n                for (; uVar12 < 0x20; uVar12 = uVar12 + 8) {\n                    if (uVar13 == 0) goto code_r0x000140008761;\n                    uVar13 = uVar13 - 1;\n                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                iVar4 = (uVar20 >> 8 & 0xff00) + ((uVar20 & 0xff00) + uVar20 * 0x10000) * 0x100 + (uVar20 >> 0x18);\n                *(puVar3 + 0x20) = iVar4;\n                *(arg1 + 0x4c) = iVar4;\n                *(puVar3 + 8) = 0x3f3e;\n                uVar20 = uVar6;\n                uVar12 = uVar6;\n            case 0x140008621:\n                if (*(puVar3 + 0x14) == 0) {\n                    arg1[2] = puVar19;\n                    *(arg1 + 3) = uVar16;\n                    *arg1 = arg2_00;\n                    *(arg1 + 1) = uVar13;\n                    *(puVar3 + 0x48) = uVar20;\n                    *(puVar3 + 0x4c) = uVar12;\n                    return 2;\n                }\n                uVar5 = fcn.140007130(0, 0, 0);\n                *(puVar3 + 0x20) = uVar5;\n                *(arg1 + 0x4c) = uVar5;\n                *(puVar3 + 8) = 0x3f3f;\n                puVar19 = puStack88;\n                uVar16 = uStackX32;\ncode_r0x00014000865e:\n                if (arg2 - 5U < 2) goto code_r0x000140008761;\ncode_r0x00014000866a:\n                if (*(puVar3 + 0xc) == 0) {\n                    for (; uVar12 < 3; uVar12 = uVar12 + 8) {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    *(puVar3 + 0xc) = uVar20 & 1;\n                    uVar6 = uVar20 >> 1 & 3;\n                    if (uVar6 == 0) {\n                        *(puVar3 + 8) = 0x3f41;\n                    }\n                    else {\n                        if (uVar6 != 1) {\n                            if (uVar6 == 2) {\n                                uVar12 = uVar12 - 3;\n                                *(puVar3 + 8) = 0x3f44;\n                                uVar20 = uVar20 >> 3;\n                            }\n                            else {\n                                if (uVar6 != 3) goto code_r0x0001400087f0;\n                                arg1[4] = \"invalid block type\";\n                                uVar12 = uVar12 - 3;\n                                *(puVar3 + 8) = 0x3f51;\n                                uVar20 = uVar20 >> 3;\n                            }\n                            break;\n                        }\n                        *(puVar3 + 0x70) = 9;\n                        *(puVar3 + 0x60) = 0x14002f7b0;\n                        *(puVar3 + 0x68) = 0x14002ffb0;\n                        *(puVar3 + 0x74) = 5;\n                        *(puVar3 + 8) = 0x3f47;\n                        if (arg2 == 6) {\n                            uVar20 = uVar20 >> 3;\n                            uVar12 = uVar12 - 3;\n                            goto code_r0x000140008761;\n                        }\n                    }\ncode_r0x0001400087f0:\n                    uVar12 = uVar12 - 3;\n                    uVar20 = uVar20 >> 3;\n                }\n                else {\n                    *(puVar3 + 8) = 0x3f4e;\n                    uVar6 = uVar12 & 7;\n                    uVar12 = uVar12 - uVar6;\n                    uVar20 = uVar20 >> uVar6;\n                }\n                break;\n            case 0x14000865e:\n                goto code_r0x00014000865e;\n            case 0x14000866a:\n                goto code_r0x00014000866a;\n            case 0x1400087de:\n                goto code_r0x0001400095d8;\n            case 0x1400087fc:\n                uVar20 = uVar20 >> (uVar12 & 7);\n                for (uVar12 = uVar12 - (uVar12 & 7); uVar12 < 0x20; uVar12 = uVar12 + 8) {\n                    if (uVar13 == 0) goto code_r0x000140008761;\n                    uVar13 = uVar13 - 1;\n                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                if ((uVar20 & 0xffff) == ~uVar20 >> 0x10) {\n                    *(puVar3 + 0x50) = uVar20 & 0xffff;\n                    *(puVar3 + 8) = 0x3f42;\n                    uVar20 = uVar6;\n                    uVar12 = uVar6;\n                    if (arg2 != 6) goto code_r0x000140008874;\n                    goto code_r0x000140008761;\n                }\n                arg1[4] = \"invalid stored block lengths\";\n                *(puVar3 + 8) = 0x3f51;\n                break;\n            case 0x140008874:\ncode_r0x000140008874:\n                *(puVar3 + 8) = 0x3f43;\n            case 0x14000887c:\n                uVar6 = *(puVar3 + 0x50);\n                if (uVar6 == 0) {\n                    *(puVar3 + 8) = 0x3f3f;\n                }\n                else {\n                    uVar7 = uVar13;\n                    if (uVar6 <= uVar13) {\n                        uVar7 = uVar6;\n                    }\n                    if (uVar7 <= uVar16) {\n                        uVar16 = uVar7;\n                    }\n                    uVar15 = uVar16;\n                    if (uVar16 == 0) goto code_r0x000140008761;\n                    fcn.14000aec0(puVar19, arg2_00, uVar15);\n                    uVar13 = uVar13 - uVar16;\n                    uStackX32 = uStackX32 - uVar16;\n                    puStack88 = puStack88 + uVar15;\n                    arg2_00 = arg2_00 + uVar15;\n                    *(puVar3 + 0x50) = *(puVar3 + 0x50) - uVar16;\n                    puVar19 = puStack88;\n                    uVar16 = uStackX32;\n                }\n                break;\n            case 0x1400088eb:\n                for (; uVar12 < 0xe; uVar12 = uVar12 + 8) {\n                    if (uVar13 == 0) goto code_r0x000140008761;\n                    uVar13 = uVar13 - 1;\n                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                    arg2_00 = arg2_00 + 1;\n                }\n                uVar12 = uVar12 - 0xe;\n                uVar7 = uVar20 >> 5;\n                uVar6 = (uVar20 & 0x1f) + 0x101;\n                uVar10 = uVar20 >> 10;\n                *(puVar3 + 0x7c) = uVar6;\n                uVar20 = uVar20 >> 0xe;\n                uVar7 = (uVar7 & 0x1f) + 1;\n                *(puVar3 + 0x80) = uVar7;\n                *(puVar3 + 0x78) = (uVar10 & 0xf) + 4;\n                if ((uVar6 < 0x11f) && (uVar7 < 0x1f)) {\n                    *(puVar3 + 0x84) = 0;\n                    *(puVar3 + 8) = 0x3f45;\n                    goto code_r0x00014000896f;\n                }\n                arg1[4] = \"too many length or distance symbols\";\n                *(puVar3 + 8) = 0x3f51;\n                break;\n            case 0x14000896f:\ncode_r0x00014000896f:\n                uVar16 = *(puVar3 + 0x84);\n                if (uVar16 < *(puVar3 + 0x78)) {\n                    do {\n                        for (; uVar12 < 3; uVar12 = uVar12 + 8) {\n                            if (uVar13 == 0) goto code_r0x000140008761;\n                            uVar13 = uVar13 - 1;\n                            uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                        }\n                        uVar8 = uVar20;\n                        uVar20 = uVar20 >> 3;\n                        uVar12 = uVar12 - 3;\n                        *(puVar3 + *(*(puVar3 + 0x84) * 2 + 0x140030030) * 2 + 0x90) = uVar8 & 7;\n                        *(puVar3 + 0x84) = *(puVar3 + 0x84) + 1;\n                        uVar16 = *(puVar3 + 0x84);\n                    } while (uVar16 < *(puVar3 + 0x78));\n                }\n                while (uVar16 < 0x13) {\n                    *(puVar3 + *(uVar16 * 2 + 0x140030030) * 2 + 0x90) = 0;\n                    uVar16 = *(puVar3 + 0x84) + 1;\n                    *(puVar3 + 0x84) = uVar16;\n                }\n                *(puVar3 + 0x70) = 7;\n                *(puVar3 + 0x60) = puVar3 + 0x550;\n                *(puVar3 + 0x88) = puVar3 + 0x550;\n                iStackX24 = fcn.140009ab0(0, puVar3 + 0x90, 0x13, puVar3 + 0x88);\n                if (iStackX24 == 0) {\n                    *(puVar3 + 0x84) = 0;\n                    *(puVar3 + 8) = 0x3f46;\n                    goto code_r0x000140008a9d;\n                }\n                arg1[4] = \"invalid code lengths set\";\n                *(puVar3 + 8) = 0x3f51;\n                puVar19 = puStack88;\n                uVar16 = uStackX32;\n                break;\n            case 0x140008a9d:\ncode_r0x000140008a9d:\n                if (*(puVar3 + 0x84) < *(puVar3 + 0x80) + *(puVar3 + 0x7c)) {\n                    do {\n                        uVar6 = (1 << (*(puVar3 + 0x70) & 0x1f)) - 1;\n                        uStack100 = *(*(puVar3 + 0x60) + (uVar6 & uVar20) * 4);\n                        uVar16 = uStack100 >> 8;\n                        uVar8 = uStack100 >> 0x10;\n                        if (uVar12 < (uVar16 & 0xff)) {\n                            do {\n                                if (uVar13 == 0) goto code_r0x000140008761;\n                                uVar13 = uVar13 - 1;\n                                uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                                uVar12 = uVar12 + 8;\n                                uStack100 = *(*(puVar3 + 0x60) + (uVar20 & uVar6) * 4);\n                                uVar16 = uStack100 >> 8;\n                            } while (uVar12 < (uVar16 & 0xff));\n                            uVar8 = uStack100 >> 0x10;\n                        }\n                        if (0xf < uVar8) {\n                            if (uVar8 == 0x10) {\n                                uVar6 = uStack100 >> 8 & 0xff;\n                                for (; uVar12 < (uVar16 & 0xff) + 2; uVar12 = uVar12 + 8) {\n                                    if (uVar13 == 0) goto code_r0x000140008761;\n                                    uVar13 = uVar13 - 1;\n                                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                    arg2_00 = arg2_00 + 1;\n                                }\n                                uVar20 = uVar20 >> (uVar6 & 0x1f);\n                                uVar12 = uVar12 - uVar6;\n                                if (*(puVar3 + 0x84) != 0) {\n                                    uVar12 = uVar12 - 2;\n                                    uVar16 = uVar20 & 3;\n                                    uVar20 = uVar20 >> 2;\n                                    iVar9 = uVar16 + 3;\n                                    uVar17 = *(puVar3 + (*(puVar3 + 0x84) - 1) * 2 + 0x90);\n                                    goto code_r0x000140008c86;\n                                }\n                            }\n                            else {\n                                uStack100._1_1_ = uStack100 >> 8;\n                                if (uVar8 == 0x11) {\n                                    for (; uVar12 < (uVar16 & 0xff) + 3; uVar12 = uVar12 + 8) {\n                                        if (uVar13 == 0) goto code_r0x000140008761;\n                                        uVar13 = uVar13 - 1;\n                                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                        arg2_00 = arg2_00 + 1;\n                                    }\n                                    uVar16 = uVar20 >> (uStack100._1_1_ & 0x1f);\n                                    uVar20 = uVar16 >> 3;\n                                    iVar9 = (uVar16 & 7) + 3;\n                                    iVar4 = -3 - uStack100._1_1_;\n                                }\n                                else {\n                                    for (; uVar12 < (uVar16 & 0xff) + 7; uVar12 = uVar12 + 8) {\n                                        if (uVar13 == 0) goto code_r0x000140008761;\n                                        uVar13 = uVar13 - 1;\n                                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                        arg2_00 = arg2_00 + 1;\n                                    }\n                                    uVar16 = uVar20 >> (uStack100._1_1_ & 0x1f);\n                                    uVar20 = uVar16 >> 7;\n                                    iVar9 = (uVar16 & 0x7f) + 0xb;\n                                    iVar4 = -7 - uStack100._1_1_;\n                                }\n                                uVar17 = 0;\n                                uVar12 = uVar12 + iVar4;\ncode_r0x000140008c86:\n                                uVar16 = *(puVar3 + 0x84);\n                                if (uVar16 + iVar9 <= *(puVar3 + 0x7c) + *(puVar3 + 0x80)) {\n                                    do {\n                                        *(puVar3 + uVar16 * 2 + 0x90) = uVar17;\n                                        uVar16 = *(puVar3 + 0x84) + 1;\n                                        *(puVar3 + 0x84) = uVar16;\n                                        iVar9 = iVar9 + -1;\n                                    } while (iVar9 != 0);\n                                    goto code_r0x000140008cc3;\n                                }\n                            }\n                            arg1[4] = \"invalid bit length repeat\";\n                            *(puVar3 + 8) = 0x3f51;\n                            break;\n                        }\n                        uVar20 = uVar20 >> (uVar16 & 0x1f);\n                        uVar12 = uVar12 - (uStack100 >> 8 & 0xff);\n                        *(puVar3 + *(puVar3 + 0x84) * 2 + 0x90) = uStack100 >> 0x10;\n                        *(puVar3 + 0x84) = *(puVar3 + 0x84) + 1;\n                        uVar16 = *(puVar3 + 0x84);\ncode_r0x000140008cc3:\n                    } while (uVar16 < *(puVar3 + 0x7c) + *(puVar3 + 0x80));\n                }\n                puVar19 = puStack88;\n                uVar16 = uStackX32;\n                if (*(puVar3 + 8) != 0x3f51) {\n                    if (*(puVar3 + 0x290) == 0) {\n                        arg1[4] = \"invalid code -- missing end-of-block\";\n                        *(puVar3 + 8) = 0x3f51;\n                    }\n                    else {\n                        *(puVar3 + 0x88) = puVar3 + 0x550;\n                        *(puVar3 + 0x60) = puVar3 + 0x550;\n                        *(puVar3 + 0x70) = 9;\n                        iStackX24 = fcn.140009ab0(1, puVar3 + 0x90, *(puVar3 + 0x7c), puVar3 + 0x88);\n                        if (iStackX24 == 0) {\n                            *(puVar3 + 0x68) = *(puVar3 + 0x88);\n                            *(puVar3 + 0x74) = 6;\n                            iStackX24 = fcn.140009ab0(2, puVar3 + *(puVar3 + 0x7c) * 2 + 0x90, *(puVar3 + 0x80), \n                                                      puVar3 + 0x88);\n                            puVar19 = puStack88;\n                            if (iStackX24 == 0) {\n                                *(puVar3 + 8) = 0x3f47;\n                                if (arg2 != 6) goto code_r0x000140008e2a;\n                                goto code_r0x000140008761;\n                            }\n                            arg1[4] = \"invalid distances set\";\n                            *(puVar3 + 8) = 0x3f51;\n                        }\n                        else {\n                            arg1[4] = \"invalid literal/lengths set\";\n                            *(puVar3 + 8) = 0x3f51;\n                            puVar19 = puStack88;\n                        }\n                    }\n                }\n                break;\n            case 0x140008e2a:\ncode_r0x000140008e2a:\n                *(puVar3 + 8) = 0x3f48;\n            case 0x140008e32:\n                if ((5 < uVar13) && (0x101 < uVar16)) {\n                    arg1[2] = puVar19;\n                    *(arg1 + 3) = uVar16;\n                    *arg1 = arg2_00;\n                    *(arg1 + 1) = uVar13;\n                    *(puVar3 + 0x48) = uVar20;\n                    *(puVar3 + 0x4c) = uVar12;\n                    fcn.1400078e0(arg1, uStackX8);\n                    puStack88 = arg1[2];\n                    uStackX32 = *(arg1 + 3);\n                    arg2_00 = *arg1;\n                    uVar13 = *(arg1 + 1);\n                    uVar12 = *(puVar3 + 0x4c);\n                    puVar19 = puStack88;\n                    uVar16 = uStackX32;\n                    uVar20 = *(puVar3 + 0x48);\n                    if (*(puVar3 + 8) == 0x3f3f) {\n                        *(puVar3 + 0x1be4) = 0xffffffff;\n                    }\n                    break;\n                }\n                iVar11 = *(puVar3 + 0x60);\n                uVar6 = (1 << (*(puVar3 + 0x70) & 0x1f)) - 1;\n                *(puVar3 + 0x1be4) = 0;\n                uVar16 = *(iVar11 + (uVar6 & uVar20) * 4);\n                if (uVar12 < (uVar16 >> 8 & 0xff)) {\n                    do {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                        uVar12 = uVar12 + 8;\n                        uVar16 = *(iVar11 + (uVar20 & uVar6) * 4);\n                    } while (uVar12 < (uVar16 >> 8 & 0xff));\n                }\n                if ((uVar16 != '\\0') && ((uVar16 & 0xf0) == 0)) {\n                    uVar6 = uVar16 >> 8 & 0xff;\n                    uVar1 = uVar6;\n                    uVar7 = uVar16 >> 0x10;\n                    iVar4 = 1 << (uVar16 + uVar1 & 0x1f);\n                    uVar16 = *(iVar11 + (((iVar4 - 1U & uVar20) >> (uVar1 & 0x1f)) + uVar7) * 4);\n                    if (uVar12 < (uVar16 >> 8 & 0xff) + uVar6) {\n                        do {\n                            if (uVar13 == 0) goto code_r0x000140008761;\n                            uVar13 = uVar13 - 1;\n                            uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                            arg2_00 = arg2_00 + 1;\n                            uVar12 = uVar12 + 8;\n                            uVar16 = *(iVar11 + (((iVar4 - 1U & uVar20) >> (uVar1 & 0x1f)) + uVar7) * 4);\n                        } while (uVar12 < (uVar16 >> 8 & 0xff) + uVar6);\n                    }\n                    *(puVar3 + 0x1be4) = uVar6;\n                    uVar20 = uVar20 >> (uVar1 & 0x1f);\n                    uVar12 = uVar12 - uVar6;\n                }\n                uVar6 = uVar16 >> 8 & 0xff;\n                *(puVar3 + 0x1be4) = *(puVar3 + 0x1be4) + uVar6;\n                uVar12 = uVar12 - uVar6;\n                uVar20 = uVar20 >> (uVar6 & 0x1f);\n                *(puVar3 + 0x50) = uVar16 >> 0x10;\n                puVar19 = puStack88;\n                if (uVar16 == '\\0') {\n                    *(puVar3 + 8) = 0x3f4d;\n                    uVar16 = uStackX32;\n                    break;\n                }\n                if ((uVar16 & 0x20) == 0) {\n                    if ((uVar16 & 0x40) == 0) {\n                        *(puVar3 + 8) = 0x3f49;\n                        *(puVar3 + 0x58) = uVar16 & 0xf;\ncode_r0x000140009022:\n                        uVar16 = *(puVar3 + 0x58);\n                        if (uVar16 != 0) {\n                            for (; uVar12 < uVar16; uVar12 = uVar12 + 8) {\n                                if (uVar13 == 0) goto code_r0x000140008761;\n                                uVar13 = uVar13 - 1;\n                                uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                            }\n                            uVar12 = uVar12 - uVar16;\n                            uVar6 = (1 << (uVar16 & 0x1f)) - 1U & uVar20;\n                            uVar20 = uVar20 >> (uVar16 & 0x1f);\n                            *(puVar3 + 0x50) = *(puVar3 + 0x50) + uVar6;\n                            *(puVar3 + 0x1be4) = *(puVar3 + 0x1be4) + uVar16;\n                        }\n                        *(puVar3 + 0x1be8) = *(puVar3 + 0x50);\n                        *(puVar3 + 8) = 0x3f4a;\ncode_r0x000140009084:\n                        iVar11 = *(puVar3 + 0x68);\n                        uVar6 = (1 << (*(puVar3 + 0x74) & 0x1f)) - 1;\n                        uVar16 = *(iVar11 + (uVar6 & uVar20) * 4);\n                        if (uVar12 < (uVar16 >> 8 & 0xff)) {\n                            do {\n                                if (uVar13 == 0) goto code_r0x000140008761;\n                                uVar13 = uVar13 - 1;\n                                uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                arg2_00 = arg2_00 + 1;\n                                uVar12 = uVar12 + 8;\n                                uVar16 = *(iVar11 + (uVar20 & uVar6) * 4);\n                            } while (uVar12 < (uVar16 >> 8 & 0xff));\n                        }\n                        if ((uVar16 & 0xf0) == 0) {\n                            uVar6 = uVar16 >> 8 & 0xff;\n                            uVar1 = uVar6;\n                            uVar7 = uVar16 >> 0x10;\n                            iVar4 = 1 << (uVar16 + uVar1 & 0x1f);\n                            uVar16 = *(iVar11 + (((iVar4 - 1U & uVar20) >> (uVar1 & 0x1f)) + uVar7) * 4);\n                            if (uVar12 < (uVar16 >> 8 & 0xff) + uVar6) {\n                                do {\n                                    if (uVar13 == 0) goto code_r0x000140008761;\n                                    uVar13 = uVar13 - 1;\n                                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                    arg2_00 = arg2_00 + 1;\n                                    uVar12 = uVar12 + 8;\n                                    uVar16 = *(iVar11 + (((iVar4 - 1U & uVar20) >> (uVar1 & 0x1f)) + uVar7) * 4);\n                                } while (uVar12 < (uVar16 >> 8 & 0xff) + uVar6);\n                            }\n                            uVar12 = uVar12 - uVar6;\n                            uVar20 = uVar20 >> (uVar1 & 0x1f);\n                            *(puVar3 + 0x1be4) = *(puVar3 + 0x1be4) + uVar6;\n                        }\n                        uVar6 = uVar16 >> 8 & 0xff;\n                        *(puVar3 + 0x1be4) = *(puVar3 + 0x1be4) + uVar6;\n                        uVar12 = uVar12 - uVar6;\n                        uVar20 = uVar20 >> (uVar6 & 0x1f);\n                        puVar19 = puStack88;\n                        if ((uVar16 & 0x40) == 0) {\n                            *(puVar3 + 0x54) = uVar16 >> 0x10;\n                            *(puVar3 + 8) = 0x3f4b;\n                            *(puVar3 + 0x58) = uVar16 & 0xf;\n                            uVar16 = uStackX32;\ncode_r0x0001400091de:\n                            uVar6 = *(puVar3 + 0x58);\n                            if (uVar6 != 0) {\n                                for (; uVar12 < uVar6; uVar12 = uVar12 + 8) {\n                                    if (uVar13 == 0) goto code_r0x000140008761;\n                                    uVar13 = uVar13 - 1;\n                                    uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                                    arg2_00 = arg2_00 + 1;\n                                }\n                                uVar12 = uVar12 - uVar6;\n                                uVar7 = (1 << (uVar6 & 0x1f)) - 1U & uVar20;\n                                uVar20 = uVar20 >> (uVar6 & 0x1f);\n                                *(puVar3 + 0x54) = *(puVar3 + 0x54) + uVar7;\n                                *(puVar3 + 0x1be4) = *(puVar3 + 0x1be4) + uVar6;\n                            }\n                            *(puVar3 + 8) = 0x3f4c;\ncode_r0x000140009235:\n                            if (uVar16 == 0) goto code_r0x000140008761;\n                            uVar6 = *(puVar3 + 0x54);\n                            if (uStackX8 - uVar16 < uVar6) {\n                                uVar6 = uVar6 - (uStackX8 - uVar16);\n                                if ((*(puVar3 + 0x38) <= uVar6 && uVar6 != *(puVar3 + 0x38)) &&\n                                   (*(puVar3 + 0x1be0) != 0)) {\n                                    arg1[4] = \"invalid distance too far back\";\n                                    *(puVar3 + 8) = 0x3f51;\n                                    break;\n                                }\n                                uVar10 = *(puVar3 + 0x3c);\n                                if (uVar10 < uVar6) {\n                                    uVar6 = uVar6 - uVar10;\n                                    uVar10 = *(puVar3 + 0x34) - uVar6;\n                                }\n                                else {\n                                    uVar10 = uVar10 - uVar6;\n                                }\n                                uVar7 = *(puVar3 + 0x50);\n                                iVar11 = uVar10 + *(puVar3 + 0x40);\n                                uVar10 = uVar7;\n                                if (uVar6 <= uVar7) {\n                                    uVar10 = uVar6;\n                                }\n                            }\n                            else {\n                                uVar7 = *(puVar3 + 0x50);\n                                iVar11 = puVar19 - uVar6;\n                                uVar10 = uVar7;\n                            }\n                            uVar6 = uVar16;\n                            if (uVar10 <= uVar16) {\n                                uVar6 = uVar10;\n                            }\n                            uStackX32 = uVar16 - uVar6;\n                            iVar11 = iVar11 - puVar19;\n                            *(puVar3 + 0x50) = uVar7 - uVar6;\n                            do {\n                                *puVar19 = puVar19[iVar11];\n                                puVar19 = puVar19 + 1;\n                                uVar6 = uVar6 - 1;\n                            } while (uVar6 != 0);\n                            uVar16 = uStackX32;\n                            puStack88 = puVar19;\n                            if (*(puVar3 + 0x50) == 0) {\n                                *(puVar3 + 8) = 0x3f48;\n                            }\n                        }\n                        else {\n                            arg1[4] = \"invalid distance code\";\n                            *(puVar3 + 8) = 0x3f51;\n                            uVar16 = uStackX32;\n                        }\n                    }\n                    else {\n                        arg1[4] = \"invalid literal/length code\";\n                        *(puVar3 + 8) = 0x3f51;\n                        uVar16 = uStackX32;\n                    }\n                    break;\n                }\n                *(puVar3 + 0x1be4) = 0xffffffff;\n                goto code_r0x00014000857f;\n            case 0x140009022:\n                goto code_r0x000140009022;\n            case 0x140009084:\n                goto code_r0x000140009084;\n            case 0x1400091de:\n                goto code_r0x0001400091de;\n            case 0x140009235:\n                goto code_r0x000140009235;\n            case 0x1400092fc:\n                if (uVar16 == 0) goto code_r0x000140008761;\n                *puVar19 = puVar3[0x50];\n                puVar19 = puVar19 + 1;\n                uStackX32 = uVar16 - 1;\n                *(puVar3 + 8) = 0x3f48;\n                uVar16 = uStackX32;\n                puStack88 = puVar19;\n                break;\n            case 0x14000932d:\n                if (*(puVar3 + 0x10) == 0) {\n                    *(puVar3 + 8) = 0x3f4f;\n                }\n                else {\n                    for (; uVar12 < 0x20; uVar12 = uVar12 + 8) {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    uStackX8 = uStackX8 - uVar16;\n                    *(arg1 + 0x1c) = *(arg1 + 0x1c) + uStackX8;\n                    *(puVar3 + 0x24) = *(puVar3 + 0x24) + uStackX8;\n                    if (((puVar3[0x10] & 4) != 0) && (uStackX8 != 0)) {\n                        if (*(puVar3 + 0x18) == 0) {\n                            uVar5 = fcn.140007130(*(puVar3 + 0x20), puVar19 - uStackX8, uStackX8);\n                        }\n                        else {\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), puVar19 - uStackX8, uStackX8);\n                        }\n                        *(puVar3 + 0x20) = uVar5;\n                        *(arg1 + 0x4c) = uVar5;\n                        puVar19 = puStack88;\n                        uVar16 = uStackX32;\n                    }\n                    uStackX8 = uVar16;\n                    if ((puVar3[0x10] & 4) != 0) {\n                        uVar7 = uVar20;\n                        if (*(puVar3 + 0x18) == 0) {\n                            uVar7 = ((uVar20 & 0xff00) + uVar20 * 0x10000) * 0x100 + (uVar20 >> 8 & 0xff00) +\n                                    (uVar20 >> 0x18);\n                        }\n                        if (uVar7 != *(puVar3 + 0x20)) {\n                            arg1[4] = \"incorrect data check\";\n                            *(puVar3 + 8) = 0x3f51;\n                            break;\n                        }\n                    }\n                    *(puVar3 + 8) = 0x3f4f;\n                    uVar20 = uVar6;\n                    uVar12 = uVar6;\n                }\n                goto code_r0x000140009437;\n            case 0x140009430:\ncode_r0x000140009437:\n                uVar7 = uVar20;\n                uVar10 = uVar12;\n                if ((*(puVar3 + 0x10) != 0) && (*(puVar3 + 0x18) != 0)) {\n                    for (; uVar12 < 0x20; uVar12 = uVar12 + 8) {\n                        if (uVar13 == 0) goto code_r0x000140008761;\n                        uVar13 = uVar13 - 1;\n                        uVar20 = uVar20 + (*arg2_00 << (uVar12 & 0x1f));\n                        arg2_00 = arg2_00 + 1;\n                    }\n                    uVar7 = uVar6;\n                    uVar10 = uVar6;\n                    if (((*(puVar3 + 0x10) & 4) != 0) && (uVar20 != *(puVar3 + 0x24))) {\n                        arg1[4] = \"incorrect length check\";\n                        *(puVar3 + 8) = 0x3f51;\n                        break;\n                    }\n                }\n                *(puVar3 + 8) = 0x3f50;\n                iStackX24 = 1;\n                uVar20 = uVar7;\n                uVar12 = uVar10;\n                goto code_r0x000140008761;\n            case 0x1400094d2:\n                iStackX24 = 1;\n                goto code_r0x000140008761;\n            case 0x1400094e4:\n                iStackX24 = -3;\ncode_r0x000140008761:\n                arg1[2] = puStack88;\n                *(arg1 + 3) = uStackX32;\n                *arg1 = arg2_00;\n                *(arg1 + 1) = uVar13;\n                *(puVar3 + 0x48) = uVar20;\n                *(puVar3 + 0x4c) = uVar12;\n                if (((*(puVar3 + 0x34) == 0) &&\n                    (((uStackX8 == *(arg1 + 3) || (0x3f50 < *(puVar3 + 8))) || ((0x3f4d < *(puVar3 + 8) && (arg2 == 4)))\n                     ))) || (iVar4 = fcn.1400099a0(arg1, arg1[2], uStackX8 - *(arg1 + 3)),  iVar4 == 0)) {\n                    uStackX8 = uStackX8 - *(arg1 + 3);\n                    uStack96 = uStack96 - *(arg1 + 1);\n                    *(arg1 + 0xc) = *(arg1 + 0xc) + uStack96;\n                    *(arg1 + 0x1c) = *(arg1 + 0x1c) + uStackX8;\n                    *(puVar3 + 0x24) = *(puVar3 + 0x24) + uStackX8;\n                    if (((puVar3[0x10] & 4) != 0) && (uStackX8 != 0)) {\n                        if (*(puVar3 + 0x18) == 0) {\n                            uVar5 = fcn.140007130(*(puVar3 + 0x20), arg1[2] - uStackX8, uStackX8);\n                        }\n                        else {\n                            uVar5 = fcn.140007420(*(puVar3 + 0x20), arg1[2] - uStackX8, uStackX8);\n                        }\n                        *(puVar3 + 0x20) = uVar5;\n                        *(arg1 + 0x4c) = uVar5;\n                    }\n                    iVar4 = *(puVar3 + 8);\n                    if ((iVar4 == 0x3f47) || (iVar4 == 0x3f42)) {\n                        iVar9 = 0x100;\n                    }\n                    else {\n                        iVar9 = 0;\n                    }\n                    iVar18 = 0;\n                    if (iVar4 == 0x3f3f) {\n                        iVar18 = 0x80;\n                    }\n                    *(arg1 + 9) = (-(*(puVar3 + 0xc) != 0) & 0x40) + iVar18 + *(puVar3 + 0x4c) + iVar9;\n                    if (((uStack96 != 0) || (uStackX8 != 0)) && (arg2 != 4)) {\n                        return iStackX24;\n                    }\n                    if (iStackX24 != 0) {\n                        return iStackX24;\n                    }\n                    return -5;\n                }\n                *(puVar3 + 8) = 0x3f52;\ncode_r0x0001400095d8:\n                return -4;\n            case 0x1400095d3:\n                goto code_r0x0001400095d8;\n            }\n            iVar4 = *(puVar3 + 8);\n        }\n    }\ncode_r0x0001400095d8:\n    return -2;\n}\n",
        "token_count": 14521
    },
    "14000967": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140009670(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    \n    if ((((arg1 != 0) && (*(arg1 + 0x30) != 0)) && (*(arg1 + 0x38) != 0)) &&\n       (((piVar1 = *(arg1 + 0x28),  piVar1 != NULL && (*piVar1 == arg1)) && (*(piVar1 + 1) - 0x3f34U < 0x20)))) {\n        if (*(*(arg1 + 0x28) + 0x40) != 0) {\n            (**0x14002a360)(*(arg1 + 0x40));\n        }\n        (**0x14002a360)(*(arg1 + 0x40), *(arg1 + 0x28));\n        *(arg1 + 0x28) = 0;\n        return 0;\n    }\n    return 0xfffffffe;\n}\n",
        "token_count": 216
    },
    "140009ab": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140009ab0(ulong arg1, uint16_t *arg2, ulong arg3, int64_t *arg4)\n\n{\n    int64_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    char cVar4;\n    uint8_t uVar5;\n    ushort uVar6;\n    uint8_t uVar7;\n    uint16_t *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    uint64_t uVar15;\n    int32_t iVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint64_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint8_t uVar22;\n    uint32_t uVar23;\n    bool bVar24;\n    bool bVar25;\n    uint32_t *in_stack_00000028;\n    int64_t in_stack_00000030;\n    uchar auStack248 [32];\n    uint uStack216;\n    uint32_t uStack208;\n    uint32_t uStack200;\n    uint32_t uStack196;\n    int32_t iStack192;\n    int64_t iStack184;\n    int64_t iStack176;\n    int64_t *piStack160;\n    uint16_t *puStack152;\n    uint16_t auStack136 [16];\n    uint16_t auStack104 [16];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003d018 ^ auStack248;\n    uVar15 = 0;\n    uVar10 = arg3;\n    uVar19 = uVar15;\n    do {\n        iStack192 = arg1;\n        piStack160 = arg4;\n        puStack152 = arg2;\n        if (0x1f < uVar19 * 2) {\n            fcn.14000a294();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        uVar20 = uVar19 + 1;\n        auStack136[uVar19] = 0;\n        uVar19 = uVar20;\n    } while (uVar20 < 0x10);\n    puVar8 = arg2;\n    if (arg3 != 0) {\n        do {\n            auStack136[*puVar8] = auStack136[*puVar8] + 1;\n            uVar10 = uVar10 - 1;\n            puVar8 = puVar8 + 1;\n        } while (uVar10 != 0);\n    }\n    uVar20 = 0xd;\n    uVar19 = 0xf;\n    do {\n        uVar18 = uVar19;\n        if (auStack136[uVar19] != 0) break;\n        if (auStack136[uVar20 + 1] != 0) {\n            uVar18 = uVar18 - 1;\n            break;\n        }\n        if (auStack136[uVar20] != 0) {\n            uVar18 = uVar18 - 2;\n            break;\n        }\n        if (auStack136[uVar20 - 1] != 0) {\n            uVar18 = uVar18 - 3;\n            break;\n        }\n        if (auStack136[uVar20 - 2] != 0) {\n            uVar18 = uVar18 - 4;\n            break;\n        }\n        uVar18 = uVar18 - 5;\n        uVar19 = uVar18;\n        uVar20 = uVar20 - 5;\n    } while (uVar18 != 0);\n    uVar20 = uVar18;\n    if (*in_stack_00000028 <= uVar18) {\n        uVar20 = *in_stack_00000028;\n    }\n    if (uVar18 == 0) {\n        uStack216 = 0x140;\n        **arg4 = 0x140;\n        *arg4 = *arg4 + 4;\n        **arg4 = 0x140;\n        *arg4 = *arg4 + 4;\n        *in_stack_00000028 = 1;\n    }\n    else {\n        uVar21 = 1;\n        if (1 < uVar18) {\n            puVar8 = auStack136;\n            do {\n                puVar8 = puVar8 + 1;\n                if (*puVar8 != 0) break;\n                uVar21 = uVar21 + 1;\n            } while (uVar21 < uVar18);\n        }\n        uVar19 = 1;\n        uStack196 = uVar21;\n        if (uVar21 <= uVar20) {\n            uStack196 = uVar20;\n        }\n        iVar16 = 1;\n        do {\n            iVar16 = iVar16 * 2 - auStack136[uVar19];\n            if (iVar16 < 0) goto code_r0x00014000a01c;\n            uVar20 = uVar19 + 1;\n            uVar19 = uVar20;\n        } while (uVar20 < 0x10);\n        if ((iVar16 < 1) || ((arg1 != 0 && (uVar18 == 1)))) {\n            auStack104[1] = 0;\n            iVar11 = 0xe;\n            uVar19 = uVar15;\n            do {\n                *(auStack104 + uVar19 + 4) = *(auStack136 + uVar19 + 2) + *(auStack104 + uVar19 + 2);\n                uVar19 = uVar19 + 2;\n                iVar11 = iVar11 + -1;\n            } while (iVar11 != 0);\n            puVar8 = arg2;\n            uVar19 = uVar15;\n            if (arg3 != 0) {\n                do {\n                    if (*puVar8 != 0) {\n                        *(in_stack_00000030 + auStack104[*puVar8] * 2) = uVar19;\n                        auStack104[*puVar8] = auStack104[*puVar8] + 1;\n                    }\n                    uVar20 = uVar19 + 1;\n                    puVar8 = puVar8 + 1;\n                    uVar19 = uVar20;\n                } while (uVar20 < arg3);\n            }\n            uVar19 = 0;\n            iVar11 = *arg4;\n            uVar7 = uStack196;\n            uVar20 = uStack196;\n            if (arg1 == 0) {\n                uVar12 = 0x14;\n                iStack184 = in_stack_00000030;\n                iStack176 = in_stack_00000030;\n                uVar15 = 0;\n                uStack208 = 0x14;\n                uVar23 = 1 << (uVar7 & 0x1f);\n                uVar17 = 0xffffffff;\n                uStack200 = uVar23 - 1;\n                uVar10 = 0;\n            }\n            else {\n                if (arg1 == 1) {\n                    uStack208 = 0x101;\n                    iStack176 = 0x140030240;\n                    uVar23 = 1 << (uVar7 & 0x1f);\n                    iStack184 = 0x140030280;\n                    uStack200 = uVar23 - 1;\n                }\n                else {\n                    uVar23 = 1 << (uVar7 & 0x1f);\n                    iStack176 = 0x1400302c0;\n                    uVar17 = 0xffffffff;\n                    iStack184 = 0x140030300;\n                    uStack200 = uVar23 - 1;\n                    uStack208 = 0;\n                    if (arg1 != 1) {\n                        iStack176 = 0x1400302c0;\n                        uStack208 = 0;\n                        iStack184 = 0x140030300;\n                        if (arg1 == 2) {\n                            iStack176 = 0x1400302c0;\n                            uVar12 = 0;\n                            iStack184 = 0x140030300;\n                            uStack208 = 0;\n                            uVar10 = uVar12;\n                            uVar19 = uVar15;\n                            if (0x250 < uVar23) goto code_r0x00014000a01c;\n                        }\n                        else {\n                            uVar12 = 0;\n                            uVar10 = 0;\n                            uVar15 = 0;\n                        }\n                        goto code_r0x000140009e20;\n                    }\n                }\n                uVar17 = 0xffffffff;\n                if (0x354 < uVar23) goto code_r0x00014000a01c;\n                uVar12 = uStack208;\n                uVar10 = 0;\n                uVar15 = 0;\n            }\ncode_r0x000140009e20:\n            cVar4 = uVar21;\n            uVar22 = uVar19;\n            uVar5 = cVar4 - uVar22;\n            uVar2 = *(in_stack_00000030 + uVar10 * 2);\n            uVar9 = uVar12;\n            if (uVar2 + 1 < uVar9) {\n                uStack216 = uVar5 << 8;\n                uStack216 = uStack216 | uVar2 << 0x10;\n            }\n            else {\n                uStack216._1_3_ = uVar5;\n                if (uVar2 < uVar9) {\n                    uStack216 = CONCAT31(uStack216._1_3_, 0x60);\n                    uVar6 = 0;\n                }\n                else {\n                    iVar1 = (uVar2 - uVar9) * 2;\n                    uStack216._0_2_ = CONCAT11(uVar5, *(iVar1 + iStack184));\n                    uVar6 = *(iVar1 + iStack176);\n                }\n                uStack216 = CONCAT22(uVar6, uStack216);\n            }\n            iVar16 = 1 << (cVar4 - uVar22 & 0x1f);\n            uVar14 = uVar15;\n            uVar9 = 1 << (uVar20 & 0x1f);\n            uVar15 = (uVar14 >> (uVar22 & 0x1f)) + uVar9;\n            uVar13 = uVar9;\n            do {\n                uVar15 = uVar15 - iVar16;\n                *(iVar11 + uVar15 * 4) = uStack216;\n                uVar9 = uVar9 - iVar16;\n            } while (uVar9 != 0);\n            for (uVar9 = 1 << (cVar4 - 1U & 0x1f); (uVar14 & uVar9) != 0; uVar9 = uVar9 >> 1) {\n            }\n            if (uVar9 == 0) {\n                uVar15 = 0;\n            }\n            else {\n                uVar15 = (uVar14 & uVar9 - 1) + uVar9;\n            }\n            uVar10 = uVar10 + 1;\n            puVar8 = auStack136 + uVar21;\n            *puVar8 = *puVar8 - 1;\n            if (*puVar8 == 0) {\n                if (uVar21 == uVar18) {\n                    if (uVar15 != 0) {\n                        uStack216._1_3_ = uStack216 >> 8 & 0xff;\n                        uStack216 = CONCAT31(uStack216._1_3_, 0x40);\n                        *(iVar11 + uVar15 * 4) = uStack216;\n                    }\n                    *arg4 = *arg4 + uVar23 * 4;\n                    *in_stack_00000028 = uStack196;\n                    goto code_r0x00014000a01c;\n                }\n                uVar21 = arg2[*(in_stack_00000030 + uVar10 * 2)];\n            }\n            uVar12 = uStack208;\n            if (uStack196 < uVar21) {\n                uVar9 = uStack200 & uVar15;\n                if (uVar9 != uVar17) {\n                    iVar11 = iVar11 + uVar13 * 4;\n                    if (uVar19 == 0) {\n                        uVar19 = uStack196;\n                    }\n                    uVar20 = uVar21 - uVar19;\n                    uVar17 = uVar21;\n                    for (iVar16 = 1 << (uVar20 & 0x1f);\n                        (uVar17 < uVar18 && (uVar12 = uVar17,  0 < iVar16 - auStack136[uVar12]));\n                        iVar16 = (iVar16 - auStack136[uVar12]) * 2) {\n                        uVar20 = uVar20 + 1;\n                        uVar17 = uVar17 + 1;\n                    }\n                    uVar23 = uVar23 + (1 << (uVar20 & 0x1f));\n                    if (arg1 == 1) {\n                        bVar24 = uVar23 < 0x354;\n                        bVar25 = uVar23 == 0x354;\ncode_r0x000140009f99:\n                        if (!bVar24 && !bVar25) goto code_r0x00014000a01c;\n                    }\n                    else if (arg1 == 2) {\n                        bVar24 = uVar23 < 0x250;\n                        bVar25 = uVar23 == 0x250;\n                        goto code_r0x000140009f99;\n                    }\n                    iVar1 = uVar9 * 4;\n                    *(iVar1 + *arg4) = uVar20;\n                    *(iVar1 + 1 + *arg4) = uVar7;\n                    *(*arg4 + 2 + iVar1) = iVar11 - *arg4 >> 2;\n                    uVar12 = uStack208;\n                    uVar17 = uVar9;\n                }\n            }\n            goto code_r0x000140009e20;\n        }\n    }\ncode_r0x00014000a01c:\n    fcn.14000a100(uStack72 ^ auStack248);\n    return;\n}\n",
        "token_count": 3146
    },
    "14000ab8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ab80(void)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int32_t *piVar3;\n    \n    piVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar1 == NULL) || (*piVar1 != 0x5a4d)) || (piVar3 = *(piVar1 + 0x1e) + piVar1,  *piVar3 != 0x4550)) ||\n       ((piVar1 = 0x20b,  *(piVar3 + 6) != 0x20b || (piVar3[0x21] < 0xf)))) {\n        uVar2 = piVar1 & 0xffffffffffffff00;\n    }\n    else {\n        uVar2 = CONCAT71(2, piVar3[0x3e] != 0);\n    }\n    return uVar2;\n}\n",
        "token_count": 214
    },
    "14000b5b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.14000b5b8(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uchar (*pauVar3) [16];\n    int32_t iVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uint32_t uVar7;\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar16 [16];\n    uint8_t uVar15;\n    \n    pauVar3 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = ZEXT416(CONCAT13(-(pcVar5[3] == '\\0'), \n                                   CONCAT12(-(pcVar5[2] == '\\0'), CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0')))))\n                  & 0xffffffffffffffff;\n        uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar5[0xf]);\n        auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar5[0xe]), \n                                              CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar5[0xd]), \n                                                        CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar5[0xc]), \n                                                                  CONCAT111(-(SUB161(auVar11 >> 0x58, 0) == pcVar5[0xb])\n                                                                            , CONCAT110(-(SUB161(auVar11 >> 0x50, 0) ==\n                                                                                         pcVar5[10]), \n                                                                                        CONCAT19(-(SUB161(auVar11 >>\n                                                                                                          0x48, 0) ==\n                                                                                                  pcVar5[9]), \n                                                                                                 CONCAT18(-(SUB161(\n                                                            auVar11 >> 0x40, 0) == pcVar5[8]), \n                                                            CONCAT17(-(pcVar5[7] == '\\0'), \n                                                                     CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                              CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                                       CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                                SUB164(auVar11, 0)))))))\n                                                            ))))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar7 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar7 & 1) == 0; uVar7 = uVar7 + 1) {\n            }\n        }\n        pauVar3 = pcVar5 + uVar7;\n    }\n    else if (*0x14003d028 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        uVar15 = arg1 & 0xf;\n        auVar16 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar16, 0);\n        cVar12 = SUB161(auVar16 >> 8, 0);\n        cVar13 = SUB161(auVar16 >> 0x10, 0);\n        cVar14 = SUB161(auVar16 >> 0x18, 0);\n        auVar16 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar2 = (SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & -1 << uVar15;\n        uVar7 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << uVar15;\n        pcVar6 = pcVar5;\n        if (uVar7 == 0) {\n            do {\n                uVar7 = 0x1f;\n                if (uVar2 != 0) {\n                    for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n                    }\n                }\n                if (uVar2 != 0) {\n                    pauVar3 = pcVar6 + uVar7;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar16 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar7 = uVar1;\n                uVar2 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar2 = uVar2 & (-uVar7 & uVar7) - 1;\n        uVar7 = 0x1f;\n        if (uVar2 != 0) {\n            for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n            }\n        }\n        if (uVar2 != 0) {\n            pauVar3 = pcVar5 + uVar7;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar3 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar3;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar4 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar3 = *arg1 + iVar4;\n                bVar9 = pauVar3 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar3;\n}\n",
        "token_count": 5369
    },
    "14000e50": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14000e50c(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint auStackX8 [2];\n    \n    if (*arg1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            iVar2 = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            iVar2 = arg1[1];\n        }\n        iVar2 = fcn.14001a9c0(auStackX8, iVar2);\n        *arg1 = iVar2;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n        if (iVar2 == 0) {\n            fcn.14001936c();\n            pcVar1 = swi(3);\n            iVar2 = (*pcVar1)();\n            return iVar2;\n        }\n    }\n    return *arg1;\n}\n",
        "token_count": 236
    },
    "14000e57": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000e574(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14000e464(arg1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 440
    },
    "14000e60": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000e60c(ulong param_1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14000e3e8(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 445
    },
    "14000eac": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000eac0(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t in_RAX;\n    int64_t iVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    \n    if ((((arg3 != 2) && (in_RAX = *(arg1 + 0x14),  (*(arg1 + 0x14) & 0x4c0) != 0)) &&\n        (in_RAX = *(arg1 + 0x14),  (*(arg1 + 0x14) & 6) == 0)) && (0 < *(arg1 + 2))) {\n        uVar1 = *(arg1 + 3);\n        in_RAX = uVar1 >> 6;\n        iVar3 = *(in_RAX * 8 + 0x14004ca30);\n        if ((-1 < *(iVar3 + 0x38 + (uVar1 & 0x3f) * 0x48)) && (*(iVar3 + 0x39 + (uVar1 & 0x3f) * 0x48) == '\\0')) {\n            iVar3 = arg2;\n            if (arg3 == 0) {\n                in_RAX = fcn.14001b8b4(uVar1 & 0xffffffff, 0, 1);\n                if (in_RAX < 0) goto code_r0x00014000eb9a;\n                iVar2 = in_RAX - *(arg1 + 2);\n                iVar3 = arg2 - iVar2;\n                iVar4 = -(arg2 >> 0x3f);\n                in_RAX = *(arg1 + 2);\n                if ((iVar4 != -(iVar2 >> 0x3f)) && (in_RAX = 0,  iVar4 != -(iVar3 >> 0x3f))) goto code_r0x00014000eb9a;\n            }\n            if ((arg1[1] - *arg1 <= iVar3) && (iVar3 <= *(arg1 + 2))) {\n                *arg1 = *arg1 + iVar3;\n                *(arg1 + 2) = *(arg1 + 2) - iVar3;\n                return CONCAT71(in_RAX >> 8, 1);\n            }\n        }\n    }\ncode_r0x00014000eb9a:\n    return in_RAX & 0xffffffffffffff00;\n}\n",
        "token_count": 544
    },
    "14000eba": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14000eba8(ulong *arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    \n    if ((*(arg1 + 0x14) >> 0xd & 1) == 0) {\n        *(arg4 + 0x30) = 1;\n        iVar2 = -1;\n        *(arg4 + 0x2c) = 0x16;\n    }\n    else {\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffff7;\n        cVar1 = fcn.14000eac0(arg1, arg2, arg3);\n        if (cVar1 == '\\0') {\n            uVar4 = arg3;\n            if (arg3 == 1) {\n                iVar3 = fcn.140017b38(arg1, arg4);\n                arg2 = arg2 + iVar3;\n                uVar4 = 0;\n            }\n            fcn.140015c6c(arg1, arg4);\n            *arg1 = arg1[1];\n            *(arg1 + 2) = 0;\n            if ((*(arg1 + 0x14) >> 2 & 1) == 0) {\n                if (((*(arg1 + 0x14) & 0x41) == 0x41) && ((*(arg1 + 0x14) >> 8 & 1) == 0)) {\n                    *(arg1 + 4) = 0x200;\n                }\n            }\n            else {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffc;\n            }\n            iVar3 = fcn.14001b950(*(arg1 + 3), arg2, uVar4, arg4);\n            iVar2 = (iVar3 != -1) - 1;\n        }\n        else {\n            iVar2 = 0;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 474
    },
    "14000ec9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000ec94(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14000ea24(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 460
    },
    "14000f09": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14000f09c(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14000edec(param_1, param_2, param_3, param_4, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 470
    },
    "14000fd4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000fd40(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000fdbe;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000fdbe;\n                }\n                goto code_r0x00014000fd8e;\n            }\ncode_r0x00014000fe93:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000fdbe;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000fd8e:\n        if (iVar9 == 1) goto code_r0x00014000fe93;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000fdbe:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f180(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.140010cf4(arg1, uVar7);\n    }\n    else {\n        fcn.140010970(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1186
    },
    "14000ff4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ff44(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000ffc2;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000ffc2;\n                }\n                goto code_r0x00014000ff92;\n            }\ncode_r0x000140010097:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000ffc2;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000ff92:\n        if (iVar9 == 1) goto code_r0x000140010097;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000ffc2:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f228(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.140010d64(arg1, uVar7);\n    }\n    else {\n        fcn.1400109e0(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1187
    },
    "14001015": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140010150(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x0001400101ce;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x0001400101ce;\n                }\n                goto code_r0x00014001019e;\n            }\ncode_r0x0001400102a3:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x0001400101ce;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014001019e:\n        if (iVar9 == 1) goto code_r0x0001400102a3;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x0001400101ce:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f180(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.140010dec(arg1, uVar7);\n    }\n    else {\n        fcn.140010a64(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1185
    },
    "14001035": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140010354(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x0001400103d2;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x0001400103d2;\n                }\n                goto code_r0x0001400103a2;\n            }\ncode_r0x0001400104a7:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x0001400103d2;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x0001400103a2:\n        if (iVar9 == 1) goto code_r0x0001400104a7;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x0001400103d2:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f228(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.140010e9c(arg1, uVar7);\n    }\n    else {\n        fcn.140010b10(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1196
    },
    "14001056": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140010560(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x0001400105de;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x0001400105de;\n                }\n                goto code_r0x0001400105ae;\n            }\ncode_r0x0001400106b3:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x0001400105de;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x0001400105ae:\n        if (iVar9 == 1) goto code_r0x0001400106b3;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x0001400105de:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f180(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.140010f60(arg1, uVar7);\n    }\n    else {\n        fcn.140010bd0(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1186
    },
    "14001076": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140010764(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x0001400107e2;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x0001400107e2;\n                }\n                goto code_r0x0001400107b2;\n            }\ncode_r0x0001400108b7:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x0001400107e2;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x0001400107b2:\n        if (iVar9 == 1) goto code_r0x0001400108b7;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.140019e44(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x0001400107e2:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000f228(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.140010fe4(arg1, uVar7);\n    }\n    else {\n        fcn.140010c54(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1195
    },
    "14001132": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14001132c(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    char *pcVar5;\n    int64_t iVar6;\n    \n    iVar6 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar6 + 0x30) = 1;\n        *(iVar6 + 0x2c) = 0x16;\ncode_r0x0001400116a4:\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    else {\n        cVar2 = fcn.1400138a8(*(arg1 + 0x460));\n        if (cVar2 != '\\0') {\n            pcVar5 = *(arg1 + 0x10);\n            if (pcVar5 == NULL) {\n                iVar6 = *(arg1 + 8);\n                *(iVar6 + 0x30) = 1;\n                *(iVar6 + 0x2c) = 0x16;\n                fcn.140019e44(0, 0, 0, 0);\n                return 0xffffffff;\n            }\n            iVar3 = *(arg1 + 0x468) + 1;\n            *(arg1 + 0x468) = iVar3;\n            do {\n                if (iVar3 == 2) {\n                    return *(arg1 + 0x20);\n                }\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                cVar2 = *pcVar5;\n                while( true ) {\n                    pcVar5 = pcVar5 + 1;\n                    *(arg1 + 0x10) = pcVar5;\n                    *(arg1 + 0x39) = cVar2;\n                    if ((cVar2 == '\\0') || (*(arg1 + 0x20) < 0)) break;\n                    uVar4 = 0;\n                    if (cVar2 - 0x20U < 0x5b) {\n                        uVar4 = *((cVar2 - 0x20U & 0x7f) * 2 + 0x140031461);\n                    }\n                    uVar4 = *((*(arg1 + 0x24) + uVar4 * 8 & 0x7f) * 2 + 0x140031460);\n                    *(arg1 + 0x24) = uVar4;\n                    if (7 < uVar4) {\ncode_r0x000140011691:\n                        iVar6 = *(arg1 + 8);\n                        *(iVar6 + 0x30) = 1;\n                        *(iVar6 + 0x2c) = 0x16;\n                        goto code_r0x0001400116a4;\n                    }\n                    if (uVar4 == 0) {\n                        iVar6 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar6 + 0x28) == '\\0') {\n                            fcn.140013830(iVar6);\n                        }\n                        cVar2 = *(arg1 + 0x39);\n                        if ((-2 < cVar2) && ((*(**(iVar6 + 0x18) + cVar2 * 2) & 0x8000) != 0)) {\n                            if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                               (iVar3 = fcn.14001dea0(cVar2 & 0xffffffff, *(arg1 + 0x460), *(arg1 + 8)),  iVar3 == -1))\n                            {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                            cVar2 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar2;\n                            if (cVar2 == '\\0') {\n                                iVar6 = *(arg1 + 8);\n                                *(iVar6 + 0x30) = 1;\n                                *(iVar6 + 0x2c) = 0x16;\n                                fcn.140019e44(0, 0, 0, 0);\n                                goto code_r0x000140011691;\n                            }\n                        }\n                        if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                           (iVar3 = fcn.14001dea0(cVar2, *(arg1 + 0x460), *(arg1 + 8)),  iVar3 == -1)) {\n                            *(arg1 + 0x20) = 0xffffffff;\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                        }\n                    }\n                    else if (uVar4 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar4 == 2) {\n                        if (cVar2 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar2 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar2 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar2 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar2 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar4 == 3) {\n                            if (cVar2 == '*') {\n                                piVar1 = *(arg1 + 0x18);\n                                *(arg1 + 0x18) = piVar1 + 2;\n                                iVar3 = *piVar1;\n                                *(arg1 + 0x2c) = iVar3;\n                                if (iVar3 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar3;\n                                }\ncode_r0x0001400114d2:\n                                cVar2 = '\\x01';\n                            }\n                            else {\n                                iVar6 = arg1 + 0x2c;\ncode_r0x00014001147c:\n                                cVar2 = fcn.14001120c(arg1, iVar6);\n                            }\n                        }\n                        else {\n                            if (uVar4 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014001162e;\n                            }\n                            if (uVar4 == 5) {\n                                if (cVar2 == '*') {\n                                    piVar1 = *(arg1 + 0x18);\n                                    *(arg1 + 0x18) = piVar1 + 2;\n                                    iVar3 = *piVar1;\n                                    if (iVar3 < 0) {\n                                        iVar3 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar3;\n                                    goto code_r0x0001400114d2;\n                                }\n                                iVar6 = arg1 + 0x30;\n                                goto code_r0x00014001147c;\n                            }\n                            if (uVar4 == 6) {\n                                cVar2 = fcn.140011d1c(arg1);\n                            }\n                            else {\n                                if (uVar4 != 7) {\n                                    return 0xffffffff;\n                                }\n                                cVar2 = fcn.1400121dc(arg1);\n                            }\n                        }\n                        if (cVar2 == '\\0') {\n                            return 0xffffffff;\n                        }\n                    }\ncode_r0x00014001162e:\n                    pcVar5 = *(arg1 + 0x10);\n                    cVar2 = *pcVar5;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar3 = *(arg1 + 0x468);\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 2037
    },
    "1400116c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.1400116c4(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint8_t uVar5;\n    char *pcVar6;\n    int64_t iVar7;\n    \n    iVar7 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar7 + 0x30) = 1;\n        *(iVar7 + 0x2c) = 0x16;\ncode_r0x000140011a27:\n        fcn.140019e44(0, 0, 0, 0);\ncode_r0x000140011a40:\n        uVar4 = 0xffffffff;\n    }\n    else {\n        pcVar6 = *(arg1 + 0x10);\n        if (pcVar6 == NULL) {\n            *(iVar7 + 0x30) = 1;\n            *(iVar7 + 0x2c) = 0x16;\n            fcn.140019e44(0, 0, 0, 0);\n            uVar4 = 0xffffffff;\n        }\n        else {\n            iVar3 = *(arg1 + 0x468) + 1;\n            *(arg1 + 0x468) = iVar3;\n            while (iVar3 != 2) {\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                cVar2 = *pcVar6;\n                while( true ) {\n                    pcVar6 = pcVar6 + 1;\n                    *(arg1 + 0x10) = pcVar6;\n                    *(arg1 + 0x39) = cVar2;\n                    if ((cVar2 == '\\0') || (*(arg1 + 0x20) < 0)) break;\n                    uVar5 = 0;\n                    if (cVar2 - 0x20U < 0x5b) {\n                        uVar5 = *((cVar2 - 0x20U & 0x7f) * 2 + 0x140031461);\n                    }\n                    uVar5 = *((*(arg1 + 0x24) + uVar5 * 8 & 0x7f) * 2 + 0x140031460);\n                    *(arg1 + 0x24) = uVar5;\n                    if (7 < uVar5) {\ncode_r0x000140011a14:\n                        iVar7 = *(arg1 + 8);\n                        *(iVar7 + 0x30) = 1;\n                        *(iVar7 + 0x2c) = 0x16;\n                        goto code_r0x000140011a27;\n                    }\n                    if (uVar5 == 0) {\n                        iVar7 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar7 + 0x28) == '\\0') {\n                            fcn.140013830(iVar7);\n                        }\n                        cVar2 = *(arg1 + 0x39);\n                        if ((-2 < cVar2) && ((*(**(iVar7 + 0x18) + cVar2 * 2) & 0x8000) != 0)) {\n                            iVar7 = *(arg1 + 0x460);\n                            if (*(iVar7 + 0x10) == *(iVar7 + 8)) {\n                                if (*(iVar7 + 0x18) == '\\0') {\n                                    *(arg1 + 0x20) = 0xffffffff;\n                                }\n                                else {\n                                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                }\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                *(iVar7 + 0x10) = *(iVar7 + 0x10) + 1;\n                                ***(arg1 + 0x460) = cVar2;\n                                **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                            }\n                            cVar2 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar2;\n                            if (cVar2 == '\\0') {\n                                iVar7 = *(arg1 + 8);\n                                *(iVar7 + 0x30) = 1;\n                                *(iVar7 + 0x2c) = 0x16;\n                                fcn.140019e44(0, 0, 0, 0);\n                                goto code_r0x000140011a14;\n                            }\n                        }\n                        iVar7 = *(arg1 + 0x460);\n                        if (*(iVar7 + 0x10) == *(iVar7 + 8)) {\n                            if (*(iVar7 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            *(iVar7 + 0x10) = *(iVar7 + 0x10) + 1;\n                            ***(arg1 + 0x460) = cVar2;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                        }\n                    }\n                    else if (uVar5 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar5 == 2) {\n                        if (cVar2 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar2 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar2 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar2 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar2 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar5 == 3) {\n                            if (cVar2 == '*') {\n                                piVar1 = *(arg1 + 0x18);\n                                *(arg1 + 0x18) = piVar1 + 2;\n                                iVar3 = *piVar1;\n                                *(arg1 + 0x2c) = iVar3;\n                                if (iVar3 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar3;\n                                }\ncode_r0x00014001185a:\n                                cVar2 = '\\x01';\n                            }\n                            else {\n                                iVar7 = arg1 + 0x2c;\ncode_r0x000140011804:\n                                cVar2 = fcn.14001120c(arg1, iVar7);\n                            }\n                        }\n                        else {\n                            if (uVar5 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014001199b;\n                            }\n                            if (uVar5 == 5) {\n                                if (cVar2 == '*') {\n                                    piVar1 = *(arg1 + 0x18);\n                                    *(arg1 + 0x18) = piVar1 + 2;\n                                    iVar3 = *piVar1;\n                                    if (iVar3 < 0) {\n                                        iVar3 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar3;\n                                    goto code_r0x00014001185a;\n                                }\n                                iVar7 = arg1 + 0x30;\n                                goto code_r0x000140011804;\n                            }\n                            if (uVar5 == 6) {\n                                cVar2 = fcn.140011ea4(arg1);\n                            }\n                            else {\n                                if (uVar5 != 7) goto code_r0x000140011a40;\n                                cVar2 = fcn.140012614(arg1);\n                            }\n                        }\n                        if (cVar2 == '\\0') goto code_r0x000140011a40;\n                    }\ncode_r0x00014001199b:\n                    pcVar6 = *(arg1 + 0x10);\n                    cVar2 = *pcVar6;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar3 = *(arg1 + 0x468);\n            }\n            uVar4 = *(arg1 + 0x20);\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 2132
    },
    "140011a4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.140011a44(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t *piVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    \n    iVar8 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar8 + 0x30) = 1;\n        *(iVar8 + 0x2c) = 0x16;\ncode_r0x000140011cfd:\n        fcn.140019e44(0, 0, 0, 0);\ncode_r0x000140011d16:\n        uVar5 = 0xffffffff;\n    }\n    else {\n        puVar7 = *(arg1 + 0x10);\n        if (puVar7 == NULL) {\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            fcn.140019e44(0, 0, 0, 0);\n            uVar5 = 0xffffffff;\n        }\n        else {\n            iVar4 = *(arg1 + 0x468) + 1;\n            *(arg1 + 0x468) = iVar4;\n            while (iVar4 != 2) {\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                uVar1 = *puVar7;\n                while( true ) {\n                    puVar7 = puVar7 + 1;\n                    *(arg1 + 0x10) = puVar7;\n                    *(arg1 + 0x3a) = uVar1;\n                    if ((uVar1 == 0) || (iVar4 = *(arg1 + 0x20),  iVar4 < 0)) break;\n                    uVar6 = 0;\n                    if (uVar1 - 0x20 < 0x5b) {\n                        uVar6 = *((uVar1 - 0x20 & 0x7f) * 2 + 0x140031461);\n                    }\n                    uVar6 = *((*(arg1 + 0x24) + uVar6 * 8 & 0x7f) * 2 + 0x140031460);\n                    *(arg1 + 0x24) = uVar6;\n                    if (7 < uVar6) {\n                        iVar8 = *(arg1 + 8);\n                        *(iVar8 + 0x30) = 1;\n                        *(iVar8 + 0x2c) = 0x16;\n                        goto code_r0x000140011cfd;\n                    }\n                    if (uVar6 == 0) {\n                        *(arg1 + 0x4c) = 1;\n                        iVar8 = *(arg1 + 0x460);\n                        if (*(iVar8 + 0x10) == *(iVar8 + 8)) {\n                            if (*(iVar8 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = iVar4 + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = iVar4 + 1;\n                            *(iVar8 + 0x10) = *(iVar8 + 0x10) + 1;\n                            ***(arg1 + 0x460) = uVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                        }\n                    }\n                    else if (uVar6 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar6 == 2) {\n                        if (uVar1 == 0x20) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (uVar1 == 0x23) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (uVar1 == 0x2b) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (uVar1 == 0x2d) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (uVar1 == 0x30) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar6 == 3) {\n                            if (uVar1 == 0x2a) {\n                                piVar2 = *(arg1 + 0x18);\n                                *(arg1 + 0x18) = piVar2 + 2;\n                                iVar4 = *piVar2;\n                                *(arg1 + 0x2c) = iVar4;\n                                if (iVar4 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar4;\n                                }\ncode_r0x000140011beb:\n                                cVar3 = '\\x01';\n                            }\n                            else {\n                                iVar8 = arg1 + 0x2c;\ncode_r0x000140011b94:\n                                cVar3 = fcn.14001129c(arg1, iVar8);\n                            }\n                        }\n                        else {\n                            if (uVar6 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x000140011c9a;\n                            }\n                            if (uVar6 == 5) {\n                                if (uVar1 == 0x2a) {\n                                    piVar2 = *(arg1 + 0x18);\n                                    *(arg1 + 0x18) = piVar2 + 2;\n                                    iVar4 = *piVar2;\n                                    if (iVar4 < 0) {\n                                        iVar4 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar4;\n                                    goto code_r0x000140011beb;\n                                }\n                                iVar8 = arg1 + 0x30;\n                                goto code_r0x000140011b94;\n                            }\n                            if (uVar6 == 6) {\n                                cVar3 = fcn.14001202c(arg1);\n                            }\n                            else {\n                                if (uVar6 != 7) goto code_r0x000140011d16;\n                                cVar3 = fcn.140012a18(arg1);\n                            }\n                        }\n                        if (cVar3 == '\\0') goto code_r0x000140011d16;\n                    }\ncode_r0x000140011c9a:\n                    puVar7 = *(arg1 + 0x10);\n                    uVar1 = *puVar7;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar4 = *(arg1 + 0x468);\n            }\n            uVar5 = *(arg1 + 0x20);\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 1710
    },
    "140011d1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140011d1c(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    ulong uVar4;\n    bool bVar5;\n    char cVar6;\n    int32_t iVar7;\n    uint64_t in_RAX;\n    char *pcVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uchar uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000140011e9c;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar6 = *pcVar3;\n                if ((cVar6 == '3') && (pcVar3[1] == '2')) {\n                    pcVar8 = pcVar3 + 2;\n                    *(arg1 + 0x34) = 10;\n                    *(arg1 + 0x10) = pcVar8;\n                }\n                else if (cVar6 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if ((cVar6 + 0xa8U < 0x21) && ((0x120821001U >> (cVar6 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x000140011e9c;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x000140011e9c;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar8;\n            }\ncode_r0x000140011e9c:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        iVar10 = *(arg1 + 8);\n        *(iVar10 + 0x30) = 1;\n        *(iVar10 + 0x2c) = 0x16;\n        uStack64 = 0x140011d7b;\n        uVar9 = fcn.140019e44(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000140011e9c;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003d018 ^ &stack0xffffffffffffff88;\n    uVar1 = arg1[0x39];\n    uVar11 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x0001400122a5:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400122a9:\n            cVar6 = fcn.140010150(arg1);\n        }\n        else if (uVar1 < 'T') {\n            if (uVar1 == 0x53) {\ncode_r0x0001400122e8:\n                cVar6 = fcn.140013684(arg1);\n            }\n            else {\n                if (uVar1 != 0x41) {\n                    if (uVar1 == 0x43) {\ncode_r0x000140012268:\n                        cVar6 = fcn.140013434(arg1);\n                        goto code_r0x000140012304;\n                    }\n                    if (((uVar1 != 0x45) && (uVar1 != 0x46)) && (uVar1 != 0x47)) goto code_r0x0001400125ee;\n                }\ncode_r0x000140012242:\n                cVar6 = fcn.140012f78(arg1);\n            }\n        }\n        else {\n            if (uVar1 == 0x58) goto code_r0x0001400122ff;\n            if (uVar1 != 0x5a) {\n                if (uVar1 != 0x61) {\n                    if (uVar1 != 99) goto code_r0x0001400125ee;\n                    goto code_r0x000140012268;\n                }\n                goto code_r0x000140012242;\n            }\n            cVar6 = fcn.140012e7c(arg1);\n        }\n    }\n    else if (uVar1 < 'p') {\n        if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000fd40(arg1);\n        }\n        else {\n            if (((uVar1 == 0x65) || (uVar1 == 0x66)) || (uVar1 == 0x67)) goto code_r0x000140012242;\n            if (uVar1 == 0x69) goto code_r0x0001400122a5;\n            if (uVar1 != 0x6e) goto code_r0x0001400125ee;\n            cVar6 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (uVar1 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar1 == 0x73) goto code_r0x0001400122e8;\n            if (uVar1 == 0x75) goto code_r0x0001400122a9;\n            if (uVar1 != 0x78) goto code_r0x0001400125ee;\n        }\ncode_r0x0001400122ff:\n        cVar6 = fcn.140010560(arg1);\n    }\ncode_r0x000140012304:\n    if ((cVar6 == '\\0') || (arg1[0x38] != 0)) goto code_r0x0001400125ee;\n    uVar2 = *(arg1 + 0x28);\n    iVar10 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar2 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x00014001235b;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        iVar10 = 1;\n    }\ncode_r0x00014001235b:\n    uVar1 = arg1[0x39];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        (&stack0xffffffffffffffb8)[iVar10] = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar11 = 0x58;\n        }\n        (&stack0xffffffffffffffb9)[iVar10] = uVar11;\n        iVar10 = iVar10 + 2;\n    }\n    iVar13 = (*(arg1 + 0x2c) - iVar10) - *(arg1 + 0x48);\n    if ((uVar2 & 0xc) == 0) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar7 = fcn.14001dea0(0x20, *(arg1 + 0x460), uVar4),  iVar7 != -1))) {\n                iVar7 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x000140012412;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x000140012412:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140013a90(arg1_00, &stack0xffffffffffffffb8, iVar10, arg4);\n    }\n    else {\n        *arg4 = *arg4 + iVar10;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.14001dea0(0x30, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x0001400124ba;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x0001400124ba:\n    if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140013a90(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar12 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar7 = fcn.14001db60(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n            if ((iVar7 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.140013a90(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.14001dea0(0x20, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x0001400125ee;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x0001400125ee:\n    uVar9 = fcn.14000a100(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3600
    },
    "140011ea": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140011ea4(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    char cVar6;\n    uint64_t in_RAX;\n    char *pcVar7;\n    uint64_t uVar8;\n    int64_t arg3;\n    int32_t iVar9;\n    uchar uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int64_t iVar13;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar7 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000140012024;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar6 = *pcVar3;\n                if ((cVar6 == '3') && (pcVar3[1] == '2')) {\n                    pcVar7 = pcVar3 + 2;\n                    *(arg1 + 0x34) = 10;\n                    *(arg1 + 0x10) = pcVar7;\n                }\n                else if (cVar6 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar7 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar7;\n                    }\n                }\n                else if ((cVar6 + 0xa8U < 0x21) && ((0x120821001U >> (cVar6 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar7 = 0x1;\n                    }\n                    else {\n                        pcVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x000140012024;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x000140012024;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar7 = 0x4;\n                    }\n                    else {\n                        pcVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar7;\n            }\ncode_r0x000140012024:\n            return CONCAT71(pcVar7 >> 8, 1);\n        }\n        iVar13 = *(arg1 + 8);\n        *(iVar13 + 0x30) = 1;\n        *(iVar13 + 0x2c) = 0x16;\n        uStack64 = 0x140011f03;\n        uVar8 = fcn.140019e44(0, 0, 0, 0);\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000140012024;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003d018 ^ &stack0xffffffffffffff88;\n    uVar10 = 0x78;\n    uVar1 = arg1[0x39];\n    iVar13 = 1;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x0001400126f3:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400126f7:\n            cVar6 = fcn.140010150(arg1);\n        }\n        else if (uVar1 < 'T') {\n            if (uVar1 == 0x53) {\ncode_r0x00014001273a:\n                cVar6 = fcn.140013684(arg1);\n            }\n            else {\n                if (uVar1 != 0x41) {\n                    if (uVar1 == 0x43) {\ncode_r0x0001400126ad:\n                        cVar6 = fcn.140013434(arg1);\n                        goto code_r0x00014001275d;\n                    }\n                    if (((uVar1 != 0x45) && (uVar1 != 0x46)) && (uVar1 != 0x47)) goto code_r0x0001400129eb;\n                }\ncode_r0x000140012684:\n                cVar6 = fcn.140012f78(arg1);\n            }\n        }\n        else {\n            if (uVar1 == 0x58) goto code_r0x000140012755;\n            if (uVar1 != 0x5a) {\n                if (uVar1 != 0x61) {\n                    if (uVar1 != 99) goto code_r0x0001400129eb;\n                    goto code_r0x0001400126ad;\n                }\n                goto code_r0x000140012684;\n            }\n            cVar6 = fcn.140012e7c(arg1);\n        }\n    }\n    else if (uVar1 < 'p') {\n        if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000fd40(arg1);\n        }\n        else {\n            if (((uVar1 == 0x65) || (uVar1 == 0x66)) || (uVar1 == 0x67)) goto code_r0x000140012684;\n            if (uVar1 == 0x69) goto code_r0x0001400126f3;\n            if (uVar1 != 0x6e) goto code_r0x0001400129eb;\n            cVar6 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (uVar1 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar1 == 0x73) goto code_r0x00014001273a;\n            if (uVar1 == 0x75) goto code_r0x0001400126f7;\n            if (uVar1 != 0x78) goto code_r0x0001400129eb;\n        }\ncode_r0x000140012755:\n        cVar6 = fcn.140010560(arg1);\n    }\ncode_r0x00014001275d:\n    if ((cVar6 != '\\0') && (arg1[0x38] == 0)) {\n        uVar2 = *(arg1 + 0x28);\n        uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n        arg3 = 0;\n        if ((uVar2 >> 4 & 1) != 0) {\n            uStack72._1_3_ = uStack72 >> 8;\n            if ((uVar2 >> 6 & 1) == 0) {\n                if ((uVar2 & 1) == 0) {\n                    if ((uVar2 >> 1 & 1) != 0) {\n                        uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n                        arg3 = iVar13;\n                    }\n                }\n                else {\n                    uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n                    arg3 = iVar13;\n                }\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n                arg3 = iVar13;\n            }\n        }\n        uVar1 = arg1[0x39];\n        if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n            bVar5 = true;\n        }\n        else {\n            bVar5 = false;\n        }\n        if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n            (&stack0xffffffffffffffb8)[arg3] = 0x30;\n            if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n                uVar10 = 0x58;\n            }\n            (&stack0xffffffffffffffb9)[arg3] = uVar10;\n            arg3 = arg3 + 2;\n        }\n        iVar9 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n        if (((uVar2 & 0xc) == 0) && (iVar12 = 0,  0 < iVar9)) {\n            iVar11 = *(arg1 + 0x20);\n            do {\n                iVar13 = *(arg1 + 0x460);\n                if (*(iVar13 + 0x10) == *(iVar13 + 8)) {\n                    if (*(iVar13 + 0x18) == '\\0') {\n                        iVar11 = -1;\n                    }\n                    else {\n                        iVar11 = iVar11 + 1;\n                    }\n                    *(arg1 + 0x20) = iVar11;\n                }\n                else {\n                    *(arg1 + 0x20) = iVar11 + 1;\n                    *(iVar13 + 0x10) = *(iVar13 + 0x10) + 1;\n                    ***(arg1 + 0x460) = 0x20;\n                    **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                }\n                iVar11 = *(arg1 + 0x20);\n            } while ((iVar11 != -1) && (iVar12 = iVar12 + 1,  iVar12 < iVar9));\n        }\n        uStack88 = *(arg1 + 8);\n        arg4 = arg1 + 0x20;\n        arg1_00 = arg1 + 0x460;\n        fcn.140013944(arg1_00, &stack0xffffffffffffffb8, arg3, arg4);\n        if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar12 = 0,  0 < iVar9)))) {\n            iVar11 = *arg4;\n            do {\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        iVar11 = -1;\n                    }\n                    else {\n                        iVar11 = iVar11 + 1;\n                    }\n                    *arg4 = iVar11;\n                }\n                else {\n                    *arg4 = iVar11 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = 0x30;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar11 = *arg4;\n            } while ((iVar11 != -1) && (iVar12 = iVar12 + 1,  iVar12 < iVar9));\n        }\n        if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140013944(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            iVar12 = 0;\n            do {\n                uStack88 = *(arg1 + 8);\n                uStack72 = 0;\n                iVar11 = fcn.14001db60(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n                if ((iVar11 != 0) || (uStack72 == 0)) {\n                    *arg4 = -1;\n                    break;\n                }\n                uStack88 = *(arg1 + 8);\n                fcn.140013944(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n                iVar12 = iVar12 + 1;\n            } while (iVar12 != *(arg1 + 0x48));\n        }\n        iVar12 = *arg4;\n        if (((-1 < iVar12) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar11 = 0,  0 < iVar9)) {\n            do {\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        iVar12 = -1;\n                    }\n                    else {\n                        iVar12 = iVar12 + 1;\n                    }\n                    *arg4 = iVar12;\n                }\n                else {\n                    *arg4 = iVar12 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = 0x20;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar12 = *arg4;\n            } while ((iVar12 != -1) && (iVar11 = iVar11 + 1,  iVar11 < iVar9));\n        }\n    }\ncode_r0x0001400129eb:\n    uVar8 = fcn.14000a100(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar8;\n}\n",
        "token_count": 3478
    },
    "14001202": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14001202c(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    char cVar6;\n    uint16_t uVar7;\n    uint16_t *puVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    ushort uVar12;\n    int32_t iVar13;\n    uint32_t uVar14;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort uStack72;\n    uint uStack68;\n    uint64_t uStack64;\n    uint64_t uStack56;\n    uint64_t uVar15;\n    \n    uVar7 = *(arg1 + 0x3a);\n    puVar8 = uVar7;\n    if (uVar7 != 0x46) {\n        if (uVar7 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x0001400121d2;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar7 == 0x49) {\n                puVar2 = *(arg1 + 0x10);\n                uVar7 = *puVar2;\n                puVar8 = uVar7;\n                if ((uVar7 == 0x33) && (puVar2[1] == 0x32)) {\n                    puVar8 = puVar2 + 2;\n                    *(arg1 + 0x34) = 10;\n                    *(arg1 + 0x10) = puVar8;\n                }\n                else if (uVar7 == 0x36) {\n                    if (puVar2[1] == 0x34) {\n                        puVar8 = puVar2 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = puVar8;\n                    }\n                }\n                else {\n                    puVar8 = uVar7 - 0x58;\n                    if ((uVar7 - 0x58 < 0x21) && ((0x120821001U >> (puVar8 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x34) = 9;\n                    }\n                }\n            }\n            else if (uVar7 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar7 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar7 == 0x68) {\n                    if (**(arg1 + 0x10) == 0x68) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar8 = 0x1;\n                    }\n                    else {\n                        puVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar7 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x0001400121d2;\n                    }\n                    if (uVar7 != 0x6c) {\n                        if (uVar7 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar7 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar7 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x0001400121d2;\n                    }\n                    if (**(arg1 + 0x10) == 0x6c) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar8 = 0x4;\n                    }\n                    else {\n                        puVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = puVar8;\n            }\ncode_r0x0001400121d2:\n            return CONCAT71(puVar8 >> 8, 1);\n        }\n        iVar3 = *(arg1 + 8);\n        *(iVar3 + 0x30) = 1;\n        *(iVar3 + 0x2c) = 0x16;\n        uStack64 = 0x140012090;\n        uVar9 = fcn.140019e44(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x0001400121d2;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003d018 ^ &stack0xffffffffffffff88;\n    uVar12 = 0x78;\n    uVar7 = *(arg1 + 0x3a);\n    if (uVar7 < 0x65) {\n        if (uVar7 == 100) {\ncode_r0x000140012af5:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140012af9:\n            cVar6 = fcn.140010354(arg1);\n        }\n        else if (uVar7 < 0x54) {\n            if (uVar7 == 0x53) {\ncode_r0x000140012b3b:\n                cVar6 = fcn.140013720(arg1);\n            }\n            else {\n                if (uVar7 != 0x41) {\n                    if (uVar7 == 0x43) {\ncode_r0x000140012aaf:\n                        cVar6 = fcn.140013508(arg1);\n                        goto code_r0x000140012b5d;\n                    }\n                    if (((uVar7 != 0x45) && (uVar7 != 0x46)) && (uVar7 != 0x47)) goto code_r0x000140012e51;\n                }\ncode_r0x000140012a87:\n                cVar6 = fcn.1400131cc(arg1);\n            }\n        }\n        else {\n            if (uVar7 == 0x58) goto code_r0x000140012b55;\n            if (uVar7 != 0x5a) {\n                if (uVar7 != 0x61) {\n                    if (uVar7 != 99) goto code_r0x000140012e51;\n                    goto code_r0x000140012aaf;\n                }\n                goto code_r0x000140012a87;\n            }\n            cVar6 = fcn.140012ef8(arg1);\n        }\n    }\n    else if (uVar7 < 0x70) {\n        if (uVar7 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000ff44(arg1);\n        }\n        else {\n            if (((uVar7 == 0x65) || (uVar7 == 0x66)) || (uVar7 == 0x67)) goto code_r0x000140012a87;\n            if (uVar7 == 0x69) goto code_r0x000140012af5;\n            if (uVar7 != 0x6e) goto code_r0x000140012e51;\n            cVar6 = fcn.1400135cc(arg1);\n        }\n    }\n    else {\n        if (uVar7 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar7 == 0x73) goto code_r0x000140012b3b;\n            if (uVar7 == 0x75) goto code_r0x000140012af9;\n            if (uVar7 != 0x78) goto code_r0x000140012e51;\n        }\ncode_r0x000140012b55:\n        cVar6 = fcn.140010764(arg1);\n    }\ncode_r0x000140012b5d:\n    uVar9 = 0;\n    if ((cVar6 == '\\0') || (arg1[0x38] != 0)) goto code_r0x000140012e51;\n    uVar14 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = uStack64 & 0xffffffffffff0000;\n    uVar10 = uVar9;\n    if ((uVar14 >> 4 & 1) != 0) {\n        if ((uVar14 >> 6 & 1) == 0) {\n            if ((uVar14 & 1) != 0) {\n                uVar7 = 0x2b;\n                goto code_r0x000140012ba3;\n            }\n            if ((uVar14 >> 1 & 1) == 0) goto code_r0x000140012bc9;\n            uStack68 = 0x20;\n        }\n        else {\n            uVar7 = 0x2d;\ncode_r0x000140012ba3:\n            uStack68 = uVar7;\n        }\n        uVar10 = 1;\n    }\ncode_r0x000140012bc9:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || (bVar5 = true,  (uVar14 >> 5 & 1) == 0)) {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffbc + uVar10 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar12 = 0x58;\n        }\n        *(&stack0xffffffffffffffbe + uVar10 * 2) = uVar12;\n        uVar10 = uVar10 + 2;\n    }\n    iVar11 = (*(arg1 + 0x2c) - uVar10) - *(arg1 + 0x48);\n    if (((uVar14 & 0xc) == 0) && (0 < iVar11)) {\n        iVar13 = *(arg1 + 0x20);\n        uVar15 = uVar9;\n        do {\n            iVar3 = *(arg1 + 0x460);\n            if (*(iVar3 + 0x10) == *(iVar3 + 8)) {\n                if (*(iVar3 + 0x18) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *(arg1 + 0x20) = iVar13;\n            }\n            else {\n                *(arg1 + 0x20) = iVar13 + 1;\n                *(iVar3 + 0x10) = *(iVar3 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n            }\n            iVar13 = *(arg1 + 0x20);\n        } while ((iVar13 != -1) && (uVar14 = uVar15 + 1,  uVar15 = uVar14,  uVar14 < iVar11));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.1400139e8(arg1_00, &stack0xffffffffffffffbc, uVar10, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar11)))) {\n        iVar13 = *arg4;\n        uVar10 = uVar9;\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *arg4 = iVar13;\n            }\n            else {\n                *arg4 = iVar13 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar13 = *arg4;\n        } while ((iVar13 != -1) && (uVar14 = uVar10 + 1,  uVar10 = uVar14,  uVar14 < iVar11));\n    }\n    if ((arg1[0x4c] == 0) && (0 < *(arg1 + 0x48))) {\n        iVar3 = *(arg1 + 8);\n        if (*(iVar3 + 0x28) == '\\0') {\n            fcn.140013830(iVar3);\n        }\n        arg2 = *(arg1 + 0x40);\n        uVar10 = uVar9;\n        if (*(arg1 + 0x48) != 0) {\n            do {\n                uStack72 = 0;\n                iVar13 = fcn.14001dd10(&stack0xffffffffffffffb8, arg2, *(*(iVar3 + 0x18) + 8), *(arg1 + 8));\n                if (iVar13 < 1) {\n                    *arg4 = -1;\n                    break;\n                }\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        *arg4 = -1;\n                    }\n                    else {\n                        *arg4 = *arg4 + 1;\n                    }\n                }\n                else {\n                    *arg4 = *arg4 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = uStack72;\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar13;\n                uVar14 = uVar10 + 1;\n                uVar10 = uVar14;\n            } while (uVar14 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.1400139e8(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar13 = *arg4;\n    if (((-1 < iVar13) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (0 < iVar11)) {\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *arg4 = iVar13;\n            }\n            else {\n                *arg4 = iVar13 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar13 = *arg4;\n        } while ((iVar13 != -1) && (uVar14 = uVar9 + 1,  uVar9 = uVar14,  uVar14 < iVar11));\n    }\ncode_r0x000140012e51:\n    uVar9 = fcn.14000a100(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3753
    },
    "140012f7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140012f78(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    char *pcVar8;\n    uint8_t *puVar9;\n    int64_t iVar10;\n    uint8_t uVar11;\n    uint64_t uVar12;\n    int64_t arg4;\n    bool bVar13;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar5 = *(arg1 + 0x30);\n    if (iVar5 < 0) {\n        iVar5 = (-((*(arg1 + 0x39) + 0xbfU & 0xdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar5;\n    }\n    else if ((iVar5 == 0) && ((*(arg1 + 0x39) == 'g' || (*(arg1 + 0x39) == 'G')))) {\n        *(arg1 + 0x30) = 1;\n        iVar5 = 1;\n    }\n    iVar10 = arg1 + 0x50;\n    cVar4 = fcn.14000f180(iVar10, iVar5 + 0x15d, *(arg1 + 8));\n    uVar12 = 0x200;\n    if (cVar4 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar5 = 0x200;\n        }\n        else {\n            iVar5 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar5 + -0x15d;\n    }\n    iVar6 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar6 = iVar10;\n    }\n    *(arg1 + 0x40) = iVar6;\n    puVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar2 + 1;\n    iVar6 = *(arg1 + 0x458);\n    uStackX8 = *puVar2;\n    if (iVar6 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar6 = iVar10;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar6;\n        uVar12 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.14001d878(&uStackX8, iVar6, uVar12, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar10 = *(arg1 + 8);\n        if (*(iVar10 + 0x28) == '\\0') {\n            fcn.140013830(iVar10);\n        }\n        puVar7 = *(arg1 + 0x40);\n        piVar3 = *(iVar10 + 0x18);\n        uVar12 = *puVar7;\n        if (*(uVar12 + piVar3[0x22]) != 'e') {\n            do {\n                puVar7 = puVar7 + 1;\n                uVar12 = *puVar7;\n            } while ((*(*piVar3 + uVar12 * 2) & 4) != 0);\n        }\n        bVar13 = *(uVar12 + piVar3[0x22]) == 'x';\n        if (bVar13) {\n            uVar12 = puVar7[2];\n        }\n        puVar9 = puVar7 + 2;\n        if (!bVar13) {\n            puVar9 = puVar7;\n        }\n        *puVar9 = **piVar3[0x1f];\n        do {\n            puVar9 = puVar9 + 1;\n            uVar1 = *puVar9;\n            uVar11 = uVar12;\n            *puVar9 = uVar11;\n            uVar12 = uVar1;\n        } while (uVar11 != 0);\n    }\n    if (((*(arg1 + 0x39) + 0xb9U & 0xdf) == 0) && ((*(arg1 + 0x28) >> 5 & 1) == 0)) {\n        iVar10 = *(arg1 + 8);\n        if (*(iVar10 + 0x28) == '\\0') {\n            fcn.140013830(iVar10);\n        }\n        fcn.1400111a0(*(arg1 + 0x40), iVar10 + 0x18);\n    }\n    pcVar8 = *(arg1 + 0x40);\n    cVar4 = *pcVar8;\n    if (cVar4 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar8 = pcVar8 + 1;\n        *(arg1 + 0x40) = pcVar8;\n        cVar4 = *pcVar8;\n    }\n    if ((cVar4 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar4 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        *(arg1 + 0x39) = 0x73;\n    }\n    iVar10 = -1;\n    do {\n        iVar10 = iVar10 + 1;\n    } while (pcVar8[iVar10] != '\\0');\n    *(arg1 + 0x48) = iVar10;\n    return 1;\n}\n",
        "token_count": 1354
    },
    "1400131c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400131cc(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    char *pcVar10;\n    uint8_t *puVar11;\n    int64_t iVar12;\n    uint8_t uVar13;\n    uint64_t uVar14;\n    int64_t arg4;\n    bool bVar15;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar6 = *(arg1 + 0x30);\n    if (iVar6 < 0) {\n        iVar6 = (-((*(arg1 + 0x3a) - 0x41U & 0xffdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar6;\n    }\n    else if ((iVar6 == 0) && ((*(arg1 + 0x3a) == 0x67 || (*(arg1 + 0x3a) == 0x47)))) {\n        *(arg1 + 0x30) = 1;\n        iVar6 = 1;\n    }\n    iVar12 = arg1 + 0x50;\n    cVar4 = fcn.14000f180(iVar12, iVar6 + 0x15d, *(arg1 + 8));\n    uVar14 = 0x200;\n    if (cVar4 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar6 = 0x200;\n        }\n        else {\n            iVar6 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar6 + -0x15d;\n    }\n    iVar8 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar8 = iVar12;\n    }\n    *(arg1 + 0x40) = iVar8;\n    puVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar2 + 1;\n    iVar8 = *(arg1 + 0x458);\n    uStackX8 = *puVar2;\n    if (iVar8 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar8 = iVar12;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar8;\n        uVar14 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.14001d878(&uStackX8, iVar8, uVar14, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar12 = *(arg1 + 8);\n        if (*(iVar12 + 0x28) == '\\0') {\n            fcn.140013830(iVar12);\n        }\n        puVar9 = *(arg1 + 0x40);\n        piVar3 = *(iVar12 + 0x18);\n        uVar14 = *puVar9;\n        if (*(uVar14 + piVar3[0x22]) != 'e') {\n            do {\n                puVar9 = puVar9 + 1;\n                uVar14 = *puVar9;\n            } while ((*(*piVar3 + uVar14 * 2) & 4) != 0);\n        }\n        bVar15 = *(uVar14 + piVar3[0x22]) == 'x';\n        if (bVar15) {\n            uVar14 = puVar9[2];\n        }\n        puVar11 = puVar9 + 2;\n        if (!bVar15) {\n            puVar11 = puVar9;\n        }\n        *puVar11 = **piVar3[0x1f];\n        do {\n            puVar11 = puVar11 + 1;\n            uVar1 = *puVar11;\n            uVar13 = uVar14;\n            *puVar11 = uVar13;\n            uVar14 = uVar1;\n        } while (uVar13 != 0);\n    }\n    uVar5 = *(arg1 + 0x3a) - 0x47;\n    uVar14 = uVar5;\n    if (((uVar5 & 0xffdf) == 0) && (uVar7 = *(arg1 + 0x28) >> 5,  uVar14 = uVar7,  (uVar7 & 1) == 0)) {\n        iVar12 = *(arg1 + 8);\n        if (*(iVar12 + 0x28) == '\\0') {\n            fcn.140013830(iVar12);\n        }\n        uVar14 = fcn.1400111a0(*(arg1 + 0x40), iVar12 + 0x18);\n    }\n    pcVar10 = *(arg1 + 0x40);\n    cVar4 = *pcVar10;\n    uVar14 = uVar14 & 0xffffffffffffff00;\n    if (cVar4 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar10 = pcVar10 + 1;\n        *(arg1 + 0x40) = pcVar10;\n        cVar4 = *pcVar10;\n    }\n    if ((cVar4 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar4 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        uVar14 = 0;\n        *(arg1 + 0x3a) = 0x73;\n    }\n    iVar12 = -1;\n    do {\n        iVar12 = iVar12 + 1;\n    } while (pcVar10[iVar12] != '\\0');\n    *(arg1 + 0x48) = iVar12;\n    return CONCAT71(uVar14 >> 8, 1);\n}\n",
        "token_count": 1452
    },
    "1400135c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400135cc(int64_t arg1)\n\n{\n    uint64_t **ppuVar1;\n    uint64_t *puVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    \n    ppuVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppuVar1 + 1;\n    puVar2 = *ppuVar1;\n    uVar4 = fcn.14001de88();\n    if (uVar4 == 0) goto code_r0x0001400135f1;\n    iVar5 = *(arg1 + 0x34);\n    if (iVar5 < 6) {\n        if (iVar5 != 5) {\n            if (iVar5 != 0) {\n                if (iVar5 == 1) {\n                    uVar4 = uVar4 & 0xffffffffffffff00;\n                    *puVar2 = *(arg1 + 0x20);\n                    goto code_r0x00014001366a;\n                }\n                iVar5 = iVar5 + -2;\n                if (iVar5 == 0) {\n                    uVar4 = *(arg1 + 0x20);\n                    *puVar2 = *(arg1 + 0x20);\n                    goto code_r0x00014001366a;\n                }\n                goto code_r0x000140013659;\n            }\ncode_r0x00014001367b:\n            uVar4 = *(arg1 + 0x20);\n            *puVar2 = *(arg1 + 0x20);\n            goto code_r0x00014001366a;\n        }\n    }\n    else if (((iVar5 != 6) && (iVar5 != 7)) && (iVar5 = iVar5 + -9,  iVar5 != 0)) {\ncode_r0x000140013659:\n        if (iVar5 == 1) goto code_r0x00014001367b;\n        if (iVar5 != 2) {\ncode_r0x0001400135f1:\n            iVar3 = *(arg1 + 8);\n            *(iVar3 + 0x30) = 1;\n            *(iVar3 + 0x2c) = 0x16;\n            uVar4 = fcn.140019e44(0, 0, 0, 0);\n            return uVar4 & 0xffffffffffffff00;\n        }\n    }\n    uVar4 = *(arg1 + 0x20);\n    *puVar2 = uVar4;\ncode_r0x00014001366a:\n    *(arg1 + 0x38) = 1;\n    return CONCAT71(uVar4 >> 8, 1);\n}\n",
        "token_count": 600
    },
    "1400137b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400137bc(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    \n    arg1_00 = *(arg1 + 8);\n    if (*(arg1_00 + 0x28) == '\\0') {\n        fcn.140013830(arg1_00);\n    }\n    puVar2 = *(arg1 + 0x40);\n    iVar3 = 0;\n    if (0 < arg2) {\n        do {\n            if (*puVar2 == 0) {\n                return iVar3;\n            }\n            puVar1 = puVar2 + 1;\n            if (-1 < *(**(arg1_00 + 0x18) + *puVar2 * 2)) {\n                puVar1 = puVar2;\n            }\n            iVar3 = iVar3 + 1;\n            puVar2 = puVar1 + 1;\n        } while (iVar3 < arg2);\n    }\n    return iVar3;\n}\n",
        "token_count": 243
    },
    "1400138a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400138a8(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    uVar1 = *(arg1 + 0x14) >> 0xc;\n    uVar3 = uVar1;\n    if ((uVar1 & 1) == 0) {\n        uVar1 = fcn.1400192e4(arg1);\n        iVar5 = 0x14003d3e0;\n        if (uVar1 + 2 < 2) {\n            iVar4 = 0x14003d3e0;\n        }\n        else {\n            iVar4 = *((uVar1 >> 6) * 8 + 0x14004ca30) + (uVar1 & 0x3f) * 0x48;\n        }\n        if (*(iVar4 + 0x39) == '\\0') {\n            uVar3 = uVar1 + 2;\n            if (1 < uVar1 + 2) {\n                uVar3 = *((uVar1 >> 6) * 8 + 0x14004ca30);\n                iVar5 = uVar3 + (uVar1 & 0x3f) * 0x48;\n            }\n            if ((*(iVar5 + 0x3d) & 1) == 0) goto code_r0x00014001393c;\n        }\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x16;\n        uVar3 = fcn.140019f10();\n        uVar3 = uVar3 & 0xffffffffffffff00;\n    }\n    else {\ncode_r0x00014001393c:\n        uVar3 = CONCAT71(uVar3 >> 8, 1);\n    }\n    return uVar3;\n}\n",
        "token_count": 426
    },
    "140013b5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_11h\n\nuint fcn.140013b5c(ulong arg1, int64_t arg2, int64_t arg3, uint *arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    int64_t var_fh;\n    ulong var_17h;\n    int64_t var_1fh;\n    ulong var_27h;\n    ulong var_2fh;\n    ulong var_5fh;\n    ulong var_67h;\n    ulong var_6fh;\n    ulong var_77h;\n    int64_t aiStack152 [2];\n    uchar uStack136;\n    uchar auStack128 [16];\n    char cStack112;\n    uint uStack108;\n    char cStack104;\n    uint uStack100;\n    char cStack96;\n    int64_t iStack88;\n    uchar auStack80 [7];\n    int64_t var_41h;\n    uchar auStack64 [7];\n    int64_t var_31h;\n    int64_t var_29h;\n    uchar auStack40 [7];\n    ulong var_19h;\n    ulong var_11h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    aiStack152[0] = 0;\n    uStack136 = 0;\n    cStack112 = '\\0';\n    cStack104 = '\\0';\n    cStack96 = '\\0';\n    if (arg4 == NULL) {\n        uVar1 = *0x14003d2c8;\n        uVar3 = *0x14003d2cc;\n        uVar4 = *0x14003d2d0;\n        uVar5 = *0x14003d2d4;\n        if (*0x14004c9e4 != 0) goto code_r0x000140013ba5;\n    }\n    else {\n        uVar1 = *arg4;\n        uVar3 = arg4[1];\n        uVar4 = arg4[2];\n        uVar5 = arg4[3];\n    }\n    cStack112 = '\\x01';\n    auStack128 = CONCAT412(uVar5, CONCAT48(uVar4, CONCAT44(uVar3, uVar1)));\ncode_r0x000140013ba5:\n    unique0x1000021f = arg2;\n    unique0x10000227 = arg1;\n    unique0x1000022f = arg3;\n    if ((arg2 == 0) || (arg3 == 0)) {\n        cStack104 = '\\x01';\n        uStack108 = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        unique0x00003100 = &var_fh + 1;\n        _auStack64 = aiStack152;\n        unique0x00003100 = &var_17h + 1;\n        unique0x00003100 = &var_1fh + 1;\n        _auStack40 = &var_27h + 1;\n        iStack88 = arg2;\n        _auStack80 = arg2;\n        uVar1 = fcn.14000f140(&var_2fh + 1, auStack80, &var_41h + 1, &iStack88);\n    }\n    uVar3 = uStack108;\n    if (cStack112 == '\\x02') {\n        *(aiStack152[0] + 0x3a8) = *(aiStack152[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack104 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack152);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack96 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack152);\n        *(iVar2 + 0x24) = uStack100;\n    }\n    return uVar1;\n}\n",
        "token_count": 942
    },
    "1400143a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400143a4(char *arg1, ulong arg2)\n\n{\n    int64_t arg3;\n    int64_t iVar1;\n    \n    fcn.140016d50(2);\n    if ((arg1 != NULL) && (*arg1 != '\\0')) {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (arg1[iVar1] != '\\0');\n        fcn.14001c590(2, arg1, iVar1, arg2);\n        fcn.14001c590(2, 0x140031578, 2, arg2);\n    }\n    arg3 = -1;\n    iVar1 = fcn.14000e50c(arg2);\n    iVar1 = fcn.140014474(*(iVar1 + 0x20));\n    do {\n        arg3 = arg3 + 1;\n    } while (*(iVar1 + arg3) != '\\0');\n    fcn.14001c590(2, iVar1, arg3, arg2);\n    fcn.14001c590(2, 0x14003157c, 1, arg2);\n    fcn.140016e38(2);\n    return;\n}\n",
        "token_count": 270
    },
    "1400144e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400144e0(ulong param_1)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    fcn.1400143a4(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.14000e50c(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.14000e50c(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 427
    },
    "140014d6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140014d60(ulong arg1)\n\n{\n    uint uVar1;\n    char cVar2;\n    int64_t iVar3;\n    uint *puVar4;\n    int32_t *piVar5;\n    int64_t arg1_00;\n    int64_t iVar6;\n    uchar auStack616 [48];\n    uchar auStack568 [528];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003d018 ^ auStack616;\n    iVar3 = fcn.14001e680(arg1, 0x1400315c0);\n    arg1_00 = 0;\n    if (iVar3 == 0) goto code_r0x000140014e48;\n    puVar4 = fcn.140016088();\n    uVar1 = *puVar4;\n    puVar4 = fcn.140016088();\n    *puVar4 = 0;\n    iVar3 = fcn.1400153b8(auStack568, arg1, 0x104);\n    if (iVar3 == 0) {\n        piVar5 = fcn.140016088();\n        if (*piVar5 == 0x22) {\n            puVar4 = fcn.140016088();\n            *puVar4 = uVar1;\n            arg1_00 = fcn.1400153b8(0, arg1, 0);\n            iVar3 = arg1_00;\n            if (arg1_00 != 0) goto code_r0x000140014e01;\n        }\n        fcn.140014138(arg1_00);\n    }\n    else {\n        puVar4 = fcn.140016088();\n        *puVar4 = uVar1;\ncode_r0x000140014e01:\n        iVar6 = -1;\n        do {\n            iVar6 = iVar6 + 1;\n        } while (*(iVar3 + iVar6 * 2) != 0);\n        if ((iVar6 == 3) || (cVar2 = fcn.140014cbc(iVar3),  cVar2 != '\\0')) {\n            (*_sym.imp.KERNEL32.dll_GetDriveTypeW)(arg1);\n        }\n        fcn.140014138(arg1_00);\n    }\ncode_r0x000140014e48:\n    fcn.14000a100(uStack40 ^ auStack616);\n    return;\n}\n",
        "token_count": 524
    },
    "140014e7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140014e70(int64_t arg1, ulong arg2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    ulong arg4;\n    uchar auStackX8 [8];\n    int64_t var_50h;\n    int64_t var_48h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    ulong var_8h;\n    \n    if (arg1 == 0) {\n        uVar1 = fcn.1400146e8(0, arg2);\n    }\n    else {\n        var_30h = 0;\n        var_28h = 0;\n        var_20h = 0;\n        var_bp_18h = 0;\n        var_bp_10h = 0;\n        var_8h._0_1_ = '\\0';\n        fcn.140014a84(&var_50h, 0);\n        arg4 = 0xfde9;\n        if (*(var_48h + 0xc) == 0xfde9) {\n            if (var_38h != '\\0') {\n                *(var_50h + 0x3a8) = *(var_50h + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar2 = fcn.14001e144();\n            if (iVar2 == 0) {\n                if (var_38h != '\\0') {\n                    *(var_50h + 0x3a8) = *(var_50h + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 1;\n            }\n            else {\n                if (var_38h != '\\0') {\n                    *(var_50h + 0x3a8) = *(var_50h + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 0;\n            }\n        }\n        iVar2 = fcn.14001456c(arg1, &var_30h, auStackX8, arg4);\n        if (iVar2 == 0) {\n            uVar1 = fcn.1400146e8(var_20h, arg2);\n            if (var_8h != '\\0') {\n                fcn.140019f78(var_20h);\n            }\n        }\n        else {\n            if (var_8h != '\\0') {\n                fcn.140019f78(var_20h);\n            }\n            uVar1 = 0xffffffff;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 601
    },
    "1400152d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400152d4(ulong *arg1)\n\n{\n    uint64_t arg3;\n    int64_t arg2;\n    uint64_t arg3_00;\n    int64_t arg1_00;\n    uint *puVar1;\n    \n    arg1_00 = arg1[2];\n    if ((arg1_00 == 0) || (arg1[4] == 0)) {\n        return 0;\n    }\n    if (*(arg1 + 5) != '\\0') goto code_r0x00014001537f;\n    arg1_00 = fcn.14001414c(arg1[4] * 2);\n    arg3 = arg1[3];\n    arg2 = arg1[2];\n    arg3_00 = arg1[4];\n    if (arg3 == 0) goto code_r0x00014001537f;\n    if (arg1_00 == 0) {\ncode_r0x000140015331:\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n    }\n    else {\n        if ((arg2 != 0) && (arg3 <= arg3_00)) {\n            fcn.14000aec0(arg1_00, arg2, arg3);\n            goto code_r0x00014001537f;\n        }\n        fcn.14000b880(arg1_00, 0, arg3_00);\n        if (arg2 == 0) goto code_r0x000140015331;\n        if (arg3 <= arg3_00) goto code_r0x00014001537f;\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x22;\n    }\n    fcn.140019f10();\ncode_r0x00014001537f:\n    arg1[4] = 0;\n    arg1[2] = *arg1;\n    arg1[3] = arg1[1];\n    return arg1_00;\n}\n",
        "token_count": 444
    },
    "14001574": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140015740(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.140015544(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 458
    },
    "14001596": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140015968(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    \n    iVar6 = arg1 >> 6;\n    uVar4 = arg1 & 0x3f;\n    iVar3 = *(iVar6 * 8 + 0x14004ca30);\n    uVar2 = *(iVar3 + 0x38 + uVar4 * 0x48);\n    cVar1 = *(iVar3 + 0x39 + uVar4 * 0x48);\n    if (arg2 == 0x4000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x14004ca30) + 0x39 + uVar4 * 0x48) = 0;\n    }\n    else if (arg2 == 0x8000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 & 0x7f;\n    }\n    else if ((arg2 - 0x10000U & 0xfffeffff) == 0) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x14004ca30) + 0x39 + uVar4 * 0x48) = 2;\n    }\n    else if (arg2 == 0x40000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x14004ca30) + 0x39 + uVar4 * 0x48) = 1;\n    }\n    if ((uVar2 & 0x80) == 0) {\n        uVar5 = 0x8000;\n    }\n    else if (cVar1 == '\\0') {\n        uVar5 = 0x4000;\n    }\n    else {\n        uVar5 = 0x10000;\n        if (cVar1 == '\\x01') {\n            uVar5 = 0x40000;\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 552
    },
    "140015cf": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140015cf8(int64_t arg1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    if (arg1 == 0) {\n        uVar1 = fcn.140015c0c(0);\n        goto code_r0x000140015d7d;\n    }\n    iVar2 = fcn.140015c6c(arg1, &var_40h);\n    if (iVar2 == 0) {\n        if ((*(arg1 + 0x14) >> 0xb & 1) != 0) {\n            uVar3 = fcn.1400192e4(arg1);\n            iVar2 = fcn.14001f910(uVar3);\n            if (iVar2 != 0) goto code_r0x000140015d58;\n        }\n        uVar1 = 0;\n    }\n    else {\ncode_r0x000140015d58:\n        uVar1 = 0xffffffff;\n    }\ncode_r0x000140015d7d:\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar4 = fcn.14000e50c(&var_40h);\n        *(iVar4 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar4 = fcn.14000e50c(&var_40h);\n        *(iVar4 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 630
    },
    "14001761": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140017614(int64_t *arg1, int64_t arg2)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int64_t arg2_00;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint64_t arg3;\n    \n    if (arg1 == NULL) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    else {\n        uVar2 = fcn.1400192e4(arg1);\n        if (*(arg1 + 2) < 0) {\n            *(arg1 + 2) = 0;\n        }\n        arg2_00 = fcn.14001b8ac(uVar2 & 0xffffffff, 0, 1, arg2);\n        if (-1 < arg2_00) {\n            if ((*(arg1 + 0x14) & 0xc0) == 0) {\n                return arg2_00 - *(arg1 + 2);\n            }\n            arg3 = *arg1 - arg1[1];\n            uVar3 = uVar2 & 0x3f;\n            iVar4 = uVar2 >> 6;\n            cVar1 = *(*(iVar4 * 8 + 0x14004ca30) + 0x39 + uVar3 * 0x48);\n            if ((*(arg1 + 0x14) & 3) == 0) {\n                if ((*(arg1 + 0x14) >> 2 & 1) == 0) {\n                    *(arg2 + 0x30) = 1;\n                    *(arg2 + 0x2c) = 0x16;\n                    return 0xffffffffffffffff;\n                }\n            }\n            else {\n                if ((cVar1 == '\\x01') && ((*(*(iVar4 * 8 + 0x14004ca30) + 0x3d + uVar3 * 0x48) & 2) != 0)) {\n                    uVar3 = fcn.1400178c0(arg1, arg2_00, arg2);\n                    return uVar3;\n                }\n                if (*(*(iVar4 * 8 + 0x14004ca30) + 0x38 + uVar3 * 0x48) < '\\0') {\n                    iVar4 = fcn.140017a44(arg1[1], *arg1);\n                    arg3 = arg3 + iVar4;\n                }\n            }\n            if (arg2_00 == 0) {\n                return arg3;\n            }\n            if ((*(arg1 + 0x14) & 1) == 0) {\n                if (cVar1 == '\\x01') {\n                    arg3 = arg3 >> 1;\n                }\n                return arg3 + arg2_00;\n            }\n            uVar3 = fcn.140017764(arg1, arg2_00, arg3, arg2);\n            return uVar3;\n        }\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 701
    },
    "14001776": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.140017764(int64_t *arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    bool bVar8;\n    \n    uVar2 = fcn.1400192e4(arg1);\n    uVar5 = uVar2 & 0x3f;\n    iVar3 = uVar2 >> 6;\n    iVar4 = *(iVar3 * 8 + 0x14004ca30);\n    cVar1 = *(iVar4 + 0x39 + uVar5 * 0x48);\n    iVar7 = (cVar1 == '\\x01') + 1;\n    if (*(arg1 + 2) != 0) {\n        iVar6 = (*(arg1 + 2) - arg1[1]) + *arg1;\n        if (*(iVar4 + 0x38 + uVar5 * 0x48) < '\\0') {\n            iVar4 = fcn.14001b8ac(uVar2 & 0xffffffff, 0, 2, arg4);\n            if (iVar4 == arg2) {\n                iVar4 = fcn.140017a44(arg1[1], arg1[1] + iVar6);\n                bVar8 = (*(arg1 + 0x14) >> 5 & 1) == 0;\n                iVar6 = iVar4 + iVar6;\n            }\n            else {\n                iVar4 = fcn.14001b8ac(uVar2, arg2, 0, arg4);\n                if (iVar4 == -1) {\n                    return -1;\n                }\n                iVar4 = 0x200;\n                if (((0x200 < iVar6) || ((*(arg1 + 0x14) >> 6 & 1) == 0)) || ((*(arg1 + 0x14) >> 8 & 1) != 0)) {\n                    iVar4 = *(arg1 + 4);\n                }\n                bVar8 = (*(*(iVar3 * 8 + 0x14004ca30) + 0x38 + uVar5 * 0x48) & 4) == 0;\n                iVar6 = iVar4;\n            }\n            if (!bVar8) {\n                iVar6 = iVar6 + (cVar1 - 1U < 2) + 1;\n            }\n        }\n        arg2 = (arg3 / iVar7 - iVar6 / iVar7) + arg2;\n    }\n    return arg2;\n}\n",
        "token_count": 593
    },
    "140017a4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.140017a44(int16_t *arg1, int16_t *arg2)\n\n{\n    int64_t iVar1;\n    char in_R8B;\n    int64_t iVar2;\n    \n    if (in_R8B - 1U < 2) {\n        iVar1 = 0;\n        iVar2 = iVar1;\n        if (arg1 != arg2) {\n            do {\n                iVar1 = iVar2 + 1;\n                if (*arg1 != 10) {\n                    iVar1 = iVar2;\n                }\n                arg1 = arg1 + 1;\n                iVar2 = iVar1;\n            } while (arg1 != arg2);\n        }\n        return iVar1 * 2;\n    }\n    iVar1 = 0;\n    iVar2 = iVar1;\n    if (arg1 != arg2) {\n        do {\n            iVar1 = iVar2 + 1;\n            if (*arg1 != '\\n') {\n                iVar1 = iVar2;\n            }\n            arg1 = arg1 + 1;\n            iVar2 = iVar1;\n        } while (arg1 != arg2);\n    }\n    return iVar1;\n}\n",
        "token_count": 250
    },
    "140017a9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140017a9c(ulong param_1)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.1400175a8(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 444
    },
    "14001823": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140018238(char *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    char cVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    char *pcVar8;\n    \n    cVar5 = *arg1;\n    iVar6 = 0;\n    pcVar8 = arg1;\n    while (cVar5 != '\\0') {\n        iVar7 = iVar6 + 1;\n        if (cVar5 == '=') {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (pcVar8[iVar6] != '\\0');\n        pcVar8 = pcVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        cVar5 = *pcVar8;\n    }\n    arg1_00 = fcn.14001deb8(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x00014001829b:\n        fcn.140019f78(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != '\\0'; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != '\\0');\n            iVar7 = iVar7 + 2;\n            if (*arg1 != '=') {\n                iVar6 = fcn.14001deb8(iVar7, 1);\n                if (iVar6 == 0) {\n                    fcn.140018464(arg1_00);\n                    fcn.140019f78(0);\n                    goto code_r0x00014001829b;\n                }\n                iVar2 = fcn.14001930c(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.140019f30(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.140019f78(0);\n            }\n        }\n        fcn.140019f78(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 585
    },
    "14001885": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140018854(int32_t **arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x14004c9e0 != '\\0') {\n        return;\n    }\n    *0x14004c9d0 = 1;\n    if (**arg1 == 0) {\n        if (*0x14004c9d8 != *0x14003d018) {\n            (**0x14002a368)(0, 0, 0);\n        }\n        arg1_00 = 0x14004c9f0;\n    }\n    else {\n        if (**arg1 != 1) goto code_r0x0001400188ce;\n        arg1_00 = 0x14004ca08;\n    }\n    fcn.140018fe0(arg1_00);\ncode_r0x0001400188ce:\n    if (**arg1 == 0) {\n        fcn.140018790(0x14002a3e8, 0x14002a410);\n    }\n    fcn.140018790(0x14002a418, 0x14002a420);\n    if (*arg1[1] == 0) {\n        *0x14004c9e0 = '\\x01';\n        *arg1[2] = 1;\n    }\n    return;\n}\n",
        "token_count": 294
    },
    "140018a1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t fcn.140018a1c(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.140021ccc();\n    if (iVar1 == 1) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.140021c98();\n        uVar2 = uVar2 & 0xffffff00 | uVar2 == '\\0';\n    }\n    return uVar2;\n}\n",
        "token_count": 108
    },
    "140018ac": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140018945)\n// WARNING: Removing unreachable block (ram,0x000140018952)\n// WARNING: Removing unreachable block (ram,0x00014001895c)\n// WARNING: Removing unreachable block (ram,0x00014001896b)\n// WARNING: Removing unreachable block (ram,0x000140018976)\n// WARNING: Removing unreachable block (ram,0x00014001897f)\n// WARNING: Removing unreachable block (ram,0x000140018988)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140018ac8(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    ulong var_20h;\n    uint *var_bp_18h;\n    int32_t *var_bp_10h;\n    ulong *var_8h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = 0xfffffffffffffffe;\n    var_28h._0_1_ = 0;\n    var_bp_18h = auStackX16;\n    var_bp_10h = aiStackX24;\n    var_8h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.14001881c(var_30h, &var_2ch + 4, &var_bp_18h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.1400189e8(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 424
    },
    "1400191e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400191ec(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x140031910;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x14002a368)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x140031a10);\n    if (piVar3 == 0x140031a10) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x140031910) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x14002a368)(0);\n                }\n                bVar4 = piVar3 != 0x140031918;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 268
    },
    "140019da": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140019da8(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x14003d2c8;\n        var_bp_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    fcn.140019e44(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.14000e50c(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.14000e50c(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 463
    },
    "14001a0f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001a0f0(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14001a188(arg1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 442
    },
    "14001a18": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14001a188(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = arg1;\n    iVar3 = fcn.14001705c(uVar6 & 0xffffffff);\n    if (iVar3 != -1) {\n        if (((arg1 == 1) && ((*(*0x14004ca30 + 200) & 1) != 0)) || ((arg1 == 2 && ((*(*0x14004ca30 + 0x80) & 1) != 0))))\n        {\n            iVar3 = fcn.14001705c(2);\n            iVar4 = fcn.14001705c(1);\n            if (iVar4 == iVar3) goto code_r0x00014001a1aa;\n        }\n        fcn.14001705c(uVar6 & 0xffffffff);\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x00014001a208;\n        }\n    }\ncode_r0x00014001a1aa:\n    uVar2 = 0;\ncode_r0x00014001a208:\n    fcn.140016fa0(uVar6 & 0xffffffff);\n    *(*((uVar6 >> 6) * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) = 0;\n    if (uVar2 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        fcn.140016044(uVar2, arg2);\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 435
    },
    "14001aca": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14001aca4(ulong arg1, uint8_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint8_t *puVar6;\n    uint *puVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint8_t *puVar12;\n    uint8_t *puVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    char acStackX8 [8];\n    int32_t aiStackX16 [2];\n    \n    uVar15 = arg1;\n    uVar5 = arg1 & 0x3f;\n    iVar14 = uVar15 >> 6;\n    iVar8 = *(iVar14 * 8 + 0x14004ca30);\n    uVar3 = *(iVar8 + 0x28 + uVar5 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 & 0xfb;\n    }\n    else {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 | 4;\n    }\n    puVar9 = arg2 + arg3;\n    puVar13 = arg2;\n    puVar12 = arg2;\n    if (arg2 < puVar9) {\n        do {\n            uVar1 = *puVar13;\n            if (uVar1 == 0x1a) {\n                iVar8 = *(iVar14 * 8 + 0x14004ca30);\n                uVar1 = *(iVar8 + 0x38 + uVar5 * 0x48);\n                if ((uVar1 & 0x40) != 0) {\n                    *puVar12 = 0x1a;\n                    goto code_r0x00014001ae0c;\n                }\n                *(iVar8 + 0x38 + uVar5 * 0x48) = uVar1 | 2;\n                break;\n            }\n            puVar6 = puVar13 + 1;\n            if (uVar1 == 0xd) {\n                if (puVar9 <= puVar6) {\n                    iVar11 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar3, acStackX8, 1, aiStackX16, 0);\n                    if ((iVar11 == 0) || (aiStackX16[0] == 0)) {\n                        *puVar12 = 0xd;\n                    }\n                    else if ((*(*(iVar14 * 8 + 0x14004ca30) + 0x38 + uVar5 * 0x48) & 0x48) == 0) {\n                        if ((acStackX8[0] == '\\n') && (puVar12 == arg2)) goto code_r0x00014001ada2;\n                        fcn.14001b8b4(uVar15 & 0xffffffff, 0xffffffffffffffff, 1);\n                        if (acStackX8[0] == '\\n') break;\n                        *puVar12 = 0xd;\n                    }\n                    else if (acStackX8[0] == '\\n') {\ncode_r0x00014001ada2:\n                        *puVar12 = 10;\n                    }\n                    else {\n                        *puVar12 = 0xd;\n                        *(*(iVar14 * 8 + 0x14004ca30) + 0x3a + uVar5 * 0x48) = acStackX8[0];\n                    }\ncode_r0x00014001ae0c:\n                    puVar12 = puVar12 + 1;\n                    break;\n                }\n                if (*puVar6 == 10) {\n                    *puVar12 = 10;\n                    iVar8 = 2;\n                }\n                else {\n                    *puVar12 = 0xd;\n                    iVar8 = 1;\n                }\n                puVar6 = puVar13 + iVar8;\n            }\n            else {\n                *puVar12 = uVar1;\n            }\n            puVar12 = puVar12 + 1;\n            puVar13 = puVar6;\n        } while (puVar6 < puVar9);\n    }\n    iVar11 = puVar12 - arg2;\n    if (iVar11 == 0) {\n        return 0;\n    }\n    iVar8 = *(iVar14 * 8 + 0x14004ca30);\n    if (*(iVar8 + 0x39 + uVar5 * 0x48) != '\\0') {\n        puVar9 = arg2 + iVar11;\n        if (puVar9[-1] < '\\0') {\n            uVar10 = 1;\n            for (puVar9 = puVar9 + -1;\n                ((uVar4 = uVar10,  *(*puVar9 + 0x14003d2e0) == '\\0' && (uVar4 < 5)) && (arg2 <= puVar9));\n                puVar9 = puVar9 + -1) {\n                uVar10 = uVar4 + 1;\n            }\n            cVar2 = *(*puVar9 + 0x14003d2e0);\n            if (cVar2 == '\\0') {\n                puVar7 = fcn.140016088();\n                *puVar7 = 0x2a;\n                return -1;\n            }\n            if (cVar2 + 1U == uVar4) {\n                puVar9 = puVar9 + uVar10;\n            }\n            else if ((*(iVar8 + 0x38 + uVar5 * 0x48) & 0x48) == 0) {\n                fcn.14001b8b4(uVar15 & 0xffffffff, -uVar4, 1);\n            }\n            else {\n                puVar13 = puVar9 + 1;\n                *(iVar8 + 0x3a + uVar5 * 0x48) = *puVar9;\n                if (1 < uVar4) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar9 + 2;\n                    *(*(iVar14 * 8 + 0x14004ca30) + 0x3b + uVar5 * 0x48) = uVar1;\n                }\n                if (uVar4 == 3) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    *(*(iVar14 * 8 + 0x14004ca30) + 0x3c + uVar5 * 0x48) = uVar1;\n                }\n                puVar9 = puVar13 + -uVar10;\n            }\n        }\n        iVar11 = fcn.14001e870(0xfde9, 0);\n        if (iVar11 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140015ffc(uVar4);\n            return -1;\n        }\n        iVar8 = *(iVar14 * 8 + 0x14004ca30);\n        *(iVar8 + 0x3d + uVar5 * 0x48) = -(iVar11 != puVar9 - arg2) & 2U | *(iVar8 + 0x3d + uVar5 * 0x48) & 0xfd;\n        return iVar11 * 2;\n    }\n    return iVar11;\n}\n",
        "token_count": 1714
    },
    "14001b4d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001b4dc(uint8_t **arg1)\n\n{\n    uint8_t uVar1;\n    uint8_t *arg2;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    int64_t iVar6;\n    \n    if (arg1 == NULL) {\n        puVar5 = fcn.140016088();\n        *puVar5 = 0x16;\n        fcn.140019f10();\n    }\n    else if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 0xc & 1) == 0)) {\n        if ((*(arg1 + 0x14) >> 1 & 1) == 0) {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 1;\n            if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n                fcn.140022b1c(arg1);\n            }\n            arg2 = arg1[1];\n            uVar4 = *(arg1 + 4);\n            *arg1 = arg2;\n            uVar2 = fcn.1400192e4(arg1);\n            iVar3 = fcn.14001af6c(uVar2, arg2, uVar4);\n            *(arg1 + 2) = iVar3;\n            if (1 < iVar3 + 1U) {\n                if ((*(arg1 + 0x14) & 6) == 0) {\n                    iVar3 = fcn.1400192e4(arg1);\n                    if ((iVar3 == -1) || (iVar3 = fcn.1400192e4(arg1),  iVar3 == -2)) {\n                        iVar6 = 0x14003d3e0;\n                    }\n                    else {\n                        iVar3 = fcn.1400192e4(arg1);\n                        uVar4 = fcn.1400192e4(arg1);\n                        iVar6 = (uVar4 & 0x3f) * 0x48 + *((iVar3 >> 6) * 8 + 0x14004ca30);\n                    }\n                    if ((*(iVar6 + 0x38) & 0x82) == 0x82) {\n                        LOCK();\n                        *(arg1 + 0x14) = *(arg1 + 0x14) | 0x20;\n                    }\n                }\n                if (((*(arg1 + 4) == 0x200) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) && ((*(arg1 + 0x14) >> 8 & 1) == 0)) {\n                    *(arg1 + 4) = 0x1000;\n                }\n                *(arg1 + 2) = *(arg1 + 2) + -1;\n                uVar1 = **arg1;\n                *arg1 = *arg1 + 1;\n                return uVar1;\n            }\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | (-(iVar3 != 0) & 8) + 8;\n            *(arg1 + 2) = 0;\n        }\n        else {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 792
    },
    "14001b81": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14001b810(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14001b644(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 454
    },
    "14001b8b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14001b8b4(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14001b764(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 462
    },
    "14001c3d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001c3d8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.14001c470(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 456
    },
    "14001c59": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: lpMode\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14001c590(ulong arg1, int16_t *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int16_t iVar4;\n    int16_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    uint64_t arg4_00;\n    uint64_t uVar12;\n    int16_t *piVar13;\n    ulong uStack128;\n    int32_t iStack120;\n    uint64_t uStack112;\n    int64_t iStack88;\n    ulong var_48h;\n    ulong lpNumberOfBytesWritten;\n    ulong var_30h;\n    ulong lpMode;\n    ulong var_18h;\n    \n    iVar10 = 0;\n    arg4_00 = arg3;\n    uVar12 = arg1;\n    if (arg3 == 0) {\n        return 0;\n    }\n    if (arg2 == NULL) {\ncode_r0x00014001c5c0:\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        return -1;\n    }\n    uVar8 = arg1 & 0x3f;\n    iVar11 = uVar12 >> 6;\n    iVar2 = *(iVar11 * 8 + 0x14004ca30);\n    cVar1 = *(iVar2 + 0x39 + uVar8 * 0x48);\n    iStack88 = iVar11;\n    if ((cVar1 - 1U < 2) && ((~arg3 & 1) == 0)) goto code_r0x00014001c5c0;\n    if ((*(iVar2 + 0x38 + uVar8 * 0x48) & 0x20) != 0) {\n        fcn.14001b950(uVar12 & 0xffffffff, 0, 2, arg4);\n    }\n    uStack112 = 0;\n    iVar6 = fcn.140022abc(uVar12 & 0xffffffff);\n    if ((iVar6 == 0) || (-1 < *(*(iVar11 * 8 + 0x14004ca30) + 0x38 + uVar8 * 0x48))) {\ncode_r0x00014001c773:\n        iVar2 = *(iVar11 * 8 + 0x14004ca30);\n        if (-1 < *(iVar2 + 0x38 + uVar8 * 0x48)) {\n            uStack128 = 0;\n            iStack120 = 0;\n            iVar6 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(iVar2 + 0x28 + uVar8 * 0x48), arg2, arg4_00, &uStack128 + 4, 0)\n            ;\n            iVar10 = iStack120;\n            uVar3 = uStack128;\n            if (iVar6 == 0) {\n                uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uStack128 = uStack128 & 0xffffffff00000000 | uVar7;\n                iVar10 = iStack120;\n                uVar3 = uStack128;\n            }\n            goto code_r0x00014001c814;\n        }\n        if (cVar1 == '\\0') {\n            puVar9 = fcn.14001c048(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n        else if (cVar1 == '\\x01') {\n            puVar9 = fcn.14001c268(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n        else {\n            iVar10 = 0;\n            uVar3 = uStack112;\n            if (cVar1 != '\\x02') goto code_r0x00014001c814;\n            puVar9 = fcn.14001c14c(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140013830(arg4);\n        }\n        if (((*(*(arg4 + 0x18) + 0x138) == 0) && (*(*(iVar11 * 8 + 0x14004ca30) + 0x39 + uVar8 * 0x48) == '\\0')) ||\n           (iVar6 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(),  iVar6 == 0)) goto code_r0x00014001c773;\n        if (cVar1 != '\\0') {\n            if ((cVar1 == '\\x01') || (uVar3 = uStack112,  cVar1 == '\\x02')) {\n                uStack128 = 0;\n                iVar11 = iStack88;\n                uVar3 = uStack128;\n                if (arg2 < arg2 + arg4_00) {\n                    uStack128._4_4_ = 0;\n                    piVar13 = arg2;\n                    do {\n                        iVar5 = *piVar13;\n                        iVar4 = fcn.140022b88();\n                        if (iVar4 != iVar5) {\ncode_r0x00014001c737:\n                            uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            uStack128 = uStack128 & 0xffffffff00000000 | uVar7;\n                            iVar11 = iStack88;\n                            uVar3 = uStack128;\n                            break;\n                        }\n                        uStack128 = uStack128 & 0xffffffff | uStack128._4_4_ + 2 << 0x20;\n                        uVar7 = uStack128._4_4_ + 2;\n                        if (iVar5 == 10) {\n                            iVar5 = fcn.140022b88(0xd);\n                            if (iVar5 != 0xd) goto code_r0x00014001c737;\n                            uStack128 = uStack128 & 0xffffffff | uStack128._4_4_ + 3 << 0x20;\n                            iVar10 = iVar10 + 1;\n                            uVar7 = uStack128._4_4_ + 3;\n                        }\n                        uStack128._4_4_ = uVar7;\n                        piVar13 = piVar13 + 1;\n                        iVar11 = iStack88;\n                        uVar3 = uStack128;\n                    } while (piVar13 < arg2 + arg4_00);\n                }\n            }\n            goto code_r0x00014001c814;\n        }\n        puVar9 = fcn.14001bbd0(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n    }\n    iVar10 = *(puVar9 + 1);\n    uVar3 = *puVar9;\ncode_r0x00014001c814:\n    uStack112 = uVar3;\n    iVar6 = uStack112 >> 0x20;\n    if (iVar6 != 0) {\n        return iVar6 - iVar10;\n    }\n    if (uStack112 != 0) {\n        if (uStack112 == 5) {\n            *(arg4 + 0x30) = 1;\n            *(arg4 + 0x2c) = 9;\n            *(arg4 + 0x38) = 1;\n            *(arg4 + 0x34) = 5;\n            return -1;\n        }\n        fcn.140016044(uStack112 & 0xffffffff, arg4);\n        return -1;\n    }\n    if (((*(*(iVar11 * 8 + 0x14004ca30) + 0x38 + uVar8 * 0x48) & 0x40) != 0) && (*arg2 == '\\x1a')) {\n        return 0;\n    }\n    *(arg4 + 0x34) = 0;\n    *(arg4 + 0x30) = 1;\n    *(arg4 + 0x2c) = 0x1c;\n    *(arg4 + 0x38) = 1;\n    return -1;\n}\n",
        "token_count": 1972
    },
    "14001c89": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001c898(ulong noname_0, int64_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    bool bVar7;\n    uchar auStackX8 [8];\n    \n    auStackX8[0] = noname_0;\n    uVar1 = fcn.1400192e4(arg2);\n    uVar6 = uVar1;\n    if ((*(arg2 + 0x14) & 0xc0) == 0) {\n        uVar2 = fcn.14001c470(uVar6 & 0xffffffff, auStackX8, 1, arg3);\n        bVar7 = uVar2 == 1;\n    }\n    else {\n        uVar4 = 0;\n        uVar5 = *arg2 - *(arg2 + 1);\n        *arg2 = arg2[1] + 1;\n        *(arg2 + 2) = *(arg2 + 4) + -1;\n        if (uVar5 < 1) {\n            uVar2 = uVar1 + 2;\n            if (uVar1 + 2 < 2) {\n                iVar3 = 0x14003d3e0;\n            }\n            else {\n                uVar2 = *((uVar6 >> 6) * 8 + 0x14004ca30);\n                iVar3 = uVar2 + (uVar1 & 0x3f) * 0x48;\n            }\n            if (((*(iVar3 + 0x38) & 0x20) != 0) &&\n               (uVar2 = fcn.14001b810(uVar6 & 0xffffffff, 0, 2),  uVar2 == 0xffffffffffffffff)) {\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n                return 0xffffffffffffff01;\n            }\n        }\n        else {\n            uVar2 = fcn.14001c470(uVar6 & 0xffffffff, arg2[1], uVar5, arg3);\n            uVar4 = uVar2;\n        }\n        bVar7 = uVar4 == uVar5;\n        uVar2 = uVar2 & 0xffffffffffffff00;\n        *arg2[1] = auStackX8[0];\n    }\n    return uVar2 & 0xffffffffffffff00 | bVar7;\n}\n",
        "token_count": 579
    },
    "14001cb2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001cb24(int64_t *arg1)\n\n{\n    char cVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    cVar1 = fcn.14001cad8(arg1);\n    if (cVar1 != '\\0') {\n        piVar2 = fcn.140014310(1);\n        if (arg1 == piVar2) {\n            piVar2 = 0x14004ce38;\n        }\n        else {\n            piVar2 = fcn.140014310(2);\n            if (arg1 != piVar2) {\n                return 0;\n            }\n            piVar2 = 0x14004ce40;\n        }\n        *0x14004c790 = *0x14004c790 + 1;\n        if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x282;\n            if (*piVar2 == 0) {\n                iVar3 = fcn.14001cc2c(0x1000);\n                *piVar2 = iVar3;\n                fcn.140019f78(0);\n            }\n            if (*piVar2 == 0) {\n                *(arg1 + 2) = 2;\n                arg1[1] = arg1 + 0x1c;\n                *arg1 = arg1 + 0x1c;\n                *(arg1 + 4) = 2;\n            }\n            else {\n                arg1[1] = *piVar2;\n                *arg1 = *piVar2;\n                *(arg1 + 2) = 0x1000;\n                *(arg1 + 4) = 0x1000;\n            }\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 420
    },
    "14001d1f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001d1f8(uchar *arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar *puVar4;\n    uchar *arg2_00;\n    int64_t iVar5;\n    char in_R9B;\n    int32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    uint8_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t iVar6;\n    \n    iVar2 = 0;\n    if (0 < arg3) {\n        iVar2 = arg3;\n    }\n    if (iVar2 + 9 < arg2) {\n        if ((in_stack_00000038 != 0) && (puVar4 = arg1 + (*in_stack_00000030 == 0x2d),  0 < arg3)) {\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (puVar4[iVar5] != '\\0');\n            fcn.14000aec0(puVar4 + 1, puVar4, iVar6 + 2);\n        }\n        puVar4 = arg1;\n        if (*in_stack_00000030 == 0x2d) {\n            *arg1 = 0x2d;\n            puVar4 = arg1 + 1;\n        }\n        if (0 < arg3) {\n            *puVar4 = puVar4[1];\n            puVar4 = puVar4 + 1;\n            if (*(in_stack_00000040 + 0x28) == '\\0') {\n                fcn.140013830(in_stack_00000040);\n            }\n            *puVar4 = ***(*(in_stack_00000040 + 0x18) + 0xf8);\n        }\n        puVar4 = puVar4 + (in_stack_00000038 ^ 1) + arg3;\n        arg2_00 = arg1 + (arg2 - puVar4);\n        if (arg2 == 0xffffffffffffffff) {\n            arg2_00 = arg2;\n        }\n        iVar2 = fcn.14001930c(puVar4, arg2_00, \"e+000\");\n        if (iVar2 != 0) {\n            fcn.140019f30(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (in_R9B != '\\0') {\n            *puVar4 = 0x45;\n        }\n        if (**(in_stack_00000030 + 2) != '0') {\n            iVar2 = in_stack_00000030[1] + -1;\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n                puVar4[1] = 0x2d;\n            }\n            if (99 < iVar2) {\n                puVar4[2] = puVar4[2] + iVar2 / 100;\n                iVar2 = iVar2 % 100;\n            }\n            if (9 < iVar2) {\n                puVar4[3] = puVar4[3] + iVar2 / 10;\n                iVar2 = iVar2 % 10;\n            }\n            puVar4[4] = puVar4[4] + iVar2;\n        }\n        if ((in_stack_00000028 == 2) && (puVar4[2] == '0')) {\n            fcn.14000aec0(puVar4 + 2, puVar4 + 3, 3);\n        }\n        uVar3 = 0;\n    }\n    else {\n        *(in_stack_00000040 + 0x30) = 1;\n        *(in_stack_00000040 + 0x2c) = 0x22;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar3 = 0x22;\n    }\n    return uVar3;\n}\n",
        "token_count": 921
    },
    "14001d4b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001d4b4(uchar *arg1, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uchar *arg1_00;\n    bool bVar1;\n    int32_t iVar2;\n    uchar *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    if ((in_stack_00000028 != '\\0') && (arg4[1] + -1 == arg3)) {\n        *(arg1 + arg4[1] + -1 + (*arg4 == 0x2d)) = 0x30;\n    }\n    if (*arg4 == 0x2d) {\n        *arg1 = 0x2d;\n        arg1 = arg1 + 1;\n    }\n    iVar2 = arg4[1];\n    if (iVar2 < 1) {\n        if ((iVar2 == 0) && (**(arg4 + 2) == '0')) {\n            bVar1 = true;\n        }\n        else {\n            bVar1 = false;\n        }\n        if ((in_stack_00000028 == '\\0') || (!bVar1)) {\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1[iVar4] != '\\0');\n            fcn.14000aec0(arg1 + 1, arg1, iVar3 + 2);\n        }\n        arg2 = arg1 + 1;\n        *arg1 = 0x30;\n    }\n    else {\n        arg2 = arg1 + iVar2;\n    }\n    if (0 < arg3) {\n        arg1_00 = arg2 + 1;\n        iVar4 = -1;\n        do {\n            iVar3 = iVar4;\n            iVar4 = iVar3 + 1;\n        } while (arg2[iVar4] != '\\0');\n        fcn.14000aec0(arg1_00, arg2, iVar3 + 2);\n        if (*(in_stack_00000030 + 0x28) == '\\0') {\n            fcn.140013830(in_stack_00000030);\n        }\n        *arg2 = ***(*(in_stack_00000030 + 0x18) + 0xf8);\n        if (arg4[1] < 0) {\n            iVar2 = -arg4[1];\n            if ((in_stack_00000028 != '\\0') || (iVar2 < arg3)) {\n                arg3._0_4_ = iVar2;\n            }\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1_00[iVar4] != '\\0');\n            fcn.14000aec0(arg1_00 + arg3, arg1_00, iVar3 + 2);\n            fcn.14000b880(arg1_00, 0x30, arg3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 681
    },
    "14001d87": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001d878(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint64_t in_stack_00000040;\n    int64_t in_stack_00000050;\n    \n    if (arg2 == NULL) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    else {\n        if (((arg3 != 0) && (arg4 != 0)) && (in_stack_00000028 != 0)) {\n            if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n                uVar6 = 1;\n            }\n            else {\n                uVar6 = 0;\n            }\n            if (((in_stack_00000040 & 8) == 0) && (uVar1 = *arg1,  (uVar1 >> 0x34 & 0x7ff) == 0x7ff)) {\n                if ((uVar1 & 0xfffffffffffff) == 0) {\n                    iVar5 = 0;\n                }\n                else if ((uVar1 < 0) && ((uVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n                    iVar5 = 0xc;\n                }\n                else {\n                    iVar5 = (-((uVar1 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n                }\n                if (arg3 < 4U - (uVar1 >> 0x3f)) {\n                    *arg2 = 0;\n                    return 0xc;\n                }\n                uVar7 = 0xffffffffffffffff;\n                if (uVar1 < 0) {\n                    *arg2 = 0x2d;\n                    arg2 = arg2 + 1;\n                    *arg2 = 0;\n                    if (arg3 != 0xffffffffffffffff) {\n                        arg3 = arg3 - 1;\n                    }\n                }\n                uVar6 = (uVar6 ^ 1) * 2;\n                do {\n                    uVar7 = uVar7 + 1;\n                } while (*(*((uVar6 + iVar5) * 8 + 0x1400320c0) + uVar7) != '\\0');\n                iVar3 = fcn.14001930c(arg2, arg3, *((uVar6 + (arg3 <= uVar7) + iVar5) * 8 + 0x1400320c0));\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                fcn.140019f30(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar4 = (*pcVar2)();\n                return uVar4;\n            }\n            if (in_stack_00000030 != 0x41) {\n                if (in_stack_00000030 == 0x45) {\ncode_r0x00014001dac5:\n                    uVar4 = fcn.14001d0fc(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 == 0x46) {\ncode_r0x00014001da94:\n                    uVar4 = fcn.14001d3dc(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 != 0x47) {\n                    if (in_stack_00000030 == 0x61) goto code_r0x00014001daff;\n                    if (in_stack_00000030 == 0x65) goto code_r0x00014001dac5;\n                    if (in_stack_00000030 == 0x66) goto code_r0x00014001da94;\n                }\n                uVar4 = fcn.14001d60c(arg1, arg2, arg3, arg4);\n                return uVar4;\n            }\ncode_r0x00014001daff:\n            uVar4 = fcn.14001cd64(arg1, arg2, arg3, arg4);\n            return uVar4;\n        }\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    fcn.140019e44(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 1102
    },
    "14001dd1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14001dd10(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x14004ce48 = 0;\n    }\n    else {\n        if (*arg2 != 0) {\n            if (*(arg4 + 0x28) == '\\0') {\n                fcn.140013830(arg4);\n            }\n            piVar2 = *(arg4 + 0x18);\n            uVar1 = *(piVar2 + 0xc);\n            if (uVar1 != 0xfde9) {\n                if (piVar2[0x27] == 0) {\n                    if (arg1 != NULL) {\n                        *arg1 = *arg2;\n                    }\n                    return 1;\n                }\n                if (*(*piVar2 + *arg2 * 2) < 0) {\n                    if ((((1 < *(piVar2 + 1)) && (*(piVar2 + 1) <= arg3)) &&\n                        (iVar3 = fcn.14001e870(uVar1, 9),  iVar3 != 0)) ||\n                       ((*(*(arg4 + 0x18) + 8) <= arg3 && (arg2[1] != 0)))) {\n                        return *(*(arg4 + 0x18) + 8);\n                    }\n                }\n                else {\n                    iVar3 = fcn.14001e870(uVar1, 9);\n                    if (iVar3 != 0) {\n                        return 1;\n                    }\n                }\n                *(arg4 + 0x30) = 1;\n                *(arg4 + 0x2c) = 0x2a;\n                return -1;\n            }\n            iVar3 = fcn.14001f5b8(arg1);\n            if (iVar3 < 0) {\n                return -1;\n            }\n            return iVar3;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 490
    },
    "14001e6f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00014001e7a0: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00014001e7a5)\n\nint32_t fcn.14001e6f4(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x14004c9e4 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar3 = fcn.140016088();\n            *puVar3 = 0x16;\n            fcn.140019f10();\n            iVar7 = 0x7fffffff;\n        }\n        else {\n            fcn.140014a84(&stack0xffffffffffffffc8, 0);\n            iVar5 = iStack48;\n            if (*(iStack48 + 0x138) == 0) goto code_r0x00014001e6ba;\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                if (uVar1 < 0x100) {\n                    uVar6 = uVar1;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar6) & 1) != 0) {\n                        uVar6 = *(uVar6 + *(iVar5 + 0x110));\n                    }\n                    uVar1 = uVar6;\n                }\n                else {\n                    uVar1 = fcn.1400246c0(uVar1, &stack0xffffffffffffffd0);\n                    iVar5 = iStack48;\n                }\n                uVar2 = *arg2;\n                arg2 = arg2 + 1;\n                if (uVar2 < 0x100) {\n                    uVar6 = uVar2;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar6) & 1) != 0) {\n                        uVar6 = *(uVar6 + *(iVar5 + 0x110));\n                    }\n                    uVar2 = uVar6;\n                }\n                else {\n                    uVar2 = fcn.1400246c0(uVar2, &stack0xffffffffffffffd0);\n                    iVar5 = iStack48;\n                }\n                iVar7 = uVar1 - uVar2;\n            } while ((iVar7 == 0) && (uVar1 != 0));\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar7;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        iStack48 = 0x14001e70b;\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\n        iStack48 = 0x14001e716;\n        fcn.140019f10();\n        return 0x7fffffff;\n    }\ncode_r0x00014001e6ba:\n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar8 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar8 = uVar1;\n        }\n        uVar4 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar4 = uVar2;\n        }\n    } while ((uVar8 - uVar4 == 0) && (uVar8 != 0));\n    return uVar8 - uVar4;\n}\n",
        "token_count": 1574
    },
    "14001e87": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001e870(ulong arg1, uint64_t arg2)\n\n{\n    bool bVar1;\n    \n    if (arg1 < 0xdead) {\n        if (arg1 != 0xdeac) {\n            if (arg1 < 0xc434) {\n                if ((((arg1 != 0xc433) && (arg1 != 0x2a)) && (arg1 != 0xc42c)) && ((arg1 != 0xc42d && (arg1 != 0xc42e)))\n                   ) {\n                    bVar1 = arg1 == 0xc431;\ncode_r0x00014001e8bd:\n                    if (!bVar1) goto code_r0x00014001e8c1;\n                }\n            }\n            else if (arg1 != 0xc435) {\n                if (arg1 == 0xd698) goto code_r0x00014001e8fb;\n                if (arg1 != 0xdeaa) {\n                    bVar1 = arg1 == 0xdeab;\n                    goto code_r0x00014001e8bd;\n                }\n            }\n        }\n    }\n    else if ((((arg1 != 0xdead) && (arg1 != 0xdeae)) && (arg1 != 0xdeaf)) &&\n            (((arg1 != 0xdeb0 && (arg1 != 0xdeb1)) && ((arg1 != 0xdeb2 && ((arg1 != 0xdeb3 && (arg1 != 65000)))))))) {\n        if (arg1 != 0xfde9) goto code_r0x00014001e8c1;\ncode_r0x00014001e8fb:\n        arg2 = arg2 & 8;\n        goto code_r0x00014001e8c1;\n    }\n    arg2 = 0;\ncode_r0x00014001e8c1:\n    // WARNING: Could not recover jumptable at 0x00014001e8c1. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(arg1, arg2);\n    return;\n}\n",
        "token_count": 480
    },
    "14001f08": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001f08c(ulong arg1)\n\n{\n    uint *puVar1;\n    uchar auStack56 [32];\n    int16_t iStack24;\n    uint uStack22;\n    ushort uStack18;\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003d018 ^ auStack56;\n    if (arg1 < 0x1b) {\n        if (arg1 != 0) {\n            iStack24 = arg1 + 0x40;\n            uStack22 = 0x5c003a;\n            uStack18 = 0;\n            (*_sym.imp.KERNEL32.dll_GetDriveTypeW)(&iStack24);\n        }\n    }\n    else {\n        puVar1 = fcn.140016068();\n        *puVar1 = 0xf;\n        puVar1 = fcn.140016088();\n        *puVar1 = 0xd;\n        fcn.140019f10();\n    }\n    fcn.14000a100(uStack16 ^ auStack56);\n    return;\n}\n",
        "token_count": 235
    },
    "14001f13": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001f138(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint *in_stack_00000040;\n    \n    uVar2 = 0;\n    if (arg1 < 0xdead) {\n        if (arg1 == 0xdeac) goto code_r0x00014001f1d8;\n        if (0xc433 < arg1) {\n            if ((arg1 == 0xc435) || (arg1 == 0xd698)) goto code_r0x00014001f1d8;\n            iVar1 = arg1 - 0xdeaa;\n            goto code_r0x00014001f1c9;\n        }\n        if ((((arg1 == 0xc433) || (arg1 == 0x2a)) || (arg1 == 0xc42c)) || ((arg1 == 0xc42d || (arg1 == 0xc42e))))\n        goto code_r0x00014001f1d8;\n        bVar3 = arg1 == 0xc431;\n    }\n    else {\n        if (((((arg1 == 0xdead) || (arg1 == 0xdeae)) || (arg1 == 0xdeaf)) || ((arg1 == 0xdeb0 || (arg1 == 0xdeb1)))) ||\n           ((arg1 == 0xdeb2 || (arg1 == 0xdeb3)))) goto code_r0x00014001f1d8;\n        iVar1 = arg1 - 65000;\ncode_r0x00014001f1c9:\n        if (iVar1 == 0) goto code_r0x00014001f1d8;\n        bVar3 = iVar1 == 1;\n    }\n    if (!bVar3) {\n        uVar2 = arg2 & 0xffffff7f;\n    }\ncode_r0x00014001f1d8:\n    if ((arg1 - 65000 < 2) && (in_stack_00000040 != NULL)) {\n        *in_stack_00000040 = 0;\n    }\n    // WARNING: Could not recover jumptable at 0x00014001f20f. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(arg1, uVar2, arg3, arg4);\n    return;\n}\n",
        "token_count": 552
    },
    "14001f5f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.14001f5fc(uint16_t *arg1, char **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint16_t *puVar2;\n    char *pcVar3;\n    char *arg2_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t auStackX8 [2];\n    int64_t in_stack_00000028;\n    \n    arg2_00 = *arg2;\n    iVar4 = 0;\n    if (arg1 == NULL) {\n        while( true ) {\n            if (*arg2_00 == '\\0') {\n                iVar5 = 1;\n            }\n            else if (arg2_00[1] == '\\0') {\n                iVar5 = 2;\n            }\n            else {\n                iVar5 = (arg2_00[2] != '\\0') + 3;\n            }\n            iVar5 = fcn.140026210(0, arg2_00, iVar5, arg4);\n            if (iVar5 == -1) {\n                *(in_stack_00000028 + 0x30) = 1;\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                return -1;\n            }\n            if (iVar5 == 0) break;\n            if (iVar5 == 4) {\n                iVar4 = iVar4 + 1;\n            }\n            arg2_00 = arg2_00 + iVar5;\n            iVar4 = iVar4 + 1;\n        }\n    }\n    else {\n        puVar2 = arg1;\n        pcVar3 = arg2_00;\n        if (arg3 != 0) {\n            do {\n                if (*arg2_00 == '\\0') {\n                    iVar4 = 1;\n                }\n                else if (arg2_00[1] == '\\0') {\n                    iVar4 = 2;\n                }\n                else {\n                    iVar4 = (arg2_00[2] != '\\0') + 3;\n                }\n                iVar4 = fcn.140026210(auStackX8, arg2_00, iVar4, arg4);\n                if (iVar4 == -1) {\n                    *arg2 = arg2_00;\n                    *(in_stack_00000028 + 0x30) = 1;\n                    *(in_stack_00000028 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                pcVar3 = NULL;\n                if (iVar4 == 0) {\n                    *puVar2 = 0;\n                    break;\n                }\n                uVar1 = auStackX8[0];\n                if (0xffff < auStackX8[0]) {\n                    pcVar3 = arg2_00;\n                    if (arg3 < 2) break;\n                    auStackX8[0] = auStackX8[0] - 0x10000;\n                    arg3 = arg3 - 1;\n                    *puVar2 = auStackX8[0] >> 10 | 0xd800;\n                    puVar2 = puVar2 + 1;\n                    uVar1 = auStackX8[0] & 0x3ff | 0xdc00;\n                }\n                *puVar2 = uVar1;\n                pcVar3 = arg2_00 + iVar4;\n                puVar2 = puVar2 + 1;\n                arg3 = arg3 - 1;\n                arg2_00 = pcVar3;\n            } while (arg3 != 0);\n        }\n        *arg2 = pcVar3;\n        iVar4 = puVar2 - arg1 >> 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 817
    },
    "140020fb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140020fb4(ulong noname_0, uint32_t *arg2, int64_t **arg3, uint32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    \n    fcn.14001f808(*arg2);\n    puVar6 = *(**arg3 + 0x88) + 0x18;\n    if (*0x14004d248 == NULL) {\ncode_r0x000140021067:\n        puVar6 = fcn.140016088();\n        *puVar6 = 0x16;\n        fcn.140019f10();\n    }\n    else {\n        if (puVar6 == NULL) {\n            fcn.14000b880(*0x14004d248, 0, 0x101);\n            goto code_r0x000140021067;\n        }\n        iVar9 = 2;\n        puVar8 = *0x14004d248;\n        do {\n            uVar3 = puVar6[1];\n            uVar4 = puVar6[2];\n            uVar5 = puVar6[3];\n            *puVar8 = *puVar6;\n            puVar8[1] = uVar3;\n            puVar8[2] = uVar4;\n            puVar8[3] = uVar5;\n            uVar3 = puVar6[5];\n            uVar4 = puVar6[6];\n            uVar5 = puVar6[7];\n            puVar8[4] = puVar6[4];\n            puVar8[5] = uVar3;\n            puVar8[6] = uVar4;\n            puVar8[7] = uVar5;\n            uVar3 = puVar6[9];\n            uVar4 = puVar6[10];\n            uVar5 = puVar6[0xb];\n            puVar8[8] = puVar6[8];\n            puVar8[9] = uVar3;\n            puVar8[10] = uVar4;\n            puVar8[0xb] = uVar5;\n            uVar3 = puVar6[0xd];\n            uVar4 = puVar6[0xe];\n            uVar5 = puVar6[0xf];\n            puVar8[0xc] = puVar6[0xc];\n            puVar8[0xd] = uVar3;\n            puVar8[0xe] = uVar4;\n            puVar8[0xf] = uVar5;\n            uVar3 = puVar6[0x11];\n            uVar4 = puVar6[0x12];\n            uVar5 = puVar6[0x13];\n            puVar8[0x10] = puVar6[0x10];\n            puVar8[0x11] = uVar3;\n            puVar8[0x12] = uVar4;\n            puVar8[0x13] = uVar5;\n            uVar3 = puVar6[0x15];\n            uVar4 = puVar6[0x16];\n            uVar5 = puVar6[0x17];\n            puVar8[0x14] = puVar6[0x14];\n            puVar8[0x15] = uVar3;\n            puVar8[0x16] = uVar4;\n            puVar8[0x17] = uVar5;\n            uVar3 = puVar6[0x19];\n            uVar4 = puVar6[0x1a];\n            uVar5 = puVar6[0x1b];\n            puVar8[0x18] = puVar6[0x18];\n            puVar8[0x19] = uVar3;\n            puVar8[0x1a] = uVar4;\n            puVar8[0x1b] = uVar5;\n            puVar7 = puVar8 + 0x20;\n            uVar3 = puVar6[0x1d];\n            uVar4 = puVar6[0x1e];\n            uVar5 = puVar6[0x1f];\n            puVar8[0x1c] = puVar6[0x1c];\n            puVar8[0x1d] = uVar3;\n            puVar8[0x1e] = uVar4;\n            puVar8[0x1f] = uVar5;\n            puVar6 = puVar6 + 0x20;\n            iVar9 = iVar9 + -1;\n            puVar8 = puVar7;\n        } while (iVar9 != 0);\n        *puVar7 = *puVar6;\n    }\n    iVar9 = 2;\n    puVar6 = *(**arg3 + 0x88) + 0x119;\n    if (*0x14004d250 != NULL) {\n        puVar8 = *0x14004d250;\n        if (puVar6 != NULL) {\n            do {\n                uVar3 = puVar6[1];\n                uVar4 = puVar6[2];\n                uVar5 = puVar6[3];\n                *puVar8 = *puVar6;\n                puVar8[1] = uVar3;\n                puVar8[2] = uVar4;\n                puVar8[3] = uVar5;\n                uVar3 = puVar6[5];\n                uVar4 = puVar6[6];\n                uVar5 = puVar6[7];\n                puVar8[4] = puVar6[4];\n                puVar8[5] = uVar3;\n                puVar8[6] = uVar4;\n                puVar8[7] = uVar5;\n                uVar3 = puVar6[9];\n                uVar4 = puVar6[10];\n                uVar5 = puVar6[0xb];\n                puVar8[8] = puVar6[8];\n                puVar8[9] = uVar3;\n                puVar8[10] = uVar4;\n                puVar8[0xb] = uVar5;\n                uVar3 = puVar6[0xd];\n                uVar4 = puVar6[0xe];\n                uVar5 = puVar6[0xf];\n                puVar8[0xc] = puVar6[0xc];\n                puVar8[0xd] = uVar3;\n                puVar8[0xe] = uVar4;\n                puVar8[0xf] = uVar5;\n                uVar3 = puVar6[0x11];\n                uVar4 = puVar6[0x12];\n                uVar5 = puVar6[0x13];\n                puVar8[0x10] = puVar6[0x10];\n                puVar8[0x11] = uVar3;\n                puVar8[0x12] = uVar4;\n                puVar8[0x13] = uVar5;\n                uVar3 = puVar6[0x15];\n                uVar4 = puVar6[0x16];\n                uVar5 = puVar6[0x17];\n                puVar8[0x14] = puVar6[0x14];\n                puVar8[0x15] = uVar3;\n                puVar8[0x16] = uVar4;\n                puVar8[0x17] = uVar5;\n                uVar3 = puVar6[0x19];\n                uVar4 = puVar6[0x1a];\n                uVar5 = puVar6[0x1b];\n                puVar8[0x18] = puVar6[0x18];\n                puVar8[0x19] = uVar3;\n                puVar8[0x1a] = uVar4;\n                puVar8[0x1b] = uVar5;\n                uVar3 = puVar6[0x1d];\n                uVar4 = puVar6[0x1e];\n                uVar5 = puVar6[0x1f];\n                puVar8[0x1c] = puVar6[0x1c];\n                puVar8[0x1d] = uVar3;\n                puVar8[0x1e] = uVar4;\n                puVar8[0x1f] = uVar5;\n                puVar6 = puVar6 + 0x20;\n                iVar9 = iVar9 + -1;\n                puVar8 = puVar8 + 0x20;\n            } while (iVar9 != 0);\n            goto code_r0x000140021118;\n        }\n        fcn.14000b880(*0x14004d250, 0, 0x100);\n    }\n    puVar6 = fcn.140016088();\n    *puVar6 = 0x16;\n    fcn.140019f10();\ncode_r0x000140021118:\n    piVar2 = **arg3[1];\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if ((iVar1 == 1) && (**arg3[1] != 0x14003d440)) {\n        fcn.140019f78(**arg3[1]);\n    }\n    **arg3[1] = *(**arg3 + 0x88);\n    LOCK();\n    **(**arg3 + 0x88) = **(**arg3 + 0x88) + 1;\n    fcn.14001f868(*arg4);\n    return;\n}\n",
        "token_count": 2164
    },
    "1400216f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.1400216f4(int64_t arg1, int32_t **arg2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    \n    if (((*(arg1 + 0x3a8) & *0x14003d428) == 0) || (*(arg1 + 0x90) == 0)) {\n        fcn.14001f808(5);\n        piVar3 = *(arg1 + 0x88);\n        if (piVar3 != *arg2) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x14003d440)) {\n                    fcn.140019f78(piVar3);\n                }\n            }\n            piVar3 = *arg2;\n            *(arg1 + 0x88) = piVar3;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.14001f868(5);\n    }\n    else {\n        piVar3 = *(arg1 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.14001936c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 335
    },
    "140021cc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.140021ccc(void)\n\n{\n    char cVar1;\n    int32_t aiStackX8 [8];\n    \n    aiStackX8[0] = 0;\n    cVar1 = fcn.140021cb4();\n    if (cVar1 == '\\0') {\n        fcn.14001e0ec(aiStackX8);\n    }\n    return aiStackX8[0] != 1;\n}\n",
        "token_count": 95
    },
    "14002284": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140022840(uint64_t arg1)\n\n{\n    bool bVar1;\n    uint64_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong uVar6;\n    int8_t iVar7;\n    int32_t iVar8;\n    uint64_t noname_0;\n    uint64_t noname_0_00;\n    uint32_t uVar9;\n    uint64_t lpFlsData;\n    code *pcVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint64_t *puVar13;\n    uint64_t *puVar14;\n    uint uStackX16;\n    uint64_t *puVar15;\n    \n    iVar8 = arg1;\n    noname_0_00 = arg1 & 0xffffffff;\n    puVar15 = NULL;\n    puVar14 = NULL;\n    uStackX16 = 0;\n    bVar1 = true;\n    lpFlsData = iVar8 - 2U;\n    uVar11 = noname_0_00;\n    if (iVar8 - 2U == 0) {\ncode_r0x000140022897:\n        noname_0 = iVar8 - 2U;\n        if (iVar8 - 2U == 0) {\n            puVar13 = 0x14004d280;\n        }\n        else {\n            noname_0 = iVar8 - 6U;\n            if (iVar8 - 6U == 0) {\ncode_r0x000140022939:\n                puVar13 = 0x14004d290;\n                puVar14 = puVar15;\n            }\n            else {\n                noname_0 = iVar8 - 0xfU;\n                if (iVar8 - 0xfU == 0) {\n                    puVar13 = 0x14004d298;\n                }\n                else {\n                    uVar9 = iVar8 - 0x15;\n                    noname_0 = uVar9;\n                    if (uVar9 == 0) {\n                        puVar13 = 0x14004d288;\n                        puVar14 = puVar15;\n                    }\n                    else {\n                        if (uVar9 == 1) goto code_r0x000140022939;\n                        puVar13 = NULL;\n                        puVar14 = puVar15;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        lpFlsData = iVar8 - 4U;\n        if (iVar8 - 4U != 0) {\n            lpFlsData = iVar8 - 6U;\n            if (iVar8 - 6U != 0) {\n                lpFlsData = iVar8 - 8U;\n                if ((iVar8 - 8U == 0) || (lpFlsData = iVar8 - 0xbU,  iVar8 - 0xbU == 0)) goto code_r0x0001400228c7;\n                lpFlsData = iVar8 - 0xfU;\n                if (iVar8 - 0xfU != 0) {\n                    uVar9 = iVar8 - 0x15;\n                    lpFlsData = uVar9;\n                    if ((uVar9 != 0) && (uVar9 != 1)) goto code_r0x000140022919;\n                }\n            }\n            goto code_r0x000140022897;\n        }\ncode_r0x0001400228c7:\n        puVar14 = fcn.14001a8f8(arg1, lpFlsData);\n        if (puVar14 == NULL) {\n            return 0xffffffff;\n        }\n        uVar2 = *puVar14;\n        noname_0 = *0x140031830 * 0x10 + uVar2;\n        for (; uVar2 != noname_0; uVar2 = uVar2 + 0x10) {\n            if (*(uVar2 + 4) == uVar11) goto code_r0x000140022914;\n        }\n        uVar2 = 0;\ncode_r0x000140022914:\n        if (uVar2 == 0) {\ncode_r0x000140022919:\n            puVar3 = fcn.140016088();\n            *puVar3 = 0x16;\n            fcn.140019f10();\n            return 0xffffffff;\n        }\n        puVar13 = uVar2 + 8;\n        bVar1 = false;\n    }\n    uVar2 = 0;\n    if (bVar1) {\n        noname_0 = 3;\n        fcn.14001f808(3);\n    }\n    uVar12 = *puVar13;\n    if (bVar1) {\n        uVar9 = *0x14003d018 & 0x3f;\n        noname_0 = uVar9;\n        iVar7 = uVar9;\n        uVar12 = (uVar12 ^ *0x14003d018) >> iVar7 | (uVar12 ^ *0x14003d018) << 0x40 - iVar7;\n    }\n    if (uVar12 == 1) goto code_r0x000140022a22;\n    if (uVar12 == 0) {\n        if (bVar1) {\n            fcn.14001f868(3);\n        }\n        fcn.140018ad8(3);\n        pcVar10 = swi(3);\n        uVar6 = (*pcVar10)();\n        return uVar6;\n    }\n    if ((uVar11 < 0xc) && ((0x910U >> (uVar11 & 0x1f) & 1) != 0)) {\n        uVar2 = puVar14[1];\n        puVar14[1] = 0;\n        if (uVar11 == 8) {\n            iVar4 = fcn.14001a780(noname_0, lpFlsData);\n            uStackX16 = *(iVar4 + 0x10);\n            iVar4 = fcn.14001a780(noname_0, lpFlsData);\n            *(iVar4 + 0x10) = 0x8c;\n            goto code_r0x0001400229da;\n        }\n    }\n    else {\ncode_r0x0001400229da:\n        if (uVar11 == 8) {\n            uVar5 = *0x140031838 * 0x10 + *puVar14;\n            noname_0 = *0x140031840 * 0x10 + uVar5;\n            for (; uVar5 != noname_0; uVar5 = uVar5 + 0x10) {\n                *(uVar5 + 8) = 0;\n            }\n            goto code_r0x000140022a22;\n        }\n    }\n    *puVar13 = *0x14003d018;\ncode_r0x000140022a22:\n    if (bVar1) {\n        noname_0 = 3;\n        fcn.14001f868(3);\n    }\n    if (uVar12 != 1) {\n        if (uVar11 == 8) {\n            iVar4 = fcn.14001a780(noname_0, lpFlsData);\n            pcVar10 = *(iVar4 + 0x10);\n            (**0x14002a368)();\n        }\n        else {\n            pcVar10 = *0x14002a368;\n            (**0x14002a368)();\n        }\n        if (((uVar11 < 0xc) && ((0x910U >> (uVar11 & 0x1f) & 1) != 0)) && (puVar14[1] = uVar2,  uVar11 == 8)) {\n            iVar4 = fcn.14001a780(noname_0_00, pcVar10);\n            *(iVar4 + 0x10) = uStackX16;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1755
    },
    "140022bc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140022bc4(char *arg1, char *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t in_RAX;\n    char *pcVar2;\n    uint64_t uVar3;\n    int32_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\n        return in_RAX & 0xffffffffffffff00 | '4' < *arg2;\n    }\n    pcVar2 = fcn.140024564();\n    iVar1 = pcVar2;\n    if (iVar1 == 0) {\n        uVar3 = 1;\n        if (*arg2 < '6') {\n            if (*arg2 < '5') {\ncode_r0x000140022c7d:\n                return pcVar2 & 0xffffffffffffff00;\n            }\n            pcVar2 = arg2 + 1;\n            if (arg4 != 0) {\n                for (; *pcVar2 == '0'; pcVar2 = pcVar2 + 1) {\n                }\n                if (*pcVar2 == '\\0') {\n                    if (arg2 != arg1) {\n                        return pcVar2 & 0xffffffffffffff00 | arg2[-1] & 1;\n                    }\n                    goto code_r0x000140022c7d;\n                }\n            }\n        }\n        goto code_r0x000140022c11;\n    }\n    if (iVar1 == 0x200) {\n        if (arg4 == 0) goto joined_r0x000140022c79;\n        while( true ) {\n            pcVar2 = pcVar2 & 0xffffffffffffff00;\n            if (*arg2 != '0') break;\n            arg2 = arg2 + 1;\n        }\n        if (*arg2 != '\\0') goto joined_r0x000140022c79;\n    }\n    else {\n        if (iVar1 != 0x100) goto code_r0x000140022c7d;\n        if (arg4 != 0) {\n            while( true ) {\n                pcVar2 = pcVar2 & 0xffffffffffffff00;\n                if (*arg2 != '0') break;\n                arg2 = arg2 + 1;\n            }\n            if (*arg2 == '\\0') goto code_r0x000140022c53;\n        }\njoined_r0x000140022c79:\n        uVar3 = 1;\n        if (arg3 == 0x2d) goto code_r0x000140022c11;\n    }\ncode_r0x000140022c53:\n    uVar3 = 0;\ncode_r0x000140022c11:\n    return pcVar2 & 0xffffffffffffff00 | uVar3;\n}\n",
        "token_count": 602
    },
    "140022c9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140022c94(char *arg1, uint64_t arg2, ulong arg3, uint32_t *arg4)\n\n{\n    char *arg1_00;\n    int64_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    char *arg2_00;\n    uint uVar4;\n    char *pcVar5;\n    int64_t iVar6;\n    uint32_t in_stack_00000028;\n    int64_t in_stack_00000038;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar3 = 0;\n        if (0 < arg3) {\n            iVar3 = arg3;\n        }\n        if (arg2 <= iVar3 + 1) {\n            uVar4 = 0x22;\n            goto code_r0x000140022cb8;\n        }\n        if (arg4 != NULL) {\n            arg1_00 = *(arg4 + 2);\n            pcVar5 = arg1 + 1;\n            *arg1 = '0';\n            arg2_00 = arg1_00;\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar2 = *arg2_00;\n                if (cVar2 == '\\0') {\n                    cVar2 = '0';\n                }\n                else {\n                    arg2_00 = arg2_00 + 1;\n                }\n                *pcVar5 = cVar2;\n                pcVar5 = pcVar5 + 1;\n            }\n            *pcVar5 = '\\0';\n            if ((-1 < arg3) && (cVar2 = fcn.140022bc4(arg1_00, arg2_00, *arg4, in_stack_00000028),  cVar2 != '\\0')) {\n                while( true ) {\n                    pcVar5 = pcVar5 + -1;\n                    if (*pcVar5 != '9') break;\n                    *pcVar5 = '0';\n                }\n                *pcVar5 = *pcVar5 + '\\x01';\n            }\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar1 = -1;\n                do {\n                    iVar6 = iVar1;\n                    iVar1 = iVar6 + 1;\n                } while (arg1[iVar6 + 2] != '\\0');\n                fcn.14000aec0(arg1, arg1 + 1, iVar6 + 2);\n            }\n            return 0;\n        }\n    }\n    uVar4 = 0x16;\ncode_r0x000140022cb8:\n    *(in_stack_00000038 + 0x2c) = uVar4;\n    *(in_stack_00000038 + 0x30) = 1;\n    fcn.140019e44(0, 0, 0, 0);\n    return uVar4;\n}\n",
        "token_count": 661
    },
    "140022db": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140022db0(uint32_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint32_t *puVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    int64_t iVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint64_t uVar17;\n    uint32_t uVar18;\n    uint8_t uStackX8;\n    uint32_t uStackX24;\n    uint64_t uStack568;\n    uint64_t uStack552;\n    uchar auStack532 [468];\n    \n    if ((*arg1 == 0) || (uVar5 = *arg2,  uVar5 == 0)) {\n        return 0;\n    }\n    uVar15 = *arg1 - 1;\n    uVar16 = uVar15;\n    uVar14 = uVar5 - 1;\n    if (uVar14 == 0) {\n        uVar5 = arg2[1];\n        uVar17 = uVar5;\n        uVar7 = 0;\n        if (uVar5 == 1) {\n            uVar5 = arg1[1];\n            *arg1 = 0;\n            fcn.1400244dc(arg1 + 1, 0x1cc, auStack532, 0);\n            return uVar5;\n        }\n        uVar2 = uVar7;\n        if (uVar15 != 0) {\n            while (uVar15 != 0xffffffff) {\n                iVar8 = uVar16 + 1;\n                uVar15 = uVar16 - 1;\n                uVar16 = uVar15;\n                uVar13 = arg1[iVar8] | uVar7 << 0x20;\n                uVar7 = uVar13 % uVar17;\n                uVar2 = (uVar2 << 0x20) + (uVar13 / uVar17 & 0xffffffff);\n            }\n            *arg1 = 0;\n            fcn.1400244dc(arg1 + 1, 0x1cc, auStack532, 0);\n            arg1[1] = uVar7;\n            arg1[2] = 0;\n            *arg1 = 1;\n            return uVar2;\n        }\n        uVar14 = arg1[1];\n        *arg1 = 0;\n        fcn.1400244dc(arg1 + 1, 0x1cc, auStack532, 0);\n        uVar5 = uVar14 % uVar5;\n        arg1[1] = uVar5;\n        *arg1 = uVar5 != 0;\n        return uVar14 / uVar17;\n    }\n    if (uVar15 < uVar14) {\n        return 0;\n    }\n    iVar8 = uVar15;\n    iVar12 = uVar15 - uVar14;\n    iVar10 = iVar12;\n    if (iVar10 <= iVar8) {\n        puVar4 = arg1 + iVar8 + 1;\n        uVar7 = uVar16;\n        do {\n            iVar9 = uVar7;\n            if (*(arg2 + (iVar10 * -4 - arg1) + puVar4) != *puVar4) {\n                if (arg1[iVar9 + 1] <= arg2[(iVar9 - iVar12) + 1]) goto code_r0x000140022f54;\n                break;\n            }\n            uVar7 = iVar9 - 1;\n            iVar8 = iVar8 + -1;\n            puVar4 = puVar4 + -1;\n        } while (iVar10 <= iVar8);\n    }\n    iVar12 = iVar12 + 1;\ncode_r0x000140022f54:\n    if (iVar12 == 0) {\n        return 0;\n    }\n    uVar14 = arg2[uVar14 + 1];\n    uStackX24 = arg2[(uVar5 - 2) + 1];\n    uVar11 = 0;\n    uVar7 = 0;\n    iVar9 = 0x1f;\n    if (uVar14 != 0) {\n        for (; uVar14 >> iVar9 == 0; iVar9 = iVar9 + -1) {\n        }\n    }\n    if (uVar14 == 0) {\n        iVar9 = 0x20;\n        uStackX8 = 0;\n    }\n    else {\n        iVar9 = 0x1f - iVar9;\n        uStackX8 = 0x20 - iVar9;\n        if (iVar9 == 0) goto code_r0x000140022fe4;\n    }\n    uVar6 = uStackX24 >> (uStackX8 & 0x1f);\n    uStackX24 = uStackX24 << (iVar9 & 0x1f);\n    uVar14 = uVar6 | uVar14 << (iVar9 & 0x1f);\n    if (2 < uVar5) {\n        uStackX24 = uStackX24 | arg2[(uVar5 - 3) + 1] >> (uStackX8 & 0x1f);\n    }\ncode_r0x000140022fe4:\n    iVar12 = iVar12 + -1;\n    uStack552 = 0;\n    uVar17 = uVar7;\n    if (-1 < iVar12) {\n        uVar2 = uVar14;\n        uVar14 = iVar12 + uVar5;\n        do {\n            uVar15 = uVar11;\n            if (uVar14 <= uVar16) {\n                uVar15 = arg1[uVar14 + 1];\n            }\n            uVar6 = arg1[(uVar14 - 2) + 1];\n            uVar17 = uVar6;\n            uStack568 = CONCAT44(uVar15, arg1[(uVar14 - 1) + 1]);\n            if (iVar9 != 0) {\n                uStack568 = uVar6 >> (uStackX8 & 0x3f) | uStack568 << (iVar9 & 0x3f);\n                uVar6 = uVar6 << (iVar9 & 0x1f);\n                uVar17 = uVar6;\n                if (2 < uVar14) {\n                    uVar17 = uVar6 | arg1[(uVar14 - 3) + 1] >> (uStackX8 & 0x1f);\n                }\n            }\n            uVar13 = uStack568 / uVar2;\n            uStack568 = uStack568 % uVar2;\n            if (0xffffffff < uVar13) {\n                iVar8 = uVar13 - 0xffffffff;\n                uVar13 = 0xffffffff;\n                uStack568 = uStack568 + iVar8 * uVar2;\n            }\n            if (uStack568 < 0x100000000) {\n                uVar3 = uStackX24 * uVar13;\n                do {\n                    if (uVar3 <= (uStack568 << 0x20 | uVar17)) break;\n                    uVar13 = uVar13 - 1;\n                    uVar3 = uVar3 - uStackX24;\n                    uStack568 = uStack568 + uVar2;\n                } while (uStack568 < 0x100000000);\n            }\n            if (uVar13 != 0) {\n                uVar16 = uVar7;\n                uVar6 = uVar11;\n                puVar4 = arg2;\n                if (uVar5 != 0) {\n                    do {\n                        uVar16 = uVar16 + puVar4[1] * uVar13;\n                        uVar1 = uVar16;\n                        uVar17 = uVar16 >> 0x20;\n                        uVar16 = uVar17 + 1;\n                        if (uVar1 <= arg1[uVar6 + iVar12 + 1]) {\n                            uVar16 = uVar17;\n                        }\n                        uVar18 = uVar6 + 1;\n                        arg1[uVar6 + iVar12 + 1] = arg1[uVar6 + iVar12 + 1] - uVar1;\n                        uVar6 = uVar18;\n                        puVar4 = puVar4 + 1;\n                    } while (uVar18 < uVar5);\n                }\n                if (uVar15 < uVar16) {\n                    uVar16 = uVar7;\n                    uVar15 = uVar11;\n                    puVar4 = arg2;\n                    if (uVar5 != 0) {\n                        do {\n                            uVar6 = uVar15 + 1;\n                            uVar16 = uVar16 + puVar4[1] + arg1[uVar15 + iVar12 + 1];\n                            arg1[uVar15 + iVar12 + 1] = uVar16;\n                            uVar16 = uVar16 >> 0x20;\n                            uVar15 = uVar6;\n                            puVar4 = puVar4 + 1;\n                        } while (uVar6 < uVar5);\n                    }\n                    uVar13 = uVar13 - 1;\n                }\n                uVar16 = uVar14 - 1;\n            }\n            uVar15 = uVar16;\n            uVar14 = uVar14 - 1;\n            uVar17 = (uStack552 << 0x20) + (uVar13 & 0xffffffff);\n            iVar12 = iVar12 + -1;\n            uStack552 = uVar17;\n        } while (-1 < iVar12);\n    }\n    uVar15 = uVar15 + 1;\n    uVar5 = uVar15;\n    if (uVar15 < *arg1) {\n        do {\n            uVar16 = uVar5;\n            uVar5 = uVar5 + 1;\n            arg1[uVar16 + 1] = 0;\n        } while (uVar5 < *arg1);\n    }\n    *arg1 = uVar15;\n    while( true ) {\n        if (uVar15 == 0) {\n            return uVar17;\n        }\n        uVar15 = uVar15 - 1;\n        if (arg1[uVar15 + 1] != 0) break;\n        *arg1 = uVar15;\n    }\n    return uVar17;\n}\n",
        "token_count": 2327
    },
    "1400246c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint16_t fcn.1400246c0(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint16_t auStackX8 [8];\n    uint16_t uStackX24;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (noname_0 == 0xffff) {\n        return 0xffff;\n    }\n    auStackX8[0] = noname_0;\n    fcn.140014a84(&iStack40, arg2);\n    uVar2 = auStackX8[0];\n    if (*(iStack32 + 0xc) == 0xfde9) {\n        if (0x7f < auStackX8[0]) {\ncode_r0x00014002475c:\n            iVar1 = fcn.140027c5c(*(iStack32 + 0x138), 0x100, auStackX8, 1);\n            if (iVar1 != 0) {\n                auStackX8[0] = uStackX24;\n            }\n            goto code_r0x000140024796;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x000140024796;\n        }\n    }\n    else {\n        if (0xff < auStackX8[0]) {\n            if (*(iStack32 + 0x138) == 0) goto code_r0x000140024796;\n            goto code_r0x00014002475c;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x000140024796;\n        }\n    }\n    auStackX8[0] = *(*(iStack32 + 0x110) + uVar2);\ncode_r0x000140024796:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 1202
    },
    "1400257d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400257dc(int64_t arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint32_t *in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((in_stack_00000028 == NULL) || (*in_stack_00000028 = 0xffffffff,  arg1 == 0)) ||\n       ((in_stack_00000030 != 0 && ((arg4 & 0xfffffe7f) != 0)))) {\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\n        fcn.140019f10();\n        iVar2 = 0x16;\n    }\n    else {\n        iStack24 = 0;\n        iStack20 = 0;\n        iVar2 = fcn.140025dec(&iStack24, in_stack_00000028, arg1, arg2 & 0xffffffff);\n        if (iStack24 != 0) {\n            if (iVar2 != 0) {\n                puVar1 = *((*in_stack_00000028 >> 6) * 8 + 0x14004ca30) + 0x38 + (*in_stack_00000028 & 0x3f) * 0x48;\n                *puVar1 = *puVar1 & 0xfe;\n            }\n            iStack20 = iVar2;\n            fcn.140016e38(*in_stack_00000028);\n        }\n        if (iVar2 != 0) {\n            *in_stack_00000028 = 0xffffffff;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 404
    },
    "140027ce": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140027ce4(ulong arg1, ulong *arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_R8;\n    ulong var_50h;\n    ulong *var_48h;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    if (arg2 != NULL) {\n        *arg2 = arg1;\n    }\n    var_50h = arg1;\n    var_48h = arg2;\n    uVar1 = fcn.1400193c4(&var_40h, &var_50h, in_R8);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 511
    },
    "140027d9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140027d98(ulong param_1, ulong param_2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14004c9e4 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003d2c8;\n        var_28h._4_4_ = *0x14003d2cc;\n        uStack40 = *0x14003d2d0;\n        uStack36 = *0x14003d2d4;\n    }\n    uVar1 = fcn.140027e30(param_1, param_2, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000e50c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 451
    },
    "14002851": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140028518(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.140028b70();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 >> 10 & 1) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 >> 0x13 & 1) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x14003dbf0 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.140028b80(arg1_00);\n        }\n        else {\n            fcn.140028b80(arg1_00);\n        }\n        uVar3 = arg1_00;\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((uVar3 >> 10 & 1) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((uVar3 >> 0xb & 1) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((uVar3 >> 0xc & 1) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar3 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar3 = uVar3 & 0x8040;\n        if (uVar3 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar3 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar3 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1617
    },
    "140028ef": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140028ef0(ulong arg1)\n\n{\n    uint *puVar1;\n    \n    if (arg1 == 1) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x21;\n    }\n    else if ((arg1 == 2) || (arg1 == 3)) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x22;\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "14000aec": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.14000aec0(uchar (*arg1) [32], uchar (*arg2) [32], uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint uVar13;\n    uint uVar14;\n    uchar (*pauVar15) [32];\n    uchar (*pauVar16) [32];\n    uchar (*pauVar17) [32];\n    uint *puVar18;\n    uint *puVar19;\n    uchar (*pauVar20) [32];\n    uint *puVar21;\n    uint64_t uVar22;\n    int64_t iVar23;\n    uint64_t uVar24;\n    uint uVar25;\n    uint uVar27;\n    uint uVar28;\n    uint uVar29;\n    uchar auVar26 [32];\n    uchar auVar30 [32];\n    uchar auVar31 [32];\n    uchar auVar32 [32];\n    uchar auVar33 [32];\n    uchar auVar34 [32];\n    \n    pauVar15 = arg1;\n    if (arg3 < 0x10) {\n    // switch table (16 cases) at 0x140051000\n        switch(*(arg3 * 4 + 0x140051000) + 0x140000000) {\n        case 0x14000aeee:\n            return pauVar15;\n        case 0x14000aef0:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            uVar2 = (*arg2)[0xe];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            (*arg1)[0xe] = uVar2;\n            return pauVar15;\n        case 0x14000af10:\n            uVar3 = *(*arg2 + 8);\n            uVar2 = (*arg2)[10];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar2;\n            return pauVar15;\n        case 0x14000af28:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x14000af30:\n            uVar3 = *(*arg2 + 4);\n            uVar2 = (*arg2)[6];\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            (*arg1)[6] = uVar2;\n            return pauVar15;\n        case 0x14000af48:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            return pauVar15;\n        case 0x14000af5f:\n            uVar2 = (*arg2)[2];\n            **arg1 = **arg2;\n            (*arg1)[2] = uVar2;\n            return pauVar15;\n        case 0x14000af70:\n            uVar4 = *(*arg2 + 8);\n            uVar2 = (*arg2)[0xc];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            (*arg1)[0xc] = uVar2;\n            return pauVar15;\n        case 0x14000af86:\n            uVar3 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            return pauVar15;\n        case 0x14000af95:\n            uVar2 = (*arg2)[8];\n            **arg1 = **arg2;\n            (*arg1)[8] = uVar2;\n            return pauVar15;\n        case 0x14000afa3:\n            uVar4 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            return pauVar15;\n        case 0x14000afb0:\n            uVar3 = *(*arg2 + 4);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            return pauVar15;\n        case 0x14000afbf:\n            uVar2 = (*arg2)[4];\n            **arg1 = **arg2;\n            (*arg1)[4] = uVar2;\n            return pauVar15;\n        case 0x14000afcd:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x14000afd4:\n            (*arg1)[0] = (*arg2)[0];\n            return pauVar15;\n        case 0x14000afda:\n            **arg1 = **arg2;\n            return pauVar15;\n        }\n    }\n    if (arg3 < 0x21) {\n        uVar4 = *(*arg2 + 4);\n        uVar5 = *(*arg2 + 8);\n        uVar6 = *(*arg2 + 0xc);\n        puVar18 = arg2[-1] + arg3 + 0x10;\n        uVar25 = *puVar18;\n        uVar27 = puVar18[1];\n        uVar28 = puVar18[2];\n        uVar29 = puVar18[3];\n        **arg1 = **arg2;\n        *(*arg1 + 4) = uVar4;\n        *(*arg1 + 8) = uVar5;\n        *(*arg1 + 0xc) = uVar6;\n        puVar18 = arg1[-1] + arg3 + 0x10;\n        *puVar18 = uVar25;\n        puVar18[1] = uVar27;\n        puVar18[2] = uVar28;\n        puVar18[3] = uVar29;\n        return pauVar15;\n    }\n    if ((arg2 < arg1) && (arg1 < *arg2 + arg3)) {\n        iVar23 = arg2 - arg1;\n        puVar18 = arg1 + iVar23 + (arg3 - 0x10);\n        uVar4 = puVar18[1];\n        uVar5 = puVar18[2];\n        uVar6 = puVar18[3];\n        puVar19 = arg1[-1] + arg3 + 0x10;\n        uVar22 = arg3 - 0x10;\n        puVar21 = puVar19;\n        uVar25 = *puVar18;\n        uVar27 = uVar4;\n        uVar28 = uVar5;\n        uVar29 = uVar6;\n        if ((puVar19 & 0xf) != 0) {\n            puVar21 = puVar19 & 0xfffffffffffffff0;\n            puVar1 = puVar21 + iVar23;\n            uVar25 = *puVar1;\n            uVar27 = puVar1[1];\n            uVar28 = puVar1[2];\n            uVar29 = puVar1[3];\n            *puVar19 = *puVar18;\n            *(arg1[-1] + arg3 + 0x14) = uVar4;\n            *(arg1[-1] + arg3 + 0x18) = uVar5;\n            *(arg1[-1] + arg3 + 0x1c) = uVar6;\n            uVar22 = puVar21 - arg1;\n        }\n        uVar24 = uVar22 >> 7;\n        if (uVar24 != 0) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar18 = puVar21;\n            while( true ) {\n                puVar19 = puVar18 + iVar23 + -0x10;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar21 = puVar18 + iVar23 + -0x20;\n                uVar25 = *puVar21;\n                uVar27 = puVar21[1];\n                uVar28 = puVar21[2];\n                uVar29 = puVar21[3];\n                puVar21 = puVar18 + -0x20;\n                puVar18[-4] = *puVar19;\n                puVar18[-3] = uVar4;\n                puVar18[-2] = uVar5;\n                puVar18[-1] = uVar6;\n                puVar18[-8] = uVar25;\n                puVar18[-7] = uVar27;\n                puVar18[-6] = uVar28;\n                puVar18[-5] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x30;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x40;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                uVar24 = uVar24 - 1;\n                puVar18[-0xc] = *puVar19;\n                puVar18[-0xb] = uVar4;\n                puVar18[-10] = uVar5;\n                puVar18[-9] = uVar6;\n                puVar18[-0x10] = uVar25;\n                puVar18[-0xf] = uVar27;\n                puVar18[-0xe] = uVar28;\n                puVar18[-0xd] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x50;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x60;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                puVar18[-0x14] = *puVar19;\n                puVar18[-0x13] = uVar4;\n                puVar18[-0x12] = uVar5;\n                puVar18[-0x11] = uVar6;\n                puVar18[-0x18] = uVar25;\n                puVar18[-0x17] = uVar27;\n                puVar18[-0x16] = uVar28;\n                puVar18[-0x15] = uVar29;\n                puVar1 = puVar18 + iVar23 + -0x70;\n                uVar4 = puVar1[1];\n                uVar5 = puVar1[2];\n                uVar6 = puVar1[3];\n                puVar19 = puVar21 + iVar23;\n                uVar25 = *puVar19;\n                uVar27 = puVar19[1];\n                uVar28 = puVar19[2];\n                uVar29 = puVar19[3];\n                if (uVar24 == 0) break;\n                puVar18[-0x1c] = *puVar1;\n                puVar18[-0x1b] = uVar4;\n                puVar18[-0x1a] = uVar5;\n                puVar18[-0x19] = uVar6;\n                *puVar21 = uVar25;\n                puVar18[-0x1f] = uVar27;\n                puVar18[-0x1e] = uVar28;\n                puVar18[-0x1d] = uVar29;\n                puVar18 = puVar21;\n            }\n            puVar18[-0x1c] = *puVar1;\n            puVar18[-0x1b] = uVar4;\n            puVar18[-0x1a] = uVar5;\n            puVar18[-0x19] = uVar6;\n            uVar22 = uVar22 & 0x7f;\n        }\n        for (uVar24 = uVar22 >> 4; uVar24 != 0; uVar24 = uVar24 - 1) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar21 = puVar21 + -4;\n            puVar18 = puVar21 + iVar23;\n            uVar25 = *puVar18;\n            uVar27 = puVar18[1];\n            uVar28 = puVar18[2];\n            uVar29 = puVar18[3];\n        }\n        if ((uVar22 & 0xf) != 0) {\n            uVar4 = *(*arg2 + 4);\n            uVar5 = *(*arg2 + 8);\n            uVar6 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar4;\n            *(*arg1 + 8) = uVar5;\n            *(*arg1 + 0xc) = uVar6;\n        }\n        *puVar21 = uVar25;\n        puVar21[1] = uVar27;\n        puVar21[2] = uVar28;\n        puVar21[3] = uVar29;\n        return arg1;\n    }\n    if (*0x14003d028 < 3) {\n        if ((arg3 < 0x801) || ((*0x14004c5dc & 2) == 0)) {\n            if (0x80 < arg3) {\n                iVar23 = (arg1 & 0xf) - 0x10;\n                puVar18 = arg1 - iVar23;\n                puVar21 = arg2 - iVar23;\n                arg3 = arg3 + iVar23;\n                if (0x80 < arg3) {\n                    do {\n                        uVar4 = puVar21[1];\n                        uVar5 = puVar21[2];\n                        uVar6 = puVar21[3];\n                        uVar25 = puVar21[4];\n                        uVar27 = puVar21[5];\n                        uVar28 = puVar21[6];\n                        uVar29 = puVar21[7];\n                        uVar7 = puVar21[8];\n                        uVar8 = puVar21[9];\n                        uVar9 = puVar21[10];\n                        uVar10 = puVar21[0xb];\n                        uVar11 = puVar21[0xc];\n                        uVar12 = puVar21[0xd];\n                        uVar13 = puVar21[0xe];\n                        uVar14 = puVar21[0xf];\n                        *puVar18 = *puVar21;\n                        puVar18[1] = uVar4;\n                        puVar18[2] = uVar5;\n                        puVar18[3] = uVar6;\n                        puVar18[4] = uVar25;\n                        puVar18[5] = uVar27;\n                        puVar18[6] = uVar28;\n                        puVar18[7] = uVar29;\n                        puVar18[8] = uVar7;\n                        puVar18[9] = uVar8;\n                        puVar18[10] = uVar9;\n                        puVar18[0xb] = uVar10;\n                        puVar18[0xc] = uVar11;\n                        puVar18[0xd] = uVar12;\n                        puVar18[0xe] = uVar13;\n                        puVar18[0xf] = uVar14;\n                        uVar4 = puVar21[0x11];\n                        uVar5 = puVar21[0x12];\n                        uVar6 = puVar21[0x13];\n                        uVar25 = puVar21[0x14];\n                        uVar27 = puVar21[0x15];\n                        uVar28 = puVar21[0x16];\n                        uVar29 = puVar21[0x17];\n                        uVar7 = puVar21[0x18];\n                        uVar8 = puVar21[0x19];\n                        uVar9 = puVar21[0x1a];\n                        uVar10 = puVar21[0x1b];\n                        uVar11 = puVar21[0x1c];\n                        uVar12 = puVar21[0x1d];\n                        uVar13 = puVar21[0x1e];\n                        uVar14 = puVar21[0x1f];\n                        puVar18[0x10] = puVar21[0x10];\n                        puVar18[0x11] = uVar4;\n                        puVar18[0x12] = uVar5;\n                        puVar18[0x13] = uVar6;\n                        puVar18[0x14] = uVar25;\n                        puVar18[0x15] = uVar27;\n                        puVar18[0x16] = uVar28;\n                        puVar18[0x17] = uVar29;\n                        puVar18[0x18] = uVar7;\n                        puVar18[0x19] = uVar8;\n                        puVar18[0x1a] = uVar9;\n                        puVar18[0x1b] = uVar10;\n                        puVar18[0x1c] = uVar11;\n                        puVar18[0x1d] = uVar12;\n                        puVar18[0x1e] = uVar13;\n                        puVar18[0x1f] = uVar14;\n                        puVar18 = puVar18 + 0x20;\n                        puVar21 = puVar21 + 0x20;\n                        arg3 = arg3 - 0x80;\n                    } while (0x7f < arg3);\n                }\n            }\n    // WARNING: Could not recover jumptable at 0x00014000b3d6. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x140051088\n            pauVar15 = (*(*((arg3 + 0xf >> 4) * 4 + 0x140051088) + 0x140000000))();\n            return pauVar15;\n        }\n    }\n    else if (((arg3 < 0x2001) || (0x180000 < arg3)) || ((*0x14004c5dc & 2) == 0)) {\n        auVar26 = vmovdqu_avx(*arg2);\n        auVar34 = vmovdqu_avx(*(arg2[-1] + arg3));\n        if (0x100 < arg3) {\n            iVar23 = (arg1 & 0x1f) - 0x20;\n            pauVar16 = arg1 - iVar23;\n            arg2 = arg2 - iVar23;\n            arg3 = arg3 + iVar23;\n            if (0x100 < arg3) {\n                if (0x180000 < arg3) {\n                    do {\n                        uVar22 = arg3;\n                        pauVar20 = arg2;\n                        pauVar17 = pauVar16;\n                        auVar30 = vmovdqu_avx(*pauVar20);\n                        auVar31 = vmovdqu_avx(pauVar20[1]);\n                        auVar32 = vmovdqu_avx(pauVar20[2]);\n                        auVar33 = vmovdqu_avx(pauVar20[3]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *pauVar17 = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[1] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[2] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[3] = auVar30;\n                        auVar30 = vmovdqu_avx(pauVar20[4]);\n                        auVar31 = vmovdqu_avx(pauVar20[5]);\n                        auVar32 = vmovdqu_avx(pauVar20[6]);\n                        auVar33 = vmovdqu_avx(pauVar20[7]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        pauVar17[4] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[5] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[6] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[7] = auVar30;\n                        pauVar16 = pauVar17[8];\n                        arg2 = pauVar20[8];\n                        arg3 = uVar22 - 0x100;\n                    } while (0xff < uVar22 - 0x100);\n                    uVar24 = uVar22 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x140051064\n                    switch(uVar22) {\n                    case 0x1e1:\n                    case 0x1e2:\n                    case 0x1e3:\n                    case 0x1e4:\n                    case 0x1e5:\n                    case 0x1e6:\n                    case 0x1e7:\n                    case 0x1e8:\n                    case 0x1e9:\n                    case 0x1ea:\n                    case 0x1eb:\n                    case 0x1ec:\n                    case 0x1ed:\n                    case 0x1ee:\n                    case 0x1ef:\n                    case 0x1f0:\n                    case 0x1f1:\n                    case 0x1f2:\n                    case 499:\n                    case 500:\n                    case 0x1f5:\n                    case 0x1f6:\n                    case 0x1f7:\n                    case 0x1f8:\n                    case 0x1f9:\n                    case 0x1fa:\n                    case 0x1fb:\n                    case 0x1fc:\n                    case 0x1fd:\n                    case 0x1fe:\n                    case 0x1ff:\n                        auVar30 = vmovdqu_avx(*(*pauVar20 + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(*pauVar17 + uVar24) = auVar30;\n                    case 0x1c1:\n                    case 0x1c2:\n                    case 0x1c3:\n                    case 0x1c4:\n                    case 0x1c5:\n                    case 0x1c6:\n                    case 0x1c7:\n                    case 0x1c8:\n                    case 0x1c9:\n                    case 0x1ca:\n                    case 0x1cb:\n                    case 0x1cc:\n                    case 0x1cd:\n                    case 0x1ce:\n                    case 0x1cf:\n                    case 0x1d0:\n                    case 0x1d1:\n                    case 0x1d2:\n                    case 0x1d3:\n                    case 0x1d4:\n                    case 0x1d5:\n                    case 0x1d6:\n                    case 0x1d7:\n                    case 0x1d8:\n                    case 0x1d9:\n                    case 0x1da:\n                    case 0x1db:\n                    case 0x1dc:\n                    case 0x1dd:\n                    case 0x1de:\n                    case 0x1df:\n                    case 0x1e0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[1] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[1] + uVar24) = auVar30;\n                    case 0x1a1:\n                    case 0x1a2:\n                    case 0x1a3:\n                    case 0x1a4:\n                    case 0x1a5:\n                    case 0x1a6:\n                    case 0x1a7:\n                    case 0x1a8:\n                    case 0x1a9:\n                    case 0x1aa:\n                    case 0x1ab:\n                    case 0x1ac:\n                    case 0x1ad:\n                    case 0x1ae:\n                    case 0x1af:\n                    case 0x1b0:\n                    case 0x1b1:\n                    case 0x1b2:\n                    case 0x1b3:\n                    case 0x1b4:\n                    case 0x1b5:\n                    case 0x1b6:\n                    case 0x1b7:\n                    case 0x1b8:\n                    case 0x1b9:\n                    case 0x1ba:\n                    case 0x1bb:\n                    case 0x1bc:\n                    case 0x1bd:\n                    case 0x1be:\n                    case 0x1bf:\n                    case 0x1c0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[2] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[2] + uVar24) = auVar30;\n                    case 0x181:\n                    case 0x182:\n                    case 0x183:\n                    case 0x184:\n                    case 0x185:\n                    case 0x186:\n                    case 0x187:\n                    case 0x188:\n                    case 0x189:\n                    case 0x18a:\n                    case 0x18b:\n                    case 0x18c:\n                    case 0x18d:\n                    case 0x18e:\n                    case 399:\n                    case 400:\n                    case 0x191:\n                    case 0x192:\n                    case 0x193:\n                    case 0x194:\n                    case 0x195:\n                    case 0x196:\n                    case 0x197:\n                    case 0x198:\n                    case 0x199:\n                    case 0x19a:\n                    case 0x19b:\n                    case 0x19c:\n                    case 0x19d:\n                    case 0x19e:\n                    case 0x19f:\n                    case 0x1a0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[3] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[3] + uVar24) = auVar30;\n                    case 0x161:\n                    case 0x162:\n                    case 0x163:\n                    case 0x164:\n                    case 0x165:\n                    case 0x166:\n                    case 0x167:\n                    case 0x168:\n                    case 0x169:\n                    case 0x16a:\n                    case 0x16b:\n                    case 0x16c:\n                    case 0x16d:\n                    case 0x16e:\n                    case 0x16f:\n                    case 0x170:\n                    case 0x171:\n                    case 0x172:\n                    case 0x173:\n                    case 0x174:\n                    case 0x175:\n                    case 0x176:\n                    case 0x177:\n                    case 0x178:\n                    case 0x179:\n                    case 0x17a:\n                    case 0x17b:\n                    case 0x17c:\n                    case 0x17d:\n                    case 0x17e:\n                    case 0x17f:\n                    case 0x180:\n                        auVar30 = vmovdqu_avx(*(pauVar20[4] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[4] + uVar24) = auVar30;\n                    case 0x141:\n                    case 0x142:\n                    case 0x143:\n                    case 0x144:\n                    case 0x145:\n                    case 0x146:\n                    case 0x147:\n                    case 0x148:\n                    case 0x149:\n                    case 0x14a:\n                    case 0x14b:\n                    case 0x14c:\n                    case 0x14d:\n                    case 0x14e:\n                    case 0x14f:\n                    case 0x150:\n                    case 0x151:\n                    case 0x152:\n                    case 0x153:\n                    case 0x154:\n                    case 0x155:\n                    case 0x156:\n                    case 0x157:\n                    case 0x158:\n                    case 0x159:\n                    case 0x15a:\n                    case 0x15b:\n                    case 0x15c:\n                    case 0x15d:\n                    case 0x15e:\n                    case 0x15f:\n                    case 0x160:\n                        auVar30 = vmovdqu_avx(*(pauVar20[5] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[5] + uVar24) = auVar30;\n                    case 0x121:\n                    case 0x122:\n                    case 0x123:\n                    case 0x124:\n                    case 0x125:\n                    case 0x126:\n                    case 0x127:\n                    case 0x128:\n                    case 0x129:\n                    case 0x12a:\n                    case 299:\n                    case 300:\n                    case 0x12d:\n                    case 0x12e:\n                    case 0x12f:\n                    case 0x130:\n                    case 0x131:\n                    case 0x132:\n                    case 0x133:\n                    case 0x134:\n                    case 0x135:\n                    case 0x136:\n                    case 0x137:\n                    case 0x138:\n                    case 0x139:\n                    case 0x13a:\n                    case 0x13b:\n                    case 0x13c:\n                    case 0x13d:\n                    case 0x13e:\n                    case 0x13f:\n                    case 0x140:\n                        auVar30 = vmovdqu_avx(*(pauVar20[6] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[6] + uVar24) = auVar30;\n                    default:\n                        auVar34 = vmovdqu_avx(auVar34);\n                        *(pauVar17[-1] + uVar22) = auVar34;\n                    case 0x100:\n                        auVar26 = vmovdqu_avx(auVar26);\n                        *arg1 = auVar26;\n                        vzeroupper_avx();\n                        return pauVar15;\n                    }\n                }\n                do {\n                    auVar34 = vmovdqu_avx(*arg2);\n                    auVar30 = vmovdqu_avx(arg2[1]);\n                    auVar31 = vmovdqu_avx(arg2[2]);\n                    auVar32 = vmovdqu_avx(arg2[3]);\n                    *pauVar16 = auVar34;\n                    pauVar16[1] = auVar30;\n                    pauVar16[2] = auVar31;\n                    pauVar16[3] = auVar32;\n                    auVar34 = vmovdqu_avx(arg2[4]);\n                    auVar30 = vmovdqu_avx(arg2[5]);\n                    auVar31 = vmovdqu_avx(arg2[6]);\n                    auVar32 = vmovdqu_avx(arg2[7]);\n                    pauVar16[4] = auVar34;\n                    pauVar16[5] = auVar30;\n                    pauVar16[6] = auVar31;\n                    pauVar16[7] = auVar32;\n                    pauVar16 = pauVar16[8];\n                    arg2 = arg2[8];\n                    arg3 = arg3 - 0x100;\n                } while (0xff < arg3);\n            }\n        }\n    // WARNING: Could not recover jumptable at 0x00014000b132. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x140051040\n        pauVar15 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x140051040) + 0x140000000))(SUB328(auVar26, 0));\n        return pauVar15;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*arg1)[0] = (*arg2)[0];\n        arg2 = *arg2 + 1;\n        arg1 = *arg1 + 1;\n    }\n    return pauVar15;\n}\n",
        "token_count": 7525
    },
    "14000b88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.14000b880(uchar (*arg1) [32], ulong noname_1, uint64_t arg3)\n\n{\n    uchar auVar1 [32];\n    uchar (*pauVar2) [32];\n    uchar (*pauVar3) [32];\n    uchar (*pauVar4) [16];\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uchar uVar7;\n    int64_t iVar10;\n    uchar auVar11 [16];\n    uchar in_YMM0 [32];\n    uchar auVar12 [32];\n    ushort uVar8;\n    uint uVar9;\n    \n    uVar5 = noname_1;\n    iVar10 = uVar5 * 0x101010101010101;\n    if (arg3 < 0x10) {\n        uVar7 = iVar10;\n        uVar8 = iVar10;\n        uVar9 = iVar10;\n    // switch table (16 cases) at 0x1400510b0\n        switch(*(arg3 * 4 + 0x1400510b0) + 0x140000000) {\n        case 0x14000b8c1:\n            *(arg1[-1] + arg3 + 0x11) = iVar10;\n        case 0x14000b8c5:\n            *(arg1[-1] + arg3 + 0x19) = uVar9;\n        case 0x14000b8c9:\n            *(arg1[-1] + arg3 + 0x1d) = uVar8;\n        case 0x14000b8ce:\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x14000b8d2:\n            return arg1;\n        case 0x14000b8d3:\n            *(arg1[-1] + arg3 + 0x12) = iVar10;\n        case 0x14000b8d7:\n            *(arg1[-1] + arg3 + 0x1a) = uVar9;\n        case 0x14000b8db:\n            *(arg1[-1] + arg3 + 0x1e) = uVar8;\n            return arg1;\n        case 0x14000b8f0:\n            *(arg1[-1] + arg3 + 0x13) = iVar10;\n        case 0x14000b8f4:\n            *(arg1[-1] + arg3 + 0x1b) = uVar9;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x14000b900:\n            *(arg1[-1] + arg3 + 0x14) = iVar10;\n        case 0x14000b904:\n            *(arg1[-1] + arg3 + 0x1c) = uVar9;\n            return arg1;\n        case 0x14000b909:\n            *(arg1[-1] + arg3 + 0x15) = iVar10;\n            *(arg1[-1] + arg3 + 0x1d) = uVar8;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x14000b917:\n            *(arg1[-1] + arg3 + 0x17) = iVar10;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x14000b920:\n            *(arg1[-1] + arg3 + 0x16) = iVar10;\n            *(arg1[-1] + arg3 + 0x1e) = uVar8;\n            return arg1;\n        case 0x14000b92a:\n            *(arg1[-1] + arg3 + 0x18) = iVar10;\n            return arg1;\n        }\n    }\n    auVar11 = CONCAT88(iVar10, iVar10);\n    if (arg3 < 0x21) {\n        **arg1 = auVar11;\n        *(arg1[-1] + arg3 + 0x10) = auVar11;\n        return arg1;\n    }\n    pauVar2 = arg1;\n    if (*0x14003d028 < 3) {\n        if ((arg3 <= *0x14003d030) || ((*0x14004c5dc & 2) == 0)) {\n            iVar10 = (arg1 & 0xf) - 0x10;\n            pauVar4 = arg1 - iVar10;\n            arg3 = arg3 + iVar10;\n            if (0x80 < arg3) {\n                do {\n                    *pauVar4 = auVar11;\n                    pauVar4[1] = auVar11;\n                    pauVar4[2] = auVar11;\n                    pauVar4[3] = auVar11;\n                    pauVar4[4] = auVar11;\n                    pauVar4[5] = auVar11;\n                    pauVar4[6] = auVar11;\n                    pauVar4[7] = auVar11;\n                    pauVar4 = pauVar4[8];\n                    arg3 = arg3 - 0x80;\n                } while (0x7f < arg3);\n            }\n    // WARNING: Could not recover jumptable at 0x00014000bbc8. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x140051138\n            pauVar2 = (*(*((arg3 + 0xf >> 4) * 4 + 0x140051138) + 0x140000000))(pauVar4, uVar5 - iVar10);\n            return pauVar2;\n        }\n    }\n    else if (((arg3 <= *0x14003d030) || (*0x14003d038 < arg3)) || ((*0x14004c5dc & 2) == 0)) {\n        auVar12 = vinsertf128_avx(CONCAT1616(SUB3216(in_YMM0 >> 0x80, 0), auVar11), auVar11, 1);\n        iVar10 = (arg1 & 0x1f) - 0x20;\n        pauVar2 = arg1 - iVar10;\n        arg3 = arg3 + iVar10;\n        if (0x100 < arg3) {\n            if (*0x14003d038 < arg3) {\n                do {\n                    uVar5 = arg3;\n                    pauVar3 = pauVar2;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *pauVar3 = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[1] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[2] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[3] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[4] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[5] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[6] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[7] = auVar1;\n                    pauVar2 = pauVar3[8];\n                    arg3 = uVar5 - 0x100;\n                } while (0xff < uVar5 - 0x100);\n                uVar6 = uVar5 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x140051114\n                switch(uVar5) {\n                case 0x1e1:\n                case 0x1e2:\n                case 0x1e3:\n                case 0x1e4:\n                case 0x1e5:\n                case 0x1e6:\n                case 0x1e7:\n                case 0x1e8:\n                case 0x1e9:\n                case 0x1ea:\n                case 0x1eb:\n                case 0x1ec:\n                case 0x1ed:\n                case 0x1ee:\n                case 0x1ef:\n                case 0x1f0:\n                case 0x1f1:\n                case 0x1f2:\n                case 499:\n                case 500:\n                case 0x1f5:\n                case 0x1f6:\n                case 0x1f7:\n                case 0x1f8:\n                case 0x1f9:\n                case 0x1fa:\n                case 0x1fb:\n                case 0x1fc:\n                case 0x1fd:\n                case 0x1fe:\n                case 0x1ff:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(*pauVar3 + uVar6) = auVar1;\n                case 0x1c1:\n                case 0x1c2:\n                case 0x1c3:\n                case 0x1c4:\n                case 0x1c5:\n                case 0x1c6:\n                case 0x1c7:\n                case 0x1c8:\n                case 0x1c9:\n                case 0x1ca:\n                case 0x1cb:\n                case 0x1cc:\n                case 0x1cd:\n                case 0x1ce:\n                case 0x1cf:\n                case 0x1d0:\n                case 0x1d1:\n                case 0x1d2:\n                case 0x1d3:\n                case 0x1d4:\n                case 0x1d5:\n                case 0x1d6:\n                case 0x1d7:\n                case 0x1d8:\n                case 0x1d9:\n                case 0x1da:\n                case 0x1db:\n                case 0x1dc:\n                case 0x1dd:\n                case 0x1de:\n                case 0x1df:\n                case 0x1e0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[1] + uVar6) = auVar1;\n                case 0x1a1:\n                case 0x1a2:\n                case 0x1a3:\n                case 0x1a4:\n                case 0x1a5:\n                case 0x1a6:\n                case 0x1a7:\n                case 0x1a8:\n                case 0x1a9:\n                case 0x1aa:\n                case 0x1ab:\n                case 0x1ac:\n                case 0x1ad:\n                case 0x1ae:\n                case 0x1af:\n                case 0x1b0:\n                case 0x1b1:\n                case 0x1b2:\n                case 0x1b3:\n                case 0x1b4:\n                case 0x1b5:\n                case 0x1b6:\n                case 0x1b7:\n                case 0x1b8:\n                case 0x1b9:\n                case 0x1ba:\n                case 0x1bb:\n                case 0x1bc:\n                case 0x1bd:\n                case 0x1be:\n                case 0x1bf:\n                case 0x1c0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[2] + uVar6) = auVar1;\n                case 0x181:\n                case 0x182:\n                case 0x183:\n                case 0x184:\n                case 0x185:\n                case 0x186:\n                case 0x187:\n                case 0x188:\n                case 0x189:\n                case 0x18a:\n                case 0x18b:\n                case 0x18c:\n                case 0x18d:\n                case 0x18e:\n                case 399:\n                case 400:\n                case 0x191:\n                case 0x192:\n                case 0x193:\n                case 0x194:\n                case 0x195:\n                case 0x196:\n                case 0x197:\n                case 0x198:\n                case 0x199:\n                case 0x19a:\n                case 0x19b:\n                case 0x19c:\n                case 0x19d:\n                case 0x19e:\n                case 0x19f:\n                case 0x1a0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[3] + uVar6) = auVar1;\n                case 0x161:\n                case 0x162:\n                case 0x163:\n                case 0x164:\n                case 0x165:\n                case 0x166:\n                case 0x167:\n                case 0x168:\n                case 0x169:\n                case 0x16a:\n                case 0x16b:\n                case 0x16c:\n                case 0x16d:\n                case 0x16e:\n                case 0x16f:\n                case 0x170:\n                case 0x171:\n                case 0x172:\n                case 0x173:\n                case 0x174:\n                case 0x175:\n                case 0x176:\n                case 0x177:\n                case 0x178:\n                case 0x179:\n                case 0x17a:\n                case 0x17b:\n                case 0x17c:\n                case 0x17d:\n                case 0x17e:\n                case 0x17f:\n                case 0x180:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[4] + uVar6) = auVar1;\n                case 0x141:\n                case 0x142:\n                case 0x143:\n                case 0x144:\n                case 0x145:\n                case 0x146:\n                case 0x147:\n                case 0x148:\n                case 0x149:\n                case 0x14a:\n                case 0x14b:\n                case 0x14c:\n                case 0x14d:\n                case 0x14e:\n                case 0x14f:\n                case 0x150:\n                case 0x151:\n                case 0x152:\n                case 0x153:\n                case 0x154:\n                case 0x155:\n                case 0x156:\n                case 0x157:\n                case 0x158:\n                case 0x159:\n                case 0x15a:\n                case 0x15b:\n                case 0x15c:\n                case 0x15d:\n                case 0x15e:\n                case 0x15f:\n                case 0x160:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[5] + uVar6) = auVar1;\n                case 0x121:\n                case 0x122:\n                case 0x123:\n                case 0x124:\n                case 0x125:\n                case 0x126:\n                case 0x127:\n                case 0x128:\n                case 0x129:\n                case 0x12a:\n                case 299:\n                case 300:\n                case 0x12d:\n                case 0x12e:\n                case 0x12f:\n                case 0x130:\n                case 0x131:\n                case 0x132:\n                case 0x133:\n                case 0x134:\n                case 0x135:\n                case 0x136:\n                case 0x137:\n                case 0x138:\n                case 0x139:\n                case 0x13a:\n                case 0x13b:\n                case 0x13c:\n                case 0x13d:\n                case 0x13e:\n                case 0x13f:\n                case 0x140:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[6] + uVar6) = auVar1;\n                default:\n                    auVar1 = vmovdqu_avx(auVar12);\n                    *(pauVar3[-1] + uVar5) = auVar1;\n                case 0x100:\n                    auVar12 = vmovdqu_avx(auVar12);\n                    *arg1 = auVar12;\n                    vzeroupper_avx();\n                    return arg1;\n                }\n            }\n            do {\n                *pauVar2 = auVar12;\n                pauVar2[1] = auVar12;\n                pauVar2[2] = auVar12;\n                pauVar2[3] = auVar12;\n                pauVar2[4] = auVar12;\n                pauVar2[5] = auVar12;\n                pauVar2[6] = auVar12;\n                pauVar2[7] = auVar12;\n                pauVar2 = pauVar2[8];\n                arg3 = arg3 - 0x100;\n            } while (0xff < arg3);\n        }\n    // WARNING: Could not recover jumptable at 0x00014000ba14. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x1400510f0\n        pauVar2 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x1400510f0) + 0x140000000))\n                            (SUB328(auVar12, 0), pauVar2, uVar5 - iVar10);\n        return pauVar2;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*pauVar2)[0] = noname_1;\n        pauVar2 = *pauVar2 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 4175
    },
    "14000ea2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14000ea24(int64_t arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    \n    if ((arg1 == 0) || (2 < arg3)) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        fcn.14001438c(arg1);\n        uVar1 = fcn.14000eba8(arg1, arg2, arg3, arg4);\n        fcn.140014398(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 173
    },
    "140013c8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140013c80(uint64_t arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    uchar *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    ushort uStack1152;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    uchar **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x14003d018 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x14003d2c8;\n        uVar4 = *0x14003d2cc;\n        uVar5 = *0x14003d2d0;\n        uVar6 = *0x14003d2d4;\n        if (*0x14004c9e4 == 0) goto code_r0x000140013cef;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x000140013cef:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        goto code_r0x000140013e6e;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.1400116c4(&uStack1208, arg2, arg3);\n    if (arg2 == NULL) {\ncode_r0x000140013e62:\n        fcn.140019f78(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x000140013e5e;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x000140013e62;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140019f78(var_58h);\n                    goto code_r0x000140013e6e;\n                }\n                goto code_r0x000140013e5e;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x000140013e5e:\n                arg2[uStack1288] = 0;\n                goto code_r0x000140013e62;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x000140013e62;\n        }\n        fcn.140019f78(var_58h);\n    }\ncode_r0x000140013e6e:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.14000a100(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1615
    },
    "140013ed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140013ed4(uint64_t arg1, ushort *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    ushort *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    uchar uStack1152;\n    ushort uStack1150;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    ushort **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x14003d018 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x14003d2c8;\n        uVar4 = *0x14003d2cc;\n        uVar5 = *0x14003d2d0;\n        uVar6 = *0x14003d2d4;\n        if (*0x14004c9e4 == 0) goto code_r0x000140013f43;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x000140013f43:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        goto code_r0x0001400140ca;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1150 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.140011a44(&uStack1208);\n    if (arg2 == NULL) {\ncode_r0x0001400140be:\n        fcn.140019f78(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x0001400140b9;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x0001400140be;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140019f78(var_58h);\n                    goto code_r0x0001400140ca;\n                }\n                goto code_r0x0001400140b9;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x0001400140b9:\n                arg2[uStack1288] = 0;\n                goto code_r0x0001400140be;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x0001400140be;\n        }\n        fcn.140019f78(var_58h);\n    }\ncode_r0x0001400140ca:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.14000e50c(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.14000a100(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1623
    },
    "140015ae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140015ae8(ulong noname_0, uint32_t *arg2, int32_t **arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    uchar auStackX16 [16];\n    uint32_t *puStackX32;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    int64_t *piStack56;\n    int32_t *piStack48;\n    int32_t *piStack40;\n    int32_t *piStack32;\n    \n    puStackX32 = arg4;\n    fcn.14001f808(*arg2);\n    piVar1 = *0x14004c788 + *0x14004c780;\n    for (piVar3 = *0x14004c788; piStack64 = piVar3,  piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        iStack88 = *piVar3;\n        if ((iStack88 != 0) && (uVar2 = *(iStack88 + 0x14),  (uVar2 >> 0xd & 1) != 0)) {\n            if ((((uVar2 & 3) == 2) && ((uVar2 & 0xc0) != 0)) || ((uVar2 >> 0xb & 1) != 0)) {\n                piStack32 = arg3[2];\n                piStack40 = arg3[1];\n                piStack48 = *arg3;\n                piStack56 = &iStack88;\n                iStack80 = iStack88;\n                iStack72 = iStack88;\n                fcn.140015a4c(auStackX16, &iStack72, &piStack56, &iStack80);\n            }\n            else {\n                **arg3 = **arg3 + 1;\n            }\n        }\n    }\n    fcn.14001f868(*arg4);\n    return;\n}\n",
        "token_count": 466
    },
    "140015c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140015c6c(ulong *arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if (((*(arg1 + 0x14) & 3) == 2) && ((*(arg1 + 0x14) & 0xc0) != 0)) {\n        uVar2 = *arg1 - *(arg1 + 1);\n        *(arg1 + 2) = 0;\n        arg2_00 = arg1[1];\n        *arg1 = arg2_00;\n        if (0 < uVar2) {\n            uVar1 = fcn.1400192e4(arg1);\n            uVar1 = fcn.14001c470(uVar1, arg2_00, uVar2, arg2);\n            if (uVar2 != uVar1) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n                return 0xffffffff;\n            }\n            if ((*(arg1 + 0x14) >> 2 & 1) != 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffd;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "140015dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140015dd4(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uchar auStackX8 [8];\n    int64_t iStackX16;\n    int64_t iStackX24;\n    int64_t *piStackX32;\n    int64_t aiStack24 [3];\n    \n    iStackX16 = arg1;\n    if (arg1 == 0) {\n        uVar2 = fcn.140015c0c();\n    }\n    else {\n        uVar1 = *(arg1 + 0x14);\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            piStackX32 = &iStackX16;\n            iStackX24 = arg1;\n            aiStack24[0] = arg1;\n            uVar2 = fcn.140015bcc(auStackX8, aiStack24, &piStackX32, &iStackX24);\n        }\n        else {\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 266
    },
    "14002182": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002182c(ulong arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    ushort uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t *puVar6;\n    int64_t iVar7;\n    uint8_t *puVar8;\n    uint64_t uVar9;\n    uint8_t *puVar10;\n    ushort *puVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint uVar14;\n    ushort *puVar15;\n    uint32_t uVar16;\n    uint8_t *puVar17;\n    uint32_t uVar18;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t auStack66 [18];\n    uint64_t uStack48;\n    \n    uStack48 = *0x14003d018 ^ auStack104;\n    uVar4 = fcn.140021184(arg1);\n    uVar12 = 0;\n    if (uVar4 != 0) {\n        puVar6 = 0x14003d890;\n        uVar14 = 1;\n        uVar9 = uVar12;\ncode_r0x000140021875:\n        if (*puVar6 != uVar4) goto code_r0x00014002187d;\n        fcn.14000b880(arg2 + 0x18, 0, 0x101);\n        puVar17 = 0x14003d880;\n        iVar7 = 4;\n        puVar8 = uVar9 * 0x30 + 0x14003d8a0;\n        do {\n            uVar2 = *puVar8;\n            puVar10 = puVar8;\n            while ((uVar2 != 0 && (puVar10[1] != 0))) {\n                uVar2 = *puVar10;\n                uVar18 = uVar2;\n                if (uVar2 <= puVar10[1]) {\n                    uVar16 = uVar2;\n                    do {\n                        uVar16 = uVar16 + 1;\n                        if (0x100 < uVar16) break;\n                        uVar18 = uVar18 + 1;\n                        puVar1 = uVar16 + 0x18 + arg2;\n                        *puVar1 = *puVar1 | *puVar17;\n                    } while (uVar18 <= puVar10[1]);\n                }\n                puVar10 = puVar10 + 2;\n                uVar2 = *puVar10;\n            }\n            puVar8 = puVar8 + 8;\n            puVar17 = puVar17 + 1;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n        *(arg2 + 4) = uVar4;\n        *(arg2 + 8) = 1;\n        uVar13 = *0x140033978;\n        if (((uVar4 != 0x3a4) && (uVar13 = *0x140033980,  uVar4 != 0x3a8)) &&\n           ((uVar13 = *0x140033988,  uVar4 != 0x3b5 && (uVar13 = uVar12,  uVar4 == 0x3b6)))) {\n            uVar13 = *0x140033990;\n        }\n        *(arg2 + 0x220) = uVar13;\n        puVar15 = uVar9 * 0x30 + 0x14003d894;\n        puVar11 = arg2 + 0xc;\n        iVar7 = 6;\n        do {\n            uVar3 = *puVar15;\n            puVar15 = puVar15 + 1;\n            *puVar11 = uVar3;\n            puVar11 = puVar11 + 1;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n        goto code_r0x000140021aaf;\n    }\ncode_r0x000140021ab9:\n    fcn.140021204(arg2);\ncode_r0x000140021ac3:\n    fcn.14000a100(uStack48 ^ auStack104);\n    return;\ncode_r0x00014002187d:\n    uVar18 = uVar9 + 1;\n    uVar9 = uVar18;\n    puVar6 = puVar6 + 0xc;\n    if (4 < uVar18) goto code_r0x00014002188a;\n    goto code_r0x000140021875;\ncode_r0x00014002188a:\n    if ((uVar4 == 65000) || (iVar5 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar4 & 0xffff),  iVar5 == 0))\n    goto code_r0x000140021ac3;\n    if (uVar4 == 0xfde9) {\n        *(arg2 + 4) = 0xfde9;\n        *(arg2 + 0x220) = 0;\n        *(arg2 + 0x18) = 0;\n        *(arg2 + 0x1c) = 0;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar4);\n        if (iVar5 == 0) {\n            if (*0x14004d260 == 0) goto code_r0x000140021ac3;\n            goto code_r0x000140021ab9;\n        }\n        fcn.14000b880(arg2 + 0x18, 0, 0x101);\n        *(arg2 + 4) = uVar4;\n        *(arg2 + 0x220) = 0;\n        if (iStack72 == 2) {\n            puVar8 = auStack66;\n            while ((auStack66[0] != 0 && (puVar8[1] != 0))) {\n                uVar2 = *puVar8;\n                if (uVar2 <= puVar8[1]) {\n                    uVar4 = uVar2;\n                    uVar9 = (puVar8[1] - uVar2) + 1;\n                    do {\n                        uVar4 = uVar4 + 1;\n                        puVar17 = uVar4 + 0x18 + arg2;\n                        *puVar17 = *puVar17 | 4;\n                        uVar9 = uVar9 - 1;\n                    } while (uVar9 != 0);\n                }\n                puVar8 = puVar8 + 2;\n                auStack66[0] = *puVar8;\n            }\n            puVar8 = arg2 + 0x1a;\n            iVar7 = 0xfe;\n            do {\n                *puVar8 = *puVar8 | 8;\n                puVar8 = puVar8 + 1;\n                iVar7 = iVar7 + -1;\n            } while (iVar7 != 0);\n            iVar5 = *(arg2 + 4);\n            uVar9 = *0x140033978;\n            if ((((iVar5 != 0x3a4) && (uVar9 = *0x140033980,  iVar5 != 0x3a8)) &&\n                (uVar9 = *0x140033988,  iVar5 != 0x3b5)) && (uVar9 = *0x140033990,  iVar5 != 0x3b6)) {\n                uVar9 = uVar12;\n            }\n            *(arg2 + 0x220) = uVar9;\n        }\n        else {\n            uVar14 = 0;\n        }\n        *(arg2 + 8) = uVar14;\n    }\n    puVar11 = arg2 + 0xc;\n    for (iVar7 = 6; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\ncode_r0x000140021aaf:\n    fcn.14002129c(arg2);\n    goto code_r0x000140021ac3;\n}\n",
        "token_count": 1808
    },
    "14002621": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140026210(uint64_t arg1, uint8_t *arg2, uint64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint32_t *arg1_00;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    ulong in_stack_00000028;\n    uchar auStack120 [24];\n    uint32_t auStack96 [6];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003d018 ^ auStack120;\n    arg1_00 = 0x14004d390;\n    if (arg4 != NULL) {\n        arg1_00 = arg4;\n    }\n    puVar5 = 0x14002bd50;\n    if (arg2 != NULL) {\n        puVar5 = arg2;\n    }\n    uVar9 = 1;\n    if (arg2 != NULL) {\n        uVar9 = arg3;\n    }\n    puVar8 = -(arg2 != NULL) & arg1;\n    if (uVar9 == 0) goto code_r0x0001400263cd;\n    if (*(arg1_00 + 6) == 0) {\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        if (-1 < uVar3) {\n            if (puVar8 != NULL) {\n                *puVar8 = uVar3;\n            }\n            goto code_r0x0001400263cd;\n        }\n        if ((uVar3 & 0xe0) == 0xc0) {\n            uVar6 = 2;\n        }\n        else if ((uVar3 & 0xf0) == 0xe0) {\n            uVar6 = 3;\n        }\n        else {\n            if ((uVar3 & 0xf8) != 0xf0) goto code_r0x0001400263c2;\n            uVar6 = 4;\n        }\n        uVar2 = (1 << (7 - uVar6 & 0x1f)) - 1U & uVar3;\n        uVar3 = uVar6;\ncode_r0x000140026318:\n        uVar4 = uVar3;\n        uVar7 = uVar3;\n        if (uVar9 <= uVar4) {\n            uVar7 = uVar9;\n        }\n        while (puVar5 - arg2 < uVar7) {\n            uVar1 = *puVar5;\n            puVar5 = puVar5 + 1;\n            if ((uVar1 & 0xc0) != 0x80) goto code_r0x0001400263c2;\n            uVar2 = uVar1 & 0x3f | uVar2 << 6;\n        }\n        if (uVar7 < uVar4) {\n            *(arg1_00 + 1) = uVar6;\n            *(arg1_00 + 6) = uVar3 - uVar7;\n            *arg1_00 = uVar2;\n            goto code_r0x0001400263cd;\n        }\n        if ((0x7ff < uVar2 - 0xd800) && (uVar2 < 0x110000)) {\n            auStack96[2] = 0x80;\n            auStack96[3] = 0x800;\n            auStack96[4] = 0x10000;\n            if (auStack96[uVar6] <= uVar2) {\n                if (puVar8 != NULL) {\n                    *puVar8 = uVar2;\n                }\n                fcn.140027c40(-(uVar2 != 0) & uVar4, arg1_00);\n                goto code_r0x0001400263cd;\n            }\n        }\n    }\n    else {\n        uVar6 = *(arg1_00 + 1);\n        uVar2 = *arg1_00;\n        uVar3 = *(arg1_00 + 6);\n        if (((uVar6 - 2 < 3) && (uVar3 != 0)) && (uVar3 < uVar6)) goto code_r0x000140026318;\n    }\ncode_r0x0001400263c2:\n    fcn.140027c48(arg1_00, in_stack_00000028);\ncode_r0x0001400263cd:\n    fcn.14000a100(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 1037
    },
    "1400288e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400288e0(ulong arg1, ulong arg2, ulong ***arg3, ulong arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    ulong ***pppuStack224;\n    ulong uStack216;\n    ulong ***pppuStack200;\n    ulong uStack192;\n    uchar auStack184 [48];\n    ulong uStack136;\n    uint32_t uStack120;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003d018 ^ auStack264;\n    uStack192 = fcn.140028f40(0x1f80, 0xffc0);\n    pppuStack200 = arg3;\n    iVar2 = fcn.140028824(in_stack_00000028, uStack192);\n    uVar3 = in_stack_00000040;\n    uVar4 = in_stack_00000040 >> 0x20;\n    if (iVar2 == 0) {\n        if (in_stack_00000048 == 2) {\n            uStack136 = in_stack_00000040;\n            uStack120 = uStack120 & 0xffffffe3 | 3;\n        }\n        pppuStack224 = &pppuStack200;\n        puStack232 = &stack0x00000038;\n        fcn.140028bc0(auStack184, &uStack192, in_stack_00000028, arg2);\n    }\n    cVar1 = fcn.140017d40();\n    if ((cVar1 == '\\0') || (arg4 == 0)) {\n        fcn.140028ef0(arg4);\n        fcn.140028f40(uStack192, 0xffc0);\n    }\n    else {\n        uStack216 = uStack192;\n        pppuStack224 = pppuStack200;\n        puStack232 = CONCAT44(uVar4, uVar3);\n        fcn.1400287bc(arg4, in_stack_00000030, arg1);\n    }\n    fcn.14000a100(uStack72 ^ auStack264);\n    return;\n}\n",
        "token_count": 530
    },
    "1400291c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.1400291c8(uchar (*arg1) [16])\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    uchar (*pauVar3) [16];\n    uint16_t in_DX;\n    uchar (*pauVar4) [16];\n    bool bVar5;\n    bool bVar6;\n    \n    pauVar3 = NULL;\n    pauVar4 = arg1;\n    if (1 < *0x14003d028) {\n        while( true ) {\n            if ((arg1 + 1U & 0xe) == 0) {\n                bVar5 = in_DX != 0;\n                bVar6 = in_DX == 0;\n                if (!bVar6) {\n                    while( true ) {\n                        iVar2 = pcmpistri(ZEXT216(in_DX), *arg1, 0x41);\n                        if (bVar5) {\n                            pauVar3 = *arg1 + iVar2 * 2;\n                        }\n                        if (bVar6) break;\n                        bVar5 = 0xffffffffffffffef < arg1;\n                        arg1 = arg1[1];\n                        bVar6 = arg1 == NULL;\n                    }\n                    return pauVar3;\n                }\n                while (iVar2 = pcmpistri(ZEXT416(0xffff0001), *arg1, 0x15),  !bVar6) {\n                    arg1 = arg1[1];\n                    bVar6 = arg1 == NULL;\n                }\n                return *arg1 + iVar2 * 2;\n            }\n            if (**arg1 == in_DX) {\n                pauVar3 = arg1;\n            }\n            if (**arg1 == 0) break;\n            arg1 = *arg1 + 2;\n        }\n        return pauVar3;\n    }\n    do {\n        puVar1 = *pauVar4;\n        pauVar4 = *pauVar4 + 2;\n    } while (*puVar1 != 0);\n    do {\n        pauVar4 = pauVar4[-1] + 0xe;\n        if (pauVar4 == arg1) break;\n    } while (**pauVar4 != in_DX);\n    if (**pauVar4 == in_DX) {\n        pauVar3 = pauVar4;\n    }\n    return pauVar3;\n}\n",
        "token_count": 505
    },
    "140006db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140006db0(int64_t arg1, ulong lpMultiByteStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    ulong arg4;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        arg4 = 0xffffffff;\n        uVar2 = lpMultiByteStr;\n        arg3._0_4_ = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n        if (arg3 == 0) {\n            fcn.140001cb0(0x14002ce48, \"Failed to get wchar_t buffer size.\\n\", uVar2, arg4);\n            return 0;\n        }\n        arg1 = fcn.140014130(arg3 + 1, 2);\n        if (arg1 == 0) {\n            fcn.140001cb0(\"win32_utils_from_utf8\", \"Out of memory.\\n\", uVar2, arg4);\n            return 0;\n        }\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, arg1, arg3);\n    if (iVar1 == 0) {\n        fcn.140001cb0(0x14002ce48, \"Failed to decode wchar_t from UTF-8\\n\", lpMultiByteStr, uVar2);\n        return 0;\n    }\n    return arg1;\n}\n",
        "token_count": 352
    },
    "14000e3e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14000e3e8(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    else {\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            fcn.14001438c(arg1);\n            uVar1 = fcn.14000e464(arg1, arg2);\n            fcn.140014398(arg1);\n            return uVar1;\n        }\n        fcn.14001a2b0(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 191
    },
    "14000e46": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14000e464(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = 0xffffffff;\n        if ((*(arg1 + 0x14) >> 0xd & 1) != 0) {\n            uVar1 = fcn.140015c6c(arg1, arg2);\n            fcn.14001a3b8(arg1);\n            uVar2 = fcn.1400192e4(arg1);\n            iVar3 = fcn.14001a02c(uVar2, arg2);\n            if (iVar3 < 0) {\n                uVar1 = 0xffffffff;\n            }\n            else if (*(arg1 + 0x28) != 0) {\n                fcn.140019f78(*(arg1 + 0x28));\n                *(arg1 + 0x28) = 0;\n            }\n        }\n        fcn.14001a2b0(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 315
    },
    "14000ed6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14000ed6c(ulong *arg1)\n\n{\n    ulong arg3;\n    ulong arg1_00;\n    uint8_t uVar1;\n    ulong uVar2;\n    uint64_t arg1_01;\n    \n    arg3 = arg1[1];\n    arg1_00 = **arg1;\n    uVar1 = fcn.14001cb24(arg1_00);\n    arg1_01 = *arg1[2];\n    uVar2 = fcn.14000ee88(arg1_01, *arg1[3], *arg1[4], **arg1);\n    fcn.14001cbec(arg1_01 & 0xffffffffffffff00 | uVar1, arg1_00, arg3);\n    return uVar2;\n}\n",
        "token_count": 172
    },
    "14000f31": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f314(int64_t arg1, char **arg2, ulong arg3)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char **ppcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    char *pcVar9;\n    uint64_t uVar10;\n    char cVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    pcVar2 = *arg2;\n    uVar10 = arg3;\n    if (pcVar2 == NULL) {\n        puVar6 = fcn.140016088();\n        *puVar6 = 0x16;\n        fcn.140019f10();\ncode_r0x00014000f385:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        goto code_r0x00014000f385;\n    }\n    cVar11 = *pcVar2;\n    pcVar9 = pcVar2 + 1;\n    uVar12 = in_R9D & 0xff;\n    *arg2 = pcVar9;\n    uVar13 = uVar12 | 2;\n    if ((cVar11 == '-') || (uVar13 = uVar12,  cVar11 == '+')) {\n        uVar12 = uVar13;\n        cVar11 = *pcVar9;\n        pcVar9 = pcVar2 + 2;\n        *arg2 = pcVar9;\n    }\n    uVar7 = uVar10;\n    if ((arg3 & 0xffffffef) == 0) {\n        if (cVar11 - 0x30U < 10) {\n            iVar4 = cVar11 + -0x30;\ncode_r0x00014000f40b:\n            if (iVar4 != 0) goto code_r0x00014000f459;\n            cVar1 = *pcVar9;\n            *arg2 = pcVar9 + 1;\n            if ((cVar1 + 0xa8U & 0xdf) != 0) {\n                *arg2 = pcVar9;\n                uVar7 = 8;\n                if (arg3 != 0) {\n                    uVar7 = uVar10;\n                }\n                if ((cVar1 != '\\0') && (*pcVar9 != cVar1)) {\n                    puVar6 = fcn.140016088();\n                    *puVar6 = 0x16;\n                    fcn.140019f10();\n                }\n                goto code_r0x00014000f465;\n            }\n            cVar11 = pcVar9[1];\n            *arg2 = pcVar9 + 2;\n            uVar7 = 0x10;\n        }\n        else {\n            if (cVar11 + 0x9fU < 0x1a) {\n                iVar4 = cVar11 + -0x57;\n                goto code_r0x00014000f40b;\n            }\n            if (cVar11 + 0xbfU < 0x1a) {\n                iVar4 = cVar11 + -0x37;\n                goto code_r0x00014000f40b;\n            }\ncode_r0x00014000f459:\n            uVar7 = 10;\n        }\n        if (arg3 != 0) {\n            uVar7 = uVar10;\n        }\n    }\ncode_r0x00014000f465:\n    pcVar9 = *arg2;\n    uVar13 = 0;\n    while( true ) {\n        if (cVar11 - 0x30U < 10) {\n            uVar8 = cVar11 - 0x30;\n        }\n        else if (cVar11 + 0x9fU < 0x1a) {\n            uVar8 = cVar11 - 0x57;\n        }\n        else if (cVar11 + 0xbfU < 0x1a) {\n            uVar8 = cVar11 - 0x37;\n        }\n        else {\n            uVar8 = 0xffffffff;\n        }\n        if (uVar7 <= uVar8) break;\n        cVar11 = *pcVar9;\n        uVar5 = uVar13 * uVar7;\n        uVar8 = uVar5 + uVar8;\n        uVar12 = uVar12 | (uVar8 < uVar5 || 0xffffffff / uVar7 < uVar13) << 2 | 8;\n        pcVar9 = pcVar9 + 1;\n        *arg2 = pcVar9;\n        uVar13 = uVar8;\n    }\n    *arg2 = pcVar9 + -1;\n    if ((cVar11 != '\\0') && (pcVar9[-1] != cVar11)) {\n        puVar6 = fcn.140016088();\n        *puVar6 = 0x16;\n        fcn.140019f10();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = pcVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = pcVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014000f598;\ncode_r0x00014000f595:\n            uVar13 = -uVar13;\n            goto code_r0x00014000f598;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x00014000f598;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x00014000f595;\n        uVar8 = 1;\n        uVar13 = uVar12;\n    }\n    else {\n        uVar13 = 1;\n        uVar8 = uVar12;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar13 & uVar8) != 0) {\n        ppcVar3 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppcVar3 != NULL) {\n                *ppcVar3 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppcVar3 != NULL) {\n            *ppcVar3 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x00014000f598:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1663
    },
    "14001120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14001120c(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 1;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000f314(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 345
    },
    "14001129": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14001129c(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 2;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000f5c8(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 347
    },
    "14001343": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140013434(int64_t arg1)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uint64_t arg3;\n    \n    iVar2 = *(arg1 + 0x34);\n    if ((iVar2 == 2) ||\n       (((iVar2 != 3 && (iVar2 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        puVar1 = *(arg1 + 0x18);\n        puVar4 = *(arg1 + 0x458);\n        if (*(arg1 + 0x458) == NULL) {\n            puVar4 = arg1 + 0x50;\n        }\n        *(arg1 + 0x18) = puVar1 + 8;\n        *puVar4 = *puVar1;\n        *(arg1 + 0x48) = 1;\n    }\n    else {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        iVar3 = *(arg1 + 0x458);\n        if (iVar3 == 0) {\n            iVar3 = arg1 + 0x50;\n            arg3 = 0x200;\n        }\n        else {\n            arg3 = *(arg1 + 0x450) >> 1;\n        }\n        iVar2 = fcn.14001db60(arg1 + 0x48, iVar3, arg3);\n        if (iVar2 != 0) {\n            *(arg1 + 0x38) = 1;\n        }\n    }\n    iVar3 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar3 = arg1 + 0x50;\n    }\n    *(arg1 + 0x40) = iVar3;\n    return 1;\n}\n",
        "token_count": 448
    },
    "14001553": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140015538(int16_t *arg1, int16_t *arg2)\n\n{\n    uint *puVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (*arg2 == 0)) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n        fcn.140019f10();\n    }\n    else if (*arg1 == 0) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n    }\n    else {\n        fcn.14001a258(&iStackX8);\n        if (iStackX8 != 0) {\n            iVar2 = fcn.14001f51c(arg1, arg2, 0x40, iStackX8);\n            if (iVar2 == 0) {\n                fcn.14001a2b0(iStackX8);\n            }\n            fcn.140014398(iStackX8);\n            return iVar2;\n        }\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x18;\n    }\n    return 0;\n}\n",
        "token_count": 277
    },
    "1400170f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nushort * fcn.1400170fc(uint64_t arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint64_t arg1_00;\n    int64_t iVar6;\n    ushort *puVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    uint64_t uStackX8;\n    \n    uVar9 = 0;\n    uStackX8 = 0;\n    iVar4 = fcn.140020718(&uStackX8, 0, 0x140031768);\n    uVar10 = uStackX8;\n    if (iVar4 == 0) {\n        uVar8 = uVar10;\n        if (uStackX8 == 0) goto code_r0x00014001719e;\n        iVar4 = fcn.1400207b8(uStackX8, 0);\n        uVar8 = uVar9;\n        arg1_00 = uVar10;\n        if (iVar4 != 0) {\n            arg1_00 = fcn.140017424(uVar10);\n            if ((arg1_00 == 0) || (iVar4 = fcn.1400207b8(arg1_00, 0),  iVar4 != 0)) {\n                fcn.140019f78(arg1_00);\n                uVar8 = uVar10;\n                goto code_r0x00014001719e;\n            }\n            fcn.140019f78(0);\n            uVar8 = uVar10;\n            uVar10 = arg1_00;\n        }\n    }\n    else {\n        uVar8 = uVar9;\n        if (iVar4 == 0x16) {\n            fcn.140019f30(0, 0, 0, 0, 0);\n            pcVar2 = swi(3);\n            puVar7 = (*pcVar2)();\n            return puVar7;\n        }\ncode_r0x00014001719e:\n        uVar10 = uVar9;\n        if ((arg1 == 0) || (iVar4 = fcn.1400207b8(arg1, 0),  arg1_00 = arg1,  iVar4 != 0)) {\n            iVar4 = fcn.1400207b8(0x14003175c, 0);\n            arg1_00 = 0x14003175c;\n            if (iVar4 != 0) {\n                arg1_00 = 0x140031760;\n            }\n        }\n    }\n    fcn.140019f78(uVar8);\n    iVar11 = -1;\n    if (arg2 != 0) {\n        uVar9 = 0xffffffffffffffff;\n        do {\n            uVar9 = uVar9 + 1;\n        } while (*(arg2 + uVar9 * 2) != 0);\n    }\n    iVar6 = -1;\n    do {\n        iVar6 = iVar6 + 1;\n    } while (*(arg1_00 + iVar6 * 2) != 0);\n    uVar5 = iVar6 + 0xc + uVar9;\n    uVar8 = uVar5;\n    puVar7 = fcn.140014130(uVar5, 2);\n    if (puVar7 == NULL) {\n        puVar7 = NULL;\ncode_r0x000140017223:\n        fcn.140014138(puVar7);\n        fcn.140019f78(uVar10);\n        return NULL;\n    }\n    *puVar7 = 0;\n    iVar4 = fcn.140020740(puVar7, uVar8, arg1_00);\n    if (iVar4 == 0) {\n        iVar6 = -1;\n        do {\n            iVar6 = iVar6 + 1;\n        } while (*(arg1_00 + iVar6 * 2) != 0);\n        uVar1 = arg1_00 + iVar6 * 2;\n        if (((((arg1_00 == uVar1) || (*(uVar1 - 2) == 0x5c)) || (*(uVar1 - 2) == 0x2f)) ||\n            (iVar4 = fcn.140020740(puVar7, uVar8, 0x140031758),  iVar4 == 0)) &&\n           ((arg2 == 0 || (iVar4 = fcn.140020740(puVar7, uVar8, arg2),  iVar4 == 0)))) {\n            do {\n                iVar11 = iVar11 + 1;\n            } while (puVar7[iVar11] != 0);\n            cVar3 = fcn.140017330(puVar7, puVar7 + iVar11, uVar8 - (iVar11 * 2 >> 1), uVar9 & 0xffffffff);\n            if (cVar3 != '\\0') {\n                fcn.140014138(0);\n                fcn.140019f78(uVar10);\n                return puVar7;\n            }\n            goto code_r0x000140017223;\n        }\n    }\n    fcn.140019f30(0, 0, 0, 0, 0);\n    pcVar2 = swi(3);\n    puVar7 = (*pcVar2)();\n    return puVar7;\n}\n",
        "token_count": 1204
    },
    "14001733": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140017330(ulong arg1, ulong arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t *piVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    int32_t iVar8;\n    \n    uVar7 = 0;\n    fcn.14001f808(0xc);\n    iVar8 = *0x14003d42c;\n    if (*0x14004d244 < arg4) {\n        iVar8 = 1;\n    }\n    *0x14004d244 = arg4;\n    *0x14003d42c = iVar8;\n    puVar4 = fcn.140016088();\n    uVar1 = *puVar4;\n    do {\n        do {\n            *0x14003d42c = *0x14003d42c + 1;\n            if (0x7fffffff < *0x14003d42c - iVar8) {\n                puVar4 = fcn.140016088();\n                goto code_r0x0001400173e3;\n            }\n            iVar3 = fcn.14002047c(*0x14003d42c, arg2, arg3, 10);\n            if (iVar3 != 0) {\n                fcn.140019f30(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar7 = (*pcVar2)();\n                return uVar7;\n            }\n            puVar4 = fcn.140016088();\n            *puVar4 = 0;\n            iVar3 = fcn.1400207b8(arg1, 0);\n        } while (iVar3 == 0);\n        piVar5 = fcn.140016088();\n    } while (*piVar5 == 0xd);\n    puVar4 = fcn.140016088();\n    uVar7 = 1;\ncode_r0x0001400173e3:\n    *puVar4 = uVar1;\n    uVar6 = fcn.14001f868(0xc);\n    return uVar6 & 0xffffffffffffff00 | uVar7;\n}\n",
        "token_count": 506
    },
    "1400175a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400175a8(int64_t arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar1 = 0xffffffffffffffff;\n    }\n    else {\n        fcn.14001438c(arg1);\n        uVar1 = fcn.140017614(arg1, arg2);\n        fcn.140014398(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 153
    },
    "14001834": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140018348(int16_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    int16_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int16_t *piVar8;\n    \n    iVar5 = *arg1;\n    iVar6 = 0;\n    piVar8 = arg1;\n    while (iVar5 != 0) {\n        iVar7 = iVar6 + 1;\n        if (iVar5 == 0x3d) {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (piVar8[iVar6] != 0);\n        piVar8 = piVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        iVar5 = *piVar8;\n    }\n    arg1_00 = fcn.14001deb8(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x0001400183b3:\n        fcn.140019f78(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != 0; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != 0);\n            iVar7 = iVar7 + 2;\n            if (*arg1 != 0x3d) {\n                iVar6 = fcn.14001deb8(iVar7, 2);\n                if (iVar6 == 0) {\n                    fcn.140018464(arg1_00);\n                    fcn.140019f78(0);\n                    goto code_r0x0001400183b3;\n                }\n                iVar2 = fcn.14001f9a4(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.140019f30(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.140019f78(0);\n            }\n        }\n        fcn.140019f78(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 598
    },
    "14001858": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140018588(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = *0x14004c9b0;\n    if (*0x14004c9b0 == NULL) {\ncode_r0x0001400185ab:\n        iVar2 = 0xffffffff;\n    }\n    else {\n        for (; iVar2 = *piVar3,  iVar2 != 0; piVar3 = piVar3 + 1) {\n            iVar1 = fcn.14001e870(0, 0);\n            if (iVar1 == 0) goto code_r0x0001400185ab;\n            iVar2 = fcn.14001deb8(iVar1, 2);\n            if (iVar2 == 0) {\n                iVar2 = 0;\ncode_r0x000140018638:\n                fcn.140019f78(iVar2);\n                goto code_r0x0001400185ab;\n            }\n            iVar1 = fcn.14001e870(0, 0);\n            if (iVar1 == 0) goto code_r0x000140018638;\n            fcn.140020324(iVar2, 0);\n            fcn.140019f78(0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 298
    },
    "140018a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140018a40(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong in_R9;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleExW)(0, L\"mscoree.dll\", aiStackX16, in_R9, 0xfffffffffffffffe);\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(aiStackX16[0], \"CorExitProcess\"),  iVar1 != 0))\n    {\n        (**0x14002a368)(arg1);\n    }\n    if (aiStackX16[0] != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "140019e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140019e44(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t *puVar3;\n    uint8_t uVar4;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar2 = fcn.140019b8c(in_stack_00000030);\n    if (((iVar2 == 0) || (*(iVar2 + 0x3b8) == 0)) &&\n       (puVar3 = fcn.140019bf8(0x14004ca20, in_stack_00000030),  uVar4 = *0x14003d018 & 0x3f, \n       ((*puVar3 ^ *0x14003d018) >> uVar4 | (*puVar3 ^ *0x14003d018) << 0x40 - uVar4) == 0)) {\n        fcn.140019f30(arg1, arg2, arg3, arg4, in_stack_00000028);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**0x14002a368)(arg1, arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 297
    },
    "14001aae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14001aae4(ulong arg1, int16_t *arg2, int64_t arg3)\n\n{\n    int16_t *piVar1;\n    int16_t *piVar2;\n    uint8_t *puVar3;\n    uint8_t uVar4;\n    ulong uVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int16_t iVar9;\n    int16_t *piVar10;\n    int16_t *piVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    int16_t aiStackX8 [4];\n    int16_t iStackX16;\n    int32_t aiStackX24 [2];\n    \n    uVar7 = arg1 & 0x3f;\n    iVar12 = arg1 >> 6;\n    iVar13 = 0;\n    iVar8 = *(iVar12 * 8 + 0x14004ca30);\n    uVar5 = *(iVar8 + 0x28 + uVar7 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar3 = iVar8 + 0x38 + uVar7 * 0x48;\n        *puVar3 = *puVar3 & 0xfb;\n    }\n    else {\n        puVar3 = iVar8 + 0x38 + uVar7 * 0x48;\n        *puVar3 = *puVar3 | 4;\n    }\n    piVar2 = arg2 + arg3;\n    piVar11 = arg2;\n    if (arg2 < piVar2) {\n        piVar10 = arg2;\n        do {\n            iVar9 = *piVar10;\n            if (iVar9 == 0x1a) {\n                iVar8 = *(iVar12 * 8 + 0x14004ca30);\n                uVar4 = *(iVar8 + 0x38 + uVar7 * 0x48);\n                if ((uVar4 & 0x40) != 0) {\ncode_r0x00014001ac5f:\n                    *piVar11 = iVar9;\n                    goto code_r0x00014001ac62;\n                }\n                *(iVar8 + 0x38 + uVar7 * 0x48) = uVar4 | 2;\n                break;\n            }\n            piVar1 = piVar10 + 1;\n            if (iVar9 == 0xd) {\n                if (piVar2 <= piVar1) {\n                    iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar5, aiStackX8, 2, aiStackX24, 0);\n                    if ((iVar6 == 0) || (aiStackX24[0] == 0)) {\ncode_r0x00014001ac5a:\n                        iVar9 = 0xd;\n                        goto code_r0x00014001ac5f;\n                    }\n                    if ((*(*(iVar12 * 8 + 0x14004ca30) + 0x38 + uVar7 * 0x48) & 0x48) == 0) {\n                        if ((aiStackX8[0] != 10) || (piVar11 != arg2)) {\n                            fcn.14001b8b4(arg1 & 0xffffffff, 0xfffffffffffffffe, 1);\n                            if (aiStackX8[0] != 10) goto code_r0x00014001ac5a;\n                            break;\n                        }\n                    }\n                    else if (aiStackX8[0] != 10) {\n                        iStackX16 = aiStackX8[0];\n                        *piVar11 = 0xd;\n                        do {\n                            *(*(iVar12 * 8 + 0x14004ca30) + uVar7 * 0x48 + 0x3a + iVar13) = *(&iStackX16 + iVar13);\n                            iVar13 = iVar13 + 1;\n                        } while (iVar13 < 2);\n                        *(*(iVar12 * 8 + 0x14004ca30) + 0x3c + uVar7 * 0x48) = 10;\ncode_r0x00014001ac62:\n                        piVar11 = piVar11 + 1;\n                        break;\n                    }\n                    *piVar11 = 10;\n                    goto code_r0x00014001ac62;\n                }\n                iVar8 = 2;\n                if (*piVar1 == 10) {\n                    iVar8 = 4;\n                }\n                piVar10 = piVar10 + iVar8;\n                iVar9 = 10;\n                if (*piVar1 != 10) {\n                    iVar9 = 0xd;\n                }\n                *piVar11 = iVar9;\n            }\n            else {\n                *piVar11 = iVar9;\n                piVar10 = piVar1;\n            }\n            piVar11 = piVar11 + 1;\n        } while (piVar10 < piVar2);\n    }\n    return (piVar11 - arg2 >> 1) * 2;\n}\n",
        "token_count": 1119
    },
    "14001b64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14001b644(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    bool bVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((arg1 < 0) || (*0x14004ce30 <= arg1)) {\n            bVar1 = false;\n        }\n        else {\n            bVar1 = true;\n        }\n        if (bVar1) {\n            iVar3 = arg1 >> 6;\n            if ((*(*(iVar3 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140016d50(arg1 & 0xffffffff);\n                uVar2 = 0xffffffffffffffff;\n                if ((*(*(iVar3 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar2 = fcn.14001b764(arg1, arg2, arg3, arg4);\n                }\n                fcn.140016e38(arg1);\n                return uVar2;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 503
    },
    "14001b76": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14001b764(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t aiStack24 [2];\n    \n    iVar4 = fcn.14001705c(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, aiStack24, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140016044(uVar3, arg4);\n        }\n        else if (aiStack24[0] != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return aiStack24[0];\n        }\n    }\n    return -1;\n}\n",
        "token_count": 301
    },
    "14001c47": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14001c470(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    bool bVar1;\n    uint uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((arg1 < 0) || (*0x14004ce30 <= arg1)) {\n            bVar1 = false;\n        }\n        else {\n            bVar1 = true;\n        }\n        if (bVar1) {\n            iVar3 = arg1 >> 6;\n            if ((*(*(iVar3 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140016d50(arg1 & 0xffffffff);\n                uVar2 = 0xffffffff;\n                if ((*(*(iVar3 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar2 = fcn.14001c590(arg1, arg2, arg3, arg4);\n                }\n                fcn.140016e38(arg1);\n                return uVar2;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 501
    },
    "14002031": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14002031c(uint64_t arg1, ulong arg2)\n\n{\n    uint64_t arg2_00;\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    \n    uVar9 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.14000b538(arg1, 0x3d);\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n        fcn.140019f78(arg1);\n        return 0xffffffffffffffff;\n    }\n    cVar1 = *(uVar5 + 1);\n    if (*0x14004c9b0 == *0x14004c9c8) {\n        *0x14004c9b0 = fcn.140020144(*0x14004c9b0);\n    }\n    if (*0x14004c9b0 == NULL) {\n        if ((arg2 == 0) || (*0x14004c9b8 == 0)) {\n            if (cVar1 == '\\0') goto code_r0x00014001fb3e;\n            *0x14004c9b0 = fcn.14001deb8(1, 8);\n            fcn.140019f78(0);\n            if (*0x14004c9b0 != NULL) {\n                if (*0x14004c9b8 == 0) {\n                    *0x14004c9b8 = fcn.14001deb8(1, 8);\n                    fcn.140019f78(0);\n                    if (*0x14004c9b8 == 0) goto code_r0x00014001fb3a;\n                }\ncode_r0x00014001fbd9:\n                if (*0x14004c9b0 != NULL) goto code_r0x00014001fbe2;\n            }\n        }\n        else {\n            iVar6 = fcn.14001867c();\n            if (iVar6 != 0) {\n                if (*0x14004c9b0 == *0x14004c9c8) {\n                    *0x14004c9b0 = fcn.140020144(*0x14004c9b0);\n                }\n                goto code_r0x00014001fbd9;\n            }\n            puVar4 = fcn.140016088();\n            *puVar4 = 0x16;\n        }\n    }\n    else {\ncode_r0x00014001fbe2:\n        piVar7 = *0x14004c9b0;\n        iVar11 = uVar5 - arg1;\n        iVar6 = **0x14004c9b0;\n        piVar8 = *0x14004c9b0;\n        while (iVar6 != 0) {\n            iVar3 = fcn.14002652c(arg1, iVar6, iVar11);\n            if ((iVar3 == 0) && ((*(iVar11 + *piVar8) == '=' || (*(iVar11 + *piVar8) == '\\0')))) {\n                iVar6 = piVar8 - piVar7 >> 3;\n                goto code_r0x00014001fc31;\n            }\n            piVar8 = piVar8 + 1;\n            iVar6 = *piVar8;\n        }\n        iVar6 = -(piVar8 - piVar7 >> 3);\ncode_r0x00014001fc31:\n        uVar10 = uVar9;\n        if ((-1 < iVar6) && (*piVar7 != 0)) {\n            fcn.140019f78(piVar7[iVar6]);\n            if (cVar1 == '\\0') {\n                for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                    piVar7[iVar6] = piVar7[iVar6 + 1];\n                }\n                piVar7 = fcn.14002257c(piVar7, iVar6, 8);\n                fcn.140019f78(0);\n                uVar10 = arg1;\n                if (piVar7 != NULL) {\n                    *0x14004c9b0 = piVar7;\n                }\n            }\n            else {\n                piVar7[iVar6] = arg1;\n            }\ncode_r0x00014001fcf0:\n            if (arg2 == 0) {\ncode_r0x00014001fd90:\n                fcn.140019f78(uVar10);\n                return 0;\n            }\n            iVar6 = -1;\n            do {\n                iVar11 = iVar6;\n                iVar6 = iVar11 + 1;\n            } while (*(arg1 + iVar11 + 1) != '\\0');\n            iVar6 = fcn.14001deb8(iVar11 + 3, 1);\n            if (iVar6 == 0) {\n                fcn.140019f78(0);\n            }\n            else {\n                iVar3 = fcn.14001930c(iVar6, iVar11 + 3, arg1);\n                if (iVar3 != 0) {\n                    fcn.140019f30(0, 0, 0, 0, 0);\n                    pcVar2 = swi(3);\n                    uVar9 = (*pcVar2)();\n                    return uVar9;\n                }\n                *((iVar6 - arg1) + uVar5) = 0;\n                iVar3 = fcn.140026644(iVar6, -(cVar1 != '\\0') & uVar5 + 1 + (iVar6 - arg1));\n                if (iVar3 != 0) {\n                    fcn.140019f78(iVar6);\n                    goto code_r0x00014001fd90;\n                }\n                puVar4 = fcn.140016088();\n                *puVar4 = 0x2a;\n                fcn.140019f78(iVar6);\n                uVar9 = 0xffffffff;\n            }\n            fcn.140019f78(uVar10);\n            return uVar9;\n        }\n        if (cVar1 == '\\0') goto code_r0x00014001fb3e;\n        arg2_00 = -iVar6 + 2;\n        if ((-iVar6 <= arg2_00) && (arg2_00 < 0x1fffffffffffffff)) {\n            piVar7 = fcn.14002257c(piVar7, arg2_00, 8);\n            fcn.140019f78(0);\n            if (piVar7 != NULL) {\n                piVar7[-iVar6] = arg1;\n                piVar7[1 - iVar6] = 0;\n                *0x14004c9b0 = piVar7;\n                goto code_r0x00014001fcf0;\n            }\n        }\n    }\ncode_r0x00014001fb3a:\n    uVar9 = 0xffffffffffffffff;\ncode_r0x00014001fb3e:\n    fcn.140019f78(arg1);\n    return uVar9 & 0xffffffff;\n}\n",
        "token_count": 1663
    },
    "14002032": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140020324(uint64_t arg1, ulong arg2)\n\n{\n    uint64_t arg2_00;\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    int64_t arg3;\n    int64_t iVar10;\n    \n    uVar9 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.14000b6f4(arg1);\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n        fcn.140019f78(arg1);\n        return 0xffffffffffffffff;\n    }\n    iVar1 = *(uVar5 + 2);\n    if (*0x14004c9b8 == *0x14004c9c0) {\n        *0x14004c9b8 = fcn.14002022c(*0x14004c9b8);\n    }\n    if (*0x14004c9b8 == NULL) {\n        if ((arg2 == 0) || (*0x14004c9b0 == 0)) {\n            if (iVar1 == 0) goto code_r0x00014001fe98;\n            if (*0x14004c9b0 == 0) {\n                *0x14004c9b0 = fcn.14001deb8(1, 8);\n                fcn.140019f78(0);\n                if (*0x14004c9b0 == 0) goto code_r0x00014001fe94;\n                if (*0x14004c9b8 != NULL) goto code_r0x00014001ff3c;\n            }\n            *0x14004c9b8 = fcn.14001deb8(1, 8);\n            fcn.140019f78(0);\n            if (*0x14004c9b8 != NULL) goto code_r0x00014001ff33;\n        }\n        else {\n            iVar6 = fcn.1400186b8();\n            if (iVar6 == 0) {\n                puVar4 = fcn.140016088();\n                *puVar4 = 0x16;\n            }\n            else {\n                if (*0x14004c9b8 == *0x14004c9c0) {\n                    *0x14004c9b8 = fcn.14002022c(*0x14004c9b8);\n                }\ncode_r0x00014001ff33:\n                if (*0x14004c9b8 != NULL) goto code_r0x00014001ff3c;\n            }\n        }\n    }\n    else {\ncode_r0x00014001ff3c:\n        piVar7 = *0x14004c9b8;\n        arg3 = uVar5 - arg1 >> 1;\n        iVar6 = **0x14004c9b8;\n        piVar8 = *0x14004c9b8;\n        while (iVar6 != 0) {\n            iVar3 = fcn.1400263ec(arg1, iVar6, arg3);\n            if ((iVar3 == 0) && ((*(*piVar8 + arg3 * 2) == 0x3d || (*(*piVar8 + arg3 * 2) == 0)))) {\n                iVar6 = piVar8 - piVar7 >> 3;\n                goto code_r0x00014001ff91;\n            }\n            piVar8 = piVar8 + 1;\n            iVar6 = *piVar8;\n        }\n        iVar6 = -(piVar8 - piVar7 >> 3);\ncode_r0x00014001ff91:\n        uVar5 = uVar9;\n        if ((-1 < iVar6) && (*piVar7 != 0)) {\n            fcn.140019f78(piVar7[iVar6]);\n            if (iVar1 == 0) {\n                for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                    piVar7[iVar6] = piVar7[iVar6 + 1];\n                }\n                piVar7 = fcn.14002257c(piVar7, iVar6, 8);\n                fcn.140019f78(0);\n                uVar5 = arg1;\n                if (piVar7 != NULL) {\n                    *0x14004c9b8 = piVar7;\n                }\n            }\n            else {\n                piVar7[iVar6] = arg1;\n            }\ncode_r0x000140020052:\n            if (arg2 == 0) {\ncode_r0x0001400200ef:\n                fcn.140019f78(uVar5);\n                return 0;\n            }\n            iVar6 = -1;\n            do {\n                iVar10 = iVar6;\n                iVar6 = iVar10 + 1;\n            } while (*(arg1 + iVar6 * 2) != 0);\n            iVar10 = iVar10 + 3;\n            iVar6 = fcn.14001deb8(iVar10, 2);\n            if (iVar6 == 0) {\n                fcn.140019f78(0);\n            }\n            else {\n                iVar3 = fcn.14001f9a4(iVar6, iVar10, arg1);\n                if (iVar3 != 0) {\n                    fcn.140019f30(0, 0, 0, 0, 0);\n                    pcVar2 = swi(3);\n                    uVar9 = (*pcVar2)();\n                    return uVar9;\n                }\n                *(iVar6 + arg3 * 2) = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar6, -(iVar1 != 0) & iVar6 + (arg3 + 1) * 2);\n                if (iVar3 != 0) {\n                    fcn.140019f78(iVar6);\n                    goto code_r0x0001400200ef;\n                }\n                puVar4 = fcn.140016088();\n                *puVar4 = 0x2a;\n                fcn.140019f78(iVar6);\n                uVar9 = 0xffffffff;\n            }\n            fcn.140019f78(uVar5);\n            return uVar9;\n        }\n        if (iVar1 == 0) goto code_r0x00014001fe98;\n        arg2_00 = -iVar6 + 2;\n        if ((-iVar6 <= arg2_00) && (arg2_00 < 0x1fffffffffffffff)) {\n            piVar7 = fcn.14002257c(piVar7, arg2_00, 8);\n            fcn.140019f78(0);\n            if (piVar7 != NULL) {\n                piVar7[-iVar6] = arg1;\n                piVar7[1 - iVar6] = 0;\n                *0x14004c9b8 = piVar7;\n                goto code_r0x000140020052;\n            }\n        }\n    }\ncode_r0x00014001fe94:\n    uVar9 = 0xffffffffffffffff;\ncode_r0x00014001fe98:\n    fcn.140019f78(arg1);\n    return uVar9 & 0xffffffff;\n}\n",
        "token_count": 1695
    },
    "14002049": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140020490(int64_t *arg1, int64_t *arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t arg3_00;\n    int64_t iVar4;\n    ulong uVar6;\n    int64_t iVar5;\n    \n    fcn.14001f808(0xb);\n    if (arg1 != NULL) {\n        *arg1 = 0;\n        if (arg2 != NULL) {\n            *arg2 = 0;\n        }\n        if (arg3 != 0) {\n            arg3_00 = fcn.140020588(arg3);\n            uVar6 = 0;\n            if (arg3_00 != 0) {\n                iVar4 = -1;\n                do {\n                    iVar5 = iVar4;\n                    iVar4 = iVar5 + 1;\n                } while (*(arg3_00 + iVar4 * 2) != 0);\n                iVar5 = iVar5 + 2;\n                iVar4 = fcn.140014130(iVar5, 2);\n                *arg1 = iVar4;\n                if (iVar4 == 0) {\n                    puVar3 = fcn.140016088();\n                    *puVar3 = 0xc;\n                    uVar6 = 0xc;\n                }\n                else {\n                    iVar2 = fcn.14001f9a4(iVar4, iVar5, arg3_00);\n                    if (iVar2 != 0) {\n                        fcn.140019f30(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar6 = (*pcVar1)();\n                        return uVar6;\n                    }\n                    if (arg2 != NULL) {\n                        *arg2 = iVar5;\n                        uVar6 = 0;\n                    }\n                }\n            }\n            goto code_r0x000140020548;\n        }\n    }\n    puVar3 = fcn.140016088();\n    *puVar3 = 0x16;\n    fcn.140019f10();\n    uVar6 = 0x16;\ncode_r0x000140020548:\n    fcn.14001f868(0xb);\n    return uVar6;\n}\n",
        "token_count": 502
    },
    "14002073": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140020738(uint64_t *arg1, ushort *arg2, uint64_t arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    bool bVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t arg3_00;\n    int64_t iVar5;\n    uint64_t uVar7;\n    ulong uVar8;\n    int64_t iVar6;\n    \n    fcn.14001f808(0xb);\n    uVar8 = 0;\n    if (arg1 != NULL) {\n        *arg1 = 0;\n        if (arg2 == NULL) {\ncode_r0x00014002067c:\n            if (arg3 == 0) goto code_r0x000140020681;\ncode_r0x000140020688:\n            bVar2 = false;\n        }\n        else {\n            if (arg3 == 0) {\n                if (arg2 == NULL) goto code_r0x00014002067c;\n                goto code_r0x000140020688;\n            }\ncode_r0x000140020681:\n            bVar2 = true;\n        }\n        if (bVar2) {\n            if (arg2 != NULL) {\n                *arg2 = 0;\n            }\n            arg3_00 = fcn.140020588(arg4);\n            if (arg3_00 != 0) {\n                iVar5 = -1;\n                do {\n                    iVar6 = iVar5;\n                    iVar5 = iVar6 + 1;\n                } while (*(arg3_00 + iVar5 * 2) != 0);\n                uVar7 = iVar6 + 2;\n                *arg1 = uVar7;\n                if (arg3 != 0) {\n                    if (arg3 < uVar7) {\n                        uVar8 = 0x22;\n                    }\n                    else {\n                        iVar3 = fcn.14001f9a4(arg2, arg3, arg3_00);\n                        if (iVar3 != 0) {\n                            fcn.140019f30(0, 0, 0, 0, 0);\n                            pcVar1 = swi(3);\n                            uVar8 = (*pcVar1)();\n                            return uVar8;\n                        }\n                    }\n                }\n            }\n            goto code_r0x0001400206da;\n        }\n    }\n    puVar4 = fcn.140016088();\n    uVar8 = 0x16;\n    *puVar4 = 0x16;\n    fcn.140019f10();\ncode_r0x0001400206da:\n    fcn.14001f868(0xb);\n    return uVar8;\n}\n",
        "token_count": 586
    },
    "140020e2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140020e24(int64_t arg1, ulong arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    \n    uVar5 = 0;\n    iVar3 = -1;\n    do {\n        iVar6 = iVar3;\n        iVar3 = iVar6 + 1;\n    } while (*(arg1 + iVar3 * 2) != 0);\n    uVar4 = iVar6 + 2;\n    if (~arg3 < uVar4) {\n        return 0xc;\n    }\n    iVar6 = arg3 + 1 + uVar4;\n    iVar3 = fcn.14001deb8(iVar6, 2);\n    if (((arg3 != 0) && (iVar2 = fcn.140020920(iVar3, iVar6, arg2, arg3),  iVar2 != 0)) ||\n       (iVar2 = fcn.140020920(iVar3 + arg3 * 2, iVar6 - arg3, arg1, uVar4),  iVar2 != 0)) {\n        fcn.140019f30(0, 0, 0, 0, 0);\n        pcVar1 = swi(3);\n        uVar5 = (*pcVar1)();\n        return uVar5;\n    }\n    if (arg4[1] == arg4[2]) {\n        if (*arg4 == 0) {\n            iVar6 = fcn.14001deb8(4, 8);\n            *arg4 = iVar6;\n            fcn.140019f78(0);\n            iVar6 = *arg4;\n            if (iVar6 != 0) {\n                arg4[1] = iVar6;\n                arg4[2] = iVar6 + 0x20;\n                goto code_r0x000140020f7c;\n            }\n        }\n        else {\n            uVar4 = arg4[2] - *arg4 >> 3;\n            if (uVar4 < 0x8000000000000000) {\n                iVar6 = fcn.14002257c(*arg4, uVar4 * 2, 8);\n                if (iVar6 != 0) {\n                    *arg4 = iVar6;\n                    arg4[1] = iVar6 + uVar4 * 8;\n                    arg4[2] = iVar6 + uVar4 * 0x10;\n                    fcn.140019f78(0);\n                    goto code_r0x000140020f7c;\n                }\n                fcn.140019f78(0);\n            }\n        }\n        uVar5 = 0xc;\n        fcn.140019f78(iVar3);\n    }\n    else {\ncode_r0x000140020f7c:\n        *arg4[1] = iVar3;\n        arg4[1] = arg4[1] + 8;\n    }\n    fcn.140019f78(0);\n    return uVar5;\n}\n",
        "token_count": 688
    },
    "140024ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140024ea0(uint16_t *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    ulong *puVar6;\n    ulong *puVar7;\n    uint16_t *puVar8;\n    int32_t *piVar9;\n    uint32_t *puVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    int32_t aiStackX16 [2];\n    uint32_t auStackX24 [2];\n    uchar auStackX32 [8];\n    ulong var_48h;\n    ulong var_50h;\n    ulong var_58h;\n    int64_t iVar13;\n    \n    puVar6 = fcn.140024828();\n    puVar7 = fcn.140024830();\n    aiStackX16[0] = 0;\n    auStackX24[0] = 0;\n    iVar5 = fcn.140024898(aiStackX16);\n    if ((iVar5 == 0) && (iVar5 = fcn.140024838(auStackX24),  iVar5 == 0)) {\n        if (*0x14004d2c0 != 0) {\n            puVar8 = arg1;\n            do {\n                uVar1 = *puVar8;\n                uVar2 = *(puVar8 + (*0x14004d2c0 - arg1));\n                if (uVar1 != uVar2) break;\n                puVar8 = puVar8 + 1;\n            } while (uVar2 != 0);\n            if (uVar1 == uVar2) {\n                return;\n            }\n        }\n        iVar11 = -1;\n        do {\n            iVar11 = iVar11 + 1;\n        } while (arg1[iVar11] != 0);\n        iVar11 = fcn.14001cc2c(iVar11 * 2 + 2);\n        if (iVar11 != 0) {\n            fcn.140019f78(*0x14004d2c0);\n            iVar12 = -1;\n            do {\n                iVar13 = iVar12;\n                iVar12 = iVar13 + 1;\n            } while (arg1[iVar12] != 0);\n            *0x14004d2c0 = iVar11;\n            iVar5 = fcn.14001f9a4(iVar11, iVar13 + 2, arg1);\n            if (iVar5 != 0) goto code_r0x000140025105;\n            fcn.14000b880(*puVar7, 0, 0x80);\n            fcn.14000b880(puVar7[1], 0, 0x80);\n            fcn.14000b880(*puVar6, 0, 0x40);\n            fcn.14000b880(puVar6[1], 0, 0x40);\n            fcn.140024dbc(arg1, *puVar7, *puVar6, 3);\n            iVar11 = 3;\n            do {\n                if (*arg1 != 0) {\n                    arg1 = arg1 + 1;\n                }\n                iVar11 = iVar11 + -1;\n            } while (iVar11 != 0);\n            uVar1 = *arg1;\n            puVar8 = arg1 + 1;\n            if (uVar1 != 0x2d) {\n                puVar8 = arg1;\n            }\n            aiStackX16[0] = fcn.140027ce4(puVar8, auStackX32);\n            aiStackX16[0] = aiStackX16[0] * 0xe10;\n            for (; (*puVar8 == 0x2b || (*puVar8 - 0x30 < 10)); puVar8 = puVar8 + 1) {\n            }\n            if (*puVar8 == 0x3a) {\n                puVar8 = puVar8 + 1;\n                iVar5 = fcn.140027ce4(puVar8, auStackX32);\n                aiStackX16[0] = aiStackX16[0] + iVar5 * 0x3c;\n                uVar2 = *puVar8;\n                while ((0x2f < uVar2 && (uVar2 < 0x3a))) {\n                    puVar8 = puVar8 + 1;\n                    uVar2 = *puVar8;\n                }\n                if (uVar2 == 0x3a) {\n                    puVar8 = puVar8 + 1;\n                    iVar5 = fcn.140027ce4(puVar8, auStackX32);\n                    aiStackX16[0] = aiStackX16[0] + iVar5;\n                    for (; (0x2f < *puVar8 && (*puVar8 < 0x3a)); puVar8 = puVar8 + 1) {\n                    }\n                }\n            }\n            if (uVar1 == 0x2d) {\n                aiStackX16[0] = -aiStackX16[0];\n            }\n            auStackX24[0] = *puVar8 != 0;\n            if (*puVar8 != 0) {\n                fcn.140024dbc(puVar8, puVar7[1], puVar6[1], 3);\n            }\n            iVar5 = aiStackX16[0];\n            piVar9 = fcn.140024820();\n            uVar4 = auStackX24[0];\n            *piVar9 = iVar5;\n            puVar10 = fcn.140024810();\n            *puVar10 = uVar4;\n        }\n        fcn.140019f78(0);\n        return;\n    }\ncode_r0x000140025105:\n    fcn.140019f30(0, 0, 0, 0, 0);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 1327
    },
    "140001c1": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001c10(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001d00(arg2, &uStackX24);\n    fcn.1400144e0(arg1);\n    return;\n}\n",
        "token_count": 93
    },
    "140001cb": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001cb0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong arg3_00;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001d00(arg2, &uStackX24);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    arg3_00 = fcn.140006670(uVar1);\n    fcn.140001be0(\"%s: %s\", arg1, arg3_00, arg4);\n    return;\n}\n",
        "token_count": 151
    },
    "140002de": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140002de0(ulong param_1, ulong param_2)\n\n{\n    int64_t iVar1;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140002dec;\n    iVar1 = fcn.14000a130();\n    iVar1 = -iVar1;\n    *(&stack0x00002038 + iVar1) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar1;\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002e17;\n    fcn.140006db0(&stack0x00000038 + iVar1, param_1, 0x1000);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002e2a;\n    fcn.140006db0(&stack0x00000018 + iVar1, param_2, 10);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002e39;\n    fcn.140015538(&stack0x00000038 + iVar1, &stack0x00000018 + iVar1);\n    *(&stack0xfffffffffffffff0 + iVar1) = 0x140002e49;\n    fcn.14000a100(*(&stack0x00002038 + iVar1) ^ &stack0xfffffffffffffff8 + iVar1);\n    return;\n}\n",
        "token_count": 312
    },
    "140004b2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.140004b20(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong *puVar1;\n    ulong uStackX8;\n    uint auStackX16 [2];\n    \n    auStackX16[0] = 0;\n    uStackX8 = 0;\n    puVar1 = (**0x14002a360)(0x40);\n    *puVar1 = 0x140004110;\n    puVar1[4] = &uStackX8;\n    puVar1[5] = auStackX16;\n    puVar1[2] = arg1;\n    *(puVar1 + 3) = arg2;\n    puVar1[6] = arg4;\n    puVar1[7] = arg3;\n    (**0x14002a360)(0x14004aec0);\n    (**0x14002a360)(*(arg1 + 8), puVar1, 0);\n    (**0x14002a360)(*(arg1 + 8));\n    if (arg2 == 0) {\n        (**0x14002a360)(&uStackX8, 0x14004aec0, 0);\n        (**0x14002a360)(0x14004aec0);\n        puVar1 = &uStackX8;\n    }\n    else {\n        puVar1 = 0x14004aec0;\n    }\n    (**0x14002a360)(puVar1);\n    return auStackX16[0];\n}\n",
        "token_count": 337
    },
    "140004fe": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.140004fe0(int64_t arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    uint auStackX8 [2];\n    ulong uStackX16;\n    \n    auStackX8[0] = 0;\n    uStackX16 = 0;\n    puVar1 = (**0x14002a360)(0x40);\n    *puVar1 = 0x140004110;\n    puVar1[4] = &uStackX16;\n    puVar1[5] = auStackX8;\n    puVar1[6] = 0x1400040d0;\n    puVar1[2] = arg1;\n    *(puVar1 + 3) = 1;\n    puVar1[7] = arg2;\n    (**0x14002a360)(0x14004aec0);\n    (**0x14002a360)(*(arg1 + 8), puVar1, 0);\n    (**0x14002a360)(*(arg1 + 8));\n    (**0x14002a360)(0x14004aec0);\n    return auStackX8[0];\n}\n",
        "token_count": 255
    },
    "14000667": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140006670(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg3;\n    uchar *arg3_00;\n    ulong uVar3;\n    int64_t iStackX24;\n    uint auStackX32 [2];\n    ulong uStack16;\n    \n    uStack16 = 0x14000667c;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00002038 + iVar2) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar2;\n    if (param_1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x14000669d;\n        param_1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    *(&stack0x00000028 + iVar2) = 0;\n    uVar3 = 0x400;\n    *(&stack0x00000020 + iVar2) = 0x1000;\n    arg3 = param_1;\n    *(&stack0x00000018 + iVar2) = &stack0x00000038 + iVar2;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x1400066cc;\n    iVar1 = (*_sym.imp.KERNEL32.dll_FormatMessageW)(0x1000, 0);\n    if (iVar1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x1400066e3;\n        fcn.140001cb0(0x14002ccc0, \"No error messages generated.\\n\", arg3, uVar3);\n    }\n    else {\n        *(&stack0x00000030 + iVar2) = 0;\n        arg3_00 = &stack0x00000038 + iVar2;\n        *(&stack0x00000028 + iVar2) = 0;\n        uVar3 = 0xffffffff;\n        *(&stack0x00000020 + iVar2) = 0x1000;\n        *(&stack0x00000018 + iVar2) = 0x14004b000;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140006722;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0);\n        if (iVar1 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140006739;\n            fcn.140001cb0(0x14002cd50, \"Failed to encode wchar_t as UTF-8.\\n\", arg3_00, uVar3);\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140006755;\n    fcn.14000a100(*(&stack0x00002038 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 660
    },
    "140006a6": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140006a60(ulong param_1)\n\n{\n    char16_t *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    ulong *arg1;\n    char16_t *arg4;\n    int64_t aiStackX24 [2];\n    ulong uStack16;\n    \n    uStack16 = 0x140006a70;\n    iVar3 = fcn.14000a130();\n    iVar3 = -iVar3;\n    *(&stack0x00002058 + iVar3) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar3;\n    arg1 = NULL;\n    *(&stack0x00000030 + iVar3) = 0xffffffffffffffff;\n    *(&stack0x00000038 + iVar3) = 0;\n    *(&stack0x00000028 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006aa6;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006ab7;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar4, 8, &stack0x00000030 + iVar3);\n    if (iVar2 != 0) {\n        *(&stack0x00000018 + iVar3) = &stack0x00000028 + iVar3;\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140006ad9;\n        iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(*(&stack0x00000030 + iVar3), 1, 0, 0);\n        if (iVar2 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar3) = 0x140006ae3;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x000140006b31;\n        }\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140006af6;\n        arg1 = fcn.140014130(1, *(&stack0x00000028 + iVar3));\n        if (arg1 != NULL) {\n            *(&stack0x00000018 + iVar3) = &stack0x00000028 + iVar3;\n            *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b20;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                              (*(&stack0x00000030 + iVar3), 1, arg1, *(&stack0x00000028 + iVar3));\n            if (iVar2 != 0) {\n                uVar4 = *arg1;\n                *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b31;\n                sub.ADVAPI32.dll_ConvertSidToStringSidW(uVar4, &stack0x00000038 + iVar3);\n            }\n        }\n    }\ncode_r0x000140006b31:\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b39;\n    fcn.140014138(arg1);\n    if (*(&stack0x00000030 + iVar3) != -1) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b4a;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    pcVar1 = *(&stack0x00000038 + iVar3);\n    arg4 = L\"S-1-3-4\";\n    if (pcVar1 != NULL) {\n        arg4 = pcVar1;\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b73;\n    fcn.140006760(&stack0x00000058 + iVar3, 0x1000, L\"D:(A;;FA;;;%s)\", arg4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006b7c;\n    (*_sym.imp.KERNEL32.dll_LocalFree)(pcVar1);\n    *(&stack0x00000040 + iVar3) = 0x18;\n    *(&stack0x00000050 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006ba2;\n    iVar2 = sub.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorW\n                      (&stack0x00000058 + iVar3, 1, &stack0x00000048 + iVar3);\n    if (iVar2 != 0) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x140006bb4;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(param_1, &stack0x00000040 + iVar3);\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006bd3;\n    fcn.14000a100(*(&stack0x00002058 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 1144
    },
    "1400149e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400149e4(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint64_t arg_78h;\n    uchar auStackY120 [32];\n    uint in_stack_ffffffffffffffac;\n    uint in_stack_ffffffffffffffb4;\n    uint in_stack_ffffffffffffffbc;\n    ulong in_stack_ffffffffffffffc0;\n    uint16_t in_stack_ffffffffffffffd0;\n    uint16_t in_stack_ffffffffffffffd2;\n    ushort in_stack_ffffffffffffffd4;\n    uint16_t in_stack_ffffffffffffffd6;\n    uint16_t in_stack_ffffffffffffffd8;\n    uint16_t in_stack_ffffffffffffffda;\n    uint16_t in_stack_ffffffffffffffdc;\n    ushort in_stack_ffffffffffffffde;\n    ulong in_stack_ffffffffffffffe0;\n    ulong in_stack_ffffffffffffffe8;\n    \n    arg_78h = *0x14003d018 ^ auStackY120;\n    if ((((arg1 != 0) || (arg1 >> 0x20 != 0)) &&\n        (iVar1 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(&stack0xffffffffffffffc8, &stack0xffffffffffffffe0), \n        iVar1 != 0)) && (iVar1 = (*_sym.imp.KERNEL32.dll_SystemTimeToTzSpecificLocalTime)(),  iVar1 != 0)) {\n        fcn.14001eb90(in_stack_ffffffffffffffd0, in_stack_ffffffffffffffd2, in_stack_ffffffffffffffd6, \n                      in_stack_ffffffffffffffd8, CONCAT44(in_stack_ffffffffffffffac, in_stack_ffffffffffffffda), \n                      CONCAT44(in_stack_ffffffffffffffb4, in_stack_ffffffffffffffdc), \n                      CONCAT44(in_stack_ffffffffffffffbc, 0xffffffff), in_stack_ffffffffffffffc0, arg1, \n                      CONCAT26(in_stack_ffffffffffffffd6, \n                               CONCAT24(in_stack_ffffffffffffffd4, \n                                        CONCAT22(in_stack_ffffffffffffffd2, in_stack_ffffffffffffffd0))), \n                      CONCAT26(in_stack_ffffffffffffffde, \n                               CONCAT24(in_stack_ffffffffffffffdc, \n                                        CONCAT22(in_stack_ffffffffffffffda, in_stack_ffffffffffffffd8))), \n                      in_stack_ffffffffffffffe0, in_stack_ffffffffffffffe8, arg_78h);\n    }\n    fcn.14000a100(arg_78h ^ auStackY120);\n    return;\n}\n",
        "token_count": 544
    },
    "1400178c": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400178c0(int64_t *param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    ulong uStack64;\n    \n    uStack64 = 0x1400178da;\n    iVar4 = fcn.14000a130();\n    iVar4 = -iVar4;\n    *(&stack0x00001008 + iVar4) = *0x14003d018 ^ &stack0xffffffffffffffc8 + iVar4;\n    *(&stack0xffffffffffffffc0 + iVar4) = 0x1400178fd;\n    uVar2 = fcn.1400192e4(param_1);\n    iVar10 = 0;\n    if (*(param_1 + 2) != 0) {\n        uVar7 = uVar2 & 0x3f;\n        iVar9 = uVar2 >> 6;\n        iVar5 = (*param_1 - param_1[1]) / 2;\n        uVar1 = *(*(iVar9 * 8 + 0x14004ca30) + 0x30 + uVar7 * 0x48);\n        *(&stack0xffffffffffffffc0 + iVar4) = 0x140017954;\n        iVar6 = fcn.14001b8ac(uVar2 & 0xffffffff, uVar1, 0, param_3);\n        iVar9 = *(iVar9 * 8 + 0x14004ca30);\n        if (iVar6 == *(iVar9 + 0x30 + uVar7 * 0x48)) {\n            uVar1 = *(iVar9 + 0x28 + uVar7 * 0x48);\n            *(&stack0xffffffffffffffe8 + iVar4) = 0;\n            *(&stack0xffffffffffffffc0 + iVar4) = 0x140017991;\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)\n                              (uVar1, &stack0x00000008 + iVar4, 0x1000, &stack0xfffffffffffffff8 + iVar4);\n            if (iVar3 != 0) {\n                *(&stack0xffffffffffffffc0 + iVar4) = 0x1400179a6;\n                iVar9 = fcn.14001b8ac(uVar2, param_2, 0, param_3);\n                if ((-1 < iVar9) && (iVar5 <= *(&stack0xfffffffffffffff8 + iVar4))) {\n                    puVar8 = &stack0x00000008 + iVar4;\n                    if (iVar5 != 0) {\n                        do {\n                            if (&stack0x00000008 + *(&stack0xfffffffffffffff8 + iVar4) + iVar4 <= puVar8) break;\n                            if (*puVar8 == 0xd) {\n                                if ((puVar8 < &stack0x00000008 + *(&stack0xfffffffffffffff8 + iVar4) + iVar4 + -1) &&\n                                   (puVar8[1] == 10)) {\n                                    puVar8 = puVar8 + 1;\n                                }\n                            }\n                            else {\n                                puVar8 = puVar8 + *(*puVar8 + 0x14003d2e0);\n                            }\n                            iVar10 = iVar10 + 1;\n                            puVar8 = puVar8 + 1;\n                        } while (iVar10 != iVar5);\n                    }\n                }\n            }\n        }\n    }\n    *(&stack0xffffffffffffffc0 + iVar4) = 0x140017a27;\n    fcn.14000a100(*(&stack0x00001008 + iVar4) ^ &stack0xffffffffffffffc8 + iVar4);\n    return;\n}\n",
        "token_count": 872
    },
    "14001d0f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14001d0fc(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    int32_t aiStack24 [4];\n    \n    fcn.14002324c(*arg1, in_stack_00000030 + 1, 1, aiStack24);\n    arg2_00 = (arg3 - (0 < in_stack_00000030)) - (aiStack24[0] == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140022c94(arg2 + (0 < in_stack_00000030) + (aiStack24[0] == 0x2d), arg2_00, in_stack_00000030 + 1, \n                          aiStack24);\n    if (iVar1 == 0) {\n        fcn.14001d1f8(arg2, arg3, in_stack_00000030);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 267
    },
    "14001d3d": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001d3dc(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.14002324c(*arg1, in_stack_00000030, 0, auStack24);\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140022c94(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, auStack24._4_4_ + in_stack_00000030, auStack24);\n    if (iVar1 == 0) {\n        fcn.14001d4b4(arg2, arg3, in_stack_00000030, auStack24);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 272
    },
    "14001d60": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001d60c(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    char *pcVar3;\n    int32_t iVar4;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.14002324c(*arg1, in_stack_00000030, 0, auStack24);\n    iVar4 = auStack24._4_4_ + -1;\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar2 = fcn.140022c94(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, in_stack_00000030, auStack24);\n    if (iVar2 == 0) {\n        auStack24._4_4_ = auStack24._4_4_ + -1;\n        if ((auStack24._4_4_ < -4) || (in_stack_00000030 <= auStack24._4_4_)) {\n            fcn.14001d1f8(arg2, arg3, in_stack_00000030);\n        }\n        else {\n            pcVar1 = arg2 + (auStack24._0_4_ == 0x2d);\n            if (iVar4 < auStack24._4_4_) {\n                do {\n                    pcVar3 = pcVar1;\n                    pcVar1 = pcVar3 + 1;\n                } while (*pcVar3 != '\\0');\n                pcVar3[-1] = '\\0';\n            }\n            fcn.14001d4b4(arg2, arg3, in_stack_00000030, auStack24);\n        }\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 473
    },
    "14002148": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.140021484(ulong arg1, ulong noname_1, int64_t arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint *arg2;\n    uint *puVar15;\n    uint *puVar16;\n    uint *puVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    int64_t iStackX24;\n    ulong *puStackX32;\n    uchar auStack616 [4];\n    uint uStack612;\n    uint auStack608 [2];\n    int64_t *piStack600;\n    ulong **ppuStack592;\n    uint auStack584 [140];\n    \n    iStackX24 = arg3;\n    puStackX32 = arg4;\n    fcn.1400216f4(arg3, arg4);\n    uVar13 = fcn.140021184(arg1);\n    if (uVar13 == *(*(iStackX24 + 0x88) + 4)) {\n        iVar14 = 0;\n    }\n    else {\n        arg2 = fcn.14001cc2c(0x228);\n        if (arg2 == NULL) {\n            fcn.140019f78(0);\n            iVar14 = -1;\n        }\n        else {\n            iVar18 = 4;\n            iVar19 = 4;\n            puVar16 = *(iStackX24 + 0x88);\n            puVar12 = auStack584;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar19 = iVar19 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar19 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            puVar16 = auStack584;\n            puVar12 = arg2;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar18 = iVar18 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar18 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            *arg2 = 0;\n            iVar14 = fcn.14002182c(uVar13, arg2);\n            if (iVar14 == -1) {\n                puVar16 = fcn.140016088();\n                *puVar16 = 0x16;\n                fcn.140019f78(arg2);\n                iVar14 = -1;\n            }\n            else {\n                if (noname_1 == '\\0') {\n                    fcn.140018ba0();\n                }\n                piVar3 = *(iStackX24 + 0x88);\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (*(iStackX24 + 0x88) != 0x14003d440)) {\n                    fcn.140019f78(*(iStackX24 + 0x88));\n                }\n                *arg2 = 1;\n                *(iStackX24 + 0x88) = arg2;\n                if ((*0x14003d428 & *(iStackX24 + 0x3a8)) == 0) {\n                    piStack600 = &iStackX24;\n                    ppuStack592 = &puStackX32;\n                    uStack612 = 5;\n                    auStack608[0] = 5;\n                    fcn.140020fb4(auStack616, auStack608, &piStack600, &uStack612);\n                    if (noname_1 != '\\0') {\n                        *0x14003d2d0 = *puStackX32;\n                    }\n                }\n                fcn.140019f78(0);\n            }\n        }\n    }\n    return iVar14;\n}\n",
        "token_count": 3029
    },
    "1400058e": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid fcn.1400058e0(ulong param_1, int64_t param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t lpMultiByteStr;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong arg2;\n    int64_t arg2_00;\n    int64_t iStackX8;\n    uchar auStackX16 [8];\n    ulong uStack32;\n    \n    uStack32 = 0x1400058f8;\n    iVar4 = fcn.14000a130();\n    iVar4 = -iVar4;\n    *(&stack0x00002038 + iVar4) = *0x14003d018 ^ &stack0xffffffffffffffe8 + iVar4;\n    if (param_2 == 0) {\n        lpMultiByteStr = *(&stack0x00000008 + iVar4);\n    }\n    else {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x140005924;\n        lpMultiByteStr = fcn.140005af0(0x14002cb34);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x14000592f;\n        iVar5 = fcn.1400055e0(param_2);\n        if (iVar5 == 0) goto code_r0x000140005ac8;\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x14000594a;\n        arg2_00 = iVar5;\n        iVar1 = fcn.140016818(0x14002cb38, iVar5);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x140005954;\n        fcn.140014138(iVar5);\n        if (iVar1 != 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005964;\n            fcn.140001c50(\"LOADER: Failed to set the TMP environment variable.\\n\", arg2_00, param_3, param_4);\n            goto code_r0x000140005ac8;\n        }\n    }\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005980;\n    (*_sym.imp.KERNEL32.dll_GetTempPathW)(0x1000, &stack0x00000038 + iVar4);\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005985;\n    uVar2 = sub.KERNEL32.dll_GetCurrentProcessId();\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x14000599e;\n    fcn.140006610(&stack0x00000010 + iVar4, 0x10, L\"_MEI%d\", uVar2);\n    iVar1 = 0;\n    do {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400059af;\n        uVar6 = fcn.1400174d0(&stack0x00000038 + iVar4, &stack0x00000010 + iVar4);\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400059ba;\n        iVar3 = fcn.140006a60(uVar6);\n        if (iVar3 == 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a57;\n            fcn.140006ec0(param_1, uVar6, 0x1000);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a5f;\n            fcn.140014138(uVar6);\n            if (param_2 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a75;\n                iVar5 = fcn.140006db0(0, 0x14002cb34, 0);\n                if (lpMultiByteStr == 0) {\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005abb;\n                    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar5, 0);\n                }\n                else {\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a8a;\n                    uVar6 = fcn.140006db0(0, lpMultiByteStr, 0);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a98;\n                    fcn.140016818(iVar5, uVar6);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005aa0;\n                    fcn.140014138(iVar5);\n                    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005aa8;\n                    fcn.140014138(uVar6);\n                    iVar5 = lpMultiByteStr;\n                }\n                *(&stack0xffffffffffffffe0 + iVar4) = 0x140005ac3;\n                fcn.140014138(iVar5);\n            }\n            goto code_r0x000140005ac8;\n        }\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400059ca;\n        fcn.140014138(uVar6);\n        iVar1 = iVar1 + 1;\n    } while (iVar1 < 5);\n    if (param_2 != 0) {\n        *(&stack0xffffffffffffffe0 + iVar4) = 0x1400059e7;\n        uVar6 = fcn.140006db0(0, 0x14002cb34, 0);\n        if (lpMultiByteStr == 0) {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a37;\n            (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uVar6, 0);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a3f;\n            fcn.140014138(uVar6);\n        }\n        else {\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x1400059fc;\n            arg2 = fcn.140006db0(0, lpMultiByteStr, 0);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a0a;\n            fcn.140016818(uVar6, arg2);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a12;\n            fcn.140014138(uVar6);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a1a;\n            fcn.140014138(arg2);\n            *(&stack0xffffffffffffffe0 + iVar4) = 0x140005a22;\n            fcn.140014138(lpMultiByteStr);\n        }\n    }\ncode_r0x000140005ac8:\n    *(&stack0xffffffffffffffe0 + iVar4) = 0x140005ad8;\n    fcn.14000a100(*(&stack0x00002038 + iVar4) ^ &stack0xffffffffffffffe8 + iVar4);\n    return;\n}\n",
        "token_count": 1610
    },
    "14000742": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t fcn.140007420(ulong arg1, uint32_t *arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    \n    uVar6 = arg3;\n    if (arg2 == NULL) {\n        return 0;\n    }\n    arg1._0_4_ = ~arg1;\n    if (0x16 < uVar6) {\n        do {\n            if ((arg2 & 3) == 0) break;\n            uVar3 = *arg2;\n            arg2 = arg2 + 1;\n            arg1._0_4_ = arg1 >> 8 ^ *(((uVar3 ^ arg1) & 0xff) * 4 + 0x14002ced0);\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n        uVar9 = 0;\n        uVar7 = 0;\n        uVar8 = 0;\n        uVar5 = 0;\n        uVar10 = uVar6 / 0x14;\n        uVar6 = uVar6 % 0x14;\n        while (uVar10 = uVar10 - 1,  uVar10 != 0) {\n            uVar5 = uVar5 ^ arg2[4];\n            arg1._0_4_ = arg1 ^ *arg2;\n            uVar9 = uVar9 ^ arg2[1];\n            uVar7 = uVar7 ^ arg2[2];\n            uVar8 = uVar8 ^ arg2[3];\n            arg2 = arg2 + 5;\n            arg1._0_4_ = *((arg1 & 0xff) * 4 + 0x14002d6d0) ^\n                         *((arg1 >> 0x10 & 0xff) * 4 + 0x14002ded0) ^ *((arg1 >> 8) * 4 + 0x14002dad0) ^\n                         *((arg1 >> 0x18) * 4 + 0x14002e2d0);\n            uVar9 = *((uVar9 & 0xff) * 4 + 0x14002d6d0) ^\n                    *((uVar9 >> 0x10 & 0xff) * 4 + 0x14002ded0) ^ *((uVar9 >> 8) * 4 + 0x14002dad0) ^\n                    *((uVar9 >> 0x18) * 4 + 0x14002e2d0);\n            uVar7 = *((uVar7 & 0xff) * 4 + 0x14002d6d0) ^\n                    *((uVar7 >> 0x10 & 0xff) * 4 + 0x14002ded0) ^ *((uVar7 >> 8) * 4 + 0x14002dad0) ^\n                    *((uVar7 >> 0x18) * 4 + 0x14002e2d0);\n            uVar8 = *((uVar8 & 0xff) * 4 + 0x14002d6d0) ^\n                    *((uVar8 >> 0x10 & 0xff) * 4 + 0x14002ded0) ^ *((uVar8 >> 8) * 4 + 0x14002dad0) ^\n                    *((uVar8 >> 0x18) * 4 + 0x14002e2d0);\n            uVar5 = *((uVar5 & 0xff) * 4 + 0x14002d6d0) ^\n                    *((uVar5 >> 0x10 & 0xff) * 4 + 0x14002ded0) ^ *((uVar5 >> 8) * 4 + 0x14002dad0) ^\n                    *((uVar5 >> 0x18) * 4 + 0x14002e2d0);\n        }\n        uVar4 = (arg1 ^ *arg2) >> 8 ^ *(((arg1 ^ *arg2) & 0xff) * 4 + 0x14002ced0);\n        uVar4 = uVar4 >> 8 ^ *((uVar4 & 0xff) * 4 + 0x14002ced0);\n        uVar4 = uVar4 >> 8 ^ *((uVar4 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar4 >> 8 ^ *((uVar4 & 0xff) * 4 + 0x14002ced0) ^ arg2[1] ^ uVar9;\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar7 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0) ^ arg2[2] ^ uVar7;\n        uVar9 = uVar7 >> 8 ^ *((uVar7 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar8 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0) ^ arg2[3] ^ uVar8;\n        uVar9 = uVar8 >> 8 ^ *((uVar8 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar5 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0) ^ arg2[4] ^ uVar5;\n        uVar9 = uVar5 >> 8 ^ *((uVar5 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        uVar9 = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        arg1._0_4_ = uVar9 >> 8 ^ *((uVar9 & 0xff) * 4 + 0x14002ced0);\n        arg2 = arg2 + 5;\n    }\n    if (7 < uVar6) {\n        uVar10 = uVar6 >> 3;\n        uVar6 = uVar6 + uVar10 * -8;\n        do {\n            uVar9 = arg1 >> 8 ^ *(((*arg2 ^ arg1) & 0xff) * 4 + 0x14002ced0);\n            uVar9 = uVar9 >> 8 ^ *(((*(arg2 + 1) ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            uVar9 = uVar9 >> 8 ^ *(((*(arg2 + 2) ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            uVar9 = uVar9 >> 8 ^ *(((*(arg2 + 3) ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            uVar9 = uVar9 >> 8 ^ *(((*(arg2 + 1) ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            puVar1 = arg2 + 6;\n            uVar9 = uVar9 >> 8 ^ *(((*(arg2 + 5) ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            puVar2 = arg2 + 7;\n            arg2 = arg2 + 2;\n            uVar9 = uVar9 >> 8 ^ *(((*puVar1 ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            arg1._0_4_ = uVar9 >> 8 ^ *(((*puVar2 ^ uVar9) & 0xff) * 4 + 0x14002ced0);\n            uVar10 = uVar10 - 1;\n        } while (uVar10 != 0);\n    }\n    for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n        uVar3 = *arg2;\n        arg2 = arg2 + 1;\n        arg1._0_4_ = arg1 >> 8 ^ *(((uVar3 ^ arg1) & 0xff) * 4 + 0x14002ced0);\n    }\n    return ~arg1;\n}\n",
        "token_count": 2189
    },
    "14001097": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010970(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar2 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar4 + -1 + uVar2;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar5 = pcVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2._0_4_ = arg2 >> 3;\n        *pcVar5 = (uVar1 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar5 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar5 + 1;\n    return;\n}\n",
        "token_count": 351
    },
    "140010a6": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010a64(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    char *pcVar3;\n    char *pcVar4;\n    char cVar5;\n    \n    iVar2 = *(arg1 + 0x458);\n    if (iVar2 == 0) {\n        uVar1 = 0x200;\n        iVar2 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar2 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar4 = pcVar3;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar5 = uVar1 + (uVar1 / 10) * -10 + '0';\n        if ('9' < cVar5) {\n            cVar5 = (in_R8B ^ 1) * ' ' + '\\a' + cVar5;\n        }\n        *pcVar4 = cVar5;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 401
    },
    "140010bd": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010bd0(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint8_t *puVar3;\n    uint8_t in_R8B;\n    uint8_t *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x200;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    puVar3 = iVar5 + -1 + uVar2;\n    *(arg1 + 0x40) = puVar3;\n    puVar4 = puVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar1 = (uVar1 & 0xf) + 0x30;\n        if (0x39 < uVar1) {\n            uVar1 = (in_R8B ^ 1) * ' ' + '\\a' + uVar1;\n        }\n        *puVar4 = uVar1;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        puVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = puVar4 + 1;\n    return;\n}\n",
        "token_count": 415
    },
    "140010cf": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010cf4(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    char *pcVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar2 = iVar3 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar2;\n    pcVar4 = pcVar2;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *pcVar4 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = pcVar2 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 323
    },
    "140010de": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010dec(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    char *pcVar3;\n    char *pcVar4;\n    char cVar5;\n    \n    iVar2 = *(arg1 + 0x458);\n    if (iVar2 == 0) {\n        uVar1 = 0x200;\n        iVar2 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar2 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar4 = pcVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar5 = arg2 + (arg2 / 10) * -10 + '0';\n        if ('9' < cVar5) {\n            cVar5 = (in_R8B ^ 1) * ' ' + '\\a' + cVar5;\n        }\n        *pcVar4 = cVar5;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 389
    },
    "140010f6": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140010f60(int64_t arg1, uint64_t arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint8_t *puVar3;\n    uint8_t in_R8B;\n    uint8_t *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x200;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    puVar3 = iVar5 + -1 + uVar2;\n    *(arg1 + 0x40) = puVar3;\n    puVar4 = puVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2 = arg2 >> 4;\n        uVar1 = (uVar1 & 0xf) + 0x30;\n        if (0x39 < uVar1) {\n            uVar1 = (in_R8B ^ 1) * ' ' + '\\a' + uVar1;\n        }\n        *puVar4 = uVar1;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        puVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = puVar4 + 1;\n    return;\n}\n",
        "token_count": 403
    },
    "140012e7": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nulong fcn.140012e7c(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t **ppuVar3;\n    uint16_t *puVar4;\n    uint64_t uVar5;\n    bool bVar6;\n    \n    ppuVar3 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppuVar3 + 1;\n    puVar4 = *ppuVar3;\n    if ((puVar4 == NULL) || (*(puVar4 + 4) == 0)) {\n        uVar5 = 6;\n        *(arg1 + 0x40) = \"(null)\";\n    }\n    else {\n        iVar2 = *(arg1 + 0x34);\n        if (iVar2 == 2) {\ncode_r0x000140012ec6:\n            bVar6 = false;\n        }\n        else if ((iVar2 == 3) || (iVar2 == 0xc)) {\n            bVar6 = true;\n        }\n        else {\n            if (*(arg1 + 0x34) == 0xd) goto code_r0x000140012ec6;\n            bVar6 = (*(arg1 + 0x39) + 0x9dU & 0xef) != 0;\n        }\n        *(arg1 + 0x40) = *(puVar4 + 4);\n        uVar1 = *puVar4;\n        uVar5 = uVar1;\n        if (bVar6) {\n            *(arg1 + 0x4c) = 1;\n            uVar5 = uVar1 >> 1;\n            goto code_r0x000140012ef2;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x000140012ef2:\n    *(arg1 + 0x48) = uVar5;\n    return CONCAT71(uVar5 >> 8, 1);\n}\n",
        "token_count": 438
    },
    "140012ef": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nulong fcn.140012ef8(ulong *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t **ppuVar2;\n    uint16_t *puVar3;\n    int64_t iVar4;\n    char cVar5;\n    uint64_t uVar6;\n    \n    ppuVar2 = arg1[3];\n    arg1[3] = ppuVar2 + 1;\n    puVar3 = *ppuVar2;\n    if ((puVar3 == NULL) || (iVar4 = *(puVar3 + 4),  iVar4 == 0)) {\n        uVar6 = 6;\n        arg1[8] = \"(null)\";\n    }\n    else {\n        cVar5 = fcn.14000f2d4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n        arg1[8] = iVar4;\n        uVar1 = *puVar3;\n        uVar6 = uVar1;\n        if (cVar5 != '\\0') {\n            *(arg1 + 0x4c) = 1;\n            uVar6 = uVar1 >> 1;\n            goto code_r0x000140012f60;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x000140012f60:\n    *(arg1 + 9) = uVar6;\n    return CONCAT71(uVar6 >> 8, 1);\n}\n",
        "token_count": 328
    },
    "140017dc": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.140017dcc(int16_t *arg1, int16_t **arg2, int16_t *arg3, int64_t *arg4)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int64_t *in_stack_00000028;\n    \n    *in_stack_00000028 = 0;\n    *arg4 = 1;\n    if (arg2 != NULL) {\n        *arg2 = arg3;\n        arg2 = arg2 + 1;\n    }\n    bVar1 = false;\n    do {\n        iVar4 = 0x22;\n        if (*arg1 == 0x22) {\n            bVar1 = !bVar1;\n        }\n        else {\n            *in_stack_00000028 = *in_stack_00000028 + 1;\n            if (arg3 != NULL) {\n                *arg3 = *arg1;\n                arg3 = arg3 + 1;\n            }\n            iVar4 = *arg1;\n            if (iVar4 == 0) goto code_r0x000140017e63;\n        }\n        arg1 = arg1 + 1;\n    } while ((bVar1) || ((iVar4 != 0x20 && (iVar4 != 9))));\n    if (arg3 != NULL) {\n        arg3[-1] = 0;\n    }\ncode_r0x000140017e63:\n    bVar1 = false;\n    while (iVar4 = *arg1,  iVar4 != 0) {\n        while ((iVar4 == 0x20 || (iVar4 == 9))) {\n            arg1 = arg1 + 1;\n            iVar4 = *arg1;\n        }\n        if (iVar4 == 0) break;\n        if (arg2 != NULL) {\n            *arg2 = arg3;\n            arg2 = arg2 + 1;\n        }\n        *arg4 = *arg4 + 1;\n        while( true ) {\n            uVar3 = 1;\n            uVar2 = 0;\n            for (; *arg1 == 0x5c; arg1 = arg1 + 1) {\n                uVar2 = uVar2 + 1;\n            }\n            if (*arg1 == 0x22) {\n                if ((uVar2 & 1) == 0) {\n                    if ((bVar1) && (arg1[1] == 0x22)) {\n                        arg1 = arg1 + 1;\n                    }\n                    else {\n                        bVar1 = !bVar1;\n                        uVar3 = 0;\n                    }\n                }\n                uVar2 = uVar2 >> 1;\n            }\n            while (uVar2 != 0) {\n                uVar2 = uVar2 - 1;\n                if (arg3 != NULL) {\n                    *arg3 = 0x5c;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            iVar4 = *arg1;\n            if ((iVar4 == 0) || ((!bVar1 && ((iVar4 == 0x20 || (iVar4 == 9)))))) break;\n            if (uVar3 != 0) {\n                if (arg3 != NULL) {\n                    *arg3 = iVar4;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            arg1 = arg1 + 1;\n        }\n        if (arg3 != NULL) {\n            *arg3 = 0;\n            arg3 = arg3 + 1;\n        }\n        *in_stack_00000028 = *in_stack_00000028 + 1;\n    }\n    if (arg2 != NULL) {\n        *arg2 = NULL;\n    }\n    *arg4 = *arg4 + 1;\n    return;\n}\n",
        "token_count": 872
    },
    "140027a3": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nuint32_t fcn.140027a3c(void)\n\n{\n    uint32_t uVar1;\n    uint32_t in_MXCSR;\n    \n    uVar1 = (((in_MXCSR & 0x3f) >> 2 & 8 | in_MXCSR & 0x10) >> 2 | in_MXCSR & 8) >> 1 |\n            ((in_MXCSR & 2) << 3 | in_MXCSR & 4) * 2 | (in_MXCSR & 1) << 4;\n    return uVar1 << 0x18 | uVar1;\n}\n",
        "token_count": 138
    },
    "14000e6a": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nuint32_t fcn.14000e6a4(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    \n    if (arg1 == 0) {\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x16;\n        fcn.140019f10();\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = *(arg1 + 0x14) >> 3 & 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 121
    },
    "1400109e": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.1400109e0(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int16_t *piVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    piVar4 = iVar3 + uVar1 * 2 + -2;\n    *(arg1 + 0x40) = piVar4;\n    piVar2 = piVar4;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2._0_4_ = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *piVar2 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = piVar4 - piVar2 >> 1;\n    *(arg1 + 0x40) = piVar2 + 1;\n    return;\n}\n",
        "token_count": 332
    },
    "140010b1": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.140010b10(int64_t arg1, ulong arg2)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int16_t *piVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    uint8_t in_R8B;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    piVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = piVar1;\n    piVar3 = piVar1;\n    uVar2 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar4 = uVar2 + (uVar2 / 10) * -10 + 0x30;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *piVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar3 = *(arg1 + 0x40);\n        uVar2 = uVar2 / 10;\n    }\n    *(arg1 + 0x48) = piVar1 - piVar3 >> 1;\n    *(arg1 + 0x40) = piVar3 + 1;\n    return;\n}\n",
        "token_count": 413
    },
    "140010d6": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.140010d64(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int16_t *piVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    piVar4 = iVar3 + uVar1 * 2 + -2;\n    *(arg1 + 0x40) = piVar4;\n    piVar2 = piVar4;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *piVar2 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = piVar4 - piVar2 >> 1;\n    *(arg1 + 0x40) = piVar2 + 1;\n    return;\n}\n",
        "token_count": 328
    },
    "140010e9": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.140010e9c(int64_t arg1, uint64_t arg2)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int16_t *piVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    uint8_t in_R8B;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    piVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = piVar1;\n    piVar3 = piVar1;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar4 = arg2 + (arg2 / 10) * -10 + 0x30;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *piVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar3 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = piVar1 - piVar3 >> 1;\n    *(arg1 + 0x40) = piVar3 + 1;\n    return;\n}\n",
        "token_count": 403
    },
    "140018d0": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n\nulong fcn.140018d00(int64_t **arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    uint64_t *puVar3;\n    uint64_t uVar4;\n    uint64_t arg1_00;\n    uint64_t uVar5;\n    uint64_t arg2;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    ulong var_bp_8h;\n    ulong var_20h;\n    \n    puVar3 = **arg1;\n    if (puVar3 == NULL) {\ncode_r0x000140018e94:\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar2 = *0x14003d018 & 0x3f;\n        arg1_00 = (*0x14003d018 ^ *puVar3) >> uVar2 | (*0x14003d018 ^ *puVar3) << 0x40 - uVar2;\n        puVar7 = (*0x14003d018 ^ puVar3[1]) >> uVar2 | (*0x14003d018 ^ puVar3[1]) << 0x40 - uVar2;\n        puVar3 = (*0x14003d018 ^ puVar3[2]) >> uVar2 | (*0x14003d018 ^ puVar3[2]) << 0x40 - uVar2;\n        if (puVar7 == puVar3) {\n            uVar4 = puVar3 - arg1_00 >> 3;\n            uVar5 = uVar4;\n            if (0x200 < uVar4) {\n                uVar5 = 0x200;\n            }\n            arg2 = uVar5 + uVar4;\n            if (uVar5 + uVar4 == 0) {\n                arg2 = 0x20;\n            }\n            if (arg2 < uVar4) {\ncode_r0x000140018da2:\n                arg2 = uVar4 + 4;\n                uVar5 = fcn.14002257c(arg1_00, arg2, 8);\n                fcn.140019f78(0);\n                if (uVar5 == 0) goto code_r0x000140018e94;\n            }\n            else {\n                uVar5 = fcn.14002257c(arg1_00, arg2, 8);\n                fcn.140019f78(0);\n                if (uVar5 == 0) goto code_r0x000140018da2;\n            }\n            arg1_00 = uVar5;\n            uVar5 = *0x14003d018;\n            puVar7 = arg1_00 + uVar4 * 8;\n            puVar3 = arg1_00 + arg2 * 8;\n            uVar4 = puVar3 + (7 - puVar7) >> 3;\n            if (puVar3 < puVar7) {\n                uVar4 = 0;\n            }\n            puVar6 = puVar7;\n            if (uVar4 != 0) {\n                for (; uVar4 != 0; uVar4 = uVar4 - 1) {\n                    *puVar6 = uVar5;\n                    puVar6 = puVar6 + 1;\n                }\n            }\n        }\n        uVar2 = -(*0x14003d018 & 0x3f) & 0x3f;\n        *puVar7 = (*arg1[1] >> uVar2 | *arg1[1] << 0x40 - uVar2) ^ *0x14003d018;\n        uVar2 = -(*0x14003d018 & 0x3f) & 0x3f;\n        ***arg1 = (arg1_00 >> uVar2 | arg1_00 << 0x40 - uVar2) ^ *0x14003d018;\n        uVar2 = -(*0x14003d018 & 0x3f) & 0x3f;\n        *(**arg1 + 8) = (puVar7 + 1 >> uVar2 | puVar7 + 1 << 0x40 - uVar2) ^ *0x14003d018;\n        uVar2 = 0x40 - (*0x14003d018 & 0x3f) & 0x3f;\n        uVar1 = 0;\n        *(**arg1 + 0x10) = (puVar3 >> uVar2 | puVar3 << 0x40 - uVar2) ^ *0x14003d018;\n    }\n    return uVar1;\n}\n",
        "token_count": 1043
    },
    "14001c99": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nbool fcn.14001c990(int64_t *arg1)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    int64_t aiStackX16 [3];\n    \n    if ((*(arg1 + 0x14) >> 3 & 1) == 0) {\n        if (((((*(arg1 + 0x14) & 0xc0) == 0) || (*arg1 != arg1[1])) &&\n            (iVar3 = fcn.14001705c(*(arg1 + 3)),  iVar3 != -1)) &&\n           ((iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar3, 0, aiStackX16, 1),  iVar2 != 0 &&\n            (iVar2 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)(iVar3, &iStackX8),  iVar2 != 0)))) {\n            return aiStackX16[0] == iStackX8;\n        }\n        bVar1 = false;\n    }\n    else {\n        bVar1 = true;\n    }\n    return bVar1;\n}\n",
        "token_count": 261
    },
    "14002795": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nuint32_t fcn.140027958(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_MXCSR;\n    \n    uVar1 = in_MXCSR & 0x8040;\n    if (uVar1 == 0x8000) {\n        uVar4 = 0xc00;\n    }\n    else if (uVar1 == 0x40) {\n        uVar4 = 0x800;\n    }\n    else {\n        uVar4 = 0;\n        if (uVar1 == 0x8040) {\n            uVar4 = 0x400;\n        }\n    }\n    uVar2 = in_MXCSR & 0x6000;\n    if (uVar2 == 0) {\n        uVar3 = 0;\n    }\n    else if (uVar2 == 0x2000) {\n        uVar3 = 0x100;\n    }\n    else if (uVar2 == 0x4000) {\n        uVar3 = 0x200;\n    }\n    else {\n        uVar3 = 0x300;\n        if (uVar2 != 0x6000) {\n            uVar3 = 0;\n        }\n    }\n    uVar4 = ((((in_MXCSR >> 2 & 0x400 | in_MXCSR & 0x800) >> 2 | in_MXCSR & 0x400) >> 2 | in_MXCSR & 0x200) >> 3 |\n            in_MXCSR & 0x180) >> 3 | uVar4 | uVar3;\n    return (uVar3 | uVar4 * 4) << 0x16 | uVar4;\n}\n",
        "token_count": 401
    },
    "14000999": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa",
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001400097f8)\n// WARNING: Removing unreachable block (ram,0x000140009801)\n\nulong fcn.140009990(int64_t arg1, char *arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    ulong uVar6;\n    \n    if (((arg2 == NULL) || (*arg2 != '1')) || (arg3 != 0x58)) {\n        return 0xfffffffa;\n    }\n    if (arg1 == 0) {\n        return 0xfffffffe;\n    }\n    uVar6 = 0;\n    *(arg1 + 0x20) = 0;\n    if (*(arg1 + 0x30) == 0) {\n        *(arg1 + 0x40) = 0;\n        *(arg1 + 0x30) = 0x14000a050;\n        uVar5 = uVar6;\n    }\n    else {\n        uVar5 = *(arg1 + 0x40);\n    }\n    if (*(arg1 + 0x38) == 0) {\n        *(arg1 + 0x38) = 0x14000a060;\n    }\n    piVar4 = (**0x14002a360)(uVar5, 1, 0x1bf0);\n    if (piVar4 == NULL) {\n        return 0xfffffffc;\n    }\n    *(arg1 + 0x28) = piVar4;\n    *piVar4 = arg1;\n    piVar4[8] = 0;\n    *(piVar4 + 1) = 0x3f34;\n    if (((*(arg1 + 0x30) != 0) && (*(arg1 + 0x38) != 0)) &&\n       ((piVar2 = *(arg1 + 0x28),  piVar2 != NULL && ((*piVar2 == arg1 && (*(piVar2 + 1) - 0x3f34U < 0x20)))))) {\n        iVar3 = *(arg1 + 0x28);\n        if ((*(iVar3 + 0x40) != 0) && (*(iVar3 + 0x30) != 0xf)) {\n            (**0x14002a360)(*(arg1 + 0x40));\n            *(iVar3 + 0x40) = 0;\n        }\n        *(iVar3 + 0x10) = 5;\n        *(iVar3 + 0x30) = 0xf;\n        if ((((*(arg1 + 0x30) != 0) && (*(arg1 + 0x38) != 0)) && (piVar2 = *(arg1 + 0x28),  piVar2 != NULL)) &&\n           ((*piVar2 == arg1 && (*(piVar2 + 1) - 0x3f34U < 0x20)))) {\n            iVar3 = *(arg1 + 0x28);\n            *(iVar3 + 0x34) = 0;\n            *(iVar3 + 0x3c) = 0;\n            if (((*(arg1 + 0x30) == 0) || (*(arg1 + 0x38) == 0)) ||\n               ((piVar2 = *(arg1 + 0x28),  piVar2 == NULL || ((*piVar2 != arg1 || (0x1f < *(piVar2 + 1) - 0x3f34U))))))\n            {\n                uVar6 = 0xfffffffe;\n            }\n            else {\n                iVar3 = *(arg1 + 0x28);\n                *(iVar3 + 0x24) = 0;\n                *(arg1 + 0x1c) = 0;\n                *(arg1 + 0xc) = 0;\n                *(arg1 + 0x20) = 0;\n                if (*(iVar3 + 0x10) != 0) {\n                    *(arg1 + 0x4c) = *(iVar3 + 0x10) & 1;\n                }\n                iVar1 = iVar3 + 0x550;\n                *(iVar3 + 8) = 0x3f34;\n                *(iVar3 + 0x88) = iVar1;\n                *(iVar3 + 0x68) = iVar1;\n                *(iVar3 + 0x60) = iVar1;\n                *(iVar3 + 0x14) = 0;\n                *(iVar3 + 0x18) = 0xffffffff;\n                *(iVar3 + 0x1c) = 0x8000;\n                *(iVar3 + 0x28) = 0;\n                *(iVar3 + 0x48) = 0;\n                *(iVar3 + 0x1be0) = 1;\n                *(iVar3 + 0x1be4) = 0xffffffff;\n            }\n            if (uVar6 == 0) {\n                return uVar6;\n            }\n            goto code_r0x00014000994a;\n        }\n    }\n    uVar6 = 0xfffffffe;\ncode_r0x00014000994a:\n    (**0x14002a360)(*(arg1 + 0x40), piVar4);\n    *(arg1 + 0x28) = 0;\n    return uVar6;\n}\n",
        "token_count": 1206
    },
    "14000e6d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.14000e6d0(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    \n    if (arg1 == 0) {\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x16;\n        fcn.140019f10();\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = *(arg1 + 0x14) >> 4 & 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 121
    },
    "14001584": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14001584c(ulong arg1, ulong arg2)\n\n{\n    bool bVar1;\n    uint uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    if ((((arg2 == 0x4000) || (arg2 == 0x8000)) || (arg2 == 0x10000)) || ((arg2 == 0x40000 || (arg2 == 0x20000)))) {\n        bVar1 = true;\n    }\n    else {\n        bVar1 = false;\n    }\n    if (bVar1) {\n        if (arg1 == 0xfffffffe) {\n            puVar3 = fcn.140016088();\n            *puVar3 = 9;\n            return 0xffffffff;\n        }\n        if ((arg1 < 0) || (*0x14004ce30 <= arg1)) {\n            bVar1 = false;\n        }\n        else {\n            bVar1 = true;\n        }\n        if (bVar1) {\n            iVar4 = arg1 >> 6;\n            if ((*(*(iVar4 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140016d50(arg1 & 0xffffffff);\n                uVar2 = 0xffffffff;\n                if ((*(*(iVar4 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    puVar3 = fcn.140016088();\n                    *puVar3 = 9;\n                }\n                else {\n                    uVar2 = fcn.140015968(arg1, arg2);\n                }\n                fcn.140016e38(arg1);\n                return uVar2;\n            }\n        }\n        puVar3 = fcn.140016088();\n        *puVar3 = 9;\n    }\n    else {\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\n    }\n    fcn.140019f10();\n    return 0xffffffff;\n}\n",
        "token_count": 488
    },
    "140019fb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.140019fb4(ulong noname_0, uint32_t *arg2, uint32_t **arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t *arg2_00;\n    uint uVar2;\n    \n    fcn.140016d50(*arg2);\n    uVar1 = **arg3;\n    arg2_00 = arg3[1];\n    if ((*(*((uVar1 >> 6) * 8 + 0x14004ca30) + 0x38 + (uVar1 & 0x3f) * 0x48) & 1) == 0) {\n        *(arg2_00 + 0xc) = 1;\n        arg2_00[0xb] = 9;\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = fcn.14001a188(uVar1, arg2_00);\n    }\n    fcn.140016e38(*arg4);\n    return uVar2;\n}\n",
        "token_count": 235
    },
    "14001a02": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14001a02c(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t auStackX8 [4];\n    uchar auStackX24 [8];\n    uint32_t auStackX32 [2];\n    uint32_t auStack40 [2];\n    uint32_t *puStack32;\n    int64_t iStack24;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n    }\n    else {\n        auStackX8[0] = arg1;\n        if (((-1 < arg1) && (arg1 < *0x14004ce30)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0)) {\n            puStack32 = auStackX8;\n            auStackX32[0] = arg1;\n            auStack40[0] = arg1;\n            iStack24 = arg2;\n            uVar1 = fcn.140019fb4(auStackX24, auStack40, &puStack32, auStackX32);\n            return uVar1;\n        }\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 416
    },
    "14001a2c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t * fcn.14001a2cc(int64_t *arg1)\n\n{\n    uint32_t *puVar1;\n    int64_t *piVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    piVar5 = *0x14004c788 + 0x18;\n    piVar2 = piVar5 + *0x14004c780 + -3;\n    do {\n        if (piVar5 == piVar2) {\ncode_r0x00014001a39b:\n            *arg1 = 0;\n            return arg1;\n        }\n        iVar4 = *piVar5;\n        if (iVar4 == 0) {\n            iVar4 = fcn.14001deb8(1, 0x58);\n            *piVar5 = iVar4;\n            fcn.140019f78(0);\n            if (*piVar5 != 0) {\n                *(*piVar5 + 0x18) = 0xffffffff;\n                fcn.14001e294(*piVar5 + 0x30, 4000, 0);\n                iVar4 = *piVar5;\n                LOCK();\n                *(iVar4 + 0x14) = *(iVar4 + 0x14) | 0x2000;\n                fcn.14001438c(iVar4);\ncode_r0x00014001a396:\n                *arg1 = iVar4;\n                return arg1;\n            }\n            goto code_r0x00014001a39b;\n        }\n        if ((*(iVar4 + 0x14) >> 0xd & 1) == 0) {\n            fcn.14001438c(iVar4);\n            uVar3 = *(iVar4 + 0x14);\n            while( true ) {\n                LOCK();\n                puVar1 = iVar4 + 0x14;\n                if (uVar3 == *puVar1) break;\n                uVar3 = *puVar1;\n            }\n            *puVar1 = uVar3 | 0x2000;\n            if ((~(uVar3 >> 0xd) & 1) != 0) goto code_r0x00014001a396;\n            fcn.140014398(iVar4);\n        }\n        piVar5 = piVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 523
    },
    "14001a3b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14001a3b8(ulong *arg1)\n\n{\n    if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) {\n        fcn.140019f78(arg1[1]);\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffebf;\n        arg1[1] = 0;\n        *arg1 = 0;\n        *(arg1 + 2) = 0;\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "14001af6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14001af6c(ulong arg1, ulong arg2, uint64_t arg3)\n\n{\n    bool bVar1;\n    uint uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    if (arg1 == 0xfffffffe) {\n        puVar3 = fcn.140016068();\n        *puVar3 = 0;\n        puVar3 = fcn.140016088();\n        *puVar3 = 9;\n        return 0xffffffff;\n    }\n    if ((arg1 < 0) || (*0x14004ce30 <= arg1)) {\n        bVar1 = false;\n    }\n    else {\n        bVar1 = true;\n    }\n    if (bVar1) {\n        iVar4 = arg1 >> 6;\n        if ((*(*(iVar4 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n            if ((arg3 & 0xffffffff) < 0x80000000) {\n                fcn.140016d50(arg1 & 0xffffffff);\n                uVar2 = 0xffffffff;\n                if ((*(*(iVar4 * 8 + 0x14004ca30) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    puVar3 = fcn.140016088();\n                    *puVar3 = 9;\n                    puVar3 = fcn.140016068();\n                    *puVar3 = 0;\n                }\n                else {\n                    uVar2 = fcn.14001b08c(arg1, arg2, arg3 & 0xffffffff);\n                }\n                fcn.140016e38(arg1);\n                return uVar2;\n            }\n            puVar3 = fcn.140016068();\n            *puVar3 = 0;\n            puVar3 = fcn.140016088();\n            *puVar3 = 0x16;\n            goto code_r0x00014001aff2;\n        }\n    }\n    puVar3 = fcn.140016068();\n    *puVar3 = 0;\n    puVar3 = fcn.140016088();\n    *puVar3 = 9;\ncode_r0x00014001aff2:\n    fcn.140019f10();\n    return 0xffffffff;\n}\n",
        "token_count": 539
    },
    "14001ca0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14001ca0c(ulong arg1, ulong *arg2, int64_t arg3)\n\n{\n    char cVar1;\n    ulong *puVar2;\n    \n    puVar2 = arg2;\n    fcn.1400192e4(arg2);\n    if ((*(arg2 + 0x14) & 6) == 0) {\n        *(arg3 + 0x2c) = 9;\n    }\n    else {\n        if ((*(arg2 + 0x14) >> 0xc & 1) == 0) {\n            if ((*(arg2 + 0x14) & 1) != 0) {\n                puVar2 = arg2;\n                cVar1 = fcn.14001c990(arg2);\n                *(arg2 + 2) = 0;\n                if (cVar1 == '\\0') goto code_r0x00014001ca3e;\n                *arg2 = arg2[1];\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffffe;\n            }\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) | 2;\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffff7;\n            *(arg2 + 2) = 0;\n            if (((*(arg2 + 0x14) & 0x4c0) == 0) && (puVar2 = arg2,  cVar1 = fcn.14001cad8(arg2),  cVar1 == '\\0')) {\n                puVar2 = arg2;\n                fcn.140022b1c(arg2);\n            }\n            cVar1 = fcn.14001c898(puVar2 & 0xffffffffffffff00 | arg1, arg2, arg3);\n            if (cVar1 != '\\0') {\n                return arg1;\n            }\n            goto code_r0x00014001ca3e;\n        }\n        *(arg3 + 0x2c) = 0x22;\n    }\n    *(arg3 + 0x30) = 1;\ncode_r0x00014001ca3e:\n    LOCK();\n    *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n    return 0xffffffff;\n}\n",
        "token_count": 541
    },
    "14001cbe": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14001cbec(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    if ((noname_0 != '\\0') && ((*(arg2 + 0x14) >> 9 & 1) != 0)) {\n        fcn.140015c6c(arg2, arg3);\n        LOCK();\n        *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffd7f;\n        *(arg2 + 4) = 0;\n        arg2[1] = 0;\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 142
    },
    "140021c9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.140021c98(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(*(*(in_GS_OFFSET + 0x30) + 0x60) + 0xbc) >> 8 & 0xffffff01;\n}\n",
        "token_count": 59
    },
    "140027bc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid fcn.140027bcc(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 18
    },
    "1400284a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.1400284ac(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = fcn.140028b70();\n    fcn.140028b8a();\n    uVar4 = 0;\n    if ((uVar1 & 0x3f) != 0) {\n        uVar2 = (uVar1 & 1) << 4;\n        uVar4 = uVar2 | 8;\n        if ((uVar1 & 4) == 0) {\n            uVar4 = uVar2;\n        }\n        uVar2 = uVar4 | 4;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar4;\n        }\n        uVar3 = uVar2 | 2;\n        if ((uVar1 & 0x10) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar4 = uVar3 | 1;\n        if ((uVar1 & 0x20) == 0) {\n            uVar4 = uVar3;\n        }\n        if ((uVar1 & 2) != 0) {\n            uVar4 = uVar4 | 0x80000;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 310
    },
    "140010c5": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140010c54(int64_t arg1, ulong arg2)\n\n{\n    uint16_t *puVar1;\n    uint64_t uVar2;\n    uint16_t *puVar3;\n    uint8_t in_R8B;\n    uint16_t uVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    puVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = puVar1;\n    puVar3 = puVar1;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar4 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar4 = (uVar4 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *puVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        puVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar1 - puVar3 >> 1;\n    *(arg1 + 0x40) = puVar3 + 1;\n    return;\n}\n",
        "token_count": 418
    },
    "140010fe": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140010fe4(int64_t arg1, uint64_t arg2)\n\n{\n    uint16_t *puVar1;\n    uint64_t uVar2;\n    uint16_t *puVar3;\n    uint8_t in_R8B;\n    uint16_t uVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    puVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = puVar1;\n    puVar3 = puVar1;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar4 = arg2;\n        arg2 = arg2 >> 4;\n        uVar4 = (uVar4 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *puVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        puVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar1 - puVar3 >> 1;\n    *(arg1 + 0x40) = puVar3 + 1;\n    return;\n}\n",
        "token_count": 406
    },
    "1400146e": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df",
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nulong fcn.1400146e8(int64_t arg1, uchar (*arg2) [16])\n\n{\n    char cVar1;\n    ushort uVar2;\n    uint *puVar3;\n    int64_t hFile;\n    ulong uVar4;\n    ulong unaff_RBX;\n    ulong unaff_RSI;\n    ulong unaff_RDI;\n    ulong in_stack_00000000;\n    int32_t iVar5;\n    uint in_stack_00000014;\n    ulong in_stack_00000020;\n    uint32_t in_stack_ffffffffffffffdc;\n    uint32_t in_stack_ffffffffffffffe4;\n    uint uVar6;\n    ulong in_stack_fffffffffffffff0;\n    \n    if (arg2 != NULL) {\n        *arg2 = ZEXT816(0);\n        arg2[1] = ZEXT816(0);\n        arg2[2] = ZEXT816(0);\n        if (arg1 != 0) {\n            uVar6 = 0;\n            hFile = (*_sym.imp.KERNEL32.dll_CreateFileW)();\n            if (hFile == -1) {\n                cVar1 = fcn.140014d60(arg1);\n                if (cVar1 == '\\0') {\n                    fcn.140015ffc(2);\n                }\n                else {\n                    uVar2 = fcn.140014b20(0x10, arg1);\n                    iVar5 = 0;\n                    *(*arg2 + 6) = uVar2;\n                    *(*arg2 + 8) = 1;\n                    cVar1 = fcn.140014c5c(arg1, &stack0x00000010);\n                    if (cVar1 != '\\0') {\n                        *arg2[1] = iVar5 + -1;\n                        **arg2 = iVar5 + -1;\n                        uVar4 = fcn.14001eb90(0x7bc, 1, 1, 0, in_stack_ffffffffffffffdc << 0x20, \n                                              in_stack_ffffffffffffffe4 << 0x20, CONCAT44(uVar6, 0xffffffff), \n                                              in_stack_fffffffffffffff0, unaff_RDI, in_stack_00000000, unaff_RBX, \n                                              CONCAT44(in_stack_00000014, iVar5), unaff_RSI, in_stack_00000020);\n                        *arg2[2] = uVar4;\n                        *(arg2[1] + 8) = uVar4;\n                        *(arg2[2] + 8) = uVar4;\n                        return 0;\n                    }\n                }\n                *arg2 = ZEXT816(0);\n                arg2[1] = ZEXT816(0);\n                arg2[2] = ZEXT816(0);\n                return 0xffffffff;\n            }\n            cVar1 = fcn.14001483c(arg1, 0xffffffff, hFile, arg2);\n            if (cVar1 == '\\0') {\n                *arg2 = ZEXT816(0);\n                arg2[1] = ZEXT816(0);\n                arg2[2] = ZEXT816(0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                return 0xffffffff;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hFile);\n            return 0;\n        }\n    }\n    puVar3 = fcn.140016068();\n    *puVar3 = 0;\n    puVar3 = fcn.140016088();\n    *puVar3 = 0x16;\n    fcn.140019f10();\n    return 0xffffffff;\n}\n",
        "token_count": 785
    },
    "14000acc": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014000ad96)\n// WARNING: Removing unreachable block (ram,0x00014000ad06)\n// WARNING: Removing unreachable block (ram,0x00014000acdf)\n\nulong fcn.14000accc(ulong noname_0, ulong arg2)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t in_XCR0;\n    \n    piVar1 = cpuid_basic_info(0);\n    uVar6 = 0;\n    puVar2 = cpuid_Version_info(1);\n    uVar4 = puVar2[3];\n    if ((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) {\n        *0x14003d038 = 0xffffffffffffffff;\n        uVar5 = *puVar2 & 0xfff3ff0;\n        *0x14003d030 = 0x8000;\n        if ((((uVar5 == 0x106c0) || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n           ((uVar5 - 0x30650 < 0x21 && ((0x100010001U >> (uVar5 - 0x30650 & 0x3f) & 1) != 0)))) {\n            *0x14004c5dc = *0x14004c5dc | 1;\n        }\n    }\n    if (6 < *piVar1) {\n        iVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n        uVar6 = *(iVar3 + 4);\n        if ((uVar6 >> 9 & 1) != 0) {\n            *0x14004c5dc = *0x14004c5dc | 2;\n        }\n    }\n    *0x14003d028 = 1;\n    *0x14003d02c = 2;\n    if ((uVar4 >> 0x14 & 1) != 0) {\n        *0x14003d028 = 2;\n        *0x14003d02c = 6;\n        if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {\n            *0x14003d02c = 0xe;\n            *0x14003d028 = 3;\n            if ((uVar6 & 0x20) != 0) {\n                *0x14003d028 = 5;\n                *0x14003d02c = 0x2e;\n                if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {\n                    *0x14003d02c = 0x6e;\n                    *0x14003d028 = 6;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 754
    },
    "140016ba": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nvoid fcn.140016ba0(int64_t arg1, int32_t *arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uchar auStack664 [32];\n    ulong uStack632;\n    uint uStack624;\n    int32_t iStack616;\n    uchar auStack612 [8];\n    uchar auStack604 [8];\n    uchar auStack596 [12];\n    int32_t iStack584;\n    uchar auStack572 [548];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003d018 ^ auStack664;\n    if ((arg2 == NULL) || (arg1 == 0)) {\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\n        fcn.140019f10();\n    }\n    else {\n        uStack624 = 0;\n        uStack632 = 0;\n        iVar4 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(arg1, 0, &iStack616, 0);\n        if (iVar4 == -1) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if ((iVar2 != 2) && (iVar2 != 3)) {\n                if (iVar2 == 8) {\n                    puVar3 = fcn.140016088();\n                    *puVar3 = 0xc;\n                    goto code_r0x0001400168ba;\n                }\n                if (iVar2 != 0x12) {\n                    puVar3 = fcn.140016088();\n                    *puVar3 = 0x16;\n                    goto code_r0x0001400168ba;\n                }\n            }\n            puVar3 = fcn.140016088();\n            *puVar3 = 2;\n        }\n        else {\n            if (iStack616 == 0x80) {\n                iStack616 = 0;\n            }\n            *arg2 = iStack616;\n            uVar5 = fcn.140016ae8(auStack612);\n            *(arg2 + 2) = uVar5;\n            uVar5 = fcn.140016ae8(auStack604);\n            *(arg2 + 4) = uVar5;\n            uVar5 = fcn.140016ae8(auStack596);\n            *(arg2 + 6) = uVar5;\n            arg2[8] = iStack584;\n            iVar2 = fcn.14001f9a4(arg2 + 9, 0x104, auStack572);\n            if (iVar2 != 0) {\n                uStack632 = 0;\n                fcn.140019f30(0, 0, 0, 0);\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n    }\ncode_r0x0001400168ba:\n    fcn.14000a100(uStack24 ^ auStack664);\n    return;\n}\n",
        "token_count": 673
    },
    "140016d5": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140016d50(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140016d70. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x14004ca30) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "140016e3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140016e38(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140016e58. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x14004ca30) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 103
    },
    "140017d4": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140017d40(void)\n\n{\n    uint8_t uVar1;\n    \n    uVar1 = *0x14003d018 & 0x3f;\n    return *0x14003d018 & 0xffffffffffffff00 |\n           ((*0x14004c798 ^ *0x14003d018) >> uVar1 | (*0x14004c798 ^ *0x14003d018) << 0x40 - uVar1) != 0;\n}\n",
        "token_count": 111
    },
    "140017d6": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.140017d68(ulong arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    \n    uVar2 = *0x14003d018 & 0x3f;\n    if (((*0x14004c798 ^ *0x14003d018) >> uVar2 | (*0x14004c798 ^ *0x14003d018) << 0x40 - uVar2) == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x000140017d9c. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (**0x14002a368)(arg1);\n    return uVar1;\n}\n",
        "token_count": 170
    },
    "140018ae": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140018ae4(uint64_t arg1)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    \n    if (*0x14004c9d8 == *0x14003d018) {\n        uVar2 = 0x40 - (*0x14003d018 & 0x3f) & 0x3f;\n        *0x14004c9d8 = (arg1 >> uVar2 | arg1 << 0x40 - uVar2) ^ *0x14003d018;\n        return;\n    }\n    fcn.140019238();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 157
    },
    "140018eb": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.140018eb0(int64_t **arg1)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    uint64_t *puVar4;\n    uint8_t uVar5;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    uint64_t *lpMem;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    uint64_t *puVar10;\n    \n    uVar1 = *0x14003d018;\n    puVar6 = **arg1;\n    if (puVar6 == NULL) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar5 = *0x14003d018 & 0x3f;\n        lpMem = (*0x14003d018 ^ *puVar6) >> uVar5 | (*0x14003d018 ^ *puVar6) << 0x40 - uVar5;\n        puVar6 = (*0x14003d018 ^ puVar6[1]) >> uVar5 | (*0x14003d018 ^ puVar6[1]) << 0x40 - uVar5;\n        puVar7 = puVar6;\n        uVar3 = *0x14003d018;\n        puVar10 = lpMem;\n        if (lpMem - 1U < 0xfffffffffffffffe) {\n            while (puVar6 = puVar6 + -1,  lpMem <= puVar6) {\n                if (*puVar6 != uVar1) {\n                    *puVar6 = uVar1;\n                    (**0x14002a368)();\n                    uVar5 = *0x14003d018 & 0x3f;\n                    uVar8 = *0x14003d018 ^ ***arg1;\n                    uVar3 = *0x14003d018 ^ (**arg1)[1];\n                    puVar9 = uVar8 >> uVar5 | uVar8 << 0x40 - uVar5;\n                    puVar4 = uVar3 >> uVar5 | uVar3 << 0x40 - uVar5;\n                    uVar3 = *0x14003d018;\n                    if ((puVar9 != puVar10) || (puVar4 != puVar7)) {\n                        puVar6 = puVar4;\n                        puVar7 = puVar4;\n                        lpMem = puVar9;\n                        puVar10 = puVar9;\n                    }\n                }\n            }\n            if (lpMem != 0xffffffffffffffff) {\n                fcn.140019f78(lpMem);\n                uVar3 = *0x14003d018;\n            }\n            ***arg1 = uVar3;\n            *(**arg1 + 8) = uVar3;\n            *(**arg1 + 0x10) = uVar3;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 647
    },
    "14001df3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14001df30(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint8_t uVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *(uVar7 * 8 + 0x14004cf10) ^ *0x14003d018;\n    uVar5 = *0x14003d018 & 0x3f;\n    uVar6 = uVar6 >> uVar5 | uVar6 << 0x40 - uVar5;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar4 = *(uVar6 * 8 + 0x14004ce60);\n                if (iVar4 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x1400321a0);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if ((iVar4 != 0) ||\n                       ((((iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar3 == 0x57 &&\n                          (iVar3 = fcn.140019b60(arg1_00, L\"api-ms-\", 7),  iVar3 != 0)) &&\n                         (iVar3 = fcn.140019b60(arg1_00, L\"ext-ms-\", 7),  iVar3 != 0)) &&\n                        (iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0),  iVar4 != 0)))) {\n                        piVar1 = uVar6 * 8 + 0x14004ce60;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar4;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar4);\n                        }\n                        goto code_r0x00014001e0b2;\n                    }\n                    *(uVar6 * 8 + 0x14004ce60) = 0xffffffffffffffff;\n                }\n                else if (iVar4 != -1) {\ncode_r0x00014001e0b2:\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar4, arg2);\n                    if (uVar6 != 0) {\n                        uVar5 = 0x40 - (*0x14003d018 & 0x3f) & 0x3f;\n                        *(uVar7 * 8 + 0x14004cf10) = (uVar6 >> uVar5 | uVar6 << 0x40 - uVar5) ^ *0x14003d018;\n                        return uVar6;\n                    }\n                    break;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        uVar5 = 0x40 - (*0x14003d018 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x14004cf10) = (0xffffffffffffffffU >> uVar5 | -1 << 0x40 - uVar5) ^ *0x14003d018;\n    }\n    return 0;\n}\n",
        "token_count": 816
    },
    "14002277": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140022770(void)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.14001f808(0);\n    uVar1 = *0x14003d018 & 0x3f;\n    uVar2 = *0x14004d278 ^ *0x14003d018;\n    fcn.14001f868(0);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 116
    },
    "1400227a": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.1400227a8(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.14001f808(*arg2);\n    uVar1 = *0x14003d018 & 0x3f;\n    uVar2 = *0x14004d290 ^ *0x14003d018;\n    fcn.14001f868(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 145
    },
    "14002457": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.140024578(uint8_t *arg1, ulong arg2, ulong *arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            if ((arg2 & 0xffffff80) == 0) {\n                *arg1 = arg2;\n                return 1;\n            }\n            if ((arg2 & 0xfffff800) == 0) {\n                iVar1 = 1;\n                uVar4 = 0xc0;\n                iVar2 = iVar1;\n            }\n            else if ((arg2 & 0xffff0000) == 0) {\n                if (arg2 - 0xd800 < 0x800) {\ncode_r0x000140027c48:\n                    *arg3 = 0;\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                iVar1 = 2;\n                uVar4 = 0xe0;\n                iVar2 = iVar1;\n            }\n            else {\n                if (((arg2 & 0xffe00000) != 0) || (0x10ffff < arg2)) goto code_r0x000140027c48;\n                iVar1 = 3;\n                uVar4 = 0xf0;\n                iVar2 = iVar1;\n            }\n            do {\n                uVar3 = arg2;\n                arg2._0_4_ = arg2 >> 6;\n                arg1[iVar1] = uVar3 & 0x3f | 0x80;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n            *arg1 = arg2 | uVar4;\n            *arg3 = 0;\n            return iVar2 + 1;\n        }\n        *arg1 = 0;\n    }\n    *arg3 = 0;\n    return 1;\n}\n",
        "token_count": 464
    },
    "140027a9": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140027a94(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "14001438": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001438c(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140014390. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 74
    },
    "14001439": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014398(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014001439c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 75
    },
    "14001cd6": {
        "rules": [
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b",
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5"
        ],
        "decompiled_code": "\nulong fcn.14001cd64(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint64_t uVar2;\n    uint8_t uVar3;\n    char cVar4;\n    uint16_t uVar5;\n    ulong uVar6;\n    char *pcVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    uchar *puVar11;\n    int16_t iVar12;\n    uint8_t *arg1_00;\n    uint32_t uVar13;\n    uint8_t *puVar14;\n    uchar *puVar15;\n    uint64_t uVar16;\n    uint32_t in_stack_00000030;\n    uint8_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    \n    *arg2 = 0;\n    uVar13 = 0;\n    if (-1 < in_stack_00000030) {\n        uVar13 = in_stack_00000030;\n    }\n    if (arg3 <= uVar13 + 0xb) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x22;\n        fcn.140019e44(0, 0, 0, 0);\n        return 0x22;\n    }\n    if ((*arg1 >> 0x34 & 0x7ff) == 0x7ff) {\n        uVar6 = fcn.14001d0fc(arg1, arg2, arg3, arg4);\n        if (uVar6 != 0) {\n            *arg2 = 0;\n            return uVar6;\n        }\n        pcVar7 = fcn.14000b5b8(arg2, 0x65);\n        if (pcVar7 == NULL) {\n            return 0;\n        }\n        *pcVar7 = (in_stack_00000038 ^ 1) * ' ' + 'P';\n        pcVar7[3] = '\\0';\n        return 0;\n    }\n    puVar11 = arg2;\n    if (*arg1 < 0) {\n        *arg2 = 0x2d;\n        puVar11 = arg2 + 1;\n    }\n    puVar1 = puVar11 + 1;\n    uVar16 = 0x3ff;\n    iVar12 = (in_stack_00000038 ^ 1) * 0x20 + 7;\n    if ((*arg1 & 0x7ff0000000000000) == 0) {\n        *puVar11 = 0x30;\n        uVar16 = -((*arg1 & 0xfffffffffffff) != 0) & 0x3fe;\n    }\n    else {\n        *puVar11 = 0x31;\n    }\n    arg1_00 = puVar11 + 2;\n    if (uVar13 == 0) {\n        uVar3 = 0;\n    }\n    else {\n        if (*(in_stack_00000050 + 0x28) == '\\0') {\n            fcn.140013830(in_stack_00000050);\n        }\n        uVar3 = ***(*(in_stack_00000050 + 0x18) + 0xf8);\n    }\n    *puVar1 = uVar3;\n    if ((*arg1 & 0xfffffffffffff) != 0) {\n        puVar11 = 0x30;\n        puVar15 = 0xf000000000000;\n        while (arg2 = puVar15,  0 < uVar13) {\n            uVar5 = ((*arg1 & arg2) >> (puVar11 & 0x3f)) + 0x30;\n            if (0x39 < uVar5) {\n                uVar5 = uVar5 + iVar12;\n            }\n            *arg1_00 = uVar5;\n            uVar13 = uVar13 - 1;\n            arg1_00 = arg1_00 + 1;\n            puVar15 = arg2 >> 4;\n            uVar5 = puVar11 - 4;\n            arg2 = uVar5;\n            puVar11 = arg2;\n            if (uVar5 < 0) goto code_r0x00014001cfba;\n        }\n        cVar4 = fcn.14001d760(arg1, arg2, puVar11, in_stack_00000048);\n        puVar14 = arg1_00;\n        if (cVar4 == '\\0') goto code_r0x00014001cfe0;\n        while( true ) {\n            puVar8 = puVar14 + -1;\n            uVar2 = arg2 & 0xffffffffffffff00;\n            arg2 = uVar2 | *puVar8;\n            if ((arg2 - 0x46U & 0xdf) != 0) break;\n            *puVar8 = 0x30;\n            puVar14 = puVar8;\n        }\n        if (puVar8 == puVar1) {\n            puVar14[-2] = puVar14[-2] + 1;\n        }\n        else {\n            if (*puVar8 == 0x39) {\n                arg2 = uVar2 | iVar12 + 0x39;\n            }\n            cVar4 = arg2;\n            arg2 = arg2 & 0xffffffffffffff00;\n            *puVar8 = cVar4 + 1;\n        }\n    }\ncode_r0x00014001cfba:\n    if (0 < uVar13) {\n        fcn.14000b880(arg1_00, arg2 & 0xffffffffffffff00 | 0x30, uVar13);\n        arg1_00 = arg1_00 + uVar13;\n    }\ncode_r0x00014001cfe0:\n    if (*puVar1 == 0) {\n        arg1_00 = puVar1;\n    }\n    *arg1_00 = (in_stack_00000038 ^ 1) * ' ' + 0x50;\n    puVar1 = arg1_00 + 2;\n    uVar13 = *arg1 >> 0x34 & 0x7ff;\n    iVar9 = uVar13 - uVar16;\n    iVar10 = iVar9;\n    if (iVar9 < 0) {\n        iVar10 = uVar16 - uVar13;\n    }\n    uVar3 = 0x2b;\n    if (iVar9 < 0) {\n        uVar3 = 0x2d;\n    }\n    arg1_00[1] = uVar3;\n    *puVar1 = 0x30;\n    puVar14 = puVar1;\n    if (iVar10 < 1000) {\ncode_r0x00014001d067:\n        if (99 < iVar10) goto code_r0x00014001d06d;\ncode_r0x00014001d0a0:\n        if (iVar10 < 10) goto code_r0x00014001d0d1;\n    }\n    else {\n        puVar14 = arg1_00 + 3;\n        *puVar1 = iVar10 / 1000 + 0x30;\n        iVar10 = iVar10 % 1000;\n        if (puVar14 == puVar1) goto code_r0x00014001d067;\ncode_r0x00014001d06d:\n        iVar9 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar10) >> 0x40, 0) + iVar10;\n        iVar9 = (iVar9 >> 6) - (iVar9 >> 0x3f);\n        *puVar14 = iVar9 + 0x30;\n        puVar14 = puVar14 + 1;\n        iVar10 = iVar10 + iVar9 * -100;\n        if (puVar14 == puVar1) goto code_r0x00014001d0a0;\n    }\n    *puVar14 = iVar10 / 10 + 0x30;\n    puVar14 = puVar14 + 1;\n    iVar10 = iVar10 % 10;\ncode_r0x00014001d0d1:\n    *puVar14 = iVar10 + 0x30;\n    puVar14[1] = 0;\n    return 0;\n}\n",
        "token_count": 1880
    },
    "14000165": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.140001650(int64_t arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    int32_t *arg4;\n    uint32_t uVar3;\n    int64_t arg3;\n    \n    arg4 = *(arg1 + 0x10);\n    do {\n        if (*(arg1 + 0x18) <= arg4) {\n            return NULL;\n        }\n        puVar2 = arg4 + 0x12;\n        arg3 = arg2 - puVar2;\n        do {\n            puVar1 = puVar2 + arg3;\n            uVar3 = *puVar2 - *puVar1;\n            if (uVar3 != 0) break;\n            puVar2 = puVar2 + 1;\n        } while (*puVar1 != 0);\n        if (uVar3 == 0) {\n            return arg4;\n        }\n        arg4 = *arg4 + arg4;\n        if (arg4 < *(arg1 + 0x10)) {\n            fcn.140001c50(\"Cannot read Table of Contents.\\n\", uVar3, arg3, arg4);\n            return NULL;\n        }\n    } while( true );\n}\n",
        "token_count": 278
    },
    "14000178": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.140001780(int64_t arg1, int32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *arg2 + arg2;\n    if (uVar1 < *(arg1 + 0x10)) {\n        fcn.140001c50(\"Cannot read Table of Contents.\\n\", arg2, arg3, arg4);\n        uVar1 = *(arg1 + 0x18);\n    }\n    return uVar1;\n}\n",
        "token_count": 119
    },
    "1400019d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.1400019d0(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int64_t *arg1_00;\n    \n    iVar2 = fcn.140001b30(arg1 + 0xf, 0x1000, 0x14002a920, arg2);\n    if (iVar2 < 0x1000) {\n        iVar2 = fcn.140001b30(arg1 + 0x20f, 0x1000, 0x14002a920, arg3);\n        if (iVar2 < 0x1000) {\n            arg1_00 = arg1 + 0x40f;\n            fcn.140002c50(arg1_00, arg2);\n            *(arg1 + 0xa0f) = 0;\n            do {\n                cVar1 = *arg1_00;\n                *(arg1_00 + 0x400) = cVar1;\n                arg1_00 = arg1_00 + 1;\n            } while (cVar1 != '\\0');\n            iVar2 = fcn.1400017b0(arg1);\n            if (iVar2 == 0) {\n                return 1;\n            }\n            if (*arg1 != 0) {\n                fcn.14000e60c();\n                *arg1 = 0;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 322
    },
    "140001ab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001ab0(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (arg1[2] != 0) {\n            fcn.140014138(arg1[2]);\n        }\n        if (*arg1 != 0) {\n            fcn.14000e60c();\n            *arg1 = 0;\n        }\n        fcn.140014138(arg1);\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "140001af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001af0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140014130(1, 0x5090);\n    if (iVar1 == 0) {\n        fcn.140001c10(\"calloc\", \"Cannot allocate memory for ARCHIVE_STATUS\\n\", param_3, param_4);\n    }\n    return iVar1;\n}\n",
        "token_count": 107
    },
    "140001be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001be0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140001d00(arg1, &uStackX16);\n    return;\n}\n",
        "token_count": 97
    },
    "140001c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001c50(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong arg1_00;\n    uint32_t uVar1;\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar1 = sub.KERNEL32.dll_GetCurrentProcessId();\n    arg1_00 = fcn.140014310(2);\n    fcn.140001b90(arg1_00, \"[%d] \", uVar1, arg4);\n    fcn.140001d00(arg1, &uStackX16);\n    return;\n}\n",
        "token_count": 166
    },
    "140001d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001d00(ulong param_1, ulong param_2)\n\n{\n    uint64_t uVar1;\n    uchar *puVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    int64_t iVar5;\n    ulong arg1;\n    ulong uStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0x140001d10;\n    iVar3 = fcn.14000a130();\n    iVar3 = -iVar3;\n    *(&stack0x00001028 + iVar3) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar3;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d30;\n    puVar4 = fcn.140001040();\n    *(&stack0x00000020 + iVar3) = param_2;\n    *(&stack0x00000018 + iVar3) = 0;\n    uVar1 = *puVar4;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d58;\n    fcn.140013c80(uVar1 | 2, &stack0x00000028 + iVar3, 0x800, param_1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d70;\n    iVar5 = fcn.140006bf0(&stack0x00000828 + iVar3, &stack0x00000028 + iVar3, 0x800);\n    puVar2 = &stack0x00000828;\n    if (iVar5 == 0) {\n        puVar2 = &stack0x00000028;\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d8c;\n    arg1 = fcn.140014310(2);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001d9e;\n    fcn.140001b90(arg1, 0x14002a920, puVar2 + iVar3, param_1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140001dae;\n    fcn.14000a100(*(&stack0x00001028 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 516
    },
    "14000223": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002230(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uStackX24;\n    ulong uStackX32;\n    uchar auStack136 [32];\n    ulong uStack104;\n    ulong *puStack96;\n    uchar auStack88 [48];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003d018 ^ auStack136;\n    puStack96 = &uStackX24;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    puVar2 = fcn.140001040();\n    uStack104 = 0;\n    iVar1 = fcn.140013c80(*puVar2 | 2, arg1, 0x1000, arg2);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    if (iVar1 < 0x1000) {\n        fcn.140014e70(arg1, auStack88);\n    }\n    fcn.14000a100(uStack40 ^ auStack136);\n    return;\n}\n",
        "token_count": 260
    },
    "1400022d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400022d0(int64_t arg1)\n\n{\n    int64_t arg2;\n    uint uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    uint64_t arg2_00;\n    ulong uVar8;\n    ulong in_RDX;\n    ulong uVar9;\n    ulong unaff_RBP;\n    ulong unaff_RDI;\n    int64_t in_R8;\n    char *arg3;\n    int64_t in_R9;\n    ulong unaff_R12;\n    ulong unaff_R14;\n    uint auStackX8 [2];\n    int64_t iStackX16;\n    uchar auStackX24 [16];\n    ulong uStack32;\n    \n    iVar2 = fcn.140003ac0();\n    if (iVar2 == 0) {\n        *(arg1 + 0x507c) = 1;\n        iVar2 = fcn.140003e40(arg1);\n        if (((iVar2 == 0) && (iVar2 = fcn.140003840(arg1),  iVar2 == 0)) &&\n           (iVar2 = fcn.1400039a0(arg1, in_RDX, in_R8, in_R9),  iVar2 == 0)) {\n            uStack32 = 0x14000250f;\n            iVar3 = fcn.14000a130();\n            iVar3 = -iVar3;\n            *(&stack0x00001018 + iVar3) = *0x14003d018 ^ &stack0xffffffffffffffe8 + iVar3;\n            arg2_00 = *(arg1 + 0x10);\n            *(&stack0xffffffffffffffe0 + iVar3) = 0x14000253f;\n            iVar4 = (**0x14002a360)(\"__main__\");\n            if (iVar4 == 0) {\n                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002553;\n                fcn.140001c50(\"Could not get __main__ module.\\n\", in_RDX, in_R8, in_R9);\n            }\n            else {\n                *(&stack0x00001030 + iVar3) = unaff_R12;\n                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002574;\n                iVar5 = (**0x14002a360)(iVar4);\n                if (iVar5 == 0) {\n                    *(&stack0xffffffffffffffe0 + iVar3) = 0x140002588;\n                    fcn.140001c50(\"Could not get __main__ module\\'s dict.\\n\", in_RDX, in_R8, in_R9);\n                }\n                else {\n                    *(&stack0x00001060 + iVar3) = unaff_RBP;\n                    *(&stack0x00001068 + iVar3) = unaff_RDI;\n                    *(&stack0x00001028 + iVar3) = unaff_R14;\n                    if (arg2_00 < *(arg1 + 0x18)) {\n                        do {\n                            if (*(arg2_00 + 0x11) == 's') {\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x1400025c9;\n                                uVar8 = fcn.1400012b0(arg1, arg2_00);\n                                arg2 = arg2_00 + 0x12;\n                                uVar9 = 0x1000;\n                                *(&stack0x00000010 + iVar3) = arg2;\n                                in_R9 = arg1 + 0x4078;\n                                arg3 = \"%s%c%s.py\";\n                                *(&stack0x00000008 + iVar3) = 0x5c;\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x1400025fa;\n                                iVar2 = fcn.140001b30(&stack0x00000018 + iVar3, 0x1000, \"%s%c%s.py\", in_R9);\n                                if (0xfff < iVar2) {\n                                    *(&stack0xffffffffffffffe0 + iVar3) = 0x14000274b;\n                                    fcn.140001c50(\"Absolute path to script exceeds PATH_MAX\\n\", uVar9, arg3, in_R9);\n                                    break;\n                                }\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002617;\n                                uVar6 = (**0x14002a360)(&stack0x00000018 + iVar3);\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002634;\n                                uVar9 = uVar6;\n                                (**0x14002a360)(iVar4, \"__file__\");\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002644;\n                                (**0x14002a360)(uVar6);\n                                uVar1 = *(arg2_00 + 0xc);\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002657;\n                                iVar7 = (**0x14002a360)(uVar8, uVar1);\n                                if (iVar7 == 0) {\n                                    *(&stack0xffffffffffffffe0 + iVar3) = 0x140002728;\n                                    fcn.140001c50(\"Failed to unmarshal code object for %s\\n\", arg2, uVar9, in_R9);\n                                    *(&stack0xffffffffffffffe0 + iVar3) = 0x140002735;\n                                    (**0x14002a360)();\n                                    break;\n                                }\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x14000267d;\n                                (**0x14002a360)(iVar4, \"_pyi_main_co\", iVar7);\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x140002693;\n                                in_R8 = iVar5;\n                                iVar7 = (**0x14002a360)(iVar7, iVar5);\n                                if (iVar7 == 0) {\n                                    *(&stack0xffffffffffffffe0 + iVar3) = 0x140002703;\n                                    (**0x14002a360)();\n                                    *(&stack0xffffffffffffffe0 + iVar3) = 0x140002712;\n                                    fcn.140001c50(\"Failed to execute script \\'%s\\' due to unhandled exception!\\n\", arg2\n                                                  , in_R8, in_R9);\n                                    break;\n                                }\n                                *(&stack0xffffffffffffffe0 + iVar3) = 0x1400026a0;\n                                fcn.140014138(uVar8);\n                            }\n                            *(&stack0xffffffffffffffe0 + iVar3) = 0x1400026ab;\n                            arg2_00 = fcn.140001780(arg1, arg2_00, in_R8, in_R9);\n                        } while (arg2_00 < *(arg1 + 0x18));\n                    }\n                }\n            }\n            *(&stack0xffffffffffffffe0 + iVar3) = 0x1400026ea;\n            uVar8 = fcn.14000a100(*(&stack0x00001018 + iVar3) ^ &stack0xffffffffffffffe8 + iVar3);\n            return uVar8;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 1620
    },
    "1400024a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400024a0(int64_t arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t arg2;\n    \n    arg2 = *(arg1 + 0x10);\n    if (arg2 < *(arg1 + 0x18)) {\n        do {\n            uVar1 = *(arg2 + 0x11) + 0xa6;\n            if ((uVar1 < 0x1f) && ((0x40000501U >> (uVar1 & 0x1f) & 1) != 0)) {\n                return 1;\n            }\n            arg2 = fcn.140001780(arg1, arg2, arg3, arg4);\n        } while (arg2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 194
    },
    "140002bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140002bf0(int64_t arg1, char *arg2)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.14000b5b8(arg2, 0x5c);\n    if (iVar2 == 0) {\n        iVar2 = fcn.14000b5b8(arg2, 0x2f);\n        if (iVar2 == 0) goto code_r0x000140002c26;\n    }\n    arg2 = iVar2 + 1;\ncode_r0x000140002c26:\n    arg1 = arg1 - arg2;\n    do {\n        cVar1 = *arg2;\n        arg2[arg1] = cVar1;\n        arg2 = arg2 + 1;\n    } while (cVar1 != '\\0');\n    return 1;\n}\n",
        "token_count": 191
    },
    "140002cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002cd0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *lpWideCharStr;\n    ulong uVar4;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x140002cdc;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00002018 + iVar2) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar2;\n    uVar4 = 0x1000;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140002d07;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, &stack0x00000018 + iVar2);\n    if (iVar1 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140002d1e;\n        fcn.140001cb0(0x14002ac60, \"Failed to get executable path.\\n\", uVar4, param_4);\n    }\n    else {\n        uVar4 = 0x1000;\n        lpWideCharStr = &stack0x00000018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140002d35;\n        iVar3 = fcn.140006ec0(param_1, lpWideCharStr, 0x1000);\n        if (iVar3 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140002d46;\n            fcn.140001c50(\"Failed to convert executable path to UTF-8.\\n\", lpWideCharStr, uVar4, param_4);\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140002d5f;\n    fcn.14000a100(*(&stack0x00002018 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 479
    },
    "140002d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002d70(ulong param_1)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    ulong uStack8;\n    \n    uStack8 = 0x140002d7a;\n    iVar1 = fcn.14000a130();\n    iVar1 = -iVar1;\n    *(&stack0x00002060 + iVar1) = *0x14003d018 ^ &stack0x00000000 + iVar1;\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002da2;\n    fcn.140006db0(&stack0x00000050 + iVar1, param_1, 0x1000);\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002db1;\n    fcn.140014f74(&stack0x00000050 + iVar1, &stack0x00000020 + iVar1);\n    *(&stack0xfffffffffffffff8 + iVar1) = 0x140002dca;\n    fcn.14000a100(*(&stack0x00002060 + iVar1) ^ &stack0x00000000 + iVar1);\n    return;\n}\n",
        "token_count": 264
    },
    "140002f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140002f20(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    char *arg2_00;\n    \n    *0x14003dcb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_DontWriteBytecodeFlag\");\n    if (*0x14003dcb8 == 0) {\n        arg2_00 = \"Failed to get address for Py_DontWriteBytecodeFlag\\n\";\n    }\n    else {\n        *0x14003dca0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_FileSystemDefaultEncoding\");\n        if (*0x14003dca0 == 0) {\n            arg2_00 = \"Failed to get address for Py_FileSystemDefaultEncoding\\n\";\n        }\n        else {\n            *0x14003dc88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_FrozenFlag\");\n            if (*0x14003dc88 == 0) {\n                arg2_00 = \"Failed to get address for Py_FrozenFlag\\n\";\n            }\n            else {\n                *0x14003dcb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_IgnoreEnvironmentFlag\");\n                if (*0x14003dcb0 == 0) {\n                    arg2_00 = \"Failed to get address for Py_IgnoreEnvironmentFlag\\n\";\n                }\n                else {\n                    *0x14003dc90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_NoSiteFlag\");\n                    if (*0x14003dc90 == 0) {\n                        arg2_00 = \"Failed to get address for Py_NoSiteFlag\\n\";\n                    }\n                    else {\n                        *0x14003dcc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_NoUserSiteDirectory\");\n                        if (*0x14003dcc0 == 0) {\n                            arg2_00 = \"Failed to get address for Py_NoUserSiteDirectory\\n\";\n                        }\n                        else {\n                            *0x14003dc98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_OptimizeFlag\");\n                            if (*0x14003dc98 == 0) {\n                                arg2_00 = \"Failed to get address for Py_OptimizeFlag\\n\";\n                            }\n                            else {\n                                *0x14003dca8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_VerboseFlag\");\n                                if (*0x14003dca8 == 0) {\n                                    arg2_00 = \"Failed to get address for Py_VerboseFlag\\n\";\n                                }\n                                else {\n                                    *0x14003dcc8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                             (arg1, \"Py_UnbufferedStdioFlag\");\n                                    if (*0x14003dcc8 == 0) {\n                                        arg2_00 = \"Failed to get address for Py_UnbufferedStdioFlag\\n\";\n                                    }\n                                    else {\n                                        if (0x132 < arg2) {\n                                            *0x14003dcd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_UTF8Mode\");\n                                            if (*0x14003dcd0 == 0) {\n                                                arg2_00 = \"Failed to get address for Py_UTF8Mode\\n\";\n                                                goto code_r0x000140002f4f;\n                                            }\n                                        }\n                                        *0x14003dd60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_BuildValue\");\n                                        if (*0x14003dd60 == 0) {\n                                            arg2_00 = \"Failed to get address for Py_BuildValue\\n\";\n                                        }\n                                        else {\n                                            *0x14003dcf0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"Py_DecRef\");\n                                            if (*0x14003dcf0 == 0) {\n                                                arg2_00 = \"Failed to get address for Py_DecRef\\n\";\n                                            }\n                                            else {\n                                                *0x14003dce0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                         (arg1, \"Py_Finalize\");\n                                                if (*0x14003dce0 == 0) {\n                                                    arg2_00 = \"Failed to get address for Py_Finalize\\n\";\n                                                }\n                                                else {\n                                                    *0x14003dce8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                             (arg1, \"Py_IncRef\");\n                                                    if (*0x14003dce8 == 0) {\n                                                        arg2_00 = \"Failed to get address for Py_IncRef\\n\";\n                                                    }\n                                                    else {\n                                                        *0x14003dcd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                 (arg1, \"Py_Initialize\");\n                                                        if (*0x14003dcd8 == 0) {\n                                                            arg2_00 = \"Failed to get address for Py_Initialize\\n\";\n                                                        }\n                                                        else {\n                                                            *0x14003dd08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                     (arg1, \"Py_SetPath\");\n                                                            if (*0x14003dd08 == 0) {\n                                                                arg2_00 = \"Failed to get address for Py_SetPath\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_GetPath\");\n                                                                if (*0x14003dd10 == 0) {\n                                                                    arg2_00 = \"Failed to get address for Py_GetPath\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14003dcf8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"Py_SetProgramName\");\n                                                            if (*0x14003dcf8 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for Py_SetProgramName\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_SetPythonHome\");\n                                                                if (*0x14003dd00 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for Py_SetPythonHome\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyDict_GetItemString\");\n                                                                if (*0x14003dd88 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyDict_GetItemString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Clear\");\n                                                                if (*0x14003dd90 == 0) {\n                                                                    arg2_00 = \"Failed to get address for PyErr_Clear\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14003dd98 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyErr_Occurred\");\n                                                            if (*0x14003dd98 == 0) {\n                                                                arg2_00 = \"Failed to get address for PyErr_Occurred\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dda0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Print\");\n                                                                if (*0x14003dda0 == 0) {\n                                                                    arg2_00 = \"Failed to get address for PyErr_Print\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14003de00 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PyErr_Fetch\");\n                                                            if (*0x14003de00 == 0) {\n                                                                arg2_00 = \"Failed to get address for PyErr_Fetch\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyErr_Restore\");\n                                                                if (*0x14003de08 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyErr_Restore\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyErr_NormalizeException\");\n                                                            if (*0x14003de10 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyErr_NormalizeException\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyImport_AddModule\");\n                                                                if (*0x14003dd40 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyImport_AddModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyImport_ExecCodeModule\");\n                                                            if (*0x14003dd30 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyImport_ExecCodeModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyImport_ImportModule\")\n                                                                ;\n                                                                if (*0x14003dd38 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyImport_ImportModule\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyList_Append\");\n                                                                if (*0x14003dd58 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyList_Append\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyList_New\");\n                                                                if (*0x14003dd50 == 0) {\n                                                                    arg2_00 = \"Failed to get address for PyList_New\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14003ddb0 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(arg1, \"PyLong_AsLong\")\n                                                            ;\n                                                            if (*0x14003ddb0 == 0) {\n                                                                arg2_00 = \"Failed to get address for PyLong_AsLong\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyModule_GetDict\");\n                                                                if (*0x14003dd80 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyModule_GetDict\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd70 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_CallFunction\")\n                                                                ;\n                                                                if (*0x14003dd70 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyObject_CallFunction\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyObject_CallFunctionObjArgs\");\n                                                            if (*0x14003dd78 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyObject_CallFunctionObjArgs\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_SetAttrString\"\n                                                                                         );\n                                                                if (*0x14003dd48 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyObject_SetAttrString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_GetAttrString\"\n                                                                                         );\n                                                                if (*0x14003de20 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyObject_GetAttrString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyObject_Str\");\n                                                                if (*0x14003de18 == 0) {\n                                                                    arg2_00 = \"Failed to get address for PyObject_Str\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x14003dd28 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (arg1, \"PyRun_SimpleStringFlags\");\n                                                            if (*0x14003dd28 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyRun_SimpleStringFlags\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dda8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_AddWarnOption\");\n                                                                if (*0x14003dda8 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PySys_AddWarnOption\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_SetArgvEx\");\n                                                                if (*0x14003dd20 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PySys_SetArgvEx\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_GetObject\");\n                                                                if (*0x14003ddd0 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PySys_GetObject\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_SetObject\");\n                                                                if (*0x14003ddb8 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PySys_SetObject\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dd18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PySys_SetPath\");\n                                                                if (*0x14003dd18 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PySys_SetPath\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddf0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyEval_EvalCode\");\n                                                                if (*0x14003ddf0 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyEval_EvalCode\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddf8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyMarshal_ReadObjectFromString\");\n                                                            if (*0x14003ddf8 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyMarshal_ReadObjectFromString\\n\"\n                                                            ;\n                                                            }\n                                                            else {\n                                                                *0x14003dd68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_FromString\");\n                                                                if (*0x14003dd68 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyUnicode_FromString\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"Py_DecodeLocale\");\n                                                                if (*0x14003ddc0 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for Py_DecodeLocale\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddc8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyMem_RawFree\");\n                                                                if (*0x14003ddc8 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyMem_RawFree\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003ddd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_FromFormat\");\n                                                                if (*0x14003ddd8 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyUnicode_FromFormat\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dde8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_Decode\");\n                                                                if (*0x14003dde8 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyUnicode_Decode\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003dde0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \n                                                            \"PyUnicode_DecodeFSDefault\");\n                                                            if (*0x14003dde0 == 0) {\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyUnicode_DecodeFSDefault\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_AsUTF8\");\n                                                                if (*0x14003de28 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyUnicode_AsUTF8\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_Join\");\n                                                                if (*0x14003de30 == 0) {\n                                                                    arg2_00 = \n                                                            \"Failed to get address for PyUnicode_Join\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14003de38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (arg1, \"PyUnicode_Replace\");\n                                                                if (*0x14003de38 != 0) {\n                                                                    return 0;\n                                                                }\n                                                                arg2_00 = \n                                                            \"Failed to get address for PyUnicode_Replace\\n\";\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\ncode_r0x000140002f4f:\n    fcn.140001cb0(0x14002ad00, arg2_00, arg3, arg4);\n    return 0xffffffff;\n}\n",
        "token_count": 4113
    },
    "14000473": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140004730(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong in_RDX;\n    char *arg2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    uVar2 = fcn.140006310(arg1 + 0x10);\n    *(arg1 + 0x4048) = uVar2;\n    iVar3 = fcn.140006310(arg1 + 0x1010);\n    iVar1 = *(arg1 + 0x4048);\n    *(arg1 + 0x4050) = iVar3;\n    if ((iVar1 != 0) && (iVar3 != 0)) {\n        *0x14004aef0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_Init\");\n        if (*0x14004aef0 == 0) {\n            arg2 = \"Failed to get address for Tcl_Init\\n\";\n        }\n        else {\n            *0x14004aef8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_CreateInterp\");\n            if (*0x14004aef8 == 0) {\n                arg2 = \"Failed to get address for Tcl_CreateInterp\\n\";\n            }\n            else {\n                *0x14004af00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_FindExecutable\");\n                if (*0x14004af00 == 0) {\n                    arg2 = \"Failed to get address for Tcl_FindExecutable\\n\";\n                }\n                else {\n                    *0x14004af08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_DoOneEvent\");\n                    if (*0x14004af08 == 0) {\n                        arg2 = \"Failed to get address for Tcl_DoOneEvent\\n\";\n                    }\n                    else {\n                        *0x14004af10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_Finalize\");\n                        if (*0x14004af10 == 0) {\n                            arg2 = \"Failed to get address for Tcl_Finalize\\n\";\n                        }\n                        else {\n                            *0x14004af18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_FinalizeThread\");\n                            if (*0x14004af18 == 0) {\n                                arg2 = \"Failed to get address for Tcl_FinalizeThread\\n\";\n                            }\n                            else {\n                                *0x14004af20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_DeleteInterp\");\n                                if (*0x14004af20 == 0) {\n                                    arg2 = \"Failed to get address for Tcl_DeleteInterp\\n\";\n                                }\n                                else {\n                                    *0x14004af28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_CreateThread\");\n                                    if (*0x14004af28 == 0) {\n                                        arg2 = \"Failed to get address for Tcl_CreateThread\\n\";\n                                    }\n                                    else {\n                                        *0x14004af30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                 (iVar1, \"Tcl_GetCurrentThread\");\n                                        if (*0x14004af30 == 0) {\n                                            arg2 = \"Failed to get address for Tcl_GetCurrentThread\\n\";\n                                        }\n                                        else {\n                                            *0x14004af38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                     (iVar1, \"Tcl_MutexLock\");\n                                            if (*0x14004af38 == 0) {\n                                                arg2 = \"Failed to get address for Tcl_MutexLock\\n\";\n                                            }\n                                            else {\n                                                *0x14004af40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                         (iVar1, \"Tcl_MutexUnlock\");\n                                                if (*0x14004af40 == 0) {\n                                                    arg2 = \"Failed to get address for Tcl_MutexUnlock\\n\";\n                                                }\n                                                else {\n                                                    *0x14004af48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                             (iVar1, \"Tcl_ConditionFinalize\");\n                                                    if (*0x14004af48 == 0) {\n                                                        arg2 = \"Failed to get address for Tcl_ConditionFinalize\\n\";\n                                                    }\n                                                    else {\n                                                        *0x14004af50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                 (iVar1, \"Tcl_ConditionNotify\");\n                                                        if (*0x14004af50 == 0) {\n                                                            arg2 = \"Failed to get address for Tcl_ConditionNotify\\n\";\n                                                        }\n                                                        else {\n                                                            *0x14004af58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                     (iVar1, \"Tcl_ConditionWait\");\n                                                            if (*0x14004af58 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_ConditionWait\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004af60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_ThreadQueueEvent\")\n                                                                ;\n                                                                if (*0x14004af60 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for Tcl_ThreadQueueEvent\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004af68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_ThreadAlert\");\n                                                                if (*0x14004af68 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_ThreadAlert\\n\"\n                                                                    ;\n                                                                }\n                                                                else {\n                                                                    *0x14004af70 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_GetVar2\");\n                                                            if (*0x14004af70 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_GetVar2\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004af78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_SetVar2\");\n                                                                if (*0x14004af78 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_SetVar2\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004af80 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (iVar1, \"Tcl_CreateObjCommand\");\n                                                            if (*0x14004af80 == 0) {\n                                                                arg2 = \n                                                            \"Failed to get address for Tcl_CreateObjCommand\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004af88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_GetString\");\n                                                                if (*0x14004af88 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_GetString\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004af90 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (iVar1, \"Tcl_NewStringObj\");\n                                                            if (*0x14004af90 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_NewStringObj\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004af98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_NewByteArrayObj\");\n                                                                if (*0x14004af98 == 0) {\n                                                                    arg2 = \n                                                            \"Failed to get address for Tcl_NewByteArrayObj\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004afa0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_SetVar2Ex\");\n                                                                if (*0x14004afa0 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_SetVar2Ex\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004afa8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                      (iVar1, \"Tcl_GetObjResult\");\n                                                            if (*0x14004afa8 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_GetObjResult\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004afb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_EvalFile\");\n                                                                if (*0x14004afb0 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_EvalFile\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004afb8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_EvalEx\");\n                                                            if (*0x14004afb8 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_EvalEx\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004afc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_EvalObjv\");\n                                                                if (*0x14004afc0 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_EvalObjv\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004afc8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Tcl_Alloc\");\n                                                            if (*0x14004afc8 == 0) {\n                                                                arg2 = \"Failed to get address for Tcl_Alloc\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004afd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar1, \"Tcl_Free\");\n                                                                if (*0x14004afd0 == 0) {\n                                                                    arg2 = \"Failed to get address for Tcl_Free\\n\";\n                                                                }\n                                                                else {\n                                                                    *0x14004afd8 = (*\n                                                            _sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"Tk_Init\");\n                                                            if (*0x14004afd8 == 0) {\n                                                                arg2 = \"Failed to get address for Tk_Init\\n\";\n                                                            }\n                                                            else {\n                                                                *0x14004afe0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                                                         (iVar3, \"Tk_GetNumMainWindows\")\n                                                                ;\n                                                                if (*0x14004afe0 != 0) {\n                                                                    return 0;\n                                                                }\n                                                                arg2 = \n                                                            \"Failed to get address for Tk_GetNumMainWindows\\n\";\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        fcn.140001cb0(0x14002ad00, arg2, in_R8, in_R9);\n        return 0xffffffff;\n    }\n    fcn.140001c50(\"LOADER: Failed to load tcl/tk libraries\\n\", in_RDX, in_R8, in_R9);\n    return 0xffffffff;\n}\n",
        "token_count": 2383
    },
    "1400049f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400049f0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    \n    if (arg1 != NULL) {\n        iVar1 = (**0x14002a360)();\n        if (arg1[1] == iVar1) {\n            if (*arg1 != 0) {\n                (**0x14002a360)();\n                *arg1 = 0;\n                return 0;\n            }\n        }\n        else {\n            if (*arg1 != 0) {\n                (**0x14002a360)(0x14004aee0);\n                *0x14004aee8 = 1;\n                fcn.140004b20(arg1, 1, 0, 0);\n                (**0x14002a360)(0x14004aed8, 0x14004aee0, 0);\n                (**0x14002a360)(0x14004aee0);\n                (**0x14002a360)(0x14004aed8);\n            }\n            (**0x14002a360)();\n            if (arg1[0x809] != 0) {\n                fcn.1400062f0(arg1[0x809]);\n                arg1[0x809] = 0;\n                *(arg1 + 0x403c) = 0;\n            }\n            if (arg1[0x80a] != 0) {\n                fcn.1400062f0(arg1[0x80a]);\n                arg1[0x80a] = 0;\n                *(arg1 + 0x808) = 0;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 363
    },
    "140004f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004f20(int64_t *arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = *arg1;\n    if (arg1_00 != 0) {\n        if (*(arg1_00 + 0x4010) != 0) {\n            fcn.140014138(*(arg1_00 + 0x4010));\n        }\n        if (*(arg1_00 + 0x4020) != 0) {\n            fcn.140014138(*(arg1_00 + 0x4020));\n        }\n        if (*(arg1_00 + 0x4030) != 0) {\n            fcn.140014138(*(arg1_00 + 0x4030));\n        }\n        fcn.140014138(arg1_00);\n        *arg1 = 0;\n        return;\n    }\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 206
    },
    "140004fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140004fa0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140014130(1, 0x4058);\n    if (iVar1 == 0) {\n        fcn.140001c10(\"calloc\", \"Cannot allocate memory for SPLASH_STATUS.\\n\", param_3, param_4);\n    }\n    return iVar1;\n}\n",
        "token_count": 108
    },
    "1400055e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400055e0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uchar *arg2;\n    ulong unaff_RBX;\n    ulong uVar5;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x1400055ec;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00004018 + iVar2) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar2;\n    uVar5 = 0;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x14000560e;\n    iVar3 = fcn.140006db0(0, param_1, 0);\n    if (iVar3 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140005622;\n        fcn.140001c50(\"LOADER: Failed to convert runtime-tmpdir to a wide string.\\n\", param_1, uVar5, param_4);\n    }\n    else {\n        uVar5 = 0x1000;\n        *(&stack0x00004040 + iVar2) = unaff_RBX;\n        arg2 = &stack0x00000018 + iVar2;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x140005645;\n        iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3);\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x14000564f;\n        fcn.140014138(iVar3);\n        if (iVar1 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x14000565f;\n            fcn.140001c50(\"LOADER: Failed to expand environment variables in the runtime-tmpdir.\\n\", arg2, uVar5, \n                          param_4);\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x140005670;\n            iVar1 = fcn.140006960(&stack0x00000018 + iVar2);\n            if (iVar1 == 0) {\n                uVar5 = 0x1000;\n                arg2 = &stack0x00000018 + iVar2;\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x140005692;\n                iVar3 = fcn.1400153b8(0, arg2, 0x1000);\n            }\n            else {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x14000567e;\n                iVar3 = fcn.1400160a8(&stack0x00000018 + iVar2);\n            }\n            if (iVar3 == 0) {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x1400056a6;\n                fcn.140001c50(\"LOADER: Failed to obtain the absolute path of the runtime-tmpdir.\\n\", arg2, uVar5, \n                              param_4);\n            }\n            else {\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x1400056c2;\n                fcn.14000b880(&stack0x00002018 + iVar2, 0, 0x2000);\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x1400056cf;\n                for (iVar4 = fcn.14000b6f4(iVar3); iVar4 != 0; iVar4 = fcn.14000b6f4(iVar4 + 2)) {\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x1400056fc;\n                    fcn.14001612c(&stack0x00002018 + iVar2, iVar3, (iVar4 - iVar3 >> 1) + 1);\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x14000570c;\n                    (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(&stack0x00002018 + iVar2, 0);\n                    *(&stack0xfffffffffffffff0 + iVar2) = 0x14000571a;\n                }\n                *(&stack0xfffffffffffffff0 + iVar2) = 0x14000572d;\n                (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(iVar3, 0);\n            }\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x140005748;\n    fcn.14000a100(*(&stack0x00004018 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 1070
    },
    "14000576": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005760(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t arg1;\n    int64_t arg1_00;\n    int64_t iVar3;\n    int64_t iVar4;\n    uchar auStackX8 [32];\n    ulong uStack32;\n    \n    uStack32 = 0x14000576e;\n    iVar2 = fcn.14000a130();\n    iVar2 = -iVar2;\n    *(&stack0x00001008 + iVar2) = *0x14003d018 ^ &stack0xffffffffffffffe8 + iVar2;\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140005795;\n    arg1 = fcn.140002de0();\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x1400057a3;\n    arg1_00 = fcn.140005ba0(param_2, param_3);\n    if (arg1 == 0) {\n        arg1 = arg1_00;\n        if (arg1_00 == 0) goto code_r0x000140005865;\n    }\n    else if (arg1_00 != 0) {\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x1400057c2;\n        iVar1 = fcn.14000e6a4(arg1);\n        while (iVar1 == 0) {\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x1400057e8;\n            iVar3 = fcn.14000e95c(&stack0x00000008 + iVar2, 1, 0x1000, arg1);\n            if (iVar3 != 0) {\n                *(&stack0xffffffffffffffe0 + iVar2) = 0x140005813;\n                iVar4 = fcn.14000f09c(&stack0x00000008 + iVar2, 1, iVar3, arg1_00);\n                iVar3 = arg1_00;\n                if (iVar4 != 0) {\n                    *(&stack0xffffffffffffffe0 + iVar2) = 0x140005820;\n                    iVar1 = fcn.14000e6d0(arg1_00);\n                    if (iVar1 == 0) goto code_r0x000140005824;\n                }\ncode_r0x000140005835:\n                *(&stack0xffffffffffffffe0 + iVar2) = 0x14000583a;\n                fcn.1400174ec(iVar3);\n                break;\n            }\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x1400057f5;\n            iVar1 = fcn.14000e6d0(arg1);\n            iVar3 = arg1;\n            if (iVar1 != 0) goto code_r0x000140005835;\ncode_r0x000140005824:\n            *(&stack0xffffffffffffffe0 + iVar2) = 0x14000582c;\n            iVar1 = fcn.14000e6a4(arg1);\n        }\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x140005847;\n        fcn.14000e60c(arg1);\n        *(&stack0xffffffffffffffe0 + iVar2) = 0x14000584f;\n        fcn.14000e60c(arg1_00);\n        goto code_r0x000140005865;\n    }\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140005860;\n    fcn.14000e60c(arg1);\ncode_r0x000140005865:\n    *(&stack0xffffffffffffffe0 + iVar2) = 0x140005875;\n    fcn.14000a100(*(&stack0x00001008 + iVar2) ^ &stack0xffffffffffffffe8 + iVar2);\n    return;\n}\n",
        "token_count": 877
    },
    "14000608": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140006080(ulong arg1, ulong arg2)\n\n{\n    uint uVar1;\n    ulong noname_0;\n    ulong arg2_00;\n    \n    noname_0 = fcn.140006db0(0, arg1, 0);\n    arg2_00 = fcn.140006db0(0, arg2, 0);\n    uVar1 = fcn.140016818(noname_0, arg2_00);\n    fcn.140014138(noname_0);\n    fcn.140014138(arg2_00);\n    return uVar1;\n}\n",
        "token_count": 135
    },
    "1400060f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set environment variable"
        ],
        "decompiled_code": "\nuint fcn.1400060f0(ulong arg1)\n\n{\n    uint uVar1;\n    ulong arg1_00;\n    \n    arg1_00 = fcn.140006db0(0, arg1, 0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(arg1_00, 0);\n    fcn.140014138(arg1_00);\n    return uVar1;\n}\n",
        "token_count": 97
    },
    "14000613": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006130(ulong param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uchar *arg3;\n    ulong arg4;\n    uint auStackX24 [4];\n    ulong uStack16;\n    \n    uStack16 = 0x140006140;\n    iVar3 = fcn.14000a130();\n    iVar3 = -iVar3;\n    *(&stack0x000020f8 + iVar3) = *0x14003d018 ^ &stack0xfffffffffffffff8 + iVar3;\n    iVar6 = 0;\n    *(&stack0x00000048 + iVar3) = 0;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006171;\n    fcn.140006db0(&stack0x000000f8 + iVar3, param_1, 0x1000);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006185;\n    (*_sym.imp.KERNEL32.dll_SetConsoleCtrlHandler)(0x1400055c0, 1);\n    *(&stack0x00000050 + iVar3) = 0x18;\n    *(&stack0x00000058 + iVar3) = 0;\n    *(&stack0x00000060 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400061a4;\n    (*_sym.imp.KERNEL32.dll_GetStartupInfoW)();\n    *(&stack0x00000090 + iVar3) = 0;\n    *(&stack0x00000098 + iVar3) = ZEXT816(0);\n    *(&stack0x000000c4 + iVar3) = 0x101;\n    *(&stack0x000000c8 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400061d2;\n    uVar4 = fcn.140014310(0);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400061da;\n    uVar1 = fcn.1400192e4(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400061e1;\n    iVar5 = fcn.14001705c(uVar1);\n    if (iVar5 == -1) {\n        iVar5 = iVar6;\n    }\n    *(&stack0x000000d8 + iVar3) = iVar5;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400061f8;\n    uVar4 = fcn.140014310(1);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006200;\n    uVar1 = fcn.1400192e4(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006207;\n    iVar5 = fcn.14001705c(uVar1);\n    if (iVar5 == -1) {\n        iVar5 = iVar6;\n    }\n    *(&stack0x000000e0 + iVar3) = iVar5;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000621f;\n    uVar4 = fcn.140014310(2);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006227;\n    uVar1 = fcn.1400192e4(uVar4);\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x14000622e;\n    iVar5 = fcn.14001705c(uVar1);\n    if (iVar5 == -1) {\n        iVar5 = iVar6;\n    }\n    *(&stack0x000000e8 + iVar3) = iVar5;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006244;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    arg4 = 0;\n    arg3 = &stack0x00000050 + iVar3;\n    *(&stack0x00000040 + iVar3) = &stack0x00000068 + iVar3;\n    *(&stack0x00000038 + iVar3) = &stack0x00000088 + iVar3;\n    *(&stack0x00000030 + iVar3) = 0;\n    *(&stack0x00000028 + iVar3) = 0;\n    *(&stack0x00000020 + iVar3) = 0;\n    *(&stack0x00000018 + iVar3) = 1;\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x140006286;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateProcessW)(&stack0x000000f8 + iVar3, uVar4);\n    if (iVar2 == 0) {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x1400062c3;\n        fcn.140001cb0(0x14002cc90, \"Error creating child process!\\n\", arg3, arg4);\n    }\n    else {\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x14000629a;\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(&stack0x00000068 + iVar3), 0xffffffff);\n        *(&stack0xfffffffffffffff0 + iVar3) = 0x1400062aa;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*(&stack0x00000068 + iVar3), &stack0x00000048 + iVar3);\n    }\n    *(&stack0xfffffffffffffff0 + iVar3) = 0x1400062d8;\n    fcn.14000a100(*(&stack0x000020f8 + iVar3) ^ &stack0xfffffffffffffff8 + iVar3);\n    return;\n}\n",
        "token_count": 1334
    },
    "14000631": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140006310(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong uVar1;\n    \n    arg1_00 = fcn.140006db0(0, arg1, 0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 8);\n    fcn.140014138(arg1_00);\n    return uVar1;\n}\n",
        "token_count": 98
    },
    "14000636": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140006360(ulong arg1, ulong arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    int64_t noname_0;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t arg1_00;\n    int64_t iVar6;\n    \n    iVar6 = 0;\n    noname_0 = fcn.14001414c(0x2000);\n    iVar4 = iVar6;\n    if (((noname_0 != 0) && (iVar1 = fcn.14000ec94(arg1, 0, 2),  -1 < iVar1)) &&\n       (uVar2 = fcn.140017a9c(arg1),  arg3 <= uVar2)) {\n        do {\n            iVar5 = uVar2 - 0x2000;\n            if (uVar2 < 0x2000) {\n                iVar5 = iVar6;\n            }\n            uVar2 = uVar2 - iVar5;\n            iVar4 = iVar6;\n            if (((uVar2 < arg3) || (iVar1 = fcn.14000ec94(arg1, iVar5, 0),  iVar1 < 0)) ||\n               (uVar3 = fcn.14000e95c(noname_0, 1, uVar2, arg1),  uVar3 != uVar2)) break;\n            iVar4 = (uVar2 - arg3) + 1;\n            if (iVar4 != 0) {\n                arg1_00 = noname_0 + -1 + iVar4;\n                do {\n                    iVar1 = fcn.14000b780(arg1_00, arg2, arg3);\n                    if (iVar1 == 0) {\n                        iVar4 = iVar5 + -1 + iVar4;\n                        goto code_r0x000140006473;\n                    }\n                    arg1_00 = arg1_00 + -1;\n                    iVar4 = iVar4 + -1;\n                } while (iVar4 != 0);\n            }\n            uVar2 = (arg3 - 1) + iVar5;\n            iVar4 = 0;\n        } while (iVar5 != 0);\n    }\ncode_r0x000140006473:\n    fcn.140014138(noname_0);\n    return iVar4;\n}\n",
        "token_count": 528
    },
    "1400067c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.1400067c0(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t *arg1_00;\n    int64_t iVar2;\n    char *arg1_01;\n    char *arg2_00;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    int64_t *piVar5;\n    ulong arg3;\n    ulong uVar6;\n    ulong arg4;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    \n    arg1_00 = fcn.140014130(arg1 + 1, 8);\n    if (arg1_00 == NULL) {\n        return NULL;\n    }\n    uVar3 = 0;\n    if (0 < arg1) {\n        uVar4 = uVar3;\n        piVar5 = arg1_00;\n        uVar8 = uVar3;\n        do {\n            uVar6 = *(piVar5 + (arg2 - arg1_00));\n            arg4 = 0xffffffff;\n            arg3 = uVar6;\n            iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, uVar6, 0xffffffff, 0, 0, 0, 0);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to get UTF-8 buffer size.\\n\";\ncode_r0x0001400068f8:\n                arg1_01 = 0x14002cd50;\ncode_r0x0001400068ff:\n                fcn.140001cb0(arg1_01, arg2_00, arg3, arg4);\n                *piVar5 = 0;\n                if (-1 < uVar4) {\n                    do {\n                        fcn.140014138(arg1_00[uVar3]);\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar4);\n                }\n                fcn.140014138(arg1_00);\n                return NULL;\n            }\n            iVar2 = fcn.140014130(iVar1 + 1, 1);\n            if (iVar2 == 0) {\n                arg2_00 = \"Out of memory.\\n\";\n                arg1_01 = \"win32_utils_to_utf8\";\n                goto code_r0x0001400068ff;\n            }\n            arg4 = 0xffffffff;\n            iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to encode wchar_t as UTF-8.\\n\";\n                arg3 = uVar6;\n                goto code_r0x0001400068f8;\n            }\n            *piVar5 = iVar2;\n            uVar7 = uVar8 + 1;\n            uVar8 = uVar7;\n            piVar5 = piVar5 + 1;\n            uVar4 = uVar4 + 1;\n        } while (uVar7 < arg1);\n    }\n    arg1_00[arg1] = 0;\n    return arg1_00;\n}\n",
        "token_count": 701
    },
    "1400069e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400069e0(ulong lpFileName)\n\n{\n    int64_t iVar1;\n    uchar auStack664 [32];\n    ulong uStack632;\n    uint uStack624;\n    uint auStack616 [148];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003d018 ^ auStack664;\n    uStack624 = 0;\n    uStack632 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(lpFileName, 1, auStack616, 0);\n    if (iVar1 != -1) {\n        (*_sym.imp.KERNEL32.dll_FindClose)(iVar1);\n    }\n    fcn.14000a100(uStack24 ^ auStack664);\n    return;\n}\n",
        "token_count": 171
    },
    "140006bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140006bf0(int64_t arg1, ulong lpMultiByteStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int64_t arg2;\n    char *arg1_01;\n    char *arg2_00;\n    int64_t arg3_00;\n    ulong arg4;\n    ulong uVar2;\n    \n    arg4 = 0xffffffff;\n    uVar2 = lpMultiByteStr;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n    if (iVar1 == 0) {\n        fcn.140001cb0(0x14002ce48, \"Failed to get wchar_t buffer size.\\n\", uVar2, arg4);\n        return 0;\n    }\n    arg1_00 = fcn.140014130(iVar1 + 1, 2);\n    if (arg1_00 == 0) {\n        fcn.140001cb0(\"win32_utils_from_utf8\", \"Out of memory.\\n\", uVar2, arg4);\n        return 0;\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, lpMultiByteStr, 0xffffffff, arg1_00, iVar1);\n    if (iVar1 == 0) {\n        fcn.140001cb0(0x14002ce48, \"Failed to decode wchar_t from UTF-8\\n\", lpMultiByteStr, uVar2);\n        return 0;\n    }\n    uVar2 = 0xffffffff;\n    arg3_00 = arg1_00;\n    iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1_00, 0xffffffff, 0, 0, 0, 0);\n    if (iVar1 == 0) {\n        arg2_00 = \"Failed to get ANSI buffer size.\\n\";\n    }\n    else {\n        arg2 = fcn.140014130(iVar1 + 1, 1);\n        if (arg2 == 0) {\n            arg1_01 = \"win32_wcs_to_mbs\";\n            arg2_00 = \"Out of memory.\\n\";\n            goto code_r0x000140006d53;\n        }\n        uVar2 = 0xffffffff;\n        arg3_00 = arg1_00;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1_00, 0xffffffff, arg2, iVar1, 0, 0);\n        if (iVar1 != 0) {\n            fcn.140014138(arg1_00);\n            if (arg1 == 0) {\n                return arg2;\n            }\n            fcn.140015e50(arg1, arg2, arg3);\n            fcn.140014138(arg2);\n            return arg1;\n        }\n        arg2_00 = \"Failed to encode filename as ANSI.\\n\";\n    }\n    arg1_01 = 0x14002cd50;\ncode_r0x000140006d53:\n    fcn.140001cb0(arg1_01, arg2_00, arg3_00, uVar2);\n    fcn.140014138(arg1_00);\n    return 0;\n}\n",
        "token_count": 770
    },
    "140006ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140006ec0(int64_t arg1, ulong lpWideCharStr, ulong arg3)\n\n{\n    int32_t iVar1;\n    ulong arg4;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        arg4 = 0xffffffff;\n        uVar2 = lpWideCharStr;\n        arg3._0_4_ = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, lpWideCharStr, 0xffffffff, 0, 0, 0, 0);\n        if (arg3 == 0) {\n            fcn.140001cb0(0x14002cd50, \"Failed to get UTF-8 buffer size.\\n\", uVar2, arg4);\n            return 0;\n        }\n        arg1 = fcn.140014130(arg3 + 1, 1);\n        if (arg1 == 0) {\n            fcn.140001cb0(\"win32_utils_to_utf8\", \"Out of memory.\\n\", uVar2, arg4);\n            return 0;\n        }\n    }\n    uVar2 = 0xffffffff;\n    iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, lpWideCharStr, 0xffffffff, arg1, arg3, 0, 0);\n    if (iVar1 == 0) {\n        fcn.140001cb0(0x14002cd50, \"Failed to encode wchar_t as UTF-8.\\n\", lpWideCharStr, uVar2);\n        arg1 = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 368
    },
    "140006fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140006fb0(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    int64_t *arg1_00;\n    int64_t iVar2;\n    char *arg1_01;\n    char *arg2_00;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    int64_t *piVar5;\n    ulong arg3;\n    ulong uVar6;\n    ulong arg4;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    \n    arg1_00 = fcn.140014130(arg1 + 1, 8);\n    if (arg1_00 == NULL) {\n        return NULL;\n    }\n    uVar3 = 0;\n    if (0 < arg1) {\n        uVar4 = uVar3;\n        piVar5 = arg1_00;\n        uVar8 = uVar3;\n        do {\n            uVar6 = *(piVar5 + (arg2 - arg1_00));\n            arg4 = 0xffffffff;\n            arg3 = uVar6;\n            iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9, 0, uVar6, 0xffffffff, 0, 0);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to get wchar_t buffer size.\\n\";\ncode_r0x0001400070cd:\n                arg1_01 = 0x14002ce48;\ncode_r0x0001400070d4:\n                fcn.140001cb0(arg1_01, arg2_00, arg3, arg4);\n                *piVar5 = 0;\n                if (-1 < uVar4) {\n                    do {\n                        fcn.140014138(arg1_00[uVar3]);\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar4);\n                }\n                fcn.140014138(arg1_00);\n                return NULL;\n            }\n            iVar2 = fcn.140014130(iVar1 + 1, 2);\n            if (iVar2 == 0) {\n                arg2_00 = \"Out of memory.\\n\";\n                arg1_01 = \"win32_utils_from_utf8\";\n                goto code_r0x0001400070d4;\n            }\n            arg4 = 0xffffffff;\n            iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0xfde9);\n            if (iVar1 == 0) {\n                arg2_00 = \"Failed to decode wchar_t from UTF-8\\n\";\n                arg3 = uVar6;\n                goto code_r0x0001400070cd;\n            }\n            *piVar5 = iVar2;\n            uVar7 = uVar8 + 1;\n            uVar8 = uVar7;\n            piVar5 = piVar5 + 1;\n            uVar4 = uVar4 + 1;\n        } while (uVar7 < arg1);\n    }\n    arg1_00[arg1] = 0;\n    return arg1_00;\n}\n",
        "token_count": 692
    },
    "1400099a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400099a0(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t arg3_00;\n    \n    iVar1 = *(arg1 + 0x28);\n    arg3 = arg3 & 0xffffffff;\n    arg1_00 = *(iVar1 + 0x40);\n    if (arg1_00 == 0) {\n        arg1_00 = (**0x14002a360)(*(arg1 + 0x40), 1 << (*(iVar1 + 0x30) & 0x1f));\n        *(iVar1 + 0x40) = arg1_00;\n        if (arg1_00 == 0) {\n            return 1;\n        }\n    }\n    uVar5 = *(iVar1 + 0x34);\n    if (uVar5 == 0) {\n        uVar5 = 1 << (*(iVar1 + 0x30) & 0x1f);\n        *(iVar1 + 0x34) = uVar5;\n        *(iVar1 + 0x38) = 0;\n    }\n    uVar4 = arg3;\n    if (uVar4 < uVar5) {\n        uVar5 = uVar5 - *(iVar1 + 0x3c);\n        arg3_00 = uVar5;\n        if (uVar4 < uVar5) {\n            arg3_00 = arg3;\n        }\n        iVar2 = arg3_00;\n        fcn.14000aec0(*(iVar1 + 0x3c) + arg1_00, arg2 - arg3, arg3_00);\n        uVar4 = uVar4 - iVar2;\n        if (uVar4 == 0) {\n            iVar3 = *(iVar1 + 0x3c) + iVar2;\n            if (iVar3 == *(iVar1 + 0x34)) {\n                iVar3 = 0;\n            }\n            *(iVar1 + 0x3c) = iVar3;\n            if (*(iVar1 + 0x34) <= *(iVar1 + 0x38)) {\n                return 0;\n            }\n            iVar2 = *(iVar1 + 0x38) + iVar2;\n        }\n        else {\n            fcn.14000aec0(*(iVar1 + 0x40), arg2 - uVar4, uVar4);\n            iVar2 = *(iVar1 + 0x34);\n            *(iVar1 + 0x3c) = uVar4;\n        }\n    }\n    else {\n        fcn.14000aec0(arg1_00, arg2 - uVar5, uVar5);\n        iVar2 = *(iVar1 + 0x34);\n        *(iVar1 + 0x3c) = 0;\n    }\n    *(iVar1 + 0x38) = iVar2;\n    return 0;\n}\n",
        "token_count": 681
    },
    "14001cc2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001cc2c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x14004d270, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140018c4c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140022730(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.140016088();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 197
    },
    "140019f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140019f78(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x14004d270, 0, lpMem),  iVar2 == 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.140015fb4(uVar3);\n        puVar1 = fcn.140016088();\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "14000ac4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ac4c(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x140039b90; piVar1 < 0x140039b90; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x14002a360)();\n        }\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "14000c21": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c210(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14004c698;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14004c670);\n        *0x14004c698 = *0x14004c698 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "14000ed2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000ed2c(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14001438c(*arg2);\n    uVar1 = fcn.14000ed6c(arg3);\n    fcn.140014398(*arg4);\n    return uVar1;\n}\n",
        "token_count": 85
    },
    "14000ede": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000edec(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg_30h)\n\n{\n    ulong uVar1;\n    ulong var_10h;\n    int64_t var_18h_2;\n    int64_t var_20h_2;\n    int64_t var_28h;\n    ulong var_40h;\n    int64_t var_38h;\n    int64_t var_30h;\n    ulong *var_28h_2;\n    int64_t var_20h;\n    ulong *var_18h;\n    ulong *var_10h_2;\n    ulong *var_8h;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        var_10h = arg1;\n        var_18h_2 = arg2;\n        var_20h_2 = arg3;\n        var_28h = arg4;\n        if (arg4 != 0) {\n            var_28h_2 = &var_28h;\n            var_20h = arg_30h;\n            var_18h = &var_10h;\n            var_10h_2 = &var_18h_2;\n            var_8h = &var_20h_2;\n            var_38h = arg4;\n            var_30h = arg4;\n            uVar1 = fcn.14000ed2c(&var_40h, &var_30h, &var_28h_2, &var_38h);\n            return uVar1;\n        }\n        *(arg_30h + 0x30) = 1;\n        *(arg_30h + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 419
    },
    "14000f14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000f140(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14001438c(*arg2);\n    uVar1 = fcn.140011084(arg3);\n    fcn.140014398(*arg4);\n    return uVar1;\n}\n",
        "token_count": 82
    },
    "14000f18": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f180(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x8000000000000000) {\n        arg2 = arg2 * 2;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 == *(arg1 + 0x400))) {\n            uVar2 = 0x7fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.14001cc2c(arg2);\n            if (iVar1 != 0) {\n                fcn.140019f78(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140019f78(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x7fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 314
    },
    "14000f22": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f228(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x4000000000000000) {\n        arg2 = arg2 * 4;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 - *(arg1 + 0x400) == 0)) {\n            uVar2 = 0x3fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.14001cc2c(arg2);\n            if (iVar1 != 0) {\n                fcn.140019f78(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140019f78(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x3fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 318
    },
    "14001350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140013508(ulong *arg1)\n\n{\n    ushort uVar1;\n    ushort *puVar2;\n    int64_t arg1_00;\n    int32_t iVar3;\n    ulong *puVar4;\n    uchar uStackX8;\n    char cStackX9;\n    \n    *(arg1 + 0x4c) = 1;\n    puVar2 = arg1[3];\n    arg1[3] = puVar2 + 4;\n    uVar1 = *puVar2;\n    cStackX9 = fcn.14000f2d4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cStackX9 == '\\0') {\n        uStackX8 = uVar1;\n        arg1_00 = arg1[1];\n        if (*(arg1_00 + 0x28) == '\\0') {\n            fcn.140013830(arg1_00);\n        }\n        puVar4 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar4 = arg1 + 10;\n        }\n        iVar3 = fcn.14001dd10(puVar4, &uStackX8, *(*(arg1_00 + 0x18) + 8), arg1_00);\n        if (iVar3 < 0) {\n            *(arg1 + 7) = 1;\n        }\n    }\n    else {\n        puVar4 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar4 = arg1 + 10;\n        }\n        *puVar4 = uVar1;\n    }\n    *(arg1 + 9) = 1;\n    puVar4 = arg1[0x8b];\n    if (arg1[0x8b] == NULL) {\n        puVar4 = arg1 + 10;\n    }\n    arg1[8] = puVar4;\n    return 1;\n}\n",
        "token_count": 454
    },
    "14001383": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140013830(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.14000e50c(arg1);\n    *(arg1 + 0x18) = *(arg1_00 + 0x90);\n    *(arg1 + 0x20) = *(arg1_00 + 0x88);\n    fcn.14001ccc0(arg1_00, arg1 + 0x18);\n    fcn.14001cd2c(arg1_00, arg1 + 0x20);\n    if ((*(arg1_00 + 0x3a8) & 2) == 0) {\n        *(arg1_00 + 0x3a8) = *(arg1_00 + 0x3a8) | 2;\n        *(arg1 + 0x28) = 2;\n    }\n    return;\n}\n",
        "token_count": 206
    },
    "14001447": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140014474(uint64_t arg1)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    \n    if ((arg1 <= *0x140032798) && ((piVar1 = fcn.14001e580(),  arg1 <= *piVar1 || (*0x140032790 <= arg1)))) {\n        piVar1 = fcn.14001e580();\n        if (*piVar1 < arg1) {\n            arg1 = arg1 - *0x140032790;\n            iVar2 = 0x1400327a0;\n        }\n        else {\n            iVar2 = fcn.14001e578();\n        }\n        return *(iVar2 + arg1 * 8);\n    }\n    iVar2 = fcn.14001e578();\n    piVar1 = fcn.14001e580();\n    return *(iVar2 + *piVar1 * 8);\n}\n",
        "token_count": 203
    },
    "140014c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140014c5c(uint16_t *arg1, int32_t *arg2)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    *arg2 = 0;\n    uVar1 = *arg1;\n    uVar3 = uVar1;\n    if (((uVar1 - 0x41 < 0x1a) || (uVar1 - 0x61 < 0x1a)) && (arg1[1] == 0x3a)) {\n        if (arg1[2] == 0) {\n            fcn.140015ffc(2);\n            return 0;\n        }\n        if (uVar1 - 0x41 < 0x1a) {\n            uVar3 = uVar1 + 0x20;\n        }\n        iVar2 = uVar3 - 0x60;\n    }\n    else {\n        iVar2 = fcn.14001e588();\n    }\n    *arg2 = iVar2;\n    return 1;\n}\n",
        "token_count": 236
    },
    "1400153b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.1400153b8(int64_t arg1, int16_t *arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int16_t *var_bp_10h;\n    int64_t var_30h;\n    uint64_t var_28h;\n    int64_t var_20h;\n    uint64_t var_bp_18h;\n    ulong uStack24;\n    ulong var_8h;\n    \n    if ((arg2 == NULL) || (*arg2 == 0)) {\n        uVar2 = 0x7fffffff;\n        if (arg3 < 0x7fffffff) {\n            uVar2 = arg3;\n        }\n        iVar3 = fcn.14001f110(arg1, uVar2);\n    }\n    else {\n        uStack24 = 0;\n        var_8h._0_1_ = '\\0';\n        var_bp_10h = arg2;\n        if (arg1 == 0) {\n            var_30h = 0;\n            var_28h = 0;\n            var_20h = 0;\n            var_bp_18h = 0;\n            fcn.1400151fc(&var_30h, &var_bp_10h);\n            iVar3 = fcn.1400152d4(&var_30h);\n            if (var_8h != '\\0') {\n                fcn.140014138(var_20h);\n            }\n        }\n        else {\n            var_30h = arg1;\n            var_28h = arg3;\n            var_20h = arg1;\n            var_bp_18h = arg3;\n            iVar1 = fcn.140015188(&var_30h, &var_bp_10h);\n            iVar3 = 0;\n            if (iVar1 == 0) {\n                iVar3 = arg1;\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 445
    },
    "14001554": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140015544(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    ulong uStackX8;\n    uint8_t *puStackX16;\n    \n    uVar3 = 0;\n    if (arg1 != NULL) {\n        if (arg3 == 0) {\n            return 0;\n        }\n        *arg1 = 0;\n    }\n    puStackX16 = arg2;\n    if (arg2 == NULL) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.140019e44(0, 0, 0, 0);\n        uVar3 = 0xffffffffffffffff;\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140013830(arg4);\n        }\n        uVar1 = *(*(arg4 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX8 = 0;\n            uVar3 = fcn.14001f5fc(arg1, &puStackX16, arg3, &uStackX8);\n        }\n        else {\n            iVar4 = *(*(arg4 + 0x18) + 0x138);\n            if (arg1 == NULL) {\n                uVar3 = 0xffffffffffffffff;\n                if (iVar4 == 0) {\n                    do {\n                        uVar3 = uVar3 + 1;\n                    } while (puStackX16[uVar3] != 0);\n                    return uVar3;\n                }\n                iVar2 = fcn.14001e870(uVar1, 9);\n                iVar4 = iVar2;\n                if (iVar4 == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return 0xffffffffffffffff;\n                }\n            }\n            else {\n                if (iVar4 == 0) {\n                    if (arg3 == 0) {\n                        return 0;\n                    }\n                    do {\n                        *arg1 = puStackX16[uVar3];\n                        if (puStackX16[uVar3] == 0) {\n                            return uVar3;\n                        }\n                        uVar3 = uVar3 + 1;\n                        arg1 = arg1 + 1;\n                    } while (uVar3 < arg3);\n                    return uVar3;\n                }\n                uVar6 = arg3;\n                iVar2 = fcn.14001e870(uVar1, 9);\n                iVar4 = iVar2;\n                if (iVar4 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar2 == 0x7a) {\n                        arg3 = arg3 & 0xffffffff;\n                        puVar5 = puStackX16;\n                        while (uVar6 != 0) {\n                            uVar6 = arg3 - 1;\n                            arg3 = uVar6;\n                            if (*puVar5 == 0) break;\n                            if ((*(**(arg4 + 0x18) + *puVar5 * 2) < 0) && (puVar5 = puVar5 + 1,  *puVar5 == 0))\n                            goto code_r0x00014001566b;\n                            puVar5 = puVar5 + 1;\n                        }\n                        iVar2 = fcn.14001e870(*(*(arg4 + 0x18) + 0xc), 1);\n                        if (iVar2 != 0) {\n                            return iVar2;\n                        }\n                    }\ncode_r0x00014001566b:\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    *arg1 = 0;\n                    return 0xffffffffffffffff;\n                }\n            }\n            uVar3 = iVar4 - 1;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 953
    },
    "1400157d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400157dc(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n        fcn.140019f10();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x14004d008;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 115
    },
    "140015bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140015bcc(ulong noname_0, ulong *arg2, ulong *arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14001438c(*arg2);\n    uVar1 = fcn.140015cf8(**arg3);\n    fcn.140014398(*arg4);\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "140015ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015ffc(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    ulong in_RDX;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar2 = fcn.14001a8f8(arg1, in_RDX);\n    if (iVar2 == 0) {\n        puVar3 = 0x14003d164;\n    }\n    else {\n        puVar3 = iVar2 + 0x24;\n    }\n    *puVar3 = arg1_00;\n    uVar1 = fcn.140015fb4(arg1_00);\n    iVar2 = fcn.14001a8f8(arg1_00, in_RDX);\n    puVar3 = 0x14003d160;\n    if (iVar2 != 0) {\n        puVar3 = iVar2 + 0x20;\n    }\n    *puVar3 = uVar1;\n    return;\n}\n",
        "token_count": 229
    },
    "14001604": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016044(ulong arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    *(arg2 + 0x38) = 1;\n    *(arg2 + 0x34) = arg1;\n    uVar1 = fcn.140015fb4(arg1);\n    *(arg2 + 0x2c) = uVar1;\n    *(arg2 + 0x30) = 1;\n    return;\n}\n",
        "token_count": 104
    },
    "14001612": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.14001612c(int16_t *arg1, int64_t arg2, int64_t arg3)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    if (arg3 != 0) {\n        piVar2 = arg1;\n        do {\n            iVar1 = *((arg2 - arg1) + piVar2);\n            *piVar2 = iVar1;\n            piVar2 = piVar2 + 1;\n            arg3 = arg3 + -1;\n            if (iVar1 == 0) {\n                if (arg3 == 0) {\n                    return arg1;\n                }\n                for (; arg3 != 0; arg3 = arg3 + -1) {\n                    *piVar2 = 0;\n                    piVar2 = piVar2 + 1;\n                }\n                return arg1;\n            }\n        } while (arg3 != 0);\n    }\n    return arg1;\n}\n",
        "token_count": 211
    },
    "14001649": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001649c(ulong arg1, ulong arg2)\n\n{\n    uint uVar1;\n    \n    fcn.14001f808(0xb);\n    uVar1 = fcn.1400164dc(arg1, arg2);\n    fcn.14001f868(0xb);\n    return uVar1;\n}\n",
        "token_count": 75
    },
    "1400164d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400164dc(int64_t arg1, ulong arg2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t arg1_00;\n    ulong uVar4;\n    ulong in_R8;\n    ulong in_R9;\n    \n    uVar4 = 0;\n    if ((*0x14004c9b0 != 0) || (*0x14004c9b8 != 0)) {\n        if (arg1 != 0) {\n            arg1_00 = fcn.140016570(arg1, arg2);\n            if (((arg1_00 == 0) || (iVar2 = fcn.140020324(arg1_00, 1),  iVar2 != 0)) ||\n               ((*0x14004c9b0 != 0 && (cVar1 = fcn.1400166c4(arg1, arg2, in_R8, in_R9),  cVar1 == '\\0')))) {\n                uVar4 = 0xffffffff;\n            }\n            fcn.140019f78(0);\n            return uVar4;\n        }\n        puVar3 = fcn.140016088();\n        *puVar3 = 0x16;\n        fcn.140019f10();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 294
    },
    "14001657": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140016570(int64_t arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint *puVar3;\n    int64_t arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    \n    iVar6 = 0;\n    if (arg2 == 0) {\n        iVar4 = fcn.14000b6f4(arg1);\n        if ((iVar4 != 0) &&\n           ((0xfffd < (iVar4 - arg1 & 0xfffffffffffffffeU) ||\n            (uVar1 = fcn.1400162c4(iVar4 + 2, 0x7fff),  0x7ffe < uVar1)))) goto code_r0x0001400165c0;\n        iVar4 = -1;\n        do {\n            iVar5 = iVar4;\n            iVar4 = iVar5 + 1;\n        } while (*(arg1 + (iVar5 + 1) * 2) != 0);\n        iVar4 = fcn.14001deb8(iVar5 + 2, 2);\n        if (iVar4 == 0) goto code_r0x00014001669b;\n        iVar5 = iVar5 + 2;\n        iVar6 = iVar4;\n        arg2 = arg1;\n    }\n    else {\n        uVar1 = fcn.1400162c4(arg1, 0x7fff);\n        uVar2 = fcn.1400162c4(arg2, 0x7fff);\n        if ((0x7ffe < uVar1) || (0x7ffe < uVar2)) {\ncode_r0x0001400165c0:\n            puVar3 = fcn.140016088();\n            *puVar3 = 0x16;\n            fcn.140019f10();\n            return 0;\n        }\n        arg1_00 = fcn.14001deb8(uVar1 + uVar2 + 2, 2);\n        if (arg1_00 == 0) goto code_r0x00014001669b;\n        fcn.14001f9a4(arg1_00, uVar1 + uVar2 + 2, arg1);\n        *(arg1_00 + uVar1 * 2) = 0x3d;\n        iVar4 = arg1_00 + (uVar1 + 1) * 2;\n        iVar5 = uVar2 + 1;\n        iVar6 = arg1_00;\n    }\n    fcn.14001f9a4(iVar4, iVar5, arg2);\ncode_r0x00014001669b:\n    fcn.140019f78(0);\n    return iVar6;\n}\n",
        "token_count": 617
    },
    "1400166c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400166c4(ulong arg1, int64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = fcn.14001f138(0, 0, arg1, 0xffffffff);\n    iVar4 = iVar1;\n    if (iVar1 == 0) {\ncode_r0x00014001670d:\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x2a;\n        iVar4 = 0;\n    }\n    else if (arg2 != 0) {\n        iVar1 = fcn.14001f138(0, 0, arg2, 0xffffffff);\n        if (iVar1 == 0) goto code_r0x00014001670d;\n        iVar4 = iVar4 + iVar1;\n    }\n    iVar4 = fcn.14001deb8(iVar4, 1);\n    if (iVar4 == 0) {\n        iVar4 = 0;\n    }\n    else {\n        iVar1 = fcn.14001f138(0, 0, arg1, 0xffffffff);\n        if (iVar1 != 0) {\n            if (arg2 == 0) {\ncode_r0x0001400167e3:\n                iVar1 = fcn.14002031c(iVar4, 0);\n                uVar3 = fcn.140019f78(0);\n                return uVar3 & 0xffffffffffffff00 | iVar1 == 0;\n            }\n            *(iVar1 + iVar4 + -1) = 0x3d;\n            iVar1 = fcn.14001f138(0, 0, arg2, 0xffffffff);\n            if (iVar1 != 0) goto code_r0x0001400167e3;\n        }\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x2a;\n    }\n    uVar3 = fcn.140019f78(iVar4);\n    return uVar3 & 0xffffffffffffff00;\n}\n",
        "token_count": 483
    },
    "14001681": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140016818(ulong noname_0, int64_t arg2)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    uVar3 = 0;\n    if (arg2 == 0) {\n        puVar2 = fcn.140016088();\n        uVar3 = 0x16;\n        *puVar2 = 0x16;\n        fcn.140019f10();\n    }\n    else {\n        iVar1 = fcn.14001649c(noname_0, arg2);\n        if (iVar1 != 0) {\n            puVar2 = fcn.140016088();\n            uVar3 = *puVar2;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 170
    },
    "14001685": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140016850(ulong lpPathName)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)();\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140015ffc(uVar2);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 121
    },
    "1400170d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400170d4(ulong lpFileName)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileW)();\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140015ffc(uVar2);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 122
    },
    "14001742": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.140017424(int16_t *arg1)\n\n{\n    int64_t iVar1;\n    int16_t *piVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    int64_t iVar5;\n    int16_t iVar6;\n    bool bVar7;\n    \n    iVar3 = 0;\n    iVar6 = *arg1;\n    iVar5 = iVar3;\n    piVar4 = arg1;\n    if (iVar6 != 0) {\n        do {\n            bVar7 = iVar6 != 0x22;\n            piVar4 = piVar4 + 1;\n            iVar6 = *piVar4;\n            iVar1 = iVar5 + 1;\n            if (bVar7) {\n                iVar1 = iVar5;\n            }\n            iVar3 = iVar3 + 1;\n            iVar5 = iVar1;\n        } while (iVar6 != 0);\n        if (iVar1 != 0) {\n            piVar2 = fcn.14001deb8((iVar3 - iVar1) + 1, 2);\n            piVar4 = piVar2;\n            if (piVar2 != NULL) {\n                for (; iVar6 = *arg1,  iVar6 != 0; arg1 = arg1 + 1) {\n                    if (iVar6 != 0x22) {\n                        *piVar4 = iVar6;\n                        piVar4 = piVar4 + 1;\n                    }\n                }\n                *piVar4 = 0;\n                fcn.140019f78(0);\n                return piVar2;\n            }\n            fcn.140019f78(0);\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 370
    },
    "1400174d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400174d0(ulong param_1, ulong param_2)\n\n{\n    fcn.1400170fc(param_1, param_2);\n    return;\n}\n",
        "token_count": 42
    },
    "14001815": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140018154(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x14004c9b0 == 0) {\n        fcn.1400217b0();\n        arg1 = fcn.140021aec();\n        if (arg1 == 0) {\n            fcn.140019f78(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.140018238(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x14004c9b0;\n                iVar1 = *0x14004c9c8;\n            }\n            *0x14004c9c8 = iVar1;\n            *0x14004c9b0 = iVar3;\n            fcn.140019f78(0);\n            fcn.140019f78(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 262
    },
    "1400181c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400181c8(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x14004c9b8 == 0) {\n        arg1 = fcn.140021bfc();\n        if (arg1 == 0) {\n            fcn.140019f78(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.140018348(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x14004c9b8;\n                iVar1 = *0x14004c9c0;\n            }\n            *0x14004c9c0 = iVar1;\n            *0x14004c9b8 = iVar3;\n            fcn.140019f78(0);\n            fcn.140019f78(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 255
    },
    "1400184a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400184a8(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = *0x14004c9b8;\n    if (*0x14004c9b8 == NULL) {\ncode_r0x0001400184d1:\n        iVar2 = 0xffffffff;\n    }\n    else {\n        for (; iVar2 = *piVar3,  iVar2 != 0; piVar3 = piVar3 + 1) {\n            iVar1 = fcn.14001f138(0, 0, iVar2, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x0001400184d1;\n            iVar2 = fcn.14001deb8(iVar1, 1);\n            if (iVar2 == 0) {\n                iVar2 = 0;\ncode_r0x00014001857c:\n                fcn.140019f78(iVar2);\n                goto code_r0x0001400184d1;\n            }\n            iVar1 = fcn.14001f138(0, 0, *piVar3, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x00014001857c;\n            fcn.14002031c(iVar2, 0);\n            fcn.140019f78(0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 322
    },
    "14001864": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018644(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14004c9c8) {\n        fcn.140018464(*arg1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "14001866": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018660(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14004c9c0) {\n        fcn.140018464(*arg1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "14001846": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018464(int64_t *arg1)\n\n{\n    int64_t lpMem;\n    int64_t *piVar1;\n    \n    if (arg1 != NULL) {\n        lpMem = *arg1;\n        piVar1 = arg1;\n        while (lpMem != 0) {\n            fcn.140019f78(lpMem);\n            piVar1 = piVar1 + 1;\n            lpMem = *piVar1;\n        }\n        fcn.140019f78(arg1);\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "1400186f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400186f4(void)\n\n{\n    int64_t *lpMem;\n    int64_t lpMem_00;\n    int64_t *piVar1;\n    \n    fcn.140018644(0x14004c9b0);\n    fcn.140018660(0x14004c9b8);\n    fcn.140018464(*0x14004c9c8);\n    lpMem = *0x14004c9c0;\n    if (*0x14004c9c0 != NULL) {\n        lpMem_00 = **0x14004c9c0;\n        piVar1 = *0x14004c9c0;\n        while (lpMem_00 != 0) {\n            fcn.140019f78(lpMem_00);\n            piVar1 = piVar1 + 1;\n            lpMem_00 = *piVar1;\n        }\n        fcn.140019f78(lpMem);\n    }\n    return;\n}\n",
        "token_count": 218
    },
    "14001879": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018790(int64_t *arg1, int64_t *arg2)\n\n{\n    if (arg1 != arg2) {\n        do {\n            if (*arg1 != 0) {\n                (**0x14002a368)();\n            }\n            arg1 = arg1 + 1;\n        } while (arg1 != arg2);\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "1400187d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400187d4(int64_t *arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    bVar2 = arg1 == arg2;\n    while( true ) {\n        if (bVar2) {\n            return 0;\n        }\n        if ((*arg1 != 0) && (uVar1 = (**0x14002a368)(),  uVar1 != 0)) break;\n        arg1 = arg1 + 1;\n        bVar2 = arg1 == arg2;\n    }\n    return uVar1;\n}\n",
        "token_count": 134
    },
    "14001881": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001881c(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    fcn.14001f808(*arg2);\n    fcn.140018854(arg3);\n    fcn.14001f868(*arg4);\n    return;\n}\n",
        "token_count": 73
    },
    "140018c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140018c88(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14001f808(*arg2);\n    uVar1 = fcn.140018d00(arg3);\n    fcn.14001f868(*arg4);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "140018cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140018cc4(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14001f808(*arg2);\n    uVar1 = fcn.140018eb0(arg3);\n    fcn.14001f868(*arg4);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "14001904": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001904c(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.140018c88(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 193
    },
    "140018fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018fe0(ulong arg1)\n\n{\n    ulong uStackX8;\n    uchar auStackX16 [8];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    ulong *puStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    puStack24 = &uStackX8;\n    auStackX24[0] = 2;\n    auStackX32[0] = 2;\n    uStackX8 = arg1;\n    fcn.140018cc4(auStackX16, auStackX32, &puStack24, auStackX24);\n    return;\n}\n",
        "token_count": 151
    },
    "1400192e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400192e4(int64_t arg1)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    \n    if (arg1 == 0) {\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x16;\n        fcn.140019f10();\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = *(arg1 + 0x18);\n    }\n    return uVar1;\n}\n",
        "token_count": 110
    },
    "140019b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140019b8c(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t lpFlsData;\n    uint auStackX8 [2];\n    \n    iVar1 = *arg1;\n    lpFlsData = 0;\n    if (iVar1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            lpFlsData = arg1[1];\n        }\n        iVar1 = fcn.14001a9c0(auStackX8, lpFlsData);\n        *arg1 = iVar1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n    }\n    return iVar1;\n}\n",
        "token_count": 206
    },
    "140019bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140019bf8(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if (*(arg2 + 0x10) == '\\0') {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg2 + 8) = 0;\n        *(arg2 + 0x10) = 1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    else {\n        iVar2 = *(arg2 + 8);\n    }\n    return arg1 + iVar2 * 8;\n}\n",
        "token_count": 149
    },
    "14001a25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14001a258(ulong *arg1)\n\n{\n    ulong *puVar1;\n    uchar auStackX8 [32];\n    \n    *arg1 = 0;\n    fcn.14001f808(8);\n    puVar1 = fcn.14001a2cc(auStackX8);\n    puVar1 = *puVar1;\n    *arg1 = puVar1;\n    if (puVar1 != NULL) {\n        *(puVar1 + 2) = 0;\n        puVar1[5] = 0;\n        *puVar1 = 0;\n        puVar1[1] = 0;\n        *(puVar1 + 3) = 0xffffffff;\n    }\n    fcn.14001f868(8);\n    return arg1;\n}\n",
        "token_count": 178
    },
    "14001cad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001cad8(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    bool bVar4;\n    \n    iVar3 = fcn.140014310(2);\n    if (arg1 == iVar3) {\n        bVar4 = true;\n    }\n    else {\n        iVar3 = fcn.140014310(1);\n        if (arg1 == iVar3) {\n            uVar1 = fcn.1400192e4(arg1);\n            iVar2 = fcn.140022abc(uVar1);\n            bVar4 = iVar2 != 0;\n        }\n        else {\n            bVar4 = false;\n        }\n    }\n    return bVar4;\n}\n",
        "token_count": 167
    },
    "14001cc8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001cc8c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x14004ca28) && ((*0x14003d428 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400224a4();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "14001ccc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ccc0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x14004ca28)) && ((*0x14003d428 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400224a4();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "14001ccf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ccf8(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x14004d258) && ((*0x14003d428 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140021810();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 96
    },
    "14001cd2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001cd2c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x14004d258)) && ((*0x14003d428 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140021810();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 112
    },
    "14001db6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001db60(int32_t *arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t in_R9W;\n    uint64_t uStackX16;\n    uint16_t auStackX32 [4];\n    int64_t in_stack_00000028;\n    \n    if ((arg2 == NULL) && (arg3 != 0)) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = -1;\n    }\n    if (arg3 < 0x80000000) {\n        auStackX32[0] = in_R9W;\n        if (*(in_stack_00000028 + 0x28) == '\\0') {\n            fcn.140013830(in_stack_00000028);\n        }\n        uVar1 = *(*(in_stack_00000028 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX16 = 0;\n            iVar2 = fcn.140024578(arg2, auStackX32[0], &uStackX16, in_stack_00000028);\n            if (arg1 != NULL) {\n                *arg1 = iVar2;\n            }\n            if (iVar2 < 5) {\n                return 0;\n            }\n            if (*(in_stack_00000028 + 0x30) != '\\0') {\n                return *(in_stack_00000028 + 0x2c);\n            }\n            return 0;\n        }\n        if (*(*(in_stack_00000028 + 0x18) + 0x138) == 0) {\n            if (0xff < auStackX32[0]) {\n                if ((arg2 != NULL) && (arg3 != 0)) {\n                    fcn.14000b880(arg2, 0, arg3);\n                }\n                goto code_r0x00014001dc42;\n            }\n            if (arg2 == NULL) {\ncode_r0x00014001dc6e:\n                if (arg1 != NULL) {\n                    *arg1 = 1;\n                }\n                return 0;\n            }\n            if (arg3 != 0) {\n                *arg2 = auStackX32[0];\n                goto code_r0x00014001dc6e;\n            }\n        }\n        else {\n            uStackX16 = uStackX16 & 0xffffffff00000000;\n            iVar2 = fcn.14001f138(uVar1, 0, auStackX32, 1);\n            if (iVar2 != 0) {\n                if (uStackX16 == 0) {\n                    if (arg1 == NULL) {\n                        return 0;\n                    }\n                    *arg1 = iVar2;\n                    return 0;\n                }\ncode_r0x00014001dc42:\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                *(in_stack_00000028 + 0x30) = 1;\n                return 0x2a;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x00014001dc42;\n            if ((arg2 != NULL) && (arg3 != 0)) {\n                fcn.14000b880(arg2, 0, arg3);\n            }\n        }\n        uVar3 = 0x22;\n    }\n    else {\n        uVar3 = 0x16;\n    }\n    *(in_stack_00000028 + 0x2c) = uVar3;\n    *(in_stack_00000028 + 0x30) = 1;\n    fcn.140019e44(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 896
    },
    "14001e0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e0ec(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.14001df30(0x19, \"AppPolicyGetProcessTerminationMethod\", 0x140032764, \n                          \"AppPolicyGetProcessTerminationMethod\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014001e132. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14002a368)(0xfffffffffffffffa, arg1);\n        return uVar2;\n    }\n    return 0xc0000225;\n}\n",
        "token_count": 157
    },
    "14001e14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e144(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.14001df30(0, \"AreFileApisANSI\", 0x1400326f8, 0x1400326fc);\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014001e177. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14002a368)();\n        return uVar2;\n    }\n    return 1;\n}\n",
        "token_count": 136
    },
    "14001e29": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e294(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14001df30(0xf, \"InitializeCriticalSectionEx\", 0x140032728, 0x140032730);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg1, arg2);\n    }\n    else {\n        (**0x14002a368)(arg1, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 126
    },
    "14001e30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e304(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    ulong in_stack_00000048;\n    \n    iVar2 = fcn.14001df30(0x11, \"LCMapStringEx\", 0x140032730, \"LCMapStringEx\");\n    if (iVar2 == 0) {\n        uVar1 = fcn.14001e3f0(arg1, 0);\n        (*_sym.imp.KERNEL32.dll_LCMapStringW)(uVar1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n    }\n    else {\n        (**0x14002a368)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                        in_stack_00000040, in_stack_00000048);\n    }\n    return;\n}\n",
        "token_count": 262
    },
    "14001e3f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e3f0(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char *arg2_00;\n    \n    arg2_00 = \"LocaleNameToLCID\";\n    iVar1 = fcn.14001df30(0x13, \"LocaleNameToLCID\", 0x140032748, \"LocaleNameToLCID\");\n    if (iVar1 == 0) {\n        fcn.14002461c(arg1, arg2_00);\n    }\n    else {\n        (**0x14002a368)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 139
    },
    "14001ebd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001ebd8(uint64_t **arg1)\n\n{\n    uint64_t uVar1;\n    uint64_t *puVar2;\n    uint64_t uVar3;\n    uint uVar4;\n    \n    uVar1 = **arg1;\n    fcn.140015c6c(*arg1[1], arg1[2]);\n    fcn.14001a3b8(*arg1[1]);\n    LOCK();\n    *(*arg1[1] + 0x14) = *(*arg1[1] + 0x14) & 0xfffff81f;\n    if ((*arg1[3] & 4) == 0) {\n        uVar3 = *arg1[4];\n        uVar4 = uVar1 & 0xfffffffffffffffe;\n        if (uVar3 == 0) {\n            uVar1 = fcn.14001deb8(uVar1 & 0xfffffffffffffffe, 1);\n            fcn.140019f78(0);\n            if (uVar1 == 0) {\n                *0x14004c790 = *0x14004c790 + 1;\n                return 0xffffffff;\n            }\n            puVar2 = *arg1[1];\n            LOCK();\n            *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x140;\n            *(puVar2 + 4) = uVar4;\n            *puVar2 = uVar1;\n            puVar2[1] = uVar1;\n            goto code_r0x00014001eca9;\n        }\n        puVar2 = *arg1[1];\n        LOCK();\n        *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x180;\n        *(puVar2 + 4) = uVar4;\n    }\n    else {\n        puVar2 = *arg1[1];\n        uVar3 = puVar2 + 0x1c;\n        LOCK();\n        *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x400;\n        *(puVar2 + 4) = 2;\n    }\n    *puVar2 = uVar3;\n    puVar2[1] = uVar3;\ncode_r0x00014001eca9:\n    *(puVar2 + 2) = 0;\n    return 0;\n}\n",
        "token_count": 537
    },
    "14001ef2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001ef20(ulong arg1, ushort *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    int16_t iVar4;\n    uchar auStack152 [32];\n    ulong *puStack120;\n    ushort *puStack112;\n    int64_t iStack104;\n    ushort *puStack96;\n    int64_t var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_38h;\n    uint64_t var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_10h;\n    \n    var_30h = *0x14003d018 ^ auStack152;\n    iVar3 = arg3;\n    iVar4 = arg1;\n    if (arg3 < 0) {\ncode_r0x00014001ef4b:\n        puVar2 = fcn.140016088();\n        *puVar2 = 0x16;\n    }\n    else {\n        if (arg1 == 0) {\n            iVar1 = fcn.14001e588();\n            iVar4 = iVar1;\n            if (iVar1 == 0) {\n                var_38h._0_2_ = 0x2e;\n                var_38h._2_2_ = 0;\n            }\n            else {\ncode_r0x00014001ef92:\n                var_38h._0_2_ = iVar4 + 0x40;\n                var_38h._2_2_ = 0x3a;\n                var_38h._4_2_ = 0x2e;\n                var_38h._6_2_ = 0;\n            }\n            if (arg2 == NULL) {\n                puStack112 = NULL;\n                iStack104 = 0;\n                var_48h = 0;\n                puStack96 = fcn.14001414c(iVar3 * 2);\n                var_40h._0_1_ = puStack96 != NULL;\n                var_50h = iVar3;\n                if (!var_40h) {\n                    var_50h = 0;\n                }\n                puStack120 = &var_38h;\n                iVar1 = fcn.1400151fc(&puStack112, &puStack120);\n                if (iVar1 == 0) {\n                    fcn.1400152d4(&puStack112);\n                    if (var_40h != '\\0') {\n                        fcn.140014138(puStack96);\n                    }\n                }\n                else if (var_40h != '\\0') {\n                    fcn.140014138(puStack96);\n                }\n                goto code_r0x00014001f075;\n            }\n            if (0 < arg3) {\n                *arg2 = 0;\n                puStack120 = &var_38h;\n                var_48h = 0;\n                var_40h._0_1_ = '\\0';\n                puStack112 = arg2;\n                iStack104 = iVar3;\n                puStack96 = arg2;\n                var_50h = iVar3;\n                fcn.140015188(&puStack112, &puStack120);\n                goto code_r0x00014001f075;\n            }\n            goto code_r0x00014001ef4b;\n        }\n        iVar1 = fcn.14001f08c(arg1);\n        if (iVar1 != 0) goto code_r0x00014001ef92;\n        puVar2 = fcn.140016068();\n        *puVar2 = 0xf;\n        puVar2 = fcn.140016088();\n        *puVar2 = 0xd;\n    }\n    fcn.140019f10();\ncode_r0x00014001f075:\n    fcn.14000a100(var_30h ^ auStack152);\n    return;\n}\n",
        "token_count": 924
    },
    "14001f11": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001f110(ulong arg1, ulong arg2)\n\n{\n    fcn.14001ef20(0, arg1, arg2);\n    return;\n}\n",
        "token_count": 40
    },
    "14001f5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001f5b8(ushort *arg1)\n\n{\n    uint64_t uVar1;\n    ulong in_RDX;\n    ulong in_R8;\n    ulong in_R9;\n    uint32_t auStack24 [4];\n    \n    uVar1 = fcn.140026210(auStack24, in_RDX, in_R8, in_R9);\n    if (uVar1 < 5) {\n        if (0xffff < auStack24[0]) {\n            auStack24[0] = 0xfffd;\n        }\n        if (arg1 != NULL) {\n            *arg1 = auStack24[0];\n        }\n    }\n    return;\n}\n",
        "token_count": 150
    },
    "14001f83": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001f830(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14004d240;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14004d010);\n        *0x14004d240 = *0x14004d240 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "14002071": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140020718(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140020490(param_1, param_2, param_3);\n    return;\n}\n",
        "token_count": 48
    },
    "14002092": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140020920(int16_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x000140020973:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = 0;\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    piVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg1 = 0;\n                    puVar2 = fcn.140016088();\n                    uVar5 = 0x22;\n                    goto code_r0x000140020951;\n                }\n                *arg1 = 0;\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x000140020973;\n    puVar2 = fcn.140016088();\n    uVar5 = 0x16;\ncode_r0x000140020951:\n    *puVar2 = uVar5;\n    fcn.140019f10();\n    return uVar5;\n}\n",
        "token_count": 633
    },
    "140020fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140020fac(int16_t **arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    int64_t iVar7;\n    uint16_t uVar8;\n    int64_t *piVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    ulong var_1b0h;\n    ulong var_1b8h;\n    uchar auStack760 [32];\n    ulong uStack728;\n    uint uStack720;\n    uchar auStack712 [16];\n    ulong uStack696;\n    int64_t iStack688;\n    int64_t *piStack680;\n    uchar auStack664 [44];\n    int16_t iStack620;\n    int16_t iStack618;\n    int16_t iStack616;\n    ulong var_74h;\n    ulong uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x14003d018 ^ auStack760;\n    piStack680 = arg2;\n    if (arg2 == NULL) {\n        puVar4 = fcn.140016088();\n        *puVar4 = 0x16;\n        fcn.140019f10();\n    }\n    else {\n        *arg2 = 0;\n        piVar5 = *arg1;\n        auStack712 = ZEXT816(0);\n        auStack712._8_8_ = NULL;\n        auStack712._0_8_ = NULL;\n        uStack696 = 0;\n        while (piVar5 != NULL) {\n            uStack72 = CONCAT26(uStack72._6_2_, 0x3f002a);\n            piVar6 = fcn.14001e680(piVar5, &uStack72);\n            piVar5 = *arg1;\n            if (piVar6 == NULL) {\n                iVar3 = fcn.140020e24(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140019f78(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140020d37;\n                }\n            }\n            else {\n                while ((piVar6 != piVar5 &&\n                       ((0x2d < *piVar6 - 0x2fU || ((0x200000000801U >> (*piVar6 - 0x2fU & 0x3f) & 1) == 0))))) {\n                    piVar6 = piVar6 + -1;\n                }\n                if ((*piVar6 != 0x3a) || (piVar6 == piVar5 + 1)) {\n                    uVar8 = *piVar6 - 0x2f;\n                    if ((0x2d < uVar8) || (uVar2 = 1,  (0x200000000801U >> (uVar8 & 0x3f) & 1) == 0)) {\n                        uVar2 = 0;\n                    }\n                    uStack720 = 0;\n                    uStack728 = 0;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(piVar5, 0, auStack664, 0);\n                    if (iVar7 != -1) {\n                        iVar10 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        do {\n                            if (((iStack620 != 0x2e) || ((iStack618 != 0 && ((iStack618 != 0x2e || (iStack616 != 0))))))\n                               && (iVar3 = fcn.140020e24(&iStack620, piVar5, -uVar2 & (piVar6 - piVar5 >> 1) + 1U, \n                                                         auStack712),  iVar3 != 0)) {\n                                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                                goto code_r0x000140020c94;\n                            }\n                            iVar3 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar7, auStack664);\n                        } while (iVar3 != 0);\n                        iVar7 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        if (iVar10 != iVar7) {\n                            fcn.140026840(auStack712._0_8_ + iVar10, iVar7 - iVar10, 8, 0x140020a20);\n                        }\n                        (*_sym.imp.KERNEL32.dll_FindClose)();\n                        goto code_r0x000140020c59;\n                    }\n                }\n                iVar3 = fcn.140020e24(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\ncode_r0x000140020c94:\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140019f78(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140020d37;\n                }\n            }\ncode_r0x000140020c59:\n            arg1 = arg1 + 1;\n            piVar5 = *arg1;\n        }\n        iVar7 = (auStack712._8_8_ - auStack712._0_8_ >> 3) + 1;\n        iStack688 = 0;\n        for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n            iVar10 = -1;\n            do {\n                iVar10 = iVar10 + 1;\n            } while (*(*piVar9 + iVar10 * 2) != 0);\n            iStack688 = iStack688 + 1 + iVar10;\n        }\n        iVar10 = fcn.140017f70(iVar7, iStack688);\n        if (iVar10 == 0) {\n            fcn.140019f78(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140019f78(*piVar9);\n            }\ncode_r0x000140020d37:\n            fcn.140019f78(auStack712._0_8_);\n        }\n        else {\n            iVar7 = iVar10 + iVar7 * 8;\n            uStack72 = iVar7;\n            if (auStack712._0_8_ != auStack712._8_8_) {\n                piVar9 = auStack712._0_8_;\n                do {\n                    iVar11 = -1;\n                    do {\n                        iVar12 = iVar11;\n                        iVar11 = iVar12 + 1;\n                    } while (*(*piVar9 + iVar11 * 2) != 0);\n                    iVar12 = iVar12 + 2;\n                    iVar3 = fcn.140020920(iVar7, iStack688 - (iVar7 - uStack72 >> 1), *piVar9, iVar12);\n                    if (iVar3 != 0) {\n                        uStack728 = 0;\n                        fcn.140019f30(0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    *(piVar9 + (iVar10 - auStack712._0_8_)) = iVar7;\n                    piVar9 = piVar9 + 1;\n                    iVar7 = iVar7 + iVar12 * 2;\n                } while (piVar9 != auStack712._8_8_);\n            }\n            *piStack680 = iVar10;\n            fcn.140019f78(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140019f78(*piVar9);\n            }\n            fcn.140019f78(auStack712._0_8_);\n        }\n    }\n    fcn.14000a100(uStack64 ^ auStack760);\n    return;\n}\n",
        "token_count": 1944
    },
    "14002120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140021204(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    int64_t iVar4;\n    \n    fcn.14000b880(arg1 + 0x18, 0, 0x101);\n    iVar2 = 0;\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x220) = 0;\n    puVar3 = arg1 + 0xc;\n    for (iVar1 = 6; iVar4 = iVar2,  iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    do {\n        iVar1 = iVar4 + 1;\n        *(arg1 + iVar4 + 0x18) = *(iVar4 + 0x14003d458);\n        iVar4 = iVar1;\n    } while (iVar1 < 0x101);\n    do {\n        iVar1 = iVar2 + 1;\n        *(arg1 + iVar2 + 0x119) = *(iVar2 + 0x14003d559);\n        iVar2 = iVar1;\n    } while (iVar1 < 0x100);\n    return;\n}\n",
        "token_count": 288
    },
    "14002181": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.140021810(ulong param_1, ulong param_2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.14001a780(param_1, param_2);\n    if (((*(iVar4 + 0x3a8) & *0x14003d428) == 0) || (*(iVar4 + 0x90) == 0)) {\n        fcn.14001f808(5);\n        piVar3 = *(iVar4 + 0x88);\n        if (piVar3 != *0x14004d258) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x14003d440)) {\n                    fcn.140019f78(piVar3);\n                }\n            }\n            piVar3 = *0x14004d258;\n            *(iVar4 + 0x88) = *0x14004d258;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.14001f868(5);\n    }\n    else {\n        piVar3 = *(iVar4 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.14001936c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 369
    },
    "140021ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140021aec(void)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *arg3;\n    int64_t iVar3;\n    int16_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar4;\n    \n    arg3 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStringsW)();\n    if (arg3 != NULL) {\n        iVar1 = *arg3;\n        piVar5 = arg3;\n        while (iVar1 != 0) {\n            iVar3 = -1;\n            do {\n                iVar4 = iVar3;\n                iVar3 = iVar4 + 1;\n            } while (piVar5[iVar3] != 0);\n            piVar5 = piVar5 + iVar4 + 2;\n            iVar1 = *piVar5;\n        }\n        uVar6 = piVar5 + (2 - arg3) >> 1;\n        iVar2 = fcn.14001f138(0, 0, arg3, uVar6 & 0xffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.14001cc2c(iVar2);\n            if (iVar3 != 0) {\n                iVar2 = fcn.14001f138(0, 0, arg3, uVar6 & 0xffffffff);\n                if (iVar2 == 0) {\n                    fcn.140019f78(iVar3);\n                    iVar3 = 0;\n                }\n                else {\n                    fcn.140019f78(0);\n                }\n                (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n                return iVar3;\n            }\n            fcn.140019f78(0);\n        }\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n    }\n    return 0;\n}\n",
        "token_count": 406
    },
    "140021bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.140021bfc(void)\n\n{\n    int16_t iVar1;\n    int16_t *arg2;\n    int64_t iVar2;\n    int16_t *arg1;\n    int16_t *piVar4;\n    int64_t iVar3;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStringsW)();\n    piVar4 = arg2;\n    if (arg2 != NULL) {\n        iVar1 = *arg2;\n        while (iVar1 != 0) {\n            iVar2 = -1;\n            do {\n                iVar3 = iVar2;\n                iVar2 = iVar3 + 1;\n            } while (piVar4[iVar2] != 0);\n            piVar4 = piVar4 + iVar3 + 2;\n            iVar1 = *piVar4;\n        }\n        iVar2 = (piVar4 + (2 - arg2) >> 1) * 2;\n        arg1 = fcn.14001cc2c(iVar2);\n        piVar4 = NULL;\n        if (arg1 != NULL) {\n            fcn.14000aec0(arg1, arg2, iVar2);\n            piVar4 = arg1;\n        }\n        fcn.140019f78(0);\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg2);\n    }\n    return piVar4;\n}\n",
        "token_count": 300
    },
    "140021d2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021d2c(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x14003d998) {\n            fcn.140019f78(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x14003d9a0) {\n            fcn.140019f78(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x14003d9a8) {\n            fcn.140019f78(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x14003d9b0) {\n            fcn.140019f78(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x14003d9b8) {\n            fcn.140019f78(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x14003d9c0) {\n            fcn.140019f78(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x14003d9c8) {\n            fcn.140019f78(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x14003d9e8) {\n            fcn.140019f78(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x14003d9f0) {\n            fcn.140019f78(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x14003d9f8) {\n            fcn.140019f78(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x14003da00) {\n            fcn.140019f78(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x14003da08) {\n            fcn.140019f78(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x14003da10) {\n            fcn.140019f78(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 571
    },
    "140021e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021e38(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x14003d980) {\n            fcn.140019f78(*arg1);\n        }\n        if (arg1[1] != *0x14003d988) {\n            fcn.140019f78(arg1[1]);\n        }\n        if (arg1[2] != *0x14003d990) {\n            fcn.140019f78(arg1[2]);\n        }\n        if (arg1[0xb] != *0x14003d9d8) {\n            fcn.140019f78(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x14003d9e0) {\n            fcn.140019f78(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "140021ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021ea4(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t in_RDX;\n    \n    puVar1 = arg1 + in_RDX;\n    if (arg1 != puVar1) {\n        do {\n            fcn.140019f78(*arg1);\n            arg1 = arg1 + 1;\n        } while (arg1 != puVar1);\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14002239": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002239c(int64_t arg1)\n\n{\n    if (((arg1 != 0) && (arg1 != 0x140031a10)) && (*(arg1 + 0x15c) == 0)) {\n        fcn.140021ed8(arg1);\n        fcn.140019f78(arg1);\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "14002273": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140022730(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = fcn.140022770();\n    if (uVar2 != 0) {\n        iVar1 = (**0x14002a368)(arg1);\n        uVar2 = iVar1 != 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 90
    },
    "14002456": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140024564(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.140027958();\n    return uVar1 & 0x300;\n}\n",
        "token_count": 46
    },
    "14002461": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14002461c(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    if (arg1 != 0) {\n        iVar3 = 0;\n        iVar4 = 0xe3;\n        do {\n            iVar1 = (iVar4 + iVar3) / 2;\n            iVar2 = fcn.1400254a8(arg1, *(iVar1 * 0x10 + 0x140035e30), 0x55);\n            if (iVar2 == 0) {\n                iVar3 = *(iVar1 * 0x10 + 0x140035e38);\n                if (iVar3 < 0) {\n                    return 0;\n                }\n                if (0xe3 < iVar3) {\n                    return 0;\n                }\n                return *(iVar3 * 0x10 + 0x1400343d0);\n            }\n            if (iVar2 < 0) {\n                iVar4 = iVar1 + -1;\n            }\n            else {\n                iVar3 = iVar1 + 1;\n            }\n        } while (iVar3 <= iVar4);\n    }\n    return 0;\n}\n",
        "token_count": 273
    },
    "14002483": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140024838(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n        fcn.140019f10();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x14004d2a4;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 116
    },
    "14002486": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140024868(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n        fcn.140019f10();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x14004d2a8;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 116
    },
    "14002489": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140024898(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.140016088();\n        *puVar1 = 0x16;\n        fcn.140019f10();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x14004d2a0;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 116
    },
    "14002543": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140025434(void)\n\n{\n    if (*0x14004d2d4 == 0) {\n        fcn.14001f808(6);\n        if (*0x14004d2d4 == 0) {\n            fcn.1400252a4();\n            LOCK();\n            *0x14004d2d4 = *0x14004d2d4 + 1;\n        }\n    // WARNING: Could not recover jumptable at 0x00014001f87a. Too many branches\n    // WARNING: Treating indirect jump as call\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x14004d100);\n        return;\n    }\n    return;\n}\n",
        "token_count": 158
    },
    "1400261d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400261dc(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t in_stack_00000028;\n    \n    fcn.1400257dc(arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 67
    },
    "1400267e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400267e4(void)\n\n{\n    ulong *puVar1;\n    \n    puVar1 = 0x14004d398;\n    do {\n        fcn.140019f78(*puVar1);\n        *puVar1 = 0;\n        puVar1 = puVar1 + 1;\n    } while (puVar1 != 0x14004d3b0);\n    puVar1 = 0x14004d3b0;\n    do {\n        fcn.140019f78(*puVar1);\n        *puVar1 = 0;\n        puVar1 = puVar1 + 1;\n    } while (puVar1 != 0x14004d3c8);\n    return;\n}\n",
        "token_count": 163
    },
    "140026c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid fcn.140026c50(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4, ulong noname_4, ulong noname_5, ulong noname_6, \n                  ulong noname_7, ulong noname_8, ulong noname_9, ulong arg_60h, ulong arg_68h, ulong arg_70h, \n                  ulong arg_78h, ulong arg_80h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    uint *arg3_00;\n    int64_t iVar5;\n    uint *arg3_01;\n    uint64_t uVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uchar *puVar9;\n    uchar *puVar10;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_40h;\n    ulong var_48h;\n    ulong var_bp_50h;\n    uchar auStack136 [32];\n    ulong uStack104;\n    uint uStack96;\n    uint auStack56 [2];\n    uint64_t uStack48;\n    \n    puVar8 = &stack0xffffffffffffff78;\n    puVar9 = &stack0xffffffffffffff78;\n    puVar10 = &stack0xffffffffffffff78;\n    uStack48 = *0x14003d018 ^ &stack0xffffffffffffffc8;\n    if (0 < noname_4) {\n        fcn.140028494(arg4, noname_4);\n    }\n    if (noname_7 == 0) {\n        noname_7._0_4_ = *(*arg1 + 0xc);\n    }\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.14001e870(noname_7, (-(noname_8 != 0) & 8) + 1);\n    arg3_00 = NULL;\n    if (uVar1 == 0) goto code_r0x000140026f5b;\n    uVar4 = uVar1 * 2 + 0x10;\n    uVar4 = -(uVar1 * 2 < uVar4) & uVar4;\n    puVar10 = &stack0xffffffffffffff78;\n    if (uVar4 == 0) {\ncode_r0x000140026f41:\n        if (arg3_00 == NULL) goto code_r0x000140026f5b;\n    }\n    else {\n        if (uVar4 < 0x401) {\n            uVar6 = uVar4 + 0xf;\n            if (uVar6 <= uVar4) {\n                uVar6 = 0xffffffffffffff0;\n            }\n            uVar6 = uVar6 & 0xfffffffffffffff0;\n            fcn.14000a130();\n            iVar5 = -uVar6;\n            puVar8 = &stack0xffffffffffffff78 + iVar5;\n            arg3_00 = &stack0xffffffffffffffc8 + iVar5;\n            puVar10 = &stack0xffffffffffffff78 + iVar5;\n            if (arg3_00 == NULL) goto code_r0x000140026f41;\n            *arg3_00 = 0xcccc;\ncode_r0x000140026d5c:\n            arg3_00 = arg3_00 + 4;\n            puVar9 = puVar8;\n        }\n        else {\n            arg3_00 = fcn.14001cc2c(uVar4);\n            if (arg3_00 != NULL) {\n                *arg3_00 = 0xdddd;\n                goto code_r0x000140026d5c;\n            }\n        }\n        puVar10 = puVar9;\n        if (arg3_00 == NULL) goto code_r0x000140026f41;\n        *(puVar9 + 0x28) = uVar1;\n        *(puVar9 + 0x20) = arg3_00;\n        *(puVar9 + -8) = 0x140026d86;\n        iVar2 = fcn.14001e870(noname_7, 1);\n        if (iVar2 == 0) goto code_r0x000140026f41;\n        *(puVar9 + 0x40) = 0;\n        *(puVar9 + 0x38) = 0;\n        *(puVar9 + 0x30) = 0;\n        *(puVar9 + 0x28) = 0;\n        *(puVar9 + 0x20) = 0;\n        *(puVar9 + -8) = 0x140026db9;\n        uVar3 = fcn.14001e304(arg2, arg3, arg3_00, uVar1);\n        puVar7 = NULL;\n        if (uVar3 == 0) goto code_r0x000140026f41;\n        if ((arg3 & 0x400) == 0) {\n            uVar4 = uVar3 * 2 + 0x10;\n            uVar4 = -(uVar3 * 2 < uVar4) & uVar4;\n            arg3_01 = puVar7;\n            if (uVar4 == 0) {\ncode_r0x000140026f24:\n                if (arg3_01 != NULL) {\ncode_r0x000140026f29:\n                    if (arg3_01[-4] == 0xdddd) {\n                        *(puVar10 + -8) = 0x140026f3a;\n                        fcn.140019f78(arg3_01 + -4);\n                    }\n                }\n            }\n            else {\n                if (uVar4 < 0x401) {\n                    *(puVar9 + -8) = 0x140026e5c;\n                    iVar5 = fcn.14000a130();\n                    iVar5 = -iVar5;\n                    puVar10 = puVar9 + iVar5;\n                    arg3_01 = puVar9 + iVar5 + 0x50;\n                    if (arg3_01 == NULL) goto code_r0x000140026f48;\n                    *arg3_01 = 0xcccc;\n                    puVar9 = puVar9 + iVar5;\ncode_r0x000140026e8a:\n                    arg3_01 = arg3_01 + 4;\n                    puVar10 = puVar9;\n                }\n                else {\n                    *(puVar9 + -8) = 0x140026e7a;\n                    arg3_01 = fcn.14001cc2c(uVar4);\n                    puVar7 = NULL;\n                    if (arg3_01 != NULL) {\n                        *arg3_01 = 0xdddd;\n                        goto code_r0x000140026e8a;\n                    }\n                }\n                if (arg3_01 != NULL) {\n                    *(puVar10 + 0x40) = puVar7;\n                    *(puVar10 + 0x38) = puVar7;\n                    *(puVar10 + 0x30) = puVar7;\n                    *(puVar10 + 0x28) = uVar3;\n                    *(puVar10 + 0x20) = arg3_01;\n                    *(puVar10 + -8) = 0x140026ec0;\n                    iVar2 = fcn.14001e304(arg2, arg3, arg3_00, uVar1);\n                    if (iVar2 == 0) goto code_r0x000140026f24;\n                    *(puVar10 + 0x38) = 0;\n                    *(puVar10 + 0x30) = 0;\n                    if (noname_6 == 0) {\n                        *(puVar10 + 0x28) = 0;\n                        *(puVar10 + 0x20) = 0;\n                        *(puVar10 + -8) = 0x140026eee;\n                        iVar2 = fcn.14001f138(noname_7, 0, arg3_01, uVar3);\n                        if (iVar2 == 0) goto code_r0x000140026f24;\n                    }\n                    else {\n                        *(puVar10 + 0x28) = noname_6;\n                        *(puVar10 + 0x20) = noname_5;\n                        *(puVar10 + -8) = 0x140026f08;\n                        iVar2 = fcn.14001f138(noname_7, 0, arg3_01, uVar3);\n                        if (iVar2 == 0) goto code_r0x000140026f29;\n                    }\n                    if (arg3_01[-4] == 0xdddd) {\n                        *(puVar10 + -8) = 0x140026f1f;\n                        fcn.140019f78(arg3_01 + -4);\n                    }\n                }\n            }\n        }\n        else if (noname_6 != 0) {\n            if (uVar3 <= noname_6) {\n                *(puVar9 + 0x40) = 0;\n                *(puVar9 + 0x38) = 0;\n                *(puVar9 + 0x30) = 0;\n                *(puVar9 + 0x28) = noname_6;\n                *(puVar9 + 0x20) = noname_5;\n                *(puVar9 + -8) = 0x140026e11;\n                iVar2 = fcn.14001e304(arg2, arg3, arg3_00, uVar1);\n                if (iVar2 != 0) goto code_r0x000140026f48;\n            }\n            goto code_r0x000140026f41;\n        }\n    }\ncode_r0x000140026f48:\n    if (arg3_00[-4] == 0xdddd) {\n        *(puVar10 + -8) = 0x140026f59;\n        fcn.140019f78(arg3_00 + -4);\n    }\ncode_r0x000140026f5b:\n    uVar4 = uStack48 ^ &stack0xffffffffffffffc8;\n    *(puVar10 + -8) = 0x140026f67;\n    fcn.14000a100(uVar4);\n    return;\n}\n",
        "token_count": 2295
    },
    "14002723": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.140027230(uint32_t *arg1)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    ulong uStackX8;\n    \n    fcn.140027a94(*arg1);\n    fcn.140027bcc(arg1[1]);\n    uStackX8 = 0;\n    iVar1 = fcn.140027210(&uStackX8);\n    if ((iVar1 == 0) && (*arg1 == uStackX8)) {\n        bVar2 = arg1[1] != uStackX8._4_4_;\n    }\n    else {\n        bVar2 = true;\n    }\n    return bVar2;\n}\n",
        "token_count": 157
    },
    "140028aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140028aa0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140028ac0(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 56
    },
    "1400111a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400111a0(char *arg1, int64_t *arg2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    \n    cVar1 = *arg1;\n    while ((cVar1 != '\\0' && (cVar1 != ***(*arg2 + 0xf8)))) {\n        arg1 = arg1 + 1;\n        cVar1 = *arg1;\n    }\n    if (cVar1 != '\\0') {\n        do {\n            arg1 = arg1 + 1;\n            pcVar2 = arg1;\n            if (*arg1 == '\\0') break;\n        } while ((*arg1 + 0xbbU & 0xdf) != 0);\n        do {\n            pcVar3 = pcVar2;\n            pcVar2 = pcVar3 + -1;\n        } while (*pcVar2 == '0');\n        pcVar3 = pcVar3 + -2;\n        if (*pcVar2 != ***(*arg2 + 0xf8)) {\n            pcVar3 = pcVar2;\n        }\n        iVar4 = arg1 - pcVar3;\n        do {\n            cVar1 = pcVar3[iVar4];\n            pcVar3 = pcVar3 + 1;\n            *pcVar3 = cVar1;\n        } while (cVar1 != '\\0');\n    }\n    return;\n}\n",
        "token_count": 311
    },
    "14002664": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "set environment variable"
        ],
        "decompiled_code": "\nuint64_t fcn.140026644(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uchar auStackX24 [8];\n    int64_t iStack152;\n    int64_t iStack144;\n    char cStack128;\n    ulong uStack120;\n    ulong uStack112;\n    uint64_t uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    char cStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    char cStack32;\n    \n    uVar3 = 0;\n    uStack72 = 0;\n    uStack64 = 0;\n    uStack56 = 0;\n    uStack48 = 0;\n    uStack40 = 0;\n    cStack32 = '\\0';\n    uStack120 = 0;\n    uStack112 = 0;\n    uStack104 = 0;\n    uStack96 = 0;\n    uStack88 = 0;\n    cStack80 = '\\0';\n    fcn.140014a84(&iStack152, 0);\n    uVar2 = 0xfde9;\n    if (*(iStack144 + 0xc) == 0xfde9) {\n        if (cStack128 != '\\0') {\n            *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n        }\n        uVar4 = 0xfde9;\n    }\n    else {\n        iVar1 = fcn.14001e144();\n        if (iVar1 == 0) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n            uVar4 = 1;\n        }\n        else {\n            uVar4 = uVar3;\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n    }\n    iVar1 = fcn.14001456c(arg1, &uStack72, auStackX24, uVar4);\n    uVar4 = uVar3;\n    if (iVar1 == 0) {\n        fcn.140014a84(&iStack152, 0);\n        if (*(iStack144 + 0xc) == 0xfde9) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar1 = fcn.14001e144();\n            if (iVar1 == 0) {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 1;\n            }\n            else {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 0;\n            }\n        }\n        iVar1 = fcn.14001456c(arg2, &uStack120, auStackX24, uVar2);\n        uVar4 = uStack104;\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uStack56, uStack104);\n            uVar3 = uVar2;\n        }\n    }\n    if (cStack80 != '\\0') {\n        fcn.140019f78(uVar4);\n    }\n    if (cStack32 != '\\0') {\n        fcn.140019f78(uStack56);\n    }\n    return uVar3;\n}\n",
        "token_count": 918
    },
    "140021cb": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\nuint32_t fcn.140021cb4(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(*(*(*(in_GS_OFFSET + 0x30) + 0x60) + 0x20) + 8) >> 0x1f;\n}\n",
        "token_count": 63
    },
    "14001414": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.14001414c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x14004d270, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140018c4c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140022730(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.140016088();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 196
    },
    "140018ad": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140018ad8(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140018a40(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.14001881c(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.1400189e8(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 432
    },
    "140018b2": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140018b24(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 0;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140018a40(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.14001881c(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.1400189e8(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 432
    },
    "1400189e": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.1400189e8(uint64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    cVar3 = fcn.140018a1c();\n    if (cVar3 != '\\0') {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2, arg1);\n    }\n    fcn.140018a40(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 160
    }
}