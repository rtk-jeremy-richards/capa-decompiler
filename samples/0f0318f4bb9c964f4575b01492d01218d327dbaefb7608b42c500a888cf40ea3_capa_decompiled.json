{
    "00401020": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00401020(int32_t param_1)\n\n{\n    uint arg_8h;\n    uint uVar1;\n    uchar auStack356 [352];\n    uint32_t uStack4;\n    \n    uStack4 = *0x44c69c ^ auStack356;\n    if (param_1 == 0) {\n        uVar1 = 0x4000;\n    }\n    else {\n        uVar1 = 0x4001;\n    }\n    arg_8h = 0x43c628;\n    (*_sym.imp.SHELL32.dll_SHGetFileInfoA)(0x43c628, 0, auStack356, 0x160, uVar1);\n    fcn.00420bb4(arg_8h);\n    return;\n}\n",
        "token_count": 169
    },
    "00401100": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00401100(int32_t param_1)\n\n{\n    char *arg_8h;\n    uint uVar1;\n    uchar auStack356 [352];\n    uint32_t uStack4;\n    \n    uStack4 = *0x44c69c ^ auStack356;\n    if (param_1 == 0) {\n        uVar1 = 0x110;\n        arg_8h = \"Does not matter\";\n    }\n    else {\n        uVar1 = 0x111;\n        arg_8h = \"Doesn\\'t matter\";\n    }\n    (*_sym.imp.SHELL32.dll_SHGetFileInfoA)(arg_8h, 0x10, auStack356, 0x160, uVar1);\n    fcn.00420bb4(arg_8h);\n    return;\n}\n",
        "token_count": 180
    },
    "00401400": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401400(int32_t *param_1)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    \n    iVar4 = *param_1;\n    ppiVar1 = iVar4 + -0x10;\n    piVar3 = *ppiVar1;\n    if (*(iVar4 + -0xc) != 0) {\n        piVar2 = iVar4 + -4;\n        if (*(iVar4 + -4) < 0) {\n            if (*(iVar4 + -8) < 0) {\n                fcn.00401170(0x80070057);\n                iVar4 = extraout_ECX;\n            }\n            *(iVar4 + -0xc) = 0;\n            **param_1 = 0;\n            return;\n        }\n        LOCK();\n        iVar4 = *piVar2;\n        *piVar2 = *piVar2 + -1;\n        if (iVar4 == 1 || iVar4 + -1 < 0) {\n            (**(**ppiVar1 + 4))(ppiVar1);\n        }\n        iVar4 = (**(*piVar3 + 0xc))();\n        *param_1 = iVar4 + 0x10;\n    }\n    return;\n}\n",
        "token_count": 298
    },
    "00401460": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401460(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *unaff_EBP;\n    int32_t **ppiVar6;\n    \n    iVar5 = *param_1;\n    if (param_2 < *(iVar5 + -0xc)) {\n        param_2 = *(iVar5 + -0xc);\n    }\n    if (1 < *(iVar5 + -4)) {\n        iVar5 = *param_1;\n        iVar2 = *(iVar5 + -0xc);\n        ppiVar6 = iVar5 + -0x10;\n        puVar3 = (**(**ppiVar6 + 0x10))();\n        iVar4 = (***puVar3)(param_2, 1);\n        if (iVar4 == 0) {\n            fcn.004012e0();\n        }\n        if (iVar2 < param_2) {\n            param_2 = iVar2;\n        }\n        fcn.00420bc3(iVar4 + 0x10, param_2 + 1, iVar5, param_2 + 1);\n        *(iVar4 + 4) = iVar2;\n        piVar1 = iVar5 + -4;\n        LOCK();\n        iVar5 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar5 == 1 || iVar5 + -1 < 0) {\n            (**(**ppiVar6 + 4))(ppiVar6);\n        }\n        *unaff_EBP = iVar4 + 0x10;\n        return;\n    }\n    iVar5 = *(iVar5 + -8);\n    if (param_2 <= iVar5) {\n        return;\n    }\n    if (iVar5 < 0x401) {\n        iVar5 = iVar5 * 2;\n    }\n    else {\n        iVar5 = iVar5 + 0x400;\n    }\n    if (iVar5 < param_2) {\n        iVar5 = param_2;\n    }\n    iVar2 = *param_1;\n    if ((*(iVar2 + -8) < iVar5) && (0 < iVar5)) {\n        iVar5 = (**(**(iVar2 + -0x10) + 8))(iVar2 + -0x10, iVar5, 1);\n        if (iVar5 != 0) goto code_r0x0040139e;\n    }\n    iVar5 = fcn.004012e0();\ncode_r0x0040139e:\n    *param_1 = iVar5 + 0x10;\n    return;\n}\n",
        "token_count": 599
    },
    "00401e40": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * fcn.00401e40(uint *param_1)\n\n{\n    int32_t iVar1;\n    uint uStack40;\n    uint *puStack36;\n    uint uStack32;\n    uchar *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar auStack16 [4];\n    uint uStack12;\n    uint *puStack8;\n    uint uStack4;\n    \n    uStack20 = 0;\n    uStack24 = 0;\n    if ((*0x44ddb0 != NULL) && (*0x44ddb4 != NULL)) {\n        puStack28 = auStack16;\n        puStack8 = param_1;\n        uStack32 = 3;\n        puStack36 = &uStack12;\n        uStack40 = 0x400000;\n        uStack12 = 10;\n        uStack4 = 0x409;\n        iVar1 = (**0x44ddb0)();\n        if (-1 < iVar1) {\n            iVar1 = (**0x44ddb4)(0x400000, uStack32, &puStack36, &uStack40);\n            if ((-1 < iVar1) && (puStack8 != NULL)) {\n                *puStack8 = uStack40;\n            }\n        }\n        return puStack36;\n    }\n    return NULL;\n}\n",
        "token_count": 288
    },
    "00401fe0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00401fe0(uint32_t param_1)\n\n{\n    code *pcVar1;\n    uint32_t arg_8h;\n    \n    if (param_1 == 0) {\n        arg_8h = 0;\n    }\n    else {\n        arg_8h = param_1;\n        if (0xffffffff / param_1 == 0) {\n            param_1 = 0;\n            fcn.004211d2(&param_1);\n            fcn.0042160f(&stack0xfffffff0, 0x445848);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.00403da8(arg_8h);\n    return;\n}\n",
        "token_count": 165
    },
    "004023a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t ** fcn.004023a0(int32_t **param_1)\n\n{\n    int32_t *piVar1;\n    int32_t **ppiVar2;\n    \n    piVar1 = (**(**param_1 + 0x10))();\n    if ((-1 < param_1[3]) && (piVar1 == *param_1)) {\n        LOCK();\n        param_1[3] = param_1[3] + 1;\n        return param_1;\n    }\n    ppiVar2 = (***piVar1)(param_1[1], 1);\n    if (ppiVar2 == NULL) {\n        fcn.004012e0();\n    }\n    ppiVar2[1] = param_1[1];\n    fcn.00420bc3(ppiVar2 + 4, param_1[1] + 1, param_1 + 4, param_1[1] + 1);\n    return ppiVar2;\n}\n",
        "token_count": 217
    },
    "00402410": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00402410(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.00420bc3(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.00403dd7(arg_10h);\n    }\n    *(param_1 + 0x14) = param_3;\n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 4 + param_3) = 0;\n    return;\n}\n",
        "token_count": 189
    },
    "004026b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __thiscall fcn.004026b0(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    uint arg_10h;\n    uint32_t arg_14h;\n    \n    if (param_2 == 0xffffffff) {\n        fcn.0043652e();\n    }\n    uVar1 = *(param_1 + 0x18);\n    if (uVar1 < param_2) {\n        fcn.004024f0(param_2, *(param_1 + 0x14));\n        return param_2 != 0;\n    }\n    if ((param_3 != '\\0') && (param_2 < 0x10)) {\n        arg_14h = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            arg_14h = param_2;\n        }\n        if (0xf < uVar1) {\n            arg_10h = *(param_1 + 4);\n            if (arg_14h != 0) {\n                fcn.00420bc3(param_1 + 4, 0x10, arg_10h, arg_14h);\n            }\n            fcn.00403dd7(arg_10h);\n        }\n        *(param_1 + 0x14) = arg_14h;\n        *(param_1 + 0x18) = 0xf;\n        *(param_1 + 4 + arg_14h) = 0;\n        return param_2 != 0;\n    }\n    if (param_2 == 0) {\n        *(param_1 + 0x14) = 0;\n        if (0xf < uVar1) {\n            **(param_1 + 4) = 0;\n            return false;\n        }\n        *(param_1 + 4) = 0;\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 436
    },
    "004029c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.004029c0(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t **ppiVar5;\n    \n    iVar3 = *param_2;\n    iVar4 = *param_1;\n    ppiVar1 = iVar3 + -0x10;\n    ppiVar5 = iVar4 + -0x10;\n    if (ppiVar1 == ppiVar5) {\n        return param_1;\n    }\n    piVar2 = iVar4 + -4;\n    if ((-1 < *(iVar4 + -4)) && (*ppiVar1 == *ppiVar5)) {\n        iVar4 = fcn.004023a0(ppiVar1);\n        LOCK();\n        iVar3 = *piVar2;\n        *piVar2 = *piVar2 + -1;\n        if (iVar3 == 1 || iVar3 + -1 < 0) {\n            (**(**ppiVar5 + 4))(ppiVar5);\n        }\n        *param_1 = iVar4 + 0x10;\n        return param_1;\n    }\n    fcn.00401700(iVar3, *(iVar3 + -0xc));\n    return param_1;\n}\n",
        "token_count": 301
    },
    "00421282": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00421282(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.00421c45(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "004031e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004031e0(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t *in_FS_OFFSET;\n    code *pcStack164;\n    uchar auStack120 [24];\n    code *pcStack96;\n    uchar auStack52 [16];\n    int32_t iStack36;\n    uint uStack16;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x4399a8;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    *(param_1 + 8) = param_2 & 0x17;\n    uVar1 = *(param_1 + 0xc) & param_2 & 0x17;\n    if (uVar1 != 0) {\n        if (param_3 != '\\0') {\n            pcStack164 = 0x403234;\n            fcn.0042160f(0, 0);\n            uVar1 = extraout_ECX;\n        }\n        if ((uVar1 & 4) != 0) {\n            pcStack164 = 0x43ce30;\n            fcn.00402fe0();\n            uStack16 = 0;\n            fcn.00402c00(&stack0xffffff88);\n            pcStack164 = vtable.std::ios_base::failure.0;\n            fcn.0042160f(&stack0xffffff5c, 0x445a64);\n            uVar1 = extraout_ECX_00;\n        }\n        if ((uVar1 & 2) != 0) {\n            pcStack164 = 0x43ce18;\n            fcn.00402fe0();\n            uStack16 = 1;\n            fcn.00402c00(&stack0xffffff88);\n            pcStack164 = vtable.std::ios_base::failure.0;\n            fcn.0042160f(&stack0xffffff5c, 0x445a64);\n        }\n        pcStack164 = 0x43ce00;\n        fcn.00402fe0();\n        uStack16 = 2;\n        fcn.00402c00(&stack0xffffffcc);\n        pcStack96 = vtable.std::ios_base::failure.0;\n        fcn.0042160f(&stack0xffffffa0, 0x445a64);\n    }\n    *in_FS_OFFSET = iStack36;\n    return;\n}\n",
        "token_count": 586
    },
    "004033b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004033b0(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    int32_t **in_FS_OFFSET;\n    code *pcStack164;\n    uchar auStack120 [24];\n    code *apcStack96 [11];\n    uchar auStack52 [16];\n    int32_t *piStack36;\n    uint uStack16;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    if (*(param_1 + 0x28) == 0) {\n        param_2 = param_2 | 4;\n    }\n    uStack4 = 0xffffffff;\n    uStack8 = 0x4399a8;\n    piStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &piStack12;\n    *(param_1 + 8) = param_2 & 0x17;\n    uVar1 = *(param_1 + 0xc) & param_2 & 0x17;\n    if (uVar1 != 0) {\n        if (param_3 != '\\0') {\n            pcStack164 = 0x403234;\n            fcn.0042160f(0, 0);\n            uVar1 = extraout_ECX;\n        }\n        if ((uVar1 & 4) != 0) {\n            pcStack164 = 0x43ce30;\n            fcn.00402fe0();\n            uStack16 = 0;\n            fcn.00402c00(auStack120);\n            pcStack164 = vtable.std::ios_base::failure.0;\n            fcn.0042160f(&pcStack164, 0x445a64);\n            uVar1 = extraout_ECX_00;\n        }\n        if ((uVar1 & 2) != 0) {\n            pcStack164 = 0x43ce18;\n            fcn.00402fe0();\n            uStack16 = 1;\n            fcn.00402c00(auStack120);\n            pcStack164 = vtable.std::ios_base::failure.0;\n            fcn.0042160f(&pcStack164, 0x445a64);\n        }\n        pcStack164 = 0x43ce00;\n        fcn.00402fe0();\n        uStack16 = 2;\n        fcn.00402c00(auStack52);\n        apcStack96[0] = vtable.std::ios_base::failure.0;\n        fcn.0042160f(apcStack96, 0x445a64);\n    }\n    *in_FS_OFFSET = piStack36;\n    return;\n}\n",
        "token_count": 615
    },
    "004033e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.004033e0(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    uVar2 = 0;\n    if ((*(param_1 + *(*param_1 + 4) + 8) & 6) == 0) {\n        iVar1 = (**(**(param_1 + *(*param_1 + 4) + 0x28) + 0x30))();\n        if (iVar1 == -1) {\n            uVar2 = 4;\n        }\n    }\n    if (uVar2 != 0) {\n        uVar2 = *(param_1 + *(*param_1 + 4) + 8) | uVar2;\n        if (*(param_1 + *(*param_1 + 4) + 0x28) == 0) {\n            uVar2 = uVar2 | 4;\n        }\n        fcn.004031e0(uVar2, 0);\n    }\n    return param_1;\n}\n",
        "token_count": 232
    },
    "00403430": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.00403430(int32_t **param_1, int32_t *param_2)\n\n{\n    uint32_t uVar1;\n    int32_t **in_FS_OFFSET;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x439a08;\n    piStack12 = *in_FS_OFFSET;\n    uVar1 = *0x44c69c ^ &stack0xffffffe8;\n    *in_FS_OFFSET = &piStack12;\n    *param_1 = param_2;\n    if (*(*(*param_2 + 4) + 0x28 + param_2) != 0) {\n        fcn.004363fb(uVar1);\n    }\n    uStack4 = 0;\n    if ((*(param_2 + *(*param_2 + 4) + 8) == 0) && (*(param_2 + *(*param_2 + 4) + 0x2c) != 0)) {\n        fcn.004033e0();\n    }\n    *(param_1 + 1) = *(*(*param_2 + 4) + 8 + param_2) == 0;\n    *in_FS_OFFSET = piStack12;\n    return param_1;\n}\n",
        "token_count": 299
    },
    "00403590": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * fcn.00403590(int32_t *param_1, char *param_2)\n\n{\n    char cVar1;\n    uint8_t uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    uint8_t *puVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t *in_FS_OFFSET;\n    int32_t *var_8h;\n    char *var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x439a88;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    var_14h = 0;\n    pcVar6 = var_ch_2;\n    do {\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + 1;\n    } while (cVar1 != '\\0');\n    iVar7 = pcVar6 - (var_ch_2 + 1);\n    var_18h = *(*(*var_8h + 4) + 0x18 + var_8h);\n    if ((var_18h < 1) || (var_18h <= iVar7)) {\n        var_18h = 0;\n    }\n    else {\n        var_18h = var_18h - iVar7;\n    }\n    fcn.00403430(var_8h);\n    if (var_1ch == '\\0') {\n        var_14h = 4;\n        goto code_r0x004036ac;\n    }\n    var_4h = 1;\n    if ((*(*(*var_8h + 4) + 0x10 + var_8h) & 0x1c0) == 0x40) {\ncode_r0x0040367b:\n        iVar9 = (**(**(*(*var_8h + 4) + 0x28 + var_8h) + 0x20))(var_ch_2, iVar7);\n        if (iVar9 == iVar7) {\n            for (; 0 < var_18h; var_18h = var_18h + -1) {\n                uVar2 = *(*(*var_8h + 4) + 0x30 + var_8h);\n                piVar3 = *(var_8h + *(*var_8h + 4) + 0x28);\n                if ((*piVar3[9] == 0) || (piVar4 = piVar3[0xd],  *piVar4 < 1)) {\n                    uVar8 = (**(*piVar3 + 4))(uVar2);\n                }\n                else {\n                    *piVar4 = *piVar4 + -1;\n                    puVar5 = *piVar3[9];\n                    *piVar3[9] = puVar5 + 1;\n                    *puVar5 = uVar2;\n                    uVar8 = uVar2;\n                }\n                if (uVar8 == 0xffffffff) {\n                    var_14h = 4;\n                    break;\n                }\n            }\n        }\n        else {\n            var_14h = 4;\n        }\n    }\n    else {\n        for (; 0 < var_18h; var_18h = var_18h + -1) {\n            uVar2 = *(*(*var_8h + 4) + 0x30 + var_8h);\n            piVar3 = *(var_8h + *(*var_8h + 4) + 0x28);\n            if ((*piVar3[9] == 0) || (piVar4 = piVar3[0xd],  *piVar4 < 1)) {\n                uVar8 = (**(*piVar3 + 4))(uVar2);\n            }\n            else {\n                *piVar4 = *piVar4 + -1;\n                puVar5 = *piVar3[9];\n                *piVar3[9] = puVar5 + 1;\n                *puVar5 = uVar2;\n                uVar8 = uVar2;\n            }\n            if (uVar8 == 0xffffffff) {\n                var_14h = 4;\n                break;\n            }\n        }\n        if (var_14h == 0) goto code_r0x0040367b;\n    }\n    *(var_8h + *(*var_8h + 4) + 0x18) = 0;\ncode_r0x004036ac:\n    var_4h = 0;\n    if (var_14h != 0) {\n        var_14h = *(var_8h + *(*var_8h + 4) + 8) | var_14h;\n        if (*(var_8h + *(*var_8h + 4) + 0x28) == 0) {\n            var_14h = var_14h | 4;\n        }\n        fcn.004031e0(var_14h, 0);\n    }\n    var_4h = 0xffffffff;\n    fcn.00403520();\n    *in_FS_OFFSET = var_ch_3;\n    return var_8h;\n}\n",
        "token_count": 1232
    },
    "004037a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __thiscall fcn.004037a0(int32_t *param_1, uint8_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint var_ch;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x439ab8;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    uVar5 = 0;\n    fcn.00403430(param_1);\n    if (var_1ch == '\\0') {\n        uVar5 = 4;\n    }\n    else {\n        piVar1 = *(*(*param_1 + 4) + 0x28 + param_1);\n        var_4h = 1;\n        if ((*piVar1[9] == 0) || (piVar2 = piVar1[0xd],  *piVar2 < 1)) {\n            uVar4 = (**(*piVar1 + 4))(var_8h);\n        }\n        else {\n            *piVar2 = *piVar2 + -1;\n            puVar3 = *piVar1[9];\n            *piVar1[9] = puVar3 + 1;\n            *puVar3 = var_8h;\n            uVar4 = var_8h;\n        }\n        if (uVar4 == 0xffffffff) {\n            uVar5 = 4;\n        }\n    }\n    var_4h = 0;\n    if (uVar5 != 0) {\n        uVar5 = *(param_1 + *(*param_1 + 4) + 8) | uVar5;\n        if (*(param_1 + *(*param_1 + 4) + 0x28) == 0) {\n            uVar5 = uVar5 | 4;\n        }\n        fcn.004031e0(uVar5, 0);\n    }\n    var_4h = 0xffffffff;\n    fcn.00403520();\n    *in_FS_OFFSET = var_ch_2;\n    return param_1;\n}\n",
        "token_count": 574
    },
    "004038d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004038d0(void)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    bool bVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *unaff_retaddr;\n    uint8_t *puVar9;\n    int32_t iStack00000004;\n    int32_t in_stack_00002c58;\n    int32_t in_stack_00002c5c;\n    int32_t in_stack_00002c60;\n    int32_t in_stack_00002c64;\n    uint8_t *in_stack_00002c68;\n    \n    iStack00000004 = in_stack_00002c5c;\n    fcn.00421950();\n    iVar8 = 0;\n    iVar7 = 0;\n    do {\n        (&stack0x00000010)[iVar7] = iVar7;\n        iVar6 = iVar7 + 1;\n        (&stack0x00001630)[iVar7] = *(iVar7 % in_stack_00002c64 + in_stack_00002c60);\n        iVar7 = iVar6;\n    } while (iVar6 < 0x161f);\n    iVar7 = 0;\n    do {\n        iVar8 = ((&stack0x00000010)[iVar7] + (&stack0x00001630)[iVar7] + iVar8) % 0x161f;\n        iVar6 = iVar7 + 1;\n        uVar1 = (&stack0x00000010)[iVar8];\n        (&stack0x00000010)[iVar8] = (&stack0x00000010)[iVar7];\n        (&stack0x00000010)[iVar7] = uVar1;\n        iVar7 = iVar6;\n    } while (iVar6 < 0x161f);\n    iVar7 = 0;\n    if (0 < iStack00000004) {\n        unaff_retaddr = in_stack_00002c68;\n        do {\n            iVar6 = (iVar6 + 1) % 0x161f;\n            iVar7 = ((&stack0x00000010)[iVar6] + iVar7) % 0x161f;\n            uVar2 = (&stack0x00000010)[iVar7];\n            (&stack0x00000010)[iVar7] = (&stack0x00000010)[iVar6];\n            (&stack0x00000010)[iVar6] = uVar2;\n            uVar3 = (&stack0x00000010)[iVar7];\n            piVar5 = fcn.00403590();\n            fcn.004037a0();\n            bVar4 = false;\n            puVar9 = unaff_retaddr;\n            if (((*(piVar5 + *(*piVar5 + 4) + 8) & 6) == 0) &&\n               (iVar8 = (**(**(piVar5 + *(*piVar5 + 4) + 0x28) + 0x30))(),  puVar9 = unaff_retaddr,  iVar8 == -1)) {\n                bVar4 = true;\n            }\n            if (bVar4) {\n                fcn.004031e0();\n            }\n            unaff_retaddr = puVar9 + 1;\n            iStack00000004 = iStack00000004 + -1;\n            *puVar9 = puVar9[in_stack_00002c58 - in_stack_00002c68] ^ (&stack0x00000010)[(uVar2 + uVar3) % 0x161f];\n        } while (iStack00000004 != 0);\n    }\n    fcn.00420bb4(unaff_retaddr);\n    return;\n}\n",
        "token_count": 829
    },
    "0040425d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040425d(int32_t arg_8h)\n\n{\n    int32_t *in_ECX;\n    int32_t iVar1;\n    \n    iVar1 = *in_ECX;\n    if (arg_8h < *(iVar1 + -0xc)) {\n        arg_8h = *(iVar1 + -0xc);\n    }\n    if (*(iVar1 + -4) < 2) {\n        iVar1 = *(iVar1 + -8);\n        if (iVar1 < arg_8h) {\n            if (iVar1 < 0x401) {\n                iVar1 = iVar1 * 2;\n            }\n            else {\n                iVar1 = iVar1 + 0x400;\n            }\n            if (iVar1 < arg_8h) {\n                iVar1 = arg_8h;\n            }\n            fcn.00404224(iVar1);\n        }\n    }\n    else {\n        fcn.004041ba(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 216
    },
    "00404306": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404306(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.00403f65(arg_8h);\n    }\n    if (iVar1 < 1) {\n        fcn.00401400();\n    }\n    else {\n        uVar2 = fcn.004014d0(iVar1);\n        fcn.00401290(uVar2, iVar1, arg_8h, 0xffffffff);\n        fcn.00401260(iVar1);\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "0040444d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040444d(int32_t arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint arg_8h_01;\n    \n    if (arg_8h == 0) {\n        arg_8h_00 = 0;\n    }\n    else {\n        arg_8h_00 = fcn.00403eeb(arg_8h);\n    }\n    if (arg_8h_00 < 1) {\n        fcn.00404183();\n    }\n    else {\n        arg_8h_01 = fcn.004042d8(arg_8h_00);\n        fcn.00403f05(arg_8h_01, arg_8h_00, arg_8h, 0xffffffff);\n        fcn.0040414b(arg_8h_00);\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "0040458d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040458d(int32_t *param_1)\n\n{\n    if (0 < param_1[1]) {\n        (**(*param_1 + 4))(1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl method.COleException.virtual_20(uint arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    uint var_208h;\n    uint var_204h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    iVar1 = (**(*in_ECX + 0xc))(&var_204h, 0x200, &var_208h);\n    if (iVar1 == 0) {\n        if (arg_ch == NULL) {\n            arg_ch = 0xf020;\n        }\n        fcn.00406dfa(arg_ch, arg_8h, var_208h);\n    }\n    else {\n        arg_ch = &var_204h;\n        fcn.00406dac(arg_ch, arg_8h, var_208h);\n    }\n    fcn.00420bb4(arg_ch);\n    return;\n}\n",
        "token_count": 216
    },
    "0040490c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040490c(int32_t arg_8h, int32_t arg_ch, uint *arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    uint *extraout_ECX;\n    uint uVar2;\n    \n    if (arg_10h != NULL) goto code_r0x00404926;\n    uVar2 = 0x80004005;\n    while( true ) {\n        fcn.00401170(uVar2);\n        arg_10h = extraout_ECX;\ncode_r0x00404926:\n        if ((arg_8h != 0) || (arg_ch == 0)) break;\n        uVar2 = 0x80070057;\n    }\n    iVar1 = (***arg_10h)(arg_ch, 1);\n    if (iVar1 == 0) {\n        iVar1 = fcn.004012e0();\n    }\n    *in_ECX = iVar1 + 0x10;\n    fcn.00401260(arg_ch);\n    fcn.00420bc3(*in_ECX, arg_ch, arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 259
    },
    "00404a3f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00404a3f(int32_t arg_8h)\n\n{\n    unkuint3 Var2;\n    uint32_t uVar1;\n    uint32_t *in_ECX;\n    \n    Var2 = *0x44ddec >> 8;\n    if (*0x44ddec == NULL) {\n        uVar1 = CONCAT31(Var2, 1);\n    }\n    else if ((arg_8h == 0) || (*in_ECX != 0xffffffff)) {\n        uVar1 = Var2 << 8;\n    }\n    else {\n        uVar1 = (**0x44ddec)(arg_8h);\n        *in_ECX = uVar1;\n        uVar1 = uVar1 & 0xffffff00 | uVar1 != 0xffffffff;\n    }\n    return uVar1;\n}\n",
        "token_count": 187
    },
    "00404a79": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00404a79(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    if (*0x44ddf4 == NULL) {\n        return true;\n    }\n    if ((*param_1 != -1) && (param_1[1] == 0)) {\n        iVar1 = (**0x44ddf4)(*param_1, param_1 + 1);\n        return iVar1 == 1;\n    }\n    return false;\n}\n",
        "token_count": 106
    },
    "00404bd1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404bd1(int32_t param_1)\n\n{\n    if (*(param_1 + 0x88) != NULL) {\n        (**(**(param_1 + 0x88) + 0x14))();\n    }\n    if (*(param_1 + 0x94) != 0) {\n        fcn.0041230c(\"Settings\", \"PreviewPages\", *(param_1 + 0x94));\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "00404d76": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404d76(uint lpString2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalLock;\n    if (*(in_ECX + 0x74) != 0) {\n        var_4h = in_ECX;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*(in_ECX + 0x74));\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*(iVar2 + 2) + iVar2, lpString2);\n        if ((iVar2 == 0) && (iVar2 = sub.WINSPOOL.DRV_OpenPrinterA(lpString2, &var_4h, 0),  iVar2 != 0)) {\n            if (*(in_ECX + 0x70) != 0) {\n                fcn.00412454(*(in_ECX + 0x70));\n            }\n            uVar3 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, var_4h, lpString2, 0, 0, 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x42, uVar3);\n            *(in_ECX + 0x70) = uVar3;\n            uVar3 = (*pcVar1)(uVar3);\n            iVar2 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, var_4h, lpString2, uVar3, 0, 2);\n            if (iVar2 != 1) {\n                fcn.00412454(*(in_ECX + 0x70));\n                *(in_ECX + 0x70) = 0;\n            }\n            sub.WINSPOOL.DRV_ClosePrinter(var_4h);\n        }\n    }\n    return;\n}\n",
        "token_count": 425
    },
    "00404eb3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_11ch\n\nvoid __cdecl fcn.00404eb3(int32_t Locale)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    uint in_ECX;\n    uint in_EDX;\n    uint var_11ch;\n    uint lpLibFileName;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    if (Locale == 0x800) {\n        uVar1 = fcn.00422914(&var_11ch, 4, 0x43d2d8);\n        fcn.00403de8(uVar1);\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 3, &var_11ch, 4);\n        if (iVar2 == 0) goto code_r0x00404f77;\n    }\n    puVar3 = fcn.0042225e();\n    uVar1 = *puVar3;\n    puVar3 = fcn.0042225e();\n    *puVar3 = 0;\n    uVar4 = fcn.0042299a(&lpLibFileName, 0x112, 0x111, in_ECX, in_EDX);\n    piVar5 = fcn.0042225e();\n    if (*piVar5 == 0) {\n        puVar3 = fcn.0042225e();\n        *puVar3 = uVar1;\n    }\n    else {\n        puVar3 = fcn.0042225e();\n        fcn.004040c5(*puVar3);\n    }\n    if ((uVar4 != 0xffffffff) && (uVar4 < 0x112)) {\n        (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&lpLibFileName);\n    }\ncode_r0x00404f77:\n    fcn.00420bb4(var_11ch);\n    return;\n}\n",
        "token_count": 463
    },
    "00404f85": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404f85(int32_t *param_1)\n\n{\n    if ((*0x44ddf0 != NULL) && (*param_1 != -1)) {\n        fcn.00404aa6();\n        (**0x44ddf0)(*param_1);\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "0040582f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040582f(int32_t arg_8h, uint32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    code **ppcVar5;\n    int32_t *in_ECX;\n    int32_t *piVar6;\n    uint32_t arg_ch_00;\n    \n    if (arg_ch == 0xfffffffe) {\n        iVar1 = fcn.0040f83a();\n        if (*(iVar1 + 0x3c) != 0) goto code_r0x0040584f;\n    }\n    else {\n        if (arg_ch != 0xfffffffd) {\n            if (arg_ch != 0xffffffff) {\n                uVar4 = arg_ch & 0xffff;\n                arg_ch_00 = arg_ch >> 0x10;\n                arg_ch = uVar4;\n                if (arg_ch_00 != 0) goto code_r0x00405907;\n            }\n            arg_ch_00 = 0x111;\ncode_r0x00405907:\n            ppcVar5 = (**(*in_ECX + 0x28))();\n            while( true ) {\n                if (*ppcVar5 == NULL) {\n                    return 0;\n                }\n                iVar1 = fcn.00409989(ppcVar5[1], arg_ch_00, arg_ch, arg_8h);\n                if (iVar1 != 0) break;\n                ppcVar5 = (**ppcVar5)();\n            }\n            iVar1 = fcn.004056f7(in_ECX, arg_8h, arg_ch, *(iVar1 + 0x14), arg_10h, *(iVar1 + 0x10), arg_14h);\n            return iVar1;\n        }\n        arg_ch = 0;\n        if (arg_10h != 0) {\n            iVar1 = *(arg_10h + 0x30);\n            puVar2 = (**(*in_ECX + 0x2c))();\n            do {\n                if (puVar2 == NULL) {\n                    return arg_ch;\n                }\n                if (arg_ch != 0) {\n                    return arg_ch;\n                }\n                piVar6 = puVar2[1];\n                while (((piVar6[1] != 0 && (piVar6[2] != 0)) && (arg_ch == 0))) {\n                    if (arg_8h == piVar6[1]) {\n                        if (iVar1 == 0) {\n                            if (*piVar6 == 0) {\ncode_r0x004058cc:\n                                *(arg_10h + 4) = piVar6[2];\n                                arg_ch = 1;\n                            }\n                        }\n                        else if ((*piVar6 != 0) && (iVar3 = fcn.004056db(iVar1, *piVar6),  iVar3 != 0))\n                        goto code_r0x004058cc;\n                    }\n                    piVar6 = piVar6 + 3;\n                }\n                puVar2 = *puVar2;\n            } while( true );\n        }\n    }\n    fcn.00404695();\ncode_r0x0040584f:\n    iVar1 = fcn.0040f83a();\n    iVar1 = (**(**(iVar1 + 0x3c) + 4))();\n    return iVar1;\n}\n",
        "token_count": 762
    },
    "00405f94": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405f94(uint noname_0, uint *arg_ch)\n\n{\n    uint uVar1;\n    \n    if (arg_ch[1] == 1) {\n        uVar1 = 0xffffffff;\n    }\n    else {\n        if (arg_ch[1] == 0xf) {\n            (*_sym.imp.USER32.dll_ValidateRect)(*arg_ch, 0);\n        }\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 108
    },
    "00405fe4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405fe4(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    \n    iVar1 = fcn.0040f86d();\n    if (((*(iVar1 + 4) == 0) || (*arg_8h != 0)) || (iVar1 = fcn.00405f16(arg_8h),  iVar1 == 0)) {\n        piVar3 = fcn.00404e7a();\n        piVar4 = piVar3;\n        if (piVar3 != NULL) {\n            piVar4 = piVar3[8];\n        }\n        iVar1 = fcn.0040b928(piVar4, arg_8h);\n        if (iVar1 == 0) {\n            if (piVar3 != NULL) {\n                fcn.0040b5a9(*arg_8h);\n                piVar4 = fcn.0040c91e();\n                if (piVar4 != piVar3) {\n                    uVar2 = (**(*piVar3 + 0x108))(arg_8h);\n                    return uVar2;\n                }\n            }\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 1;\n        }\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 319
    },
    "004061fc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004061fc(int32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f83a();\n    if ((*(iVar1 + 0x14) == '\\0') && ((-1 < arg_8h || (arg_8h == 0x8001)))) {\n        iVar1 = fcn.0040f86d();\n        if (*(iVar1 + 4) != NULL) {\n            (**(**(iVar1 + 4) + 0x70))(arg_8h, arg_10h);\n            return;\n        }\n    }\n    iVar1 = fcn.0041127b(0x4046b1);\n    if (iVar1 == 0) {\n        iVar1 = fcn.00404695();\n    }\n    (*_sym.imp.USER32.dll_CallNextHookEx)(*(iVar1 + 0x2c), arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 230
    },
    "00406394": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00406394(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.0040f83a();\n    if (*(iVar1 + 0x14) == '\\0') {\n        iVar1 = fcn.0040f282();\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        uVar2 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(0xffffffff, fcn.004061fc, 0, uVar2);\n        *(iVar1 + 0x2c) = uVar2;\n    }\n    return;\n}\n",
        "token_count": 140
    },
    "004063c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004063c2(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    \n    if (arg_8h < 1) {\n        iVar3 = *(in_ECX + 0x20);\n        if (((iVar3 != 0) && (*(iVar3 + 0x20) != 0)) &&\n           (iVar1 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar3 + 0x20)),  iVar1 != 0)) {\n            fcn.0040bc48(iVar3, *(iVar3 + 0x20), 0x363, 1, 0);\n            fcn.0040bf33(*(iVar3 + 0x20), 0x363, 1, 0, 1, 1);\n        }\n        fcn.0040f83a();\n        iVar1 = fcn.004050ca();\n        for (iVar1 = *(iVar1 + 8); iVar1 != 0; iVar1 = *(iVar1 + 0x6c)) {\n            if ((*(iVar1 + 0x20) != 0) && (iVar1 != iVar3)) {\n                if (*(iVar1 + 0xa0) == 0) {\n                    fcn.0040e51b(0);\n                }\n                iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar1 + 0x20));\n                if ((iVar2 != 0) || (-1 < *(iVar1 + 0xa0))) {\n                    fcn.0040bc48(iVar1, *(iVar1 + 0x20), 0x363, 1, 0);\n                    fcn.0040bf33(*(iVar1 + 0x20), 0x363, 1, 0, 1, 1);\n                }\n                if (0 < *(iVar1 + 0xa0)) {\n                    fcn.0040e51b(*(iVar1 + 0xa0));\n                }\n                *(iVar1 + 0xa0) = 0xffffffff;\n            }\n        }\n    }\n    else {\n        fcn.0040f83a();\n        iVar3 = fcn.004050ca();\n        if (*(iVar3 + 0x10) == 0) {\n            fcn.0041281d();\n            fcn.00412a35(1);\n        }\n    }\n    return arg_8h < 1;\n}\n",
        "token_count": 556
    },
    "004064d5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004064d5(int32_t param_1)\n\n{\n    int32_t extraout_ECX;\n    \n    if (*(param_1 + 0x58) == 0) {\n        fcn.00404695();\n        param_1 = extraout_ECX;\n    }\n    // WARNING: Could not recover jumptable at 0x004064eb. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x58) + 0x14))();\n    return;\n}\n",
        "token_count": 123
    },
    "0040661b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040661b(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint hKey;\n    uint phkResult;\n    uint lpSubKey;\n    uint var_120h;\n    uint lpName;\n    uint var_4h;\n    \n    fcn.00421eaa(0x124);\n    iVar1 = *(unaff_EBP + 8);\n    *(unaff_EBP + -300) = iVar1;\n    fcn.00402660(*(unaff_EBP + 0xc));\n    *(unaff_EBP + -4) = 0;\n    if (iVar1 == -0x80000000) {\n        iVar1 = fcn.0040f114();\n        if (iVar1 == 1) {\n            uVar2 = fcn.004065c6(unaff_EBP + -0x120, \"Software\\\\Classes\\\\\", unaff_EBP + -0x124);\n            *(unaff_EBP + -4) = 1;\n            fcn.004029c0(uVar2);\n            *(unaff_EBP + -4) = 0;\n            fcn.00401240();\n            *(unaff_EBP + -300) = 0x80000001;\n        }\n    }\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(*(unaff_EBP + -300), *(unaff_EBP + -0x124), unaff_EBP + -0x128);\n    if (iVar1 == 0) {\n        while( true ) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(*(unaff_EBP + -0x128), 0, unaff_EBP + -0x11c, 0x104);\n            if (iVar1 != 0) break;\n            *(unaff_EBP + -4) = 2;\n            fcn.00401880(unaff_EBP + -0x11c);\n            *(unaff_EBP + -4) = 3;\n            iVar1 = fcn.0040661b(*(unaff_EBP + -0x128), unaff_EBP + -0x120);\n            *(unaff_EBP + -4) = 2;\n            fcn.00401240();\n            if (iVar1 != 0) break;\n            *(unaff_EBP + -4) = 0;\n        }\n        if ((iVar1 == 0x103) || (iVar1 == 0x3f2)) {\n            (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(*(unaff_EBP + -300), *(unaff_EBP + -0x124));\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(*(unaff_EBP + -0x128));\n    }\n    fcn.00401240();\n    fcn.00421f06();\n    return;\n}\n",
        "token_count": 671
    },
    "004069df": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004069df(uint *arg_8h)\n\n{\n    int32_t in_ECX;\n    uint *extraout_ECX;\n    \n    if (arg_8h == NULL) {\n        in_ECX = fcn.00404695();\n        arg_8h = extraout_ECX;\n    }\n    if (*(in_ECX + 0x88) == NULL) {\n        (***arg_8h)(0);\n    }\n    else {\n        (**(**(in_ECX + 0x88) + 0xc))(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 131
    },
    "00406b2b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00406b2b(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        uVar1 = *(unaff_EBP + -0x1c) == unaff_EBX;\n        if (uVar1 == unaff_EBX) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97();\n        if (uVar1 != unaff_EBX) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "00406b60": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406b60(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.00404e7a();\n    if (piVar1 != NULL) {\n        iVar2 = (**(*piVar1 + 0x128))();\n        if ((iVar2 != 0) && (piVar1[0x20] != NULL)) {\n            (**(*piVar1[0x20] + 100))(arg_8h);\n        }\n    }\n    return;\n}\n",
        "token_count": 126
    },
    "00406b99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00406b99(int32_t arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    \n    pcVar2 = _sym.imp.USER32.dll_GetParent;\n    iVar3 = arg_8h;\n    if (arg_8h != 0) goto code_r0x00406bc9;\n    iVar3 = fcn.00406abd();\n    if ((iVar3 == 0) && (iVar3 = fcn.00404e7a(),  iVar3 == 0)) {\n        iVar3 = 0;\n        iVar5 = iVar3;\n        iVar6 = iVar3;\n    }\n    else {\n        for (iVar3 = *(iVar3 + 0x20); iVar5 = iVar3,  iVar6 = iVar3,  iVar3 != 0; iVar3 = (*pcVar2)(iVar3)) {\ncode_r0x00406bc9:\n            uVar4 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar3, 0xfffffff0);\n            iVar5 = iVar3;\n            iVar6 = iVar3;\n            if ((uVar4 & 0x40000000) == 0) break;\n        }\n    }\n    while (iVar1 = iVar5,  iVar1 != 0) {\n        iVar5 = (*pcVar2)(iVar1);\n        iVar3 = iVar1;\n    }\n    if ((arg_8h == 0) && (iVar6 != 0)) {\n        iVar6 = (*_sym.imp.USER32.dll_GetLastActivePopup)(iVar6);\n    }\n    if (arg_ch != NULL) {\n        if (((iVar3 == 0) || (iVar5 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar3),  iVar5 == 0)) || (iVar3 == iVar6))\n        {\n            *arg_ch = 0;\n        }\n        else {\n            *arg_ch = iVar3;\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar3, 0);\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 486
    },
    "00406c4b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00406c4b(int32_t arg_8h, uint arg_ch, uint32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t hWnd_00;\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint *lpCaption;\n    uint *arg_ch_00;\n    uint var_11ch;\n    uint var_118h;\n    int32_t lpdwProcessId;\n    int32_t var_110h;\n    int32_t hWnd;\n    uint var_108h;\n    uchar var_5h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    fcn.00406b60(0);\n    arg_ch_00 = &hWnd;\n    hWnd_00 = fcn.00406b99(0, arg_ch_00);\n    if (hWnd_00 != hWnd) {\n        (*_sym.imp.USER32.dll_EnableWindow)(hWnd_00, 1);\n    }\n    lpdwProcessId = 0;\n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(hWnd_00, &lpdwProcessId);\n    if ((((hWnd_00 == 0) || (iVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)(),  lpdwProcessId != iVar1)) ||\n        (piVar2 = (*_sym.imp.USER32.dll_SendMessageA)(hWnd_00, 0x376, 0, 0),  piVar2 == NULL)) &&\n       (piVar2 = NULL,  arg_8h != 0)) {\n        piVar2 = arg_8h + 0x78;\n    }\n    var_110h = 0;\n    if ((piVar2 != NULL) && (var_110h = *piVar2,  arg_14h != 0)) {\n        *piVar2 = arg_14h + 0x30000;\n    }\n    if ((arg_10h & 0xf0) == 0) {\n        if ((arg_10h & 0xf) < 2) {\n            arg_10h = arg_10h | 0x30;\n        }\n        else if ((arg_10h & 0xf) - 3 < 2) {\n            arg_10h = arg_10h | 0x20;\n        }\n    }\n    var_108h._0_1_ = 0;\n    if (arg_8h == 0) {\n        lpCaption = &var_108h;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, lpCaption, 0x104);\n        if (iVar1 == 0x104) {\n            var_5h = 0;\n        }\n    }\n    else {\n        lpCaption = *(arg_8h + 0x50);\n    }\n    fcn.00406ac9(hWnd_00, arg_ch, lpCaption, arg_10h);\n    if (piVar2 != NULL) {\n        *piVar2 = var_110h;\n    }\n    if (hWnd != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(hWnd, 1);\n    }\n    fcn.00406b60(1);\n    fcn.00420bb4(arg_ch_00);\n    return;\n}\n",
        "token_count": 761
    },
    "00406e87": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00406e87(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CDialog.0;\n    *(unaff_EBP + -4) = 0;\n    if (extraout_ECX[8] != NULL) {\n        fcn.0040b7ff();\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0040bd88();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 165
    },
    "00407ae3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00407ae3(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(param_1 + 0xc));\n        *(param_1 + 4) = iVar1;\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(param_1 + 0xc));\n            *(param_1 + 4) = iVar1;\n            *(param_1 + 8) = iVar1 != 0;\n        }\n    }\n    return *(param_1 + 4);\n}\n",
        "token_count": 160
    },
    "00407b17": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407b17(uint *arg_8h)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x1c) == 0) {\n        uVar1 = fcn.00407ae3(\"ImageList_Destroy\");\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        *(in_ECX + 0x1c) = uVar1;\n    }\n    *arg_8h = *(in_ECX + 0x1c);\n    return;\n}\n",
        "token_count": 130
    },
    "00407bbb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00407bbb(void)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    bool bVar2;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        bVar2 = *(unaff_EBP + -0x1c) != 0;\n        if (bVar2) {\n            uVar1 = 0;\n        }\n        else {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97(0, *(unaff_EBP + -0x20));\n        if (!bVar2) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 186
    },
    "00407c0c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00407c0c(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e0b(0);\n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x24) == 0) && (*(unaff_EBP + 8) != 0)) {\n        arg_8h_00 = fcn.00403d91(fcn.0041248c);\n        iVar2 = fcn.00403da8(0x60);\n        *(unaff_EBP + 8) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00412826(0x43d904, fcn.00407ac9, fcn.0040fd33, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x24) = uVar3;\n        fcn.00403d91(arg_8h_00);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 329
    },
    "00407cac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00407cac(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        return 0;\n    }\n    uVar1 = fcn.00407c80();\n    uVar1 = fcn.00407bf1(uVar1);\n    return uVar1;\n}\n",
        "token_count": 83
    },
    "004128af": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004128af(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t extraout_ECX;\n    int32_t *piVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e3e(8);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if ((arg_8h_00 != 0) && (iVar1 = fcn.00413c77(arg_8h_00),  iVar1 == 0)) {\n        iVar1 = fcn.00413c77(arg_8h_00);\n        if (iVar1 == 0) {\n            uVar2 = fcn.00403d91(fcn.0041248c);\n            *(unaff_EBP + -4) = 0;\n            *(unaff_EBP + 8) = uVar2;\n            iVar1 = fcn.0041d914();\n            if (iVar1 == 0) {\n                fcn.0040465d();\n            }\n            (**(extraout_ECX + 0x14))(iVar1);\n            piVar3 = fcn.00413e3e(arg_8h_00);\n            uVar2 = *(unaff_EBP + 8);\n            *(unaff_EBP + -4) = 0xffffffff;\n            *piVar3 = iVar1;\n            fcn.00403d91(uVar2);\n            piVar3 = *(extraout_ECX + 0x58) + iVar1;\n            *piVar3 = arg_8h_00;\n            if (*(extraout_ECX + 0x5c) == 2) {\n                piVar3[1] = arg_8h_00;\n            }\n        }\n        else {\n            piVar3 = *(extraout_ECX + 0x58) + iVar1;\n            *piVar3 = arg_8h_00;\n            if (*(extraout_ECX + 0x5c) == 2) {\n                piVar3[1] = arg_8h_00;\n            }\n        }\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 517
    },
    "0040802b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040802b(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint16_t *puVar1;\n    uint16_t uVar2;\n    \n    if (arg_ch == 0) {\n        puVar1 = arg_8h + 0x12;\n    }\n    else {\n        puVar1 = arg_8h + 0x18;\n    }\n    if (*puVar1 == 0xffff) {\n        puVar1 = puVar1 + 2;\n    }\n    else {\n        do {\n            uVar2 = *puVar1;\n            puVar1 = puVar1 + 1;\n        } while (uVar2 != 0);\n    }\n    if (*puVar1 == 0xffff) {\n        puVar1 = puVar1 + 2;\n    }\n    else {\n        do {\n            uVar2 = *puVar1;\n            puVar1 = puVar1 + 1;\n        } while (uVar2 != 0);\n    }\n    uVar2 = *puVar1;\n    if ((uVar2 != 0) && (arg_ch == 0)) {\n        uVar2 = uVar2 - 2;\n    }\n    return puVar1 + uVar2 + 5 & 0xfffffffc;\n}\n",
        "token_count": 289
    },
    "004083cf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004083cf(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x10) == 0) {\n        iVar2 = fcn.004143d6(in_ECX + 0x14, *(in_ECX + 0x18), 0xc);\n        iVar1 = *(in_ECX + 0x18);\n        puVar3 = iVar2 + -8 + iVar1 * 0xc;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar3 = *(in_ECX + 0x10);\n            *(in_ECX + 0x10) = puVar3;\n            puVar3 = puVar3 + -3;\n        }\n    }\n    puVar3 = *(in_ECX + 0x10);\n    if (puVar3 == NULL) {\n        puVar3 = fcn.00404695();\n    }\n    *(in_ECX + 0x10) = *puVar3;\n    puVar3[1] = arg_8h;\n    *puVar3 = arg_ch;\n    *(in_ECX + 0xc) = *(in_ECX + 0xc) + 1;\n    return;\n}\n",
        "token_count": 308
    },
    "00408701": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408701(int32_t arg_8h)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    \n    iVar3 = arg_8h;\n    if (*(arg_8h + 0x4c) != 0) {\n        arg_8h = *(*(arg_8h + 0x4c) + 0x44);\n        while (arg_8h != 0) {\n            piVar4 = fcn.0040835f(&arg_8h);\n            iVar2 = *piVar4;\n            if (*(iVar2 + 4) != 0) {\n                iVar5 = *(*(iVar2 + 4) + 0x94);\n                while (iVar5 != 0) {\n                    fcn.00416b45(*(iVar2 + 4));\n                    if (*(iVar5 + 4) != 0) {\n                        iVar5 = fcn.0040e3bb(*(iVar5 + 4));\n                        fcn.00418d48(*(iVar5 + 0x50));\n                    }\n                    iVar5 = fcn.00416b53();\n                }\n                uVar1 = *(*(iVar2 + 4) + 0x98);\n                if (uVar1 != 0) {\n                    iVar5 = fcn.0040e3bb(uVar1);\n                    (**(**(iVar5 + 0x50) + 0xb4))();\n                    *(*(iVar2 + 4) + 0x98) = *(iVar5 + 0x50);\n                    (**(**(*(iVar5 + 0x50) + 0x90) + 8))(*(iVar2 + 4), 1);\n                }\n            }\n        }\n        arg_8h = *(*(iVar3 + 0x4c) + 0x44);\n        while (arg_8h != 0) {\n            piVar4 = fcn.0040835f(&arg_8h);\n            iVar3 = *(*piVar4 + 4);\n            if ((iVar3 != 0) && (*(iVar3 + 0x90) != 0)) {\n                (**(**(iVar3 + 0x90) + 0xc))();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 518
    },
    "00408881": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00408881(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    if (arg_8h == 0) {\n        fcn.00404695();\n    }\n    iVar1 = fcn.00408669(arg_8h, 0);\n    if (iVar1 == 0) {\n        fcn.0040863a(arg_8h);\n    }\n    return 0;\n}\n",
        "token_count": 98
    },
    "00408a8f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_68h\n// WARNING: Variable defined which should be unmapped: var_64h\n// WARNING: Variable defined which should be unmapped: var_5eh\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Variable defined which should be unmapped: var_54h\n// WARNING: Variable defined which should be unmapped: hWndInsertAfter\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Variable defined which should be unmapped: var_4ch\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_44h\n// WARNING: Variable defined which should be unmapped: var_40h\n// WARNING: Variable defined which should be unmapped: var_3ch\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: pbstr\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_24h\n\nvoid __cdecl\nfcn.00408a8f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h)\n\n{\n    ushort uVar1;\n    ushort uVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    int16_t iVar5;\n    uint16_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    int32_t unaff_EBP;\n    int32_t *arg_8h_00;\n    int32_t *piVar10;\n    int32_t iVar11;\n    uint *puVar12;\n    uint var_a8h;\n    uint var_80h;\n    uint lpRect;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_5eh;\n    uint var_58h;\n    uint var_54h;\n    uint hWndInsertAfter;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint pbstr;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_4h;\n    \n    fcn.00421e74(0x9c);\n    puVar12 = *(unaff_EBP + 0x14);\n    arg_8h_00 = *(unaff_EBP + 0x1c);\n    *(unaff_EBP + -0x3c) = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x50) = *(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x44) = *(unaff_EBP + 0x24);\n    *(unaff_EBP + -0x2c) = puVar12 + 0x12;\n    if (*(unaff_EBP + 0x10) != 0) {\n        uVar1 = *(puVar12 + 0x12);\n        *(unaff_EBP + -0x6c) = puVar12[2];\n        *(unaff_EBP + -0x68) = puVar12[1];\n        *(unaff_EBP + -100) = *(puVar12 + 3);\n        *(unaff_EBP + -0x62) = *(puVar12 + 0xe);\n        uVar2 = *(puVar12 + 4);\n        *(unaff_EBP + -0x5e) = uVar1;\n        uVar1 = *(puVar12 + 5);\n        puVar9 = puVar12 + 6;\n        *(unaff_EBP + -0x60) = uVar2;\n        *(unaff_EBP + -0x5c) = uVar1;\n        puVar12 = unaff_EBP + -0x6c;\n        *(unaff_EBP + -0x2c) = puVar9;\n    }\n    iVar3 = *(puVar12 + 10);\n    iVar4 = *(puVar12 + 2);\n    iVar5 = *(puVar12 + 3);\n    *(unaff_EBP + -0x70) = *(puVar12 + 0xe) + iVar3;\n    iVar11 = *(*(unaff_EBP + -0x3c) + 0x20);\n    *(unaff_EBP + -0x7c) = iVar4;\n    *(unaff_EBP + -0x78) = iVar3;\n    *(unaff_EBP + -0x74) = iVar5 + iVar4;\n    (*_sym.imp.USER32.dll_MapDialogRect)(iVar11, unaff_EBP + -0x7c);\n    *(unaff_EBP + -0x34) = 0;\n    if (3 < *(unaff_EBP + 0x20)) {\n        iVar8 = *arg_8h_00;\n        *(unaff_EBP + 0x20) = *(unaff_EBP + 0x20) + -4;\n        arg_8h_00 = arg_8h_00 + 1;\n        if (iVar8 != 0) {\n            uVar7 = (*_sym.imp.OLEAUT32.dll_SysReAllocStringLen)(arg_8h_00, iVar8);\n            arg_8h_00 = arg_8h_00 + iVar8 * 2;\n            *(unaff_EBP + 0x20) = *(unaff_EBP + 0x20) + iVar8 * -2;\n            *(unaff_EBP + -0x34) = uVar7;\n        }\n    }\n    *(unaff_EBP + -0x38) = 0;\n    fcn.00402630();\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x4c) = 0;\n    *(unaff_EBP + -0x48) = 0;\n    *(unaff_EBP + -0x40) = 0;\n    if ((*(unaff_EBP + 0x18) == 0x37a) || (*(unaff_EBP + 0x18) == 0x37b)) {\n        iVar8 = *arg_8h_00;\n        arg_8h_00 = arg_8h_00 + 3;\n        *(unaff_EBP + -0x58) = iVar8;\n        *(unaff_EBP + -0x28) = iVar8 + -0xc;\n        piVar10 = arg_8h_00;\n        if (iVar8 + -0xc != 0) {\n            do {\n                iVar8 = *piVar10;\n                *(unaff_EBP + -0x28) = *(unaff_EBP + -0x28) + -6;\n                uVar6 = *(piVar10 + 1);\n                arg_8h_00 = piVar10 + 6;\n                *(unaff_EBP + -0x54) = iVar8;\n                if (iVar8 == -0x7ffeffff) {\n                    *(unaff_EBP + -0x48) = *arg_8h_00;\n                    iVar11 = piVar10 + 0x16;\n                    *(unaff_EBP + -0x40) = *(piVar10 + 10);\n                    fcn.00401800();\n                    iVar8 = *(*(unaff_EBP + -0x30) + -0xc);\n                    *(unaff_EBP + -0x28) = *(unaff_EBP + -0x28) + (-0x11 - iVar8);\n                    arg_8h_00 = piVar10 + iVar8 + 0x17;\n                    *(unaff_EBP + -0x4c) = uVar6;\n                }\n                else {\n                    iVar8 = fcn.00403da8(0x1c);\n                    *(unaff_EBP + -0x80) = iVar8;\n                    *(unaff_EBP + -4) = 1;\n                    if (iVar8 == 0) {\n                        uVar7 = 0;\n                    }\n                    else {\n                        iVar11 = *(unaff_EBP + -0x38);\n                        uVar7 = fcn.00416b1c(iVar11, *(unaff_EBP + -0x54), uVar6);\n                    }\n                    *(unaff_EBP + -4) = 0;\n                    *(unaff_EBP + -0x38) = uVar7;\n                }\n                piVar10 = arg_8h_00;\n            } while (*(unaff_EBP + -0x28) != 0);\n            iVar8 = *(unaff_EBP + -0x58);\n        }\n        *(unaff_EBP + 0x20) = *(unaff_EBP + 0x20) - iVar8;\n        *(unaff_EBP + 0x18) = *(unaff_EBP + 0x18) + 0xfffc;\n    }\n    if (**(unaff_EBP + -0x2c) == 0x7b) {\n        uVar7 = (*_sym.imp.ole32.dll_CLSIDFromString)();\n    }\n    else {\n        uVar7 = (*_sym.imp.ole32.dll_CLSIDFromProgID)(*(unaff_EBP + -0x2c), unaff_EBP + -0x20, iVar11);\n    }\n    *(unaff_EBP + -0x2c) = uVar7;\n    fcn.0041c795(arg_8h_00, *(unaff_EBP + 0x20), 0);\n    iVar3 = *(unaff_EBP + 0x18);\n    *(unaff_EBP + -4) = 2;\n    *(unaff_EBP + -0x24) = 0;\n    if (-1 < *(unaff_EBP + -0x2c)) {\n        iVar11 = fcn.004148e4(1);\n        if (iVar11 != 0) {\n            iVar11 = fcn.00414e89(0, unaff_EBP + -0x20, 0, *puVar12, unaff_EBP + -0x7c, *(puVar12 + 4), \n                                  -(iVar3 != 0x378) & unaff_EBP - 0xa8U, *(unaff_EBP + 0x18) == 0x377, \n                                  *(unaff_EBP + -0x34), unaff_EBP + -0x24);\n            if (iVar11 != 0) {\n                fcn.00416059(1);\n                (*_sym.imp.USER32.dll_SetWindowPos)\n                          (*(*(unaff_EBP + -0x24) + 0x24), *(unaff_EBP + -0x50), 0, 0, 0, 0, 0x13);\n                *(*(unaff_EBP + -0x24) + 0x94) = *(unaff_EBP + -0x38);\n                fcn.004029c0(unaff_EBP + -0x30);\n                *(*(unaff_EBP + -0x24) + 0x98) = *(unaff_EBP + -0x4c);\n                *(*(unaff_EBP + -0x24) + 0x9c) = *(unaff_EBP + -0x48);\n                *(*(unaff_EBP + -0x24) + 0xa0) = *(unaff_EBP + -0x40);\n            }\n        }\n    }\n    if (*(unaff_EBP + -0x34) != 0) {\n        (*_sym.imp.OLEAUT32.dll_SysStringLen)(*(unaff_EBP + -0x34));\n    }\n    if (*(unaff_EBP + -0x24) == 0) {\n        **(unaff_EBP + -0x44) = 0;\n    }\n    else {\n        **(unaff_EBP + -0x44) = *(*(unaff_EBP + -0x24) + 0x24);\n    }\n    *(unaff_EBP + -4) = 0;\n    fcn.0041cb15();\n    fcn.00401240();\n    fcn.00421ef7();\n    return;\n}\n",
        "token_count": 2866
    },
    "00408eda": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00408eda(void)\n\n{\n    uint *arg_8h;\n    uint lpVersionInformation;\n    uint var_94h;\n    uint var_88h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    fcn.004229c0(&var_94h, 0, 0x90);\n    arg_8h = &lpVersionInformation;\n    lpVersionInformation = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)();\n    fcn.00420bb4(arg_8h);\n    return;\n}\n",
        "token_count": 143
    },
    "00409184": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl\nfcn.00409184(int32_t *arg_8h, int32_t arg_ch, uint noname_2, uint noname_3, uint32_t arg_18h, uint32_t *arg_1ch, \n            uint *arg_20h, uint noname_7, uint *arg_28h)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    int32_t *piVar5;\n    uint32_t *puVar6;\n    uint *puVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t *piVar10;\n    ushort uVar11;\n    uint var_48h;\n    uint *var_44h;\n    uint *var_40h;\n    uint *var_34h;\n    uint var_30h;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint var_20h;\n    int32_t pvargDest;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar6 = arg_1ch;\n    piVar5 = arg_8h;\n    iVar9 = 0;\n    var_20h._0_2_ = 0;\n    if (arg_8h == NULL) {\n        return -0x7ff8ffa9;\n    }\n    if (arg_1ch == NULL) {\n        return -0x7ffdfff8;\n    }\n    uVar2 = arg_1ch[2];\n    if (5 < uVar2) {\n        return -0x7ffdfff2;\n    }\n    arg_8h = NULL;\n    if (arg_1ch[3] != 0) {\n        arg_1ch = arg_1ch[1];\n        do {\n            uVar3 = *arg_1ch;\n            if (uVar2 <= uVar3) {\n                return -0x7ffdfff2;\n            }\n            arg_1ch = arg_1ch + 1;\n            arg_8h = arg_8h + 1;\n            (&var_44h)[uVar3] = *puVar6 + iVar9;\n            iVar9 = iVar9 + 0x10;\n        } while (arg_8h < puVar6[3]);\n    }\n    if (arg_8h < uVar2) {\n        iVar9 = arg_8h * 0x10 + *puVar6;\n        iVar8 = uVar2 - arg_8h;\n        piVar10 = &var_48h + (uVar2 - arg_8h);\n        do {\n            *piVar10 = iVar9;\n            iVar9 = iVar9 + 0x10;\n            piVar10 = piVar10 + -1;\n            iVar8 = iVar8 + -1;\n        } while (iVar8 != 0);\n    }\n    iVar9 = -0x7ffdfffd;\n    if (arg_28h == NULL) {\n        arg_28h = &arg_18h;\n    }\n    if (arg_20h == NULL) {\n        arg_20h = &var_20h;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantClear)(&pvargDest);\n    pcVar4 = _sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime;\n    if (0x12 < arg_ch + 0x139aU) goto code_r0x004096ef;\n    // switch table (19 cases) at 0x409704\n    switch(*((arg_ch + 0x139aU) * 4 + 0x409704)) {\n    case 0x409265:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 100))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3]);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x409286:\n        if (puVar6[2] == 2) {\n            if (*var_44h != 3) {\n                iVar9 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&pvargDest, var_44h, 0, 3);\n                if (iVar9 < 0) goto code_r0x0040948a;\n                var_44h = &pvargDest;\n            }\n            arg_18h = var_44h[2];\n            if (*var_40h != 3) {\n                iVar9 = (*pcVar4)(&pvargDest, var_40h, 0, 3);\n                if (iVar9 < 0) {\ncode_r0x00409671:\n                    *arg_28h = 1;\n                    goto code_r0x004096ef;\n                }\n                var_40h = &pvargDest;\n            }\n            iVar9 = (**(*piVar5 + 0x60))(piVar5, arg_18h, var_40h[2], arg_20h);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x4092f3:\n        if (puVar6[2] == 2) {\n            if (*var_44h != 3) {\n                iVar9 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&pvargDest, var_44h, 0, 3);\n                if (iVar9 < 0) goto code_r0x0040948a;\n                var_44h = &pvargDest;\n            }\n            iVar9 = (**(*piVar5 + 0x5c))(piVar5, var_44h[2], *var_40h, var_40h[1], var_40h[2], var_40h[3], arg_20h);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x409340:\n        if (puVar6[2] == 5) {\n            while ((uVar1 = *var_44h,  (uVar1 & 0x4000) != 0 && ((uVar1 & 0xf) != 0))) {\n                if ((uVar1 & 0xc) == 0) {\n                    pvargDest = var_44h[2];\n                }\n                else {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(var_44h[2]);\n                    *var_44h[2] = 3;\n                    pvargDest = var_44h[2] + 8;\n                }\n            }\n            *arg_28h = 0;\n            iVar9 = (**(*piVar5 + 0x58))\n                              (piVar5, pvargDest, var_ch, var_8h, var_4h, *var_34h, var_34h[1], var_34h[2], var_34h[3]);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x4093ab:\n        if (puVar6[2] == 2) {\n            if (*var_44h != 3) {\n                iVar9 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&pvargDest, var_44h, 0, 3);\n                if (iVar9 < 0) goto code_r0x0040948a;\n                var_44h = &pvargDest;\n            }\n            iVar9 = (**(*piVar5 + 0x54))(piVar5, var_44h[2], *var_40h, var_40h[1], var_40h[2], var_40h[3]);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x4093f5:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x50))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\ncode_r0x00409418:\n            if (iVar9 < 0) goto code_r0x004096ef;\n            uVar11 = 8;\n            goto code_r0x004096e8;\n        }\n        break;\n    case 0x409429:\n        iVar9 = (**(*piVar5 + 0x4c))(piVar5, arg_20h);\n        goto code_r0x004096ef;\n    case 0x409437:\n        iVar9 = (**(*piVar5 + 0x48))(piVar5, arg_20h);\n        goto code_r0x004096ef;\n    case 0x409445:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x44))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x00409418;\n        }\n        break;\n    case 0x40946a:\n        if (puVar6[2] == 2) {\n            uVar1 = *var_44h;\n            if (((uVar1 & 0x4000) != 0) && ((uVar1 & 0xc) == 0)) {\n                iVar9 = -0x7ffdfffb;\ncode_r0x0040948a:\n                *arg_28h = 0;\n                goto code_r0x004096ef;\n            }\n            if (uVar1 == 0x400c) {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(var_44h[2]);\n                *var_44h[2] = 8;\n                puVar7 = var_44h[2] + 8;\n            }\n            else if (uVar1 == 0x4008) {\n                puVar7 = var_44h[2];\n            }\n            else {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(var_44h);\n                puVar7 = var_44h + 2;\n                *var_44h = 8;\n            }\n            iVar9 = (**(*piVar5 + 0x40))(piVar5, puVar7, *var_40h, var_40h[1], var_40h[2], var_40h[3], arg_20h + 2);\n            goto code_r0x004094f1;\n        }\n        break;\n    case 0x409502:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x3c))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x00409418;\n        }\n        break;\n    case 0x40952a:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x38))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x40954e:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x34))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h);\n            goto code_r0x004096ef;\n        }\n        break;\n    case 0x409572:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x30))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x00409418;\n        }\n        break;\n    case 0x40959a:\n        if ((arg_18h & 2) == 0) {\n            if ((arg_18h & 4) == 0) goto code_r0x00409617;\n            if (puVar6[2] == 2) {\n                var_30h = *var_44h;\n                uStack48 = var_44h[1];\n                uStack44 = var_44h[2];\n                uStack40 = var_44h[3];\n                if (*var_40h != 8) {\n                    iVar9 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&pvargDest, var_40h, 0, 3);\n                    if (iVar9 < 0) goto code_r0x00409671;\n                    var_40h = &pvargDest;\n                }\n                iVar9 = (**(*piVar5 + 0x6c))(piVar5, var_30h, uStack48, uStack44, uStack40, var_40h[2]);\n                goto code_r0x004096ef;\n            }\n        }\n        else if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x2c))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x00409418;\n        }\n        break;\n    case 0x409617:\ncode_r0x00409617:\n        if ((arg_18h & 2) == 0) {\n            if ((arg_18h & 4) == 0) goto code_r0x00409699;\n            if (puVar6[2] == 2) {\n                var_30h = *var_44h;\n                uStack48 = var_44h[1];\n                uStack44 = var_44h[2];\n                uStack40 = var_44h[3];\n                if (*var_40h != 8) {\n                    iVar9 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&pvargDest, var_40h, 0, 3);\n                    if (iVar9 < 0) goto code_r0x00409671;\n                    var_40h = &pvargDest;\n                }\n                iVar9 = (**(*piVar5 + 0x68))(piVar5, var_30h, uStack48, uStack44, uStack40, var_40h[2]);\n                goto code_r0x004096ef;\n            }\n        }\n        else if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x28))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x00409418;\n        }\n        break;\n    case 0x409699:\ncode_r0x00409699:\n        if (puVar6[2] == 1) {\n            iVar9 = (**(*piVar5 + 0x24))(piVar5, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x004096e0;\n        }\n        break;\n    case 0x4096c1:\n        iVar9 = (**(*piVar5 + 0x20))(piVar5, arg_20h + 2);\ncode_r0x004094f1:\n        if (iVar9 < 0) goto code_r0x004096ef;\n        uVar11 = 3;\n        goto code_r0x004096e8;\n    case 0x4096d3:\n        iVar9 = (**(*piVar5 + 0x1c))(piVar5, arg_20h + 2);\ncode_r0x004096e0:\n        if (iVar9 < 0) goto code_r0x004096ef;\n        uVar11 = 9;\ncode_r0x004096e8:\n        *arg_20h = uVar11;\n        goto code_r0x004096ef;\n    }\n    iVar9 = -0x7ffdfff2;\ncode_r0x004096ef:\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(&pvargDest);\n    return iVar9;\n}\n",
        "token_count": 3767
    },
    "00409750": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nuint __cdecl fcn.00409750(uint noname_0, int32_t arg_ch, uint32_t arg_10h, uint noname_3, int32_t arg_18h)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_1h;\n    \n    uVar3 = 0;\n    if (arg_10h != 0) {\n        do {\n            bVar1 = false;\n            uVar4 = 0;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*(arg_ch + uVar3 * 4), *(uVar4 + 0x44b7c0));\n                if (iVar2 == 0) {\n                    bVar1 = true;\n                    *(arg_18h + uVar3 * 4) = *(uVar4 + 0x44b770);\n                }\n                uVar4 = uVar4 + 4;\n            } while (uVar4 < 0x4c);\n            if (!bVar1) {\n                return 0x80020006;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < arg_10h);\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "00409989": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00409989(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    while( true ) {\n        if (arg_8h[4] == 0) {\n            return NULL;\n        }\n        if ((((arg_ch == *arg_8h) && (arg_10h == arg_8h[1])) && (arg_8h[2] <= arg_14h)) &&\n           (arg_14h < arg_8h[3] || arg_14h == arg_8h[3])) break;\n        arg_8h = arg_8h + 6;\n    }\n    return arg_8h;\n}\n",
        "token_count": 167
    },
    "00409f14": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00409f14(void)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    bool bVar2;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        bVar2 = *(unaff_EBP + -0x1c) != 0;\n        if (bVar2) {\n            uVar1 = 0;\n        }\n        else {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97(0, *(unaff_EBP + -0x20));\n        if (!bVar2) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 187
    },
    "00409faa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00409faa(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        uVar1 = *(unaff_EBP + -0x1c) == unaff_EBX;\n        if (uVar1 == unaff_EBX) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97();\n        if (uVar1 != unaff_EBX) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 197
    },
    "0040a03e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040a03e(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        uVar1 = *(unaff_EBP + -0x1c) == unaff_EBX;\n        if (uVar1 == unaff_EBX) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97();\n        if (uVar1 != unaff_EBX) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "0040a0ed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040a0ed(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        uVar1 = *(unaff_EBP + -0x1c) == unaff_EBX;\n        if (uVar1 == unaff_EBX) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97();\n        if (uVar1 != unaff_EBX) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "0040a17b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040a17b(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t unaff_EBX;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        uVar1 = *(unaff_EBP + -0x1c) == unaff_EBX;\n        if (uVar1 == unaff_EBX) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97();\n        if (uVar1 != unaff_EBX) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "0040a389": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a389(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    \n    iVar4 = fcn.0040f86d();\n    if ((*(iVar4 + 0x3c) != 0) && (iVar1 = *(*(iVar4 + 0x3c) + 0x20),  iVar1 != 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar1, 0x401, 0, 0);\n    }\n    piVar2 = *(iVar4 + 0x50);\n    if ((arg_8h != 0) && (piVar2 != NULL)) {\n        iVar3 = (*_sym.imp.USER32.dll_GetKeyState)(1);\n        if (-1 < iVar3) {\n            (**(*piVar2 + 0x178))(0xffffffff);\n        }\n    }\n    return;\n}\n",
        "token_count": 222
    },
    "0040a50d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040a50d(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    if (arg_8h == 0) {\n        iVar1 = fcn.0040f86d();\n        if ((*(iVar1 + 0x48) != 0) && ((*(*(iVar1 + 0x48) + 4) & 0x40000000) == 0)) {\n            fcn.0040a389(1);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 117
    },
    "0040b328": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040b328(uint *arg_8h)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x10) == 0) {\n        uVar1 = fcn.00407ae3(\"InitCommonControls\");\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        *(in_ECX + 0x10) = uVar1;\n    }\n    *arg_8h = *(in_ECX + 0x10);\n    return;\n}\n",
        "token_count": 127
    },
    "0040b3ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040b3ba(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != 2) {\n        fcn.0040ef97(0, *(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "0040b3cb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040b3cb(uint *arg_8h)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x14) == 0) {\n        uVar1 = fcn.00407ae3(\"InitCommonControlsEx\");\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        *(in_ECX + 0x14) = uVar1;\n    }\n    *arg_8h = *(in_ECX + 0x14);\n    return;\n}\n",
        "token_count": 129
    },
    "0040b46f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040b46f(void)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    bool bVar2;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x24) != 2) {\n        bVar2 = *(unaff_EBP + -0x1c) != 0;\n        if (bVar2) {\n            uVar1 = 0;\n        }\n        else {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.0040ef97(0, *(unaff_EBP + -0x20));\n        if (!bVar2) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 188
    },
    "0040b535": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040b535(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e0b(0);\n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x14) == 0) && (*(unaff_EBP + 8) != 0)) {\n        arg_8h_00 = fcn.00403d91(fcn.0041248c);\n        iVar2 = fcn.00403da8(0x60);\n        *(unaff_EBP + 8) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00412826(0x43daf0, 0x40b301, fcn.0040fd33, 0x20, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x14) = uVar3;\n        fcn.00403d91(arg_8h_00);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 329
    },
    "0040b662": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040b662(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = fcn.0041127b(0x4046b1);\n    if (iVar1 == 0) {\n        fcn.00404695();\n    }\n    iVar2 = fcn.0040f83a();\n    if ((*(iVar2 + 0x14) != '\\0') && (*(iVar1 + 0x28) != 0)) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)(*(iVar1 + 0x28));\n        *(iVar1 + 0x28) = 0;\n    }\n    if (*(iVar1 + 0x14) != 0) {\n        *(iVar1 + 0x14) = 0;\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 192
    },
    "0040b6ec": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040b6ec(int32_t *param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    \n    iVar2 = fcn.00405d91();\n    if (iVar2 == 0) goto code_r0x0040b739;\n    if (*(iVar2 + 0x20) == param_1) {\n        iVar3 = fcn.0040f83a();\n        if (*(iVar3 + 0x14) == '\\0') {\n            iVar3 = fcn.0040f83a();\n            if (iVar2 == *(iVar3 + 4)) {\n                iVar3 = fcn.0041259b();\n                if (iVar3 == 0) goto code_r0x0040b72e;\n            }\n            fcn.00404c6b(0);\n        }\ncode_r0x0040b72e:\n        *(iVar2 + 0x20) = 0;\n    }\n    if (*(iVar2 + 0x24) == param_1) {\n        *(iVar2 + 0x24) = 0;\n    }\ncode_r0x0040b739:\n    if (param_1[0x12] != NULL) {\n        (**(*param_1[0x12] + 0x50))();\n        param_1[0x12] = 0;\n    }\n    if (param_1[0x13] != NULL) {\n        (**(*param_1[0x13] + 4))(1);\n    }\n    param_1[0x13] = 0;\n    if ((*(param_1 + 0xf) & 1) != 0) {\n        iVar2 = fcn.0040f86d();\n        iVar2 = *(iVar2 + 0x3c);\n        if ((iVar2 != 0) && (*(iVar2 + 0x20) != 0)) {\n            fcn.004229c0(&var_30h, 0, 0x30);\n            var_28h = param_1[8];\n            var_30h = 0x2c;\n            var_2ch = 1;\n            var_24h = var_28h;\n            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar2 + 0x20), 0x405, 0, &var_30h);\n        }\n    }\n    pcVar1 = _sym.imp.USER32.dll_GetWindowLongA;\n    iVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(param_1[8], 0xfffffffc);\n    fcn.0040b503();\n    iVar3 = (*pcVar1)(param_1[8], 0xfffffffc);\n    if (iVar3 == iVar2) {\n        piVar4 = (**(*param_1 + 0xf8))();\n        if (*piVar4 != 0) {\n            (*_sym.imp.USER32.dll_SetWindowLongA)(param_1[8], 0xfffffffc, *piVar4);\n        }\n    }\n    fcn.0040b632();\n    (**(*param_1 + 0x11c))();\n    return;\n}\n",
        "token_count": 746
    },
    "0040ba3a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040ba3a(uint arg_8h, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    int32_t *var_4h;\n    \n    var_4h = in_ECX;\n    if (*(in_ECX + 9) != '\\0') {\n        var_4h = NULL;\n        iVar2 = (**(*in_ECX + 0xec))(arg_8h, arg_ch, &var_4h);\n        if (-1 < iVar2) {\n            return var_4h;\n        }\n    }\n    piVar1 = fcn.0040b503();\n    return piVar1;\n}\n",
        "token_count": 163
    },
    "0040bc48": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl fcn.0040bc48(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t *arg_8h_00;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t extraout_EDX;\n    int32_t unaff_EBP;\n    uint *puVar5;\n    uint *puVar6;\n    uint var_44h;\n    uint var_28h;\n    uint var_18h;\n    uint var_4h;\n    \n    fcn.00421e3e(0x38);\n    iVar1 = fcn.0041127b(0x4046b1);\n    iVar4 = 0;\n    *(unaff_EBP + -0x18) = iVar1;\n    if (iVar1 == 0) {\n        fcn.00404695();\n        iVar4 = extraout_EDX;\n    }\n    puVar5 = iVar1 + 0x58;\n    puVar6 = unaff_EBP + -0x44;\n    for (iVar3 = 7; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar6 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    iVar3 = *(unaff_EBP + 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    *(iVar1 + 0x58) = *(unaff_EBP + 0xc);\n    *(iVar1 + 0x60) = *(unaff_EBP + 0x14);\n    uVar2 = *(unaff_EBP + 0x18);\n    *(iVar1 + 0x5c) = iVar3;\n    *(iVar1 + 100) = uVar2;\n    *(unaff_EBP + -4) = iVar4;\n    if ((iVar3 == 2) && (arg_8h_00[0x13] != iVar4)) {\n        (**(*arg_8h_00[0x13] + 0x60))(iVar4);\n    }\n    *(unaff_EBP + 8) = 0;\n    if (iVar3 == 0x110) {\n        fcn.0040a2b0(arg_8h_00, unaff_EBP + -0x28, unaff_EBP + 8);\n    }\n    uVar2 = (**(*arg_8h_00 + 0x110))(iVar3, *(unaff_EBP + 0x14), *(unaff_EBP + 0x18));\n    *(unaff_EBP + 0x18) = uVar2;\n    if (iVar3 == 0x110) {\n        fcn.0040bbd2(arg_8h_00, unaff_EBP + -0x28, *(unaff_EBP + 8));\n    }\n    puVar5 = unaff_EBP + -0x44;\n    puVar6 = iVar1 + 0x58;\n    for (iVar4 = 7; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 808
    },
    "0040bd88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040bd88(void)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CWnd.0;\n    *(unaff_EBP + -4) = 0;\n    if ((((extraout_ECX[8] != NULL) && (extraout_ECX != 0x44f640)) && (extraout_ECX != 0x44f698)) &&\n       ((extraout_ECX != 0x44f6f0 && (extraout_ECX != 0x44f748)))) {\n        fcn.0040b7ff();\n    }\n    if (extraout_ECX[0x13] != NULL) {\n        (**(*extraout_ECX[0x13] + 4))(1);\n    }\n    pcVar1 = extraout_ECX[0x14];\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x28) == extraout_ECX)) {\n        *(pcVar1 + 0x28) = 0;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00405a4f();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 341
    },
    "0040be2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040be2a(uint noname_0, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t *in_ECX;\n    \n    if (*arg_ch == 1) {\n        iVar1 = fcn.0041127b(0x4046b1);\n        if (iVar1 != 0) goto code_r0x0040be53;\n        do {\n            iVar1 = fcn.00404695();\ncode_r0x0040be53:\n            if (*(iVar1 + 0x74) == in_ECX[8]) {\n                iVar1 = fcn.0040f96f();\n            }\n            else {\n                iVar1 = (**(*in_ECX + 0x6c))();\n            }\n        } while (iVar1 == 0);\n        piVar2 = fcn.0040a3df(iVar1, arg_ch[2]);\n        if (piVar2 != NULL) {\n            (**(*piVar2 + 0x10))(arg_ch);\n        }\n    }\n    else {\n        iVar1 = fcn.0040b8af(in_ECX[8], arg_ch[1], 1);\n        if ((iVar1 != 0) && (iVar1 = fcn.0040b96e(0),  iVar1 != 0)) {\n            return;\n        }\n    }\n    fcn.0040b503();\n    return;\n}\n",
        "token_count": 322
    },
    "0040bef2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.0040bef2(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    if ((param_1 != NULL) && (param_1[8] != 0)) {\n        iVar2 = (**(*param_1 + 0x128))();\n        piVar3 = param_1;\n        if (iVar2 == 0) {\n            param_1 = fcn.0040beb3();\n            piVar3 = param_1;\n        }\n        while (piVar1 = piVar3,  piVar1 != NULL) {\n            piVar3 = fcn.0040beb3();\n            param_1 = piVar1;\n        }\n        return param_1;\n    }\n    return NULL;\n}\n",
        "token_count": 186
    },
    "0040bf33": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040bf33(uint arg_8h, uint Msg, uint wParam, uint lParam, int32_t arg_18h, int32_t arg_1ch)\n\n{\n    code *pcVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetTopWindow;\n    for (arg_8h_00 = (*_sym.imp.USER32.dll_GetTopWindow)(arg_8h); arg_8h_00 != 0;\n        arg_8h_00 = (*_sym.imp.USER32.dll_GetWindow)(arg_8h_00, 2)) {\n        if (arg_1ch == 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)(arg_8h_00, Msg, wParam, lParam);\n        }\n        else {\n            iVar2 = fcn.0040b5d5(arg_8h_00);\n            if (iVar2 != 0) {\n                fcn.0040bc48(iVar2, *(iVar2 + 0x20), Msg, wParam, lParam);\n            }\n        }\n        if (arg_18h != 0) {\n            iVar2 = (*pcVar1)(arg_8h_00);\n            if (iVar2 != 0) {\n                fcn.0040bf33(arg_8h_00, Msg, wParam, lParam, arg_18h, arg_1ch);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 331
    },
    "0040c052": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c052(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    \n    if (((arg_8h == 1) || (arg_8h == 2)) && (iVar1 = fcn.0040bfb2(arg_ch, 0),  iVar1 != 0)) {\n        return;\n    }\n    fcn.0040b503();\n    return;\n}\n",
        "token_count": 96
    },
    "0040c0ae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040c0ae(uint hWnd)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t *in_ECX;\n    \n    iVar1 = fcn.0040b5f6(hWnd);\n    if (iVar1 != 0) {\n        (**(*in_ECX + 0x50))();\n        piVar2 = (**(*in_ECX + 0xf8))();\n        iVar1 = (*_sym.imp.USER32.dll_SetWindowLongA)(hWnd, 0xfffffffc, fcn.0040bd3b);\n        if (*piVar2 == 0) {\n            *piVar2 = iVar1;\n        }\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 169
    },
    "0040c6a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c6a6(uint noname_0, int32_t *arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    if ((*arg_ch == 1) && (piVar1 = fcn.0040f983(arg_ch[5]),  piVar1 != NULL)) {\n        (**(*piVar1 + 0xc))(arg_ch);\n        return;\n    }\n    iVar2 = fcn.0040bfb2(arg_ch[5], 0);\n    if (iVar2 == 0) {\n        fcn.0040b503();\n    }\n    return;\n}\n",
        "token_count": 143
    },
    "0040c739": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040c739(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    fcn.00412786(0xc);\n    iVar1 = fcn.00410d72(0x40bba2);\n    if (iVar1 == 0) {\n        fcn.00404695();\n    }\n    if (*(iVar1 + 8) == 0) {\n        iVar2 = fcn.0040a122(\"hhctrl.ocx\");\n        *(iVar1 + 4) = iVar2;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"HtmlHelpA\");\n            *(iVar1 + 8) = iVar2;\n            if (iVar2 != 0) goto code_r0x0040c79e;\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(iVar1 + 4));\n            *(iVar1 + 4) = 0;\n        }\n        uVar3 = 0;\n    }\n    else {\ncode_r0x0040c79e:\n        fcn.004127f8(0xc);\n        uVar3 = (**(iVar1 + 8))(arg_8h, arg_ch, arg_10h, arg_14h);\n    }\n    return uVar3;\n}\n",
        "token_count": 321
    },
    "0040ca88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040ca88(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0xc) == 0) {\n        return 0;\n    }\n    uVar1 = (**(**(param_1 + 0xc) + 0xc))(*(param_1 + 0xc), 0);\n    return uVar1;\n}\n",
        "token_count": 89
    },
    "0040ca9d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ca9d(int32_t *arg_8h)\n\n{\n    uint uVar1;\n    \n    if ((((*arg_8h == 0) && (arg_8h[1] == 0)) && (arg_8h[2] == 0xc0)) && (arg_8h[3] == 0x46000000)) {\n        uVar1 = 1;\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 117
    },
    "0040cacd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040cacd(int32_t arg_8h, int32_t *arg_ch, uint arg_10h, int32_t **arg_14h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    \n    if ((arg_8h == 0) || (arg_ch == NULL)) {\n        iVar2 = -0x7ff8ffa9;\n    }\n    else if (arg_14h == NULL) {\n        iVar2 = -0x7fffbffd;\n    }\n    else {\n        *arg_14h = NULL;\n        iVar2 = fcn.0040ca9d(arg_10h);\n        if (iVar2 == 0) {\n            for (; pcVar1 = arg_ch[2],  pcVar1 != NULL; arg_ch = arg_ch + 3) {\n                iVar2 = *arg_ch;\n                if ((iVar2 == 0) || (iVar3 = fcn.0040ca56(iVar2, arg_10h),  iVar3 != 0)) {\n                    if (pcVar1 == 0x1) goto code_r0x0040cb03;\n                    iVar3 = (*pcVar1)(arg_8h, arg_10h, arg_14h, arg_ch[1]);\n                    if (iVar3 == 0) {\n                        return 0;\n                    }\n                    if ((iVar2 != 0) && (iVar3 < 0)) {\n                        return iVar3;\n                    }\n                }\n            }\n            iVar2 = -0x7fffbffe;\n        }\n        else {\ncode_r0x0040cb03:\n            piVar4 = arg_ch[1] + arg_8h;\n            (**(*piVar4 + 4))(piVar4);\n            *arg_14h = piVar4;\n            iVar2 = 0;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 430
    },
    "0040cb8a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040cb8a(code **param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    *param_1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n    param_1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n    param_1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n    param_1[5] = 0xc0000001;\n    fcn.0040ca88();\n    iVar2 = fcn.0040f83a();\n    iVar2 = (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(iVar2 + 0x2c);\n    if (iVar2 != 0) {\n        return;\n    }\n    iVar2 = fcn.0040f83a();\n    if (*(iVar2 + 0x30) == 0) {\n        fcn.004125bb(1);\n        iVar2 = fcn.0040f83a();\n        iVar2 = *(iVar2 + 4);\n        if ((iVar2 == 0) || (*(iVar2 + 0x20) == 0)) {\n            iVar2 = fcn.0040f83a();\n            if (*(iVar2 + 0x14) == '\\0') {\n                fcn.00404c6b(0);\n            }\n        }\n        else {\n            iVar1 = fcn.0040e542();\n            if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x0041260d. Too many branches\n    // WARNING: Treating indirect jump as call\n                (**(**(iVar2 + 0x20) + 0x60))();\n                return;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 415
    },
    "0040d0e8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d0e8(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    iVar1 = fcn.0041127b(0x4046b1);\n    if (iVar1 == 0) {\n        fcn.00404695();\n    }\n    if (*(iVar1 + 0x14) != arg_8h) {\n        if (*(iVar1 + 0x28) == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            iVar3 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(5, 0x40ce95, 0, uVar2);\n            *(iVar1 + 0x28) = iVar3;\n            if (iVar3 == 0) {\n                fcn.0040465d();\n            }\n        }\n        *(iVar1 + 0x14) = arg_8h;\n    }\n    return;\n}\n",
        "token_count": 225
    },
    "0040d29f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.0040d29f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    code **ppcVar6;\n    uint32_t uVar7;\n    int32_t *arg_8h_00;\n    code *pcVar8;\n    int32_t unaff_EBP;\n    int16_t iVar9;\n    int16_t iVar10;\n    uint var_7ch;\n    uint var_5ch;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint *var_24h;\n    uint *var_18h;\n    uint *var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0x70);\n    *(unaff_EBP + -0x10) = 0;\n    *(unaff_EBP + -0x14) = 0x7fffffff;\n    uVar7 = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    if (uVar7 == 0x111) {\n        iVar3 = (**(*arg_8h_00 + 0xf0))(*(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n        if (iVar3 == 0) goto code_r0x0040d4af;\n        goto code_r0x0040d2dd;\n    }\n    if (uVar7 == 0x4e) {\n        if (**(unaff_EBP + 0x10) != 0) {\n            iVar3 = (**(*arg_8h_00 + 0xf4))(*(unaff_EBP + 0xc), *(unaff_EBP + 0x10), unaff_EBP + -0x10);\n            goto joined_r0x0040d788;\n        }\n        goto code_r0x0040d4af;\n    }\n    var_24h = *(unaff_EBP + 0x10);\n    if (uVar7 == 6) {\n        uVar4 = fcn.0040b5a9(var_24h);\n        fcn.0040cc58(arg_8h_00, *(unaff_EBP + 0xc), uVar4);\n    }\n    iVar9 = var_24h;\n    if ((uVar7 == 0x20) && (iVar3 = fcn.0040ccd0(arg_8h_00, iVar9, var_24h >> 0x10),  iVar3 != 0))\n    goto code_r0x0040d2dd;\n    if ((((arg_8h_00[0x13] != 0) && (0 < *(arg_8h_00[0x13] + 0x74))) &&\n        ((((0x1ff < uVar7 && (uVar7 < 0x20a)) || ((0xff < uVar7 && (uVar7 < 0x110)))) || (uVar7 - 0x281 < 0x11)))) &&\n       (iVar3 = (**(*arg_8h_00[0x13] + 0x94))(uVar7, *(unaff_EBP + 0xc), var_24h, unaff_EBP + -0x10),  iVar3 != 0))\n    goto code_r0x0040d841;\n    uVar5 = (**(*arg_8h_00 + 0x28))();\n    uVar7 = *(unaff_EBP + 8);\n    *(unaff_EBP + 0x10) = uVar5;\n    fcn.0040a21b(7);\n    iVar3 = ((uVar5 ^ uVar7) & 0x1ff) * 0xc;\n    *(unaff_EBP + -0x18) = iVar3 + 0x44de10;\n    if ((*(unaff_EBP + 8) != *(iVar3 + 0x44de10)) || (*(unaff_EBP + 0x10) != *(iVar3 + 0x44de18))) {\n        puVar1 = *(unaff_EBP + -0x18);\n        ppcVar6 = *(unaff_EBP + 0x10);\n        *puVar1 = *(unaff_EBP + 8);\n        puVar1[2] = ppcVar6;\n        while (*ppcVar6 != NULL) {\n            if (*(unaff_EBP + 8) < 0xc000) {\n                iVar3 = fcn.00409989(ppcVar6[1], *(unaff_EBP + 8), 0, 0);\n                *(unaff_EBP + 0x10) = iVar3;\n                if (iVar3 != 0) {\n                    *(*(unaff_EBP + -0x18) + 4) = iVar3;\n                    fcn.0040a24f();\n                    goto code_r0x0040d43d;\n                }\n            }\n            else {\n                iVar3 = *(*(unaff_EBP + 0x10) + 4);\n                uVar4 = 0xc000;\n                while (iVar3 = fcn.00409989(iVar3, uVar4, 0, 0),  iVar3 != 0) {\n                    if (**(iVar3 + 0x10) == *(unaff_EBP + 8)) {\n                        *(*(unaff_EBP + -0x18) + 4) = iVar3;\n                        fcn.0040a24f();\n                        goto code_r0x0040d833;\n                    }\n                    iVar3 = iVar3 + 0x18;\n                }\n                ppcVar6 = *(unaff_EBP + 0x10);\n            }\n            ppcVar6 = (**ppcVar6)();\n            *(unaff_EBP + 0x10) = ppcVar6;\n        }\n        *(*(unaff_EBP + -0x18) + 4) = 0;\n        fcn.0040a24f();\n        goto code_r0x0040d4af;\n    }\n    iVar3 = *(iVar3 + 0x44de14);\n    *(unaff_EBP + 0x10) = iVar3;\n    fcn.0040a24f();\n    if (iVar3 == 0) goto code_r0x0040d4af;\n    if (0xbfff < *(unaff_EBP + 8)) {\ncode_r0x0040d833:\n        pcVar8 = *(iVar3 + 0x14);\n        goto code_r0x0040d837;\n    }\ncode_r0x0040d43d:\n    pcVar8 = *(*(unaff_EBP + 0x10) + 0x14);\n    iVar3 = *(*(unaff_EBP + 0x10) + 0x10);\n    iVar10 = var_24h >> 0x10;\n    var_14h = var_24h;\n    // switch table (84 cases) at 0x40d863\n    switch(iVar3) {\n    case 1:\n        var_14h = *(unaff_EBP + 0xc);\n        fcn.0041027c(var_14h);\n        goto code_r0x0040d4de;\n    case 2:\n    case 3:\n    case 4:\n    case 0x1b:\n    case 0x1c:\n        var_14h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d4de;\n    case 5:\n    case 0xc:\n        var_14h = var_24h >> 0x10;\n        var_18h = var_24h & 0xffff;\n        uVar7 = *(unaff_EBP + 0xc);\n        uVar5 = fcn.0040b5a9(uVar7);\n        goto code_r0x0040d513;\n    case 6:\n    case 0x47:\n        var_24h = *(unaff_EBP + 0xc);\n        var_28h = fcn.0040b5a9(var_24h);\n        goto code_r0x0040d83a;\n    case 7:\n    case 0xd:\n    case 0x4a:\ncode_r0x0040d4de:\n        uVar4 = (*pcVar8)(var_14h);\n        goto code_r0x0040d83e;\n    case 8:\n        fcn.0040fd92();\n        uVar4 = var_24h[1];\n        *(unaff_EBP + -4) = 1;\n        *(unaff_EBP + -0x24) = uVar4;\n        fcn.0040a26b();\n        uVar4 = *var_24h;\n        uVar2 = var_24h[2];\n        *(unaff_EBP + -4) = 2;\n        *(unaff_EBP + -0x5c) = uVar4;\n        iVar3 = fcn.0040b5d5(uVar4);\n        if (iVar3 == 0) {\n            if ((arg_8h_00[0x13] != 0) && (iVar3 = fcn.00413c77(*(unaff_EBP + -0x5c)),  iVar3 != 0)) {\n                *(unaff_EBP + -0x2c) = iVar3;\n            }\n            iVar3 = unaff_EBP + -0x7c;\n        }\n        uVar4 = (*pcVar8)(unaff_EBP + -0x28, iVar3, uVar2);\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x5c) = 0;\n        *(unaff_EBP + -0x10) = uVar4;\n        *(unaff_EBP + -4) = 1;\n        fcn.0040bd88();\n        goto code_r0x0040d598;\n    case 9:\n        fcn.0040fd92();\n        uVar4 = var_24h[2];\n        *(unaff_EBP + -0x24) = var_24h[1];\n        *(unaff_EBP + -4) = 3;\n        uVar4 = (*pcVar8)(unaff_EBP + -0x28, uVar4);\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x10) = uVar4;\ncode_r0x0040d598:\n        *(unaff_EBP + -4) = 0;\n        fcn.004102f9();\n        break;\n    case 10:\n        var_14h = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = fcn.0040b5a9(var_24h);\n        var_18h = var_24h;\n        goto code_r0x0040d5dc;\n    case 0xb:\n        var_24h = *(unaff_EBP + 0xc) >> 0x10;\n        var_28h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d83a;\n    case 0xe:\n    case 0x2f:\n    case 0x4f:\n        goto code_r0x0040d837;\n    case 0xf:\n        var_18h = fcn.0040f96f(var_24h);\n        uVar7 = *(unaff_EBP + 0xc) >> 0x10;\ncode_r0x0040d5dc:\n        uVar5 = *(unaff_EBP + 0xc);\ncode_r0x0040d513:\n        uVar4 = (*pcVar8)(uVar5, uVar7, var_18h, var_14h);\n        goto code_r0x0040d83e;\n    case 0x10:\n    case 0x12:\n    case 0x15:\n    case 0x1e:\n    case 0x2d:\n    case 0x32:\n    case 0x4c:\n    case 0x53:\n        goto code_r0x0040d81c;\n    case 0x11:\n    case 0x14:\n    case 0x54:\n        var_14h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d608;\n    case 0x13:\n        (*pcVar8)();\n        break;\n    case 0x16:\n        var_14h = *(unaff_EBP + 0xc) >> 0x10;\n        var_18h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d81f;\n    case 0x17:\n        var_14h = iVar10;\n        var_18h = iVar9;\n        goto code_r0x0040d81f;\n    case 0x18:\n    case 0x19:\n        var_14h = var_24h >> 0x10;\n        var_18h = var_24h & 0xffff;\n        goto code_r0x0040d640;\n    case 0x1a:\n        fcn.0040b5a9(var_24h);\n        goto code_r0x0040d81c;\n    case 0x1d:\n    case 0x28:\n    case 0x31:\n        uVar4 = (*pcVar8)();\n        goto code_r0x0040d83e;\n    case 0x1f:\n        var_14h = *(unaff_EBP + 0xc);\n        var_18h = fcn.0040b5a9(var_14h);\n        fcn.0040b5a9(var_24h);\n        uVar7 = arg_8h_00[8] == var_24h;\n        goto code_r0x0040d644;\n    case 0x20:\n        var_14h = *(unaff_EBP + 0xc);\n        fcn.0041027c(var_14h);\n        goto code_r0x0040d608;\n    case 0x21:\n        var_14h = *(unaff_EBP + 0xc);\n        fcn.0040f96f(var_14h);\n        goto code_r0x0040d608;\n    case 0x22:\n        var_14h = iVar10;\n        var_18h = iVar9;\n        uVar7 = fcn.0040f96f(*(unaff_EBP + 0xc), var_18h, var_14h);\n        goto code_r0x0040d644;\n    case 0x23:\n        var_14h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d695;\n    case 0x24:\ncode_r0x0040d695:\n        fcn.0040b5a9(var_14h);\n        goto code_r0x0040d608;\n    case 0x25:\n        var_14h = var_24h >> 0x10;\n        var_18h = var_24h & 0xffff;\n        goto code_r0x0040d6a8;\n    case 0x26:\n        var_18h = iVar9;\n        var_14h = iVar10;\ncode_r0x0040d6a8:\n        uVar7 = fcn.0040b5a9(*(unaff_EBP + 0xc));\n        goto code_r0x0040d644;\n    case 0x27:\n        var_18h = fcn.0040b5a9(*(unaff_EBP + 0xc));\n        goto code_r0x0040d81f;\n    case 0x29:\n        var_14h = *(unaff_EBP + 0xc) >> 0x10;\n        var_18h = fcn.0040b5a9(var_24h);\n        goto code_r0x0040d6da;\n    case 0x2a:\n    case 0x2b:\n        var_18h = *(unaff_EBP + 0xc);\n        var_14h = *(unaff_EBP + 0xc) >> 0x10;\n        *(unaff_EBP + 8) = var_18h;\n        *(unaff_EBP + 0xc) = var_14h;\n        if (iVar3 == 0x2a) {\n            var_18h = fcn.0040b5a9(var_24h);\n            uVar7 = *(unaff_EBP + 0xc);\n            var_14h = var_24h;\n            goto code_r0x0040d644;\n        }\n        goto code_r0x0040d81f;\n    case 0x2c:\n    case 0x33:\ncode_r0x0040d608:\n        (*pcVar8)(var_14h);\n        break;\n    case 0x2e:\n    case 0x36:\n    case 0x52:\n        (*pcVar8)(*(unaff_EBP + 0xc), var_24h);\n        goto code_r0x0040d2dd;\n    case 0x30:\n    case 0x46:\n        var_28h = iVar9;\n        var_24h = iVar10;\n        goto code_r0x0040d83a;\n    case 0x34:\n        var_18h = *(unaff_EBP + 0xc) >> 0x10;\ncode_r0x0040d6da:\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0040d644;\n    case 0x35:\n        var_18h = iVar9;\n        var_14h = iVar10;\ncode_r0x0040d640:\n        uVar7 = *(unaff_EBP + 0xc);\ncode_r0x0040d644:\n        (*pcVar8)(uVar7, var_18h, var_14h);\n        break;\n    case 0x37:\n        iVar3 = (*pcVar8)(*(unaff_EBP + 0xc), *(unaff_EBP + 0xc) >> 0x10, iVar9, iVar10);\n        *(unaff_EBP + -0x10) = iVar3;\n        goto joined_r0x0040d788;\n    case 0x38:\n        (*pcVar8)(*(unaff_EBP + 0xc), *(unaff_EBP + 0xc) >> 0x10, iVar9, iVar10);\n        break;\n    case 0x45:\n        iVar3 = (*pcVar8)();\n        *(unaff_EBP + -0x10) = iVar3;\njoined_r0x0040d788:\n        if (iVar3 != 0) {\ncode_r0x0040d4af:\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0040a24f();\n            goto code_r0x0040d4bd;\n        }\n        break;\n    case 0x48:\n        fcn.0040f96f(var_24h);\ncode_r0x0040d81c:\n        var_18h = *(unaff_EBP + 0xc);\n        goto code_r0x0040d81f;\n    case 0x49:\n        var_24h = fcn.0040f96f(var_24h);\n        goto code_r0x0040d837;\n    case 0x4b:\n        var_18h = fcn.0040f96f(*(unaff_EBP + 0xc), var_24h);\n        goto code_r0x0040d81f;\n    case 0x4d:\n        var_14h = var_24h & 0xffff;\n        var_18h = var_24h >> 0x10 & 0xf000;\n        uVar5 = var_24h >> 0x10 & 0xfff;\n        uVar7 = fcn.0040b5a9(*(unaff_EBP + 0xc));\n        goto code_r0x0040d7d9;\n    case 0x4e:\n        var_18h = *(unaff_EBP + 0xc);\ncode_r0x0040d81f:\n        (*pcVar8)(var_18h, var_14h);\n        break;\n    case 0x50:\n        var_18h = iVar9;\n        var_14h = iVar10;\n        uVar5 = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0040d7d9;\n    case 0x51:\n        var_18h = iVar9;\n        var_14h = iVar10;\n        uVar5 = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = *(unaff_EBP + 0xc);\ncode_r0x0040d7d9:\n        (*pcVar8)(uVar7, uVar5, var_18h, var_14h);\ncode_r0x0040d2dd:\n        *(unaff_EBP + -0x10) = 1;\n    }\ncode_r0x0040d841:\n    if (*(unaff_EBP + 0x14) != NULL) {\n        **(unaff_EBP + 0x14) = *(unaff_EBP + -0x10);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0040a24f();\ncode_r0x0040d4bd:\n    fcn.00421ee3();\n    return;\ncode_r0x0040d837:\n    var_28h = *(unaff_EBP + 0xc);\ncode_r0x0040d83a:\n    uVar4 = (*pcVar8)(var_28h, var_24h);\ncode_r0x0040d83e:\n    *(unaff_EBP + -0x10) = uVar4;\n    goto code_r0x0040d841;\n}\n",
        "token_count": 5074
    },
    "0040dded": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040dded(uint arg_8h)\n\n{\n    int32_t lpWndClass;\n    int16_t iVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_38h;\n    uint var_4h;\n    \n    fcn.00421e3e(0x30);\n    lpWndClass = *(unaff_EBP + 8);\n    iVar2 = fcn.00409f4b(*(lpWndClass + 0x10), *(lpWndClass + 0x24), unaff_EBP + -0x38);\n    if (((iVar2 == 0) && (iVar1 = fcn.00409eb9(lpWndClass),  iVar1 != 0)) &&\n       (iVar2 = fcn.0040f83a(),  *(iVar2 + 0x14) != '\\0')) {\n        fcn.00412786(1);\n        *(unaff_EBP + -4) = 0;\n        fcn.0040f83a();\n        fcn.004044e9(*(lpWndClass + 0x24));\n        fcn.004042ab(10);\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.004127f8(1);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 315
    },
    "0040e384": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e384(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x4c) != 0) {\n    // WARNING: Could not recover jumptable at 0x0040e395. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar1 = (**(**(param_1 + 0x4c) + 0x98))();\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 117
    },
    "0040e3a1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e3a1(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x4c) != 0) {\n    // WARNING: Could not recover jumptable at 0x0040e3b2. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar1 = (**(**(param_1 + 0x4c) + 0x54))();\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 121
    },
    "0040e3bb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e3bb(uint nIDDlgItem)\n\n{\n    uint arg_8h;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        arg_8h = (*_sym.imp.USER32.dll_GetDlgItem)(*(in_ECX + 0x20), nIDDlgItem);\n        fcn.0040b5a9(arg_8h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e3e2. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x4c) + 0x74))();\n    return;\n}\n",
        "token_count": 165
    },
    "0040e3e5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e3e5(uint nIDDlgItem, uint *arg_ch)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(in_ECX + 0x20), nIDDlgItem);\n        *arg_ch = uVar1;\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e40b. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x4c) + 0x70))();\n    return;\n}\n",
        "token_count": 162
    },
    "0040e445": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e445(int32_t param_1)\n\n{\n    if (*(param_1 + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(param_1 + 0x20), 0xfffffff0);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e45c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x50) + 0x78))();\n    return;\n}\n",
        "token_count": 129
    },
    "0040e45f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e45f(int32_t param_1)\n\n{\n    if (*(param_1 + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(param_1 + 0x20), 0xffffffec);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e476. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x50) + 0x7c))();\n    return;\n}\n",
        "token_count": 129
    },
    "0040e479": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e479(uint lpString)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    if (in_ECX != 0) goto code_r0x0040e48a;\n    while( true ) {\n        fcn.00404695();\ncode_r0x0040e48a:\n        iVar1 = (*_sym.imp.USER32.dll_IsWindow)(*(in_ECX + 0x20));\n        if (iVar1 != 0) break;\n        if (*(in_ECX + 0x50) != 0) {\ncode_r0x0040e49c:\n    // WARNING: Could not recover jumptable at 0x0040e4a3. Too many branches\n    // WARNING: Treating indirect jump as call\n            (**(**(in_ECX + 0x50) + 0x88))();\n            return;\n        }\n    }\n    if (*(in_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_SetWindowTextA)(*(in_ECX + 0x20), lpString);\n        return;\n    }\n    goto code_r0x0040e49c;\n}\n",
        "token_count": 262
    },
    "0040e4c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e4c0(int32_t param_1)\n\n{\n    if (*(param_1 + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(param_1 + 0x20));\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e4d5. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x50) + 0x90))();\n    return;\n}\n",
        "token_count": 126
    },
    "0040e4db": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e4db(uint X, uint Y, uint nWidth, uint nHeight, uint bRepaint)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_MoveWindow)(*(in_ECX + 0x20), X, Y, nWidth, nHeight, bRepaint);\n    }\n    else {\n        (**(**(in_ECX + 0x50) + 0x98))(X, Y, nWidth, nHeight);\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "0040e51b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e51b(uint nCmdShow)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_ShowWindow)(*(in_ECX + 0x20), nCmdShow);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e53c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x50) + 0xa0))();\n    return;\n}\n",
        "token_count": 133
    },
    "0040e542": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e542(int32_t param_1)\n\n{\n    if (*(param_1 + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_IsWindowEnabled)(*(param_1 + 0x20));\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e557. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x50) + 0xa4))();\n    return;\n}\n",
        "token_count": 121
    },
    "0040e55d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e55d(uint bEnable)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(in_ECX + 0x20), bEnable);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e57e. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x50) + 0xa8))();\n    return;\n}\n",
        "token_count": 131
    },
    "0040e584": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e584(int32_t param_1)\n\n{\n    uint arg_8h;\n    \n    if (*(param_1 + 0x50) == 0) {\n        arg_8h = (*_sym.imp.USER32.dll_SetFocus)(*(param_1 + 0x20));\n        fcn.0040b5a9(arg_8h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e59f. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x50) + 0xb0))();\n    return;\n}\n",
        "token_count": 149
    },
    "0040e5ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e5ce(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    uint unaff_EBP;\n    \n    if (*(in_ECX + 0x50) != 0) {\n        fcn.0040e5a5(in_ECX, arg_8h, 2, arg_ch, arg_10h, 0, unaff_EBP);\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "0040e5f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e5f3(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t in_ECX;\n    \n    if ((*(in_ECX + 0x50) == 0) && (*(arg_8h + 0x4c) != 0)) {\n        (**(**(arg_8h + 0x4c) + 0x9c))();\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "0040e61c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e61c(uint *param_1)\n\n{\n    if (param_1[1] != 0) {\n    // WARNING: Could not recover jumptable at 0x0040e627. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(*param_1[1] + 0x78))();\n        return;\n    }\n    (*_sym.imp.USER32.dll_GetWindowLongA)(*param_1, 0xfffffff0);\n    return;\n}\n",
        "token_count": 115
    },
    "0040e7a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e7a6(int32_t arg_8h, uint X, uint Y, uint cx, uint cy, uint uFlags)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        if (arg_8h != 0) {\n            arg_8h = *(arg_8h + 0x20);\n        }\n        (*_sym.imp.USER32.dll_SetWindowPos)(*(in_ECX + 0x20), arg_8h, X, Y, cx, cy, uFlags);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0040e7de. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x50) + 0x9c))();\n    return;\n}\n",
        "token_count": 198
    },
    "0040e7e4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e7e4(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    if ((in_ECX != 0) && (*(in_ECX + 0x50) == 0)) {\n        arg_8h_00 = (*_sym.imp.USER32.dll_GetParent)(*(in_ECX + 0x20));\n        iVar1 = fcn.00413c77(arg_8h_00);\n        if ((iVar1 != 0) && (*(iVar1 + 0x4c) != 0)) {\n            (**(**(iVar1 + 0x4c) + 0x9c))();\n        }\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "0040e84a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040e84a(int32_t *arg_8h, code *arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t in_ECX;\n    bool bVar7;\n    code *var_8h;\n    int32_t var_4h;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        piVar2 = NULL;\n    }\n    else {\n        if ((*(in_ECX + 0x3c) & 0x800) == 0) {\n            iVar3 = fcn.0040bbb7(5);\n            while (iVar3 != 0) {\n                uVar6 = fcn.0040e45f();\n                if ((((uVar6 & 0x10000) != 0) && (uVar6 = fcn.0040e445(),  (uVar6 & 0x10000000) != 0)) &&\n                   (uVar6 = fcn.0040e445(),  (uVar6 & 0x8000000) == 0)) {\n                    return NULL;\n                }\n                iVar3 = fcn.0040e78a(2);\n            }\n        }\n        if (arg_ch == NULL) {\n            var_8h = fcn.0040855d;\n            arg_ch = method.ATL::CFixedStringMgr.virtual_16;\n        }\n        else {\n            var_8h = fcn.0040e83f;\n            arg_ch = method.ATL::CFixedStringMgr.virtual_12;\n        }\n        var_4h = (*arg_ch)();\njoined_r0x0040e8e7:\n        do {\n            if (var_4h == 0) goto code_r0x0040e93c;\n            ppiVar4 = (*var_8h)(&var_4h);\n            piVar1 = *ppiVar4;\n            if (arg_8h == NULL) {\n                if (piVar1[1] == 0) {\n                    iVar3 = *piVar1;\n                }\n                else {\n                    iVar3 = *(piVar1[1] + 0x24);\n                }\n                if ((iVar3 != 0) && (iVar5 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar3 == iVar5)) break;\n                if (piVar1[1] == 0) goto joined_r0x0040e8e7;\n                bVar7 = piVar1[1] == *(*(in_ECX + 0x4c) + 0x70);\n            }\n            else {\n                bVar7 = arg_8h == piVar1;\n            }\n        } while (!bVar7);\n        if (piVar1 == NULL) {\ncode_r0x0040e93c:\n            piVar2 = NULL;\n        }\n        else {\n            do {\n                if (var_4h == 0) {\n                    var_4h = (*arg_ch)();\n                }\n                ppiVar4 = (*var_8h)(&var_4h);\n                piVar2 = *ppiVar4;\n                uVar6 = fcn.0040e61c();\n            } while ((piVar2 != piVar1) &&\n                    ((((uVar6 & 0x10000) == 0 || ((uVar6 & 0x8000000) != 0)) || ((uVar6 & 0x10000000) == 0))));\n        }\n    }\n    return piVar2;\n}\n",
        "token_count": 813
    },
    "0040e98a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e98a(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (*(in_ECX + 0x4c) == 0) {\n        return;\n    }\n    if (arg_8h == NULL) {\n        return;\n    }\n    if ((arg_8h[2] == 0) ||\n       (iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*arg_8h, 0xf0, 0, 0),  puVar4 = arg_8h,  iVar2 != 1)) {\n        puVar3 = fcn.0041cc91(arg_8h, 0);\n        arg_8h = puVar3;\n        fcn.0040835f(&arg_8h);\n        do {\n            if (arg_8h == NULL) {\ncode_r0x0040ea31:\n                arg_8h = puVar3;\n                fcn.0040e734(&arg_8h);\n                while( true ) {\n                    if (arg_8h == NULL) {\n                        return;\n                    }\n                    puVar4 = fcn.0040e734(&arg_8h);\n                    puVar4 = *puVar4;\n                    if ((puVar4[2] != 0) && (iVar2 = (*pcVar1)(*puVar4, 0xf0, 0, 0),  iVar2 == 1)) break;\n                    uVar5 = fcn.0040e61c();\n                    if ((uVar5 & 0x20000) != 0) {\n                        return;\n                    }\n                }\n                break;\n            }\n            puVar4 = fcn.0040835f(&arg_8h);\n            puVar4 = *puVar4;\n            uVar5 = fcn.0040e61c();\n            if ((uVar5 & 0x20000) != 0) goto code_r0x0040ea31;\n        } while ((puVar4[2] == 0) || (iVar2 = (*pcVar1)(*puVar4, 0xf0, 0, 0),  iVar2 != 1));\n    }\n    (*pcVar1)(*puVar4, 0xf1, 0, 0);\n    return;\n}\n",
        "token_count": 572
    },
    "0040ea9c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040ea9c(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t in_ECX;\n    \n    fcn.0040e6d6(in_ECX);\n    while ((0 < arg_ch && (*(in_ECX + 4) != 0))) {\n        if (*(arg_8h + 4) != 0) {\n            fcn.0040e716(arg_8h + 4);\n        }\n        arg_ch = arg_ch + -1;\n    }\n    return arg_8h;\n}\n",
        "token_count": 127
    },
    "0040eada": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.0040eada(uint lpString, uint nMaxCount)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    if (*(extraout_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowTextA)(*(extraout_ECX + 0x20), *(unaff_EBP + 8), *(unaff_EBP + 0xc));\n    }\n    else {\n        fcn.00402630();\n        iVar1 = **(extraout_ECX + 0x50);\n        *(unaff_EBP + -4) = 0;\n        (**(iVar1 + 0x8c))(unaff_EBP + -0x10);\n        fcn.00403eca(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x10), 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(*(unaff_EBP + 8));\n        fcn.00401240();\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 316
    },
    "0040eb70": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040eb70(uint arg_8h)\n\n{\n    char cVar1;\n    uint arg_8h_00;\n    uint in_ECX;\n    uint *arg_8h_01;\n    uint var_10h;\n    uint var_8h;\n    uint *var_4h;\n    \n    fcn.0040e6d6(in_ECX);\n    fcn.0040e6d6(&var_8h);\n    while (var_4h != NULL) {\n        arg_8h_01 = var_4h;\n        arg_8h_00 = fcn.0040e772(var_4h);\n        cVar1 = fcn.0040e67e(arg_8h_00);\n        if (cVar1 != '\\0') goto code_r0x0040ebc7;\n        fcn.0040e6f7(&var_8h);\n        fcn.0040e753(&var_4h);\n    }\n    arg_8h_01 = &var_10h;\ncode_r0x0040ebc7:\n    fcn.0040e6d6(arg_8h_01);\n    return arg_8h;\n}\n",
        "token_count": 268
    },
    "0040ebd6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040ebd6(int32_t arg_8h)\n\n{\n    char cVar1;\n    uint arg_8h_00;\n    int32_t in_ECX;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = in_ECX;\n    fcn.0040e828(in_ECX);\n    fcn.0040eb4d(&var_8h, 1);\n    while( true ) {\n        if (var_4h == 0) {\n            return arg_8h;\n        }\n        arg_8h_00 = fcn.0040e772(var_4h);\n        cVar1 = fcn.0040e67e(arg_8h_00);\n        if (cVar1 != '\\0') break;\n        fcn.0040e716(&var_4h);\n        if (*(arg_8h + 4) != 0) {\n            fcn.0040e716(arg_8h + 4);\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 240
    },
    "0040ec90": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040ec90(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar3 = *(param_1 + 0x4c);\n    if (iVar3 == 0) {\n        return iVar3;\n    }\n    var_8h = *(iVar3 + 0x44);\n    var_4h = param_1;\n    while( true ) {\n        if (var_8h == 0) {\n            return 0;\n        }\n        if (var_8h == 0) break;\n        piVar1 = fcn.0040e772(var_8h);\n        if (piVar1[1] == 0) {\n            iVar3 = *piVar1;\n        }\n        else {\n            iVar3 = *(piVar1[1] + 0x24);\n        }\n        if ((iVar3 != 0) && (iVar2 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar3 == iVar2)) {\n            return var_8h;\n        }\n        if ((piVar1[1] != 0) && (piVar1[1] == *(*(var_4h + 0x4c) + 0x70))) {\n            return var_8h;\n        }\n        fcn.0040e716(&var_8h);\n    }\n    fcn.00404695();\n    return var_8h;\n}\n",
        "token_count": 352
    },
    "0040ed1e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040ed1e(uint param_1)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    uint var_10h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.0040e6d6(param_1);\n    bVar1 = false;\n    do {\n        if ((var_4h == 0) || (fcn.0040e716(&var_4h),  var_4h == 0)) {\ncode_r0x0040ed63:\n            uVar3 = fcn.0040eb70(&var_10h);\n            fcn.0040e6f7(uVar3);\n            if (var_4h == 0) {\n                return;\n            }\n            if (bVar1) {\n                return;\n            }\n            bVar1 = true;\n        }\n        else {\n            uVar3 = fcn.0040e772(var_4h);\n            cVar2 = fcn.0040e67e(uVar3);\n            if (cVar2 != '\\0') goto code_r0x0040ed63;\n        }\n        uVar3 = fcn.0040e772(var_4h);\n        cVar2 = fcn.0040e635(uVar3);\n        if (cVar2 == '\\0') {\n            fcn.0040e6f7(&var_8h);\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 330
    },
    "0040eda7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040eda7(uint param_1)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    uint var_10h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.0040e6d6(param_1);\n    bVar1 = false;\n    do {\n        if (var_4h == 0) goto code_r0x0040ede8;\n        uVar3 = fcn.0040e772(var_4h);\n        cVar2 = fcn.0040e67e(uVar3);\n        if (cVar2 != '\\0') goto code_r0x0040ede8;\n        fcn.0040e753(&var_4h);\n        while (var_4h == 0) {\ncode_r0x0040ede8:\n            uVar3 = fcn.0040ebd6(&var_10h);\n            fcn.0040e6f7(uVar3);\n            if (var_4h == 0) {\n                return;\n            }\n            if (bVar1) {\n                return;\n            }\n            bVar1 = true;\n        }\n        uVar3 = fcn.0040e772(var_4h);\n        cVar2 = fcn.0040e635(uVar3);\n        if (cVar2 == '\\0') {\n            fcn.0040e6f7(&var_8h);\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 337
    },
    "0040ee32": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ee32(int32_t arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint uVar1;\n    int32_t in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*(in_ECX + 0x4c) != 0) {\n        if (arg_8h == 0) {\n            arg_8h_00 = fcn.0040ec90();\n        }\n        else {\n            arg_8h_00 = fcn.0040ec37(arg_8h);\n        }\n        if ((arg_8h_00 != 0) && (fcn.0040eda7(),  arg_8h_00 != 0)) {\n            uVar1 = fcn.0040e772(arg_8h_00);\n            return uVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 202
    },
    "0040ee89": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ee89(int32_t arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint uVar1;\n    int32_t in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*(in_ECX + 0x4c) != 0) {\n        if (arg_8h == 0) {\n            arg_8h_00 = fcn.0040ec90();\n        }\n        else {\n            arg_8h_00 = fcn.0040ec37(arg_8h);\n        }\n        if ((arg_8h_00 != 0) && (fcn.0040ed1e(),  arg_8h_00 != 0)) {\n            uVar1 = fcn.0040e772(arg_8h_00);\n            return uVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 203
    },
    "0040eee5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.0040eee5(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (*0x44f7b8 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        *0x44f7b8 = iVar2;\n        if (iVar2 == 0) {\n            iVar2 = fcn.00404695();\n        }\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        *0x44f7a4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"CreateActCtxW\");\n        *0x44f7a8 = (*pcVar1)(*0x44f7b8, \"ReleaseActCtx\");\n        *0x44f7ac = (*pcVar1)(*0x44f7b8, \"ActivateActCtx\");\n        *0x44f7b0 = (*pcVar1)(*0x44f7b8, \"DeactivateActCtx\");\n    }\n    return;\n}\n",
        "token_count": 233
    },
    "0040efae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuchar __cdecl fcn.0040efae(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uchar uVar2;\n    \n    if (arg_ch == 0) {\n        fcn.00404695();\n    }\n    if (*0x44f7ac == 0) {\n        uVar2 = 2;\n    }\n    else {\n        iVar1 = fcn.0040ef80(arg_8h, arg_ch);\n        uVar2 = iVar1 != 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 124
    },
    "0040efe1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040efe1(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint arg_8h;\n    uint var_230h;\n    uint var_22ch;\n    uint *var_228h;\n    uint var_21ch;\n    uint var_214h;\n    uint lpFilename;\n    int16_t var_8h;\n    ushort var_6h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    fcn.0040eee5();\n    uVar2 = *(param_1 + 8);\n    var_6h = 0;\n    var_8h = 0;\n    arg_8h = 0x105;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(uVar2, &lpFilename);\n    if (iVar1 != 0) {\n        if (var_8h == 0) {\n            var_228h = &lpFilename;\n            puVar3 = &var_230h;\n            var_230h = 0x20;\n            var_22ch = 0x88;\n            var_21ch = 2;\n            var_214h = uVar2;\n            iVar1 = fcn.0040ef53(puVar3);\n            *(param_1 + 0x80) = iVar1;\n            if (iVar1 == -1) {\n                var_21ch = 3;\n                uVar2 = fcn.0040ef53(&var_230h);\n                *(param_1 + 0x80) = uVar2;\n            }\n            if (*(param_1 + 0x80) == -1) {\n                var_21ch = 1;\n                iVar1 = fcn.0040ef53(puVar3, &var_230h);\n                *(param_1 + 0x80) = iVar1;\n                if (iVar1 == -1) {\n                    *(param_1 + 0x80) = 0;\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x6f);\n        }\n    }\n    fcn.00420bb4(arg_8h);\n    return;\n}\n",
        "token_count": 514
    },
    "0040f16a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f16a(code **param_1)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    \n    *param_1 = vtable.AFX_MODULE_THREAD_STATE.0;\n    if (param_1[0xf] != NULL) {\n        (**(*param_1[0xf] + 0x144))();\n    }\n    fcn.00403dd7(param_1[0x12]);\n    if (param_1[5] != NULL) {\n        (***param_1[5])(1);\n    }\n    if (param_1[6] != NULL) {\n        (***param_1[6])(1);\n    }\n    if (param_1[7] != NULL) {\n        (***param_1[7])(1);\n    }\n    if (param_1[8] != NULL) {\n        (***param_1[8])(1);\n    }\n    if (param_1[9] != NULL) {\n        (***param_1[9])(1);\n    }\n    pcVar2 = param_1[0xe];\n    if (pcVar2 != NULL) {\n        while (*(pcVar2 + 0xc) != 0) {\n            uVar1 = fcn.0041cc1b();\n            fcn.00403dd7(uVar1);\n            pcVar2 = param_1[0xe];\n        }\n    }\n    if (param_1[0xc] != NULL) {\n        (**(*param_1[0xc] + 4))(1);\n    }\n    if (param_1[0xd] != NULL) {\n        (**(*param_1[0xd] + 4))(1);\n    }\n    if (param_1[0xe] != NULL) {\n        (**(*param_1[0xe] + 4))(1);\n    }\n    return;\n}\n",
        "token_count": 408
    },
    "0040f366": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f366(code **param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t **ppiVar3;\n    \n    *param_1 = vtable.CDllIsolationWrapperBase.0;\n    if (*(param_1 + 2) != '\\0') {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(param_1[1]);\n    }\n    ppiVar3 = param_1[3] + -0x10;\n    piVar1 = param_1[3] + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar3 + 4))(ppiVar3);\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "0040f886": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040f886(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    \n    iVar1 = fcn.0040f83a();\n    if ((*(iVar1 + 0x7c) == 0) || (*(arg_8h + 0x80) == -1)) {\n        *(in_ECX + 4) = 0;\n    }\n    else {\n        uVar2 = fcn.0040ef80(*(arg_8h + 0x80));\n        *(in_ECX + 4) = uVar2;\n    }\n    return;\n}\n",
        "token_count": 150
    },
    "0040f8fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040f8fb(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e0b(0);\n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x18) == 0) && (*(unaff_EBP + 8) != 0)) {\n        arg_8h_00 = fcn.00403d91(fcn.0041248c);\n        iVar2 = fcn.00403da8(0x60);\n        *(unaff_EBP + 8) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00412826(0x43e47c, fcn.0040f8e1, fcn.0040fd33, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x18) = uVar3;\n        fcn.00403d91(arg_8h_00);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 332
    },
    "0040f9d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040f9d0(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        return 0;\n    }\n    uVar1 = fcn.0040f9a4();\n    uVar1 = (*_sym.imp.USER32.dll_DestroyMenu)(uVar1);\n    return uVar1;\n}\n",
        "token_count": 91
    },
    "0040fa3f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040fa3f(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    iVar1 = arg_8h;\n    fcn.0040e3e5(arg_8h, &arg_8h);\n    if (arg_8h == 0) {\n        iVar2 = fcn.0040e3a1(iVar1);\n        if (iVar2 == 0) {\n            fcn.00404679();\n        }\n    }\n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 8) = iVar1;\n    return arg_8h;\n}\n",
        "token_count": 162
    },
    "0040fa80": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040fa80(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = arg_10h;\n    if (*(arg_10h + 0x20) != 0) {\n        return;\n    }\n    iVar1 = fcn.0040e378();\n    if (iVar1 != 0) {\n        return;\n    }\n    fcn.0040fa3f(arg_ch);\n    fcn.0040e3e5(arg_ch, &arg_10h);\n    if (arg_10h != 0) {\n        iVar1 = fcn.0040c0ae(arg_10h);\n        if (iVar1 == 0) {\n            fcn.00404679();\n        }\n        if (arg_10h != 0) {\n            iVar1 = *(arg_8h + 4);\n            iVar2 = (*_sym.imp.USER32.dll_GetParent)(*(iVar2 + 0x20));\n            if (*(iVar1 + 0x20) == iVar2) {\n                return;\n            }\n            arg_ch = 0;\n            goto code_r0x0040fafd;\n        }\n    }\n    iVar2 = fcn.0040e3a1(arg_ch);\n    if (iVar2 == 0) {\n        return;\n    }\n    iVar1 = *(arg_8h + 4);\ncode_r0x0040fafd:\n    fcn.0040e5f3(iVar1, arg_ch);\n    return;\n}\n",
        "token_count": 351
    },
    "0040fb27": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040fb27(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint arg_8h_00;\n    int32_t arg_8h_01;\n    uint uVar1;\n    int32_t iVar2;\n    \n    arg_8h_00 = fcn.0040fb0b(arg_ch);\n    if (*arg_8h == 0) {\n        fcn.00412395(arg_8h_00, *arg_10h);\n    }\n    else {\n        arg_8h_01 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(arg_8h_00);\n        iVar2 = arg_8h_01 + 1;\n        uVar1 = fcn.00404815(arg_8h_01);\n        (*_sym.imp.USER32.dll_GetWindowTextA)(arg_8h_00, uVar1, arg_8h_01, iVar2);\n        fcn.004047eb(0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 231
    },
    "00410208": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00410208(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e0b(0);\n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x1c) == 0) && (*(unaff_EBP + 8) != 0)) {\n        arg_8h_00 = fcn.00403d91(fcn.0041248c);\n        iVar2 = fcn.00403da8(0x60);\n        *(unaff_EBP + 8) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00412826(0x43e560, fcn.004101cd, fcn.0040fd33, 4, 2);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x1c) = uVar3;\n        fcn.00403d91(arg_8h_00);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 328
    },
    "004102f9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004102f9(code **param_1)\n\n{\n    uint uVar1;\n    \n    *param_1 = vtable.CDC.0;\n    if (param_1[1] != NULL) {\n        uVar1 = fcn.004102c6();\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "004104c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004104c4(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00421e0b(0);\n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x20) == 0) && (*(unaff_EBP + 8) != 0)) {\n        arg_8h_00 = fcn.00403d91(fcn.0041248c);\n        iVar2 = fcn.00403da8(0x60);\n        *(unaff_EBP + 8) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00412826(0x43e5d0, fcn.004101ee, fcn.0040fd33, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x20) = uVar3;\n        fcn.00403d91(arg_8h_00);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 329
    },
    "004105a4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004105a4(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        return 0;\n    }\n    uVar1 = fcn.00410578();\n    uVar1 = (*_sym.imp.GDI32.dll_DeleteObject)(uVar1);\n    return uVar1;\n}\n",
        "token_count": 87
    },
    "0041071a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041071a(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    if (in_ECX != 0) goto code_r0x0041072a;\n    do {\n        in_ECX = fcn.00404695();\ncode_r0x0041072a:\n    } while (arg_8h == 0);\n    do {\n        if (in_ECX == arg_8h) {\n            return 1;\n        }\n        in_ECX = *(in_ECX + 0x10);\n    } while (in_ECX != 0);\n    return 0;\n}\n",
        "token_count": 140
    },
    "00410763": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410763(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    \n    if (arg_ch != 0) {\n        iVar1 = fcn.00410745(arg_8h);\n        if (iVar1 != 0) {\n            return arg_ch;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 83
    },
    "00410922": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00410922(int32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t **ppiVar2;\n    int32_t *in_ECX;\n    int32_t **ppiVar3;\n    \n    piVar1 = (**(*in_ECX + 0x44))(arg_8h);\n    if (piVar1 == NULL) {\n        ppiVar2 = (**(*in_ECX + 0x38))();\n        if ((((*0x43ef5c == *arg_8h) && (arg_8h[1] == *0x43ef60)) && (arg_8h[2] == *0x43ef64)) &&\n           (arg_8h[3] == *0x43ef68)) {\n            do {\n                for (piVar1 = ppiVar2[1]; *piVar1 != 0; piVar1 = piVar1 + 2) {\n                    if (*(piVar1[1] + in_ECX) != 0) {\n                        return piVar1[1] + in_ECX;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        else {\n            do {\n                for (ppiVar3 = ppiVar2[1]; piVar1 = *ppiVar3,  piVar1 != NULL; ppiVar3 = ppiVar3 + 2) {\n                    if (((*piVar1 == *arg_8h) && (piVar1[1] == arg_8h[1])) &&\n                       ((piVar1[2] == arg_8h[2] && ((piVar1[3] == arg_8h[3] && (*(ppiVar3[1] + in_ECX) != 0)))))) {\n                        return ppiVar3[1] + in_ECX;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        piVar1 = NULL;\n    }\n    return piVar1;\n}\n",
        "token_count": 464
    },
    "004109d5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004109d5(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t *in_ECX;\n    uint var_8h;\n    int32_t var_4h;\n    \n    piVar2 = (**(*in_ECX + 0x38))();\n    do {\n        for (piVar3 = piVar2[1]; *piVar3 != 0; piVar3 = piVar3 + 2) {\n        }\n        for (piVar3 = piVar3 + 1; *piVar3 != -1; piVar3 = piVar3 + 2) {\n            puVar1 = *(in_ECX + *piVar3);\n            if (puVar1 != NULL) {\n                var_4h = 0;\n                iVar4 = (***puVar1)(puVar1, arg_8h, &var_4h);\n                if ((iVar4 == 0) && (var_4h != 0)) {\n                    return var_4h;\n                }\n            }\n        }\n        piVar2 = *piVar2;\n        if (piVar2 == NULL) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 293
    },
    "00410a37": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00410a37(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != 0) {\n        (**(**(param_1 + 8) + 4))(*(param_1 + 8));\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedIncrement)(param_1 + 4);\n    return;\n}\n",
        "token_count": 86
    },
    "00410a52": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00410a52(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    int32_t iVar3;\n    \n    iVar3 = 8;\n    fcn.00421e0b(8);\n    if ((extraout_ECX[1] != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(extraout_ECX + 1),  iVar2 == 0)\n       ) {\n        fcn.0040f886(extraout_ECX[7]);\n        iVar1 = *extraout_ECX;\n        *(unaff_EBP + -4) = 0;\n        (**(iVar1 + 0x10))();\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x10) != 0) {\n            fcn.0040ef97();\n            iVar3 = iVar2;\n        }\n    }\n    fcn.00421ee3(iVar3);\n    return;\n}\n",
        "token_count": 279
    },
    "00410aa8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00410aa8(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    int32_t iVar3;\n    \n    if (*(param_1 + 8) == 0) {\n        iVar3 = 8;\n        fcn.00421e0b(8);\n        if ((extraout_ECX[1] != 0) &&\n           (iVar2 = (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(extraout_ECX + 1),  iVar2 == 0)) {\n            fcn.0040f886(extraout_ECX[7]);\n            iVar1 = *extraout_ECX;\n            *(unaff_EBP + -4) = 0;\n            (**(iVar1 + 0x10))();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*(unaff_EBP + -0x10) != 0) {\n                fcn.0040ef97();\n                iVar3 = iVar2;\n            }\n        }\n        fcn.00421ee3(iVar3);\n        return;\n    }\n    (**(**(param_1 + 8) + 8))(*(param_1 + 8));\n    return;\n}\n",
        "token_count": 291
    },
    "00410b00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410b00(uint arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 8) != 0) {\n        iVar1 = (****(in_ECX + 8))(*(in_ECX + 8), arg_8h, arg_ch);\n        return iVar1;\n    }\n    iVar1 = fcn.00410922(arg_8h);\n    *arg_ch = iVar1;\n    if (iVar1 == 0) {\n        iVar1 = fcn.004109d5(arg_8h);\n        *arg_ch = iVar1;\n        iVar1 = (-(iVar1 != 0) & 0x7fffbffe) + 0x80004002;\n    }\n    else {\n        fcn.00410a37();\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 210
    },
    "00410deb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410deb(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    int32_t extraout_ECX;\n    \n    if (arg_8h == 0) {\n        fcn.00404695();\n        in_ECX = extraout_ECX;\n    }\n    return *(in_ECX + 4) + arg_8h;\n}\n",
        "token_count": 88
    },
    "00411188": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411188(uint *arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    bool bVar2;\n    uint *in_ECX;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar3 = 1;\n    bVar2 = true;\n    if (1 < arg_8h[2]) {\n        do {\n            if ((arg_ch == 0) || (*(in_ECX[4] + 4 + iVar3 * 8) == arg_ch)) {\n                puVar1 = *(arg_8h[3] + iVar3 * 4);\n                if (puVar1 != NULL) {\n                    (***puVar1)(1);\n                }\n                *(arg_8h[3] + iVar3 * 4) = 0;\n            }\n            else if (*(arg_8h[3] + iVar3 * 4) != 0) {\n                bVar2 = false;\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < arg_8h[2]);\n        if (!bVar2) {\n            return;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(in_ECX + 7);\n    fcn.00410e23(arg_8h);\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(in_ECX + 7);\n    (*_sym.imp.KERNEL32.dll_LocalFree)(arg_8h[3]);\n    (***arg_8h)(1);\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*in_ECX, 0);\n    return;\n}\n",
        "token_count": 360
    },
    "00411325": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411325(uint arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    \n    puVar3 = *0x44f954;\n    if (*0x44f954 != NULL) {\n        puVar1 = *0x44f954 + 7;\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar1);\n        if (arg_ch == 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*puVar3);\n            if (iVar4 != 0) {\n                fcn.00411188(iVar4, arg_8h);\n            }\n        }\n        else {\n            iVar4 = puVar3[5];\n            while (iVar4 != 0) {\n                iVar2 = *(iVar4 + 4);\n                fcn.00411188(iVar4, arg_8h);\n                iVar4 = iVar2;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n        return;\n    }\n    return;\n}\n",
        "token_count": 254
    },
    "0041127b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041127b(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_ch;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    if (*(unaff_EBP + 8) != 0) goto code_r0x0041129a;\ncode_r0x00411295:\n    do {\n        fcn.00404695();\ncode_r0x0041129a:\n        if (*extraout_ECX != 0) goto code_r0x004112d5;\n        if (*0x44f954 == 0) {\n            *(unaff_EBP + -0x10) = 0x44f958;\n            *(unaff_EBP + -4) = 0;\n            *0x44f954 = fcn.00410fac();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x44f954 == 0) goto code_r0x00411295;\n        }\n        iVar1 = fcn.00410e94();\n        *extraout_ECX = iVar1;\n        if (iVar1 != 0) {\ncode_r0x004112d5:\n            iVar1 = fcn.00410d06(*extraout_ECX);\n            if (iVar1 == 0) {\n                arg_ch = (**(unaff_EBP + 8))();\n                fcn.00411053(*extraout_ECX, arg_ch);\n            }\n            fcn.00421ee3();\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 388
    },
    "00411481": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00411481(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    if ((arg_ch == 0) || (arg_8h == 0)) {\n        iVar1 = 0;\n    }\n    else {\n        if ((*(in_ECX + 0x18) & 1) == 0) {\n            fcn.004121ee(4, *(in_ECX + 0x14));\n        }\n        uVar3 = *(in_ECX + 0x2c) - *(in_ECX + 0x28);\n        if (arg_ch < uVar3) {\n            uVar3 = arg_ch;\n        }\n        fcn.00403e88(arg_8h, arg_ch, *(in_ECX + 0x28), uVar3);\n        *(in_ECX + 0x28) = *(in_ECX + 0x28) + uVar3;\n        arg_8h = arg_8h + uVar3;\n        uVar3 = arg_ch - uVar3;\n        if (uVar3 != 0) {\n            iVar1 = uVar3 - uVar3 % *(in_ECX + 0x20);\n            var_8h = 0;\n            var_4h = iVar1;\n            do {\n                iVar2 = (**(**(in_ECX + 0x24) + 0x34))(arg_8h, var_4h);\n                arg_8h = arg_8h + iVar2;\n                var_8h = var_8h + iVar2;\n                var_4h = var_4h - iVar2;\n                if (iVar2 == 0) break;\n            } while (var_4h != 0);\n            uVar3 = uVar3 - var_8h;\n            if ((uVar3 != 0) && (var_8h == iVar1)) {\n                uVar4 = 0;\n                if (*(in_ECX + 8) == 0) {\n                    if ((*(in_ECX + 0xc) != 0) || (var_4h = *(in_ECX + 0x20),  *(in_ECX + 0x20) < uVar3)) {\n                        var_4h = uVar3;\n                    }\n                    var_8h = *(in_ECX + 0x30);\n                    do {\n                        iVar1 = (**(**(in_ECX + 0x24) + 0x34))(var_8h, var_4h);\n                        var_8h = var_8h + iVar1;\n                        var_4h = var_4h - iVar1;\n                        uVar4 = uVar4 + iVar1;\n                        if ((iVar1 == 0) || (var_4h == 0)) break;\n                    } while (uVar4 < uVar3);\n                    iVar1 = *(in_ECX + 0x30);\n                    *(in_ECX + 0x2c) = iVar1 + uVar4;\n                }\n                else {\n                    (**(**(in_ECX + 0x24) + 0x50))(0, *(in_ECX + 0x20), in_ECX + 0x30, in_ECX + 0x2c);\n                    iVar1 = *(in_ECX + 0x30);\n                }\n                uVar4 = *(in_ECX + 0x2c) - iVar1;\n                *(in_ECX + 0x28) = iVar1;\n                if (uVar3 < uVar4) {\n                    uVar4 = uVar3;\n                }\n                fcn.00403e88(arg_8h, uVar3, iVar1, uVar4);\n                *(in_ECX + 0x28) = *(in_ECX + 0x28) + uVar4;\n                uVar3 = uVar3 - uVar4;\n            }\n        }\n        iVar1 = arg_ch - uVar3;\n    }\n    return iVar1;\n}\n",
        "token_count": 937
    },
    "004115b2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004115b2(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar3 = *(param_1 + 0x28);\n    if ((*(param_1 + 0x18) & 1) == 0) {\n        piVar1 = param_1 + 0x30;\n        iVar2 = *piVar1;\n        if (*(param_1 + 8) == 0) {\n            if (iVar3 != iVar2) {\n                (**(**(param_1 + 0x24) + 0x38))(iVar2, iVar3 - iVar2);\n            }\n        }\n        else {\n            if (iVar3 != iVar2) {\n                (**(**(param_1 + 0x24) + 0x50))(2, iVar3 - iVar2, 0, 0);\n            }\n            (**(**(param_1 + 0x24) + 0x50))(1, *(param_1 + 0x20), piVar1, param_1 + 0x2c);\n        }\n        iVar3 = *piVar1;\n    }\n    else {\n        if (*(param_1 + 0x2c) != iVar3) {\n            iVar3 = iVar3 - *(param_1 + 0x2c);\n            (**(**(param_1 + 0x24) + 0x28))(iVar3, iVar3 >> 0x1f, 1);\n        }\n        iVar3 = *(param_1 + 0x2c);\n    }\n    *(param_1 + 0x28) = iVar3;\n    return;\n}\n",
        "token_count": 376
    },
    "0041162a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041162a(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_10h;\n    uint32_t uVar2;\n    uint32_t arg_8h_00;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint arg_8h_01;\n    int32_t in_stack_ffffffe4;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    iVar4 = in_ECX;\n    if ((*(in_ECX + 0x18) & 1) != 0) goto code_r0x00411646;\n    arg_8h_01 = 4;\n    in_stack_ffffffe4 = *(in_ECX + 0x14);\n    do {\n        fcn.004121ee(arg_8h_01, in_stack_ffffffe4);\n        iVar4 = in_ECX;\ncode_r0x00411646:\n        in_ECX = in_stack_ffffffe4;\n        arg_10h = *(iVar4 + 0x28);\n        piVar1 = iVar4 + 0x2c;\n        var_4h = *piVar1 - arg_10h;\n        uVar2 = arg_8h + var_4h;\n        if (*(iVar4 + 8) == 0) {\n            arg_8h_00 = *(iVar4 + 0x30);\n            if (arg_8h_00 < arg_10h) {\n                if (0 < var_4h) {\n                    fcn.00411460(arg_8h_00, *piVar1 - arg_8h_00, arg_10h, var_4h);\n                    arg_8h_00 = *(iVar4 + 0x30);\n                    *(iVar4 + 0x28) = arg_8h_00;\n                    *piVar1 = arg_8h_00 + var_4h;\n                }\n                if (*(iVar4 + 0xc) == 0) {\n                    arg_8h = *(iVar4 + 0x20);\n                }\n                arg_8h = arg_8h - var_4h;\n                iVar5 = var_4h + arg_8h_00;\n                do {\n                    iVar3 = (**(**(iVar4 + 0x24) + 0x34))(iVar5, arg_8h);\n                    var_4h = var_4h + iVar3;\n                    arg_8h = arg_8h - iVar3;\n                    iVar5 = iVar5 + iVar3;\n                    if ((iVar3 == 0) || (arg_8h == 0)) break;\n                } while (var_4h < uVar2);\n                *(iVar4 + 0x28) = *(iVar4 + 0x30);\n                *piVar1 = *(iVar4 + 0x30) + var_4h;\n            }\n        }\n        else {\n            if (var_4h != 0) {\n                (**(**(iVar4 + 0x24) + 0x28))(-var_4h, -var_4h >> 0x1f, 1);\n            }\n            (**(**(iVar4 + 0x24) + 0x50))(0, *(iVar4 + 0x20), iVar4 + 0x30, piVar1);\n            *(iVar4 + 0x28) = *(iVar4 + 0x30);\n        }\n        if (uVar2 <= *piVar1 - *(iVar4 + 0x28)) {\n            return;\n        }\n        arg_8h_01 = 3;\n        in_stack_ffffffe4 = in_ECX;\n    } while( true );\n}\n",
        "token_count": 840
    },
    "00411825": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00411825(int32_t lpString1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    \n    if (lpString1 == 0) {\n        fcn.00404695();\n    }\n    iVar1 = fcn.0040f83a();\n    fcn.00412786(0);\n    puVar2 = *(iVar1 + 0x1c);\n    while( true ) {\n        if (puVar2 == NULL) {\n            fcn.004127f8(0);\n            return NULL;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(lpString1, *puVar2);\n        if (iVar1 == 0) break;\n        puVar2 = puVar2[5];\n    }\n    fcn.004127f8(0);\n    return puVar2;\n}\n",
        "token_count": 193
    },
    "004118fe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004118fe(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t arg_ch_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    int32_t iVar1;\n    \n    if ((arg_ch != 0) && (arg_8h != 0)) {\n        if ((~*(in_ECX + 0x18) & 1) == 0) {\n            fcn.004121ee(2, *(in_ECX + 0x14));\n        }\n        arg_ch_00 = *(in_ECX + 0x2c) - *(in_ECX + 0x28);\n        arg_14h = arg_ch;\n        if (arg_ch_00 <= arg_ch) {\n            arg_14h = arg_ch_00;\n        }\n        fcn.00403e88(*(in_ECX + 0x28), arg_ch_00, arg_8h, arg_14h);\n        *(in_ECX + 0x28) = *(in_ECX + 0x28) + arg_14h;\n        arg_ch = arg_ch - arg_14h;\n        if (arg_ch != 0) {\n            fcn.004115b2();\n            iVar1 = arg_ch - arg_ch % *(in_ECX + 0x20);\n            (**(**(in_ECX + 0x24) + 0x38))(arg_8h + arg_14h, iVar1);\n            arg_ch = arg_ch - iVar1;\n            if (*(in_ECX + 8) != 0) {\n                (**(**(in_ECX + 0x24) + 0x50))(1, *(in_ECX + 0x20), in_ECX + 0x30, in_ECX + 0x2c);\n                *(in_ECX + 0x28) = *(in_ECX + 0x30);\n            }\n            if (arg_ch < *(in_ECX + 0x20)) goto code_r0x004119a5;\n            do {\n                fcn.00404695();\ncode_r0x004119a5:\n            } while (*(in_ECX + 0x28) != *(in_ECX + 0x30));\n            fcn.00403e88(*(in_ECX + 0x28), arg_ch, arg_8h + arg_14h + iVar1, arg_ch);\n            *(in_ECX + 0x28) = *(in_ECX + 0x28) + arg_ch;\n        }\n    }\n    return;\n}\n",
        "token_count": 570
    },
    "00411bae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411bae(int32_t arg_8h)\n\n{\n    if (arg_8h < 0) {\n        if (arg_8h == -0x7ff8fff2) {\n            fcn.0040465d();\n        }\n        fcn.00403fa7(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "00411bd3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411bd3(uint arg_8h, uint arg_ch)\n\n{\n    ushort *in_ECX;\n    \n    if (arg_ch == 0xb) {\n        *in_ECX = 0xb;\n        if (arg_8h == 0) {\n            arg_8h._0_2_ = 0;\n        }\n        else {\n            arg_8h._0_2_ = -1;\n        }\n    }\n    else {\n        *in_ECX = 2;\n    }\n    in_ECX[4] = arg_8h;\n    return;\n}\n",
        "token_count": 131
    },
    "00411c09": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411c09(int32_t arg_8h, uint arg_ch)\n\n{\n    ushort uVar1;\n    ushort *in_ECX;\n    \n    if (arg_ch == 10) {\n        uVar1 = 10;\n    }\n    else {\n        if (arg_ch == 0xb) {\n            *in_ECX = 0xb;\n            if (arg_8h == 0) {\n                uVar1 = 0;\n            }\n            else {\n                uVar1 = 0xffff;\n            }\n            in_ECX[4] = uVar1;\n            return;\n        }\n        if (arg_ch == 0x16) {\n            uVar1 = 0x16;\n        }\n        else if (arg_ch == 0x17) {\n            uVar1 = 0x17;\n        }\n        else if (arg_ch == 0x19) {\n            uVar1 = 0x19;\n        }\n        else if (arg_ch == 0x13) {\n            uVar1 = 0x13;\n        }\n        else {\n            uVar1 = 3;\n        }\n    }\n    *in_ECX = uVar1;\n    *(in_ECX + 4) = arg_8h;\n    return;\n}\n",
        "token_count": 278
    },
    "0041230c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041230c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint unaff_EBX;\n    uint lpString;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    if (*(in_ECX + 0x54) == 0) {\n        fcn.0042297c(&lpString, 0x10, 0x43cba8, arg_10h);\n        (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(arg_8h, arg_ch, &lpString, *(in_ECX + 0x68));\n    }\n    else {\n        iVar1 = fcn.004122c4(arg_8h);\n        if (iVar1 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar1, arg_ch, 0, 4, &arg_10h, 4);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        }\n    }\n    fcn.00420bb4(unaff_EBX);\n    return;\n}\n",
        "token_count": 273
    },
    "0041271d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.0041271d(void)\n\n{\n    if (*0x44f990 == 0) {\n        *0x44f990 = 1;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x44fb30);\n    }\n    return *0x44f990;\n}\n",
        "token_count": 69
    },
    "00412786": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412786(uint32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    \n    if (0x10 < arg_8h) {\n        fcn.00404695();\n    }\n    if (*0x44f990 == 0) {\n        fcn.0041271d();\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n    piVar1 = arg_8h * 4 + 0x44fb48;\n    if (*piVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x44fb30);\n        if (*piVar1 == 0) {\n            (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(arg_8h * 0x18 + 0x44f998);\n            *piVar1 = *piVar1 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x44fb30);\n    }\n    (*pcVar2)(arg_8h * 0x18 + 0x44f998);\n    return;\n}\n",
        "token_count": 252
    },
    "00412962": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00412962(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (param_1 != 0) {\n        var_8h = -(*(param_1 + 0x44) != 0);\n        while (var_8h != 0) {\n            fcn.00413d2d(&var_8h, &var_ch, &var_4h);\n            puVar1 = *(param_1 + 0x58) + var_4h;\n            *puVar1 = 0;\n            if (*(param_1 + 0x5c) == 2) {\n                puVar1[1] = 0;\n            }\n            (**(param_1 + 0x18))(var_4h);\n        }\n        fcn.00413bf1();\n        fcn.0041d8f8();\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "00412a35": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00412a35(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    \n    iVar1 = fcn.0040f86d();\n    if ((*(iVar1 + 0x10) != 0) && (iVar2 = *(iVar1 + 0x10) + -1,  *(iVar1 + 0x10) = iVar2,  iVar2 == 0)) {\n        if (arg_8h != 0) {\n            if (((arg_8h != -1) && (iVar2 = fcn.00405d91(),  iVar2 != 0)) && (*(iVar2 + 0x3c) != NULL)) {\n                (**(iVar2 + 0x3c))(0, 0);\n            }\n            fcn.00412962();\n            fcn.00412962();\n            fcn.00412962();\n            fcn.00412962();\n            fcn.00412962();\n        }\n        iVar2 = fcn.0040f83a();\n        iVar2 = *(iVar2 + 4);\n        iVar3 = fcn.00410d58();\n        if ((((iVar3 != 0) && (iVar2 != 0)) &&\n            ((*(iVar3 + 0xc) == 0 || (uVar4 = fcn.004249ed(*(iVar3 + 0xc)),  uVar4 < *(iVar2 + 0x98))))) &&\n           (*(iVar2 + 0x98) != 0)) {\n            arg_8h = 0;\n            if (*(iVar3 + 0xc) != 0) {\n                arg_8h = fcn.004249ed(*(iVar3 + 0xc));\n                fcn.00421c45(*(iVar3 + 0xc));\n            }\n            iVar2 = fcn.00421b7b(*(iVar2 + 0x98));\n            *(iVar3 + 0xc) = iVar2;\n            if ((iVar2 == 0) && (arg_8h != 0)) {\n                uVar5 = fcn.00421b7b(arg_8h);\n                *(iVar3 + 0xc) = uVar5;\n            }\n        }\n    }\n    return *(iVar1 + 0x10) != 0;\n}\n",
        "token_count": 532
    },
    "00412b58": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412b58(int32_t arg_8h)\n\n{\n    uint *in_ECX;\n    uint *extraout_ECX;\n    \n    if (arg_8h == 0) {\n        fcn.00401170(0x80004005);\n        in_ECX = extraout_ECX;\n    }\n    fcn.00424344(*in_ECX, arg_8h);\n    return;\n}\n",
        "token_count": 95
    },
    "00412bdb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00412bdb(uint arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint arg_10h_00;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_ch < 0) {\n        arg_ch = 0;\n    }\n    if (arg_10h < 0) {\n        arg_10h = 0;\n    }\n    iVar1 = *(*in_ECX + -0xc);\n    iVar2 = fcn.00412b7e(arg_ch, arg_10h);\n    if (iVar1 < iVar2) {\n        arg_10h = *(*in_ECX + -0xc) - arg_ch;\n    }\n    iVar1 = *in_ECX;\n    iVar2 = *(iVar1 + -0xc);\n    if (iVar2 < arg_ch) {\n        arg_10h = 0;\n    }\n    if ((arg_ch == 0) && (arg_10h == iVar2)) {\n        fcn.00402660();\n    }\n    else {\n        arg_10h_00 = fcn.00406505();\n        fcn.00412bbe(iVar1 + arg_ch, arg_10h, arg_10h_00);\n    }\n    return arg_8h;\n}\n",
        "token_count": 303
    },
    "00412c99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00412c99(uint arg_8h, char *arg_ch, int32_t *arg_10h)\n\n{\n    uint32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_10h_00;\n    uint uVar3;\n    int32_t *in_ECX;\n    uint32_t uVar4;\n    ulong uVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = *arg_10h;\n    if (iVar2 < 0) {\n        uVar5 = fcn.00401170(0x80070057);\n        iVar2 = uVar5 >> 0x20;\n        in_ECX = uVar5;\n    }\n    if ((arg_ch == NULL) || (*arg_ch == '\\0')) {\n        iVar1 = *in_ECX;\n        if (iVar2 < *(iVar1 + -0xc)) {\n            uVar3 = fcn.00406505();\n            fcn.00412c5a(*arg_10h + iVar1, uVar3);\n            return arg_8h;\n        }\n    }\n    else {\n        iVar1 = *in_ECX;\n        arg_8h_00 = iVar1 + iVar2;\n        uVar4 = *(iVar1 + -0xc) + iVar1;\n        if (arg_8h_00 < uVar4) {\n            iVar2 = fcn.00424b6d(arg_8h_00, arg_ch);\n            if (arg_8h_00 + iVar2 < uVar4) {\n                arg_10h_00 = fcn.00424c4b(arg_8h_00 + iVar2, arg_ch);\n                iVar1 = *arg_10h;\n                *arg_10h = iVar1 + iVar2 + 1 + arg_10h_00;\n                fcn.00412bdb(arg_8h, iVar1 + iVar2, arg_10h_00);\n                return arg_8h;\n            }\n        }\n    }\n    *arg_10h = -1;\n    uVar3 = fcn.00406505();\n    fcn.004064ee(uVar3);\n    return arg_8h;\n}\n",
        "token_count": 499
    },
    "0041331f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041331f(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t arg_8h_00;\n    int32_t arg_8h_01;\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t unaff_EBP;\n    uint var_164h;\n    uint var_160h;\n    uint lpFilePart;\n    uint lpFileName;\n    uint lpRootPathName;\n    uint lpFindFileData;\n    uint lpString;\n    uint var_4h;\n    \n    fcn.00421e74(0x158);\n    arg_8h_00 = *(unaff_EBP + 8);\n    iVar2 = *(unaff_EBP + 0xc);\n    arg_8h_01 = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -0x158) = iVar2;\n    if (arg_8h_00 != 0) goto code_r0x0041334d;\n    do {\n        iVar2 = fcn.00404695();\ncode_r0x0041334d:\n    } while (iVar2 == 0);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetFullPathNameA)(iVar2, 0x104, arg_8h_00, unaff_EBP + -0x15c);\n    if (uVar3 == 0) {\n        fcn.00403eca(arg_8h_00, 0x104, *(unaff_EBP + -0x158), 0xffffffff);\n        fcn.004132f0(arg_8h_01, *(unaff_EBP + -0x158));\n        goto code_r0x004134b4;\n    }\n    if (0x103 < uVar3) {\n        if (arg_8h_01 != 0) {\n            uVar1 = *(unaff_EBP + -0x158);\n            *(arg_8h_01 + 8) = 3;\n            fcn.00401840(uVar1);\n        }\n        goto code_r0x004134b4;\n    }\n    fcn.00402630();\n    *(unaff_EBP + -4) = 0;\n    fcn.00413161(arg_8h_00, unaff_EBP + -0x154);\n    iVar2 = (*_sym.imp.SHLWAPI.dll_PathIsUNCA)(*(unaff_EBP + -0x154));\n    if (iVar2 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetVolumeInformationA)\n                          (*(unaff_EBP + -0x154), 0, 0, 0, unaff_EBP + -0x164, unaff_EBP + -0x160, 0, 0);\n        if (iVar2 == 0) {\ncode_r0x00413408:\n            fcn.004132f0(arg_8h_01, *(unaff_EBP + -0x158));\n        }\n        else {\n            if ((*(unaff_EBP + -0x160) & 2) == 0) {\n                (*_sym.imp.USER32.dll_CharUpperA)(arg_8h_00);\n            }\n            if (((*(unaff_EBP + -0x160) & 4) != 0) ||\n               (iVar2 = (*_sym.imp.KERNEL32.dll_FindFirstFileA)(*(unaff_EBP + -0x158), unaff_EBP + -0x150),  iVar2 == -1\n               )) goto code_r0x004134a3;\n            (*_sym.imp.KERNEL32.dll_FindClose)(iVar2);\n            if ((*(unaff_EBP + -0x15c) == 0) ||\n               (*(unaff_EBP + -0x15c) < arg_8h_00 || *(unaff_EBP + -0x15c) == arg_8h_00)) goto code_r0x00413408;\n            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(unaff_EBP + -0x124);\n            iVar4 = *(unaff_EBP + -0x15c) - arg_8h_00;\n            if (iVar2 + iVar4 < 0x104) {\n                fcn.00404e48(*(unaff_EBP + -0x15c), 0x104 - iVar4, unaff_EBP + -0x124);\n                goto code_r0x004134a3;\n            }\n            if (arg_8h_01 != 0) {\n                uVar1 = *(unaff_EBP + -0x158);\n                *(arg_8h_01 + 8) = 3;\n                fcn.00401840(uVar1);\n            }\n        }\n        fcn.00401240();\n    }\n    else {\ncode_r0x004134a3:\n        fcn.00401240();\n    }\ncode_r0x004134b4:\n    fcn.00421ef7();\n    return;\n}\n",
        "token_count": 1141
    },
    "004137c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004137c4(int32_t arg_8h)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    uint16_t *puVar5;\n    uint16_t uVar6;\n    bool bVar7;\n    uint var_8h;\n    uint var_4h;\n    \n    bVar7 = *(arg_8h + 2) == -1;\n    iVar2 = fcn.00413773(arg_8h);\n    iVar3 = fcn.0041372c(arg_8h);\n    if (iVar3 != 0) {\n        iVar2 = iVar2 + (bVar7 * 2 + 1) * 2;\n        iVar3 = fcn.00421cf0(iVar2);\n        iVar2 = iVar2 + 2 + iVar3 * 2;\n    }\n    if (bVar7) {\n        iVar1 = *(arg_8h + 0x10);\n    }\n    else {\n        iVar1 = *(arg_8h + 8);\n    }\n    if (iVar1 != 0) {\n        do {\n            piVar4 = (iVar2 + 3U & 0xfffffffc) + (-bVar7 & 6) + 0x12;\n            if (*piVar4 == -1) {\n                piVar4 = piVar4 + 2;\n            }\n            else {\n                piVar4 = fcn.0041375f(piVar4);\n            }\n            if (*piVar4 == -1) {\n                puVar5 = piVar4 + 2;\n            }\n            else {\n                puVar5 = fcn.0041375f(piVar4);\n            }\n            uVar6 = *puVar5;\n            if ((uVar6 != 0) && (!bVar7)) {\n                uVar6 = uVar6 - 2;\n            }\n            iVar1 = iVar1 + -1;\n            iVar2 = puVar5 + uVar6 + 2;\n        } while (iVar1 != 0);\n    }\n    return iVar2 - arg_8h;\n}\n",
        "token_count": 474
    },
    "004138f8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n\nvoid __cdecl fcn.004138f8(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t *arg_8h_00;\n    int32_t iVar2;\n    int32_t iVar3;\n    ushort *puVar4;\n    uint32_t arg_10h;\n    uint *in_ECX;\n    int32_t iVar5;\n    uint32_t arg_ch_00;\n    int16_t iVar6;\n    uint32_t arg_8h_01;\n    bool bVar7;\n    int32_t var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint lpString;\n    uint var_44h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    if (in_ECX[1] != 0) {\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*in_ECX);\n        bVar7 = *(arg_8h_00 + 2) == -1;\n        iVar2 = fcn.0041372c(arg_8h_00);\n        iVar1 = bVar7 * 2 + 1;\n        var_58h = iVar1 * 2;\n        if (bVar7) {\n            arg_8h_00[3] = arg_8h_00[3] | 0x40;\n        }\n        else {\n            *arg_8h_00 = *arg_8h_00 | 0x40;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_8h);\n        if (iVar3 < 0x20) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, arg_8h, 0xffffffff, &var_44h, 0x20);\n            iVar3 = var_58h + iVar3 * 2;\n            if (var_58h <= iVar3) {\n                puVar4 = fcn.00413773(arg_8h_00);\n                iVar5 = 0;\n                if (iVar2 != 0) {\n                    iVar2 = fcn.00421cf0(puVar4 + iVar1);\n                    iVar5 = var_58h + 2 + iVar2 * 2;\n                }\n                arg_10h = iVar5 + 3 + puVar4 & 0xfffffffc;\n                arg_8h_01 = puVar4 + iVar3 + 3 & 0xfffffffc;\n                if (bVar7) {\n                    iVar6 = *(arg_8h_00 + 4);\n                }\n                else {\n                    iVar6 = *(arg_8h_00 + 2);\n                }\n                if ((iVar3 != iVar5) && (iVar6 != 0)) {\n                    arg_ch_00 = (in_ECX[1] - arg_10h) + arg_8h_00;\n                    if (in_ECX[1] < arg_ch_00) goto code_r0x00413a3d;\n                    fcn.00411460(arg_8h_01, arg_ch_00, arg_10h, arg_ch_00);\n                }\n                *puVar4 = arg_ch;\n                iVar3 = iVar3 + iVar1 * -2;\n                fcn.00411460(puVar4 + iVar1, iVar3, &var_44h, iVar3);\n                in_ECX[1] = in_ECX[1] + (arg_8h_01 - arg_10h);\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*in_ECX);\n                in_ECX[2] = 0;\n            }\n        }\n    }\ncode_r0x00413a3d:\n    fcn.00420bb4(var_58h);\n    return;\n}\n",
        "token_count": 876
    },
    "00413a4c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413a4c(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    char *arg_8h_00;\n    uint unaff_EDI;\n    uint32_t uVar5;\n    uint var_44h;\n    int32_t lpvObject;\n    uint var_24h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.GDI32.dll_GetStockObject;\n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    uVar5 = 10;\n    arg_8h_00 = \"System\";\n    iVar2 = (*_sym.imp.GDI32.dll_GetStockObject)(0x11);\n    if (iVar2 == 0) {\n        iVar2 = (*pcVar1)(0xd);\n        if (iVar2 == 0) goto code_r0x00413aca;\n    }\n    iVar2 = (*_sym.imp.GDI32.dll_GetObjectA)(iVar2, 0x3c, &lpvObject);\n    if (iVar2 != 0) {\n        arg_8h_00 = &var_24h;\n        uVar3 = (*_sym.imp.USER32.dll_GetDC)(0);\n        if (lpvObject < 0) {\n            lpvObject = -lpvObject;\n        }\n        uVar4 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar3, 0x5a);\n        uVar5 = (*_sym.imp.KERNEL32.dll_MulDiv)(lpvObject, 0x48, uVar4);\n        uVar5 = uVar5 & 0xffff;\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar3);\n    }\ncode_r0x00413aca:\n    if (arg_8h == 0) {\n        arg_8h = uVar5;\n    }\n    fcn.004138f8(arg_8h_00, arg_8h);\n    fcn.00420bb4(unaff_EDI);\n    return;\n}\n",
        "token_count": 473
    },
    "00413b93": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413b93(uint32_t arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0x11;\n    }\n    if (*(in_ECX + 4) != 0) {\n        fcn.00403dd7(*(in_ECX + 4));\n        *(in_ECX + 4) = 0;\n    }\n    if (arg_ch != 0) {\n        uVar1 = fcn.00403da8(-(arg_8h * 4 >> 0x20 != 0) | arg_8h * 4);\n        *(in_ECX + 4) = uVar1;\n        fcn.004229c0(uVar1, 0, arg_8h << 2);\n    }\n    *(in_ECX + 8) = arg_8h;\n    return;\n}\n",
        "token_count": 218
    },
    "00413dee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00413dee(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    \n    if (*(param_1 + 0x10) == 0) {\n        iVar3 = fcn.004143d6(param_1 + 0x14, *(param_1 + 0x18), 0xc);\n        iVar1 = *(param_1 + 0x18);\n        puVar4 = iVar3 + -8 + iVar1 * 0xc;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar4 = *(param_1 + 0x10);\n            *(param_1 + 0x10) = puVar4;\n            puVar4 = puVar4 + -3;\n        }\n    }\n    puVar4 = *(param_1 + 0x10);\n    uVar2 = *puVar4;\n    *(param_1 + 0xc) = *(param_1 + 0xc) + 1;\n    *(param_1 + 0x10) = uVar2;\n    puVar4[1] = 0;\n    puVar4[2] = 0;\n    return;\n}\n",
        "token_count": 288
    },
    "00414036": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00414036(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    uVar4 = *0x44f91c;\n    uVar3 = *0x44f918;\n    if (in_ECX != NULL) {\n        iVar2 = (*_sym.imp.GDI32.dll_GetMapMode)(in_ECX[2]);\n        pcVar1 = _sym.imp.GDI32.dll_GetDeviceCaps;\n        if ((iVar2 < 7) && (iVar2 != 1)) {\n            (**(*in_ECX + 0x34))(3);\n            fcn.00410127(arg_8h);\n            (**(*in_ECX + 0x34))(iVar2);\n            return;\n        }\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(in_ECX[2], 0x58);\n        uVar4 = (*pcVar1)(in_ECX[2], 0x5a);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_MulDiv;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg_8h, 0x9ec, uVar3);\n    *arg_8h = uVar3;\n    uVar4 = (*pcVar1)(arg_8h[1], 0x9ec, uVar4);\n    arg_8h[1] = uVar4;\n    return;\n}\n",
        "token_count": 353
    },
    "004140c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004140c6(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    uVar4 = *0x44f91c;\n    uVar3 = *0x44f918;\n    if (in_ECX != NULL) {\n        iVar2 = (*_sym.imp.GDI32.dll_GetMapMode)(in_ECX[2]);\n        pcVar1 = _sym.imp.GDI32.dll_GetDeviceCaps;\n        if ((iVar2 < 7) && (iVar2 != 1)) {\n            (**(*in_ECX + 0x34))(3);\n            fcn.004100bc(arg_8h);\n            (**(*in_ECX + 0x34))(iVar2);\n            return;\n        }\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(in_ECX[2], 0x58);\n        uVar4 = (*pcVar1)(in_ECX[2], 0x5a);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_MulDiv;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg_8h, uVar3, 0x9ec);\n    *arg_8h = uVar3;\n    uVar4 = (*pcVar1)(arg_8h[1], uVar4, 0x9ec);\n    arg_8h[1] = uVar4;\n    return;\n}\n",
        "token_count": 354
    },
    "004141cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004141cd(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    ushort *puVar1;\n    int32_t *arg_10h_00;\n    uint *puVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    uint arg_8h_00;\n    uint32_t uVar9;\n    int32_t unaff_EBP;\n    uint var_40h;\n    uint var_38h;\n    uint var_30h;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t iVar10;\n    uint var_4h;\n    \n    fcn.00421e3e(0x34);\n    arg_10h_00 = *(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x14) = 0;\n    *(unaff_EBP + -0x1c) = 0xffffffff;\n    uVar6 = arg_8h_00;\n    iVar5 = fcn.00414156(arg_8h_00, *(unaff_EBP + 8), arg_10h_00);\n    if (iVar5 == 0) goto code_r0x004143ce;\n    puVar2 = *(unaff_EBP + 0x10);\n    if (puVar2 != NULL) {\n        *puVar2 = arg_8h_00;\n        iVar10 = *arg_10h_00;\n        if (-1 < iVar10) {\n            if (iVar10 < 2) {\n                uVar6 = *(iVar5 + 0x10);\n            }\n            else {\n                if (iVar10 != 2) goto code_r0x004143ce;\n                uVar6 = *(iVar5 + 0x14);\n            }\n            puVar2[1] = uVar6;\n        }\n        goto code_r0x004143ce;\n    }\n    iVar10 = *arg_10h_00;\n    iVar8 = *(iVar5 + 0x24);\n    *(unaff_EBP + 0x10) = 0;\n    uVar9 = iVar8 != -1;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x18) = uVar9;\n    if (iVar10 == 0) {\n        iVar10 = unaff_EBP + -0x40;\n        fcn.00411cc8(iVar10);\n        *(unaff_EBP + -0x30) = 0;\n        iVar8 = arg_10h_00[2];\n        if (*(unaff_EBP + -0x18) != 0) {\n            uVar7 = fcn.00420bc3(unaff_EBP + -0x30, 0x10, iVar8, 0x10);\n            fcn.00403de8(uVar7);\n            *(unaff_EBP + -0x28) = *(unaff_EBP + -0x28) + 1;\n            iVar4 = *(unaff_EBP + -0x28) * 0x10;\n            uVar7 = fcn.00403da8(-(iVar4 >> 0x20 != 0) | iVar4);\n            *(unaff_EBP + -0x30) = uVar7;\n            fcn.00403e88(*(unaff_EBP + -0x30), *(unaff_EBP + -0x28) << 4, *arg_10h_00[2], \n                         (*(unaff_EBP + -0x28) + -1) * 0x10);\n            puVar1 = *(unaff_EBP + -0x28) * 0x10 + -0x10 + *(unaff_EBP + -0x30);\n            *puVar1 = 3;\n            *(puVar1 + 4) = *(unaff_EBP + 8);\n            iVar8 = unaff_EBP + -0x30;\n        }\n        uVar6 = fcn.0041e644(iVar5, 1, unaff_EBP + -0x40, iVar8, unaff_EBP + -0x1c, iVar10, uVar6);\n        *(unaff_EBP + -0x14) = uVar6;\n        *(unaff_EBP + 0x10) = *(unaff_EBP + -0x38);\n        if (*(unaff_EBP + -0x18) != 0) {\n            fcn.00403dd7(*(unaff_EBP + -0x30));\n        }\n    }\n    else if (iVar10 == 1) {\n        pcVar3 = *(iVar5 + 0x10);\n        *(unaff_EBP + -0x14) = 1;\n        if (uVar9 == 0) {\n            uVar6 = (*pcVar3)(unaff_EBP + -0x14);\n        }\n        else {\n            uVar6 = (*pcVar3)(*(unaff_EBP + 8));\n        }\ncode_r0x004142bb:\n        *(unaff_EBP + 0x10) = uVar6;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) == 0;\n    }\n    else if (iVar10 == 2) {\n        if (uVar9 == 0) {\n            uVar6 = (**(iVar5 + 0x14))();\n        }\n        else {\n            uVar6 = (**(iVar5 + 0x14))(*(unaff_EBP + 8));\n        }\n        *(unaff_EBP + -0x14) = 0;\n        *(unaff_EBP + 0x10) = uVar6;\n    }\n    else if (iVar10 == 3) {\n        pcVar3 = *(iVar5 + 0x10);\n        iVar5 = arg_10h_00[8];\n        iVar10 = arg_10h_00[7];\n        *(unaff_EBP + -0x14) = 1;\n        if (uVar9 == 0) {\n            uVar6 = (*pcVar3)(iVar10, iVar5, unaff_EBP + -0x14);\n        }\n        else {\n            uVar6 = (*pcVar3)(*(unaff_EBP + 8));\n        }\n        goto code_r0x004142bb;\n    }\n    iVar5 = *(unaff_EBP + -0x14);\n    if (((iVar5 < 0) && (arg_10h_00[4] != NULL)) && (*(unaff_EBP + -0x1c) != -1)) {\n        *arg_10h_00[4] = *(unaff_EBP + -0x1c);\n    }\n    arg_10h_00[6] = iVar5;\ncode_r0x004143ce:\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1645
    },
    "004143d6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004143d6(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    \n    if ((arg_ch != 0) && (arg_10h != 0)) {\n        puVar2 = fcn.00403da8(arg_ch * arg_10h + 4);\n        *puVar2 = *arg_8h;\n        *arg_8h = puVar2;\n        return;\n    }\n    fcn.00404695();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 147
    },
    "00414806": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00414806(int32_t *param_1)\n\n{\n    return *param_1 != 2;\n}\n",
        "token_count": 30
    },
    "004149b8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl\nfcn.004149b8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h, uint arg_2ch, uint arg_30h, uint arg_34h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0x10);\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    piVar3 = *(extraout_ECX + 0x20);\n    *(unaff_EBP + -0x14) = 0;\n    iVar1 = *piVar3;\n    *(unaff_EBP + -4) = 0;\n    iVar1 = (**(iVar1 + 0x130))(extraout_ECX, unaff_EBP + -0x14, *(unaff_EBP + 0x24), *(unaff_EBP + 0xc));\n    if ((iVar1 != 0) && (*(unaff_EBP + -0x14) == 0)) {\n        iVar1 = fcn.0040f83a();\n        if (*(iVar1 + 0x3c) == 0) {\n            fcn.00404695();\n        }\n        iVar1 = fcn.0040f83a();\n        uVar2 = (**(**(iVar1 + 0x3c) + 0xc))(extraout_ECX, *(unaff_EBP + 0x10));\n        *(unaff_EBP + -0x14) = uVar2;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + -0x14) != NULL) {\n        if (**(unaff_EBP + 0x10) == 2) {\n            iVar1 = (**(**(unaff_EBP + -0x14) + 0x50))\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x14), *(unaff_EBP + 0x18), \n                               *(unaff_EBP + 0x1c), *(unaff_EBP + 0x20), *(unaff_EBP + 0x24), *(unaff_EBP + 0x28), \n                               *(unaff_EBP + 0x2c), *(unaff_EBP + 0x30));\n        }\n        else {\n            iVar1 = fcn.00415b42(*(unaff_EBP + 8), *(unaff_EBP + 0x10), *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c), \n                                 *(unaff_EBP + 0x20), *(unaff_EBP + 0x24));\n        }\n        if (iVar1 < 0) {\n            if (*(unaff_EBP + -0x14) != NULL) {\n                (**(**(unaff_EBP + -0x14) + 4))(1);\n            }\n        }\n        else {\n            iVar1 = fcn.00403da8(0xc);\n            if (iVar1 == 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = fcn.0041442b(*(unaff_EBP + -0x14));\n            }\n            fcn.0041cd79(uVar2);\n            iVar1 = *(unaff_EBP + -0x14);\n            if (*(iVar1 + 0x24) != 0) {\n                piVar3 = fcn.00413e3e(*(iVar1 + 0x24));\n                *piVar3 = iVar1;\n                iVar1 = *(unaff_EBP + -0x14);\n            }\n            if (*(unaff_EBP + 0x34) != NULL) {\n                **(unaff_EBP + 0x34) = iVar1;\n            }\n        }\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1001
    },
    "00414d1c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid fcn.00414d1c(void)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0xc);\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    *extraout_ECX = vtable.COleControlContainer.0;\n    pcVar1 = extraout_ECX[0x11];\n    *(unaff_EBP + -4) = 2;\n    *(unaff_EBP + -0x10) = pcVar1;\n    while (pcVar1 != NULL) {\n        *(unaff_EBP + -0x14) = pcVar1;\n        piVar2 = fcn.0040835f(unaff_EBP + -0x10);\n        if (((*piVar2 != 0) && (iVar3 = *(*piVar2 + 4),  iVar3 != 0)) && (*(iVar3 + 0x90) == 0)) {\n            fcn.0041cc4c(*(unaff_EBP + -0x14));\n            fcn.0041446c(1);\n        }\n        pcVar1 = *(unaff_EBP + -0x10);\n    }\n    pcVar1 = extraout_ECX[0x13];\n    while (pcVar1 != NULL) {\n        iVar3 = fcn.0041cc1b();\n        if (iVar3 != 0) {\n            fcn.0041446c(1);\n        }\n        pcVar1 = extraout_ECX[0x13];\n    }\n    fcn.00413bf1();\n    fcn.004108a9(extraout_ECX + 0x19);\n    if (0 < extraout_ECX[1]) {\n        *(unaff_EBP + -0x10) = 0;\n        *(unaff_EBP + -4) = 3;\n        iVar3 = fcn.00410abd(0x43ef5c, unaff_EBP + -0x10);\n        if (-1 < iVar3) {\n            fcn.004108ca(*(unaff_EBP + -0x10));\n        }\n        piVar2 = *(unaff_EBP + -0x10);\n        *(unaff_EBP + -4) = 2;\n        if (piVar2 != NULL) {\n            (**(*piVar2 + 8))(piVar2);\n        }\n    }\n    *(unaff_EBP + -4) = 1;\n    fcn.0041cce2();\n    *(unaff_EBP + -4) = 0;\n    fcn.00413de3();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00405a4f();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 713
    },
    "00414f3e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00414f3e(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t in_ECX;\n    int32_t var_4h;\n    \n    var_4h = *(in_ECX + 0x44);\n    while (var_4h != 0) {\n        piVar1 = fcn.0040835f(&var_4h);\n        if (*(*piVar1 + 4) != 0) {\n            fcn.00416059(arg_8h);\n        }\n    }\n    return;\n}\n",
        "token_count": 128
    },
    "004157a9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004157a9(uint arg_8h)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0xc);\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    *extraout_ECX = 0;\n    *(unaff_EBP + -4) = 0;\n    iVar1 = *(unaff_EBP + 8) * 8;\n    iVar2 = fcn.00403da8(-(iVar1 >> 0x20 != 0) | iVar1);\n    *extraout_ECX = iVar2;\n    if (*extraout_ECX != 0) {\n        extraout_ECX[1] = *(unaff_EBP + 8);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 236
    },
    "004158d6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004158d6(uint32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t in_EAX;\n    int32_t in_ECX;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    \n    if (*(in_ECX + 0x1c) == '\\0') {\n        iVar1 = *(*(in_ECX + 0x14) + 8);\n        in_EAX = *arg_8h;\n        if (in_EAX <= *(in_ECX + 0xc) + -1 + iVar1) {\n            in_EAX = in_EAX - iVar1;\n            *arg_8h = in_EAX;\ncode_r0x00415925:\n            return CONCAT31(in_EAX >> 8, 1);\n        }\n    }\n    else {\n        uVar3 = 0;\n        if (*(in_ECX + 0xc) != 0) {\n            in_EAX = *arg_8h;\n            puVar2 = *(in_ECX + 0x14) + 8;\n            do {\n                if (*puVar2 == in_EAX) {\n                    *arg_8h = uVar3;\n                    goto code_r0x00415925;\n                }\n                uVar3 = uVar3 + 1;\n                puVar2 = puVar2 + 0xc;\n            } while (uVar3 < *(in_ECX + 0xc));\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 338
    },
    "00415ca9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00415ca9(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_ch;\n    int32_t *var_8h;\n    int32_t *var_4h;\n    \n    if ((*(in_ECX + 0x50) != 0) && (iVar1 = (****(in_ECX + 0x50))(*(in_ECX + 0x50), 0x44217c, &var_8h),  -1 < iVar1)) {\n        var_4h = NULL;\n        var_ch = 0;\n        iVar1 = (**(*var_8h + 0x10))(var_8h, arg_8h, &var_4h);\n        if (-1 < iVar1) {\n            (**(*var_4h + 0x14))(var_4h, arg_ch, &var_ch);\n            (**(*var_4h + 8))(var_4h);\n        }\n        (**(*var_8h + 8))(var_8h);\n        return var_ch;\n    }\n    return 0;\n}\n",
        "token_count": 256
    },
    "00415d15": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00415d15(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *var_8h;\n    int32_t *var_4h;\n    \n    if ((arg_ch != 0) && (in_ECX[0x14] != 0)) {\n        var_8h = in_ECX;\n        iVar1 = (***in_ECX[0x14])(in_ECX[0x14], 0x44217c, &var_8h);\n        if (-1 < iVar1) {\n            var_4h = NULL;\n            iVar1 = (**(*var_8h + 0x10))(var_8h, arg_8h, &var_4h);\n            if (-1 < iVar1) {\n                (**(*var_4h + 0x18))(var_4h, arg_ch);\n                (**(*var_4h + 8))(var_4h);\n            }\n            (**(*var_8h + 8))(var_8h);\n        }\n    }\n    return;\n}\n",
        "token_count": 251
    },
    "00415d77": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00415d77(uint *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint32_t uVar2;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    int32_t *var_ch;\n    int32_t *var_8h;\n    int32_t *var_4h;\n    \n    *arg_8h = *0x44208c;\n    arg_8h[1] = *0x442090;\n    arg_8h[2] = *0x442094;\n    arg_8h[3] = *0x442098;\n    var_ch = NULL;\n    iVar1 = (****(in_ECX + 0x50))(*(in_ECX + 0x50), 0x4421ac, &var_ch);\n    if (-1 < iVar1) {\n        (**(*var_ch + 0x10))(var_ch, 1, arg_8h);\n        (**(*var_ch + 8))(var_ch);\n    }\n    var_14h = NULL;\n    iVar1 = fcn.004056db(arg_8h, 0x44208c);\n    if ((iVar1 != 0) && (iVar1 = (****(in_ECX + 0x50))(*(in_ECX + 0x50), 0x44219c, &var_14h),  -1 < iVar1)) {\n        var_4h = NULL;\n        iVar1 = (**(*var_14h + 0xc))(var_14h, &var_4h);\n        if (-1 < iVar1) {\n            iVar1 = (**(*var_4h + 0xc))(var_4h, &var_10h);\n            if (-1 < iVar1) {\n                uVar2 = 0;\n                if (*(var_10h + 0x30) != 0) {\n                    do {\n                        iVar1 = (**(*var_4h + 0x24))(var_4h, uVar2, &var_1ch);\n                        if ((-1 < iVar1) && ((var_1ch & 7) == 3)) {\n                            var_8h = NULL;\n                            iVar1 = (**(*var_4h + 0x20))(var_4h, uVar2, &var_20h);\n                            if ((-1 < iVar1) && (iVar1 = (**(*var_4h + 0x38))(var_4h, var_20h, &var_8h),  -1 < iVar1)) {\n                                iVar1 = (**(*var_8h + 0xc))(var_8h, &var_18h);\n                                if (-1 < iVar1) {\n                                    *arg_8h = *var_18h;\n                                    arg_8h[1] = var_18h[1];\n                                    arg_8h[2] = var_18h[2];\n                                    arg_8h[3] = var_18h[3];\n                                    (**(*var_8h + 0x4c))(var_8h, var_18h);\n                                }\n                                (**(*var_8h + 8))(var_8h);\n                            }\n                            break;\n                        }\n                        uVar2 = uVar2 + 1;\n                    } while (uVar2 < *(var_10h + 0x30));\n                }\n                (**(*var_4h + 0x4c))(var_4h, var_10h);\n            }\n            (**(*var_4h + 8))(var_4h);\n        }\n        (**(*var_14h + 8))(var_14h);\n    }\n    iVar1 = fcn.004056db(arg_8h, 0x44208c);\n    return iVar1 == 0;\n}\n",
        "token_count": 868
    },
    "00415f47": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00415f47(int32_t arg_8h)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint8_t *puVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    uint var_4h;\n    \n    if ((*(in_ECX + 0x80) == 0) || (*(in_ECX + 0x7c) == 0)) {\n        var_4h = 0;\n    }\n    else {\n        puVar1 = fcn.00403da8(*(in_ECX + 0x80) * 6);\n        iVar2 = (*_sym.imp.USER32.dll_CopyAcceleratorTableA)(*(in_ECX + 0x7c), puVar1, *(in_ECX + 0x80));\n        var_4h = 0;\n        iVar5 = 0;\n        puVar3 = puVar1;\n        if (0 < iVar2) {\n            do {\n                if (arg_8h == 0) {\n                    fcn.00404695();\ncode_r0x00415fe1:\n                    var_4h = 1;\n                    break;\n                }\n                if (*(arg_8h + 4) == 0x106) {\n                    uVar4 = 0x10;\n                }\n                else {\n                    uVar4 = 0;\n                }\n                if (((*puVar3 & 0xfd) == uVar4) && (*(puVar3 + 2) == *(arg_8h + 8))) goto code_r0x00415fe1;\n                iVar5 = iVar5 + 1;\n                puVar3 = puVar3 + 6;\n            } while (iVar5 < iVar2);\n        }\n        fcn.00403dd7(puVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 418
    },
    "00415ffd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00415ffd(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    int32_t *var_4h;\n    \n    if ((in_ECX[0x1c] & 0x4000U) == 0) {\n        (**(*in_ECX + 0xb0))();\n    }\n    var_4h = NULL;\n    if (in_ECX[0x14] != 0) goto code_r0x00416026;\n    while( true ) {\n        fcn.00404695();\ncode_r0x00416026:\n        piVar1 = in_ECX + 0x14;\n        in_ECX = &var_4h;\n        iVar2 = (****piVar1)(*piVar1, 0x4421bc);\n        if (iVar2 < 0) break;\n        if (var_4h != NULL) {\n            (**(*var_4h + 0x10))(var_4h, arg_8h);\n            (**(*var_4h + 8))(var_4h);\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 265
    },
    "00416059": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416059(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *extraout_ECX;\n    int32_t *var_4h;\n    \n    var_4h = in_ECX;\n    if (in_ECX[0x14] != 0) goto code_r0x0041606a;\n    while( true ) {\n        fcn.00404695();\n        in_ECX = extraout_ECX;\ncode_r0x0041606a:\n        var_4h = NULL;\n        iVar1 = (***in_ECX[0x14])(in_ECX[0x14], 0x4421bc, &var_4h);\n        if (iVar1 < 0) break;\n        if (var_4h != NULL) {\n            (**(*var_4h + 0x18))(var_4h, arg_8h);\n            (**(*var_4h + 8))(var_4h);\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 237
    },
    "004160e8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004160e8(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = *(param_1 + 0x28);\n    *(param_1 + 0x24) = 0;\n    if (piVar1 != NULL) {\n        if (piVar1[8] != 0) {\n            piVar1 = (**(*piVar1 + 0xf8))();\n            iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(*(param_1 + 0x28) + 0x20));\n            if ((iVar2 != 0) && (*piVar1 != 0)) {\n                fcn.0040bb62();\n            }\n            fcn.0040b632();\n        }\n        *(*(param_1 + 0x28) + 0x50) = 0;\n    }\n    return;\n}\n",
        "token_count": 206
    },
    "00416138": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00416138(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    \n    if ((*(in_ECX + 0x28) != 0) &&\n       (iVar1 = (**(**(in_ECX + 0x28) + 0xc))(*(in_ECX + 0x2c), 0xfffffffe, arg_8h, 0),  iVar1 != 0)) {\n        return 1;\n    }\n    iVar1 = *(in_ECX + 0x20);\n    if ((iVar1 == 0) || (*(iVar1 + 0x20) == 0)) {\n        iVar1 = fcn.00404695();\n    }\n    uVar2 = (**(**(iVar1 + 0x20) + 0xc))(*(in_ECX + 0x2c), 0xfffffffe, arg_8h, 0);\n    return uVar2;\n}\n",
        "token_count": 221
    },
    "00416b57": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00416b57(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0xc) == 0) {\n        return 0;\n    }\n    (**(**(param_1 + 0xc) + 0xb4))();\n    (**(**(*(param_1 + 0xc) + 0x90) + 4))(param_1, 1);\n    // WARNING: Could not recover jumptable at 0x00416b8e. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (****(*(param_1 + 0xc) + 0x90))();\n    return uVar1;\n}\n",
        "token_count": 162
    },
    "0041897d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041897d(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    \n    if ((arg_ch != 0) && (cVar1 = fcn.004158d6(&arg_8h),  cVar1 != '\\0')) {\n        fcn.00416d06(arg_8h, arg_ch);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 97
    },
    "004189b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004189b0(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    \n    if ((arg_ch != 0) && (cVar1 = fcn.004158d6(&arg_8h),  cVar1 != '\\0')) {\n        fcn.00416d2d(arg_8h, arg_ch);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 98
    },
    "004189e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004189e3(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    \n    if ((arg_ch != 0) && (cVar1 = fcn.004158d6(&arg_8h),  cVar1 != '\\0')) {\n        fcn.00416d50(arg_8h, arg_ch);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 97
    },
    "00418a9d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00418a9d(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    \n    if ((arg_ch != 0) && (cVar1 = fcn.004158d6(&arg_8h),  cVar1 != '\\0')) {\n        fcn.00416db6(arg_8h, arg_ch);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 98
    },
    "00418c64": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00418c64(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *var_4h;\n    \n    if (arg_8h == 0) {\n        return -0x7fffbffb;\n    }\n    var_4h = NULL;\n    iVar1 = fcn.00416cd4(arg_8h, &var_4h);\n    if (iVar1 < 0) {\ncode_r0x00418ca5:\n        if (var_4h != NULL) {\n            (**(*var_4h + 8))(var_4h);\n        }\n    }\n    else {\n        if (*in_ECX == 0) {\n            iVar1 = fcn.004157a9(1);\n            if (iVar1 < 0) goto code_r0x00418ca5;\n            *(*in_ECX + 4) = 1;\n        }\n        iVar1 = fcn.0041580a(in_ECX[3], in_ECX[4], *in_ECX, in_ECX[6], var_4h);\n        if (var_4h != NULL) {\n            (**(*var_4h + 8))(var_4h);\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 291
    },
    "00419413": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00419413(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t arg_ch;\n    int32_t iVar4;\n    uint32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    if (*(in_ECX + 0xc) != 0) {\n        do {\n            if ((*(in_ECX + 0x10) == 0) || (*(*(in_ECX + 0x10) + var_4h) != '\\x01')) {\n                iVar2 = *(iVar4 + 0x14 + *(in_ECX + 0x14));\n                if ((iVar2 == 0xd) || (iVar2 == 9)) {\n                    iVar3 = *(in_ECX + 0x14) + iVar4;\n                    if (*((*(iVar3 + 0x10) + 3 + *(iVar3 + 4) & 0xfffffffcU) + 4 + *(in_ECX + 8)) != 0)\n                    goto code_r0x004194e2;\n                    iVar3 = *(in_ECX + 0x14) + iVar4;\n                    arg_ch = *(iVar3 + 4) + *(in_ECX + 8);\n                }\n                else {\n                    iVar3 = *(in_ECX + 0x14) + iVar4;\n                    arg_ch = *(iVar3 + 4) + *(in_ECX + 8);\n                }\n                fcn.00419361(*(iVar3 + 0x14), arg_ch, arg_8h);\n            }\n            else {\n                iVar3 = *(in_ECX + 0x14) + iVar4;\n                if (((*((*(iVar3 + 0x10) + 3 + *(iVar3 + 4) & 0xfffffffcU) + 4 + *(in_ECX + 8)) != 3) &&\n                    (piVar1 = *(iVar4 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8),  piVar1 != NULL)) && (*piVar1 != 0)) {\n                    (*_sym.imp.ole32.dll_CoTaskMemFree)(*piVar1);\n                    *piVar1 = 0;\n                }\n            }\ncode_r0x004194e2:\n            var_4h = var_4h + 1;\n            iVar4 = iVar4 + 0x30;\n        } while (var_4h < *(in_ECX + 0xc));\n    }\n    return;\n}\n",
        "token_count": 583
    },
    "00419849": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_40h\n// WARNING: Variable defined which should be unmapped: var_39h\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Variable defined which should be unmapped: var_44h\n\nvoid __cdecl fcn.00419849(uint arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t arg_24h;\n    uint *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uchar auStack64 [3];\n    uint32_t var_39h;\n    uint var_34h;\n    uint32_t var_30h;\n    uint32_t var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_4h;\n    \n    fcn.00421eaa(0x68);\n    *(unaff_EBP + -0x24) = *0x43ef7c;\n    *(unaff_EBP + -0x20) = *0x43ef80;\n    *(unaff_EBP + -0x1c) = *0x43ef84;\n    *(unaff_EBP + -0x50) = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x4c) = extraout_ECX;\n    *(unaff_EBP + -0x18) = *0x43ef88;\n    *(unaff_EBP + -0x39) = 0;\n    if (*(unaff_EBP + 8) == 0) goto code_r0x00419e7e;\n    *(unaff_EBP + -0x34) = 0;\n    *(unaff_EBP + -4) = 0;\n    iVar5 = fcn.00416cd4(*(unaff_EBP + -0x50), unaff_EBP + -0x34);\n    if (iVar5 < 0) {\ncode_r0x00419e6b:\n        piVar6 = *(unaff_EBP + -0x34);\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (piVar6 != NULL) {\n            (**(*piVar6 + 8))(piVar6);\n        }\n        goto code_r0x00419e7e;\n    }\n    *(unaff_EBP + -0x2c) = 0;\n    if (extraout_ECX[5] == 0) {\n        *(unaff_EBP + -0x28) = 0;\n        *(unaff_EBP + -4) = 1;\n        iVar5 = fcn.00416ca2(*(unaff_EBP + -0x50), unaff_EBP + -0x28);\n        *(unaff_EBP + -0x38) = iVar5;\n        piVar6 = *(unaff_EBP + -0x28);\n        if (-1 < iVar5) {\n            iVar5 = (**(*piVar6 + 0xc))(piVar6, extraout_ECX + 3, extraout_ECX + 5, extraout_ECX + 6);\n            piVar6 = *(unaff_EBP + -0x28);\n            *(unaff_EBP + -4) = 0;\n            if (iVar5 < 0) {\n                if (piVar6 != NULL) {\n                    (**(*piVar6 + 8))(piVar6);\n                }\n                goto code_r0x00419e6b;\n            }\n            *(extraout_ECX + 7) = 0;\n            if (piVar6 != NULL) {\n                (**(*piVar6 + 8))(piVar6);\n            }\n            goto code_r0x0041993a;\n        }\n        *(unaff_EBP + -4) = 0;\n        if (piVar6 != NULL) {\n            (**(*piVar6 + 8))(piVar6);\n        }\n        piVar6 = *(unaff_EBP + -0x34);\n        *(unaff_EBP + -4) = 0xffffffff;\ncode_r0x004198e7:\n        if (piVar6 != NULL) {\n            (**(*piVar6 + 8))(piVar6);\n        }\n        goto code_r0x00419e7e;\n    }\n    *(extraout_ECX + 7) = 1;\ncode_r0x0041993a:\n    uVar10 = extraout_ECX[3];\n    *(unaff_EBP + -0x44) = 0;\n    *(unaff_EBP + -4) = 2;\n    uVar7 = fcn.00403da8(-(uVar10 * 0x34 >> 0x20 != 0) | uVar10 * 0x34);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x44) = uVar7;\n    if (*(unaff_EBP + -0x44) == 0) {\ncode_r0x0041997e:\n        piVar6 = *(unaff_EBP + -0x34);\n        *(unaff_EBP + -4) = 0xffffffff;\n    }\n    else {\n        *(unaff_EBP + -0x48) = *(unaff_EBP + -0x44);\n        iVar5 = extraout_ECX[3];\n        *(unaff_EBP + -4) = 5;\n        iVar5 = fcn.00403da8(iVar5);\n        extraout_ECX[4] = iVar5;\n        *(unaff_EBP + -4) = 4;\n        uVar10 = 0;\n        if (extraout_ECX[4] != 0) {\n            *(unaff_EBP + -0x30) = *(unaff_EBP + -0x44);\n            *(unaff_EBP + -0x38) = 0;\n            while (uVar10 < extraout_ECX[3]) {\n                *(uVar10 + extraout_ECX[4]) = 0;\n                iVar11 = uVar10 * 0x30;\n                iVar5 = extraout_ECX[5] + iVar11;\n                if ((*(iVar5 + 0x10) < extraout_ECX[9] || *(iVar5 + 0x10) == extraout_ECX[9]) ||\n                   (*(iVar5 + 0x14) == 0xd)) {\n                    if (*(iVar5 + 0x14) == 0xd) {\n                        *(unaff_EBP + -0x40) = 0;\n                        *(unaff_EBP + -4) = 9;\n                        uVar7 = fcn.00403da8(0x14);\n                        *(unaff_EBP + -0x40) = uVar7;\n                        *(unaff_EBP + -4) = 4;\n                        if (*(unaff_EBP + -0x40) == 0) {\n                            iVar5 = *(unaff_EBP + -0x38);\n                            if (iVar5 != 0) {\n                                puVar9 = *(unaff_EBP + -0x44) + 0x14;\n                                do {\n                                    fcn.00403dd7(*puVar9);\n                                    puVar9 = puVar9 + 0xd;\n                                    iVar5 = iVar5 + -1;\n                                } while (iVar5 != 0);\n                            }\n                            goto code_r0x00419bb6;\n                        }\n                        puVar9 = 0x43ef5c;\ncode_r0x00419bd8:\n                        puVar4 = *(unaff_EBP + -0x40);\n                        *puVar4 = 0;\n                        puVar4[1] = *puVar9;\n                        puVar4[2] = puVar9[1];\n                        puVar4[3] = puVar9[2];\n                        puVar4[4] = puVar9[3];\n                        iVar11 = *(unaff_EBP + -0x38) * 0x30;\n                        *(extraout_ECX[5] + 0x14 + iVar11) = 0xd;\n                        *(extraout_ECX[5] + 0x10 + iVar11) = 4;\n                        iVar5 = extraout_ECX[5];\n                        *(unaff_EBP + -0x28) = iVar5 + iVar11;\n                        iVar8 = fcn.0041592d(*(iVar5 + iVar11 + 0x14));\n                        uVar7 = *(unaff_EBP + -0x40);\n                        iVar5 = *(unaff_EBP + -0x28);\n                        arg_24h = iVar8 + -1 + *(unaff_EBP + -0x2c) & ~(iVar8 - 1U);\n                        uVar10 = *(iVar5 + 0x10) + 3 + arg_24h & 0xfffffffc;\n                        iVar8 = uVar10 + 4;\n                        uVar1 = *(iVar5 + 0x17);\n                        uVar2 = *(iVar5 + 0x16);\n                        var_34h = *(iVar5 + 0x10);\n                        uVar3 = *(iVar5 + 0x14);\n                        _auStack64 = *(iVar5 + 8);\n                        *(unaff_EBP + -0x28) = iVar8;\n                    }\n                    else {\n                        if (*(iVar5 + 0x14) == 0x81) {\n                            *(iVar5 + 0x10) = *(iVar5 + 0x10) + 1;\n                        }\n                        iVar5 = extraout_ECX[5] + iVar11;\n                        if (*(iVar5 + 0x14) == 0x82) {\n                            *(iVar5 + 0x10) = *(iVar5 + 0x10) * 2 + 2;\n                        }\n                        iVar5 = extraout_ECX[5];\n                        *(unaff_EBP + -0x28) = iVar5 + iVar11;\n                        iVar5 = fcn.0041592d(*(iVar5 + iVar11 + 0x14));\n                        arg_24h = iVar5 + -1 + *(unaff_EBP + -0x2c) & ~(iVar5 - 1U);\n                        iVar5 = *(unaff_EBP + -0x28);\n                        uVar10 = *(iVar5 + 0x10) + 3 + arg_24h & 0xfffffffc;\n                        uVar7 = 0;\n                        iVar8 = uVar10 + 4;\n                        uVar1 = *(iVar5 + 0x17);\n                        uVar2 = *(iVar5 + 0x16);\n                        var_34h = *(iVar5 + 0x10);\n                        uVar3 = *(iVar5 + 0x14);\n                        _auStack64 = *(iVar5 + 8);\n                        *(unaff_EBP + -0x28) = iVar8;\n                    }\n                    var_2ch = uVar1;\n                    var_30h = uVar2;\n                    stack0xffffffc4 = uVar3;\n                    *(unaff_EBP + -0x2c) = iVar8;\n                    *(unaff_EBP + -0x2c) = *(unaff_EBP + -0x2c) + 4;\n                    fcn.00416f1c(*(unaff_EBP + -0x30), _auStack64, stack0xffffffc4, var_34h, var_30h, var_2ch, 0, \n                                 arg_24h, uVar10, iVar8, uVar7);\n                }\n                else if (extraout_ECX[8] == 2) {\n                    uVar10 = *(unaff_EBP + -0x2c) + 3U & 0xfffffffc;\n                    *(unaff_EBP + -0x28) = uVar10 + 4;\n                    *(unaff_EBP + -0x2c) = uVar10 + 8;\n                    uVar7 = *(unaff_EBP + -0x28);\n                    *(iVar5 + 0x10) = 0;\n                    iVar5 = extraout_ECX[5] + iVar11;\n                    arg_24h = 0;\n                    fcn.00417039(*(unaff_EBP + -0x30), *(iVar5 + 8), *(iVar5 + 0x14), *(iVar5 + 0x10), *(iVar5 + 0x16), \n                                 *(iVar5 + 0x17), 0, 0, uVar10, uVar7, 0, 0, 1);\n                }\n                else {\n                    if (extraout_ECX[8] != 1) {\n                        if (*(unaff_EBP + -0x39) == '\\0') {\n                            *(unaff_EBP + -0x60) = 0x89;\n                            *(unaff_EBP + -0x5c) = 0x8b;\n                            *(unaff_EBP + -0x58) = 0;\n                            *(unaff_EBP + -0x54) = 0;\n                            fcn.0041975c(*(unaff_EBP + -0x50), unaff_EBP + -0x60, unaff_EBP + -0x58, 2);\n                            if (*(unaff_EBP + -0x58) == 0) {\n                                if (*(unaff_EBP + -0x54) != 0) {\n                                    puVar9 = 0x43ef6c;\n                                    goto code_r0x00419b56;\n                                }\n                            }\n                            else {\n                                puVar9 = 0x43ef7c;\ncode_r0x00419b56:\n                                *(unaff_EBP + -0x24) = *puVar9;\n                                *(unaff_EBP + -0x20) = puVar9[1];\n                                *(unaff_EBP + -0x1c) = puVar9[2];\n                                *(unaff_EBP + -0x18) = puVar9[3];\n                            }\n                            *(unaff_EBP + -0x39) = 1;\n                        }\n                        *(unaff_EBP + -0x40) = 0;\n                        *(unaff_EBP + -4) = 7;\n                        uVar7 = fcn.00403da8(0x14);\n                        *(unaff_EBP + -0x40) = uVar7;\n                        *(unaff_EBP + -4) = 4;\n                        if (*(unaff_EBP + -0x40) != 0) {\n                            puVar9 = unaff_EBP + -0x24;\n                            goto code_r0x00419bd8;\n                        }\n                        iVar5 = *(unaff_EBP + -0x38);\n                        if (iVar5 != 0) {\n                            puVar9 = *(unaff_EBP + -0x44) + 0x14;\n                            do {\n                                fcn.00403dd7(*puVar9);\n                                puVar9 = puVar9 + 0xd;\n                                iVar5 = iVar5 + -1;\n                            } while (iVar5 != 0);\n                        }\n                        goto code_r0x00419bb6;\n                    }\n                    *(iVar5 + 0x14) = *(iVar5 + 0x14) | 0x4000;\n                    iVar5 = *(unaff_EBP + -0x38);\n                    *(extraout_ECX[5] + 0x10 + iVar11) = 4;\n                    *(iVar5 + extraout_ECX[4]) = 1;\n                    iVar5 = extraout_ECX[5];\n                    *(unaff_EBP + -0x28) = iVar5 + iVar11;\n                    iVar5 = fcn.0041592d(*(iVar5 + iVar11 + 0x14));\n                    arg_24h = iVar5 + -1 + *(unaff_EBP + -0x2c) & ~(iVar5 - 1U);\n                    iVar5 = *(unaff_EBP + -0x28);\n                    uVar10 = *(iVar5 + 0x10) + 3 + arg_24h & 0xfffffffc;\n                    *(unaff_EBP + -0x28) = uVar10 + 4;\n                    *(unaff_EBP + -0x2c) = uVar10 + 8;\n                    fcn.00417039(*(unaff_EBP + -0x30), *(iVar5 + 8), *(iVar5 + 0x14), *(iVar5 + 0x10), *(iVar5 + 0x16), \n                                 *(iVar5 + 0x17), 0, arg_24h, uVar10, *(unaff_EBP + -0x28), 0, 0, 0);\n                }\n                *(unaff_EBP + -0x30) = *(unaff_EBP + -0x30) + 0x34;\n                iVar5 = extraout_ECX[5];\n                *(unaff_EBP + -0x38) = *(unaff_EBP + -0x38) + 1;\n                *(iVar5 + 4 + iVar11) = arg_24h;\n                uVar10 = *(unaff_EBP + -0x38);\n            }\n            if (*extraout_ECX == 0) {\n                iVar5 = fcn.004157a9(1);\n                *(unaff_EBP + -0x38) = iVar5;\n                if (iVar5 < 0) {\n                    uVar10 = 0;\n                    if (extraout_ECX[3] != 0) {\n                        puVar9 = *(unaff_EBP + -0x44) + 0x14;\n                        do {\n                            fcn.00403dd7(*puVar9);\n                            uVar10 = uVar10 + 1;\n                            puVar9 = puVar9 + 0xd;\n                        } while (uVar10 < extraout_ECX[3]);\n                    }\n                    fcn.00403dd7(extraout_ECX[4]);\n                    uVar7 = *(unaff_EBP + -0x48);\n                    extraout_ECX[4] = 0;\n                    *(unaff_EBP + -4) = 0;\n                    fcn.00403dd7(uVar7);\n                    piVar6 = *(unaff_EBP + -0x34);\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    goto code_r0x004198e7;\n                }\n                *(*extraout_ECX + 4) = 1;\n            }\n            uVar7 = *(unaff_EBP + -0x2c);\n            extraout_ECX[2] = 0;\n            *(unaff_EBP + -4) = 0xb;\n            iVar5 = fcn.00403da8(uVar7);\n            extraout_ECX[2] = iVar5;\n            *(unaff_EBP + -4) = 4;\n            uVar10 = 0;\n            if (extraout_ECX[2] != 0) {\n                fcn.004229c0(extraout_ECX[2], 0, *(unaff_EBP + -0x2c));\n                iVar5 = fcn.0041580a(*(unaff_EBP + -0x44), extraout_ECX[3], *extraout_ECX, *(unaff_EBP + -0x2c), \n                                     *(unaff_EBP + -0x34));\n                if (iVar5 < 0) {\n                    fcn.00403dd7(extraout_ECX[4]);\n                    extraout_ECX[4] = 0;\n                }\n                *(unaff_EBP + -4) = 0;\n                fcn.00403dd7(*(unaff_EBP + -0x48));\n                goto code_r0x00419e6b;\n            }\n            if (extraout_ECX[3] != 0) {\n                puVar9 = *(unaff_EBP + -0x44) + 0x14;\n                do {\n                    fcn.00403dd7(*puVar9);\n                    uVar10 = uVar10 + 1;\n                    puVar9 = puVar9 + 0xd;\n                } while (uVar10 < extraout_ECX[3]);\n            }\ncode_r0x00419bb6:\n            fcn.00403dd7(extraout_ECX[4]);\n            uVar7 = *(unaff_EBP + -0x48);\n            extraout_ECX[4] = 0;\n            *(unaff_EBP + -4) = 0;\n            fcn.00403dd7(uVar7);\n            goto code_r0x0041997e;\n        }\n        *(unaff_EBP + -4) = 0;\n        fcn.00403dd7(*(unaff_EBP + -0x44));\n        piVar6 = *(unaff_EBP + -0x34);\n        *(unaff_EBP + -4) = 0xffffffff;\n    }\n    if (piVar6 != NULL) {\n        (**(*piVar6 + 8))(piVar6);\n    }\ncode_r0x00419e7e:\n    fcn.00421f06();\n    return;\n}\n",
        "token_count": 4884
    },
    "0041a8d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041a8d0(int32_t **param_1)\n\n{\n    int32_t *piVar1;\n    \n    if (param_1[4] != NULL) {\n        if (*param_1 != NULL) {\n            fcn.0041973d(*param_1);\n        }\n        if (param_1[4] != NULL) {\n            fcn.00418645(1);\n        }\n        param_1[4] = NULL;\n    }\n    if (*param_1 != NULL) {\n        fcn.00416c54();\n        piVar1 = *param_1;\n        if (piVar1 != NULL) {\n            *param_1 = NULL;\n            (**(*piVar1 + 8))(piVar1);\n        }\n        piVar1 = param_1[1];\n        if (piVar1 != NULL) {\n            param_1[1] = NULL;\n            (**(*piVar1 + 8))(piVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 223
    },
    "0041bfa5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041bfa5(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint in_stack_ffffffd0;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    iVar1 = fcn.0041bc03(arg_10h);\n    if (iVar1 == 0) {\n        return;\n    }\n    if (arg_10h != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg_10h + 0x20), 0xffffffec);\n        if ((uVar2 & 0x10000) != 0) {\n            return;\n        }\n        var_4h = fcn.0041bbb5(arg_10h);\n    }\n    if (arg_ch == arg_10h) {\n        if ((var_4h & 0x20) == 0) {\n            return;\n        }\n        if (arg_ch == 0) goto code_r0x0041c079;\n        iVar1 = arg_8h;\n        uVar3 = fcn.0041bf70(arg_8h);\n        iVar4 = fcn.0041be63(arg_8h, uVar3);\n        if (((iVar4 == 0) || (iVar4 == arg_10h)) || (uVar2 = fcn.0041bbb5(iVar4),  (uVar2 & 0x10) == 0))\n        goto code_r0x0041c079;\ncode_r0x0041c045:\n        fcn.0041bf0c(arg_8h, iVar1);\n    }\n    else {\n        iVar1 = arg_10h;\n        if (((arg_ch != 0) && (iVar4 = fcn.0041bbb5(arg_ch),  iVar4 != 0)) || ((arg_10h != 0 && (var_4h != 0))))\n        goto code_r0x0041c045;\n    }\n    if ((var_4h & 0x30) == 0) {\n        uVar3 = fcn.0041bf70(arg_8h);\n        arg_10h = fcn.0041be63(arg_8h, uVar3);\n        uVar2 = fcn.0041bbb5(arg_10h);\n        if ((uVar2 & 0x20) == 0) {\n            return;\n        }\n        iVar1 = fcn.0040e542();\n        if (iVar1 == 0) {\n            return;\n        }\n        in_stack_ffffffd0 = 1;\n    }\ncode_r0x0041c079:\n    fcn.0041bebd(arg_10h, in_stack_ffffffd0);\n    return;\n}\n",
        "token_count": 644
    },
    "0041c087": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0041c087(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    \n    piVar2 = fcn.00409e51();\n    iVar1 = arg_ch;\n    if (piVar2 != NULL) {\n        arg_8h = piVar2[0x11];\n        while (arg_8h != 0) {\n            ppiVar3 = fcn.0040835f(&arg_8h);\n            piVar2 = *ppiVar3;\n            if ((piVar2[1] != 0) && (*(piVar2[1] + 0x24) == *(iVar1 + 0x20))) {\n                return piVar2;\n            }\n            if (*piVar2 == *(iVar1 + 0x20)) {\n                return piVar2;\n            }\n        }\n        piVar2 = NULL;\n    }\n    return piVar2;\n}\n",
        "token_count": 229
    },
    "0041c0db": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0041c0db(int32_t arg_8h, int32_t *arg_ch, uint arg_10h)\n\n{\n    uint arg_ch_00;\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    \n    iVar3 = arg_8h;\n    if (arg_8h != 0) goto code_r0x0041c0ef;\ncode_r0x0041c0ea:\n    fcn.00404695();\ncode_r0x0041c0ef:\n    piVar6 = arg_ch;\n    arg_8h = 0;\n    piVar2 = piVar6;\n    if (arg_ch != NULL) {\n        if (arg_ch[1] == 0) {\n            iVar1 = *arg_ch;\n        }\n        else {\n            iVar1 = *(arg_ch[1] + 0x24);\n        }\n        if (iVar1 != 0) {\n            arg_ch_00 = fcn.0040b5a9(iVar1);\n            iVar1 = fcn.0041bc53(iVar3, arg_ch_00);\n            if (iVar1 != 0) {\n                piVar2 = fcn.0041c087(iVar3, iVar1);\n            }\n        }\n    }\n    while (((piVar2 = fcn.0040ee89(piVar2),  piVar2 != NULL && (arg_8h = arg_8h + 1,  piVar2 != piVar6)) &&\n           (arg_8h < 0x3d))) {\n        iVar3 = fcn.0041bb3b(piVar2, arg_10h);\n        if (iVar3 != 0) {\n            return piVar2;\n        }\n    }\n    iVar3 = fcn.00409e51();\n    if (iVar3 != 0) {\n        arg_8h = *(iVar3 + 0x44);\n        if (piVar6 == NULL) {\n            ppiVar4 = fcn.0040835f(&arg_8h);\n            piVar2 = *ppiVar4;\n            piVar6 = piVar2;\n        }\n        else {\n            piVar2 = NULL;\n            if (arg_8h == 0) {\n                return NULL;\n            }\n            do {\n                if (piVar2 == piVar6) break;\n                ppiVar4 = fcn.0040835f(&arg_8h);\n                piVar2 = *ppiVar4;\n            } while (arg_8h != 0);\n        }\n        if (((arg_8h != 0) && (piVar2 != NULL)) && (piVar6 != NULL)) {\n            do {\n                if (arg_8h == 0) {\n                    arg_8h = *(iVar3 + 0x44);\n                }\n                ppiVar4 = fcn.0040835f(&arg_8h);\n                piVar2 = *ppiVar4;\n                iVar1 = fcn.0041bb3b(piVar2, arg_10h);\n                if (iVar1 != 0) {\n                    if (piVar2 == NULL) {\ncode_r0x0041c204:\n                        if (piVar2[1] == 0) goto code_r0x0041c0ea;\n                        uVar5 = (**(*piVar2[1] + 0x78))();\n                        uVar5 = uVar5 & 0x8000000;\n                    }\n                    else {\n                        if (piVar2[1] == 0) {\n                            iVar1 = *piVar2;\n                        }\n                        else {\n                            iVar1 = *(piVar2[1] + 0x24);\n                        }\n                        if (iVar1 == 0) goto code_r0x0041c204;\n                        uVar5 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar1);\n                    }\n                    if (uVar5 != 0) {\n                        return piVar2;\n                    }\n                }\n                if (piVar2 == piVar6) {\n                    return NULL;\n                }\n            } while( true );\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 939
    },
    "0041c22e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0041c22e(uint arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint32_t uVar7;\n    int32_t *var_4h;\n    \n    var_4h = NULL;\n    piVar2 = fcn.0041c087(arg_8h, arg_ch);\n    piVar6 = piVar2;\n    if ((piVar2 == NULL) && (iVar3 = fcn.00409e51(),  iVar3 != 0)) {\n        arg_ch = *(iVar3 + 0x44);\n        while (piVar6 = piVar2,  arg_ch != 0) {\n            ppiVar4 = fcn.0040835f(&arg_ch);\n            piVar6 = *ppiVar4;\n            if (((piVar6[1] != 0) && (piVar6[1] == *(iVar3 + 0x70))) ||\n               ((*piVar6 != 0 && (iVar5 = (*_sym.imp.USER32.dll_GetFocus)(),  *piVar6 == iVar5)))) break;\n        }\n    }\n    iVar3 = 0;\n    do {\n        piVar6 = fcn.0041c0db(arg_8h, piVar6, arg_10h);\n        if (piVar6 == NULL) {\n            return NULL;\n        }\n        iVar5 = fcn.0041bb5f(piVar6);\n        if ((iVar5 != 0) && (piVar6 = fcn.0040e84a(piVar6, 0),  piVar6 == NULL)) {\n            return NULL;\n        }\n        if (piVar6 == NULL) {\ncode_r0x0041c2ed:\n            if (piVar6[1] == 0) {\n                fcn.00404695();\n                pcVar1 = swi(3);\n                piVar6 = (*pcVar1)();\n                return piVar6;\n            }\n            uVar7 = (**(*piVar6[1] + 0x78))();\n            uVar7 = uVar7 & 0x8000000;\n        }\n        else {\n            if (piVar6[1] == 0) {\n                iVar5 = *piVar6;\n            }\n            else {\n                iVar5 = *(piVar6[1] + 0x24);\n            }\n            if (iVar5 == 0) goto code_r0x0041c2ed;\n            uVar7 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar5);\n        }\n        if (uVar7 == 0) {\n            return piVar6;\n        }\n        if (piVar6 == var_4h) {\n            return NULL;\n        }\n        if (var_4h == NULL) {\n            var_4h = piVar6;\n        }\n        iVar3 = iVar3 + 1;\n        if (0x1ff < iVar3) {\n            return NULL;\n        }\n    } while( true );\n}\n",
        "token_count": 706
    },
    "0041cced": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041cced(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x10) == 0) {\n        iVar2 = fcn.004143d6(in_ECX + 0x14, *(in_ECX + 0x18), 0xc);\n        iVar1 = *(in_ECX + 0x18);\n        puVar3 = iVar2 + -8 + iVar1 * 0xc;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar3 = *(in_ECX + 0x10);\n            *(in_ECX + 0x10) = puVar3;\n            puVar3 = puVar3 + -3;\n        }\n    }\n    puVar3 = *(in_ECX + 0x10);\n    *(in_ECX + 0x10) = *puVar3;\n    puVar3[1] = arg_8h;\n    *puVar3 = arg_ch;\n    *(in_ECX + 0xc) = *(in_ECX + 0xc) + 1;\n    puVar3[2] = 0;\n    return;\n}\n",
        "token_count": 296
    },
    "0041cf23": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041cf23(int32_t *arg_8h, char *arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint var_4h;\n    \n    pcVar4 = arg_ch;\n    if (arg_ch != NULL) goto code_r0x0041cf38;\n    do {\n        fcn.00404695();\ncode_r0x0041cf38:\n    } while (arg_10h == 0);\n    arg_ch = NULL;\n    cVar2 = *pcVar4;\n    pcVar5 = pcVar4;\n    while (cVar2 != '\\0') {\n        if (*pcVar5 == '%') {\n            cVar2 = pcVar5[1];\n            if ((cVar2 < '1') || ('9' < cVar2)) {\n                if ((cVar2 < 'A') || ('Z' < cVar2)) goto code_r0x0041cf90;\n                if (cVar2 < ':') goto code_r0x0041cf70;\n                iVar3 = cVar2 + -0x38;\n            }\n            else {\ncode_r0x0041cf70:\n                iVar3 = cVar2 + -0x31;\n            }\n            pcVar5 = pcVar5 + 2;\n            if (arg_14h <= iVar3) goto code_r0x0041cfa3;\n            iVar3 = *(arg_10h + iVar3 * 4);\n            if (iVar3 != 0) {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(iVar3);\n                arg_ch = arg_ch + iVar3;\n            }\n        }\n        else {\ncode_r0x0041cf90:\n            iVar3 = fcn.00424816(*pcVar5);\n            if (iVar3 != 0) {\n                arg_ch = arg_ch + 1;\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = pcVar5 + 1;\ncode_r0x0041cfa3:\n            arg_ch = arg_ch + 1;\n        }\n        cVar2 = *pcVar5;\n    }\n    pcVar5 = fcn.004014d0(arg_ch);\n    cVar2 = *pcVar4;\n    do {\n        if (cVar2 == '\\0') {\n            fcn.004047eb(pcVar5 - *arg_8h);\n            return;\n        }\n        if (*pcVar4 == '%') {\n            cVar2 = pcVar4[1];\n            if ((cVar2 < '1') || ('9' < cVar2)) {\n                if ((cVar2 < 'A') || ('Z' < cVar2)) goto code_r0x0041d02c;\n                if (cVar2 < ':') goto code_r0x0041cfe9;\n                iVar3 = cVar2 + -0x38;\n            }\n            else {\ncode_r0x0041cfe9:\n                iVar3 = cVar2 + -0x31;\n            }\n            pcVar4 = pcVar4 + 2;\n            if (arg_14h <= iVar3) {\n                *pcVar5 = '?';\n                goto code_r0x0041d049;\n            }\n            piVar1 = arg_10h + iVar3 * 4;\n            iVar3 = *piVar1;\n            if (iVar3 != 0) {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(iVar3);\n                fcn.00404e48(pcVar5, arg_ch + 1, *piVar1);\n                arg_ch = arg_ch - iVar3;\n                pcVar5 = pcVar5 + iVar3;\n            }\n        }\n        else {\ncode_r0x0041d02c:\n            iVar3 = fcn.00424816(*pcVar4);\n            if (iVar3 != 0) {\n                *pcVar5 = *pcVar4;\n                pcVar5 = pcVar5 + 1;\n                pcVar4 = pcVar4 + 1;\n                arg_ch = arg_ch + -1;\n            }\n            *pcVar5 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\ncode_r0x0041d049:\n            pcVar5 = pcVar5 + 1;\n            arg_ch = arg_ch + -1;\n        }\n        cVar2 = *pcVar4;\n    } while( true );\n}\n",
        "token_count": 1012
    },
    "0041d2c8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041d2c8(int32_t pszPath, int32_t arg_ch, uint arg_10h)\n\n{\n    uint arg_10h_00;\n    int32_t iVar1;\n    \n    if (pszPath == 0) {\n        fcn.00404695();\n    }\n    arg_10h_00 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameA)(pszPath);\n    if (arg_ch == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_10h_00);\n        iVar1 = iVar1 + 1;\n    }\n    else {\n        fcn.00403eca(arg_ch, arg_10h, arg_10h_00, 0xffffffff);\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 185
    },
    "0041d308": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041d308(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uchar *arg_8h;\n    uint arg_8h_00;\n    uint *arg_8h_01;\n    char *arg_10h;\n    uint *arg_8h_02;\n    uint var_310h;\n    uint var_30ch;\n    uint var_20ch;\n    uint lpFilename;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    iVar1 = fcn.0040f83a();\n    *(iVar1 + 8) = *(param_1 + 0x44);\n    *(iVar1 + 0xc) = *(param_1 + 0x44);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(*(param_1 + 0x44), &lpFilename, 0x104);\n    if ((iVar2 == 0) || (iVar2 == 0x104)) {\n        fcn.0040fd17();\n    }\n    arg_8h_02 = &lpFilename;\n    arg_8h = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)();\n    if (arg_8h == NULL) {\n        fcn.0040fd17();\n    }\n    *arg_8h = 0;\n    iVar2 = fcn.0041d2c8(&lpFilename, &var_20ch, 0x104);\n    if (iVar2 != 0) {\n        fcn.0040fd17();\n    }\n    if (*(param_1 + 0x60) != 0) goto code_r0x0041d3b9;\n    iVar2 = fcn.00422aae(&var_20ch);\n    *(param_1 + 0x60) = iVar2;\n    if (iVar2 != 0) goto code_r0x0041d3b9;\ncode_r0x0041d3b4:\n    do {\n        fcn.0040465d();\ncode_r0x0041d3b9:\n        iVar2 = *(param_1 + 0x50);\n        if (iVar2 == 0) {\n            iVar2 = fcn.00404786(0xe000, &var_30ch, 0x100);\n            if (iVar2 == 0) {\n                arg_8h_01 = *(param_1 + 0x60);\n            }\n            else {\n                arg_8h_01 = &var_30ch;\n            }\n            iVar2 = fcn.00422aae(arg_8h_01);\n            *(param_1 + 0x50) = iVar2;\n            if (iVar2 == 0) goto code_r0x0041d3b4;\n        }\n        *(iVar1 + 0x10) = iVar2;\n        if (*(param_1 + 100) == 0) {\n            if (*(param_1 + 0x6c) == 1) {\n                arg_10h = \".CHM\";\n            }\n            else {\n                arg_10h = \".HLP\";\n            }\n            fcn.00404e48(arg_8h, &var_4h - arg_8h, arg_10h);\n            iVar2 = fcn.00422aae(&lpFilename);\n            *(param_1 + 100) = iVar2;\n            if (iVar2 == 0) goto code_r0x0041d3b4;\n            *arg_8h = 0;\n        }\n        if (*(param_1 + 0x68) != 0) goto code_r0x0041d47f;\n        arg_8h_00 = fcn.00422a3a(&var_20ch, 0x104, \".INI\");\n        fcn.00403de8(arg_8h_00);\n        iVar2 = fcn.00422aae(&var_20ch);\n        *(param_1 + 0x68) = iVar2;\n        if (iVar2 != 0) {\ncode_r0x0041d47f:\n            fcn.00420bb4(arg_8h_02);\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 951
    },
    "0041d48e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041d48e(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    uVar2 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar1)(uVar2 | 0x8001);\n    iVar3 = fcn.0040f83a();\n    *(iVar3 + 8) = arg_8h;\n    *(iVar3 + 0xc) = arg_8h;\n    fcn.0040efe1();\n    iVar3 = fcn.0040f83a();\n    iVar3 = *(iVar3 + 4);\n    if (iVar3 != 0) {\n        *(iVar3 + 0x48) = arg_10h;\n        *(iVar3 + 0x4c) = arg_14h;\n        *(iVar3 + 0x44) = arg_8h;\n        fcn.0041d308();\n    }\n    iVar3 = fcn.0040f83a();\n    if (*(iVar3 + 0x14) == '\\0') {\n        fcn.00406394();\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"user32.dll\");\n    if (iVar3 != 0) {\n        *0x44f634 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"NotifyWinEvent\");\n    }\n    return 1;\n}\n",
        "token_count": 361
    },
    "0041d8a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041d8a7(int32_t arg_8h, uint arg_ch)\n\n{\n    uint arg_8h_00;\n    int32_t arg_10h;\n    \n    if (arg_8h != 0) {\n        arg_10h = arg_8h;\n        arg_8h_00 = fcn.0041d515(arg_8h);\n        fcn.0041d861(arg_8h_00, arg_8h, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "0041d8ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041d8ca(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t *in_ECX;\n    \n    if (arg_8h < 4) {\n        arg_8h = 4;\n    }\n    if (arg_ch < 2) {\n        arg_ch = 0x40;\n    }\n    in_ECX[3] = 0;\n    in_ECX[2] = 0;\n    *in_ECX = arg_8h;\n    in_ECX[1] = arg_ch;\n    return;\n}\n",
        "token_count": 129
    },
    "0041d914": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041d914(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    \n    if (param_1[3] == 0) {\n        iVar1 = fcn.004143d6(param_1 + 2, param_1[1], *param_1);\n        iVar3 = param_1[1] + -1;\n        piVar2 = iVar1 + 4 + *param_1 * iVar3;\n        for (; -1 < iVar3; iVar3 = iVar3 + -1) {\n            *piVar2 = param_1[3];\n            param_1[3] = piVar2;\n            piVar2 = piVar2 - *param_1;\n        }\n    }\n    param_1[3] = *param_1[3];\n    return;\n}\n",
        "token_count": 200
    },
    "0041daf8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041daf8(uint32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t *puVar3;\n    int32_t in_ECX;\n    uint var_28h;\n    uint lpLastWriteTime;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    uint32_t lpFileSize;\n    uint32_t var_4h;\n    \n    fcn.004229c0(arg_8h, 0, 0x128);\n    fcn.00403eca(arg_8h + 0x22, 0x104, *(in_ECX + 0xc), 0xffffffff);\n    if (*(in_ECX + 4) == *0x43e9e4) {\ncode_r0x0041dc4f:\n        uVar2 = 1;\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetFileTime)\n                          (*(in_ECX + 4), &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        if (iVar1 != 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)(*(in_ECX + 4), &lpFileSize);\n            if (iVar1 != 0) {\n                arg_8h[6] = lpFileSize;\n                arg_8h[7] = var_4h;\n                if (*(*(in_ECX + 0xc) + -0xc) == 0) {\n                    *(arg_8h + 8) = 0;\n                }\n                else {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesA)(*(in_ECX + 0xc));\n                    *(arg_8h + 8) = (iVar1 == -1) - 1U & iVar1;\n                }\n                iVar1 = fcn.0041d975(&lpCreationTime);\n                if (iVar1 == 0) {\n                    *arg_8h = 0;\n                    arg_8h[1] = 0;\n                }\n                else {\n                    puVar3 = fcn.0041da98(&lpCreationTime, 0xffffffff);\n                    *arg_8h = *puVar3;\n                    arg_8h[1] = puVar3[1];\n                }\n                iVar1 = fcn.0041d975(&lpLastAccessTime);\n                if (iVar1 == 0) {\n                    arg_8h[4] = 0;\n                    arg_8h[5] = 0;\n                }\n                else {\n                    puVar3 = fcn.0041da98(&lpLastAccessTime, 0xffffffff);\n                    arg_8h[4] = *puVar3;\n                    arg_8h[5] = puVar3[1];\n                }\n                iVar1 = fcn.0041d975(&lpLastWriteTime);\n                if (iVar1 == 0) {\n                    arg_8h[2] = 0;\n                    arg_8h[3] = 0;\n                }\n                else {\n                    puVar3 = fcn.0041da98(&lpLastWriteTime, 0xffffffff);\n                    arg_8h[2] = *puVar3;\n                    arg_8h[3] = puVar3[1];\n                }\n                if ((*arg_8h | arg_8h[1]) == 0) {\n                    *arg_8h = arg_8h[2];\n                    arg_8h[1] = arg_8h[3];\n                }\n                if ((arg_8h[4] | arg_8h[5]) == 0) {\n                    arg_8h[4] = arg_8h[2];\n                    arg_8h[5] = arg_8h[3];\n                }\n                goto code_r0x0041dc4f;\n            }\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 869
    },
    "0041de93": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041de93(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    if (in_ECX[2] != 0) {\n        fcn.00403dd7(*in_ECX);\n    }\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "0041e195": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e195(uint *arg_8h)\n\n{\n    uint uVar1;\n    uint *in_ECX;\n    \n    if (in_ECX != arg_8h) {\n        uVar1 = *arg_8h;\n        if (arg_8h[2] != 0) {\n            *arg_8h = 0;\n        }\n        *in_ECX = uVar1;\n        in_ECX[1] = arg_8h[1];\n        in_ECX[2] = arg_8h[2];\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "0041e2a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041e2a0(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    int32_t arg_8h;\n    \n    arg_8h = 0;\n    if (0 < *(param_1 + 8)) {\n        do {\n            piVar2 = fcn.0041e0c3(arg_8h);\n            if ((*piVar2 == 0) || (iVar3 = fcn.0041e0c3(arg_8h),  *(iVar3 + 4) == 0)) {\n                fcn.00404695();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            ppiVar4 = fcn.0041e0c3(arg_8h);\n            iVar3 = fcn.0041e0c3(arg_8h);\n            arg_8h = arg_8h + 1;\n            **(iVar3 + 4) = -(**ppiVar4 != 0);\n        } while (arg_8h < *(param_1 + 8));\n    }\n    return;\n}\n",
        "token_count": 273
    },
    "0041e360": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl\nfcn.0041e360(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h)\n\n{\n    char cVar1;\n    uint8_t uVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t *puVar7;\n    uint uVar8;\n    uint extraout_ECX;\n    uint *puVar9;\n    int32_t iVar10;\n    uint32_t *puVar11;\n    int32_t unaff_EBP;\n    ulong *puVar12;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0x18);\n    puVar9 = *(unaff_EBP + 8);\n    *puVar9 = extraout_ECX;\n    puVar12 = puVar9 + 1;\n    if ((*(unaff_EBP + 0x14) == 6) || (*(unaff_EBP + 0x14) == 0xc)) {\n        *puVar12 = *(unaff_EBP + 0x10);\n        puVar12 = puVar9 + 2;\n    }\n    puVar9 = *(unaff_EBP + 0x18);\n    uVar8 = *puVar9;\n    *(unaff_EBP + -0x14) = 0;\n    *(unaff_EBP + -0x18) = uVar8;\n    *(unaff_EBP + 8) = puVar9[2];\n    *(unaff_EBP + -0x10) = puVar9[3];\n    cVar1 = **(unaff_EBP + 0xc);\n    *(unaff_EBP + 0x10) = *(unaff_EBP + 0xc);\n    if (cVar1 != '\\0') {\n        do {\n            uVar2 = **(unaff_EBP + 0x10);\n            uVar5 = uVar2;\n            iVar10 = *(unaff_EBP + 8) + -1;\n            *(unaff_EBP + 8) = iVar10;\n            *(unaff_EBP + 0x14) = uVar5;\n            if ((uVar2 != 0xff) && ((uVar2 & 0x40) != 0)) {\n                uVar5 = uVar5 & 0xffbf | 0x4000;\n                *(unaff_EBP + 0x14) = uVar5;\n            }\n            iVar4 = uVar5;\n            if (iVar10 < *(unaff_EBP + -0x10)) {\n                if (iVar4 == 0xff) {\n                    uVar8 = *(*(unaff_EBP + 0x18) + 0xc);\n                    *(unaff_EBP + -0x10) = 0;\n                    *(unaff_EBP + 8) = uVar8;\n                    *(unaff_EBP + -0x14) = 1;\n                    goto code_r0x0041e5ab;\n                }\n                if ((*(unaff_EBP + -0x14) == 0) && (iVar4 == 0xc)) {\n                    *0x44fb98 = 10;\n                    *0x44fba0 = 0x80020004;\n                    puVar11 = 0x44fb98;\n                    goto code_r0x0041e4e0;\n                }\n                break;\n            }\n            if (iVar4 == 0xff) break;\n            puVar7 = iVar10 * 0x10 + *(unaff_EBP + -0x18);\n            puVar11 = puVar7;\n            if ((iVar4 != 0xc) && (iVar3 = *puVar7,  iVar4 != iVar3)) {\n                puVar11 = iVar10 * 0x10 + *(unaff_EBP + 0x20);\n                if (iVar4 == 0xe) {\n                    *(unaff_EBP + 0xc) = 8;\n                }\n                else {\n                    *(unaff_EBP + 0xc) = uVar5;\n                }\n                if (iVar3 != *(unaff_EBP + 0xc)) {\n                    iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(puVar11, puVar7, 0, *(unaff_EBP + 0xc));\n                    if (iVar10 < 0) goto code_r0x0041e5c8;\n                    uVar5 = *(unaff_EBP + 0x14);\n                }\n                if (uVar5 == 0xe) {\n                    if (*puVar7 == *(unaff_EBP + 0xc)) {\n                        uVar5 = fcn.004107b1(puVar7[2]);\n                        puVar11[2] = uVar5;\n                        *puVar11 = 8;\n                    }\n                    else {\n                        uVar5 = puVar11[2];\n                        uVar6 = fcn.004107b1(uVar5);\n                        puVar11[2] = uVar6;\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)(uVar5);\n                    }\n                    *(unaff_EBP + 0x14) = 8;\n                    uVar5 = *(unaff_EBP + 0x14);\n                }\n            }\ncode_r0x0041e4e0:\n            if ((uVar5 & 0x4000) != 0) {\n                if ((uVar5 == 0x400b) && (*(unaff_EBP + 0x24) != 0)) {\n                    iVar4 = *puVar11[2];\n                    puVar7 = fcn.00403da8(4);\n                    if (puVar7 == NULL) {\n                        puVar7 = NULL;\n                    }\n                    else {\n                        *puVar7 = iVar4 != 0;\n                    }\n                    uVar8 = fcn.0041de59(puVar7, puVar11[2], 1);\n                    *(unaff_EBP + -4) = 0;\n                    fcn.0041e2f9(uVar8);\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x1c) != 0) {\n                        fcn.00403dd7(*(unaff_EBP + -0x24));\n                    }\n                }\n                else {\n                    puVar7 = puVar11[2];\n                }\ncode_r0x0041e54d:\n                *puVar12 = puVar7;\n                goto code_r0x0041e5a9;\n            }\n            puVar7 = puVar11;\n    // switch table (20 cases) at 0x41e5f4\n            switch(uVar5 & 0xffff) {\n            case 2:\n                uVar5 = *(puVar11 + 2);\n                break;\n            case 3:\n            case 8:\n            case 9:\n            case 10:\n            case 0xd:\n            case 0x13:\n                uVar5 = puVar11[2];\n                break;\n            case 4:\n                *puVar12 = puVar11[2];\n                goto code_r0x0041e5a9;\n            case 5:\n            case 7:\n                *puVar12 = *(puVar11 + 2);\n                goto code_r0x0041e586;\n            case 6:\n            case 0x14:\n            case 0x15:\n                *puVar12 = puVar11[2];\n                *(puVar12 + 4) = puVar11[3];\ncode_r0x0041e586:\n                puVar12 = puVar12 + 1;\n                goto code_r0x0041e5ab;\n            case 0xb:\n                uVar5 = *(puVar11 + 2) != 0;\n                break;\n            case 0xc:\n                goto code_r0x0041e54d;\n            default:\n                goto code_r0x0041e5ab;\n            case 0x10:\n                uVar5 = *(puVar11 + 2);\n                break;\n            case 0x11:\n                uVar5 = *(puVar11 + 2);\n                break;\n            case 0x12:\n                uVar5 = *(puVar11 + 2);\n            }\n            *puVar12 = uVar5;\ncode_r0x0041e5a9:\n            puVar12 = puVar12 + 4;\ncode_r0x0041e5ab:\n            *(unaff_EBP + 0x10) = *(unaff_EBP + 0x10) + 1;\n        } while (**(unaff_EBP + 0x10) != '\\0');\n        puVar9 = *(unaff_EBP + 0x18);\n    }\n    if (*(unaff_EBP + 8) < 1) {\n        if (**(unaff_EBP + 0x10) != '\\0') {\n            **(unaff_EBP + 0x1c) = puVar9[2];\n        }\n    }\n    else {\ncode_r0x0041e5c8:\n        **(unaff_EBP + 0x1c) = *(unaff_EBP + 8);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 2165
    },
    "0041e644": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_34h_2\n// WARNING: Variable defined which should be unmapped: var_30h_2\n// WARNING: Variable defined which should be unmapped: var_2ch_3\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch_2\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl\nfcn.0041e644(uint noname_0, uint arg_14h_2, uint arg_18h, uint arg_8h, uint arg_ch, uint noname_5, uint arg_14h)\n\n{\n    uint *puVar1;\n    char cVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t extraout_ECX;\n    int32_t *piVar7;\n    int32_t unaff_EBP;\n    float10 fVar8;\n    ulong uVar9;\n    uint var_4h;\n    uint var_6ch_2;\n    uint var_6ch;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint pvargDest;\n    uint var_40h;\n    uint var_34h_2;\n    uint var_30h_2;\n    uint var_2ch_3;\n    uint var_30h;\n    uint var_2ch_2;\n    uint var_34h;\n    uint var_24h_2;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uchar var_10h_2 [3];\n    int32_t var_19h;\n    uint uVar10;\n    uint var_10h;\n    \n    fcn.00421eaa();\n    *(unaff_EBP + -0x34) = extraout_ECX;\n    var_10h = *(extraout_ECX + 0x1c);\n    fcn.0040f886(var_10h);\n    iVar5 = *(unaff_EBP + 8);\n    iVar4 = *(iVar5 + 8);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x19) = 0;\n    *(unaff_EBP + -0x18) = iVar4;\n    if (iVar4 == 0) {\n        *(unaff_EBP + -0x18) = unaff_EBP + -0x19;\n    }\n    uVar10 = *(unaff_EBP + -0x18);\n    stack0xfffffff0 = 0x41e683;\n    iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n    *(unaff_EBP + -0x20) = *(iVar5 + 0x10);\n    *(unaff_EBP + -0x24) = *(iVar5 + 0xc);\n    if ((*(unaff_EBP + 0xc) & 0xc) == 0) {\ncode_r0x0041e70a:\n        iVar5 = *(unaff_EBP + 0x14);\n        *NULL = *(iVar5 + 8) << 4;\n        _var_10h_2 = 0x41e719;\n        cVar2 = fcn.00404050(*NULL, uVar10, var_10h);\n        if ((cVar2 != '\\0') && (uVar6 = *(iVar5 + 8),  uVar6 < 0x8000000)) {\n            stack0xfffffff0 = 0x41e742;\n            fcn.004221f0();\n            *(unaff_EBP + -0x10) = &stack0xfffffff4;\n            *(unaff_EBP + -0x30) = &stack0xfffffff4;\n            _var_10h_2 = 0;\n            unique0x10000355 = uVar6 << 4;\n            fcn.004229c0(*(unaff_EBP + -0x30));\n            unique0x00007a00 = *(unaff_EBP + -0x24);\n            _var_10h_2 = *(unaff_EBP + -0x18);\n            iVar5 = fcn.0041ddf2(_var_10h_2, unique0x00007a00);\n            cVar2 = fcn.00404050(iVar5 + 0x10, _var_10h_2, stack0xfffffff0);\n            if (cVar2 != '\\0') {\n                fcn.004221f0();\n                *(unaff_EBP + -0x10) = &stack0xffffffec;\n                piVar7 = NULL;\n                *(unaff_EBP + -0x58) = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const__.0;\n                *(unaff_EBP + -0x54) = 0;\n                *(unaff_EBP + -0x48) = 0;\n                *(unaff_EBP + -0x4c) = 0;\n                *(unaff_EBP + -0x50) = 0;\n                *(unaff_EBP + -4) = 1;\n                iVar4 = fcn.0041e360(&stack0xffffffec, *(unaff_EBP + -0x18), unaff_EBP + -0x44, *(unaff_EBP + -0x24), \n                                     *(unaff_EBP + 0x14), *(unaff_EBP + 0x18), *(unaff_EBP + -0x30), unaff_EBP + -0x58);\n                *(unaff_EBP + -0x18) = iVar4;\n                if (iVar4 == 0) {\n                    uVar6 = *(unaff_EBP + -0x24);\n                    uVar10 = *(unaff_EBP + -0x20);\n                    *(unaff_EBP + -4) = 2;\n                    if (uVar6 == 4) {\n                        fVar8 = fcn.00420210(uVar10, &stack0xffffffec, iVar5);\n                        *(unaff_EBP + -0x34) = fVar8;\n                        *(unaff_EBP + -0x44) = *(unaff_EBP + -0x34);\n                    }\n                    else if ((uVar6 == 5) || (uVar6 == 7)) {\n                        fVar8 = fcn.00420210(uVar10, &stack0xffffffec, iVar5);\n                        *(unaff_EBP + -0x44) = fVar8;\n                    }\n                    else if (uVar6 - 0x14 < 2) {\n                        uVar9 = fcn.00420210(uVar10, &stack0xffffffec, iVar5);\n                        *(unaff_EBP + -0x44) = uVar9;\n                        *(unaff_EBP + -0x40) = uVar9 >> 0x20;\n                    }\n                    else {\n                        piVar7 = fcn.00420210(uVar10, &stack0xffffffec, iVar5);\n                    }\n                    *(unaff_EBP + -4) = 1;\n                }\n                uVar6 = 0;\n                if (*(*(unaff_EBP + 0x14) + 8) != 0) {\n                    iVar5 = *(unaff_EBP + -0x30);\n                    do {\n                        (*_sym.imp.OLEAUT32.dll_VariantCopy)(iVar5);\n                        uVar6 = uVar6 + 1;\n                        iVar5 = iVar5 + 0x10;\n                    } while (uVar6 < *(*(unaff_EBP + 0x14) + 8));\n                }\n                if (*(unaff_EBP + -0x18) != 0) {\n                    *(unaff_EBP + -4) = 0;\n                    fcn.0041e1c0();\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x28) != 0) {\n                        fcn.0040ef97(0, *(unaff_EBP + -0x2c));\n                    }\n                    goto code_r0x0041e950;\n                }\n                fcn.0041e2a0();\n                puVar1 = *(unaff_EBP + 0x10);\n                if (puVar1 == NULL) {\n                    iVar3 = *(unaff_EBP + -0x24);\n                    if (iVar3 == 8) {\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)(piVar7);\n                    }\n                    else if (iVar3 == 9) {\ncode_r0x0041e90f:\n                        if (piVar7 != NULL) {\n                            (**(*piVar7 + 8))(piVar7);\n                        }\n                    }\n                    else if (iVar3 == 0xc) {\n                        (*_sym.imp.OLEAUT32.dll_VariantCopy)(unaff_EBP + -0x44);\n                    }\n                    else if (iVar3 == 0xd) goto code_r0x0041e90f;\n                }\n                else {\n                    uVar6 = *(unaff_EBP + -0x24);\n                    *puVar1 = uVar6;\n    // switch table (20 cases) at 0x41e95c\n                    switch(uVar6 & 0xffff) {\n                    case 2:\n                    case 0x12:\n                        *(puVar1 + 2) = piVar7;\n                        break;\n                    case 3:\n                    case 8:\n                    case 9:\n                    case 10:\n                    case 0xd:\n                    case 0x13:\n                        puVar1[2] = piVar7;\n                        break;\n                    case 4:\n                        puVar1[2] = *(unaff_EBP + -0x44);\n                        break;\n                    case 5:\n                    case 7:\n                        *(puVar1 + 2) = *(unaff_EBP + -0x44);\n                        break;\n                    case 6:\n                    case 0x14:\n                    case 0x15:\n                        puVar1[2] = *(unaff_EBP + -0x44);\n                        puVar1[3] = *(unaff_EBP + -0x40);\n                        break;\n                    case 0xb:\n                        *(puVar1 + 2) = (piVar7 == 0) - 1;\n                        break;\n                    case 0xc:\n                        *puVar1 = *(unaff_EBP + -0x44);\n                        puVar1[1] = *(unaff_EBP + -0x40);\n                        puVar1[2] = *(unaff_EBP + -0x3c);\n                        puVar1[3] = *(unaff_EBP + -0x38);\n                        break;\n                    case 0x10:\n                    case 0x11:\n                        *(puVar1 + 2) = piVar7;\n                    }\n                }\n                *(unaff_EBP + -4) = 0;\n                fcn.0041e1c0();\n                *(unaff_EBP + -4) = 0xffffffff;\n                if (*(unaff_EBP + -0x28) != 0) {\n                    fcn.0040ef97(0, *(unaff_EBP + -0x2c));\n                }\n                goto code_r0x0041e950;\n            }\n            goto code_r0x0041e6a6;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x28) == 0) goto code_r0x0041e950;\n        unique0x00007a00 = *(unaff_EBP + -0x2c);\n    }\n    else {\n        unique0x00001d00 = iVar4 + 3;\n        _var_10h_2 = 0x41e6a1;\n        cVar2 = fcn.00404050(unique0x00001d00, uVar10, var_10h);\n        if (cVar2 != '\\0') {\n            stack0xfffffff0 = 0x41e6cb;\n            fcn.004221f0();\n            *(unaff_EBP + -0x10) = &stack0xfffffff4;\n            _var_10h_2 = *(unaff_EBP + -0x18);\n            unique0x10000351 = iVar4;\n            fcn.00403e88(&stack0xfffffff4, iVar4 + 3, _var_10h_2, iVar4);\n            iVar3 = *(iVar5 + 0xc);\n            *(unaff_EBP + -0x18) = &stack0xfffffff4;\n            if (iVar3 == 8) {\n                iVar3 = 0xe;\n            }\n            *(unaff_EBP + -0x24) = 0;\n            (&stack0xfffffff4)[iVar4] = 0xff;\n            (&stack0xfffffff5)[iVar4] = iVar3;\n            (&stack0xfffffff6)[iVar4] = 0;\n            *(unaff_EBP + -0x20) = *(iVar5 + 0x14);\n            goto code_r0x0041e70a;\n        }\ncode_r0x0041e6a6:\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x28) == 0) goto code_r0x0041e950;\n        unique0x00007a00 = *(unaff_EBP + -0x2c);\n    }\n    _var_10h_2 = 0;\n    fcn.0040ef97();\ncode_r0x0041e950:\n    *(unaff_EBP + -0x70) = 0x41e958;\n    fcn.00421f06();\n    return;\n}\n",
        "token_count": 3232
    },
    "0041e9ac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041e9ac(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.004046e0();\n    *extraout_ECX = vtable.COleDispatchException.0;\n    fcn.00402630();\n    *(unaff_EBP + -4) = 0;\n    fcn.00402630();\n    fcn.00402630();\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 2;\n    extraout_ECX[4] = -(*(unaff_EBP + 0xc) != 0) & *(unaff_EBP + 0xc) + 0x60000U;\n    *(extraout_ECX + 2) = iVar1;\n    if (iVar2 != 0) {\n        fcn.00401840(*(unaff_EBP + 8));\n    }\n    extraout_ECX[7] = (iVar1 != 0) - 1 & 0x8000ffff;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 351
    },
    "0041ea30": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041ea30(ushort *arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint *arg_ch_00;\n    uint *var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    arg_ch_00 = 0x41ea58;\n    fcn.004229c0(arg_8h, 0, 0x20);\n    var_10ch = &fcn.0041ea30::var_104h;\n    iVar2 = fcn.00410745(0x43f858);\n    pcVar1 = _sym.imp.OLEAUT32.dll_SysReAllocString;\n    if (iVar2 == 0) {\n        iVar2 = fcn.00410745(0x43cfc4);\n        arg_ch_00 = &fcn.0041ea30::var_104h;\n        uVar4 = 0xf10a;\n        if (iVar2 == 0) {\n            uVar4 = 0xf108;\n        }\n        fcn.00404786(uVar4, arg_ch_00, 0x100);\n        *arg_8h = uVar4;\n    }\n    else {\n        var_10ch = *(arg_ch + 0xc);\n        *arg_8h = *(arg_ch + 8);\n        *(arg_8h + 8) = *(arg_ch + 0x10);\n        *(arg_8h + 0xe) = *(arg_ch + 0x1c);\n        if (*(*(arg_ch + 0x14) + -0xc) != 0) {\n            puVar3 = fcn.00404549(*(arg_ch + 0x14));\n            arg_ch_00 = 0x41eab2;\n            uVar4 = (*pcVar1)(*puVar3);\n            *(arg_8h + 6) = uVar4;\n            fcn.00401240();\n        }\n        if (*(*(arg_ch + 0x18) + -0xc) != 0) {\n            puVar3 = fcn.00404549(*(arg_ch + 0x18));\n            uVar4 = (*pcVar1)(*puVar3);\n            *(arg_8h + 2) = uVar4;\n            fcn.00401240();\n        }\n    }\n    puVar3 = fcn.00404549(var_10ch);\n    uVar4 = (*pcVar1)(*puVar3);\n    *(arg_8h + 4) = uVar4;\n    fcn.00401240();\n    if (*(arg_8h + 2) == 0) {\n        iVar2 = fcn.0040f83a();\n        puVar3 = fcn.00404549(*(iVar2 + 0x10));\n        uVar4 = (*pcVar1)(*puVar3);\n        *(arg_8h + 2) = uVar4;\n        fcn.00401240();\n    }\n    if ((*(arg_8h + 6) == 0) && (*(arg_8h + 8) != 0)) {\n        iVar2 = fcn.0040f83a();\n        puVar3 = fcn.00404549(*(*(iVar2 + 4) + 100));\n        uVar4 = (*pcVar1)(*puVar3);\n        *(arg_8h + 6) = uVar4;\n        fcn.00401240();\n    }\n    fcn.00420bb4(arg_ch_00);\n    return;\n}\n",
        "token_count": 831
    },
    "0041ebb7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0041ebb7(void)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CEnumArray.0;\n    pcVar1 = extraout_ECX[9];\n    *(unaff_EBP + -4) = 0;\n    if (pcVar1 != NULL) {\n        fcn.00410a52();\n    }\n    if (extraout_ECX[0xd] != NULL) {\n        fcn.00403dd7(extraout_ECX[10]);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00405a4f();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 229
    },
    "0041ef1d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041ef1d(int32_t **param_1)\n\n{\n    int32_t *piVar1;\n    \n    piVar1 = *param_1;\n    if (piVar1 != NULL) {\n        if (param_1[1] != NULL) {\n            (**(*piVar1 + 8))(piVar1);\n        }\n        *param_1 = NULL;\n    }\n    return;\n}\n",
        "token_count": 94
    },
    "0041ef6d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041ef6d(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t **ppuVar4;\n    int32_t arg_8h;\n    \n    arg_8h = 0;\n    if (0 < *(param_1 + 8)) {\n        do {\n            piVar2 = fcn.0041e0c3(arg_8h);\n            if ((*piVar2 == 0) || (iVar3 = fcn.0041e0c3(arg_8h),  *(iVar3 + 4) == 0)) {\n                fcn.00404695();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            iVar3 = fcn.0041e0c3(arg_8h);\n            ppuVar4 = fcn.0041e0c3(arg_8h);\n            arg_8h = arg_8h + 1;\n            **ppuVar4 = **(iVar3 + 4) != 0;\n        } while (arg_8h < *(param_1 + 8));\n    }\n    return;\n}\n",
        "token_count": 273
    },
    "0041efc7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: pbstr\n\nvoid __cdecl fcn.0041efc7(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint lpString, uint arg_1ch)\n\n{\n    char cVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint32_t *puVar4;\n    int32_t *piVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    int64_t iVar8;\n    code *pcVar9;\n    code *pcVar10;\n    int16_t iVar11;\n    uint uVar12;\n    int32_t iVar13;\n    uint32_t *puVar14;\n    int32_t iVar15;\n    int32_t *extraout_ECX;\n    uint16_t *puVar16;\n    uint32_t **ppuVar17;\n    int32_t unaff_EBP;\n    ulong *puVar18;\n    char *pcVar19;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint pvargDest;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pbstr;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_4h;\n    \n    fcn.00421e0b(0x7c);\n    *(unaff_EBP + -0x24) = extraout_ECX;\n    if (*extraout_ECX != 0) {\n        *(unaff_EBP + -0x54) = 0;\n        *(unaff_EBP + -0x50) = 0;\n        *(unaff_EBP + -0x4c) = 0;\n        *(unaff_EBP + -0x48) = 0;\n        *(unaff_EBP + -4) = 0;\n        fcn.004229c0(unaff_EBP + -0x54, 0, 0x10);\n        if (*(unaff_EBP + 0x18) != 0) {\n            uVar12 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*(unaff_EBP + 0x18));\n            *(unaff_EBP + -0x4c) = uVar12;\n        }\n        *(unaff_EBP + -0x20) = 0xfffffffd;\n        if ((*(unaff_EBP + 0xc) & 0xc) != 0) {\n            *(unaff_EBP + -0x48) = 1;\n            *(unaff_EBP + -0x50) = unaff_EBP + -0x20;\n        }\n        *(unaff_EBP + -0x68) = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const__.0;\n        *(unaff_EBP + -100) = 0;\n        *(unaff_EBP + -0x58) = 0;\n        *(unaff_EBP + -0x5c) = 0;\n        *(unaff_EBP + -0x60) = 0;\n        *(unaff_EBP + -4) = 1;\n        if (*(unaff_EBP + -0x4c) != 0) {\n            iVar8 = *(unaff_EBP + -0x4c) * 0x10;\n            iVar13 = fcn.00403da8(-(iVar8 >> 0x20 != 0) | iVar8);\n            *(unaff_EBP + -0x54) = iVar13;\n            fcn.004229c0(iVar13, 0, *(unaff_EBP + -0x4c) << 4);\n            cVar1 = **(unaff_EBP + 0x18);\n            puVar16 = iVar13 + -0x10 + *(unaff_EBP + -0x4c) * 0x10;\n            *(unaff_EBP + -0x14) = *(unaff_EBP + 0x18);\n            *(unaff_EBP + -0x10) = puVar16;\n            if (cVar1 != '\\0') {\n                ppuVar17 = *(unaff_EBP + 0x1c) + -4;\n                puVar18 = puVar16 + 4;\n                *(unaff_EBP + -0x1c) = puVar18;\n                *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + -8;\n                do {\n                    uVar2 = **(unaff_EBP + -0x14);\n                    *puVar16 = uVar2;\n                    if ((uVar2 & 0x40) != 0) {\n                        *puVar16 = uVar2 & 0xffbf | 0x4000;\n                    }\n                    uVar3 = *puVar16;\n                    if (0x4002 < uVar3) {\n    // switch table (19 cases) at 0x41f503\n                        switch(uVar3) {\n                        case 0x4003:\n                        case 0x4004:\n                        case 0x4005:\n                        case 0x4006:\n                        case 0x4007:\n                        case 0x4008:\n                        case 0x4009:\n                        case 0x400a:\n                        case 0x400c:\n                        case 0x400d:\n                        case 0x4010:\n                        case 0x4011:\n                        case 0x4012:\n                        case 0x4013:\n                        case 0x4014:\n                        case 0x4015:\n                            goto code_r0x0041f23f;\n                        case 0x400b:\n                            *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                            ppuVar17 = ppuVar17 + 1;\n                            puVar14 = *ppuVar17;\n                            *puVar14 = -(*puVar14 != 0) & 0xffff;\n                            *puVar18 = puVar14;\n                            uVar12 = fcn.0041de59(puVar14, puVar14, 0);\n                            *(unaff_EBP + -4) = 3;\n                            fcn.0041e2f9(uVar12);\n                            *(unaff_EBP + -4) = 1;\n                            if (*(unaff_EBP + -0x2c) != 0) {\n                                fcn.00403dd7(*(unaff_EBP + -0x34));\n                            }\n                        }\n                        goto code_r0x0041f248;\n                    }\n                    if (uVar3 == 0x4002) {\ncode_r0x0041f23f:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        ppuVar17 = ppuVar17 + 1;\n                        *puVar18 = *ppuVar17;\n                        goto code_r0x0041f248;\n                    }\n    // switch table (20 cases) at 0x41f4b3\n                    switch(uVar3) {\n                    case 2:\n                    case 0x12:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        iVar11 = *(ppuVar17 + 1);\n                        goto code_r0x0041f1cc;\n                    case 3:\n                    case 9:\n                    case 10:\n                    case 0xd:\n                    case 0x13:\n                        goto code_r0x0041f23f;\n                    case 4:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 8;\n                        ppuVar17 = ppuVar17 + 2;\n                        *puVar18 = **(unaff_EBP + 0x1c);\n                        break;\n                    case 5:\n                    case 7:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 8;\n                        ppuVar17 = ppuVar17 + 2;\n                        *puVar18 = **(unaff_EBP + 0x1c);\n                        break;\n                    case 6:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        ppuVar17 = ppuVar17 + 1;\n                        puVar14 = *ppuVar17;\n                        goto code_r0x0041f110;\n                    case 8:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        ppuVar17 = ppuVar17 + 1;\n                        puVar14 = *ppuVar17;\n                        *(unaff_EBP + -0x1c) = puVar14;\n                        iVar15 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(puVar14);\n                        iVar13 = *(unaff_EBP + -0x1c);\n                        *puVar18 = iVar15;\n                        if ((iVar13 != 0) && (iVar15 == 0)) {\n                            do {\n                                fcn.0040465d();\ncode_r0x0041f178:\n                                *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                                ppuVar17 = ppuVar17 + 1;\n                                puVar14 = *ppuVar17;\n                                *(unaff_EBP + -0x1c) = puVar14;\n                                fcn.00404549(puVar14);\n                                *(unaff_EBP + -4) = 2;\n                                iVar15 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*(unaff_EBP + -0x18));\n                                iVar13 = *(unaff_EBP + -0x1c);\n                                *puVar18 = iVar15;\n                            } while ((iVar13 != 0) && (iVar15 == 0));\n                            **(unaff_EBP + -0x10) = 8;\n                            *(unaff_EBP + -4) = 1;\n                            fcn.00401240();\n                        }\n                        break;\n                    case 0xb:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        iVar11 = -(ppuVar17[1] != NULL);\ncode_r0x0041f1cc:\n                        ppuVar17 = ppuVar17 + 1;\n                        *puVar18 = iVar11;\n                        break;\n                    case 0xc:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        puVar14 = *(unaff_EBP + -0x10);\n                        ppuVar17 = ppuVar17 + 1;\n                        puVar4 = *ppuVar17;\n                        *puVar14 = *puVar4;\n                        puVar14[1] = puVar4[1];\n                        puVar14[2] = puVar4[2];\n                        puVar14[3] = puVar4[3];\n                        puVar18 = *(unaff_EBP + -0x1c);\n                        break;\n                    case 0xe:\n                        goto code_r0x0041f178;\n                    case 0x10:\n                    case 0x11:\n                        *(unaff_EBP + 0x1c) = *(unaff_EBP + 0x1c) + 4;\n                        ppuVar17 = ppuVar17 + 1;\n                        *puVar18 = *ppuVar17;\n                        break;\n                    case 0x14:\n                    case 0x15:\n                        puVar14 = *(unaff_EBP + 0x1c) + 8;\n                        *(unaff_EBP + 0x1c) = puVar14;\n                        ppuVar17 = ppuVar17 + 2;\ncode_r0x0041f110:\n                        *puVar18 = *puVar14;\n                        *(puVar18 + 4) = puVar14[1];\n                    }\ncode_r0x0041f248:\n                    puVar16 = *(unaff_EBP + -0x10) + -0x10;\n                    puVar18 = puVar18 + -2;\n                    *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) + 1;\n                    cVar1 = **(unaff_EBP + -0x14);\n                    *(unaff_EBP + -0x10) = puVar16;\n                    *(unaff_EBP + -0x1c) = puVar18;\n                } while (cVar1 != '\\0');\n            }\n        }\n        iVar15 = 0;\n        iVar13 = 0;\n        fcn.00411cc8(unaff_EBP + -0x44);\n        if (*(unaff_EBP + 0x10) != 0) {\n            iVar13 = unaff_EBP + -0x44;\n        }\n        fcn.004229c0(unaff_EBP + -0x88, 0, 0x20);\n        piVar5 = **(unaff_EBP + -0x24);\n        *(unaff_EBP + -0x28) = 0xffffffff;\n        uVar12 = (**(*piVar5 + 0x18))\n                           (piVar5, *(unaff_EBP + 8), 0x44208c, 0, *(unaff_EBP + 0xc), unaff_EBP + -0x54, iVar13, \n                            unaff_EBP + -0x88, unaff_EBP + -0x28);\n        *(unaff_EBP + 0xc) = uVar12;\n        fcn.0041ef6d();\n        if (*(unaff_EBP + -0x4c) != 0) {\n            iVar13 = *(unaff_EBP + -0x4c) * 0x10 + -0x10 + *(unaff_EBP + -0x54);\n            for (pcVar19 = *(unaff_EBP + 0x18); *pcVar19 != '\\0'; pcVar19 = pcVar19 + 1) {\n                if ((*pcVar19 == '\\b') || (*pcVar19 == '\\x0e')) {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(iVar13);\n                }\n                iVar13 = iVar13 + -0x10;\n            }\n        }\n        fcn.00403dd7(*(unaff_EBP + -0x54));\n        *(unaff_EBP + -0x54) = 0;\n        if (-1 < *(unaff_EBP + 0xc)) goto code_r0x0041f3d8;\n        var_4h = unaff_EBP + -0x44;\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)();\n        if (*(unaff_EBP + 0xc) == -0x7ffdfff7) goto code_r0x0041f324;\n        while( true ) {\n            fcn.00403fa7(var_4h);\ncode_r0x0041f324:\n            if (*(unaff_EBP + -0x70) != iVar15) {\n                (**(unaff_EBP + -0x70))(unaff_EBP + -0x88);\n            }\n            iVar13 = fcn.00403da8(0x20);\n            *(unaff_EBP + 0x14) = iVar13;\n            *(unaff_EBP + -4) = 4;\n            if (iVar13 != iVar15) {\n                iVar15 = fcn.0041e9ac(iVar15, iVar15, *(unaff_EBP + -0x88));\n            }\n            pcVar10 = _sym.imp.OLEAUT32.dll_VariantInit;\n            *(unaff_EBP + -4) = 1;\n            iVar13 = (*pcVar10)(*(unaff_EBP + -0x84));\n            if (iVar13 != 0) {\n                fcn.00404306(*(unaff_EBP + -0x84));\n            }\n            pcVar9 = _sym.imp.OLEAUT32.dll_SysStringLen;\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(*(unaff_EBP + -0x84));\n            iVar13 = (*pcVar10)(*(unaff_EBP + -0x80));\n            if (iVar13 != 0) {\n                fcn.00404306(*(unaff_EBP + -0x80));\n            }\n            (*pcVar9)(*(unaff_EBP + -0x80));\n            iVar13 = (*pcVar10)(*(unaff_EBP + -0x7c));\n            if (iVar13 != 0) {\n                fcn.00404306(*(unaff_EBP + -0x7c));\n            }\n            (*pcVar9)(*(unaff_EBP + -0x7c));\n            *(iVar15 + 0x10) = *(unaff_EBP + -0x78);\n            *(iVar15 + 0x1c) = *(unaff_EBP + -0x6c);\n            *(unaff_EBP + 0x14) = iVar15;\n            fcn.0042160f(unaff_EBP + 0x14, 0x447c74);\ncode_r0x0041f3d8:\n            uVar6 = *(unaff_EBP + 0x10);\n            if (uVar6 == iVar15) goto code_r0x0041f493;\n            if ((uVar6 == 0xc) ||\n               (var_4h = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)\n                                   (unaff_EBP + -0x44, unaff_EBP + -0x44, iVar15, uVar6),  iVar15 <= var_4h)) break;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(unaff_EBP + -0x44);\n        }\n    // switch table (20 cases) at 0x41f54f\n        switch(uVar6 & 0xffff) {\n        case 2:\n        case 0x12:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c);\n            break;\n        case 3:\n        case 9:\n        case 10:\n        case 0xd:\n        case 0x13:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c);\n            break;\n        case 4:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c);\n            break;\n        case 5:\n        case 7:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c);\n            break;\n        case 6:\n        case 0x14:\n        case 0x15:\n            puVar7 = *(unaff_EBP + 0x14);\n            *puVar7 = *(unaff_EBP + -0x3c);\n            puVar7[1] = *(unaff_EBP + -0x38);\n            break;\n        case 8:\n            fcn.00410813(*(unaff_EBP + 0x14), *(unaff_EBP + -0x3c));\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(*(unaff_EBP + -0x3c));\n            break;\n        case 0xb:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c) != iVar15;\n            break;\n        case 0xc:\n            puVar7 = *(unaff_EBP + 0x14);\n            *puVar7 = *(unaff_EBP + -0x44);\n            puVar7[1] = *(unaff_EBP + -0x40);\n            puVar7[2] = *(unaff_EBP + -0x3c);\n            puVar7[3] = *(unaff_EBP + -0x38);\n            break;\n        case 0x10:\n        case 0x11:\n            **(unaff_EBP + 0x14) = *(unaff_EBP + -0x3c);\n        }\ncode_r0x0041f493:\n        *(unaff_EBP + -4) = 0;\n        fcn.0041e1c0();\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.0041ef39();\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 4868
    },
    "0041f627": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f627(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    fcn.0042031f();\n    fcn.0042027f();\n    fcn.00420221();\n    if (arg_8h == 0) {\n        iVar1 = fcn.00405d91();\n        if (iVar1 != 0) {\n            if (*(iVar1 + 0x40) != NULL) {\n                (**(**(iVar1 + 0x40) + 4))(1);\n            }\n            *(iVar1 + 0x40) = 0;\n        }\n        iVar1 = fcn.0040f282();\n        if (*(iVar1 + 0x100) == 1) {\n            (*_sym.imp.ole32.dll_CoFreeUnusedLibraries)();\n            (*_sym.imp.ole32.dll_OleUninitialize)();\n            *(iVar1 + 0x100) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 219
    },
    "0041f683": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f683(int32_t arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetTickCount;\n    if (arg_8h == 0) {\n        if (*0x44fba8 == 0) {\n            *0x44c540 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            *0x44fba8 = *0x44fba8 + 1;\n        }\n        iVar2 = (*pcVar1)();\n        if (60000 < iVar2 - *0x44c540) {\n            (*_sym.imp.ole32.dll_CoFreeUnusedLibraries)();\n            *0x44c540 = (*pcVar1)();\n        }\n    }\n    else {\n        fcn.0041f627(arg_ch);\n    }\n    return;\n}\n",
        "token_count": 200
    },
    "0041fcaa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0041fcaa(int32_t arg_8h, uint32_t *arg_ch, uint32_t *arg_10h)\n\n{\n    uint32_t *puVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t arg_8h_00;\n    uint32_t uVar4;\n    uint arg_8h_01;\n    uint in_stack_ffffffdc;\n    int32_t var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    if ((*(in_ECX + 0x18) & 1) != 0) goto code_r0x0041fcc7;\n    in_stack_ffffffdc = *(in_ECX + 0x14);\n    arg_8h_01 = 1;\ncode_r0x0041fcc2:\n    do {\n        while( true ) {\n            fcn.004121ee(arg_8h_01, in_stack_ffffffdc);\ncode_r0x0041fcc7:\n            arg_8h_00 = 0xffff;\n            if ((arg_8h != 0) && (*(arg_8h + 8) == 0xffff)) {\n                fcn.00404679();\n            }\n            fcn.0041fabc(0);\n            fcn.00411796(&var_4h);\n            if (var_4h == 0x7fff) {\n                fcn.004117de(&var_ch);\n            }\n            else {\n                var_ch = (var_4h & 0x8000) << 0x10 | var_4h & 0x7fff;\n            }\n            if ((var_ch & 0x80000000) != 0) break;\n            if (arg_10h != NULL) {\n                *arg_10h = var_ch;\n                return 0;\n            }\ncode_r0x0041fd32:\n            arg_8h_01 = 5;\n        }\n        if (var_4h != -1) {\n            uVar4 = var_ch & 0x7fffffff;\n            if ((uVar4 == 0) || (*(*(in_ECX + 0x38) + 8) - 1U < uVar4)) goto code_r0x0041fd32;\n            var_4h = 0;\n            fcn.00413cbc(1, &var_4h);\n            if (var_4h == 0) {\ncode_r0x0041fdca:\n                fcn.00404695();\n                goto code_r0x0041fdcf;\n            }\n            piVar2 = fcn.0041f76a(uVar4);\n            if (*piVar2 == 2) goto code_r0x0041fd32;\n            arg_8h_00 = fcn.0041f78b(uVar4);\n            var_8h = 0;\n            if ((*(in_ECX + 0x3c) == 0) || (iVar3 = fcn.00413cbc(arg_8h_00, &var_4h),  var_8h = var_4h,  iVar3 == 0)) {\n                var_8h = *(arg_8h_00 + 8) & 0x7fffffff;\n            }\ncode_r0x0041fe60:\n            if ((arg_8h == 0) || (iVar3 = fcn.0041071a(arg_8h),  iVar3 != 0)) {\n                if (arg_ch == NULL) {\n                    *(in_ECX + 0x10) = var_8h;\n                }\n                else {\n                    *arg_ch = var_8h;\n                }\n                if (arg_10h != NULL) {\n                    *arg_10h = var_ch;\n                }\n                return arg_8h_00;\n            }\ncode_r0x0041fd5c:\n            arg_8h_01 = 6;\n            goto code_r0x0041fcc2;\n        }\n        arg_8h_00 = fcn.00411877(in_ECX, &var_8h);\n        if (arg_8h_00 == 0) goto code_r0x0041fd5c;\n        if ((*(arg_8h_00 + 8) & 0x7fffffff) == var_8h) {\ncode_r0x0041fd9b:\n            fcn.0041f7ac();\n            uVar4 = 1;\n            fcn.004208c0(*(in_ECX + 0x34), arg_8h_00, 1);\n            var_10h = 0;\n            fcn.00413cbc(1, &var_10h);\n            if (var_10h == 0) goto code_r0x0041fdca;\ncode_r0x0041fdcf:\n            var_4h = uVar4;\n            fcn.0041f912(*(in_ECX + 0x34), &var_4h, uVar4);\n            *(in_ECX + 0x34) = *(in_ECX + 0x34) + 1;\n            goto code_r0x0041fe60;\n        }\n        if ((*(arg_8h_00 + 8) & 0x80000000) != 0) {\n            fcn.0041f9e8(0);\n            uVar4 = var_8h;\n            puVar1 = fcn.00413e3e(arg_8h_00);\n            *puVar1 = uVar4;\n            goto code_r0x0041fd9b;\n        }\n        arg_8h_01 = 7;\n    } while( true );\n}\n",
        "token_count": 1289
    },
    "0041ff7c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl fcn.0041ff7c(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t *arg_ch;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint uVar4;\n    uint var_4h;\n    \n    var_4h = 0x41ff88;\n    fcn.00421e3e(0x14);\n    if ((*(extraout_ECX + 0x18) & 1) != 0) goto code_r0x0041ff9a;\n    var_4h = *(extraout_ECX + 0x14);\n    uVar4 = 4;\ncode_r0x0041ff95:\n    do {\n        fcn.004121ee(uVar4, var_4h);\ncode_r0x0041ff9a:\n        iVar2 = fcn.0041fcaa(*(unaff_EBP + 8), unaff_EBP + -0x1c, unaff_EBP + -0x18);\n        *(unaff_EBP + -0x14) = 0;\n        if (iVar2 == 0) {\n            arg_ch = *(unaff_EBP + -0x18);\n            if (*(*(extraout_ECX + 0x38) + 8) + -1 < arg_ch) {\ncode_r0x0041ffc5:\n                uVar4 = 5;\n                goto code_r0x0041ff95;\n            }\n            *(unaff_EBP + -0x14) = 0;\n            iVar2 = fcn.00413cbc(1, unaff_EBP + -0x14);\n            if (iVar2 != 0) {\n                iVar2 = *(unaff_EBP + -0x14);\n                if (iVar2 == 0) goto code_r0x0041ffe8;\n                goto code_r0x0041ffed;\n            }\n        }\n        else {\n            *(unaff_EBP + -4) = 0;\n            arg_ch = fcn.004106d0();\n            *(unaff_EBP + -0x14) = arg_ch;\n            if (arg_ch == NULL) {\n                fcn.0040465d();\n            }\n            fcn.0041f7ac();\n            fcn.004208c0(*(extraout_ECX + 0x34), arg_ch, 1);\n            *(unaff_EBP + 8) = 0;\n            fcn.00413cbc(1, unaff_EBP + 8);\n            if (*(unaff_EBP + 8) != 0) {\n                uVar4 = *(extraout_ECX + 0x34);\n                *(unaff_EBP + -0x18) = 2;\n                fcn.0041f912(uVar4, unaff_EBP + -0x18, 1);\n                uVar4 = *(unaff_EBP + -0x1c);\n                uVar1 = *(extraout_ECX + 0x10);\n                *(extraout_ECX + 0x34) = *(extraout_ECX + 0x34) + 1;\n                *(extraout_ECX + 0x10) = uVar4;\n                (**(*arg_ch + 8))(extraout_ECX);\n                *(extraout_ECX + 0x10) = uVar1;\ncode_r0x004200b4:\n                fcn.00421ee3();\n                return;\n            }\ncode_r0x0041ffe8:\n            fcn.00404695();\n            iVar2 = extraout_ECX_00;\ncode_r0x0041ffed:\n            if (arg_ch <= *(iVar2 + 8) + -1) {\n                piVar3 = fcn.0041f76a(arg_ch);\n                if (*piVar3 == 1) goto code_r0x0041ffc5;\n            }\n        }\n        iVar2 = fcn.0041f78b(arg_ch);\n        if ((iVar2 == 0) || (*(unaff_EBP + 8) == 0)) goto code_r0x004200b4;\n        iVar2 = fcn.00410745(*(unaff_EBP + 8));\n        if (iVar2 != 0) goto code_r0x004200b4;\n        uVar4 = 6;\n    } while( true );\n}\n",
        "token_count": 1069
    },
    "0042025c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042025c(int32_t param_1)\n\n{\n    if (*(param_1 + 0x4a) != '\\0') {\n        if (*(param_1 + 0x24) != 0) {\n            (*_sym.imp.ole32.dll_CoRevokeClassObject)(*(param_1 + 0x24));\n            *(param_1 + 0x24) = 0;\n        }\n        *(param_1 + 0x4a) = 0;\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "0042035e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042035e(int32_t param_1)\n\n{\n    if (*(param_1 + 0x20) != 0) {\n        (*_sym.imp.ole32.dll_CoRegisterMessageFilter)(0, 0);\n        *(param_1 + 0x20) = 0;\n    }\n    return;\n}\n",
        "token_count": 77
    },
    "004209fe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004209fe(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    *(in_ECX + 0x74) = arg_8h;\n    if (arg_8h != 1) {\n        arg_8h = ((arg_8h != 2) - 1 & 3) - 1;\n    }\n    return arg_8h;\n}\n",
        "token_count": 95
    },
    "00420a42": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00420a42(code *arg_8h, int32_t arg_ch, code *arg_10h, uint arg_14h)\n\n{\n    code **in_ECX;\n    \n    fcn.00420a27(arg_14h);\n    *in_ECX = vtable.COleBusyDialog.0;\n    fcn.004229c0(in_ECX + 0x1e, 0, 0x2c);\n    in_ECX[0x1e] = 0x2c;\n    in_ECX[0x1f] = arg_10h;\n    if (arg_ch != 0) {\n        in_ECX[0x1f] = arg_10h | 8;\n    }\n    in_ECX[0x27] = arg_8h;\n    in_ECX[0x22] = fcn.004209b1;\n    return;\n}\n",
        "token_count": 202
    },
    "00420aa7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00420aa7(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t hWnd;\n    \n    iVar2 = *(param_1 + 0x68);\n    if (iVar2 != 0) {\n        iVar2 = *(iVar2 + 0x20);\n    }\n    hWnd = param_1;\n    uVar1 = fcn.00406b99(iVar2, &hWnd);\n    *(param_1 + 0x80) = uVar1;\n    fcn.0040d0e8(param_1);\n    iVar2 = sub.oledlg.dll_OleUIBusyA(param_1 + 0x78);\n    fcn.0040b662();\n    fcn.0040b632();\n    if (hWnd != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(hWnd, 1);\n    }\n    uVar1 = 2;\n    if (iVar2 != 2) {\n        if (iVar2 == 0x75) {\n            *(param_1 + 0xa4) = 1;\n        }\n        else {\n            if (iVar2 != 0x76) {\n                if (iVar2 == 0x77) {\n                    *(param_1 + 0xa4) = 3;\n                    return 1;\n                }\n                uVar1 = fcn.004209fe(iVar2);\n            }\n            *(param_1 + 0xa4) = uVar1;\n        }\n        return 1;\n    }\n    return 2;\n}\n",
        "token_count": 349
    },
    "00420bb4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00420bb4(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x44c69c) {\n        return;\n    }\n    *0x44fd70 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x44fd74 = &arg_8h;\n    *0x44fcb0 = 0x10001;\n    *0x44fc58 = 0xc0000409;\n    *0x44fc5c = 1;\n    var_328h = *0x44c69c;\n    var_324h = *0x44c6a0;\n    *0x44fc64 = unaff_retaddr;\n    *0x44fd3c = in_GS;\n    *0x44fd40 = in_FS;\n    *0x44fd44 = in_ES;\n    *0x44fd48 = in_DS;\n    *0x44fd4c = unaff_EDI;\n    *0x44fd50 = unaff_ESI;\n    *0x44fd54 = unaff_EBX;\n    *0x44fd58 = in_EDX;\n    *0x44fd5c = in_ECX;\n    *0x44fd60 = in_EAX;\n    *0x44fd64 = unaff_EBP;\n    *0x44fd68 = unaff_retaddr;\n    *0x44fd6c = in_CS;\n    *0x44fd78 = in_SS;\n    *0x44fca8 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0042e862(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x43fe64);\n    if (*0x44fca8 == 0) {\n        fcn.0042e862(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 838
    },
    "00420d93": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00420d93(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x420e3e;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.00420e6a;\n        uStack36 = *0x44c69c ^ &fcn.00420d93::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.00420d93::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.004270e8();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.00420d93::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 726
    },
    "00422750": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00422843: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00422848)\n// WARNING: Removing unreachable block (ram,0x00422876)\n// WARNING: Removing unreachable block (ram,0x0042284e)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00422750(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x4480a0, 0x18);\n    fcn.0042b377(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x44fc38 != 1) {\n        *0x44fc34 = 1;\n        *0x44fc30 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.00426e9c(*0x451a28);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.00426e9c(*0x451a24);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.00426e93();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.00426e9c(*piVar2);\n                        iVar3 = fcn.00426e93();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.00426e9c(*0x451a28);\n                        piVar1 = fcn.00426e9c(*0x451a24);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.0042268a(0x43c614);\n        }\n        fcn.0042268a(0x43c61c);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.0042b29d(8);\n    }\n    return;\n}\n",
        "token_count": 801
    },
    "00426313": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00426313(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004270e8();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.004270e8();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "004265ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004265ee(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.00420fd1(*(unaff_EBP + -0x28));\n    iVar1 = fcn.004270e8();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.004270e8();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.00420faa(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.00426373(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 380
    },
    "0042c8f5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0042c8f5(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.0042b29d(0);\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "0043154b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0043154b(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00426e93();\n    var_4h = 0;\n    if (*0x45068c == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x44204c);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x45068c = fcn.00426e21(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x44203c);\n        *0x450690 = fcn.00426e21(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x442028);\n        *0x450694 = fcn.00426e21(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0x45069c = fcn.00426e21(uVar3);\n        if (*0x45069c != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0x450698 = fcn.00426e21(uVar3);\n        }\n    }\n    if ((*0x450698 != iVar1) && (*0x45069c != iVar1)) {\n        pcVar4 = fcn.00426e9c(*0x450698);\n        pcVar5 = fcn.00426e9c(*0x45069c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0043168d;\n        }\n    }\n    if ((((*0x450690 != iVar1) && (pcVar4 = fcn.00426e9c(*0x450690),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x450694 != iVar1 && (pcVar4 = fcn.00426e9c(*0x450694),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0043168d:\n    pcVar4 = fcn.00426e9c(*0x45068c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 822
    },
    "00431f35": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00431f35(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    fcn.00421353(arg_10h);\n    var_14h = fcn.00433f94(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.0043350c(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00431f8e:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00431fce;\n        }\n        if (iVar1 != 2) {\ncode_r0x00431fc0:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00431fce;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00431fc0;\n        goto code_r0x00431f8e;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00431fce:\n    fcn.00420bb4(unaff_EBX);\n    return;\n}\n",
        "token_count": 502
    },
    "00431fdd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00431fdd(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    fcn.00421353(arg_10h);\n    var_14h = fcn.00433f94(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00433a50(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00432036:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00432076;\n        }\n        if (iVar1 != 2) {\ncode_r0x00432068:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00432076;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00432068;\n        goto code_r0x00432036;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00432076:\n    fcn.00420bb4(unaff_EBX);\n    return;\n}\n",
        "token_count": 496
    },
    "0043350c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043350c(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00433a0d;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0x44d710 - 1;\n        iVar4 = *0x44d710 + (*0x44d710 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0x44d710 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00433641;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00433648;\ncode_r0x00433641:\n                        do {\n                            var_4h = 1;\ncode_r0x00433648:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00433656;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00433656:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0x44d70c - *0x44d710) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0x44d70c < iVar12) {\n                if (iVar12 < *0x44d708) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0x44d71c;\n                    iVar4 = *0x44d714 + (*0x44d714 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x44d714 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0x44d714 + (*0x44d714 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x44d714 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0x44d71c + *0x44d708;\n                    uVar5 = 1;\n                }\n                goto code_r0x00433a0d;\n            }\n            var_10h = *0x44d70c - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0x44d710 - 1;\n            iVar12 = *0x44d710 + (*0x44d710 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0x44d710 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x004337f9;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x004337f9:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0x44d714 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00433a0d:\n    var_20h = iVar12 << (0x1fU - *0x44d714 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0x44d718 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0x44d718 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3640
    },
    "00433a50": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00433a50(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00433f51;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0x44d728 - 1;\n        iVar4 = *0x44d728 + (*0x44d728 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0x44d728 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00433b85;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00433b8c;\ncode_r0x00433b85:\n                        do {\n                            var_4h = 1;\ncode_r0x00433b8c:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00433b9a;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00433b9a:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0x44d724 - *0x44d728) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0x44d724 < iVar12) {\n                if (iVar12 < *0x44d720) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0x44d734;\n                    iVar4 = *0x44d72c + (*0x44d72c >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x44d72c & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0x44d72c + (*0x44d72c >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0x44d72c & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0x44d734 + *0x44d720;\n                    uVar5 = 1;\n                }\n                goto code_r0x00433f51;\n            }\n            var_10h = *0x44d724 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0x44d728 - 1;\n            iVar12 = *0x44d728 + (*0x44d728 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0x44d728 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00433d3d;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00433d3d:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0x44d72c + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00433f51:\n    var_20h = iVar12 << (0x1fU - *0x44d72c & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0x44d730 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0x44d730 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3652
    },
    "00437a9b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00437a9b(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.std::basic_filebuf_char__struct_std::char_traits_char__.0;\n    *(unaff_EBP + -4) = 0;\n    if (*(extraout_ECX + 0x12) != '\\0') {\n        fcn.004378c9();\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00436ade();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 179
    },
    "004085b2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004085b2(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t extraout_ECX;\n    uint32_t uVar1;\n    \n    if ((arg_10h != 0) && (arg_ch == 0)) {\n        arg_10h = fcn.00404695();\n        arg_ch = extraout_ECX;\n    }\n    if ((~*(arg_8h + 0x18) & 1) == 0) {\n        for (; arg_10h != 0; arg_10h = arg_10h - uVar1) {\n            uVar1 = 0x1fffffff;\n            if (arg_10h < 0x1fffffff) {\n                uVar1 = arg_10h;\n            }\n            fcn.00408590(arg_ch, uVar1 * 4);\n            arg_ch = arg_ch + uVar1 * 4;\n        }\n    }\n    else {\n        for (; arg_10h != 0; arg_10h = arg_10h - uVar1) {\n            uVar1 = 0x1fffffff;\n            if (arg_10h < 0x1fffffff) {\n                uVar1 = arg_10h;\n            }\n            fcn.004118fe(arg_ch, uVar1 * 4);\n            arg_ch = arg_ch + uVar1 * 4;\n        }\n    }\n    return;\n}\n",
        "token_count": 325
    },
    "0040b166": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040b166(uint32_t arg_8h)\n\n{\n    bool bVar1;\n    bool bVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t arg_8h_00;\n    int32_t iVar6;\n    int32_t *in_ECX;\n    uint hWnd;\n    uint lpMsg;\n    uint var_ch;\n    int32_t lParam;\n    uint var_4h;\n    \n    bVar2 = true;\n    lParam = 0;\n    if ((arg_8h & 4) != 0) {\n        uVar4 = fcn.0040e445();\n        bVar1 = true;\n        if ((uVar4 & 0x10000000) == 0) goto code_r0x0040b196;\n    }\n    bVar1 = false;\ncode_r0x0040b196:\n    iVar5 = (*_sym.imp.USER32.dll_GetParent)(in_ECX[8]);\n    in_ECX[0xf] = in_ECX[0xf] | 0x18;\n    arg_8h_00 = fcn.00405d9a();\n    pcVar3 = _sym.imp.USER32.dll_UpdateWindow;\ncode_r0x0040b221:\n    while ((!bVar2 || (iVar6 = (*_sym.imp.USER32.dll_PeekMessageA)(arg_8h_00, 0, 0, 0, 0),  iVar6 != 0))) {\n        do {\n            iVar6 = fcn.004061e6();\n            if (iVar6 == 0) {\n                fcn.00404c6b(0);\n                return -1;\n            }\n            if ((bVar1) && ((*(arg_8h_00 + 4) == 0x118 || (*(arg_8h_00 + 4) == 0x104)))) {\n                fcn.0040e51b(1);\n                (*pcVar3)(in_ECX[8]);\n                bVar1 = false;\n            }\n            iVar6 = (**(*in_ECX + 0x88))();\n            if (iVar6 == 0) {\n                in_ECX[0xf] = in_ECX[0xf] & 0xffffffe7;\n                return in_ECX[0x11];\n            }\n            iVar6 = fcn.004060e9(arg_8h_00);\n            if (iVar6 != 0) {\n                bVar2 = true;\n                lParam = 0;\n            }\n            iVar6 = (*_sym.imp.USER32.dll_PeekMessageA)(arg_8h_00, 0, 0, 0, 0);\n        } while (iVar6 != 0);\n    }\n    if (bVar1) {\n        fcn.0040e51b(1);\n        (*pcVar3)(in_ECX[8]);\n        bVar1 = false;\n    }\n    if ((((arg_8h & 1) == 0) && (iVar5 != 0)) && (lParam == 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar5, 0x121, 0, in_ECX[8]);\n    }\n    if ((arg_8h & 2) == 0) goto code_r0x0040b205;\n    goto code_r0x0040b21e;\ncode_r0x0040b205:\n    iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(in_ECX[8], 0x36a, 0, lParam);\n    lParam = lParam + 1;\n    if (iVar6 == 0) {\ncode_r0x0040b21e:\n        bVar2 = false;\n    }\n    goto code_r0x0040b221;\n}\n",
        "token_count": 843
    },
    "0040dfe9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040dfe9(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    bool bVar4;\n    uint32_t var_34h;\n    uint var_30h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    char *var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = fcn.0040f83a();\n    arg_8h = arg_8h & ~*(var_4h + 0x18);\n    if (arg_8h == 0) {\n        bVar4 = true;\n    }\n    else {\n        uVar3 = 0;\n        fcn.004229c0(&var_34h, 0, 0x28);\n        var_30h = _sym.imp.USER32.dll_DefWindowProcA;\n        iVar1 = fcn.0040f83a();\n        var_24h = *(iVar1 + 8);\n        var_1ch = *0x44f940;\n        var_ch = 8;\n        if ((arg_8h & 1) != 0) {\n            var_34h = 0xb;\n            var_10h = \"AfxWnd90s\";\n            iVar1 = fcn.0040dded(&var_34h);\n            if (iVar1 != 0) {\n                uVar3 = 1;\n            }\n        }\n        if ((arg_8h & 0x20) != 0) {\n            var_34h = var_34h | 0x8b;\n            var_10h = \"AfxOleControl90s\";\n            iVar1 = fcn.0040dded(&var_34h);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 0x20;\n            }\n        }\n        if ((arg_8h & 2) != 0) {\n            var_34h = 0;\n            var_10h = \"AfxControlBar90s\";\n            var_18h = 0x10;\n            iVar1 = fcn.0040dded(&var_34h);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 2;\n            }\n        }\n        if ((arg_8h & 4) != 0) {\n            var_34h = 8;\n            var_18h = 0;\n            iVar1 = fcn.0040dfa5(&var_34h, \"AfxMDIFrame90s\", 0x7a01);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 4;\n            }\n        }\n        if ((arg_8h & 8) != 0) {\n            var_34h = 0xb;\n            var_18h = 6;\n            iVar1 = fcn.0040dfa5(&var_34h, \"AfxFrameOrView90s\", 0x7a02);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 8;\n            }\n        }\n        if ((arg_8h & 0x10) != 0) {\n            var_8h = 0xff;\n            uVar2 = fcn.0040bb09(&var_ch, 0x3fc0);\n            uVar3 = uVar3 | uVar2;\n            arg_8h = arg_8h & 0xffffc03f;\n        }\n        if ((arg_8h & 0x40) != 0) {\n            var_8h = 0x10;\n            uVar2 = fcn.0040bb09(&var_ch, 0x40);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x80) != 0) {\n            var_8h = 2;\n            uVar2 = fcn.0040bb09(&var_ch, 0x80);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x100) != 0) {\n            var_8h = 8;\n            uVar2 = fcn.0040bb09(&var_ch, 0x100);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x200) != 0) {\n            var_8h = 0x20;\n            uVar2 = fcn.0040bb09(&var_ch, 0x200);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x400) != 0) {\n            var_8h = 1;\n            uVar2 = fcn.0040bb09(&var_ch, 0x400);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x800) != 0) {\n            var_8h = 0x40;\n            uVar2 = fcn.0040bb09(&var_ch, 0x800);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x1000) != 0) {\n            var_8h = 4;\n            uVar2 = fcn.0040bb09(&var_ch, 0x1000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x2000) != 0) {\n            var_8h = 0x80;\n            uVar2 = fcn.0040bb09(&var_ch, 0x2000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x4000) != 0) {\n            var_8h = 0x800;\n            uVar2 = fcn.0040bb09(&var_ch, 0x4000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x8000) != 0) {\n            var_8h = 0x400;\n            uVar2 = fcn.0040bb09(&var_ch, 0x8000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x10000) != 0) {\n            var_8h = 0x200;\n            uVar2 = fcn.0040bb09(&var_ch, 0x10000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x20000) != 0) {\n            var_8h = 0x100;\n            uVar2 = fcn.0040bb09(&var_ch, 0x20000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x40000) != 0) {\n            var_8h = 0x8000;\n            uVar2 = fcn.0040bb09(&var_ch, 0x40000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x80000) != 0) {\n            var_8h = 0x1000;\n            uVar2 = fcn.0040bb09(&var_ch, 0x80000);\n            uVar3 = uVar3 | uVar2;\n        }\n        *(var_4h + 0x18) = *(var_4h + 0x18) | uVar3;\n        if ((*(var_4h + 0x18) & 0x3fc0) == 0x3fc0) {\n            *(var_4h + 0x18) = *(var_4h + 0x18) | 0x10;\n            uVar3 = uVar3 | 0x10;\n        }\n        bVar4 = (uVar3 & arg_8h) == arg_8h;\n    }\n    return bVar4;\n}\n",
        "token_count": 1865
    },
    "0040e67e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040e67e(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.0040e61c();\n    return uVar1 >> 0x11 & 1;\n}\n",
        "token_count": 59
    },
    "00410e94": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00410e94(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint8_t *puVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint uVar9;\n    uint hMem;\n    uint lpCriticalSection;\n    \n    iVar1 = param_1 + 0x1c;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(iVar1);\n    iVar7 = *(param_1 + 4);\n    iVar8 = *(param_1 + 8);\n    if ((iVar7 <= iVar8) || ((*(*(param_1 + 0x10) + iVar8 * 8) & 1) != 0)) {\n        iVar8 = 1;\n        if (1 < iVar7) {\n            puVar3 = *(param_1 + 0x10);\n            do {\n                puVar3 = puVar3 + 8;\n                if ((*puVar3 & 1) == 0) break;\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < iVar7);\n            if (iVar8 < iVar7) goto code_r0x00410f82;\n        }\n        iVar7 = iVar7 + 0x20;\n        if (*(param_1 + 0x10) == 0) {\n            uVar4 = fcn.004048b4(iVar7, 8);\n            iVar5 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(2, uVar4);\n        }\n        else {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GlobalHandle)(*(param_1 + 0x10));\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar4);\n            uVar9 = 0x2002;\n            uVar6 = fcn.004048b4(iVar7, 8);\n            iVar5 = (*_sym.imp.KERNEL32.dll_GlobalReAlloc)(uVar4, uVar6, uVar9);\n        }\n        if (iVar5 == 0) {\n            param_1 = *(param_1 + 0x10);\n            if (param_1 != 0) {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GlobalHandle)(param_1);\n                (*_sym.imp.KERNEL32.dll_GlobalLock)(uVar4);\n            }\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar1);\n            iVar5 = fcn.0040465d();\n        }\n        iVar5 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar5);\n        fcn.004229c0(iVar5 + *(param_1 + 4) * 8, 0, (iVar7 - *(param_1 + 4)) * 8);\n        *(param_1 + 4) = iVar7;\n        *(param_1 + 0x10) = iVar5;\n    }\ncode_r0x00410f82:\n    if (*(param_1 + 0xc) <= iVar8) {\n        *(param_1 + 0xc) = iVar8 + 1;\n    }\n    puVar2 = *(param_1 + 0x10) + iVar8 * 8;\n    *puVar2 = *puVar2 | 1;\n    *(param_1 + 8) = iVar8 + 1;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar1);\n    return iVar8;\n}\n",
        "token_count": 778
    },
    "00411397": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411397(uint32_t arg_8h)\n\n{\n    fcn.0041133e();\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "00411719": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411719(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t in_ECX;\n    \n    if ((~*(in_ECX + 0x18) & 1) == 0) {\n        fcn.004121ee(2, *(in_ECX + 0x14));\n    }\n    uVar1 = *(in_ECX + 0x28) + 2;\n    if (*(in_ECX + 0x2c) <= uVar1 && uVar1 != *(in_ECX + 0x2c)) {\n        fcn.004115b2();\n    }\n    **(in_ECX + 0x28) = arg_8h;\n    *(in_ECX + 0x28) = *(in_ECX + 0x28) + 2;\n    return;\n}\n",
        "token_count": 191
    },
    "00411758": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411758(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t in_ECX;\n    \n    if ((~*(in_ECX + 0x18) & 1) == 0) {\n        fcn.004121ee(2, *(in_ECX + 0x14));\n    }\n    uVar1 = *(in_ECX + 0x28) + 4;\n    if (*(in_ECX + 0x2c) <= uVar1 && uVar1 != *(in_ECX + 0x2c)) {\n        fcn.004115b2();\n    }\n    **(in_ECX + 0x28) = arg_8h;\n    *(in_ECX + 0x28) = *(in_ECX + 0x28) + 4;\n    return;\n}\n",
        "token_count": 191
    },
    "00411796": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411796(ushort *arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    if ((*(in_ECX + 0x18) & 1) == 0) {\n        fcn.004121ee(4, *(in_ECX + 0x14));\n    }\n    if (*(in_ECX + 0x2c) < *(in_ECX + 0x28) + 2U) {\n        fcn.0041162a((*(in_ECX + 0x28) - *(in_ECX + 0x2c)) + 2);\n    }\n    *arg_8h = **(in_ECX + 0x28);\n    *(in_ECX + 0x28) = *(in_ECX + 0x28) + 2;\n    return;\n}\n",
        "token_count": 187
    },
    "004117de": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004117de(uint *arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    if ((*(in_ECX + 0x18) & 1) == 0) {\n        fcn.004121ee(4, *(in_ECX + 0x14));\n    }\n    if (*(in_ECX + 0x2c) < *(in_ECX + 0x28) + 4U) {\n        fcn.0041162a((*(in_ECX + 0x28) - *(in_ECX + 0x2c)) + 4);\n    }\n    *arg_8h = **(in_ECX + 0x28);\n    *(in_ECX + 0x28) = *(in_ECX + 0x28) + 4;\n    return;\n}\n",
        "token_count": 186
    },
    "0041446c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041446c(uint32_t arg_8h)\n\n{\n    fcn.0041445d();\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00415c42": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00415c42(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint *extraout_ECX;\n    uint *puVar2;\n    \n    if ((*(in_ECX + 0x70) & 0x1000) != 0) {\n        if ((*(in_ECX + 0x6c) & 1) != (arg_8h != NULL)) {\n            arg_8h = NULL;\n            *(in_ECX + 0x6c) = *(in_ECX + 0x6c) ^ 1;\n            puVar2 = *(in_ECX + 0x50);\n            if (puVar2 == NULL) {\n                fcn.00404695();\n                puVar2 = extraout_ECX;\n            }\n            iVar1 = (***puVar2)(puVar2, 0x4421bc, &arg_8h);\n            if (-1 < iVar1) {\n                (**(*arg_8h + 0x14))(arg_8h, 0xfffffd37);\n                (**(*arg_8h + 8))(arg_8h);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 272
    },
    "00416f1c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00416f1c(uint *arg_8h, uint arg_ch, uint32_t arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, int32_t arg_28h, int32_t arg_2ch, uint arg_30h)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    \n    iVar1 = 0;\n    if (arg_8h == NULL) {\n        arg_8h = fcn.00401170(0x80004005);\n        iVar1 = extraout_ECX;\n    }\n    *(arg_8h + 0xc) = arg_10h;\n    *(arg_8h + 0x32) = arg_18h;\n    arg_8h[8] = (arg_10h & 0xffff) >> 0xe & 1;\n    *(arg_8h + 0x33) = arg_1ch;\n    arg_8h[5] = arg_30h;\n    arg_8h[1] = arg_24h;\n    arg_8h[9] = arg_20h;\n    arg_8h[10] = arg_14h;\n    *arg_8h = arg_ch;\n    arg_8h[0xb] = iVar1;\n    arg_8h[2] = iVar1;\n    arg_8h[3] = iVar1;\n    arg_8h[4] = iVar1;\n    arg_8h[6] = iVar1;\n    arg_8h[7] = 1;\n    if (arg_28h != iVar1) {\n        arg_8h[7] = 3;\n        arg_8h[2] = arg_28h;\n    }\n    if (arg_2ch != iVar1) {\n        arg_8h[7] = arg_8h[7] | 4;\n        arg_8h[3] = arg_2ch;\n    }\n    return;\n}\n",
        "token_count": 462
    },
    "00418645": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00418645(uint32_t arg_8h)\n\n{\n    fcn.00415898();\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "0041ae21": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041ae21(uint32_t arg_8h)\n\n{\n    fcn.0041aadf();\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "0041b0d3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b0d3(uint32_t arg_8h)\n\n{\n    fcn.0041aee6();\n    if ((arg_8h & 1) != 0) {\n        fcn.00403dd7();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0041bbb5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0041bbb5(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if (arg_8h == 0) {\n        return arg_8h;\n    }\n    iVar1 = *(arg_8h + 0x50);\n    if (iVar1 != 0) {\n        if ((*(iVar1 + 0x70) & 0x1000) != 0) {\n            return (-((*(iVar1 + 0x6c) & 1) != 0) & 0xfffffff0) + 0x20;\n        }\n        return 0;\n    }\n    uVar2 = fcn.0041bb09(arg_8h, 0);\n    return uVar2 & 0x30;\n}\n",
        "token_count": 184
    },
    "0041e10d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e10d(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t extraout_ECX;\n    uint32_t uVar1;\n    \n    if ((arg_10h != 0) && (arg_ch == 0)) {\n        arg_10h = fcn.00404695();\n        arg_ch = extraout_ECX;\n    }\n    if ((~*(arg_8h + 0x18) & 1) == 0) {\n        for (; arg_10h != 0; arg_10h = arg_10h - uVar1) {\n            uVar1 = 0xaaaaaaa;\n            if (arg_10h < 0xaaaaaaa) {\n                uVar1 = arg_10h;\n            }\n            fcn.00408590(arg_ch, uVar1 * 0xc);\n            arg_ch = arg_ch + uVar1 * 0xc;\n        }\n    }\n    else {\n        for (; arg_10h != 0; arg_10h = arg_10h - uVar1) {\n            uVar1 = 0xaaaaaaa;\n            if (arg_10h < 0xaaaaaaa) {\n                uVar1 = arg_10h;\n            }\n            fcn.004118fe(arg_ch, uVar1 * 0xc);\n            arg_ch = arg_ch + uVar1 * 0xc;\n        }\n    }\n    return;\n}\n",
        "token_count": 330
    },
    "0041fbfb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041fbfb(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    uint arg_8h_00;\n    uint in_stack_ffffffec;\n    \n    if (arg_8h != 0) goto code_r0x0041fc16;\n    in_stack_ffffffec = *(in_ECX + 0x14);\n    arg_8h_00 = 6;\n    while( true ) {\n        fcn.004121ee(arg_8h_00, in_stack_ffffffec);\ncode_r0x0041fc16:\n        if ((~*(in_ECX + 0x18) & 1) != 0) break;\n        arg_8h_00 = 1;\n    }\n    if (*(arg_8h + 8) == 0xffff) {\n        fcn.00404679();\n    }\n    fcn.0041fabc(0);\n    puVar2 = fcn.00413e3e(arg_8h);\n    uVar1 = *puVar2;\n    if (uVar1 == 0) {\n        fcn.00411719(0xffff);\n        fcn.00411a2a(in_ECX);\n        fcn.0041f7ac();\n        puVar3 = fcn.00413e3e(arg_8h);\n        *puVar3 = *(in_ECX + 0x34);\n        *(in_ECX + 0x34) = *(in_ECX + 0x34) + 1;\n    }\n    else if (uVar1 < 0x7fff) {\n        fcn.00411719(uVar1 | 0x8000);\n    }\n    else {\n        fcn.00411719(0x7fff);\n        fcn.00411758(uVar1 | 0x80000000);\n    }\n    return;\n}\n",
        "token_count": 438
    },
    "0041fee0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041fee0(int32_t *arg_8h)\n\n{\n    uint32_t arg_8h_00;\n    uint32_t *puVar1;\n    uint arg_8h_01;\n    uint *puVar2;\n    int32_t in_ECX;\n    \n    if ((~*(in_ECX + 0x18) & 1) == 0) {\n        fcn.004121ee(2, *(in_ECX + 0x14));\n    }\n    fcn.0041fabc(0);\n    if (arg_8h == NULL) {\n        fcn.00411719(0);\n    }\n    else {\n        puVar1 = fcn.00413e3e(arg_8h);\n        arg_8h_00 = *puVar1;\n        if (arg_8h_00 == 0) {\n            arg_8h_01 = (***arg_8h)();\n            fcn.0041fbfb(arg_8h_01);\n            fcn.0041f7ac();\n            puVar2 = fcn.00413e3e(arg_8h);\n            *puVar2 = *(in_ECX + 0x34);\n            *(in_ECX + 0x34) = *(in_ECX + 0x34) + 1;\n            (**(*arg_8h + 8))();\n        }\n        else if (arg_8h_00 < 0x7fff) {\n            fcn.00411719(arg_8h_00);\n        }\n        else {\n            fcn.00411719(0x7fff);\n            fcn.00411758(arg_8h_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 379
    },
    "00430ff1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00430ff1(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x4484e8, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00422271();\n        *puVar2 = 0;\n        puVar2 = fcn.0042225e();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x451908)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x451920;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00432a3c(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.0042225e();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00422271();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.004308be(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004310c3(0x4484e8);\n                goto code_r0x004310bd;\n            }\n        }\n        puVar2 = fcn.00422271();\n        *puVar2 = 0;\n        puVar2 = fcn.0042225e();\n        *puVar2 = 9;\n        fcn.00425dac(0, 0, 0, 0, 0);\n    }\ncode_r0x004310bd:\n    fcn.004241c9();\n    return;\n}\n",
        "token_count": 625
    },
    "0043937b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0043937b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x448af8, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00422271();\n        *puVar2 = 0;\n        puVar2 = fcn.0042225e();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x451908)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x451920;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00432a3c(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.0042225e();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00422271();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00439306(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0043944d(0x448af8);\n                goto code_r0x00439447;\n            }\n        }\n        puVar2 = fcn.00422271();\n        *puVar2 = 0;\n        puVar2 = fcn.0042225e();\n        *puVar2 = 9;\n        fcn.00425dac(0, 0, 0, 0, 0);\n    }\ncode_r0x00439447:\n    fcn.004241c9();\n    return;\n}\n",
        "token_count": 623
    },
    "00401cb0": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nint32_t fcn.00401cb0(char *param_1, int32_t param_2)\n\n{\n    char cVar1;\n    \n    cVar1 = *param_1;\n    while (cVar1 != 0) {\n        param_1 = param_1 + 1;\n        param_2 = param_2 * 0x21 + cVar1;\n        cVar1 = *param_1;\n    }\n    return param_2;\n}\n",
        "token_count": 102
    },
    "00401ce0": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nint32_t fcn.00401ce0(uint16_t *param_1, int32_t param_2)\n\n{\n    uint16_t uVar1;\n    \n    uVar1 = *param_1;\n    while (uVar1 != 0) {\n        param_1 = param_1 + 1;\n        param_2 = param_2 * 0x21 + uVar1;\n        uVar1 = *param_1;\n    }\n    return param_2;\n}\n",
        "token_count": 106
    },
    "004024f0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004024f0(int32_t param_1, uint32_t param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint *arg_8h;\n    int32_t arg_10h;\n    uint *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x439840;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    uVar4 = var_8h | 0xf;\n    if (uVar4 != 0xffffffff) {\n        uVar1 = *(param_1 + 0x18);\n        uVar3 = uVar1 >> 1;\n        var_8h = uVar4;\n        if ((uVar4 / 3 < uVar3) && (uVar1 <= -uVar3 - 2)) {\n            var_8h = uVar3 + uVar1;\n        }\n    }\n    var_4h = 0;\n    arg_8h = fcn.00401fe0(var_8h + 1, 0);\n    if (var_ch_2 != 0) {\n        if (*(param_1 + 0x18) < 0x10) {\n            arg_10h = param_1 + 4;\n        }\n        else {\n            arg_10h = *(param_1 + 4);\n        }\n        fcn.00420bc3(arg_8h, var_8h + 1, arg_10h, var_ch_2);\n    }\n    if (0xf < *(param_1 + 0x18)) {\n        fcn.00403dd7(*(param_1 + 4));\n    }\n    puVar2 = param_1 + 4;\n    *puVar2 = 0;\n    *puVar2 = arg_8h;\n    *(param_1 + 0x18) = var_8h;\n    *(param_1 + 0x14) = var_ch_2;\n    if (0xf < var_8h) {\n        puVar2 = arg_8h;\n    }\n    *(puVar2 + var_ch_2) = 0;\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 581
    },
    "00403e14": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403e14(uint *arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    if (arg_ch * arg_10h >> 0x20 != 0) {\n        return 0x80070057;\n    }\n    *arg_8h = arg_ch * arg_10h;\n    return 0;\n}\n",
        "token_count": 85
    },
    "00403f22": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403f22(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h)\n\n{\n    if (arg_14h == -1) {\n        arg_14h = fcn.00421cf0(arg_10h);\n        arg_14h = arg_14h + 1;\n    }\n    fcn.00403ea9(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 112
    },
    "004047eb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004047eb(int32_t arg_8h)\n\n{\n    int32_t *in_ECX;\n    \n    if (arg_8h == -1) {\n        arg_8h = fcn.00404771(*in_ECX, *(*in_ECX + -8));\n    }\n    fcn.00401260(arg_8h);\n    return;\n}\n",
        "token_count": 84
    },
    "00406dfa": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.00406dfa(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t arg_10h_00;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    fcn.00402630();\n    *(unaff_EBP + -4) = 0;\n    fcn.00401790(*(unaff_EBP + 8));\n    arg_10h_00 = *(unaff_EBP + 0x10);\n    if (arg_10h_00 == -1) {\n        arg_10h_00 = *(unaff_EBP + 8);\n    }\n    fcn.00406dac(*(unaff_EBP + -0x10), *(unaff_EBP + 0xc), arg_10h_00);\n    fcn.00401240();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 252
    },
    "00407a13": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407a13(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    uint32_t var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_18h;\n    \n    var_20h = arg_ch;\n    var_28h = arg_10h;\n    var_2ch = 5;\n    if (arg_14h != -1) {\n        var_2ch = 7;\n        var_24h = arg_14h;\n    }\n    if (arg_18h != -1) {\n        var_2ch = var_2ch | 8;\n        var_18h = arg_18h;\n    }\n    fcn.004079f6(arg_8h, &var_2ch);\n    return;\n}\n",
        "token_count": 211
    },
    "0040de7a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040de7a(uint16_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint16_t *puVar4;\n    uint *puVar5;\n    uint var_34h;\n    uint var_30h;\n    uint16_t *var_2ch;\n    int32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_SendDlgItemMessageA;\n    var_4h = 1;\n    puVar4 = arg_8h;\n    var_8h = in_ECX;\n    if (arg_8h != NULL) {\n        do {\n            if (*puVar4 == 0) break;\n            var_ch = *puVar4;\n            uVar2 = puVar4[1];\n            var_10h = *(puVar4 + 2);\n            puVar4 = puVar4 + 4;\n            if (uVar2 == 0x1234) {\ncode_r0x0040def4:\n                puVar5 = &var_30h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar5 = 0;\n                    puVar5 = puVar5 + 1;\n                }\n                var_30h = 0xffffffff;\n                var_34h = 1;\n                fcn.00401880(puVar4);\n                var_2ch = arg_8h;\n                iVar3 = (*pcVar1)(*(var_8h + 0x20), var_ch & 0xffff, 0x401, 0, &var_34h);\n                if (iVar3 == -1) {\n                    var_4h = 0;\n                }\n                fcn.00401240();\n            }\n            else if (uVar2 == 0x401) {\n                uVar2 = 0x180;\ncode_r0x0040df58:\n                iVar3 = (*pcVar1)(*(var_8h + 0x20), var_ch, uVar2, 0, puVar4);\n                if (iVar3 == -1) {\n                    var_4h = 0;\n                }\n            }\n            else {\n                if (uVar2 == 0x403) {\n                    uVar2 = 0x143;\n                }\n                if (uVar2 == 0x401) goto code_r0x0040def4;\n                if ((uVar2 == 0x180) || (uVar2 == 0x143)) goto code_r0x0040df58;\n            }\n            puVar4 = puVar4 + var_10h;\n        } while (var_4h != 0);\n        if (var_4h == 0) {\n            return 0;\n        }\n    }\n    fcn.0040bf33(*(var_8h + 0x20), 0x364, 0, 0, 0, 0);\n    return var_4h;\n}\n",
        "token_count": 708
    },
    "0040f29b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040f29b(void)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.AFX_MODULE_STATE.0;\n    puVar1 = extraout_ECX[0x12];\n    *(unaff_EBP + -4) = 1;\n    if (puVar1 != NULL) {\n        (***puVar1)(1);\n    }\n    if (extraout_ECX[0x1c] != NULL) {\n        (**(*extraout_ECX[0x1c] + 0xc))(extraout_ECX + 0x13);\n        if (extraout_ECX[0x1c] != NULL) {\n            (**(*extraout_ECX[0x1c] + 4))(1);\n        }\n    }\n    if (*extraout_ECX[0x1e] != NULL) {\n        (****extraout_ECX[0x1e])(1);\n    }\n    if (*(extraout_ECX[0x1e] + 4) != NULL) {\n        (****(extraout_ECX[0x1e] + 4))(1);\n    }\n    fcn.00403dd7(extraout_ECX[0x1e]);\n    pcVar2 = extraout_ECX[0x20];\n    if ((pcVar2 != NULL) && (pcVar2 != 0xffffffff)) {\n        fcn.0040ef6b(pcVar2);\n        extraout_ECX[0x20] = 0xffffffff;\n    }\n    *(unaff_EBP + -4) = 0;\n    fcn.00411305();\n    fcn.00401240();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 457
    },
    "00410fac": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.00410fac(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    param_1[5] = 0;\n    param_1[6] = 4;\n    param_1[1] = 0;\n    param_1[2] = 1;\n    param_1[3] = 0;\n    param_1[4] = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_TlsAlloc)();\n    *param_1 = iVar1;\n    if (iVar1 == -1) {\n        fcn.0040465d();\n    }\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(param_1 + 7);\n    return param_1;\n}\n",
        "token_count": 169
    },
    "0041133e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041133e(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t arg_8h;\n    uint uVar2;\n    \n    arg_8h = param_1[5];\n    while (arg_8h != 0) {\n        iVar1 = *(arg_8h + 4);\n        fcn.00411188(arg_8h, 0);\n        arg_8h = iVar1;\n    }\n    if (*param_1 != -1) {\n        (*_sym.imp.KERNEL32.dll_TlsFree)(*param_1);\n    }\n    if (param_1[4] != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GlobalHandle)(param_1[4]);\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar2);\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(uVar2);\n    }\n    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(param_1 + 7);\n    return;\n}\n",
        "token_count": 229
    },
    "00413066": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00413066(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint arg_8h;\n    bool bVar2;\n    uint arg_ch;\n    \n    bVar2 = false;\n    if (*(param_1 + 4) != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)(*(param_1 + 4));\n        bVar2 = iVar1 == 0;\n    }\n    *(param_1 + 4) = 0xffffffff;\n    *(param_1 + 8) = 0;\n    fcn.00401400();\n    if (bVar2) {\n        arg_ch = *(param_1 + 0xc);\n        arg_8h = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.0041d8a7(arg_8h, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "004131d4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.004131d4(void)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_21ch;\n    uint var_4h;\n    \n    fcn.00421eaa(0x214);\n    *(unaff_EBP + -0x21c) = extraout_ECX;\n    *extraout_ECX = vtable.CFile.0;\n    pcVar1 = extraout_ECX[1];\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -4) = 1;\n    if ((pcVar1 != 0xffffffff) && (extraout_ECX[2] != NULL)) {\n        fcn.00413066();\n    }\n    fcn.00401240();\n    fcn.00421f06();\n    return;\n}\n",
        "token_count": 192
    },
    "00413d2d": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413d2d(int32_t **arg_8h, int32_t *arg_ch, int32_t *arg_10h)\n\n{\n    int32_t **ppiVar1;\n    int32_t in_ECX;\n    int32_t extraout_ECX;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    piVar3 = *arg_8h;\n    if (piVar3 != NULL) {\n        if (piVar3 == 0xffffffff) {\n            uVar4 = 0;\n            if (*(in_ECX + 8) != 0) {\n                ppiVar1 = *(in_ECX + 4);\n                do {\n                    piVar3 = *ppiVar1;\n                    if (piVar3 != NULL) goto code_r0x00413d61;\n                    uVar4 = uVar4 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                } while (uVar4 < *(in_ECX + 8));\n                fcn.00404695();\n                in_ECX = extraout_ECX;\n            }\n        }\ncode_r0x00413d61:\n        piVar5 = *piVar3;\n        if (piVar5 == NULL) {\n            uVar4 = *(in_ECX + 8);\n            uVar2 = (piVar3[1] >> 4) % uVar4 + 1;\n            if (uVar2 < uVar4) {\n                ppiVar1 = *(in_ECX + 4) + uVar2 * 4;\n                do {\n                    piVar5 = *ppiVar1;\n                    if (piVar5 != NULL) break;\n                    uVar2 = uVar2 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                } while (uVar2 < uVar4);\n            }\n        }\n        *arg_8h = piVar5;\n        *arg_ch = piVar3[1];\n        *arg_10h = piVar3[2];\n    }\n    return;\n}\n",
        "token_count": 472
    },
    "00414156": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00414156(int32_t *arg_8h, uint32_t arg_ch, int32_t *arg_10h)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (arg_10h == NULL) {\n        fcn.00404695();\n    }\n    puVar1 = (**(*arg_8h + 0x3c))();\n    do {\n        if (puVar1 == NULL) {\n            return 0;\n        }\n        for (iVar2 = puVar1[1]; *(iVar2 + 0x18) != 0xffffffff; iVar2 = iVar2 + 0x28) {\n            if ((*(iVar2 + 4) == arg_10h[1]) && (*(iVar2 + 0x18) == (*arg_10h != 0))) {\n                if (*(iVar2 + 0x24) == 0xffffffff) {\n                    if (*(iVar2 + 0x20) == 0xffffffff) {\n                        return iVar2;\n                    }\n                    if (*(iVar2 + 0x20) == arg_ch) {\n                        return iVar2;\n                    }\n                }\n                else if ((*(iVar2 + 0x20) < arg_ch || *(iVar2 + 0x20) == arg_ch) && (arg_ch <= *(iVar2 + 0x24))) {\n                    return iVar2;\n                }\n            }\n        }\n        puVar1 = *puVar1;\n    } while( true );\n}\n",
        "token_count": 328
    },
    "00416a58": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00416a58(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t arg_8h_00;\n    \n    arg_8h[4] = arg_ch[4];\n    iVar1 = arg_ch[4];\n    if (iVar1 == 0) {\n        *arg_8h = *arg_ch;\n        arg_8h[1] = arg_ch[1];\n        arg_8h[2] = arg_ch[2];\n        arg_8h[3] = arg_ch[3];\n    }\n    else {\n        if (iVar1 == 1) {\n            *arg_8h = *arg_ch;\n            arg_8h[1] = arg_ch[1];\n            arg_8h[2] = arg_ch[2];\n            arg_8h[3] = arg_ch[3];\n            arg_8h[5] = arg_ch[5];\n            return 1;\n        }\n        if (iVar1 != 2) {\n            return 1;\n        }\n    }\n    iVar1 = fcn.00421cf0(arg_ch[5]);\n    arg_8h_00 = fcn.00403e38(2, iVar1 + 1);\n    arg_8h[5] = arg_8h_00;\n    if (arg_8h_00 != 0) {\n        fcn.00421d0a(arg_8h_00, iVar1 + 1, arg_ch[5]);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 347
    },
    "0041d0ff": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041d0ff(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t arg_8h_00;\n    uint uVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    int32_t iVar3;\n    \n    arg_8h_00 = arg_8h;\n    iVar3 = 0;\n    if (-1 < arg_8h) goto code_r0x0041d117;\n    do {\n        fcn.00404695();\ncode_r0x0041d117:\n        if (iVar3 <= arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (arg_8h_00 == iVar3) {\n            fcn.00403dd7(*(in_ECX + 4));\n            *(in_ECX + 0xc) = iVar3;\n            *(in_ECX + 8) = iVar3;\n            goto code_r0x0041d207;\n        }\n        if (*(in_ECX + 4) == iVar3) {\n            uVar1 = fcn.00403da8(arg_8h_00);\n            *(in_ECX + 4) = uVar1;\n            fcn.004229c0(uVar1, iVar3, arg_8h_00);\n            *(in_ECX + 0xc) = arg_8h_00;\ncode_r0x0041d17e:\n            *(in_ECX + 8) = arg_8h_00;\n            return;\n        }\n        iVar3 = *(in_ECX + 0xc);\n        if (arg_8h_00 <= iVar3) {\n            iVar3 = *(in_ECX + 8);\n            if (iVar3 < arg_8h_00) {\n                fcn.004229c0(iVar3 + *(in_ECX + 4), 0, arg_8h_00 - iVar3);\n            }\n            goto code_r0x0041d17e;\n        }\n        iVar2 = *(in_ECX + 0x10);\n        if (iVar2 == 0) {\n            iVar2 = *(in_ECX + 8) + (*(in_ECX + 8) >> 0x1f & 7U) >> 3;\n            if (iVar2 < 4) {\ncode_r0x0041d1b0:\n                iVar2 = 4;\n            }\n            else if (iVar2 < 0x401) {\n                if (iVar2 < 4) goto code_r0x0041d1b0;\n            }\n            else {\n                iVar2 = 0x400;\n            }\n        }\n        arg_8h = iVar2 + iVar3;\n        if (iVar2 + iVar3 <= arg_8h_00) {\n            arg_8h = arg_8h_00;\n        }\n    } while (arg_8h < iVar3);\n    iVar3 = fcn.00403da8(arg_8h);\n    fcn.00403e88(iVar3, arg_8h, *(in_ECX + 4), *(in_ECX + 8));\n    fcn.004229c0(*(in_ECX + 8) + iVar3, 0, arg_8h_00 - *(in_ECX + 8));\n    fcn.00403dd7(*(in_ECX + 4));\n    *(in_ECX + 8) = arg_8h_00;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x0041d207:\n    *(in_ECX + 4) = iVar3;\n    return;\n}\n",
        "token_count": 806
    },
    "0041d9a6": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0041d9a6(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h, uint32_t arg_18h, uint32_t arg_1ch, \n            uint arg_20h)\n\n{\n    uint *in_ECX;\n    int64_t iVar1;\n    uint32_t var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_4h;\n    \n    if (0x76b < arg_8h) goto code_r0x0041d9c4;\n    do {\n        do {\n            fcn.00401170();\ncode_r0x0041d9c4:\n        } while ((((0xb < arg_ch - 1U) || (0x1e < arg_10h - 1U)) || (0x17 < arg_14h)) ||\n                ((0x3b < arg_18h || (0x3b < arg_1ch))));\n        var_24h = arg_1ch;\n        var_10h = arg_8h + -0x76c;\n        var_4h = arg_20h;\n        var_14h = arg_ch + -1;\n        var_20h = arg_18h;\n        var_1ch = arg_14h;\n        var_18h = arg_10h;\n        iVar1 = fcn.00425421(&var_24h);\n        *in_ECX = iVar1;\n        in_ECX[1] = iVar1 >> 0x20;\n    } while (iVar1 == -1);\n    return;\n}\n",
        "token_count": 398
    },
    "004371de": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004371de(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    \n    if (arg_8h == -1) {\n        fcn.0043652e();\n    }\n    cVar1 = fcn.004026b0(arg_8h, 0);\n    if (cVar1 != '\\0') {\n        fcn.00436bcf(0, arg_8h, arg_ch);\n        fcn.00402350(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "00437914": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.00437914(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0x14);\n    fcn.00437e9f(0);\n    iVar2 = *0x4506b8;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = iVar2;\n    arg_8h_00 = fcn.00436656();\n    iVar1 = fcn.0043674a(arg_8h_00);\n    if ((iVar1 == 0) && (iVar2 == 0)) {\n        iVar2 = fcn.00437515(unaff_EBP + -0x10, *(unaff_EBP + 8));\n        if (iVar2 == -1) {\n            fcn.004212a5(\"bad cast\");\n            fcn.0042160f(unaff_EBP + -0x20, 0x448834);\n        }\n        iVar2 = *(unaff_EBP + -0x10);\n        *0x4506b8 = iVar2;\n        fcn.0043668d();\n        fcn.00438040(iVar2);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00437ec7();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 408
    },
    "00437b33": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.00437b33(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0x14);\n    fcn.00437e9f(0);\n    iVar2 = *0x4506bc;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = iVar2;\n    arg_8h_00 = fcn.00436656();\n    iVar1 = fcn.0043674a(arg_8h_00);\n    if ((iVar1 == 0) && (iVar2 == 0)) {\n        iVar2 = fcn.004379b1(unaff_EBP + -0x10, *(unaff_EBP + 8));\n        if (iVar2 == -1) {\n            fcn.004212a5(\"bad cast\");\n            fcn.0042160f(unaff_EBP + -0x20, 0x448834);\n        }\n        iVar2 = *(unaff_EBP + -0x10);\n        *0x4506bc = iVar2;\n        fcn.0043668d();\n        fcn.00438040(iVar2);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00437ec7();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 408
    },
    "004388bc": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004388bc(uint arg_8h)\n\n{\n    uint8_t **ppuVar1;\n    uint8_t **arg_8h_00;\n    uint *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x448a38, 0xc);\n    *(unaff_EBP + -0x1c) = 0;\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == NULL) {\n        puVar2 = fcn.0042225e();\n        *puVar2 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        goto code_r0x004389af;\n    }\n    fcn.00431251(arg_8h_00);\n    *(unaff_EBP + -4) = 0;\n    if ((*(arg_8h_00 + 3) & 0x40) == 0) {\n        uVar3 = fcn.0043132f(arg_8h_00);\n        if ((uVar3 == 0xffffffff) || (uVar3 == 0xfffffffe)) {\n            iVar4 = 0x44cf98;\n        }\n        else {\n            iVar4 = (uVar3 & 0x1f) * 0x40 + *((uVar3 >> 5) * 4 + 0x451920);\n        }\n        if ((*(iVar4 + 0x24) & 0x7f) == 0) {\n            if ((uVar3 == 0xffffffff) || (uVar3 == 0xfffffffe)) {\n                iVar4 = 0x44cf98;\n            }\n            else {\n                iVar4 = (uVar3 & 0x1f) * 0x40 + *((uVar3 >> 5) * 4 + 0x451920);\n            }\n            if ((*(iVar4 + 0x24) & 0x80) == 0) goto code_r0x00438982;\n        }\n        puVar2 = fcn.0042225e();\n        *puVar2 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        *(unaff_EBP + -0x1c) = 0xffffffff;\n    }\ncode_r0x00438982:\n    if (*(unaff_EBP + -0x1c) == 0) {\n        ppuVar1 = arg_8h_00 + 1;\n        *ppuVar1 = *ppuVar1 + -1;\n        if (*ppuVar1 < 0) {\n            uVar3 = fcn.00431b66(arg_8h_00);\n        }\n        else {\n            uVar3 = **arg_8h_00;\n            *arg_8h_00 = *arg_8h_00 + 1;\n        }\n        *(unaff_EBP + -0x1c) = uVar3;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.004389b8();\ncode_r0x004389af:\n    fcn.004241c9();\n    return;\n}\n",
        "token_count": 775
    },
    "004389c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004389c0(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t **ppuVar1;\n    uint8_t uVar2;\n    uint8_t **arg_8h_00;\n    uint *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x448a58, 0xc);\n    *(unaff_EBP + -0x1c) = 0;\n    arg_8h_00 = *(unaff_EBP + 0xc);\n    if (arg_8h_00 == NULL) {\n        puVar3 = fcn.0042225e();\n        *puVar3 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        goto code_r0x00438abb;\n    }\n    fcn.00431251(arg_8h_00);\n    *(unaff_EBP + -4) = 0;\n    if ((*(arg_8h_00 + 3) & 0x40) == 0) {\n        uVar4 = fcn.0043132f(arg_8h_00);\n        if ((uVar4 == 0xffffffff) || (uVar4 == 0xfffffffe)) {\n            iVar5 = 0x44cf98;\n        }\n        else {\n            iVar5 = (uVar4 & 0x1f) * 0x40 + *((uVar4 >> 5) * 4 + 0x451920);\n        }\n        if ((*(iVar5 + 0x24) & 0x7f) == 0) {\n            if ((uVar4 == 0xffffffff) || (uVar4 == 0xfffffffe)) {\n                iVar5 = 0x44cf98;\n            }\n            else {\n                iVar5 = (uVar4 & 0x1f) * 0x40 + *((uVar4 >> 5) * 4 + 0x451920);\n            }\n            if ((*(iVar5 + 0x24) & 0x80) == 0) goto code_r0x00438a86;\n        }\n        puVar3 = fcn.0042225e();\n        *puVar3 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        *(unaff_EBP + -0x1c) = 0xffffffff;\n    }\ncode_r0x00438a86:\n    if (*(unaff_EBP + -0x1c) == 0) {\n        ppuVar1 = arg_8h_00 + 1;\n        *ppuVar1 = *ppuVar1 + -1;\n        if (*ppuVar1 < 0) {\n            uVar4 = fcn.00428cc6(*(unaff_EBP + 8), arg_8h_00);\n        }\n        else {\n            uVar2 = *(unaff_EBP + 8);\n            **arg_8h_00 = uVar2;\n            uVar4 = uVar2;\n            *arg_8h_00 = *arg_8h_00 + 1;\n        }\n        *(unaff_EBP + -0x1c) = uVar4;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00438ac4();\ncode_r0x00438abb:\n    fcn.004241c9();\n    return;\n}\n",
        "token_count": 823
    },
    "00405c07": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid fcn.00405c07(void)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t extraout_ECX;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    uint16_t uVar6;\n    int32_t iVar7;\n    int32_t var_90h;\n    int32_t nWidth;\n    int32_t nHeight;\n    uint lpvBits;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    uVar2 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n    nWidth = uVar2;\n    nHeight = uVar2 >> 0x10;\n    if ((nWidth < 5) || (iVar4 = nWidth,  nHeight < 6)) {\n        fcn.00404695();\n        iVar4 = extraout_ECX;\n    }\n    if (0x20 < iVar4) {\n        iVar4 = 0x20;\n        nWidth = 0x20;\n    }\n    iVar7 = iVar4 + 0xf >> 4;\n    iVar4 = ((iVar4 + -4) / 2 + iVar7 * 0x10) - iVar4;\n    if (0xc < iVar4) {\n        iVar4 = 0xc;\n    }\n    if (0x20 < nHeight) {\n        nHeight = 0x20;\n    }\n    fcn.004229c0(&lpvBits, 0xff, 0x80);\n    puVar3 = &lpvBits + (nHeight + -6 >> 1) * iVar7 * 2;\n    puVar5 = 0x43d51c;\n    var_90h = 5;\n    do {\n        uVar1 = *puVar5;\n        puVar5 = puVar5 + 1;\n        uVar6 = ~(uVar1 << (iVar4 & 0x1f));\n        *puVar3 = uVar6 >> 8;\n        puVar3[1] = uVar6;\n        puVar3 = puVar3 + iVar7 * 2;\n        var_90h = var_90h + -1;\n    } while (var_90h != 0);\n    uVar2 = 1;\n    *0x44f950 = (*_sym.imp.GDI32.dll_CreateBitmap)(nWidth, nHeight, 1, 1, &lpvBits);\n    if (*0x44f950 == 0) {\n        *0x44f950 = (*_sym.imp.USER32.dll_LoadBitmapA)(0, 0x7fe3);\n    }\n    fcn.00420bb4(uVar2);\n    return;\n}\n",
        "token_count": 614
    },
    "00405d9a": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint32_t fcn.00405d9a(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f282();\n    return iVar1 + 0x30;\n}\n",
        "token_count": 46
    },
    "004050e3": {
        "rules": [
            "encrypt data using HC-128/11bb23636d2a4650a9dbaa6512d69580"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_13h\n\nvoid __cdecl fcn.004050e3(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint16_t uVar3;\n    uint uVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t unaff_EBP;\n    uint var_168h;\n    uint var_164h;\n    uint var_160h;\n    uint var_154h;\n    uint var_14ch;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    uint var_13ch;\n    uint var_134h;\n    uint var_130h;\n    uint var_12ch;\n    uint var_124h;\n    uint lParam;\n    uint var_11ch;\n    uint lpFilename;\n    uint var_13h;\n    uint var_4h;\n    \n    fcn.00421e74(0x15c);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    *(unaff_EBP + -0x124) = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x130) = *(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x120) = 0;\n    *(unaff_EBP + -0x11c) = 0;\n    uVar4 = (*pcVar1)(0x43d320);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    *(unaff_EBP + -0x134) = uVar4;\n    pcVar5 = (*pcVar7)(uVar4, \"GetUserDefaultUILanguage\");\n    if (pcVar5 == NULL) {\n        iVar8 = (*pcVar1)(\"ntdll.dll\");\n        if (iVar8 != 0) {\n            *(unaff_EBP + -0x120) = 0;\n            (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)(iVar8, 0x10, 1, fcn.0040496e, unaff_EBP + -0x120);\n            pcVar1 = _sym.imp.KERNEL32.dll_ConvertDefaultLocale;\n            if (*(unaff_EBP + -0x120) != 0) {\n                uVar6 = *(unaff_EBP + -0x120) & 0x3ff;\n                uVar4 = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)((*(unaff_EBP + -0x120) >> 10) << 10 | uVar6);\n                *(unaff_EBP + -0x148) = uVar4;\n                uVar4 = (*pcVar1)(uVar6);\n                *(unaff_EBP + -0x144) = uVar4;\n                *(unaff_EBP + -0x11c) = 2;\n            }\n        }\n    }\n    else {\n        uVar6 = (*pcVar5)();\n        pcVar1 = _sym.imp.KERNEL32.dll_ConvertDefaultLocale;\n        *(unaff_EBP + -0x120) = uVar6 & 0xffff;\n        *(unaff_EBP + -0x11c) = uVar6 & 0x3ff;\n        uVar4 = (*pcVar1)(uVar6 & 0xffff);\n        *(unaff_EBP + -0x148) = uVar4;\n        uVar4 = (*pcVar1)(*(unaff_EBP + -0x11c));\n        *(unaff_EBP + -0x144) = uVar4;\n        *(unaff_EBP + -0x11c) = 2;\n        pcVar7 = (*pcVar7)(*(unaff_EBP + -0x134), \"GetSystemDefaultUILanguage\");\n        if (pcVar7 != NULL) {\n            uVar3 = (*pcVar7)();\n            *(unaff_EBP + -0x120) = uVar3;\n            uVar4 = (*pcVar1)(uVar3);\n            *(unaff_EBP + -0x140) = uVar4;\n            uVar4 = (*pcVar1)(uVar3 & 0x3ff);\n            *(unaff_EBP + -0x13c) = uVar4;\n            *(unaff_EBP + -0x11c) = 4;\n        }\n    }\n    iVar8 = *(unaff_EBP + -0x11c);\n    *(unaff_EBP + -0x11c) = *(unaff_EBP + -0x11c) + 1;\n    *(unaff_EBP + -0x148 + iVar8 * 4) = 0x800;\n    *(unaff_EBP + -0x13) = 0;\n    *(unaff_EBP + -0x14) = 0;\n    iVar8 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0x400000, unaff_EBP + -0x118, 0x105);\n    if (iVar8 != 0) {\n        fcn.004229c0(unaff_EBP + -0x168, 0, 0x20);\n        *(unaff_EBP + -0x168) = 0x20;\n        *(unaff_EBP + -0x160) = unaff_EBP + -0x118;\n        *(unaff_EBP + -0x154) = 1000;\n        *(unaff_EBP + -0x14c) = 0x400000;\n        *(unaff_EBP + -0x164) = 0x88;\n        fcn.00404988(0xffffffff);\n        *(unaff_EBP + -4) = 0;\n        cVar2 = fcn.00404a3f(unaff_EBP + -0x168);\n        if (cVar2 != '\\0') {\n            fcn.00404a79();\n        }\n        iVar8 = 0;\n        if (0 < *(unaff_EBP + -0x11c)) {\n            do {\n                iVar9 = fcn.00404eb3(*(unaff_EBP + -0x148 + iVar8 * 4));\n                if (iVar9 != 0) break;\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < *(unaff_EBP + -0x11c));\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.00404f85();\n    }\n    fcn.00421ef7();\n    return;\n}\n",
        "token_count": 1488
    },
    "0040b4c5": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t fcn.0040b4c5(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.0041127b(0x4046b1);\n    if (iVar1 == 0) {\n        fcn.00404695();\n    }\n    uVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n    *(iVar1 + 0x68) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetMessagePos)();\n    *(iVar1 + 0x70) = uVar2 >> 0x10;\n    *(iVar1 + 0x6c) = uVar2;\n    return iVar1 + 0x58;\n}\n",
        "token_count": 163
    },
    "0041bf70": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0041bf70(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg_8h + 0x20), 0x400, 0, 0);\n    if (uVar1 >> 0x10 == 0x534b) {\n        uVar1 = uVar1 & 0xffff;\n    }\n    else {\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 123
    },
    "0042c640": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t * fcn.0042c640(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 591
    },
    "00407fa2": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00407fa2(uint32_t *arg_8h)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    \n    uVar4 = *arg_8h;\n    iVar2 = fcn.00407f88();\n    if (iVar2 == 0) {\n        piVar3 = arg_8h + 0x12;\n    }\n    else {\n        uVar4 = arg_8h[3];\n        piVar3 = arg_8h + 0x1a;\n    }\n    if (*piVar3 == -1) {\n        piVar3 = piVar3 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar3 == -1) {\n        piVar3 = piVar3 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    if ((uVar4 & 0x40) != 0) {\n        piVar3 = piVar3 + (iVar2 != 0) * 2 + 1;\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    return piVar3 + 3U & 0xfffffffc;\n}\n",
        "token_count": 392
    },
    "00418c0b": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00418c0b(int32_t arg_8h, uint *arg_ch)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    \n    puVar2 = arg_ch;\n    if (arg_ch == NULL) {\n        fcn.00401170(0x80004005);\n    }\n    uVar3 = fcn.004158d6(&arg_8h);\n    if (uVar3 == '\\0') {\n        uVar3 = uVar3 & 0xffffff00;\n    }\n    else {\n        iVar4 = arg_8h * 0x30 + *(in_ECX + 0x14);\n        uVar1 = *((*(iVar4 + 0x10) + 3 + *(iVar4 + 4) & 0xfffffffcU) + 4 + *(in_ECX + 8));\n        *puVar2 = uVar1;\n        uVar3 = CONCAT31(uVar1 >> 8, 1);\n    }\n    return uVar3;\n}\n",
        "token_count": 251
    },
    "0041248c": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041248c(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    iVar2 = fcn.0040f282();\n    if ((iVar2 != 0) && (*(iVar2 + 0xc) != 0)) {\n        uVar3 = fcn.004249ed(*(iVar2 + 0xc));\n        if (arg_8h + 4U < uVar3) {\n            fcn.004248ad(*(iVar2 + 0xc), (uVar3 - arg_8h) + -4);\n        }\n        else {\n            fcn.00421c45(*(iVar2 + 0xc));\n            *(iVar2 + 0xc) = 0;\n        }\n        return 1;\n    }\n    fcn.0040465d();\n    pcVar1 = swi(3);\n    uVar4 = (*pcVar1)();\n    return uVar4;\n}\n",
        "token_count": 228
    },
    "00414af3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00414af3(uint arg_8h, uint *arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h, uint arg_2ch, uint arg_30h)\n\n{\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    var_18h = 0;\n    var_1ch = 2;\n    var_14h = *arg_ch;\n    uStack20 = arg_ch[1];\n    uStack16 = arg_ch[2];\n    uStack12 = arg_ch[3];\n    fcn.004149b8(arg_8h, arg_ch, &var_1ch, arg_10h, arg_14h, arg_18h, arg_1ch, arg_20h, arg_24h, arg_28h, arg_2ch, \n                 arg_30h);\n    fcn.00420bb4(arg_10h);\n    return;\n}\n",
        "token_count": 327
    },
    "0041975c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041975c(int32_t arg_8h, uint arg_ch, uint *arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint unaff_EDI;\n    uint var_30h;\n    uint *var_2ch;\n    int32_t *var_28h;\n    int32_t var_24h;\n    int32_t *var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    uint var_14h;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    var_2ch = arg_10h;\n    if ((arg_8h != 0) && (arg_10h != NULL)) {\n        var_28h = NULL;\n        var_24h = fcn.00416cbb(arg_8h, &var_28h);\n        uVar1 = arg_14h;\n        if (arg_14h != 0) {\n            for (; uVar1 != 0; uVar1 = uVar1 - 1) {\n                *arg_10h = 0;\n                arg_10h = arg_10h + 1;\n            }\n        }\n        if (-1 < var_24h) {\n            var_1ch = arg_ch;\n            var_18h = arg_14h;\n            var_14h = *0x4427f0;\n            uStack20 = *0x4427f4;\n            uStack16 = *0x4427f8;\n            var_30h = 0;\n            var_20h = NULL;\n            uStack12 = *0x4427fc;\n            var_24h = (**(*var_28h + 0xc))(var_28h, 1, &var_1ch, &var_30h, &var_20h);\n            if (-1 < var_24h) {\n                uVar1 = 0;\n                iVar3 = 0;\n                while( true ) {\n                    uVar2 = var_20h[1];\n                    if (arg_14h <= var_20h[1]) {\n                        uVar2 = arg_14h;\n                    }\n                    if (uVar2 <= uVar1) break;\n                    var_2ch[uVar1] = *(*var_20h + 0x2c + iVar3);\n                    uVar1 = uVar1 + 1;\n                    iVar3 = iVar3 + 0x34;\n                }\n                if (*var_20h != 0) {\n                    (*_sym.imp.ole32.dll_CoTaskMemFree)(*var_20h);\n                }\n            }\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(var_20h);\n        }\n        if (var_28h != NULL) {\n            (**(*var_28h + 8))(var_28h);\n        }\n    }\n    fcn.00420bb4(unaff_EDI);\n    return;\n}\n",
        "token_count": 705
    },
    "0040ec37": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040ec37(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = *(in_ECX + 0x4c);\n    if (iVar1 != 0) {\n        iVar1 = *(iVar1 + 0x44);\n        while (iVar1 != 0) {\n            var_4h = iVar1;\n            if (iVar1 == 0) {\n                fcn.00404695();\n                return 0;\n            }\n            iVar2 = fcn.0040e772(iVar1);\n            if (iVar2 == arg_8h) {\n                return iVar1;\n            }\n            fcn.0040e716(&var_4h);\n            iVar1 = var_4h;\n        }\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 217
    },
    "00413896": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00413896(uint arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t *in_ECX;\n    \n    in_ECX[1] = arg_ch;\n    if (arg_ch <= arg_ch + 0x40) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, arg_ch + 0x40);\n        *in_ECX = iVar1;\n        if (iVar1 != 0) {\n            arg_8h_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1);\n            fcn.00403e88(arg_8h_00, in_ECX[1], arg_8h, in_ECX[1]);\n            iVar1 = fcn.0041372c(arg_8h_00);\n            in_ECX[2] = iVar1 == 0;\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*in_ECX);\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 238
    },
    "0041b903": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid fcn.0041b903(void)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    code **ppcVar3;\n    int32_t **ppiVar4;\n    int32_t iVar5;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0xc);\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    *extraout_ECX = vtable.COleControlSite.0;\n    pcVar1 = extraout_ECX[8];\n    *(unaff_EBP + -4) = 2;\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x6c) == extraout_ECX)) {\n        *(pcVar1 + 0x6c) = 0;\n    }\n    if (extraout_ECX[0x24] != NULL) {\n        fcn.0041b0d3(1);\n    }\n    fcn.004160e8();\n    fcn.00415d15(extraout_ECX + 0x10, extraout_ECX[0x18]);\n    fcn.00415d15(0x4421dc, extraout_ECX[0x19]);\n    fcn.00415d15(0x4420cc, extraout_ECX[0x23]);\n    piVar2 = extraout_ECX[0x17];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2);\n        extraout_ECX[0x17] = NULL;\n    }\n    piVar2 = extraout_ECX[0x15];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 0x14))(piVar2);\n        (**(*extraout_ECX[0x15] + 8))(extraout_ECX[0x15]);\n        extraout_ECX[0x15] = NULL;\n    }\n    piVar2 = extraout_ECX[0x16];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2);\n        extraout_ECX[0x16] = NULL;\n    }\n    piVar2 = extraout_ECX[0x14];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 0xc))(piVar2, 0);\n        (**(*extraout_ECX[0x14] + 0x18))(extraout_ECX[0x14], 1);\n        (**(*extraout_ECX[0x14] + 8))(extraout_ECX[0x14]);\n        extraout_ECX[0x14] = NULL;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(extraout_ECX + 0x2b);\n    pcVar1 = extraout_ECX[0x25];\n    if (pcVar1 != NULL) {\n        extraout_ECX[0x25] = *(pcVar1 + 0x18);\n        iVar5 = *(pcVar1 + 0xc);\n        if ((iVar5 != 0) && (*(iVar5 + 0x90) != 0)) {\n            (**(**(iVar5 + 0x90) + 4))(pcVar1, 0);\n        }\n        fcn.00403dd7(pcVar1);\n    }\n    if (((extraout_ECX[0x27] != NULL) && (extraout_ECX[0x26] != NULL)) &&\n       (ppiVar4 = extraout_ECX[0x26] + 0x90,  *ppiVar4 != NULL)) {\n        (**(**ppiVar4 + 8))(extraout_ECX, 0);\n    }\n    if ((extraout_ECX[8] != NULL) && (extraout_ECX[0x1d] != NULL)) {\n        piVar2 = extraout_ECX[8] + 0x74;\n        *piVar2 = *piVar2 + -1;\n    }\n    *(unaff_EBP + -0x14) = 0;\n    ppcVar3 = extraout_ECX[0x36];\n    *(unaff_EBP + -4) = 3;\n    iVar5 = (**ppcVar3)(extraout_ECX + 0x36, 0x43ef5c, unaff_EBP + -0x14);\n    if (-1 < iVar5) {\n        fcn.004108ca(*(unaff_EBP + -0x14));\n    }\n    *(unaff_EBP + -0x10) = 0;\n    ppcVar3 = extraout_ECX[0x37];\n    *(unaff_EBP + -4) = 4;\n    iVar5 = (**ppcVar3)(extraout_ECX + 0x37, 0x43ef5c, unaff_EBP + -0x10);\n    if (-1 < iVar5) {\n        fcn.004108ca(*(unaff_EBP + -0x10));\n    }\n    piVar2 = *(unaff_EBP + -0x10);\n    *(unaff_EBP + -4) = 3;\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2);\n    }\n    piVar2 = *(unaff_EBP + -0x14);\n    *(unaff_EBP + -4) = 2;\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2);\n    }\n    *(unaff_EBP + -4) = 1;\n    fcn.0041ef1d();\n    fcn.00401240();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00405a4f();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1389
    },
    "00420221": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.00420221(void)\n\n{\n    uint *arg_8h;\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f83a();\n    fcn.00412786(0xb);\n    while (arg_8h = *(iVar1 + 0x40),  arg_8h != NULL) {\n        fcn.00410e23(arg_8h);\n        if (arg_8h != NULL) {\n            (***arg_8h)(1);\n        }\n    }\n    fcn.004127f8(0xb);\n    return;\n}\n",
        "token_count": 131
    },
    "0042033f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042033f(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ole32.dll_CoRegisterMessageFilter)(param_1 + 0x40, 0);\n    if (iVar1 == 0) {\n        *(param_1 + 0x20) = 1;\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 95
    },
    "00412454": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412454(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    \n    if (arg_8h != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GlobalFlags)(arg_8h);\n        for (uVar1 = uVar1 & 0xff; uVar1 != 0; uVar1 = uVar1 - 1) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(arg_8h);\n        }\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "00401d60": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.00401d60(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    bool bVar9;\n    \n    uVar3 = *0x44b0b8;\n    uVar2 = *0x44b0b4;\n    iVar4 = fcn.00401cb0(*0x44b0b8, *0x44b0b4);\n    iVar4 = *(iVar4 + -0x1997df3b + param_1);\n    iVar5 = fcn.00401cb0(uVar3, uVar2);\n    iVar8 = *(iVar4 + param_1 + -0x1997deff + iVar5) + param_1;\n    iVar4 = fcn.00401cb0(uVar3, uVar2);\n    uVar1 = *(iVar4 + -0x1997df5f + iVar8);\n    iVar4 = fcn.00401cb0(uVar3, uVar2);\n    iVar4 = *(iVar4 + -0x1997df5b + iVar8);\n    iVar5 = fcn.00401cb0(uVar3, uVar2);\n    iVar5 = *(iVar5 + -0x1997df57 + iVar8);\n    iVar6 = fcn.00401cb0(uVar3, uVar2);\n    iVar6 = *(iVar6 + -0x1997df53 + iVar8);\n    uVar7 = 0;\n    bVar9 = uVar1 == 0;\n    if (uVar1 != 0) {\n        do {\n            iVar8 = fcn.00401cb0(*(iVar5 + param_1 + uVar7 * 4) + param_1, uVar2);\n            if (iVar8 == param_2) break;\n            uVar7 = uVar7 + 1;\n        } while (uVar7 < uVar1);\n        bVar9 = uVar7 == uVar1;\n    }\n    if (!bVar9) {\n        return *(iVar4 + param_1 + *(iVar6 + param_1 + uVar7 * 2) * 4) + param_1;\n    }\n    return 0;\n}\n",
        "token_count": 539
    },
    "00402460": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.00402460(int32_t param_1, uint *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint *puVar5;\n    \n    uVar1 = param_2;\n    if (*(param_1 + 0x14) < param_2) {\n        fcn.00436566();\n    }\n    uVar2 = *(param_1 + 0x14) - param_2;\n    if (uVar2 < param_3) {\n        param_3 = uVar2;\n    }\n    if (param_3 != 0) {\n        puVar5 = param_1 + 4;\n        puVar4 = puVar5;\n        param_2 = puVar5;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar4 = *puVar5;\n            param_2 = *puVar5;\n        }\n        fcn.00420c40(puVar4 + uVar1, *(param_1 + 0x18) - uVar1, param_2 + param_3 + uVar1, uVar2 - param_3);\n        iVar3 = *(param_1 + 0x14) - param_3;\n        *(param_1 + 0x14) = iVar3;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar5 = *puVar5;\n        }\n        *(iVar3 + puVar5) = 0;\n    }\n    return param_1;\n}\n",
        "token_count": 369
    },
    "00402800": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.00402800(int32_t param_1, int32_t param_2, uint32_t param_3, uint32_t param_4)\n\n{\n    int32_t *arg_8h;\n    int32_t *piVar1;\n    uint32_t arg_14h;\n    \n    if (*(param_2 + 0x14) < param_3) {\n        fcn.00436566();\n    }\n    arg_14h = *(param_2 + 0x14) - param_3;\n    if (param_4 < arg_14h) {\n        arg_14h = param_4;\n    }\n    if (param_1 != param_2) {\n        if (arg_14h == 0xffffffff) {\n            fcn.0043652e();\n        }\n        if (*(param_1 + 0x18) < arg_14h) {\n            fcn.004024f0(arg_14h, *(param_1 + 0x14));\n        }\n        else if (arg_14h == 0) {\n            *(param_1 + 0x14) = 0;\n            if (*(param_1 + 0x18) < 0x10) {\n                *(param_1 + 4) = 0;\n                return param_1;\n            }\n            **(param_1 + 4) = 0;\n            return param_1;\n        }\n        if (arg_14h != 0) {\n            if (*(param_2 + 0x18) < 0x10) {\n                param_2 = param_2 + 4;\n            }\n            else {\n                param_2 = *(param_2 + 4);\n            }\n            piVar1 = param_1 + 4;\n            arg_8h = piVar1;\n            if (0xf < *(param_1 + 0x18)) {\n                arg_8h = *piVar1;\n            }\n            fcn.00420bc3(arg_8h, *(param_1 + 0x18), param_2 + param_3, arg_14h);\n            *(param_1 + 0x14) = arg_14h;\n            if (0xf < *(param_1 + 0x18)) {\n                piVar1 = *piVar1;\n            }\n            *(piVar1 + arg_14h) = 0;\n        }\n        return param_1;\n    }\n    fcn.00402460(arg_14h + param_3, 0xffffffff);\n    fcn.00402460(0, param_3);\n    return param_1;\n}\n",
        "token_count": 578
    },
    "00403f81": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403f81(int32_t *arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    if (-arg_ch - 1U < arg_10h) {\n        return 0x80070057;\n    }\n    *arg_8h = arg_ch + arg_10h;\n    return 0;\n}\n",
        "token_count": 83
    },
    "00404183": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404183(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    iVar2 = *param_1;\n    piVar1 = *(iVar2 + -0x10);\n    if (*(iVar2 + -0xc) != 0) {\n        if (*(iVar2 + -4) < 0) {\n            fcn.0040414b(0);\n        }\n        else {\n            fcn.00401240();\n            iVar2 = (**(*piVar1 + 0xc))();\n            *param_1 = iVar2 + 0x10;\n        }\n    }\n    return;\n}\n",
        "token_count": 149
    },
    "00404224": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404224(int32_t arg_8h)\n\n{\n    int32_t **ppiVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    \n    ppiVar1 = *in_ECX + -0x10;\n    if ((*(*in_ECX + -8) < arg_8h) && (0 < arg_8h)) {\n        iVar2 = (**(**ppiVar1 + 8))(ppiVar1, arg_8h, 2);\n        if (iVar2 != 0) goto code_r0x00404253;\n    }\n    iVar2 = fcn.00404178();\ncode_r0x00404253:\n    *in_ECX = iVar2 + 0x10;\n    return;\n}\n",
        "token_count": 170
    },
    "00404356": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404356(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    uint32_t uVar3;\n    uint var_4h;\n    \n    uVar1 = *(*in_ECX + -0xc);\n    uVar3 = arg_8h - *in_ECX;\n    if (-1 < arg_ch) goto code_r0x0040437d;\n    do {\n        fcn.00401170();\ncode_r0x0040437d:\n        iVar2 = fcn.004012c0(arg_8h);\n        if (iVar2 < arg_ch) {\n            arg_ch = iVar2;\n        }\n    } while (0x7fffffff - arg_ch < uVar1);\n    iVar2 = fcn.004014d0(uVar1 + arg_ch);\n    if (uVar3 <= uVar1) {\n        arg_8h = uVar3 + iVar2;\n    }\n    fcn.00420bc3(iVar2 + uVar1, arg_ch, arg_8h, arg_ch);\n    fcn.00401260(uVar1 + arg_ch);\n    return;\n}\n",
        "token_count": 273
    },
    "00404acc": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00404acc(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    *(param_1 + 0xa0) = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_14h = 4;\n    var_ch = 0;\n    piVar2 = 0x44b590;\n    var_10h = param_1;\n    iVar1 = *0x44b590;\n    while (iVar1 != 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0x80000001, *piVar2, 0, 1, &var_4h);\n        if (iVar1 == 0) {\n            for (piVar3 = piVar2[1]; *piVar3 != 0; piVar3 = piVar3 + 2) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(var_4h, *piVar3, 0, &var_ch, &var_8h, &var_14h);\n                if ((iVar1 == 0) && (var_ch == 4)) {\n                    if (var_8h == 0) {\n                        *(var_10h + 0xa0) = *(var_10h + 0xa0) & ~piVar3[1];\n                    }\n                    else {\n                        *(var_10h + 0xa0) = *(var_10h + 0xa0) | piVar3[1];\n                    }\n                }\n                var_8h = 0;\n                var_14h = 4;\n                var_ch = 0;\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n            var_4h = 0;\n        }\n        piVar2 = piVar2 + 2;\n        iVar1 = *piVar2;\n    }\n    return 1;\n}\n",
        "token_count": 496
    },
    "0040afa6": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040afa6(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_60h;\n    uint lprcSrc;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t lpPoints;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t lprcDst;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = fcn.0040e445();\n    if (arg_8h == 0) {\n        if ((var_4h & 0x40000000) == 0) {\n            iVar5 = (*_sym.imp.USER32.dll_GetWindow)(*(in_ECX + 0x20), 4);\n        }\n        else {\n            iVar5 = (*_sym.imp.USER32.dll_GetParent)(*(in_ECX + 0x20));\n        }\n        if (iVar5 != 0) {\n            iVar4 = (*_sym.imp.USER32.dll_SendMessageA)(iVar5, 0x36b, 0, 0);\n            if (iVar4 != 0) {\n                iVar5 = iVar4;\n            }\n        }\n    }\n    else {\n        iVar5 = *(arg_8h + 0x20);\n    }\n    pcVar1 = _sym.imp.USER32.dll_GetWindowRect;\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(in_ECX + 0x20), &var_38h);\n    if ((var_4h & 0x40000000) == 0) {\n        if (iVar5 != 0) {\n            uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar5, 0xfffffff0);\n            if (((uVar2 & 0x10000000) == 0) || ((uVar2 & 0x20000000) != 0)) {\n                iVar5 = 0;\n            }\n        }\n        if (iVar5 == 0) {\n            iVar5 = fcn.00404e7a();\n            if (iVar5 != 0) {\n                iVar5 = *(iVar5 + 0x20);\n            }\n            uVar3 = fcn.0040907c(iVar5, 1);\n            fcn.004090e9(uVar3, iVar5);\n            pcVar1 = _sym.imp.USER32.dll_CopyRect;\n            (*_sym.imp.USER32.dll_CopyRect)(&lpPoints, &lprcSrc);\n            (*pcVar1)(&lprcDst, &lprcSrc);\n        }\n        else {\n            (*pcVar1)(iVar5, &lpPoints);\n            uVar3 = fcn.0040907c(iVar5, 2);\n            fcn.004090e9(uVar3, iVar5);\n            (*_sym.imp.USER32.dll_CopyRect)(&lprcDst, &lprcSrc);\n        }\n    }\n    else {\n        uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(in_ECX + 0x20));\n        pcVar1 = _sym.imp.USER32.dll_GetClientRect;\n        (*_sym.imp.USER32.dll_GetClientRect)(uVar3, &lprcDst);\n        (*pcVar1)(iVar5, &lpPoints);\n        (*_sym.imp.USER32.dll_MapWindowPoints)(iVar5, uVar3, &lpPoints, 2);\n    }\n    iVar5 = (lpPoints + var_20h) / 2 - (var_30h - var_38h) / 2;\n    iVar4 = (var_24h + var_1ch) / 2 - (var_2ch - var_34h) / 2;\n    if (var_10h < (var_30h - var_38h) + iVar5) {\n        iVar5 = (var_38h - var_30h) + var_10h;\n    }\n    if (iVar5 < lprcDst) {\n        iVar5 = lprcDst;\n    }\n    if (var_ch < (var_2ch - var_34h) + iVar4) {\n        iVar4 = (var_34h - var_2ch) + var_ch;\n    }\n    if (iVar4 < var_14h) {\n        iVar4 = var_14h;\n    }\n    fcn.0040e7a6(0, iVar5, iVar4, 0xffffffff, 0xffffffff, 0x15);\n    return;\n}\n",
        "token_count": 1087
    },
    "00412b30": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00412b30(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    if (0x7fffffff - arg_ch < arg_10h) {\n        return 0x80070057;\n    }\n    *arg_8h = arg_ch + arg_10h;\n    return 0;\n}\n",
        "token_count": 84
    },
    "0041592d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041592d(uint32_t arg_8h)\n\n{\n    if (((arg_8h & 0x4000) != 0) || ((arg_8h & 0x2000) != 0)) {\ncode_r0x0041593e:\n        return 4;\n    }\n    if ((arg_8h & 0x1000) != 0) {\n        return 2;\n    }\n    arg_8h = arg_8h & 0xffff;\n    if (arg_8h < 0x49) {\n        if (arg_8h == 0x48) {\n            return 4;\n        }\n        if (arg_8h - 2 < 0x14) {\n    // switch table (20 cases) at 0x415999\n            switch(*((arg_8h - 2) * 4 + 0x415999)) {\n            case 0x41593c:\n                goto code_r0x0041593e;\n            case 0x415992:\n                goto code_r0x00415995;\n            case 0x415995:\n                return 2;\n            }\n        }\n        return 8;\n    }\n    if ((arg_8h != 0x80) && (arg_8h != 0x81)) {\n        if (arg_8h == 0x82) {\n            return 2;\n        }\n        if (arg_8h != 0x83) {\n            if (arg_8h == 0x85) {\n                return 2;\n            }\n            if (arg_8h != 0x86) {\n                if (arg_8h != 0x87) {\n                    return 8;\n                }\n                return 2;\n            }\n            return 2;\n        }\n    }\ncode_r0x00415995:\n    return 1;\n}\n",
        "token_count": 412
    },
    "00418ce9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00418ce9(int32_t param_1)\n\n{\n    uint uVar1;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    if (*(param_1 + 0x48) == 0) {\n        if (*(param_1 + 0x38) != 0) {\n            var_10h = *(param_1 + 0x40);\n            var_ch = 0;\n            var_8h = 0;\n            var_18h = 1;\n            var_14h = 0;\n            uVar1 = (**(**(param_1 + 8) + 0x20))(*(param_1 + 8), 1, 0x4427ec, 0, 0, &var_18h);\n            return uVar1;\n        }\n    }\n    else if ((*(param_1 + 0x50) != 0) && (*(*(param_1 + 0x50) + 0xc) != 0)) {\n        uVar1 = fcn.004188de();\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 270
    },
    "0041a928": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nint32_t __fastcall fcn.0041a928(int32_t param_1)\n\n{\n    uint *puVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint arg_8h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = *(param_1 + 4);\n    if (iVar4 != 0) goto code_r0x0041a943;\n    do {\n        iVar4 = fcn.00404695();\ncode_r0x0041a943:\n    } while ((*(iVar4 + 0x28) == 0) || (var_4h = fcn.0040c91e(),  var_4h == 0));\n    iVar4 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(var_4h + 0x20));\n    var_14h = iVar4 == 0;\n    if (var_14h != 0) {\n        arg_8h = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        iVar4 = fcn.0040b5a9(arg_8h);\n        pcVar3 = _sym.imp.USER32.dll_GetWindowRect;\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(iVar4 + 0x20), &var_34h);\n        (*pcVar3)(*(var_4h + 0x20), &var_24h);\n        var_28h = var_28h - var_30h;\n        var_30h = 0;\n        var_34h = 0;\n        fcn.0040e4db(var_2ch / 2, var_28h / 2, 0, 0, 0);\n        fcn.0040e51b(1);\n    }\n    puVar1 = *(*(param_1 + 4) + 0x50);\n    iVar4 = (***puVar1)(puVar1, 0x43ed80, param_1 + 0x48);\n    if (iVar4 < 0) {\n        puVar1 = *(*(param_1 + 4) + 0x50);\n        iVar4 = (***puVar1)(puVar1, 0x43edd8, &var_ch);\n        if (iVar4 < 0) {\n            return iVar4;\n        }\n        (**(*var_ch + 0x14))(var_ch, &var_10h);\n        (**(*var_ch + 8))(var_ch);\n        if (var_10h == NULL) {\n            return -0x7fffbffb;\n        }\n        var_8h = (***var_10h)(var_10h, 0x4420ac, param_1 + 8);\n        (**(*var_10h + 8))(var_10h);\n        if (var_8h < 0) {\n            return var_8h;\n        }\n        puVar1 = *(param_1 + 8);\n        (***puVar1)(puVar1, 0x4420bc, param_1 + 0xc);\n    }\n    else {\n        piVar2 = *(param_1 + 0x48);\n        var_8h = (**(*piVar2 + 0xc))(piVar2, 0, 0x44232c, param_1 + 0x4c);\n        if (*(param_1 + 0x4c) == 0) {\n            var_8h = -0x7fffbffd;\n        }\n        if (var_8h < 0) {\n            if (var_14h == 0) {\n                return var_8h;\n            }\n            fcn.0040e4db(var_24h, var_20h, var_1ch - var_24h, var_18h - var_20h, 0);\n            fcn.0040e51b(0);\n            return var_8h;\n        }\n    }\n    iVar4 = fcn.00419e86();\n    if (var_14h != 0) {\n        fcn.0040e4db(var_24h, var_20h, var_1ch - var_24h, var_18h - var_20h, 0);\n        fcn.0040e51b(0);\n    }\n    return iVar4;\n}\n",
        "token_count": 1097
    },
    "0041cb99": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.0041cb99(void)\n\n{\n    uint arg_8h;\n    uint var_18h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    arg_8h = (*_sym.imp.KERNEL32.dll_GetOEMCP)(&var_18h);\n    (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    fcn.00420bb4(arg_8h);\n    return;\n}\n",
        "token_count": 111
    },
    "0041debd": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041debd(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    int32_t *piVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    bool bVar7;\n    \n    iVar6 = arg_8h;\n    bVar7 = -1 < arg_8h;\n    arg_8h = 0;\n    if (bVar7) goto code_r0x0041ded5;\n    do {\n        fcn.00404695();\ncode_r0x0041ded5:\n        if (arg_8h <= arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (iVar6 == arg_8h) {\n            if (*(in_ECX + 4) != arg_8h) {\n                iVar6 = 0;\n                if (*(in_ECX + 8) != arg_8h && arg_8h <= *(in_ECX + 8)) {\n                    do {\n                        fcn.0041de93(arg_8h);\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < *(in_ECX + 8));\n                }\n                fcn.00403dd7(*(in_ECX + 4));\n                *(in_ECX + 4) = arg_8h;\n            }\n            *(in_ECX + 0xc) = arg_8h;\n            *(in_ECX + 8) = arg_8h;\n            return;\n        }\n        if (*(in_ECX + 4) == arg_8h) {\n            arg_8h = iVar6;\n            if (iVar6 <= *(in_ECX + 0x10)) {\n                arg_8h = *(in_ECX + 0x10);\n            }\n            uVar1 = fcn.00403da8(arg_8h * 0xc);\n            *(in_ECX + 4) = uVar1;\n            fcn.004229c0(uVar1, 0, arg_8h * 0xc);\n            if (0 < iVar6) {\n                iVar4 = 0;\n                iVar5 = iVar6;\n                do {\n                    puVar2 = *(in_ECX + 4) + iVar4;\n                    if (puVar2 != NULL) {\n                        *puVar2 = 0;\n                        puVar2[1] = 0;\n                    }\n                    iVar4 = iVar4 + 0xc;\n                    iVar5 = iVar5 + -1;\n                } while (iVar5 != 0);\n            }\n            goto code_r0x0041e0b3;\n        }\n        if (iVar6 <= *(in_ECX + 0xc)) {\n            iVar5 = *(in_ECX + 8);\n            if (iVar5 < iVar6) {\n                fcn.004229c0(iVar5 * 0xc + *(in_ECX + 4), arg_8h, (iVar6 - iVar5) * 0xc);\n                iVar5 = 0;\n                if (iVar6 != *(in_ECX + 8) && -1 < iVar6 - *(in_ECX + 8)) {\n                    do {\n                        piVar3 = (*(in_ECX + 8) + iVar5) * 0xc + *(in_ECX + 4);\n                        if (piVar3 != NULL) {\n                            *piVar3 = arg_8h;\n                            piVar3[1] = arg_8h;\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < iVar6 - *(in_ECX + 8));\n                }\n            }\n            else if ((iVar6 < iVar5) && (iVar5 != iVar6 && -1 < iVar5 - iVar6)) {\n                do {\n                    fcn.0041de93(0);\n                    arg_8h = arg_8h + 1;\n                } while (arg_8h < *(in_ECX + 8) - iVar6);\n            }\n            goto code_r0x0041e0b9;\n        }\n        iVar5 = *(in_ECX + 0x10);\n        if (iVar5 == arg_8h) {\n            iVar5 = *(in_ECX + 8) + (*(in_ECX + 8) >> 0x1f & 7U) >> 3;\n            if (iVar5 < 4) {\n                iVar5 = 4;\n            }\n            else if (0x400 < iVar5) {\n                iVar5 = 0x400;\n            }\n        }\n        arg_8h = iVar5 + *(in_ECX + 0xc);\n        if (arg_8h <= iVar6) {\n            arg_8h = iVar6;\n        }\n    } while (arg_8h < *(in_ECX + 0xc));\n    iVar5 = fcn.00403da8(arg_8h * 0xc);\n    fcn.00403e88(iVar5, arg_8h * 0xc, *(in_ECX + 4), *(in_ECX + 8) * 0xc);\n    fcn.004229c0(*(in_ECX + 8) * 0xc + iVar5, 0, (iVar6 - *(in_ECX + 8)) * 0xc);\n    iVar4 = 0;\n    if (iVar6 != *(in_ECX + 8) && -1 < iVar6 - *(in_ECX + 8)) {\n        do {\n            puVar2 = (*(in_ECX + 8) + iVar4) * 0xc + iVar5;\n            if (puVar2 != NULL) {\n                *puVar2 = 0;\n                puVar2[1] = 0;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < iVar6 - *(in_ECX + 8));\n    }\n    fcn.00403dd7(*(in_ECX + 4));\n    *(in_ECX + 4) = iVar5;\ncode_r0x0041e0b3:\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x0041e0b9:\n    *(in_ECX + 8) = iVar6;\n    return;\n}\n",
        "token_count": 1395
    },
    "0043718c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043718c(uint32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    \n    if (-*(in_ECX + 0x14) - 1U <= arg_8h) {\n        fcn.0043652e();\n    }\n    if (arg_8h != 0) {\n        iVar2 = *(in_ECX + 0x14) + arg_8h;\n        cVar1 = fcn.004026b0(iVar2, 0);\n        if (cVar1 != '\\0') {\n            fcn.00436bcf(*(in_ECX + 0x14), arg_8h, arg_ch);\n            fcn.00402350(iVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 188
    },
    "00401190": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.00401190(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint32_t unaff_EDI;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadResource)(param_1, param_2);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    puVar2 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar1);\n    if (puVar2 != NULL) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_SizeofResource)(param_1, param_2);\n        puVar3 = iVar1 + puVar2;\n        for (unaff_EDI = unaff_EDI & 0xf; unaff_EDI != 0; unaff_EDI = unaff_EDI - 1) {\n            if (puVar3 <= puVar2) {\n                return 0;\n            }\n            puVar2 = puVar2 + *puVar2 + 1;\n        }\n        if (puVar2 < puVar3) {\n            return -(*puVar2 != 0) & puVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 277
    },
    "00401200": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401200(uint param_1, uint32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceA)(param_1, (param_2 >> 4) + 1 & 0xffff, 6);\n    if (iVar1 == 0) {\n        return;\n    }\n    fcn.00401190(param_1, iVar1, param_2);\n    return;\n}\n",
        "token_count": 105
    },
    "004013d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.004013d0(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t *extraout_ECX;\n    \n    if (param_2 == NULL) {\n        fcn.00401170(0x80004005);\n        param_2 = extraout_ECX;\n    }\n    iVar1 = (**(*param_2 + 0xc))();\n    *param_1 = iVar1 + 0x10;\n    return param_1;\n}\n",
        "token_count": 122
    },
    "00401640": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00401640(int32_t *param_1, uint param_2, uint32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ushort *puVar3;\n    uint uVar4;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(param_2, (param_3 >> 4) + 1 & 0xffff, 6);\n    if (iVar2 != 0) {\n        puVar3 = fcn.00401190(param_2, iVar2, param_3);\n        if (puVar3 != NULL) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puVar3 + 1, *puVar3, 0, 0, 0, 0);\n            if ((1U - *(*param_1 + -4) | *(*param_1 + -8) - iVar2) < 0) {\n                fcn.00401460(iVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puVar3 + 1, *puVar3, *param_1, iVar2, 0, 0);\n            if ((-1 < iVar2) && (iVar2 <= *(*param_1 + -8))) {\n                *(*param_1 + -0xc) = iVar2;\n                *(iVar2 + *param_1) = 0;\n                return 1;\n            }\n            fcn.00401170(0x80070057);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 389
    },
    "00401700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401700(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    int32_t unaff_EDI;\n    uint32_t uVar3;\n    int32_t unaff_retaddr;\n    int32_t in_stack_ffffffec;\n    \n    if (param_3 == 0) {\n        fcn.00401400();\n        return;\n    }\n    if (param_2 != 0) goto code_r0x00401728;\n    do {\n        fcn.00401170();\n        param_2 = extraout_ECX;\ncode_r0x00401728:\n        iVar1 = *param_1;\n        uVar2 = *(iVar1 + -0xc);\n        uVar3 = param_2 - iVar1;\n        if ((1U - *(iVar1 + -4) | *(iVar1 + -8) - param_3) < 0) {\n            param_2 = unaff_retaddr;\n            in_stack_ffffffec = param_3;\n            fcn.00401460(param_3, unaff_EDI, unaff_EBP);\n            unaff_retaddr = param_2;\n        }\n        unaff_EBP = unaff_EDI;\n        unaff_EDI = in_stack_ffffffec;\n        iVar1 = *param_1;\n        if (uVar2 < uVar3) {\n            fcn.00420bc3(iVar1, *(iVar1 + -8), param_2, param_3);\n        }\n        else {\n            fcn.00420c40(iVar1, *(iVar1 + -8), iVar1 + uVar3, param_3);\n        }\n        in_stack_ffffffec = unaff_EDI;\n    } while ((param_3 < 0) || (*(*param_1 + -8) < param_3));\n    *(*param_1 + -0xc) = param_3;\n    *(param_3 + *param_1) = 0;\n    return;\n}\n",
        "token_count": 475
    },
    "00401880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.00401880(int32_t *param_1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t *unaff_EDI;\n    int32_t **in_FS_OFFSET;\n    char *unaff_retaddr;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x4396e8;\n    piStack12 = *in_FS_OFFSET;\n    uVar2 = *0x44c69c ^ &stack0xffffffe8;\n    *in_FS_OFFSET = &piStack12;\n    piVar3 = fcn.0040483a(uVar2);\n    if (piVar3 == NULL) {\n        piVar3 = fcn.00401170(0x80004005);\n    }\n    iVar4 = (**(*piVar3 + 0xc))();\n    *param_1 = iVar4 + 0x10;\n    uStack8 = 0;\n    if (unaff_retaddr == NULL) {\n        iVar4 = 0;\n    }\n    else {\n        if ((unaff_retaddr & 0xffff0000) == 0) {\n            iVar4 = fcn.004047e0(unaff_retaddr & 0xffff);\n            if (iVar4 != 0) {\n                fcn.00401640(iVar4, unaff_retaddr & 0xffff);\n            }\n            goto code_r0x00401922;\n        }\n        pcVar5 = unaff_retaddr;\n        do {\n            cVar1 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n        } while (cVar1 != '\\0');\n        iVar4 = pcVar5 - (unaff_retaddr + 1);\n    }\n    fcn.00401700(unaff_retaddr, iVar4);\ncode_r0x00401922:\n    *in_FS_OFFSET = unaff_EDI;\n    return param_1;\n}\n",
        "token_count": 466
    },
    "00401a90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00401a90(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t **ppiVar4;\n    int32_t **in_FS_OFFSET;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x4397b7;\n    piStack12 = *in_FS_OFFSET;\n    uVar3 = *0x44c69c ^ &stack0xffffffec;\n    *in_FS_OFFSET = &piStack12;\n    uStack4 = 7;\n    fcn.00407d8f(uVar3);\n    ppiVar4 = *(param_1 + 0x21c) + -0x10;\n    uStack4._0_1_ = 6;\n    piVar1 = *(param_1 + 0x21c) + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**ppiVar4 + 4))(ppiVar4);\n    }\n    ppiVar4 = *(param_1 + 0x218) + -0x10;\n    uStack4._0_1_ = 5;\n    piVar1 = *(param_1 + 0x218) + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar4 + 4))(ppiVar4);\n    }\n    uStack4._0_1_ = 4;\n    fcn.004078ec();\n    uStack4._0_1_ = 3;\n    fcn.00407892();\n    uStack4._0_1_ = 2;\n    fcn.00407892();\n    uStack4._0_1_ = 1;\n    fcn.00407892();\n    uStack4 = uStack4._1_3_ << 8;\n    fcn.00407892();\n    uStack4 = 0xffffffff;\n    fcn.00406e87();\n    *in_FS_OFFSET = piStack12;\n    return;\n}\n",
        "token_count": 534
    },
    "00401d10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00401d10(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint uVar5;\n    \n    iVar2 = fcn.00401ca0();\n    piVar1 = *(*(iVar2 + 0xc) + 0xc);\n    piVar4 = piVar1;\n    do {\n        uVar5 = *0x44b0b4;\n        uVar3 = fcn.0042159f(piVar4[0xc]);\n        iVar2 = fcn.00401ce0(uVar3, uVar5);\n        if (iVar2 == param_1) {\n            return piVar4[6];\n        }\n        piVar4 = *piVar4;\n    } while (piVar4 != piVar1);\n    return 0;\n}\n",
        "token_count": 201
    },
    "00401ed0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.00401ed0(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *0x44ddac;\n    if (*0x44ddac != 0) {\n        *0x44ddb0 = fcn.00401d60(*0x44ddac, 0x1b3a4a75);\n        if (*0x44ddb0 != 0) {\n            *0x44ddb4 = fcn.00401d60(iVar1, 0xeab83212);\n            if (*0x44ddb4 != 0) {\n                *0x44ddc0 = fcn.00401d60(iVar1, 0x5a11bd2c);\n                if (*0x44ddc0 != 0) {\n                    *0x44ddbc = fcn.00401d60(iVar1, 0xf89f461a);\n                    if (*0x44ddbc != 0) {\n                        *0x44ddb8 = fcn.00401d60(iVar1, 0x33962874);\n                        return *0x44ddb8 != 0;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "token_count": 266
    },
    "00401f60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.00401f60(void)\n\n{\n    int32_t iVar1;\n    \n    *0x44ddac = fcn.00401d10(0xc7351d1e);\n    if (*0x44ddac != 0) {\n        *0x44ddc4 = fcn.00401d60(*0x44ddac, 0x4f576ce0);\n        if (*0x44ddc4 != NULL) {\n            iVar1 = (**0x44ddc4)(0, 0, 0);\n            if (iVar1 != 0) {\n                iVar1 = (**0x44ddc4)(0, 0, 0);\n                return iVar1 != 0;\n            }\n        }\n    }\n    return false;\n}\n",
        "token_count": 171
    },
    "00402370": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00402370(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.00420bc3(param_1, param_2, param_3, param_4);\n    return param_1;\n}\n",
        "token_count": 60
    },
    "00402630": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.00402630(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.0040483a();\n    if (piVar1 == NULL) {\n        piVar1 = fcn.00401170(0x80004005);\n    }\n    iVar2 = (**(*piVar1 + 0xc))();\n    *param_1 = iVar2 + 0x10;\n    return param_1;\n}\n",
        "token_count": 118
    },
    "00402660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.00402660(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004023a0(*param_2 + -0x10);\n    *param_1 = iVar1 + 0x10;\n    return param_1;\n}\n",
        "token_count": 81
    },
    "004028e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.004028e0(int32_t param_1, uint *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *arg_8h;\n    uint *puVar4;\n    int32_t *piVar5;\n    \n    if (param_2 != NULL) {\n        uVar1 = *(param_1 + 0x18);\n        puVar2 = param_1 + 4;\n        puVar4 = puVar2;\n        if (0xf < uVar1) {\n            puVar4 = *puVar2;\n        }\n        if (puVar4 <= param_2) {\n            puVar4 = puVar2;\n            if (0xf < uVar1) {\n                puVar4 = *puVar2;\n            }\n            if (param_2 < *(param_1 + 0x14) + puVar4) {\n                if (0xf < uVar1) {\n                    puVar2 = *puVar2;\n                }\n                iVar3 = fcn.00402800(param_1, param_2 - puVar2, param_3);\n                return iVar3;\n            }\n        }\n    }\n    if (param_3 == 0xffffffff) {\n        fcn.0043652e();\n    }\n    if (*(param_1 + 0x18) < param_3) {\n        fcn.004024f0(param_3, *(param_1 + 0x14));\n    }\n    else if (param_3 == 0) {\n        *(param_1 + 0x14) = 0;\n        if (*(param_1 + 0x18) < 0x10) {\n            *(param_1 + 4) = 0;\n            return param_1;\n        }\n        **(param_1 + 4) = 0;\n        return param_1;\n    }\n    if (param_3 != 0) {\n        piVar5 = param_1 + 4;\n        arg_8h = piVar5;\n        if (0xf < *(param_1 + 0x18)) {\n            arg_8h = *piVar5;\n        }\n        fcn.00420bc3(arg_8h, *(param_1 + 0x18), param_2, param_3);\n        *(param_1 + 0x14) = param_3;\n        if (0xf < *(param_1 + 0x18)) {\n            piVar5 = *piVar5;\n        }\n        *(piVar5 + param_3) = 0;\n    }\n    return param_1;\n}\n",
        "token_count": 596
    },
    "00402c00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.00402c00(code **param_1, uint param_2)\n\n{\n    uint32_t *puVar1;\n    uint32_t **in_FS_OFFSET;\n    uint32_t *puStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x439898;\n    puStack12 = *in_FS_OFFSET;\n    puVar1 = *0x44c69c ^ &stack0xffffffec;\n    *in_FS_OFFSET = &puStack12;\n    fcn.004211c1();\n    *param_1 = vtable.std::runtime_error.0;\n    param_1[8] = NULL;\n    param_1[9] = 0xf;\n    uStack4 = 0;\n    *(param_1 + 4) = 0;\n    fcn.00402800(param_2, 0, 0xffffffff);\n    *in_FS_OFFSET = puVar1;\n    return param_1;\n}\n",
        "token_count": 227
    },
    "00403520": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403520(int32_t **param_1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t **in_FS_OFFSET;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x439a58;\n    piStack12 = *in_FS_OFFSET;\n    uVar2 = *0x44c69c ^ &stack0xffffffec;\n    *in_FS_OFFSET = &piStack12;\n    uStack4 = 0;\n    cVar1 = fcn.00436612(uVar2);\n    if (cVar1 == '\\0') {\n        fcn.004034c0();\n    }\n    uStack4 = 0xffffffff;\n    if (*(*(**param_1 + 4) + 0x28 + *param_1) != 0) {\n        fcn.00436404();\n    }\n    *in_FS_OFFSET = piStack12;\n    return;\n}\n",
        "token_count": 222
    },
    "00403e38": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403e38(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint cb;\n    \n    cb = 0;\n    iVar1 = fcn.00403e14(&cb, arg_8h, arg_ch);\n    if (iVar1 < 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(cb);\n    return uVar2;\n}\n",
        "token_count": 113
    },
    "00403e88": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403e88(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.00420bc3(arg_8h, arg_ch, arg_10h, arg_14h);\n    fcn.00403de8(arg_8h_00);\n    return;\n}\n",
        "token_count": 96
    },
    "00403ea9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403ea9(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.00403e67(arg_8h, arg_ch, arg_10h, arg_14h);\n    fcn.00403de8(arg_8h_00);\n    return;\n}\n",
        "token_count": 96
    },
    "00403eca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403eca(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.00421cd3(arg_8h, arg_ch, arg_10h, arg_14h);\n    fcn.00403de8(arg_8h_00);\n    return;\n}\n",
        "token_count": 95
    },
    "00404050": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl fcn.00404050(uint noname_0, uint noname_1, uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    uint var_4h;\n    uint var_34h;\n    uint var_24h;\n    uint var_1dh;\n    uint var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x14;\n    var_4h_2 = 0x445d90;\n    fcn.00422004();\n    *(unaff_EBP + -0x1d) = 1;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x24) = 0;\n    iVar1 = fcn.00403f81(unaff_EBP + -0x24, *(unaff_EBP + 8), 0x2000);\n    if (iVar1 < 0) {\n        *(unaff_EBP + -0x1d) = 0;\n    }\n    else {\n        fcn.004221f0();\n        *(unaff_EBP + -0x18) = &fcn.00404050::var_4h_2;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    *(unaff_EBP + -0x38) = 0x4040c4;\n    fcn.0042204c();\n    return;\n}\n",
        "token_count": 360
    },
    "00404121": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404121(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *extraout_ECX;\n    \n    if (arg_8h == NULL) {\n        fcn.00401170(0x80004005);\n        arg_8h = extraout_ECX;\n    }\n    iVar1 = (**(*arg_8h + 0xc))();\n    *in_ECX = iVar1 + 0x10;\n    return;\n}\n",
        "token_count": 119
    },
    "004041ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004041ba(int32_t arg_8h)\n\n{\n    int32_t arg_10h;\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_10h = *in_ECX;\n    iVar1 = *(arg_10h + -0xc);\n    puVar2 = (**(**(arg_10h + -0x10) + 0x10))();\n    iVar3 = (***puVar2)(arg_8h, 2);\n    if (iVar3 == 0) {\n        fcn.00404178();\n    }\n    if (iVar1 < arg_8h) {\n        arg_8h = iVar1;\n    }\n    fcn.00403e67(iVar3 + 0x10, arg_8h + 1, arg_10h, arg_8h + 1);\n    *(iVar3 + 4) = iVar1;\n    fcn.00401240();\n    *in_ECX = iVar3 + 0x10;\n    return;\n}\n",
        "token_count": 260
    },
    "0040449d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t * __cdecl fcn.0040449d(uint arg_8h, uint arg_ch)\n\n{\n    uint16_t *puVar1;\n    uint arg_8h_00;\n    uint32_t arg_8h_01;\n    \n    puVar1 = fcn.00401200(arg_8h, arg_ch);\n    if (puVar1 != NULL) {\n        arg_8h_01 = *puVar1;\n        arg_8h_00 = fcn.004042d8(arg_8h_01);\n        fcn.00403f22(arg_8h_00, arg_8h_01, puVar1 + 1, *puVar1);\n        fcn.0040414b(arg_8h_01);\n        puVar1 = 0x1;\n    }\n    return puVar1;\n}\n",
        "token_count": 187
    },
    "00404786": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404786(uint arg_8h, uchar *arg_ch, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ushort *puVar3;\n    \n    if ((arg_ch != NULL) && (arg_10h != 0)) {\n        iVar2 = fcn.0040f83a();\n        puVar3 = fcn.00401200(*(iVar2 + 0xc), arg_8h);\n        if (puVar3 == NULL) {\n            *arg_ch = 0;\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar3 + 1, *puVar3, arg_ch, arg_10h + -1, 0, 0);\n            arg_ch[iVar2] = 0;\n        }\n        return iVar2;\n    }\n    fcn.00404695();\n    pcVar1 = swi(3);\n    iVar2 = (*pcVar1)();\n    return iVar2;\n}\n",
        "token_count": 245
    },
    "004048b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004048b4(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.00403e14(&var_4h, arg_8h, arg_ch);\n    if (iVar1 < 0) {\n        fcn.00401170(iVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 93
    },
    "00404e48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404e48(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.00422914(arg_8h, arg_ch, arg_10h);\n    fcn.00403de8(arg_8h_00);\n    return;\n}\n",
        "token_count": 84
    },
    "0040549d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040549d(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_21ch;\n    uint var_4h;\n    \n    fcn.00421eaa(0x214);\n    *(unaff_EBP + -0x21c) = extraout_ECX;\n    *extraout_ECX = vtable.CWinApp.0;\n    piVar1 = extraout_ECX[0x16];\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -4) = 1;\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 4))(1);\n    }\n    if (extraout_ECX[0x22] != NULL) {\n        (**(*extraout_ECX[0x22] + 0x18))(1);\n    }\n    iVar2 = fcn.0040f83a();\n    if (*(iVar2 + 0x14) == '\\0') {\n        if (*0x44dde8 != NULL) {\n            (**(**0x44dde8 + 4))(1);\n            *0x44dde8 = NULL;\n        }\n        if (*0x44dde4 != NULL) {\n            (**(**0x44dde4 + 4))(1);\n            *0x44dde4 = NULL;\n        }\n    }\n    if (extraout_ECX[0x1c] != NULL) {\n        fcn.00412454(extraout_ECX[0x1c]);\n    }\n    if (extraout_ECX[0x1d] != NULL) {\n        fcn.00412454(extraout_ECX[0x1d]);\n    }\n    if (*(extraout_ECX + 0x24) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)(*(extraout_ECX + 0x24));\n    }\n    if (*(extraout_ECX + 0x92) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)(*(extraout_ECX + 0x92));\n    }\n    if (extraout_ECX[0x23] != NULL) {\n        (**(*extraout_ECX[0x23] + 4))(1);\n    }\n    iVar2 = fcn.0040f83a();\n    if (*(iVar2 + 0x10) == extraout_ECX[0x14]) {\n        *(iVar2 + 0x10) = 0;\n    }\n    if (*(iVar2 + 4) == extraout_ECX) {\n        *(iVar2 + 4) = 0;\n    }\n    fcn.00421c45(extraout_ECX[0x14]);\n    fcn.00421c45(extraout_ECX[0x15]);\n    fcn.00421c45(extraout_ECX[0x18]);\n    fcn.00421c45(extraout_ECX[0x19]);\n    fcn.00421c45(extraout_ECX[0x1a]);\n    extraout_ECX[0xb] = NULL;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00405e23();\n    fcn.00421f06();\n    return;\n}\n",
        "token_count": 746
    },
    "004056db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004056db(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00422b03(arg_8h, arg_ch, 0x10);\n    return iVar1 == 0;\n}\n",
        "token_count": 62
    },
    "004056f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl\nfcn.004056f7(int32_t arg_8h, uint *arg_ch, uint noname_2, code *arg_14h, uint *arg_18h, int32_t arg_1ch, \n            int32_t *arg_20h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t extraout_ECX;\n    uint unaff_EBX;\n    uint uVar3;\n    uint *unaff_ESI;\n    uint *puVar4;\n    \n    uVar3 = unaff_EBX;\n    puVar4 = unaff_ESI;\n    if (arg_8h != 0) goto code_r0x00405708;\ncode_r0x00405703:\n    fcn.00404695();\n    arg_8h = extraout_ECX;\n    uVar3 = unaff_EBX;\n    puVar4 = unaff_ESI;\ncode_r0x00405708:\n    unaff_EBX = 1;\n    if (arg_20h != NULL) {\n        *arg_20h = arg_8h;\n        arg_20h[1] = arg_14h;\n        return 1;\n    }\n    if (0xb < arg_1ch - 0x39U) {\n        return 0;\n    }\n    // switch table (12 cases) at 0x4057ff\n    unaff_ESI = puVar4;\n    switch(*((arg_1ch - 0x39U) * 4 + 0x4057ff)) {\n    case 0x405739:\n        (*arg_14h)();\n        return 1;\n    case 0x405741:\n        uVar2 = (*arg_14h)();\n        return uVar2;\n    case 0x405749:\n        arg_18h = arg_ch;\n        break;\n    case 0x405754:\n        arg_18h = arg_ch;\n        goto code_r0x004057ed;\n    case 0x40575c:\n        if (arg_18h != NULL) {\n            (*arg_14h)(arg_18h[1], *arg_18h);\n            return 1;\n        }\n        goto code_r0x00405703;\n    case 0x405770:\n        if (arg_18h != NULL) {\n            uVar2 = (*arg_14h)(arg_18h[1], *arg_18h);\n            return uVar2;\n        }\n        goto code_r0x00405703;\n    case 0x405781:\n        if (arg_18h != NULL) {\n            (*arg_14h)(arg_ch, arg_18h[1], *arg_18h);\n            return 1;\n        }\n        goto code_r0x00405703;\n    case 0x405799:\n        if (arg_18h != NULL) {\n            uVar2 = (*arg_14h)(arg_ch, arg_18h[1], *arg_18h);\n            return uVar2;\n        }\n        goto code_r0x00405703;\n    case 0x4057b1:\n        unaff_ESI = arg_18h;\n        if (arg_18h != NULL) {\n            (*arg_14h)(arg_18h);\n            goto code_r0x004057c0;\n        }\n        goto code_r0x00405703;\n    case 0x4057ce:\n        goto code_r0x004057ce;\n    case 0x4057e2:\n        break;\n    case 0x4057ea:\ncode_r0x004057ed:\n        uVar2 = (*arg_14h)(arg_18h);\n        return uVar2;\n    }\n    (*arg_14h)(arg_18h);\n    return 1;\ncode_r0x004057ce:\n    unaff_ESI = arg_18h;\n    if (arg_18h != NULL) {\n        (*arg_14h)(arg_18h, arg_ch, puVar4, uVar3);\ncode_r0x004057c0:\n        iVar1 = arg_18h[7];\n        arg_18h[7] = 0;\n        return iVar1 == 0;\n    }\n    goto code_r0x00405703;\n}\n",
        "token_count": 941
    },
    "00405dea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00405dea(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *(param_1 + 0x20) = 0;\n    *(param_1 + 0x24) = 0;\n    *(param_1 + 0x2c) = 0;\n    *(param_1 + 0x30) = 0;\n    iVar1 = fcn.0040f282();\n    *(iVar1 + 0x34) = 0;\n    *(iVar1 + 0x54) = 0;\n    (*_sym.imp.USER32.dll_GetCursorPos)(iVar1 + 0x4c);\n    *(param_1 + 0x40) = 0;\n    *(param_1 + 0x3c) = 0;\n    *(param_1 + 0x28) = 1;\n    return;\n}\n",
        "token_count": 198
    },
    "00405f16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405f16(int32_t arg_8h)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t *in_ECX;\n    uint arg_14h;\n    uint var_4h;\n    \n    ppcVar1 = (**(*in_ECX + 0x28))();\n    pcVar3 = *ppcVar1;\n    do {\n        if (pcVar3 == NULL) {\n            return 0;\n        }\n        arg_14h = 0;\n        if (*(arg_8h + 4) < 0xc000) {\n            iVar2 = fcn.00409989(ppcVar1[1], *(arg_8h + 4), 0, 0);\n            if (iVar2 != 0) {\ncode_r0x00405f50:\n                (**(iVar2 + 0x14))(*(arg_8h + 8), *(arg_8h + 0xc));\n                return 1;\n            }\n        }\n        else {\n            pcVar3 = ppcVar1[1];\n            while (iVar2 = fcn.00409989(pcVar3, 0xc000, 0, arg_14h),  iVar2 != 0) {\n                if (**(iVar2 + 0x10) == *(arg_8h + 4)) goto code_r0x00405f50;\n                pcVar3 = iVar2 + 0x18;\n            }\n        }\n        ppcVar1 = (**ppcVar1)();\n        pcVar3 = *ppcVar1;\n    } while( true );\n}\n",
        "token_count": 363
    },
    "00406528": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406528(uint arg_8h, uint arg_ch, int32_t arg_10h, uint arg_14h, int32_t arg_18h)\n\n{\n    int32_t arg_8h_00;\n    \n    arg_8h_00 = fcn.004014d0(arg_10h + arg_18h);\n    fcn.00420bc3(arg_8h_00, arg_10h, arg_ch, arg_10h);\n    fcn.00420bc3(arg_8h_00 + arg_10h, arg_18h, arg_14h, arg_18h);\n    fcn.00401260(arg_10h + arg_18h);\n    return;\n}\n",
        "token_count": 164
    },
    "004065c6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004065c6(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint uVar2;\n    uint arg_10h_00;\n    int32_t unaff_EBP;\n    uint var_10h;\n    int32_t arg_14h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    piVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -0x10) = 0;\n    uVar2 = fcn.00406505();\n    fcn.004064ee(uVar2);\n    arg_14h = *piVar1;\n    uVar2 = *(arg_14h + -0xc);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = 1;\n    arg_10h_00 = fcn.004012c0(*(unaff_EBP + 0xc));\n    fcn.00406528(*(unaff_EBP + 8), *(unaff_EBP + 0xc), arg_10h_00, arg_14h, uVar2);\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 320
    },
    "00406a5f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406a5f(uint32_t arg_8h)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    int32_t extraout_ECX;\n    \n    iVar2 = in_ECX[0x22];\n    if (iVar2 != 0) goto code_r0x00406a77;\n    do {\n        fcn.00404695();\n        iVar2 = extraout_ECX;\ncode_r0x00406a77:\n    } while ((arg_8h < 0xe110) || (*(iVar2 + 4) + 0xe110U <= arg_8h));\n    puVar1 = fcn.00406a2c(arg_8h - 0xe110);\n    iVar2 = (**(*in_ECX + 0x88))(*puVar1);\n    if (iVar2 == 0) {\n        (***in_ECX[0x22])(arg_8h - 0xe110);\n    }\n    return 1;\n}\n",
        "token_count": 230
    },
    "00406dac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406dac(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f83a();\n    if (*(iVar1 + 4) != NULL) {\n    // WARNING: Could not recover jumptable at 0x00406dc2. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(**(iVar1 + 4) + 0x98))();\n        return;\n    }\n    fcn.00406c4b(0, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 146
    },
    "00406f17": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406f17(code *arg_8h, code *arg_ch)\n\n{\n    code **in_ECX;\n    \n    fcn.0040a26b();\n    *in_ECX = vtable.CDialog.0;\n    fcn.004229c0(in_ECX + 0x15, 0, 0x20);\n    in_ECX[0x1a] = arg_ch;\n    in_ECX[0x15] = arg_8h;\n    in_ECX[0x16] = arg_8h & 0xffff;\n    return;\n}\n",
        "token_count": 132
    },
    "0040740c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: hMem\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040740c(uint arg_8h, uint arg_ch, uint hInstance)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t *arg_8h_00;\n    int32_t unaff_EBP;\n    uint var_48h;\n    uint var_38h;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint hMem;\n    uint var_4h;\n    \n    fcn.00421e3e(0x3c);\n    *(unaff_EBP + -0x20) = arg_8h_00;\n    if (*(unaff_EBP + 0x10) == 0) {\n        iVar2 = fcn.0040f83a();\n        *(unaff_EBP + 0x10) = *(iVar2 + 0xc);\n    }\n    iVar2 = fcn.0040f83a();\n    piVar1 = *(iVar2 + 0x3c);\n    *(unaff_EBP + -0x28) = piVar1;\n    *(unaff_EBP + -0x14) = 0;\n    *(unaff_EBP + -4) = 0;\n    fcn.0040dfe9(0x10);\n    fcn.0040dfe9(0x3c000);\n    if (piVar1 == NULL) {\n        iVar2 = *(unaff_EBP + 8);\n    }\n    else {\n        iVar2 = (**(*arg_8h_00 + 0x134))(unaff_EBP + -0x48);\n        if (iVar2 == 0) goto code_r0x004075ba;\n        iVar2 = (**(*piVar1 + 0x14))(unaff_EBP + -0x48, *(unaff_EBP + 8));\n    }\n    if (iVar2 != 0) {\n        fcn.00402630();\n        *(unaff_EBP + -4) = 1;\n        *(unaff_EBP + -0x18) = 0;\n        iVar3 = fcn.00413b2c(iVar2, unaff_EBP + -0x1c, unaff_EBP + -0x18);\n        if (iVar3 == 0) {\n            fcn.00413af0(iVar2);\n            *(unaff_EBP + -4) = 2;\n            fcn.00413a4c(*(unaff_EBP + -0x18));\n            uVar4 = fcn.00413759();\n            *(unaff_EBP + -0x14) = uVar4;\n            *(unaff_EBP + -4) = 1;\n            fcn.0041374b();\n            if (*(unaff_EBP + -0x14) != 0) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*(unaff_EBP + -0x14));\n            }\n        }\n        arg_8h_00[0x11] = -1;\n        arg_8h_00[0xf] = arg_8h_00[0xf] | 0x10;\n        fcn.0040d0e8(arg_8h_00);\n        if (*(unaff_EBP + 0xc) == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = *(*(unaff_EBP + 0xc) + 0x20);\n        }\n        iVar2 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)(*(unaff_EBP + 0x10), iVar2, uVar4, fcn.00406e49, 0);\n        fcn.00401240();\n        *(unaff_EBP + -4) = 0xffffffff;\n        if ((*(unaff_EBP + -0x28) != NULL) && (iVar2 != 0)) {\n            (**(**(unaff_EBP + -0x28) + 0x18))(unaff_EBP + -0x48);\n            (**(*arg_8h_00 + 0x134))(0);\n        }\n        iVar3 = fcn.0040b662();\n        if (iVar3 == 0) {\n            (**(*arg_8h_00 + 0x11c))();\n        }\n        if ((iVar2 != 0) && ((*(arg_8h_00 + 0xf) & 0x10) == 0)) {\n            (*_sym.imp.USER32.dll_DestroyWindow)(iVar2);\n        }\n        if (*(unaff_EBP + -0x14) != 0) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*(unaff_EBP + -0x14));\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(*(unaff_EBP + -0x14));\n        }\n    }\ncode_r0x004075ba:\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1194
    },
    "004079c1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004079c1(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    \n    puVar1 = fcn.00413e3e(arg_8h);\n    *puVar1 = arg_ch;\n    return;\n}\n",
        "token_count": 61
    },
    "00407cd5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00407cd5(void)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    uint *puVar2;\n    uint32_t unaff_retaddr;\n    uint uVar3;\n    \n    uVar3 = 0;\n    iVar1 = fcn.00407c0c(0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    iVar1 = iVar1 + 0x1c;\n    if (iVar1 == 0) {\n        fcn.00404695(uVar3);\n        iVar1 = extraout_ECX;\n    }\n    if (*(iVar1 + 4) != 0) {\n        for (puVar2 = *(*(iVar1 + 4) + ((unaff_retaddr >> 4) % *(iVar1 + 8)) * 4); puVar2 != NULL; puVar2 = *puVar2) {\n            if (puVar2[1] == unaff_retaddr) {\n                return puVar2[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 239
    },
    "0040835f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040835f(int32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t *extraout_ECX;\n    \n    piVar1 = *arg_8h;\n    if (piVar1 == NULL) {\n        piVar1 = fcn.00404695();\n        arg_8h = extraout_ECX;\n    }\n    *arg_8h = *piVar1;\n    return piVar1 + 2;\n}\n",
        "token_count": 112
    },
    "00408838": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00408838(void)\n\n{\n    uint *puVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CControlSiteFactoryMgr.0;\n    puVar1 = extraout_ECX[8];\n    *(unaff_EBP + -4) = 0;\n    if (puVar1 != NULL) {\n        (***puVar1)(1);\n    }\n    fcn.004083a2();\n    *(unaff_EBP + -4) = 0xffffffff;\n    extraout_ECX[1] = vtable.CList_class_IControlSiteFactory___class_IControlSiteFactory__.0;\n    fcn.004083a2();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 233
    },
    "004090e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004090e9(int32_t arg_8h, uint32_t *arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint32_t pvParam;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    uint32_t uStack8;\n    \n    iVar2 = fcn.00408f34();\n    if (iVar2 == 0) {\n        if ((((arg_8h == 0x12340042) && (arg_ch != NULL)) && (0x27 < *arg_ch)) &&\n           (iVar2 = (*_sym.imp.USER32.dll_SystemParametersInfoA)(0x30, 0, &pvParam, 0),  iVar2 != 0)) {\n            arg_ch[1] = 0;\n            arg_ch[2] = 0;\n            pcVar1 = _sym.imp.USER32.dll_GetSystemMetrics;\n            uVar4 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0);\n            arg_ch[3] = uVar4;\n            uVar4 = (*pcVar1)(1);\n            arg_ch[5] = pvParam;\n            arg_ch[6] = uStack16;\n            arg_ch[7] = uStack12;\n            arg_ch[8] = uStack8;\n            uVar3 = 1;\n            arg_ch[4] = uVar4;\n            arg_ch[9] = 1;\n            if (0x47 < *arg_ch) {\n                fcn.0042435b(arg_ch + 10, 0x20, \"DISPLAY\", 0x1f);\n            }\n        }\n        else {\n            uVar3 = 0;\n        }\n    }\n    else {\n        uVar3 = (**0x44f620)(arg_8h, arg_ch);\n    }\n    return uVar3;\n}\n",
        "token_count": 420
    },
    "0040a4d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a4d6(uint arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint hWnd;\n    \n    if (arg_ch == 0) {\n        iVar1 = fcn.0040f83a();\n        arg_ch = *(iVar1 + 0x10);\n    }\n    if (in_ECX == 0) {\n        hWnd = 0;\n    }\n    else {\n        hWnd = *(in_ECX + 0x20);\n    }\n    fcn.00406ac9(hWnd, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 154
    },
    "0040af1b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040af1b(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0x24);\n    *(unaff_EBP + -0x2c) = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x28) = extraout_ECX;\n    *(unaff_EBP + -0x24) = 0;\n    iVar1 = fcn.0040f282();\n    *(unaff_EBP + -0x18) = iVar1;\n    *(unaff_EBP + -0x14) = *(iVar1 + 0xdc);\n    *(iVar1 + 0xdc) = extraout_ECX[8];\n    iVar1 = *extraout_ECX;\n    *(unaff_EBP + 8) = 0;\n    *(unaff_EBP + -4) = 0;\n    (**(iVar1 + 0xfc))(unaff_EBP + -0x2c);\n    *(unaff_EBP + 8) = 1;\n    *(*(unaff_EBP + -0x18) + 0xdc) = *(unaff_EBP + -0x14);\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 357
    },
    "0040b5d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040b5d5(void)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    uint *puVar2;\n    uint32_t unaff_retaddr;\n    uint uVar3;\n    \n    uVar3 = 0;\n    iVar1 = fcn.0040b535(0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    iVar1 = iVar1 + 0x1c;\n    if (iVar1 == 0) {\n        fcn.00404695(uVar3);\n        iVar1 = extraout_ECX;\n    }\n    if (*(iVar1 + 4) != 0) {\n        for (puVar2 = *(*(iVar1 + 4) + ((unaff_retaddr >> 4) % *(iVar1 + 8)) * 4); puVar2 != NULL; puVar2 = *puVar2) {\n            if (puVar2[1] == unaff_retaddr) {\n                return puVar2[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 240
    },
    "0040e734": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040e734(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *extraout_ECX;\n    \n    iVar1 = *arg_8h;\n    if (iVar1 == 0) {\n        iVar1 = fcn.00404695();\n        arg_8h = extraout_ECX;\n    }\n    *arg_8h = *(iVar1 + 4);\n    return iVar1 + 8;\n}\n",
        "token_count": 108
    },
    "0040f38c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040f38c(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    fcn.00401880(\"comctl32.dll\");\n    *(unaff_EBP + -4) = 0;\n    fcn.0040f33e(unaff_EBP + -0x10);\n    fcn.00401240();\n    *extraout_ECX = vtable.CComCtlWrapper.0;\n    extraout_ECX[4] = NULL;\n    extraout_ECX[5] = NULL;\n    extraout_ECX[6] = NULL;\n    extraout_ECX[7] = NULL;\n    extraout_ECX[8] = NULL;\n    extraout_ECX[9] = NULL;\n    extraout_ECX[10] = NULL;\n    extraout_ECX[0xb] = NULL;\n    extraout_ECX[0xc] = NULL;\n    extraout_ECX[0xd] = NULL;\n    extraout_ECX[0xe] = NULL;\n    extraout_ECX[0xf] = NULL;\n    extraout_ECX[0x10] = NULL;\n    extraout_ECX[0x11] = NULL;\n    extraout_ECX[0x12] = NULL;\n    extraout_ECX[0x13] = NULL;\n    extraout_ECX[0x14] = NULL;\n    extraout_ECX[0x15] = NULL;\n    extraout_ECX[0x16] = NULL;\n    extraout_ECX[0x17] = NULL;\n    extraout_ECX[0x18] = NULL;\n    extraout_ECX[0x19] = NULL;\n    extraout_ECX[0x1a] = NULL;\n    extraout_ECX[0x1b] = NULL;\n    extraout_ECX[0x1c] = NULL;\n    extraout_ECX[0x1d] = NULL;\n    extraout_ECX[0x1e] = NULL;\n    extraout_ECX[0x1f] = NULL;\n    extraout_ECX[0x20] = NULL;\n    extraout_ECX[0x21] = NULL;\n    extraout_ECX[0x22] = NULL;\n    extraout_ECX[0x23] = NULL;\n    extraout_ECX[0x24] = NULL;\n    extraout_ECX[0x25] = NULL;\n    extraout_ECX[0x26] = NULL;\n    extraout_ECX[0x27] = NULL;\n    extraout_ECX[0x28] = NULL;\n    extraout_ECX[0x29] = NULL;\n    extraout_ECX[0x2a] = NULL;\n    extraout_ECX[0x2b] = NULL;\n    extraout_ECX[0x2c] = NULL;\n    extraout_ECX[0x2d] = NULL;\n    extraout_ECX[0x2e] = NULL;\n    extraout_ECX[0x2f] = NULL;\n    extraout_ECX[0x30] = NULL;\n    extraout_ECX[0x31] = NULL;\n    extraout_ECX[0x32] = NULL;\n    extraout_ECX[0x33] = NULL;\n    extraout_ECX[0x34] = NULL;\n    extraout_ECX[0x35] = NULL;\n    extraout_ECX[0x36] = NULL;\n    extraout_ECX[0x37] = NULL;\n    extraout_ECX[0x38] = NULL;\n    extraout_ECX[0x39] = NULL;\n    extraout_ECX[0x3a] = NULL;\n    extraout_ECX[0x3b] = NULL;\n    extraout_ECX[0x3c] = NULL;\n    extraout_ECX[0x3d] = NULL;\n    extraout_ECX[0x3e] = NULL;\n    extraout_ECX[0x3f] = NULL;\n    extraout_ECX[0x40] = NULL;\n    extraout_ECX[0x41] = NULL;\n    extraout_ECX[0x42] = NULL;\n    extraout_ECX[0x43] = NULL;\n    extraout_ECX[0x44] = NULL;\n    extraout_ECX[0x45] = NULL;\n    extraout_ECX[0x46] = NULL;\n    extraout_ECX[0x47] = NULL;\n    extraout_ECX[0x48] = NULL;\n    extraout_ECX[0x49] = NULL;\n    extraout_ECX[0x4a] = NULL;\n    extraout_ECX[0x4b] = NULL;\n    extraout_ECX[0x4c] = NULL;\n    extraout_ECX[0x4d] = NULL;\n    extraout_ECX[0x4e] = NULL;\n    extraout_ECX[0x4f] = NULL;\n    extraout_ECX[0x50] = NULL;\n    extraout_ECX[0x51] = NULL;\n    extraout_ECX[0x52] = NULL;\n    extraout_ECX[0x53] = NULL;\n    extraout_ECX[0x54] = NULL;\n    extraout_ECX[0x55] = NULL;\n    extraout_ECX[0x56] = NULL;\n    extraout_ECX[0x57] = NULL;\n    extraout_ECX[0x58] = NULL;\n    extraout_ECX[0x59] = NULL;\n    extraout_ECX[0x5a] = NULL;\n    extraout_ECX[0x5b] = NULL;\n    extraout_ECX[0x5c] = NULL;\n    extraout_ECX[0x5d] = NULL;\n    extraout_ECX[0x5e] = NULL;\n    extraout_ECX[0x5f] = NULL;\n    extraout_ECX[0x60] = NULL;\n    extraout_ECX[0x61] = NULL;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1389
    },
    "0040f5d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040f5d0(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    fcn.00401880(\"comdlg32.dll\");\n    *(unaff_EBP + -4) = 0;\n    fcn.0040f33e(unaff_EBP + -0x10);\n    fcn.00401240();\n    *extraout_ECX = vtable.CCommDlgWrapper.0;\n    extraout_ECX[4] = NULL;\n    extraout_ECX[5] = NULL;\n    extraout_ECX[6] = NULL;\n    extraout_ECX[7] = NULL;\n    extraout_ECX[8] = NULL;\n    extraout_ECX[9] = NULL;\n    extraout_ECX[10] = NULL;\n    extraout_ECX[0xb] = NULL;\n    extraout_ECX[0xc] = NULL;\n    extraout_ECX[0xd] = NULL;\n    extraout_ECX[0xe] = NULL;\n    extraout_ECX[0xf] = NULL;\n    extraout_ECX[0x10] = NULL;\n    extraout_ECX[0x11] = NULL;\n    extraout_ECX[0x12] = NULL;\n    extraout_ECX[0x13] = NULL;\n    extraout_ECX[0x14] = NULL;\n    extraout_ECX[0x15] = NULL;\n    extraout_ECX[0x16] = NULL;\n    extraout_ECX[0x17] = NULL;\n    extraout_ECX[0x18] = NULL;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 411
    },
    "0040f653": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040f653(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    fcn.00401880(\"shell32.dll\");\n    *(unaff_EBP + -4) = 0;\n    fcn.0040f33e(unaff_EBP + -0x10);\n    fcn.00401240();\n    *extraout_ECX = vtable.CShellWrapper.0;\n    extraout_ECX[4] = NULL;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 164
    },
    "0040f86d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040f86d(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uStack8;\n    \n    fcn.0040f83a();\n    iVar2 = fcn.004050ca();\n    if (iVar2 == 0) {\n        uStack8 = 0x44b4b8;\n        fcn.0042160f(&uStack8, 0x445e7c);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 125
    },
    "0040f983": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040f983(void)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    uint *puVar2;\n    uint32_t unaff_retaddr;\n    uint uVar3;\n    \n    uVar3 = 0;\n    iVar1 = fcn.0040f8fb(0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    iVar1 = iVar1 + 0x1c;\n    if (iVar1 == 0) {\n        fcn.00404695(uVar3);\n        iVar1 = extraout_ECX;\n    }\n    if (*(iVar1 + 4) != 0) {\n        for (puVar2 = *(*(iVar1 + 4) + ((unaff_retaddr >> 4) % *(iVar1 + 8)) * 4); puVar2 != NULL; puVar2 = *puVar2) {\n            if (puVar2[1] == unaff_retaddr) {\n                return puVar2[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 239
    },
    "00410abd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410abd(uint arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00410922(arg_8h);\n    *arg_ch = iVar1;\n    if (iVar1 == 0) {\n        iVar1 = fcn.004109d5(arg_8h);\n        *arg_ch = iVar1;\n        iVar1 = (-(iVar1 != 0) & 0x7fffbffe) + 0x80004002;\n    }\n    else {\n        fcn.00410a37();\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 149
    },
    "00411053": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: lpCriticalSection\n\nvoid __cdecl fcn.00411053(uint arg_8h, uint arg_ch)\n\n{\n    code **arg_8h_00;\n    uint uVar1;\n    code *pcVar2;\n    uint *extraout_ECX;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint lpCriticalSection;\n    uint uVar4;\n    uint *puVar5;\n    uint var_4h;\n    \n    fcn.00421e3e(0x10);\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    puVar5 = extraout_ECX + 7;\n    *(unaff_EBP + -0x14) = puVar5;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar5);\n    if ((*(unaff_EBP + 8) < 1) || (extraout_ECX[3] <= *(unaff_EBP + 8))) goto code_r0x0041117a;\n    arg_8h_00 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*extraout_ECX);\n    if (arg_8h_00 == NULL) {\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00410cd3(0x10);\n        if (arg_8h_00 == NULL) {\n            arg_8h_00 = NULL;\n        }\n        else {\n            *arg_8h_00 = vtable.CThreadData.0;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        arg_8h_00[2] = NULL;\n        arg_8h_00[3] = NULL;\n        fcn.00410e05(arg_8h_00);\ncode_r0x004110aa:\n        if (arg_8h_00[3] == NULL) {\n            uVar1 = fcn.004048b4(extraout_ECX[3], 4);\n            pcVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0, uVar1);\n        }\n        else {\n            uVar4 = 2;\n            uVar1 = fcn.004048b4(extraout_ECX[3], 4);\n            pcVar2 = (*_sym.imp.KERNEL32.dll_LocalReAlloc)(arg_8h_00[3], uVar1, uVar4);\n        }\n        if (pcVar2 == NULL) {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*(unaff_EBP + -0x14));\n            pcVar2 = fcn.0040465d();\n        }\n        arg_8h_00[3] = pcVar2;\n        fcn.004229c0(pcVar2 + arg_8h_00[2] * 4, 0, (extraout_ECX[3] - arg_8h_00[2]) * 4);\n        arg_8h_00[2] = extraout_ECX[3];\n        (*_sym.imp.KERNEL32.dll_TlsSetValue)(*extraout_ECX, arg_8h_00);\n        iVar3 = *(unaff_EBP + 8);\n    }\n    else {\n        iVar3 = *(unaff_EBP + 8);\n        if ((arg_8h_00[2] <= iVar3) && (*(unaff_EBP + 0xc) != 0)) goto code_r0x004110aa;\n    }\n    if ((arg_8h_00[3] != NULL) && (iVar3 < arg_8h_00[2])) {\n        *(arg_8h_00[3] + iVar3 * 4) = *(unaff_EBP + 0xc);\n    }\n    puVar5 = *(unaff_EBP + -0x14);\ncode_r0x0041117a:\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar5);\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 930
    },
    "00411460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411460(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.00420c40(arg_8h, arg_ch, arg_10h, arg_14h);\n    fcn.00403de8(arg_8h_00);\n    return;\n}\n",
        "token_count": 95
    },
    "00411cc8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411cc8(uint arg_8h)\n\n{\n    fcn.004229c0(arg_8h, 0, 0x10);\n    return;\n}\n",
        "token_count": 43
    },
    "00411ce0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00411ce0(int16_t *vtime, ulong *arg_ch)\n\n{\n    int32_t iVar1;\n    uint wVerMinor;\n    uint var_ah;\n    int16_t var_6h;\n    int16_t var_4h;\n    \n    if (arg_ch == NULL) {\n        fcn.00401170(0x80004005);\n    }\n    iVar1 = (*_sym.imp.OLEAUT32.dll_VariantTimeToSystemTime)(vtime, arg_ch);\n    fcn.004229c0(&wVerMinor, 0, 0x10);\n    if (((((iVar1 != 0) && (iVar1 = (*_sym.imp.OLEAUT32.dll_UnRegisterTypeLib)(*arg_ch, &wVerMinor),  iVar1 != 0)) &&\n         (*vtime == wVerMinor)) && ((vtime[1] == wVerMinor._2_2_ && (vtime[3] == var_ah)))) &&\n       ((vtime[4] == var_ah._2_2_ && ((vtime[5] == var_6h && (vtime[6] == var_4h)))))) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 283
    },
    "00411f1b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00411f1b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_10h;\n    uint var_ah;\n    ushort var_6h;\n    ushort var_4h;\n    \n    fcn.004229c0(&var_10h, 0, 0x10);\n    var_10h._0_2_ = arg_8h;\n    var_10h._2_2_ = arg_ch;\n    var_ah._0_2_ = arg_10h;\n    var_ah._2_2_ = arg_14h;\n    var_6h = arg_18h;\n    var_4h = arg_1ch;\n    iVar1 = fcn.00411ce0(&var_10h, in_ECX);\n    *(in_ECX + 8) = iVar1 == 0;\n    return;\n}\n",
        "token_count": 245
    },
    "00412395": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412395(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint unaff_EBX;\n    uchar lpString1;\n    uint var_103h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    if (arg_8h != 0) goto code_r0x004123bc;\n    do {\n        fcn.00404695();\ncode_r0x004123bc:\n    } while (arg_ch == 0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_ch);\n    lpString1 = 0;\n    fcn.004229c0(&var_103h, 0, 0xff);\n    if (uVar1 < 0x101) {\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowTextA)(arg_8h, &lpString1, 0x100);\n        if (uVar2 == uVar1) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(&lpString1, arg_ch);\n            if (iVar3 == 0) goto code_r0x0041241c;\n        }\n    }\n    (*_sym.imp.USER32.dll_SetWindowTextA)(arg_8h, arg_ch);\ncode_r0x0041241c:\n    fcn.00420bb4(unaff_EBX);\n    return;\n}\n",
        "token_count": 345
    },
    "004125ab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004125ab(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f83a();\n    (*_sym.imp.KERNEL32.dll_InterlockedIncrement)(iVar1 + 0x2c);\n    return;\n}\n",
        "token_count": 58
    },
    "004127f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004127f8(uint32_t arg_8h)\n\n{\n    if (0x10 < arg_8h) {\n        arg_8h = fcn.00404695();\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg_8h * 0x18 + 0x44f998);\n    return;\n}\n",
        "token_count": 82
    },
    "00412b7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00412b7e(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.00412b30(&var_4h, arg_8h, arg_ch);\n    if (iVar1 < 0) {\n        fcn.00401170(iVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 94
    },
    "00413161": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413161(uint arg_8h, uint arg_ch)\n\n{\n    uint arg_8h_00;\n    \n    arg_8h_00 = fcn.004014d0(0x104);\n    fcn.004229c0(arg_8h_00, 0, 0x104);\n    fcn.00403eca(arg_8h_00, 0x104, arg_8h, 0xffffffff);\n    (*_sym.imp.SHLWAPI.dll_PathStripToRootA)(arg_8h_00);\n    fcn.004047eb(0xffffffff);\n    return;\n}\n",
        "token_count": 140
    },
    "00413773": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413773(int32_t arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    if (*(arg_8h + 2) == -1) {\n        piVar2 = arg_8h + 0x1a;\n    }\n    else {\n        piVar2 = arg_8h + 0x12;\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        iVar1 = *piVar2;\n        piVar2 = piVar2 + 1;\n    } while (iVar1 != 0);\n    return;\n}\n",
        "token_count": 256
    },
    "00413e3e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00413e3e(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = arg_8h;\n    puVar2 = fcn.00413c3c(arg_8h, &arg_8h, &var_4h);\n    if (puVar2 == NULL) {\n        if (*(in_ECX + 4) == 0) {\n            fcn.00413b93(*(in_ECX + 8), 1);\n        }\n        puVar2 = fcn.00413dee();\n        puVar2[1] = iVar1;\n        *puVar2 = *(arg_8h * 4 + *(in_ECX + 4));\n        *(arg_8h * 4 + *(in_ECX + 4)) = puVar2;\n    }\n    return puVar2 + 2;\n}\n",
        "token_count": 218
    },
    "004148e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004148e4(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0xc);\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    piVar3 = extraout_ECX + 0x13;\n    if (*piVar3 == 0) {\n        iVar1 = (**(*extraout_ECX + 300))(piVar3);\n        if ((iVar1 != 0) && (*piVar3 == 0)) {\n            *(unaff_EBP + -4) = 0;\n            iVar1 = fcn.0040f83a();\n            iVar1 = (**(**(iVar1 + 0x3c) + 8))(extraout_ECX);\n            *(unaff_EBP + -4) = 0xffffffff;\n            *piVar3 = iVar1;\n        }\n        if (*(unaff_EBP + 8) == 0) {\n            iVar1 = *extraout_ECX[0x13];\n            uVar2 = (**(*extraout_ECX + 0x138))();\n            (**(iVar1 + 0xa0))(uVar2);\n        }\n    }\n    piVar3 = extraout_ECX;\n    if (extraout_ECX[0x13] != 0) {\n        while ((piVar3[0xf] & 0x100U) == 0) {\n            piVar3[0xf] = piVar3[0xf] | 0x100;\n            uVar2 = (*_sym.imp.USER32.dll_GetParent)(piVar3[8]);\n            piVar3 = fcn.0040b5a9(uVar2);\n            piVar4 = piVar3;\n            if (piVar3 != NULL) {\n                piVar4 = piVar3[8];\n            }\n            uVar5 = (*_sym.imp.USER32.dll_GetWindowLongA)(piVar4, 0xfffffff0);\n            if (((uVar5 & 0x40000000) == 0) || (piVar3 == NULL)) break;\n        }\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 560
    },
    "0041580a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041580a(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h, int32_t *arg_18h)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    \n    if (((arg_8h == 0) || (arg_10h == 0)) || (arg_18h == NULL)) {\n        uVar1 = 0x80004005;\n    }\n    else {\n        uVar1 = (**(*arg_18h + 0x10))\n                          (arg_18h, (*(arg_8h + 0x24) != 0) * '\\x02' + '\\x02', arg_ch, arg_8h, arg_14h, arg_10h, 0);\n        if (arg_ch != 0) {\n            puVar2 = arg_8h + 0x14;\n            do {\n                fcn.00403dd7(*puVar2);\n                puVar2 = puVar2 + 0xd;\n                arg_ch = arg_ch + -1;\n            } while (arg_ch != 0);\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 266
    },
    "00415a37": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.00415a37(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint uVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0xc);\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    uVar3 = *(unaff_EBP + 0x10);\n    uVar1 = *(unaff_EBP + 0xc);\n    *(extraout_ECX + 8) = uVar1;\n    *(extraout_ECX + 0x18) = uVar3;\n    *(extraout_ECX + 0x10) = 0;\n    *(extraout_ECX + 0x14) = 0;\n    fcn.004229c0(uVar1, 0, uVar3);\n    fcn.00403dd7(*(extraout_ECX + 0xc));\n    iVar2 = *(unaff_EBP + 8) * 0x34;\n    *(extraout_ECX + 0xc) = 0;\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00403da8(-(iVar2 >> 0x20 != 0) | iVar2);\n    *(extraout_ECX + 0xc) = uVar3;\n    if (*(extraout_ECX + 0xc) != 0) {\n        *(extraout_ECX + 0x10) = *(unaff_EBP + 8);\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 421
    },
    "00415b42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00415b42(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t *in_ECX;\n    \n    (**(*in_ECX + 0xc4))(arg_8h, arg_ch + 8, arg_ch, 0, arg_10h, arg_14h, arg_18h, arg_1ch, 0, 0, 0);\n    return;\n}\n",
        "token_count": 120
    },
    "00415eee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00415eee(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *var_4h;\n    \n    puVar1 = param_1 + 0x78;\n    var_4h = param_1;\n    fcn.004229c0(puVar1, 0, 0x10);\n    puVar2 = *(param_1 + 0x50);\n    var_4h = NULL;\n    *puVar1 = 0x10;\n    if (puVar2 == NULL) {\n        fcn.00404695();\n    }\n    iVar3 = (***puVar2)(puVar2, 0x4421bc, &var_4h);\n    if (-1 < iVar3) {\n        (**(*var_4h + 0xc))(var_4h, puVar1);\n        (**(*var_4h + 8))(var_4h);\n    }\n    return;\n}\n",
        "token_count": 228
    },
    "00416814": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416814(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t *in_ECX;\n    \n    in_ECX[2] = arg_10h + arg_8h;\n    *in_ECX = arg_8h;\n    in_ECX[1] = arg_ch;\n    in_ECX[3] = arg_14h + arg_ch;\n    return;\n}\n",
        "token_count": 111
    },
    "00416d06": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416d06(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t in_ECX;\n    uint *puVar1;\n    \n    puVar1 = *(arg_8h * 0x30 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8);\n    *arg_ch = *puVar1;\n    arg_ch[1] = puVar1[1];\n    arg_ch[2] = puVar1[2];\n    arg_ch[3] = puVar1[3];\n    *(arg_ch + 4) = *(puVar1 + 4);\n    *(arg_ch + 0x12) = *(puVar1 + 0x12);\n    return;\n}\n",
        "token_count": 170
    },
    "00416d2d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416d2d(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t in_ECX;\n    uint *puVar1;\n    \n    puVar1 = *(arg_8h * 0x30 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8);\n    *arg_ch = *puVar1;\n    *(arg_ch + 1) = *(puVar1 + 1);\n    return;\n}\n",
        "token_count": 111
    },
    "00416d50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416d50(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t in_ECX;\n    uint *puVar1;\n    \n    puVar1 = *(arg_8h * 0x30 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8);\n    *arg_ch = *puVar1;\n    arg_ch[1] = puVar1[1];\n    arg_ch[2] = puVar1[2];\n    arg_ch[3] = puVar1[3];\n    return;\n}\n",
        "token_count": 132
    },
    "00416df8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416df8(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t in_ECX;\n    uint *puVar1;\n    \n    puVar1 = *(arg_8h * 0x30 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8);\n    *puVar1 = *arg_ch;\n    puVar1[1] = arg_ch[1];\n    puVar1[2] = arg_ch[2];\n    puVar1[3] = arg_ch[3];\n    return;\n}\n",
        "token_count": 132
    },
    "00416fe1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00416fe1(int32_t arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.004158d6(&arg_8h);\n    if (cVar1 == '\\0') {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = *(arg_8h * 0x30 + 4 + *(in_ECX + 0x14)) + *(in_ECX + 8);\n    }\n    return iVar2;\n}\n",
        "token_count": 130
    },
    "004170c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004170c7(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h, int32_t arg_18h, int32_t arg_1ch)\n\n{\n    int32_t in_ECX;\n    \n    if (arg_1ch == 0) {\n        arg_1ch = 0;\n    }\n    else {\n        arg_1ch = arg_1ch - *(in_ECX + 8);\n    }\n    if (arg_18h == 0) {\n        arg_18h = 0;\n    }\n    else {\n        arg_18h = arg_18h - *(in_ECX + 8);\n    }\n    fcn.00416f1c(*(in_ECX + 0x14) * 0x34 + *(in_ECX + 0xc), arg_8h, arg_ch, arg_10h, 0, 0, 0, arg_14h - *(in_ECX + 8), \n                 arg_18h, arg_1ch, 0);\n    *(in_ECX + 0x14) = *(in_ECX + 0x14) + 1;\n    return;\n}\n",
        "token_count": 269
    },
    "0041711d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0041711d(void)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0x1c);\n    iVar3 = *(extraout_ECX + 0x3c);\n    iVar1 = *(extraout_ECX + 0x34);\n    *(unaff_EBP + -0x14) = *(extraout_ECX + 0x38) - *(extraout_ECX + 0x30);\n    *(unaff_EBP + -0x10) = iVar3 - iVar1;\n    fcn.00410312(0);\n    *(unaff_EBP + -4) = 0;\n    fcn.00414036(unaff_EBP + -0x14);\n    piVar2 = *(extraout_ECX + 0x50);\n    if (piVar2 == NULL) {\n        piVar2 = fcn.00404695();\n    }\n    iVar3 = (**(*piVar2 + 0x44))(piVar2, 1, unaff_EBP + -0x14);\n    if (-1 < iVar3) {\n        iVar3 = (**(**(extraout_ECX + 0x50) + 0x48))(*(extraout_ECX + 0x50), 1, unaff_EBP + -0x14);\n        if (-1 < iVar3) {\n            fcn.004140c6(unaff_EBP + -0x14);\n            *(extraout_ECX + 0x38) = *(extraout_ECX + 0x30) + *(unaff_EBP + -0x14);\n            *(extraout_ECX + 0x3c) = *(extraout_ECX + 0x34) + *(unaff_EBP + -0x10);\n        }\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00410366();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 540
    },
    "00418666": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00418666(int32_t **param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t **var_4h;\n    \n    if ((param_1[2] != 0x80010001) && (piVar1 = *param_1,  piVar1 != NULL)) {\n        var_4h = param_1;\n        if (piVar1[0x14] == 0) {\n            piVar1 = fcn.00404695();\n        }\n        iVar2 = (***piVar1[0x14])(piVar1[0x14], 0x4420dc, &var_4h);\n        if (iVar2 < 0) {\n            iVar2 = fcn.00416b57();\n            if (iVar2 != 0) {\n                uVar3 = 0xd;\n                if (param_1[3][0x24] != 0) {\n                    uVar3 = 0x800d;\n                }\n                (**(**param_1 + 0x70))(*param_1, param_1[2], uVar3, iVar2);\n            }\n        }\n        else {\n            (*(*var_4h)[3])(var_4h, param_1[2], param_1[3] != NULL, param_1 + 4);\n            (*(*var_4h)[2])(var_4h);\n        }\n    }\n    return;\n}\n",
        "token_count": 332
    },
    "00418801": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00418801(uint32_t arg_8h, uint32_t arg_ch, uint *arg_10h, uint arg_14h)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (((arg_8h & 3) == 0) || (uVar1 = 0,  arg_ch == 0)) {\n        return 0;\n    }\ncode_r0x00418825:\n    // switch table (31 cases) at 0x41888d\n    switch(*arg_10h) {\n    case 1:\n        var_4h = 3;\n        break;\n    case 2:\n    case 0x14:\n        var_4h = 5;\n        break;\n    case 3:\n    case 9:\n    case 10:\n    case 0x17:\n        var_4h = 6;\n        break;\n    default:\n        goto code_r0x0041883b;\n    case 6:\n    case 7:\n    case 8:\n    case 0xb:\n    case 0xc:\n    case 0xf:\n    case 0x10:\n    case 0x13:\n    case 0x15:\n        var_4h = 7;\n        break;\n    case 0x18:\n        var_4h = 2;\n        break;\n    case 0x19:\n        var_4h = 1;\n        break;\n    case 0x1f:\n        var_4h = 4;\n    }\n    fcn.00416ec1(3);\n    var_8h = arg_14h;\n    fcn.00416138(&var_24h);\n    return var_ch;\ncode_r0x0041883b:\n    uVar1 = uVar1 + 1;\n    arg_10h = arg_10h + 9;\n    if (arg_ch <= uVar1) {\n        return 0;\n    }\n    goto code_r0x00418825;\n}\n",
        "token_count": 461
    },
    "00419e86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid fcn.00419e86(void)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint *puVar6;\n    int32_t *extraout_ECX;\n    int32_t **ppiVar7;\n    int32_t unaff_EBP;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint pv;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e74(0x94);\n    *(unaff_EBP + -0x88) = extraout_ECX[5];\n    *(unaff_EBP + -0x80) = extraout_ECX[4];\n    if (extraout_ECX[0x12] == 0) {\n        piVar1 = extraout_ECX[2];\n        if ((piVar1 == NULL) ||\n           (iVar3 = (**(*piVar1 + 0xc))(piVar1, 0x44209c, unaff_EBP + -0x78, unaff_EBP + -0x7c),  iVar3 < 0))\n        goto code_r0x0041a1e5;\n        fcn.00416a58(unaff_EBP + -0x70, 0x4427bc);\n        *(unaff_EBP + -0x50) = 0xffffffff;\n        *(unaff_EBP + -0x58) = 0;\n        *(unaff_EBP + -0x54) = 0;\n        *(unaff_EBP + -0x4c) = 0x18;\n        *(unaff_EBP + -0x48) = 0;\n        *(unaff_EBP + -0x44) = 0x1fb;\n        fcn.00416a58(unaff_EBP + -0x40, 0x4427d4);\n        *(unaff_EBP + -0x20) = 0xffffffff;\n        *(unaff_EBP + -0x28) = 0x1c;\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x1c) = 0x20;\n        *(unaff_EBP + -0x18) = 0;\n        *(unaff_EBP + -0x14) = 0x1e;\n        iVar3 = (**(**(unaff_EBP + -0x78) + 0x10))(*(unaff_EBP + -0x78), 2, unaff_EBP + -0x70, 0x28, 0);\n        if (iVar3 < 0) {\n            (**(**(unaff_EBP + -0x78) + 8))(*(unaff_EBP + -0x78));\n            goto code_r0x0041a1e5;\n        }\n        *(unaff_EBP + -0xa0) = *(unaff_EBP + -0x7c);\n        *(unaff_EBP + -0x9c) = 1;\n        *(unaff_EBP + -0x98) = 0;\n        *(unaff_EBP + -0x94) = 0;\n        *(unaff_EBP + -0x90) = 0;\n        iVar3 = (**(**(unaff_EBP + -0x78) + 0x18))(*(unaff_EBP + -0x78), 0, 0, unaff_EBP + -0xa0);\n        *(unaff_EBP + -0x84) = iVar3;\n        if (iVar3 < 0) {\n            (**(**(unaff_EBP + -0x78) + 8))(*(unaff_EBP + -0x78));\n            goto code_r0x0041a1e5;\n        }\n        iVar3 = *(unaff_EBP + -0x94);\n        extraout_ECX[5] = *(unaff_EBP + -0x98);\n        *(unaff_EBP + -0x7c) = *(unaff_EBP + -0x8c);\n        extraout_ECX[4] = *(unaff_EBP + -0x8c);\n        piVar1 = *(unaff_EBP + -0x78);\n        extraout_ECX[0xd] = iVar3;\n        (**(*piVar1 + 8))(piVar1);\n    }\n    else {\n        iVar3 = (**(*extraout_ECX[0x13] + 0x14))(extraout_ECX[0x13], 0x4422bc, unaff_EBP + -0x74);\n        *(unaff_EBP + -0x84) = iVar3;\n        if (iVar3 < 0) goto code_r0x0041a1e5;\n        iVar3 = (****(unaff_EBP + -0x74))(*(unaff_EBP + -0x74), 0x44217c, unaff_EBP + -0x7c);\n        if (-1 < iVar3) {\n            *(unaff_EBP + -0x78) = 0;\n            iVar3 = (**(**(unaff_EBP + -0x7c) + 0x10))(*(unaff_EBP + -0x7c), 0x4423dc, unaff_EBP + -0x78);\n            if (-1 < iVar3) {\n                (**(**(unaff_EBP + -0x78) + 0x14))(*(unaff_EBP + -0x78), extraout_ECX[1] + 0xe8, extraout_ECX + 0x16);\n                (**(**(unaff_EBP + -0x78) + 8))(*(unaff_EBP + -0x78));\n            }\n            (**(**(unaff_EBP + -0x7c) + 8))(*(unaff_EBP + -0x7c));\n        }\n        iVar3 = fcn.00403da8(0x14);\n        if (iVar3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = fcn.004196c7(*(unaff_EBP + -0x74));\n        }\n        extraout_ECX[0x14] = iVar3;\n        (**(**(unaff_EBP + -0x74) + 8))(*(unaff_EBP + -0x74));\n        iVar3 = *extraout_ECX[0x14];\n        if (iVar3 != 0) {\n            fcn.00416ced(iVar3, extraout_ECX[0x14] + 1);\n        }\n        iVar3 = fcn.00403da8(0x28);\n        if (iVar3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = fcn.0041586b(0, 8000);\n        }\n        extraout_ECX[0x15] = iVar3;\n        fcn.00419849(*extraout_ECX[0x14]);\n        *(extraout_ECX[0x14] + 8) = extraout_ECX[0x15];\n        uVar2 = *(extraout_ECX[0x15] + 0xc);\n        extraout_ECX[4] = uVar2;\n        if (0x3333333 < uVar2) goto code_r0x0041a1e5;\n        iVar3 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(uVar2 * 0x28);\n        extraout_ECX[5] = iVar3;\n        if (iVar3 == 0) {\n            iVar3 = fcn.0040465d();\n        }\n        fcn.004229c0(iVar3, 0, extraout_ECX[4] * 0x28);\n        fcn.004196ee();\n        fcn.00416c54();\n    }\n    iVar3 = extraout_ECX[4];\n    *(unaff_EBP + -0x74) = 0;\n    if (0 < iVar3) {\n        iVar3 = 0;\n        do {\n            iVar4 = fcn.00403da8(0x1c);\n            *(unaff_EBP + -0x7c) = iVar4;\n            *(unaff_EBP + -4) = 0;\n            if (iVar4 == 0) {\n                uVar5 = 0;\n            }\n            else {\n                uVar5 = fcn.0041ccba(10);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            iVar4 = extraout_ECX[5];\n            *(unaff_EBP + -0x74) = *(unaff_EBP + -0x74) + 1;\n            *(iVar3 + 0x24 + iVar4) = uVar5;\n            iVar3 = iVar3 + 0x28;\n        } while (*(unaff_EBP + -0x74) < extraout_ECX[4]);\n    }\n    if (*(unaff_EBP + -0x88) != 0) {\n        if (0 < *(unaff_EBP + -0x80)) {\n            ppiVar7 = *(unaff_EBP + -0x88) + 0x24;\n            *(unaff_EBP + -0x74) = *(unaff_EBP + -0x80);\n            *(unaff_EBP + -0x7c) = -0x24 - *(unaff_EBP + -0x88);\n            do {\n                iVar3 = (*ppiVar7)[1];\n                *(unaff_EBP + -0x80) = iVar3;\n                while (iVar3 != 0) {\n                    puVar6 = fcn.0040835f(unaff_EBP + -0x80);\n                    (**(*extraout_ECX + 8))(*puVar6, 1);\n                    iVar3 = *(unaff_EBP + -0x80);\n                }\n                fcn.0041cbd2();\n                if (*ppiVar7 != NULL) {\n                    (**(**ppiVar7 + 4))(1);\n                }\n                ppiVar7 = ppiVar7 + 10;\n                piVar1 = unaff_EBP + -0x74;\n                *piVar1 = *piVar1 + -1;\n            } while (*piVar1 != 0);\n        }\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(unaff_EBP + -0x88));\n    }\ncode_r0x0041a1e5:\n    fcn.00421ef7();\n    return;\n}\n",
        "token_count": 2616
    },
    "0041aee6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: pvargDest\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid fcn.0041aee6(void)\n\n{\n    uint *puVar1;\n    int32_t **ppiVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint pvargDest;\n    uint var_4h;\n    \n    fcn.00421e0b(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    *extraout_ECX = vtable.CDataSourceControl.0;\n    *(unaff_EBP + -4) = 0;\n    if ((((extraout_ECX[0x16] != NULL) && (extraout_ECX[0x14] != NULL)) &&\n        (puVar1 = *extraout_ECX[0x14],  iVar5 = (***puVar1)(puVar1, 0x44217c, unaff_EBP + -0x14),  -1 < iVar5)) &&\n       (piVar6 = *(unaff_EBP + -0x14),  piVar6 != NULL)) {\n        *(unaff_EBP + -0x10) = 0;\n        iVar5 = (**(*piVar6 + 0x10))(piVar6, 0x4423dc, unaff_EBP + -0x10);\n        if ((-1 < iVar5) && (piVar6 = *(unaff_EBP + -0x10),  piVar6 != NULL)) {\n            (**(*piVar6 + 0x18))(piVar6, extraout_ECX[0x16]);\n            (**(**(unaff_EBP + -0x10) + 8))(*(unaff_EBP + -0x10));\n        }\n        (**(**(unaff_EBP + -0x14) + 8))(*(unaff_EBP + -0x14));\n    }\n    while (((extraout_ECX[9] != NULL && (ppiVar2 = *(extraout_ECX[7] + 8),  ppiVar2 != NULL)) && (*ppiVar2 != NULL))) {\n        (**(**ppiVar2 + 0xbc))(ppiVar2[2], 0);\n        (*ppiVar2)[0x26] = 0;\n    }\n    *(unaff_EBP + -0x18) = extraout_ECX + 6;\n    fcn.0041cbd2();\n    if (extraout_ECX[0x10] != NULL) {\n        iVar5 = 0;\n        pcVar3 = extraout_ECX[0xe];\n        if (0 < pcVar3) {\n            *(unaff_EBP + -0x10) = 0;\n            do {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(extraout_ECX[0x10] + *(unaff_EBP + -0x10));\n                *(unaff_EBP + -0x10) = *(unaff_EBP + -0x10) + 0x10;\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < extraout_ECX[0xe]);\n            pcVar3 = extraout_ECX[0xe];\n        }\n        if (pcVar3 != NULL) {\n            fcn.00403dd7(extraout_ECX[0xf]);\n            fcn.00403dd7(extraout_ECX[0x10]);\n        }\n    }\n    piVar6 = extraout_ECX[2];\n    if (piVar6 != NULL) {\n        (**(*piVar6 + 8))(piVar6);\n    }\n    piVar6 = extraout_ECX[3];\n    if (piVar6 != NULL) {\n        (**(*piVar6 + 8))(piVar6);\n    }\n    if (extraout_ECX[5] != NULL) {\n        pcVar3 = extraout_ECX[4];\n        *(unaff_EBP + -0x10) = 0;\n        if (0 < pcVar3) {\n            iVar5 = 0;\n            do {\n                iVar4 = *(*(extraout_ECX[5] + iVar5 + 0x24) + 4);\n                *(unaff_EBP + -0x14) = iVar4;\n                while (iVar4 != 0) {\n                    piVar6 = fcn.0040835f(unaff_EBP + -0x14);\n                    *(*piVar6 + 0x98) = 0;\n                    iVar4 = *(unaff_EBP + -0x14);\n                }\n                fcn.0041cbd2();\n                if (*(extraout_ECX[5] + iVar5 + 0x24) != NULL) {\n                    (**(**(extraout_ECX[5] + iVar5 + 0x24) + 4))(1);\n                }\n                *(unaff_EBP + -0x10) = *(unaff_EBP + -0x10) + 1;\n                iVar5 = iVar5 + 0x28;\n            } while (*(unaff_EBP + -0x10) < extraout_ECX[4]);\n        }\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(extraout_ECX[5]);\n    }\n    if (extraout_ECX[0xd] != NULL) {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(extraout_ECX[0xd]);\n    }\n    if (extraout_ECX[0x15] != NULL) {\n        fcn.0041973d(*extraout_ECX[0x14]);\n        fcn.00415898();\n    }\n    if (extraout_ECX[0x15] != NULL) {\n        fcn.00418645(1);\n    }\n    if (extraout_ECX[0x14] != NULL) {\n        fcn.0041ae21(1);\n    }\n    piVar6 = extraout_ECX[0x13];\n    if (piVar6 != NULL) {\n        (**(*piVar6 + 8))(piVar6);\n    }\n    piVar6 = extraout_ECX[0x12];\n    if (piVar6 != NULL) {\n        (**(*piVar6 + 8))(piVar6);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0041cce2();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1499
    },
    "0041b232": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl fcn.0041b232(uint arg_8h, uint arg_ch)\n\n{\n    char *pcVar1;\n    uchar uVar2;\n    uint16_t uVar3;\n    uint uVar4;\n    double dVar5;\n    code *pcVar6;\n    char cVar7;\n    ulong *puVar8;\n    uint *puVar9;\n    uint uVar10;\n    uint16_t *puVar11;\n    uchar *puVar12;\n    int32_t iVar13;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_144h;\n    uint var_138h;\n    uint var_128h;\n    uint var_118h;\n    uint var_108h;\n    uint var_f8h;\n    uint var_e8h;\n    uint var_d8h;\n    uint var_c8h;\n    uint var_c0h;\n    uint var_b8h;\n    uint var_a8h;\n    uint var_98h;\n    uint var_88h;\n    uint var_78h;\n    uint var_68h;\n    uint var_58h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint pvargDest;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_18h;\n    uint var_4h;\n    \n    fcn.00421e74(0x138);\n    *(unaff_EBP + -0x2c) = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x48) = 0;\n    if (*(extraout_ECX + 0x48) != 0) goto code_r0x0041b25f;\n    do {\n        fcn.00404695();\ncode_r0x0041b25f:\n    } while (*(extraout_ECX + 0x54) == 0);\n    fcn.00411cc8(unaff_EBP + -0x3c);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x28) = 3;\n    fcn.00418c0b(*(unaff_EBP + 0xc), unaff_EBP + -0x28);\n    if ((*(unaff_EBP + -0x28) == 3) ||\n       (cVar7 = fcn.00416fa9(*(unaff_EBP + 0xc), unaff_EBP + -0x28),  pcVar6 = _sym.imp.OLEAUT32.dll_VariantCopy, \n       cVar7 == '\\0')) {\n        fcn.00411f87(unaff_EBP + -0x3c);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(unaff_EBP + -0x3c);\n        goto code_r0x0041b766;\n    }\n    uVar3 = *(unaff_EBP + -0x28);\n    if (uVar3 < 0x82) {\n        if (uVar3 != 0x81) {\n            if (uVar3 < 9) {\n                if (uVar3 == 8) goto code_r0x0041b709;\n                if (uVar3 == 2) {\ncode_r0x0041b44b:\n                    puVar11 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    uVar10 = fcn.00411bd3(*puVar11, 2);\n                    *(unaff_EBP + -4) = 7;\n                    fcn.00411ca4(uVar10);\n                    iVar13 = unaff_EBP + -0x118;\n                }\n                else if (uVar3 == 3) {\ncode_r0x0041b41a:\n                    puVar9 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    uVar10 = fcn.00411c09(*puVar9, 3);\n                    *(unaff_EBP + -4) = 8;\n                    fcn.00411ca4(uVar10);\n                    iVar13 = unaff_EBP + -0xe8;\n                }\n                else if (uVar3 == 4) {\n                    puVar9 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    *(unaff_EBP + -0x28) = *puVar9;\n                    *(unaff_EBP + -0x60) = *(unaff_EBP + -0x28);\n                    *(unaff_EBP + -0x68) = 4;\n                    *(unaff_EBP + -4) = 9;\n                    fcn.00411ca4(unaff_EBP + -0x68);\n                    iVar13 = unaff_EBP + -0x68;\n                }\n                else if (uVar3 == 5) {\n                    puVar8 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    *(unaff_EBP + -0x90) = *puVar8;\n                    *(unaff_EBP + -0x98) = 5;\n                    *(unaff_EBP + -4) = 10;\n                    fcn.00411ca4(unaff_EBP + -0x98);\n                    iVar13 = unaff_EBP + -0x98;\n                }\n                else if (uVar3 == 6) {\n                    puVar9 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    uVar10 = *puVar9;\n                    uVar4 = puVar9[1];\n                    *(unaff_EBP + -0x58) = 6;\n                    *(unaff_EBP + -0x50) = uVar10;\n                    *(unaff_EBP + -0x4c) = uVar4;\n                    *(unaff_EBP + -4) = 0xd;\n                    fcn.00411ca4(unaff_EBP + -0x58);\n                    iVar13 = unaff_EBP + -0x58;\n                }\n                else {\n                    if (uVar3 != 7) goto code_r0x0041b754;\n                    puVar8 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                    *(unaff_EBP + -0xd0) = *puVar8;\n                    *(unaff_EBP + -0xd8) = 7;\n                    *(unaff_EBP + -4) = 0xc;\n                    fcn.00411ca4(unaff_EBP + -0xd8);\n                    iVar13 = unaff_EBP + -0xd8;\n                }\n            }\n            else if (uVar3 == 0xb) {\n                puVar11 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                uVar10 = fcn.00411bd3(*puVar11, 0xb);\n                *(unaff_EBP + -4) = 0xb;\n                fcn.00411ca4(uVar10);\n                iVar13 = unaff_EBP + -0x108;\n            }\n            else {\n                if (uVar3 != 0xc) {\n                    if (0xf < uVar3) {\n                        if (uVar3 < 0x12) {\n                            puVar12 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                            uVar2 = *puVar12;\n                            *(unaff_EBP + -200) = 0x11;\n                            *(unaff_EBP + -0xc0) = uVar2;\n                            *(unaff_EBP + -4) = 6;\n                            fcn.00411ca4(unaff_EBP + -200);\n                            iVar13 = unaff_EBP + -200;\n                            goto code_r0x0041b4db;\n                        }\n                        if (uVar3 == 0x12) goto code_r0x0041b44b;\n                        if (uVar3 == 0x13) goto code_r0x0041b41a;\n                    }\n                    goto code_r0x0041b754;\n                }\n                uVar10 = fcn.00416fe1(*(unaff_EBP + 0xc));\n                uVar10 = fcn.00411f87(uVar10);\n                *(unaff_EBP + -4) = 1;\n                fcn.00411ca4(uVar10);\n                iVar13 = unaff_EBP + -0xf8;\n            }\n            goto code_r0x0041b4db;\n        }\n        uVar10 = fcn.00416fe1(*(unaff_EBP + 0xc));\n        puVar9 = fcn.00401880(uVar10);\n        uVar10 = *puVar9;\n        *(unaff_EBP + -4) = 2;\n        uVar10 = fcn.00412053(uVar10, 8);\n        *(unaff_EBP + -4) = 3;\n        fcn.00411ca4(uVar10);\n        (*pcVar6)(unaff_EBP + -0x128);\ncode_r0x0041b749:\n        *(unaff_EBP + -4) = 0;\n        fcn.00401240();\n    }\n    else {\n        if (uVar3 == 0x82) {\ncode_r0x0041b709:\n            uVar10 = fcn.00416fe1(*(unaff_EBP + 0xc));\n            puVar9 = fcn.004043f2(uVar10);\n            uVar10 = *puVar9;\n            *(unaff_EBP + -4) = 4;\n            uVar10 = fcn.00412053(uVar10, 8);\n            *(unaff_EBP + -4) = 5;\n            fcn.00411ca4(uVar10);\n            (*pcVar6)(unaff_EBP + -0x138);\n            goto code_r0x0041b749;\n        }\n        if (uVar3 == 0x83) {\n            cVar7 = fcn.0041897d(*(unaff_EBP + 0xc), unaff_EBP + -0x24);\n            if (cVar7 != '\\0') {\n                dVar5 = *(unaff_EBP + -0x21);\n                cVar7 = *(unaff_EBP + -0x23);\n                while (cVar7 != '\\0') {\n                    pcVar1 = unaff_EBP + -0x23;\n                    *pcVar1 = *pcVar1 + -1;\n                    dVar5 = dVar5 / *0x43f0e8;\n                    cVar7 = *pcVar1;\n                }\n                if (*(unaff_EBP + -0x22) == '\\0') {\n                    dVar5 = -dVar5;\n                }\n                *(unaff_EBP + -0x80) = dVar5;\n                *(unaff_EBP + -0x88) = 5;\n                *(unaff_EBP + -4) = 0xe;\n                fcn.00411ca4(unaff_EBP + -0x88);\n                iVar13 = unaff_EBP + -0x88;\n                goto code_r0x0041b4db;\n            }\n        }\n        else if (uVar3 == 0x85) {\n            cVar7 = fcn.004189b0(*(unaff_EBP + 0xc), unaff_EBP + -0x44);\n            if (cVar7 != '\\0') {\n                *(unaff_EBP + -0x20) = 0;\n                *(unaff_EBP + -0x18) = 0;\n                fcn.00416e80(*(unaff_EBP + -0x44), *(unaff_EBP + -0x42), *(unaff_EBP + -0x40));\n                *(unaff_EBP + -0x70) = *(unaff_EBP + -0x20);\n                *(unaff_EBP + -0x78) = 7;\n                *(unaff_EBP + -4) = 0xf;\n                fcn.00411ca4(unaff_EBP + -0x78);\n                iVar13 = unaff_EBP + -0x78;\n                goto code_r0x0041b4db;\n            }\n        }\n        else if (uVar3 == 0x86) {\n            cVar7 = fcn.004189b0(*(unaff_EBP + 0xc), unaff_EBP + -0x44);\n            if (cVar7 != '\\0') {\n                *(unaff_EBP + -0x20) = 0;\n                *(unaff_EBP + -0x18) = 0;\n                fcn.00416e9c(*(unaff_EBP + -0x44), *(unaff_EBP + -0x42), *(unaff_EBP + -0x40));\n                *(unaff_EBP + -0xb0) = *(unaff_EBP + -0x20);\n                *(unaff_EBP + -0xb8) = 7;\n                *(unaff_EBP + -4) = 0x10;\n                fcn.00411ca4(unaff_EBP + -0xb8);\n                iVar13 = unaff_EBP + -0xb8;\n                goto code_r0x0041b4db;\n            }\n        }\n        else if ((uVar3 == 0x87) && (cVar7 = fcn.004189e3(*(unaff_EBP + 0xc), unaff_EBP + -0x24),  cVar7 != '\\0')) {\n            puVar8 = fcn.00418b57(*(unaff_EBP + -0x24), *(unaff_EBP + -0x22), *(unaff_EBP + -0x20), *(unaff_EBP + -0x1e)\n                                  , *(unaff_EBP + -0x1c), *(unaff_EBP + -0x1a));\n            *(unaff_EBP + -0xa8) = 7;\n            *(unaff_EBP + -0xa0) = *puVar8;\n            *(unaff_EBP + -4) = 0x11;\n            fcn.00411ca4(unaff_EBP + -0xa8);\n            iVar13 = unaff_EBP + -0xa8;\ncode_r0x0041b4db:\n            *(unaff_EBP + -4) = 0;\n            (*pcVar6)(iVar13);\n        }\n    }\ncode_r0x0041b754:\n    fcn.00411f87(unaff_EBP + -0x3c);\n    (*pcVar6)(unaff_EBP + -0x3c);\ncode_r0x0041b766:\n    fcn.00421ef7();\n    return;\n}\n",
        "token_count": 3367
    },
    "0041bebd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041bebd(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    \n    if (*(arg_8h + 0x50) == 0) {\n        uVar1 = fcn.0041bb09(arg_8h, 0);\n        if (((-(arg_ch != 0) & 0x10U) + 0x10 & uVar1) != 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)(*(arg_8h + 0x20), 0xf4, arg_ch != 0, 1);\n        }\n    }\n    else {\n        fcn.00415c42(arg_ch);\n    }\n    return;\n}\n",
        "token_count": 166
    },
    "0041ce0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: lpClassName\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0041ce0e(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint var_14h;\n    uint lpClassName;\n    uint var_4h;\n    \n    fcn.00421e0b(0xc);\n    fcn.0040f83a();\n    fcn.00412786(1);\n    *(unaff_EBP + -0x14) = 0;\n    fcn.00412c99(unaff_EBP + -0x10, 0x43f1bc, unaff_EBP + -0x14);\n    *(unaff_EBP + -4) = 0;\n    while (*(*(unaff_EBP + -0x10) + -0xc) != 0) {\n        iVar1 = fcn.0040f83a();\n        (*_sym.imp.USER32.dll_UnregisterClassA)(*(unaff_EBP + -0x10), *(iVar1 + 8));\n        uVar2 = fcn.00412c99(unaff_EBP + -0x18, 0x43f1bc, unaff_EBP + -0x14);\n        *(unaff_EBP + -4) = 1;\n        fcn.004029c0(uVar2);\n        *(unaff_EBP + -4) = 0;\n        fcn.00401240();\n    }\n    fcn.00401400();\n    fcn.004127f8(1);\n    fcn.00401240();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 421
    },
    "0041d067": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.0041d067(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    fcn.00402630();\n    *(unaff_EBP + -4) = 0;\n    iVar1 = fcn.00401790(*(unaff_EBP + 0xc));\n    if (iVar1 != 0) {\n        fcn.0041cf23(*(unaff_EBP + 8), *(unaff_EBP + -0x10), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n    }\n    fcn.00401240();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 234
    },
    "0041d515": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041d515(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    if (0x10b < arg_8h) {\n        if (arg_8h == 0x3e3) {\n            return 10;\n        }\n        if (arg_8h == 0x3e4) {\n            return 10;\n        }\n        if (arg_8h == 0x3e5) {\n            return 10;\n        }\n        if (arg_8h != 999) {\n            return 1;\n        }\n        return 5;\n    }\n    if (arg_8h == 0x10b) {\n        return 3;\n    }\n    if (arg_8h < 0x3f) {\n        if (arg_8h == 0x3e) {\n            return 8;\n        }\n        if (arg_8h < 0x1a) {\n            if (arg_8h == 0x19) {\n                return 9;\n            }\n            if (arg_8h < 0x19) {\n    // switch table (25 cases) at 0x41d725\n                switch(*(arg_8h * 4 + 0x41d725)) {\n                case 0x41d556:\n                    return 0;\n                case 0x41d55d:\n                    return 2;\n                case 0x41d564:\n                    return 4;\n                case 0x41d56b:\n                    return 7;\n                case 0x41d59b:\n                    return 9;\n                case 0x41d621:\n                    return 3;\n                case 0x41d64a:\n                    return 10;\n                case 0x41d686:\n                    return 6;\n                case 0x41d6d9:\n                    return 5;\n                case 0x41d71b:\n                    return 1;\n                }\n            }\n            return 1;\n        }\n        if (0x27 < arg_8h) {\n            if (8 < arg_8h - 0x34) {\n                return 1;\n            }\n    // switch table (9 cases) at 0x41d789\n            switch(*((arg_8h - 0x34) * 4 + 0x41d789)) {\n            case 0x41d621:\n                return 3;\n            case 0x41d64a:\n                return 10;\n            case 0x41d686:\n                return 6;\n            case 0x41d6d9:\n                return 5;\n            case 0x41d71b:\n                return 1;\n            }\n        }\n        if (arg_8h == 0x27) {\n            return 0xd;\n        }\n        if (0x20 < arg_8h) {\n            if (arg_8h == 0x21) {\n                return 0xc;\n            }\n            if (arg_8h == 0x22) {\n                return 3;\n            }\n            if (arg_8h == 0x24) {\n                return 4;\n            }\n            if (arg_8h != 0x26) {\n                return 1;\n            }\n            return 0xe;\n        }\n        if (arg_8h == 0x20) {\n            return 0xb;\n        }\n        if (arg_8h == 0x1a) {\n            return 6;\n        }\n        if (arg_8h == 0x1b) {\n            return 9;\n        }\n        iVar1 = arg_8h - 0x1d;\n        if (iVar1 == 0) {\n            return 5;\n        }\ncode_r0x0041d594:\n        if (iVar1 == 1) {\n            return 9;\n        }\n    }\n    else {\n        if (arg_8h < 0x6c) {\n            if (arg_8h == 0x6b) {\n                return 2;\n            }\n            if (0x47 < arg_8h) {\n                if (arg_8h == 0x50) {\n                    return 5;\n                }\n                if (arg_8h == 0x52) {\n                    return 5;\n                }\n                if (arg_8h == 0x55) {\n                    return 3;\n                }\n                if (arg_8h == 0x56) {\n                    return 5;\n                }\n                if (arg_8h != 0x58) {\n                    return 1;\n                }\n                return 10;\n            }\n            if (arg_8h == 0x47) {\n                return 5;\n            }\n            if (arg_8h == 0x40) {\n                return 5;\n            }\n            if (arg_8h == 0x41) {\n                return 5;\n            }\n            if (arg_8h == 0x42) {\n                return 6;\n            }\n            if (arg_8h == 0x43) {\n                return 3;\n            }\n            iVar1 = arg_8h - 0x44;\n            if (iVar1 == 0) {\n                return 4;\n            }\n        }\n        else {\n            if (arg_8h < 0x91) {\n                if (arg_8h == 0x90) {\n                    return 3;\n                }\n                if (arg_8h < 0x76) {\n                    if (arg_8h == 0x75) {\n                        return 10;\n                    }\n                    if (arg_8h == 0x6c) {\n                        return 0xc;\n                    }\n                    if (arg_8h == 0x6f) {\n                        return 3;\n                    }\n                    if (arg_8h != 0x70) {\n                        if (arg_8h == 0x71) {\n                            return 4;\n                        }\n                        if (arg_8h == 0x72) {\n                            return 6;\n                        }\n                        return 1;\n                    }\n                    return 0xd;\n                }\n                if (arg_8h == 0x7b) {\n                    return 3;\n                }\n                if (arg_8h == 0x7c) {\n                    return 3;\n                }\n                if (arg_8h == 0x7d) {\n                    return 3;\n                }\n                iVar1 = arg_8h - 0x83;\n                if (iVar1 == 0) {\n                    return 9;\n                }\n                goto code_r0x0041d594;\n            }\n            if (arg_8h < 0xb7) {\n                if (arg_8h == 0xb6) {\n                    return 6;\n                }\n                if (arg_8h == 0x91) {\n                    return 7;\n                }\n                if (arg_8h == 0x9a) {\n                    return 3;\n                }\n                if (arg_8h == 0xa1) {\n                    return 3;\n                }\n                if (arg_8h == 0xa7) {\n                    return 0xc;\n                }\n                if (arg_8h != 0xaa) {\n                    return 1;\n                }\n                return 5;\n            }\n            if (arg_8h == 0xb7) {\n                return 5;\n            }\n            if (arg_8h == 0xbf) {\n                return 6;\n            }\n            if (arg_8h == 0xc1) {\n                return 6;\n            }\n            iVar1 = arg_8h - 0xce;\n            if (iVar1 == 0) {\n                return 3;\n            }\n        }\n        if (iVar1 == 2) {\n            return 3;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 1718
    },
    "0041ddf2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041ddf2(uint8_t *arg_8h, uint arg_ch)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    int32_t iVar4;\n    \n    if (arg_ch < 0x16) goto code_r0x0041de03;\ncode_r0x0041ddfe:\n    fcn.00404695();\ncode_r0x0041de03:\n    uVar1 = *arg_8h;\n    iVar2 = *(arg_ch * 4 + 0x43f800) + 4;\n    puVar3 = arg_8h;\n    do {\n        if (uVar1 == 0) {\n            return iVar2;\n        }\n        if (uVar1 != 0xff) {\n            iVar4 = 0x43f7a8;\n            if ((uVar1 & 0x40) == 0) {\n                iVar4 = 0x43f750;\n            }\n            if (0x15 < (uVar1 & 0xbf)) goto code_r0x0041ddfe;\n            iVar2 = iVar2 + *(iVar4 + (uVar1 & 0xbf) * 4);\n        }\n        puVar3 = puVar3 + 1;\n        uVar1 = *puVar3;\n    } while( true );\n}\n",
        "token_count": 306
    },
    "0041e0c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041e0c3(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    if ((-1 < arg_8h) && (arg_8h < *(in_ECX + 8))) {\n        return arg_8h * 0xc + *(in_ECX + 4);\n    }\n    fcn.00404695();\n    pcVar1 = swi(3);\n    iVar2 = (*pcVar1)();\n    return iVar2;\n}\n",
        "token_count": 128
    },
    "0041e1c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041e1c0(code **param_1)\n\n{\n    int32_t iVar1;\n    \n    *param_1 = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const__.0;\n    if (param_1[1] != NULL) {\n        iVar1 = 0;\n        if (0 < param_1[2]) {\n            do {\n                fcn.0041de93(0);\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < param_1[2]);\n        }\n        fcn.00403dd7(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "0041e260": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e260(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t in_ECX;\n    \n    if (arg_8h < 0) {\n        fcn.00404695();\n    }\n    if (*(in_ECX + 8) <= arg_8h) {\n        fcn.0041debd(arg_8h + 1, 0xffffffff);\n    }\n    fcn.0041e195(arg_ch);\n    return;\n}\n",
        "token_count": 109
    },
    "0041ec7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0041ec7e(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t arg_ch;\n    int32_t in_ECX;\n    bool bVar2;\n    \n    uVar1 = *(in_ECX + 0x2c);\n    bVar2 = uVar1 < *(in_ECX + 0x30);\n    if (bVar2) {\n        arg_ch = *(in_ECX + 0x20);\n        fcn.00403e88(arg_8h, arg_ch, arg_ch * uVar1 + *(in_ECX + 0x28), arg_ch);\n        *(in_ECX + 0x2c) = *(in_ECX + 0x2c) + 1;\n    }\n    return bVar2;\n}\n",
        "token_count": 179
    },
    "0041f7d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f7d7(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t unaff_EDI;\n    \n    iVar2 = arg_8h;\n    iVar4 = unaff_EDI;\n    if (-1 < arg_8h) goto code_r0x0041f7ec;\n    do {\n        fcn.00404695();\n        iVar4 = unaff_EDI;\ncode_r0x0041f7ec:\n        if (-1 < arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (iVar2 == 0) {\n            if (*(in_ECX + 4) != 0) {\n                fcn.00403dd7(*(in_ECX + 4));\n                *(in_ECX + 4) = 0;\n            }\n            *(in_ECX + 0xc) = 0;\n            *(in_ECX + 8) = 0;\n            return;\n        }\n        if (*(in_ECX + 4) == 0) {\n            iVar4 = *(in_ECX + 0x10);\n            if (*(in_ECX + 0x10) < iVar2) {\n                iVar4 = iVar2;\n            }\n            uVar3 = fcn.00403da8(iVar4 << 2);\n            *(in_ECX + 4) = uVar3;\n            fcn.004229c0(uVar3, 0, iVar4 << 2);\n            *(in_ECX + 0xc) = iVar4;\n            goto code_r0x0041f908;\n        }\n        unaff_EDI = *(in_ECX + 0xc);\n        if (iVar2 <= unaff_EDI) {\n            iVar1 = *(in_ECX + 8);\n            if (iVar1 < iVar2) {\n                fcn.004229c0(*(in_ECX + 4) + iVar1 * 4, 0, (iVar2 - iVar1) * 4, iVar4);\n            }\n            goto code_r0x0041f908;\n        }\n        iVar4 = *(in_ECX + 0x10);\n        if (iVar4 == 0) {\n            iVar4 = *(in_ECX + 8) + (*(in_ECX + 8) >> 0x1f & 7U) >> 3;\n            if (iVar4 < 4) {\n                iVar4 = 4;\n            }\n            else if (0x400 < iVar4) {\n                iVar4 = 0x400;\n            }\n        }\n        arg_8h = iVar4 + unaff_EDI;\n        if (iVar4 + unaff_EDI <= iVar2) {\n            arg_8h = iVar2;\n        }\n    } while (arg_8h < unaff_EDI);\n    iVar4 = fcn.00403da8(arg_8h << 2);\n    fcn.00403e88(iVar4, arg_8h << 2, *(in_ECX + 4), *(in_ECX + 8) << 2);\n    fcn.004229c0(iVar4 + *(in_ECX + 8) * 4, 0, (iVar2 - *(in_ECX + 8)) * 4);\n    fcn.00403dd7(*(in_ECX + 4));\n    *(in_ECX + 4) = iVar4;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x0041f908:\n    *(in_ECX + 8) = iVar2;\n    return;\n}\n",
        "token_count": 827
    },
    "0041f912": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f912(int32_t arg_8h, uint *arg_ch, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    \n    if ((-1 < arg_8h) && (0 < arg_10h)) {\n        if (arg_8h < *(in_ECX + 8)) {\n            iVar2 = *(in_ECX + 8);\n            fcn.0041f7d7(iVar2 + arg_10h, 0xffffffff);\n            iVar2 = (iVar2 - arg_8h) * 4;\n            fcn.00411460(*(in_ECX + 4) + (arg_8h + arg_10h) * 4, iVar2, *(in_ECX + 4) + arg_8h * 4, iVar2);\n            fcn.004229c0(*(in_ECX + 4) + arg_8h * 4, 0, arg_10h << 2);\n        }\n        else {\n            fcn.0041f7d7(arg_8h + arg_10h, 0xffffffff);\n        }\n        arg_8h = arg_8h << 2;\n        do {\n            arg_10h = arg_10h + -1;\n            *(arg_8h + *(in_ECX + 4)) = *arg_ch;\n            arg_8h = arg_8h + 4;\n        } while (arg_10h != 0);\n        return;\n    }\n    fcn.00404695();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 377
    },
    "00420210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00420210(code *param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint unaff_retaddr;\n    \n    *(param_2 + param_3) = unaff_retaddr;\n    *((param_2 + param_3) - param_3) = 0x420220;\n    (*param_1)();\n    return;\n}\n",
        "token_count": 85
    },
    "0042079a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042079a(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    \n    iVar1 = arg_8h;\n    iVar4 = 0;\n    if (-1 < arg_8h) goto code_r0x004207b2;\n    do {\n        fcn.00404695();\ncode_r0x004207b2:\n        if (iVar4 <= arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (iVar1 == iVar4) {\n            fcn.00403dd7(*(in_ECX + 4));\n            *(in_ECX + 0xc) = iVar4;\n            *(in_ECX + 8) = iVar4;\n            goto code_r0x004208b6;\n        }\n        if (*(in_ECX + 4) == iVar4) {\n            uVar2 = fcn.00403da8(iVar1 << 2);\n            *(in_ECX + 4) = uVar2;\n            fcn.004229c0(uVar2, 0, iVar1 << 2);\n            *(in_ECX + 0xc) = iVar1;\ncode_r0x0042081e:\n            *(in_ECX + 8) = iVar1;\n            return;\n        }\n        iVar4 = *(in_ECX + 0xc);\n        if (iVar1 <= iVar4) {\n            iVar4 = *(in_ECX + 8);\n            if (iVar4 < iVar1) {\n                fcn.004229c0(*(in_ECX + 4) + iVar4 * 4, 0, (iVar1 - iVar4) * 4);\n            }\n            goto code_r0x0042081e;\n        }\n        iVar3 = *(in_ECX + 0x10);\n        if (iVar3 == 0) {\n            iVar3 = *(in_ECX + 8) + (*(in_ECX + 8) >> 0x1f & 7U) >> 3;\n            if (iVar3 < 4) {\ncode_r0x00420850:\n                iVar3 = 4;\n            }\n            else if (iVar3 < 0x401) {\n                if (iVar3 < 4) goto code_r0x00420850;\n            }\n            else {\n                iVar3 = 0x400;\n            }\n        }\n        arg_8h = iVar3 + iVar4;\n        if (iVar3 + iVar4 <= iVar1) {\n            arg_8h = iVar1;\n        }\n    } while (arg_8h < iVar4);\n    iVar4 = fcn.00403da8(arg_8h << 2);\n    fcn.00403e88(iVar4, arg_8h << 2, *(in_ECX + 4), *(in_ECX + 8) << 2);\n    fcn.004229c0(iVar4 + *(in_ECX + 8) * 4, 0, (iVar1 - *(in_ECX + 8)) * 4);\n    fcn.00403dd7(*(in_ECX + 4));\n    *(in_ECX + 8) = iVar1;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x004208b6:\n    *(in_ECX + 4) = iVar4;\n    return;\n}\n",
        "token_count": 775
    },
    "004208c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004208c0(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t in_ECX;\n    \n    if ((-1 < arg_8h) && (0 < arg_10h)) {\n        if (arg_8h < *(in_ECX + 8)) {\n            iVar1 = *(in_ECX + 8);\n            fcn.0042079a(iVar1 + arg_10h, 0xffffffff);\n            fcn.00411460(*(in_ECX + 4) + (arg_8h + arg_10h) * 4, ((*(in_ECX + 8) - arg_8h) - arg_10h) * 4, \n                         *(in_ECX + 4) + arg_8h * 4, (iVar1 - arg_8h) * 4);\n            fcn.004229c0(*(in_ECX + 4) + arg_8h * 4, 0, arg_10h << 2);\n        }\n        else {\n            fcn.0042079a(arg_8h + arg_10h, 0xffffffff);\n        }\n        arg_8h = arg_8h << 2;\n        do {\n            arg_10h = arg_10h + -1;\n            *(arg_8h + *(in_ECX + 4)) = arg_ch;\n            arg_8h = arg_8h + 4;\n        } while (arg_10h != 0);\n        return;\n    }\n    fcn.00404695();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 388
    },
    "004216b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004216b2(uint arg_8h, uint arg_ch)\n\n{\n    fcn.0042165b(fcn.00428e77, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 53
    },
    "0042287c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042287c(uint arg_8h)\n\n{\n    fcn.00422750(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 40
    },
    "0042b0e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0042b0fd)\n// WARNING: Removing unreachable block (ram,0x0042b103)\n// WARNING: Removing unreachable block (ram,0x0042b105)\n\nvoid fcn.0042b0e9(void)\n\n{\n    return;\n}\n",
        "token_count": 67
    },
    "0042de4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042de4d(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.0042225e();\n        *puVar1 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x44d144;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "0042de86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042de86(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.0042225e();\n        *puVar1 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x44d148;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 136
    },
    "0042debf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042debf(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.0042225e();\n        *puVar1 = 0x16;\n        fcn.00425dac(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x44d140;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 136
    },
    "0043659e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0043659e(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    arg_8h_00 = *(unaff_EBP + 8);\n    fcn.00421225(arg_8h_00);\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = vtable.std::logic_error.0;\n    fcn.00402b80(arg_8h_00 + 0xc);\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 200
    },
    "00436873": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00436873(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    if (*param_1 != -4) {\n        if (*param_1 == 0) {\n            fcn.00425dd2();\n        }\n        iVar1 = *param_1;\n        if (*(iVar1 + 0x18) < 0x10) {\n            iVar2 = iVar1 + 4;\n        }\n        else {\n            iVar2 = *(iVar1 + 4);\n        }\n        if (*(iVar1 + 0x14) + iVar2 <= param_1[1]) {\n            fcn.00425dd2();\n        }\n    }\n    return param_1[1];\n}\n",
        "token_count": 168
    },
    "004384bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004384bf(uint param_1)\n\n{\n    fcn.004229c0(param_1, 0, 0x18);\n    return param_1;\n}\n",
        "token_count": 43
    },
    "00420d2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00420d2a(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.00426d3b(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 113
    },
    "00401ca0": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\nuint fcn.00401ca0(void)\n\n{\n    int32_t in_FS_OFFSET;\n    \n    return *(in_FS_OFFSET + 0x30);\n}\n",
        "token_count": 34
    },
    "00404632": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404632(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *(param_1 + 0xc) = 1;\n    iVar1 = fcn.00404786(*(param_1 + 0x94), param_1 + 0x14, 0x80);\n    *(param_1 + 0x10) = iVar1 != 0;\n    return;\n}\n",
        "token_count": 96
    },
    "004059ad": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004059ad(code **param_1)\n\n{\n    *param_1 = vtable.CCmdUI.0;\n    param_1[8] = NULL;\n    param_1[2] = NULL;\n    param_1[1] = NULL;\n    param_1[9] = NULL;\n    param_1[4] = NULL;\n    param_1[3] = NULL;\n    param_1[5] = NULL;\n    param_1[7] = NULL;\n    param_1[6] = NULL;\n    return;\n}\n",
        "token_count": 125
    },
    "00405a27": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00405a27(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    uVar1 = fcn.0040f83a();\n    *(param_1 + 0x1c) = uVar1;\n    *(param_1 + 4) = 1;\n    *(param_1 + 0x14) = 1;\n    *(param_1 + 8) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x18) = 0;\n    return param_1;\n}\n",
        "token_count": 151
    },
    "004083a2": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004083a2(int32_t param_1)\n\n{\n    uint *puVar1;\n    \n    for (puVar1 = *(param_1 + 4); puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 8) = 0;\n    *(param_1 + 4) = 0;\n    fcn.00414409();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 142
    },
    "00408568": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408568(code *arg_8h)\n\n{\n    code **in_ECX;\n    \n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    in_ECX[2] = NULL;\n    in_ECX[1] = NULL;\n    in_ECX[5] = NULL;\n    *in_ECX = vtable.CList_class_IControlSiteFactory___class_IControlSiteFactory__.0;\n    in_ECX[6] = arg_8h;\n    return;\n}\n",
        "token_count": 117
    },
    "0040ca29": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.0040ca29(code **param_1)\n\n{\n    param_1[5] = NULL;\n    param_1[2] = NULL;\n    param_1[3] = NULL;\n    *param_1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n    param_1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n    param_1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n    fcn.004125ab();\n    return param_1;\n}\n",
        "token_count": 144
    },
    "00410430": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00410430(uint arg_8h)\n\n{\n    code *pcVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    extraout_ECX[1] = NULL;\n    extraout_ECX[2] = NULL;\n    extraout_ECX[3] = NULL;\n    *(unaff_EBP + -4) = 0;\n    iVar2 = *(unaff_EBP + 8);\n    *extraout_ECX = vtable.CPaintDC.0;\n    pcVar1 = *(iVar2 + 0x20);\n    extraout_ECX[4] = pcVar1;\n    arg_8h_00 = (*_sym.imp.USER32.dll_BeginPaint)(pcVar1, extraout_ECX + 5);\n    iVar2 = fcn.00410290(arg_8h_00);\n    if (iVar2 == 0) {\n        fcn.0040fcfb();\n    }\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 301
    },
    "00413bf1": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00413bf1(int32_t param_1)\n\n{\n    if (*(param_1 + 4) != 0) {\n        fcn.00403dd7(*(param_1 + 4));\n        *(param_1 + 4) = 0;\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    fcn.00414409();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 121
    },
    "00413db0": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00413db0(code *arg_8h)\n\n{\n    code **in_ECX;\n    \n    *in_ECX = vtable.CMapPtrToPtr.0;\n    if (arg_8h < 1) {\n        arg_8h = 0xa;\n    }\n    in_ECX[1] = NULL;\n    in_ECX[2] = 0x11;\n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    in_ECX[5] = NULL;\n    in_ECX[6] = arg_8h;\n    return;\n}\n",
        "token_count": 137
    },
    "0041586b": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041586b(uint arg_8h, uint arg_ch)\n\n{\n    uint *in_ECX;\n    \n    in_ECX[8] = arg_8h;\n    *in_ECX = 0;\n    in_ECX[1] = 0;\n    in_ECX[2] = 0;\n    in_ECX[3] = 0;\n    in_ECX[5] = 0;\n    in_ECX[6] = 0;\n    in_ECX[9] = arg_ch;\n    in_ECX[4] = 0;\n    return;\n}\n",
        "token_count": 133
    },
    "00415898": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00415898(int32_t param_1)\n\n{\n    code *pcVar1;\n    \n    pcVar1 = _sym.imp.ole32.dll_CoTaskMemFree;\n    (*_sym.imp.ole32.dll_CoTaskMemFree)(*(param_1 + 0x14));\n    *(param_1 + 0x14) = 0;\n    (*pcVar1)(*(param_1 + 0x18));\n    *(param_1 + 0x18) = 0;\n    fcn.00403dd7(*(param_1 + 8));\n    *(param_1 + 8) = 0;\n    fcn.00403dd7(*(param_1 + 0x10));\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0xc) = 0;\n    return;\n}\n",
        "token_count": 195
    },
    "0041699a": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041699a(code *arg_8h)\n\n{\n    code **in_ECX;\n    \n    *in_ECX = vtable.CDataSourceControl.0;\n    in_ECX[1] = arg_8h;\n    in_ECX[2] = NULL;\n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    in_ECX[5] = NULL;\n    fcn.0041ccba(10);\n    in_ECX[0xd] = NULL;\n    in_ECX[0xe] = NULL;\n    in_ECX[0xf] = NULL;\n    in_ECX[0x10] = NULL;\n    in_ECX[0x11] = NULL;\n    in_ECX[0x12] = NULL;\n    in_ECX[0x13] = NULL;\n    in_ECX[0x14] = NULL;\n    in_ECX[0x15] = NULL;\n    in_ECX[0x16] = NULL;\n    return;\n}\n",
        "token_count": 226
    },
    "00417039": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00417039(uint *arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, int32_t arg_28h, int32_t arg_2ch, uint arg_30h, uint arg_34h, uint arg_38h)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    \n    iVar1 = 0;\n    if (arg_8h == NULL) {\n        arg_8h = fcn.00401170(0x80004005);\n        iVar1 = extraout_ECX;\n    }\n    arg_8h[8] = arg_34h;\n    arg_8h[5] = arg_30h;\n    arg_8h[9] = arg_20h;\n    *arg_8h = arg_ch;\n    *(arg_8h + 0xc) = arg_10h;\n    *(arg_8h + 0x32) = arg_18h;\n    *(arg_8h + 0x33) = arg_1ch;\n    arg_8h[0xb] = iVar1;\n    arg_8h[1] = iVar1;\n    arg_8h[2] = iVar1;\n    arg_8h[3] = iVar1;\n    arg_8h[4] = iVar1;\n    arg_8h[6] = iVar1;\n    arg_8h[10] = arg_14h;\n    arg_8h[7] = iVar1;\n    if (arg_38h == iVar1) {\n        arg_8h[7] = 1;\n        arg_8h[1] = arg_24h;\n    }\n    if (arg_28h != iVar1) {\n        arg_8h[7] = arg_8h[7] | 2;\n        arg_8h[2] = arg_28h;\n    }\n    if (arg_2ch != iVar1) {\n        arg_8h[7] = arg_8h[7] | 4;\n        arg_8h[3] = arg_2ch;\n    }\n    return;\n}\n",
        "token_count": 503
    },
    "0041cbd2": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041cbd2(int32_t param_1)\n\n{\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 8) = 0;\n    *(param_1 + 4) = 0;\n    fcn.00414409();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 101
    },
    "0041ccba": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041ccba(code *arg_8h)\n\n{\n    code **in_ECX;\n    \n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    in_ECX[2] = NULL;\n    in_ECX[1] = NULL;\n    in_ECX[5] = NULL;\n    *in_ECX = vtable.CPtrList.0;\n    in_ECX[6] = arg_8h;\n    return;\n}\n",
        "token_count": 108
    },
    "00437a4f": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00437a4f(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    *(param_1 + 0x24) = 0;\n    *(param_1 + 4) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0x201;\n    *(param_1 + 0x14) = 6;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    fcn.004031e0(0, 0);\n    iVar1 = fcn.00403da8(4);\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.004366fb();\n    }\n    *(param_1 + 0x24) = uVar2;\n    return;\n}\n",
        "token_count": 239
    },
    "00438554": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint * __fastcall fcn.00438554(uint *param_1)\n\n{\n    int32_t iVar1;\n    \n    fcn.00438520();\n    *param_1 = 0x38;\n    param_1[2] = 0x400000;\n    param_1[1] = 0x400000;\n    param_1[3] = 0x900;\n    param_1[4] = 0x442968;\n    iVar1 = fcn.004384d5();\n    if (iVar1 < 0) {\n        *0x44dd00 = 1;\n    }\n    return param_1;\n}\n",
        "token_count": 142
    },
    "00402350": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00402350(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (0xf < *(param_1 + 0x18)) {\n        *(*(param_1 + 4) + param_2) = 0;\n        return;\n    }\n    *(param_1 + 4 + param_2) = 0;\n    return;\n}\n",
        "token_count": 104
    },
    "00402b80": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.00402b80(int32_t param_1, uint param_2)\n\n{\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 4) = 0;\n    fcn.00402800(param_2, 0, 0xffffffff);\n    return param_1;\n}\n",
        "token_count": 96
    },
    "00402fe0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.00402fe0(int32_t param_1, char *param_2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 4) = 0;\n    pcVar2 = param_2;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.004028e0(param_2, pcVar2 - (param_2 + 1));\n    return param_1;\n}\n",
        "token_count": 162
    },
    "00406078": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406078(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = *(arg_8h + 4);\n    if ((iVar2 == 0x200) || (iVar2 == 0xa0)) {\n        iVar2 = fcn.0040f282();\n        iVar3 = fcn.00405fc5(*(arg_8h + 0x14), *(arg_8h + 0x18));\n        if ((iVar3 == 0) || (*(arg_8h + 4) != *(iVar2 + 0x54))) {\n            *(iVar2 + 0x4c) = *(arg_8h + 0x14);\n            *(iVar2 + 0x50) = *(arg_8h + 0x18);\n            *(iVar2 + 0x54) = *(arg_8h + 4);\n            uVar1 = 1;\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    else if ((iVar2 == 0xf) || (iVar2 == 0x118)) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 292
    },
    "0040f69a": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040f69a(uint arg_8h)\n\n{\n    uchar uVar1;\n    uint *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint uVar5;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.00421e3e(0xc);\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    *extraout_ECX = vtable.AFX_MODULE_STATE.0;\n    extraout_ECX[7] = NULL;\n    extraout_ECX[8] = NULL;\n    extraout_ECX[9] = NULL;\n    extraout_ECX[10] = NULL;\n    fcn.00402630();\n    extraout_ECX[0x10] = NULL;\n    extraout_ECX[0x11] = NULL;\n    extraout_ECX[0x14] = 0xffffffff;\n    *(unaff_EBP + -4) = 0;\n    extraout_ECX[0x15] = NULL;\n    extraout_ECX[0x1a] = NULL;\n    extraout_ECX[0x1b] = NULL;\n    uVar1 = *(unaff_EBP + 8);\n    extraout_ECX[10] = 0x20;\n    extraout_ECX[8] = 0x14;\n    extraout_ECX[6] = NULL;\n    *(extraout_ECX + 5) = uVar1;\n    *(unaff_EBP + -4) = 2;\n    fcn.004014d0(0x1000);\n    *(unaff_EBP + -4) = 1;\n    extraout_ECX[0xc] = 0x1;\n    extraout_ECX[0x11] = 0x18;\n    pcVar3 = fcn.00403da8(0xc);\n    extraout_ECX[0x1e] = pcVar3;\n    iVar4 = fcn.00410cd3(0x188);\n    *(unaff_EBP + 8) = iVar4;\n    *(unaff_EBP + -4) = 4;\n    if (iVar4 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.0040f38c();\n    }\n    puVar2 = extraout_ECX[0x1e];\n    *(unaff_EBP + -4) = 1;\n    *puVar2 = uVar5;\n    iVar4 = fcn.00410cd3(100);\n    *(unaff_EBP + 8) = iVar4;\n    *(unaff_EBP + -4) = 5;\n    if (iVar4 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.0040f5d0();\n    }\n    pcVar3 = extraout_ECX[0x1e];\n    *(unaff_EBP + -4) = 1;\n    *(pcVar3 + 4) = uVar5;\n    iVar4 = fcn.00410cd3(0x14);\n    *(unaff_EBP + 8) = iVar4;\n    *(unaff_EBP + -4) = 6;\n    if (iVar4 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.0040f653();\n    }\n    *(extraout_ECX[0x1e] + 8) = uVar5;\n    extraout_ECX[0x1f] = 0x1;\n    extraout_ECX[0x20] = NULL;\n    extraout_ECX[0x21] = NULL;\n    extraout_ECX[0x22] = NULL;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 887
    },
    "00412826": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.00412826(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    code *pcVar1;\n    int32_t arg_ch_00;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    pcVar1 = *(unaff_EBP + 8);\n    *extraout_ECX = vtable.CHandleMap.0;\n    fcn.0041d8ca(*(pcVar1 + 4), 0x40);\n    *(unaff_EBP + -4) = 0;\n    fcn.00413db0(10);\n    *(unaff_EBP + -4) = 1;\n    fcn.00413db0(4);\n    arg_ch_00 = 0;\n    *(unaff_EBP + -4) = 2;\n    if (*(unaff_EBP + 0xc) != 0) goto code_r0x0041287b;\n    do {\n        arg_ch_00 = fcn.00404695();\ncode_r0x0041287b:\n    } while (*(unaff_EBP + 0x10) == arg_ch_00);\n    fcn.00413b93(7, arg_ch_00);\n    extraout_ECX[5] = *(unaff_EBP + 0xc);\n    extraout_ECX[6] = *(unaff_EBP + 0x10);\n    extraout_ECX[0x16] = *(unaff_EBP + 0x14);\n    extraout_ECX[0x17] = *(unaff_EBP + 0x18);\n    extraout_ECX[0x15] = pcVar1;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 471
    },
    "00416b1c": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00416b1c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0;\n    *(in_ECX + 1) = arg_10h;\n    in_ECX[3] = 0;\n    in_ECX[5] = 0;\n    in_ECX[2] = arg_ch;\n    in_ECX[6] = arg_8h;\n    return;\n}\n",
        "token_count": 111
    },
    "0041c795": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041c795(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    code *extraout_ECX_00;\n    code *pcVar2;\n    code *extraout_EDX;\n    code *pcVar3;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.004130cc();\n    pcVar3 = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    pcVar2 = *(unaff_EBP + 0xc);\n    *extraout_ECX = vtable.CMemFile.0;\n    if ((pcVar3 == NULL) && (pcVar2 != NULL)) {\n        fcn.00404695();\n        pcVar2 = extraout_ECX_00;\n        pcVar3 = extraout_EDX;\n    }\n    pcVar1 = *(unaff_EBP + 0x10);\n    extraout_ECX[5] = NULL;\n    extraout_ECX[4] = pcVar1;\n    extraout_ECX[9] = NULL;\n    extraout_ECX[7] = ~-(pcVar1 != NULL) & pcVar2;\n    extraout_ECX[6] = pcVar2;\n    extraout_ECX[8] = pcVar3;\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 357
    },
    "0041ca00": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041ca00(int32_t *param_1)\n\n{\n    param_1[4] = 0;\n    param_1[5] = 0;\n    param_1[6] = 0;\n    param_1[7] = 0;\n    if ((param_1[8] != 0) && (param_1[9] != 0)) {\n        (**(*param_1 + 0x60))(param_1[8]);\n    }\n    param_1[8] = 0;\n    return;\n}\n",
        "token_count": 125
    },
    "0041cb15": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid fcn.0041cb15(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CMemFile.0;\n    *(unaff_EBP + -4) = 0;\n    if (extraout_ECX[8] != NULL) {\n        fcn.0041ca00();\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    extraout_ECX[4] = NULL;\n    extraout_ECX[5] = NULL;\n    extraout_ECX[6] = NULL;\n    extraout_ECX[7] = NULL;\n    fcn.004131d4();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 209
    },
    "0041e312": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041e312(code **param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t **ppiVar3;\n    \n    *param_1 = vtable.COleDispatchException.0;\n    fcn.00401240();\n    fcn.00401240();\n    ppiVar3 = param_1[3] + -0x10;\n    piVar1 = param_1[3] + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar3 + 4))(ppiVar3);\n    }\n    return;\n}\n",
        "token_count": 173
    },
    "00411a2a": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411a2a(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t arg_8h_00;\n    uint *in_ECX;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*in_ECX);\n    arg_8h_00 = *(in_ECX + 2);\n    fcn.00411719(arg_8h_00);\n    fcn.00411719(arg_8h_00);\n    fcn.004118fe(*in_ECX, uVar1 & 0xffff);\n    return;\n}\n",
        "token_count": 135
    },
    "0041da3b": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041da3b(uint16_t *arg_8h, uint arg_ch)\n\n{\n    uint *in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*arg_8h < 0x76c) {\n        *in_ECX = 0;\n        in_ECX[1] = 0;\n    }\n    else {\n        fcn.0041d9a6(*arg_8h, arg_8h[1], arg_8h[3], arg_8h[4], arg_8h[5], arg_8h[6], arg_ch);\n        *in_ECX = in_ECX;\n        in_ECX[1] = in_ECX;\n    }\n    return;\n}\n",
        "token_count": 170
    },
    "00412231": {
        "rules": [
            "create or open registry key"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00412231(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = 0;\n    var_8h = 0;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0x80000001, \"software\", 0, 0x2001f, &var_4h);\n    pcVar1 = _sym.imp.ADVAPI32.dll_RegCreateKeyExA;\n    if (iVar2 == 0) {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                          (var_4h, *(param_1 + 0x54), 0, 0, 0, 0x2001f, 0, &var_8h, &var_10h);\n        if (iVar2 == 0) {\n            (*pcVar1)(var_8h, *(param_1 + 0x68), 0, 0, 0, 0x2001f, 0, &var_ch, &var_10h);\n        }\n    }\n    pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n    if (var_4h != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n    }\n    if (var_8h != 0) {\n        (*pcVar1)(var_8h);\n    }\n    return var_ch;\n}\n",
        "token_count": 380
    },
    "004122c4": {
        "rules": [
            "create or open registry key"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004122c4(uint lpSubKey)\n\n{\n    int32_t iVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    iVar1 = fcn.00412231();\n    if (iVar1 == 0) {\n        var_4h = 0;\n    }\n    else {\n        (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)(iVar1, lpSubKey, 0, 0, 0, 0x2001f, 0, &var_4h, &var_8h);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 164
    },
    "004355f1": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.004355f1(void)\n\n{\n    *0x44d744 = (*_sym.imp.KERNEL32.dll_CreateFileA)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 61
    },
    "004012c0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * fcn.004012c0(char *param_1)\n\n{\n    char *pcVar1;\n    char cVar2;\n    \n    if (param_1 == NULL) {\n        return param_1;\n    }\n    pcVar1 = param_1 + 1;\n    do {\n        cVar2 = *param_1;\n        param_1 = param_1 + 1;\n    } while (cVar2 != '\\0');\n    return param_1 + -pcVar1;\n}\n",
        "token_count": 109
    },
    "00401800": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00401800(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if (param_1 == NULL) {\n        fcn.00401700(0, 0);\n        return;\n    }\n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.00401700(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 129
    },
    "00401840": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00401840(uint param_1, char *param_2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if (param_2 == NULL) {\n        fcn.00401700(0, 0);\n        return param_1;\n    }\n    pcVar2 = param_2;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.00401700(param_2, pcVar2 - (param_2 + 1));\n    return param_1;\n}\n",
        "token_count": 143
    },
    "00402bb0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00402bb0(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.004028e0(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 103
    },
    "00403da8": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00403da8(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.00421b7b(arg_8h);\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*0x44b1d4 == NULL) break;\n        iVar1 = (**0x44b1d4)(arg_8h);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 126
    },
    "004040c5": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004040c5(int32_t arg_8h)\n\n{\n    uint uVar1;\n    \n    if (arg_8h == 0) {\n        return;\n    }\n    if (arg_8h == 0xc) {\n        uVar1 = 0x8007000e;\n    }\n    else {\n        if (arg_8h == 0x16) goto code_r0x004040ef;\n        if (arg_8h == 0x22) goto code_r0x004040ef;\n        if (arg_8h == 0x50) {\n            return;\n        }\n        uVar1 = 0x80004005;\n    }\n    do {\n        fcn.00401170(uVar1);\ncode_r0x004040ef:\n        uVar1 = 0x80070057;\n    } while( true );\n}\n",
        "token_count": 193
    },
    "00404988": {
        "rules": [
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404988(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *in_ECX;\n    int32_t iVar3;\n    uint var_4h;\n    \n    *in_ECX = arg_8h;\n    in_ECX[1] = 0;\n    if (*0x44ddfc == '\\0') {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        if (iVar2 != 0) goto code_r0x004049c2;\ncode_r0x004049bd:\n        do {\n            fcn.00404695();\ncode_r0x004049c2:\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n            iVar3 = iVar2;\n            *0x44ddec = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"CreateActCtxA\");\n            *0x44ddf0 = (*pcVar1)(iVar2, \"ReleaseActCtx\");\n            *0x44ddf4 = (*pcVar1)(iVar2, \"ActivateActCtx\");\n            *0x44ddf8 = (*pcVar1)(iVar2, \"DeactivateActCtx\");\n            iVar2 = iVar3;\n            if (*0x44ddec == 0) {\n                if ((*0x44ddf0 != 0) || (*0x44ddf4 != 0)) goto code_r0x004049bd;\n            }\n            else if ((*0x44ddf0 == 0) || (*0x44ddf4 == 0)) goto code_r0x004049bd;\n        } while (*0x44ddf8 != 0);\n        *0x44ddfc = '\\x01';\n    }\n    return;\n}\n",
        "token_count": 387
    },
    "0040852d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040852d(uint arg_8h, uint arg_ch)\n\n{\n    int32_t **ppiVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    \n    puVar3 = *(in_ECX + 8);\n    iVar2 = 0;\n    do {\n        if (puVar3 == NULL) {\n            return iVar2;\n        }\n        ppiVar1 = puVar3 + 2;\n        puVar3 = *puVar3;\n    } while ((*ppiVar1 == NULL) || (iVar2 = (**(**ppiVar1 + 4))(arg_8h, arg_ch),  iVar2 == 0));\n    return iVar2;\n}\n",
        "token_count": 164
    },
    "00408669": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00408669(uint arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint *puVar2;\n    \n    if (arg_ch == NULL) {\n        puVar2 = *(in_ECX + 4);\n    }\n    else {\n        puVar2 = *arg_ch;\n    }\n    while( true ) {\n        if (puVar2 == NULL) {\n            return NULL;\n        }\n        iVar1 = fcn.0040837d(puVar2 + 2, &arg_8h);\n        if (iVar1 != 0) break;\n        puVar2 = *puVar2;\n    }\n    return puVar2;\n}\n",
        "token_count": 161
    },
    "0040a21b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a21b(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    int32_t *extraout_ECX;\n    int32_t unaff_ESI;\n    \n    iVar2 = 0x7fffffff;\n    iVar1 = unaff_ESI;\n    if (arg_8h == 0x7fffffff) goto code_r0x0040a23e;\n    if (*in_ECX == 0x7fffffff) goto code_r0x0040a23c;\n    if (*in_ECX == arg_8h) goto code_r0x0040a23c;\n    do {\n        iVar2 = fcn.00404695();\n        in_ECX = extraout_ECX;\ncode_r0x0040a23c:\n        *in_ECX = arg_8h;\n        iVar1 = unaff_ESI;\ncode_r0x0040a23e:\n        arg_8h = iVar1;\n        unaff_ESI = arg_8h;\n    } while (*in_ECX == iVar2);\n    fcn.00412786(*in_ECX);\n    return;\n}\n",
        "token_count": 266
    },
    "0040a3df": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040a3df(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t nPos;\n    \n    if (arg_8h == 0) {\n        fcn.00404695();\n    }\n    iVar1 = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(arg_8h + 4));\n    nPos = 0;\n    if (0 < iVar1) {\n        do {\n            iVar2 = fcn.0040a1d5(nPos);\n            if (iVar2 == 0) {\n                iVar2 = fcn.0040a1c0(nPos);\n                if (iVar2 == arg_ch) goto code_r0x0040a441;\n            }\n            else {\n                if (*(iVar2 + 4) == arg_ch) {\ncode_r0x0040a441:\n                    iVar1 = fcn.0040f983(*(arg_8h + 4));\n                    return iVar1;\n                }\n                iVar2 = fcn.0040a3df(iVar2, arg_ch);\n                if (iVar2 != 0) {\n                    return iVar2;\n                }\n            }\n            nPos = nPos + 1;\n        } while (nPos < iVar1);\n    }\n    return 0;\n}\n",
        "token_count": 298
    },
    "0040b8af": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040b8af(uint hDlg, uint nIDDlgItem, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = (*_sym.imp.USER32.dll_GetDlgItem)(hDlg, nIDDlgItem);\n    pcVar1 = _sym.imp.USER32.dll_GetTopWindow;\n    if (iVar2 != 0) {\n        iVar3 = (*_sym.imp.USER32.dll_GetTopWindow)(iVar2);\n        if ((iVar3 != 0) && (iVar3 = fcn.0040b8af(iVar2, nIDDlgItem, arg_10h),  iVar3 != 0)) {\n            return;\n        }\n        if (arg_10h == 0) {\n            fcn.0040b5a9(iVar2);\n            return;\n        }\n        iVar2 = fcn.0040b5d5();\n        if (iVar2 != 0) {\n            return;\n        }\n    }\n    iVar2 = (*pcVar1)(hDlg);\n    while( true ) {\n        if (iVar2 == 0) {\n            return;\n        }\n        iVar3 = fcn.0040b8af(iVar2, nIDDlgItem, arg_10h);\n        if (iVar3 != 0) break;\n        iVar2 = (*_sym.imp.USER32.dll_GetWindow)(iVar2, 2);\n    }\n    return;\n}\n",
        "token_count": 325
    },
    "0040b928": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040b928(int32_t arg_8h, int32_t *arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar3 = *arg_ch;\n    while( true ) {\n        if (iVar3 == 0) {\n            return 0;\n        }\n        piVar1 = fcn.0040b5d5(iVar3);\n        if ((piVar1 != NULL) && (iVar2 = (**(*piVar1 + 0x108))(arg_ch),  iVar2 != 0)) break;\n        if (iVar3 == arg_8h) {\n            return 0;\n        }\n        iVar3 = (*_sym.imp.USER32.dll_GetParent)(iVar3);\n    }\n    return 1;\n}\n",
        "token_count": 181
    },
    "0040ba9e": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.0040ba9e(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_1ch;\n    \n    pcVar1 = _sym.imp.USER32.dll_PeekMessageA;\n    while( true ) {\n        iVar2 = (*pcVar1)(&var_1ch, 0, 0x121, 0x121, 1);\n        if (iVar2 == 0) break;\n        (*_sym.imp.USER32.dll_DispatchMessageA)(&var_1ch);\n    }\n    fcn.0040b503();\n    return;\n}\n",
        "token_count": 134
    },
    "0040beb3": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.0040beb3(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint arg_8h;\n    int32_t *piVar3;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetParent;\n    if ((param_1 != 0) && (iVar2 = *(param_1 + 0x20),  iVar2 != 0)) {\n        while( true ) {\n            arg_8h = (*pcVar1)(iVar2);\n            piVar3 = fcn.0040b5a9(arg_8h);\n            if ((piVar3 == NULL) || (iVar2 = (**(*piVar3 + 0x128))(),  iVar2 != 0)) break;\n            iVar2 = piVar3[8];\n        }\n        return piVar3;\n    }\n    return NULL;\n}\n",
        "token_count": 199
    },
    "0040c91e": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040c91e(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t arg_8h;\n    \n    if ((param_1 != 0) && (iVar1 = *(param_1 + 0x20),  *(param_1 + 0x20) != 0)) {\n        do {\n            arg_8h = iVar1;\n            iVar1 = fcn.0040c8d4(arg_8h);\n        } while (iVar1 != 0);\n        uVar2 = fcn.0040b5a9(arg_8h);\n        return uVar2;\n    }\n    return 0;\n}\n",
        "token_count": 157
    },
    "00410745": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00410745(uint *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint *extraout_ECX;\n    uint unaff_EBP;\n    \n    if (param_1 != NULL) goto code_r0x00410753;\n    do {\n        fcn.00404695();\n        param_1 = extraout_ECX;\ncode_r0x00410753:\n        iVar1 = (***param_1)();\n    } while (iVar1 == 0);\n    if (iVar1 != 0) goto code_r0x0041072a;\n    do {\n        iVar1 = fcn.00404695(unaff_EBP);\ncode_r0x0041072a:\n    } while (param_2 == 0);\n    do {\n        if (iVar1 == param_2) {\n            return 1;\n        }\n        iVar1 = *(iVar1 + 0x10);\n    } while (iVar1 != 0);\n    return 0;\n}\n",
        "token_count": 222
    },
    "00410e23": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00410e23(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    int32_t *in_ECX;\n    int32_t arg_8h_00;\n    uint var_4h;\n    \n    arg_8h_00 = *in_ECX;\n    if (arg_8h_00 == 0) {\n        var_4h = 0;\n    }\n    else {\n        if (arg_8h_00 == arg_8h) {\n            piVar1 = fcn.00410deb(arg_8h);\n            *in_ECX = *piVar1;\n        }\n        else {\n            do {\n                piVar1 = fcn.00410deb(arg_8h_00);\n                if (*piVar1 == arg_8h) break;\n                piVar1 = fcn.00410deb(arg_8h_00);\n                arg_8h_00 = *piVar1;\n            } while (arg_8h_00 != 0);\n            if (arg_8h_00 == 0) {\n                return 0;\n            }\n            puVar2 = fcn.00410deb(arg_8h);\n            puVar3 = fcn.00410deb(arg_8h_00);\n            *puVar3 = *puVar2;\n        }\n        var_4h = 1;\n    }\n    return var_4h;\n}\n",
        "token_count": 327
    },
    "00410feb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410feb(int32_t arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint *puVar2;\n    int32_t in_ECX;\n    int32_t iVar3;\n    uint var_4h;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(in_ECX + 0x1c);\n    if ((0 < arg_8h) && (arg_8h < *(in_ECX + 0xc))) {\n        for (iVar3 = *(in_ECX + 0x14); iVar3 != 0; iVar3 = *(iVar3 + 4)) {\n            if (arg_8h < *(iVar3 + 8)) {\n                puVar2 = *(*(iVar3 + 0xc) + arg_8h * 4);\n                if (puVar2 != NULL) {\n                    (***puVar2)(1);\n                }\n                *(*(iVar3 + 0xc) + arg_8h * 4) = 0;\n            }\n        }\n        puVar1 = *(in_ECX + 0x10) + arg_8h * 8;\n        *puVar1 = *puVar1 & 0xfffffffe;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(in_ECX + 0x1c);\n    return;\n}\n",
        "token_count": 296
    },
    "00412525": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00412525(int32_t hWnd, uint lpPoint, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    uint lpRect;\n    \n    (*_sym.imp.USER32.dll_ClientToScreen)(hWnd, &lpPoint);\n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    uVar4 = 5;\n    do {\n        hWnd = (*pcVar1)(hWnd, uVar4);\n        if (hWnd == 0) {\n            return 0;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(hWnd);\n        if ((iVar2 != 0xffff) &&\n           (uVar3 = (*_sym.imp.USER32.dll_GetWindowLongA)(hWnd, 0xfffffff0),  (uVar3 & 0x10000000) != 0)) {\n            (*_sym.imp.USER32.dll_GetWindowRect)(hWnd, &lpRect);\n            iVar2 = (*_sym.imp.USER32.dll_PtInRect)(&lpRect, lpPoint, arg_10h);\n            if (iVar2 != 0) {\n                return hWnd;\n            }\n        }\n        uVar4 = 2;\n    } while( true );\n}\n",
        "token_count": 293
    },
    "0041263d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041263d(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    for (; iVar2 != 0; iVar2 = fcn.0040c8d4(iVar2)) {\n        iVar3 = (*pcVar1)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    for (iVar2 = (*_sym.imp.USER32.dll_GetFocus)(); iVar2 != 0; iVar2 = fcn.0040c8d4(iVar2)) {\n        iVar3 = (*pcVar1)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    iVar2 = fcn.0040c91e();\n    if (iVar2 == 0) {\n        iVar2 = fcn.00404695();\n    }\n    iVar2 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x20));\n    while( true ) {\n        if (iVar2 == 0) {\n            (*pcVar1)(*(param_1 + 0x20), 0x111, 0xe147, 0);\n            return;\n        }\n        iVar3 = (*pcVar1)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) break;\n        iVar2 = fcn.0040c8d4(iVar2);\n    }\n    return;\n}\n",
        "token_count": 398
    },
    "00412d4e": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00412d4e(uint param_1, int32_t param_2)\n\n{\n    char *in_EAX;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *unaff_EDI;\n    \n    iVar1 = 0;\n    iVar2 = param_2;\n    if (param_2 != 0) {\n        do {\n            if (*in_EAX == '\\0') break;\n            in_EAX = in_EAX + 1;\n            iVar2 = iVar2 + -1;\n        } while (iVar2 != 0);\n        if (iVar2 != 0) goto code_r0x00412d6c;\n    }\n    iVar1 = -0x7ff8ffa9;\ncode_r0x00412d6c:\n    if (unaff_EDI != NULL) {\n        if (-1 < iVar1) {\n            *unaff_EDI = param_2 - iVar2;\n            return;\n        }\n        *unaff_EDI = 0;\n    }\n    return;\n}\n",
        "token_count": 230
    },
    "0041375f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041375f(int16_t *arg_8h)\n\n{\n    int16_t iVar1;\n    \n    do {\n        iVar1 = *arg_8h;\n        arg_8h = arg_8h + 1;\n    } while (iVar1 != 0);\n    return;\n}\n",
        "token_count": 70
    },
    "00413c3c": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00413c3c(uint32_t arg_8h, uint32_t *arg_ch, uint32_t *arg_10h)\n\n{\n    uint *puVar1;\n    int32_t in_ECX;\n    uint32_t uVar2;\n    \n    *arg_10h = arg_8h >> 4;\n    uVar2 = (arg_8h >> 4) % *(in_ECX + 8);\n    *arg_ch = uVar2;\n    if (*(in_ECX + 4) != 0) {\n        for (puVar1 = *(*(in_ECX + 4) + uVar2 * 4); puVar1 != NULL; puVar1 = *puVar1) {\n            if (puVar1[1] == arg_8h) {\n                return puVar1;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 197
    },
    "00413c77": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00413c77(uint32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    int32_t extraout_ECX;\n    uint *puVar1;\n    \n    if (in_ECX == 0) {\n        fcn.00404695();\n        in_ECX = extraout_ECX;\n    }\n    if (*(in_ECX + 4) != 0) {\n        for (puVar1 = *(*(in_ECX + 4) + ((arg_8h >> 4) % *(in_ECX + 8)) * 4); puVar1 != NULL; puVar1 = *puVar1) {\n            if (puVar1[1] == arg_8h) {\n                return puVar1[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 182
    },
    "00413ce5": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00413ce5(uint32_t arg_8h)\n\n{\n    uint *puVar1;\n    uint *arg_8h_00;\n    int32_t in_ECX;\n    uint *puVar2;\n    \n    if (*(in_ECX + 4) == 0) {\n        arg_8h_00 = NULL;\n    }\n    else {\n        puVar2 = *(in_ECX + 4) + ((arg_8h >> 4) % *(in_ECX + 8)) * 4;\n        puVar1 = *puVar2;\n        while (arg_8h_00 = puVar1,  arg_8h_00 != NULL) {\n            if (arg_8h_00[1] == arg_8h) {\n                *puVar2 = *arg_8h_00;\n                fcn.00413c1e(arg_8h_00);\n                return 0x1;\n            }\n            puVar2 = arg_8h_00;\n            puVar1 = *arg_8h_00;\n        }\n    }\n    return arg_8h_00;\n}\n",
        "token_count": 252
    },
    "00414409": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00414409(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    \n    if (param_1 != NULL) {\n        do {\n            piVar1 = *param_1;\n            fcn.00403dd7(param_1);\n            param_1 = piVar1;\n        } while (piVar1 != NULL);\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "00414680": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00414680(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        if (arg_ch == 0) {\n            return 0;\n        }\n        iVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg_ch);\n        if (iVar1 == arg_8h) break;\n        arg_ch = (*_sym.imp.USER32.dll_GetWindow)(arg_ch, 2);\n    }\n    return arg_ch;\n}\n",
        "token_count": 118
    },
    "00414757": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00414757(void)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    code *pcVar2;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CEnumUnknown.0;\n    pcVar2 = NULL;\n    *(unaff_EBP + -4) = 0;\n    if ((extraout_ECX[9] == NULL) && (pcVar1 = extraout_ECX[10],  extraout_ECX[0xc] != NULL)) {\n        do {\n            (**(**(pcVar1 + pcVar2 * 4) + 8))(*(pcVar1 + pcVar2 * 4));\n            pcVar2 = pcVar2 + 1;\n        } while (pcVar2 < extraout_ECX[0xc]);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0041ebb7();\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 279
    },
    "00416b90": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00416b90(int32_t arg_8h, uint *arg_ch, uint *arg_10h)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    \n    if (arg_10h != NULL) {\n        *arg_10h = 0;\n    }\n    iVar2 = *(in_ECX + 0x94);\n    while( true ) {\n        if (iVar2 == 0) {\n            return 0;\n        }\n        if (*(iVar2 + 8) == arg_8h) break;\n        iVar2 = *(iVar2 + 0x18);\n    }\n    uVar1 = fcn.00416b57();\n    *arg_ch = uVar1;\n    return 0;\n}\n",
        "token_count": 174
    },
    "004188de": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004188de(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t arg_8h;\n    int32_t var_4h;\n    \n    uVar1 = *(*(param_1 + 8) + 4);\n    arg_8h = 0;\n    var_4h = 0;\n    if (uVar1 != 0) {\n        do {\n            cVar2 = fcn.0041578a(arg_8h);\n            if ((cVar2 != '\\0') && (var_4h = fcn.00416c76(arg_8h),  var_4h < 0)) {\n                return var_4h;\n            }\n            arg_8h = arg_8h + 1;\n        } while (arg_8h < uVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 205
    },
    "00418b7d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00418b7d(int32_t *arg_8h)\n\n{\n    code **ppcVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *in_ECX;\n    uint32_t uVar4;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\n    if (arg_8h == NULL) {\ncode_r0x00418b90:\n        iVar3 = -0x7fffbffb;\n    }\n    else {\n        if (in_ECX[1] == 0) {\n            return 0;\n        }\n        ppcVar1 = *arg_8h;\n        arg_8h = NULL;\n        iVar3 = (**ppcVar1)(puVar2, 0x43ee24, &arg_8h);\n        if (-1 < iVar3) {\n            if (*in_ECX == 0) {\n                if (arg_8h != NULL) {\n                    (**(*arg_8h + 8))(arg_8h);\n                }\n                goto code_r0x00418b90;\n            }\n            uVar4 = 0;\n            if (in_ECX[1] != 0) {\n                do {\n                    (**(*arg_8h + 0x18))(arg_8h, *(*in_ECX + uVar4 * 8), 0);\n                    uVar4 = uVar4 + 1;\n                } while (uVar4 < in_ECX[1]);\n            }\n        }\n        in_ECX[1] = 0;\n        fcn.00403dd7(*in_ECX);\n        *in_ECX = 0;\n        if (arg_8h != NULL) {\n            (**(*arg_8h + 8))(arg_8h);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 406
    },
    "00419713": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00419713(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t arg_8h;\n    \n    uVar1 = *(*(param_1 + 8) + 4);\n    iVar2 = 0;\n    arg_8h = 0;\n    if (uVar1 != 0) {\n        do {\n            iVar2 = fcn.00419329(arg_8h);\n            if (iVar2 < 0) {\n                return iVar2;\n            }\n            arg_8h = arg_8h + 1;\n        } while (arg_8h < uVar1);\n    }\n    return iVar2;\n}\n",
        "token_count": 160
    },
    "0041bc53": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041bc53(int32_t arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetWindowLongA;\n    iVar3 = 0;\n    iVar4 = iVar3;\n    if (arg_ch != 0) {\n        do {\n            iVar4 = arg_ch;\n            uVar2 = (*pcVar1)(*(iVar4 + 0x20), 0xfffffff0);\n            if ((uVar2 & 0xc0000000) != 0x40000000) {\n                return iVar3;\n            }\n            if (iVar4 == arg_8h) {\n                return iVar3;\n            }\n            arg_8h_00 = (*_sym.imp.USER32.dll_GetParent)(*(iVar4 + 0x20));\n            arg_ch = fcn.0040b5a9(arg_8h_00);\n            uVar2 = (*pcVar1)(*(arg_ch + 0x20), 0xffffffec);\n            iVar3 = iVar4;\n        } while ((uVar2 & 0x10000) == 0);\n    }\n    return iVar4;\n}\n",
        "token_count": 295
    },
    "0041bd71": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041bd71(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    \n    if (arg_8h != 0) {\n        piVar4 = NULL;\n        iVar3 = arg_8h;\n        do {\n            iVar1 = *(iVar3 + 0x4c);\n            if ((iVar1 != 0) || (piVar4 = *(iVar3 + 0x50),  piVar4 != NULL)) break;\n            uVar2 = (*_sym.imp.USER32.dll_GetParent)(*(iVar3 + 0x20));\n            iVar3 = fcn.0040b5a9(uVar2);\n        } while (iVar3 != 0);\n        if ((iVar3 != 0) && (iVar1 == 0)) {\n            (**(*piVar4 + 0xb0))();\n            uVar2 = (*_sym.imp.USER32.dll_GetFocus)();\n            iVar3 = fcn.0040b5a9(uVar2);\n            if ((iVar3 != arg_8h) && (iVar3 = (*_sym.imp.USER32.dll_IsWindow)(*(arg_8h + 0x20)),  iVar3 != 0)) {\n                if (*(arg_8h + 0x50) != 0) {\n    // WARNING: Could not recover jumptable at 0x0040e59f. Too many branches\n    // WARNING: Treating indirect jump as call\n                    (**(**(arg_8h + 0x50) + 0xb0))();\n                    return;\n                }\n                uVar2 = (*_sym.imp.USER32.dll_SetFocus)(*(arg_8h + 0x20));\n                fcn.0040b5a9(uVar2);\n                return;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 419
    },
    "0041bde4": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041bde4(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    \n    if (((arg_8h != 0) && (iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg_8h + 0x20)),  iVar2 != 0)) &&\n       (arg_8h != arg_ch)) {\n        do {\n            piVar1 = *(arg_8h + 0x4c);\n            if (piVar1 != NULL) {\n                iVar2 = piVar1[0x1a];\n                iVar3 = 0;\n                if (((iVar2 != 0) && (*(iVar2 + 0x74) == 0)) && (iVar3 = fcn.0040b5a9(*(iVar2 + 0x24)),  iVar3 == 0)) {\n                    return;\n                }\n                if ((arg_ch != 0) && (iVar3 != 0)) {\n                    if (arg_ch == iVar3) {\n                        return;\n                    }\n                    iVar2 = fcn.0041bc03(arg_ch);\n                    if (iVar2 != 0) {\n                        return;\n                    }\n                }\n                (**(*piVar1 + 0x60))(0);\n                return;\n            }\n            arg_8h_00 = (*_sym.imp.USER32.dll_GetParent)(*(arg_8h + 0x20));\n            arg_8h = fcn.0040b5a9(arg_8h_00);\n        } while (arg_8h != 0);\n    }\n    return;\n}\n",
        "token_count": 377
    },
    "0041be63": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041be63(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar1 = fcn.0040e3bb(arg_ch);\n    if (iVar1 == 0) {\n        iVar2 = fcn.0041bcac(arg_8h, 0, 1);\n        iVar1 = iVar2;\n        if (iVar2 == arg_8h) {\n            iVar1 = 0;\n        }\n        else {\n            do {\n                iVar3 = fcn.0040e4c0();\n                if (iVar3 == arg_ch) {\n                    return iVar1;\n                }\n                iVar1 = fcn.0041bcac(arg_8h, iVar1, 1);\n            } while ((iVar1 != 0) && (iVar1 != iVar2));\n            iVar1 = 0;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 219
    },
    "0041bf0c": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041bf0c(uint arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    \n    if ((arg_ch == 0) ||\n       (uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg_ch + 0x20), 0xffffffec),  (uVar1 & 0x10000) != 0)) {\n        iVar2 = fcn.0041bcac(arg_8h, 0, 3);\n    }\n    else {\n        iVar2 = fcn.0041bc53(0x41bf35, arg_ch);\n    }\n    arg_8h_00 = iVar2;\n    if (iVar2 != 0) {\n        do {\n            fcn.0041bebd(arg_8h_00, 0);\n            arg_8h_00 = fcn.0041bcac(arg_8h, arg_8h_00, 0);\n            if (arg_8h_00 == 0) {\n                return;\n            }\n        } while (arg_8h_00 != iVar2);\n    }\n    return;\n}\n",
        "token_count": 272
    },
    "0041cc1b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0041cc1b(int32_t param_1)\n\n{\n    int32_t *arg_8h;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t extraout_ECX;\n    \n    if (param_1 != 0) goto code_r0x0041cc24;\n    do {\n        fcn.00404695();\n        param_1 = extraout_ECX;\ncode_r0x0041cc24:\n        arg_8h = *(param_1 + 4);\n    } while (arg_8h == NULL);\n    iVar1 = *arg_8h;\n    iVar2 = arg_8h[2];\n    *(param_1 + 4) = iVar1;\n    if (iVar1 == 0) {\n        *(param_1 + 8) = 0;\n    }\n    else {\n        *(iVar1 + 4) = 0;\n    }\n    fcn.0041cbf4(arg_8h);\n    return iVar2;\n}\n",
        "token_count": 227
    },
    "0041cc91": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041cc91(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t in_ECX;\n    \n    if (arg_ch != NULL) goto code_r0x0041ccaa;\n    for (arg_ch = *(in_ECX + 4); (arg_ch != NULL && (arg_ch[2] != arg_8h)); arg_ch = *arg_ch) {\ncode_r0x0041ccaa:\n    }\n    return;\n}\n",
        "token_count": 107
    },
    "0041da98": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041da98(uint lpFileTime, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint *in_ECX;\n    uint lpSystemTime;\n    uint lpLocalFileTime;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(lpFileTime, &lpLocalFileTime);\n    if (iVar1 != 0) goto code_r0x0041dac5;\n    do {\n        *in_ECX = 0;\n        in_ECX[1] = 0;\n        lpFileTime = 0x80070057;\n        fcn.00401170();\ncode_r0x0041dac5:\n        iVar1 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(&lpLocalFileTime, &lpSystemTime, lpFileTime);\n    } while (iVar1 == 0);\n    fcn.0041da3b(&lpSystemTime, arg_ch);\n    *in_ECX = var_8h;\n    in_ECX[1] = var_4h;\n    return;\n}\n",
        "token_count": 250
    },
    "0041fabc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.0041fabc(uint arg_8h)\n\n{\n    uint arg_ch;\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00421e0b(0xc);\n    if ((~*(extraout_ECX + 0x18) & 1) == 0) {\n        if (*(extraout_ECX + 0x38) != 0) goto code_r0x0041fbaa;\n        iVar1 = fcn.00403da8(0x14);\n        *(unaff_EBP + -0x18) = iVar1;\n        *(unaff_EBP + -4) = 1;\n        if (iVar1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = fcn.00420773();\n        }\n        arg_ch = *(extraout_ECX + 0x40);\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(extraout_ECX + 0x38) = uVar2;\n        fcn.0042079a(1, arg_ch);\n        iVar1 = *(extraout_ECX + 0x38);\n        if (0 < *(iVar1 + 8)) goto code_r0x0041fb83;\n        do {\n            iVar1 = fcn.00404695();\ncode_r0x0041fb83:\n            **(iVar1 + 4) = 0;\n            *(extraout_ECX + 0x34) = 1;\n            *(unaff_EBP + -0x10) = 0;\n            fcn.0041f9e8(unaff_EBP + -0x10);\n            *(unaff_EBP + -0x18) = 0;\n            fcn.0041f912(0, unaff_EBP + -0x18, 1);\ncode_r0x0041fbaa:\n            if (*(unaff_EBP + 8) == 0) goto code_r0x0041fbf3;\n            fcn.0041f7ac();\n            fcn.004208c0(*(extraout_ECX + 0x34), *(unaff_EBP + 8), 1);\n            *(unaff_EBP + -0x14) = 0;\n            fcn.00413cbc(1, unaff_EBP + -0x14);\n        } while (*(unaff_EBP + -0x14) == 0);\n        uVar2 = *(extraout_ECX + 0x34);\n        *(unaff_EBP + 8) = 2;\n        fcn.0041f912(uVar2, unaff_EBP + 8, 1);\n    }\n    else {\n        if (*(extraout_ECX + 0x38) == 0) {\n            iVar1 = fcn.00403da8(0x1c);\n            *(unaff_EBP + -0x18) = iVar1;\n            *(unaff_EBP + -4) = 0;\n            if (iVar1 == 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = fcn.00413db0(*(extraout_ECX + 0x40));\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            *(extraout_ECX + 0x38) = uVar2;\n            fcn.00413b93(*(extraout_ECX + 0x44), 1);\n            puVar3 = fcn.00413e3e(0);\n            *puVar3 = 0;\n            *(extraout_ECX + 0x34) = 1;\n        }\n        if (*(unaff_EBP + 8) == 0) goto code_r0x0041fbf3;\n        fcn.0041f7ac();\n        puVar3 = fcn.00413e3e(*(unaff_EBP + 8));\n        *puVar3 = *(extraout_ECX + 0x34);\n    }\n    *(extraout_ECX + 0x34) = *(extraout_ECX + 0x34) + 1;\ncode_r0x0041fbf3:\n    fcn.00421ee3();\n    return;\n}\n",
        "token_count": 1055
    },
    "0042027f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.0042027f(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040f83a();\n    fcn.00412786(0);\n    for (iVar1 = *(iVar1 + 0x24); iVar1 != 0; iVar1 = *(iVar1 + 0x20)) {\n        fcn.0042025c();\n    }\n    fcn.004127f8(0);\n    return;\n}\n",
        "token_count": 103
    },
    "0042570f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0042570f(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00424184(0x448100, 0xc);\n    fcn.0042b377(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x44fc50;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x44fc4c;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x00425753;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.00421c45(arg_8h_00);\ncode_r0x00425753:\n        fcn.00421c45(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00425776();\n    fcn.004241c9();\n    return;\n}\n",
        "token_count": 393
    },
    "004077bb": {
        "rules": [
            "extract resource via kernel32 functions"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004077bb(uint hResData, uint arg_ch, uint arg_10h)\n\n{\n    uint arg_8h;\n    \n    arg_8h = (*_sym.imp.KERNEL32.dll_LockResource)(hResData);\n    fcn.0040778e(arg_8h, arg_ch, 0, arg_10h);\n    return;\n}\n",
        "token_count": 84
    },
    "0040e300": {
        "rules": [
            "extract resource via kernel32 functions"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040e300(int32_t lpName)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t arg_8h;\n    uint var_4h;\n    \n    iVar3 = 0;\n    arg_8h = 0;\n    if (lpName != 0) {\n        iVar1 = fcn.0040f83a();\n        uVar2 = *(iVar1 + 0xc);\n        iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar2, lpName, 0xf0);\n        if (iVar1 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar2, iVar1);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            arg_8h = (*_sym.imp.KERNEL32.dll_LockResource)(iVar3);\n        }\n    }\n    uVar2 = fcn.0040de7a(arg_8h);\n    if ((arg_8h != 0) && (iVar3 != 0)) {\n        (*_sym.imp.KERNEL32.dll_FreeResource)(iVar3);\n    }\n    return uVar2;\n}\n",
        "token_count": 271
    },
    "00408f34": {
        "rules": [
            "link function at runtime on Windows",
            "link many functions at runtime"
        ],
        "decompiled_code": "\nbool fcn.00408f34(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (*0x44f62c != 0) {\n        return *0x44f620 != 0;\n    }\n    *0x44f630 = fcn.00408eda();\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"USER32\");\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (((((iVar2 != 0) && (*0x44f610 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x43db7c),  *0x44f610 != 0)) &&\n         (*0x44f614 = (*pcVar1)(iVar2, \"MonitorFromWindow\"),  *0x44f614 != 0)) &&\n        ((*0x44f618 = (*pcVar1)(iVar2, \"MonitorFromRect\"),  *0x44f618 != 0 &&\n         (*0x44f61c = (*pcVar1)(iVar2, \"MonitorFromPoint\"),  *0x44f61c != 0)))) &&\n       ((*0x44f624 = (*pcVar1)(iVar2, \"EnumDisplayMonitors\"),  *0x44f624 != 0 &&\n        ((*0x44f620 = (*pcVar1)(iVar2, \"GetMonitorInfoA\"),  *0x44f620 != 0 &&\n         (*0x44f628 = (*pcVar1)(iVar2, \"EnumDisplayDevicesA\"),  *0x44f628 != 0)))))) {\n        *0x44f62c = 1;\n        return true;\n    }\n    *0x44f610 = 0;\n    *0x44f614 = 0;\n    *0x44f618 = 0;\n    *0x44f61c = 0;\n    *0x44f620 = 0;\n    *0x44f624 = 0;\n    *0x44f628 = 0;\n    *0x44f62c = 1;\n    return false;\n}\n",
        "token_count": 471
    },
    "004108ca": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004108ca(uint arg_8h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint unaff_EBX;\n    uint lpModuleName;\n    uint uStack16;\n    ushort uStack12;\n    char cStack10;\n    uint32_t var_4h;\n    \n    var_4h = *0x44c69c ^ &stack0xfffffffc;\n    lpModuleName = str.mfcm90.dll._0_4_;\n    uStack16 = str.mfcm90.dll._4_4_;\n    uStack12 = str.mfcm90.dll._8_2_;\n    cStack10 = str.mfcm90.dll[10];\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName);\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"AfxmReleaseManagedReferences\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(arg_8h);\n        }\n    }\n    fcn.00420bb4(unaff_EBX);\n    return;\n}\n",
        "token_count": 252
    },
    "0040f133": {
        "rules": [
            "set application hook"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f133(code **param_1)\n\n{\n    code *pcVar1;\n    \n    pcVar1 = _sym.imp.USER32.dll_UnhookWindowsHookEx;\n    *param_1 = vtable._AFX_THREAD_STATE.0;\n    if (param_1[0xb] != NULL) {\n        (*pcVar1)(param_1[0xb]);\n    }\n    if (param_1[10] != NULL) {\n        (*pcVar1)(param_1[10]);\n    }\n    if (param_1[3] != NULL) {\n        fcn.00421c45(param_1[3]);\n    }\n    return;\n}\n",
        "token_count": 147
    },
    "0041cead": {
        "rules": [
            "set application hook"
        ],
        "decompiled_code": "\nvoid fcn.0041cead(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    fcn.0041ce0e();\n    iVar2 = fcn.0040f83a();\n    if ((*(iVar2 + 4) != 0) && (pcVar1 = *(*(iVar2 + 4) + 0x3c),  pcVar1 != NULL)) {\n        (*pcVar1)(1, 0);\n    }\n    iVar2 = fcn.0040f86d();\n    if ((*(iVar2 + 0x3c) != NULL) && (iVar3 = (**(**(iVar2 + 0x3c) + 0x144))(),  iVar3 != 0)) {\n        *(iVar2 + 0x3c) = 0;\n    }\n    iVar2 = fcn.0040f282();\n    iVar3 = fcn.0040f83a();\n    pcVar1 = _sym.imp.USER32.dll_UnhookWindowsHookEx;\n    if (*(iVar3 + 0x14) == '\\0') {\n        if (*(iVar2 + 0x2c) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)(*(iVar2 + 0x2c));\n            *(iVar2 + 0x2c) = 0;\n        }\n        if (*(iVar2 + 0x28) != 0) {\n            (*pcVar1)(*(iVar2 + 0x28));\n            *(iVar2 + 0x28) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 360
    },
    "00410d06": {
        "rules": [
            "get thread local storage value"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00410d06(int32_t arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *in_ECX;\n    \n    puVar1 = in_ECX + 7;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar1);\n    if ((((0 < arg_8h) && (arg_8h < in_ECX[3])) && (iVar3 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*in_ECX),  iVar3 != 0))\n       && (arg_8h < *(iVar3 + 8))) {\n        uVar2 = *(*(iVar3 + 0xc) + arg_8h * 4);\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n        return uVar2;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n    return 0;\n}\n",
        "token_count": 214
    }
}