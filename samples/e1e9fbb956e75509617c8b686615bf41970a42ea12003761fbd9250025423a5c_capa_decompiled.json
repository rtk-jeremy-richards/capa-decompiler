{
    "0046f5d4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Heritage AFTER dead removal. Example location: r0x00470010 : 0x0046f7fb\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0046b636) overlaps instruction at (ram,0x0046b635)\n// \n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Restarted to delay deadcode elimination for space: ram\n\nvoid fcn.0046f5d4(uint32_t param_1)\n\n{\n    uint8_t uVar1;\n    char cVar3;\n    int16_t iVar4;\n    char *pcVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t *piVar8;\n    int32_t iVar9;\n    int32_t *piVar10;\n    uint *puVar11;\n    char extraout_CH;\n    uint8_t extraout_CH_00;\n    char *pcVar12;\n    uint32_t unaff_EBX;\n    uint32_t unaff_ESI;\n    int32_t *unaff_EDI;\n    uint *in_FS_OFFSET;\n    bool bVar13;\n    float10 extraout_ST0;\n    ulong uVar14;\n    uint32_t var_8h;\n    uint var_18h;\n    uint uStack0000002a;\n    uint uStack0000002e;\n    uint uStack00000032;\n    uint uStack00000036;\n    uint uStack0000003a;\n    uint uStack0000003e;\n    uint uStack00000042;\n    uint uStack00000046;\n    uint uStack0000004a;\n    uint uStack0000004e;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    int32_t *piStack84;\n    int32_t *piStack80;\n    int32_t *piStack76;\n    int32_t *piStack72;\n    int32_t *var_40h;\n    int32_t *piStack64;\n    uint *var_38h;\n    int32_t *piStack56;\n    int32_t *var_30h;\n    int32_t *var_2ch;\n    uint32_t var_28h;\n    int32_t var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint var_14h;\n    uint32_t var_10h;\n    uint var_ch;\n    uint var_4h;\n    uint8_t uVar2;\n    \n    uStack32 = 0x401106;\n    uStack36 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &stack0xffffffdc;\n    var_24h = 0x46f5f7;\n    sub.MSVBVM60.DLL___vbaChkstk();\n    puStack28 = &fcn.0046f5d4::var_2ch;\n    var_14h = 0x4010a0;\n    var_10h = var_8h & 1;\n    piVar8 = var_8h & 0xfffffffe;\n    var_ch = 0;\n    piStack56 = 0x46f628;\n    var_30h = piVar8;\n    var_2ch = unaff_EDI;\n    var_28h = unaff_ESI;\n    (**(*piVar8 + 4))();\n    var_4h = 2;\n    var_38h = 0x46f644;\n    piStack56 = piVar8;\n    iVar9 = (**(*piVar8 + 0x2b4))();\n    if (iVar9 < 0) {\n        var_38h = 0x2b4;\n        piStack64 = 0x46dc34;\n        piStack76 = 0x46f664;\n        piStack72 = iVar9;\n        var_40h = piVar8;\n        sub.MSVBVM60.DLL___vbaHresultCheckObj();\n    }\n    var_4h = 3;\n    if (*0x4703a4 == NULL) {\n        var_38h = 0x4703a4;\n        piStack64 = 0x46de90;\n        var_40h = 0x46f692;\n        sub.MSVBVM60.DLL___vbaNew2();\n    }\n    piVar10 = *0x4703a4;\n    var_38h = &fcn.0046f5d4::var_30h;\n    var_40h = 0x46f6c2;\n    piStack64 = piVar10;\n    iVar9 = (**(**0x4703a4 + 0x4c))();\n    if (iVar9 < 0) {\n        var_40h = 0x4c;\n        piStack72 = 0x46de80;\n        piStack84 = 0x46f6df;\n        piStack80 = iVar9;\n        piStack76 = piVar10;\n        sub.MSVBVM60.DLL___vbaHresultCheckObj();\n    }\n    piVar10 = var_30h;\n    var_40h = &fcn.0046f5d4::var_54h;\n    piStack72 = var_30h;\n    piStack76 = 0x46f703;\n    iVar9 = (**(*var_30h + 0x20))();\n    if (iVar9 < 0) {\n        piStack76 = 0x20;\n        piStack80 = 0x46dea0;\n        piStack84 = piVar10;\n        var_54h = iVar9;\n        sub.MSVBVM60.DLL___vbaHresultCheckObj();\n    }\n    bVar13 = var_54h != 0;\n    piStack76 = 0x46f746;\n    sub.MSVBVM60.DLL___vbaFreeObj();\n    if (bVar13) {\n        var_4h = 4;\n        piStack80 = 0x46f763;\n        piStack76 = piVar8;\n        piVar10 = (**(*piVar8 + 0x6f8))();\n        if (piVar10 < 0) {\n            piStack76 = 0x6f8;\n            piStack80 = 0x46dc64;\n            piStack84 = piVar8;\n            piStack72 = piVar10;\n            sub.MSVBVM60.DLL___vbaHresultCheckObj();\n        }\n    }\n    for (var_24h = 0; var_24h < 0x1e80a1; var_24h = var_24h + 1) {\n        var_4h = 7;\n        if (*0x470010 == NULL) {\n            piStack76 = 0x470010;\n            piStack80 = 0x46e81c;\n            piStack84 = 0x46f7df;\n            sub.MSVBVM60.DLL___vbaNew2();\n        }\n        piVar8 = *0x470010;\n        piStack76 = &fcn.0046f5d4::var_2ch;\n        piStack84 = 0x46f80f;\n        piStack80 = piVar8;\n        puVar11 = (**(**0x470010 + 0x50))();\n        if (puVar11 < 0) {\n            piStack64 = 0x50;\n            var_40h = 0x46dc34;\n            piStack80 = 0x46f82c;\n            piStack72 = piVar8;\n            var_38h = puVar11;\n            sub.MSVBVM60.DLL___vbaHresultCheckObj();\n        }\n        piStack64 = var_2ch;\n        piStack72 = 0x46f848;\n        iVar9 = sub.MSVBVM60.DLL___vbaStrCmp();\n        piStack72 = 0x46f85b;\n        sub.MSVBVM60.DLL___vbaFreeStr();\n        if (iVar9 == 0) {\n            var_4h = 8;\n            var_38h = 0x80020004;\n            var_40h = 0xa;\n            piStack72 = &fcn.0046f5d4::var_40h;\n            piStack76 = 0x46f881;\n            iVar4 = sub.MSVBVM60.DLL_rtcFreeFile();\n            var_28h = iVar4;\n            piStack76 = 0x46f88f;\n            sub.MSVBVM60.DLL___vbaFreeVar();\n        }\n    }\n    var_4h = 0xb;\n    piStack76 = 0xffffffff;\n    piStack80 = 0x46f8a9;\n    sub.MSVBVM60.DLL___vbaOnError();\n    var_4h = 0xc;\n    uStack0000002a = 0;\n    uStack0000002e = 4;\n    uStack00000032 = 0x400004;\n    uStack00000036 = 0x22;\n    uStack0000003a = 0xffffffff;\n    uStack0000003e = 0x2000;\n    uStack00000042 = 0;\n    uStack00000046 = 0;\n    uStack0000004a = 0;\n    uStack0000004e = 0;\n    piStack80 = 0x46b414;\n    func_0x0046b220();\n    // WARNING: Call to offcut address within same function\n    piStack80 = 0x46b419;\n    uVar14 = func_0x0046b41a();\n    pcVar12 = uVar14 >> 0x20;\n    pcVar5 = uVar14;\n    cVar3 = uVar14;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar12 = *pcVar12 + extraout_CH;\n    *pcVar12 = *pcVar12 + -0x7d;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    *pcVar5 = *pcVar5 + cVar3;\n    bVar13 = (POPCOUNT(unaff_ESI & 0xff) & 1U) == 0;\n    piStack80 = 0x46b604;\n    pcVar6 = fcn.0046b2a7();\n    if (!bVar13) {\n        piStack80 = 0x46b608;\n        uVar7 = (*pcVar6)();\n        uVar1 = *piStack80;\n        uVar2 = *piStack80;\n        *piStack80 = (uVar2 - extraout_CH_00) - (uVar7 < 0xb92fb754);\n        if (extraout_CH_00 <= uVar1 && (uVar7 < 0xb92fb754) <= uVar2 - extraout_CH_00) {\n            piVar8 = unaff_EBX & 0xffffff00 | *0xf9a5248a;\n            *0xbf246a9d = uVar7 & 0xffff0000 | CONCAT11(0x2f, uVar7);\n            *piVar8 = *piVar8 + piVar8;\n            *((uVar7 & 0xffff0000 | CONCAT11(0x2f, uVar7)) + 0xbf246adb) = ROUND(extraout_ST0);\n        }\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 6208
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0046b2d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0046b2d6(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    int32_t *piVar5;\n    uint uVar6;\n    int32_t *piVar7;\n    int32_t unaff_EBP;\n    int32_t in_FS_OFFSET;\n    int16_t *piVar4;\n    \n    piVar3 = *(*(*(*(in_FS_OFFSET + 0x30) + 0xc) + 0x14) + 0x14);\n    do {\n        piVar4 = piVar3;\n        piVar3 = piVar4 + -1;\n    } while (*piVar3 != 0x25ff);\n    piVar5 = **(piVar4 + 1);\n    do {\n        do {\n            piVar7 = piVar5;\n            piVar5 = piVar7 + 1;\n        } while (*piVar5 != *(unaff_EBP + 0x46));\n    } while (*(piVar7 + 5) != *(unaff_EBP + 0x4a));\n    uVar6 = (*(piVar7 + -1))(*(unaff_EBP + 0x42));\n    *(unaff_EBP + 0x2e) = uVar6;\n    do {\n        do {\n            param_1 = *param_1;\n        } while (*param_1[10] != 0x53004d);\n    } while (param_1[10][1] != 0x420056);\n    iVar2 = param_1[4];\n    piVar5 = iVar2 + *(iVar2 + *(iVar2 + 0x3c) + 0x78) + 0x28;\n    do {\n        do {\n            piVar7 = piVar5 + 1;\n            iVar1 = *piVar5;\n            piVar5 = piVar7;\n        } while (iVar1 == 0);\n        piVar7 = iVar1 + iVar2;\n    } while ((*piVar7 != -0x7c1374ab) || (piVar7[1] != -0x72a9f314));\n    (*piVar7)(&stack0xffffffe0);\n    return;\n}\n",
        "token_count": 500
    }
}