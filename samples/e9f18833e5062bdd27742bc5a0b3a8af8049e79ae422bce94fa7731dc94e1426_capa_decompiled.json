{
    "00408eca": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00408f0e)\n\nuint __cdecl fcn.00408eca(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_8h = 0x18;\n    iVar1 = fcn.0040940d(arg_8h, 0x42647c);\n    if (iVar1 == 0) {\n        var_8h = 0x2af;\n    }\n    return var_8h;\n}\n",
        "token_count": 127
    },
    "0040908e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004090c9)\n\nvoid __cdecl fcn.0040908e(uint arg_8h)\n\n{\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00408eca(\"Nocytuha\");\n    // WARNING: Could not recover jumptable at 0x0040912b. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*(0x7640b0ad - *(*0x45b50c + 0xb)))();\n    return;\n}\n",
        "token_count": 143
    },
    "00409135": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040939f)\n// WARNING: Removing unreachable block (ram,0x004093af)\n// WARNING: Removing unreachable block (ram,0x0040937c)\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00409135(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint var_1a8h;\n    uint var_1a4h;\n    int32_t var_1a0h;\n    uint var_198h;\n    uint lpWSAData;\n    uint var_4h;\n    \n    var_4h._0_1_ = 0;\n    for (var_1a0h = 0x2c3; 0xb < var_1a0h; var_1a0h = var_1a0h + -9) {\n        *0x45b510 = 0x9b;\n    }\n    uVar1 = *0x45b510 + 0x3b03c;\n    if (uVar1 == 7) {\n        uVar1 = (*0x45b510 + 0x3b2ef) * 7;\n    }\n    else if (uVar1 == 0x43) {\n        *0x45b510 = 0x9b;\n        uVar1 = *0x45b510;\n    }\n    else if (uVar1 == 0xea) {\n        uVar1 = *0x45b510 + 0x76078;\n    }\n    *0x45b510 = uVar1;\n    iVar2 = (*_sym.imp.WS2_32.dll_WSAStartup)(0x202, &lpWSAData);\n    if (iVar2 == 0) {\n        if (0x2a3 < *0x45b510) {\n            *0x45b510 = 0x222;\n        }\n        *0x45b510 = fcn.00408eca(0x426454);\n        *0x45b510 = fcn.00408eca(\"Yfirovefu\");\n        fcn.00408fba(0x24f4f, 0x458);\n        *0x45b510 = *0x45b510 + -1;\n        (*_sym.imp.WS2_32.dll_WSACleanup)();\n        for (var_1a0h = 0x3b; var_1a0h < 0x105; var_1a0h = var_1a0h + 9) {\n            *0x45b510 = 0x222;\n        }\n        *0x45b510 = fcn.00408eca(\"Hutaneqylafi\");\n        fcn.0040908e(*0x45b510);\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 1;\n    }\n    *0x45b510 = 0x222;\n    return uVar3;\n}\n",
        "token_count": 666
    },
    "0040a086": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0040a086(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *in_FS_OFFSET;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    iStack16 = param_1;\n    uStack24 = 0x40a064;\n    uStack28 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack28;\n    while( true ) {\n        iVar1 = *(param_1 + 8);\n        iVar2 = *(param_1 + 0xc);\n        if ((iVar2 == -1) || (iVar2 == param_2)) break;\n        uStack20 = *(iVar1 + iVar2 * 0xc);\n        *(param_1 + 0xc) = uStack20;\n        if (*(iVar1 + 4 + iVar2 * 0xc) == 0) {\n            fcn.0040a11a(0x101);\n            (**(iVar1 + 8 + iVar2 * 0xc))();\n        }\n    }\n    *in_FS_OFFSET = uStack28;\n    return;\n}\n",
        "token_count": 266
    },
    "0040b0ee": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040b0ee(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    char *pcVar1;\n    uint32_t *puVar2;\n    int32_t *piVar3;\n    char cVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    code *pcVar8;\n    uint8_t uVar9;\n    int32_t *piVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar5 = arg_8h[4];\n    iVar6 = *(arg_ch - 4);\n    piVar10 = arg_ch - 4;\n    uVar11 = arg_ch - arg_8h[3] >> 0xf;\n    uVar7 = *(arg_ch - 8);\n    var_ch = iVar6 + -1;\n    piVar3 = uVar11 * 0x204 + 0x144 + uVar5;\n    uVar13 = *(var_ch + piVar10);\n    if ((uVar13 & 1) == 0) {\n        arg_ch = (uVar13 >> 4) - 1;\n        if (0x3f < arg_ch) {\n            arg_ch = 0x3f;\n        }\n        if (*(iVar6 + 3 + piVar10) == *(iVar6 + 7 + piVar10)) {\n            if (arg_ch < 0x20) {\n                pcVar1 = arg_ch + 4 + uVar5;\n                uVar12 = ~(0x80000000U >> (arg_ch & 0x1f));\n                puVar2 = uVar5 + 0x44 + uVar11 * 4;\n                *puVar2 = *puVar2 & uVar12;\n                *pcVar1 = *pcVar1 + -1;\n                if (*pcVar1 == '\\0') {\n                    *arg_8h = *arg_8h & uVar12;\n                }\n            }\n            else {\n                pcVar1 = arg_ch + 4 + uVar5;\n                uVar12 = ~(0x80000000U >> (arg_ch - 0x20 & 0x1f));\n                puVar2 = uVar5 + 0xc4 + uVar11 * 4;\n                *puVar2 = *puVar2 & uVar12;\n                *pcVar1 = *pcVar1 + -1;\n                if (*pcVar1 == '\\0') {\n                    arg_8h[1] = arg_8h[1] & uVar12;\n                }\n            }\n        }\n        *(*(iVar6 + 7 + piVar10) + 4) = *(iVar6 + 3 + piVar10);\n        var_ch = var_ch + uVar13;\n        *(*(iVar6 + 3 + piVar10) + 8) = *(iVar6 + 7 + piVar10);\n    }\n    uVar13 = (var_ch >> 4) - 1;\n    if (0x3f < uVar13) {\n        uVar13 = 0x3f;\n    }\n    if ((uVar7 & 1) == 0) {\n        piVar10 = piVar10 - uVar7;\n        arg_ch = (uVar7 >> 4) - 1;\n        if (0x3f < arg_ch) {\n            arg_ch = 0x3f;\n        }\n        var_ch = var_ch + uVar7;\n        uVar13 = (var_ch >> 4) - 1;\n        if (0x3f < uVar13) {\n            uVar13 = 0x3f;\n        }\n        if (arg_ch != uVar13) {\n            if (piVar10[1] == piVar10[2]) {\n                if (arg_ch < 0x20) {\n                    pcVar1 = arg_ch + 4 + uVar5;\n                    uVar12 = ~(0x80000000U >> (arg_ch & 0x1f));\n                    puVar2 = uVar5 + 0x44 + uVar11 * 4;\n                    *puVar2 = *puVar2 & uVar12;\n                    *pcVar1 = *pcVar1 + -1;\n                    if (*pcVar1 == '\\0') {\n                        *arg_8h = *arg_8h & uVar12;\n                    }\n                }\n                else {\n                    pcVar1 = arg_ch + 4 + uVar5;\n                    uVar12 = ~(0x80000000U >> (arg_ch - 0x20 & 0x1f));\n                    puVar2 = uVar5 + 0xc4 + uVar11 * 4;\n                    *puVar2 = *puVar2 & uVar12;\n                    *pcVar1 = *pcVar1 + -1;\n                    if (*pcVar1 == '\\0') {\n                        arg_8h[1] = arg_8h[1] & uVar12;\n                    }\n                }\n            }\n            *(piVar10[2] + 4) = piVar10[1];\n            *(piVar10[1] + 8) = piVar10[2];\n        }\n    }\n    if (((uVar7 & 1) != 0) || (arg_ch != uVar13)) {\n        piVar10[1] = piVar3[uVar13 * 2 + 1];\n        piVar10[2] = piVar3 + uVar13 * 2;\n        (piVar3 + uVar13 * 2)[1] = piVar10;\n        *(piVar10[1] + 8) = piVar10;\n        if (piVar10[1] == piVar10[2]) {\n            cVar4 = *(uVar13 + 4 + uVar5);\n            *(uVar13 + 4 + uVar5) = cVar4 + '\\x01';\n            uVar9 = uVar13;\n            if (uVar13 < 0x20) {\n                if (cVar4 == '\\0') {\n                    *arg_8h = *arg_8h | 0x80000000U >> (uVar9 & 0x1f);\n                }\n                puVar2 = uVar5 + 0x44 + uVar11 * 4;\n                *puVar2 = *puVar2 | 0x80000000U >> (uVar9 & 0x1f);\n            }\n            else {\n                if (cVar4 == '\\0') {\n                    arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                }\n                puVar2 = uVar5 + 0xc4 + uVar11 * 4;\n                *puVar2 = *puVar2 | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n            }\n        }\n    }\n    *piVar10 = var_ch;\n    *(var_ch + -4 + piVar10) = var_ch;\n    *piVar3 = *piVar3 + -1;\n    pcVar8 = _sym.imp.KERNEL32.dll_VirtualFree;\n    uVar5 = *0x45b6cc;\n    puVar2 = *0x45b6d4;\n    if ((*piVar3 == 0) && (uVar5 = uVar11,  puVar2 = arg_8h,  *0x45b6d4 != NULL)) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(*0x45b6cc * 0x8000 + (*0x45b6d4)[3], 0x8000, 0x4000);\n        (*0x45b6d4)[2] = (*0x45b6d4)[2] | 0x80000000U >> (*0x45b6cc & 0x1f);\n        *((*0x45b6d4)[4] + 0xc4 + *0x45b6cc * 4) = 0;\n        *((*0x45b6d4)[4] + 0x43) = *((*0x45b6d4)[4] + 0x43) + -1;\n        if (*((*0x45b6d4)[4] + 0x43) == '\\0') {\n            (*0x45b6d4)[1] = (*0x45b6d4)[1] & 0xfffffffe;\n        }\n        puVar2 = arg_8h;\n        if ((*0x45b6d4)[2] == 0xffffffff) {\n            (*pcVar8)((*0x45b6d4)[3], 0, 0x8000);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(*0x45c924, 0, (*0x45b6d4)[4]);\n            fcn.0040c6b0(*0x45b6d4, *0x45b6d4 + 5, (*0x45b6d8 * 0x14 - *0x45b6d4) + -0x14 + *0x45b6dc);\n            *0x45b6d8 = *0x45b6d8 + -1;\n            if (*0x45b6d4 < arg_8h) {\n                arg_8h = arg_8h + -5;\n            }\n            *0x45b6d0 = *0x45b6dc;\n            puVar2 = arg_8h;\n        }\n    }\n    *0x45b6d4 = puVar2;\n    *0x45b6cc = uVar5;\n    return;\n}\n",
        "token_count": 2219
    },
    "null": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid entry0(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uint uVar7;\n    \n    // [05] -rwx section size 159744 named .text_1\n    cVar1 = *0x46499e;\n    iVar4 = -0x1fbb1ea7;\n    *0x464769 = 0x464006 - *0x46476d;\n    *0x46499e = 0;\n    if (cVar1 == '\\x01') {\n        if ((*0x464899 == 0) || (*0x46489d == 0)) {\n            if (*0x4648a1 != 0) {\n                iVar2 = fcn.004643f2(*(*0x464769 - *0x4648a1));\n                if (iVar2 != 0) {\n                    *0x4648a5 = iVar2;\n                    *0x4648d6 = fcn.00464431(0xe044e159, iVar2, 0x4648a9);\n                    *0x4648da = fcn.00464431(0xe044e159, *0x4648a5, 0x4648b6);\n                }\n            }\n        }\n        else {\n            *0x4648d6 = *(*0x464769 - *0x464899);\n            *0x4648da = *(*0x464769 - *0x46489d);\n        }\n        if ((*0x4648da != NULL) && (*0x4648d6 != NULL)) {\n            iVar2 = (**0x4648d6)(0x4648e2);\n            if (iVar2 != 0) {\n                uVar7 = 0x4648c5;\n                *0x4648a5 = iVar2;\n                iVar3 = (**0x4648da)(iVar2, 0x4648c5);\n                if (iVar3 != 0) {\n                    *0x4648de = iVar3;\n                    iVar3 = fcn.0046437b(0xe044e159, 0x4648e2, 0x464976);\n                    if (iVar3 != 0) {\n                        iVar3 = fcn.00464678(0xe044e159);\n                        if (iVar3 == 0) {\n                            fcn.00464224(0x46499f, *0x46499a, 0x464779, *0x464775);\n                            iVar2 = (**0x46498a)(0, 0x464795, 0xff);\n                            pcVar5 = iVar2 + 0x464795;\n                            do {\n                                pcVar6 = pcVar5;\n                                if (iVar2 == 0) break;\n                                iVar2 = iVar2 + -1;\n                                pcVar6 = pcVar5 + -1;\n                                cVar1 = *pcVar5;\n                                pcVar5 = pcVar6;\n                            } while (cVar1 != '.');\n                            pcVar5 = 0x46478d;\n                            for (iVar2 = 8; pcVar6 = pcVar6 + 1,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                                *pcVar6 = *pcVar5;\n                                pcVar5 = pcVar5 + 1;\n                            }\n                            uVar7 = 0x4641c6;\n                            iVar2 = iVar4;\n                            iVar3 = fcn.004646ab(0xe044e159, 0x464795, 0x46499f, *0x46499a);\n                            if (iVar3 == 1) {\n                                uVar7 = 0x464795;\n                                fcn.00464706(0xe044e159, 0x464795);\n                                iVar2 = iVar4;\n                            }\n                        }\n                    }\n                }\n                (**0x464976)(*0x4648a5, iVar2, uVar7);\n            }\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x004641f8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*(*0x464769 - *0x464771))();\n    return;\n}\n",
        "token_count": 951
    },
    "0046424c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong __cdecl fcn.0046424c(uint32_t arg_8h, char *arg_ch, uint32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint in_EDX;\n    \n    uVar4 = 8;\n    if (arg_10h < 8) {\n        iVar3 = 8 - arg_10h;\n        do {\n            arg_8h = arg_8h << 4 | arg_8h >> 0x1c;\n            iVar3 = iVar3 + -1;\n            uVar4 = arg_10h;\n        } while (iVar3 != 0);\n    }\n    do {\n        uVar1 = arg_8h >> 0x1c;\n        if (arg_8h >> 0x1c < 10) {\n            cVar2 = uVar1 + 0x30;\n        }\n        else {\n            cVar2 = uVar1 + 0x37;\n        }\n        *arg_ch = cVar2;\n        arg_ch = arg_ch + 1;\n        uVar4 = uVar4 - 1;\n        arg_8h = arg_8h << 4 | arg_8h >> 0x1c;\n    } while (uVar4 != 0);\n    return CONCAT44(in_EDX, arg_ch);\n}\n",
        "token_count": 312
    },
    "004642d1": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004642d1(char *arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    uint in_EDX;\n    \n    pcVar2 = NULL;\n    if (arg_ch != 0) {\n        do {\n            pcVar2 = arg_8h;\n            if (arg_ch == 0) break;\n            arg_ch = arg_ch + -1;\n            pcVar2 = arg_8h + 1;\n            cVar1 = *arg_8h;\n            arg_8h = pcVar2;\n        } while (arg_10h != cVar1);\n        pcVar2 = pcVar2 + -1;\n        if (*pcVar2 != arg_10h) {\n            pcVar2 = NULL;\n        }\n    }\n    return CONCAT44(in_EDX, pcVar2);\n}\n",
        "token_count": 198
    },
    "00464308": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong __cdecl fcn.00464308(char *arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint in_EDX;\n    \n    iVar2 = 0;\n    if (arg_8h != NULL) {\n        uVar3 = 0xffffffff;\n        do {\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *arg_8h;\n            arg_8h = arg_8h + 1;\n        } while (cVar1 != '\\0');\n        iVar2 = ~uVar3 - 1;\n    }\n    return CONCAT44(in_EDX, iVar2);\n}\n",
        "token_count": 162
    },
    "00464335": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong __cdecl fcn.00464335(uint8_t *arg_8h, uint8_t *arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    \n    iVar3 = -1;\n    if ((arg_8h != NULL) && (arg_ch != NULL)) {\n        while( true ) {\n            uVar1 = *arg_8h;\n            uVar2 = *arg_ch;\n            if ((uVar1 == 0) || ((uVar2 == 0 || (uVar2 != uVar1)))) break;\n            arg_ch = arg_ch + 1;\n            arg_8h = arg_8h + 1;\n        }\n        iVar3 = uVar1 - uVar2;\n    }\n    return CONCAT44(in_EDX, iVar3);\n}\n",
        "token_count": 190
    },
    "0046437b": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0046437b(int32_t arg_8h, int32_t *arg_ch, int32_t *arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    char *pcVar4;\n    int32_t *piVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    var_8h = 0;\n    iVar1 = (**(arg_8h + 0x20016785))(arg_ch);\n    if (iVar1 == 0) {\n        iVar1 = (**(arg_8h + 0x2001677d))(arg_ch);\n    }\n    if (iVar1 != 0) {\n        while( true ) {\n            piVar3 = arg_10h;\n            piVar5 = arg_ch;\n            iVar2 = (*(arg_8h + 0x200161af))();\n            pcVar4 = arg_ch + iVar2 + 1;\n            if (*pcVar4 == '\\0') break;\n            iVar2 = (**(arg_8h + 0x20016781))(iVar1, pcVar4, pcVar4);\n            if (iVar2 == 0) {\n                return 0;\n            }\n            *piVar5 = iVar2;\n            arg_10h = piVar5 + 1;\n            arg_ch = piVar3;\n        }\n        var_8h = 1;\n    }\n    return var_8h;\n}\n",
        "token_count": 329
    },
    "0040a24d": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a24d(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint var_1a4h;\n    uint var_a0h;\n    \n    iVar2 = 0;\n    piVar1 = 0x426548;\n    do {\n        if (arg_8h == *piVar1) break;\n        piVar1 = piVar1 + 2;\n        iVar2 = iVar2 + 1;\n    } while (piVar1 < 0x4265d8);\n    if (arg_8h == *(iVar2 * 8 + 0x426548)) {\n        if ((*0x45b51c == 1) || ((*0x45b51c == 0 && (*0x42649c == 1)))) {\n            fcn.0040acd0();\n            (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n            (*_sym.imp.KERNEL32.dll_WriteFile)();\n        }\n        else if (arg_8h != 0xfc) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)();\n            if (iVar2 == 0) {\n                fcn.0040abe0();\n            }\n            iVar2 = fcn.0040acd0();\n            if (0x3c < iVar2 + 1U) {\n                fcn.0040acd0();\n                fcn.0040b960();\n            }\n            fcn.0040abe0();\n            fcn.0040abf0();\n            fcn.0040abf0();\n            fcn.0040abf0();\n            fcn.0040b8ce(&var_a0h, \"Microsoft Visual C++ Runtime Library\");\n        }\n    }\n    return;\n}\n",
        "token_count": 392
    },
    "00464678": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00464678(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_28h;\n    \n    iVar1 = (*(arg_8h + 0x2001636f))(arg_8h, 0x7f3, 0, &var_28h);\n    if (iVar1 == 1) {\n        (*(arg_8h + 0x200160a1))(arg_8h, &var_28h);\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "00408f1e": {
        "rules": [
            "hash data using aphash/0253f481fbfe42f6972c4d360912dc99"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408f1e(int32_t arg_8h)\n\n{\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 0x530; var_4h = var_4h + 8) {\n        *(var_4h + 0x41a038) = *(var_4h + 0x41a038) - arg_8h;\n        *(var_4h + 0x41a03c) = *(var_4h + 0x41a03c) - arg_8h;\n    }\n    return;\n}\n",
        "token_count": 161
    },
    "004646ab": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004646ab(int32_t arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = (**(arg_8h + 0x20016829))(arg_ch, 0x40000000, 2, 0, 2, 0x80, 0);\n    if (iVar1 != -1) {\n        (**(arg_8h + 0x2001682d))(iVar1, arg_10h, arg_14h, &var_4h, 0, iVar1);\n        (**(arg_8h + 0x20016825))();\n    }\n    return iVar1 != -1;\n}\n",
        "token_count": 173
    },
    "00408fba": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408fba(uint32_t arg_8h, uint arg_ch)\n\n{\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    var_8h = 0x5e;\n    var_ch = 0x5f;\n    var_18h = str.Geqagefujez._0_4_;\n    var_14h = str.Geqagefujez._4_4_;\n    var_10h = str.Geqagefujez._8_4_;\n    var_8h = fcn.00408eca(&var_18h);\n    if (0x2a3 < var_8h) {\n        var_8h = var_ch & 0x2a2;\n    }\n    for (var_4h = 0; var_4h < arg_8h; var_4h = var_4h + 1) {\n        var_8h = var_8h + 1;\n        fcn.00408f1e(arg_ch);\n        var_8h = var_ch | 0x2af;\n    }\n    for (var_1ch = 0x3b; var_1ch < 0x105; var_1ch = var_1ch + 9) {\n    }\n    return;\n}\n",
        "token_count": 329
    },
    "004643f2": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.004643f2(uint32_t arg_8h)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = arg_8h & 0xffff0000;\n    while ((*piVar1 != 0x5a4d || (*(piVar1 + *(piVar1 + 0x1e)) != 0x4550))) {\n        piVar1 = piVar1 + -0x8000;\n        if (piVar1 < 0x70000000) {\n            return NULL;\n        }\n    }\n    return piVar1;\n}\n",
        "token_count": 133
    },
    "0040a750": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040a750(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if ((param_1 <= *0x426950) && (iVar1 = fcn.0040b419(param_1),  iVar1 != 0)) {\n        return;\n    }\n    if (param_1 == 0) {\n        param_1 = 1;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x45c924, 0, param_1 + 0xf & 0xfffffff0);\n    return;\n}\n",
        "token_count": 128
    },
    "0040abf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.0040abf0(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar4 = param_1 & 3;\n    puVar3 = param_1;\n    while (uVar4 != 0) {\n        uVar1 = *puVar3;\n        puVar3 = puVar3 + 1;\n        if (uVar1 == 0) goto code_r0x0040ac3f;\n        uVar4 = puVar3 & 3;\n    }\n    do {\n        do {\n            puVar5 = puVar3;\n            puVar3 = puVar5 + 1;\n        } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);\n        uVar4 = *puVar5;\n        if (uVar4 == '\\0') goto code_r0x0040ac51;\n        if (uVar4 >> 8 == '\\0') {\n            puVar5 = puVar5 + 1;\n            goto code_r0x0040ac51;\n        }\n        if ((uVar4 & 0xff0000) == 0) {\n            puVar5 = puVar5 + 2;\n            goto code_r0x0040ac51;\n        }\n    } while ((uVar4 & 0xff000000) != 0);\ncode_r0x0040ac3f:\n    puVar5 = puVar3 + -1;\ncode_r0x0040ac51:\n    uVar4 = param_2 & 3;\n    while (uVar4 != 0) {\n        uVar1 = *param_2;\n        uVar4 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x0040acc8;\n        *puVar5 = uVar1;\n        puVar5 = puVar5 + 1;\n        uVar4 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar4 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar4 == '\\0') {\ncode_r0x0040acc8:\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if (uVar4 >> 8 == '\\0') {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if ((uVar4 & 0xff0000) == 0) {\n                *puVar5 = uVar4;\n                *(puVar5 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar4 & 0xff000000) == 0) {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n        }\n        *puVar5 = uVar4;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 755
    },
    "0040abe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.0040abe0(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    uVar3 = param_2 & 3;\n    puVar4 = param_1;\n    while (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar3 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x0040acc8;\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        uVar3 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar3 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar3 == '\\0') {\ncode_r0x0040acc8:\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if (uVar3 >> 8 == '\\0') {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if ((uVar3 & 0xff0000) == 0) {\n                *puVar4 = uVar3;\n                *(puVar4 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar3 & 0xff000000) == 0) {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n        }\n        *puVar4 = uVar3;\n        puVar4 = puVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 439
    },
    "0040c28c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040c28c(uint32_t param_1)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    puVar1 = 0x426960;\n    do {\n        if (param_1 == *puVar1) {\n            *0x45b520 = *(iVar2 * 8 + 0x426964);\n            *0x45b524 = param_1;\n            return;\n        }\n        puVar1 = puVar1 + 2;\n        iVar2 = iVar2 + 1;\n    } while (puVar1 < 0x426ac8);\n    if ((0x12 < param_1) && (param_1 < 0x25)) {\n        *0x45b520 = 0xd;\n        *0x45b524 = param_1;\n        return;\n    }\n    if ((param_1 < 0xbc) || (*0x45b520 = 8,  0xca < param_1)) {\n        *0x45b520 = 0x16;\n    }\n    *0x45b524 = param_1;\n    return;\n}\n",
        "token_count": 259
    },
    "00464431": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "parse PE header",
            "resolve function by parsing PE exports"
        ],
        "decompiled_code": "\nulong __cdecl fcn.00464431(int32_t arg_8h, int16_t *arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t extraout_ECX;\n    uint in_EDX;\n    uint32_t *puVar5;\n    ulong uVar6;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    if ((*arg_ch == 0x5a4d) && (*(arg_ch + *(arg_ch + 0x1e)) == 0x4550)) {\n        puVar5 = arg_ch + *(arg_ch + 0x1e) + 0x1e;\n        uVar3 = *puVar5;\n        if (uVar3 != 0) {\n            uVar4 = 0;\n            iVar1 = *(arg_ch + uVar3 + 0x20);\n            do {\n                iVar2 = *(arg_ch + uVar4 * 4 + iVar1);\n                if (iVar2 != 0) {\n                    uVar6 = (*(arg_8h + 0x200161dc))(iVar2 + arg_ch, arg_10h);\n                    puVar5 = uVar6 >> 0x20;\n                    uVar4 = extraout_ECX;\n                    if (uVar6 == 0) break;\n                }\n                uVar4 = uVar4 + 1;\n            } while (uVar4 < *(arg_ch + uVar3 + 0x18));\n            if ((uVar4 < *(arg_ch + uVar3 + 0x18)) &&\n               (iVar1 = *(arg_ch + *(arg_ch + uVar4 * 2 + *(arg_ch + uVar3 + 0x24)) * 4 + *(arg_ch + uVar3 + 0x1c)), \n               iVar1 != 0)) {\n                uVar3 = iVar1 + arg_ch;\n                if ((uVar3 < *puVar5) || (*puVar5 + puVar5[1] < uVar3)) {\n                    var_4h = uVar3;\n                }\n            }\n        }\n    }\n    return CONCAT44(in_EDX, var_4h);\n}\n",
        "token_count": 504
    },
    "004644c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004644c8(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uchar *arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar *puVar3;\n    uint arg_ch_00;\n    uint unaff_EDI;\n    ulong uVar4;\n    ulong uVar5;\n    ulong uVar6;\n    ulong uVar7;\n    ulong uVar8;\n    uint var_128h;\n    uint var_124h;\n    uint var_120h;\n    uint var_11ch;\n    uint var_118h;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_106h;\n    \n    var_128h = 0;\n    iVar1 = (**(arg_8h + 0x20016839))(&var_106h, 0x104);\n    if (iVar1 != 0) {\n        iVar1 = (*(arg_8h + 0x20016178))(&var_106h, iVar1, 0x3a);\n        if (iVar1 != 0) {\n            *(iVar1 + 1) = 0x5c;\n            *(iVar1 + 2) = 0;\n            var_10ch = 0;\n            (**(arg_8h + 0x2001683d))(&var_106h, 0, 0, &var_10ch, 0, 0, 0, 0);\n            uVar4 = (*(arg_8h + 0x2001613e))(var_10ch, 0xffffffff);\n            uVar5 = (*(arg_8h + 0x2001613e))(uVar4 >> 0x20, 0xffff);\n            uVar6 = (*(arg_8h + 0x2001613e))(uVar5 >> 0x20, 0xffff);\n            uVar7 = (*(arg_8h + 0x2001613e))(uVar6 >> 0x20, 0xffff);\n            uVar8 = (*(arg_8h + 0x2001613e))(uVar7 >> 0x20, 0xffffffff);\n            uVar2 = (*(arg_8h + 0x2001613e))(uVar8 >> 0x20, 0xffff);\n            *arg_14h = 0x7b;\n            puVar3 = (*(arg_8h + 0x200160f3))(uVar4 + arg_ch, arg_14h + 1, 8);\n            *puVar3 = 0x2d;\n            puVar3 = (*(arg_8h + 0x200160f3))(uVar5 & 0xffff, puVar3 + 1, 4);\n            *puVar3 = 0x2d;\n            puVar3 = (*(arg_8h + 0x200160f3))(uVar6 & 0xffff, puVar3 + 1, 4);\n            *puVar3 = 0x2d;\n            puVar3 = fcn.0046424c(uVar7 & 0xffff, puVar3 + 1, 4);\n            *puVar3 = 0x2d;\n            arg_ch_00 = (*(arg_8h + 0x200160f3))(uVar8 + arg_10h, puVar3 + 1, 8);\n            puVar3 = fcn.0046424c(uVar2 & 0xffff, arg_ch_00, 4);\n            *puVar3 = 0x7d;\n            puVar3[1] = 0;\n            var_128h = 1;\n        }\n    }\n    return CONCAT44(unaff_EDI, var_128h);\n}\n",
        "token_count": 851
    },
    "00464706": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00464706(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint var_54h;\n    uint uStack84;\n    uint var_44h;\n    \n    puVar2 = &var_44h;\n    for (iVar1 = 0x44; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    puVar2 = &var_54h;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    (**(arg_8h + 0x20016835))(0, arg_ch, 0, 0, 0, 0, 0, 0, &var_44h, &var_54h);\n    (**(arg_8h + 0x20016825))(uStack84, var_54h);\n    (**(arg_8h + 0x20016825))();\n    return;\n}\n",
        "token_count": 274
    },
    "00464224": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00464224(uint8_t *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = 0;\n    do {\n        if (iVar1 == 0) {\n            iVar1 = arg_14h + -1;\n        }\n        *arg_8h = *(iVar1 + arg_10h) ^ *arg_8h;\n        arg_8h = arg_8h + 1;\n        iVar1 = iVar1 + -1;\n        arg_ch = arg_ch + -1;\n    } while (arg_ch != 0);\n    return;\n}\n",
        "token_count": 155
    }
}