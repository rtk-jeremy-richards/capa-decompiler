{
    "00401050": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401050(int32_t param_1)\n\n{\n    uint var_4h;\n    \n    fcn.009f6588(0);\n    if (*(param_1 + 4) != -1) {\n        *(param_1 + 4) = *(param_1 + 4) + 1;\n    }\n    fcn.009f65b0();\n    return;\n}\n",
        "token_count": 90
    },
    "009f445f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f445f(uchar *arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_10h) {\n        do {\n            if (*in_ECX[8] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xc];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 0x14))();\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                *arg_8h = iVar1;\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_10h = arg_10h + -1;\n            }\n            else {\n                if (arg_10h < iVar1) {\n                    iVar1 = arg_10h;\n                }\n                fcn.00401438(arg_8h, arg_ch, *in_ECX[8], iVar1);\n                *in_ECX[0xc] = *in_ECX[0xc] - iVar1;\n                var_4h = var_4h + iVar1;\n                arg_10h = arg_10h - iVar1;\n                arg_8h = arg_8h + iVar1;\n                *in_ECX[8] = *in_ECX[8] + iVar1;\n            }\n        } while (0 < arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 380
    },
    "004010a0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004010a0(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.009f6588(0);\n    iVar2 = *0xf0c56c;\n    var_4h = *0xf0c56c;\n    uVar1 = fcn.0040139d();\n    arg_8h_00 = fcn.00401348(uVar1);\n    if ((arg_8h_00 == 0) && (arg_8h_00 = iVar2,  iVar2 == 0)) {\n        iVar2 = fcn.004013d4(&var_4h, arg_8h);\n        if (iVar2 == -1) {\n            fcn.009f71fb(\"bad cast\");\n            fcn.009f7772(&var_14h, 0xa2f824);\n        }\n        arg_8h_00 = var_4h;\n        *0xf0c56c = var_4h;\n        fcn.00401050();\n        fcn.009f680f(arg_8h_00);\n    }\n    fcn.009f65b0();\n    return arg_8h_00;\n}\n",
        "token_count": 308
    },
    "009f44f8": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f44f8(uchar *arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t arg_14h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_ch) {\n        do {\n            if (*in_ECX[9] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xd];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 4))(*arg_8h);\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_ch = arg_ch + -1;\n            }\n            else {\n                arg_14h = iVar1;\n                if (arg_ch < iVar1) {\n                    arg_14h = arg_ch;\n                }\n                fcn.00401438(*in_ECX[9], iVar1, arg_8h, arg_14h);\n                *in_ECX[0xd] = *in_ECX[0xd] - arg_14h;\n                var_4h = var_4h + arg_14h;\n                arg_ch = arg_ch - arg_14h;\n                arg_8h = arg_8h + arg_14h;\n                *in_ECX[9] = *in_ECX[9] + arg_14h;\n            }\n        } while (0 < arg_ch);\n    }\n    return var_4h;\n}\n",
        "token_count": 384
    },
    "009f45bd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f45bd(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t in_ECX;\n    uint32_t uVar8;\n    int32_t arg_8h_00;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    if ((*(in_ECX + 0x40) & 8) != 0) {\n        uVar8 = **(in_ECX + 0x24);\n        if ((uVar8 != 0) && (uVar4 = *(in_ECX + 0x3c),  uVar8 < uVar4)) {\n            iVar2 = **(in_ECX + 0x34);\n            **(in_ECX + 0x24) = uVar4;\n            **(in_ECX + 0x34) = (iVar2 + uVar8) - uVar4;\n        }\n    }\n    if (arg_8h == -1) {\n        return 0;\n    }\n    uVar8 = **(in_ECX + 0x24);\n    if ((uVar8 != 0) && (piVar6 = *(in_ECX + 0x34),  uVar8 < *piVar6 + uVar8)) {\n        *piVar6 = *piVar6 + -1;\n        puVar3 = **(in_ECX + 0x24);\n        **(in_ECX + 0x24) = puVar3 + 1;\n        *puVar3 = arg_8h;\n        return arg_8h;\n    }\n    if ((*(in_ECX + 0x40) & 2) != 0) {\n        return -1;\n    }\n    if (uVar8 == 0) {\n        uVar8 = 0;\n    }\n    else {\n        uVar8 = (**(in_ECX + 0x34) - **(in_ECX + 0x10)) + uVar8;\n    }\n    uVar4 = uVar8 >> 1;\n    if (uVar4 < 0x20) {\n        uVar4 = 0x20;\n    }\n    iVar2 = **(in_ECX + 0x10);\n    arg_8h_00 = 0;\n    var_4h = uVar8;\n    if (uVar4 != 0) {\n        do {\n            if (uVar8 <= 0x7fffffff - uVar4) break;\n            uVar4 = uVar4 >> 1;\n        } while (uVar4 != 0);\n        if (uVar4 != 0) {\n            var_4h = uVar4 + uVar8;\n            arg_8h_00 = fcn.00401465(var_4h);\n        }\n    }\n    if (uVar8 == 0) {\n        *(in_ECX + 0x3c) = arg_8h_00;\n        **(in_ECX + 0x14) = arg_8h_00;\n        **(in_ECX + 0x24) = arg_8h_00;\n        **(in_ECX + 0x34) = var_4h;\n        uVar1 = *(in_ECX + 0x40);\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n        if ((uVar1 & 4) == 0) {\n            *piVar6 = arg_8h_00;\n            **(in_ECX + 0x30) = 1;\n            goto code_r0x009f4737;\n        }\n    }\n    else {\n        fcn.00401438(arg_8h_00, var_4h, iVar2, uVar8);\n        *(in_ECX + 0x3c) = *(in_ECX + 0x3c) + (arg_8h_00 - iVar2);\n        iVar5 = **(in_ECX + 0x24);\n        **(in_ECX + 0x14) = **(in_ECX + 0x14) + (arg_8h_00 - iVar2);\n        iVar5 = (iVar5 - iVar2) + arg_8h_00;\n        **(in_ECX + 0x24) = iVar5;\n        **(in_ECX + 0x34) = (arg_8h_00 - iVar5) + var_4h;\n        if ((*(in_ECX + 0x40) & 4) == 0) {\n            iVar5 = **(in_ECX + 0x24);\n            iVar7 = (**(in_ECX + 0x20) - iVar2) + arg_8h_00;\n            **(in_ECX + 0x10) = arg_8h_00;\n            **(in_ECX + 0x20) = iVar7;\n            **(in_ECX + 0x30) = (iVar5 - iVar7) + 1;\n            goto code_r0x009f4737;\n        }\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n    }\n    *piVar6 = 0;\n    **(in_ECX + 0x30) = arg_8h_00;\ncode_r0x009f4737:\n    if ((*(in_ECX + 0x40) & 1) != 0) {\n        fcn.009f743e(iVar2);\n    }\n    *(in_ECX + 0x40) = *(in_ECX + 0x40) | 1;\n    **(in_ECX + 0x34) = **(in_ECX + 0x34) + -1;\n    puVar3 = **(in_ECX + 0x24);\n    **(in_ECX + 0x24) = puVar3 + 1;\n    *puVar3 = arg_8h;\n    return arg_8h;\n}\n",
        "token_count": 1403
    },
    "00401325": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00401325(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    fcn.009f6588(0);\n    iVar1 = *(param_1 + 4);\n    if ((iVar1 != 0) && (iVar1 != -1)) {\n        *(param_1 + 4) = iVar1 + -1;\n    }\n    iVar1 = *(param_1 + 4);\n    fcn.009f65b0();\n    return ~-(iVar1 != 0) & param_1;\n}\n",
        "token_count": 132
    },
    "null": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009fd7f4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fd7f4(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa2feb8, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.009fbe74();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.009fe92f();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.009fe980(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fd8ba();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.009fe92f();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 565
    },
    "009f71d8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f71d8(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.009f77c9(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 67
    },
    "004010e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004010e6(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.0040106e(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.009f743e(arg_10h);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00401320(param_3);\n    return;\n}\n",
        "token_count": 164
    },
    "004011cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011cc(uint *arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    uint var_4h;\n    \n    uVar1 = arg_8h;\n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f6e55();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        arg_8h = puVar3;\n        if (7 < *(in_ECX + 0x18)) {\n            arg_8h = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.0040132f(puVar3 + uVar1 * 2, *(in_ECX + 0x18) - uVar1, arg_8h + (uVar1 + arg_ch) * 2, uVar2 - arg_ch);\n        fcn.00401320(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 303
    },
    "0040121c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040121c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7d09(8);\n    *(unaff_EBP + -0x14) = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    while (*(unaff_EBP + 0xc) != 0) {\n        fcn.00401113();\n        *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + -1;\n        *(unaff_EBP + 8) = *(unaff_EBP + 8) + 0x1c;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.009f7dae();\n    return;\n}\n",
        "token_count": 214
    },
    "00401230": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401230(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = arg_8h;\n        if (0xffffffff / arg_8h < 2) {\n            arg_8h = 0;\n            fcn.009f70b0(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f7772(&var_ch, 0xa2f620);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f770d(uVar2 * 2);\n    return;\n}\n",
        "token_count": 189
    },
    "004012b2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012b2(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f6e55();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        puVar1 = puVar3;\n        if (0xf < *(in_ECX + 0x18)) {\n            puVar1 = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.004014f1(puVar3 + arg_8h, *(in_ECX + 0x18) - arg_8h, puVar1 + arg_ch + arg_8h, uVar2 - arg_ch);\n        fcn.00401497(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 280
    },
    "0040132a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040132a(int32_t param_1, uint32_t param_2, uint param_3)\n\n{\n    if (*(param_1 + 0x28) == 0) {\n        param_2 = param_2 | 4;\n    }\n    fcn.004015c3(param_2, param_3);\n    return;\n}\n",
        "token_count": 83
    },
    "00401370": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.00401370(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (param_2 == 0xffffffff) {\n        fcn.009f6e1d();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.0040134d(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (0xf < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401497(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004013a7(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 227
    },
    "0040139d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040139d(int32_t *param_1)\n\n{\n    uint var_4h;\n    \n    if (*param_1 == 0) {\n        fcn.009f6588(0);\n        if (*param_1 == 0) {\n            *0xf0c5e0 = *0xf0c5e0 + 1;\n            *param_1 = *0xf0c5e0;\n        }\n        fcn.009f65b0();\n    }\n    return *param_1;\n}\n",
        "token_count": 122
    },
    "004013a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004013a7(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.00401438(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.009f743e(arg_10h);\n    }\n    *(param_1 + 0x18) = 0xf;\n    fcn.00401497(param_3);\n    return;\n}\n",
        "token_count": 167
    },
    "004013de": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.004013de(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (0xf < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            if (param_2 < *(param_1 + 0x14) + in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 198
    },
    "009f3fa0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f3fa0(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    \n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar3 = *0xa2b3f8;\n    if (((arg_14h & 1) != 0) && (iVar6 = **(in_ECX + 0x20),  iVar6 != 0)) {\n        if (arg_10h == 2) {\n            iVar4 = *(in_ECX + 0x3c);\ncode_r0x009f3fed:\n            arg_ch = arg_ch + (iVar4 - **(in_ECX + 0x10));\n        }\n        else if (arg_10h == 1) {\n            iVar4 = iVar6;\n            if ((arg_14h & 2) == 0) goto code_r0x009f3fed;\ncode_r0x009f3fff:\n            arg_ch = *0xa2b3f8;\n        }\n        else if (arg_10h != 0) goto code_r0x009f3fff;\n        if ((-1 < arg_ch) && (arg_ch <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar3 = (**(in_ECX + 0x10) - iVar6) + arg_ch;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar3;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar3;\n            iVar3 = arg_ch;\n            if ((arg_14h & 2) != 0) {\n                iVar6 = **(in_ECX + 0x24);\n                if (iVar6 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar2 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar2 + iVar6) - iVar4;\n                }\n            }\n        }\n        goto code_r0x009f40c0;\n    }\n    if (((arg_14h & 2) == 0) || (uVar1 = **(in_ECX + 0x24),  uVar1 == 0)) goto code_r0x009f40c0;\n    if (arg_10h == 2) {\n        uVar5 = *(in_ECX + 0x3c);\ncode_r0x009f407d:\n        iVar6 = arg_ch + (uVar5 - **(in_ECX + 0x10));\n    }\n    else {\n        uVar5 = uVar1;\n        if (arg_10h == 1) goto code_r0x009f407d;\n        iVar6 = *0xa2b3f8;\n        if (arg_10h == 0) {\n            iVar6 = arg_ch;\n        }\n    }\n    if ((-1 < iVar6) && (iVar6 <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n        iVar3 = (**(in_ECX + 0x10) - uVar1) + iVar6;\n        **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar3;\n        **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar3;\n        iVar3 = iVar6;\n    }\ncode_r0x009f40c0:\n    *arg_8h = iVar3;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 987
    },
    "00401465": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401465(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t arg_8h_00;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h_00 = 0;\n    }\n    else {\n        arg_8h_00 = arg_8h;\n        if (0xffffffff / arg_8h == 0) {\n            arg_8h = 0;\n            fcn.009f70b0(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f7772(&var_ch, 0xa2f620);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f770d(arg_8h_00);\n    return;\n}\n",
        "token_count": 198
    },
    "004014e2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.004014e2(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (0x7ffffffe < param_2) {\n        fcn.009f6e1d();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.004014ce(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (7 < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401320(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004010e6(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 228
    },
    "00401596": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.00401596(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (7 < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (7 < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            in_EAX = in_EAX + *(param_1 + 0x14) * 2;\n            if (param_2 < in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 208
    },
    "009f74fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f74fb(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa33d30) {\n        return;\n    }\n    *0xf0c7e0 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xf0c7e4 = &arg_8h;\n    *0xf0c720 = 0x10001;\n    *0xf0c6c8 = 0xc0000409;\n    *0xf0c6cc = 1;\n    var_328h = *0xa33d30;\n    var_324h = *0xa33d34;\n    *0xf0c6d4 = unaff_retaddr;\n    *0xf0c7ac = in_GS;\n    *0xf0c7b0 = in_FS;\n    *0xf0c7b4 = in_ES;\n    *0xf0c7b8 = in_DS;\n    *0xf0c7bc = unaff_EDI;\n    *0xf0c7c0 = unaff_ESI;\n    *0xf0c7c4 = unaff_EBX;\n    *0xf0c7c8 = in_EDX;\n    *0xf0c7cc = in_ECX;\n    *0xf0c7d0 = in_EAX;\n    *0xf0c7d4 = unaff_EBP;\n    *0xf0c7d8 = unaff_retaddr;\n    *0xf0c7dc = in_CS;\n    *0xf0c7e8 = in_SS;\n    *0xf0c718 = (**0xf0f268)();\n    fcn.009fbb4e(1);\n    (**0xf0f264)(0);\n    (**0xf0f260)(0xa2be00);\n    if (*0xf0c718 == 0) {\n        fcn.009fbb4e(1);\n    }\n    uVar1 = (**0xf0f25c)(0xc0000409);\n    (**0xf0f258)(uVar1);\n    return;\n}\n",
        "token_count": 834
    },
    "009f77c9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f77c9(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa2fc18, 0xc);\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 != 0) {\n        if (*0xf0e770 == 3) {\n            fcn.009fc489(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.009fc5b7(iVar1);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.009fc5e7(arg_8h_00, iVar1);\n            }\n            *(unaff_EBP + -4) = 0xfffffffe;\n            fcn.009f781f();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x009f7851;\n            iVar1 = *(unaff_EBP + 8);\n        }\n        iVar1 = (**0xf0f270)(*0xf0ca00, 0, iVar1);\n        if (iVar1 == 0) {\n            puVar2 = fcn.009faffc();\n            uVar3 = (**0xf0f22c)();\n            uVar3 = fcn.009fafba(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\ncode_r0x009f7851:\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 422
    },
    "009f79e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.009f79e6(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x9f7a91;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.009f7abd;\n        uStack36 = *0xa33d30 ^ &fcn.009f79e6::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.009f79e6::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.009fbe74();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.009f79e6::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 728
    },
    "009fd8ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009fd8ba(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fbe74();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.009fbe74();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "009fdf6b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdf6b(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.009f7c24(*(unaff_EBP + -0x28));\n    iVar1 = fcn.009fbe74();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.009fbe74();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.009f7bfd(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.009fd91a(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 381
    },
    "00a03934": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00a03a27: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a03a2c)\n// WARNING: Removing unreachable block (ram,0x00a03a5a)\n// WARNING: Removing unreachable block (ram,0x00a03a32)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a03934(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa30118, 0x18);\n    fcn.009fc489(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xf0cb9c != 1) {\n        *0xf0cb98 = 1;\n        *0xf0cb94 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.009fbbeb(*0xf0d2a8);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.009fbbeb(*0xf0d2a4);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.009fbbe2();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.009fbbeb(*piVar2);\n                        iVar3 = fcn.009fbbe2();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.009fbbeb(*0xf0d2a8);\n                        piVar1 = fcn.009fbbeb(*0xf0d2a4);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00a037f6(0xa2ab50);\n        }\n        fcn.00a037f6(0xa2ad58);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.009fc397(8);\n    }\n    return;\n}\n",
        "token_count": 807
    },
    "00a05c30": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00a05c30(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.009fc397(0);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00a0fdab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.00a0fdab(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint *puVar3;\n    int32_t *piVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    char *pcVar8;\n    uint var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    uint var_1h;\n    \n    puVar2 = *0xf0d14c;\n    uVar1 = **0xf0d14c;\n    if (uVar1 == 0) {\n        fcn.00a0c6e1(arg_8h, 1, arg_ch);\n        return arg_8h;\n    }\n    *0xf0d14c = *0xf0d14c + 1;\n    var_ch = 0;\n    uVar7 = uVar1;\n    var_8h = var_8h & 0xffff0000;\n    uVar6 = 0xffffffff;\n    var_1h._0_1_ = 0;\n    if (0x4e < uVar7) {\n        if (uVar7 == 0x4f) {\n            fcn.00a0c351(\"long \");\n            goto code_r0x00a1001f;\n        }\n        if (uVar7 < 0x50) goto code_r0x00a1000a;\n        if (uVar7 < 0x54) {\n            uVar6 = uVar7 & 3;\n            goto code_r0x00a1002c;\n        }\n        if (uVar7 == 0x58) {\n            pcVar8 = \"void\";\n            goto code_r0x00a0fff9;\n        }\n        if (uVar7 != 0x5f) goto code_r0x00a1000a;\n        var_1h._0_1_ = **0xf0d14c;\n        *0xf0d14c = puVar2 + 2;\n        uVar6 = var_1h;\n        if (uVar6 < 0x4c) {\n            if (uVar6 < 0x4a) {\n                if (uVar6 < 0x46) {\n                    if (uVar6 < 0x44) {\n                        if (uVar6 != 0) {\n                            if (uVar6 == 0x24) {\n                                uVar5 = fcn.00a0fdab(&var_1ch, arg_ch);\n                                fcn.00a0c705(arg_8h, \"__w64 \", uVar5);\n                                return arg_8h;\n                            }\n                            goto code_r0x00a0ffed;\n                        }\n                        *0xf0d14c = puVar2 + 1;\n                        fcn.00a0bdb2(1);\n                        goto code_r0x00a10035;\n                    }\n                    pcVar8 = \"__int8\";\n                }\n                else if (uVar6 < 0x46) {\ncode_r0x00a0ffed:\n                    pcVar8 = \"UNKNOWN\";\n                }\n                else if (uVar6 < 0x48) {\n                    pcVar8 = \"__int16\";\n                }\n                else {\n                    if (0x49 < uVar6) goto code_r0x00a0ffed;\n                    pcVar8 = \"__int32\";\n                }\n            }\n            else {\n                pcVar8 = \"__int64\";\n            }\n            goto code_r0x00a0fff9;\n        }\n        if (uVar6 < 0x4c) goto code_r0x00a0ffed;\n        if (uVar6 < 0x4e) {\n            pcVar8 = \"__int128\";\n        }\n        else if (uVar6 == 0x4e) {\n            pcVar8 = \"bool\";\n        }\n        else {\n            if (uVar6 == 0x4f) {\n                uVar6 = 0xfffffffe;\n                goto code_r0x00a0ff81;\n            }\n            if (uVar6 != 0x57) {\n                if (1 < uVar6 - 0x58) goto code_r0x00a0ffed;\n                puVar3 = &var_14h;\n                goto code_r0x00a0ff4a;\n            }\n            pcVar8 = \"wchar_t\";\n        }\n        goto code_r0x00a0fff9;\n    }\n    // switch table (11 cases) at 0xa1013f\n    switch(uVar7) {\n    case 0x43:\n    case 0x44:\n    case 0x45:\n        pcVar8 = \"char\";\n        break;\n    case 0x46:\n    case 0x47:\n        pcVar8 = \"short\";\n        break;\n    case 0x48:\n    case 0x49:\n        pcVar8 = 0xa2d94c;\n        break;\n    case 0x4a:\n    case 0x4b:\n        pcVar8 = \"long\";\n        break;\n    case 0x4c:\ncode_r0x00a1000a:\n        puVar3 = &var_24h;\ncode_r0x00a0ff4a:\n        *0xf0d14c = *0xf0d14c + -1;\n        piVar4 = fcn.00a0dfcf(puVar3);\n        var_8h = piVar4[1];\n        var_ch = *piVar4;\n        if (var_ch == 0) {\n            *arg_8h = 0;\n            arg_8h[1] = var_8h;\n            return arg_8h;\n        }\n        goto code_r0x00a10035;\n    case 0x4d:\n        pcVar8 = \"float\";\n        break;\n    default:\ncode_r0x00a1001f:\n        fcn.00a0c503(\"double\");\ncode_r0x00a1002c:\n        if (uVar6 != 0xffffffff) {\ncode_r0x00a0ff81:\n            var_14h = *arg_ch;\n            var_8h = var_8h & 0xffff0000;\n            var_10h = arg_ch[1];\n            var_ch = 0;\n            if (uVar6 != 0xfffffffe) {\n                if (*arg_ch == 0) {\n                    if ((uVar6 & 1) == 0) {\n                        if ((uVar6 & 2) != 0) {\n                            fcn.00a0c351(\"volatile\");\n                        }\n                    }\n                    else {\n                        fcn.00a0c351(\"const\");\n                        if ((uVar6 & 2) != 0) {\n                            fcn.00a0c503(\" volatile\");\n                        }\n                    }\n                }\n                fcn.00a0fc20(arg_8h, &var_ch, &var_14h);\n                return arg_8h;\n            }\n            var_10h = var_10h | 0x800;\n            fcn.00a0fb27(&var_1ch, &var_ch, &var_14h, 0);\n            if ((var_18h & 0x800) == 0) {\n                fcn.00a0c503(0xa2d3c0);\n            }\n            *arg_8h = var_1ch;\n            var_8h = var_18h;\n            goto code_r0x00a100d4;\n        }\n        goto code_r0x00a10035;\n    }\ncode_r0x00a0fff9:\n    fcn.00a0c351(pcVar8);\ncode_r0x00a10035:\n    if (uVar7 == 0x43) {\n        pcVar8 = \"signed \";\n        puVar3 = &var_14h;\ncode_r0x00a10095:\n        piVar4 = fcn.00a0c705(puVar3, pcVar8, &var_ch);\n        var_ch = *piVar4;\n        var_8h = piVar4[1];\n    }\n    else {\n        if ((((uVar7 == 0x45) || (uVar7 == 0x47)) || (uVar7 == 0x49)) || (uVar7 == 0x4b)) {\n            pcVar8 = \"unsigned \";\n            puVar3 = &var_1ch;\n            goto code_r0x00a10095;\n        }\n        if ((uVar7 == 0x5f) &&\n           (((var_1h == 0x45 || (var_1h == 0x47)) || ((var_1h == 0x49 || ((var_1h == 0x4b || (var_1h == 0x4d)))))))) {\n            pcVar8 = \"unsigned \";\n            puVar3 = &var_24h;\n            goto code_r0x00a10095;\n        }\n    }\n    if (*arg_ch != 0) {\n        uVar5 = fcn.00a0c6bd(&var_24h, 0x20, arg_ch);\n        fcn.00a0c27a(uVar5);\n    }\n    *arg_8h = var_ch;\ncode_r0x00a100d4:\n    arg_8h[1] = var_8h;\n    return arg_8h;\n}\n",
        "token_count": 2178
    },
    "00a170f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00a170f0(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.009fbbe2();\n    var_4h = 0;\n    if (*0xf0d1ac == 0) {\n        iVar2 = (**0xf0f354)(\"USER32.DLL\");\n        pcVar4 = *0xf0f220;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0xf0f220)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xf0d1ac = fcn.009fbb70(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0xf0d1b0 = fcn.009fbb70(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0xf0d1b4 = fcn.009fbb70(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0xf0d1bc = fcn.009fbb70(uVar3);\n        if (*0xf0d1bc != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0xf0d1b8 = fcn.009fbb70(uVar3);\n        }\n    }\n    if ((*0xf0d1b8 != iVar1) && (*0xf0d1bc != iVar1)) {\n        pcVar4 = fcn.009fbbeb(*0xf0d1b8);\n        pcVar5 = fcn.009fbbeb(*0xf0d1bc);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x00a17232;\n        }\n    }\n    if ((((*0xf0d1b0 != iVar1) && (pcVar4 = fcn.009fbbeb(*0xf0d1b0),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xf0d1b4 != iVar1 && (pcVar4 = fcn.009fbbeb(*0xf0d1b4),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x00a17232:\n    pcVar4 = fcn.009fbbeb(*0xf0d1ac);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 830
    },
    "004010af": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __thiscall fcn.004010af(uint param_1, uint8_t param_2)\n\n{\n    fcn.0040108c();\n    if ((param_2 & 1) != 0) {\n        fcn.009f743e(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 69
    },
    "00401131": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00401131(uint param_1)\n\n{\n    uint32_t unaff_ESI;\n    \n    fcn.004010e6(1, 0);\n    if ((unaff_ESI & 1) != 0) {\n        fcn.009f743e(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 77
    },
    "009f4124": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.009f4124(int32_t *arg_8h, int32_t arg_ch, uint noname_2, int32_t arg_14h, uint noname_4, uint noname_5, \n            uint noname_6, uint32_t arg_24h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    \n    arg_14h = arg_14h + arg_ch;\n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar4 = arg_14h;\n    if (arg_14h != *0xa2b3f8) {\n        iVar4 = *0xa2b3f8;\n        if (((arg_24h & 1) == 0) || (**(in_ECX + 0x20) == 0)) {\n            if (((arg_24h & 2) != 0) &&\n               (((uVar1 = **(in_ECX + 0x24),  uVar1 != 0 && (-1 < arg_14h)) &&\n                (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))))) {\n                iVar4 = (**(in_ECX + 0x10) - uVar1) + arg_14h;\n                **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar4;\n                **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar4;\n                iVar4 = arg_14h;\n            }\n        }\n        else if ((-1 < arg_14h) && (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar4 = (**(in_ECX + 0x10) - **(in_ECX + 0x20)) + arg_14h;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar4;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar4;\n            iVar4 = arg_14h;\n            if ((arg_24h & 2) != 0) {\n                iVar2 = **(in_ECX + 0x24);\n                if (iVar2 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar3 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar3 + iVar2) - iVar4;\n                    iVar4 = arg_14h;\n                }\n            }\n        }\n    }\n    *arg_8h = iVar4;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 752
    },
    "00401307": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.00401307(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if ((param_1 & 1) == 0) {\n        uVar1 = 4;\n    }\n    if ((param_1 & 2) == 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((param_1 & 8) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((param_1 & 4) != 0) {\n        uVar1 = uVar1 | 0x10;\n    }\n    return uVar1;\n}\n",
        "token_count": 156
    },
    "004013d4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004013d4(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint var_94h;\n    uint var_20h;\n    uint var_4h;\n    \n    var_4h = 0;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar1 = fcn.009f770d(0x18);\n        if (iVar1 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            fcn.00401532(*arg_ch + 0x18);\n            uVar2 = fcn.004013f7(&var_20h, 0);\n            iVar3 = fcn.00401573(uVar2);\n        }\n        *arg_8h = iVar3;\n        if (iVar1 != 0) {\n            fcn.00401082();\n            fcn.004013a7(1, 0);\n        }\n    }\n    return 2;\n}\n",
        "token_count": 243
    },
    "00401555": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401555(int32_t param_1)\n\n{\n    if ((*(param_1 + 0x40) & 1) != 0) {\n        fcn.009f743e(**(param_1 + 0x10));\n    }\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    **(param_1 + 0x14) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    *(param_1 + 0x40) = *(param_1 + 0x40) & 0xfffffffe;\n    *(param_1 + 0x3c) = 0;\n    return;\n}\n",
        "token_count": 205
    },
    "00a14b8c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a14b8c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa30400, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.009fb00f();\n        *puVar2 = 0;\n        puVar2 = fcn.009faffc();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xf0d2b8)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xf0d300;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00a187d0(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.009faffc();\n                    *puVar2 = 9;\n                    puVar2 = fcn.009fb00f();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00a14459(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.00a14c5e(0xa30400);\n                goto code_r0x00a14c58;\n            }\n        }\n        puVar2 = fcn.009fb00f();\n        *puVar2 = 0;\n        puVar2 = fcn.009faffc();\n        *puVar2 = 9;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n    }\ncode_r0x00a14c58:\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 639
    },
    "00401091": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_d0h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401091(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint arg_ch;\n    uint var_d0h;\n    uint var_48h;\n    int32_t var_3ch;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_24h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0x3e6;\n    iVar4 = 0;\n    if (var_3ch == 0x23c91b) {\n        (**0xf0f234)(0);\n        fcn.009f81c4(0xa35230, \"%s %c\", \"curohafebolorinacabizacowuta nerosozicixabu\");\n        fcn.00401591(3, 1);\n        fcn.00401267();\n        fcn.0040112c(\n                    L\"zudaze funugetayoyomajukagayoca koto povuzinulijapawubifamodikecesa be sobaboyajepegimazudejanihipiyi hi ducunaxejadosedosu fomogetujosexi vovesizeroparinejegumaki\"\n                    );\n        fcn.004011a4(&var_48h);\n        arg_ch = 1;\n        fcn.004010e6(1, 0);\n        fcn.009f809a(L\"lehupuzayonikopo mecopeweluhimorano\", arg_ch);\n        fcn.009f8018(0, 0, 0);\n        fcn.009f7ea4(0, 0);\n        fcn.004015c8();\n        fcn.009f743e(var_2ch);\n        fcn.00401492();\n    }\n    iVar3 = 0;\n    while( true ) {\n        (**0xf0f230)();\n        (**0xf0f22c)();\n        pcVar1 = *0xf0f218;\n        if (((0xe60ad9 < iVar3) && (var_24h != 'i')) && (var_30h != 0x16838de3)) break;\n        iVar3 = iVar3 + 1;\n        if (0xe4a4b34 < iVar3) {\ncode_r0x009f2e78:\n            iVar3 = 0;\n            do {\n                if (iVar3 == 0x516c56) {\n                    *0xe17274 = *0xa31414;\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x55bd1c);\n            *0xe17274 = *0xe17274 + 0x638b9;\n            *0xe12bf0 = (**0xf0f218)(0, *0xe17274);\n            *0xe12bf0 = (*pcVar1)(0, *0xe17274);\n            uVar2 = 0;\n            *0xe3dcc0 = *0xa31008;\n            if (*0xe17274 != 0) {\n                do {\n                    var_ch = *0xe3dcc0 + 0x638b9;\n                    *(uVar2 + *0xe12bf0) = *(var_ch + uVar2);\n                    uVar2 = uVar2 + 1;\n                } while (uVar2 < *0xe17274);\n            }\n            fcn.00401410(0xe12bf0, 0xe17274);\n            (**0xf0f228)(0xa35230, \"Virtual\");\n            (**0xf0f224)(0xa35230, \"Protect\");\n            *0xe0fd6c = (**0xf0f220)(*0xe136e4, 0xa35230);\n            var_8h = 0x40;\n            do {\n                if (iVar4 == 0x658c4) {\n                    (**0xe0fd6c)(*0xe12bf0, *0xe17274, var_8h, &var_ch);\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x667c97);\n            fcn.0040151e(*0xe12bf0, *0xe17274, 0xa31010);\n            return;\n        }\n    }\n    *0xe17258 = 0x9251f4de;\n    if (*0xe17274 == 0x187) {\n        *0xe136e0 = 0;\n        var_ch = *0xe136e0;\n    }\n    *0xe136b0 = 0xf5dec666;\n    var_14h = *0xe17258;\n    var_10h = *0xe136b0;\n    goto code_r0x009f2e78;\n}\n",
        "token_count": 1128
    },
    "00401410": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.00401410(int32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    uint unaff_EDI;\n    uchar auStackY4276 [4];\n    int32_t *piStackY4272;\n    uchar auStackY4268 [4];\n    uchar auStackY4264 [4];\n    uint uStackY4260;\n    uint uStackY4256;\n    uint32_t uStackY4252;\n    uint32_t *puStackY4248;\n    uint8_t uStackY4244;\n    uint8_t uStackY4243;\n    uint8_t uStackY4242;\n    uint8_t uStackY4241;\n    uint uStackY4240;\n    uint uStackY4236;\n    uint uStackY4232;\n    uint uStackY4228;\n    uint uStackY4224;\n    uint uStackY4220;\n    uint uStackY4216;\n    uint uStackY4212;\n    uint uStackY4208;\n    uint uStackY4204;\n    uint uStackY4200;\n    uint uStackY4196;\n    uint uStackY4192;\n    uint uStackY4188;\n    uint uStackY4184;\n    uint uStackY4180;\n    uint uStackY4176;\n    uint uStackY4172;\n    uint uStackY4168;\n    int32_t iStackY4164;\n    uint uStackY4160;\n    uint uStackY4156;\n    uint uStackY4152;\n    uint uStackY4148;\n    uint uStackY4144;\n    uint uStackY4140;\n    uint uStackY4136;\n    uint uStackY4132;\n    uint uStackY4128;\n    uint uStackY4124;\n    uint uStackY4120;\n    uint uStackY4116;\n    uint uStackY4112;\n    uint uStackY4108;\n    uchar auStackY4104 [2048];\n    uchar auStackY2056 [1992];\n    uint uStackY64;\n    char16_t *pcStackY60;\n    uchar *puStackY56;\n    uint uStackY52;\n    uchar *puStackY48;\n    uchar *puStackY44;\n    uchar *puStackY40;\n    uchar *puStackY36;\n    uint uStackY32;\n    uint uStackY28;\n    uint32_t uStackY24;\n    uint uStackY20;\n    \n    fcn.009f7510();\n    piStackY4272 = param_1;\n    puStackY4248 = param_2;\n    *0xe14aaf = 0x32;\n    *0xe0fd40 = 0;\n    *0xe14aab = 0x6e;\n    *0xe0fda0 = 0;\n    *0xe14aa9 = 0x65;\n    *0xe12bf4 = 0xf3f9f346;\n    *0xe14ab1 = 100;\n    *0xe11938 = 0;\n    *0xe1193c = 0;\n    *0xe14ab3 = 0x6c;\n    *0xe13680 = 0;\n    *0xe14aae = 0x33;\n    *0xe0fd9c = 0xd57c7618;\n    *0xe14ab0 = 0x2e;\n    *0xe0fd60 = 0xba248176;\n    *0xe0fd64 = 0xffffffff;\n    *0xe14ab2 = 0x6c;\n    *0xe136c0 = 0;\n    *0xe136c4 = 0;\n    *0xe14aa8 = 0x6b;\n    *0xe13670 = 0;\n    *0xe14aad = 0x6c;\n    *0xe1364c = 0xdafc2b0c;\n    *0xe14aac = 0x65;\n    *0xe12c10 = 0xbb6aa30c;\n    *0xe14aaa = 0x72;\n    *0xe13678 = 0;\n    *0xe1367c = 0;\n    uStackY20 = 0xe14aa8;\n    *0xe14ab4 = 0;\n    uStackY24 = 0x9f21de;\n    uStackY4200 = *0xe12c10;\n    uStackY4196 = *0xe13680;\n    uStackY4192 = *0xe13678;\n    uStackY4168 = *0xe0fd40;\n    uStackY4156 = *0xe12bf4;\n    uStackY4152 = *0xe0fd9c;\n    uStackY4148 = *0xe1364c;\n    uStackY4140 = *0xe136c0;\n    uStackY4136 = *0xe11938;\n    uStackY4120 = *0xe0fda0;\n    uStackY4116 = *0xe0fd60;\n    uStackY4112 = *0xe13670;\n    *0xe136e4 = (**0xf0f21c)();\n    *0xe136f2 = 0x6f;\n    *0xa43a88 = 0xb756ec50;\n    *0xe136f5 = 0x6c;\n    *0xe3dcd8 = 0;\n    *0xe136f6 = 0x41;\n    *0xa43a84 = 0;\n    *0xe136f3 = 0x62;\n    *0xe0fd74 = 0x8a2a9718;\n    *0xe136f9 = 0x6f;\n    *0xe0fda8 = 0;\n    *0xe0fdac = 0;\n    *0xe136f0 = 0x47;\n    *0xe1369c = 0xd855589a;\n    *0xe136f1 = 0x6c;\n    *0xe12c00 = 0;\n    *0xe12c04 = 0;\n    *0xe136f8 = 0x6c;\n    *0xe17268 = 0;\n    *0xe1726c = 0;\n    *0xe136f4 = 0x61;\n    *0xe13650 = 0;\n    *0xe13654 = 0;\n    *0xe136fa = 99;\n    *0xe0fd70 = 0;\n    *0xe136f7 = 0x6c;\n    *0xe13638 = 0;\n    *0xe1363c = 0;\n    *0xe136fb = 0;\n    uStackY24 = *param_2;\n    uStackY28 = 0;\n    uStackY32 = 0x9f24d5;\n    uStackY4188 = *0xe1369c;\n    uStackY4184 = *0xe13638;\n    uStackY4180 = *0xe3dcd8;\n    uStackY4176 = *0xa43a88;\n    uStackY4172 = *0xe0fd74;\n    uStackY4160 = *0xe0fda8;\n    uStackY4144 = *0xe0fd70;\n    uStackY4132 = *0xe17268;\n    uStackY4128 = *0xe13650;\n    uStackY4124 = *0xe12c00;\n    uStackY4108 = *0xa43a84;\n    iVar2 = (**0xf0f218)();\n    uVar4 = 0;\n    iStackY4164 = 4;\n    uStackY4252 = 0;\n    if (*puStackY4248 != 0) {\n        do {\n            puVar3 = *piStackY4272 + uStackY4252;\n            uVar1 = puVar3[3];\n            uStackY4228 = 2;\n            uStackY4244 = uVar1 << 2;\n            uStackY4240 = 0xc0;\n            uStackY4242 = *puVar3 | uStackY4244 & 0xc0;\n            uStackY4224 = 4;\n            uStackY4220 = 0xc0;\n            uStackY4243 = puVar3[1] | (uVar1 & 0xc) << 4;\n            uStackY4212 = 6;\n            uStackY4236 = 0xc0;\n            uStackY4241 = puVar3[2] | uVar1 << 6;\n            *(uVar4 + iVar2) = uStackY4242;\n            *(uVar4 + 1 + iVar2) = uStackY4243;\n            uStackY4216 = 0xb6f4c84c;\n            if (*0xe17274 == 0x34e) {\n                *0xe12c08 = 0;\n                *0xe12c0c = 0;\n                uStackY4260 = *0xe12c08;\n            }\n            uStackY4232 = 0xfaace874;\n            *0xa43a80 = uStackY4232;\n            *0xe13640 = uStackY4216;\n            *(uVar4 + 2 + iVar2) = uStackY4241;\n            *0xe0fd80 = 0xe0cdb12a;\n            *0xe0fd84 = 0xffffffff;\n            uStackY4208 = *0xe0fd80;\n            if (*0xe17274 == 0x390) {\n                uStackY32 = 0;\n                puStackY36 = &stack0xfffff7f8;\n                puStackY40 = &stack0xffffef4c;\n                puStackY44 = &stack0xffffef58;\n                puStackY48 = &stack0xffffef54;\n                uStackY52 = 0;\n                puStackY56 = &stack0xffffeff8;\n                pcStackY60 = L\"radafedanalonofonosolatomiji\";\n                uStackY64 = 0x9f28ad;\n                (**0xf0f214)();\n                *0xe3dcdc = 0x83df3254;\n                uStackY4256 = *0xe3dcdc;\n            }\n            *0xe0fd48 = 0xac276670;\n            uStackY4252 = uStackY4252 + iStackY4164;\n            uVar4 = uVar4 + 3;\n            uStackY4204 = *0xe0fd48;\n        } while (uStackY4252 < *puStackY4248);\n    }\n    *piStackY4272 = iVar2;\n    *puStackY4248 = uVar4;\n    uStackY20 = 0x9f299f;\n    fcn.009f74fb(unaff_EDI);\n    return;\n}\n",
        "token_count": 2461
    },
    "00a1bb50": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.00a1bb50(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 592
    },
    "004010be": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid __cdecl fcn.004010be(uint noname_0, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint32_t arg_ch_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t extraout_ECX;\n    int32_t iVar7;\n    int32_t extraout_ECX_00;\n    int32_t unaff_EBP;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_4h;\n    \n    fcn.009f7d75(0x34);\n    *(unaff_EBP + -0x40) = extraout_ECX;\n    *(unaff_EBP + -0x38) = *(unaff_EBP + 0x14);\n    uVar2 = fcn.004013b6();\n    arg_ch_00 = *(unaff_EBP + 0x10);\n    if (arg_ch_00 != 0) {\n        iVar3 = (*(extraout_ECX + 0x10) - *(extraout_ECX + 0xc)) / 0x1c;\n        iVar7 = 0x9249249;\n        if (0x9249249U - iVar3 < arg_ch_00) {\n            iVar3 = fcn.004011b3();\n            iVar7 = extraout_ECX_00;\n        }\n        uVar4 = iVar3 + arg_ch_00;\n        if (uVar2 < uVar4) {\n            if (iVar7 - (uVar2 >> 1) < uVar2) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = uVar2 + (uVar2 >> 1);\n            }\n            if (uVar2 < uVar4) {\n                uVar2 = uVar4;\n            }\n            uVar5 = fcn.004010b9(uVar2);\n            *(unaff_EBP + -0x34) = uVar5;\n            *(unaff_EBP + -0x3c) = uVar5;\n            *(unaff_EBP + -4) = 0;\n            uVar5 = fcn.00401366(*(extraout_ECX + 0xc), *(unaff_EBP + 0xc), uVar5);\n            *(unaff_EBP + -0x3c) = uVar5;\n            uVar5 = fcn.004014c9(uVar5, arg_ch_00, *(unaff_EBP + -0x38));\n            *(unaff_EBP + -0x3c) = uVar5;\n            fcn.00401366(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), uVar5);\n            *(unaff_EBP + -4) = 0xffffffff;\n            iVar7 = *(extraout_ECX + 0xc);\n            iVar3 = *(extraout_ECX + 0x10);\n            if (*(extraout_ECX + 0xc) != 0) {\n                fcn.0040128f(*(extraout_ECX + 0xc), *(extraout_ECX + 0x10));\n                fcn.009f743e(*(extraout_ECX + 0xc));\n            }\n            iVar1 = *(unaff_EBP + -0x34);\n            *(extraout_ECX + 0x14) = uVar2 * 0x1c + iVar1;\n            *(extraout_ECX + 0x10) = (arg_ch_00 + (iVar3 - iVar7) / 0x1c) * 0x1c + iVar1;\n            *(extraout_ECX + 0xc) = iVar1;\n        }\n        else {\n            if ((*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c < arg_ch_00) {\n                fcn.00401406(*(unaff_EBP + -0x38));\n                fcn.00401366(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc));\n                *(unaff_EBP + -4) = 2;\n                fcn.004014c9(*(extraout_ECX + 0x10), arg_ch_00 - (*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c, \n                             unaff_EBP + -0x30);\n                *(unaff_EBP + -4) = 0xffffffff;\n                *(extraout_ECX + 0x10) = *(extraout_ECX + 0x10) + arg_ch_00 * 0x1c;\n                fcn.0040133e(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10) + arg_ch_00 * -0x1c, unaff_EBP + -0x30);\n            }\n            else {\n                fcn.00401406(*(unaff_EBP + -0x38));\n                uVar5 = *(extraout_ECX + 0x10);\n                *(unaff_EBP + -0x34) = uVar5;\n                *(unaff_EBP + -0x34) = *(unaff_EBP + -0x34) + arg_ch_00 * -0x1c;\n                uVar6 = fcn.00401366(*(unaff_EBP + -0x34), uVar5, uVar5);\n                *(extraout_ECX + 0x10) = uVar6;\n                fcn.0040159b(*(unaff_EBP + 0xc), *(unaff_EBP + -0x34), uVar5);\n                fcn.0040133e(*(unaff_EBP + 0xc), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc), unaff_EBP + -0x30);\n            }\n            fcn.004010e6(1, 0);\n        }\n    }\n    fcn.009f7dd1();\n    return;\n}\n",
        "token_count": 1436
    },
    "0040134d": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040134d(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7d09(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 0xf;\n    if (uVar4 == 0xffffffff) {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    else {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= -uVar2 - 2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00401465(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 0x10) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.00401438(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004013a7(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401497(*(unaff_EBP + 0xc));\n    fcn.009f7dae();\n    return;\n}\n",
        "token_count": 592
    },
    "004014ce": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004014ce(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7d09(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 7;\n    if (uVar4 < 0x7fffffff) {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= 0x7ffffffe - uVar2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    else {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00401230(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 8) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.0040106e(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004010e6(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401320(*(unaff_EBP + 0xc));\n    fcn.009f7dae();\n    return;\n}\n",
        "token_count": 594
    },
    "00401339": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401339(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *extraout_EDX;\n    int32_t iVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if (0 < arg_ch) {\n        do {\n            uVar1 = fcn.00401415();\n            *extraout_EDX = *extraout_EDX ^ uVar1;\n            *0xe17250 = 0xfc7352ee;\n            *0xe17254 = 0xffffffff;\n            if (arg_ch == 0x649) {\n                *0xe3dcb8 = 0;\n                *0xe3dcbc = 0;\n            }\n            *0xa43a60 = 0xaa6d9b4e;\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 222
    },
    "0040151e": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040151e(uint arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe0fd94 = *arg_10h;\n    *0xe136d0 = 0xd15e210a;\n    *0xe136d4 = 0xffffffff;\n    if (*0xe17274 == 0x6dc) {\n        *0xe3dcb0 = 0xe2eeb842;\n        *0xe3dcb4 = 0xffffffff;\n    }\n    *0xa43a64 = 0xd885057e;\n    fcn.00401339(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 167
    },
    "00a1111b": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a1111b(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != unaff_ESI) {\n        if (*(unaff_EBP + -0x24) != unaff_ESI) {\n            puVar1 = *((*(unaff_EBP + -0x1c) >> 5) * 4 + 0xf0d300) + 4 + (*(unaff_EBP + -0x1c) & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a18870(*(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 207
    },
    "00a111f3": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a111f3(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0xf0d300) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a18870(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 191
    },
    "00a18b1f": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a18b1f(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0xf0d300) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.00a18870(unaff_ESI);\n    return;\n}\n",
        "token_count": 160
    },
    "00401037": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401037(int32_t param_1, int32_t param_2)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.00401131();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0040106e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040106e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00401145(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "009f65b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f65b0(int32_t *param_1)\n\n{\n    if (*param_1 < 4) {\n        fcn.009f6f6a(*param_1 * 0x18 + 0xf0c570);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "004010e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.004010e1(code **param_1, int32_t param_2)\n\n{\n    fcn.009f7120(param_2);\n    *param_1 = vtable.std::runtime_error.0;\n    fcn.00401532(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 76
    },
    "004010eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.004010eb(int32_t **param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    piVar1 = *param_1;\n    if (piVar1 == NULL) {\n        fcn.009f76d7();\n        piVar1 = *param_1;\n        if (piVar1 != NULL) goto code_r0x009f386b;\n        iVar2 = 0;\n    }\n    else {\ncode_r0x009f386b:\n        iVar2 = *piVar1;\n    }\n    piVar3 = param_1[1] + param_2 * 7;\n    if (piVar3 < *(iVar2 + 0x10) || piVar3 == *(iVar2 + 0x10)) {\n        if (piVar1 == NULL) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = *piVar1;\n        }\n        if (*(iVar2 + 0xc) <= piVar3) goto code_r0x009f3896;\n    }\n    fcn.009f76d7();\ncode_r0x009f3896:\n    param_1[1] = param_1[1] + param_2 * 7;\n    return param_1;\n}\n",
        "token_count": 305
    },
    "00401136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401136(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa2b170;\n        in_ECX[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_istream_char__struct_std::char_traits_char__.0;\n    in_ECX[1] = 0;\n    fcn.00401212(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 161
    },
    "00401145": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401145(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f6fc5(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 68
    },
    "00401177": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401177(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t unaff_EBP;\n    int32_t iVar1;\n    int32_t arg_8h_00;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_18h;\n    uint var_4h;\n    \n    fcn.009f7d75(0x30);\n    arg_8h_00 = *(unaff_EBP + 8);\n    iVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -0x34) = iVar1;\n    *(unaff_EBP + -0x38) = iVar1;\n    *(unaff_EBP + -0x18) = 7;\n    fcn.00401320(0);\n    *(unaff_EBP + -4) = 0;\n    while (arg_8h_00 != *(unaff_EBP + 0xc)) {\n        if (iVar1 != 0) {\n            fcn.00401406(unaff_EBP + -0x30);\n        }\n        fcn.00401384(arg_8h_00);\n        iVar1 = iVar1 + 0x1c;\n        *(unaff_EBP + -0x34) = iVar1;\n        arg_8h_00 = arg_8h_00 + 0x1c;\n        *(unaff_EBP + -0x3c) = arg_8h_00;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004010e6(1, 0);\n    fcn.009f7dd1();\n    return;\n}\n",
        "token_count": 411
    },
    "004011c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011c2(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.004013de(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.00401370(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 0x10) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.00401438(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401497(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 0x10) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.0040148d(in_ECX, arg_8h - iVar2, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 274
    },
    "0040126c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040126c(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint noname_3, uint arg_18h)\n\n{\n    uint var_4h;\n    \n    fcn.00401276(arg_8h, arg_ch, arg_10h);\n    return arg_10h + ((arg_ch - arg_8h) / 0x1c) * -0x1c;\n}\n",
        "token_count": 107
    },
    "0040128f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040128f(int32_t param_1, uint param_2, uint param_3)\n\n{\n    fcn.0040158c(param_2, param_3, param_1 + 8);\n    return;\n}\n",
        "token_count": 57
    },
    "00401294": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.00401294(code **param_1, int32_t param_2)\n\n{\n    fcn.009f7120(param_2);\n    *param_1 = vtable.std::logic_error.0;\n    fcn.00401532(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 75
    },
    "004012e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012e9(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t in_ECX;\n    uint var_10h;\n    \n    puVar1 = fcn.0040110e(&var_10h);\n    *(in_ECX + 8) = *puVar1;\n    *(in_ECX + 0xc) = puVar1[1];\n    *(in_ECX + 0x10) = puVar1[2];\n    *(in_ECX + 0x14) = puVar1[3];\n    return;\n}\n",
        "token_count": 131
    },
    "00401320": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401320(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 8) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2 * 2) = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "0040132f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040132f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040146a(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "0040133e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040133e(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.0040142e(param_3, 0, 0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "00401366": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401366(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.00401500(param_2, param_3, param_4, param_1 + 8);\n    return;\n}\n",
        "token_count": 64
    },
    "009f3c10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f3c10(int32_t arg_8h, int32_t arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    if (arg_14h < arg_ch - arg_8h) {\n        fcn.009f76d7();\n    }\n    fcn.009f6fc5(arg_10h, arg_14h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 110
    },
    "00401415": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint32_t fcn.00401415(void)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe0fd94 = *0xe0fd94 * 0x343fd + 0x269ec3;\n    return *0xe0fd94 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 82
    },
    "0040141a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040141a(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.00401596(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.004014e2(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 8) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.0040106e(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401320(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 8) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.0040142e(in_ECX, arg_8h - iVar2 >> 1, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 275
    },
    "00401424": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401424(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.0040121c(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 71
    },
    "0040142e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040142e(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f6e55();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.004011cc(arg_14h + arg_ch, 0xffffffff);\n        fcn.004011cc(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.004014e2(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 8) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 8) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.0040106e(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch * 2, arg_14h);\n            fcn.00401320(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 398
    },
    "00401438": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401438(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f6fc5(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "009f3c76": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f3c76(int32_t arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h, uint32_t arg_18h)\n\n{\n    if (arg_18h < arg_ch - arg_8h) {\n        fcn.009f76d7();\n    }\n    fcn.009f6fc5(arg_14h, arg_18h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 116
    },
    "0040146a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040146a(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f7042(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 68
    },
    "0040148d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040148d(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f6e55();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.004012b2(arg_14h + arg_ch, 0xffffffff);\n        fcn.004012b2(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.00401370(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 0x10) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 0x10) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.00401438(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch, arg_14h);\n            fcn.00401497(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 399
    },
    "00401497": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401497(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 0x10) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2) = 0;\n    return;\n}\n",
        "token_count": 111
    },
    "004014c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004014c9(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    fcn.00401424(arg_8h, arg_ch, arg_10h, in_ECX + 8);\n    return arg_ch * 0x1c + arg_8h;\n}\n",
        "token_count": 87
    },
    "004014f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004014f1(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f7042(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "00401500": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401500(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.00401177(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "0040158c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040158c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401037(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 60
    },
    "0040159b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040159b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.0040126c(arg_8h, arg_ch, arg_10h, arg_ch, arg_ch);\n    return;\n}\n",
        "token_count": 67
    },
    "009f368c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f368c(uint noname_0, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa2afd4;\n        in_ECX[1] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n    if (arg_ch != '\\0') {\n        fcn.009f6b41(*(*in_ECX + 4) + in_ECX);\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "009f660f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f660f(uint32_t arg_8h)\n\n{\n    fcn.009f6f5a((arg_8h & 3) * 0x18 + 0xf0c570);\n    return;\n}\n",
        "token_count": 56
    },
    "009f662b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f662b(uint32_t arg_8h)\n\n{\n    fcn.009f6f6a((arg_8h & 3) * 0x18 + 0xf0c570);\n    return;\n}\n",
        "token_count": 56
    },
    "009f7ea4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7ea4(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009f7de0(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 49
    },
    "009f8018": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8018(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f7f0e(fcn.009ff487, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 66
    },
    "009f8038": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8038(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f7f0e(fcn.009ff487, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 74
    },
    "009f8059": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8059(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f7f0e(fcn.00a0050e, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 68
    },
    "009f8079": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8079(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f7f0e(fcn.00a0050e, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 76
    },
    "009f809a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009f809a(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa2fc78, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.009fe9cc();\n        fcn.009feae4(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.009fe9cc();\n        arg_8h_00 = fcn.00a01632(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.009fe9cc();\n        uVar4 = fcn.00a017d1(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.009fe9cc();\n        fcn.00a016ce(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009f8136();\n    }\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 464
    },
    "009f8136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009f8136(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fe9cc();\n    fcn.009feb52(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 54
    },
    "009f8149": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8149(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a023f9(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f8162": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8162(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a02416(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009f817b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f817b(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a02416(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "009f8193": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8193(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a02433(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009f81ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f81ac(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a02433(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "009f82dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f82dd(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00a036ce(arg_8h, arg_ch, arg_10h, 0, &arg_14h);\n    return;\n}\n",
        "token_count": 68
    },
    "009f82fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f82fb(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a036ce(arg_8h, arg_ch, arg_10h, arg_14h, &arg_18h);\n    return;\n}\n",
        "token_count": 76
    },
    "009f8344": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8344(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a03364(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009f835d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f835d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0339d(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a02369": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a02369(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa300f8, 0x10);\n    iVar1 = fcn.009fe9cc();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009faffc();\n        *puVar2 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009feaa3(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00a01632(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.00a016ce(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a023f1();\n    }\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 443
    },
    "00a023f9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a023f9(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a02369(fcn.00a017d1, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a02416": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a02416(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a02369(fcn.00a1225d, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "00a02433": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a02433(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a02369(fcn.00a12ffb, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 61
    },
    "00a02450": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a02450(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a02369(fcn.00a017d1, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00a0246c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0246c(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a02369(fcn.00a1225d, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a02488": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a02488(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a02369(fcn.00a12ffb, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 53
    },
    "00a03348": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a03348(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a032f1(fcn.00a026c1, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a03364": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a03364(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a032f1(fcn.00a026c1, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a03381": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a03381(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a032f1(fcn.00a150a3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a0339d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0339d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a032f1(fcn.00a150a3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "00a03486": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a03486(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a033ba(fcn.00a026c1, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 110
    },
    "00a034af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a034af(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a033ba(fcn.00a026c1, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "00a036a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a036a5(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a033ba(fcn.00a150a3, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 111
    },
    "00a036ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a036ce(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a033ba(fcn.00a150a3, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "00a03837": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a03837(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf0cb90 == 0)) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf0cb90;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "00a03873": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a03873(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf0cb8c == 0)) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf0cb8c;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 153
    },
    "00a03a60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a03a60(uint arg_8h)\n\n{\n    fcn.00a03934(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "00a04247": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a04247(void)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = 0xa2f210;\n    do {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n        ppcVar1 = ppcVar1 + 1;\n    } while (ppcVar1 < 0xa2f310);\n    return;\n}\n",
        "token_count": 91
    },
    "00a097ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.00a097ed(int32_t *arg_8h, int32_t *arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg_10h == 0) {\n        return 0;\n    }\n    if (arg_10h == 1) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n    }\n    else if (arg_10h == 2) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n    }\n    else if (arg_10h == 3) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n    }\n    else {\n        if (arg_10h != 4) {\ncode_r0x00a09c9f:\n    // switch table (32 cases) at 0xa0aded\n            switch(arg_10h) {\n            case 0:\n                break;\n            case 1:\n                goto code_r0x00a0a480;\n            case 2:\n                goto code_r0x00a0a88c;\n            case 3:\n                goto code_r0x00a0acad;\n            case 4:\n                goto code_r0x00a0a011;\n            case 5:\n                goto code_r0x00a0a3f1;\n            case 6:\n                goto code_r0x00a0a7fd;\n            case 7:\n                goto code_r0x00a0ac1e;\n            case 8:\n                goto code_r0x00a09f82;\n            case 9:\n                goto code_r0x00a0a361;\n            case 10:\n                goto code_r0x00a0a76d;\n            case 0xb:\n                goto code_r0x00a0ab8f;\n            case 0xc:\n                goto code_r0x00a09ef2;\n            case 0xd:\n                goto code_r0x00a0a2d2;\n            case 0xe:\n                goto code_r0x00a0a6de;\n            case 0xf:\n                goto code_r0x00a0aaff;\n            case 0x10:\n                goto code_r0x00a09e63;\n            case 0x11:\n                goto code_r0x00a0a243;\n            case 0x12:\n                goto code_r0x00a0a64f;\n            case 0x13:\n                goto code_r0x00a0aa70;\n            case 0x14:\n                goto code_r0x00a09dd4;\n            case 0x15:\n                goto code_r0x00a0a1b4;\n            case 0x16:\n                goto code_r0x00a0a5c0;\n            case 0x17:\n                goto code_r0x00a0a9e1;\n            case 0x1a:\n                goto code_r0x00a0a531;\n            case 0x1b:\n                goto code_r0x00a0a952;\n            case 0x1c:\n                uVar1 = *(arg_8h + arg_10h + -0x1c);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1c)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x19) - *(arg_ch + arg_10h + -0x19);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x18:\n                uVar1 = *(arg_8h + arg_10h + -0x18);\n                if (uVar1 == *(arg_ch + arg_10h + -0x18)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x15) - *(arg_ch + arg_10h + -0x15);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a09dd4:\n                uVar1 = *(arg_8h + arg_10h + -0x14);\n                if (uVar1 == *(arg_ch + arg_10h + -0x14)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x11) - *(arg_ch + arg_10h + -0x11);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a09e63:\n                uVar1 = *(arg_8h + arg_10h + -0x10);\n                if (uVar1 == *(arg_ch + arg_10h + -0x10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xd) - *(arg_ch + arg_10h + -0xd);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a09ef2:\n                if (*(arg_8h + arg_10h + -0xc) == *(arg_ch + arg_10h + -0xc)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -9) - *(arg_ch + arg_10h + -9);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a09f82:\n                uVar1 = *(arg_8h + arg_10h + -8);\n                if (uVar1 == *(arg_ch + arg_10h + -8)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -8);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -5) - *(arg_ch + arg_10h + -5);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a011:\n                uVar1 = *(arg_8h + arg_10h + -4);\n                if (uVar1 == *(arg_ch + arg_10h + -4)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -4);\n                    if ((uVar1 == uVar2) || (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 == 0)) {\n                        uVar2 = *(arg_8h + arg_10h + -3);\n                        uVar1 = *(arg_ch + arg_10h + -3);\n                        if ((uVar2 == uVar1) || (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0))\n                        {\n                            uVar2 = *(arg_8h + arg_10h + -2);\n                            uVar1 = *(arg_ch + arg_10h + -2);\n                            if (((uVar2 == uVar1) ||\n                                (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0)) &&\n                               (iVar3 = *(arg_8h + arg_10h + -1) - *(arg_ch + arg_10h + -1),  iVar3 != 0)) {\n                                iVar3 = (0 < iVar3) * 2 + -1;\n                            }\n                        }\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n                break;\n            case 0x1d:\n                uVar1 = *(arg_8h + arg_10h + -0x1d);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1d)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1a) - *(arg_ch + arg_10h + -0x1a);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x19:\n                uVar1 = *(arg_8h + arg_10h + -0x19);\n                if (uVar1 == *(arg_ch + arg_10h + -0x19)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x16) - *(arg_ch + arg_10h + -0x16);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a1b4:\n                uVar1 = *(arg_8h + arg_10h + -0x15);\n                if (uVar1 == *(arg_ch + arg_10h + -0x15)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x12) - *(arg_ch + arg_10h + -0x12);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a243:\n                uVar1 = *(arg_8h + arg_10h + -0x11);\n                if (uVar1 == *(arg_ch + arg_10h + -0x11)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xe) - *(arg_ch + arg_10h + -0xe);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a2d2:\n                uVar1 = *(arg_8h + arg_10h + -0xd);\n                if (uVar1 == *(arg_ch + arg_10h + -0xd)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -10) - *(arg_ch + arg_10h + -10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a361:\n                if (*(arg_8h + arg_10h + -9) == *(arg_ch + arg_10h + -9)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -6) - *(arg_ch + arg_10h + -6);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a3f1:\n                uVar1 = *(arg_8h + arg_10h + -5);\n                if (uVar1 == *(arg_ch + arg_10h + -5)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -5);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -3);\n                    uVar1 = *(arg_ch + arg_10h + -3);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -2) - *(arg_ch + arg_10h + -2);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\njoined_r0x00a0a47a:\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a480:\n                uVar2 = *(arg_ch + arg_10h + -1);\n                uVar1 = *(arg_8h + arg_10h + -1);\n                if (uVar1 == uVar2) {\n                    return 0;\n                }\n                return (0 < uVar1 - uVar2) * 2 + -1;\n            case 0x1e:\n                uVar1 = *(arg_8h + arg_10h + -0x1e);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1e)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1b) - *(arg_ch + arg_10h + -0x1b);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a531:\n                uVar1 = *(arg_8h + arg_10h + -0x1a);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1a)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x17) - *(arg_ch + arg_10h + -0x17);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a5c0:\n                uVar1 = *(arg_8h + arg_10h + -0x16);\n                if (uVar1 == *(arg_ch + arg_10h + -0x16)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x13) - *(arg_ch + arg_10h + -0x13);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a64f:\n                uVar1 = *(arg_8h + arg_10h + -0x12);\n                if (uVar1 == *(arg_ch + arg_10h + -0x12)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xf) - *(arg_ch + arg_10h + -0xf);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a6de:\n                uVar1 = *(arg_8h + arg_10h + -0xe);\n                if (uVar1 == *(arg_ch + arg_10h + -0xe)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xb) - *(arg_ch + arg_10h + -0xb);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a76d:\n                if (*(arg_8h + arg_10h + -10) == *(arg_ch + arg_10h + -10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -7) - *(arg_ch + arg_10h + -7);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a7fd:\n                uVar1 = *(arg_8h + arg_10h + -6);\n                if (uVar1 == *(arg_ch + arg_10h + -6)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -6);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -3) - *(arg_ch + arg_10h + -3);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a88c:\n                if (*(arg_8h + arg_10h + -2) != *(arg_ch + arg_10h + -2)) {\ncode_r0x00a0a89a:\n                    uVar1 = *(arg_ch + arg_10h + -2);\n                    uVar2 = *(arg_8h + arg_10h + -2);\n                    if (uVar2 == uVar1) goto code_r0x00a0a480;\n                    iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1;\n                    goto joined_r0x00a0a47a;\n                }\n                break;\n            case 0x1f:\n                if (*(arg_8h + arg_10h + -0x1f) == *(arg_ch + arg_10h + -0x1f)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0x1f);\n                    uVar2 = *(arg_8h + arg_10h + -0x1f);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1e);\n                    uVar1 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1c) - *(arg_ch + arg_10h + -0x1c);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a952:\n                uVar1 = *(arg_8h + arg_10h + -0x1b);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1b)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x18) - *(arg_ch + arg_10h + -0x18);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0a9e1:\n                uVar1 = *(arg_8h + arg_10h + -0x17);\n                if (uVar1 == *(arg_ch + arg_10h + -0x17)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x14) - *(arg_ch + arg_10h + -0x14);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0aa70:\n                uVar1 = *(arg_8h + arg_10h + -0x13);\n                if (uVar1 == *(arg_ch + arg_10h + -0x13)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x10) - *(arg_ch + arg_10h + -0x10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0aaff:\n                if (*(arg_8h + arg_10h + -0xf) == *(arg_ch + arg_10h + -0xf)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xc) - *(arg_ch + arg_10h + -0xc);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0ab8f:\n                uVar1 = *(arg_8h + arg_10h + -0xb);\n                if (uVar1 == *(arg_ch + arg_10h + -0xb)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -8) - *(arg_ch + arg_10h + -8);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0ac1e:\n                uVar1 = *(arg_8h + arg_10h + -7);\n                if (uVar1 == *(arg_ch + arg_10h + -7)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -7);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -4) - *(arg_ch + arg_10h + -4);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0acad:\n                uVar2 = *(arg_8h + arg_10h + -3);\n                uVar1 = *(arg_ch + arg_10h + -3);\n                if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                    return iVar3;\n                }\n                goto code_r0x00a0a89a;\n            default:\n                goto code_r0x00a0982d;\n            }\n            return 0;\n        }\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 3);\n        uVar2 = *(arg_ch + 3);\n    }\n    iVar3 = uVar1 - uVar2;\n    if (iVar3 != 0) {\n        iVar3 = (0 < iVar3) * 2 + -1;\n    }\n    return iVar3;\ncode_r0x00a0982d:\n    if (*arg_8h == *arg_ch) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *arg_8h;\n        uVar1 = *arg_ch;\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 3) - *(arg_ch + 3);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[1] == arg_ch[1]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 7) - *(arg_ch + 7);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[2] == arg_ch[2]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 9);\n        uVar1 = *(arg_ch + 9);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 10);\n        uVar1 = *(arg_ch + 10);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xb) - *(arg_ch + 0xb);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[3] == arg_ch[3]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 3);\n        uVar1 = *(arg_ch + 3);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xd);\n        uVar1 = *(arg_ch + 0xd);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xe);\n        uVar1 = *(arg_ch + 0xe);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xf) - *(arg_ch + 0xf);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[4] == arg_ch[4]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar1 = *(arg_ch + 4);\n        uVar2 = *(arg_8h + 4);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x11);\n        uVar1 = *(arg_ch + 0x11);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x12);\n        uVar1 = *(arg_ch + 0x12);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x13) - *(arg_ch + 0x13);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[5] == arg_ch[5]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x15);\n        uVar1 = *(arg_ch + 0x15);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x16);\n        uVar1 = *(arg_ch + 0x16);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x17) - *(arg_ch + 0x17);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[6] == arg_ch[6]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x19);\n        uVar1 = *(arg_ch + 0x19);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1a);\n        uVar1 = *(arg_ch + 0x1a);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1b) - *(arg_ch + 0x1b);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[7] == arg_ch[7]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 7);\n        uVar1 = *(arg_ch + 7);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1d);\n        uVar1 = *(arg_ch + 0x1d);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1e);\n        uVar1 = *(arg_ch + 0x1e);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1f) - *(arg_ch + 0x1f);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    arg_8h = arg_8h + 8;\n    arg_ch = arg_ch + 8;\n    arg_10h = arg_10h + -0x20;\n    goto code_r0x00a09c9f;\n}\n",
        "token_count": 16584
    },
    "00a0c8c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00a0c8c3(uint *arg_8h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    char *arg_8h_00;\n    uint arg_8h_01;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = var_4h & 0xffff0000;\n    if (**0xf0d14c == '\\0') {\n        arg_8h_01 = 1;\ncode_r0x00a0c96a:\n        fcn.00a0bc89(arg_8h_01);\n        return arg_8h;\n    }\n    // switch table (8 cases) at 0xa0c977\n    switch(**0xf0d14c) {\n    case '0':\n    case '1':\n        arg_8h_00 = \"char \";\n        break;\n    case '2':\n    case '3':\n        arg_8h_00 = \"short \";\n        break;\n    case '4':\n        goto code_r0x00a0c919;\n    case '5':\n        arg_8h_00 = \"int \";\n        break;\n    case '6':\n    case '7':\n        arg_8h_00 = \"long \";\n        break;\n    default:\n        arg_8h_01 = 2;\n        goto code_r0x00a0c96a;\n    }\n    fcn.00a0c351(arg_8h_00);\ncode_r0x00a0c919:\n    cVar1 = **0xf0d14c;\n    *0xf0d14c = *0xf0d14c + 1;\n    if ((((cVar1 == '1') || (cVar1 == '3')) || (cVar1 == '5')) || (cVar1 == '7')) {\n        puVar2 = fcn.00a0c705(&var_10h, \"unsigned \", &var_8h);\n        var_8h = *puVar2;\n        var_4h = puVar2[1];\n    }\n    *arg_8h = var_8h;\n    arg_8h[1] = var_4h;\n    return arg_8h;\n}\n",
        "token_count": 514
    },
    "00a11155": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a11155(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa30360, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.00a10980(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a111f3();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 455
    },
    "00a11221": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a11221(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = fcn.00a11155(arg_8h, arg_ch, arg_10h, arg_14h, &var_4h, 0);\n    if (iVar1 != 0) {\n        return 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 123
    },
    "00a11253": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a11253(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a11155(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 78
    },
    "00a1204f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a1204f(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fe9cc();\n    fcn.009feb52(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 55
    },
    "00a12062": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a12062(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19ccf(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a1207b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1207b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19cec(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a12094": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a12094(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19cec(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "00a120ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a120ac(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19d09(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a120c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a120c5(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19d09(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "00a17565": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a17565(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa34b44;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a1759e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1759e(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa34b48;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "00a175d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a175d7(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa34b40;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "00a19887": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a19887(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009faffc();\n        *puVar1 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf0d280;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a19c3f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a19c3f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa305e8, 0x10);\n    iVar1 = fcn.009fe9cc();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009faffc();\n        *puVar2 = 0x16;\n        fcn.009f76b1(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009feaa3(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00a01632(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.00a016ce(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a19cc7();\n    }\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 445
    },
    "00a19ccf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19ccf(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19c3f(fcn.00a026c1, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "00a19cec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19cec(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19c3f(fcn.00a16409, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a19d09": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19d09(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19c3f(fcn.00a150a3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "00a19d26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19d26(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19c3f(fcn.00a026c1, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 57
    },
    "00a19d42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19d42(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19c3f(fcn.00a16409, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "00a19d5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19d5e(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19c3f(fcn.00a150a3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 58
    },
    "009f7928": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009f7928(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.009fe7fd(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 111
    },
    "004011a4": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011a4(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    arg_8h_00 = *(in_ECX + 0x10);\n    var_8h = in_ECX;\n    var_4h = in_ECX;\n    uVar1 = fcn.004013b6();\n    if ((arg_8h_00 - *(in_ECX + 0xc)) / 0x1c < uVar1) {\n        uVar2 = fcn.004014c9(arg_8h_00, 1, arg_8h);\n        *(in_ECX + 0x10) = uVar2;\n    }\n    else {\n        fcn.0040119a(arg_8h_00);\n        fcn.004012df(&var_8h, var_8h, var_4h, arg_8h);\n    }\n    return;\n}\n",
        "token_count": 249
    },
    "00401276": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401276(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    if (arg_8h != arg_ch) {\n        do {\n            arg_10h = arg_10h + -0x1c;\n            arg_ch = arg_ch + -0x1c;\n            fcn.00401384(arg_ch);\n        } while (arg_ch != arg_8h);\n    }\n    return arg_10h;\n}\n",
        "token_count": 112
    },
    "00401384": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.00401384(int32_t arg_8h)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    uint var_14h;\n    uint var_4h;\n    \n    if (in_ECX != arg_8h) {\n        var_14h = *(in_ECX + 4);\n        uVar1 = *(in_ECX + 8);\n        uVar2 = *(in_ECX + 0xc);\n        uVar3 = *(in_ECX + 0x10);\n        *(in_ECX + 4) = *(arg_8h + 4);\n        *(in_ECX + 8) = *(arg_8h + 8);\n        *(in_ECX + 0xc) = *(arg_8h + 0xc);\n        *(in_ECX + 0x10) = *(arg_8h + 0x10);\n        *(arg_8h + 4) = var_14h;\n        *(arg_8h + 8) = uVar1;\n        *(arg_8h + 0xc) = uVar2;\n        *(arg_8h + 0x10) = uVar3;\n        uVar1 = *(in_ECX + 0x14);\n        *(in_ECX + 0x14) = *(arg_8h + 0x14);\n        *(arg_8h + 0x14) = uVar1;\n        uVar1 = *(in_ECX + 0x18);\n        *(in_ECX + 0x18) = *(arg_8h + 0x18);\n        *(arg_8h + 0x18) = uVar1;\n    }\n    fcn.009f74fb(var_14h);\n    return;\n}\n",
        "token_count": 420
    },
    "004010fa": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004010fa(int32_t param_1)\n\n{\n    *(param_1 + 0x20) = param_1 + 0x18;\n    *(param_1 + 0x24) = param_1 + 0x1c;\n    *(param_1 + 0x30) = param_1 + 0x28;\n    *(param_1 + 0x10) = param_1 + 8;\n    *(param_1 + 0x34) = param_1 + 0x2c;\n    *(param_1 + 0x14) = param_1 + 0xc;\n    *(param_1 + 0xc) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 241
    },
    "00401267": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401267(int32_t param_1)\n\n{\n    fcn.004012f3();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return param_1;\n}\n",
        "token_count": 80
    },
    "00401271": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401271(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    *(param_1 + 0x24) = 0;\n    *(param_1 + 4) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0x201;\n    *(param_1 + 0x14) = 6;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    fcn.004015c3(0, 0);\n    iVar1 = fcn.009f770d(4);\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.004015dc();\n    }\n    *(param_1 + 0x24) = uVar2;\n    return;\n}\n",
        "token_count": 237
    },
    "004015c8": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004015c8(int32_t param_1)\n\n{\n    if (*(param_1 + 0xc) != 0) {\n        fcn.0040128f(*(param_1 + 0xc), *(param_1 + 0x10));\n        fcn.009f743e(*(param_1 + 0xc));\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 129
    },
    "00a1afdd": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00a1afdd(void)\n\n{\n    *0xa34d64 = (**0xf0f340)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 57
    },
    "004015c3": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004015c3(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint *arg_8h_00;\n    int32_t in_ECX;\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    char *pcVar2;\n    uint arg_ch_00;\n    code *var_44h;\n    uint var_1ch;\n    \n    *(in_ECX + 8) = arg_8h & 0x17;\n    uVar1 = *(in_ECX + 0xc) & arg_8h & 0x17;\n    if (uVar1 != 0) {\n        arg_8h_00 = NULL;\n        if (arg_ch == '\\0') goto code_r0x009f58e6;\n        arg_ch_00 = 0;\n        do {\n            fcn.009f7772(arg_8h_00, arg_ch_00);\n            uVar1 = extraout_ECX;\ncode_r0x009f58e6:\n            if ((uVar1 & 4) == 0) {\n                if ((uVar1 & 2) == 0) {\n                    pcVar2 = \"ios_base::eofbit set\";\n                }\n                else {\n                    pcVar2 = \"ios_base::failbit set\";\n                }\n            }\n            else {\n                pcVar2 = \"ios_base::badbit set\";\n            }\n            fcn.0040155a(pcVar2);\n            fcn.00401235(&var_1ch);\n            var_44h = vtable.std::ios_base::failure.0;\n            arg_ch_00 = 0xa2f868;\n            arg_8h_00 = &var_44h;\n        } while( true );\n    }\n    return;\n}\n",
        "token_count": 391
    },
    "009fb650": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fb650(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa2fda8, 0xc);\n    fcn.009fc489(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf0c6c0;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf0c6bc;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fb694;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f77c9(arg_8h_00);\ncode_r0x009fb694:\n        fcn.009f77c9(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fb6b7();\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 399
    },
    "009fb7b5": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fb7b5(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fd4dc(0xa2fde8, 0xc);\n    fcn.009fc489(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf0c6c0;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf0c6bc;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fb7f9;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f77c9(arg_8h_00);\ncode_r0x009fb7f9:\n        fcn.009f77c9(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fb81c();\n    fcn.009fd521();\n    return;\n}\n",
        "token_count": 404
    },
    "00a1739c": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1739c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0xf0f358)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 65
    }
}