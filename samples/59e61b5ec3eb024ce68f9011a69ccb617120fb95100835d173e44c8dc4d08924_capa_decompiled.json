{
    "10001120": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nvoid __cdecl fcn.10001120(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    uint var_bp_ch;\n    \n    *(arg_8h + arg_10h) = *(arg_ch + arg_10h) - arg_14h;\n    return;\n}\n",
        "token_count": 93
    },
    "100065c0": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Removing unreachable block (ram,0x10006656)\n\nint32_t __cdecl fcn.100065c0(char *arg_8h)\n\n{\n    uint var_bp_ch;\n    \n    return *arg_8h + '\\x01';\n}\n",
        "token_count": 71
    },
    "100072d0": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x10007320)\n\nuint __cdecl fcn.100072d0(int32_t arg_8h)\n\n{\n    uint uStack20;\n    uint var_bp_8h;\n    \n    if (arg_8h == 0) {\n        uStack20 = fcn.10005a80();\n    }\n    else {\n        uStack20 = fcn.10005090(arg_8h, 0);\n    }\n    return uStack20;\n}\n",
        "token_count": 125
    },
    "100011e0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100011e0(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*0x1002d344 != NULL)) {\n        (**0x1002d344)(arg_8h, arg_8h);\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "10001230": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x10001407) overlaps instruction at (ram,0x10001404)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Removing unreachable block (ram,0x1000131e)\n// WARNING: Removing unreachable block (ram,0x10001320)\n// WARNING: Removing unreachable block (ram,0x10001352)\n// WARNING: Removing unreachable block (ram,0x10001b2d)\n// WARNING: Type propagation algorithm not settling\n\nuint fcn.10001230(void)\n\n{\n    unkbyte6 *pVar1;\n    uint8_t *puVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    code *pcVar5;\n    unkbyte6 Var6;\n    int64_t iVar7;\n    char cVar8;\n    uchar uVar9;\n    int16_t iVar10;\n    char *pcVar11;\n    char **ppcVar12;\n    uint32_t uVar13;\n    uint uVar14;\n    char *pcVar15;\n    uint32_t uVar16;\n    uint32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    int32_t extraout_ECX_01;\n    int32_t iVar17;\n    int32_t extraout_ECX_02;\n    char extraout_DL;\n    char extraout_DH;\n    uint32_t extraout_EDX;\n    uint8_t uVar19;\n    int32_t iVar18;\n    uchar *puVar20;\n    uint *puVar21;\n    int32_t iVar22;\n    uchar *puVar23;\n    int32_t iVar24;\n    uint *puVar26;\n    int32_t iVar27;\n    uchar *puVar28;\n    uint *puVar29;\n    uint *puVar30;\n    uchar *puVar31;\n    uint *puVar32;\n    uchar *puVar33;\n    uint *puVar34;\n    uint *puVar35;\n    char **unaff_ESI;\n    int32_t unaff_EDI;\n    uchar *puVar36;\n    uchar *puVar37;\n    ushort in_ES;\n    uint8_t uVar38;\n    uint8_t in_AF;\n    bool bVar39;\n    bool bVar40;\n    bool bVar41;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    ushort in_FPUStatusWord;\n    int32_t iStack176;\n    uchar uStack34;\n    uchar uStack33;\n    uint *puVar25;\n    \n    puVar35 = &stack0xfffffffc;\n    iVar10 = (*_sym.imp.KERNEL32.dll_GetSystemDefaultLangID)();\n    uVar13 = iVar10;\n    *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n    out(0x4e, iVar10);\n    cVar8 = iStack176 + '\\x04';\n    puVar36 = unaff_EDI + 1;\n    iVar18 = CONCAT41(0x721d3e2f, uStack33);\n    if (puVar36 < 0) {\n        if (0x9cf62e7b < uVar13 && puVar36 != NULL) {\n            pcVar5 = swi(0xee);\n            uVar9 = (*pcVar5)();\n            *puVar36 = uVar9;\n            pcVar5 = swi(3);\n            uVar14 = (*pcVar5)();\n            return uVar14;\n        }\n        *(iStack176 + 4) = *(iStack176 + 4) + cVar8;\n        pcVar11 = iVar18 + -0x3dc6fe1e;\n        *pcVar11 = *pcVar11 + cVar8;\n        pcVar5 = _sym.imp.RPCRT4.dll_RpcEpRegisterW;\n        if (*pcVar11 == '\\0') {\n            puVar31 = uVar13 + 0x6309d180;\n            *(uVar13 + 0x6309d180) = 0x10001a06;\n            iVar10 = (*pcVar5)();\n            uVar13 = iVar10;\n            *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n            out(0x4e, iVar10);\n            iVar17 = extraout_ECX_01;\n            while( true ) {\n                uVar16 = uVar13 + 0x6309d184;\n                puVar32 = *puVar31;\n                puVar30 = puVar32 + 4;\n                puVar36 = puVar36 + 1;\n                bVar39 = puVar36 == NULL;\n                if (puVar36 < 0) break;\n                while( true ) {\n                    pcVar11 = uVar16 + 0x6309d184;\n                    puVar29 = *puVar30;\n                    puVar26 = puVar29 + 4;\n                    puVar36 = puVar36 + 1;\n                    iVar18 = *(puVar35 + -0x1d);\n                    if (puVar36 < 0) break;\ncode_r0x10001b22:\n                    pcVar15 = puVar26 + iVar18 * 2 + -0x1ca23ab9;\n                    uVar38 = *pcVar15 != '\\0';\n                    *pcVar15 = -*pcVar15;\n                    if (-1 < *pcVar15) goto code_r0x10001ba3;\n                    *pcVar11 = *pcVar11 + pcVar11;\n                    if ((pcVar11 & 1) != 0) {\n                        *(puVar26 + 0x94) = *(puVar26 + 0x34) + 0x2101d65a;\n                        uVar13 = *(puVar26 + 0x48) < 0x48d2d9d9;\n                        *(puVar26 + 0x10) = *(puVar26 + 0x48) + 0xb72d2627;\n                        *(puVar26 + 0xc) = *(puVar26 + 0x4c) - uVar13;\n                        puVar34 = puVar26;\n                        if (uVar13 <= *(puVar26 + 0x4c)) {\n                            *(puVar26 + 0x94) = *(puVar26 + 0x34) * *(puVar26 + 0x34);\n                            *(puVar26 + 0x7c) = 4;\n                            goto code_r0x100012e5;\n                        }\ncode_r0x10001521:\n                        *(puVar34 + 0x9b) = *(puVar34 + 0x33) ^ 0xff;\n                        if (*(puVar34 + 0x44) == 0) {\n                            *(puVar34 + 0x8e) = *(puVar34 + 0x3a) ^ 0xd3e0;\n                            pcVar5 = _sym.imp.USER32.dll_EnumThreadWindows;\n                            puVar33 = puVar34 + -4;\n                            *(puVar34 + -4) = 0x10001be4;\n                            iVar10 = (*pcVar5)();\n                            pcVar11 = iVar10;\n                            *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                            out(0x4e, iVar10);\n                            bVar39 = pcVar11 < 0x9cf62e7c;\n                            puVar34 = *puVar33 + 4;\n                            puVar36 = puVar36 + 1;\n                            bVar41 = puVar36 < 0;\n                            bVar40 = puVar36 == NULL;\n                            uVar13 = *(puVar35 + -0x1d);\n                            goto code_r0x10001bfd;\n                        }\n                        *(puVar34 + 0x7c) = 1;\n                        goto code_r0x100012e5;\n                    }\n                    while( true ) {\n                        pcVar5 = _sym.imp.SHLWAPI.dll_ColorRGBToHLS;\n                        puVar28 = puVar26 + -4;\n                        *(puVar26 + -4) = 0x10001831;\n                        iVar10 = (*pcVar5)();\n                        uVar13 = iVar10;\n                        *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                        out(0x4e, iVar10);\n                        pcVar11 = uVar13 + 0x6309d184;\n                        puVar29 = *puVar28;\n                        puVar37 = puVar36 + 1;\n                        if (puVar37 >= 0) break;\n                        if (0x9cf62e7b < uVar13 && puVar37 != NULL) {\n                            pcVar5 = swi(0xee);\n                            uVar9 = (*pcVar5)();\n                            *puVar37 = uVar9;\n                            pcVar5 = swi(3);\n                            uVar14 = (*pcVar5)();\n                            return uVar14;\n                        }\n                        if (puVar37 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n                            halt_baddata();\n                        }\n                        if (puVar37 < 0) {\n                            *pcVar11 = *pcVar11 + pcVar11;\n                            unaff_ESI = puVar29[0x1f];\n                            pcVar11 = ~pcVar11;\n                            puVar29[0x22] = ~extraout_EDX;\n                        }\n                        else {\n                            puVar2 = extraout_ECX_00 + 0x842494;\n                            uVar38 = extraout_ECX_00 & 7;\n                            *puVar2 = *puVar2 >> uVar38 | *puVar2 << 8 - uVar38;\n                            *pcVar11 = *pcVar11 + pcVar11;\n                        }\n                        puVar29[0x21] = pcVar11;\n                        pcVar5 = _sym.imp.RPCRT4.dll_RpcServerRegisterIfEx;\n                        if (unaff_ESI == NULL) goto code_r0x10001ad1;\n                        *puVar29 = 0x1000134c;\n                        iVar10 = (*pcVar5)();\n                        uVar13 = iVar10;\n                        *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                        out(0x4e, iVar10);\n                        pcVar11 = uVar13 + 0x6309d184;\n                        iVar22 = *puVar29;\n                        puVar26 = iVar22 + 4;\n                        puVar34 = iVar22 + 4;\n                        puVar21 = iVar22 + 4;\n                        puVar36 = puVar36 + 2;\n                        if (puVar36 < 0) {\n                            if (0x9cf62e7b < uVar13 && puVar36 != NULL) {\n                                pcVar5 = swi(0xee);\n                                uVar9 = (*pcVar5)();\n                                *puVar36 = uVar9;\n                                pcVar5 = swi(3);\n                                uVar14 = (*pcVar5)();\n                                return uVar14;\n                            }\n                            *pcVar11 = *pcVar11 + pcVar11;\n                            *(uVar13 + 0x6309d124) = *(uVar13 + 0x6309d124) + extraout_DL;\n                            while( true ) {\n                                pcVar5 = _sym.imp.KERNEL32.dll_SetPriorityClass;\n                                puVar23 = puVar21 + -4;\n                                *(puVar21 + -4) = 0x100013af;\n                                iVar10 = (*pcVar5)();\n                                uVar13 = iVar10;\n                                *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                                out(0x4e, iVar10);\n                                ppcVar12 = uVar13 + 0x6309d184;\n                                iVar24 = *puVar23;\n                                puVar25 = iVar24 + 4;\n                                puVar36 = puVar36 + 1;\n                                if (puVar36 < 0) {\n                                    if (0x9cf62e7b < uVar13 && puVar36 != NULL) {\n                                        pcVar5 = swi(0xee);\n                                        uVar9 = (*pcVar5)();\n                                        *puVar36 = uVar9;\n                                        pcVar5 = swi(3);\n                                        uVar14 = (*pcVar5)();\n                                        return uVar14;\n                                    }\n                                    *ppcVar12 = *ppcVar12 + ppcVar12;\n                                    *(uVar13 + 0x87565c36) = *(uVar13 + 0x87565c36) + extraout_DH;\n                                    puVar34 = iVar24 + 4;\n                                    *(iVar24 + 4) = puVar35;\n                                    cVar8 = '\\x03';\n                                    do {\n                                        puVar35 = puVar35 + -1;\n                                        puVar34 = puVar34 + -1;\n                                        *puVar34 = *puVar35;\n                                        cVar8 = cVar8 + -1;\n                                    } while ('\\0' < cVar8);\n                                    *(iVar24 + -0xc) = iVar24 + 4;\n                                    puVar25 = iVar24 + -0x5496;\n                                    puVar35 = iVar24 + 4;\n                                }\n                                else {\n                                    *ppcVar12 = *ppcVar12 + ppcVar12;\n                                }\ncode_r0x10001402:\n                                *(puVar25 + 0x27) = 0xb2;\n                                *(puVar25 + 0x9b) = *(puVar25 + 0x33) * *(puVar25 + 0x27);\n                                *(puVar25 + 0x8e) = *(puVar25 + 0x3a) + 0x27b3;\n                                unaff_ESI = unaff_ESI & 0xffff0000 | *(puVar25 + 0x3a) + 0xd820U;\n                                *(puVar25 + 0x8e) = *(puVar25 + 0x3a) + 0xd820U;\n                                if ((*(puVar25 + 0x3c) & 1) != 0) break;\n                                *(puVar25 + 0x9b) = *(puVar25 + 0x33) + '\\x1f';\n                                pcVar5 = _sym.imp.KERNEL32.dll_GetTempFileNameA;\n                                puVar20 = puVar25 + -4;\n                                *(puVar25 + -4) = 0x10001303;\n                                iVar10 = (*pcVar5)();\n                                *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                                out(0x4e, iVar10);\n                                pcVar11 = iVar10 + 0x6309d184;\n                                puVar21 = *puVar20 + 4;\n                                puVar36 = 0x1;\n                                cVar8 = pcVar11;\n                                *pcVar11 = *pcVar11 + cVar8;\n                                *pcVar11 = *pcVar11 + cVar8;\n                                *pcVar11 = *pcVar11 + cVar8;\ncode_r0x1000139c:\n                                *(puVar21 + 0x80) = 0x118aa050;\n                            }\n                            *(puVar25 + 0x7c) = 1;\n                            *(puVar25 + 0x9b) = -0x57 - *(puVar25 + 0x33);\n                            puVar34 = puVar25;\n                            goto code_r0x100012e5;\n                        }\n                        unaff_ESI = *(iVar22 + 0x7c) & 1;\n                        *(iVar22 + 0x48) = unaff_ESI;\n                        if ((pcVar11 & 0xffffff78) - *(iVar22 + 0x94) <= extraout_ECX) goto code_r0x10001521;\n                    }\n                    pcVar15 = uVar13 + 0xc613a308;\n                    puVar30 = puVar29[1];\n                    puVar21 = puVar30 + 1;\n                    puVar36 = puVar36 + 2;\n                    Var6 = *(puVar35 + -0x1d);\n                    if (-1 < puVar36) {\n                        uVar38 = pcVar15 + *pcVar15;\n                        uVar16 = CONCAT22(Var6 >> 0x10, CONCAT11((Var6 >> 8) + uVar38, Var6));\n                        uVar13 = uVar38 & 0xffffff7c;\n                        pcVar11 = pcVar15 & 0xffffff00 | uVar13;\n                        *(puVar30 + 1) = in_ES;\n                        *pcVar11 = *pcVar11 + uVar13;\n                        puVar3 = uVar16 + 0x35342444;\n                        uVar13 = *puVar3;\n                        *puVar3 = *puVar3 - 1;\n                        *(puVar30 + -3) =\n                             (in_NT & 1) * 0x4000 | SBORROW4(uVar13, 1) * 0x800 | (in_IF & 1) * 0x200 |\n                             (in_TF & 1) * 0x100 | (*puVar3 < 0) * 0x80 | (*puVar3 == 0) * 0x40 | (in_AF & 1) * 0x10 |\n                             ((POPCOUNT(*puVar3 & 0xff) & 1U) == 0) * 4 | 1 | (in_ID & 1) * 0x200000 |\n                             (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n                        pcVar11 = *unaff_ESI;\n                        unaff_ESI[1] = unaff_ESI[1] & 0x94248489;\n                        *pcVar11 = *pcVar11 + pcVar11;\n                        uVar38 = *((uVar16 & 0xffffff00 | Var6 + 0x43) + 0x21342444) ^ 0x6a;\n                        puVar36 = (uVar38 | 0x4ee64300) + 0x942484;\n                        *puVar36 = *puVar36;\n                        *(puVar30 + -7) = uVar38 + 0x43 | 0x4ee64300;\n    // WARNING: Bad instruction - Truncating control flow here\n                        halt_baddata();\n                    }\n                    if (0x9cf62e7b < pcVar11 && puVar36 != NULL) {\n                        pcVar5 = swi(0xee);\n                        uVar9 = (*pcVar5)();\n                        *puVar36 = uVar9;\n                        pcVar5 = swi(3);\n                        uVar14 = (*pcVar5)();\n                        return uVar14;\n                    }\n                    puVar30[2] = extraout_EDX;\n                    iVar7 = (pcVar15 & 0xffffff08) * 0x4ee64328;\n                    puVar30[0x21] = iVar7;\n                    puVar30[0x22] = (iVar7 >> 0x20) + unaff_ESI * 2;\n                    if (puVar30[2] != 0) {\n                        puVar30[0x22] = 0;\n                        goto code_r0x1000139c;\n                    }\n                    puVar30[0x22] = 0;\n                    puVar30[0x21] = 0x18fbff30;\n                    *(puVar30 + 0x9f) = *(puVar30 + 0x37) ^ 0x8c;\n                    pcVar5 = _sym.imp.Secur32.dll_DeleteSecurityContext;\n                    if ((puVar30[0x1f] & (puVar30[0x25] ^ 0x721d3e2e)) != 0) {\n                        puVar30[0x20] = 6;\n                        puVar34 = puVar30 + 1;\n                        goto code_r0x100012e5;\n                    }\n                    *puVar30 = 0x10001a8f;\n                    iVar10 = (*pcVar5)();\n                    uVar16 = iVar10;\n                    *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                    out(0x4e, iVar10);\n                    iVar17 = extraout_ECX_02;\n                }\n                if (0x9cf62e7b < uVar16 && puVar36 != NULL) {\n                    pcVar5 = swi(0xee);\n                    uVar9 = (*pcVar5)();\n                    *puVar36 = uVar9;\n                    pcVar5 = swi(3);\n                    uVar14 = (*pcVar5)();\n                    return uVar14;\n                }\n                pcVar11 = pcVar11 & 0xffffff90;\n                *pcVar11 = *pcVar11 + pcVar11;\n                *(iVar17 + 0x94248c) = *(iVar17 + 0x94248c) + iVar17;\n                *pcVar11 = *pcVar11 + pcVar11;\n                puVar37 = puVar36;\ncode_r0x10001ad1:\n                puVar34 = puVar29 + 1;\n                puVar29[0x26] = 0;\n                puVar29[0x26] = 0x6ebdbbdb;\n                if ((0x721d3e30 - puVar29[0x25] & puVar29[0x1f]) != 0) {\n                    puVar29[0x26] = puVar29[0xe] | 0xa65df24;\n                    goto code_r0x10001c9e;\n                }\n                *(puVar29 + 0x9f) = *(puVar29 + 0x37) + '{';\n                *puVar29 = 0x100019bb;\n                iVar10 = (*0x1000737e)();\n                uVar13 = iVar10;\n                *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                out(0x4e, iVar10);\n                puVar32 = *puVar29;\n                puVar31 = puVar32 + 4;\n                puVar36 = puVar37 + 1;\n                pVar1 = puVar35 + -0x1d;\n                if (-1 < puVar36) {\n                    puVar35 = puVar35 + 1;\n                    bVar39 = *pVar1 == 0;\n                    goto code_r0x10001a55;\n                }\n                if (uVar13 >= 0x9cf62e7c && puVar36 != NULL) {\n                    pcVar5 = swi(0xee);\n                    uVar9 = (*pcVar5)();\n                    *puVar36 = uVar9;\n                    pcVar5 = swi(3);\n                    uVar14 = (*pcVar5)();\n                    return uVar14;\n                }\n                uVar13 = uVar13 + 0x6309d184 & 0xffffff00 | -(uVar13 < 0x9cf62e7c);\n                iVar17 = 0x4ee64328;\n            }\n            if (0x9cf62e7b < uVar13 && !bVar39) {\n                pcVar5 = swi(0xee);\n                uVar9 = (*pcVar5)();\n                *puVar36 = uVar9;\n                pcVar5 = swi(3);\n                uVar14 = (*pcVar5)();\n                return uVar14;\n            }\ncode_r0x10001a55:\n            pcVar5 = _sym.imp.OLEAUT32.dll_VarCyFromStr;\n            puVar25 = puVar32 + 1;\n            if (!bVar39) {\n                *puVar32 = 0x100015aa;\n                iVar10 = (*pcVar5)();\n                uVar13 = iVar10;\n                *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n                out(0x4e, iVar10);\n                pcVar11 = uVar13 + 0x6309d184;\n                iVar27 = *puVar32;\n                puVar25 = iVar27 + 4;\n                puVar36 = puVar36 + 1;\n                if (puVar36 < 0) {\n                    if (0x9cf62e7b < uVar13 && puVar36 != NULL) {\n                        pcVar5 = swi(0xee);\n                        uVar9 = (*pcVar5)();\n                        *puVar36 = uVar9;\n                        pcVar5 = swi(3);\n                        uVar14 = (*pcVar5)();\n                        return uVar14;\n                    }\n                    pcVar11 = uVar13 + 0x7ef2d184;\n                    *pcVar11 = *pcVar11 + pcVar11;\n                    *(iVar27 + 0x84) = 2;\n                    puVar34 = iVar27 + 8;\n                    goto code_r0x100012e5;\n                }\n                *pcVar11 = *pcVar11 + pcVar11;\n            }\n            uVar13 = *(puVar25 + 0x80);\n            unaff_ESI = uVar13 * *(puVar25 + 0x84);\n            *(puVar25 + 0x26) = 0x3b;\n            *(puVar25 + 0x80) = uVar13 * uVar13;\n            *(puVar25 + 0x84) = (uVar13 * uVar13 >> 0x20) + unaff_ESI * 2;\n            *(puVar25 + 0x3c) = *(puVar25 + 0x78);\n            *(puVar25 + 0x80) = 0x891aaa2f;\n            *(puVar25 + 0x84) = 0xffffffff;\n            *(puVar25 + 0x43) = 0xfe;\n            if (*(puVar25 + 0x26) < *(puVar25 + 0x43)) goto code_r0x10001402;\n            *(puVar25 + 0x94) = *(puVar25 + 0x34) * 0x3726a11f;\n            *(puVar25 + 0x7c) = *(puVar25 + 0x90) ^ 0x721d3e25;\n            puVar34 = puVar25;\n        }\n        else {\n            *(uVar13 + 0x6309d200) = 0xfffffff9;\n            puVar34 = uVar13 + 0x6309d184;\n        }\n    }\n    else {\n        puVar35 = &stack0xfffffffb;\n        puVar26 = *(iStack176 + 4);\n        puVar34 = puVar26 + 1;\n        puVar26[0x1f] = uVar13 + 0x6309d184;\n        if (puVar26[0x1f] != 0) {\n            *puVar26 = 0x10001b10;\n            iVar10 = (*0x10007372)();\n            *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n            out(0x4e, iVar10);\n            pcVar11 = iVar10 + 0x6309d184;\n            puVar26 = *puVar26 + 4;\n            puVar36 = unaff_EDI + 2;\n            iVar18 = CONCAT42(0x721d3e2f, CONCAT11(uStack33, uStack34));\n            goto code_r0x10001b22;\n        }\n        puVar26[0x22] = 0;\n        puVar26[0x21] = 0x1d1dccc3;\n        pcVar5 = _sym.imp.ole32.dll_CreateGenericComposite;\n        uVar38 = (puVar26[0x1f] & 1) < 0x721d3e2f - puVar26[0x25];\n        if ((puVar26[0x1f] & 1) == 0x721d3e2f - puVar26[0x25]) {\n            *puVar26 = 0x10001ba6;\n            iVar10 = (*pcVar5)();\n            pcVar11 = iVar10;\n            *(unaff_ESI + 0x28b9d623) = in_FPUStatusWord;\n            iVar18 = iVar18 + 1;\n            out(0x4e, iVar10);\ncode_r0x10001ba3:\n            uVar19 = iVar18 >> 8;\n            pcVar11[-0x29dc4123] =\n                 pcVar11[-0x29dc4123] >> 1 | (CARRY1(uVar19, uVar19) || CARRY1(uVar19 * '\\x02', uVar38)) << 7;\n            puVar34 = *puVar26 + 4;\n            puVar36 = puVar36 + 1;\n            uVar13 = *(puVar35 + -0x1d);\n            if (-1 < puVar36) {\n    // WARNING: Could not recover jumptable at 0x10001c39. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x10008008\n                uVar14 = (**0x5ee6c330)();\n                return uVar14;\n            }\n            if (0x9cf62e7b < pcVar11 && puVar36 != NULL) {\n                pcVar5 = swi(0xee);\n                uVar9 = (*pcVar5)();\n                *puVar36 = uVar9;\n                pcVar5 = swi(3);\n                uVar14 = (*pcVar5)();\n                return uVar14;\n            }\n            pcVar15 = *puVar26 + -0x1ca23ab5 + uVar13 * 2;\n            bVar39 = *pcVar15 != '\\0';\n            *pcVar15 = -*pcVar15;\n            bVar41 = *pcVar15 < '\\0';\n            bVar40 = *pcVar15 == '\\0';\ncode_r0x10001bfd:\n            pcVar11 = pcVar11 + 0x6309d184;\n            cVar8 = pcVar11;\n            if (bVar41) {\n                if (!bVar39 && !bVar40) {\n                    pcVar5 = swi(0xee);\n                    uVar9 = (*pcVar5)();\n                    *puVar36 = uVar9;\n                    pcVar5 = swi(3);\n                    uVar14 = (*pcVar5)();\n                    return uVar14;\n                }\n                *pcVar11 = *pcVar11 + cVar8;\n            }\n            else {\n                *pcVar11 = *pcVar11 + cVar8;\n                *pcVar11 = *pcVar11 + cVar8;\n                *pcVar11 = *pcVar11 + cVar8;\n                uVar16 = CONCAT11((uVar13 >> 8) + cVar8, uVar13);\n                *pcVar11 = *pcVar11 + cVar8;\n                *pcVar11 = *pcVar11 + cVar8;\n                *pcVar11 = *pcVar11 + cVar8;\n                iVar10 = uVar16 >> 8;\n                piVar4 = (uVar13 & 0xffff0000 | uVar16) + 0xd342444;\n                *piVar4 = *piVar4 + -1;\n                uVar13 = (pcVar11 / iVar10 & 0xffU | pcVar11 % iVar10 << 8) & 0xffffffdf;\n                pcVar11 = pcVar11 & 0xffff0000 | uVar13;\n                *pcVar11 = *pcVar11 + uVar13;\ncode_r0x10001c9e:\n                *(puVar34 + 0x7c) = *(puVar34 + 0x90) ^ 0x721d3e2c;\n            }\n        }\n        else {\n            puVar26[0x20] = puVar26[0x25] + -0x721d3e27;\n        }\n    }\ncode_r0x100012e5:\n    *(puVar34 + 0x9b) = *(puVar34 + 0x33);\n    return *(puVar34 + 0x7c);\n}\n",
        "token_count": 7240
    },
    "10001d90": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.10001d90(char *arg_8h)\n\n{\n    if ((arg_8h != NULL) && (*arg_8h != '\\0')) {\n        fcn.100071e0();\n        fcn.10006f00();\n    }\n    return 0;\n}\n",
        "token_count": 66
    },
    "10002070": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint32_t fcn.10002070(void)\n\n{\n    uint32_t uVar1;\n    uint16_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint32_t uStack400;\n    uchar auStack392 [20];\n    int32_t iStack372;\n    uchar *puStack368;\n    uchar auStack364 [3];\n    char cStack361;\n    char cStack360;\n    char cStack359;\n    char cStack358;\n    uint32_t uStack104;\n    int32_t iStack100;\n    uint32_t uStack96;\n    uint uStack92;\n    uchar auStack88 [8];\n    uint32_t uStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    uchar *puStack68;\n    uchar uStack61;\n    uint32_t uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint32_t uStack44;\n    uint uStack40;\n    uint uStack36;\n    ushort uStack28;\n    char cStack25;\n    uint16_t uStack24;\n    uint8_t uStack21;\n    uint var_ch;\n    \n    uVar3 = uStack21;\n    uVar2 = uStack24;\n    uVar1 = uStack44;\n    cStack25 = -0x7c;\n    uStack44 = uStack44 + 0xd1b2dcc5;\n    uStack52 = 0;\n    uStack56 = 0x4e3fc75e;\n    uStack21 = uStack21 & 0xc4;\n    uStack60 = 0x57a4febb;\n    iStack100 = 0;\n    uStack104 = 0x1be24d44;\n    uStack80 = 0x3e4a9271;\n    iStack76 = 0;\n    uStack24 = uStack24 ^ 0xe066;\n    if (*_sym.imp.KERNEL32.dll_OutputDebugStringA == 'j') {\n        uStack400 = 1;\n        goto code_r0x10002465;\n    }\n    puVar8 = auStack364;\n    uVar9 = 0x104;\n    uVar11 = 0;\n    uVar10 = 0x104;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, puVar8, 0x104);\n    puStack68 = auStack364;\n    uStack24 = uVar2 * 2;\n    uStack44 = uVar1;\n    if ((((cStack361 == 'T') && (uStack44 = 0xd5318a93,  cStack360 == uStack60 + 0xa85b018a)) &&\n        (uStack44 = uVar1 ^ 0xffffffff,  cStack359 == 'S')) && (uStack21 = uVar3 ^ 0xff,  cStack358 == 'T'))\n    goto code_r0x100024db;\ncode_r0x10002585:\n    do {\n        uStack96 = *_sym.imp.KERNEL32.dll_CloseHandle;\n        iVar7 = 0x44dcadec - uStack104;\n        iVar6 = -iStack100 - (0x44dcadec < uStack104);\n        if (iStack100 == 0 && (0x44dcadec < uStack104) <= -iStack100) {\n            if (uStack96 == 0xb8) {\n                uStack400 = 0x57a4febc - uStack60;\n                goto code_r0x10002465;\n            }\n            iVar4 = fcn.10004b10();\n            if (iVar4 != 0) {\n                uStack400 = 0;\n                goto code_r0x10002465;\n            }\n            uStack40 = 0x4e098752;\n            uStack36 = 0;\n            uStack61 = 0x65;\n            if (0x65 < -cStack25 - 0xcU) {\n                iStack72 = 0;\n                while( true ) {\n                    uStack36 = 0;\n                    uStack24 = uVar2 & 0xf708;\n                    uStack44 = uVar1 + 0x39abb717;\n                    if (0x57a502ba - uStack60 <= iStack72) break;\n                    (*_sym.imp.USER32.dll_TranslateMessage)(0, puVar8, uVar9, iVar7, iVar6, uVar5, uVar10, uVar11);\n                    uStack28 = 0x17d3;\n                    (*_sym.imp.ADVAPI32.dll_RegOverridePredefKey)(0, 0);\n                    uStack40 = 0x4e3fc75e;\n                    iStack72 = iStack72 + (uStack60 ^ 0x57a4feba);\n                }\n                uStack44 = 0;\n                for (iStack372 = 0; iStack372 != 0x349; iStack372 = iStack372 + 1) {\n                    sub.msvcrt.dll_memset(auStack392, 0, 0x14);\n                    uStack92 = 0x91b;\n                    sub.msvcrt.dll_memset(auStack88, 0, 8);\n                    uStack21 = 0x68;\n                    puStack368 = auStack88;\n                }\n                uStack400 = uStack60 ^ 0x57a4febb;\n                goto code_r0x10002465;\n            }\ncode_r0x100024db:\n            if (puStack68[7] != 'A') goto code_r0x10002585;\n        }\n        uStack44 = uVar1 ^ 0xffffffff;\n        if ((puStack68[8] == 'P') && (puStack68[9] == 'P')) {\n            do {\n                uStack400 = uStack60 + 0xa85b0146;\ncode_r0x10002465:\n            } while (iStack76 != 0 || -iStack76 < (0x49e29a55 < uStack80));\n            return uStack400;\n        }\n    } while( true );\n}\n",
        "token_count": 1407
    },
    "10004b10": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x10004b52)\n\nuint fcn.10004b10(void)\n\n{\n    int32_t iVar1;\n    uint uStack60;\n    uint var_bp_8h;\n    \n    iVar1 = fcn.10001e60();\n    if (iVar1 == 0) {\n        iVar1 = fcn.10001d90(\"tttt32\");\n        if (iVar1 < 0xfc17) {\n            uStack60 = 0;\n        }\n        else {\n            uStack60 = 0;\n        }\n    }\n    else {\n        uStack60 = 1;\n    }\n    return uStack60;\n}\n",
        "token_count": 162
    },
    "10004d50": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.10004d50(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    char cVar3;\n    bool bVar4;\n    uchar auStack108 [32];\n    code *pcStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    uint32_t uStack64;\n    uint32_t uStack60;\n    int32_t *piStack56;\n    int32_t iStack52;\n    uint8_t uStack45;\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint16_t uStack36;\n    char cStack33;\n    uint32_t uStack32;\n    int32_t iStack28;\n    uint32_t uStack24;\n    uint var_ch;\n    \n    cVar3 = cStack33;\n    uVar1 = uStack40;\n    uStack24 = 0x6c01a5f4;\n    cStack33 = 9;\n    uStack60 = 0;\n    uStack64 = 0xd68fc81;\n    uStack45 = 4;\n    fcn.10006690(auStack108, 0x100265a3, 0xe);\n    pcStack76 = fcn.100058e0(auStack108);\n    uStack40 = uStack40 | 0x9a800fc;\n    if (pcStack76 == NULL) {\n        *0x1002d344 = 0;\n    }\n    else {\n        do {\n            cStack33 = 0xe5;\n            uStack36 = uStack36 & 0xdea4;\n            iStack72 = (*pcStack76)(0, uStack24 ^ 0x6c01c5f4, *0x1002d348, 0x40);\n            cStack33 = cVar3 * cVar3;\n            uStack40 = uVar1 + 0x4c82e163;\n            iStack68 = iStack72;\n        } while (0x69 < uStack45);\n        *0x1002d344 = iStack72 + 0x1649;\n        if (*0x1002d344 == 0) {\n            bVar4 = 0xc08381ec < uStack32;\n            uStack32 = uStack32 + 0x3f7c7e13;\n            iStack28 = iStack28 + bVar4;\n            (*pcStack76)(0, 0x2400, 0x6c0225f4 - uStack24, 2);\n        }\n        else {\n            do {\n                uVar2 = uStack60;\n                uVar1 = uStack64;\n                uStack40 = 0x4eecd89b;\n                fcn.100063d0(iStack72, arg_ch);\n                iStack52 = iStack72;\n                iStack44 = iStack72 + -0x400000;\n                uStack36 = ~uStack36;\n                piStack56 = arg_8h;\n            } while ((uVar1 < 0x3fc4d59e) <= uVar2);\n            arg_8h[3] = iStack72;\n            *arg_8h = iStack44;\n        }\n    }\n    return;\n}\n",
        "token_count": 741
    },
    "10005090": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x10005179)\n\nuint * __cdecl fcn.10005090(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    bool bVar3;\n    uint *puStack92;\n    uint16_t uStack74;\n    uint32_t uStack52;\n    uint *puStack48;\n    uint var_ch;\n    \n    if ((arg_8h == 0) && (arg_ch == 0)) {\n        puStack48 = 0xffffffff;\n    }\n    else {\n        iVar1 = fcn.10004bc0();\n        puVar2 = *(iVar1 + 0xc) + 0x14;\n        for (puStack92 = *puVar2; puStack92 != puVar2; puStack92 = *puStack92) {\n            if ((puStack92[4] == arg_ch) && (arg_ch != 0)) {\n                return puStack92 + -2;\n            }\n            bVar3 = false;\n            for (uStack52 = 0; uStack52 < *(puStack92 + 9) >> 1; uStack52 = uStack52 + 1) {\n                uStack74 = *(puStack92[10] + uStack52 * 2);\n                if ((0x40 < uStack74) && (uStack74 < 0x5b)) {\n                    uStack74 = uStack74 + 0x20;\n                }\n                bVar3 = *(arg_8h + uStack52 * 2) == uStack74;\n                if ((uStack74 == 0) || (!bVar3)) break;\n            }\n            if (bVar3) {\n                return puStack92[4];\n            }\n        }\n        puStack48 = NULL;\n    }\n    return puStack48;\n}\n",
        "token_count": 423
    },
    "100063d0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.100063d0(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uStack68;\n    int32_t iStack44;\n    uint var_ch;\n    \n    if ((arg_8h != 0) && (arg_ch != 0)) {\n        iVar1 = fcn.10004c90(arg_ch);\n        iStack44 = iVar1 + 0x18 + *(iVar1 + 0x14);\n        uStack68 = 0;\n        while ((uStack68 < *(iVar1 + 6) && (arg_8h != 0))) {\n            fcn.10001000(arg_8h, arg_ch, iStack44, uStack68, *(iVar1 + 0x54));\n            uStack68 = uStack68 + 1;\n            iStack44 = iStack44 + 0x28;\n        }\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "10006760": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint __cdecl fcn.10006760(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    bool bVar3;\n    uchar auStack104 [32];\n    uint uStack72;\n    uint32_t uStack68;\n    uint uStack64;\n    code *pcStack60;\n    uint uStack52;\n    uint16_t uStack48;\n    uint16_t uStack46;\n    uint uStack44;\n    uint32_t uStack40;\n    int32_t iStack36;\n    char cStack31;\n    int32_t iStack28;\n    uint32_t uStack24;\n    uint var_ch;\n    \n    uStack24 = 0x1f36dd79;\n    bVar3 = 0x621825a4 < uStack40;\n    uStack40 = 0x621825a4 - uStack40;\n    iStack36 = -bVar3 - iStack36;\n    cVar2 = fcn.100065c0(auStack104);\n    uVar1 = uStack24;\n    fcn.10006690(auStack104, 0x1002658b, uStack24 ^ 0x1f36dd61);\n    pcStack60 = fcn.10006910(auStack104);\n    cStack31 = 0xd4;\n    if (pcStack60 == NULL) {\n        uStack72 = 0;\n    }\n    else {\n        uStack44 = arg_ch;\n        uStack48 = fcn.10007130(arg_ch);\n        uStack64 = 0x169050b9;\n        iStack28 = uVar1 + 0xf09978a8;\n        uStack68 = uStack48;\n        if (uStack68 == 0) {\n            uStack72 = 0;\n        }\n        else {\n            uStack52 = 0;\n            cStack31 = cVar2 * '\\x02';\n            uStack46 = uStack48;\n            (*pcStack60)(arg_8h, &uStack48, 0, &uStack52, 0);\n            uStack72 = uStack52;\n        }\n    }\n    return uStack72;\n}\n",
        "token_count": 494
    },
    "10006910": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x10006ed4)\n// WARNING: Removing unreachable block (ram,0x10006cb5)\n\nint32_t __cdecl fcn.10006910(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    bool bVar3;\n    uint32_t uStack140;\n    int32_t iStack136;\n    uint32_t uStack124;\n    uint16_t *puStack120;\n    uint32_t uStack100;\n    uint var_ch;\n    \n    fcn.100065c0(arg_8h);\n    iStack136 = fcn.10005bb0();\n    iVar1 = fcn.10004c90(iStack136);\n    iVar2 = iStack136 + *(iVar1 + 0x78);\n    uStack140 = 0xffffffff;\n    iVar1 = *(iVar2 + 0x20);\n    puStack120 = iStack136 + *(iVar2 + 0x24);\n    uStack100 = 0;\n    do {\n        if (*(iVar2 + 0x18) <= uStack100) {\ncode_r0x10006e80:\n            if (uStack140 == 0xffffffff) {\n                iStack136 = 0;\n            }\n            else {\n                iStack136 = iStack136 + *(iStack136 + *(iVar2 + 0x1c) + uStack140 * 4);\n            }\n            return iStack136;\n        }\n        bVar3 = false;\n        arg_8h_00 = iStack136 + *(iStack136 + iVar1 + uStack100 * 4);\n        fcn.100065c0(arg_8h_00);\n        for (uStack124 = 0;\n            (((uStack124 < 0x20 &&\n              (bVar3 = *(arg_8h_00 + uStack124) == *(arg_8h + uStack124),  *(arg_8h_00 + uStack124) != '\\0')) &&\n             (*(arg_8h + uStack124) != '\\0')) && (bVar3)); uStack124 = uStack124 + 1) {\n        }\n        if (bVar3) {\n            uStack140 = *puStack120;\n            goto code_r0x10006e80;\n        }\n        puStack120 = puStack120 + 1;\n        uStack100 = uStack100 + 1;\n    } while( true );\n}\n",
        "token_count": 561
    },
    "10006f00": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nuint fcn.10006f00(void)\n\n{\n    int32_t iVar1;\n    uchar auStack164 [8];\n    uint uStack156;\n    uint uStack148;\n    uint uStack132;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack84;\n    uint uStack68;\n    uint uStack64;\n    uchar auStack60 [4];\n    uint uStack56;\n    uint uStack40;\n    uint16_t uStack24;\n    uint var_bp_ch;\n    \n    uStack24 = 0x7666;\n    fcn.10005500(auStack60);\n    uStack100 = uStack56;\n    uStack84 = 0x1d400;\n    uStack68 = fcn.100072d0(0);\n    iVar1 = fcn.10004c90(uStack68);\n    uStack148 = *(iVar1 + 0x50);\n    uStack104 = *0x1002d328;\n    uStack96 = *0x1002d32c;\n    uStack156 = *0x1002d330;\n    uStack132 = *0x1002d334;\n    uStack92 = *0x1002d338;\n    fcn.10004d50(auStack164, uStack40);\n    if (*0x1002d344 == 0) {\n        uStack64 = 0;\n    }\n    else {\n        do {\n        } while (0x8e97 < uStack24);\n        iVar1 = fcn.10004c90(uStack68);\n        uStack148 = *(iVar1 + 0x50);\n        fcn.100011e0(auStack164);\n        uStack64 = 1;\n    }\n    return uStack64;\n}\n",
        "token_count": 411
    },
    "10007130": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x10007198)\n\nint32_t __cdecl fcn.10007130(int32_t arg_8h)\n\n{\n    int32_t iStack24;\n    uint var_bp_8h;\n    \n    for (iStack24 = 0; *(arg_8h + iStack24) != '\\0'; iStack24 = iStack24 + 1) {\n    }\n    return iStack24;\n}\n",
        "token_count": 115
    },
    "10001e70": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint fcn.10001e70(void)\n\n{\n    uint8_t uVar1;\n    uchar auStack96 [8];\n    int32_t iStack88;\n    int32_t iStack84;\n    uchar auStack80 [16];\n    uint uStack64;\n    int32_t iStack52;\n    int32_t iStack48;\n    int16_t iStack42;\n    uint uStack40;\n    uint uStack36;\n    uint8_t uStack25;\n    int32_t iStack24;\n    uint var_ch;\n    \n    uVar1 = uStack25;\n    iStack24 = 0x58b36dfc;\n    uStack25 = uStack25 & 0x3d;\n    iStack88 = 0;\n    while( true ) {\n        do {\n            iStack42 = 0x2bb4;\n        } while (iStack24 == 0x6cba9f17);\n        iStack48 = iStack48 * 2;\n        if (0x3fe < iStack88) break;\n        (*_sym.imp.USER32.dll_TranslateMessage)(0);\n        (*_sym.imp.ADVAPI32.dll_RegOverridePredefKey)(0, 0);\n        iStack88 = iStack88 + 1;\n    }\n    uStack36 = 0;\n    uStack40 = 0x2fbed93e;\n    for (iStack52 = iStack24 + -0x58b36dfc; iStack52 != 0x349; iStack52 = iStack52 + 1) {\n        iStack42 = iStack42 + 0xc71;\n        iStack84 = iStack24 + -0x58b364e1;\n        auStack80 = ZEXT816(0);\n        uStack64 = 0;\n        sub.msvcrt.dll_memset(auStack96, 0, 8);\n        uStack25 = uVar1 | 0x84;\n        iStack42 = 0xd8f;\n    }\n    return 1;\n}\n",
        "token_count": 455
    },
    "10001e30": {
        "rules": [
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nbool fcn.10001e30(void)\n\n{\n    int32_t iVar1;\n    uint var_ch;\n    uint var_4h;\n    \n    iVar1 = fcn.10007230();\n    return *(iVar1 + 0x3c) < 0xc1;\n}\n",
        "token_count": 62
    },
    "10005a80": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x10005ab1)\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n\nint16_t * fcn.10005a80(void)\n\n{\n    code *pcStack32;\n    uint var_bp_8h;\n    \n    for (pcStack32 = fcn.10005a80; (*pcStack32 != 0x5a4d || (*(pcStack32 + *(pcStack32 + 0x3c)) != 0x4550));\n        pcStack32 = pcStack32 + -0x1000 & 0xfffff000) {\n    }\n    return pcStack32;\n}\n",
        "token_count": 146
    },
    "10005d30": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Removing unreachable block (ram,0x10005ecd)\n\nvoid __cdecl fcn.10005d30(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int16_t iVar5;\n    char cVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t *puVar9;\n    uint32_t uStack216;\n    uint32_t uStack208;\n    uint32_t auStack192 [32];\n    char cStack61;\n    int32_t iStack60;\n    uint32_t uStack56;\n    int32_t iStack52;\n    uint32_t uStack48;\n    uchar uStack41;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    int16_t iStack22;\n    uint var_bp_ch;\n    \n    iVar5 = iStack22;\n    uStack36 = 0x2594add8;\n    uStack40 = 0x21829008;\n    iStack60 = 0x100265b1;\n    puVar8 = 0x10025cfc;\n    puVar9 = auStack192;\n    for (iVar7 = 0x20; uVar4 = uStack28,  uVar3 = uStack32,  uVar2 = uStack36,  iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = *puVar8;\n        puVar8 = puVar8 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    iStack22 = iStack22 * 0x33f2;\n    for (uStack208 = uStack36 + 0xda6b5228; uStack32 = uVar3,  uStack28 = uVar4,  uStack208 < 0x20;\n        uStack208 = uStack208 + 1) {\n        for (uStack48 = auStack192[uStack208]; uStack48 < arg_10h; uStack48 = uStack48 + 0x20) {\n            iStack52 = iStack60;\n            uStack56 = uStack48 & 0x1f;\n            uStack28 = 0xffffffff;\n            uStack32 = 0xa3fb6e02;\n            iStack22 = iVar5;\n            if (0x9aa695b2 - uStack36 < 0x3da1c1d6) goto code_r0x10005fd0;\n            iStack22 = 0x9e63;\n            uStack41 = 0xf6;\n            cVar6 = *(iStack60 + uStack56);\n            uStack40 = 0x61d9c342 - uVar2;\n            fcn.10007130(iStack60);\n            cVar1 = *(arg_ch + uStack48);\n            uStack40 = uVar2 & 0x5d5cca5;\n            cStack61 = fcn.10007130(iStack60);\n            cStack61 = (cVar1 - cVar6) + cStack61;\n            *(arg_8h + uStack48) = cStack61;\n            uStack40 = uVar2;\n            iStack22 = iVar5 * 2;\n        }\n    }\ncode_r0x10005fd0:\n    for (uStack216 = 0; uStack216 != arg_10h; uStack216 = uStack216 + 1) {\n        cVar6 = fcn.10007130(iStack60);\n        iStack22 = 0x6a;\n        *(arg_8h + uStack216) = *(arg_8h + uStack216) - cVar6;\n        uStack28 = ~uVar4;\n        uStack32 = ~uVar3;\n    }\n    return;\n}\n",
        "token_count": 900
    },
    "10001000": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.10001000(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, uint arg_18h)\n\n{\n    uint var_ch;\n    \n    // [00] -r-x section size 28672 named .text\n    if (arg_14h == 0) {\n        fcn.10006170(arg_8h, arg_ch, arg_18h);\n    }\n    fcn.10006170(arg_8h + *(arg_10h + 0xc), arg_ch + *(arg_10h + 0x14), *(arg_10h + 0x10));\n    return;\n}\n",
        "token_count": 169
    },
    "10004bc0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Removing unreachable block (ram,0x10004c37)\n\nuint fcn.10004bc0(void)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.10005070();\n    return *(iVar1 + 0x30);\n}\n",
        "token_count": 82
    },
    "10004c90": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nint32_t * __cdecl fcn.10004c90(int32_t arg_8h)\n\n{\n    int32_t *piStack28;\n    uint var_bp_ch;\n    \n    piStack28 = arg_8h + *(arg_8h + 0x3c);\n    if (*piStack28 != 0x4550) {\n        piStack28 = NULL;\n    }\n    return piStack28;\n}\n",
        "token_count": 106
    },
    "10005500": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.10005500(uint *arg_8h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iStack136;\n    uint32_t uStack128;\n    uint32_t uStack124;\n    uint32_t uStack112;\n    int32_t iStack108;\n    uchar auStack80 [16];\n    uint32_t uStack64;\n    uint32_t uStack60;\n    int32_t iStack48;\n    uint16_t uStack44;\n    uchar uStack41;\n    uint32_t uStack40;\n    int32_t iStack32;\n    ushort uStack28;\n    uint8_t uStack25;\n    int32_t iStack24;\n    uint var_bp_ch;\n    \n    uVar1 = uStack25;\n    iStack24 = 0x27ad3d8a;\n    iStack136 = CONCAT13(uStack25, iStack136);\n    iVar2 = fcn.100011c0();\n    uVar5 = uStack40;\n    iStack32 = iStack32 * 0x1883373c;\n    iStack108 = 0;\n    uStack40 = uStack40 ^ 0x556e502a;\n    for (uStack128 = 0; uStack128 < 0x13; uStack128 = (0x27ad3d8b - iStack24) + uStack128) {\n        iStack32 = 0x7f835ea5;\n        uStack124 = *(iVar2 + uStack128 * 0x1ac + 0xd4);\n        uStack112 = *(iVar2 + 0x8c + uStack128 * 0x1ac);\n        iStack108 = iStack108 + (uStack124 ^ uStack112);\n        uStack28 = 0x1380;\n        uStack25 = uVar1 ^ 0x89;\n        uStack40 = uVar5;\n    }\n    fcn.10006690(auStack80, 0x100265a3, 0xe);\n    iVar4 = iStack24 + -0x27ad2d8a;\n    pcVar3 = fcn.100058e0(auStack80);\n    uStack28 = 0x4727;\n    iVar2 = (*pcVar3)(0, iStack108, iVar4, 4);\n    for (uStack64 = 0; uStack64 < 0x13; uStack64 = uStack64 + 1) {\n        uStack41 = 0x78;\n        uStack60 = *(iStack136 + uStack64 * 0x1ac + 0x8c);\n        iStack48 = iVar4 * 0xc006c75;\n        uVar5 = *(iStack136 + uStack64 * 0x1ac + 0xd4) ^ uStack60;\n        fcn.10006170(iVar2 + uStack112, *(uStack64 * 0x1ac + iStack136 + 0x150), uVar5);\n        uStack112 = uVar5 + uStack112;\n        uStack44 = 0x72b4 - (uStack44 & 0x24fb);\n    }\n    fcn.10005d30(iVar2, iVar2, uStack124);\n    arg_8h[1] = iVar2 + 0x2a24;\n    arg_8h[3] = 0x1d400;\n    arg_8h[5] = iVar2 + 0x868;\n    *arg_8h = 0x2020;\n    return 0;\n}\n",
        "token_count": 843
    },
    "10005bb0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid fcn.10005bb0(void)\n\n{\n    uint32_t uVar1;\n    int32_t iStack152;\n    int16_t aiStack144 [32];\n    char acStack80 [32];\n    int32_t iStack48;\n    ushort uStack42;\n    int16_t iStack40;\n    uchar uStack37;\n    uint32_t uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_ch;\n    \n    uVar1 = uStack36;\n    iStack40 = 0x6f7b;\n    iStack48 = 0x1a99afee;\n    uStack36 = uStack36 ^ 0xffffffff;\n    uStack42 = 0xe813;\n    fcn.10006690(acStack80, 0x10026572, 0xb);\n    uStack42 = 0x3139;\n    for (iStack152 = 0x1a99afee - iStack48; iStack152 != 0x20; iStack152 = iStack152 + 1) {\n        uStack28 = 0;\n        uStack32 = 0;\n        if (iStack40 == 0x1ae8) break;\n        uStack36 = uVar1 | 0x7166fd85;\n        aiStack144[iStack152] = acStack80[iStack152];\n        uStack37 = 0xb0;\n    }\n    uStack42 = 0x424a;\n    fcn.100072d0(aiStack144);\n    return;\n}\n",
        "token_count": 351
    },
    "10005930": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x10005a16)\n// WARNING: Removing unreachable block (ram,0x100059b6)\n\nuint32_t __cdecl fcn.10005930(uint32_t arg_8h)\n\n{\n    int32_t in_FS_OFFSET;\n    uint32_t uStack56;\n    uint var_bp_8h;\n    \n    if (0x10000 < arg_8h) {\n        arg_8h = arg_8h - 0x1000;\n    }\n    uStack56 = *(in_FS_OFFSET + arg_8h);\n    if (uStack56 < 0x1000) {\n        uStack56 = 0;\n    }\n    return uStack56;\n}\n",
        "token_count": 174
    },
    "10006170": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x100063b4)\n// WARNING: Removing unreachable block (ram,0x10006249)\n\nint32_t __cdecl fcn.10006170(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iStack52;\n    uint var_ch;\n    \n    *0x1002d340 = arg_ch;\n    *0x1002d33c = arg_8h;\n    for (iStack52 = 0; iStack52 != arg_10h; iStack52 = iStack52 + 1) {\n        *(*0x1002d33c + iStack52) = *(*0x1002d340 + iStack52);\n    }\n    return arg_8h;\n}\n",
        "token_count": 189
    },
    "100011c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.100011c0(void)\n\n{\n    return 0x1002b364;\n}\n",
        "token_count": 23
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "10001d50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.10001d50(uint arg_8h)\n\n{\n    uint var_10h;\n    uint var_8h;\n    \n    return 0;\n}\n",
        "token_count": 39
    },
    "10001e60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.10001e60(void)\n\n{\n    return 0;\n}\n",
        "token_count": 18
    },
    "10005070": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10005070(void)\n\n{\n    uint var_8h;\n    \n    fcn.10005930(0x18);\n    return;\n}\n",
        "token_count": 35
    },
    "10006690": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n\nvoid __cdecl fcn.10006690(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uStack36;\n    uint var_8h;\n    \n    uStack36 = 0;\n    while( true ) {\n        if (arg_10h <= uStack36) break;\n        fcn.10001120(arg_8h, arg_ch, uStack36, *((uStack36 & 0xf) + 0x100265d2));\n        uStack36 = uStack36 + 1;\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "100071e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x10007207)\n\nvoid fcn.100071e0(void)\n\n{\n    code *pcVar1;\n    uint *in_FS_OFFSET;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0x10007215;\n    uStack8 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack8;\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 107
    },
    "10007230": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_4h\n\nvoid fcn.10007230(void)\n\n{\n    int32_t iStack136;\n    char acStack130 [32];\n    int16_t aiStack98 [32];\n    char cStack34;\n    uint8_t uStack33;\n    uint uStack20;\n    uint var_bp_4h;\n    \n    uStack20 = 0x42b0b14;\n    cStack34 = '\\a';\n    fcn.10006690(acStack130, 0x1002657d, 0xe);\n    uStack33 = uStack33 ^ 0xed;\n    for (iStack136 = 0; acStack130[iStack136] != cStack34 + -7; iStack136 = iStack136 + 1) {\n        uStack33 = 0xc6;\n        aiStack98[iStack136] = acStack130[iStack136];\n    }\n    fcn.100072d0(aiStack98);\n    return;\n}\n",
        "token_count": 222
    }
}