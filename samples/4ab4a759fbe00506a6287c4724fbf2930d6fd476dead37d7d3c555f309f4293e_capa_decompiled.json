{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0042c838": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042c838(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4012ec;\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "0042c938": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042c938(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4012ec;\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "0042c95a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042c95a(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4012ec;\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "0042c97c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042c97c(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4012ec;\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "0042cef9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042cef9(uint32_t arg_8h)\n\n{\n    fcn.0042d1e8();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "0042cf1a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042cf1a(uint32_t arg_8h)\n\n{\n    fcn.0042d1e8();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0042cf3b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042cf3b(uint32_t arg_8h)\n\n{\n    fcn.0042d1e8();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0042d1f3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042d1f3(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4013ec;\n    fcn.0042d16e();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "0042d24f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042d24f(uint32_t arg_8h)\n\n{\n    fcn.0042d23f();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "0043060e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043060e(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x401f20;\n    fcn.0042d1e8();\n    if ((arg_8h & 1) != 0) {\n        fcn.0042d290();\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "004332f5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004332f5(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00431f80(0x43a9d0, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.0042e889();\n        *puVar2 = 0;\n        puVar2 = fcn.0042e876();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x666744)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x666760;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00435793(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.0042e876();\n                    *puVar2 = 9;\n                    puVar2 = fcn.0042e889();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00433280(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004333c1();\n                goto code_r0x004333b8;\n            }\n        }\n        puVar2 = fcn.0042e889();\n        *puVar2 = 0;\n        puVar2 = fcn.0042e876();\n        *puVar2 = 9;\n        fcn.00431dcd();\n    }\ncode_r0x004333b8:\n    fcn.00431fc5();\n    return;\n}\n",
        "token_count": 608
    },
    "00434b6e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00434b6e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44bb10 ^ &stack0xfffffffc;\n    fcn.0042df6d(arg_10h);\n    var_14h = fcn.00436b86(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.004360e4(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00434bc7:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00434c07;\n        }\n        if (iVar1 != 2) {\ncode_r0x00434bf9:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00434c07;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00434bf9;\n        goto code_r0x00434bc7;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00434c07:\n    fcn.0042e9f9(unaff_EBX);\n    return;\n}\n",
        "token_count": 507
    },
    "00434c16": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00434c16(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44bb10 ^ &stack0xfffffffc;\n    fcn.0042df6d(arg_10h);\n    var_14h = fcn.00436b86(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00436635(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00434c6f:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00434caf;\n        }\n        if (iVar1 != 2) {\ncode_r0x00434ca1:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00434caf;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00434ca1;\n        goto code_r0x00434c6f;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00434caf:\n    fcn.0042e9f9(unaff_EBX);\n    return;\n}\n",
        "token_count": 504
    },
    "004352ff": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.004352ff(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    code *pcVar6;\n    uint unaff_EBX;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44bb10 ^ &stack0xfffffffc;\n    var_20h = arg_8h;\n    var_1ch = arg_ch;\n    var_18h = fcn.004312e0();\n    var_14h = 0;\n    if (*0x66571c == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x405100);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar1 == 0) ||\n           (iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x4050f4), \n           pcVar4 = _sym.imp.KERNEL32.dll_EncodePointer,  iVar2 == 0)) goto code_r0x0043545c;\n        *0x66571c = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar2);\n        uVar3 = (*pcVar6)(iVar1, 0x4050e4);\n        *0x665720 = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x4050d0);\n        *0x665724 = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x4050b4);\n        *0x66572c = (*pcVar4)(uVar3);\n        if (*0x66572c != 0) {\n            uVar3 = (*pcVar6)(iVar1, 0x40509c);\n            *0x665728 = (*pcVar4)(uVar3);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if ((*0x665728 == var_18h) || (*0x66572c == var_18h)) {\ncode_r0x0043540b:\n        if ((((*0x665720 != var_18h) && (pcVar4 = (*pcVar6)(*0x665720),  pcVar4 != NULL)) &&\n            (var_14h = (*pcVar4)(),  var_14h != 0)) &&\n           ((*0x665724 != var_18h && (pcVar4 = (*pcVar6)(*0x665724),  pcVar4 != NULL)))) {\n            var_14h = (*pcVar4)(var_14h);\n        }\n    }\n    else {\n        pcVar4 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x665728);\n        pcVar5 = (*pcVar6)(*0x66572c);\n        if (((pcVar4 == NULL) || (pcVar5 == NULL)) ||\n           (((iVar1 = (*pcVar4)(),  iVar1 != 0 && (iVar1 = (*pcVar5)(iVar1, 1, &var_10h, 0xc, &var_24h),  iVar1 != 0))\n            && ((var_8h & 1) != 0)))) goto code_r0x0043540b;\n        arg_10h = arg_10h | 0x200000;\n    }\n    pcVar6 = (*pcVar6)(*0x66571c);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(var_14h, var_20h, var_1ch, arg_10h);\n    }\ncode_r0x0043545c:\n    fcn.0042e9f9(unaff_EBX);\n    return;\n}\n",
        "token_count": 929
    },
    "00438778": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00438778(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00431f80(0x43aa98, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.0042e889();\n        *puVar2 = 0;\n        puVar2 = fcn.0042e876();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x666744)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x666760;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00435793(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.0042e876();\n                    *puVar2 = 9;\n                    puVar2 = fcn.0042e889();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0043807b(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.00438844();\n                goto code_r0x0043883b;\n            }\n        }\n        puVar2 = fcn.0042e889();\n        *puVar2 = 0;\n        puVar2 = fcn.0042e876();\n        *puVar2 = 9;\n        fcn.00431dcd();\n    }\ncode_r0x0043883b:\n    fcn.00431fc5();\n    return;\n}\n",
        "token_count": 605
    },
    "0042a9e0": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "get OS version",
            "get common file path",
            "contain loop",
            "move file",
            "encrypt data using TEA",
            "get geographical location",
            "manipulate console buffer"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042a9e0(uint32_t *param_1, uint32_t param_2, int32_t *param_3)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uchar *puStack2420;\n    uint uStack2416;\n    uint uStack2412;\n    uint uStack2408;\n    uint uStack2404;\n    uchar *puStack2400;\n    uint uStack2396;\n    uint uStack2392;\n    uchar *puStack2388;\n    uint uStack2384;\n    uchar *puStack2380;\n    uchar *puStack2376;\n    uchar *puStack2372;\n    uint uStack2368;\n    uint uStack2364;\n    uchar *puStack2360;\n    uint uStack2356;\n    int32_t iStack2336;\n    uint32_t uStack2328;\n    uint32_t *puStack2312;\n    uchar auStack2304 [4];\n    uint32_t uStack2300;\n    int32_t iStack2296;\n    int32_t iStack2292;\n    int32_t iStack2288;\n    int32_t iStack2284;\n    int32_t iStack2280;\n    int32_t iStack2276;\n    uchar auStack2268 [12];\n    uchar auStack2256 [44];\n    uchar auStack2212 [28];\n    uchar auStack2184 [72];\n    uchar auStack2112 [1016];\n    uchar auStack1096 [68];\n    uchar auStack1028 [1028];\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_ReadConsoleInputW;\n    pcVar1 = _sym.imp.KERNEL32.dll_InterlockedExchange;\n    uStack2300 = param_2 >> 3;\n    if (uStack2300 != 0) {\n        iStack2276 = -0x61c88647;\n        puStack2312 = param_1;\n        do {\n            if (*0x664744 == 0x5d) {\n                uStack2356 = 0;\n                puStack2360 = 0x42aa2e;\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthA)();\n                puStack2360 = &stack0xfffff730;\n                uStack2364 = 0;\n                uStack2368 = 0;\n                puStack2372 = &stack0xfffffbfc;\n                puStack2376 = NULL;\n                puStack2380 = 0x42aa4a;\n                (*_sym.imp.KERNEL32.dll_ReadConsoleOutputCharacterA)();\n                puStack2380 = 0x401250;\n                uStack2384 = 0x401268;\n                puStack2388 = 0x42aa5a;\n                (*_sym.imp.KERNEL32.dll_MoveFileW)();\n                puStack2388 = NULL;\n                uStack2392 = 0x42aa62;\n                (*_sym.imp.KERNEL32.dll_LoadLibraryW)();\n                uStack2392 = 0;\n                uStack2396 = 0;\n                puStack2400 = NULL;\n                uStack2404 = 0;\n                uStack2408 = 0x42aa70;\n                (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExA)();\n                uStack2408 = 0x42aa76;\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthA)();\n                uStack2408 = 0;\n                uStack2412 = 0;\n                uStack2416 = 0;\n                puStack2420 = 0x42aa82;\n                (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)();\n                puStack2420 = &stack0xfffff7c0;\n                (*_sym.imp.KERNEL32.dll_GetCPInfoExW)(0, 0);\n                (*_sym.imp.KERNEL32.dll_LocalFree)(0);\n                (*_sym.imp.KERNEL32.dll_BeginUpdateResourceW)(0, 0);\n            }\n            uStack2328 = *puStack2312;\n            uVar6 = puStack2312[1];\n            iStack2284 = *param_3;\n            iStack2292 = param_3[1];\n            uStack2356 = 0x42aad4;\n            iVar3 = fcn.0042a9d0();\n            iStack2280 = *(iVar3 + 8);\n            iStack2288 = *(iVar3 + 0xc);\n            iStack2336 = 0x23f;\n            iStack2296 = 0x20;\n            do {\n                uVar5 = uStack2328 * 0x10 + iStack2280;\n                if (*0x664744 == 0xfa9) {\n                    *0x65c19c = 0xedeb2e40;\n                }\n                else if (*0x664744 == 0x3eb) {\n                    uStack2356 = 0;\n                    puStack2360 = NULL;\n                    uStack2364 = 0x42ab33;\n                    (*_sym.imp.ADVAPI32.dll_AreAnyAccessesGranted)();\n                    *0x658c98 = 0;\n                }\n                uVar4 = iStack2288 + (uStack2328 >> 5);\n                *0x65c198 = 0xf4ea3dee;\n                if (*0x664744 == 0x516) {\n                    uStack2356 = 0;\n                    puStack2360 = NULL;\n                    uStack2364 = 0x42ab8a;\n                    (*_sym.imp.KERNEL32.dll_WaitNamedPipeW)();\n                    uStack2364 = 0;\n                    uStack2368 = 0;\n                    puStack2372 = NULL;\n                    puStack2376 = &stack0xfffff75c;\n                    puStack2380 = 0x42ab9e;\n                    (*_sym.imp.KERNEL32.dll_VerifyVersionInfoA)();\n                    puStack2380 = &stack0xfffff710;\n                    uStack2384 = 0;\n                    puStack2388 = &stack0xfffff724;\n                    uStack2392 = 0;\n                    uStack2396 = 0x42abae;\n                    (*pcVar2)();\n                    uStack2396 = 0;\n                    puStack2400 = &stack0xfffff710;\n                    uStack2404 = 0;\n                    uStack2408 = 0;\n                    uStack2412 = 0;\n                    uStack2416 = 0x42abc1;\n                    (*_sym.imp.KERNEL32.dll_WriteConsoleW)();\n                    uStack2416 = 0;\n                    puStack2420 = NULL;\n                    (*_sym.imp.KERNEL32.dll_MoveFileExW)(0);\n                    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&stack0xfffffbb8, 0);\n                    (*pcVar2)(0, &stack0xfffff700, 0, &stack0xfffff6d0);\n                    (*_sym.imp.KERNEL32.dll_WriteConsoleInputW)(0, 0, 0, &stack0xfffff6cc);\n                    (*pcVar1)(&stack0xfffff6c0, 0);\n                    (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExA)(0, 0, 0, 0);\n                    (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(0, 0, &stack0xfffff778, 0);\n                    (*pcVar1)(&stack0xfffff68c, 0);\n                }\n                uVar6 = uVar6 - (uVar4 ^ uVar5 ^ iStack2336 + uStack2328);\n                uVar5 = (uVar6 >> 5) + iStack2292;\n                uVar4 = uVar6 * 0x10 + iStack2284;\n                if (*0x664744 == 0x121) {\n                    uStack2356 = 0;\n                    puStack2360 = NULL;\n                    uStack2364 = 0;\n                    uStack2368 = 0x42ac98;\n                    (*_sym.imp.KERNEL32.dll_OpenEventA)();\n                }\n                *0x468324 = 0;\n                uStack2328 = uStack2328 - (uVar4 ^ iStack2336 + uVar6 ^ uVar5);\n                iStack2336 = iStack2336 - iStack2276;\n                iStack2296 = iStack2296 + -1;\n            } while (iStack2296 != 0);\n            *puStack2312 = uStack2328;\n            puStack2312[1] = uVar6;\n            puStack2312 = puStack2312 + 2;\n            uStack2300 = uStack2300 - 1;\n        } while (uStack2300 != 0);\n    }\n    return;\n}\n",
        "token_count": 1949
    },
    "0042b150": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nvoid fcn.0042b150(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint uStack2816;\n    uint uStack2812;\n    uint uStack2808;\n    uint uStack2804;\n    uint uStack2800;\n    uchar *puStack2796;\n    uchar *puStack2792;\n    uchar *puStack2788;\n    uchar *puStack2784;\n    uchar *puStack2780;\n    uint uStack2776;\n    uint uStack2772;\n    uint uStack2768;\n    uchar *puStack2764;\n    uchar *puStack2760;\n    uint uStack2756;\n    uint uStack2752;\n    int32_t iStack2748;\n    uint uStack2124;\n    uint uStack2120;\n    uint uStack2116;\n    uchar auStack2092 [12];\n    uchar auStack2080 [964];\n    uchar auStack1116 [1116];\n    \n    iVar5 = *0x664744;\n    *0x664744 = *0x664744 + 0xb2d3b;\n    if (iVar5 == -0xb2d25) {\n        (*_sym.imp.USER32.dll_ClientToScreen)();\n        iStack2748 = 0;\n        uStack2752 = 0;\n        uStack2756 = 0x42b186;\n        (*_sym.imp.WINHTTP.dll_WinHttpReadData)();\n        uStack2756 = 0x30;\n        puStack2764 = &stack0xfffff7b8;\n        puStack2760 = NULL;\n        uStack2124 = 0;\n        uStack2768 = 0x42b1a2;\n        fcn.0042d710();\n        uStack2756 = 0;\n        puStack2760 = &stack0xfffff7b4;\n        puStack2764 = NULL;\n        uStack2768 = 0x42b1b7;\n        (*_sym.imp.KERNEL32.dll_SetDefaultCommConfigW)();\n        uStack2768 = 0;\n        uStack2772 = 0;\n        uStack2776 = 0x42b1c1;\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)();\n        uStack2776 = 0;\n        puStack2780 = &stack0xfffff7d4;\n        puStack2784 = 0x42b1d1;\n        (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesA)();\n        puStack2784 = &stack0xfffff528;\n        puStack2788 = &stack0xfffff534;\n        puStack2792 = &stack0xfffff530;\n        puStack2796 = &stack0xfffff52c;\n        uStack2800 = 0;\n        uStack2804 = 0x42b1ed;\n        (*_sym.imp.KERNEL32.dll_GetDiskFreeSpaceW)();\n        uStack2804 = 0;\n        uStack2808 = 0;\n        uStack2812 = 0x42b1f7;\n        (*_sym.imp.KERNEL32.dll_GetConsoleMode)();\n        uStack2812 = 0;\n        uStack2816 = 0;\n        (*_sym.imp.KERNEL32.dll_FindResourceExA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_GetFileTime)(0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n        (*_sym.imp.KERNEL32.dll_FreeLibraryAndExitThread)(0, 0);\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_GetConsoleProcessList;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetSystemDefaultLangID;\n    pcVar1 = _sym.imp.KERNEL32.dll_SetLastError;\n    iVar5 = 0;\n    do {\n        iStack2748 = 0;\n        uStack2752 = 0x42b244;\n        (*pcVar1)();\n        uStack2752 = 0;\n        uStack2756 = 0;\n        puStack2760 = 0x42b24a;\n        (*pcVar3)();\n        if (iVar5 < 0x3d5baef) {\n            uStack2120 = 0x5b19809;\n            uStack2116 = 0x1d01db33;\n            uStack2124 = 0x7d125a0e;\n            puStack2760 = 0x42c473;\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        }\n        puStack2760 = 0x42c475;\n        (*pcVar2)();\n    } while ((iVar5 < 0xe7af94) && (iVar5 = iVar5 + 1,  iVar5 < 0x5d4d26ca));\n    *0x65c1a2 = 0x65;\n    *0x65c1b4 = 0x6c;\n    *0x65c1a4 = 0x72;\n    *0x65c1aa = 0x6c;\n    *0x65c1b6 = 0x6c;\n    iStack2748 = *0x664744;\n    uStack2752 = 0;\n    *0x65c1ac = 0x320033;\n    *0x65c1b0 = 0x64002e;\n    *0x65c1a6 = 0x65006e;\n    *0x65c1a0 = 0x6b;\n    uStack2756 = 0x42c4f6;\n    *0x658ca4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)();\n    uStack2756 = 0x42c500;\n    fcn.0042b0d0();\n    uStack2756 = 0;\n    *0x664748 = *0x446794;\n    puStack2760 = 0x42c519;\n    fcn.0042acf0();\n    pcVar4 = _sym.imp.KERNEL32.dll_CreateHardLinkA;\n    pcVar3 = _sym.imp.KERNEL32.dll_SetConsoleTitleA;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetFileAttributesA;\n    pcVar1 = _sym.imp.KERNEL32.dll_LCMapStringA;\n    iVar5 = 0;\n    do {\n        if (iVar5 + *0x664744 == 0x5e) {\n            puStack2760 = NULL;\n            puStack2764 = NULL;\n            uStack2768 = 0;\n            uStack2772 = 0x42c556;\n            (*pcVar4)();\n            uStack2772 = 0;\n            uStack2776 = 0x42c55a;\n            (*pcVar3)();\n            uStack2776 = 0;\n            puStack2780 = 0x42c55e;\n            (*pcVar2)();\n            puStack2780 = NULL;\n            puStack2784 = &stack0xfffff7e0;\n            puStack2788 = NULL;\n            puStack2792 = 0x4012c8;\n            puStack2796 = NULL;\n            uStack2800 = 0;\n            uStack2804 = 0x42c575;\n            (*pcVar1)();\n            uStack2804 = 0;\n            uStack2808 = 0x42c57d;\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthA)();\n            uStack2808 = 0;\n            uStack2812 = 0;\n            uStack2816 = 0;\n            (*_sym.imp.KERNEL32.dll_OpenJobObjectA)();\n            (*_sym.imp.KERNEL32.dll_AreFileApisANSI)();\n            (*_sym.imp.KERNEL32.dll_SetFileAttributesW)(0, 0);\n            (*_sym.imp.KERNEL32.dll_CommConfigDialogA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetCalendarInfoA)(0, 0, 0, &stack0xfffffba4, 0, &stack0xfffff500);\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x40c893);\n    puStack2760 = 0x43c000;\n    puStack2764 = 0x42c5ea;\n    fcn.0042a9e0();\n    *0x65c194 = *0x658ca4;\n    // WARNING: Could not recover jumptable at 0x0042c617. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x658ca4)();\n    return;\n}\n",
        "token_count": 1923
    },
    "0042d16e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042d16e(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != '\\0') {\n        fcn.0042d78a(*(param_1 + 4));\n    }\n    *(param_1 + 4) = 0;\n    *(param_1 + 8) = 0;\n    return;\n}\n",
        "token_count": 84
    },
    "0042d78a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042d78a(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x6649c4, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.0042e876();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.0042e834(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 158
    },
    "0042d8c8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.0042d8c8(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x42d973;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.0042d99f;\n        uStack36 = *0x44bb10 ^ &fcn.0042d8c8::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.0042d8c8::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.00431490();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.0042d8c8::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 731
    },
    "0042ddc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x0042decb: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x0042ded0)\n// WARNING: Removing unreachable block (ram,0x0042deff)\n// WARNING: Removing unreachable block (ram,0x0042ded6)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0042ddc5(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t unaff_EBP;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00431f80(0x43a678, 0x20);\n    fcn.004319ed(8);\n    *(unaff_EBP + -4) = 0;\n    pcVar1 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if (*0x6649a0 != 1) {\n        *0x66499c = 1;\n        *0x664998 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar2 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x666878);\n            *(unaff_EBP + -0x30) = piVar2;\n            if (piVar2 != NULL) {\n                piVar3 = (*pcVar1)(*0x666874);\n                *(unaff_EBP + -0x2c) = piVar3;\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x28) = piVar3;\n                while( true ) {\n                    piVar3 = piVar3 + -1;\n                    *(unaff_EBP + -0x2c) = piVar3;\n                    if (piVar3 < piVar2) break;\n                    iVar4 = fcn.004312e0();\n                    if (*piVar3 != iVar4) {\n                        if (piVar3 < piVar2) break;\n                        pcVar5 = (*pcVar1)(*piVar3);\n                        iVar4 = fcn.004312e0();\n                        *piVar3 = iVar4;\n                        (*pcVar5)();\n                        iVar4 = (*pcVar1)(*0x666878);\n                        piVar2 = (*pcVar1)(*0x666874);\n                        if ((*(unaff_EBP + -0x24) != iVar4) || (*(unaff_EBP + -0x28) != piVar2)) {\n                            *(unaff_EBP + -0x24) = iVar4;\n                            *(unaff_EBP + -0x30) = iVar4;\n                            *(unaff_EBP + -0x28) = piVar2;\n                            *(unaff_EBP + -0x2c) = piVar2;\n                            piVar3 = piVar2;\n                        }\n                        piVar2 = *(unaff_EBP + -0x30);\n                    }\n                }\n            }\n            *(unaff_EBP + -0x1c) = 0x40120c;\n            while (*(unaff_EBP + -0x1c) < 0x401218) {\n                if (**(unaff_EBP + -0x1c) != NULL) {\n                    (***(unaff_EBP + -0x1c))();\n                }\n                *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n            }\n        }\n        *(unaff_EBP + -0x20) = 0x40121c;\n        while (*(unaff_EBP + -0x20) < 0x401220) {\n            if (**(unaff_EBP + -0x20) != NULL) {\n                (***(unaff_EBP + -0x20))();\n            }\n            *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 4;\n        }\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.00431914(8);\n    }\n    return;\n}\n",
        "token_count": 1008
    },
    "0042e9f9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042e9f9(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x44bb10) {\n        return;\n    }\n    *0x6654c0 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x6654c4 = &arg_8h;\n    *0x665400 = 0x10001;\n    *0x6653a8 = 0xc0000409;\n    *0x6653ac = 1;\n    var_328h = *0x44bb10;\n    var_324h = *0x44bb14;\n    *0x6653b4 = unaff_retaddr;\n    *0x66548c = in_GS;\n    *0x665490 = in_FS;\n    *0x665494 = in_ES;\n    *0x665498 = in_DS;\n    *0x66549c = unaff_EDI;\n    *0x6654a0 = unaff_ESI;\n    *0x6654a4 = unaff_EBX;\n    *0x6654a8 = in_EDX;\n    *0x6654ac = in_ECX;\n    *0x6654b0 = in_EAX;\n    *0x6654b4 = unaff_EBP;\n    *0x6654b8 = unaff_retaddr;\n    *0x6654bc = in_CS;\n    *0x6654c8 = in_SS;\n    *0x6653f8 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.004352f7(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x402d64);\n    if (*0x6653f8 == 0) {\n        fcn.004352f7(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 837
    },
    "004307a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004307a5(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00431490();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.00431490();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "00430a6c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00430a6c(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.0042db04(*(unaff_EBP + -0x28));\n    iVar1 = fcn.00431490();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.00431490();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.0042dadd(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.00430804(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 380
    },
    "00431be9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00431be9(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.00431914(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "004360e4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_38h\n\nvoid __cdecl fcn.004360e4(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    bool bVar6;\n    int32_t iVar7;\n    uint8_t uVar8;\n    uint32_t *puVar9;\n    uint *puVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    uint32_t uVar15;\n    int32_t iVar16;\n    bool bVar17;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44bb10 ^ &stack0xfffffffc;\n    uVar2 = arg_8h[5];\n    uVar15 = *(arg_8h + 3);\n    var_10h = uVar15;\n    uVar4 = *(arg_8h + 1);\n    uVar3 = *arg_8h;\n    uVar12 = uVar2 & 0x7fff;\n    iVar13 = uVar12 - 0x3fff;\n    var_ch = uVar4;\n    var_8h = uVar3 << 0x10;\n    uVar5 = str.5_v_[1];\n    if (iVar13 == -0x3fff) {\n        iVar14 = 0;\n        iVar13 = 0;\n        do {\n            if ((&var_10h)[iVar13] != 0) {\n                var_10h = 0;\n                var_ch = 0;\n                var_8h = 0;\n                break;\n            }\n            iVar13 = iVar13 + 1;\n        } while (iVar13 < 3);\n    }\n    else {\n        bVar6 = false;\n        iVar16 = str.5_v_[0] + L'\\xffffffff';\n        iVar14 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        puVar1 = &var_10h + iVar14;\n        uVar8 = 0x1f - (str.5_v_[0] & 0x1f);\n        if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n            uVar11 = (&var_10h)[iVar14] & ~(-1 << (uVar8 & 0x1f));\n            iVar7 = iVar14;\n            while( true ) {\n                if (uVar11 != 0) {\n                    iVar7 = iVar16 + (iVar16 >> 0x1f & 0x1fU) >> 5;\n                    uVar11 = 1 << (0x1f - (iVar16 & 0x1f) & 0x1f);\n                    puVar9 = &var_10h + iVar7;\n                    var_20h = *puVar9 + uVar11;\n                    if (var_20h < *puVar9) goto code_r0x00436228;\n                    bVar17 = var_20h < uVar11;\n                    do {\n                        bVar6 = false;\n                        if (!bVar17) goto code_r0x0043622f;\ncode_r0x00436228:\n                        do {\n                            bVar6 = true;\ncode_r0x0043622f:\n                            iVar7 = iVar7 + -1;\n                            *puVar9 = var_20h;\n                            if ((iVar7 < 0) || (!bVar6)) goto code_r0x0043623d;\n                            puVar9 = &var_10h + iVar7;\n                            var_20h = *puVar9 + 1;\n                        } while (var_20h < *puVar9);\n                        bVar17 = var_20h == 0;\n                    } while( true );\n                }\n                iVar7 = iVar7 + 1;\n                if (2 < iVar7) break;\n                uVar11 = (&var_10h)[iVar7];\n            }\n        }\ncode_r0x0043623d:\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar14 = iVar14 + 1;\n        if (iVar14 < 3) {\n            puVar10 = &var_10h + iVar14;\n            for (iVar16 = 3 - iVar14; iVar16 != 0; iVar16 = iVar16 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n        }\n        iVar14 = iVar13;\n        if (bVar6) {\n            iVar14 = uVar12 - 0x3ffe;\n        }\n        if (iVar14 < *0x44c930 - str.5_v_[0]) {\n            var_10h = 0;\n            var_ch = 0;\n            var_8h = 0;\n        }\n        else {\n            if (*0x44c930 < iVar14) {\n                if (iVar14 < *0x44c92c) {\n                    iVar14 = iVar14 + str.5_v_[3];\n                    var_10h = var_10h & 0x7fffffff;\n                    iVar13 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar16 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar16 < iVar13) {\n                            (&var_10h)[iVar16] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar16] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar16 = iVar16 + -1;\n                    } while (-1 < iVar16);\n                }\n                else {\n                    var_ch = 0;\n                    var_8h = 0;\n                    var_10h = 0x80000000;\n                    iVar13 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar14 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar14 < iVar13) {\n                            (&var_10h)[iVar14] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar14] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar14 = iVar14 + -1;\n                    } while (-1 < iVar14);\n                    iVar14 = str.5_v_[3] + *0x44c92c;\n                }\n                goto code_r0x004365e8;\n            }\n            iVar13 = *0x44c930 - iVar13;\n            var_10h = uVar15;\n            var_ch = uVar4;\n            iVar14 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = iVar13 & 0x1f;\n            var_8h = uVar3 << 0x10;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar13 = 2;\n            puVar10 = &var_8h + -iVar14;\n            do {\n                if (iVar13 < iVar14) {\n                    (&var_10h)[iVar13] = 0;\n                }\n                else {\n                    (&var_10h)[iVar13] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar13 = iVar13 + -1;\n            } while (-1 < iVar13);\n            iVar14 = str.5_v_[0] + L'\\xffffffff';\n            iVar13 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar8 = 0x1f - (str.5_v_[0] & 0x1f);\n            puVar1 = &var_10h + iVar13;\n            if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n                uVar15 = (&var_10h)[iVar13] & ~(-1 << (uVar8 & 0x1f));\n                iVar16 = iVar13;\n                while (uVar15 == 0) {\n                    iVar16 = iVar16 + 1;\n                    if (2 < iVar16) goto code_r0x004363dc;\n                    uVar15 = (&var_10h)[iVar16];\n                }\n                iVar16 = iVar14 + (iVar14 >> 0x1f & 0x1fU) >> 5;\n                bVar6 = false;\n                uVar12 = 1 << (0x1f - (iVar14 & 0x1f) & 0x1f);\n                uVar4 = (&var_10h)[iVar16];\n                uVar15 = uVar4 + uVar12;\n                if ((uVar15 < uVar4) || (uVar15 < uVar12)) {\n                    bVar6 = true;\n                }\n                (&var_10h)[iVar16] = uVar15;\n                while ((iVar16 = iVar16 + -1,  -1 < iVar16 && (bVar6))) {\n                    uVar4 = (&var_10h)[iVar16];\n                    uVar15 = uVar4 + 1;\n                    bVar6 = false;\n                    if ((uVar15 < uVar4) || (uVar15 == 0)) {\n                        bVar6 = true;\n                    }\n                    (&var_10h)[iVar16] = uVar15;\n                }\n            }\ncode_r0x004363dc:\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar13 = iVar13 + 1;\n            if (iVar13 < 3) {\n                puVar10 = &var_10h + iVar13;\n                for (iVar14 = 3 - iVar13; iVar14 != 0; iVar14 = iVar14 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n            }\n            iVar13 = str.5_v_[1] + L'\\x01' + (str.5_v_[1] + L'\\x01' >> 0x1f & 0x1fU) >> 5;\n            uVar8 = uVar5 + 1 & 0x1f;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar14 = 2;\n            puVar10 = &var_8h + -iVar13;\n            do {\n                if (iVar14 < iVar13) {\n                    (&var_10h)[iVar14] = 0;\n                }\n                else {\n                    (&var_10h)[iVar14] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar14 = iVar14 + -1;\n            } while (-1 < iVar14);\n        }\n        iVar14 = 0;\n    }\ncode_r0x004365e8:\n    uVar15 = iVar14 << (0x1f - uVar5 & 0x1f) | -((uVar2 & 0x8000) != 0) & 0x80000000 | var_10h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = uVar15;\n        *arg_ch = var_ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = uVar15;\n    }\n    fcn.0042e9f9(uVar2 & 0x8000);\n    return;\n}\n",
        "token_count": 3261
    },
    "00436635": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_38h\n\nvoid __cdecl fcn.00436635(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    bool bVar6;\n    int32_t iVar7;\n    uint8_t uVar8;\n    uint32_t *puVar9;\n    uint *puVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    uint32_t uVar15;\n    int32_t iVar16;\n    bool bVar17;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x44bb10 ^ &stack0xfffffffc;\n    uVar2 = arg_8h[5];\n    uVar15 = *(arg_8h + 3);\n    var_10h = uVar15;\n    uVar4 = *(arg_8h + 1);\n    uVar3 = *arg_8h;\n    uVar12 = uVar2 & 0x7fff;\n    iVar13 = uVar12 - 0x3fff;\n    var_ch = uVar4;\n    var_8h = uVar3 << 0x10;\n    uVar5 = *0x44c950;\n    if (iVar13 == -0x3fff) {\n        iVar14 = 0;\n        iVar13 = 0;\n        do {\n            if ((&var_10h)[iVar13] != 0) {\n                var_10h = 0;\n                var_ch = 0;\n                var_8h = 0;\n                break;\n            }\n            iVar13 = iVar13 + 1;\n        } while (iVar13 < 3);\n    }\n    else {\n        bVar6 = false;\n        iVar16 = *0x44c94c + -1;\n        iVar14 = *0x44c94c + (*0x44c94c >> 0x1f & 0x1fU) >> 5;\n        puVar1 = &var_10h + iVar14;\n        uVar8 = 0x1f - (*0x44c94c & 0x1f);\n        if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n            uVar11 = (&var_10h)[iVar14] & ~(-1 << (uVar8 & 0x1f));\n            iVar7 = iVar14;\n            while( true ) {\n                if (uVar11 != 0) {\n                    iVar7 = iVar16 + (iVar16 >> 0x1f & 0x1fU) >> 5;\n                    uVar11 = 1 << (0x1f - (iVar16 & 0x1f) & 0x1f);\n                    puVar9 = &var_10h + iVar7;\n                    var_20h = *puVar9 + uVar11;\n                    if (var_20h < *puVar9) goto code_r0x00436779;\n                    bVar17 = var_20h < uVar11;\n                    do {\n                        bVar6 = false;\n                        if (!bVar17) goto code_r0x00436780;\ncode_r0x00436779:\n                        do {\n                            bVar6 = true;\ncode_r0x00436780:\n                            iVar7 = iVar7 + -1;\n                            *puVar9 = var_20h;\n                            if ((iVar7 < 0) || (!bVar6)) goto code_r0x0043678e;\n                            puVar9 = &var_10h + iVar7;\n                            var_20h = *puVar9 + 1;\n                        } while (var_20h < *puVar9);\n                        bVar17 = var_20h == 0;\n                    } while( true );\n                }\n                iVar7 = iVar7 + 1;\n                if (2 < iVar7) break;\n                uVar11 = (&var_10h)[iVar7];\n            }\n        }\ncode_r0x0043678e:\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar14 = iVar14 + 1;\n        if (iVar14 < 3) {\n            puVar10 = &var_10h + iVar14;\n            for (iVar16 = 3 - iVar14; iVar16 != 0; iVar16 = iVar16 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n        }\n        iVar14 = iVar13;\n        if (bVar6) {\n            iVar14 = uVar12 - 0x3ffe;\n        }\n        if (iVar14 < *0x44c948 - *0x44c94c) {\n            var_10h = 0;\n            var_ch = 0;\n            var_8h = 0;\n        }\n        else {\n            if (*0x44c948 < iVar14) {\n                if (iVar14 < *0x44c944) {\n                    iVar14 = iVar14 + *0x44c958;\n                    var_10h = var_10h & 0x7fffffff;\n                    iVar13 = *0x44c950 + (*0x44c950 >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar16 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar16 < iVar13) {\n                            (&var_10h)[iVar16] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar16] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar16 = iVar16 + -1;\n                    } while (-1 < iVar16);\n                }\n                else {\n                    var_ch = 0;\n                    var_8h = 0;\n                    var_10h = 0x80000000;\n                    iVar13 = *0x44c950 + (*0x44c950 >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar14 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar14 < iVar13) {\n                            (&var_10h)[iVar14] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar14] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar14 = iVar14 + -1;\n                    } while (-1 < iVar14);\n                    iVar14 = *0x44c958 + *0x44c944;\n                }\n                goto code_r0x00436b39;\n            }\n            iVar13 = *0x44c948 - iVar13;\n            var_10h = uVar15;\n            var_ch = uVar4;\n            iVar14 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = iVar13 & 0x1f;\n            var_8h = uVar3 << 0x10;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar13 = 2;\n            puVar10 = &var_8h + -iVar14;\n            do {\n                if (iVar13 < iVar14) {\n                    (&var_10h)[iVar13] = 0;\n                }\n                else {\n                    (&var_10h)[iVar13] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar13 = iVar13 + -1;\n            } while (-1 < iVar13);\n            iVar14 = *0x44c94c + -1;\n            iVar13 = *0x44c94c + (*0x44c94c >> 0x1f & 0x1fU) >> 5;\n            uVar8 = 0x1f - (*0x44c94c & 0x1f);\n            puVar1 = &var_10h + iVar13;\n            if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n                uVar15 = (&var_10h)[iVar13] & ~(-1 << (uVar8 & 0x1f));\n                iVar16 = iVar13;\n                while (uVar15 == 0) {\n                    iVar16 = iVar16 + 1;\n                    if (2 < iVar16) goto code_r0x0043692d;\n                    uVar15 = (&var_10h)[iVar16];\n                }\n                iVar16 = iVar14 + (iVar14 >> 0x1f & 0x1fU) >> 5;\n                bVar6 = false;\n                uVar12 = 1 << (0x1f - (iVar14 & 0x1f) & 0x1f);\n                uVar4 = (&var_10h)[iVar16];\n                uVar15 = uVar4 + uVar12;\n                if ((uVar15 < uVar4) || (uVar15 < uVar12)) {\n                    bVar6 = true;\n                }\n                (&var_10h)[iVar16] = uVar15;\n                while ((iVar16 = iVar16 + -1,  -1 < iVar16 && (bVar6))) {\n                    uVar4 = (&var_10h)[iVar16];\n                    uVar15 = uVar4 + 1;\n                    bVar6 = false;\n                    if ((uVar15 < uVar4) || (uVar15 == 0)) {\n                        bVar6 = true;\n                    }\n                    (&var_10h)[iVar16] = uVar15;\n                }\n            }\ncode_r0x0043692d:\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar13 = iVar13 + 1;\n            if (iVar13 < 3) {\n                puVar10 = &var_10h + iVar13;\n                for (iVar14 = 3 - iVar13; iVar14 != 0; iVar14 = iVar14 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n            }\n            iVar13 = *0x44c950 + 1 + (*0x44c950 + 1 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = uVar5 + 1 & 0x1f;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar14 = 2;\n            puVar10 = &var_8h + -iVar13;\n            do {\n                if (iVar14 < iVar13) {\n                    (&var_10h)[iVar14] = 0;\n                }\n                else {\n                    (&var_10h)[iVar14] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar14 = iVar14 + -1;\n            } while (-1 < iVar14);\n        }\n        iVar14 = 0;\n    }\ncode_r0x00436b39:\n    uVar15 = iVar14 << (0x1f - uVar5 & 0x1f) | -((uVar2 & 0x8000) != 0) & 0x80000000 | var_10h;\n    if (*0x44c954 == 0x40) {\n        arg_ch[1] = uVar15;\n        *arg_ch = var_ch;\n    }\n    else if (*0x44c954 == 0x20) {\n        *arg_ch = uVar15;\n    }\n    fcn.0042e9f9(uVar2 & 0x8000);\n    return;\n}\n",
        "token_count": 3236
    },
    "0042a9d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042a9d0(int32_t *param_1)\n\n{\n    *param_1 = *param_1 + -0x3910cb1f;\n    return;\n}\n",
        "token_count": 46
    },
    "0042acf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251",
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042acf0(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if (*0x664744 != 0) {\n        do {\n            *(uVar1 + param_1) = *(param_2 + 0xb2d3b + uVar1);\n            uVar1 = uVar1 + 1;\n        } while (uVar1 < *0x664744);\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "0042b0d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.0042b0d0(void)\n\n{\n    uint uStack16;\n    uint uStack12;\n    \n    uStack12 = 0x65c1a0;\n    uStack16 = 0x42b0de;\n    *0x65c18c = (*_sym.imp.KERNEL32.dll_LoadLibraryW)();\n    uStack16 = 0x44cc60;\n    *0x44cc60 = 0x74726956;\n    *0x44cc64 = 0x506c6175;\n    *0x44cc68 = 0x65746f72;\n    *0x44cc6c = 0x7463;\n    *0x44cc6e = 0;\n    *0x658c8c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x65c18c);\n    (**0x658c8c)(*0x658ca4, *0x664744, 0x40, &stack0xfffffff0);\n    return;\n}\n",
        "token_count": 225
    },
    "0042df05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042df05(uint arg_8h)\n\n{\n    fcn.0042ddc5(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "0042f767": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.0042f767(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    fcn.004348c1();\n    return in_ST0;\n}\n",
        "token_count": 89
    },
    "00431ddd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00431df1)\n// WARNING: Removing unreachable block (ram,0x00431df7)\n// WARNING: Removing unreachable block (ram,0x00431df9)\n\nvoid fcn.00431ddd(void)\n\n{\n    return;\n}\n",
        "token_count": 63
    },
    "0042e489": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042e489(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.0042d78a(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "00439043": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00439043(void)\n\n{\n    *0x44cc44 = (*_sym.imp.KERNEL32.dll_CreateFileW)(0x4051b0, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "0043031a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0043031a(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00431f80(0x43a720, 0xc);\n    fcn.004319ed(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x6649c0;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x6649bc;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x0043035e;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.0042d78a(arg_8h_00);\ncode_r0x0043035e:\n        fcn.0042d78a(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00430381();\n    fcn.00431fc5();\n    return;\n}\n",
        "token_count": 398
    }
}