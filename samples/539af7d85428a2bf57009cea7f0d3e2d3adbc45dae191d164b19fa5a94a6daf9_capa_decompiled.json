{
    "00401020": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401020(int32_t arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    uint var_59h;\n    uint var_4eh;\n    uint var_40h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *arg_ch;\n    var_8h = arg_ch[1];\n    (*_sym.imp.KERNEL32.dll_FindClose)(0x5874);\n    uVar1 = 0xc6ef3720;\n    do {\n        var_8h = var_8h - ((var_4h >> 5 ^ var_4h << 4) + *(arg_8h + (uVar1 >> 0xb & 3) * 4) + (uVar1 ^ var_4h));\n        uVar1 = uVar1 + 0x61c88647;\n        var_4h = var_4h - ((var_8h >> 5 ^ var_8h * 0x10) + *(arg_8h + (uVar1 & 3) * 4) + (uVar1 ^ var_8h));\n    } while (uVar1 != 0);\n    (*_sym.imp.KERNEL32.dll_FindClose)(0x5fae);\n    *arg_ch = var_4h;\n    arg_ch[1] = var_8h;\n    return;\n}\n",
        "token_count": 327
    },
    "00401110": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401110(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t *piVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uchar *puVar11;\n    uint var_109h;\n    uint var_ach;\n    uint var_92h;\n    uint var_5bh;\n    uint var_57h;\n    uint var_50h;\n    uchar var_4ch;\n    uint32_t var_4bh;\n    uint var_44h;\n    code *var_40h;\n    code *var_3ch;\n    uint var_38h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    code *var_ch;\n    int32_t *var_8h;\n    uint var_4h;\n    \n    var_8h = 0x28a;\n    iVar7 = 3;\n    do {\n        var_8h = var_8h * 2;\n        if (var_8h == NULL) {\n            var_8h = 0x6;\n        }\n        iVar7 = iVar7 + -1;\n    } while (iVar7 != 0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrcpynW)(0, 0, 0x4e82);\n    uVar5 = CONCAT13(var_4bh._3_1_, var_4bh) - uVar2;\n    _var_4ch = _var_4ch & 0xff | uVar5 * 0x100;\n    stack0xffffffb4 = stack0xffffffb4 & 0xffffff00 | uVar5 >> 0x18;\n    var_ch = var_ch & uVar2;\n    (*_sym.imp.KERNEL32.dll_GlobalSize)(0x63d4);\n    var_40h = _sym.imp.KERNEL32.dll_LoadLibraryA;\n    pcVar3 = (*_sym.imp.ole32.dll_OleDuplicateData)(0, 0, 0);\n    if (pcVar3 != NULL) {\n        (*pcVar3)();\n    }\n    pcVar1 = var_40h;\n    uVar4 = (*var_40h)(\"kernel32.dll\");\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_3ch = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4, 0x406d1c);\n    var_8h = 0x37d;\n    iVar7 = 7;\n    do {\n        var_8h = var_8h * 3;\n        if (var_8h == NULL) {\n            var_8h = 0x8;\n        }\n        iVar7 = iVar7 + -1;\n    } while (iVar7 != 0);\n    (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&var_38h);\n    uVar4 = (*pcVar1)(\"gdi32.dll\");\n    pcVar3 = (*pcVar3)(uVar4, \"GetGlyphOutlineW\");\n    iVar7 = (*pcVar3)(0, 0, 0, 0, 0, 0, 0);\n    if (iVar7 == 0) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    puVar11 = 0x400000;\n    (*_sym.imp.KERNEL32.dll_lstrcpynW)(0, 0, 0x4f18);\n    iVar7 = *0x40003c;\n    (*var_ch)(0x400000, *(*0x40003c + 0x400050), 0x40, &var_4h);\n    var_ch = _sym.imp.KERNEL32.dll_VirtualAlloc;\n    var_8h = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, *(iVar7 + 0x400050), 0x1000, 0x40);\n    iVar7 = *(iVar7 + 0x400050);\n    piVar6 = var_8h;\n    if (iVar7 != 0) {\n        do {\n            *(var_8h + -0x100000 + puVar11) = *puVar11;\n            puVar11 = puVar11 + 1;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n    }\n    for (; (*piVar6 != 0x6b3afa74 || (piVar6[1] != 0x2cd0c61a)); piVar6 = piVar6 + 1) {\n    }\n    var_50h = 0x23014028;\n    _var_4ch = 0x437f689e;\n    stack0xffffffb4 = 0x491a0d21;\n    var_44h = 0x1e6f1385;\n    iVar7 = 0x450;\n    var_10h = piVar6;\n    do {\n        fcn.00401020(&var_50h, piVar6);\n        piVar6 = piVar6 + 2;\n        iVar7 = iVar7 + -1;\n    } while (iVar7 != 0);\n    iVar7 = 0xd;\n    do {\n        iVar7 = iVar7 + -1;\n    } while (iVar7 != 0);\n    uVar5 = 0;\n    do {\n        if (*(uVar5 + var_10h) == 0x11002200) {\n            *(uVar5 + var_10h) = 0x400000;\n        }\n        if (*(uVar5 + var_10h) == 0x11002233) {\n            *(uVar5 + var_10h) = var_8h;\n        }\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x2280);\n    iVar7 = 0x2e5;\n    iVar9 = 0x18;\n    do {\n        iVar7 = iVar7 * 5;\n        if (iVar7 == 0) {\n            iVar7 = 0;\n        }\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    var_14h = var_10h + 0xd0;\n    piVar6 = var_10h + 0x870;\n    var_ch = NULL;\n    do {\n        piVar8 = piVar6 + 2;\n        for (uVar5 = piVar6[1] - 8U >> 1; uVar5 != 0; uVar5 = uVar5 - 1) {\n            if ((*piVar8 & 0xf000) == 0x3000) {\n                iVar7 = (*piVar8 & 0xfff) + *piVar6;\n                *(iVar7 + -0x260 + var_10h) = var_10h + *(iVar7 + -0x260 + var_10h) + -0x10000260;\n            }\n            piVar8 = piVar8 + 2;\n        }\n        var_ch = var_ch + piVar6[1];\n        piVar6 = piVar6 + piVar6[1];\n    } while (var_ch < 0xa8);\n    var_ch = 0x36;\n    iVar7 = 2;\n    do {\n        var_ch = var_ch + -1;\n        if (var_ch == NULL) {\n            var_ch = 0x7;\n        }\n        iVar7 = iVar7 + -1;\n    } while (iVar7 != 0);\n    piVar6 = var_10h + 0x821;\n    iVar7 = var_10h[0x825];\n    while (var_8h = piVar6,  iVar7 != 0) {\n        iVar7 = (*var_40h)(piVar6[3] + -0x260 + var_10h);\n        if (iVar7 != 0) {\n            iVar9 = *piVar6;\n            if (iVar9 == 0) {\n                iVar9 = piVar6[4];\n            }\n            piVar8 = iVar9 + -0x260 + var_10h;\n            puVar10 = var_10h + piVar6[4] + -0x260;\n            iVar9 = *piVar8;\n            piVar6 = var_8h;\n            while (iVar9 != 0) {\n                if (iVar9 < 0) {\n                    uVar5 = *piVar8;\n                }\n                else {\n                    uVar5 = var_10h + iVar9 + -0x25e;\n                }\n                var_8h = piVar6;\n                uVar4 = (*var_3ch)(iVar7, uVar5);\n                *puVar10 = uVar4;\n                var_ch = 0xad;\n                iVar9 = 0x21;\n                do {\n                    var_ch = var_ch + 7;\n                    if (var_ch == NULL) {\n                        var_ch = 0x1;\n                    }\n                    iVar9 = iVar9 + -1;\n                } while (iVar9 != 0);\n                piVar6 = piVar8 + 1;\n                piVar8 = piVar8 + 1;\n                puVar10 = puVar10 + 1;\n                iVar9 = *piVar6;\n                piVar6 = var_8h;\n            }\n        }\n        piVar8 = piVar6 + 9;\n        piVar6 = piVar6 + 5;\n        iVar7 = *piVar8;\n    }\n    (*var_14h)();\n    return;\n}\n",
        "token_count": 2169
    },
    "00401e9b": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401e9b(uint8_t **arg_8h, int32_t *arg_ch)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint8_t *in_EAX;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t uVar5;\n    uint8_t *in_ECX;\n    uint32_t uVar6;\n    int32_t *unaff_ESI;\n    uint var_4h;\n    \n    bVar1 = false;\n    *unaff_ESI = 0;\n    *arg_ch = 1;\n    if (arg_8h != NULL) {\n        *arg_8h = in_ECX;\n        arg_8h = arg_8h + 1;\n    }\n    do {\n        if (*in_EAX == 0x22) {\n            bVar1 = !bVar1;\n            puVar3 = in_EAX + 1;\n            uVar5 = 0x22;\n        }\n        else {\n            *unaff_ESI = *unaff_ESI + 1;\n            if (in_ECX != NULL) {\n                *in_ECX = *in_EAX;\n                in_ECX = in_ECX + 1;\n            }\n            uVar5 = *in_EAX;\n            puVar3 = in_EAX + 1;\n            if ((*(uVar5 + 0x42b2c1) & 4) != 0) {\n                *unaff_ESI = *unaff_ESI + 1;\n                if (in_ECX != NULL) {\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                puVar3 = in_EAX + 2;\n            }\n            if (uVar5 == 0) {\n                puVar3 = puVar3 + -1;\n                goto code_r0x00401f14;\n            }\n        }\n        in_EAX = puVar3;\n    } while ((bVar1) || ((uVar5 != 0x20 && (uVar5 != 9))));\n    if (in_ECX != NULL) {\n        in_ECX[-1] = 0;\n    }\ncode_r0x00401f14:\n    bVar1 = false;\n    while (*puVar3 != 0) {\n        for (; (*puVar3 == 0x20 || (*puVar3 == 9)); puVar3 = puVar3 + 1) {\n        }\n        if (*puVar3 == 0) break;\n        if (arg_8h != NULL) {\n            *arg_8h = in_ECX;\n            arg_8h = arg_8h + 1;\n        }\n        *arg_ch = *arg_ch + 1;\n        while( true ) {\n            bVar2 = true;\n            uVar6 = 0;\n            for (; *puVar3 == 0x5c; puVar3 = puVar3 + 1) {\n                uVar6 = uVar6 + 1;\n            }\n            if (*puVar3 == 0x22) {\n                puVar4 = puVar3;\n                if ((uVar6 & 1) == 0) {\n                    if ((!bVar1) || (puVar4 = puVar3 + 1,  *puVar4 != 0x22)) {\n                        bVar2 = false;\n                        puVar4 = puVar3;\n                    }\n                    bVar1 = !bVar1;\n                }\n                uVar6 = uVar6 >> 1;\n                puVar3 = puVar4;\n            }\n            for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n                if (in_ECX != NULL) {\n                    *in_ECX = 0x5c;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            uVar5 = *puVar3;\n            if ((uVar5 == 0) || ((!bVar1 && ((uVar5 == 0x20 || (uVar5 == 9)))))) break;\n            if (bVar2) {\n                if (in_ECX == NULL) {\n                    if ((*(uVar5 + 0x42b2c1) & 4) != 0) {\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                }\n                else {\n                    if ((*(uVar5 + 0x42b2c1) & 4) != 0) {\n                        *in_ECX = uVar5;\n                        in_ECX = in_ECX + 1;\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            puVar3 = puVar3 + 1;\n        }\n        if (in_ECX != NULL) {\n            *in_ECX = 0;\n            in_ECX = in_ECX + 1;\n        }\n        *unaff_ESI = *unaff_ESI + 1;\n    }\n    if (arg_8h != NULL) {\n        *arg_8h = NULL;\n    }\n    *arg_ch = *arg_ch + 1;\n    return;\n}\n",
        "token_count": 1221
    },
    "null": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nuint16_t * entry0(uint32_t param_1, int32_t param_2)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    uint arg_8h;\n    char cVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint16_t *puVar7;\n    uint16_t *puVar8;\n    uint16_t *puVar9;\n    uint8_t *arg_10h;\n    int32_t *piVar10;\n    uint32_t uVar11;\n    uint16_t *unaff_EBX;\n    int32_t unaff_EBP;\n    code *pcVar12;\n    ulong uVar13;\n    int32_t unaff_retaddr;\n    uint32_t in_stack_00000038;\n    uint16_t *in_stack_0000003c;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_4h;\n    int32_t iStack4;\n    \n    iStack4 = 0x60;\n    var_4h = 0x406128;\n    fcn.00402514();\n    fcn.00402670();\n    *(unaff_EBP + -0x18) = &var_4h;\n    var_4h = 0x94;\n    iVar5 = unaff_retaddr;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&var_4h);\n    *0x419aa8 = iVar5;\n    pcVar12 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    *0x419a98 = param_2;\n    *0x419aa4 = iStack4;\n    *0x419a9c = param_1 & 0x7fff;\n    if (param_2 != 2) {\n        *0x419a9c = *0x419a9c | 0x8000;\n    }\n    *0x419aa0 = iStack4 * 0x100 + *0x419aa8;\n    piVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0);\n    if ((*piVar4 == 0x5a4d) && (piVar10 = *(piVar4 + 0x1e) + piVar4,  *piVar10 == 0x4550)) {\n        if (*(piVar10 + 6) == 0x10b) {\n            if (piVar10[0x1d] < 0xf) goto code_r0x004016c8;\n            iVar5 = piVar10[0x3a];\n        }\n        else {\n            if ((*(piVar10 + 6) != 0x20b) || (piVar10[0x21] < 0xf)) goto code_r0x004016c8;\n            iVar5 = piVar10[0x3e];\n        }\n        *(unaff_EBP + -0x1c) = iVar5 != 0;\n    }\n    else {\ncode_r0x004016c8:\n        *(unaff_EBP + -0x1c) = 0;\n    }\n    iVar5 = fcn.0040243b(0);\n    if (iVar5 == 0) {\n        if (*0x419a88 == 1) {\n            fcn.00401b7b();\n        }\n        fcn.004019da(0x1c);\n        fcn.00401809(0xff);\n    }\n    fcn.00402399();\n    *(unaff_EBP + -4) = 0;\n    iVar5 = fcn.004021cb();\n    if (iVar5 < 0) {\n        fcn.0040158e(0x1b);\n    }\n    uVar13 = (*_pe_dos_header)();\n    pcVar6 = uVar13;\n    cVar3 = uVar13;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    *pcVar6 = *pcVar6 + cVar3;\n    pcVar6[-0x3f] = pcVar6[-0x3f] + (unaff_EBX >> 8);\n    puVar7 = (uVar13 >> 0x20) + pcVar6 * 2;\n    if (in_stack_00000038 < 0x1000000) {\n        if (unaff_EBX == in_stack_0000003c) {\n            puVar8 = (*pcVar12)();\n            if (puVar8 == unaff_EBX) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                if (iVar5 == 0x78) {\n                    *0x419bf0 = puVar7;\n                }\n                if (*0x419bf0 != 0x1) {\n                    if ((*0x419bf0 != puVar7) && (*0x419bf0 != unaff_EBX)) {\n                        return NULL;\n                    }\n                    puVar7 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStrings)();\n                    if (puVar7 == unaff_EBX) {\n                        return NULL;\n                    }\n                    uVar1 = *puVar7;\n                    puVar8 = puVar7;\n                    while (uVar1 != unaff_EBX) {\n                        do {\n                            puVar9 = puVar8;\n                            puVar8 = puVar9 + 1;\n                        } while (*puVar8 != unaff_EBX);\n                        puVar8 = puVar9 + 1;\n                        uVar1 = *puVar8;\n                    }\n                    arg_10h = puVar8 + (1 - puVar7);\n                    puVar8 = fcn.00403162(arg_10h);\n                    if (puVar8 == unaff_EBX) {\n                        puVar8 = NULL;\n                    }\n                    else {\n                        fcn.00403180(puVar8, puVar7, arg_10h);\n                    }\n                    (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsA)(puVar7);\n                    return puVar8;\n                }\n            }\n            else {\n                *0x419bf0 = 0x1;\n            }\n            if ((puVar8 == unaff_EBX) && (puVar8 = (*pcVar12)(),  puVar8 == unaff_EBX)) {\n                return NULL;\n            }\n            pcVar12 = _sym.imp.KERNEL32.dll_WideCharToMultiByte;\n            uVar2 = *puVar8;\n            puVar9 = puVar8;\n            while (uVar2 != unaff_EBX) {\n                do {\n                    puVar9 = puVar9 + puVar7;\n                } while (*puVar9 != unaff_EBX);\n                puVar9 = puVar9 + puVar7;\n                uVar2 = *puVar9;\n            }\n            puVar9 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)();\n            puVar7 = unaff_EBX;\n            if (((puVar9 != unaff_EBX) && (puVar9 = fcn.00403162(puVar9),  puVar9 != unaff_EBX)) &&\n               (iVar5 = (*pcVar12)(),  puVar7 = puVar9,  iVar5 == 0)) {\n                fcn.004030b8(puVar9);\n                puVar7 = unaff_EBX;\n            }\n            (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(puVar8);\n            return puVar7;\n        }\n        in_stack_00000038 = in_stack_00000038 << 8;\n        uVar1 = *unaff_EBX;\n        unaff_EBX = unaff_EBX + 1;\n        pcVar12 = pcVar12 << 8 | uVar1;\n    }\n    uVar11 = *puVar7;\n    if (pcVar12 < (in_stack_00000038 >> 0xb) * uVar11) {\n        out(*puVar7, 0xe8000800);\n        *0xe8000800 = *0xe8000800 + -0x17fff800;\n        arg_8h = *(uVar11 - *((unaff_EBX & 0xffffff00 | unaff_EBX + (uVar11 >> 8)) + 0x88bec45));\n        *(puVar7 + -0x12) = arg_8h;\n        puVar7 = fcn.00401beb(arg_8h, 0xe8000800);\n        return puVar7;\n    }\n    if ((unaff_EBX & 0x7f00) == 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    halt_baddata();\n}\n",
        "token_count": 2363
    },
    "004021cb": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.004021cb(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uchar auStack68 [46];\n    int16_t iStack22;\n    int32_t *piStack20;\n    \n    puVar3 = fcn.00403162(0x100);\n    if (puVar3 == NULL) {\n        uVar4 = 0xffffffff;\n    }\n    else {\n        *0x42b4e8 = 0x20;\n        *0x42b500 = puVar3;\n        for (; puVar3 < *0x42b500 + 0x40; puVar3 = puVar3 + 2) {\n            *puVar3 = 0xffffffff;\n            *(puVar3 + 1) = 0;\n            *(puVar3 + 5) = 10;\n        }\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack68);\n        if ((iStack22 != 0) && (piStack20 != NULL)) {\n            iVar8 = *piStack20;\n            piStack20 = piStack20 + 1;\n            piVar7 = iVar8 + piStack20;\n            if (0x7ff < iVar8) {\n                iVar8 = 0x800;\n            }\n            iVar6 = iVar8;\n            if (*0x42b4e8 < iVar8) {\n                puVar3 = 0x42b504;\n                do {\n                    puVar5 = fcn.00403162(0x100);\n                    iVar6 = *0x42b4e8;\n                    if (puVar5 == NULL) break;\n                    *0x42b4e8 = *0x42b4e8 + 0x20;\n                    *puVar3 = puVar5;\n                    puVar2 = puVar5;\n                    for (; puVar5 < puVar2 + 0x40; puVar5 = puVar5 + 2) {\n                        *puVar5 = 0xffffffff;\n                        *(puVar5 + 1) = 0;\n                        *(puVar5 + 5) = 10;\n                        puVar2 = *puVar3;\n                    }\n                    puVar3 = puVar3 + 1;\n                    iVar6 = iVar8;\n                } while (*0x42b4e8 < iVar8);\n            }\n            uVar9 = 0;\n            if (0 < iVar6) {\n                do {\n                    if (((*piVar7 != -1) && ((*piStack20 & 1) != 0)) &&\n                       (((*piStack20 & 8) != 0 || (iVar8 = (*_sym.imp.KERNEL32.dll_GetFileType)(*piVar7),  iVar8 != 0)))\n                       ) {\n                        piVar1 = *((uVar9 >> 5) * 4 + 0x42b500) + (uVar9 & 0x1f) * 8;\n                        *piVar1 = *piVar7;\n                        *(piVar1 + 1) = *piStack20;\n                    }\n                    uVar9 = uVar9 + 1;\n                    piStack20 = piStack20 + 1;\n                    piVar7 = piVar7 + 1;\n                } while (uVar9 < iVar6);\n            }\n        }\n        iVar8 = 0;\n        do {\n            piVar7 = *0x42b500 + iVar8 * 2;\n            if (*piVar7 == -1) {\n                *(piVar7 + 1) = 0x81;\n                if (iVar8 == 0) {\n                    iVar6 = -10;\n                }\n                else {\n                    iVar6 = -0xb - (iVar8 != 1);\n                }\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetStdHandle)(iVar6);\n                if ((iVar6 != -1) && (uVar9 = (*_sym.imp.KERNEL32.dll_GetFileType)(iVar6),  uVar9 != 0)) {\n                    *piVar7 = iVar6;\n                    if ((uVar9 & 0xff) != 2) {\n                        if ((uVar9 & 0xff) == 3) {\n                            *(piVar7 + 1) = *(piVar7 + 1) | 8;\n                        }\n                        goto code_r0x0040235b;\n                    }\n                }\n                *(piVar7 + 1) = *(piVar7 + 1) | 0x40;\n            }\n            else {\n                *(piVar7 + 1) = *(piVar7 + 1) | 0x80;\n            }\ncode_r0x0040235b:\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 3);\n        (*_sym.imp.KERNEL32.dll_SetHandleCount)(*0x42b4e8);\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 1124
    },
    "00402421": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00402421(void)\n\n{\n    if ((*0x419a98 == 2) && (4 < *0x419aa4)) {\n        return 1;\n    }\n    return 3;\n}\n",
        "token_count": 48
    },
    "00402769": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00402769(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar4 = 0;\n    if (*0x419bf4 == NULL) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"user32.dll\");\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar2 == 0) ||\n           (*0x419bf4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"MessageBoxA\"),  *0x419bf4 == NULL)) {\n            return 0;\n        }\n        *0x419bf8 = (*pcVar1)(iVar2, \"GetActiveWindow\");\n        *0x419bfc = (*pcVar1)(iVar2, \"GetLastActivePopup\");\n        if ((*0x419a98 == 2) && (*0x419c04 = (*pcVar1)(iVar2, \"GetUserObjectInformationA\"),  *0x419c04 != NULL)) {\n            *0x419c00 = (*pcVar1)(iVar2, \"GetProcessWindowStation\");\n        }\n    }\n    if ((*0x419c00 == NULL) ||\n       (((iVar2 = (**0x419c00)(),  iVar2 != 0 && (iVar2 = (**0x419c04)(iVar2, 1, &var_10h, 0xc, &var_4h),  iVar2 != 0))\n        && ((var_8h & 1) != 0)))) {\n        if (((*0x419bf8 != NULL) && (iVar4 = (**0x419bf8)(),  iVar4 != 0)) && (*0x419bfc != NULL)) {\n            iVar4 = (**0x419bfc)(iVar4);\n        }\n    }\n    else if (*0x419aa4 < 4) {\n        arg_10h = arg_10h | 0x40000;\n    }\n    else {\n        arg_10h = arg_10h | 0x200000;\n    }\n    uVar3 = (**0x419bf4)(iVar4, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 550
    },
    "00404adf": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_38h_2\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: lpSrcStr\n// WARNING: Variable defined which should be unmapped: var_44h\n// WARNING: Variable defined which should be unmapped: var_40h_2\n// WARNING: Variable defined which should be unmapped: var_3ch_2\n// WARNING: Variable defined which should be unmapped: var_54h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h_2\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.00404adf(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint CodePage, uint arg_24h, uint arg_8h, \n            uint arg_ch, uint arg_10h, uint cchSrc, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *lpMultiByteStr_00;\n    int32_t unaff_EBP;\n    uint var_2ch;\n    uint var_48h;\n    uint var_24h_2;\n    uint var_40h;\n    uint lpWideCharStr;\n    uint lpDestStr;\n    uint cchDest;\n    uint var_20h_2;\n    uint var_24h_3;\n    uint var_28h;\n    uint var_24h;\n    uint Locale;\n    uint dwMapFlags;\n    uint lpMultiByteStr;\n    uint cbMultiByte;\n    uint var_18h_2;\n    uint var_4h;\n    uint uVar5;\n    uint uVar6;\n    uint var_38h_2;\n    uint var_34h;\n    uint var_30h_2;\n    uint var_20h;\n    uint lpSrcStr;\n    uint var_44h;\n    uint var_40h_2;\n    uint var_3ch_2;\n    uint var_38h;\n    uint var_54h;\n    uint var_30h;\n    \n    fcn.00402514();\n    if (*0x419c80 == 0) {\n        lpSrcStr = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x419c80 = 2;\n            }\n        }\n        else {\n            *0x419c80 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        iVar1 = *(unaff_EBP + 0x14);\n        pcVar2 = *(unaff_EBP + 0x10);\n        do {\n            iVar1 = iVar1 + -1;\n            if (*pcVar2 == '\\0') goto code_r0x00404b45;\n            pcVar2 = pcVar2 + 1;\n        } while (iVar1 != 0);\n        iVar1 = -1;\ncode_r0x00404b45:\n        *(unaff_EBP + 0x14) = *(unaff_EBP + 0x14) + (-1 - iVar1);\n    }\n    if ((*0x419c80 != 2) && (*0x419c80 != 0)) {\n        if (*0x419c80 != 1) goto code_r0x00404e92;\n        *(unaff_EBP + -0x2c) = 0;\n        *(unaff_EBP + -0x38) = 0;\n        *(unaff_EBP + -0x34) = 0;\n        if (*(unaff_EBP + 0x20) == 0) {\n            *(unaff_EBP + 0x20) = *0x419c78;\n        }\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x30) = iVar1;\n        if (iVar1 == 0) goto code_r0x00404e92;\n        *(unaff_EBP + -4) = 1;\n        fcn.00402670();\n        *(unaff_EBP + -0x18) = &fcn.00404adf::lpSrcStr;\n        *(unaff_EBP + -0x1c) = &fcn.00404adf::lpSrcStr;\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x1c) == 0) {\n            iVar3 = fcn.00403162();\n            *(unaff_EBP + -0x1c) = iVar3;\n            if (iVar3 == 0) goto code_r0x00404e92;\n            *(unaff_EBP + -0x38) = 1;\n        }\n        var_30h_2 = 1;\n        var_34h = *(unaff_EBP + 0x20);\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        if (iVar3 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, 0, 0);\n            *(unaff_EBP + -0x2c) = iVar3;\n            if (iVar3 != 0) {\n                if ((*(unaff_EBP + 0xd) & 4) == 0) {\n                    *(unaff_EBP + -4) = 2;\n                    fcn.00402670();\n                    *(unaff_EBP + -0x18) = &fcn.00404adf::var_34h;\n                    *(unaff_EBP + -0x20) = &fcn.00404adf::var_34h;\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x20) == 0) {\n                        iVar4 = fcn.00403162(iVar3 * 2);\n                        *(unaff_EBP + -0x20) = iVar4;\n                        if (iVar4 == 0) goto code_r0x00404d14;\n                        *(unaff_EBP + -0x34) = 1;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                                      (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, \n                                       *(unaff_EBP + -0x20), iVar3);\n                    if (iVar1 != 0) {\n                        if (*(unaff_EBP + 0x1c) == 0) {\n                            uVar6 = 0;\n                            uVar5 = 0;\n                        }\n                        else {\n                            uVar6 = *(unaff_EBP + 0x1c);\n                            uVar5 = *(unaff_EBP + 0x18);\n                        }\n                        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x20), 0, *(unaff_EBP + -0x20), iVar3, uVar5, uVar6, 0, 0);\n                    }\n                }\n                else if ((*(unaff_EBP + 0x1c) != 0) && (iVar3 <= *(unaff_EBP + 0x1c))) {\n                    (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, *(unaff_EBP + 0x18), \n                               *(unaff_EBP + 0x1c));\n                }\n            }\n        }\ncode_r0x00404d14:\n        if (*(unaff_EBP + -0x34) != 0) {\n            fcn.004030b8(*(unaff_EBP + -0x20));\n        }\n        if (*(unaff_EBP + -0x38) != 0) {\n            fcn.004030b8(*(unaff_EBP + -0x1c));\n        }\n        goto code_r0x00404e92;\n    }\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x3c) = 0;\n    if (*(unaff_EBP + 8) == 0) {\n        *(unaff_EBP + 8) = *0x419c68;\n    }\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x419c78;\n    }\n    iVar1 = fcn.00405430(*(unaff_EBP + 8));\n    *(unaff_EBP + -0x40) = iVar1;\n    if (iVar1 == -1) goto code_r0x00404e92;\n    if (iVar1 == *(unaff_EBP + 0x20)) {\n        lpSrcStr = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n    }\n    else {\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = fcn.00405473(lpSrcStr, iVar1, *(unaff_EBP + 0x10), unaff_EBP + 0x14, 0, 0, 0x406cb8, 0x38);\n        *(unaff_EBP + -0x28) = iVar1;\n        if (iVar1 == 0) goto code_r0x00404e92;\n        uVar6 = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        lpMultiByteStr_00 = &fcn.00404adf::lpSrcStr;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n        *(unaff_EBP + -0x24) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402670();\n            *(unaff_EBP + -0x18) = &fcn.00404adf::lpSrcStr;\n            *(unaff_EBP + -0x44) = &fcn.00404adf::lpSrcStr;\n            fcn.004053d0();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                lpMultiByteStr_00 = fcn.00403162();\n                if (lpMultiByteStr_00 == NULL) goto code_r0x00404e5a;\n                fcn.004053d0();\n                *(unaff_EBP + -0x3c) = 1;\n            }\n            var_30h_2 = *(unaff_EBP + 0xc);\n            var_34h = *(unaff_EBP + 8);\n            iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n            *(unaff_EBP + -0x24) = iVar1;\n            if (iVar1 != 0) {\n                var_30h_2 = *(unaff_EBP + 0x20);\n                var_34h = *(unaff_EBP + -0x40);\n                fcn.00405473(var_34h, var_30h_2, lpMultiByteStr_00, unaff_EBP + -0x24, *(unaff_EBP + 0x18), \n                             *(unaff_EBP + 0x1c), lpSrcStr, uVar6);\n            }\n        }\ncode_r0x00404e5a:\n        if (*(unaff_EBP + -0x3c) != 0) {\n            fcn.004030b8();\n        }\n    }\n    if (*(unaff_EBP + -0x28) != 0) {\n        fcn.004030b8();\n    }\ncode_r0x00404e92:\n    *(unaff_EBP + -0x58) = 0x404e9a;\n    fcn.0040254f();\n    return;\n}\n",
        "token_count": 2941
    },
    "00404e9b": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_28h_2\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: lpCharType\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.00404e9b(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint arg_20h_2, \n            uint noname_7, uint arg_8h, uint lpMultiByteStr, uint cbMultiByte, uint arg_14h, uint CodePage, uint arg_1ch\n            , uint arg_20h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t noname_1_00;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    int32_t noname_0_00;\n    uint dwInfoType;\n    uint var_ch;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_2ch;\n    uint var_28h_2;\n    uint var_24h_2;\n    uint var_20h_2;\n    int32_t lpCharType;\n    int32_t var_38h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    fcn.00402514();\n    iVar4 = 0;\n    if (*0x419c84 == 0) {\n        var_38h = 0x404ec5;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x419c84 = 2;\n            }\n        }\n        else {\n            *0x419c84 = 1;\n        }\n    }\n    if ((*0x419c84 == 2) || (*0x419c84 == 0)) {\n        iVar1 = *(unaff_EBP + 0x1c);\n        if (*(unaff_EBP + 0x1c) == 0) {\n            iVar1 = *0x419c68;\n        }\n        noname_0_00 = *(unaff_EBP + 0x18);\n        if (*(unaff_EBP + 0x18) == 0) {\n            noname_0_00 = *0x419c78;\n        }\n        noname_1_00 = fcn.00405430(iVar1);\n        if (noname_1_00 != -1) {\n            if (noname_1_00 != noname_0_00) {\n                lpCharType = noname_0_00;\n                var_38h = noname_1_00;\n                iVar4 = fcn.00405473(noname_0_00, noname_1_00, *(unaff_EBP + 0xc), unaff_EBP + 0x10, 0, 0, 0x406ce0, \n                                     0x1c);\n                if (iVar4 == 0) goto code_r0x0040504c;\n                *(unaff_EBP + 0xc) = iVar4;\n            }\n            lpCharType = 0x40503d;\n            var_38h = iVar1;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeA)();\n            if (iVar4 != 0) {\n                lpCharType = iVar4;\n                fcn.004030b8();\n            }\n        }\n    }\n    else if (*0x419c84 == 1) {\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x419c78;\n        }\n        var_38h = (*(unaff_EBP + 0x20) != 0) * 8 + 1;\n        lpCharType = *(unaff_EBP + 0x18);\n        puVar2 = &fcn.00404e9b::lpCharType;\n        iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x28) = iVar4;\n        if (iVar4 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402670();\n            *(unaff_EBP + -0x18) = &fcn.00404e9b::lpCharType;\n            *(unaff_EBP + -0x2c) = &fcn.00404e9b::lpCharType;\n            fcn.004053d0(&fcn.00404e9b::lpCharType, 0, iVar4 * 2);\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                puVar2 = fcn.0040571f(2, iVar4);\n                if (puVar2 == NULL) goto code_r0x0040504c;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x18), 1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), puVar2, iVar4);\n            if (iVar4 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)(*(unaff_EBP + 8), puVar2, iVar4, *(unaff_EBP + 0x14));\n                *(unaff_EBP + -0x24) = uVar3;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.004030b8(puVar2);\n            }\n        }\n    }\ncode_r0x0040504c:\n    *(unaff_EBP + -0x3c) = 0x405054;\n    fcn.0040254f();\n    return;\n}\n",
        "token_count": 1533
    },
    "004018d9": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004018d9(uint uExitCode, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    code **ppcVar2;\n    bool bVar3;\n    \n    if (*0x419ad8 == 1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(uExitCode);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    *0x419ad4 = 1;\n    *0x419ad0 = arg_10h;\n    if (arg_ch == 0) {\n        if (*0x42b608 != NULL) {\n            *0x42b604 = *0x42b604 + -1;\n            bVar3 = *0x42b604 < *0x42b608;\n            while (!bVar3) {\n                if (**0x42b604 != NULL) {\n                    (***0x42b604)();\n                }\n                *0x42b604 = *0x42b604 + -1;\n                bVar3 = *0x42b604 < *0x42b608;\n            }\n        }\n        ppcVar2 = 0x40801c;\n        do {\n            if (*ppcVar2 != NULL) {\n                (**ppcVar2)();\n            }\n            ppcVar2 = ppcVar2 + 1;\n        } while (ppcVar2 < 0x408020);\n    }\n    ppcVar2 = 0x408024;\n    do {\n        if (*ppcVar2 != NULL) {\n            (**ppcVar2)();\n        }\n        ppcVar2 = ppcVar2 + 1;\n    } while (ppcVar2 < 0x408028);\n    if (arg_10h == 0) {\n        *0x419ad8 = 1;\n        fcn.00401809(uExitCode);\n    }\n    return;\n}\n",
        "token_count": 432
    },
    "004019da": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004019da(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uStack296;\n    uchar *puStack292;\n    uint uStack288;\n    uchar auStack272 [260];\n    uchar uStack12;\n    uint uStack8;\n    \n    uStack8 = *0x408170;\n    uVar1 = 0;\n    do {\n        if (param_1 == *(uVar1 * 8 + 0x408038)) break;\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 0x13);\n    if (param_1 == *(uVar1 * 8 + 0x408038)) {\n        if ((*0x419a88 == 1) || ((*0x419a88 == 0 && (*0x408034 == 1)))) {\n            uStack288 = 0;\n            puStack292 = &stack0x00000004;\n            uStack296 = *(uVar1 * 8 + 0x40803c);\n            uStack296 = fcn.00402aa0();\n            (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n            (*_sym.imp.KERNEL32.dll_WriteFile)();\n        }\n        else if (param_1 != 0xfc) {\n            uStack288 = 0x104;\n            puStack292 = &stack0xfffffef0;\n            uStack296 = 0;\n            uStack12 = 0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)();\n            if (iVar2 == 0) {\n                fcn.00402870();\n            }\n            iVar2 = fcn.00402aa0();\n            if (0x3c < iVar2 + 1U) {\n                fcn.00402aa0();\n                fcn.00402970();\n            }\n            fcn.00402aa0();\n            fcn.00402aa0();\n            fcn.00402670();\n            fcn.00402870();\n            fcn.00402880();\n            fcn.00402880();\n            fcn.00402880();\n            fcn.00402769(&stack0xfffffed8, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n        }\n    }\n    uStack288 = 0x401b46;\n    fcn.00402b5c();\n    return;\n}\n",
        "token_count": 528
    },
    "00401beb": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401beb(int32_t arg_8h, uint ExceptionInfo)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    \n    uVar2 = *0x419ae0;\n    piVar4 = 0x4080d0;\n    do {\n        if (*piVar4 == arg_8h) break;\n        piVar4 = piVar4 + 3;\n    } while (piVar4 < *0x408150 * 0xc + 0x4080d0U);\n    if ((*0x408150 * 0xc + 0x4080d0U <= piVar4) || (*piVar4 != arg_8h)) {\n        piVar4 = NULL;\n    }\n    if ((piVar4 == NULL) || (pcVar1 = piVar4[2],  pcVar1 == NULL)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(ExceptionInfo);\n    }\n    else if (pcVar1 == 0x5) {\n        piVar4[2] = 0;\n        uVar3 = 1;\n    }\n    else {\n        if (pcVar1 != 0x1) {\n            *0x419ae0 = ExceptionInfo;\n            if (piVar4[1] == 8) {\n                if (*0x408148 < *0x40814c + *0x408148) {\n                    puVar6 = *0x408148 * 0xc + 0x4080d8;\n                    iVar5 = (*0x40814c + *0x408148) - *0x408148;\n                    do {\n                        *puVar6 = 0;\n                        puVar6 = puVar6 + 3;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                }\n                uVar3 = *0x408154;\n                iVar5 = *piVar4;\n                if (iVar5 == -0x3fffff72) {\n                    *0x408154 = 0x83;\n                }\n                else if (iVar5 == -0x3fffff70) {\n                    *0x408154 = 0x81;\n                }\n                else if (iVar5 == -0x3fffff6f) {\n                    *0x408154 = 0x84;\n                }\n                else if (iVar5 == -0x3fffff6d) {\n                    *0x408154 = 0x85;\n                }\n                else if (iVar5 == -0x3fffff73) {\n                    *0x408154 = 0x82;\n                }\n                else if (iVar5 == -0x3fffff71) {\n                    *0x408154 = 0x86;\n                }\n                else if (iVar5 == -0x3fffff6e) {\n                    *0x408154 = 0x8a;\n                }\n                (*pcVar1)(8, *0x408154);\n                *0x408154 = uVar3;\n            }\n            else {\n                piVar4[2] = 0;\n                (*pcVar1)(piVar4[1]);\n            }\n        }\n        uVar3 = 0xffffffff;\n        *0x419ae0 = uVar2;\n    }\n    return uVar3;\n}\n",
        "token_count": 756
    },
    "00402d18": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_518h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00402d18(void)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint8_t *puVar8;\n    uint unaff_ESI;\n    uint *puVar9;\n    uint noname_8;\n    uint noname_9;\n    uint *noname_2;\n    uint noname_11;\n    uint *noname_4;\n    uint noname_13;\n    uint noname_14;\n    uint noname_15;\n    uint noname_8_00;\n    uint *noname_1;\n    uint noname_10;\n    uint noname_12;\n    uint noname_13_00;\n    uint noname_14_00;\n    uint noname_7;\n    uint *arg_8h;\n    uint var_518h;\n    uint in_stack_fffffae8;\n    uint in_stack_fffffaec;\n    uint in_stack_fffffaf0;\n    uint in_stack_fffffaf4;\n    uint in_stack_fffffaf8;\n    uint in_stack_fffffafc;\n    uint in_stack_fffffb00;\n    uint in_stack_fffffb04;\n    uint var_318h;\n    uint var_218h;\n    uint var_118h;\n    uint lpCPInfo;\n    uint var_12h;\n    uint var_4h;\n    \n    var_4h = *0x408170;\n    arg_8h = &lpCPInfo;\n    noname_7 = *0x42b3c4;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    if (iVar2 == 1) {\n        uVar3 = 0;\n        do {\n            *(&var_118h + uVar3) = uVar3;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n        var_118h._0_1_ = 0x20;\n        if (var_12h != 0) {\n            puVar8 = &var_12h + 1;\n            do {\n                uVar3 = var_12h;\n                if (uVar3 <= *puVar8) {\n                    uVar6 = (*puVar8 - uVar3) + 1;\n                    puVar9 = &var_118h + uVar3;\n                    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n                        *puVar9 = 0x20202020;\n                        puVar9 = puVar9 + 1;\n                    }\n                    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                        *puVar9 = 0x20;\n                        puVar9 = puVar9 + 1;\n                    }\n                }\n                var_12h._0_1_ = puVar8[1];\n                puVar8 = puVar8 + 2;\n            } while (var_12h != 0);\n        }\n        noname_14_00 = 0;\n        puVar9 = &var_518h;\n        noname_10 = 0x100;\n        noname_1 = &var_118h;\n        noname_8_00 = 1;\n        noname_12 = *0x42b3c4;\n        noname_13_00 = *0x42b2a0;\n        fcn.00404e9b(1, noname_1, 0x100, puVar9, *0x42b3c4, *0x42b2a0, 0, noname_7, arg_8h, unaff_ESI, var_518h, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4);\n        noname_15 = 0;\n        noname_4 = &var_218h;\n        noname_13 = 0x100;\n        noname_11 = 0x100;\n        noname_2 = &var_118h;\n        noname_9 = 0x100;\n        noname_8 = *0x42b2a0;\n        noname_14 = *0x42b3c4;\n        fcn.00404adf(*0x42b2a0, 0x100, noname_2, 0x100, noname_4, 0x100, *0x42b3c4, 0, noname_8_00, noname_1, noname_10\n                     , puVar9, noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, var_518h, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4, in_stack_fffffaf8, \n                     in_stack_fffffafc, in_stack_fffffb00, in_stack_fffffb04);\n        fcn.00404adf(*0x42b2a0, 0x200, &var_118h, 0x100, &var_318h, 0x100, *0x42b3c4, 0, noname_8, noname_9, noname_2, \n                     noname_11, noname_4, noname_13, noname_14, noname_15, noname_8_00, noname_1, noname_10, puVar9, \n                     noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, var_518h);\n        uVar3 = 0;\n        do {\n            uVar1 = *(&var_518h + uVar3 * 2);\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 & 2) != 0) {\n                    *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | 0x20;\n                    uVar4 = *(&var_318h + uVar3);\n                    goto code_r0x00402e2a;\n                }\n                *(uVar3 + 0x42b3e0) = 0;\n            }\n            else {\n                *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | 0x10;\n                uVar4 = *(&var_218h + uVar3);\ncode_r0x00402e2a:\n                *(uVar3 + 0x42b3e0) = uVar4;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    else {\n        uVar3 = 0;\n        do {\n            if ((uVar3 < 0x41) || (0x5a < uVar3)) {\n                if ((0x60 < uVar3) && (uVar3 < 0x7b)) {\n                    *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | 0x20;\n                    cVar5 = uVar3 + -0x20;\n                    goto code_r0x00402e6d;\n                }\n                *(uVar3 + 0x42b3e0) = 0;\n            }\n            else {\n                *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | 0x10;\n                cVar5 = uVar3 + ' ';\ncode_r0x00402e6d:\n                *(uVar3 + 0x42b3e0) = cVar5;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    fcn.00402b5c();\n    return;\n}\n",
        "token_count": 1885
    },
    "00402ea4": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402ea4(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uint *puVar9;\n    uint32_t var_1ch;\n    uint32_t lpCPInfo;\n    uint var_12h;\n    uint var_4h;\n    \n    var_4h = *0x408170;\n    *0x419c08 = 0;\n    if (arg_8h == -2) {\n        *0x419c08 = 1;\n        arg_8h = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    }\n    else if (arg_8h == -3) {\n        *0x419c08 = 1;\n        arg_8h = (*_sym.imp.KERNEL32.dll_GetACP)();\n    }\n    else if (arg_8h == -4) {\n        *0x419c08 = 1;\n        arg_8h = *0x419c78;\n    }\n    if (arg_8h == *0x42b3c4) goto code_r0x0040307d;\n    if (arg_8h != 0) {\n        iVar6 = 0;\n        uVar3 = 0;\ncode_r0x00402f1f:\n        if (*(uVar3 + 0x408180) != arg_8h) goto code_r0x00402f27;\n        puVar9 = 0x42b2c0;\n        for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        var_1ch = 0;\n        *puVar9 = 0;\n        puVar7 = iVar6 * 0x30 + 0x408190;\n        do {\n            uVar2 = *puVar7;\n            puVar8 = puVar7;\n            while ((uVar2 != 0 && (uVar1 = puVar8[1],  uVar1 != 0))) {\n                uVar3 = uVar2;\n                if (uVar3 <= uVar1) {\n                    uVar2 = *(var_1ch + 0x408178);\n                    do {\n                        *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | uVar2;\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar1);\n                }\n                puVar8 = puVar8 + 2;\n                uVar2 = *puVar8;\n            }\n            var_1ch = var_1ch + 1;\n            puVar7 = puVar7 + 8;\n        } while (var_1ch < 4);\n        *0x42b3c4 = arg_8h;\n        *0x42b2a4 = 1;\n        *0x42b2a0 = fcn.00402cc0();\n        *0x42b3d0 = *(extraout_ECX + 0x408184);\n        *0x42b3d4 = *(extraout_ECX + 0x408188);\n        *0x42b3d8 = *(extraout_ECX + 0x40818c);\n        goto code_r0x00403071;\n    }\ncode_r0x0040306c:\n    fcn.00402cef();\ncode_r0x00403071:\n    fcn.00402d18();\ncode_r0x0040307d:\n    fcn.00402b5c();\n    return;\ncode_r0x00402f27:\n    uVar3 = uVar3 + 0x30;\n    iVar6 = iVar6 + 1;\n    if (0xef < uVar3) goto code_r0x00402f32;\n    goto code_r0x00402f1f;\ncode_r0x00402f32:\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(arg_8h, &lpCPInfo);\n    if (iVar6 != 1) {\n        if (*0x419c08 == 0) goto code_r0x0040307d;\n        goto code_r0x0040306c;\n    }\n    puVar9 = 0x42b2c0;\n    for (iVar6 = 0x40; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar9 = 0;\n    uVar3 = 1;\n    *0x42b2a0 = 0;\n    *0x42b3c4 = arg_8h;\n    if (lpCPInfo < 2) {\n        *0x42b2a4 = 0;\n    }\n    else {\n        if (var_12h != '\\0') {\n            puVar7 = &var_12h + 1;\n            do {\n                uVar2 = *puVar7;\n                if (uVar2 == 0) break;\n                for (uVar4 = puVar7[-1]; uVar4 <= uVar2; uVar4 = uVar4 + 1) {\n                    *(uVar4 + 0x42b2c1) = *(uVar4 + 0x42b2c1) | 4;\n                }\n                puVar8 = puVar7 + 1;\n                puVar7 = puVar7 + 2;\n            } while (*puVar8 != 0);\n        }\n        do {\n            *(uVar3 + 0x42b2c1) = *(uVar3 + 0x42b2c1) | 8;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0xff);\n        *0x42b2a0 = fcn.00402cc0();\n        *0x42b2a4 = 1;\n    }\n    *0x42b3d0 = 0;\n    *0x42b3d4 = 0;\n    *0x42b3d8 = 0;\n    goto code_r0x00403071;\n}\n",
        "token_count": 1456
    },
    "004030f0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004030f0(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if (((*0x42b4e4 == 3) && (param_1 <= *0x42b290)) && (iVar1 = fcn.0040413e(param_1),  iVar1 != 0)) {\n        return;\n    }\n    if (param_1 == 0) {\n        param_1 = 1;\n    }\n    if (*0x42b4e4 != 1) {\n        param_1 = param_1 + 0xf & 0xfffffff0;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x42b4e0, 0, param_1);\n    return;\n}\n",
        "token_count": 171
    },
    "00403545": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403545(uint32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    code *pcVar8;\n    uint8_t uVar9;\n    uint32_t uVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar6 = arg_8h[4];\n    puVar13 = arg_ch + -4;\n    uVar15 = arg_ch - arg_8h[3] >> 0xf;\n    piVar4 = uVar15 * 0x204 + 0x144 + uVar6;\n    var_4h = *puVar13 - 1;\n    if ((var_4h & 1) == 0) {\n        puVar11 = var_4h + puVar13;\n        uVar14 = *puVar11;\n        uVar7 = *(arg_ch + -8);\n        if ((uVar14 & 1) == 0) {\n            uVar10 = (uVar14 >> 4) - 1;\n            if (0x3f < uVar10) {\n                uVar10 = 0x3f;\n            }\n            if (puVar11[1] == puVar11[2]) {\n                if (uVar10 < 0x20) {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 & 0x1f));\n                    puVar12 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        *arg_8h = *arg_8h & uVar10;\n                    }\n                }\n                else {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 - 0x20 & 0x1f));\n                    puVar12 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        arg_8h[1] = arg_8h[1] & uVar10;\n                    }\n                }\n            }\n            var_4h = var_4h + uVar14;\n            *(puVar11[2] + 4) = puVar11[1];\n            *(puVar11[1] + 8) = puVar11[2];\n        }\n        puVar11 = (var_4h >> 4) + -1;\n        if (0x3f < puVar11) {\n            puVar11 = 0x3f;\n        }\n        puVar12 = arg_8h;\n        if ((uVar7 & 1) == 0) {\n            puVar13 = puVar13 - uVar7;\n            puVar12 = (uVar7 >> 4) + -1;\n            if (0x3f < puVar12) {\n                puVar12 = 0x3f;\n            }\n            var_4h = var_4h + uVar7;\n            puVar11 = (var_4h >> 4) + -1;\n            if (0x3f < puVar11) {\n                puVar11 = 0x3f;\n            }\n            if (puVar12 != puVar11) {\n                if (puVar13[1] == puVar13[2]) {\n                    if (puVar12 < 0x20) {\n                        uVar14 = ~(0x80000000U >> (puVar12 & 0x1f));\n                        puVar3 = uVar6 + 0x44 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            *arg_8h = *arg_8h & uVar14;\n                        }\n                    }\n                    else {\n                        uVar14 = ~(0x80000000U >> (puVar12 - 0x20 & 0x1f));\n                        puVar3 = uVar6 + 0xc4 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            arg_8h[1] = arg_8h[1] & uVar14;\n                        }\n                    }\n                }\n                *(puVar13[2] + 4) = puVar13[1];\n                *(puVar13[1] + 8) = puVar13[2];\n            }\n        }\n        if (((uVar7 & 1) != 0) || (puVar12 != puVar11)) {\n            piVar1 = piVar4 + puVar11 * 2;\n            uVar14 = piVar1[1];\n            puVar13[2] = piVar1;\n            puVar13[1] = uVar14;\n            piVar1[1] = puVar13;\n            *(puVar13[1] + 8) = puVar13;\n            if (puVar13[1] == puVar13[2]) {\n                cVar5 = *(puVar11 + uVar6 + 4);\n                *(puVar11 + uVar6 + 4) = cVar5 + '\\x01';\n                uVar9 = puVar11;\n                if (puVar11 < 0x20) {\n                    if (cVar5 == '\\0') {\n                        *arg_8h = *arg_8h | 0x80000000U >> (uVar9 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 & 0x1f);\n                }\n                else {\n                    if (cVar5 == '\\0') {\n                        arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                }\n            }\n        }\n        *puVar13 = var_4h;\n        *((var_4h - 4) + puVar13) = var_4h;\n        *piVar4 = *piVar4 + -1;\n        pcVar8 = _sym.imp.KERNEL32.dll_VirtualFree;\n        if (*piVar4 == 0) {\n            if (*0x42b284 != NULL) {\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(*0x42b29c * 0x8000 + (*0x42b284)[3], 0x8000, 0x4000);\n                (*0x42b284)[2] = (*0x42b284)[2] | 0x80000000U >> (*0x42b29c & 0x1f);\n                *((*0x42b284)[4] + 0xc4 + *0x42b29c * 4) = 0;\n                *((*0x42b284)[4] + 0x43) = *((*0x42b284)[4] + 0x43) + -1;\n                if (*((*0x42b284)[4] + 0x43) == '\\0') {\n                    (*0x42b284)[1] = (*0x42b284)[1] & 0xfffffffe;\n                }\n                if ((*0x42b284)[2] == 0xffffffff) {\n                    (*pcVar8)((*0x42b284)[3], 0, 0x8000);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(*0x42b4e0, 0, (*0x42b284)[4]);\n                    fcn.00405090(*0x42b284, *0x42b284 + 5, (*0x42b288 * 0x14 - *0x42b284) + -0x14 + *0x42b28c);\n                    *0x42b288 = *0x42b288 + -1;\n                    if (*0x42b284 < arg_8h) {\n                        arg_8h = arg_8h + -5;\n                    }\n                    *0x42b294 = *0x42b28c;\n                }\n            }\n            *0x42b284 = arg_8h;\n            *0x42b29c = uVar15;\n        }\n    }\n    return;\n}\n",
        "token_count": 2166
    },
    "00403dca": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00403dca(void)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    int32_t **ppiVar7;\n    int32_t iVar8;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint *puVar13;\n    bool bVar14;\n    uint var_138h;\n    uint32_t *var_38h;\n    uint32_t *var_34h;\n    int32_t **var_30h;\n    int32_t **var_2ch;\n    uint32_t var_28h;\n    int32_t **var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    int32_t **var_8h;\n    int32_t *var_4h;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(*0x42b28c, *0x42b288 * 0x14);\n    if (iVar3 != 0) {\n        return 0xffffffff;\n    }\n    var_1ch = 0;\n    puVar11 = *0x42b28c;\n    if (0 < *0x42b288) {\n        do {\n            uVar5 = puVar11[4];\n            var_34h = puVar11;\n            iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(uVar5, 0x41c4);\n            if (iVar3 != 0) {\n                return 0xfffffffe;\n            }\n            var_8h = puVar11[3];\n            var_24h = uVar5 + 0x144;\n            var_20h = puVar11[2];\n            puVar12 = uVar5 + 0xc4;\n            var_10h = 0;\n            var_14h = 0;\n            var_ch = 0;\n            do {\n                var_28h = 0;\n                var_18h = 0;\n                var_4h = NULL;\n                bVar14 = -1 < var_20h;\n                puVar13 = &var_138h;\n                var_38h = puVar12;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar13 = 0;\n                    puVar13 = puVar13 + 1;\n                }\n                if (bVar14) {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(var_8h, 0x8000);\n                    if (iVar3 != 0) {\n                        return 0xfffffffc;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_8h + 0x3ff;\n                    do {\n                        ppiVar4 = ppiVar9 + -0x3fc;\n                        if ((ppiVar9[-0x3fd] != 0xffffffff) || (*ppiVar9 != 0xffffffff)) {\n                            return 0xfffffffb;\n                        }\n                        do {\n                            piVar2 = *ppiVar4;\n                            if ((piVar2 & 1) == 0) {\n                                iVar8 = (piVar2 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                (&var_138h)[iVar8] = (&var_138h)[iVar8] + 1;\n                                piVar6 = piVar2;\n                            }\n                            else {\n                                if (0x400 < piVar2 - 1U) {\n                                    return 0xfffffffa;\n                                }\n                                var_4h = var_4h + 1;\n                                piVar6 = piVar2 - 1U;\n                            }\n                            if (((piVar6 < 0x10) || ((piVar6 & 0xf) != 0)) || (0xff0 < piVar6)) {\n                                return 0xfffffff9;\n                            }\n                            ppiVar4 = piVar6 + ppiVar4;\n                            if (ppiVar4[-1] != piVar2) {\n                                return 0xfffffff8;\n                            }\n                        } while (ppiVar4 < ppiVar9);\n                        if (ppiVar4 != ppiVar9) {\n                            return 0xfffffff8;\n                        }\n                        ppiVar9 = ppiVar9 + 0x400;\n                        iVar3 = iVar3 + 1;\n                    } while (iVar3 < 8);\n                    if (*var_24h != var_4h) {\n                        return 0xfffffff7;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_24h;\n                    do {\n                        var_4h = NULL;\n                        var_30h = ppiVar9 + 2;\n                        ppiVar4 = ppiVar9[1];\n                        var_2ch = ppiVar9;\n                        ppiVar10 = var_30h;\n                        if (ppiVar4 != ppiVar9) {\n                            do {\n                                if (var_4h == (&var_138h)[iVar3]) break;\n                                if ((ppiVar4 < var_8h) || (var_8h + 0x2000 <= ppiVar4)) {\n                                    return 0xfffffff6;\n                                }\n                                ppiVar7 = (ppiVar4 & 0xfffff000) + 0xc;\n                                ppiVar1 = (ppiVar4 & 0xfffff000) + 0xffc;\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                do {\n                                    if (ppiVar7 == ppiVar4) break;\n                                    ppiVar7 = ppiVar7 + (*ppiVar7 & 0xfffffffe);\n                                    ppiVar10 = var_30h;\n                                } while (ppiVar7 != ppiVar1);\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                iVar8 = (*ppiVar4 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                if (iVar8 != iVar3) {\n                                    return 0xfffffff4;\n                                }\n                                if (ppiVar4[2] != var_2ch) {\n                                    return 0xfffffff3;\n                                }\n                                var_4h = var_4h + 1;\n                                var_2ch = ppiVar4;\n                                ppiVar4 = ppiVar4[1];\n                            } while (ppiVar4 != ppiVar9);\n                            if (var_4h != NULL) {\n                                if (iVar3 < 0x20) {\n                                    uVar5 = 0x80000000 >> (iVar3 & 0x1f);\n                                    var_28h = var_28h | uVar5;\n                                    var_10h = var_10h | uVar5;\n                                }\n                                else {\n                                    uVar5 = 0x80000000 >> (iVar3 - 0x20 & 0x1f);\n                                    var_18h = var_18h | uVar5;\n                                    var_14h = var_14h | uVar5;\n                                }\n                            }\n                        }\n                        if ((var_2ch[1] != ppiVar9) || (var_4h != (&var_138h)[iVar3])) {\n                            return 0xfffffff2;\n                        }\n                        if (*ppiVar10 != var_2ch) {\n                            return 0xfffffff1;\n                        }\n                        iVar3 = iVar3 + 1;\n                        puVar11 = var_34h;\n                        puVar12 = var_38h;\n                        ppiVar9 = ppiVar10;\n                    } while (iVar3 < 0x40);\n                }\n                if ((var_28h != puVar12[-0x20]) || (var_18h != *puVar12)) {\n                    return 0xfffffff0;\n                }\n                var_8h = var_8h + 0x2000;\n                var_24h = var_24h + 0x81;\n                var_20h = var_20h << 1;\n                var_ch = var_ch + 1;\n                puVar12 = puVar12 + 1;\n            } while (var_ch < 0x20);\n            if ((var_10h != *puVar11) || (var_14h != puVar11[1])) {\n                return 0xffffffef;\n            }\n            puVar11 = puVar11 + 5;\n            var_1ch = var_1ch + 1;\n            var_38h = puVar12;\n        } while (var_1ch < *0x42b288);\n    }\n    return 0;\n}\n",
        "token_count": 2021
    },
    "0040413e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040413e(uint32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    int32_t *piVar3;\n    char cVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    bool bVar18;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar8 = arg_8h + 0x17U & 0xfffffff0;\n    iVar9 = (arg_8h + 0x17U >> 4) + -1;\n    puVar10 = *0x42b28c + *0x42b288 * 5;\n    uVar7 = iVar9;\n    if (iVar9 < 0x20) {\n        uVar16 = 0xffffffff >> (uVar7 & 0x1f);\n        var_8h = 0xffffffff;\n    }\n    else {\n        uVar16 = 0;\n        var_8h = 0xffffffff >> (uVar7 - 0x20 & 0x1f);\n    }\n    bVar18 = *0x42b294 < puVar10;\n    arg_8h = *0x42b294;\n    while ((bVar18 && ((arg_8h[1] & var_8h | *arg_8h & uVar16) == 0))) {\n        arg_8h = arg_8h + 5;\n        bVar18 = arg_8h < puVar10;\n    }\n    puVar14 = *0x42b28c;\n    if (arg_8h == puVar10) {\n        for (; (puVar14 < *0x42b294 && ((puVar14[1] & var_8h | *puVar14 & uVar16) == 0)); puVar14 = puVar14 + 5) {\n        }\n        arg_8h = puVar14;\n        if (puVar14 == *0x42b294) {\n            for (; (puVar14 < puVar10 && (puVar14[2] == 0)); puVar14 = puVar14 + 5) {\n            }\n            puVar15 = *0x42b28c;\n            arg_8h = puVar14;\n            if (puVar14 == puVar10) {\n                for (; (puVar15 < *0x42b294 && (puVar15[2] == 0)); puVar15 = puVar15 + 5) {\n                }\n                arg_8h = puVar15;\n                if ((puVar15 == *0x42b294) && (arg_8h = fcn.0040385d(),  arg_8h == NULL)) {\n                    return NULL;\n                }\n            }\n            uVar6 = fcn.00403914(arg_8h);\n            *arg_8h[4] = uVar6;\n            if (*arg_8h[4] == -1) {\n                return NULL;\n            }\n        }\n    }\n    piVar5 = arg_8h[4];\n    var_4h = *piVar5;\n    if ((var_4h == -1) || ((piVar5[var_4h + 0x31] & var_8h | piVar5[var_4h + 0x11] & uVar16) == 0)) {\n        var_4h = 0;\n        puVar10 = piVar5 + 0x11;\n        uVar12 = piVar5[0x31] & var_8h | *puVar10 & uVar16;\n        while (uVar12 == 0) {\n            puVar14 = puVar10 + 0x21;\n            var_4h = var_4h + 1;\n            puVar10 = puVar10 + 1;\n            uVar12 = *puVar14 & var_8h | *puVar10 & uVar16;\n        }\n    }\n    piVar3 = piVar5 + var_4h * 0x81 + 0x51;\n    iVar9 = 0;\n    uVar16 = piVar5[var_4h + 0x11] & uVar16;\n    if (uVar16 == 0) {\n        uVar16 = piVar5[var_4h + 0x31] & var_8h;\n        iVar9 = 0x20;\n    }\n    for (; -1 < uVar16; uVar16 = uVar16 << 1) {\n        iVar9 = iVar9 + 1;\n    }\n    piVar13 = piVar3[iVar9 * 2 + 1];\n    iVar11 = *piVar13 - uVar8;\n    iVar17 = (iVar11 >> 4) + -1;\n    if (0x3f < iVar17) {\n        iVar17 = 0x3f;\n    }\n    *0x42b294 = arg_8h;\n    if (iVar17 != iVar9) {\n        if (piVar13[1] == piVar13[2]) {\n            if (iVar9 < 0x20) {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 & 0x1f));\n                piVar5[var_4h + 0x11] = uVar16 & piVar5[var_4h + 0x11];\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    *arg_8h = *arg_8h & uVar16;\n                }\n            }\n            else {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 - 0x20 & 0x1f));\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] & uVar16;\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    arg_8h[1] = arg_8h[1] & uVar16;\n                }\n            }\n        }\n        *(piVar13[2] + 4) = piVar13[1];\n        *(piVar13[1] + 8) = piVar13[2];\n        if (iVar11 == 0) goto code_r0x004043f7;\n        piVar1 = piVar3 + iVar17 * 2;\n        iVar9 = piVar1[1];\n        piVar13[2] = piVar1;\n        piVar13[1] = iVar9;\n        piVar1[1] = piVar13;\n        *(piVar13[1] + 8) = piVar13;\n        if (piVar13[1] == piVar13[2]) {\n            cVar4 = *(iVar17 + 4 + piVar5);\n            *(iVar17 + 4 + piVar5) = cVar4 + '\\x01';\n            uVar7 = iVar17;\n            if (iVar17 < 0x20) {\n                if (cVar4 == '\\0') {\n                    *arg_8h = *arg_8h | 0x80000000U >> (uVar7 & 0x1f);\n                }\n                piVar5[var_4h + 0x11] = piVar5[var_4h + 0x11] | 0x80000000U >> (uVar7 & 0x1f);\n            }\n            else {\n                if (cVar4 == '\\0') {\n                    arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n                }\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n            }\n        }\n    }\n    if (iVar11 != 0) {\n        *piVar13 = iVar11;\n        *(iVar11 + -4 + piVar13) = iVar11;\n    }\ncode_r0x004043f7:\n    piVar13 = piVar13 + iVar11;\n    *piVar13 = uVar8 + 1;\n    *(piVar13 + (uVar8 - 4)) = uVar8 + 1;\n    iVar9 = *piVar3;\n    *piVar3 = iVar9 + 1;\n    if (((iVar9 == 0) && (arg_8h == *0x42b284)) && (var_4h == *0x42b29c)) {\n        *0x42b284 = NULL;\n    }\n    *piVar5 = var_4h;\n    return piVar13 + 1;\n}\n",
        "token_count": 2101
    },
    "0040447e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040447e(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *in_FS_OFFSET;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    iStack16 = param_1;\n    uStack24 = 0x40445c;\n    uStack28 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack28;\n    while( true ) {\n        iVar1 = *(param_1 + 8);\n        iVar2 = *(param_1 + 0xc);\n        if ((iVar2 == -1) || (iVar2 == param_2)) break;\n        uStack20 = *(iVar1 + iVar2 * 0xc);\n        *(param_1 + 0xc) = uStack20;\n        if (*(iVar1 + 4 + iVar2 * 0xc) == 0) {\n            fcn.00404512(0x101);\n            (**(iVar1 + 8 + iVar2 * 0xc))();\n        }\n    }\n    *in_FS_OFFSET = uStack28;\n    return;\n}\n",
        "token_count": 264
    },
    "0040452a": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040452a(uint32_t *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t *puVar4;\n    uint32_t *puVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t in_FS_OFFSET;\n    uint lpBuffer;\n    int16_t *var_1ch;\n    uint var_ch;\n    int32_t var_8h;\n    uint32_t *var_4h;\n    \n    puVar4 = arg_8h;\n    pcVar3 = _sym.imp.KERNEL32.dll_InterlockedExchange;\n    puVar8 = arg_8h[2];\n    if ((puVar8 & 3) != 0) {\n        return 0;\n    }\n    var_4h = *(*(in_FS_OFFSET + 0x18) + 8);\n    if ((var_4h <= puVar8) && (puVar8 < *(*(in_FS_OFFSET + 0x18) + 4))) {\n        return 0;\n    }\n    puVar1 = arg_8h + 3;\n    if (*puVar1 == 0xffffffff) {\n        return 1;\n    }\n    uVar10 = 0;\n    arg_8h = NULL;\n    puVar5 = puVar8;\n    do {\n        if ((*puVar5 != 0xffffffff) && (uVar10 <= *puVar5)) {\n            return 0;\n        }\n        if (puVar5[1] != 0) {\n            arg_8h = arg_8h + 1;\n        }\n        uVar10 = uVar10 + 1;\n        puVar5 = puVar5 + 3;\n    } while (uVar10 <= *puVar1);\n    if ((arg_8h != NULL) && ((puVar1 = puVar4[-2],  puVar1 < var_4h || (puVar4 <= puVar1)))) {\n        return 0;\n    }\n    uVar10 = puVar8 & 0xfffff000;\n    iVar12 = 0;\n    if (0 < *0x419c10) {\n        do {\n            if (*(iVar12 * 4 + 0x419c18) == uVar10) {\n                if (iVar12 < 1) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x419c58, 1);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                if (*(iVar12 * 4 + 0x419c18) == uVar10) goto code_r0x00404725;\n                iVar12 = *0x419c10 + -1;\n                if (iVar12 < 0) goto code_r0x00404713;\n                goto code_r0x00404703;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < *0x419c10);\n    }\n    iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(puVar8, &lpBuffer, 0x1c);\n    if (iVar12 == 0) {\n        return 0xffffffff;\n    }\n    if (var_8h != 0x1000000) {\n        return 0xffffffff;\n    }\n    if ((var_ch & 0xcc) != 0) {\n        if (((*var_1ch != 0x5a4d) || (piVar6 = *(var_1ch + 0x1e) + var_1ch,  *piVar6 != 0x4550)) ||\n           (*(piVar6 + 6) != 0x10b)) {\n            return 0xffffffff;\n        }\n        uVar9 = *(piVar6 + 5);\n        if (*(piVar6 + 6) == 0) {\n            return 0xffffffff;\n        }\n        uVar2 = *(piVar6 + uVar9 + 0x24);\n        if (((uVar2 <= puVar8 - var_1ch) && (puVar8 - var_1ch < *(piVar6 + uVar9 + 0x20) + uVar2)) &&\n           ((*(piVar6 + uVar9 + 0x3f) & 0x80) != 0)) {\n            return 0;\n        }\n    }\n    iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x419c58, 1);\n    iVar12 = *0x419c10;\n    if (iVar7 != 0) {\n        return 1;\n    }\n    iVar7 = *0x419c10;\n    if (0 < *0x419c10) {\n        puVar8 = *0x419c10 * 4 + 0x419c14;\n        do {\n            if (*puVar8 == uVar10) break;\n            iVar7 = iVar7 + -1;\n            puVar8 = puVar8 + -1;\n        } while (0 < iVar7);\n    }\n    if (iVar7 == 0) {\n        iVar7 = 0xf;\n        if (*0x419c10 < 0x10) {\n            iVar7 = *0x419c10;\n        }\n        iVar11 = 0;\n        if (-1 < iVar7) {\n            do {\n                puVar8 = iVar11 * 4 + 0x419c18;\n                uVar9 = *puVar8;\n                iVar11 = iVar11 + 1;\n                *puVar8 = uVar10;\n                uVar10 = uVar9;\n            } while (iVar11 <= iVar7);\n        }\n        if (iVar12 < 0x10) {\n            *0x419c10 = iVar12 + 1;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x419c58, 0);\n    return 1;\n    while (iVar12 = iVar12 + -1,  -1 < iVar12) {\ncode_r0x00404703:\n        if (*(iVar12 * 4 + 0x419c18) == uVar10) break;\n    }\n    if (iVar12 < 0) {\ncode_r0x00404713:\n        if (*0x419c10 < 0x10) {\n            *0x419c10 = *0x419c10 + 1;\n        }\n        iVar12 = *0x419c10 + -1;\n    }\n    else if (iVar12 == 0) goto code_r0x0040473d;\ncode_r0x00404725:\n    iVar7 = 0;\n    if (-1 < iVar12) {\n        do {\n            puVar8 = iVar7 * 4 + 0x419c18;\n            uVar9 = *puVar8;\n            iVar7 = iVar7 + 1;\n            *puVar8 = uVar10;\n            uVar10 = uVar9;\n        } while (iVar7 <= iVar12);\n    }\ncode_r0x0040473d:\n    (*pcVar3)(0x419c58, 0);\n    return 1;\n}\n",
        "token_count": 1635
    },
    "00405473": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid __cdecl\nfcn.00405473(uint noname_0, uint noname_1, uint lpMultiByteStr, uint arg_14h_2, uint arg_8h, uint arg_ch, uint noname_6\n            , uint arg_14h)\n\n{\n    uchar *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint *puVar5;\n    int32_t unaff_EBP;\n    uint CodePage;\n    uint var_4h;\n    uint var_48h_2;\n    uint var_54h;\n    uint cbMultiByte;\n    uint var_3ch_2;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x38;\n    var_4h_2 = 0x406cf0;\n    var_18h = 0x40547f;\n    fcn.00402514();\n    *(unaff_EBP + -0x1c) = *0x408170;\n    *(unaff_EBP + -0x34) = 0;\n    *(unaff_EBP + -0x44) = 0;\n    puVar1 = **(unaff_EBP + 0x14);\n    *(unaff_EBP + -0x40) = puVar1;\n    *(unaff_EBP + -0x3c) = 0;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetCPInfo;\n    if (*(unaff_EBP + 8) == *(unaff_EBP + 0xc)) {\n        puVar5 = *(unaff_EBP + -0x48);\n    }\n    else {\n        var_18h = unaff_EBP + -0x30;\n        var_1ch = *(unaff_EBP + 8);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n        if ((((iVar3 != 0) && (*(unaff_EBP + -0x30) == 1)) &&\n            (iVar3 = (*pcVar2)(*(unaff_EBP + 0xc), unaff_EBP + -0x30),  iVar3 != 0)) && (*(unaff_EBP + -0x30) == 1)) {\n            *(unaff_EBP + -0x3c) = 1;\n        }\n        if (*(unaff_EBP + -0x3c) == 0) {\n            puVar4 = *(unaff_EBP + -0x38);\n        }\n        else {\n            puVar4 = puVar1;\n            if (puVar1 == 0xffffffff) {\n                iVar3 = fcn.00402aa0(*(unaff_EBP + 0x10));\n                puVar4 = iVar3 + 1;\n            }\n            *(unaff_EBP + -0x38) = puVar4;\n        }\n        if (*(unaff_EBP + -0x3c) == 0) {\n            puVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                               (*(unaff_EBP + 8), 1, *(unaff_EBP + 0x10), puVar1, 0, 0);\n            *(unaff_EBP + -0x38) = puVar4;\n            if (puVar4 == NULL) goto code_r0x0040562b;\n        }\n        puVar5 = &fcn.00405473::var_1ch;\n        *(unaff_EBP + -4) = 0;\n        fcn.00402670();\n        *(unaff_EBP + -0x18) = &fcn.00405473::var_1ch;\n        *(unaff_EBP + -0x48) = &fcn.00405473::var_1ch;\n        fcn.004053d0(&fcn.00405473::var_1ch, 0, puVar4 * 2);\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*0x10 == 0x10) {\n            puVar5 = fcn.0040571f(2, puVar4);\n            if (puVar5 == NULL) goto code_r0x0040562b;\n            *(unaff_EBP + -0x44) = 1;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 8), 1, *(unaff_EBP + 0x10), *(unaff_EBP + -0x40), puVar5, puVar4);\n        if (iVar3 != 0) {\n            if (*(unaff_EBP + 0x18) == 0) {\n                if (*(unaff_EBP + -0x3c) == 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    puVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(unaff_EBP + 0xc), 0, puVar5, puVar4, 0, 0);\n                    if (puVar4 == NULL) goto code_r0x0040561c;\n                }\n                var_1ch = 1;\n                var_18h = puVar4;\n                iVar3 = fcn.0040571f();\n                *(unaff_EBP + -0x34) = iVar3;\n                if (iVar3 != 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                      (*(unaff_EBP + 0xc), 0, puVar5, puVar4, iVar3, puVar4);\n                    if (iVar3 == 0) {\n                        var_18h = *(unaff_EBP + -0x34);\n                        var_1ch = 0x405606;\n                        fcn.004030b8();\n                        *(unaff_EBP + -0x34) = 0;\n                    }\n                    else if (*(unaff_EBP + -0x40) != -1) {\n                        **(unaff_EBP + 0x14) = iVar3;\n                    }\n                }\n            }\n            else {\n                var_18h = NULL;\n                var_1ch = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0xc), 0, puVar5, puVar4, *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c));\n                if (iVar3 != 0) {\n                    *(unaff_EBP + -0x34) = *(unaff_EBP + 0x18);\n                }\n            }\n        }\n    }\ncode_r0x0040561c:\n    if (*(unaff_EBP + -0x44) != 0) {\n        var_1ch = 0x405627;\n        var_18h = puVar5;\n        fcn.004030b8();\n    }\ncode_r0x0040562b:\n    *(unaff_EBP + -0x58) = 0x405636;\n    fcn.00402b5c();\n    *(unaff_EBP + -0x58) = 0x40563b;\n    fcn.0040254f();\n    return;\n}\n",
        "token_count": 1739
    },
    "0040563c": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040563c(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_58h;\n    uint lpSystemInfo;\n    int32_t var_48h;\n    uint32_t lpBuffer;\n    int32_t var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint var_13h;\n    uint lpflOldProtect;\n    int32_t dwSize;\n    uint32_t lpAddress;\n    \n    fcn.00402670();\n    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(&var_58h, &lpBuffer, 0x1c);\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&lpSystemInfo);\n        uVar4 = (~(var_48h - 1U) & &var_58h) - var_48h;\n        uVar3 = ((-(*0x419a98 != 1) & 0xfffffff1) + 0x11) * var_48h + var_24h;\n        dwSize = var_48h;\n        if (uVar3 <= uVar4) {\n            lpAddress = uVar4;\n            if (*0x419a98 != 1) {\n                lpAddress = var_24h;\n                do {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(lpAddress, &lpBuffer, 0x1c);\n                    if (iVar1 == 0) {\n                        return 0;\n                    }\n                    lpAddress = lpAddress + var_1ch;\n                } while ((var_18h & 0x1000) == 0);\n                lpAddress = lpBuffer;\n                if ((var_13h & 1) != 0) {\n                    return 1;\n                }\n                if (uVar4 < lpBuffer) {\n                    return 0;\n                }\n                if (lpBuffer < uVar3) {\n                    lpAddress = uVar3;\n                }\n                (*_sym.imp.KERNEL32.dll_VirtualAlloc)(lpAddress, dwSize, 0x1000, 4);\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)\n                              (lpAddress, dwSize, (-(*0x419a98 != 1) & 0x103) + 1, &lpflOldProtect);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 587
    },
    "0040571f": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0040571f(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t arg_8h;\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    arg_8h = param_1 * param_2;\n    uVar1 = arg_8h;\n    if (arg_8h == 0) {\n        uVar1 = 1;\n    }\n    do {\n        iVar2 = 0;\n        if (uVar1 < 0xffffffe1) {\n            if (((*0x42b4e4 == 3) && (uVar1 = uVar1 + 0xf & 0xfffffff0,  arg_8h < *0x42b290 || arg_8h - *0x42b290 == 0))\n               && (iVar2 = fcn.0040413e(arg_8h),  iVar2 != 0)) {\n                fcn.004053d0(iVar2, 0, arg_8h);\n                return iVar2;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x42b4e0, 8, uVar1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n        }\n        if (*0x419c8c == 0) {\n            return iVar2;\n        }\n        iVar2 = fcn.0040506b(uVar1);\n    } while (iVar2 != 0);\n    return 0;\n}\n",
        "token_count": 339
    },
    "00405870": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.00405870(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000008;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_8h < 0x100) {\n        if (1 < *0x408290) {\n            uVar2 = fcn.00405947(arg_8h, 8);\n            return uVar2;\n        }\n        return *(*0x408280 + arg_8h * 2) & 8;\n    }\n    var_4h = 0;\n    arg_8h = CONCAT13(arg_8h, CONCAT12(arg_8h >> 8, arg_8h));\n    if (*0x42b2a4 != 0) {\n        iVar1 = fcn.00404e9b(1, &arg_8h + 2, 2, &var_4h, *0x42b3c4, *0x42b2a0, 1, 0, unaff_EBP, unaff_retaddr, arg_8h, \n                             in_stack_00000008, in_stack_0000000c, in_stack_00000010, in_stack_00000014);\n        if (((iVar1 != 0) && (var_4h._2_2_ == 0)) && ((var_4h & 8) != 0)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 397
    },
    "0040243b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.0040243b(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x42b4e0 = (*_sym.imp.KERNEL32.dll_HeapCreate)(param_1 == 0, 0x1000, 0);\n    if (*0x42b4e0 == 0) {\n        return 0;\n    }\n    *0x42b4e4 = fcn.00402421();\n    if ((*0x42b4e4 == 3) && (iVar1 = fcn.004034d2(0x3f8),  iVar1 == 0)) {\n        (*_sym.imp.KERNEL32.dll_HeapDestroy)(*0x42b4e0);\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 177
    },
    "004030b8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.004030b8(int32_t param_1)\n\n{\n    int32_t arg_8h;\n    \n    if (param_1 != 0) {\n        if (*0x42b4e4 == 3) {\n            arg_8h = fcn.0040351a(param_1);\n            if (arg_8h != 0) {\n                fcn.00403545(arg_8h, param_1);\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x42b4e0, 0);\n    }\n    return;\n}\n",
        "token_count": 135
    },
    "004053d0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.004053d0(uint32_t *param_1, uint8_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    if (param_3 == 0) {\n        return param_1;\n    }\n    uVar1 = param_2;\n    puVar4 = param_1;\n    if (3 < param_3) {\n        uVar2 = -param_1 & 3;\n        uVar3 = param_3;\n        if (uVar2 != 0) {\n            uVar3 = param_3 - uVar2;\n            do {\n                *puVar4 = param_2;\n                puVar4 = puVar4 + 1;\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        uVar1 = uVar1 * 0x1010101;\n        param_3 = uVar3 & 3;\n        uVar3 = uVar3 >> 2;\n        if (uVar3 != 0) {\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar4 = uVar1;\n                puVar4 = puVar4 + 1;\n            }\n            if (param_3 == 0) {\n                return param_1;\n            }\n        }\n    }\n    do {\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        param_3 = param_3 - 1;\n    } while (param_3 != 0);\n    return param_1;\n}\n",
        "token_count": 387
    },
    "00403180": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00403180(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00403344;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x403468\n            switch(*((arg_10h & 3) * 4 + 0x403468)) {\n            case 0x403480:\ncode_r0x00403480:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x403490:\ncode_r0x00403490:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x4034a4:\ncode_r0x004034a4:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x403468\n            switch(*(arg_10h * 4 + 0x403468)) {\n            case 0x403480:\n                goto code_r0x00403480;\n            case 0x403490:\n                goto code_r0x00403490;\n            case 0x4034a4:\n                goto code_r0x004034a4;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x40336c)) {\n            case 0x40337c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00403344:\n    // WARNING: Could not recover jumptable at 0x00403346. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x403418\n                    puVar1 = (**(uVar3 * -4 + 0x403418))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403468)) {\n                case 0x403480:\n                    goto code_r0x00403480;\n                case 0x403490:\n                    goto code_r0x00403490;\n                case 0x4034a4:\n                    goto code_r0x004034a4;\n                }\n                break;\n            case 0x4033a0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00403344;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403468)) {\n                case 0x403480:\n                    goto code_r0x00403480;\n                case 0x403490:\n                    goto code_r0x00403490;\n                case 0x4034a4:\n                    goto code_r0x004034a4;\n                }\n                break;\n            case 0x4033c8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00403344;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403468)) {\n                case 0x403480:\n                    goto code_r0x00403480;\n                case 0x403490:\n                    goto code_r0x00403490;\n                case 0x4034a4:\n                    goto code_r0x004034a4;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x004031dc;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x4032cc\n        switch(*((arg_10h & 3) * 4 + 0x4032cc)) {\n        case 0x4032e4:\ncode_r0x004032e4:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x4032f0:\ncode_r0x004032f0:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x403304:\ncode_r0x00403304:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x4032dc)) {\n        case 0x4032e4:\n            goto code_r0x004032e4;\n        case 0x4032f0:\n            goto code_r0x004032f0;\n        case 0x403304:\n            goto code_r0x00403304;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x4031e0)) {\n        case 0x4031f0:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x004031dc:\n    // WARNING: Could not recover jumptable at 0x004031dc. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x403260\n                puVar1 = (**(uVar2 * 4 + 0x403260))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4032cc)) {\n            case 0x4032e4:\n                goto code_r0x004032e4;\n            case 0x4032f0:\n                goto code_r0x004032f0;\n            case 0x403304:\n                goto code_r0x00403304;\n            }\n            break;\n        case 0x40321c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x004031dc;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4032cc)) {\n            case 0x4032e4:\n                goto code_r0x004032e4;\n            case 0x4032f0:\n                goto code_r0x004032f0;\n            case 0x403304:\n                goto code_r0x00403304;\n            }\n            break;\n        case 0x403240:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x004031dc;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4032cc)) {\n            case 0x4032e4:\n                goto code_r0x004032e4;\n            case 0x4032f0:\n                goto code_r0x004032f0;\n            case 0x403304:\n                goto code_r0x00403304;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2655
    },
    "00405090": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00405090(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00405254;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x405378\n            switch(*((arg_10h & 3) * 4 + 0x405378)) {\n            case 0x405390:\ncode_r0x00405390:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x4053a0:\ncode_r0x004053a0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x4053b4:\ncode_r0x004053b4:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x405378\n            switch(*(arg_10h * 4 + 0x405378)) {\n            case 0x405390:\n                goto code_r0x00405390;\n            case 0x4053a0:\n                goto code_r0x004053a0;\n            case 0x4053b4:\n                goto code_r0x004053b4;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x40527c)) {\n            case 0x40528c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00405254:\n    // WARNING: Could not recover jumptable at 0x00405256. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x405328\n                    puVar1 = (**(uVar3 * -4 + 0x405328))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405378)) {\n                case 0x405390:\n                    goto code_r0x00405390;\n                case 0x4053a0:\n                    goto code_r0x004053a0;\n                case 0x4053b4:\n                    goto code_r0x004053b4;\n                }\n                break;\n            case 0x4052b0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00405254;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405378)) {\n                case 0x405390:\n                    goto code_r0x00405390;\n                case 0x4053a0:\n                    goto code_r0x004053a0;\n                case 0x4053b4:\n                    goto code_r0x004053b4;\n                }\n                break;\n            case 0x4052d8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00405254;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405378)) {\n                case 0x405390:\n                    goto code_r0x00405390;\n                case 0x4053a0:\n                    goto code_r0x004053a0;\n                case 0x4053b4:\n                    goto code_r0x004053b4;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x004050ec;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x4051dc\n        switch(*((arg_10h & 3) * 4 + 0x4051dc)) {\n        case 0x4051f4:\ncode_r0x004051f4:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x405200:\ncode_r0x00405200:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x405214:\ncode_r0x00405214:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x4051ec)) {\n        case 0x4051f4:\n            goto code_r0x004051f4;\n        case 0x405200:\n            goto code_r0x00405200;\n        case 0x405214:\n            goto code_r0x00405214;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x4050f0)) {\n        case 0x405100:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x004050ec:\n    // WARNING: Could not recover jumptable at 0x004050ec. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x405170\n                puVar1 = (**(uVar2 * 4 + 0x405170))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4051dc)) {\n            case 0x4051f4:\n                goto code_r0x004051f4;\n            case 0x405200:\n                goto code_r0x00405200;\n            case 0x405214:\n                goto code_r0x00405214;\n            }\n            break;\n        case 0x40512c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x004050ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4051dc)) {\n            case 0x4051f4:\n                goto code_r0x004051f4;\n            case 0x405200:\n                goto code_r0x00405200;\n            case 0x405214:\n                goto code_r0x00405214;\n            }\n            break;\n        case 0x405150:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x004050ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4051dc)) {\n            case 0x4051f4:\n                goto code_r0x004051f4;\n            case 0x405200:\n                goto code_r0x00405200;\n            case 0x405214:\n                goto code_r0x00405214;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2653
    },
    "00404953": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h_2\n\nvoid __cdecl fcn.00404953(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    char *pcVar4;\n    uint var_8h;\n    uint var_ch;\n    uint var_128h_2;\n    uint var_124h_2;\n    uint var_128h;\n    uint lpFilename;\n    uint var_18h_2;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint uStack4;\n    \n    uStack4 = 0x118;\n    var_18h = 0x4067a0;\n    fcn.00402514();\n    *(unaff_EBP + -0x1c) = *0x408170;\n    pcVar1 = *0x419c5c;\n    if (*0x419c5c == NULL) {\n        if (*(unaff_EBP + 8) == 1) {\n            pcVar4 = \"Buffer overrun detected!\";\n            *(unaff_EBP + -0x128) =\n                 \"A buffer overrun has been detected which has corrupted the program\\'s\\ninternal state.  The program cannot safely continue execution and must\\nnow be terminated.\\n\"\n            ;\n        }\n        else {\n            pcVar4 = \"Unknown security failure detected!\";\n            *(unaff_EBP + -0x128) =\n                 \"A security error of unknown cause has been detected which has\\ncorrupted the program\\'s internal state.  The program cannot safely\\ncontinue execution and must now be terminated.\\n\"\n            ;\n        }\n        *(unaff_EBP + -0x20) = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, unaff_EBP + -0x124, 0x104);\n        if (iVar2 == 0) {\n            fcn.00402870(unaff_EBP + -0x124, \"<program name unknown>\");\n        }\n        iVar2 = unaff_EBP + -0x124;\n        iVar3 = fcn.00402aa0(iVar2);\n        if (0x3c < iVar3 + 0xbU) {\n            iVar2 = fcn.00402aa0(iVar2);\n            iVar2 = iVar2 + unaff_EBP + -0x155;\n            fcn.00402970(iVar2, 0x406540, 3);\n        }\n        fcn.00402aa0(iVar2);\n        fcn.00402670();\n        *(unaff_EBP + -0x18) = &var_18h;\n        fcn.00402870(&var_18h, pcVar4);\n        fcn.00402880(&var_18h, 0x406520);\n        fcn.00402880(&var_18h, \"Program: \");\n        fcn.00402880(&var_18h, iVar2);\n        fcn.00402880(&var_18h, 0x406520);\n        fcn.00402880(&var_18h, *(unaff_EBP + -0x128));\n        fcn.00402769(&var_18h, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        (*pcVar1)(*(unaff_EBP + 8), *(unaff_EBP + 0xc));\n        *(unaff_EBP + -4) = 0xffffffff;\n    }\n    fcn.004019ab(3);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 893
    },
    "00402568": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.00402568(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iStack12;\n    uint uStack8;\n    \n    puVar4 = &stack0xfffffffc;\n    if ((*(param_1 + 4) & 6) == 0) {\n        iStack12 = param_1;\n        uStack8 = param_3;\n        *(param_2 + -4) = &iStack12;\n        iVar5 = *(param_2 + 0xc);\n        iVar3 = *(param_2 + 8);\n        iVar2 = fcn.0040452a(param_2);\n        if (iVar2 == 0) {\n            *(param_1 + 4) = *(param_1 + 4) | 8;\n        }\n        else {\n            for (; iVar5 != -1; iVar5 = *(iVar3 + iVar5 * 0xc)) {\n                pcVar1 = *(iVar3 + 4 + iVar5 * 0xc);\n                if (pcVar1 != NULL) {\n                    iVar3 = (*pcVar1)();\n                    param_2 = *(puVar4 + 0xc);\n                    if (iVar3 != 0) {\n                        if (iVar3 < 0) {\n                            return 0;\n                        }\n                        iVar3 = *(param_2 + 8);\n                        fcn.0040443c(param_2);\n                        puVar4 = param_2 + 0x10;\n                        fcn.0040447e(param_2, iVar5);\n                        fcn.00404512(1);\n                        *(param_2 + 0xc) = *(iVar3 + extraout_ECX * 4);\n                        param_2 = 0;\n                        iVar5 = 0;\n                        (**(iVar3 + 8 + extraout_ECX * 4))();\n                    }\n                }\n                iVar3 = *(param_2 + 8);\n            }\n        }\n    }\n    else {\n        fcn.0040447e(param_2, 0xffffffff, &stack0xfffffffc, &stack0xfffffffc);\n    }\n    return 1;\n}\n",
        "token_count": 511
    },
    "0040579a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.0040579a(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    while( true ) {\n        iVar1 = fcn.00405870(*param_1);\n        if (iVar1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    uVar2 = *param_1;\n    puVar5 = param_1 + 1;\n    if ((uVar2 == 0x2d) || (uVar3 = uVar2,  uVar2 == 0x2b)) {\n        uVar3 = *puVar5;\n        puVar5 = param_1 + 2;\n    }\n    iVar1 = 0;\n    while( true ) {\n        if ((uVar3 < 0x30) || (0x39 < uVar3)) {\n            iVar4 = -1;\n        }\n        else {\n            iVar4 = uVar3 - 0x30;\n        }\n        if (iVar4 == -1) break;\n        iVar1 = iVar4 + iVar1 * 10;\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar2 == 0x2d) {\n        iVar1 = -iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 328
    },
    "00403914": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00403914(int32_t arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = *(arg_8h + 0x10);\n    iVar7 = 0;\n    for (iVar3 = *(arg_8h + 8); -1 < iVar3; iVar3 = iVar3 << 1) {\n        iVar7 = iVar7 + 1;\n    }\n    iVar3 = iVar7 * 0x204 + 0x144 + iVar2;\n    iVar6 = 0x3f;\n    iVar4 = iVar3;\n    do {\n        *(iVar4 + 8) = iVar4;\n        *(iVar4 + 4) = iVar4;\n        iVar4 = iVar4 + 8;\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    uVar8 = iVar7 * 0x8000 + *(arg_8h + 0xc);\n    iVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(uVar8, 0x8000, 0x1000, 4);\n    if (iVar4 == 0) {\n        iVar7 = -1;\n    }\n    else {\n        if (uVar8 <= uVar8 + 0x7000) {\n            piVar5 = uVar8 + 0x10;\n            iVar4 = ((uVar8 + 0x7000) - uVar8 >> 0xc) + 1;\n            do {\n                piVar5[-2] = -1;\n                piVar5[0x3fb] = -1;\n                *piVar5 = piVar5 + 0x3ff;\n                piVar5[-1] = 0xff0;\n                piVar5[1] = piVar5 + -0x401;\n                piVar5[0x3fa] = 0xff0;\n                piVar5 = piVar5 + 0x400;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n        *(iVar3 + 0x1fc) = uVar8 + 0xc;\n        *(uVar8 + 0x14) = iVar3 + 0x1f8;\n        *(iVar3 + 0x200) = uVar8 + 0x700c;\n        *(uVar8 + 0x7010) = iVar3 + 0x1f8;\n        *(iVar2 + 0x44 + iVar7 * 4) = 0;\n        *(iVar2 + 0xc4 + iVar7 * 4) = 1;\n        cVar1 = *(iVar2 + 0x43);\n        *(iVar2 + 0x43) = cVar1 + '\\x01';\n        if (cVar1 == '\\0') {\n            *(arg_8h + 4) = *(arg_8h + 4) | 1;\n        }\n        *(arg_8h + 8) = *(arg_8h + 8) & ~(0x80000000U >> (iVar7 & 0x1f));\n    }\n    return iVar7;\n}\n",
        "token_count": 763
    },
    "00402399": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00402399(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00402514(0x406560, 0xc);\n    *(unaff_EBP + -0x1c) = 0x406d9c;\n    while (*(unaff_EBP + -0x1c) < 0x406d9c) {\n        *(unaff_EBP + -4) = 0;\n        if (**(unaff_EBP + -0x1c) != NULL) {\n            (***(unaff_EBP + -0x1c))();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n    }\n    fcn.0040254f();\n    return;\n}\n",
        "token_count": 224
    },
    "00402670": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00402670(void)\n\n{\n    uint32_t in_EAX;\n    uchar *puVar1;\n    uint unaff_retaddr;\n    \n    if (in_EAX < 0x1000) {\n        *(&stack0x00000000 + -in_EAX) = unaff_retaddr;\n        return;\n    }\n    puVar1 = &stack0x00000004;\n    do {\n        puVar1 = puVar1 + -0x1000;\n        in_EAX = in_EAX - 0x1000;\n    } while (0xfff < in_EAX);\n    *(puVar1 + (-4 - in_EAX)) = unaff_retaddr;\n    return;\n}\n",
        "token_count": 166
    },
    "00402880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00402880(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar4 = param_1 & 3;\n    puVar3 = param_1;\n    while (uVar4 != 0) {\n        uVar1 = *puVar3;\n        puVar3 = puVar3 + 1;\n        if (uVar1 == 0) goto code_r0x004028d3;\n        uVar4 = puVar3 & 3;\n    }\n    do {\n        do {\n            puVar5 = puVar3;\n            puVar3 = puVar5 + 1;\n        } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);\n        uVar4 = *puVar5;\n        if (uVar4 == '\\0') goto code_r0x004028e5;\n        if (uVar4 >> 8 == '\\0') {\n            puVar5 = puVar5 + 1;\n            goto code_r0x004028e5;\n        }\n        if ((uVar4 & 0xff0000) == 0) {\n            puVar5 = puVar5 + 2;\n            goto code_r0x004028e5;\n        }\n    } while ((uVar4 & 0xff000000) != 0);\ncode_r0x004028d3:\n    puVar5 = puVar3 + -1;\ncode_r0x004028e5:\n    uVar4 = param_2 & 3;\n    while (uVar4 != 0) {\n        uVar1 = *param_2;\n        uVar4 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00402960;\n        *puVar5 = uVar1;\n        puVar5 = puVar5 + 1;\n        uVar4 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar4 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar4 == '\\0') {\ncode_r0x00402960:\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if (uVar4 >> 8 == '\\0') {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if ((uVar4 & 0xff0000) == 0) {\n                *puVar5 = uVar4;\n                *(puVar5 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar4 & 0xff000000) == 0) {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n        }\n        *puVar5 = uVar4;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 749
    },
    "00402870": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00402870(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    uVar3 = param_2 & 3;\n    puVar4 = param_1;\n    while (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar3 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00402960;\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        uVar3 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar3 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar3 == '\\0') {\ncode_r0x00402960:\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if (uVar3 >> 8 == '\\0') {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if ((uVar3 & 0xff0000) == 0) {\n                *puVar4 = uVar3;\n                *(puVar4 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar3 & 0xff000000) == 0) {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n        }\n        *puVar4 = uVar3;\n        puVar4 = puVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 436
    },
    "0040351a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0040351a(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *0x42b28c;\n    while( true ) {\n        if (*0x42b28c + *0x42b288 * 0x14 <= uVar1) {\n            return 0;\n        }\n        if (param_1 - *(uVar1 + 0xc) < 0x100000) break;\n        uVar1 = uVar1 + 0x14;\n    }\n    return uVar1;\n}\n",
        "token_count": 129
    },
    "0040385d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.0040385d(void)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (*0x42b288 == *0x42b298) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x42b4e0, 0, *0x42b28c, (*0x42b298 * 5 + 0x50) * 4);\n        if (iVar2 == 0) {\n            return NULL;\n        }\n        *0x42b298 = *0x42b298 + 0x10;\n        *0x42b28c = iVar2;\n    }\n    puVar1 = *0x42b28c + *0x42b288 * 0x14;\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x42b4e0, 8, 0x41c4);\n    puVar1[4] = iVar2;\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, 0x100000, 0x2000, 4);\n        puVar1[3] = iVar2;\n        if (iVar2 != 0) {\n            puVar1[2] = 0xffffffff;\n            *puVar1 = 0;\n            puVar1[1] = 0;\n            *0x42b288 = *0x42b288 + 1;\n            *puVar1[4] = 0xffffffff;\n            return puVar1;\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x42b4e0, 0, puVar1[4]);\n    }\n    return NULL;\n}\n",
        "token_count": 392
    },
    "00405947": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.00405947(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint noname_2;\n    int32_t iVar1;\n    uint32_t in_ECX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_8h + 1 < 0x101) {\n        arg_8h._2_2_ = *(*0x408280 + arg_8h * 2);\n    }\n    else {\n        if ((*(*0x408280 + 1 + (arg_8h >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            var_4h = in_ECX & 0xffff0000 | arg_8h & 0xff;\n            noname_2 = 1;\n        }\n        else {\n            var_4h = CONCAT11(arg_8h, arg_8h >> 8);\n            var_4h = in_ECX & 0xff000000 | var_4h;\n            noname_2 = 2;\n        }\n        iVar1 = fcn.00404e9b(1, &var_4h, noname_2, &arg_8h + 2, *0x419c78, *0x419c68, 1, var_4h, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, in_stack_0000000c, in_stack_00000010, in_stack_00000014);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return arg_8h._2_2_ & arg_ch;\n}\n",
        "token_count": 431
    },
    "00401809": {
        "rules": [
            "link function at runtime on Windows",
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.00401809(void)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"mscoree.dll\");\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"CorExitProcess\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(unaff_retaddr);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(unaff_retaddr);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 152
    },
    "00405430": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405430(uint Locale)\n\n{\n    int32_t iVar1;\n    uint lpLCData;\n    uchar var_6h;\n    uint var_4h;\n    \n    var_4h = *0x408170;\n    var_6h = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 0x1004, &lpLCData, 6);\n    if (iVar1 != 0) {\n        fcn.0040579a(&lpLCData);\n    }\n    fcn.00402b5c();\n    return;\n}\n",
        "token_count": 135
    }
}