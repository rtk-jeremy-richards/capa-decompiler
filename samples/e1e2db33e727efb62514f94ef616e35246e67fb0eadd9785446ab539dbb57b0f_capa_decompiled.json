{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl method.std::bad_alloc.virtual_0(uint32_t arg_8h)\n\n{\n    code **in_ECX;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e1b78;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    *in_ECX = vtable.std::bad_alloc.0;\n    var_4h = 0xffffffff;\n    fcn.008c3003();\n    if ((arg_8h & 1) != 0) {\n        fcn.008c363c();\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 168
    },
    "008c1dd0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1dd0(uint32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    if (0xf < *(in_ECX + 0x18)) {\n        fcn.008c363c(*(in_ECX + 4));\n    }\n    *(in_ECX + 0x18) = 0xf;\n    *(in_ECX + 0x14) = 0;\n    *(in_ECX + 4) = 0;\n    if ((arg_8h & 1) != 0) {\n        fcn.008c363c();\n    }\n    return;\n}\n",
        "token_count": 140
    },
    "008cf2cb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.008cf2cb(uint *arg_8h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    uint *puVar3;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    if (**0x574b904 == 'X') {\n        pcVar2 = \"void\";\n    }\n    else {\n        if (**0x574b904 != 'Z') {\n            fcn.008cee9b(&var_8h);\n            if ((var_4h == '\\0') && (cVar1 = **0x574b904,  cVar1 != '\\0')) {\n                if (cVar1 != '@') {\n                    if (cVar1 != 'Z') {\n                        fcn.008ce5ee(2);\n                        return arg_8h;\n                    }\n                    *0x574b904 = *0x574b904 + 1;\n                    pcVar2 = \",...\";\n                    if ((~(*0x574b914 >> 0x12) & 1) == 0) {\n                        pcVar2 = \",<ellipsis>\";\n                    }\n                    puVar3 = fcn.008cf081(&var_10h, pcVar2);\n                    *arg_8h = *puVar3;\n                    arg_8h[1] = puVar3[1];\n                    return arg_8h;\n                }\n                *0x574b904 = *0x574b904 + 1;\n            }\n            *arg_8h = var_8h;\n            arg_8h[1] = var_4h;\n            return arg_8h;\n        }\n        pcVar2 = 0x8e2c84;\n        if ((~(*0x574b914 >> 0x12) & 1) == 0) {\n            pcVar2 = \"<ellipsis>\";\n        }\n    }\n    *0x574b904 = *0x574b904 + 1;\n    fcn.008ce9b6(pcVar2);\n    return arg_8h;\n}\n",
        "token_count": 452
    },
    "008d4a6e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008d4a6e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e5990, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.008c6541();\n        *puVar2 = 0;\n        puVar2 = fcn.008c652e();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x574baa0)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x574bac0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.008dd1ca(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.008c652e();\n                    *puVar2 = 9;\n                    puVar2 = fcn.008c6541();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.008d433b(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.008d4b40(0x8e5990);\n                goto code_r0x008d4b3a;\n            }\n        }\n        puVar2 = fcn.008c6541();\n        *puVar2 = 0;\n        puVar2 = fcn.008c652e();\n        *puVar2 = 9;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n    }\ncode_r0x008d4b3a:\n    fcn.008c7141();\n    return;\n}\n",
        "token_count": 642
    },
    "008d69cf": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.008d69cf(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.008c54d0();\n    var_4h = 0;\n    if (*0x574b984 == 0) {\n        iVar2 = (**0x8e215c)(\"USER32.DLL\");\n        pcVar4 = *0x8e2080;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0x8e2080)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x574b984 = fcn.008c545e(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0x574b988 = fcn.008c545e(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0x574b98c = fcn.008c545e(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0x574b994 = fcn.008c545e(uVar3);\n        if (*0x574b994 != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0x574b990 = fcn.008c545e(uVar3);\n        }\n    }\n    if ((*0x574b990 != iVar1) && (*0x574b994 != iVar1)) {\n        pcVar4 = fcn.008c54d9(*0x574b990);\n        pcVar5 = fcn.008c54d9(*0x574b994);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x008d6b11;\n        }\n    }\n    if ((((*0x574b988 != iVar1) && (pcVar4 = fcn.008c54d9(*0x574b988),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x574b98c != iVar1 && (pcVar4 = fcn.008c54d9(*0x574b98c),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x008d6b11:\n    pcVar4 = fcn.008c54d9(*0x574b984);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 823
    },
    "008c10f0": {
        "rules": [
            "encrypt data using HC-128/26f802cd5bd1485c91b2d289e18acd95"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.008c10f0(uint32_t *arg_8h, int32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint32_t var_30h;\n    int32_t var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_28h = *arg_8h;\n    uVar2 = arg_8h[1];\n    var_2ch = -0x3910c8e0;\n    *0x8ed488 = 0;\n    *0x5720e20 = 0x975c4b52;\n    var_30h = 0;\n    do {\n        uVar2 = uVar2 - ((var_28h >> 5) + arg_ch[3] ^ var_2ch + var_28h ^ var_28h * 0x10 + arg_ch[2]);\n        uVar1 = var_2ch + uVar2;\n        if (*0x57237e4 == 0x10c1) {\n            *0x571fed4 = 0;\n        }\n        var_2ch = var_2ch + 0x61c88647;\n        var_28h = var_28h - ((uVar2 >> 5) + arg_ch[1] ^ uVar2 * 0x10 + *arg_ch ^ uVar1);\n        var_30h = var_30h + 1;\n    } while (var_30h < 0x20);\n    *0x571fecc = 0xb2b534d6;\n    if (*0x57237e4 == 0xef8) {\n        *0x571fec8 = 0;\n        var_30h = 0xfeb07ff;\n    }\n    arg_8h[1] = uVar2;\n    *arg_8h = var_28h;\n    return var_30h;\n}\n",
        "token_count": 529
    },
    "008c2640": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.008c2640(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint *in_FS_OFFSET;\n    uint var_c98h;\n    uint var_498h;\n    uint var_98h;\n    int32_t var_78h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_58h;\n    uint var_54h;\n    uint32_t var_50h;\n    int32_t var_44h;\n    uint var_40h;\n    uint32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    int32_t var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e1c90;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    *0x57214a8 = 0x6b;\n    *0x57214b2 = 0x6c;\n    *0x57214ae = 0x33;\n    *0x57214ab = 0x6e;\n    *0x57214ac = 0x65;\n    *0x57214af = 0x32;\n    *0x57214ad = 0x6c;\n    *0x57214a9 = 0x65;\n    *0x57214b1 = 100;\n    *0x574ae74 = 0;\n    *0x571fee6 = 0x54;\n    *0x571fef7 = 0x74;\n    *0x571fee7 = 0x6f;\n    *0x571fee2 = 0x65;\n    *0x571fee4 = 0x74;\n    *0x571fef0 = 0x53;\n    *0x571fef5 = 0x68;\n    *0x571fef2 = 0x61;\n    *0x571feea = 0x68;\n    *0x571fef8 = 0;\n    *0x5720e39 = 0x69;\n    *0x57214a4 = 0;\n    *0x5720e33 = 0x75;\n    *0x5720e37 = 0x32;\n    *0x5720e3b = 0x73;\n    *0x8ed47c = 0xda880558;\n    *0x5720e3d = 0x57;\n    *0x5720e38 = 0x46;\n    *0x5720e30 = 0x4d;\n    *0x5720e34 = 0x6c;\n    *0x5720e3a = 0x72;\n    *0x8ed480 = 0;\n    *0x5720e31 = 0x6f;\n    *0x5720e32 = 100;\n    *0x5720e35 = 0x65;\n    *0x5720e3c = 0x74;\n    *0x5720e36 = 0x33;\n    *0x5720e3e = 0;\n    var_20h = 8;\n    var_28h = 0;\n    var_24h = 0x2dd;\n    var_1ch = *0x574ae74;\n    var_18h = *0x57214a4;\n    var_14h = *0x8ed480;\n    var_10h = *0x8ed47c;\n    iVar2 = (**0x8e202c)(0x57237e8);\n    if (iVar2 == 0x69c79) {\n        (**0x8e201c)(var_34h, 0, 0, 0, 0, 0);\n        (**0x8e2000)(var_34h, 0);\n        (**0x8e2004)(0, 0);\n        (**0x8e2008)(0, var_34h, &var_34h);\n        (**0x8e2028)(0, &var_498h, 0, &var_38h, 0);\n        (**0x8e2024)(0);\n        (**0x8e21bc)(0, &var_c98h, 0);\n        (**0x8e21b4)(0, 0, 0, 0, 0);\n        *0x57237e0 = 0xd8fdf9a6;\n        var_2ch = *0x57237e0;\n        fcn.008c24f0();\n        var_4h = 0;\n        fcn.008c3b4b(0x8e9168, \"jicedaliwetemoki %f\", \"cerevedukakobe\");\n        var_3ch = 0xf;\n        var_40h = 0;\n        var_50h = var_50h & 0xffffff00;\n        fcn.008c1fc0(\"gudicafatamadusewatosi\", 0x16);\n        var_4h._0_1_ = 1;\n        fcn.008c391b(0x8e9168, \"%s %c\", \n                     \"maxodesiducuzufofi gonasakeviwofebujo wigarekuhejigisocikefugeguga topupupopebufezonigivahobeha kotakewuta pogezuyihanowehihularodoxo yugawomayi\"\n                    );\n        fcn.008c38b1(0, 0);\n        var_4h = var_4h._1_3_ << 8;\n        if (0xf < var_3ch) {\n            fcn.008c363c(var_50h);\n        }\n        var_3ch = 0xf;\n        var_40h = 0;\n        var_50h = var_50h & 0xffffff00;\n        var_4h = 0xffffffff;\n        fcn.008c25c0();\n    }\n    iVar2 = 0;\n    do {\n        if (iVar2 == 0x330b9c) {\n            *0x57237e4 = *0x8e7414;\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x37de2f);\n    *0x57237e4 = *0x57237e4 + 0xac585;\n    *0x5720e08 = (**0x8e2030)(0, *0x57237e4);\n    pcVar1 = *0x8e21b8;\n    iVar2 = 0;\n    do {\n        if (iVar2 == 0x29a692) {\n            *0x574ae70 = *0x8e7008;\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x39e692);\n    iVar2 = 0;\n    do {\n        (**0x8e2044)(&var_58h);\n        if (*0x57237e4 == 0xab2) {\n            (**0x8e2048)(0, 0, 0, 0);\n            (**0x8e204c)(0, &var_6ch, 0, &var_34h);\n        }\n        (*pcVar1)(0, &var_98h);\n    } while ((((iVar2 < 0x210a8a) || (var_44h == 0x4ee45365)) || (var_78h == 0x61b817f5)) &&\n            (iVar2 = iVar2 + 1,  iVar2 < 0x1e6d37e2));\n    uVar4 = 0;\n    if (*0x57237e4 != 0) {\n        do {\n            *(uVar4 + *0x5720e08) = *(uVar4 + 0xac585 + *0x574ae70);\n            *0x5720e1c = 0x9e96d58a;\n            uVar4 = uVar4 + 1;\n            var_2ch = *0x5720e1c;\n        } while (uVar4 < *0x57237e4);\n    }\n    fcn.008c1040(0x5720e08, 0x57237e4);\n    var_30h = 0x40;\n    uVar3 = fcn.008c1460(*0x5720e08, *0x57237e4, 0x8e7010);\n    pcVar1 = *0x8e2050;\n    iVar2 = 0;\n    do {\n        if (*0x57237e4 == 0x3da) {\n            uVar3 = 0;\n            *0x57237dc = uVar3;\n            var_2ch = uVar3;\n        }\n        if (iVar2 == 0x15d6bb) {\n            uVar3 = (*pcVar1)(*0x5720e08, *0x57237e4, var_30h, &var_34h);\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x646a7b);\n    *in_FS_OFFSET = var_ch;\n    return uVar3;\n}\n",
        "token_count": 2192
    },
    "008c1460": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.008c1460(int32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*0x57237e4 == 0xc96) {\n        *0x571fed8 = 0xf5fcfc76;\n    }\n    uVar2 = 0;\n    arg_ch = arg_ch / 8;\n    uVar1 = arg_ch;\n    if (*0x57237e4 == 0x8eb) {\n        uVar1 = 0x1118e85;\n        *0x5720e00 = 0xdb615b9a;\n    }\n    if (arg_ch != 0) {\n        do {\n            fcn.008c10f0(arg_8h + uVar2 * 8, arg_10h);\n            uVar1 = 0;\n            uVar2 = uVar2 + 1;\n            *0x5720e2c = uVar1;\n        } while (uVar2 < arg_ch);\n    }\n    return uVar1;\n}\n",
        "token_count": 267
    },
    "008e18a0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.008e18a0(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 592
    },
    "008c1760": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1760(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h == 0) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h);\n    return;\n}\n",
        "token_count": 144
    },
    "008c1930": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1930(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h == 0) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h);\n    return;\n}\n",
        "token_count": 144
    },
    "008c19f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c19f0(uint arg_8h, int32_t arg_ch)\n\n{\n    uint arg_10h;\n    int32_t in_ECX;\n    \n    if ((arg_8h != '\\0') && (0xf < *(in_ECX + 0x18))) {\n        arg_10h = *(in_ECX + 4);\n        if (arg_ch != 0) {\n            fcn.008c3647(in_ECX + 4, 0x10, arg_10h, arg_ch);\n        }\n        fcn.008c363c(arg_10h);\n    }\n    *(in_ECX + 0x14) = arg_ch;\n    *(in_ECX + 0x18) = 0xf;\n    *(in_ECX + 4 + arg_ch) = 0;\n    return;\n}\n",
        "token_count": 188
    },
    "008c1d00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool __cdecl fcn.008c1d00(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint arg_10h;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (arg_8h == 0xffffffff) {\n        fcn.008c2de8();\n    }\n    uVar1 = *(in_ECX + 0x18);\n    if (uVar1 < arg_8h) {\n        fcn.008c1b30(arg_8h, *(in_ECX + 0x14));\n        return arg_8h != 0;\n    }\n    if ((arg_ch != '\\0') && (arg_8h < 0x10)) {\n        arg_14h = *(in_ECX + 0x14);\n        if (arg_8h < *(in_ECX + 0x14)) {\n            arg_14h = arg_8h;\n        }\n        if (0xf < uVar1) {\n            arg_10h = *(in_ECX + 4);\n            if (arg_14h != 0) {\n                fcn.008c3647(in_ECX + 4, 0x10, arg_10h, arg_14h);\n            }\n            fcn.008c363c(arg_10h);\n        }\n        *(in_ECX + 0x14) = arg_14h;\n        *(in_ECX + 0x18) = 0xf;\n        *(in_ECX + 4 + arg_14h) = 0;\n        return arg_8h != 0;\n    }\n    if (arg_8h == 0) {\n        *(in_ECX + 0x14) = 0;\n        if (0xf < uVar1) {\n            **(in_ECX + 4) = 0;\n            return false;\n        }\n        *(in_ECX + 4) = 0;\n    }\n    return arg_8h != 0;\n}\n",
        "token_count": 448
    },
    "008c3003": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c3003(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.008c41cf(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "008c3270": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.008c3270(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x8c331b;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.008c3347;\n        uStack36 = *0x8e816c ^ &fcn.008c3270::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.008c3270::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.008c5762();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.008c3270::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 725
    },
    "008c3ebb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3ebb(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x8e816c) {\n        return;\n    }\n    *0x574b538 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                 (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                 ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                 (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x574b53c = &arg_8h;\n    *0x574b478 = 0x10001;\n    *0x574b420 = 0xc0000409;\n    *0x574b424 = 1;\n    var_328h = *0x8e816c;\n    var_324h = *0x8e8170;\n    *0x574b42c = unaff_retaddr;\n    *0x574b504 = in_GS;\n    *0x574b508 = in_FS;\n    *0x574b50c = in_ES;\n    *0x574b510 = in_DS;\n    *0x574b514 = unaff_EDI;\n    *0x574b518 = unaff_ESI;\n    *0x574b51c = unaff_EBX;\n    *0x574b520 = in_EDX;\n    *0x574b524 = in_ECX;\n    *0x574b528 = in_EAX;\n    *0x574b52c = unaff_EBP;\n    *0x574b530 = unaff_retaddr;\n    *0x574b534 = in_CS;\n    *0x574b540 = in_SS;\n    *0x574b470 = (**0x8e20b8)();\n    fcn.008d2ff5(1);\n    (**0x8e20b4)(0);\n    (**0x8e20b0)(0x8e2d3c);\n    if (*0x574b470 == 0) {\n        fcn.008d2ff5(1);\n    }\n    uVar1 = (**0x8e20ac)(0xc0000409);\n    (**0x8e20a8)(uVar1);\n    return;\n}\n",
        "token_count": 820
    },
    "008c4355": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008c4355(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e53b0, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.008c5762();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.008c5afe();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.008c5b50(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.008c441b();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.008c5afe();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.008c7141();\n    return;\n}\n",
        "token_count": 570
    },
    "008c441b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.008c441b(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c5762();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.008c5762();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "008c4acc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c4acc(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.008c34ae(*(unaff_EBP + -0x28));\n    iVar1 = fcn.008c5762();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.008c5762();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.008c3487(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.008c447b(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 382
    },
    "008c9bef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x008c9ce2: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x008c9ce7)\n// WARNING: Removing unreachable block (ram,0x008c9d15)\n// WARNING: Removing unreachable block (ram,0x008c9ced)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008c9bef(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e56c0, 0x18);\n    fcn.008cabca(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x574aef4 != 1) {\n        *0x574aef0 = 1;\n        *0x574aeec = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.008c54d9(*0x574bbc8);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.008c54d9(*0x574bbc4);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.008c54d0();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.008c54d9(*piVar2);\n                        iVar3 = fcn.008c54d0();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.008c54d9(*0x574bbc8);\n                        piVar1 = fcn.008c54d9(*0x574bbc4);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.008c9ab1(0x8e21fc);\n        }\n        fcn.008c9ab1(0x8e2204);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.008caad8(8);\n    }\n    return;\n}\n",
        "token_count": 815
    },
    "008d66ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.008d66ee(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.008caad8(0);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "008c1b30": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c1b30(int32_t param_1, uint32_t param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint *arg_8h;\n    int32_t arg_10h;\n    uint *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch;\n    uint var_10h;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e1bb0;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    uVar4 = var_8h | 0xf;\n    if (uVar4 != 0xffffffff) {\n        uVar1 = *(param_1 + 0x18);\n        uVar3 = uVar1 >> 1;\n        var_8h = uVar4;\n        if ((uVar4 / 3 < uVar3) && (uVar1 <= -uVar3 - 2)) {\n            var_8h = uVar3 + uVar1;\n        }\n    }\n    var_4h = 0;\n    arg_8h = fcn.008c1930(var_8h + 1);\n    var_4h = 0xffffffff;\n    if (var_ch != 0) {\n        if (*(param_1 + 0x18) < 0x10) {\n            arg_10h = param_1 + 4;\n        }\n        else {\n            arg_10h = *(param_1 + 4);\n        }\n        fcn.008c3647(arg_8h, var_8h + 1, arg_10h, var_ch);\n    }\n    if (0xf < *(param_1 + 0x18)) {\n        fcn.008c363c(*(param_1 + 4));\n    }\n    puVar2 = param_1 + 4;\n    *puVar2 = 0;\n    *puVar2 = arg_8h;\n    *(param_1 + 0x18) = var_8h;\n    *(param_1 + 0x14) = var_ch;\n    if (0xf < var_8h) {\n        puVar2 = arg_8h;\n    }\n    *(puVar2 + var_ch) = 0;\n    *in_FS_OFFSET = var_ch_2;\n    return;\n}\n",
        "token_count": 580
    },
    "008cda83": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x008cdeab)\n// WARNING: Removing unreachable block (ram,0x008cde6b)\n// WARNING: Removing unreachable block (ram,0x008cde83)\n// WARNING: Removing unreachable block (ram,0x008cde2b)\n// WARNING: Removing unreachable block (ram,0x008cdec3)\n// WARNING: Removing unreachable block (ram,0x008cde43)\n// WARNING: Removing unreachable block (ram,0x008cdd17)\n\nuint32_t fcn.008cda83(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    do {\n        uVar5 = 0;\n        if (**0x574b904 == '_') {\n            *0x574b904 = *0x574b904 + 1;\n            uVar5 = 0x4000;\n        }\n        cVar1 = **0x574b904;\n        if (('@' < cVar1) && (cVar1 < '[')) {\n            uVar2 = **0x574b904 - 0x41;\n            *0x574b904 = *0x574b904 + 1;\n            if ((uVar2 & 1) == 0) {\n                uVar5 = uVar5 | 0x8000;\n            }\n            else {\n                uVar5 = uVar5 | 0xa000;\n            }\n            if (0x17 < uVar2) {\n                return uVar5;\n            }\n            if ((uVar5 & 0x8000) == 0) {\n                uVar5 = uVar5 & 0xffff9fff;\n            }\n            else {\n                uVar5 = uVar5 | 0x800;\n            }\n            uVar4 = uVar2 & 0x18;\n            if (uVar4 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar4 == 8) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar4 != 0x10) {\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            uVar2 = uVar2 & 6;\n            if (uVar2 != 0) {\n                if (uVar2 == 2) {\n                    if ((uVar5 & 0x8000) == 0) {\n                        return uVar5 & 0xffff9fff;\n                    }\n                    return uVar5 | 0x200;\n                }\n                if (uVar2 != 4) {\n                    if (uVar2 != 6) {\n                        return 0xffff;\n                    }\n                    return uVar5 | 0x400;\n                }\n                return uVar5 | 0x100;\n            }\n            return uVar5;\n        }\n        if (cVar1 != '$') {\n            cVar1 = **0x574b904;\n            if (('/' < cVar1) && (cVar1 < '9')) {\n                *0x574b904 = *0x574b904 + 1;\n    // switch table (9 cases) at 0x8cdf4b\n                switch(cVar1) {\n                case '0':\n                    return 0x800;\n                case '1':\n                    return 0x1000;\n                case '2':\n                    return 0;\n                case '3':\n                    return 0x4000;\n                case '4':\n                    return 0x2000;\n                case '5':\n                    return 0x6000;\n                case '6':\n                    return 0x6800;\n                case '7':\n                    return 0x7000;\n                case '8':\n                    return 0x7800;\n                default:\n                    return 0xffff;\n                }\n            }\n            if (cVar1 != '9') {\n                return (cVar1 != '\\0') + 0xfffe;\n            }\n            *0x574b904 = *0x574b904 + 1;\n            return 0xfffd;\n        }\n        bVar6 = false;\n        pcVar3 = *0x574b904 + 1;\n        cVar1 = *pcVar3;\n        if ('B' < cVar1) {\n            if (cVar1 == 'C') {\n                uVar5 = 0x7c00;\n                goto code_r0x008cdde1;\n            }\n            if (cVar1 == 'D') {\n                uVar5 = uVar5 | 0x9100;\n                goto code_r0x008cdde1;\n            }\n            if (cVar1 == 'E') {\n                uVar5 = uVar5 | 0x9200;\n                goto code_r0x008cdde1;\n            }\n            if (cVar1 != 'R') {\n                *0x574b904 = pcVar3;\n                return 0xffff;\n            }\n            pcVar3 = *0x574b904 + 2;\n            cVar1 = *pcVar3;\n            bVar6 = true;\n            if ((cVar1 < '0') || ('5' < cVar1)) {\n                *0x574b904 = pcVar3;\n                return (cVar1 == '\\0') + 0xfffe;\n            }\ncode_r0x008cdcf7:\n            if (bVar6) {\n                uVar5 = uVar5 | 0x8e00;\n            }\n            else {\n                uVar5 = uVar5 | 0x8d00;\n            }\n            if ((*pcVar3 - 0x30U & 1) != 0) {\n                uVar5 = uVar5 | 0x2000;\n            }\n            uVar2 = *pcVar3 - 0x30U & 6;\n            if (uVar2 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar2 == 2) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar2 != 4) {\n                    *0x574b904 = pcVar3;\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            goto code_r0x008cdde1;\n        }\n        if (cVar1 == 'B') {\n            uVar5 = uVar5 | 0x9800;\n            goto code_r0x008cdde1;\n        }\n        if (cVar1 == '\\0') {\n            uVar5 = 0xfffe;\n            pcVar3 = *0x574b904;\n            goto code_r0x008cdde1;\n        }\n        if (cVar1 != '$') {\n            if (cVar1 < '0') {\n                *0x574b904 = pcVar3;\n                return 0xffff;\n            }\n            if ('5' < cVar1) {\n                if (cVar1 != 'A') {\n                    *0x574b904 = pcVar3;\n                    return 0xffff;\n                }\n                uVar5 = uVar5 | 0x9000;\n                goto code_r0x008cdde1;\n            }\n            goto code_r0x008cdcf7;\n        }\n        if ((*0x574b904)[2] == 'P') {\n            pcVar3 = *0x574b904 + 2;\n        }\n        *0x574b904 = pcVar3 + 1;\n        cVar1 = **0x574b904;\n        if (cVar1 < 'K') {\n            if (cVar1 == 'J') {\ncode_r0x008cdc70:\n                cVar1 = pcVar3[2];\n                if (('/' < cVar1) && (cVar1 < ':')) {\n                    *0x574b904 = pcVar3 + cVar1 + -0x2d;\n                    uVar5 = fcn.008cda83();\n                    return uVar5 | 0x10000;\n                }\n                uVar5 = 0xffff;\n                pcVar3 = pcVar3 + 2;\ncode_r0x008cdde1:\n                *0x574b904 = pcVar3 + 1;\n                return uVar5;\n            }\n            if (cVar1 == '\\0') {\n                return 0xfffe;\n            }\n            if (cVar1 != 'F') {\n                bVar6 = cVar1 == 'H';\ncode_r0x008cdb2a:\n                if (!bVar6) {\n                    return 0xffff;\n                }\n            }\n        }\n        else {\n            if (cVar1 < 'L') {\n                return 0xffff;\n            }\n            if ('M' < cVar1) {\n                if ('O' < cVar1) {\n                    bVar6 = cVar1 == 'Q';\n                    goto code_r0x008cdb2a;\n                }\n                goto code_r0x008cdc70;\n            }\n        }\n        *0x574b904 = pcVar3 + 2;\n    } while( true );\n}\n",
        "token_count": 2260
    },
    "008d3ac0": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.008d3ac0(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != unaff_ESI) {\n        if (*(unaff_EBP + -0x24) != unaff_ESI) {\n            puVar1 = *((*(unaff_EBP + -0x1c) >> 5) * 4 + 0x574bac0) + 4 + (*(unaff_EBP + -0x1c) & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.008dd26a(*(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 207
    },
    "008d3b98": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.008d3b98(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0x574bac0) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.008dd26a(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 191
    },
    "008dd519": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.008dd519(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0x574bac0) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.008dd26a(unaff_ESI);\n    return;\n}\n",
        "token_count": 157
    },
    "008c1040": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1040(int32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    iVar5 = (**0x8e2054)(0, *arg_ch);\n    var_8h = 0;\n    var_4h = 4;\n    uVar6 = 0;\n    if (*arg_ch != 0) {\n        do {\n            uVar2 = *(*arg_8h + 3 + uVar6);\n            puVar1 = *arg_8h + uVar6;\n            uVar3 = puVar1[2];\n            uVar4 = puVar1[1];\n            *(var_8h + iVar5) = (uVar2 & 0xf0) * '\\x04' | *puVar1;\n            *(var_8h + 1 + iVar5) = (uVar2 & 0xfc) << 4 | uVar4;\n            var_8h = var_8h + 2;\n            *(var_8h + iVar5) = uVar2 << 6 | uVar3;\n            fcn.008c0fc0(&var_8h);\n            uVar6 = uVar6 + var_4h;\n        } while (uVar6 < *arg_ch);\n        *arg_8h = iVar5;\n        *arg_ch = var_8h;\n        return;\n    }\n    *arg_8h = iVar5;\n    *arg_ch = 0;\n    return;\n}\n",
        "token_count": 399
    },
    "008c1620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1620(uint arg_8h)\n\n{\n    fcn.008c363c(arg_8h);\n    return;\n}\n",
        "token_count": 35
    },
    "008c1640": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.008c1640(uint *arg_8h)\n\n{\n    uint *in_EAX;\n    int32_t in_ECX;\n    uint *puVar1;\n    \n    if (arg_8h != NULL) {\n        in_EAX = in_ECX + 4;\n        puVar1 = in_EAX;\n        if (0xf < *(in_ECX + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= arg_8h) {\n            if (0xf < *(in_ECX + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            if (arg_8h < *(in_ECX + 0x14) + in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 203
    },
    "008c16c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c16c0(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h < 0x1c) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h * 0x1c);\n    return;\n}\n",
        "token_count": 154
    },
    "008c1710": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1710(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h < 4) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h * 4);\n    return;\n}\n",
        "token_count": 147
    },
    "008c1810": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c1810(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.008c36c4(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 69
    },
    "008c1880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1880(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h < 0x1c) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h * 0x1c);\n    return;\n}\n",
        "token_count": 153
    },
    "008c18e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c18e0(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h < 4) {\n        fcn.008c0e40(0);\n        fcn.008c37a1(&var_ch, 0x8e4fc4);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008c373c(arg_8h * 4);\n    return;\n}\n",
        "token_count": 148
    },
    "008c1980": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c1980(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.008c3647(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "008c1a40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1a40(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    int32_t iVar3;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.008c2e20();\n    }\n    uVar1 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar1 < arg_ch) {\n        arg_ch = uVar1;\n    }\n    if (arg_ch != 0) {\n        if (*(in_ECX + 0x18) < 0x10) {\n            iVar2 = in_ECX + 4;\n            iVar3 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n            iVar3 = *(in_ECX + 4);\n        }\n        fcn.008c36c4(iVar3 + arg_8h, *(in_ECX + 0x18) - arg_8h, iVar2 + arg_8h + arg_ch, uVar1 - arg_ch);\n        iVar2 = *(in_ECX + 0x14) - arg_ch;\n        *(in_ECX + 0x14) = iVar2;\n        if (0xf < *(in_ECX + 0x18)) {\n            *(*(in_ECX + 4) + iVar2) = 0;\n            return;\n        }\n        *(in_ECX + 4 + iVar2) = 0;\n    }\n    return;\n}\n",
        "token_count": 360
    },
    "008c1ad0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.008c1ad0(int32_t *param_1)\n\n{\n    int32_t **ppiVar1;\n    uint *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e1ba1;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    ppiVar1 = fcn.008c373c(4);\n    if (ppiVar1 == NULL) {\n        ppiVar1 = NULL;\n    }\n    else {\n        *ppiVar1 = param_1;\n    }\n    *param_1 = ppiVar1;\n    *in_FS_OFFSET = var_ch;\n    return param_1;\n}\n",
        "token_count": 194
    },
    "008c1e10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c1e10(code **param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e1bf3;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    *param_1 = vtable.std::logic_error.0;\n    var_4h = 0;\n    if (0xf < param_1[9]) {\n        fcn.008c363c(param_1[4]);\n    }\n    param_1[9] = 0xf;\n    param_1[8] = NULL;\n    *(param_1 + 4) = 0;\n    var_4h = 0xffffffff;\n    fcn.008c3003();\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 205
    },
    "008c1ed0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1ed0(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t *arg_8h_00;\n    int32_t in_ECX;\n    int32_t *piVar1;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.008c2e20();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX != arg_8h) {\n        if (arg_14h == 0xffffffff) {\n            fcn.008c2de8();\n        }\n        if (*(in_ECX + 0x18) < arg_14h) {\n            fcn.008c1b30(arg_14h, *(in_ECX + 0x14));\n        }\n        else if (arg_14h == 0) {\n            *(in_ECX + 0x14) = 0;\n            if (*(in_ECX + 0x18) < 0x10) {\n                *(in_ECX + 4) = 0;\n                return;\n            }\n            **(in_ECX + 4) = 0;\n            return;\n        }\n        if (arg_14h != 0) {\n            if (*(arg_8h + 0x18) < 0x10) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            piVar1 = in_ECX + 4;\n            arg_8h_00 = piVar1;\n            if (0xf < *(in_ECX + 0x18)) {\n                arg_8h_00 = *piVar1;\n            }\n            fcn.008c3647(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch, arg_14h);\n            *(in_ECX + 0x14) = arg_14h;\n            if (0xf < *(in_ECX + 0x18)) {\n                piVar1 = *piVar1;\n            }\n            *(piVar1 + arg_14h) = 0;\n        }\n        return;\n    }\n    fcn.008c1a40(arg_14h + arg_ch, 0xffffffff);\n    fcn.008c1a40(0, arg_ch);\n    return;\n}\n",
        "token_count": 589
    },
    "008c1fc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1fc0(uint *arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    int32_t *arg_8h_00;\n    int32_t in_ECX;\n    uint *puVar3;\n    int32_t *piVar4;\n    \n    if (arg_8h != NULL) {\n        uVar1 = *(in_ECX + 0x18);\n        puVar2 = in_ECX + 4;\n        puVar3 = puVar2;\n        if (0xf < uVar1) {\n            puVar3 = *puVar2;\n        }\n        if (puVar3 <= arg_8h) {\n            puVar3 = puVar2;\n            if (0xf < uVar1) {\n                puVar3 = *puVar2;\n            }\n            if (arg_8h < *(in_ECX + 0x14) + puVar3) {\n                if (0xf < uVar1) {\n                    puVar2 = *puVar2;\n                }\n                fcn.008c1ed0(in_ECX, arg_8h - puVar2, arg_ch);\n                return;\n            }\n        }\n    }\n    if (arg_ch == 0xffffffff) {\n        fcn.008c2de8();\n    }\n    if (*(in_ECX + 0x18) < arg_ch) {\n        fcn.008c1b30(arg_ch, *(in_ECX + 0x14));\n    }\n    else if (arg_ch == 0) {\n        *(in_ECX + 0x14) = 0;\n        if (*(in_ECX + 0x18) < 0x10) {\n            *(in_ECX + 4) = 0;\n            return;\n        }\n        **(in_ECX + 4) = 0;\n        return;\n    }\n    if (arg_ch != 0) {\n        piVar4 = in_ECX + 4;\n        arg_8h_00 = piVar4;\n        if (0xf < *(in_ECX + 0x18)) {\n            arg_8h_00 = *piVar4;\n        }\n        fcn.008c3647(arg_8h_00, *(in_ECX + 0x18), arg_8h, arg_ch);\n        *(in_ECX + 0x14) = arg_ch;\n        if (0xf < *(in_ECX + 0x18)) {\n            piVar4 = *piVar4;\n        }\n        *(piVar4 + arg_ch) = 0;\n    }\n    return;\n}\n",
        "token_count": 582
    },
    "008c20a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c20a0(int32_t arg_8h)\n\n{\n    if (0xf < *(arg_8h + 0x18)) {\n        fcn.008c363c(*(arg_8h + 4));\n    }\n    *(arg_8h + 0x18) = 0xf;\n    *(arg_8h + 0x14) = 0;\n    *(arg_8h + 4) = 0;\n    return;\n}\n",
        "token_count": 109
    },
    "008c2130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2130(int32_t arg_8h)\n\n{\n    if (0xf < *(arg_8h + 0x18)) {\n        fcn.008c363c(*(arg_8h + 4));\n    }\n    *(arg_8h + 0x18) = 0xf;\n    *(arg_8h + 0x14) = 0;\n    *(arg_8h + 4) = 0;\n    return;\n}\n",
        "token_count": 108
    },
    "008c2430": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2430(int32_t arg_8h, int32_t arg_ch)\n\n{\n    if (arg_8h != arg_ch) {\n        do {\n            if (0xf < *(arg_8h + 0x18)) {\n                fcn.008c363c(*(arg_8h + 4));\n            }\n            *(arg_8h + 0x18) = 0xf;\n            *(arg_8h + 0x14) = 0;\n            *(arg_8h + 4) = 0;\n            arg_8h = arg_8h + 0x1c;\n        } while (arg_8h != arg_ch);\n    }\n    return;\n}\n",
        "token_count": 160
    },
    "008c24d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c24d0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.008c2430(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 57
    },
    "008c2550": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2550(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008c2430(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 42
    },
    "008c2570": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c2570(int32_t param_1)\n\n{\n    int32_t arg_8h;\n    uint arg_ch;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    arg_8h = *(param_1 + 0xc);\n    if (arg_8h != 0) {\n        arg_ch = *(param_1 + 0x10);\n        iVar1 = param_1 + 8;\n        iVar2 = param_1;\n        fcn.008c2430(arg_8h, arg_ch);\n        fcn.008c363c(*(param_1 + 0xc), arg_8h, arg_ch, iVar1, iVar2);\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 212
    },
    "008c25c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c25c0(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    int32_t arg_8h;\n    uint arg_ch;\n    uint *puVar1;\n    uint *puVar2;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e1c70;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    var_4h = 0;\n    arg_8h = param_1[3];\n    if (arg_8h != 0) {\n        arg_ch = param_1[4];\n        puVar1 = param_1 + 2;\n        puVar2 = param_1;\n        fcn.008c2430(arg_8h, arg_ch);\n        fcn.008c363c(param_1[3], arg_8h, arg_ch, puVar1, puVar2);\n    }\n    param_1[3] = 0;\n    param_1[4] = 0;\n    param_1[5] = 0;\n    var_4h = 0xffffffff;\n    fcn.008c363c(*param_1);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 294
    },
    "008c38b1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c38b1(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008c37ed(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 48
    },
    "008c3a34": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3a34(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.008c859e(arg_8h, arg_ch, arg_10h, 0, &arg_14h);\n    return;\n}\n",
        "token_count": 69
    },
    "008c3a52": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3a52(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.008c859e(arg_8h, arg_ch, arg_10h, arg_14h, &arg_18h);\n    return;\n}\n",
        "token_count": 77
    },
    "008c3a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3a9b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008c3bd8(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "008c3ab4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3ab4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008c3c11(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 56
    },
    "008c3bbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3bbc(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008c3b65(fcn.008c76f2, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "008c3bd8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3bd8(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008c3b65(fcn.008c76f2, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "008c3bf5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3bf5(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008c3b65(fcn.008c86f3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "008c3c11": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c3c11(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008c3b65(fcn.008c86f3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "008c8356": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.008c8356(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c828a(fcn.008c76f2, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 110
    },
    "008c837f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.008c837f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c828a(fcn.008c76f2, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "008c8575": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.008c8575(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c828a(fcn.008c86f3, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 110
    },
    "008c859e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.008c859e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c828a(fcn.008c86f3, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "008c9af2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c9af2(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0x574aee8 == 0)) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x574aee8;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 153
    },
    "008c9b2e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c9b2e(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0x574aee4 == 0)) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x574aee4;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 154
    },
    "008c9d1b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c9d1b(uint arg_8h)\n\n{\n    fcn.008c9bef(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 43
    },
    "008ca7a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x008ca7b8)\n// WARNING: Removing unreachable block (ram,0x008ca7be)\n// WARNING: Removing unreachable block (ram,0x008ca7c0)\n\nvoid fcn.008ca7a4(void)\n\n{\n    return;\n}\n",
        "token_count": 67
    },
    "008d3afa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008d3afa(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e5910, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.008d3325(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.008d3b98();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.008c7141();\n    return;\n}\n",
        "token_count": 457
    },
    "008d3bc6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008d3bc6(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = fcn.008d3afa(arg_8h, arg_ch, arg_10h, arg_14h, &var_4h, 0);\n    if (iVar1 != 0) {\n        return 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 124
    },
    "008d3bf8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d3bf8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.008d3afa(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 79
    },
    "008d4ce6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.008d4ce6(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008c6b46();\n    fcn.008c6ccc(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 57
    },
    "008d4cf9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d4cf9(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de974(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "008d4d12": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d4d12(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de991(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "008d4d2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d4d2b(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008de991(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "008d4d43": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d4d43(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de9ae(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "008d4d5c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d4d5c(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008de9ae(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "008de281": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008de281(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x574ba68;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 136
    },
    "008de8e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.008de8e4(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e5bf8, 0x10);\n    iVar1 = fcn.008c6b46();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.008c652e();\n        *puVar2 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.008c6c1d(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.008de814(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.008de8b0(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.008de96c();\n    }\n    fcn.008c7141();\n    return;\n}\n",
        "token_count": 448
    },
    "008de974": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008de974(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de8e4(fcn.008c76f2, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "008de991": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008de991(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de8e4(fcn.008d539e, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 61
    },
    "008de9ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008de9ae(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.008de8e4(fcn.008c86f3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "008de9cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008de9cb(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008de8e4(fcn.008c76f2, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "008de9e7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008de9e7(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008de8e4(fcn.008d539e, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "008dea03": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008dea03(uint arg_8h, uint arg_ch)\n\n{\n    fcn.008de8e4(fcn.008c86f3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "008df41a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008df41a(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e9044;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "008df453": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008df453(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e9048;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "008df48c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008df48c(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008c652e();\n        *puVar1 = 0x16;\n        fcn.008c64ab(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e9040;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "008c31e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c31e8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.008c535e(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 112
    },
    "008c19b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __fastcall fcn.008c19b0(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e1bc8;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    var_4h = 0xffffffff;\n    fcn.008c363c(*param_1, param_1);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 141
    },
    "008c0fc0": {
        "rules": [
            "create or open registry key",
            "delete registry key"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c0fc0(int32_t *arg_8h)\n\n{\n    uint var_404h;\n    uint var_4h;\n    \n    (**0x8e200c)(0, 0);\n    (**0x8e2010)(0, 0);\n    (**0x8e2014)(0, L\"tukobogazeyupe behalopucovicanesadasono hihotuxejuluyeravoyu\");\n    (**0x8e2018)(0, L\"julozawereguhi zazedurumowi romidajika tuvuhiwekiniyayuvaboyazihoce dozederuraguhasapiju\", 0, 0, 0\n                 , 0, 0, arg_8h, &var_4h);\n    (**0x8e2058)(\"daduketudatawicufo wohefiyijoyikofupexuxa pikeciyeloliha\", 0, &var_404h);\n    (**0x8e205c)(0, 0, 0, 0, 0);\n    (**0x8e2060)(0);\n    *arg_8h = *arg_8h + 1;\n    return;\n}\n",
        "token_count": 288
    },
    "008c1850": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c1850(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    *(in_ECX + 0x14) = arg_8h;\n    if (0xf < *(in_ECX + 0x18)) {\n        *(*(in_ECX + 4) + arg_8h) = 0;\n        return;\n    }\n    *(in_ECX + 4 + arg_8h) = 0;\n    return;\n}\n",
        "token_count": 110
    },
    "008c20d0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c20d0(uint arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    *(in_ECX + 0x14) = 0;\n    *(in_ECX + 0x18) = 0xf;\n    *(in_ECX + 4) = 0;\n    fcn.008c1ed0(arg_8h, 0, 0xffffffff);\n    return;\n}\n",
        "token_count": 97
    },
    "008c2160": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2160(uint arg_8h)\n\n{\n    code **in_ECX;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e1bf3;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    fcn.008c2eca();\n    var_4h = 0;\n    *in_ECX = vtable.std::logic_error.0;\n    in_ECX[8] = NULL;\n    in_ECX[9] = 0xf;\n    *(in_ECX + 4) = 0;\n    fcn.008c1ed0(arg_8h, 0, 0xffffffff);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 203
    },
    "008c22c0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c22c0(char *arg_8h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    int32_t in_ECX;\n    \n    *(in_ECX + 0x18) = 0xf;\n    *(in_ECX + 0x14) = 0;\n    *(in_ECX + 4) = 0;\n    pcVar2 = arg_8h;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.008c1fc0(arg_8h, pcVar2 - (arg_8h + 1));\n    return;\n}\n",
        "token_count": 163
    },
    "008c2370": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2370(int32_t arg_8h)\n\n{\n    code **in_ECX;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e1bf3;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    fcn.008c2f4b(arg_8h);\n    var_4h = 0;\n    *in_ECX = vtable.std::logic_error.0;\n    in_ECX[9] = 0xf;\n    in_ECX[8] = NULL;\n    *(in_ECX + 4) = 0;\n    fcn.008c1ed0(arg_8h + 0xc, 0, 0xffffffff);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 215
    },
    "008c2470": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008c2470(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 0x10) = 0;\n    *(in_ECX + 0x14) = 0;\n    if (arg_8h == 0) {\n        return 0;\n    }\n    if (0x9249249 < arg_8h) {\n        fcn.008c2300();\n    }\n    iVar1 = fcn.008c1880(arg_8h);\n    *(in_ECX + 0xc) = iVar1;\n    *(in_ECX + 0x10) = iVar1;\n    *(in_ECX + 0x14) = iVar1 + arg_8h * 0x1c;\n    return 1;\n}\n",
        "token_count": 202
    },
    "008c24f0": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.008c24f0(int32_t param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint var_14h;\n    uint var_14h_2;\n    uint var_10h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e1c50;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    fcn.008c1ad0();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    *in_FS_OFFSET = var_ch;\n    return param_1;\n}\n",
        "token_count": 184
    },
    "008dac28": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.008dac28(int32_t *arg_8h, int32_t *arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg_10h == 0) {\n        return 0;\n    }\n    if (arg_10h == 1) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n    }\n    else if (arg_10h == 2) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n    }\n    else if (arg_10h == 3) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n    }\n    else {\n        if (arg_10h != 4) {\ncode_r0x008db0da:\n    // switch table (32 cases) at 0x8dc228\n            switch(arg_10h) {\n            case 0:\n                break;\n            case 1:\n                goto code_r0x008db8bb;\n            case 2:\n                goto code_r0x008dbcc7;\n            case 3:\n                goto code_r0x008dc0e8;\n            case 4:\n                goto code_r0x008db44c;\n            case 5:\n                goto code_r0x008db82c;\n            case 6:\n                goto code_r0x008dbc38;\n            case 7:\n                goto code_r0x008dc059;\n            case 8:\n                goto code_r0x008db3bd;\n            case 9:\n                goto code_r0x008db79c;\n            case 10:\n                goto code_r0x008dbba8;\n            case 0xb:\n                goto code_r0x008dbfca;\n            case 0xc:\n                goto code_r0x008db32d;\n            case 0xd:\n                goto code_r0x008db70d;\n            case 0xe:\n                goto code_r0x008dbb19;\n            case 0xf:\n                goto code_r0x008dbf3a;\n            case 0x10:\n                goto code_r0x008db29e;\n            case 0x11:\n                goto code_r0x008db67e;\n            case 0x12:\n                goto code_r0x008dba8a;\n            case 0x13:\n                goto code_r0x008dbeab;\n            case 0x14:\n                goto code_r0x008db20f;\n            case 0x15:\n                goto code_r0x008db5ef;\n            case 0x16:\n                goto code_r0x008db9fb;\n            case 0x17:\n                goto code_r0x008dbe1c;\n            case 0x1a:\n                goto code_r0x008db96c;\n            case 0x1b:\n                goto code_r0x008dbd8d;\n            case 0x1c:\n                uVar1 = *(arg_8h + arg_10h + -0x1c);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1c)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x19) - *(arg_ch + arg_10h + -0x19);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x18:\n                uVar1 = *(arg_8h + arg_10h + -0x18);\n                if (uVar1 == *(arg_ch + arg_10h + -0x18)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x15) - *(arg_ch + arg_10h + -0x15);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db20f:\n                uVar1 = *(arg_8h + arg_10h + -0x14);\n                if (uVar1 == *(arg_ch + arg_10h + -0x14)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x11) - *(arg_ch + arg_10h + -0x11);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db29e:\n                uVar1 = *(arg_8h + arg_10h + -0x10);\n                if (uVar1 == *(arg_ch + arg_10h + -0x10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xd) - *(arg_ch + arg_10h + -0xd);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db32d:\n                if (*(arg_8h + arg_10h + -0xc) == *(arg_ch + arg_10h + -0xc)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -9) - *(arg_ch + arg_10h + -9);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db3bd:\n                uVar1 = *(arg_8h + arg_10h + -8);\n                if (uVar1 == *(arg_ch + arg_10h + -8)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -8);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -5) - *(arg_ch + arg_10h + -5);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db44c:\n                uVar1 = *(arg_8h + arg_10h + -4);\n                if (uVar1 == *(arg_ch + arg_10h + -4)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -4);\n                    if ((uVar1 == uVar2) || (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 == 0)) {\n                        uVar2 = *(arg_8h + arg_10h + -3);\n                        uVar1 = *(arg_ch + arg_10h + -3);\n                        if ((uVar2 == uVar1) || (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0))\n                        {\n                            uVar2 = *(arg_8h + arg_10h + -2);\n                            uVar1 = *(arg_ch + arg_10h + -2);\n                            if (((uVar2 == uVar1) ||\n                                (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0)) &&\n                               (iVar3 = *(arg_8h + arg_10h + -1) - *(arg_ch + arg_10h + -1),  iVar3 != 0)) {\n                                iVar3 = (0 < iVar3) * 2 + -1;\n                            }\n                        }\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n                break;\n            case 0x1d:\n                uVar1 = *(arg_8h + arg_10h + -0x1d);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1d)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1a) - *(arg_ch + arg_10h + -0x1a);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x19:\n                uVar1 = *(arg_8h + arg_10h + -0x19);\n                if (uVar1 == *(arg_ch + arg_10h + -0x19)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x16) - *(arg_ch + arg_10h + -0x16);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db5ef:\n                uVar1 = *(arg_8h + arg_10h + -0x15);\n                if (uVar1 == *(arg_ch + arg_10h + -0x15)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x12) - *(arg_ch + arg_10h + -0x12);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db67e:\n                uVar1 = *(arg_8h + arg_10h + -0x11);\n                if (uVar1 == *(arg_ch + arg_10h + -0x11)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xe) - *(arg_ch + arg_10h + -0xe);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db70d:\n                uVar1 = *(arg_8h + arg_10h + -0xd);\n                if (uVar1 == *(arg_ch + arg_10h + -0xd)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -10) - *(arg_ch + arg_10h + -10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db79c:\n                if (*(arg_8h + arg_10h + -9) == *(arg_ch + arg_10h + -9)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -6) - *(arg_ch + arg_10h + -6);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db82c:\n                uVar1 = *(arg_8h + arg_10h + -5);\n                if (uVar1 == *(arg_ch + arg_10h + -5)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -5);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -3);\n                    uVar1 = *(arg_ch + arg_10h + -3);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -2) - *(arg_ch + arg_10h + -2);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\njoined_r0x008db8b5:\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db8bb:\n                uVar2 = *(arg_ch + arg_10h + -1);\n                uVar1 = *(arg_8h + arg_10h + -1);\n                if (uVar1 == uVar2) {\n                    return 0;\n                }\n                return (0 < uVar1 - uVar2) * 2 + -1;\n            case 0x1e:\n                uVar1 = *(arg_8h + arg_10h + -0x1e);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1e)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1b) - *(arg_ch + arg_10h + -0x1b);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db96c:\n                uVar1 = *(arg_8h + arg_10h + -0x1a);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1a)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x17) - *(arg_ch + arg_10h + -0x17);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008db9fb:\n                uVar1 = *(arg_8h + arg_10h + -0x16);\n                if (uVar1 == *(arg_ch + arg_10h + -0x16)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x13) - *(arg_ch + arg_10h + -0x13);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dba8a:\n                uVar1 = *(arg_8h + arg_10h + -0x12);\n                if (uVar1 == *(arg_ch + arg_10h + -0x12)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xf) - *(arg_ch + arg_10h + -0xf);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbb19:\n                uVar1 = *(arg_8h + arg_10h + -0xe);\n                if (uVar1 == *(arg_ch + arg_10h + -0xe)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xb) - *(arg_ch + arg_10h + -0xb);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbba8:\n                if (*(arg_8h + arg_10h + -10) == *(arg_ch + arg_10h + -10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -7) - *(arg_ch + arg_10h + -7);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbc38:\n                uVar1 = *(arg_8h + arg_10h + -6);\n                if (uVar1 == *(arg_ch + arg_10h + -6)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -6);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -3) - *(arg_ch + arg_10h + -3);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbcc7:\n                if (*(arg_8h + arg_10h + -2) != *(arg_ch + arg_10h + -2)) {\ncode_r0x008dbcd5:\n                    uVar1 = *(arg_ch + arg_10h + -2);\n                    uVar2 = *(arg_8h + arg_10h + -2);\n                    if (uVar2 == uVar1) goto code_r0x008db8bb;\n                    iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1;\n                    goto joined_r0x008db8b5;\n                }\n                break;\n            case 0x1f:\n                if (*(arg_8h + arg_10h + -0x1f) == *(arg_ch + arg_10h + -0x1f)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0x1f);\n                    uVar2 = *(arg_8h + arg_10h + -0x1f);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1e);\n                    uVar1 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1c) - *(arg_ch + arg_10h + -0x1c);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbd8d:\n                uVar1 = *(arg_8h + arg_10h + -0x1b);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1b)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x18) - *(arg_ch + arg_10h + -0x18);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbe1c:\n                uVar1 = *(arg_8h + arg_10h + -0x17);\n                if (uVar1 == *(arg_ch + arg_10h + -0x17)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x14) - *(arg_ch + arg_10h + -0x14);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbeab:\n                uVar1 = *(arg_8h + arg_10h + -0x13);\n                if (uVar1 == *(arg_ch + arg_10h + -0x13)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x10) - *(arg_ch + arg_10h + -0x10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbf3a:\n                if (*(arg_8h + arg_10h + -0xf) == *(arg_ch + arg_10h + -0xf)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xc) - *(arg_ch + arg_10h + -0xc);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dbfca:\n                uVar1 = *(arg_8h + arg_10h + -0xb);\n                if (uVar1 == *(arg_ch + arg_10h + -0xb)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -8) - *(arg_ch + arg_10h + -8);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dc059:\n                uVar1 = *(arg_8h + arg_10h + -7);\n                if (uVar1 == *(arg_ch + arg_10h + -7)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -7);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -4) - *(arg_ch + arg_10h + -4);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x008dc0e8:\n                uVar2 = *(arg_8h + arg_10h + -3);\n                uVar1 = *(arg_ch + arg_10h + -3);\n                if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                    return iVar3;\n                }\n                goto code_r0x008dbcd5;\n            default:\n                goto code_r0x008dac68;\n            }\n            return 0;\n        }\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 3);\n        uVar2 = *(arg_ch + 3);\n    }\n    iVar3 = uVar1 - uVar2;\n    if (iVar3 != 0) {\n        iVar3 = (0 < iVar3) * 2 + -1;\n    }\n    return iVar3;\ncode_r0x008dac68:\n    if (*arg_8h == *arg_ch) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *arg_8h;\n        uVar1 = *arg_ch;\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 3) - *(arg_ch + 3);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[1] == arg_ch[1]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 7) - *(arg_ch + 7);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[2] == arg_ch[2]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 9);\n        uVar1 = *(arg_ch + 9);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 10);\n        uVar1 = *(arg_ch + 10);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xb) - *(arg_ch + 0xb);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[3] == arg_ch[3]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 3);\n        uVar1 = *(arg_ch + 3);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xd);\n        uVar1 = *(arg_ch + 0xd);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xe);\n        uVar1 = *(arg_ch + 0xe);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xf) - *(arg_ch + 0xf);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[4] == arg_ch[4]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar1 = *(arg_ch + 4);\n        uVar2 = *(arg_8h + 4);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x11);\n        uVar1 = *(arg_ch + 0x11);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x12);\n        uVar1 = *(arg_ch + 0x12);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x13) - *(arg_ch + 0x13);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[5] == arg_ch[5]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x15);\n        uVar1 = *(arg_ch + 0x15);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x16);\n        uVar1 = *(arg_ch + 0x16);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x17) - *(arg_ch + 0x17);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[6] == arg_ch[6]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x19);\n        uVar1 = *(arg_ch + 0x19);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1a);\n        uVar1 = *(arg_ch + 0x1a);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1b) - *(arg_ch + 0x1b);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[7] == arg_ch[7]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 7);\n        uVar1 = *(arg_ch + 7);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1d);\n        uVar1 = *(arg_ch + 0x1d);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1e);\n        uVar1 = *(arg_ch + 0x1e);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1f) - *(arg_ch + 0x1f);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    arg_8h = arg_8h + 8;\n    arg_ch = arg_ch + 8;\n    arg_10h = arg_10h + -0x20;\n    goto code_r0x008db0da;\n}\n",
        "token_count": 16487
    },
    "008e08f0": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.008e08f0(void)\n\n{\n    *0x8e90f4 = (**0x8e2138)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 60
    },
    "008c0f50": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.008c0f50(char *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    \n    pcVar1 = arg_8h + 1;\n    do {\n        cVar2 = *arg_8h;\n        arg_8h = arg_8h + 1;\n    } while (cVar2 != '\\0');\n    return arg_8h - pcVar1;\n}\n",
        "token_count": 100
    },
    "008c2100": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c2100(char *arg_8h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    pcVar2 = arg_8h;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.008c1fc0(arg_8h, pcVar2 - (arg_8h + 1));\n    return;\n}\n",
        "token_count": 110
    },
    "008c5bc0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008c5bc0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008c70fc(0x8e5600, 0xc);\n    fcn.008cabca(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x574aeb4;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x574aeb0;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x008c5c04;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.008c41cf(arg_8h_00);\ncode_r0x008c5c04:\n        fcn.008c41cf(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.008c5c27();\n    fcn.008c7141();\n    return;\n}\n",
        "token_count": 403
    },
    "008df251": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008df251(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0x8e2040)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 64
    }
}