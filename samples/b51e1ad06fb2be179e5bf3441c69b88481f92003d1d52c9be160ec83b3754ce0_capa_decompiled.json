{
    "0040103c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040103c(int32_t param_1)\n\n{\n    uint var_4h;\n    \n    fcn.009f556c(0);\n    if (*(param_1 + 4) != -1) {\n        *(param_1 + 4) = *(param_1 + 4) + 1;\n    }\n    fcn.009f5594();\n    return;\n}\n",
        "token_count": 90
    },
    "009f400b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f400b(uchar *arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_10h) {\n        do {\n            if (*in_ECX[8] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xc];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 0x14))();\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                *arg_8h = iVar1;\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_10h = arg_10h + -1;\n            }\n            else {\n                if (arg_10h < iVar1) {\n                    iVar1 = arg_10h;\n                }\n                fcn.00401348(arg_8h, arg_ch, *in_ECX[8], iVar1);\n                *in_ECX[0xc] = *in_ECX[0xc] - iVar1;\n                var_4h = var_4h + iVar1;\n                arg_10h = arg_10h - iVar1;\n                arg_8h = arg_8h + iVar1;\n                *in_ECX[8] = *in_ECX[8] + iVar1;\n            }\n        } while (0 < arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 380
    },
    "00401087": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401087(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.009f556c(0);\n    iVar2 = *0xf1334c;\n    var_4h = *0xf1334c;\n    uVar1 = fcn.004012df();\n    arg_8h_00 = fcn.0040129e(uVar1);\n    if ((arg_8h_00 == 0) && (arg_8h_00 = iVar2,  iVar2 == 0)) {\n        iVar2 = fcn.00401307(&var_4h, arg_8h);\n        if (iVar2 == -1) {\n            fcn.009f6182(\"bad cast\");\n            fcn.009f6538(&var_14h, 0xa35770);\n        }\n        arg_8h_00 = var_4h;\n        *0xf1334c = var_4h;\n        fcn.0040103c();\n        fcn.009f57f3(arg_8h_00);\n    }\n    fcn.009f5594();\n    return arg_8h_00;\n}\n",
        "token_count": 303
    },
    "009f40a4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f40a4(uchar *arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t arg_14h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_ch) {\n        do {\n            if (*in_ECX[9] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xd];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 4))(*arg_8h);\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_ch = arg_ch + -1;\n            }\n            else {\n                arg_14h = iVar1;\n                if (arg_ch < iVar1) {\n                    arg_14h = arg_ch;\n                }\n                fcn.00401348(*in_ECX[9], iVar1, arg_8h, arg_14h);\n                *in_ECX[0xd] = *in_ECX[0xd] - arg_14h;\n                var_4h = var_4h + arg_14h;\n                arg_ch = arg_ch - arg_14h;\n                arg_8h = arg_8h + arg_14h;\n                *in_ECX[9] = *in_ECX[9] + arg_14h;\n            }\n        } while (0 < arg_ch);\n    }\n    return var_4h;\n}\n",
        "token_count": 384
    },
    "009f4169": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f4169(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t in_ECX;\n    uint32_t uVar8;\n    int32_t arg_8h_00;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    if ((*(in_ECX + 0x40) & 8) != 0) {\n        uVar8 = **(in_ECX + 0x24);\n        if ((uVar8 != 0) && (uVar4 = *(in_ECX + 0x3c),  uVar8 < uVar4)) {\n            iVar2 = **(in_ECX + 0x34);\n            **(in_ECX + 0x24) = uVar4;\n            **(in_ECX + 0x34) = (iVar2 + uVar8) - uVar4;\n        }\n    }\n    if (arg_8h == -1) {\n        return 0;\n    }\n    uVar8 = **(in_ECX + 0x24);\n    if ((uVar8 != 0) && (piVar6 = *(in_ECX + 0x34),  uVar8 < *piVar6 + uVar8)) {\n        *piVar6 = *piVar6 + -1;\n        puVar3 = **(in_ECX + 0x24);\n        **(in_ECX + 0x24) = puVar3 + 1;\n        *puVar3 = arg_8h;\n        return arg_8h;\n    }\n    if ((*(in_ECX + 0x40) & 2) != 0) {\n        return -1;\n    }\n    if (uVar8 == 0) {\n        uVar8 = 0;\n    }\n    else {\n        uVar8 = (**(in_ECX + 0x34) - **(in_ECX + 0x10)) + uVar8;\n    }\n    uVar4 = uVar8 >> 1;\n    if (uVar4 < 0x20) {\n        uVar4 = 0x20;\n    }\n    iVar2 = **(in_ECX + 0x10);\n    arg_8h_00 = 0;\n    var_4h = uVar8;\n    if (uVar4 != 0) {\n        do {\n            if (uVar8 <= 0x7fffffff - uVar4) break;\n            uVar4 = uVar4 >> 1;\n        } while (uVar4 != 0);\n        if (uVar4 != 0) {\n            var_4h = uVar4 + uVar8;\n            arg_8h_00 = fcn.0040136b(var_4h);\n        }\n    }\n    if (uVar8 == 0) {\n        *(in_ECX + 0x3c) = arg_8h_00;\n        **(in_ECX + 0x14) = arg_8h_00;\n        **(in_ECX + 0x24) = arg_8h_00;\n        **(in_ECX + 0x34) = var_4h;\n        uVar1 = *(in_ECX + 0x40);\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n        if ((uVar1 & 4) == 0) {\n            *piVar6 = arg_8h_00;\n            **(in_ECX + 0x30) = 1;\n            goto code_r0x009f42e3;\n        }\n    }\n    else {\n        fcn.00401348(arg_8h_00, var_4h, iVar2, uVar8);\n        *(in_ECX + 0x3c) = *(in_ECX + 0x3c) + (arg_8h_00 - iVar2);\n        iVar5 = **(in_ECX + 0x24);\n        **(in_ECX + 0x14) = **(in_ECX + 0x14) + (arg_8h_00 - iVar2);\n        iVar5 = (iVar5 - iVar2) + arg_8h_00;\n        **(in_ECX + 0x24) = iVar5;\n        **(in_ECX + 0x34) = (arg_8h_00 - iVar5) + var_4h;\n        if ((*(in_ECX + 0x40) & 4) == 0) {\n            iVar5 = **(in_ECX + 0x24);\n            iVar7 = (**(in_ECX + 0x20) - iVar2) + arg_8h_00;\n            **(in_ECX + 0x10) = arg_8h_00;\n            **(in_ECX + 0x20) = iVar7;\n            **(in_ECX + 0x30) = (iVar5 - iVar7) + 1;\n            goto code_r0x009f42e3;\n        }\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n    }\n    *piVar6 = 0;\n    **(in_ECX + 0x30) = arg_8h_00;\ncode_r0x009f42e3:\n    if ((*(in_ECX + 0x40) & 1) != 0) {\n        fcn.009f63c5(iVar2);\n    }\n    *(in_ECX + 0x40) = *(in_ECX + 0x40) | 1;\n    **(in_ECX + 0x34) = **(in_ECX + 0x34) + -1;\n    puVar3 = **(in_ECX + 0x24);\n    **(in_ECX + 0x24) = puVar3 + 1;\n    *puVar3 = arg_8h;\n    return arg_8h;\n}\n",
        "token_count": 1408
    },
    "00401285": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00401285(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    fcn.009f556c(0);\n    iVar1 = *(param_1 + 4);\n    if ((iVar1 != 0) && (iVar1 != -1)) {\n        *(param_1 + 4) = iVar1 + -1;\n    }\n    iVar1 = *(param_1 + 4);\n    fcn.009f5594();\n    return ~-(iVar1 != 0) & param_1;\n}\n",
        "token_count": 131
    },
    "null": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009fc5ba": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fc5ba(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35c88, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.009fc172();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.009fd6f5();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.009fd740(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fc680();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.009fd6f5();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 567
    },
    "00a1c096": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00a1c358)\n// WARNING: Removing unreachable block (ram,0x00a1c321)\n// WARNING: Removing unreachable block (ram,0x00a1c709)\n// WARNING: Removing unreachable block (ram,0x00a1c330)\n// WARNING: Removing unreachable block (ram,0x00a1c338)\n// WARNING: Removing unreachable block (ram,0x00a1c33e)\n// WARNING: Removing unreachable block (ram,0x00a1c341)\n// WARNING: Removing unreachable block (ram,0x00a1c348)\n// WARNING: Removing unreachable block (ram,0x00a1c352)\n// WARNING: Removing unreachable block (ram,0x00a1c3ad)\n// WARNING: Removing unreachable block (ram,0x00a1c3a7)\n// WARNING: Removing unreachable block (ram,0x00a1c3b3)\n// WARNING: Removing unreachable block (ram,0x00a1c3d0)\n// WARNING: Removing unreachable block (ram,0x00a1c3d2)\n// WARNING: Removing unreachable block (ram,0x00a1c3da)\n// WARNING: Removing unreachable block (ram,0x00a1c3dd)\n// WARNING: Removing unreachable block (ram,0x00a1c3e2)\n// WARNING: Removing unreachable block (ram,0x00a1c3e5)\n// WARNING: Removing unreachable block (ram,0x00a1c712)\n// WARNING: Removing unreachable block (ram,0x00a1c3f0)\n// WARNING: Removing unreachable block (ram,0x00a1c729)\n// WARNING: Removing unreachable block (ram,0x00a1c730)\n// WARNING: Removing unreachable block (ram,0x00a1c3fb)\n// WARNING: Removing unreachable block (ram,0x00a1c40e)\n// WARNING: Removing unreachable block (ram,0x00a1c410)\n// WARNING: Removing unreachable block (ram,0x00a1c41d)\n// WARNING: Removing unreachable block (ram,0x00a1c422)\n// WARNING: Removing unreachable block (ram,0x00a1c428)\n// WARNING: Removing unreachable block (ram,0x00a1c431)\n// WARNING: Removing unreachable block (ram,0x00a1c438)\n// WARNING: Removing unreachable block (ram,0x00a1c450)\n// WARNING: Removing unreachable block (ram,0x00a1c461)\n// WARNING: Removing unreachable block (ram,0x00a1c46f)\n// WARNING: Removing unreachable block (ram,0x00a1c4ae)\n// WARNING: Removing unreachable block (ram,0x00a1c4b7)\n// WARNING: Removing unreachable block (ram,0x00a1c6cf)\n// WARNING: Removing unreachable block (ram,0x00a1c4c5)\n// WARNING: Removing unreachable block (ram,0x00a1c4cf)\n// WARNING: Removing unreachable block (ram,0x00a1c6ea)\n// WARNING: Removing unreachable block (ram,0x00a1c4dc)\n// WARNING: Removing unreachable block (ram,0x00a1c4e3)\n// WARNING: Removing unreachable block (ram,0x00a1c4ed)\n// WARNING: Removing unreachable block (ram,0x00a1c4f2)\n// WARNING: Removing unreachable block (ram,0x00a1c502)\n// WARNING: Removing unreachable block (ram,0x00a1c507)\n// WARNING: Removing unreachable block (ram,0x00a1c511)\n// WARNING: Removing unreachable block (ram,0x00a1c516)\n// WARNING: Removing unreachable block (ram,0x00a1c528)\n// WARNING: Removing unreachable block (ram,0x00a1c535)\n// WARNING: Removing unreachable block (ram,0x00a1c544)\n// WARNING: Removing unreachable block (ram,0x00a1c551)\n// WARNING: Removing unreachable block (ram,0x00a1c56e)\n// WARNING: Removing unreachable block (ram,0x00a1c572)\n// WARNING: Removing unreachable block (ram,0x00a1c579)\n// WARNING: Removing unreachable block (ram,0x00a1c582)\n// WARNING: Removing unreachable block (ram,0x00a1c585)\n// WARNING: Removing unreachable block (ram,0x00a1c596)\n// WARNING: Removing unreachable block (ram,0x00a1c5a4)\n// WARNING: Removing unreachable block (ram,0x00a1c5af)\n// WARNING: Removing unreachable block (ram,0x00a1c5b6)\n// WARNING: Removing unreachable block (ram,0x00a1c5e1)\n// WARNING: Removing unreachable block (ram,0x00a1c5e6)\n// WARNING: Removing unreachable block (ram,0x00a1c5f1)\n// WARNING: Removing unreachable block (ram,0x00a1c5fa)\n// WARNING: Removing unreachable block (ram,0x00a1c600)\n// WARNING: Removing unreachable block (ram,0x00a1c603)\n// WARNING: Removing unreachable block (ram,0x00a1c629)\n// WARNING: Removing unreachable block (ram,0x00a1c62e)\n// WARNING: Removing unreachable block (ram,0x00a1c633)\n// WARNING: Removing unreachable block (ram,0x00a1c640)\n// WARNING: Removing unreachable block (ram,0x00a1c651)\n// WARNING: Removing unreachable block (ram,0x00a1c682)\n// WARNING: Removing unreachable block (ram,0x00a1c657)\n// WARNING: Removing unreachable block (ram,0x00a1c67d)\n// WARNING: Removing unreachable block (ram,0x00a1c661)\n// WARNING: Removing unreachable block (ram,0x00a1c677)\n// WARNING: Removing unreachable block (ram,0x00a1c670)\n// WARNING: Removing unreachable block (ram,0x00a1c685)\n// WARNING: Removing unreachable block (ram,0x00a1c6b2)\n// WARNING: Removing unreachable block (ram,0x00a1c68f)\n// WARNING: Removing unreachable block (ram,0x00a1c51a)\n// WARNING: Removing unreachable block (ram,0x00a1c4f7)\n// WARNING: Removing unreachable block (ram,0x00a1c6ed)\n// WARNING: Removing unreachable block (ram,0x00a1c433)\n// WARNING: Removing unreachable block (ram,0x00a1c6f7)\n// WARNING: Removing unreachable block (ram,0x00a1c738)\n// WARNING: Variable defined which should be unmapped: var_7ch\n\nvoid __cdecl\nfcn.00a1c096(uint arg_8h, uint arg_ch, char *arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            int32_t arg_24h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_9h;\n    uint var_4h;\n    \n    if (arg_24h == 0) {\n        puVar2 = fcn.009f9ecc();\n        *puVar2 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        fcn.009f6c53(var_7ch);\n        return;\n    }\n    for (; (((cVar1 = *arg_10h,  cVar1 == ' ' || (cVar1 == '\\t')) || (cVar1 == '\\n')) || (cVar1 == '\\r'));\n        arg_10h = arg_10h + 1) {\n    }\n    // WARNING: Could not recover jumptable at 0x00a1c129. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (12 cases) at 0xa1c75e\n    (**0xa1c75e)();\n    return;\n}\n",
        "token_count": 1978
    },
    "009f615f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f615f(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.009f658f(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "004010be": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004010be(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.00401055(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.009f63c5(arg_10h);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00401280(param_3);\n    return;\n}\n",
        "token_count": 163
    },
    "00401230": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401230(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f5e39();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        puVar1 = puVar3;\n        if (0xf < *(in_ECX + 0x18)) {\n            puVar1 = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.004013de(puVar3 + arg_8h, *(in_ECX + 0x18) - arg_8h, puVar1 + arg_ch + arg_8h, uVar2 - arg_ch);\n        fcn.00401398(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 278
    },
    "0040128a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040128a(int32_t param_1, uint32_t param_2, uint param_3)\n\n{\n    if (*(param_1 + 0x28) == 0) {\n        param_2 = param_2 | 4;\n    }\n    fcn.0040148d(param_2, param_3);\n    return;\n}\n",
        "token_count": 83
    },
    "004012c1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.004012c1(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (param_2 == 0xffffffff) {\n        fcn.009f5e01();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.004012a3(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (0xf < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401398(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004012e4(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 227
    },
    "004012df": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004012df(int32_t *param_1)\n\n{\n    uint var_4h;\n    \n    if (*param_1 == 0) {\n        fcn.009f556c(0);\n        if (*param_1 == 0) {\n            *0xf133c0 = *0xf133c0 + 1;\n            *param_1 = *0xf133c0;\n        }\n        fcn.009f5594();\n    }\n    return *param_1;\n}\n",
        "token_count": 114
    },
    "004012e4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004012e4(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.00401348(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.009f63c5(arg_10h);\n    }\n    *(param_1 + 0x18) = 0xf;\n    fcn.00401398(param_3);\n    return;\n}\n",
        "token_count": 168
    },
    "0040130c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.0040130c(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (0xf < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            if (param_2 < *(param_1 + 0x14) + in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 199
    },
    "009f3bde": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f3bde(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    \n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar3 = *0xa31238;\n    if (((arg_14h & 1) != 0) && (iVar6 = **(in_ECX + 0x20),  iVar6 != 0)) {\n        if (arg_10h == 2) {\n            iVar4 = *(in_ECX + 0x3c);\ncode_r0x009f3c2b:\n            arg_ch = arg_ch + (iVar4 - **(in_ECX + 0x10));\n        }\n        else if (arg_10h == 1) {\n            iVar4 = iVar6;\n            if ((arg_14h & 2) == 0) goto code_r0x009f3c2b;\ncode_r0x009f3c3d:\n            arg_ch = *0xa31238;\n        }\n        else if (arg_10h != 0) goto code_r0x009f3c3d;\n        if ((-1 < arg_ch) && (arg_ch <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar3 = (**(in_ECX + 0x10) - iVar6) + arg_ch;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar3;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar3;\n            iVar3 = arg_ch;\n            if ((arg_14h & 2) != 0) {\n                iVar6 = **(in_ECX + 0x24);\n                if (iVar6 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar2 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar2 + iVar6) - iVar4;\n                }\n            }\n        }\n        goto code_r0x009f3cfe;\n    }\n    if (((arg_14h & 2) == 0) || (uVar1 = **(in_ECX + 0x24),  uVar1 == 0)) goto code_r0x009f3cfe;\n    if (arg_10h == 2) {\n        uVar5 = *(in_ECX + 0x3c);\ncode_r0x009f3cbb:\n        iVar6 = arg_ch + (uVar5 - **(in_ECX + 0x10));\n    }\n    else {\n        uVar5 = uVar1;\n        if (arg_10h == 1) goto code_r0x009f3cbb;\n        iVar6 = *0xa31238;\n        if (arg_10h == 0) {\n            iVar6 = arg_ch;\n        }\n    }\n    if ((-1 < iVar6) && (iVar6 <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n        iVar3 = (**(in_ECX + 0x10) - uVar1) + iVar6;\n        **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar3;\n        **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar3;\n        iVar3 = iVar6;\n    }\ncode_r0x009f3cfe:\n    *arg_8h = iVar3;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 988
    },
    "0040136b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040136b(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t arg_8h_00;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h_00 = 0;\n    }\n    else {\n        arg_8h_00 = arg_8h;\n        if (0xffffffff / arg_8h == 0) {\n            arg_8h = 0;\n            fcn.009f6037(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f6538(&var_ch, 0xa35608);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f64d3(arg_8h_00);\n    return;\n}\n",
        "token_count": 198
    },
    "009f658f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f658f(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35a08, 0xc);\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 != 0) {\n        if (*0xf1545c == 3) {\n            fcn.009fabda(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.009fad08(iVar1);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.009fad38(arg_8h_00, iVar1);\n            }\n            *(unaff_EBP + -4) = 0xfffffffe;\n            fcn.009f65e5();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x009f6617;\n            iVar1 = *(unaff_EBP + 8);\n        }\n        iVar1 = (**0xf16308)(*0xf134b0, 0, iVar1);\n        if (iVar1 == 0) {\n            puVar2 = fcn.009f9ecc();\n            uVar3 = (**0xf16304)();\n            uVar3 = fcn.009f9e8a(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\ncode_r0x009f6617:\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 420
    },
    "009f6963": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.009f6963(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x9f6a0e;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.009f6a3a;\n        uStack36 = *0xa3a370 ^ &fcn.009f6963::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.009f6963::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.009fc172();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.009f6963::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 727
    },
    "009f6c53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6c53(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa3a370) {\n        return;\n    }\n    *0xf13738 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xf1373c = &arg_8h;\n    *0xf13678 = 0x10001;\n    *0xf13620 = 0xc0000409;\n    *0xf13624 = 1;\n    var_328h = *0xa3a370;\n    var_324h = *0xa3a374;\n    *0xf1362c = unaff_retaddr;\n    *0xf13704 = in_GS;\n    *0xf13708 = in_FS;\n    *0xf1370c = in_ES;\n    *0xf13710 = in_DS;\n    *0xf13714 = unaff_EDI;\n    *0xf13718 = unaff_ESI;\n    *0xf1371c = unaff_EBX;\n    *0xf13720 = in_EDX;\n    *0xf13724 = in_ECX;\n    *0xf13728 = in_EAX;\n    *0xf1372c = unaff_EBP;\n    *0xf13730 = unaff_retaddr;\n    *0xf13734 = in_CS;\n    *0xf13740 = in_SS;\n    *0xf13670 = (**0xf1631c)();\n    fcn.009fbe4c(1);\n    (**0xf16318)(0);\n    (**0xf16314)(0xa31cd8);\n    if (*0xf13670 == 0) {\n        fcn.009fbe4c(1);\n    }\n    uVar1 = (**0xf16310)(0xc0000409);\n    (**0xf1630c)(uVar1);\n    return;\n}\n",
        "token_count": 779
    },
    "009fc680": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009fc680(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fc172();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.009fc172();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "009fcd31": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fcd31(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.009f6ba1(*(unaff_EBP + -0x28));\n    iVar1 = fcn.009fc172();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.009fc172();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.009f6b7a(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.009fc6e0(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 384
    },
    "009fd9de": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009fd9de(void)\n\n{\n    uint unaff_EBX;\n    uint in_stack_fffffd2c;\n    uint in_stack_fffffd30;\n    uint var_2c8h;\n    \n    fcn.00a0e5f0();\n    fcn.009fda6a(unaff_EBX, in_stack_fffffd2c, in_stack_fffffd30);\n    return;\n}\n",
        "token_count": 93
    },
    "00a01223": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00a01316: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a0131b)\n// WARNING: Removing unreachable block (ram,0x00a01349)\n// WARNING: Removing unreachable block (ram,0x00a01321)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a01223(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35ec8, 0x18);\n    fcn.009fabda(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xf13980 != 1) {\n        *0xf1397c = 1;\n        *0xf13978 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.009fbee9(*0xf140d4);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.009fbee9(*0xf140d0);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.009fbee0();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.009fbee9(*piVar2);\n                        iVar3 = fcn.009fbee0();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.009fbee9(*0xf140d4);\n                        piVar1 = fcn.009fbee9(*0xf140d0);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00a010e5(0xa30b50);\n        }\n        fcn.00a010e5(0xa30d58);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.009faae8(8);\n    }\n    return;\n}\n",
        "token_count": 799
    },
    "00a03910": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00a03910(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.009faae8(0);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00a0da8b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.00a0da8b(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint *puVar3;\n    int32_t *piVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    char *pcVar8;\n    uint var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    uint var_1h;\n    \n    puVar2 = *0xf13e34;\n    uVar1 = **0xf13e34;\n    if (uVar1 == 0) {\n        fcn.00a0a3c1(arg_8h, 1, arg_ch);\n        return arg_8h;\n    }\n    *0xf13e34 = *0xf13e34 + 1;\n    var_ch = 0;\n    uVar7 = uVar1;\n    var_8h = var_8h & 0xffff0000;\n    uVar6 = 0xffffffff;\n    var_1h._0_1_ = 0;\n    if (0x4e < uVar7) {\n        if (uVar7 == 0x4f) {\n            fcn.00a0a031(\"long \");\n            goto code_r0x00a0dcff;\n        }\n        if (uVar7 < 0x50) goto code_r0x00a0dcea;\n        if (uVar7 < 0x54) {\n            uVar6 = uVar7 & 3;\n            goto code_r0x00a0dd0c;\n        }\n        if (uVar7 == 0x58) {\n            pcVar8 = \"void\";\n            goto code_r0x00a0dcd9;\n        }\n        if (uVar7 != 0x5f) goto code_r0x00a0dcea;\n        var_1h._0_1_ = **0xf13e34;\n        *0xf13e34 = puVar2 + 2;\n        uVar6 = var_1h;\n        if (uVar6 < 0x4c) {\n            if (uVar6 < 0x4a) {\n                if (uVar6 < 0x46) {\n                    if (uVar6 < 0x44) {\n                        if (uVar6 != 0) {\n                            if (uVar6 == 0x24) {\n                                uVar5 = fcn.00a0da8b(&var_1ch, arg_ch);\n                                fcn.00a0a3e5(arg_8h, \"__w64 \", uVar5);\n                                return arg_8h;\n                            }\n                            goto code_r0x00a0dccd;\n                        }\n                        *0xf13e34 = puVar2 + 1;\n                        fcn.00a09a92(1);\n                        goto code_r0x00a0dd15;\n                    }\n                    pcVar8 = \"__int8\";\n                }\n                else if (uVar6 < 0x46) {\ncode_r0x00a0dccd:\n                    pcVar8 = \"UNKNOWN\";\n                }\n                else if (uVar6 < 0x48) {\n                    pcVar8 = \"__int16\";\n                }\n                else {\n                    if (0x49 < uVar6) goto code_r0x00a0dccd;\n                    pcVar8 = \"__int32\";\n                }\n            }\n            else {\n                pcVar8 = \"__int64\";\n            }\n            goto code_r0x00a0dcd9;\n        }\n        if (uVar6 < 0x4c) goto code_r0x00a0dccd;\n        if (uVar6 < 0x4e) {\n            pcVar8 = \"__int128\";\n        }\n        else if (uVar6 == 0x4e) {\n            pcVar8 = \"bool\";\n        }\n        else {\n            if (uVar6 == 0x4f) {\n                uVar6 = 0xfffffffe;\n                goto code_r0x00a0dc61;\n            }\n            if (uVar6 != 0x57) {\n                if (1 < uVar6 - 0x58) goto code_r0x00a0dccd;\n                puVar3 = &var_14h;\n                goto code_r0x00a0dc2a;\n            }\n            pcVar8 = \"wchar_t\";\n        }\n        goto code_r0x00a0dcd9;\n    }\n    // switch table (11 cases) at 0xa0de1f\n    switch(uVar7) {\n    case 0x43:\n    case 0x44:\n    case 0x45:\n        pcVar8 = \"char\";\n        break;\n    case 0x46:\n    case 0x47:\n        pcVar8 = \"short\";\n        break;\n    case 0x48:\n    case 0x49:\n        pcVar8 = 0xa3381c;\n        break;\n    case 0x4a:\n    case 0x4b:\n        pcVar8 = \"long\";\n        break;\n    case 0x4c:\ncode_r0x00a0dcea:\n        puVar3 = &var_24h;\ncode_r0x00a0dc2a:\n        *0xf13e34 = *0xf13e34 + -1;\n        piVar4 = fcn.00a0bcaf(puVar3);\n        var_8h = piVar4[1];\n        var_ch = *piVar4;\n        if (var_ch == 0) {\n            *arg_8h = 0;\n            arg_8h[1] = var_8h;\n            return arg_8h;\n        }\n        goto code_r0x00a0dd15;\n    case 0x4d:\n        pcVar8 = \"float\";\n        break;\n    default:\ncode_r0x00a0dcff:\n        fcn.00a0a1e3(\"double\");\ncode_r0x00a0dd0c:\n        if (uVar6 != 0xffffffff) {\ncode_r0x00a0dc61:\n            var_14h = *arg_ch;\n            var_8h = var_8h & 0xffff0000;\n            var_10h = arg_ch[1];\n            var_ch = 0;\n            if (uVar6 != 0xfffffffe) {\n                if (*arg_ch == 0) {\n                    if ((uVar6 & 1) == 0) {\n                        if ((uVar6 & 2) != 0) {\n                            fcn.00a0a031(\"volatile\");\n                        }\n                    }\n                    else {\n                        fcn.00a0a031(\"const\");\n                        if ((uVar6 & 2) != 0) {\n                            fcn.00a0a1e3(\" volatile\");\n                        }\n                    }\n                }\n                fcn.00a0d900(arg_8h, &var_ch, &var_14h);\n                return arg_8h;\n            }\n            var_10h = var_10h | 0x800;\n            fcn.00a0d807(&var_1ch, &var_ch, &var_14h, 0);\n            if ((var_18h & 0x800) == 0) {\n                fcn.00a0a1e3(0xa33290);\n            }\n            *arg_8h = var_1ch;\n            var_8h = var_18h;\n            goto code_r0x00a0ddb4;\n        }\n        goto code_r0x00a0dd15;\n    }\ncode_r0x00a0dcd9:\n    fcn.00a0a031(pcVar8);\ncode_r0x00a0dd15:\n    if (uVar7 == 0x43) {\n        pcVar8 = \"signed \";\n        puVar3 = &var_14h;\ncode_r0x00a0dd75:\n        piVar4 = fcn.00a0a3e5(puVar3, pcVar8, &var_ch);\n        var_ch = *piVar4;\n        var_8h = piVar4[1];\n    }\n    else {\n        if ((((uVar7 == 0x45) || (uVar7 == 0x47)) || (uVar7 == 0x49)) || (uVar7 == 0x4b)) {\n            pcVar8 = \"unsigned \";\n            puVar3 = &var_1ch;\n            goto code_r0x00a0dd75;\n        }\n        if ((uVar7 == 0x5f) &&\n           (((var_1h == 0x45 || (var_1h == 0x47)) || ((var_1h == 0x49 || ((var_1h == 0x4b || (var_1h == 0x4d)))))))) {\n            pcVar8 = \"unsigned \";\n            puVar3 = &var_24h;\n            goto code_r0x00a0dd75;\n        }\n    }\n    if (*arg_ch != 0) {\n        uVar5 = fcn.00a0a39d(&var_24h, 0x20, arg_ch);\n        fcn.00a09f5a(uVar5);\n    }\n    *arg_8h = var_ch;\ncode_r0x00a0ddb4:\n    arg_8h[1] = var_8h;\n    return arg_8h;\n}\n",
        "token_count": 2191
    },
    "00a150ab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a150ab(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3a370 ^ &stack0xfffffffc;\n    fcn.009f747e(arg_10h);\n    var_14h = fcn.00a1c096(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1af62(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a15104:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a15144;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a15136:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a15144;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a15136;\n        goto code_r0x00a15104;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a15144:\n    fcn.009f6c53(unaff_EBX);\n    return;\n}\n",
        "token_count": 506
    },
    "00a1522a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a1522a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3a370 ^ &stack0xfffffffc;\n    fcn.009f747e(arg_10h);\n    var_14h = fcn.00a1c096(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1b4a6(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a15283:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a152c3;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a152b5:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a152c3;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a152b5;\n        goto code_r0x00a15283;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a152c3:\n    fcn.009f6c53(unaff_EBX);\n    return;\n}\n",
        "token_count": 514
    },
    "00a157cb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00a157cb(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.009fbee0();\n    var_4h = 0;\n    if (*0xf13e98 == 0) {\n        iVar2 = (**0xf16404)(\"USER32.DLL\");\n        pcVar4 = *0xf16360;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0xf16360)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xf13e98 = fcn.009fbe6e(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0xf13e9c = fcn.009fbe6e(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0xf13ea0 = fcn.009fbe6e(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0xf13ea8 = fcn.009fbe6e(uVar3);\n        if (*0xf13ea8 != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0xf13ea4 = fcn.009fbe6e(uVar3);\n        }\n    }\n    if ((*0xf13ea4 != iVar1) && (*0xf13ea8 != iVar1)) {\n        pcVar4 = fcn.009fbee9(*0xf13ea4);\n        pcVar5 = fcn.009fbee9(*0xf13ea8);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x00a1590d;\n        }\n    }\n    if ((((*0xf13e9c != iVar1) && (pcVar4 = fcn.009fbee9(*0xf13e9c),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xf13ea0 != iVar1 && (pcVar4 = fcn.009fbee9(*0xf13ea0),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x00a1590d:\n    pcVar4 = fcn.009fbee9(*0xf13e98);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 811
    },
    "00a1af62": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1af62(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1b463;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = str.5_v_[0] + L'\\xffffffff';\n        iVar4 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        uVar9 = str.5_v_[0] & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1b097;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1b09e;\ncode_r0x00a1b097:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1b09e:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1b0ac;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1b0ac:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3b690 - str.5_v_[0]) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3b690 < iVar12) {\n                if (iVar12 < *0xa3b68c) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + str.5_v_[3];\n                    iVar4 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = str.5_v_[3] + *0xa3b68c;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1b463;\n            }\n            var_10h = *0xa3b690 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = str.5_v_[0] + L'\\xffffffff';\n            iVar12 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar10 = str.5_v_[0] & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1b24f;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1b24f:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = str.5_v_[1] + L'\\x01';\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1b463:\n    var_20h = iVar12 << (0x1fU - str.5_v_[1] & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3684
    },
    "00a1b4a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1b4a6(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1b9a7;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0xa3b6ac - 1;\n        iVar4 = *0xa3b6ac + (*0xa3b6ac >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0xa3b6ac & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1b5db;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1b5e2;\ncode_r0x00a1b5db:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1b5e2:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1b5f0;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1b5f0:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3b6a8 - *0xa3b6ac) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3b6a8 < iVar12) {\n                if (iVar12 < *0xa3b6a4) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0xa3b6b8;\n                    iVar4 = *0xa3b6b0 + (*0xa3b6b0 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3b6b0 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0xa3b6b0 + (*0xa3b6b0 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3b6b0 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0xa3b6b8 + *0xa3b6a4;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1b9a7;\n            }\n            var_10h = *0xa3b6a8 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0xa3b6ac - 1;\n            iVar12 = *0xa3b6ac + (*0xa3b6ac >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0xa3b6ac & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1b793;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1b793:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0xa3b6b0 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1b9a7:\n    var_20h = iVar12 << (0x1fU - *0xa3b6b0 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0xa3b6b4 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0xa3b6b4 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3711
    },
    "00401096": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00401096(uint param_1, uint8_t param_2)\n\n{\n    fcn.00401073();\n    if ((param_2 & 1) != 0) {\n        fcn.009f63c5(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 69
    },
    "004010fa": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004010fa(uint param_1)\n\n{\n    uint32_t unaff_ESI;\n    \n    fcn.004010be(1, 0);\n    if ((unaff_ESI & 1) != 0) {\n        fcn.009f63c5(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 77
    },
    "009f3d62": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.009f3d62(int32_t *arg_8h, int32_t arg_ch, uint noname_2, int32_t arg_14h, uint noname_4, uint noname_5, \n            uint noname_6, uint32_t arg_24h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    \n    arg_14h = arg_14h + arg_ch;\n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar4 = arg_14h;\n    if (arg_14h != *0xa31238) {\n        iVar4 = *0xa31238;\n        if (((arg_24h & 1) == 0) || (**(in_ECX + 0x20) == 0)) {\n            if (((arg_24h & 2) != 0) &&\n               (((uVar1 = **(in_ECX + 0x24),  uVar1 != 0 && (-1 < arg_14h)) &&\n                (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))))) {\n                iVar4 = (**(in_ECX + 0x10) - uVar1) + arg_14h;\n                **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar4;\n                **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar4;\n                iVar4 = arg_14h;\n            }\n        }\n        else if ((-1 < arg_14h) && (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar4 = (**(in_ECX + 0x10) - **(in_ECX + 0x20)) + arg_14h;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar4;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar4;\n            iVar4 = arg_14h;\n            if ((arg_24h & 2) != 0) {\n                iVar2 = **(in_ECX + 0x24);\n                if (iVar2 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar3 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar3 + iVar2) - iVar4;\n                    iVar4 = arg_14h;\n                }\n            }\n        }\n    }\n    *arg_8h = iVar4;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 747
    },
    "00401276": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.00401276(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if ((param_1 & 1) == 0) {\n        uVar1 = 4;\n    }\n    if ((param_1 & 2) == 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((param_1 & 8) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((param_1 & 4) != 0) {\n        uVar1 = uVar1 | 0x10;\n    }\n    return uVar1;\n}\n",
        "token_count": 156
    },
    "00401307": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401307(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint var_94h;\n    uint var_20h;\n    uint var_4h;\n    \n    var_4h = 0;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar1 = fcn.009f64d3(0x18);\n        if (iVar1 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            fcn.0040141f(*arg_ch + 0x18);\n            uVar2 = fcn.00401320(&var_20h, 0);\n            iVar3 = fcn.00401456(uVar2);\n        }\n        *arg_8h = iVar3;\n        if (iVar1 != 0) {\n            fcn.00401069();\n            fcn.004012e4(1, 0);\n        }\n    }\n    return 2;\n}\n",
        "token_count": 243
    },
    "00401438": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401438(int32_t param_1)\n\n{\n    if ((*(param_1 + 0x40) & 1) != 0) {\n        fcn.009f63c5(**(param_1 + 0x10));\n    }\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    **(param_1 + 0x14) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    *(param_1 + 0x40) = *(param_1 + 0x40) & 0xfffffffe;\n    *(param_1 + 0x3c) = 0;\n    return;\n}\n",
        "token_count": 206
    },
    "00a0e53e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nunkbyte5 __fastcall fcn.00a0e53e(uint param_1, uchar param_2)\n\n{\n    uint in_EAX;\n    int32_t unaff_EBP;\n    float10 in_ST0;\n    float10 fVar1;\n    uint unaff_retaddr;\n    uint var_9fh;\n    uint var_90h;\n    \n    *(unaff_EBP + -0xa0) = (*0xa3b1fe < ABS(in_ST0)) << 8 | (*0xa3b1fe == ABS(in_ST0)) << 0xe;\n    if ((*(unaff_EBP + -0x9f) & 0x41) == 0) {\n        fVar1 = ROUND(in_ST0);\n        *(unaff_EBP + -0xa0) = (fVar1 < 0) << 8 | (fVar1 == 0) << 0xe;\n        fVar1 = in_ST0 - fVar1;\n        *(unaff_EBP + -0xa0) = (fVar1 < 0) << 8 | (fVar1 == 0) << 0xe;\n        f2xm1(ABS(fVar1));\n        return CONCAT14(*(unaff_EBP + -0x9f), in_EAX);\n    }\n    *(unaff_EBP + -0xa0) = (in_ST0 < 0) << 8 | (in_ST0 == 0) << 0xe;\n    if ((*(unaff_EBP + -0x9f) & 1) == 0) {\n        return CONCAT14(param_2, unaff_retaddr);\n    }\n    *(unaff_EBP + -0x90) = 4;\n    return CONCAT14(param_2, unaff_retaddr);\n}\n",
        "token_count": 390
    },
    "00a12adc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a12adc(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa361b0, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.009f9edf();\n        *puVar2 = 0;\n        puVar2 = fcn.009f9ecc();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xf13f7c)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xf13fc0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00a18aee(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.009f9ecc();\n                    *puVar2 = 9;\n                    puVar2 = fcn.009f9edf();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00a123a9(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.00a12bae(0xa361b0);\n                goto code_r0x00a12ba8;\n            }\n        }\n        puVar2 = fcn.009f9edf();\n        *puVar2 = 0;\n        puVar2 = fcn.009f9ecc();\n        *puVar2 = 9;\n        fcn.009f6793(0, 0, 0, 0, 0);\n    }\ncode_r0x00a12ba8:\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 642
    },
    "00401078": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401078(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint arg_ch;\n    uint in_stack_fffff738;\n    uchar auStack2124 [12];\n    uchar auStack2112 [4];\n    uchar auStack2108 [4];\n    uint uStack2104;\n    uint uStack2100;\n    uint uStack2096;\n    uint uStack2092;\n    uint uStack2088;\n    int32_t iStack2072;\n    int32_t iStack2060;\n    uchar auStack2056 [1024];\n    uchar auStack1032 [1024];\n    uint32_t uStack8;\n    \n    uStack8 = *0xa3a370 ^ auStack2124;\n    uStack2088 = 0x3e6;\n    iVar4 = 0;\n    if (iStack2072 == 0x23c91b) {\n        (**0xf16284)(0, 0, 0, 0, 0, 0, 0, 0, auStack2112);\n        (**0xf16278)(0);\n        (**0xf1627c)(auStack2056, auStack2108);\n        (**0xf162c8)(0, 0, 0, 0, auStack1032, 0);\n        (**0xf162c4)(0, 0, 0);\n        (**0xf162d8)(0, 0, 0, 0, &uStack2100);\n        (**0xf162bc)(0, 0);\n        (**0xf162b8)(0, 0, 0, 0);\n        fcn.009f6ff8(0xa3c010, \"%s %c\", \"fusilupagifasixukumocawabovovu masifodeyajuduroducisike\");\n        in_stack_fffff738 = 1;\n        arg_ch = 3;\n        fcn.0040146f(3, 1);\n        fcn.004011f4();\n        fcn.009f6ece(L\"mijerinimetezosulikogiyukohopobo cofowase\", arg_ch);\n        fcn.009f6e64(0, 0);\n        fcn.009f6d7a(*0xa31168, *0xa31168 >> 0x20);\n        fcn.00401492();\n        fcn.009f63c5();\n        fcn.00401393();\n    }\n    iVar3 = 0;\n    while ((((**0xf162b4)(),  pcVar1 = *0xf162c0,  iVar3 < 0xe60ada || (iStack2072 == 'i')) ||\n           (iStack2060 == 0x16838de3))) {\n        iVar3 = iVar3 + 1;\n        if (0xe4a4b34 < iVar3) {\ncode_r0x009f2c50:\n            iVar3 = 0;\n            do {\n                if (iVar3 == 0x516c56) {\n                    *0xe1e054 = *0xa37414;\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x55bd1c);\n            *0xe1e054 = *0xe1e054 + 0x638b9;\n            *0xe199d0 = (**0xf162c0)(0, *0xe1e054);\n            *0xe199d0 = (*pcVar1)(0, *0xe1e054);\n            *0xe44aa0 = *0xa37008;\n            uVar2 = 0;\n            if (*0xe1e054 != 0) {\n                do {\n                    *(uVar2 + *0xe199d0) = *(*0xe44aa0 + 0x638b9 + uVar2);\n                    uVar2 = uVar2 + 1;\n                } while (uVar2 < *0xe1e054);\n            }\n            fcn.00401334(0xe199d0, 0xe1e054);\n            uStack2092 = 0x40;\n            do {\n                if (iVar4 == 0x658c4) {\n                    (**0xf162cc)(*0xe199d0, *0xe1e054);\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x667c97);\n            fcn.0040140b(*0xe199d0, *0xe1e054, 0xa37010);\n            fcn.009f6c53(in_stack_fffff738);\n            return;\n        }\n    }\n    *0xe1e038 = 0x9251f4de;\n    if (*0xe1e054 == 0x187) {\n        *0xe1a4c0 = 0;\n        uStack2104 = *0xe1a4c0;\n    }\n    *0xe1a490 = 0xf5dec666;\n    uStack2100 = *0xe1e038;\n    uStack2096 = *0xe1a490;\n    goto code_r0x009f2c50;\n}\n",
        "token_count": 1174
    },
    "00401334": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.00401334(int32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uStack156;\n    \n    *0xe1b88f = 0x32;\n    *0xe16b20 = 0;\n    *0xe1b88b = 0x6e;\n    *0xe16b80 = 0;\n    *0xe1b889 = 0x65;\n    *0xe199d4 = 0xf3f9f346;\n    *0xe1b891 = 100;\n    *0xe18718 = 0;\n    *0xe1871c = 0;\n    *0xe1b893 = 0x6c;\n    *0xe1a460 = 0;\n    *0xe1b88e = 0x33;\n    *0xe16b7c = 0xd57c7618;\n    *0xe1b890 = 0x2e;\n    *0xe16b40 = 0xba248176;\n    *0xe16b44 = 0xffffffff;\n    *0xe1b892 = 0x6c;\n    *0xe1a4a0 = 0;\n    *0xe1a4a4 = 0;\n    *0xe1b888 = 0x6b;\n    *0xe1a450 = 0;\n    *0xe1b88d = 0x6c;\n    *0xe1a42c = 0xdafc2b0c;\n    *0xe1b88c = 0x65;\n    *0xe199f0 = 0xbb6aa30c;\n    *0xe1b88a = 0x72;\n    *0xe1a458 = 0;\n    *0xe1a45c = 0;\n    *0xe1b894 = 0;\n    *0xe1a4c4 = (**0xf162d0)(0xe1b888);\n    *0xe1a4d2 = 0x6f;\n    *0xa4a868 = 0xb756ec50;\n    *0xe1a4d5 = 0x6c;\n    *0xe44ab8 = 0;\n    *0xe1a4d6 = 0x41;\n    *0xa4a864 = 0;\n    *0xe1a4d3 = 0x62;\n    *0xe16b54 = 0x8a2a9718;\n    *0xe1a4d9 = 0x6f;\n    *0xe16b88 = 0;\n    *0xe16b8c = 0;\n    *0xe1a4d0 = 0x47;\n    *0xe1a47c = 0xd855589a;\n    *0xe1a4d1 = 0x6c;\n    *0xe199e0 = 0;\n    *0xe199e4 = 0;\n    *0xe1a4d8 = 0x6c;\n    *0xe1e048 = 0;\n    *0xe1e04c = 0;\n    *0xe1a4d4 = 0x61;\n    *0xe1a430 = 0;\n    *0xe1a434 = 0;\n    *0xe1a4da = 99;\n    *0xe16b50 = 0;\n    *0xe1a4d7 = 0x6c;\n    *0xe1a418 = 0;\n    *0xe1a41c = 0;\n    *0xe1a4db = 0;\n    iVar4 = (**0xf162d4)(0, *param_2);\n    uVar6 = 0;\n    uStack156 = 0;\n    if (*param_2 != 0) {\n        do {\n            puVar5 = *param_1 + uStack156;\n            uVar1 = puVar5[3];\n            uVar2 = puVar5[1];\n            uVar3 = puVar5[2];\n            *(uVar6 + iVar4) = *puVar5 | (uVar1 & 0x30) << 2;\n            *(uVar6 + 1 + iVar4) = uVar2 | (uVar1 & 0xc) << 4;\n            *0xe1a420 = 0xb6f4c84c;\n            if (*0xe1e054 == 0x34e) {\n                (**0xf162dc)(0, 0, 0);\n                (**0xf16280)(0, 0, 0);\n                *0xe199e8 = 0;\n                *0xe199ec = 0;\n            }\n            *0xa4a860 = 0xfaace874;\n            *(uVar6 + 2 + iVar4) = uVar3 | uVar1 << 6;\n            *0xe16b60 = 0xe0cdb12a;\n            *0xe16b64 = 0xffffffff;\n            if (*0xe1e054 == 0x390) {\n                *0xe44abc = 0x83df3254;\n            }\n            *0xe16b28 = 0xac276670;\n            uStack156 = uStack156 + 4;\n            uVar6 = uVar6 + 3;\n        } while (uStack156 < *param_2);\n    }\n    *param_1 = iVar4;\n    *param_2 = uVar6;\n    return;\n}\n",
        "token_count": 1280
    },
    "00a201f0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.00a201f0(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 592
    },
    "004012a3": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004012a3(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f6c95(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 0xf;\n    if (uVar4 == 0xffffffff) {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    else {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= -uVar2 - 2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.0040136b(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 0x10) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.00401348(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004012e4(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401398(*(unaff_EBP + 0xc));\n    fcn.009f6d3a();\n    return;\n}\n",
        "token_count": 595
    },
    "00401294": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401294(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *extraout_EDX;\n    int32_t iVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if (0 < arg_ch) {\n        do {\n            uVar1 = fcn.00401339();\n            *extraout_EDX = *extraout_EDX ^ uVar1;\n            *0xe1e030 = 0xfc7352ee;\n            *0xe1e034 = 0xffffffff;\n            if (arg_ch == 0x649) {\n                *0xe44a98 = 0;\n                *0xe44a9c = 0;\n            }\n            *0xa4a840 = 0xaa6d9b4e;\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "00a0e657": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00a0e657(uint param_1, int32_t param_2)\n\n{\n    float10 fVar1;\n    char cVar2;\n    uint8_t uVar3;\n    ushort uVar4;\n    int32_t unaff_EBP;\n    float10 in_ST0;\n    float10 in_ST1;\n    uint var_a2h;\n    uint var_94h;\n    uint var_90h;\n    \n    if (*(param_2 + 0xe) == '\\x05') {\n        uVar4 = CONCAT31(*(unaff_EBP + -0xa4) >> 8 & 0xfe | 2, 0x3f);\n    }\n    else {\n        uVar4 = 0x133f;\n    }\n    *(unaff_EBP + -0xa2) = uVar4;\n    fVar1 = 0;\n    *(unaff_EBP + -0x94) = param_2;\n    *(unaff_EBP + -0xa0) = (in_ST0 < fVar1) << 9 | (in_ST0 != fVar1) << 10 | (in_ST0 == fVar1) << 0xe;\n    *(unaff_EBP + -0x90) = 0;\n    fVar1 = 0;\n    *(unaff_EBP + -0xa0) = (in_ST1 < fVar1) << 9 | (in_ST1 != fVar1) << 10 | (in_ST1 == fVar1) << 0xe;\n    uVar3 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    cVar2 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    // WARNING: Could not recover jumptable at 0x00a0e6e1. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(param_2 + (*(((cVar2 << 1 | cVar2 < '\\0') & 0xf) + 0xa3b25c) |\n                  *(((uVar3 & 7) << 1 | uVar3 < '\\0') + 0xa3b25c) << 2) + 0x10))();\n    return;\n}\n",
        "token_count": 509
    },
    "0040140b": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040140b(uint arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe16b74 = *arg_10h;\n    *0xe1a4b0 = 0xd15e210a;\n    *0xe1a4b4 = 0xffffffff;\n    if (*0xe1e054 == 0x6dc) {\n        *0xe44a90 = 0xe2eeb842;\n        *0xe44a94 = 0xffffffff;\n    }\n    *0xa4a844 = 0xd885057e;\n    fcn.00401294(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 170
    },
    "00a0f319": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a0f319(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != unaff_ESI) {\n        if (*(unaff_EBP + -0x24) != unaff_ESI) {\n            puVar1 = *((*(unaff_EBP + -0x1c) >> 5) * 4 + 0xf13fc0) + 4 + (*(unaff_EBP + -0x1c) & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a18b8e(*(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 209
    },
    "00a0f3f1": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a0f3f1(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0xf13fc0) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a18b8e(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 195
    },
    "00a18e3d": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a18e3d(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0xf13fc0) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.00a18b8e(unaff_ESI);\n    return;\n}\n",
        "token_count": 162
    },
    "00401023": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401023(int32_t param_1, int32_t param_2)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.004010fa();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "00401055": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401055(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040110e(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "009f5594": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f5594(int32_t *param_1)\n\n{\n    if (*param_1 < 4) {\n        fcn.009f5f4e(*param_1 * 0x18 + 0xf13350);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "004010b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.004010b9(code **param_1, int32_t param_2)\n\n{\n    fcn.009f60a7(param_2);\n    *param_1 = vtable.std::runtime_error.0;\n    fcn.0040141f(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 78
    },
    "004010ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004010ff(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa31128;\n        in_ECX[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_istream_char__struct_std::char_traits_char__.0;\n    in_ECX[1] = 0;\n    fcn.004011b3(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 161
    },
    "0040110e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040110e(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f5fa9(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 69
    },
    "00401172": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401172(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.0040130c(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.004012c1(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 0x10) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.00401348(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401398(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 0x10) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.0040138e(in_ECX, arg_8h - iVar2, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 275
    },
    "0040120d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040120d(int32_t param_1, uint param_2, uint param_3)\n\n{\n    fcn.0040146a(param_2, param_3, param_1 + 8);\n    return;\n}\n",
        "token_count": 57
    },
    "00401212": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.00401212(code **param_1, int32_t param_2)\n\n{\n    fcn.009f60a7(param_2);\n    *param_1 = vtable.std::logic_error.0;\n    fcn.0040141f(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 77
    },
    "0040125d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040125d(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t in_ECX;\n    uint var_10h;\n    \n    puVar1 = fcn.004010e1(&var_10h);\n    *(in_ECX + 8) = *puVar1;\n    *(in_ECX + 0xc) = puVar1[1];\n    *(in_ECX + 0x10) = puVar1[2];\n    *(in_ECX + 0x14) = puVar1[3];\n    return;\n}\n",
        "token_count": 131
    },
    "00401280": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401280(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 8) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2 * 2) = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "009f384e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f384e(int32_t arg_8h, int32_t arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    if (arg_14h < arg_ch - arg_8h) {\n        fcn.009f67b9();\n    }\n    fcn.009f5fa9(arg_10h, arg_14h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 109
    },
    "00401339": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint32_t fcn.00401339(void)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe16b74 = *0xe16b74 * 0x343fd + 0x269ec3;\n    return *0xe16b74 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 82
    },
    "00401348": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401348(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f5fa9(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "009f38b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f38b4(int32_t arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h, uint32_t arg_18h)\n\n{\n    if (arg_18h < arg_ch - arg_8h) {\n        fcn.009f67b9();\n    }\n    fcn.009f5fa9(arg_14h, arg_18h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 116
    },
    "0040138e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040138e(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f5e39();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.00401230(arg_14h + arg_ch, 0xffffffff);\n        fcn.00401230(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.004012c1(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 0x10) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 0x10) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.00401348(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch, arg_14h);\n            fcn.00401398(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 398
    },
    "00401398": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401398(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 0x10) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2) = 0;\n    return;\n}\n",
        "token_count": 111
    },
    "004013de": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004013de(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f645b(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "0040146a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040146a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401023(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 60
    },
    "009f3418": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f3418(uint noname_0, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa30f8c;\n        in_ECX[1] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n    if (arg_ch != '\\0') {\n        fcn.009f5b25(*(*in_ECX + 4) + in_ECX);\n    }\n    return;\n}\n",
        "token_count": 172
    },
    "009f55f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f55f3(uint32_t arg_8h)\n\n{\n    fcn.009f5f3e((arg_8h & 3) * 0x18 + 0xf13350);\n    return;\n}\n",
        "token_count": 56
    },
    "009f560f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f560f(uint32_t arg_8h)\n\n{\n    fcn.009f5f4e((arg_8h & 3) * 0x18 + 0xf13350);\n    return;\n}\n",
        "token_count": 55
    },
    "009f6d7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6d7a(uint arg_8h, uint arg_ch)\n\n{\n    uint var_2c8h;\n    \n    fcn.009fdbe4(arg_8h, arg_ch);\n    fcn.00a0e5f0();\n    fcn.009fda63();\n    return;\n}\n",
        "token_count": 75
    },
    "009f6e64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6e64(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009f6da0(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 49
    },
    "009f6ece": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009f6ece(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35a48, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.009fdc20();\n        fcn.009fdd38(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.009fdc20();\n        arg_8h_00 = fcn.009fe32b(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.009fdc20();\n        uVar4 = fcn.009fe4ca(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.009fdc20();\n        fcn.009fe3c7(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009f6f6a();\n    }\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 463
    },
    "009f6f6a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009f6f6a(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fdc20();\n    fcn.009fdda6(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 56
    },
    "009f6f7d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6f7d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff0f2(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "009f6f96": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6f96(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff10f(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f6faf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6faf(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009ff10f(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "009f6fc7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6fc7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff12c(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f6fe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6fe0(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009ff12c(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "009f7111": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7111(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00a003c7(arg_8h, arg_ch, arg_10h, 0, &arg_14h);\n    return;\n}\n",
        "token_count": 69
    },
    "009f712f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f712f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a003c7(arg_8h, arg_ch, arg_10h, arg_14h, &arg_18h);\n    return;\n}\n",
        "token_count": 77
    },
    "009f7178": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7178(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0005d(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f7191": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7191(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a00096(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009fda1b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fda1b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_2c8h;\n    uint var_8fh;\n    \n    fcn.009fdbe4(arg_8h, arg_ch);\n    fcn.009fdbe4(arg_10h, arg_14h);\n    fcn.00a0e657();\n    fcn.009fda63();\n    return;\n}\n",
        "token_count": 109
    },
    "009ff062": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009ff062(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35ea8, 0x10);\n    iVar1 = fcn.009fdc20();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009f9ecc();\n        *puVar2 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009fdcf7(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.009fe32b(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.009fe3c7(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009ff0ea();\n    }\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 442
    },
    "009ff0f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff0f2(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff062(fcn.009fe4ca, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 61
    },
    "009ff10f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff10f(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff062(fcn.00a101ad, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 60
    },
    "009ff12c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff12c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009ff062(fcn.00a10f4b, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "009ff149": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff149(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009ff062(fcn.009fe4ca, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 51
    },
    "009ff165": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff165(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009ff062(fcn.00a101ad, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 51
    },
    "009ff181": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff181(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009ff062(fcn.00a10f4b, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 53
    },
    "00a00041": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a00041(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fffea(fcn.009ff3ba, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 52
    },
    "00a0005d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0005d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fffea(fcn.009ff3ba, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 61
    },
    "00a0007a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0007a(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fffea(fcn.00a12ff3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00a00096": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a00096(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fffea(fcn.00a12ff3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 61
    },
    "00a0017f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a0017f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a000b3(fcn.009ff3ba, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 111
    },
    "00a001a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a001a8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a000b3(fcn.009ff3ba, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 119
    },
    "00a0039e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a0039e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a000b3(fcn.00a12ff3, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 112
    },
    "00a003c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a003c7(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a000b3(fcn.00a12ff3, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 120
    },
    "00a01126": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a01126(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf13974 == 0)) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf13974;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 148
    },
    "00a01162": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a01162(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf13970 == 0)) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf13970;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 148
    },
    "00a0134f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0134f(uint arg_8h)\n\n{\n    fcn.00a01223(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "00a01f21": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a01f21(void)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = 0xa351fc;\n    do {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n        ppcVar1 = ppcVar1 + 1;\n    } while (ppcVar1 < 0xa352fc);\n    return;\n}\n",
        "token_count": 90
    },
    "00a074cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.00a074cd(int32_t *arg_8h, int32_t *arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg_10h == 0) {\n        return 0;\n    }\n    if (arg_10h == 1) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n    }\n    else if (arg_10h == 2) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n    }\n    else if (arg_10h == 3) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n    }\n    else {\n        if (arg_10h != 4) {\ncode_r0x00a0797f:\n    // switch table (32 cases) at 0xa08acd\n            switch(arg_10h) {\n            case 0:\n                break;\n            case 1:\n                goto code_r0x00a08160;\n            case 2:\n                goto code_r0x00a0856c;\n            case 3:\n                goto code_r0x00a0898d;\n            case 4:\n                goto code_r0x00a07cf1;\n            case 5:\n                goto code_r0x00a080d1;\n            case 6:\n                goto code_r0x00a084dd;\n            case 7:\n                goto code_r0x00a088fe;\n            case 8:\n                goto code_r0x00a07c62;\n            case 9:\n                goto code_r0x00a08041;\n            case 10:\n                goto code_r0x00a0844d;\n            case 0xb:\n                goto code_r0x00a0886f;\n            case 0xc:\n                goto code_r0x00a07bd2;\n            case 0xd:\n                goto code_r0x00a07fb2;\n            case 0xe:\n                goto code_r0x00a083be;\n            case 0xf:\n                goto code_r0x00a087df;\n            case 0x10:\n                goto code_r0x00a07b43;\n            case 0x11:\n                goto code_r0x00a07f23;\n            case 0x12:\n                goto code_r0x00a0832f;\n            case 0x13:\n                goto code_r0x00a08750;\n            case 0x14:\n                goto code_r0x00a07ab4;\n            case 0x15:\n                goto code_r0x00a07e94;\n            case 0x16:\n                goto code_r0x00a082a0;\n            case 0x17:\n                goto code_r0x00a086c1;\n            case 0x1a:\n                goto code_r0x00a08211;\n            case 0x1b:\n                goto code_r0x00a08632;\n            case 0x1c:\n                uVar1 = *(arg_8h + arg_10h + -0x1c);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1c)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x19) - *(arg_ch + arg_10h + -0x19);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x18:\n                uVar1 = *(arg_8h + arg_10h + -0x18);\n                if (uVar1 == *(arg_ch + arg_10h + -0x18)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x15) - *(arg_ch + arg_10h + -0x15);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07ab4:\n                uVar1 = *(arg_8h + arg_10h + -0x14);\n                if (uVar1 == *(arg_ch + arg_10h + -0x14)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x11) - *(arg_ch + arg_10h + -0x11);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07b43:\n                uVar1 = *(arg_8h + arg_10h + -0x10);\n                if (uVar1 == *(arg_ch + arg_10h + -0x10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xd) - *(arg_ch + arg_10h + -0xd);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07bd2:\n                if (*(arg_8h + arg_10h + -0xc) == *(arg_ch + arg_10h + -0xc)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -9) - *(arg_ch + arg_10h + -9);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07c62:\n                uVar1 = *(arg_8h + arg_10h + -8);\n                if (uVar1 == *(arg_ch + arg_10h + -8)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -8);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -5) - *(arg_ch + arg_10h + -5);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07cf1:\n                uVar1 = *(arg_8h + arg_10h + -4);\n                if (uVar1 == *(arg_ch + arg_10h + -4)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -4);\n                    if ((uVar1 == uVar2) || (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 == 0)) {\n                        uVar2 = *(arg_8h + arg_10h + -3);\n                        uVar1 = *(arg_ch + arg_10h + -3);\n                        if ((uVar2 == uVar1) || (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0))\n                        {\n                            uVar2 = *(arg_8h + arg_10h + -2);\n                            uVar1 = *(arg_ch + arg_10h + -2);\n                            if (((uVar2 == uVar1) ||\n                                (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0)) &&\n                               (iVar3 = *(arg_8h + arg_10h + -1) - *(arg_ch + arg_10h + -1),  iVar3 != 0)) {\n                                iVar3 = (0 < iVar3) * 2 + -1;\n                            }\n                        }\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n                break;\n            case 0x1d:\n                uVar1 = *(arg_8h + arg_10h + -0x1d);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1d)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1a) - *(arg_ch + arg_10h + -0x1a);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x19:\n                uVar1 = *(arg_8h + arg_10h + -0x19);\n                if (uVar1 == *(arg_ch + arg_10h + -0x19)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x16) - *(arg_ch + arg_10h + -0x16);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07e94:\n                uVar1 = *(arg_8h + arg_10h + -0x15);\n                if (uVar1 == *(arg_ch + arg_10h + -0x15)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x12) - *(arg_ch + arg_10h + -0x12);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07f23:\n                uVar1 = *(arg_8h + arg_10h + -0x11);\n                if (uVar1 == *(arg_ch + arg_10h + -0x11)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xe) - *(arg_ch + arg_10h + -0xe);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a07fb2:\n                uVar1 = *(arg_8h + arg_10h + -0xd);\n                if (uVar1 == *(arg_ch + arg_10h + -0xd)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -10) - *(arg_ch + arg_10h + -10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a08041:\n                if (*(arg_8h + arg_10h + -9) == *(arg_ch + arg_10h + -9)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -6) - *(arg_ch + arg_10h + -6);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a080d1:\n                uVar1 = *(arg_8h + arg_10h + -5);\n                if (uVar1 == *(arg_ch + arg_10h + -5)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -5);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -3);\n                    uVar1 = *(arg_ch + arg_10h + -3);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -2) - *(arg_ch + arg_10h + -2);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\njoined_r0x00a0815a:\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a08160:\n                uVar2 = *(arg_ch + arg_10h + -1);\n                uVar1 = *(arg_8h + arg_10h + -1);\n                if (uVar1 == uVar2) {\n                    return 0;\n                }\n                return (0 < uVar1 - uVar2) * 2 + -1;\n            case 0x1e:\n                uVar1 = *(arg_8h + arg_10h + -0x1e);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1e)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1b) - *(arg_ch + arg_10h + -0x1b);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a08211:\n                uVar1 = *(arg_8h + arg_10h + -0x1a);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1a)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x17) - *(arg_ch + arg_10h + -0x17);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a082a0:\n                uVar1 = *(arg_8h + arg_10h + -0x16);\n                if (uVar1 == *(arg_ch + arg_10h + -0x16)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x13) - *(arg_ch + arg_10h + -0x13);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0832f:\n                uVar1 = *(arg_8h + arg_10h + -0x12);\n                if (uVar1 == *(arg_ch + arg_10h + -0x12)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xf) - *(arg_ch + arg_10h + -0xf);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a083be:\n                uVar1 = *(arg_8h + arg_10h + -0xe);\n                if (uVar1 == *(arg_ch + arg_10h + -0xe)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xb) - *(arg_ch + arg_10h + -0xb);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0844d:\n                if (*(arg_8h + arg_10h + -10) == *(arg_ch + arg_10h + -10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -7) - *(arg_ch + arg_10h + -7);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a084dd:\n                uVar1 = *(arg_8h + arg_10h + -6);\n                if (uVar1 == *(arg_ch + arg_10h + -6)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -6);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -3) - *(arg_ch + arg_10h + -3);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0856c:\n                if (*(arg_8h + arg_10h + -2) != *(arg_ch + arg_10h + -2)) {\ncode_r0x00a0857a:\n                    uVar1 = *(arg_ch + arg_10h + -2);\n                    uVar2 = *(arg_8h + arg_10h + -2);\n                    if (uVar2 == uVar1) goto code_r0x00a08160;\n                    iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1;\n                    goto joined_r0x00a0815a;\n                }\n                break;\n            case 0x1f:\n                if (*(arg_8h + arg_10h + -0x1f) == *(arg_ch + arg_10h + -0x1f)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0x1f);\n                    uVar2 = *(arg_8h + arg_10h + -0x1f);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1e);\n                    uVar1 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1c) - *(arg_ch + arg_10h + -0x1c);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a08632:\n                uVar1 = *(arg_8h + arg_10h + -0x1b);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1b)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x18) - *(arg_ch + arg_10h + -0x18);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a086c1:\n                uVar1 = *(arg_8h + arg_10h + -0x17);\n                if (uVar1 == *(arg_ch + arg_10h + -0x17)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x14) - *(arg_ch + arg_10h + -0x14);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a08750:\n                uVar1 = *(arg_8h + arg_10h + -0x13);\n                if (uVar1 == *(arg_ch + arg_10h + -0x13)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x10) - *(arg_ch + arg_10h + -0x10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a087df:\n                if (*(arg_8h + arg_10h + -0xf) == *(arg_ch + arg_10h + -0xf)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xc) - *(arg_ch + arg_10h + -0xc);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0886f:\n                uVar1 = *(arg_8h + arg_10h + -0xb);\n                if (uVar1 == *(arg_ch + arg_10h + -0xb)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -8) - *(arg_ch + arg_10h + -8);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a088fe:\n                uVar1 = *(arg_8h + arg_10h + -7);\n                if (uVar1 == *(arg_ch + arg_10h + -7)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -7);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -4) - *(arg_ch + arg_10h + -4);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0898d:\n                uVar2 = *(arg_8h + arg_10h + -3);\n                uVar1 = *(arg_ch + arg_10h + -3);\n                if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                    return iVar3;\n                }\n                goto code_r0x00a0857a;\n            default:\n                goto code_r0x00a0750d;\n            }\n            return 0;\n        }\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 3);\n        uVar2 = *(arg_ch + 3);\n    }\n    iVar3 = uVar1 - uVar2;\n    if (iVar3 != 0) {\n        iVar3 = (0 < iVar3) * 2 + -1;\n    }\n    return iVar3;\ncode_r0x00a0750d:\n    if (*arg_8h == *arg_ch) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *arg_8h;\n        uVar1 = *arg_ch;\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 3) - *(arg_ch + 3);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[1] == arg_ch[1]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 7) - *(arg_ch + 7);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[2] == arg_ch[2]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 9);\n        uVar1 = *(arg_ch + 9);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 10);\n        uVar1 = *(arg_ch + 10);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xb) - *(arg_ch + 0xb);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[3] == arg_ch[3]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 3);\n        uVar1 = *(arg_ch + 3);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xd);\n        uVar1 = *(arg_ch + 0xd);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xe);\n        uVar1 = *(arg_ch + 0xe);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xf) - *(arg_ch + 0xf);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[4] == arg_ch[4]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar1 = *(arg_ch + 4);\n        uVar2 = *(arg_8h + 4);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x11);\n        uVar1 = *(arg_ch + 0x11);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x12);\n        uVar1 = *(arg_ch + 0x12);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x13) - *(arg_ch + 0x13);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[5] == arg_ch[5]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x15);\n        uVar1 = *(arg_ch + 0x15);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x16);\n        uVar1 = *(arg_ch + 0x16);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x17) - *(arg_ch + 0x17);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[6] == arg_ch[6]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x19);\n        uVar1 = *(arg_ch + 0x19);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1a);\n        uVar1 = *(arg_ch + 0x1a);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1b) - *(arg_ch + 0x1b);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[7] == arg_ch[7]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 7);\n        uVar1 = *(arg_ch + 7);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1d);\n        uVar1 = *(arg_ch + 0x1d);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1e);\n        uVar1 = *(arg_ch + 0x1e);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1f) - *(arg_ch + 0x1f);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    arg_8h = arg_8h + 8;\n    arg_ch = arg_ch + 8;\n    arg_10h = arg_10h + -0x20;\n    goto code_r0x00a0797f;\n}\n",
        "token_count": 16527
    },
    "00a0a5a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00a0a5a3(uint *arg_8h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    char *arg_8h_00;\n    uint arg_8h_01;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = var_4h & 0xffff0000;\n    if (**0xf13e34 == '\\0') {\n        arg_8h_01 = 1;\ncode_r0x00a0a64a:\n        fcn.00a09969(arg_8h_01);\n        return arg_8h;\n    }\n    // switch table (8 cases) at 0xa0a657\n    switch(**0xf13e34) {\n    case '0':\n    case '1':\n        arg_8h_00 = \"char \";\n        break;\n    case '2':\n    case '3':\n        arg_8h_00 = \"short \";\n        break;\n    case '4':\n        goto code_r0x00a0a5f9;\n    case '5':\n        arg_8h_00 = \"int \";\n        break;\n    case '6':\n    case '7':\n        arg_8h_00 = \"long \";\n        break;\n    default:\n        arg_8h_01 = 2;\n        goto code_r0x00a0a64a;\n    }\n    fcn.00a0a031(arg_8h_00);\ncode_r0x00a0a5f9:\n    cVar1 = **0xf13e34;\n    *0xf13e34 = *0xf13e34 + 1;\n    if ((((cVar1 == '1') || (cVar1 == '3')) || (cVar1 == '5')) || (cVar1 == '7')) {\n        puVar2 = fcn.00a0a3e5(&var_10h, \"unsigned \", &var_8h);\n        var_8h = *puVar2;\n        var_4h = puVar2[1];\n    }\n    *arg_8h = var_8h;\n    arg_8h[1] = var_4h;\n    return arg_8h;\n}\n",
        "token_count": 514
    },
    "00a0f353": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a0f353(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa36130, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.00a0eb7e(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a0f3f1();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 461
    },
    "00a0f41f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a0f41f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = fcn.00a0f353(arg_8h, arg_ch, arg_10h, arg_14h, &var_4h, 0);\n    if (iVar1 != 0) {\n        return 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 126
    },
    "00a0f451": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0f451(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a0f353(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 80
    },
    "00a0fb77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a0fb77(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fdc20();\n    fcn.009fdda6(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 55
    },
    "00a0fb8a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0fb8a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19ed9(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "00a0fba3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0fba3(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19ef6(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "00a0fbbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0fbbc(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19ef6(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "00a0fbd4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0fbd4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19f13(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "00a0fbed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0fbed(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19f13(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "00a15153": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a15153(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a150ab(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 45
    },
    "00a152d2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a152d2(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1522a(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 47
    },
    "00a15ec4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a15ec4(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3b274;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a15efd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a15efd(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3b278;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "00a15f36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a15f36(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3b270;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a19ba5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a19ba5(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f9ecc();\n        *puVar1 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf13f68;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a19e49": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a19e49(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa363b8, 0x10);\n    iVar1 = fcn.009fdc20();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009f9ecc();\n        *puVar2 = 0x16;\n        fcn.009f6793(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009fdcf7(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.009fe32b(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.009fe3c7(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a19ed1();\n    }\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 445
    },
    "00a19ed9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19ed9(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19e49(fcn.009ff3ba, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a19ef6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19ef6(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19e49(fcn.00a14359, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a19f13": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19f13(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a19e49(fcn.00a12ff3, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "00a19f30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19f30(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19e49(fcn.009ff3ba, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a19f4c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19f4c(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19e49(fcn.00a14359, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "00a19f68": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a19f68(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a19e49(fcn.00a12ff3, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "009f68a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009f68a5(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.009fd5c3(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 113
    },
    "004010cd": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004010cd(int32_t param_1)\n\n{\n    *(param_1 + 0x20) = param_1 + 0x18;\n    *(param_1 + 0x24) = param_1 + 0x1c;\n    *(param_1 + 0x30) = param_1 + 0x28;\n    *(param_1 + 0x10) = param_1 + 8;\n    *(param_1 + 0x34) = param_1 + 0x2c;\n    *(param_1 + 0x14) = param_1 + 0xc;\n    *(param_1 + 0xc) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 241
    },
    "004011f4": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004011f4(int32_t param_1)\n\n{\n    fcn.00401262();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return param_1;\n}\n",
        "token_count": 80
    },
    "004011f9": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004011f9(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    *(param_1 + 0x24) = 0;\n    *(param_1 + 4) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0x201;\n    *(param_1 + 0x14) = 6;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    fcn.0040148d(0, 0);\n    iVar1 = fcn.009f64d3(4);\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.004014a6();\n    }\n    *(param_1 + 0x24) = uVar2;\n    return;\n}\n",
        "token_count": 240
    },
    "00401492": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401492(int32_t param_1)\n\n{\n    if (*(param_1 + 0xc) != 0) {\n        fcn.0040120d(*(param_1 + 0xc), *(param_1 + 0x10));\n        fcn.009f63c5(*(param_1 + 0xc));\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 129
    },
    "00a1f2e6": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00a1f2e6(void)\n\n{\n    *0xa3b75c = (**0xf163f0)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 60
    },
    "0040148d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040148d(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint *arg_8h_00;\n    int32_t in_ECX;\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    char *pcVar2;\n    uint arg_ch_00;\n    code *var_44h;\n    uint var_1ch;\n    \n    *(in_ECX + 8) = arg_8h & 0x17;\n    uVar1 = *(in_ECX + 0xc) & arg_8h & 0x17;\n    if (uVar1 != 0) {\n        arg_8h_00 = NULL;\n        if (arg_ch == '\\0') goto code_r0x009f4ea2;\n        arg_ch_00 = 0;\n        do {\n            fcn.009f6538(arg_8h_00, arg_ch_00);\n            uVar1 = extraout_ECX;\ncode_r0x009f4ea2:\n            if ((uVar1 & 4) == 0) {\n                if ((uVar1 & 2) == 0) {\n                    pcVar2 = \"ios_base::eofbit set\";\n                }\n                else {\n                    pcVar2 = \"ios_base::failbit set\";\n                }\n            }\n            else {\n                pcVar2 = \"ios_base::badbit set\";\n            }\n            fcn.0040143d(pcVar2);\n            fcn.004011cc(&var_1ch);\n            var_44h = vtable.std::ios_base::failure.0;\n            arg_ch_00 = 0xa357b4;\n            arg_8h_00 = &var_44h;\n        } while( true );\n    }\n    return;\n}\n",
        "token_count": 391
    },
    "009fa1b0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fa1b0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35b78, 0xc);\n    fcn.009fabda(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf134a8;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf134a4;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fa1f4;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f658f(arg_8h_00);\ncode_r0x009fa1f4:\n        fcn.009f658f(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fa217();\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 399
    },
    "009fa315": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fa315(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fbc2c(0xa35bb8, 0xc);\n    fcn.009fabda(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf134a8;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf134a4;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fa359;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f658f(arg_8h_00);\ncode_r0x009fa359:\n        fcn.009f658f(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fa37c();\n    fcn.009fbc71();\n    return;\n}\n",
        "token_count": 394
    },
    "00a15cfb": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a15cfb(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0xf16408)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 64
    }
}