{
    "18000100": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.180001000(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    \n    // [00] -r-x section size 40960 named .text\n    uVar5 = *(arg1 + 0x2000) & 0x3ff;\n    uVar7 = uVar5;\n    uVar3 = uVar5 - 3 & 0x3ff;\n    uVar8 = uVar5 - 10 & 0x3ff;\n    uVar4 = uVar5 - 0xc & 0x3ff;\n    uVar2 = uVar5 + 1 & 0x3ff;\n    if (*(arg1 + 0x2000) < 0x400) {\n        uVar5 = *(arg1 + uVar3 * 4);\n        uVar6 = *(arg1 + uVar2 * 4);\n        piVar1 = arg1 + uVar7 * 4;\n        *piVar1 = *piVar1 + ((uVar5 >> 10 | uVar5 << 0x16) ^ (uVar6 << 9 | uVar6 >> 0x17)) +\n                            *(arg1 + 0x1000 + ((uVar5 ^ uVar6) & 0x3ff) * 4) + *(arg1 + uVar8 * 4);\n        uVar5 = *(arg1 + uVar7 * 4);\n        uVar6 = *(arg1 + uVar4 * 4);\n        uVar6 = *(arg1 + 0x1c00 + (uVar6 >> 0x18) * 4) + *(arg1 + 0x1800 + (uVar6 >> 0x10 & 0xff) * 4) +\n                *(arg1 + 0x1400 + (uVar6 >> 8 & 0xff) * 4) + *(arg1 + 0x1000 + (uVar6 & 0xff) * 4);\n    }\n    else {\n        uVar5 = *(arg1 + 0x1000 + uVar3 * 4);\n        uVar6 = *(arg1 + 0x1000 + uVar2 * 4);\n        piVar1 = arg1 + 0x1000 + uVar7 * 4;\n        *piVar1 = *piVar1 + ((uVar5 >> 10 | uVar5 << 0x16) ^ (uVar6 << 9 | uVar6 >> 0x17)) +\n                            *(arg1 + ((uVar5 ^ uVar6) & 0x3ff) * 4) + *(arg1 + 0x1000 + uVar8 * 4);\n        uVar5 = *(arg1 + 0x1000 + uVar7 * 4);\n        uVar6 = *(arg1 + 0x1000 + uVar4 * 4);\n        uVar6 = *(arg1 + 0xc00 + (uVar6 >> 0x18) * 4) + *(arg1 + 0x800 + (uVar6 >> 0x10 & 0xff) * 4) +\n                *(arg1 + 0x400 + (uVar6 >> 8 & 0xff) * 4) + *(arg1 + (uVar6 & 0xff) * 4);\n    }\n    *(arg1 + 0x2004) = uVar6 ^ uVar5;\n    *(arg1 + 0x2000) = *(arg1 + 0x2000) + 1U & 0x7ff;\n    return;\n}\n",
        "token_count": 865
    },
    "1800013e": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.1800013e0(int64_t arg1, uint32_t *arg2, uint32_t *arg3, uint8_t *arg4)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint32_t *puVar3;\n    uint32_t *puVar4;\n    uint32_t uVar5;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uint64_t uVar6;\n    \n    if (0x3 < arg4) {\n        iVar10 = 4 - arg2;\n        puVar3 = arg2;\n        puVar4 = arg3;\n        do {\n            uVar5 = *(arg1 + 0x2000) & 0x3ff;\n            uVar6 = uVar5;\n            uVar2 = uVar5 - 3 & 0x3ff;\n            uVar7 = uVar5 - 10 & 0x3ff;\n            uVar9 = uVar5 - 0xc & 0x3ff;\n            uVar1 = uVar5 + 1 & 0x3ff;\n            if (*(arg1 + 0x2000) < 0x400) {\n                uVar5 = *(arg1 + uVar2 * 4);\n                uVar8 = *(arg1 + uVar1 * 4);\n                uVar8 = ((uVar5 >> 10 | uVar5 << 0x16) ^ (uVar8 << 9 | uVar8 >> 0x17)) +\n                        *(arg1 + 0x1000 + ((uVar5 ^ uVar8) & 0x3ff) * 4) + *(arg1 + uVar7 * 4) + *(arg1 + uVar6 * 4);\n                *(arg1 + uVar6 * 4) = uVar8;\n                uVar5 = *(arg1 + uVar9 * 4);\n                uVar5 = *(arg1 + 0x1c00 + (uVar5 >> 0x18) * 4) + *(arg1 + 0x1800 + (uVar5 >> 0x10 & 0xff) * 4) +\n                        *(arg1 + 0x1400 + (uVar5 >> 8 & 0xff) * 4) + *(arg1 + 0x1000 + (uVar5 & 0xff) * 4);\n            }\n            else {\n                uVar5 = *(arg1 + 0x1000 + uVar2 * 4);\n                uVar8 = *(arg1 + 0x1000 + uVar1 * 4);\n                uVar8 = ((uVar5 >> 10 | uVar5 << 0x16) ^ (uVar8 << 9 | uVar8 >> 0x17)) +\n                        *(arg1 + ((uVar5 ^ uVar8) & 0x3ff) * 4) + *(arg1 + 0x1000 + uVar7 * 4) +\n                        *(arg1 + 0x1000 + uVar6 * 4);\n                *(arg1 + 0x1000 + uVar6 * 4) = uVar8;\n                uVar5 = *(arg1 + 0x1000 + uVar9 * 4);\n                uVar5 = *(arg1 + 0xc00 + (uVar5 >> 0x18) * 4) + *(arg1 + 0x800 + (uVar5 >> 0x10 & 0xff) * 4) +\n                        *(arg1 + 0x400 + (uVar5 >> 8 & 0xff) * 4) + *(arg1 + (uVar5 & 0xff) * 4);\n            }\n            arg2 = puVar3 + 1;\n            arg3 = puVar4 + 1;\n            *(arg1 + 0x2004) = uVar5 ^ uVar8;\n            *(arg1 + 0x2000) = *(arg1 + 0x2000) + 1U & 0x7ff;\n            *puVar4 = uVar5 ^ uVar8 ^ *puVar3;\n            puVar3 = arg2;\n            puVar4 = arg3;\n        } while (iVar10 + arg2 <= arg4);\n    }\n    if ((arg4 & 3) != 0) {\n        fcn.180001000(arg1);\n        uVar5 = 0;\n        if ((arg4 & 3) != 0) {\n            puVar3 = arg2;\n            do {\n                uVar5 = uVar5 + 1;\n                *(arg3 + (-1 - arg2) + puVar3 + 1) = *((arg1 - arg2) + 0x2004 + puVar3) ^ *puVar3;\n                puVar3 = puVar3 + 1;\n            } while (uVar5 < (arg4 & 3));\n        }\n    }\n    return;\n}\n",
        "token_count": 1128
    },
    "18000118": {
        "rules": [
            "encrypt data using HC-128/11bb23636d2a4650a9dbaa6512d69580"
        ],
        "decompiled_code": "\nvoid fcn.180001180(int64_t param_1, ulong *param_2, uint *param_3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    uint *puVar8;\n    uint *puVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uint32_t uVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    ulong uStack16;\n    \n    uStack16 = 0x18000119a;\n    iVar7 = fcn.180008850();\n    iVar7 = -iVar7;\n    *(&stack0x00002818 + iVar7) = *0x18000f000 ^ &stack0xfffffffffffffff8 + iVar7;\n    uVar12 = 0x10;\n    *(&stack0x00000018 + iVar7) = *param_2;\n    *(&stack0x00000020 + iVar7) = param_2[1];\n    *(&stack0x00000028 + iVar7) = param_2[2];\n    *(&stack0x00000030 + iVar7) = param_2[3];\n    *(&stack0x00000038 + iVar7) = *param_3;\n    *(&stack0x0000003c + iVar7) = param_3[1];\n    *(&stack0x00000040 + iVar7) = param_3[2];\n    *(&stack0x00000044 + iVar7) = param_3[3];\n    *(&stack0x00000048 + iVar7) = param_3[4];\n    *(&stack0x0000004c + iVar7) = param_3[5];\n    *(&stack0x00000050 + iVar7) = param_3[6];\n    *(&stack0x00000054 + iVar7) = param_3[7];\n    piVar11 = &stack0x00000018 + iVar7;\n    do {\n        uVar2 = piVar11[1];\n        uVar3 = piVar11[2];\n        uVar4 = piVar11[0xe];\n        uVar5 = piVar11[3];\n        uVar6 = piVar11[0xf];\n        uVar10 = ((uVar4 << 0xf | uVar4 >> 0x11) ^ (uVar4 << 0xd | uVar4 >> 0x13) ^ uVar4 >> 10) +\n                 ((uVar2 << 0xe | uVar2 >> 0x12) ^ (uVar2 >> 7 | uVar2 << 0x19) ^ uVar2 >> 3) + piVar11[9] + *piVar11 +\n                 uVar12;\n        piVar11[0x10] = uVar10;\n        uVar2 = ((uVar6 << 0xf | uVar6 >> 0x11) ^ (uVar6 << 0xd | uVar6 >> 0x13) ^ uVar6 >> 10) +\n                ((uVar3 << 0xe | uVar3 >> 0x12) ^ (uVar3 >> 7 | uVar3 << 0x19) ^ uVar3 >> 3) + piVar11[10] + uVar2 + 1 +\n                uVar12;\n        piVar11[0x11] = uVar2;\n        uVar4 = piVar11[4];\n        piVar11[0x12] =\n             ((uVar10 * 0x8000 | uVar10 >> 0x11) ^ (uVar10 * 0x2000 | uVar10 >> 0x13) ^ uVar10 >> 10) +\n             ((uVar5 << 0xe | uVar5 >> 0x12) ^ (uVar5 >> 7 | uVar5 << 0x19) ^ uVar5 >> 3) + piVar11[0xb] + uVar3 + 2 +\n             uVar12;\n        iVar1 = ((uVar2 * 0x8000 | uVar2 >> 0x11) ^ (uVar2 * 0x2000 | uVar2 >> 0x13) ^ uVar2 >> 10) +\n                ((uVar4 << 0xe | uVar4 >> 0x12) ^ (uVar4 >> 7 | uVar4 << 0x19) ^ uVar4 >> 3) + piVar11[0xc] + uVar5 + 3\n                + uVar12;\n        uVar12 = uVar12 + 4;\n        piVar11[0x13] = iVar1;\n        piVar11 = piVar11 + 4;\n    } while (uVar12 < 0xa00);\n    iVar13 = 0x200;\n    iVar14 = 0x200;\n    puVar9 = &stack0x00000818 + iVar7;\n    do {\n        puVar8 = puVar9 + 2;\n        iVar14 = iVar14 + -1;\n        *((param_1 - (&stack0x00000818 + iVar7)) + -8 + puVar8) = *puVar9;\n        *((param_1 - (&stack0x00000818 + iVar7)) + -4 + puVar8) = puVar9[1];\n        puVar9 = puVar8;\n    } while (iVar14 != 0);\n    puVar9 = param_1 + 0x1004;\n    do {\n        iVar13 = iVar13 + -1;\n        puVar9[-1] = *(&stack0x00000814 + (iVar7 - param_1) + puVar9);\n        *puVar9 = *(&stack0x00000810 + (iVar7 - param_1) + puVar9 + 2);\n        puVar9 = puVar9 + 2;\n    } while (iVar13 != 0);\n    *(param_1 + 0x2000) = 0;\n    iVar13 = 0x1000;\n    do {\n        *(&stack0xfffffffffffffff0 + iVar7) = 0x1800013ae;\n        fcn.180001000(param_1);\n        iVar13 = iVar13 + -1;\n    } while (iVar13 != 0);\n    *(&stack0xfffffffffffffff0 + iVar7) = 0x1800013c3;\n    fcn.180003ca0(*(&stack0x00002818 + iVar7) ^ &stack0xfffffffffffffff8 + iVar7);\n    return;\n}\n",
        "token_count": 1489
    },
    "18000212": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.180002120(uint32_t *arg1, uint32_t *arg2, int64_t *arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    int16_t iVar2;\n    uint8_t *puVar3;\n    uint64_t uVar4;\n    uint8_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint32_t *puVar16;\n    uint64_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    ulong noname_1;\n    uint32_t *puVar20;\n    int64_t iVar21;\n    uint32_t *puVar22;\n    uint32_t uVar23;\n    uint64_t uVar24;\n    uint32_t uVar25;\n    uint32_t uVar26;\n    uint32_t uVar28;\n    uint64_t uVar30;\n    uint32_t *puVar31;\n    uint32_t *in_stack_00000028;\n    uint64_t *in_stack_00000030;\n    uint32_t in_stack_00000038;\n    uchar auStack344 [32];\n    uint32_t uStack312;\n    uint32_t *puStack304;\n    uint32_t *puStack296;\n    uint32_t uStack288;\n    uint64_t uStack280;\n    uint8_t *puStack272;\n    uint32_t *puStack264;\n    uint32_t *puStack256;\n    uint32_t *puStack248;\n    int64_t *piStack240;\n    uint64_t *puStack232;\n    uint32_t *puStack224;\n    ulong uStack216;\n    uint32_t auStack208 [18];\n    int32_t aiStack136 [16];\n    uint64_t uStack72;\n    uint64_t uVar27;\n    uint64_t uVar29;\n    \n    uStack72 = *0x18000f000 ^ auStack344;\n    puVar22 = arg2 + *arg3;\n    puVar14 = in_stack_00000028 + *in_stack_00000030;\n    puStack224 = in_stack_00000028;\n    puStack232 = in_stack_00000030;\n    puStack296 = in_stack_00000028;\n    if ((in_stack_00000038 & 4) == 0) {\n        puVar3 = in_stack_00000028 + *in_stack_00000030 + (-1 - arg4);\n    }\n    else {\n        puVar3 = 0xffffffffffffffff;\n    }\n    puStack304 = arg2;\n    puStack272 = puVar3;\n    puStack264 = puVar14;\n    puStack256 = puVar22;\n    puStack248 = arg4;\n    piStack240 = arg3;\n    if (((puVar3 & puVar3 + 1) != 0) || (in_stack_00000028 < arg4)) {\n        *in_stack_00000030 = 0;\n        *arg3 = 0;\n        goto code_r0x0001800037de;\n    }\n    uStack280 = *(arg1 + 0x10);\n    uVar19 = arg1[8];\n    uStack288 = arg1[10];\n    puVar20 = uStack288;\n    uVar13 = arg1[1];\n    uVar30 = *(arg1 + 0xe);\n    uVar23 = arg1[9];\n    puVar31 = uVar23;\n    uStack312 = uVar19;\n    if (0x35 < *arg1) goto code_r0x0001800034cf;\n    // switch table (54 cases) at 0x180003800\n    switch(*(*arg1 * 4 + 0x180003800) + 0x180000000) {\n    case 0x180002228:\n        puVar31 = NULL;\n        uVar23 = 0;\n        uVar13 = 0;\n        uVar30 = 0;\n        *(arg1 + 2) = 0;\n        uStack288 = 0;\n        uStack312 = 0;\n        arg1[7] = 1;\n        arg1[4] = 1;\n        if ((in_stack_00000038 & 1) != 0) {\n            uVar19 = 0;\n            if (puVar22 <= arg2) goto code_r0x00018000228d;\n            arg2 = arg2 + 1;\n            arg1[2] = *arg2;\n            goto code_r0x0001800022a9;\n        }\n        goto joined_r0x000180002557;\n    case 0x180002274:\n        uVar19 = uVar23;\n        if (arg2 < puVar22) {\n            arg1[2] = *arg2;\n            arg2 = arg2 + 1;\ncode_r0x0001800022a9:\n            if (puVar22 <= arg2) goto code_r0x0001800022d3;\n            uVar5 = *arg2;\n            arg2 = arg2 + 1;\n            arg1[3] = uVar5;\n            goto code_r0x0001800022f3;\n        }\ncode_r0x00018000228d:\n        uVar23 = uVar19;\n        if ((in_stack_00000038 & 2) == 0) {\n            arg1[2] = 0;\n            goto code_r0x0001800022a9;\n        }\n        iVar6 = 1;\n        *arg1 = 1;\n        goto code_r0x0001800034d7;\n    case 0x1800022ba:\n        if (arg2 < puVar22) {\n            arg2 = arg2 + 1;\n            arg1[3] = *arg2;\n        }\n        else {\ncode_r0x0001800022d3:\n            if ((in_stack_00000038 & 2) != 0) {\n                iVar6 = 1;\n                *arg1 = 2;\n                goto code_r0x0001800034d7;\n            }\n            arg1[3] = 0;\n        }\ncode_r0x0001800022f3:\n        uVar23 = arg1[2];\n        uVar19 = uVar23 * 0x100 + arg1[3];\n        puVar20 = uVar19 * 0x8421085 >> 0x20;\n        if (((uVar19 == (uVar19 / 0x1f) * 0x1f) && ((arg1[3] & 0x20) == 0)) && ((uVar23 & 0xf) == 8)) {\n            puVar31 = NULL;\n        }\n        else {\n            puVar31 = 0x1;\n        }\n        if ((in_stack_00000038 & 4) == 0) {\n            uVar23 = 1 << ((uVar23 >> 4) + 8U & 0x1f);\n            if ((uVar23 < 0x8001) && (uVar23 <= puVar3 + 1)) {\n                uVar23 = 0;\n            }\n            else {\n                uVar23 = 1;\n            }\n            puVar31 = puVar31 | uVar23;\n        }\n        uVar23 = puVar31;\n        if (uVar23 != 0) goto code_r0x000180002371;\njoined_r0x000180002557:\n        do {\n            for (; uVar13 < 3; uVar13 = uVar13 + 8) {\n                if (arg2 < puVar22) {\n                    uVar17 = *arg2;\n                    arg2 = arg2 + 1;\n                }\n                else {\ncode_r0x00018000255e:\n                    if ((in_stack_00000038 & 2) != 0) {\n                        iVar6 = 1;\n                        *arg1 = 3;\n                        goto code_r0x0001800034d3;\n                    }\n                    uVar17 = 0;\n                }\ncode_r0x000180002572:\n                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n            }\n            uVar23 = uVar30;\n            uVar13 = uVar13 - 3;\n            uVar30 = uVar30 >> 3;\n            uVar23 = uVar23 & 7;\n            arg1[5] = uVar23;\n            uVar23 = uVar23 >> 1;\n            arg1[6] = uVar23;\n            if (uVar23 == 0) {\n                uVar23 = uVar13;\n                if (uVar13 < (uVar13 & 7)) {\n                    do {\n                        if (arg2 < puVar22) {\n                            uVar17 = *arg2;\n                            arg2 = arg2 + 1;\n                        }\n                        else {\ncode_r0x0001800025ac:\n                            if ((in_stack_00000038 & 2) != 0) {\n                                iVar6 = 1;\n                                *arg1 = 5;\n                                goto code_r0x0001800034d3;\n                            }\n                            uVar17 = 0;\n                        }\ncode_r0x0001800025c0:\n                        uVar23 = uVar13 + 8;\n                        uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                        uVar13 = uVar23;\n                    } while (uVar23 < (uVar23 & 7));\n                }\n                uVar30 = uVar30 >> (uVar23 & 7);\n                uVar13 = uVar23 - (uVar23 & 7);\n                puVar31 = NULL;\ncode_r0x0001800025eb:\n                while( true ) {\n                    puVar20 = 0xfffffff8;\n                    if (3 < puVar31) break;\n                    if (uVar13 == 0) {\n                        if (arg2 < puVar22) {\n                            uVar5 = *arg2;\n                            arg2 = arg2 + 1;\n                            *(puVar31 + 0xa4a + arg1) = uVar5;\n                            puVar31 = puVar31 + 1;\n                        }\n                        else {\ncode_r0x000180002653:\n                            if ((in_stack_00000038 & 2) != 0) {\n                                iVar6 = 1;\n                                *arg1 = 7;\n                                goto code_r0x0001800034d3;\n                            }\n                            *(puVar31 + 0xa4a + arg1) = 0;\n                            puVar31 = puVar31 + 1;\n                        }\n                    }\n                    else {\n                        for (; uVar13 < 8; uVar13 = uVar13 + 8) {\n                            if (arg2 < puVar22) {\n                                uVar17 = *arg2;\n                                arg2 = arg2 + 1;\n                            }\n                            else {\ncode_r0x0001800025ff:\n                                if ((in_stack_00000038 & 2) != 0) {\n                                    iVar6 = 1;\n                                    *arg1 = 6;\n                                    goto code_r0x0001800034d3;\n                                }\n                                uVar17 = 0;\n                            }\ncode_r0x000180002613:\n                            uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                        }\n                        *(puVar31 + 0xa4a + arg1) = uVar30;\n                        uVar13 = uVar13 - 8;\n                        uVar30 = uVar30 >> 8;\n                        puVar31 = puVar31 + 1;\n                    }\n                }\n                puVar31 = *(arg1 + 0xa4a);\n                puVar14 = puStack264;\n                if (*(arg1 + 0xa4a) != (*(arg1 + 0x292a) ^ 0xffff)) goto code_r0x0001800034c8;\n                for (; puVar31 != 0; puVar31 = puVar31 - 1) {\n                    if (uVar13 == 0) goto code_r0x000180002538;\n                    for (; uVar13 < 8; uVar13 = uVar13 + 8) {\n                        if (arg2 < puVar22) {\n                            uVar17 = *arg2;\n                            arg2 = arg2 + 1;\n                        }\n                        else {\ncode_r0x0001800026c6:\n                            if ((in_stack_00000038 & 2) != 0) {\n                                iVar6 = 1;\n                                *arg1 = 0x33;\n                                goto code_r0x0001800034d3;\n                            }\n                            uVar17 = 0;\n                        }\ncode_r0x0001800026da:\n                        uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                    }\n                    uVar19 = uVar30;\n                    uVar30 = uVar30 >> 8;\n                    uVar13 = uVar13 - 8;\ncode_r0x0001800026fe:\n                    uStack312 = uVar19;\n                    if (puVar14 <= in_stack_00000028) {\n                        iVar6 = 2;\n                        *arg1 = 0x34;\n                        goto code_r0x0001800034d3;\n                    }\n                    *in_stack_00000028 = uVar19;\n                    in_stack_00000028 = in_stack_00000028 + 1;\n                    puStack296 = in_stack_00000028;\n                }\n            }\n            else {\n                if (uVar23 == 3) goto code_r0x00018000367a;\n                if (uVar23 == 1) {\n                    arg1[0xb] = 0x120;\n                    arg1[0xc] = 0x20;\n                    *(arg1 + 0x37a) = 0x505050505050505;\n                    *(arg1 + 0x37c) = 0x505050505050505;\n                    *(arg1 + 0x37e) = 0x505050505050505;\n                    noname_1 = CONCAT71(puVar20 >> 8, 8);\n                    *(arg1 + 0x380) = 0x505050505050505;\n                    fcn.180006ac0(arg1 + 0x12, noname_1, 0x90);\n                    puVar20 = CONCAT71(noname_1 >> 8, 9);\n                    fcn.180006ac0(arg1 + 0x36, puVar20, 0x70);\n                    *(arg1 + 0x52) = 0x707070707070707;\n                    *(arg1 + 0x54) = 0x707070707070707;\n                    *(arg1 + 0x56) = 0x707070707070707;\n                    *(arg1 + 0x58) = 0x808080808080808;\n                }\n                else {\n                    for (puVar31 = NULL; puVar31 < 3; puVar31 = puVar31 + 1) {\n                        uVar5 = *(puVar31 + 0x60003395);\n                        uVar23 = uVar13;\n                        if (uVar13 < uVar5) {\n                            do {\n                                if (arg2 < puVar22) {\n                                    uVar17 = *arg2;\n                                    arg2 = arg2 + 1;\n                                }\n                                else {\ncode_r0x0001800027eb:\n                                    if ((in_stack_00000038 & 2) != 0) {\n                                        iVar6 = 1;\n                                        *arg1 = 0xb;\n                                        goto code_r0x0001800034d3;\n                                    }\n                                    uVar17 = 0;\n                                }\ncode_r0x0001800027ff:\n                                uVar23 = uVar13 + 8;\n                                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                uVar5 = *(puVar31 + 0x60003395);\n                                uVar13 = uVar23;\n                            } while (uVar23 < uVar5);\n                        }\n                        arg1[puVar31 + 0xb] = (1 << (uVar5 & 0x1f)) - 1U & uVar30;\n                        uVar30 = uVar30 >> (*(puVar31 + 0x60003395) & 0x3f);\n                        uVar13 = uVar23 - *(puVar31 + 0x60003395);\n                        arg1[puVar31 + 0xb] = arg1[puVar31 + 0xb] + *(puVar31 * 4 + 0x18000ce48);\n                    }\n                    fcn.180006ac0(arg1 + 0x6e2, 0, 0x120);\n                    for (puVar31 = NULL; puVar20 = 0x180000000,  puVar31 < arg1[0xd]; puVar31 = puVar31 + 1) {\n                        for (; uVar13 < 3; uVar13 = uVar13 + 8) {\n                            if (arg2 < puVar22) {\n                                uVar17 = *arg2;\n                                arg2 = arg2 + 1;\n                            }\n                            else {\ncode_r0x000180002893:\n                                if ((in_stack_00000038 & 2) != 0) {\n                                    iVar6 = 1;\n                                    *arg1 = 0xe;\n                                    goto code_r0x0001800034d3;\n                                }\n                                uVar17 = 0;\n                            }\ncode_r0x0001800028a7:\n                            uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                        }\n                        uVar5 = uVar30;\n                        uVar13 = uVar13 - 3;\n                        uVar30 = uVar30 >> 3;\n                        *(*(puVar31 + 0x6000338c) + 0x1b88 + arg1) = uVar5 & 7;\n                    }\n                    arg1[0xd] = 0x13;\n                }\n                while (puVar14 = puStack264,  in_stack_00000028 = puStack296,  -1 < arg1[6]) {\n                    puVar22 = arg1 + arg1[6] * 0x368 + 0x12;\n                    fcn.180006ac0(aiStack136, 0, 0x40);\n                    fcn.180006ac0(puVar22 + 0x48, 0, 0x800);\n                    fcn.180006ac0(puVar22 + 0x248, 0, 0x480);\n                    uVar23 = arg1[arg1[6] + 0xb];\n                    if (uVar23 != 0) {\n                        uVar17 = arg1[arg1[6] + 0xb];\n                        puVar14 = puVar22;\n                        do {\n                            uVar5 = *puVar14;\n                            puVar14 = puVar14 + 1;\n                            aiStack136[uVar5] = aiStack136[uVar5] + 1;\n                            uVar17 = uVar17 - 1;\n                        } while (uVar17 != 0);\n                    }\n                    uVar4 = 0;\n                    uStack216 = 0;\n                    iVar21 = 5;\n                    uVar17 = uVar4;\n                    uVar24 = uVar4;\n                    uVar27 = uVar4;\n                    uVar29 = uVar4;\n                    do {\n                        iVar6 = *(aiStack136 + uVar24 + 4);\n                        uVar26 = uVar17 + iVar6;\n                        uVar17 = uVar26;\n                        iVar7 = *(aiStack136 + uVar24 + 8);\n                        iVar8 = (uVar4 + iVar6) * 2;\n                        uVar28 = uVar29 + iVar7;\n                        uVar29 = uVar28;\n                        iVar6 = *(aiStack136 + uVar24 + 0xc);\n                        *(auStack208 + uVar24) = iVar8;\n                        uVar19 = (iVar7 + iVar8) * 2;\n                        puVar20 = uVar19;\n                        uVar25 = uVar27 + iVar6;\n                        uVar27 = uVar25;\n                        *(auStack208 + uVar24 + 4) = uVar19;\n                        uVar19 = (iVar6 + uVar19) * 2;\n                        uVar4 = uVar19;\n                        iVar21 = iVar21 + -1;\n                        *(auStack208 + uVar24 + 8) = uVar19;\n                        uVar24 = uVar24 + 0xc;\n                    } while (iVar21 != 0);\n                    if ((uVar19 != 0x10000) && (1 < uVar26 + uVar28 + uVar25)) goto code_r0x000180003686;\n                    iVar6 = -1;\n                    uVar17 = 0;\n                    if (uVar23 != 0) {\n                        do {\n                            uVar5 = *(puVar22 + uVar17);\n                            puVar20 = NULL;\n                            if (uVar5 != 0) {\n                                uVar23 = auStack208[uVar5 - 2];\n                                uVar26 = uVar5;\n                                auStack208[uVar5 - 2] = uVar23 + 1;\n                                uVar19 = uVar26;\n                                do {\n                                    uVar25 = puVar20 * 2;\n                                    uVar28 = uVar23 & 1;\n                                    uVar18 = uVar28 | uVar25;\n                                    puVar20 = uVar18;\n                                    uVar19 = uVar19 - 1;\n                                    uVar23 = uVar23 >> 1;\n                                } while (uVar19 != 0);\n                                if (uVar26 < 0xb) {\n                                    if (uVar18 < 0x400) {\n                                        do {\n                                            *(puVar22 + puVar20 * 2 + 0x120) = uVar5 << 9 | uVar17;\n                                            uVar23 = puVar20 + (1 << (uVar5 & 0x1f));\n                                            puVar20 = uVar23;\n                                        } while (uVar23 < 0x400);\n                                    }\n                                }\n                                else {\n                                    uVar24 = uVar28 | uVar25 & 0x3ff;\n                                    iVar2 = *(puVar22 + uVar24 * 2 + 0x120);\n                                    iVar7 = iVar2;\n                                    iVar8 = iVar6;\n                                    if (iVar2 == 0) {\n                                        *(puVar22 + uVar24 * 2 + 0x120) = iVar6;\n                                        iVar8 = iVar6 + -2;\n                                        iVar7 = iVar6;\n                                    }\n                                    uVar25 = uVar25 >> 9;\n                                    if (0xb < uVar26) {\n                                        uVar24 = uVar5 - 0xb;\n                                        do {\n                                            uVar25 = uVar25 >> 1;\n                                            iVar21 = 0x48f - (iVar7 - (uVar25 & 1));\n                                            iVar2 = *(puVar22 + iVar21 * 2);\n                                            if (iVar2 == 0) {\n                                                *(puVar22 + iVar21 * 2) = iVar8;\n                                                iVar7 = iVar8;\n                                                iVar8 = iVar8 + -2;\n                                            }\n                                            else {\n                                                iVar7 = iVar2;\n                                            }\n                                            uVar24 = uVar24 - 1;\n                                        } while (uVar24 != 0);\n                                    }\n                                    puVar20 = NULL;\n                                    *(puVar22 + (0x48f - (iVar7 - (uVar25 >> 1 & 1))) * 2) = uVar17;\n                                    iVar6 = iVar8;\n                                }\n                            }\n                            uVar23 = uVar17 + 1;\n                            uVar17 = uVar23;\n                        } while (uVar23 < arg1[arg1[6] + 0xb]);\n                    }\n                    if (arg1[6] == 2) {\n                        puVar31 = NULL;\n                        while (puVar31 < arg1[0xc] + arg1[0xb]) {\n                            uVar23 = uVar13;\n                            if (uVar13 < 0xf) {\n                                puVar22 = puStack256;\n                                if (puStack256 - arg2 < 2) {\n                                    do {\n                                        iVar2 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x1ca8);\n                                        uVar19 = iVar2;\n                                        uVar23 = uVar13;\n                                        if (iVar2 < 0) {\n                                            if (10 < uVar13) {\n                                                iVar6 = 10;\n                                                do {\n                                                    iVar2 = *(arg1 + ((uVar30 >> (iVar6 & 0x3f) & 1) + ~uVar19) * 2 +\n                                                                     0x24a8);\n                                                    uVar19 = iVar2;\n                                                    if (-1 < iVar2) goto code_r0x000180002c0f;\n                                                    uVar26 = iVar6 + 2;\n                                                    iVar6 = iVar6 + 1;\n                                                } while (uVar26 <= uVar13);\n                                            }\n                                        }\n                                        else if ((uVar19 >> 9 != 0) && (uVar19 >> 9 <= uVar13)) break;\n                                        if (arg2 < puVar22) {\n                                            uVar17 = *arg2;\n                                            arg2 = arg2 + 1;\n                                        }\n                                        else {\ncode_r0x000180002bc6:\n                                            if ((in_stack_00000038 & 2) != 0) {\n                                                iVar6 = 1;\n                                                *arg1 = 0x10;\n                                                goto code_r0x0001800034d3;\n                                            }\n                                            uVar17 = 0;\n                                        }\ncode_r0x000180002bda:\n                                        uVar23 = uVar13 + 8;\n                                        uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                        uVar13 = uVar23;\n                                    } while (uVar23 < 0xf);\n                                }\n                                else {\n                                    puVar3 = arg2 + 1;\n                                    uVar5 = *arg2;\n                                    arg2 = arg2 + 2;\n                                    uVar30 = uVar30 | *puVar3 << (uVar13 + 8 & 0x3f) | uVar5 << (uVar13 & 0x3f);\n                                    uVar23 = uVar13 + 0x10;\n                                }\n                            }\ncode_r0x000180002c0f:\n                            iVar2 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x1ca8);\n                            uVar19 = iVar2;\n                            if (iVar2 < 0) {\n                                iVar6 = 10;\n                                do {\n                                    uVar5 = iVar6;\n                                    iVar6 = iVar6 + 1;\n                                    iVar2 = *(arg1 + ((uVar30 >> (uVar5 & 0x3f) & 1) + ~uVar19) * 2 + 0x24a8);\n                                    uVar19 = iVar2;\n                                } while (iVar2 < 0);\n                            }\n                            else {\n                                iVar6 = uVar19 >> 9;\n                                uVar19 = uVar19 & 0x1ff;\n                            }\n                            uVar30 = uVar30 >> (iVar6 & 0x3f);\n                            uVar13 = uVar23 - iVar6;\n                            uStack312 = uVar19;\n                            if (uVar19 < 0x10) {\n                                *(puVar31 + 0xa4b + arg1) = uVar19;\n                                puVar31 = puVar31 + 1;\n                            }\n                            else {\n                                if ((uVar19 == 0x10) && (puVar31 == 0)) goto code_r0x000180003692;\n                                uVar26 = *((uVar19 - 0x10) + 0x18000ce58);\n                                puVar20 = uVar26;\n                                puVar22 = puStack256;\n                                uVar23 = uVar13;\n                                uStack288 = uVar26;\n                                if (uVar13 < uVar26) {\n                                    do {\n                                        if (arg2 < puVar22) {\n                                            uVar17 = *arg2;\n                                            arg2 = arg2 + 1;\n                                        }\n                                        else {\ncode_r0x000180002cba:\n                                            if ((in_stack_00000038 & 2) != 0) {\n                                                iVar6 = 1;\n                                                *arg1 = 0x12;\n                                                goto code_r0x0001800034d3;\n                                            }\n                                            uVar17 = 0;\n                                        }\ncode_r0x000180002cce:\n                                        uVar23 = uVar13 + 8;\n                                        uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                        uVar26 = puVar20;\n                                        uVar13 = uVar23;\n                                    } while (uVar23 < uVar26);\n                                }\n                                uVar13 = uVar23 - uVar26;\n                                uVar23 = uVar30;\n                                uVar30 = uVar30 >> (uVar26 & 0x3f);\n                                uVar23 = ((1 << (uVar26 & 0x1f)) - 1U & uVar23) + *((uVar19 - 0x10) + 0x18000ce5c);\n                                if (uVar19 == 0x10) {\n                                    uVar17 = *((puVar31 - 1) + 0x292c + arg1);\n                                }\n                                else {\n                                    uVar17 = 0;\n                                }\n                                fcn.180006ac0(puVar31 + 0xa4b + arg1, uVar17, uVar23);\n                                puVar31 = puVar31 + uVar23;\n                            }\n                        }\n                        if (arg1[0xb] + arg1[0xc] != puVar31) goto code_r0x00018000369e;\n                        fcn.180004a30(arg1 + 0x12, arg1 + 0xa4b, arg1[0xb]);\n                        puVar20 = arg1[0xb] + 0x292c + arg1;\n                        fcn.180004a30(arg1 + 0x37a, puVar20, arg1[0xc]);\n                    }\n                    arg1[6] = arg1[6] - 1;\n                    puVar22 = puStack256;\n                }\ncode_r0x000180002d8e:\n                while( true ) {\n                    uVar5 = uVar13;\n                    if ((puVar22 - arg2 < 4) || (puVar14 - in_stack_00000028 < 2)) break;\n                    if (uVar13 < 0x1e) {\n                        uVar23 = *arg2;\n                        arg2 = arg2 + 1;\n                        uVar30 = uVar30 | uVar23 << (uVar5 & 0x3f);\n                        uVar13 = uVar13 + 0x20;\n                    }\n                    uVar23 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x168);\n                    puVar31 = uVar23;\n                    if (uVar23 < 0) {\n                        iVar6 = 10;\n                        do {\n                            uVar5 = iVar6;\n                            iVar6 = iVar6 + 1;\n                            puVar20 = (uVar30 >> (uVar5 & 0x3f) & 1) + ~puVar31;\n                            uVar23 = *(arg1 + puVar20 * 2 + 0x968);\n                            puVar31 = uVar23;\n                        } while (uVar23 < 0);\n                    }\n                    else {\n                        iVar6 = uVar23 >> 9;\n                    }\n                    uVar30 = uVar30 >> (iVar6 & 0x3f);\n                    uVar13 = uVar13 - iVar6;\n                    uVar23 = puVar31;\n                    if ((uVar23 >> 8 & 1) != 0) goto code_r0x000180002fe5;\n                    iVar2 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x168);\n                    uVar23 = iVar2;\n                    if (iVar2 < 0) {\n                        iVar6 = 10;\n                        do {\n                            uVar5 = iVar6;\n                            iVar6 = iVar6 + 1;\n                            puVar20 = (uVar30 >> (uVar5 & 0x3f) & 1) + ~uVar23;\n                            iVar2 = *(arg1 + puVar20 * 2 + 0x968);\n                            uVar23 = iVar2;\n                        } while (iVar2 < 0);\n                    }\n                    else {\n                        iVar6 = uVar23 >> 9;\n                    }\n                    uVar30 = uVar30 >> (iVar6 & 0x3f);\n                    uVar13 = uVar13 - iVar6;\n                    *in_stack_00000028 = puVar31;\n                    if ((uVar23 >> 8 & 1) != 0) {\n                        in_stack_00000028 = in_stack_00000028 + 1;\n                        puStack296 = in_stack_00000028;\n                        goto code_r0x000180002fe5;\n                    }\n                    *(in_stack_00000028 + 1) = uVar23;\n                    puStack296 = in_stack_00000028 + 2;\n                    in_stack_00000028 = puStack296;\n                }\n                uVar23 = uVar13;\n                if (uVar13 < 0xf) {\n                    if (puVar22 - arg2 < 2) {\n                        do {\n                            iVar2 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x168);\n                            uVar19 = iVar2;\n                            uVar23 = uVar13;\n                            if (iVar2 < 0) {\n                                if (10 < uVar13) {\n                                    iVar6 = 10;\n                                    do {\n                                        puVar20 = (uVar30 >> (iVar6 & 0x3f) & 1) + ~uVar19;\n                                        iVar2 = *(arg1 + puVar20 * 2 + 0x968);\n                                        uVar19 = iVar2;\n                                        if (-1 < iVar2) goto code_r0x000180002f5f;\n                                        uVar26 = iVar6 + 2;\n                                        iVar6 = iVar6 + 1;\n                                    } while (uVar26 <= uVar13);\n                                }\n                            }\n                            else if ((uVar19 >> 9 != 0) && (uVar19 >> 9 <= uVar13)) break;\n                            if (arg2 < puVar22) {\n                                uVar17 = *arg2;\n                                arg2 = arg2 + 1;\n                            }\n                            else {\ncode_r0x000180002f16:\n                                if ((in_stack_00000038 & 2) != 0) {\n                                    iVar6 = 1;\n                                    *arg1 = 0x17;\n                                    goto code_r0x0001800034d3;\n                                }\n                                uVar17 = 0;\n                            }\ncode_r0x000180002f2a:\n                            uVar23 = uVar13 + 8;\n                            uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                            uVar13 = uVar23;\n                        } while (uVar23 < 0xf);\n                    }\n                    else {\n                        puVar3 = arg2 + 1;\n                        uVar1 = *arg2;\n                        arg2 = arg2 + 2;\n                        puVar20 = *puVar3 << (uVar5 + 8 & 0x3f) | uVar1 << (uVar5 & 0x3f);\n                        uVar30 = uVar30 | puVar20;\n                        uVar23 = uVar13 + 0x10;\n                    }\n                }\ncode_r0x000180002f5f:\n                uVar13 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0x168);\n                puVar31 = uVar13;\n                if (uVar13 < 0) {\n                    iVar6 = 10;\n                    do {\n                        uVar5 = iVar6;\n                        iVar6 = iVar6 + 1;\n                        puVar20 = (uVar30 >> (uVar5 & 0x3f) & 1) + ~puVar31;\n                        uVar13 = *(arg1 + puVar20 * 2 + 0x968);\n                        puVar31 = uVar13;\n                    } while (uVar13 < 0);\n                }\n                else {\n                    iVar6 = uVar13 >> 9;\n                    puVar31 = uVar13 & 0x1ff;\n                }\n                uVar30 = uVar30 >> (iVar6 & 0x3f);\n                uVar13 = uVar23 - iVar6;\n                uVar23 = puVar31;\n                if (uVar23 < 0x100) {\ncode_r0x000180002fc0:\n                    if (puVar14 <= in_stack_00000028) {\n                        iVar6 = 2;\n                        *arg1 = 0x18;\n                        goto code_r0x0001800034d3;\n                    }\n                    *in_stack_00000028 = puVar31;\n                    puStack296 = in_stack_00000028 + 1;\n                    in_stack_00000028 = puStack296;\n                    goto code_r0x000180002d8e;\n                }\ncode_r0x000180002fe5:\n                uVar23 = uVar23 & 0x1ff;\n                puVar31 = uVar23;\n                if (uVar23 != 0x100) {\n                    uVar19 = *((uVar23 - 0x101) * 4 + 0x18000ccb0);\n                    puVar20 = uVar19;\n                    uVar23 = *((uVar23 - 0x101) * 4 + 0x18000cc30);\n                    puVar31 = uVar23;\n                    uStack288 = uVar19;\n                    if (uVar19 != 0) {\n                        uVar26 = uVar13;\n                        if (uVar13 < uVar19) {\n                            do {\n                                if (arg2 < puVar22) {\n                                    uVar17 = *arg2;\n                                    arg2 = arg2 + 1;\n                                }\n                                else {\ncode_r0x00018000302f:\n                                    if ((in_stack_00000038 & 2) != 0) {\n                                        iVar6 = 1;\n                                        *arg1 = 0x19;\n                                        goto code_r0x0001800034d3;\n                                    }\n                                    uVar17 = 0;\n                                }\ncode_r0x000180003043:\n                                uVar23 = puVar31;\n                                uVar26 = uVar13 + 8;\n                                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                uVar19 = puVar20;\n                                uVar13 = uVar26;\n                            } while (uVar26 < uVar19);\n                        }\n                        uVar13 = uVar26 - uVar19;\n                        uVar26 = uVar30;\n                        uVar30 = uVar30 >> (uVar19 & 0x3f);\n                        puVar31 = uVar23 + ((1 << (uVar19 & 0x1f)) - 1U & uVar26);\n                    }\n                    uVar23 = uVar13;\n                    if (uVar13 < 0xf) {\n                        if (puVar22 - arg2 < 2) {\n                            do {\n                                iVar2 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0xf08);\n                                uVar19 = iVar2;\n                                uVar23 = uVar13;\n                                if (iVar2 < 0) {\n                                    if (10 < uVar13) {\n                                        iVar6 = 10;\n                                        do {\n                                            iVar2 = *(arg1 + ((uVar30 >> (iVar6 & 0x3f) & 1) + ~uVar19) * 2 + 0x1708);\n                                            uVar19 = iVar2;\n                                            if (-1 < iVar2) goto code_r0x00018000313f;\n                                            uVar26 = iVar6 + 2;\n                                            iVar6 = iVar6 + 1;\n                                        } while (uVar26 <= uVar13);\n                                    }\n                                }\n                                else if ((uVar19 >> 9 != 0) && (uVar19 >> 9 <= uVar13)) break;\n                                if (arg2 < puVar22) {\n                                    uVar17 = *arg2;\n                                    arg2 = arg2 + 1;\n                                }\n                                else {\ncode_r0x0001800030f6:\n                                    if ((in_stack_00000038 & 2) != 0) {\n                                        iVar6 = 1;\n                                        *arg1 = 0x1a;\n                                        goto code_r0x0001800034d3;\n                                    }\n                                    uVar17 = 0;\n                                }\ncode_r0x00018000310a:\n                                uVar23 = uVar13 + 8;\n                                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                uVar13 = uVar23;\n                            } while (uVar23 < 0xf);\n                        }\n                        else {\n                            puVar3 = arg2 + 1;\n                            uVar5 = *arg2;\n                            arg2 = arg2 + 2;\n                            uVar30 = uVar30 | *puVar3 << (uVar13 + 8 & 0x3f) | uVar5 << (uVar13 & 0x3f);\n                            uVar23 = uVar13 + 0x10;\n                        }\n                    }\ncode_r0x00018000313f:\n                    uVar13 = *(arg1 + (uVar30 & 0x3ff) * 2 + 0xf08);\n                    uVar17 = uVar13;\n                    if (uVar13 < 0) {\n                        iVar6 = 10;\n                        do {\n                            uVar5 = iVar6;\n                            iVar6 = iVar6 + 1;\n                            uVar13 = *(arg1 + ((uVar30 >> (uVar5 & 0x3f) & 1) + ~uVar17) * 2 + 0x1708);\n                            uVar17 = uVar13;\n                        } while (uVar13 < 0);\n                    }\n                    else {\n                        iVar6 = uVar13 >> 9;\n                        uVar17 = uVar13 & 0x1ff;\n                    }\n                    uVar30 = uVar30 >> (iVar6 & 0x3f);\n                    uVar13 = uVar23 - iVar6;\n                    uVar23 = *(uVar17 * 4 + 0x18000cdb0);\n                    puVar20 = uVar23;\n                    uVar19 = *(uVar17 * 4 + 0x18000cd30);\n                    uStack288 = uVar23;\n                    if (uVar23 != 0) {\n                        uVar26 = uVar13;\n                        uStack312 = uVar19;\n                        if (uVar13 < uVar23) {\n                            do {\n                                if (arg2 < puVar22) {\n                                    uVar17 = *arg2;\n                                    arg2 = arg2 + 1;\n                                }\n                                else {\ncode_r0x0001800031cc:\n                                    if ((in_stack_00000038 & 2) != 0) {\n                                        iVar6 = 1;\n                                        *arg1 = 0x1b;\n                                        goto code_r0x0001800034d3;\n                                    }\n                                    uVar17 = 0;\n                                }\ncode_r0x0001800031e0:\n                                uVar26 = uVar13 + 8;\n                                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                                uVar23 = puVar20;\n                                uVar13 = uVar26;\n                            } while (uVar26 < uVar23);\n                        }\n                        uVar13 = uVar26 - uVar23;\n                        uVar26 = uVar30;\n                        uVar30 = uVar30 >> (uVar23 & 0x3f);\n                        uVar19 = uVar19 + ((1 << (uVar23 & 0x1f)) - 1U & uVar26);\n                    }\n                    uStack280 = in_stack_00000028 - puStack248;\n                    uStack312 = uVar19;\n                    if ((uStack280 < uVar19) && ((in_stack_00000038 & 4) != 0)) goto code_r0x0001800036aa;\n                    uVar23 = puVar31;\n                    puVar15 = (uStack280 - uVar19 & puStack272) + puStack248;\n                    puVar16 = puVar15;\n                    if (puVar15 < in_stack_00000028) {\n                        puVar16 = in_stack_00000028;\n                    }\n                    puVar20 = puVar31;\n                    arg4 = puStack248;\n                    puVar3 = puStack272;\n                    if (puVar14 < puVar16 + puVar31) {\n                        while (iVar6 = puVar31,  puVar31 = iVar6 - 1,  puVar16 = in_stack_00000028,  iVar6 != 0) {\ncode_r0x000180003327:\n                            if (puVar14 <= puVar16) {\n                                iVar6 = 2;\n                                *arg1 = 0x35;\n                                goto code_r0x0001800034d3;\n                            }\n                            in_stack_00000028 = puVar16 + 1;\n                            uVar17 = uStack280 - uVar19;\n                            uStack280 = uStack280 + 1;\n                            *puVar16 = *((uVar17 & puVar3) + arg4);\n                            puStack296 = in_stack_00000028;\n                        }\n                        goto code_r0x000180002d8e;\n                    }\n                    if ((uVar23 < 9) || (uVar19 < uVar23)) {\ncode_r0x0001800032d0:\n                        do {\n                            uVar23 = puVar31 - 3;\n                            puVar31 = uVar23;\n                            puStack296 = in_stack_00000028 + 3;\n                            *in_stack_00000028 = *puVar15;\n                            puVar16 = puVar15 + 3;\n                            *(in_stack_00000028 + 1) = *(puVar15 + 1);\n                            *(in_stack_00000028 + 2) = *(puVar15 + 2);\n                            puVar15 = puVar16;\n                            in_stack_00000028 = puStack296;\n                        } while (2 < uVar23);\n                        if (uVar23 < 1) goto code_r0x000180002d8e;\n                        *puStack296 = *puVar16;\n                        if (1 < uVar23) {\ncode_r0x0001800032b1:\n                            *(puStack296 + 1) = *(puVar16 + 1);\n                        }\n                    }\n                    else {\n                        puVar20 = (puVar31 & 0xfffffff8) + puVar15;\n                        do {\n                            puVar16 = puVar15 + 2;\n                            puStack296 = in_stack_00000028 + 2;\n                            *in_stack_00000028 = *puVar15;\n                            in_stack_00000028[1] = puVar15[1];\n                            puVar15 = puVar16;\n                            in_stack_00000028 = puStack296;\n                        } while (puVar16 < puVar20);\n                        uVar17 = puVar31 & 7;\n                        uVar24 = puVar31 & 7;\n                        uVar23 = uVar23 & 7;\n                        puVar31 = uVar23;\n                        if (2 < uVar23) goto code_r0x0001800032d0;\n                        if (uVar24 == 0) goto code_r0x000180002d8e;\n                        *puStack296 = *puVar16;\n                        if (uVar17 != 0 && uVar23 != 1) goto code_r0x0001800032b1;\n                    }\n                    puStack296 = puStack296 + puVar31;\n                    in_stack_00000028 = puStack296;\n                    goto code_r0x000180002d8e;\n                }\n            }\ncode_r0x000180002541:\n        } while ((*(arg1 + 5) & 1) == 0);\n        if ((in_stack_00000038 & 1) != 0) {\n            for (; uVar13 < (uVar13 & 7); uVar13 = uVar13 + 8) {\n                if (arg2 < puVar22) {\n                    uVar17 = *arg2;\n                    arg2 = arg2 + 1;\n                }\n                else {\ncode_r0x0001800036c7:\n                    if ((in_stack_00000038 & 2) != 0) {\n                        iVar6 = 1;\n                        *arg1 = 0x20;\n                        goto code_r0x0001800034d3;\n                    }\n                    uVar17 = 0;\n                }\ncode_r0x0001800036cf:\n                uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n            }\n            uVar30 = uVar30 >> (uVar13 & 7);\n            uVar13 = uVar13 - (uVar13 & 7);\n            puVar31 = NULL;\n            while (uVar23 = puVar31,  uVar23 < 4) {\n                if (uVar13 == 0) {\n                    if (arg2 < puVar22) {\n                        uVar19 = *arg2;\n                        arg2 = arg2 + 1;\n                    }\n                    else {\ncode_r0x000180003738:\n                        uVar23 = puVar31;\n                        if ((in_stack_00000038 & 2) != 0) {\n                            iVar6 = 1;\n                            *arg1 = 0x2a;\n                            goto code_r0x0001800034d3;\n                        }\n                        uVar19 = 0;\n                    }\n                }\n                else {\n                    for (; uVar13 < 8; uVar13 = uVar13 + 8) {\n                        if (arg2 < puVar22) {\n                            uVar17 = *arg2;\n                            arg2 = arg2 + 1;\n                        }\n                        else {\ncode_r0x000180003768:\n                            if ((in_stack_00000038 & 2) != 0) {\n                                iVar6 = 1;\n                                *arg1 = 0x29;\n                                goto code_r0x0001800034d3;\n                            }\n                            uVar17 = 0;\n                        }\ncode_r0x000180003778:\n                        uVar23 = puVar31;\n                        uVar30 = uVar30 | uVar17 << (uVar13 & 0x3f);\n                    }\n                    uVar19 = uVar30 & 0xff;\n                    uVar30 = uVar30 >> 8;\n                    uVar13 = uVar13 - 8;\n                }\ncode_r0x000180003740:\n                arg1[4] = arg1[4] << 8 | uVar19;\n                puVar31 = uVar23 + 1;\n            }\n        }\ncode_r0x0001800034a3:\n        iVar6 = 0;\n        *arg1 = 0x22;\n        goto code_r0x0001800034d3;\n    case 0x18000236d:\ncode_r0x000180002371:\n        iVar6 = -1;\n        *arg1 = 0x24;\n        goto code_r0x0001800034d7;\n    case 0x180002381:\n        if (puVar22 <= arg2) goto code_r0x00018000255e;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180002572;\n    case 0x180002399:\n        if (puVar22 <= arg2) goto code_r0x0001800025ac;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800025c0;\n    case 0x1800023b1:\n        if (puVar22 <= arg2) goto code_r0x0001800025ff;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180002613;\n    case 0x1800023ce:\n        if (puVar22 <= arg2) goto code_r0x000180002653;\n        arg2 = arg2 + 1;\n        *(puVar31 + 0xa4a + arg1) = *arg2;\n        puVar31 = uVar23 + 1;\n        goto code_r0x0001800025eb;\n    case 0x1800023f6:\n        if (puVar22 <= arg2) goto code_r0x0001800026c6;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800026da;\n    case 0x18000240e:\n        if (puVar22 <= arg2) goto code_r0x0001800027eb;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800027ff;\n    case 0x180002426:\n        if (puVar22 <= arg2) goto code_r0x000180002893;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800028a7;\n    case 0x180002445:\n        if (puVar22 <= arg2) goto code_r0x000180002bc6;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180002bda;\n    case 0x18000245d:\n        if (puVar22 <= arg2) goto code_r0x000180002cba;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180002cce;\n    case 0x180002475:\n        if (puVar22 <= arg2) goto code_r0x000180002f16;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180002f2a;\n    case 0x18000248d:\n        if (puVar22 <= arg2) goto code_r0x00018000302f;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180003043;\n    case 0x1800024a5:\n        if (puVar22 <= arg2) goto code_r0x0001800030f6;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x00018000310a;\n    case 0x1800024bd:\n        if (puVar22 <= arg2) goto code_r0x0001800031cc;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800031e0;\n    case 0x1800024d5:\n        puVar16 = in_stack_00000028;\n        goto code_r0x000180003327;\n    case 0x1800024e9:\n        goto code_r0x0001800024e9;\n    case 0x1800026fe:\n        goto code_r0x0001800026fe;\n    case 0x180002fc0:\n        goto code_r0x000180002fc0;\n    case 0x180003365:\n        goto code_r0x000180003365;\n    case 0x1800034a3:\n        goto code_r0x0001800034a3;\n    case 0x1800034c8:\ncode_r0x0001800034c8:\n        *arg1 = 0x27;\n        break;\n    case 0x18000366e:\ncode_r0x00018000366e:\n        *arg1 = 0x28;\n        break;\n    case 0x18000367a:\ncode_r0x00018000367a:\n        *arg1 = 10;\n        break;\n    case 0x180003686:\ncode_r0x000180003686:\n        *arg1 = 0x23;\n        break;\n    case 0x180003692:\ncode_r0x000180003692:\n        *arg1 = 0x11;\n        break;\n    case 0x18000369e:\ncode_r0x00018000369e:\n        *arg1 = 0x15;\n        break;\n    case 0x1800036aa:\ncode_r0x0001800036aa:\n        *arg1 = 0x25;\n        break;\n    case 0x1800036b6:\n        if (puVar22 <= arg2) goto code_r0x0001800036c7;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x0001800036cf;\n    case 0x180003716:\n        if (puVar22 <= arg2) goto code_r0x000180003768;\n        uVar17 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180003778;\n    case 0x180003727:\n        if (puVar22 <= arg2) goto code_r0x000180003738;\n        uVar19 = *arg2;\n        arg2 = arg2 + 1;\n        goto code_r0x000180003740;\n    }\ncode_r0x0001800034cf:\n    iVar6 = -1;\ncode_r0x0001800034d3:\n    uVar23 = puVar31;\ncode_r0x0001800034d7:\n    arg1[10] = uStack288;\n    *(arg1 + 0x10) = uStack280;\n    arg1[8] = uStack312;\n    arg1[9] = uVar23;\n    arg1[1] = uVar13;\n    *(arg1 + 0xe) = uVar30;\n    *piStack240 = arg2 - puStack304;\n    uVar30 = puStack296 - puStack224;\n    *puStack232 = uVar30;\n    if (((in_stack_00000038 & 9) != 0) && (-1 < iVar6)) {\n        uVar13 = *(arg1 + 7);\n        uVar23 = *(arg1 + 0x1e);\n        iVar21 = SUB168(ZEXT816(0x79baa6bb6398b6f7) * ZEXT816(uVar30) >> 0x40, 0);\n        uVar17 = uVar30 + ((uVar30 - iVar21 >> 1) + iVar21 >> 0xc) * -0x15b0;\n        while (uVar30 != 0) {\n            uVar19 = 0;\n            if (7 < uVar17) {\n                uVar26 = 7;\n                puVar22 = puStack224;\n                do {\n                    uVar26 = uVar26 + 8;\n                    uVar19 = uVar19 + 8;\n                    iVar6 = uVar13 + *puVar22;\n                    puStack224 = puVar22 + 2;\n                    iVar7 = iVar6 + *(puVar22 + 1);\n                    iVar8 = iVar7 + *(puVar22 + 2);\n                    iVar9 = iVar8 + *(puVar22 + 3);\n                    iVar10 = iVar9 + *(puVar22 + 1);\n                    iVar11 = iVar10 + *(puVar22 + 5);\n                    iVar12 = iVar11 + *(puVar22 + 6);\n                    uVar13 = iVar12 + *(puVar22 + 7);\n                    uVar23 = uVar23 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar12 + uVar13;\n                    puVar22 = puStack224;\n                } while (uVar26 < uVar17);\n            }\n            for (; uVar19 < uVar17; uVar19 = uVar19 + 1) {\n                uVar5 = *puStack224;\n                puStack224 = puStack224 + 1;\n                uVar13 = uVar13 + uVar5;\n                uVar23 = uVar23 + uVar13;\n            }\n            uVar13 = uVar13 % 0xfff1;\n            uVar23 = uVar23 % 0xfff1;\n            uVar30 = uVar30 - uVar17;\n            uVar17 = 0x15b0;\n        }\n        arg1[7] = uVar23 * 0x10000 + uVar13;\n    }\ncode_r0x0001800037de:\n    fcn.180003ca0(uStack72 ^ auStack344);\n    return;\ncode_r0x000180002538:\n    if (puVar31 == 0) goto code_r0x000180002541;\ncode_r0x000180003365:\n    if (puStack264 <= in_stack_00000028) {\n        iVar6 = 2;\n        *arg1 = 9;\n        goto code_r0x0001800034d3;\n    }\ncode_r0x0001800024e9:\n    if (puVar22 <= arg2) {\n        if ((in_stack_00000038 & 2) == 0) goto code_r0x00018000366e;\n        iVar6 = 1;\n        *arg1 = 0x26;\n        goto code_r0x0001800034d3;\n    }\n    puVar16 = puVar22 - arg2;\n    puVar20 = puStack264 - in_stack_00000028;\n    puVar14 = puVar16;\n    if (puVar20 < puVar16) {\n        puVar14 = puVar20;\n    }\n    puVar15 = puVar31;\n    if ((puVar14 < puVar31) && (puVar15 = puVar16,  puVar20 < puVar16)) {\n        puVar15 = puVar20;\n    }\n    puVar20 = arg2;\n    fcn.180004a30(in_stack_00000028, arg2, puVar15);\n    in_stack_00000028 = in_stack_00000028 + puVar15;\n    arg2 = arg2 + puVar15;\n    puVar31 = puVar31 - puVar15;\n    puStack296 = in_stack_00000028;\n    goto code_r0x000180002538;\n}\n",
        "token_count": 14052
    },
    "1800016f": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid fcn.1800016f0(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    uint32_t uVar7;\n    \n    iVar6 = *arg1;\n    iVar5 = 0;\n    uVar4 = *(iVar6 + 0x30) & 0xffffffff00000000;\n    if (*(iVar6 + 6) != 0) {\n        puVar3 = *(iVar6 + 0x14) + 0x3c + iVar6;\n        do {\n            uVar1 = *puVar3;\n            if ((uVar1 >> 0x19 & 1) == 0) {\n                uVar7 = *(((uVar1 >> 0x1f) + ((uVar1 >> 0x1e & 1) + (uVar1 >> 0x1d & 1) * 2) * 2) * 4 + 0x18001b8f0);\n                if ((uVar1 >> 0x1a & 1) != 0) {\n                    uVar7 = uVar7 | 0x200;\n                }\n                uVar2 = puVar3[-5];\n                if (uVar2 == 0) {\n                    if ((uVar1 & 0x40) == 0) {\n                        if (-1 < uVar1) goto code_r0x0001800017ce;\n                        uVar2 = *(iVar6 + 0x24);\n                    }\n                    else {\n                        uVar2 = *(iVar6 + 0x20);\n                    }\n                    if (uVar2 == 0) goto code_r0x0001800017ce;\n                }\n                (*_sym.imp.KERNEL32.dll_VirtualProtect)(puVar3[-7] | uVar4, uVar2, uVar7);\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3[-7] | uVar4, puVar3[-5], 0x4000);\n            }\ncode_r0x0001800017ce:\n            iVar6 = *arg1;\n            iVar5 = iVar5 + 1;\n            puVar3 = puVar3 + 10;\n        } while (iVar5 < *(iVar6 + 6));\n    }\n    return;\n}\n",
        "token_count": 540
    },
    "1800080b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1800080b4(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int64_t iVar8;\n    uchar auStack136 [32];\n    uchar *puStack104;\n    uchar auStack88 [8];\n    uchar auStack80 [8];\n    uint8_t uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x18000f000 ^ auStack136;\n    iVar2 = fcn.180006d4c();\n    iVar8 = 0;\n    if (*0x18001c9a8 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(L\"USER32.DLL\");\n        if ((iVar3 == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"MessageBoxW\"),  iVar4 == 0))\n        goto code_r0x0001800082a0;\n        *0x18001c9a8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar4);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetActiveWindow\");\n        *0x18001c9b0 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetLastActivePopup\");\n        *0x18001c9b8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationW\");\n        *0x18001c9c8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        if (*0x18001c9c8 != 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x18000bf50);\n            *0x18001c9c0 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        }\n    }\n    if ((*0x18001c9c0 == iVar2) || (*0x18001c9c8 == iVar2)) {\ncode_r0x00018000823c:\n        if (((*0x18001c9b0 != iVar2) &&\n            (((pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL && (iVar8 = (*pcVar6)(),  iVar8 != 0))\n             && (*0x18001c9b8 != iVar2)))) && (pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL)) {\n            iVar8 = (*pcVar6)(iVar8);\n        }\n    }\n    else {\n        pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001c9c0);\n        pcVar7 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001c9c8);\n        if ((pcVar6 == NULL) || (pcVar7 == NULL)) goto code_r0x00018000823c;\n        iVar3 = (*pcVar6)();\n        if (iVar3 != 0) {\n            puStack104 = auStack88;\n            iVar1 = (*pcVar7)(iVar3, 1, auStack80);\n            if ((iVar1 != 0) && ((uStack72 & 1) != 0)) goto code_r0x00018000823c;\n        }\n        arg3._0_4_ = arg3 | 0x200000;\n    }\n    pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001c9a8);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(iVar8, arg1, arg2, arg3);\n    }\ncode_r0x0001800082a0:\n    fcn.180003ca0(uStack64 ^ auStack136);\n    return;\n}\n",
        "token_count": 941
    },
    "null": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid sym.CAST.dll_CAST_encryptW(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int16_t *arg2;\n    int16_t **ppiVar5;\n    ulong arg1;\n    int16_t *piVar6;\n    int64_t iVar7;\n    int16_t *piVar8;\n    ulong lpName;\n    ulong var_1f78h;\n    ulong var_1f80h;\n    ulong var_1f88h;\n    ulong var_1f90h;\n    ulong var_1f98h;\n    ulong var_1fa1h;\n    ulong var_20b2h;\n    ulong var_22c0h;\n    uint uStack888;\n    uint uStack884;\n    uint uStack880;\n    uint uStack876;\n    ushort uStack872;\n    ulong uStack864;\n    ulong uStack856;\n    ulong uStack848;\n    ulong uStack840;\n    char cStack832;\n    uchar uStack824;\n    uchar auStack823 [271];\n    int16_t iStack552;\n    uchar auStack550 [526];\n    uint64_t uStack24;\n    ulong uStack16;\n    \n    uStack16 = 0x1800039d2;\n    iVar4 = fcn.180008850(arg3);\n    iVar4 = -iVar4;\n    uStack24 = *0x18000f000 ^ &stack0xfffffffffffffff8 + iVar4;\n    uStack888 = 0x3ce5f810;\n    uStack884 = 0xf1048a06;\n    uStack880 = 0xad6a801b;\n    uStack876 = 0xa369a128;\n    uStack872 = 0x802a;\n    iStack552 = 0;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180003a37;\n    fcn.180006ac0(&stack0xfffffffffffffdda, 0, 0x206);\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180003a45;\n    arg2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40);\n    uStack824 = 0;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180003a63;\n    fcn.180006ac0(&stack0xfffffffffffffcc9, 0, 0x103);\n    *(&stack0x00000038 + iVar4) = 0;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180003a75;\n    ppiVar5 = (*_sym.imp.SHELL32.dll_CommandLineToArgvW)(arg3, &stack0x00000038 + iVar4);\n    if ((ppiVar5 != NULL) && (*(&stack0x00000038 + iVar4) == 2)) {\n        piVar6 = *ppiVar5;\n        piVar8 = &stack0xfffffffffffffdd8;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n            *piVar8 = iVar1;\n            piVar8 = piVar8 + 1;\n        } while (iVar1 != 0);\n        piVar6 = ppiVar5[1];\n        piVar8 = arg2;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n            *piVar8 = iVar1;\n            piVar8 = piVar8 + 1;\n        } while (iVar1 != 0);\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180003afd;\n        (*_sym.imp.KERNEL32.dll_LocalFree)();\n        iVar7 = -1;\n        *(&stack0x00000030 + iVar4) = 0;\n        *(&stack0x00000028 + iVar4) = 0;\n        piVar6 = &stack0xfffffffffffffdd8;\n        do {\n            if (iVar7 == 0) break;\n            iVar7 = iVar7 + -1;\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        *(&stack0x00000020 + iVar4) = ~iVar7 - 1;\n        *(&stack0x00000018 + iVar4) = &stack0xfffffffffffffcc8;\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b45;\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0x200, &stack0xfffffffffffffdd8, 0xffffffff);\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b51;\n        fcn.1800038e0(&stack0xfffffffffffffc88);\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b6a;\n        iVar3 = fcn.180003df0(&stack0xfffffffffffffc88, &stack0xfffffffffffffcc8, 0x10);\n        if (iVar3 == 0) {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b83;\n            (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0, &stack0xfffffffffffffc88);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b89;\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar3 == 0xb7) {\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x180003b98;\n                (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            uStack864 = str.tav_C.mLq_d8a_hCn__A6US_5__j._0_8_;\n            uStack856 = str.tav_C.mLq_d8a_hCn__A6US_5__j._8_8_;\n            uStack848 = str.tav_C.mLq_d8a_hCn__A6US_5__j._16_8_;\n            uStack840 = str.tav_C.mLq_d8a_hCn__A6US_5__j._24_8_;\n            cStack832 = str.tav_C.mLq_d8a_hCn__A6US_5__j[32];\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003bf6;\n            fcn.180001180(&stack0x00000048 + iVar4, &stack0xfffffffffffffca0, &stack0xfffffffffffffca0);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003c14;\n            fcn.1800013e0(&stack0x00000048 + iVar4, 0x1800104e0, 0x1800104e0, 0xb410);\n            *(&stack0x0000003c + iVar4) = 0x708a0;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003c2c;\n            arg1 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x708a0);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003c3c;\n            fcn.180001fe0(arg1, &stack0x0000003c + iVar4);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003c47;\n            fcn.180001a30(arg1, arg2);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180003c56;\n            (*_sym.imp.KERNEL32.dll_FreeLibraryAndExitThread)(*0x18001ca08, 0);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180003a8e;\n    fcn.180003ca0(uStack24 ^ &stack0xfffffffffffffff8 + iVar4);\n    return;\n}\n",
        "token_count": 1842
    },
    "18000180": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180001800(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t *piVar1;\n    int32_t *piVar2;\n    int64_t iVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint32_t *puVar7;\n    uint32_t *puVar8;\n    int64_t iVar9;\n    \n    iVar3 = arg1[1];\n    if (*(*arg1 + 0xb4) != 0) {\n        puVar7 = *(*arg1 + 0xb0) + iVar3;\n        uVar5 = *puVar7;\n        while (uVar5 != 0) {\n            uVar6 = 0;\n            iVar9 = uVar5 + iVar3;\n            puVar8 = puVar7 + 2;\n            if ((puVar7[1] - 8 & 0xfffffffffffffffe) != 0) {\n                do {\n                    uVar4 = *puVar8 >> 0xc;\n                    uVar5 = *puVar8 & 0xfff;\n                    if (uVar4 == 3) {\n                        piVar2 = uVar5 + iVar9;\n                        *piVar2 = *piVar2 + arg2;\n                    }\n                    else if (uVar4 == 10) {\n                        piVar1 = uVar5 + iVar9;\n                        *piVar1 = *piVar1 + arg2;\n                    }\n                    uVar6 = uVar6 + 1;\n                    puVar8 = puVar8 + 2;\n                } while (uVar6 < puVar7[1] - 8 >> 1);\n            }\n            puVar7 = puVar7 + puVar7[1];\n            uVar5 = *puVar7;\n        }\n    }\n    return;\n}\n",
        "token_count": 407
    },
    "1800018b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800018b0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint64_t *puVar8;\n    uint32_t *puVar9;\n    uint64_t *puVar10;\n    \n    iVar1 = arg1[1];\n    if (*(*arg1 + 0x94) == 0) {\n        return 1;\n    }\n    puVar9 = *(*arg1 + 0x90) + iVar1;\n    iVar2 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar9, 0x14);\n    if (iVar2 == 0) {\n        while( true ) {\n            if (puVar9[3] == 0) {\n                return 1;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n            if (iVar3 == -1) break;\n            iVar4 = fcn.180003d00(arg1[2], *(arg1 + 3) + 1 << 3);\n            arg1[2] = iVar4;\n            if (iVar4 == 0) {\n                return 0;\n            }\n            *(iVar4 + *(arg1 + 3) * 8) = iVar3;\n            *(arg1 + 3) = *(arg1 + 3) + 1;\n            if (*puVar9 == 0) {\n                puVar8 = puVar9[4] + iVar1;\n                puVar10 = puVar8;\n            }\n            else {\n                puVar8 = iVar1 + *puVar9;\n                puVar10 = puVar9[4] + iVar1;\n            }\n            uVar5 = *puVar8;\n            if (uVar5 != 0) {\n                iVar4 = puVar10 - puVar8;\n                do {\n                    uVar7 = uVar5 & 0xffff;\n                    if ((uVar5 & 0x8000000000000000) == 0) {\n                        uVar7 = uVar5 + 2 + iVar1;\n                    }\n                    iVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, uVar7);\n                    *(iVar4 + puVar8) = iVar6;\n                    if (iVar6 == 0) {\n                        return 0;\n                    }\n                    uVar5 = puVar8[1];\n                    puVar8 = puVar8 + 1;\n                } while (uVar5 != 0);\n            }\n            puVar9 = puVar9 + 5;\n            iVar2 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar9, 0x14);\n            if (iVar2 != 0) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 651
    },
    "180001cc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180001cc0(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t arg1_00;\n    int64_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint64_t arg3;\n    uint64_t uStackX8;\n    uint64_t uStackX16;\n    \n    arg1_00 = arg1[5];\n    if (arg1_00 == 0) {\n        return 0xfffffffe;\n    }\n    iVar8 = *(arg1_00 + 0x2b00);\n    uVar1 = *(arg1 + 1);\n    *(arg1_00 + 0x2b00) = 0;\n    if (-1 < *(arg1_00 + 0xab0c)) {\n        *(arg1_00 + 0x2b04) = *(arg1_00 + 0x2b04) | 1;\n        if (iVar8 == 0) {\n            uVar3 = *(arg1_00 + 0x2afc);\n            if (uVar3 != 0) {\n                iVar7 = arg1[2];\n                uVar1 = *(arg1 + 3);\n                if (uVar3 < *(arg1 + 3)) {\n                    uVar1 = uVar3;\n                }\n                fcn.180004a30(iVar7, *(arg1_00 + 11000) + 0x2b0c + arg1_00, uVar1);\n                iVar8 = *(arg1_00 + 11000);\n                *(arg1 + 3) = *(arg1 + 3) - uVar1;\n                *(arg1 + 0x1c) = *(arg1 + 0x1c) + uVar1;\n                *(arg1_00 + 0x2afc) = *(arg1_00 + 0x2afc) - uVar1;\n                *(arg1_00 + 11000) = iVar8 + uVar1 & 0x7fff;\n                arg1[2] = uVar1 + iVar7;\n                if (*(arg1_00 + 0xab0c) == 0) {\n                    if (*(arg1_00 + 0x2afc) == 0) {\n                        return 1;\n                    }\n                    return 0;\n                }\n                return 0;\n            }\n            do {\n                uStackX8 = *(arg1 + 1);\n                uStackX16 = 0x8000 - *(arg1_00 + 11000);\n                iVar8 = fcn.180002120(arg1_00, *arg1, &uStackX8, arg1_00 + 0x2b0c);\n                *(arg1 + 1) = *(arg1 + 1) - uStackX8;\n                *(arg1 + 0xc) = *(arg1 + 0xc) + uStackX8;\n                uVar3 = *(arg1 + 3);\n                iVar7 = arg1[2];\n                *arg1 = *arg1 + (uStackX8 & 0xffffffff);\n                *(arg1_00 + 0xab0c) = iVar8;\n                uVar4 = *(arg1_00 + 11000);\n                *(arg1 + 0x4c) = *(arg1_00 + 0x1c);\n                *(arg1_00 + 0x2afc) = uStackX16;\n                arg3 = uVar3;\n                if (uStackX16 < uVar3) {\n                    arg3 = uStackX16 & 0xffffffff;\n                }\n                iVar9 = arg3;\n                fcn.180004a30(iVar7, uVar4 + 0x2b0c + arg1_00, arg3);\n                iVar5 = *(arg1_00 + 11000);\n                *(arg1_00 + 0x2afc) = *(arg1_00 + 0x2afc) - iVar9;\n                *(arg1 + 3) = *(arg1 + 3) - iVar9;\n                *(arg1 + 0x1c) = *(arg1 + 0x1c) + iVar9;\n                iVar6 = *(arg1_00 + 0x2afc);\n                arg1[2] = arg3 + iVar7;\n                *(arg1_00 + 11000) = iVar5 + iVar9 & 0x7fff;\n                if (iVar8 < 0) {\n                    return 0xfffffffd;\n                }\n                if (iVar8 == 1) {\n                    if (uVar1 == 0) {\n                        return 0xfffffffb;\n                    }\n                }\n                else if (iVar8 == 0) {\n                    if (iVar6 != 0) {\n                        return 0xfffffffb;\n                    }\n                    return 1;\n                }\n            } while (*(arg1 + 3) != 0);\n            return 0xfffffffb;\n        }\n        uStackX16 = *(arg1 + 3);\n        uStackX8 = uVar1;\n        iVar8 = fcn.180002120(arg1_00, *arg1, &uStackX8, arg1[2]);\n        *(arg1 + 1) = *(arg1 + 1) - uStackX8;\n        *(arg1 + 0xc) = *(arg1 + 0xc) + uStackX8;\n        *arg1 = *arg1 + (uStackX8 & 0xffffffff);\n        uVar2 = *(arg1_00 + 0x1c);\n        *(arg1 + 3) = *(arg1 + 3) - uStackX16;\n        *(arg1 + 0x1c) = *(arg1 + 0x1c) + uStackX16;\n        *(arg1 + 0x4c) = uVar2;\n        *(arg1_00 + 0xab0c) = iVar8;\n        arg1[2] = arg1[2] + (uStackX16 & 0xffffffff);\n        if (-1 < iVar8) {\n            if (iVar8 == 0) {\n                return 1;\n            }\n            *(arg1_00 + 0xab0c) = 0xffffffff;\n            return 0xfffffffb;\n        }\n    }\n    return 0xfffffffd;\n}\n",
        "token_count": 1432
    },
    "180001fe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018000201a)\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.180001fe0(ulong arg1, uint *arg2)\n\n{\n    int32_t iVar1;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    uint *var_38h;\n    code *var_30h;\n    code *var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    \n    fcn.180006ac0(&var_60h, 0, 0x58);\n    var_48h._0_4_ = *arg2;\n    var_60h = 0x1800104e0;\n    if (var_30h == NULL) {\n        var_30h = 0x180001ca0;\n    }\n    var_18h = 0;\n    if (var_28h == NULL) {\n        var_28h = 0x180001cb0;\n    }\n    var_40h = 0;\n    var_58h = 0xb410;\n    var_48h._4_4_ = 0;\n    var_bp_10h._0_4_ = 0;\n    var_50h = arg1;\n    var_38h = (*var_30h)(var_20h, 1, 0xab10);\n    if (var_38h == NULL) {\n        iVar1 = -4;\n    }\n    else {\n        *var_38h = 0;\n        *(var_38h + 0xabe) = 0;\n        var_38h[0x2ac3] = 1;\n        *(var_38h + 0xac0) = 1;\n        var_38h[0xac2] = 0xf;\n        iVar1 = fcn.180001cc0(&var_60h);\n        if (iVar1 == 1) {\n            *arg2 = var_48h._4_4_;\n            if (var_38h != NULL) {\n                (*var_28h)(var_20h);\n            }\n            iVar1 = 0;\n        }\n        else {\n            if (var_38h != NULL) {\n                (*var_28h)(var_20h);\n            }\n            if ((iVar1 == -5) && (var_58h == 0)) {\n                iVar1 = -3;\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 574
    },
    "180003fd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001800040f5)\n// WARNING: Removing unreachable block (ram,0x0001800040a1)\n// WARNING: Removing unreachable block (ram,0x0001800040ab)\n\nint32_t fcn.180003fdc(int64_t arg1, int64_t arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong in_R8;\n    int64_t iVar4;\n    \n    if (arg1 != 0) {\n        iVar1 = fcn.180003f60(arg1);\n        if (iVar1 == 0) {\n            if ((*(arg1 + 0x18) & 0x4000) == 0) {\n                iVar1 = 0;\n            }\n            else {\n                uVar3 = fcn.180005c18(arg1);\n                iVar1 = fcn.180005c40(uVar3);\n                iVar1 = -(iVar1 != 0);\n            }\n        }\n        else {\n            iVar1 = -1;\n        }\n        return iVar1;\n    }\n    iVar1 = 0;\n    fcn.180006124(1, arg2);\n    for (uVar3 = 0; uVar3 < *0x18001dc40; uVar3 = uVar3 + 1) {\n        iVar4 = uVar3;\n        if ((*(*0x18001cc20 + iVar4 * 8) != 0) && (arg2 = *(*0x18001cc20 + iVar4 * 8),  (*(arg2 + 0x18) & 0x83) != 0)) {\n            fcn.1800062d4(uVar3, arg2, in_R8);\n            arg1_00 = *(*0x18001cc20 + iVar4 * 8);\n            if (((*(arg1_00 + 0x18) & 0x83) != 0) &&\n               (((*(arg1_00 + 0x18) & 2) != 0 && (iVar2 = fcn.180003fdc(arg1_00, arg2),  iVar2 == -1)))) {\n                iVar1 = -1;\n            }\n            arg2 = *(*0x18001cc20 + iVar4 * 8);\n            int.180006354(uVar3, arg2);\n        }\n    }\n    fcn.180006024(1, arg2);\n    return iVar1;\n}\n",
        "token_count": 553
    },
    "1800086b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.1800086b0(uint16_t *arg1, uint8_t *arg2, uint64_t arg3)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t var_20h;\n    int64_t var_10h;\n    ulong var_8h;\n    \n    if ((arg2 != NULL) && (arg3 != 0)) {\n        if (*arg2 != 0) {\n            fcn.180006ca8(&var_20h, 0);\n            if (*(var_20h + 0x14) != 0) {\n                iVar2 = fcn.1800086b8(*arg2, &var_20h);\n                if (iVar2 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(*(var_20h + 4), 9, arg2, 1, arg1, arg1 != NULL)\n                    ;\n                    if (iVar2 != 0) goto code_r0x0001800085b4;\n                }\n                else {\n                    iVar2 = *(var_20h + 0x10c);\n                    if ((((1 < iVar2) && (iVar2 <= arg3)) &&\n                        (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                           (*(var_20h + 4), 9, arg2, iVar2, arg1, arg1 != NULL),  iVar2 != 0)) ||\n                       ((*(var_20h + 0x10c) <= arg3 && (arg2[1] != 0)))) {\n                        uVar1 = *(var_20h + 0x10c);\n                        if (var_8h == '\\0') {\n                            return uVar1;\n                        }\n                        *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                        return uVar1;\n                    }\n                }\n                puVar3 = fcn.180004648();\n                *puVar3 = 0x2a;\n                if (var_8h != '\\0') {\n                    *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                }\n                return 0xffffffff;\n            }\n            if (arg1 != NULL) {\n                *arg1 = *arg2;\n            }\ncode_r0x0001800085b4:\n            if (var_8h != '\\0') {\n                *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n            }\n            return 1;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 621
    },
    "18000160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "allocate memory",
            "allocate RW memory"
        ],
        "decompiled_code": "\nvoid fcn.180001600(int64_t arg1, int64_t arg2, int64_t *arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int32_t iVar5;\n    uint32_t *puVar6;\n    \n    iVar2 = *arg3;\n    iVar3 = arg3[1];\n    iVar5 = 0;\n    if (*(iVar2 + 6) != 0) {\n        puVar6 = *(iVar2 + 0x14) + 0x28 + iVar2;\n        do {\n            if (*puVar6 == 0) {\n                iVar1 = *(arg2 + 0x38);\n                if (0 < iVar1) {\n                    uVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar6[-1] + iVar3, iVar1, 0x1000, 4);\n                    puVar6[-2] = uVar4;\n                    fcn.180006ac0(uVar4, 0, iVar1);\n                }\n            }\n            else {\n                uVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar6[-1] + iVar3, *puVar6, 0x1000, 4);\n                fcn.180004a30(uVar4, puVar6[1] + arg1, *puVar6);\n                puVar6[-2] = uVar4;\n            }\n            iVar5 = iVar5 + 1;\n            puVar6 = puVar6 + 10;\n        } while (iVar5 < *(*arg3 + 6));\n    }\n    return;\n}\n",
        "token_count": 369
    },
    "180001a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.180001a30(int16_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t *arg3;\n    int64_t arg1_00;\n    code *pcVar4;\n    int32_t *arg2_00;\n    \n    if (*arg1 != 0x5a4d) {\n        return NULL;\n    }\n    arg2_00 = *(arg1 + 0x1e) + arg1;\n    if (*arg2_00 != 0x4550) {\n        return NULL;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(*(arg2_00 + 0xc), arg2_00[0x14], 0x2000, 4);\n    if ((iVar2 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, arg2_00[0x14], 0x2000, 4),  iVar2 == 0)) {\n        return NULL;\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    arg3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3, 0, 0x20);\n    arg3[1] = iVar2;\n    arg3[2] = 0;\n    arg3[3] = 0;\n    (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar2, arg2_00[0x14], 0x1000, 4);\n    arg1_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar2, arg2_00[0x15], 0x1000, 4);\n    fcn.180004a30(arg1_00, arg1, arg2_00[0x15] + *(arg1 + 0x1e));\n    iVar1 = *(arg1 + 0x1e);\n    *arg3 = iVar1 + arg1_00;\n    *(iVar1 + arg1_00 + 0x30) = iVar2;\n    fcn.180001600(arg1, arg2_00, arg3);\n    if (iVar2 - *(arg2_00 + 0xc) != 0) {\n        fcn.180001800(arg3, iVar2 - *(arg2_00 + 0xc));\n    }\n    iVar1 = fcn.1800018b0(arg3);\n    if (iVar1 != 0) {\n        fcn.1800016f0(arg3);\n        if (*(*arg3 + 0x28) == 0) {\n            return arg3;\n        }\n        pcVar4 = *(*arg3 + 0x28) + iVar2;\n        if ((pcVar4 != NULL) && (iVar1 = (*pcVar4)(iVar2, 1, arg2),  iVar1 != 0)) {\n            *(arg3 + 0x1c) = 1;\n            return arg3;\n        }\n    }\n    fcn.180001be0(arg3);\n    return NULL;\n}\n",
        "token_count": 694
    },
    "180001be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001be0(int64_t *arg1)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    \n    if (arg1 != NULL) {\n        uVar3 = 0;\n        if (*(arg1 + 0x1c) != 0) {\n            (*(*(*arg1 + 0x28) + arg1[1]))(arg1[1], 0, 0);\n            *(arg1 + 0x1c) = 0;\n        }\n        if (arg1[2] != 0) {\n            uVar4 = uVar3;\n            if (0 < *(arg1 + 3)) {\n                do {\n                    if (*(arg1[2] + uVar4) != -1) {\n                        (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(arg1[2] + uVar4));\n                    }\n                    uVar2 = uVar3 + 1;\n                    uVar3 = uVar2;\n                    uVar4 = uVar4 + 8;\n                } while (uVar2 < *(arg1 + 3));\n            }\n            fcn.180003cc0(arg1[2]);\n        }\n        if (arg1[1] != 0) {\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(arg1[1], 0, 0x8000);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, arg1);\n    }\n    return;\n}\n",
        "token_count": 363
    },
    "180003ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180003ea8(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t uVar4;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        uVar4 = 1;\n        if (arg1 != 0) {\n            uVar4 = arg1;\n        }\n        do {\n            if (*0x18001beb0 == 0) {\n                fcn.180005394();\n                fcn.180005134(0x1e);\n                fcn.180004da0(0xff);\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x18001beb0, 0, uVar4);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            if (*0x18001bec0 == 0) {\n                puVar3 = fcn.180004648();\n                *puVar3 = 0xc;\n                break;\n            }\n            iVar1 = fcn.180004750(arg1);\n        } while (iVar1 != 0);\n        puVar3 = fcn.180004648();\n        *puVar3 = 0xc;\n    }\n    else {\n        fcn.180004750(arg1);\n        puVar3 = fcn.180004648();\n        *puVar3 = 0xc;\n        iVar2 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 327
    },
    "180003cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003cc0(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x18001beb0, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.180004648();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.180004600(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "1800038e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.1800038e0(uint8_t *param_1)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    uchar auStackX24 [16];\n    ulong uStack16;\n    \n    uStack16 = 0x1800038f0;\n    iVar2 = fcn.180008850();\n    iVar2 = -iVar2;\n    *(&stack0x00002050 + iVar2) = *0x18000f000 ^ &stack0xfffffffffffffff8 + iVar2;\n    uVar1 = *param_1;\n    *(&stack0x00002028 + iVar2) = str.tav_C.mLq_d8a_hCn__A6US_5__j._0_8_;\n    *(&stack0x00002030 + iVar2) = str.tav_C.mLq_d8a_hCn__A6US_5__j._8_8_;\n    *(&stack0x00002038 + iVar2) = str.tav_C.mLq_d8a_hCn__A6US_5__j._16_8_;\n    *(&stack0x00002040 + iVar2) = str.tav_C.mLq_d8a_hCn__A6US_5__j._24_8_;\n    (&stack0x00002048)[iVar2] = str.tav_C.mLq_d8a_hCn__A6US_5__j[32];\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x18000396f;\n    fcn.180001180(&stack0x00000018 + iVar2, &stack0x00002028 + iVar2, &stack0x00002028 + iVar2);\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x180003983;\n    fcn.1800013e0(&stack0x00000018 + iVar2, param_1 + 1, param_1, uVar1);\n    *(param_1 + uVar1) = 0;\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x180003999;\n    fcn.180003ca0(*(&stack0x00002050 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 507
    },
    "18000775": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007754(void)\n\n{\n    code **ppcVar1;\n    \n    for (ppcVar1 = 0x18000d708; ppcVar1 < 0x18000d708; ppcVar1 = ppcVar1 + 1) {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "18000a05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a058(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x180010410) {\n            fcn.180003cc0(*arg1);\n        }\n        if (arg1[1] != *0x180010418) {\n            fcn.180003cc0(arg1[1]);\n        }\n        if (arg1[2] != *0x180010420) {\n            fcn.180003cc0(arg1[2]);\n        }\n        if (arg1[0xb] != *0x180010468) {\n            fcn.180003cc0(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x180010470) {\n            fcn.180003cc0(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "18000411": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001800040b3)\n// WARNING: Removing unreachable block (ram,0x0001800040b8)\n// WARNING: Removing unreachable block (ram,0x0001800040be)\n// WARNING: Removing unreachable block (ram,0x0001800040c6)\n// WARNING: Removing unreachable block (ram,0x0001800040ca)\n\nint32_t fcn.180004114(ulong noname_0, int64_t arg2)\n\n{\n    int64_t arg1;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong in_R8;\n    int64_t iVar4;\n    \n    iVar3 = 0;\n    fcn.180006124(1, arg2);\n    for (uVar2 = 0; uVar2 < *0x18001dc40; uVar2 = uVar2 + 1) {\n        iVar4 = uVar2;\n        if ((*(*0x18001cc20 + iVar4 * 8) != 0) && (arg2 = *(*0x18001cc20 + iVar4 * 8),  (*(arg2 + 0x18) & 0x83) != 0)) {\n            fcn.1800062d4(uVar2, arg2, in_R8);\n            arg1 = *(*0x18001cc20 + iVar4 * 8);\n            if (((*(arg1 + 0x18) & 0x83) != 0) && (iVar1 = fcn.180003fdc(arg1, arg2),  iVar1 != -1)) {\n                iVar3 = iVar3 + 1;\n            }\n            arg2 = *(*0x18001cc20 + iVar4 * 8);\n            int.180006354(uVar2, arg2);\n        }\n    }\n    fcn.180006024(1, arg2);\n    return iVar3;\n}\n",
        "token_count": 429
    }
}