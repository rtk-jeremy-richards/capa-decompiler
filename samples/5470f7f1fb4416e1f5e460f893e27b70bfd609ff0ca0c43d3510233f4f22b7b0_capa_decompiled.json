{
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401080": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00401080(int16_t *arg1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    iVar1 = *arg1;\n    while (iVar1 != 0) {\n        arg1 = arg1 + 1;\n        iVar2 = iVar2 + 1;\n        iVar1 = *arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 94
    },
    "004016e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.004016e0(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong in_RDX;\n    code *pcVar5;\n    ulong uVar6;\n    ulong uVar7;\n    ulong auStackX8 [4];\n    code *pcStack192;\n    uint uStack184;\n    uint uStack180;\n    uint uStack176;\n    uint uStack172;\n    ushort uStack168;\n    ushort uStack166;\n    uint uStack164;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack152;\n    uchar uStack145;\n    uchar uStack142;\n    ulong uStack128;\n    uchar auStack120 [8];\n    int32_t iStack112;\n    \n    uStack128 = 0xfffffffffffffffe;\n    *0x41a7d0 = arg1;\n    iVar1 = fcn.00402160(arg1);\n    if (iVar1 == 0) {\n        uVar2 = 1;\n    }\n    else {\n        iVar3 = fcn.00403c80(0xc70);\n        if (iVar3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = fcn.00403a10(iVar3, in_RDX, 100);\n        }\n        uVar6 = 0;\n        if (iVar3 == 0) {\n            uVar2 = 2;\n        }\n        else {\n            uStack184 = 0;\n            uStack180 = 0;\n            uStack176 = 0x280;\n            uStack172 = 0x1e0;\n            fcn.00404640(&uStack168, 0, 0x28);\n            uStack168 = 0x28;\n            uStack166 = 1;\n            uStack164 = 0x25;\n            uStack160 = 0;\n            uStack159 = 0x18;\n            uStack152 = 8;\n            uStack145 = 0x10;\n            uStack142 = 0;\n            iVar4 = fcn.00401a60(arg1, 0, 0xcf0000, 0);\n            if (iVar4 == 0) {\n                uVar2 = 3;\n            }\n            else {\n                (*_sym.imp.USER32.dll_SetWindowTextA)(iVar4, \"OpenGL / Starwars example\");\n                iVar1 = (*_sym.imp.USER32.dll_SetWindowLongA)(iVar4, 0, 0x401000);\n                *0x41a7c8 = iVar1;\n                iVar4 = fcn.00401070();\n                auStackX8[0] = 0;\n                pcStack192 = NULL;\n                *0x41a7c0 = 0x401610;\n                *0x41a7d8 = 0x401630;\n                pcVar5 = 0x401650;\n                iVar1 = fcn.00401670();\n                if (iVar1 != 3) {\n                    uVar7 = uVar6;\n                    if (0x12 < *(*(iVar4 + 0x20) + 0x70)) {\n                        uVar6 = 0x1367;\n                        uVar7 = 0x1368;\n                        *0x419000 = 0;\n                        *0x419004 = 0;\n                        *0x419008 = 0;\n                        *0x419010 = 0;\n                        *0x41900c = 0;\n                        *0x419014 = 0;\n                        *0x41a7d8 = fcn.00401190;\n                        *0x41a7c0 = 0x401130;\n                        pcVar5 = 0x401310;\n                    }\n                    (*pcVar5)(uVar6, &pcStack192);\n                    (*pcVar5)(uVar7, auStackX8);\n                    *0x41a7f8 = 0;\n                    *0x41a7e0 = 0;\n                    *0x41a7e8 = 1;\n                    *0x41a7f0 = auStackX8[0];\n                    (*pcStack192)(0x41a7e0);\n                    fcn.00402b80(iVar3);\n                    do {\n                        iVar1 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack120, 0, 0, 0, 1);\n                        while (iVar1 != 0) {\n                            if (iStack112 == 0x12) {\n                                return 0;\n                            }\n                            (*_sym.imp.USER32.dll_TranslateMessage)(auStack120);\n                            (*_sym.imp.USER32.dll_DispatchMessageA)(auStack120);\n                            iVar1 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack120);\n                        }\n                        fcn.00402f90(iVar3);\n                        fcn.00401cc0(iVar3);\n                    } while( true );\n                }\n                uVar2 = 0;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1117
    },
    "00402b80": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00402b80(int64_t lpPerformanceCount)\n\n{\n    char cVar1;\n    code *pcVar2;\n    ulong *puVar3;\n    ulong *puVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong *puVar7;\n    char *pcVar8;\n    float fVar9;\n    float fVar10;\n    float fVar11;\n    uchar auStack72 [8];\n    ulong uStack64;\n    int64_t iStack56;\n    \n    uStack64 = 0xfffffffffffffffe;\n    (*_sym.imp.KERNEL32.dll_QueryPerformanceCounter)();\n    if (*(lpPerformanceCount + 0x24) == '\\0') {\n        *(lpPerformanceCount + 0xc60) = *(lpPerformanceCount + 0xc58);\n        fcn.00402970(lpPerformanceCount);\n    }\n    *(lpPerformanceCount + 0x24) = 1;\n    puVar4 = NULL;\n    fVar10 = 0.0;\n    fVar11 = *0x413668;\n    if (*(lpPerformanceCount + 0xc28) == 0) {\n        puVar3 = fcn.00403c80(0x50);\n        puVar7 = puVar4;\n        if (puVar3 != NULL) {\n            fcn.00402300(puVar3);\n            *puVar3 = 0x413678;\n            puVar3[8] = \"OpenGL/FSAA/StarWars Test\";\n            *(puVar3 + 9) = 0x19;\n            *(puVar3 + 2) = 0x3f800000;\n            *(puVar3 + 0x14) = 0;\n            *(puVar3 + 3) = 0;\n            *(puVar3 + 0xc) = 0;\n            iVar6 = -1;\n            pcVar8 = \"OpenGL/FSAA/StarWars Test\";\n            do {\n                if (iVar6 == 0) break;\n                iVar6 = iVar6 + -1;\n                cVar1 = *pcVar8;\n                pcVar8 = pcVar8 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = ~iVar6 - 1;\n            fVar9 = fVar10;\n            if (0 < iVar5) {\n                do {\n                    fVar9 = fVar9 + *(lpPerformanceCount + 0x38 + *(puVar7 + 0x826f3) * 0x18);\n                    puVar7 = puVar7 + 1;\n                } while (puVar7 < iVar5);\n            }\n            *(puVar3 + 0x1c) = fVar9 * fVar11;\n            puVar7 = puVar3;\n        }\n        *(lpPerformanceCount + 0xc28) = puVar7;\n        if (puVar7 == NULL) {\n            fcn.00404a60(auStack72, 0x417698);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    if (*(lpPerformanceCount + 0xc30) == 0) {\n        puVar3 = fcn.00403c80(0x50);\n        puVar7 = puVar4;\n        if (puVar3 != NULL) {\n            fcn.00402300(puVar3);\n            *puVar3 = 0x413678;\n            puVar3[8] = \"Written by\";\n            *(puVar3 + 9) = 10;\n            *(puVar3 + 2) = 0x3f800000;\n            *(puVar3 + 0x14) = 0x3f800000;\n            *(puVar3 + 3) = 0x3f800000;\n            *(puVar3 + 0xc) = 0x40000000;\n            iVar6 = -1;\n            pcVar8 = \"Written by\";\n            do {\n                if (iVar6 == 0) break;\n                iVar6 = iVar6 + -1;\n                cVar1 = *pcVar8;\n                pcVar8 = pcVar8 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = ~iVar6 - 1;\n            if (0 < iVar5) {\n                do {\n                    fVar10 = fVar10 + *(lpPerformanceCount + 0x38 + *(puVar7 + 0x826f1) * 0x18);\n                    puVar7 = puVar7 + 1;\n                } while (puVar7 < iVar5);\n            }\n            *(puVar3 + 0x1c) = fVar10 * fVar11;\n            puVar7 = puVar3;\n        }\n        *(lpPerformanceCount + 0xc30) = puVar7;\n        if (puVar7 == NULL) {\n            fcn.00404a60(auStack72, 0x417698);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    if (*(lpPerformanceCount + 0xc38) == 0) {\n        iVar6 = fcn.00403c80(0x50);\n        puVar7 = puVar4;\n        if (iVar6 != 0) {\n            puVar7 = fcn.004026a0(iVar6, lpPerformanceCount + 0x28, 0x413770);\n        }\n        *(lpPerformanceCount + 0xc38) = puVar7;\n        if (puVar7 == NULL) {\n            fcn.00404a60(auStack72, 0x417698);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    if (*(lpPerformanceCount + 0xc40) == 0) {\n        iVar6 = fcn.00403c80(0x50);\n        puVar7 = puVar4;\n        if (iVar6 != 0) {\n            puVar7 = fcn.004026a0(iVar6, lpPerformanceCount + 0x28, \"paladine@grnet.com\");\n        }\n        *(lpPerformanceCount + 0xc40) = puVar7;\n        if (puVar7 == NULL) {\n            fcn.00404a60(auStack72, 0x417698);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    if (*(lpPerformanceCount + 0xc48) == 0) {\n        iStack56 = fcn.00403c80(0x50);\n        if (iStack56 != 0) {\n            puVar4 = fcn.00402360(iStack56, 0x65, 0x100, 0x80);\n        }\n        *(lpPerformanceCount + 0xc48) = puVar4;\n        if (puVar4 == NULL) {\n            fcn.00404a60(auStack72, 0x417698);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 1567
    },
    "00409b30": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.00409b30(uint *arg1)\n\n{\n    uint *puVar1;\n    \n    if ((arg1 != NULL) && (*0x41b10c != 0)) {\n        *arg1 = *0x41b118;\n        return 0;\n    }\n    puVar1 = fcn.0040ad50();\n    *puVar1 = 0x16;\n    fcn.0040c430(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 115
    },
    "00409d90": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00409d25)\n// WARNING: Removing unreachable block (ram,0x00409d4e)\n\nvoid fcn.00409d90(ulong arg1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code **ppcVar3;\n    \n    fcn.0040b2c0(8);\n    if (*0x41b16c != 1) {\n        *0x41b168 = 1;\n        *0x41b124 = 0;\n        ppcVar2 = fcn.004059b0(*0x41b8f0);\n        ppcVar3 = fcn.004059b0(*0x41b8e8);\n        if (ppcVar2 != NULL) {\n            while (ppcVar3 = ppcVar3 + -1,  ppcVar2 <= ppcVar3) {\n                if (*ppcVar3 != NULL) {\n                    (**ppcVar3)();\n                }\n            }\n        }\n        fcn.00409a90(0x413488, 0x413490);\n        fcn.00409a90(0x413498, 0x4134a8);\n    }\n    *0x41b16c = 1;\n    fcn.0040b190(8);\n    fcn.00409a30(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 326
    },
    "0040c910": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0040c910(ulong arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    int64_t *piStack80;\n    int64_t iStack72;\n    int64_t iStack64;\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x419108 ^ auStack136;\n    cStack48 = '\\0';\n    if (arg3 == NULL) {\n        iStack56 = fcn.00405bd0();\n        iStack72 = *(iStack56 + 0xc0);\n        iStack64 = *(iStack56 + 0xb8);\n        if ((iStack72 != *0x419a20) && ((*0x419f70 & *(iStack56 + 200)) == 0)) {\n            iStack72 = fcn.0040b650();\n        }\n        if ((iStack64 != *0x419e70) && ((*0x419f70 & *(iStack56 + 200)) == 0)) {\n            iStack64 = fcn.0040b920();\n        }\n        if ((*(iStack56 + 200) & 2) == 0) {\n            *(iStack56 + 200) = *(iStack56 + 200) | 2;\n            cStack48 = '\\x01';\n        }\n    }\n    else {\n        iStack72 = *arg3;\n        iStack64 = arg3[1];\n    }\n    piStack80 = &iStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.00410220(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.0040f4c0(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 != 1) {\n            if (iVar2 != 2) {\ncode_r0x0040ca7a:\n                if (cStack48 != '\\0') {\n                    *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n                }\n                goto code_r0x0040ca8f;\n            }\ncode_r0x0040ca56:\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x0040ca8f;\n        }\n    }\n    else {\n        if ((uVar1 & 1) != 0) goto code_r0x0040ca56;\n        if ((uVar1 & 2) == 0) goto code_r0x0040ca7a;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x0040ca8f:\n    fcn.00403bc0(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 745
    },
    "0040cab0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0040cab0(ulong arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    int64_t *piStack80;\n    int64_t iStack72;\n    int64_t iStack64;\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x419108 ^ auStack136;\n    cStack48 = '\\0';\n    if (arg3 == NULL) {\n        iStack56 = fcn.00405bd0();\n        iStack72 = *(iStack56 + 0xc0);\n        iStack64 = *(iStack56 + 0xb8);\n        if ((iStack72 != *0x419a20) && ((*0x419f70 & *(iStack56 + 200)) == 0)) {\n            iStack72 = fcn.0040b650();\n        }\n        if ((iStack64 != *0x419e70) && ((*0x419f70 & *(iStack56 + 200)) == 0)) {\n            iStack64 = fcn.0040b920();\n        }\n        if ((*(iStack56 + 200) & 2) == 0) {\n            *(iStack56 + 200) = *(iStack56 + 200) | 2;\n            cStack48 = '\\x01';\n        }\n    }\n    else {\n        iStack72 = *arg3;\n        iStack64 = arg3[1];\n    }\n    piStack80 = &iStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.00410220(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.0040fb70(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 != 1) {\n            if (iVar2 != 2) {\ncode_r0x0040cc1a:\n                if (cStack48 != '\\0') {\n                    *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n                }\n                goto code_r0x0040cc2f;\n            }\ncode_r0x0040cbf6:\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x0040cc2f;\n        }\n    }\n    else {\n        if ((uVar1 & 1) != 0) goto code_r0x0040cbf6;\n        if ((uVar1 & 2) == 0) goto code_r0x0040cc1a;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x0040cc2f:\n    fcn.00403bc0(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 745
    },
    "0040d210": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.0040d210(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t arg1_00;\n    ulong uVar4;\n    code *pcVar5;\n    int64_t iVar6;\n    int32_t iStack56;\n    uint32_t uStack52;\n    uchar auStack48 [8];\n    uchar auStack40 [8];\n    uint8_t uStack32;\n    \n    iVar2 = fcn.00405950();\n    iVar6 = 0;\n    iStack56 = 0;\n    uStack52 = 0;\n    if (*0x41b5b0 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n        if ((iVar3 == 0) || (arg1_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x414ab0),  arg1_00 == 0)) {\n            return 0;\n        }\n        *0x41b5b0 = fcn.004058e0(arg1_00);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetActiveWindow\");\n        *0x41b5b8 = fcn.004058e0(uVar4);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetLastActivePopup\");\n        *0x41b5c0 = fcn.004058e0(uVar4);\n        iVar1 = fcn.00409ae0(&iStack56);\n        if (iVar1 != 0) {\n            fcn.0040c390(0, 0, 0, 0, 0);\n        }\n        if (iStack56 == 2) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationA\");\n            *0x41b5d0 = fcn.004058e0(uVar4);\n            if (*0x41b5d0 != 0) {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetProcessWindowStation\");\n                *0x41b5c8 = fcn.004058e0(uVar4);\n            }\n        }\n    }\n    if ((*0x41b5c8 == iVar2) || (*0x41b5d0 == iVar2)) {\ncode_r0x0040d3d3:\n        if (*0x41b5b8 != iVar2) {\n            pcVar5 = fcn.004059b0(*0x41b5b8);\n            iVar6 = (*pcVar5)();\n            if ((iVar6 != 0) && (*0x41b5c0 != iVar2)) {\n                pcVar5 = fcn.004059b0(*0x41b5c0);\n                iVar6 = (*pcVar5)(iVar6);\n            }\n        }\n    }\n    else {\n        pcVar5 = fcn.004059b0(*0x41b5c8);\n        iVar3 = (*pcVar5)();\n        if (iVar3 != 0) {\n            pcVar5 = fcn.004059b0(*0x41b5d0);\n            iVar1 = (*pcVar5)(iVar3, 1, auStack40, 0xc, auStack48);\n            if ((iVar1 != 0) && ((uStack32 & 1) != 0)) goto code_r0x0040d3d3;\n        }\n        iVar1 = fcn.00409b30(&uStack52);\n        if (iVar1 != 0) {\n            fcn.0040c390(0, 0, 0, 0, 0);\n        }\n        if (uStack52 < 4) {\n            arg3._0_4_ = arg3 | 0x40000;\n        }\n        else {\n            arg3._0_4_ = arg3 | 0x200000;\n        }\n    }\n    pcVar5 = fcn.004059b0(*0x41b5b0);\n    uVar4 = (*pcVar5)(iVar6, arg1, arg2, arg3);\n    return uVar4;\n}\n",
        "token_count": 957
    },
    "0040f4c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.0040f4c0(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    char32_t cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    uint8_t uVar6;\n    int64_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint64_t uVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    int32_t iVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack100 [5];\n    uint32_t uStack80;\n    uint32_t uStack76;\n    int32_t iStack72;\n    \n    cVar2 = str.5_v_[0];\n    uVar1 = arg1[5];\n    uVar10 = uVar1 & 0x7fff;\n    iVar11 = uVar10 - 0x3fff;\n    auStack100[1] = *(arg1 + 3);\n    auStack100[2] = *(arg1 + 1);\n    auStack100[3] = *arg1 << 0x10;\n    if (iVar11 == -0x3fff) {\n        uVar12 = 0;\n        iVar4 = 0;\n        uVar5 = uVar12;\n        do {\n            if (auStack100[uVar5 + 1] != 0) {\n                auStack100[1] = 0;\n                auStack100[2] = 0;\n                uVar12 = 2;\n                iVar4 = 0;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack80 = *(arg1 + 3);\n        uStack76 = *(arg1 + 1);\n        uVar12 = 0;\n        iVar4 = 0;\n        iStack72 = *arg1 << 0x10;\n        iVar15 = 0;\n        uVar9 = str.5_v_[0] >> 0x1f & 0x1f;\n        uVar3 = str.5_v_[0] + uVar9;\n        iVar17 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar9);\n        uVar6 = uVar3;\n        if ((auStack100[iVar17 + 1] >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((auStack100[iVar17 + 1] & ~(-1 << (uVar6 & 0x1f))) == 0) {\n                for (iVar7 = iVar17 + 1; iVar7 < 3; iVar7 = iVar7 + 1) {\n                    if (auStack100[iVar7 + 1] != 0) goto code_r0x0040f602;\n                }\n            }\n            else {\ncode_r0x0040f602:\n                uVar3 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                iVar15 = str.5_v_[0] + L'\\xffffffff' + uVar3;\n                iVar13 = iVar15 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar15 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = auStack100[iVar13 + 1] + uVar9;\n                if ((uVar3 < auStack100[iVar13 + 1]) || (uVar5 = uVar12,  uVar3 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar15 = uVar5;\n                auStack100[iVar13 + 1] = uVar3;\n                iVar7 = iVar13 + -1;\n                if (-1 < iVar13 + -1) {\n                    do {\n                        iVar15 = uVar5;\n                        if (iVar15 == 0) break;\n                        uVar3 = auStack100[iVar7 + 1] + 1;\n                        if ((uVar3 < auStack100[iVar7 + 1]) || (uVar5 = uVar12,  uVar3 == 0)) {\n                            uVar5 = 1;\n                        }\n                        iVar15 = uVar5;\n                        auStack100[iVar7 + 1] = uVar3;\n                        iVar7 = iVar7 + -1;\n                    } while (-1 < iVar7);\n                }\n            }\n        }\n        auStack100[iVar17 + 1] = auStack100[iVar17 + 1] & -1 << (uVar6 & 0x1f);\n        iVar7 = iVar17 + 1;\n        if (iVar7 < 3) {\n            fcn.00404640(auStack100 + iVar7 + 1, 0, (3 - iVar7) * 4);\n        }\n        iVar17 = iVar11;\n        if (iVar15 != 0) {\n            iVar17 = uVar10 - 0x3ffe;\n        }\n        if (iVar17 < *0x41a364 - cVar2) {\n            auStack100[1] = 0;\n            auStack100[2] = 0;\n            uVar12 = 2;\n        }\n        else if (*0x41a364 < iVar17) {\n            if (iVar17 < *0x41a360) {\n                auStack100[1] = auStack100[1] & 0x7fffffff;\n                iVar4 = str.5_v_[3] + iVar17;\n                uVar10 = str.5_v_[1] >> 0x1f & 0x1f;\n                iVar11 = str.5_v_[1] + uVar10;\n                uVar6 = (iVar11 & 0x1f) - uVar10;\n                uVar5 = uVar12;\n                uVar16 = uVar12;\n                do {\n                    uVar10 = auStack100[uVar5 + 1];\n                    uVar5 = uVar5 + 1;\n                    auStack100[uVar5] = uVar10 >> (uVar6 & 0x1f) | uVar16;\n                    uVar16 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n                } while (uVar5 < 3);\n                iVar7 = iVar11 >> 5;\n                iVar14 = 2;\n                puVar8 = auStack100 + (3 - iVar7);\n                do {\n                    if (iVar14 < iVar7) {\n                        auStack100[iVar14 + 1] = 0;\n                    }\n                    else {\n                        auStack100[iVar14 + 1] = *puVar8;\n                    }\n                    puVar8 = puVar8 + -1;\n                    iVar14 = iVar14 + -1;\n                } while (-1 < iVar14);\n            }\n            else {\n                auStack100[1] = 0x80000000;\n                auStack100[2] = 0;\n                auStack100[3] = 0;\n                uVar10 = str.5_v_[1] >> 0x1f & 0x1f;\n                iVar11 = str.5_v_[1] + uVar10;\n                uVar6 = (iVar11 & 0x1f) - uVar10;\n                uVar5 = uVar12;\n                do {\n                    uVar10 = auStack100[uVar12 + 1];\n                    uVar12 = uVar12 + 1;\n                    auStack100[uVar12] = uVar10 >> (uVar6 & 0x1f) | uVar5;\n                    uVar5 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n                } while (uVar12 < 3);\n                iVar7 = iVar11 >> 5;\n                iVar14 = 2;\n                puVar8 = auStack100 + (3 - iVar7);\n                do {\n                    if (iVar14 < iVar7) {\n                        auStack100[iVar14 + 1] = 0;\n                    }\n                    else {\n                        auStack100[iVar14 + 1] = *puVar8;\n                    }\n                    puVar8 = puVar8 + -1;\n                    iVar14 = iVar14 + -1;\n                } while (-1 < iVar14);\n                uVar12 = 1;\n                iVar4 = str.5_v_[3] + *0x41a360;\n            }\n        }\n        else {\n            auStack100[1] = uStack80;\n            auStack100[2] = uStack76;\n            auStack100[3] = iStack72;\n            uVar10 = *0x41a364 - iVar11 >> 0x1f & 0x1f;\n            iVar11 = (*0x41a364 - iVar11) + uVar10;\n            uVar6 = (iVar11 & 0x1f) - uVar10;\n            uVar5 = uVar12;\n            uVar16 = uVar12;\n            do {\n                uVar10 = auStack100[uVar5 + 1];\n                uVar5 = uVar5 + 1;\n                auStack100[uVar5] = uVar10 >> (uVar6 & 0x1f) | uVar16;\n                uVar16 = (uVar10 & ~(-1 << (uVar6 & 0x1f))) << (-uVar6 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar11 >> 5;\n            iVar7 = 2;\n            puVar8 = auStack100 + (3 - iVar14);\n            do {\n                if (iVar7 < iVar14) {\n                    auStack100[iVar7 + 1] = 0;\n                }\n                else {\n                    auStack100[iVar7 + 1] = *puVar8;\n                }\n                puVar8 = puVar8 + -1;\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            uVar3 = str.5_v_[0] >> 0x1f & 0x1f;\n            uVar10 = str.5_v_[0] + uVar3;\n            iVar11 = uVar10 >> 5;\n            uVar10 = 0x1f - ((uVar10 & 0x1f) - uVar3);\n            uVar6 = uVar10;\n            if ((auStack100[iVar11 + 1] >> (uVar10 & 0x1f) & 1) != 0) {\n                if ((auStack100[iVar11 + 1] & ~(-1 << (uVar6 & 0x1f))) == 0) {\n                    for (iVar7 = iVar11 + 1; iVar7 < 3; iVar7 = iVar7 + 1) {\n                        if (auStack100[iVar7 + 1] != 0) goto code_r0x0040f818;\n                    }\n                }\n                else {\ncode_r0x0040f818:\n                    uVar10 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                    iVar4 = str.5_v_[0] + L'\\xffffffff' + uVar10;\n                    iVar15 = iVar4 >> 5;\n                    uVar3 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar10) & 0x1f);\n                    uVar10 = auStack100[iVar15 + 1] + uVar3;\n                    if ((uVar10 < auStack100[iVar15 + 1]) || (uVar5 = uVar12,  uVar10 < uVar3)) {\n                        uVar5 = 1;\n                    }\n                    auStack100[iVar15 + 1] = uVar10;\n                    iVar7 = iVar15 + -1;\n                    if (-1 < iVar15 + -1) {\n                        do {\n                            if (uVar5 == 0) break;\n                            uVar10 = auStack100[iVar7 + 1] + 1;\n                            if ((uVar10 < auStack100[iVar7 + 1]) || (uVar5 = uVar12,  uVar10 == 0)) {\n                                uVar5 = 1;\n                            }\n                            auStack100[iVar7 + 1] = uVar10;\n                            iVar7 = iVar7 + -1;\n                        } while (-1 < iVar7);\n                    }\n                }\n            }\n            auStack100[iVar11 + 1] = auStack100[iVar11 + 1] & -1 << (uVar6 & 0x1f);\n            iVar7 = iVar11 + 1;\n            if (iVar7 < 3) {\n                fcn.00404640(auStack100 + iVar7 + 1, 0, (3 - iVar7) * 4);\n            }\n            uVar10 = str.5_v_[1] + L'\\x01' >> 0x1f & 0x1f;\n            iVar11 = str.5_v_[1] + L'\\x01' + uVar10;\n            uVar6 = (iVar11 & 0x1f) - uVar10;\n            uVar5 = uVar12;\n            do {\n                uVar10 = auStack100[uVar12 + 1];\n                uVar12 = uVar12 + 1;\n                auStack100[uVar12] = uVar10 >> (uVar6 & 0x1f) | uVar5;\n                uVar5 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n            } while (uVar12 < 3);\n            iVar14 = iVar11 >> 5;\n            iVar7 = 2;\n            puVar8 = auStack100 + (3 - iVar14);\n            do {\n                if (iVar7 < iVar14) {\n                    auStack100[iVar7 + 1] = 0;\n                }\n                else {\n                    auStack100[iVar7 + 1] = *puVar8;\n                }\n                puVar8 = puVar8 + -1;\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            iVar4 = 0;\n            uVar12 = 2;\n        }\n    }\n    auStack100[1] = iVar4 << (0x1fU - str.5_v_[1] & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack100[1];\n    if (str.5_v_[2] == L'@') {\n        arg2[1] = auStack100[1];\n        *arg2 = auStack100[2];\n        return uVar12;\n    }\n    if (str.5_v_[2] == L' ') {\n        *arg2 = auStack100[1];\n    }\n    return uVar12;\n}\n",
        "token_count": 3393
    },
    "0040fb70": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.0040fb70(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    uint8_t uVar6;\n    int64_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint64_t uVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    int32_t iVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack100 [5];\n    uint32_t uStack80;\n    uint32_t uStack76;\n    int32_t iStack72;\n    \n    iVar4 = *0x41a380;\n    uVar1 = arg1[5];\n    uVar10 = uVar1 & 0x7fff;\n    iVar11 = uVar10 - 0x3fff;\n    auStack100[1] = *(arg1 + 3);\n    auStack100[2] = *(arg1 + 1);\n    auStack100[3] = *arg1 << 0x10;\n    if (iVar11 == -0x3fff) {\n        uVar12 = 0;\n        iVar15 = 0;\n        uVar5 = uVar12;\n        do {\n            if (auStack100[uVar5 + 1] != 0) {\n                auStack100[1] = 0;\n                auStack100[2] = 0;\n                uVar12 = 2;\n                iVar15 = 0;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack80 = *(arg1 + 3);\n        uStack76 = *(arg1 + 1);\n        uVar12 = 0;\n        iVar15 = 0;\n        iStack72 = *arg1 << 0x10;\n        iVar3 = 0;\n        uVar9 = *0x41a380 >> 0x1f & 0x1f;\n        uVar2 = *0x41a380 + uVar9;\n        iVar17 = uVar2 >> 5;\n        uVar2 = 0x1f - ((uVar2 & 0x1f) - uVar9);\n        uVar6 = uVar2;\n        if ((auStack100[iVar17 + 1] >> (uVar2 & 0x1f) & 1) != 0) {\n            if ((auStack100[iVar17 + 1] & ~(-1 << (uVar6 & 0x1f))) == 0) {\n                for (iVar7 = iVar17 + 1; iVar7 < 3; iVar7 = iVar7 + 1) {\n                    if (auStack100[iVar7 + 1] != 0) goto code_r0x0040fcb2;\n                }\n            }\n            else {\ncode_r0x0040fcb2:\n                uVar2 = *0x41a380 + -1 >> 0x1f & 0x1f;\n                iVar3 = *0x41a380 + -1 + uVar2;\n                iVar13 = iVar3 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar3 & 0x1f) - uVar2) & 0x1f);\n                uVar2 = auStack100[iVar13 + 1] + uVar9;\n                if ((uVar2 < auStack100[iVar13 + 1]) || (uVar5 = uVar12,  uVar2 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar3 = uVar5;\n                auStack100[iVar13 + 1] = uVar2;\n                iVar7 = iVar13 + -1;\n                if (-1 < iVar13 + -1) {\n                    do {\n                        iVar3 = uVar5;\n                        if (iVar3 == 0) break;\n                        uVar2 = auStack100[iVar7 + 1] + 1;\n                        if ((uVar2 < auStack100[iVar7 + 1]) || (uVar5 = uVar12,  uVar2 == 0)) {\n                            uVar5 = 1;\n                        }\n                        iVar3 = uVar5;\n                        auStack100[iVar7 + 1] = uVar2;\n                        iVar7 = iVar7 + -1;\n                    } while (-1 < iVar7);\n                }\n            }\n        }\n        auStack100[iVar17 + 1] = auStack100[iVar17 + 1] & -1 << (uVar6 & 0x1f);\n        iVar7 = iVar17 + 1;\n        if (iVar7 < 3) {\n            fcn.00404640(auStack100 + iVar7 + 1, 0, (3 - iVar7) * 4);\n        }\n        iVar17 = iVar11;\n        if (iVar3 != 0) {\n            iVar17 = uVar10 - 0x3ffe;\n        }\n        if (iVar17 < *0x41a37c - iVar4) {\n            auStack100[1] = 0;\n            auStack100[2] = 0;\n            uVar12 = 2;\n        }\n        else if (*0x41a37c < iVar17) {\n            if (iVar17 < *0x41a378) {\n                auStack100[1] = auStack100[1] & 0x7fffffff;\n                iVar15 = *0x41a38c + iVar17;\n                uVar10 = *0x41a384 >> 0x1f & 0x1f;\n                iVar4 = *0x41a384 + uVar10;\n                uVar6 = (iVar4 & 0x1f) - uVar10;\n                uVar5 = uVar12;\n                uVar16 = uVar12;\n                do {\n                    uVar10 = auStack100[uVar5 + 1];\n                    uVar5 = uVar5 + 1;\n                    auStack100[uVar5] = uVar10 >> (uVar6 & 0x1f) | uVar16;\n                    uVar16 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n                } while (uVar5 < 3);\n                iVar7 = iVar4 >> 5;\n                iVar14 = 2;\n                puVar8 = auStack100 + (3 - iVar7);\n                do {\n                    if (iVar14 < iVar7) {\n                        auStack100[iVar14 + 1] = 0;\n                    }\n                    else {\n                        auStack100[iVar14 + 1] = *puVar8;\n                    }\n                    puVar8 = puVar8 + -1;\n                    iVar14 = iVar14 + -1;\n                } while (-1 < iVar14);\n            }\n            else {\n                auStack100[1] = 0x80000000;\n                auStack100[2] = 0;\n                auStack100[3] = 0;\n                uVar10 = *0x41a384 >> 0x1f & 0x1f;\n                iVar4 = *0x41a384 + uVar10;\n                uVar6 = (iVar4 & 0x1f) - uVar10;\n                uVar5 = uVar12;\n                do {\n                    uVar10 = auStack100[uVar12 + 1];\n                    uVar12 = uVar12 + 1;\n                    auStack100[uVar12] = uVar10 >> (uVar6 & 0x1f) | uVar5;\n                    uVar5 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n                } while (uVar12 < 3);\n                iVar7 = iVar4 >> 5;\n                iVar14 = 2;\n                puVar8 = auStack100 + (3 - iVar7);\n                do {\n                    if (iVar14 < iVar7) {\n                        auStack100[iVar14 + 1] = 0;\n                    }\n                    else {\n                        auStack100[iVar14 + 1] = *puVar8;\n                    }\n                    puVar8 = puVar8 + -1;\n                    iVar14 = iVar14 + -1;\n                } while (-1 < iVar14);\n                uVar12 = 1;\n                iVar15 = *0x41a38c + *0x41a378;\n            }\n        }\n        else {\n            auStack100[1] = uStack80;\n            auStack100[2] = uStack76;\n            auStack100[3] = iStack72;\n            uVar10 = *0x41a37c - iVar11 >> 0x1f & 0x1f;\n            iVar4 = (*0x41a37c - iVar11) + uVar10;\n            uVar6 = (iVar4 & 0x1f) - uVar10;\n            uVar5 = uVar12;\n            uVar16 = uVar12;\n            do {\n                uVar10 = auStack100[uVar5 + 1];\n                uVar5 = uVar5 + 1;\n                auStack100[uVar5] = uVar10 >> (uVar6 & 0x1f) | uVar16;\n                uVar16 = (uVar10 & ~(-1 << (uVar6 & 0x1f))) << (-uVar6 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar7 = 2;\n            puVar8 = auStack100 + (3 - iVar14);\n            do {\n                if (iVar7 < iVar14) {\n                    auStack100[iVar7 + 1] = 0;\n                }\n                else {\n                    auStack100[iVar7 + 1] = *puVar8;\n                }\n                puVar8 = puVar8 + -1;\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            uVar2 = *0x41a380 >> 0x1f & 0x1f;\n            uVar10 = *0x41a380 + uVar2;\n            iVar4 = uVar10 >> 5;\n            uVar10 = 0x1f - ((uVar10 & 0x1f) - uVar2);\n            uVar6 = uVar10;\n            if ((auStack100[iVar4 + 1] >> (uVar10 & 0x1f) & 1) != 0) {\n                if ((auStack100[iVar4 + 1] & ~(-1 << (uVar6 & 0x1f))) == 0) {\n                    for (iVar7 = iVar4 + 1; iVar7 < 3; iVar7 = iVar7 + 1) {\n                        if (auStack100[iVar7 + 1] != 0) goto code_r0x0040fec8;\n                    }\n                }\n                else {\ncode_r0x0040fec8:\n                    uVar10 = *0x41a380 + -1 >> 0x1f & 0x1f;\n                    iVar11 = *0x41a380 + -1 + uVar10;\n                    iVar15 = iVar11 >> 5;\n                    uVar2 = 1 << (0x1f - ((iVar11 & 0x1f) - uVar10) & 0x1f);\n                    uVar10 = auStack100[iVar15 + 1] + uVar2;\n                    if ((uVar10 < auStack100[iVar15 + 1]) || (uVar5 = uVar12,  uVar10 < uVar2)) {\n                        uVar5 = 1;\n                    }\n                    auStack100[iVar15 + 1] = uVar10;\n                    iVar7 = iVar15 + -1;\n                    if (-1 < iVar15 + -1) {\n                        do {\n                            if (uVar5 == 0) break;\n                            uVar10 = auStack100[iVar7 + 1] + 1;\n                            if ((uVar10 < auStack100[iVar7 + 1]) || (uVar5 = uVar12,  uVar10 == 0)) {\n                                uVar5 = 1;\n                            }\n                            auStack100[iVar7 + 1] = uVar10;\n                            iVar7 = iVar7 + -1;\n                        } while (-1 < iVar7);\n                    }\n                }\n            }\n            auStack100[iVar4 + 1] = auStack100[iVar4 + 1] & -1 << (uVar6 & 0x1f);\n            iVar7 = iVar4 + 1;\n            if (iVar7 < 3) {\n                fcn.00404640(auStack100 + iVar7 + 1, 0, (3 - iVar7) * 4);\n            }\n            uVar10 = *0x41a384 + 1 >> 0x1f & 0x1f;\n            iVar4 = *0x41a384 + 1 + uVar10;\n            uVar6 = (iVar4 & 0x1f) - uVar10;\n            uVar5 = uVar12;\n            do {\n                uVar10 = auStack100[uVar12 + 1];\n                uVar12 = uVar12 + 1;\n                auStack100[uVar12] = uVar10 >> (uVar6 & 0x1f) | uVar5;\n                uVar5 = (~(-1 << (uVar6 & 0x1f)) & uVar10) << (0x20 - uVar6 & 0x1f);\n            } while (uVar12 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar7 = 2;\n            puVar8 = auStack100 + (3 - iVar14);\n            do {\n                if (iVar7 < iVar14) {\n                    auStack100[iVar7 + 1] = 0;\n                }\n                else {\n                    auStack100[iVar7 + 1] = *puVar8;\n                }\n                puVar8 = puVar8 + -1;\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            iVar15 = 0;\n            uVar12 = 2;\n        }\n    }\n    auStack100[1] = iVar15 << (0x1fU - *0x41a384 & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack100[1];\n    if (*0x41a388 == 0x40) {\n        arg2[1] = auStack100[1];\n        *arg2 = auStack100[2];\n        return uVar12;\n    }\n    if (*0x41a388 == 0x20) {\n        *arg2 = auStack100[1];\n    }\n    return uVar12;\n}\n",
        "token_count": 3364
    },
    "00411cf0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00411cf0(ulong arg1)\n\n{\n    if (*0x41b4c4 == 0) {\n        fcn.00412280(0x419a30, arg1, 0, 10);\n        return;\n    }\n    fcn.00412280(0, arg1, 0, 10);\n    return;\n}\n",
        "token_count": 81
    },
    "00405300": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00405300(ulong *arg1)\n\n{\n    *arg1 = 0x413a10;\n    if (*(arg1 + 2) != 0) {\n        fcn.00405150(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "00402360": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.00402360(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    uint in_stack_00000040;\n    \n    fcn.00402300(arg1);\n    *arg1 = 0x413650;\n    *(arg1 + 0x1c) = in_stack_00000028;\n    *(arg1 + 2) = 0x3f800000;\n    *(arg1 + 0x14) = 0x3f800000;\n    *(arg1 + 3) = 0x3f800000;\n    *(arg1 + 0x44) = in_stack_00000030;\n    *(arg1 + 9) = in_stack_00000038;\n    *(arg1 + 0xc) = in_stack_00000040;\n    uVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(*0x41a7d0, arg2, 0x413640);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadResource)(*0x41a7d0, uVar2);\n    iVar3 = (*_sym.imp.KERNEL32.dll_LockResource)(uVar2);\n    if (iVar3 == 0) {\n        fcn.00404a60(&stack0x00000028, 0x417698);\n        pcVar1 = swi(3);\n        puVar4 = (*pcVar1)();\n        return puVar4;\n    }\n    (*_sym.imp.OPENGL32.dll_glGenTextures)(1, arg1 + 8);\n    (*_sym.imp.OPENGL32.dll_glEnable)(0xde1);\n    (*_sym.imp.OPENGL32.dll_glBindTexture)(0xde1, *(arg1 + 8));\n    (*_sym.imp.OPENGL32.dll_glTexParameteri)(0xde1, 0x2800, 0x2601);\n    (*_sym.imp.OPENGL32.dll_glTexParameteri)(0xde1, 0x2801, 0x2601);\n    (*_sym.imp.OPENGL32.dll_glTexEnvi)(0x2300, 0x2200, 0x2100);\n    sub.GLU32.dll_gluBuild2DMipmaps(0xde1, 4, arg3, arg4, 0x1908, 0x1401, iVar3);\n    (*_sym.imp.OPENGL32.dll_glDisable)(0xde1);\n    return arg1;\n}\n",
        "token_count": 590
    },
    "00403a10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.00403a10(ulong *arg1, ulong noname_1, ulong arg3)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    ulong *puVar3;\n    uchar in_R9B;\n    uint in_XMM1_Da;\n    uchar auStackX32 [8];\n    \n    *arg1 = 0x4136b8;\n    *(arg1 + 0x24) = 0;\n    *(arg1 + 0x26) = 0;\n    *(arg1 + 3) = in_XMM1_Da;\n    *(arg1 + 4) = arg3;\n    *(arg1 + 0x25) = in_R9B;\n    arg1_00 = SUB168(ZEXT816(0x34) * ZEXT816(arg3), 0);\n    if (SUB168(ZEXT816(0x34) * ZEXT816(arg3) >> 0x40, 0) != 0) {\n        arg1_00 = 0xffffffffffffffff;\n    }\n    iVar2 = fcn.00403c80(arg1_00);\n    arg1[0x18a] = iVar2;\n    if (iVar2 == 0) {\n        fcn.00404a60(auStackX32, 0x417698);\n        pcVar1 = swi(3);\n        puVar3 = (*pcVar1)();\n        return puVar3;\n    }\n    arg1[0x185] = 0;\n    arg1[0x186] = 0;\n    arg1[0x187] = 0;\n    arg1[0x188] = 0;\n    arg1[0x189] = 0;\n    (*_sym.imp.KERNEL32.dll_QueryPerformanceFrequency)(arg1 + 0x18d);\n    return arg1;\n}\n",
        "token_count": 414
    },
    "004059b0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.004059b0(ulong arg1)\n\n{\n    int64_t iVar1;\n    code *UNRECOVERED_JUMPTABLE;\n    ulong uVar2;\n    \n    if ((*0x4191c8 == -1) || (iVar1 = (*_sym.imp.KERNEL32.dll_FlsGetValue)(),  iVar1 == 0)) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32.DLL\");\n        if (iVar1 == 0) {\n            return arg1;\n        }\n        UNRECOVERED_JUMPTABLE = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"DecodePointer\");\n    }\n    else {\n        UNRECOVERED_JUMPTABLE = *(iVar1 + 0x2b0);\n    }\n    if (UNRECOVERED_JUMPTABLE == NULL) {\n        return arg1;\n    }\n    // WARNING: Could not recover jumptable at 0x00405a07. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar2 = (*UNRECOVERED_JUMPTABLE)(arg1);\n    return uVar2;\n}\n",
        "token_count": 256
    },
    "004010a0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.004010a0(int16_t *arg1, int16_t *arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int16_t iVar5;\n    uint64_t uVar6;\n    int16_t *piVar7;\n    \n    piVar7 = arg2;\n    iVar1 = fcn.00401080(arg1);\n    iVar2 = fcn.00401080(arg2);\n    if (iVar1 != iVar2) {\n        return 1;\n    }\n    uVar6 = 0;\n    iVar1 = fcn.00401080(arg1);\n    if (iVar1 != 0) {\n        do {\n            iVar5 = *arg1;\n            iVar4 = *piVar7;\n            if (iVar5 - 0x41U < 0x1a) {\n                iVar5 = iVar5 + 0x20;\n            }\n            if (iVar4 - 0x41U < 0x1a) {\n                iVar4 = iVar4 + 0x20;\n            }\n            if (iVar5 != iVar4) {\n                return 1;\n            }\n            arg1 = arg1 + 1;\n            uVar6 = uVar6 + 1;\n            piVar7 = piVar7 + 1;\n            uVar3 = fcn.00401080(arg1);\n        } while (uVar6 < uVar3);\n    }\n    return 0;\n}\n",
        "token_count": 331
    },
    "00402970": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00402970(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    float fVar4;\n    uint uVar5;\n    uchar auVar6 [16];\n    uchar auVar7 [16];\n    uchar auVar8 [16];\n    uchar auVar9 [16];\n    uchar auVar10 [16];\n    uchar in_XMM11 [16];\n    uchar auVar11 [16];\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    fVar4 = fcn.00404ba0(uVar1);\n    uVar2 = 0;\n    if (0 < *(arg1 + 0x20)) {\n        auVar6 = ZEXT416(*0x413664);\n        auVar7 = ZEXT416(*0x413718);\n        auVar8 = ZEXT416(*0x413714);\n        auVar9 = ZEXT416(*0x413710);\n        auVar10 = ZEXT416(*0x41370c);\n        in_XMM11 = in_XMM11 & 0x0;\n        auVar11 = ZEXT416(*0x413708);\n        uVar3 = uVar2;\n        do {\n            uVar5 = fcn.00402920(fVar4, SUB164(auVar9, 0), SUB164(auVar8, 0), arg1);\n            *(uVar3 + *(arg1 + 0xc50)) = uVar5;\n            uVar5 = fcn.00402920(uVar5, SUB164(auVar9, 0), SUB164(auVar8, 0), arg1);\n            *(*(arg1 + 0xc50) + 4 + uVar3) = uVar5;\n            uVar5 = fcn.00402920(uVar5, SUB164(auVar10, 0), SUB164(auVar6, 0), arg1);\n            *(*(arg1 + 0xc50) + 8 + uVar3) = uVar5;\n            *(*(arg1 + 0xc50) + 0xc + uVar3) = 0;\n            *(*(arg1 + 0xc50) + 0x10 + uVar3) = 0;\n            *(*(arg1 + 0xc50) + 0x14 + uVar3) = *(arg1 + 0x18);\n            *(*(arg1 + 0xc50) + 0x24 + uVar3) = 0x3f800000;\n            fVar4 = fcn.00402920(uVar5, SUB164(in_XMM11, 0), SUB164(auVar6, 0), arg1);\n            if (fVar4 <= SUB164(auVar11, 0)) {\n                *(*(arg1 + 0xc50) + 0x28 + uVar3) = 0x3f800000;\n                *(*(arg1 + 0xc50) + 0x2c + uVar3) = 0x3f800000;\n            }\n            else {\n                fVar4 = fcn.00402920(fVar4, SUB164(auVar7, 0), SUB164(auVar6, 0), arg1);\n                *(*(arg1 + 0xc50) + 0x28 + uVar3) = fVar4;\n                *(*(arg1 + 0xc50) + 0x2c + uVar3) = 0;\n            }\n            uVar1 = uVar2 + 1;\n            uVar2 = uVar1;\n            uVar3 = uVar3 + 0x34;\n            *(*(arg1 + 0xc50) + -4 + uVar3) = 0;\n        } while (uVar1 < *(arg1 + 0x20));\n    }\n    return;\n}\n",
        "token_count": 864
    },
    "00402f90": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00402f90(int64_t arg1)\n\n{\n    float fVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint uVar6;\n    uchar auVar7 [16];\n    uchar auVar8 [16];\n    uchar auVar9 [16];\n    int64_t iStackX8;\n    uint64_t uVar5;\n    \n    (*_sym.imp.KERNEL32.dll_QueryPerformanceCounter)(&iStackX8);\n    *(arg1 + 0x1c) = (iStackX8 - *(arg1 + 0xc58)) / *(arg1 + 0xc68);\n    *(*(arg1 + 0xc28) + 0x34) = *(*(arg1 + 0xc28) + 0x1c);\n    iVar2 = *(arg1 + 0xc28);\n    *(iVar2 + 0x38) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x2c) + *(iVar2 + 0x20);\n    iVar2 = *(arg1 + 0xc28);\n    *(iVar2 + 0x3c) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x30) + *(iVar2 + 0x24);\n    *(*(arg1 + 0xc30) + 0x34) = *(*(arg1 + 0xc30) + 0x1c);\n    iVar2 = *(arg1 + 0xc30);\n    *(iVar2 + 0x38) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x2c) + *(iVar2 + 0x20);\n    iVar2 = *(arg1 + 0xc30);\n    *(iVar2 + 0x3c) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x30) + *(iVar2 + 0x24);\n    *(*(arg1 + 0xc38) + 0x34) = *(*(arg1 + 0xc38) + 0x1c);\n    iVar2 = *(arg1 + 0xc38);\n    *(iVar2 + 0x38) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x2c) + *(iVar2 + 0x20);\n    iVar2 = *(arg1 + 0xc38);\n    *(iVar2 + 0x3c) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x30) + *(iVar2 + 0x24);\n    *(*(arg1 + 0xc40) + 0x34) = *(*(arg1 + 0xc40) + 0x1c);\n    iVar2 = *(arg1 + 0xc40);\n    *(iVar2 + 0x38) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x2c) + *(iVar2 + 0x20);\n    iVar2 = *(arg1 + 0xc40);\n    *(iVar2 + 0x3c) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x30) + *(iVar2 + 0x24);\n    *(*(arg1 + 0xc48) + 0x34) = *(*(arg1 + 0xc48) + 0x1c);\n    iVar2 = *(arg1 + 0xc48);\n    *(iVar2 + 0x38) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x2c) + *(iVar2 + 0x20);\n    iVar2 = *(arg1 + 0xc48);\n    uVar3 = 0;\n    *(iVar2 + 0x3c) = (*(arg1 + 0x1c) - *(iVar2 + 0xc)) * *(iVar2 + 0x30) + *(iVar2 + 0x24);\n    *(arg1 + 0x1c) = (iStackX8 - *(arg1 + 0xc60)) / *(arg1 + 0xc68);\n    if (0 < *(arg1 + 0x20)) {\n        auVar7 = ZEXT416(*0x413714);\n        auVar8 = ZEXT416(*0x413710);\n        auVar9 = ZEXT416(*0x41374c);\n        uVar5 = uVar3;\n        do {\n            iVar2 = *(arg1 + 0xc50);\n            *(uVar3 + 0x20 + iVar2) =\n                 (*(arg1 + 0x1c) - *(uVar3 + 0x30 + iVar2)) * *(uVar3 + 0x14 + iVar2) + *(uVar3 + 8 + iVar2);\n            iVar2 = *(arg1 + 0xc50);\n            fVar1 = *(uVar3 + 0x20 + iVar2);\n            if (fVar1 < SUB164(auVar9, 0)) {\n                *(uVar3 + 0x18 + iVar2) = *(uVar3 + iVar2);\n                *(uVar3 + 0x1c + *(arg1 + 0xc50)) = *(uVar3 + 4 + *(arg1 + 0xc50));\n            }\n            else {\n                uVar6 = fcn.00402920(fVar1, SUB164(auVar8, 0), SUB164(auVar7, 0), arg1);\n                *(uVar3 + *(arg1 + 0xc50)) = uVar6;\n                uVar6 = fcn.00402920(uVar6, SUB164(auVar8, 0), SUB164(auVar7, 0), arg1);\n                *(uVar3 + 4 + *(arg1 + 0xc50)) = uVar6;\n                *(uVar3 + 8 + *(arg1 + 0xc50)) = 0xc1200000;\n                *(uVar3 + 0x30 + *(arg1 + 0xc50)) = *(arg1 + 0x1c);\n            }\n            uVar4 = uVar5 + 1;\n            uVar5 = uVar4;\n            uVar3 = uVar3 + 0x34;\n        } while (uVar4 < *(arg1 + 0x20));\n    }\n    return;\n}\n",
        "token_count": 1510
    },
    "0040ab20": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040ab41)\n// WARNING: Removing unreachable block (ram,0x0040ab49)\n// WARNING: Removing unreachable block (ram,0x0040ab4b)\n\nvoid fcn.0040ab20(void)\n\n{\n    return;\n}\n",
        "token_count": 65
    },
    "00401190": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "resolve function by parsing PE exports"
        ],
        "decompiled_code": "\nint64_t fcn.00401190(int64_t arg1, int64_t arg2)\n\n{\n    char cVar1;\n    char cVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint32_t *puVar7;\n    \n    iVar4 = *0x419014;\n    uVar6 = 0;\n    iVar4 = *(arg1 + *(((*0x419004 - *0x41900c) + *0x419010) * 0xc0 + 0x3c + arg1) + 0x88 +\n             (((*0x419008 - iVar4) + 1) * *0x419000 + ((1 - iVar4) - *0x419000) * *0x419010 + (iVar4 + -3) * *0x419004)\n             * 2) + arg1;\n    puVar7 = *(iVar4 + 0x20) + arg1;\n    if (*(iVar4 + 0x18) != 0) {\n        do {\n            pcVar3 = *puVar7 + arg1;\n            iVar5 = arg2 - pcVar3;\n            do {\n                cVar1 = *pcVar3;\n                cVar2 = pcVar3[iVar5];\n                if (cVar1 != cVar2) break;\n                pcVar3 = pcVar3 + 1;\n            } while (cVar2 != '\\0');\n            if (cVar1 == cVar2) {\n                return *(*(iVar4 + 0x1c) + arg1 +\n                        *(*(iVar4 + 0x24) + arg1 +\n                         (uVar6 + ((((((*0x419004 - *0x419014) - *0x419010) + 3) * *0x419008 +\n                                    (*0x419010 * *0x419004 + 1) * *0x419000) - (*0x419000 + 2 + *0x419014) * *0x41900c)\n                                  + *0x419014 * -2) * 3 + *0x419004 * 3) * 2) * 4) + arg1;\n            }\n            uVar6 = uVar6 + 1;\n            puVar7 = puVar7 + 1;\n        } while (uVar6 < *(iVar4 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 544
    },
    "00401670": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.00401670(void)\n\n{\n    int64_t arg1;\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    arg1 = fcn.00403c80(800000000);\n    if (arg1 == 0) {\n        return 3;\n    }\n    uVar2 = 0;\n    do {\n        *(uVar2 + arg1) = uVar2;\n        uVar2 = uVar2 + 1;\n    } while (uVar2 < 100000000);\n    fcn.00403be0(arg1);\n    uVar1 = 3;\n    if (uVar2 == 100000000) {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 165
    },
    "00401a60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.00401a60(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    int32_t *in_stack_00000028;\n    int64_t *in_stack_00000030;\n    int64_t in_stack_00000038;\n    uchar auStack104 [16];\n    uint uStack88;\n    \n    if ((in_stack_00000030 == NULL) || (in_stack_00000038 == 0)) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                          (0, \"StupidOpenGL1.0\", 0x41354a, 0x86000000, 0, 0, 1, 1, arg2, 0, arg1, 0);\n        if (iVar3 != 0) {\n            uVar4 = (*_sym.imp.USER32.dll_GetDC)(iVar3);\n            *(in_stack_00000038 + 4) = *(in_stack_00000038 + 4) | 0x21;\n            iVar1 = (*_sym.imp.GDI32.dll_ChoosePixelFormat)(uVar4, in_stack_00000038);\n            if (((iVar1 == 0) ||\n                (iVar2 = (*_sym.imp.GDI32.dll_SetPixelFormat)(uVar4, iVar1, in_stack_00000038),  iVar2 == 0)) ||\n               (iVar5 = (*_sym.imp.OPENGL32.dll_wglCreateContext)(uVar4),  iVar5 == 0)) {\n                (*_sym.imp.USER32.dll_ReleaseDC)(iVar3, uVar4);\n                (*_sym.imp.USER32.dll_DestroyWindow)(iVar3);\n                iVar3 = 0;\n            }\n            else {\n                (*_sym.imp.OPENGL32.dll_wglMakeCurrent)(uVar4, iVar5);\n                uStack88 = (**(*in_stack_00000030 + 0x10))(in_stack_00000030, uVar4, iVar1);\n                (*_sym.imp.OPENGL32.dll_wglMakeCurrent)(0, 0);\n                (*_sym.imp.USER32.dll_ReleaseDC)(iVar3);\n                (*_sym.imp.OPENGL32.dll_wglDeleteContext)(iVar5);\n                (*_sym.imp.USER32.dll_DestroyWindow)();\n                iVar3 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                                  (0, 0x413598, 0x41354a, arg3 | 0x6000000, *in_stack_00000028, in_stack_00000028[1], \n                                   in_stack_00000028[2] - *in_stack_00000028, \n                                   in_stack_00000028[3] - in_stack_00000028[1], arg2, arg4, arg1, auStack104);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 665
    },
    "00401cc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401cc0(ulong *arg1)\n\n{\n    (*_sym.imp.OPENGL32.dll_wglMakeCurrent)(arg1[1], arg1[2]);\n    (***arg1)(arg1);\n    (*_sym.imp.OPENGL32.dll_glFlush)();\n    // WARNING: Could not recover jumptable at 0x00401cef. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.GDI32.dll_SwapBuffers)(arg1[1]);\n    return;\n}\n",
        "token_count": 116
    },
    "00402160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nushort fcn.00402160(ulong arg1)\n\n{\n    int16_t iVar1;\n    ushort uVar2;\n    int32_t iVar3;\n    uint uStack88;\n    uint uStack84;\n    ulong uStack80;\n    uint uStack68;\n    ulong uStack64;\n    ulong uStack48;\n    ulong uStack40;\n    char *pcStack24;\n    \n    iVar3 = (*_sym.imp.USER32.dll_GetClassInfoExA)();\n    if (iVar3 == 0) {\n        fcn.00404640(&uStack88, 0, 0x50);\n        uStack88 = 0x50;\n        uStack84 = 0x23;\n        uStack80 = 0x4020e0;\n        uStack68 = 4;\n        uStack40 = 0;\n        uStack64 = arg1;\n        uStack48 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f00);\n        pcStack24 = 0x413598;\n        iVar1 = (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack88);\n        if (iVar1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uStack88 = 0x50;\n            uStack84 = 0x20;\n            uStack68 = 0;\n            uStack80 = 0x402150;\n            uStack40 = 0;\n            uStack64 = arg1;\n            uStack48 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f00);\n            pcStack24 = \"StupidOpenGL1.0\";\n            uVar2 = (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack88);\n        }\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 407
    },
    "00402300": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.00402300(ulong *arg1)\n\n{\n    uint uVar1;\n    float fVar2;\n    \n    uVar1 = *0x413610;\n    *arg1 = 0x4135f8;\n    *(arg1 + 4) = 0xc0800000;\n    *(arg1 + 0x2c) = 0x3f000000;\n    *(arg1 + 6) = 0xbf000000;\n    *(arg1 + 0x1c) = 0;\n    *(arg1 + 0x24) = 0;\n    *(arg1 + 5) = 0;\n    fVar2 = fcn.004047f0(uVar1);\n    *(arg1 + 1) = (fVar2 * *0x41360c) / *0x413608;\n    return arg1;\n}\n",
        "token_count": 195
    },
    "004026a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.004026a0(ulong *arg1, int64_t arg2, char *arg3)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    float fVar6;\n    uint in_XMM3_Da;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    \n    fcn.00402300(arg1);\n    *arg1 = 0x413678;\n    arg1[8] = arg3;\n    iVar3 = -1;\n    iVar4 = 0;\n    pcVar5 = arg3;\n    do {\n        if (iVar3 == 0) break;\n        iVar3 = iVar3 + -1;\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n    } while (cVar1 != '\\0');\n    *(arg1 + 0x14) = in_stack_00000028;\n    *(arg1 + 2) = in_XMM3_Da;\n    *(arg1 + 0xc) = in_stack_00000038;\n    fVar6 = 0.0;\n    *(arg1 + 3) = in_stack_00000030;\n    *(arg1 + 9) = ~iVar3 - 1;\n    iVar3 = -1;\n    pcVar5 = arg3;\n    do {\n        if (iVar3 == 0) break;\n        iVar3 = iVar3 + -1;\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n    } while (cVar1 != '\\0');\n    iVar2 = ~iVar3 - 1;\n    if (0 < iVar2) {\n        do {\n            pcVar5 = arg3 + iVar4;\n            iVar4 = iVar4 + 1;\n            fVar6 = fVar6 + *(arg2 + 0x10 + *pcVar5 * 0x18);\n        } while (iVar4 < iVar2);\n    }\n    *(arg1 + 0x1c) = fVar6 * *0x413668;\n    return arg1;\n}\n",
        "token_count": 492
    },
    "004027d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004027d0(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar4;\n    \n    uVar4 = 0xfffffffffffffffe;\n    *arg1 = 0x4136b8;\n    if (arg1[0x18a] != 0) {\n        fcn.00403be0(arg1[0x18a]);\n    }\n    piVar2 = arg1 + 0x185;\n    iVar3 = 5;\n    do {\n        puVar1 = *piVar2;\n        if (puVar1 != NULL) {\n            (***puVar1)(puVar1, 1, in_R8, in_R9, uVar4);\n        }\n        piVar2 = piVar2 + 1;\n        iVar3 = iVar3 + -1;\n    } while (iVar3 != 0);\n    *arg1 = 0x4135c0;\n    return;\n}\n",
        "token_count": 236
    },
    "00402880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.00402880(ulong noname_0, ulong arg2)\n\n{\n    ulong uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    \n    pcVar2 = (*_sym.imp.OPENGL32.dll_wglGetProcAddress)(\"wglGetExtensionsStringARB\");\n    if (pcVar2 != NULL) {\n        uVar1 = (*_sym.imp.OPENGL32.dll_wglGetCurrentDC)();\n        iVar3 = (*pcVar2)(uVar1);\n        if (iVar3 != 0) {\n            iVar3 = fcn.00404b30(iVar3, arg2);\n            if (iVar3 != 0) {\n                return true;\n            }\n        }\n    }\n    iVar3 = (*_sym.imp.OPENGL32.dll_glGetString)(0x1f03);\n    if (iVar3 == 0) {\n        return iVar3;\n    }\n    iVar3 = fcn.00404b30(iVar3, arg2);\n    return iVar3 != 0;\n}\n",
        "token_count": 219
    },
    "00402920": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat fcn.00402920(ulong param_1, float param_2, float param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00404bc0();\n    return (iVar1 / *0x413704) * (param_3 - param_2) + param_2;\n}\n",
        "token_count": 73
    },
    "00405150": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00405150(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x41b280, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.0040ad50();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.0040ad00(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "00401070": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\nulong fcn.00401070(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(in_GS_OFFSET + 0x60);\n}\n",
        "token_count": 35
    },
    "00409da0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00409d25)\n// WARNING: Removing unreachable block (ram,0x00409cb2)\n// WARNING: Removing unreachable block (ram,0x00409ce0)\n// WARNING: Removing unreachable block (ram,0x00409cee)\n// WARNING: Removing unreachable block (ram,0x00409cf6)\n// WARNING: Removing unreachable block (ram,0x00409cf8)\n// WARNING: Removing unreachable block (ram,0x00409cfa)\n// WARNING: Removing unreachable block (ram,0x00409d4e)\n\nvoid fcn.00409da0(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    fcn.0040b2c0(8);\n    if (*0x41b16c != 1) {\n        *0x41b168 = 1;\n        *0x41b124 = 0;\n        fcn.00409a90(0x413498, 0x4134a8);\n    }\n    *0x41b16c = 1;\n    fcn.0040b190(8);\n    fcn.00409a30(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 278
    },
    "0040cf30": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nulong fcn.0040cf30(void)\n\n{\n    int64_t iVar1;\n    code *UNRECOVERED_JUMPTABLE;\n    ulong uVar2;\n    \n    uVar2 = *0x41b598;\n    if ((*0x4191c8 == -1) || (iVar1 = (*_sym.imp.KERNEL32.dll_FlsGetValue)(),  iVar1 == 0)) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32.DLL\");\n        if (iVar1 == 0) {\n            return uVar2;\n        }\n        UNRECOVERED_JUMPTABLE = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"DecodePointer\");\n    }\n    else {\n        UNRECOVERED_JUMPTABLE = *(iVar1 + 0x2b0);\n    }\n    if (UNRECOVERED_JUMPTABLE == NULL) {\n        return uVar2;\n    }\n    // WARNING: Could not recover jumptable at 0x00405a07. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar2 = (*UNRECOVERED_JUMPTABLE)(uVar2);\n    return uVar2;\n}\n",
        "token_count": 268
    }
}