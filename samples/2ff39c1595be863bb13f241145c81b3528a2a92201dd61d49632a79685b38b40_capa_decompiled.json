{
    "00401050": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401050(int32_t param_1)\n\n{\n    uint var_4h;\n    \n    fcn.009f650c(0);\n    if (*(param_1 + 4) != -1) {\n        *(param_1 + 4) = *(param_1 + 4) + 1;\n    }\n    fcn.009f6534();\n    return;\n}\n",
        "token_count": 89
    },
    "009f43d8": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f43d8(uchar *arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_10h) {\n        do {\n            if (*in_ECX[8] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xc];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 0x14))();\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                *arg_8h = iVar1;\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_10h = arg_10h + -1;\n            }\n            else {\n                if (arg_10h < iVar1) {\n                    iVar1 = arg_10h;\n                }\n                fcn.0040143d(arg_8h, arg_ch, *in_ECX[8], iVar1);\n                *in_ECX[0xc] = *in_ECX[0xc] - iVar1;\n                var_4h = var_4h + iVar1;\n                arg_10h = arg_10h - iVar1;\n                arg_8h = arg_8h + iVar1;\n                *in_ECX[8] = *in_ECX[8] + iVar1;\n            }\n        } while (0 < arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 382
    },
    "004010a0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004010a0(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.009f650c(0);\n    iVar2 = *0xf17a0c;\n    var_4h = *0xf17a0c;\n    uVar1 = fcn.004013a2();\n    arg_8h_00 = fcn.0040134d(uVar1);\n    if ((arg_8h_00 == 0) && (arg_8h_00 = iVar2,  iVar2 == 0)) {\n        iVar2 = fcn.004013d9(&var_4h, arg_8h);\n        if (iVar2 == -1) {\n            fcn.009f717f(\"bad cast\");\n            fcn.009f78d2(&var_14h, 0xa3b784);\n        }\n        arg_8h_00 = var_4h;\n        *0xf17a0c = var_4h;\n        fcn.00401050();\n        fcn.009f6793(arg_8h_00);\n    }\n    fcn.009f6534();\n    return arg_8h_00;\n}\n",
        "token_count": 309
    },
    "009f4471": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f4471(uchar *arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t arg_14h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    if (0 < arg_ch) {\n        do {\n            if (*in_ECX[9] == 0) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = *in_ECX[0xd];\n            }\n            if (iVar1 < 1) {\n                iVar1 = (**(*in_ECX + 4))(*arg_8h);\n                if (iVar1 == -1) {\n                    return var_4h;\n                }\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                arg_ch = arg_ch + -1;\n            }\n            else {\n                arg_14h = iVar1;\n                if (arg_ch < iVar1) {\n                    arg_14h = arg_ch;\n                }\n                fcn.0040143d(*in_ECX[9], iVar1, arg_8h, arg_14h);\n                *in_ECX[0xd] = *in_ECX[0xd] - arg_14h;\n                var_4h = var_4h + arg_14h;\n                arg_ch = arg_ch - arg_14h;\n                arg_8h = arg_8h + arg_14h;\n                *in_ECX[9] = *in_ECX[9] + arg_14h;\n            }\n        } while (0 < arg_ch);\n    }\n    return var_4h;\n}\n",
        "token_count": 384
    },
    "009f4536": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f4536(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t in_ECX;\n    uint32_t uVar8;\n    int32_t arg_8h_00;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    if ((*(in_ECX + 0x40) & 8) != 0) {\n        uVar8 = **(in_ECX + 0x24);\n        if ((uVar8 != 0) && (uVar4 = *(in_ECX + 0x3c),  uVar8 < uVar4)) {\n            iVar2 = **(in_ECX + 0x34);\n            **(in_ECX + 0x24) = uVar4;\n            **(in_ECX + 0x34) = (iVar2 + uVar8) - uVar4;\n        }\n    }\n    if (arg_8h == -1) {\n        return 0;\n    }\n    uVar8 = **(in_ECX + 0x24);\n    if ((uVar8 != 0) && (piVar6 = *(in_ECX + 0x34),  uVar8 < *piVar6 + uVar8)) {\n        *piVar6 = *piVar6 + -1;\n        puVar3 = **(in_ECX + 0x24);\n        **(in_ECX + 0x24) = puVar3 + 1;\n        *puVar3 = arg_8h;\n        return arg_8h;\n    }\n    if ((*(in_ECX + 0x40) & 2) != 0) {\n        return -1;\n    }\n    if (uVar8 == 0) {\n        uVar8 = 0;\n    }\n    else {\n        uVar8 = (**(in_ECX + 0x34) - **(in_ECX + 0x10)) + uVar8;\n    }\n    uVar4 = uVar8 >> 1;\n    if (uVar4 < 0x20) {\n        uVar4 = 0x20;\n    }\n    iVar2 = **(in_ECX + 0x10);\n    arg_8h_00 = 0;\n    var_4h = uVar8;\n    if (uVar4 != 0) {\n        do {\n            if (uVar8 <= 0x7fffffff - uVar4) break;\n            uVar4 = uVar4 >> 1;\n        } while (uVar4 != 0);\n        if (uVar4 != 0) {\n            var_4h = uVar4 + uVar8;\n            arg_8h_00 = fcn.0040146a(var_4h);\n        }\n    }\n    if (uVar8 == 0) {\n        *(in_ECX + 0x3c) = arg_8h_00;\n        **(in_ECX + 0x14) = arg_8h_00;\n        **(in_ECX + 0x24) = arg_8h_00;\n        **(in_ECX + 0x34) = var_4h;\n        uVar1 = *(in_ECX + 0x40);\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n        if ((uVar1 & 4) == 0) {\n            *piVar6 = arg_8h_00;\n            **(in_ECX + 0x30) = 1;\n            goto code_r0x009f46b0;\n        }\n    }\n    else {\n        fcn.0040143d(arg_8h_00, var_4h, iVar2, uVar8);\n        *(in_ECX + 0x3c) = *(in_ECX + 0x3c) + (arg_8h_00 - iVar2);\n        iVar5 = **(in_ECX + 0x24);\n        **(in_ECX + 0x14) = **(in_ECX + 0x14) + (arg_8h_00 - iVar2);\n        iVar5 = (iVar5 - iVar2) + arg_8h_00;\n        **(in_ECX + 0x24) = iVar5;\n        **(in_ECX + 0x34) = (arg_8h_00 - iVar5) + var_4h;\n        if ((*(in_ECX + 0x40) & 4) == 0) {\n            iVar5 = **(in_ECX + 0x24);\n            iVar7 = (**(in_ECX + 0x20) - iVar2) + arg_8h_00;\n            **(in_ECX + 0x10) = arg_8h_00;\n            **(in_ECX + 0x20) = iVar7;\n            **(in_ECX + 0x30) = (iVar5 - iVar7) + 1;\n            goto code_r0x009f46b0;\n        }\n        **(in_ECX + 0x10) = arg_8h_00;\n        piVar6 = *(in_ECX + 0x20);\n    }\n    *piVar6 = 0;\n    **(in_ECX + 0x30) = arg_8h_00;\ncode_r0x009f46b0:\n    if ((*(in_ECX + 0x40) & 1) != 0) {\n        fcn.009f73c2(iVar2);\n    }\n    *(in_ECX + 0x40) = *(in_ECX + 0x40) | 1;\n    **(in_ECX + 0x34) = **(in_ECX + 0x34) + -1;\n    puVar3 = **(in_ECX + 0x24);\n    **(in_ECX + 0x24) = puVar3 + 1;\n    *puVar3 = arg_8h;\n    return arg_8h;\n}\n",
        "token_count": 1409
    },
    "0040132a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040132a(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    fcn.009f650c(0);\n    iVar1 = *(param_1 + 4);\n    if ((iVar1 != 0) && (iVar1 != -1)) {\n        *(param_1 + 4) = iVar1 + -1;\n    }\n    iVar1 = *(param_1 + 4);\n    fcn.009f6534();\n    return ~-(iVar1 != 0) & param_1;\n}\n",
        "token_count": 132
    },
    "null": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009fefe4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fefe4(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3be38, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.009fd65e();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.00a0011f();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.00a00170(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009ff0aa();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.00a0011f();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 569
    },
    "00a1d862": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00a1db24)\n// WARNING: Removing unreachable block (ram,0x00a1daed)\n// WARNING: Removing unreachable block (ram,0x00a1ded5)\n// WARNING: Removing unreachable block (ram,0x00a1dafc)\n// WARNING: Removing unreachable block (ram,0x00a1db04)\n// WARNING: Removing unreachable block (ram,0x00a1db0a)\n// WARNING: Removing unreachable block (ram,0x00a1db0d)\n// WARNING: Removing unreachable block (ram,0x00a1db14)\n// WARNING: Removing unreachable block (ram,0x00a1db1e)\n// WARNING: Removing unreachable block (ram,0x00a1db79)\n// WARNING: Removing unreachable block (ram,0x00a1db73)\n// WARNING: Removing unreachable block (ram,0x00a1db7f)\n// WARNING: Removing unreachable block (ram,0x00a1db9c)\n// WARNING: Removing unreachable block (ram,0x00a1db9e)\n// WARNING: Removing unreachable block (ram,0x00a1dba6)\n// WARNING: Removing unreachable block (ram,0x00a1dba9)\n// WARNING: Removing unreachable block (ram,0x00a1dbae)\n// WARNING: Removing unreachable block (ram,0x00a1dbb1)\n// WARNING: Removing unreachable block (ram,0x00a1dede)\n// WARNING: Removing unreachable block (ram,0x00a1dbbc)\n// WARNING: Removing unreachable block (ram,0x00a1def5)\n// WARNING: Removing unreachable block (ram,0x00a1defc)\n// WARNING: Removing unreachable block (ram,0x00a1dbc7)\n// WARNING: Removing unreachable block (ram,0x00a1dbda)\n// WARNING: Removing unreachable block (ram,0x00a1dbdc)\n// WARNING: Removing unreachable block (ram,0x00a1dbe9)\n// WARNING: Removing unreachable block (ram,0x00a1dbee)\n// WARNING: Removing unreachable block (ram,0x00a1dbf4)\n// WARNING: Removing unreachable block (ram,0x00a1dbfd)\n// WARNING: Removing unreachable block (ram,0x00a1dc04)\n// WARNING: Removing unreachable block (ram,0x00a1dc1c)\n// WARNING: Removing unreachable block (ram,0x00a1dc2d)\n// WARNING: Removing unreachable block (ram,0x00a1dc3b)\n// WARNING: Removing unreachable block (ram,0x00a1dc7a)\n// WARNING: Removing unreachable block (ram,0x00a1dc83)\n// WARNING: Removing unreachable block (ram,0x00a1de9b)\n// WARNING: Removing unreachable block (ram,0x00a1dc91)\n// WARNING: Removing unreachable block (ram,0x00a1dc9b)\n// WARNING: Removing unreachable block (ram,0x00a1deb6)\n// WARNING: Removing unreachable block (ram,0x00a1dca8)\n// WARNING: Removing unreachable block (ram,0x00a1dcaf)\n// WARNING: Removing unreachable block (ram,0x00a1dcb9)\n// WARNING: Removing unreachable block (ram,0x00a1dcbe)\n// WARNING: Removing unreachable block (ram,0x00a1dcce)\n// WARNING: Removing unreachable block (ram,0x00a1dcd3)\n// WARNING: Removing unreachable block (ram,0x00a1dcdd)\n// WARNING: Removing unreachable block (ram,0x00a1dce2)\n// WARNING: Removing unreachable block (ram,0x00a1dcf4)\n// WARNING: Removing unreachable block (ram,0x00a1dd01)\n// WARNING: Removing unreachable block (ram,0x00a1dd10)\n// WARNING: Removing unreachable block (ram,0x00a1dd1d)\n// WARNING: Removing unreachable block (ram,0x00a1dd3a)\n// WARNING: Removing unreachable block (ram,0x00a1dd3e)\n// WARNING: Removing unreachable block (ram,0x00a1dd45)\n// WARNING: Removing unreachable block (ram,0x00a1dd4e)\n// WARNING: Removing unreachable block (ram,0x00a1dd51)\n// WARNING: Removing unreachable block (ram,0x00a1dd62)\n// WARNING: Removing unreachable block (ram,0x00a1dd70)\n// WARNING: Removing unreachable block (ram,0x00a1dd7b)\n// WARNING: Removing unreachable block (ram,0x00a1dd82)\n// WARNING: Removing unreachable block (ram,0x00a1ddad)\n// WARNING: Removing unreachable block (ram,0x00a1ddb2)\n// WARNING: Removing unreachable block (ram,0x00a1ddbd)\n// WARNING: Removing unreachable block (ram,0x00a1ddc6)\n// WARNING: Removing unreachable block (ram,0x00a1ddcc)\n// WARNING: Removing unreachable block (ram,0x00a1ddcf)\n// WARNING: Removing unreachable block (ram,0x00a1ddf5)\n// WARNING: Removing unreachable block (ram,0x00a1ddfa)\n// WARNING: Removing unreachable block (ram,0x00a1ddff)\n// WARNING: Removing unreachable block (ram,0x00a1de0c)\n// WARNING: Removing unreachable block (ram,0x00a1de1d)\n// WARNING: Removing unreachable block (ram,0x00a1de4e)\n// WARNING: Removing unreachable block (ram,0x00a1de23)\n// WARNING: Removing unreachable block (ram,0x00a1de49)\n// WARNING: Removing unreachable block (ram,0x00a1de2d)\n// WARNING: Removing unreachable block (ram,0x00a1de43)\n// WARNING: Removing unreachable block (ram,0x00a1de3c)\n// WARNING: Removing unreachable block (ram,0x00a1de51)\n// WARNING: Removing unreachable block (ram,0x00a1de7e)\n// WARNING: Removing unreachable block (ram,0x00a1de5b)\n// WARNING: Removing unreachable block (ram,0x00a1dce6)\n// WARNING: Removing unreachable block (ram,0x00a1dcc3)\n// WARNING: Removing unreachable block (ram,0x00a1deb9)\n// WARNING: Removing unreachable block (ram,0x00a1dbff)\n// WARNING: Removing unreachable block (ram,0x00a1dec3)\n// WARNING: Removing unreachable block (ram,0x00a1df04)\n// WARNING: Variable defined which should be unmapped: var_7ch\n\nvoid __cdecl\nfcn.00a1d862(uint arg_8h, uint arg_ch, char *arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            int32_t arg_24h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_9h;\n    uint var_4h;\n    \n    if (arg_24h == 0) {\n        puVar2 = fcn.009fb27c();\n        *puVar2 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        fcn.009f765f(var_7ch);\n        return;\n    }\n    for (; (((cVar1 = *arg_10h,  cVar1 == ' ' || (cVar1 == '\\t')) || (cVar1 == '\\n')) || (cVar1 == '\\r'));\n        arg_10h = arg_10h + 1) {\n    }\n    // WARNING: Could not recover jumptable at 0x00a1d8f5. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (12 cases) at 0xa1df2a\n    (**0xa1df2a)();\n    return;\n}\n",
        "token_count": 1952
    },
    "009f715c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f715c(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.009f7929(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "004010e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004010e6(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.0040106e(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.009f73c2(arg_10h);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00401325(param_3);\n    return;\n}\n",
        "token_count": 165
    },
    "004011cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011cc(uint *arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    uint var_4h;\n    \n    uVar1 = arg_8h;\n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f6dd9();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        arg_8h = puVar3;\n        if (7 < *(in_ECX + 0x18)) {\n            arg_8h = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.00401334(puVar3 + uVar1 * 2, *(in_ECX + 0x18) - uVar1, arg_8h + (uVar1 + arg_ch) * 2, uVar2 - arg_ch);\n        fcn.00401325(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 302
    },
    "00401221": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401221(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7e69(8);\n    *(unaff_EBP + -0x14) = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    while (*(unaff_EBP + 0xc) != 0) {\n        fcn.00401113();\n        *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + -1;\n        *(unaff_EBP + 8) = *(unaff_EBP + 8) + 0x1c;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.009f7f0e();\n    return;\n}\n",
        "token_count": 215
    },
    "00401235": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401235(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = arg_8h;\n        if (0xffffffff / arg_8h < 2) {\n            arg_8h = 0;\n            fcn.009f7034(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f78d2(&var_ch, 0xa3b580);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f786d(uVar2 * 2);\n    return;\n}\n",
        "token_count": 189
    },
    "004012b7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012b7(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f6dd9();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        puVar1 = puVar3;\n        if (0xf < *(in_ECX + 0x18)) {\n            puVar1 = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.004014f6(puVar3 + arg_8h, *(in_ECX + 0x18) - arg_8h, puVar1 + arg_ch + arg_8h, uVar2 - arg_ch);\n        fcn.0040149c(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 281
    },
    "0040132f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040132f(int32_t param_1, uint32_t param_2, uint param_3)\n\n{\n    if (*(param_1 + 0x28) == 0) {\n        param_2 = param_2 | 4;\n    }\n    fcn.004015c8(param_2, param_3);\n    return;\n}\n",
        "token_count": 83
    },
    "00401375": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.00401375(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (param_2 == 0xffffffff) {\n        fcn.009f6da1();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.00401352(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (0xf < param_2)) {\n        if (param_2 == 0) {\n            fcn.0040149c(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004013ac(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 225
    },
    "004013a2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004013a2(int32_t *param_1)\n\n{\n    uint var_4h;\n    \n    if (*param_1 == 0) {\n        fcn.009f650c(0);\n        if (*param_1 == 0) {\n            *0xf17a80 = *0xf17a80 + 1;\n            *param_1 = *0xf17a80;\n        }\n        fcn.009f6534();\n    }\n    return *param_1;\n}\n",
        "token_count": 115
    },
    "004013ac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004013ac(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.0040143d(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.009f73c2(arg_10h);\n    }\n    *(param_1 + 0x18) = 0xf;\n    fcn.0040149c(param_3);\n    return;\n}\n",
        "token_count": 169
    },
    "004013e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.004013e3(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (0xf < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            if (param_2 < *(param_1 + 0x14) + in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 199
    },
    "009f3f19": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f3f19(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    \n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar3 = *0xa35408;\n    if (((arg_14h & 1) != 0) && (iVar6 = **(in_ECX + 0x20),  iVar6 != 0)) {\n        if (arg_10h == 2) {\n            iVar4 = *(in_ECX + 0x3c);\ncode_r0x009f3f66:\n            arg_ch = arg_ch + (iVar4 - **(in_ECX + 0x10));\n        }\n        else if (arg_10h == 1) {\n            iVar4 = iVar6;\n            if ((arg_14h & 2) == 0) goto code_r0x009f3f66;\ncode_r0x009f3f78:\n            arg_ch = *0xa35408;\n        }\n        else if (arg_10h != 0) goto code_r0x009f3f78;\n        if ((-1 < arg_ch) && (arg_ch <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar3 = (**(in_ECX + 0x10) - iVar6) + arg_ch;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar3;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar3;\n            iVar3 = arg_ch;\n            if ((arg_14h & 2) != 0) {\n                iVar6 = **(in_ECX + 0x24);\n                if (iVar6 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar2 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar2 + iVar6) - iVar4;\n                }\n            }\n        }\n        goto code_r0x009f4039;\n    }\n    if (((arg_14h & 2) == 0) || (uVar1 = **(in_ECX + 0x24),  uVar1 == 0)) goto code_r0x009f4039;\n    if (arg_10h == 2) {\n        uVar5 = *(in_ECX + 0x3c);\ncode_r0x009f3ff6:\n        iVar6 = arg_ch + (uVar5 - **(in_ECX + 0x10));\n    }\n    else {\n        uVar5 = uVar1;\n        if (arg_10h == 1) goto code_r0x009f3ff6;\n        iVar6 = *0xa35408;\n        if (arg_10h == 0) {\n            iVar6 = arg_ch;\n        }\n    }\n    if ((-1 < iVar6) && (iVar6 <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n        iVar3 = (**(in_ECX + 0x10) - uVar1) + iVar6;\n        **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar3;\n        **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar3;\n        iVar3 = iVar6;\n    }\ncode_r0x009f4039:\n    *arg_8h = iVar3;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 981
    },
    "0040146a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040146a(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t arg_8h_00;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h_00 = 0;\n    }\n    else {\n        arg_8h_00 = arg_8h;\n        if (0xffffffff / arg_8h == 0) {\n            arg_8h = 0;\n            fcn.009f7034(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f78d2(&var_ch, 0xa3b580);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f786d(arg_8h_00);\n    return;\n}\n",
        "token_count": 199
    },
    "004014e7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.004014e7(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (0x7ffffffe < param_2) {\n        fcn.009f6da1();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.004014d3(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (7 < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401325(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004010e6(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 228
    },
    "0040159b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.0040159b(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (7 < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (7 < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            in_EAX = in_EAX + *(param_1 + 0x14) * 2;\n            if (param_2 < in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 209
    },
    "009f765f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f765f(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa3ea20) {\n        return;\n    }\n    *0xf17c88 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xf17c8c = &arg_8h;\n    *0xf17bc8 = 0x10001;\n    *0xf17b70 = 0xc0000409;\n    *0xf17b74 = 1;\n    var_328h = *0xa3ea20;\n    var_324h = *0xa3ea24;\n    *0xf17b7c = unaff_retaddr;\n    *0xf17c54 = in_GS;\n    *0xf17c58 = in_FS;\n    *0xf17c5c = in_ES;\n    *0xf17c60 = in_DS;\n    *0xf17c64 = unaff_EDI;\n    *0xf17c68 = unaff_ESI;\n    *0xf17c6c = unaff_EBX;\n    *0xf17c70 = in_EDX;\n    *0xf17c74 = in_ECX;\n    *0xf17c78 = in_EAX;\n    *0xf17c7c = unaff_EBP;\n    *0xf17c80 = unaff_retaddr;\n    *0xf17c84 = in_CS;\n    *0xf17c90 = in_SS;\n    *0xf17bc0 = (**0xf1a278)();\n    fcn.009fd338(1);\n    (**0xf1a274)(0);\n    (**0xf1a270)(0xa37698);\n    if (*0xf17bc0 == 0) {\n        fcn.009fd338(1);\n    }\n    uVar1 = (**0xf1a26c)(0xc0000409);\n    (**0xf1a268)(uVar1);\n    return;\n}\n",
        "token_count": 801
    },
    "009f7929": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f7929(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3bb78, 0xc);\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 != 0) {\n        if (*0xf19c30 == 3) {\n            fcn.009fdc73(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.009fdda1(iVar1);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.009fddd1(arg_8h_00, iVar1);\n            }\n            *(unaff_EBP + -4) = 0xfffffffe;\n            fcn.009f797f();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x009f79b1;\n            iVar1 = *(unaff_EBP + 8);\n        }\n        iVar1 = (**0xf1a280)(*0xf17ea8, 0, iVar1);\n        if (iVar1 == 0) {\n            puVar2 = fcn.009fb27c();\n            uVar3 = (**0xf1a234)();\n            uVar3 = fcn.009fb23a(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\ncode_r0x009f79b1:\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 422
    },
    "009f7b46": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.009f7b46(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x9f7bf1;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.009f7c1d;\n        uStack36 = *0xa3ea20 ^ &fcn.009f7b46::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.009f7b46::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.009fd65e();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.009f7b46::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 731
    },
    "009fbd1e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nfloat10 fcn.009fbd1e(double param_1)\n\n{\n    double dVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint arg_14h;\n    double dVar6;\n    uchar in_XMM0 [16];\n    double dVar7;\n    double dVar8;\n    uint64_t in_XMM2_Qa;\n    double dVar9;\n    uint32_t uVar11;\n    uchar auVar10 [16];\n    double dVar12;\n    ulong in_XMM6_Qa;\n    double dVar13;\n    double dVar14;\n    double dVar15;\n    double dVar16;\n    double dVar17;\n    uint in_XMM7_Dc;\n    uint in_XMM7_Dd;\n    double dStack12;\n    \n    dVar6 = SUB168(in_XMM0, 0);\n    uVar11 = SUB164(in_XMM0 >> 0x20, 0);\n    uVar3 = uVar11 >> 0xc;\n    auVar10 = pinsrw(ZEXT816(0), 0x2000, 2);\n    uVar2 = uVar3 & 0x7ffff;\n    if (uVar2 - 0x3fb00 < 0x3bb) {\n        iVar4 = (uVar3 & 0xfffc) - 0xfb00;\n        auVar10 = CONCAT88(in_XMM2_Qa & CONCAT44(in_XMM7_Dd, in_XMM7_Dc), *0xa375c8 & dVar6) | auVar10;\n        iVar5 = iVar4 * 4;\n        dVar9 = SUB168(auVar10, 0);\n        dVar13 = dVar6 * *(iVar4 * 2 + 0xa36d30);\n        dVar1 = SQRT(*0xa375d0 - dVar6 * dVar6) * dVar9;\n        dVar7 = dVar13 - dVar1;\n        uVar11 = SUB164(auVar10 >> 0x20, 0);\n        uVar2 = uVar11 & 0x80000000;\n        dVar8 = dVar7 * dVar7;\n        return ((dVar6 - dVar9) * (dVar6 + dVar9)) / (dVar13 + dVar1) +\n               (*0xa37570 + *0xa37578 * dVar8) * dVar7 * dVar8 * dVar8 +\n               _str.UUUUUU * dVar7 * dVar8 + (*(iVar5 + 0xa35e30) ^ uVar2 << 0x20) +\n               ((*(iVar5 + 0xa35e38) ^ SUB168(CONCAT412(uVar11, ZEXT412(uVar2) << 0x20) >> 0x40, 0)) &\n               0xffffffff00000000);\n    }\n    if (uVar2 - 0x3febb < 0x43) {\n        dVar1 = SQRT(*0xa375d0 - dVar6 * dVar6);\n        dVar7 = dVar6 & *0xa37560;\n        dVar8 = (dVar6 & 0x7fffffffffffffff) - dVar7;\n        dVar9 = *0xa375c8 & dVar1 | SUB168(auVar10, 0);\n        iVar5 = ((dVar1 << 2) >> 0x30) - 0xfec0;\n        dVar1 = dVar1 * *(iVar5 * 8 + 0xa36d30);\n        dVar13 = (dVar7 * dVar9 - dVar1) + dVar8 * dVar9;\n        iVar5 = iVar5 * 0x10;\n        dVar14 = dVar13 * dVar13;\n        auVar10 = pinsrw(0x0, (SUB161(CONCAT412(in_XMM7_Dd, CONCAT48(in_XMM7_Dc, dVar6)) >> 0x3f, 0) & 1) << 0xf, 3);\n        return (((*0xa37578 * dVar14 + *0xa37570) * dVar13 * dVar14 * dVar14 +\n                _str.UUUUUU * dVar13 * dVar14 + (*0xa37530 - *(iVar5 + 0xa35e30))) -\n               (((*0xa375d0 - dVar7 * dVar7) - dVar9 * dVar9) - ((dVar6 & 0x7fffffffffffffff) + dVar7) * dVar8) /\n               (dVar1 + dVar1 + dVar13)) + (*0xa37538 - *(iVar5 + 0xa35e38) & 0xffffffff00000000) | SUB168(auVar10, 0);\n    }\n    if (uVar2 - 0x3c300 < 0x3800) {\n        dVar1 = dVar6 * dVar6;\n        dVar7 = dVar6 * dVar6;\n        dVar8 = dVar6 * dVar1;\n        return dVar6 + dVar8 * dVar8 * dVar8 * (*0xa37580 * dVar1 + *0xa37590 + *0xa375a0 * dVar1 * dVar1) +\n                       dVar6 * dVar7 * (*0xa37588 * dVar7 + *0xa37598 + *0xa375a8 * dVar7 * dVar7);\n    }\n    if (uVar2 - 0x3fefe < 2) {\n        dVar1 = SQRT(*0xa375d0 - dVar6 * dVar6);\n        dVar8 = dVar6 & *0xa37550;\n        uVar11 = dVar1 >> 0x20;\n        dVar14 = dVar1 & 0xffffffff | uVar11 << 0x20;\n        dVar7 = dVar1 & *0xa37550;\n        dVar6 = dVar6 - dVar8;\n        dVar12 = SUB168(CONCAT412(uVar11, CONCAT48(SUB84(dVar1, 0), dVar14)) >> 0x40, 0);\n        dVar15 = SUB128(CONCAT84(in_XMM6_Qa, uVar11), 0) << 0x20;\n        dVar1 = (uVar11 << 0x20) * (uVar11 << 0x20);\n        dVar9 = (uVar11 << 0x20) * (uVar11 << 0x20);\n        dVar16 = dVar15 * dVar1;\n        dVar17 = SUB168(CONCAT412(uVar11, ZEXT812(dVar15)) >> 0x40, 0) * dVar9;\n        dVar13 = dVar16 * dVar16 * dVar16;\n        auVar10 = pinsrw(ZEXT816(0), SUB162(in_XMM0 >> 0x30, 0) & 0x8000, 3);\n        return (((*0xa37530 + (*0xa375b0 * dVar1 + *0xa375b8) * dVar16 * dVar16 * dVar13) -\n                ((dVar1 * dVar1 * *0xa375a0 + *0xa37590 + *0xa37580 * dVar1) * dVar13 +\n                 (SUB128(CONCAT84(dVar17, (dVar9 * dVar9 * *0xa375a8 + *0xa37598 + *0xa37588 * dVar9) * dVar17 >> 0x20)\n                         , 0) << 0x20) +\n                (((((*0xa375d0 - dVar8 * dVar8) - (dVar8 + dVar8) * dVar6) - dVar7 * dVar7) - dVar6 * dVar6) +\n                (dVar14 + dVar14 + (dVar7 - dVar14)) * (dVar7 - dVar14)) / (dVar12 + dVar12))) -\n               (dVar15 - (*0xa37538 + (dVar15 - *0xa37538)))) - (dVar15 - *0xa37538) | SUB168(auVar10, 0);\n    }\n    if (uVar2 < 0x3ff00) {\n        if (0x7fdf < (param_1 >> 0x30 & 0x7ff0) - 0x10) {\n            param_1 = param_1 | param_1 + 0.0;\n        }\n        return param_1;\n    }\n    if ((0x3ff00000 - (uVar11 & 0x7fffffff) | SUB164(in_XMM0, 0)) != 0) {\n        if (((param_1 >> 0x20 & 0x7fffffff) + 0x80100000) - (SUB84(param_1, 0) == 0) < 0) {\n            auVar10 = pinsrw(ZEXT816(0), 0x7ff0, 3);\n            dStack12 = SUB168(auVar10, 0) * 0.0;\n            arg_14h = 0x3d;\n        }\n        else {\n            dStack12 = param_1 + 0.0;\n            arg_14h = 0x3f1;\n        }\n        fcn.00a122e5(&param_1, &param_1, &dStack12, arg_14h);\n        return dStack12;\n    }\n    return *0xa37538 + *0xa37530 | ~*0xa375c0 & dVar6;\n}\n",
        "token_count": 2179
    },
    "009ff0aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009ff0aa(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009fd65e();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.009fd65e();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "009ff75b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009ff75b(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.009f7d84(*(unaff_EBP + -0x28));\n    iVar1 = fcn.009fd65e();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.009fd65e();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.009f7d5d(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.009ff10a(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 385
    },
    "00a002fe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00a002fe(void)\n\n{\n    uint unaff_EBX;\n    uint in_stack_fffffd2c;\n    uint in_stack_fffffd30;\n    uint var_2c8h;\n    \n    fcn.009fc280();\n    fcn.00a0038a(unaff_EBX, in_stack_fffffd2c, in_stack_fffffd30);\n    return;\n}\n",
        "token_count": 89
    },
    "00a05828": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00a0591b: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00a05920)\n// WARNING: Removing unreachable block (ram,0x00a0594e)\n// WARNING: Removing unreachable block (ram,0x00a05926)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a05828(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3c100, 0x18);\n    fcn.009fdc73(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xf18044 != 1) {\n        *0xf18040 = 1;\n        *0xf1803c = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.009fd3d5(*0xf18758);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.009fd3d5(*0xf18754);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.009fd3cc();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.009fd3d5(*piVar2);\n                        iVar3 = fcn.009fd3cc();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.009fd3d5(*0xf18758);\n                        piVar1 = fcn.009fd3d5(*0xf18754);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00a056ea(0xa34b54);\n        }\n        fcn.00a056ea(0xa34d5c);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.009fdb81(8);\n    }\n    return;\n}\n",
        "token_count": 798
    },
    "00a07a61": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00a07a61(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.009fdb81(0);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00a1285b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a1285b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3ea20 ^ &stack0xfffffffc;\n    fcn.009f882d(arg_10h);\n    var_14h = fcn.00a1d862(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1c72e(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a128b4:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a128f4;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a128e6:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a128f4;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a128e6;\n        goto code_r0x00a128b4;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a128f4:\n    fcn.009f765f(unaff_EBX);\n    return;\n}\n",
        "token_count": 514
    },
    "00a129da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a129da(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3ea20 ^ &stack0xfffffffc;\n    fcn.009f882d(arg_10h);\n    var_14h = fcn.00a1d862(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1cc72(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a12a33:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a12a73;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a12a65:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a12a73;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a12a65;\n        goto code_r0x00a12a33;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a12a73:\n    fcn.009f765f(unaff_EBX);\n    return;\n}\n",
        "token_count": 512
    },
    "00a1a171": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00a1a171(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.009fd3cc();\n    var_4h = 0;\n    if (*0xf1865c == 0) {\n        iVar2 = (**0xf1a368)(\"USER32.DLL\");\n        pcVar4 = *0xf1a228;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0xf1a228)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xf1865c = fcn.009fd35a(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0xf18660 = fcn.009fd35a(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0xf18664 = fcn.009fd35a(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0xf1866c = fcn.009fd35a(uVar3);\n        if (*0xf1866c != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0xf18668 = fcn.009fd35a(uVar3);\n        }\n    }\n    if ((*0xf18668 != iVar1) && (*0xf1866c != iVar1)) {\n        pcVar4 = fcn.009fd3d5(*0xf18668);\n        pcVar5 = fcn.009fd3d5(*0xf1866c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x00a1a2b3;\n        }\n    }\n    if ((((*0xf18660 != iVar1) && (pcVar4 = fcn.009fd3d5(*0xf18660),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xf18664 != iVar1 && (pcVar4 = fcn.009fd3d5(*0xf18664),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x00a1a2b3:\n    pcVar4 = fcn.009fd3d5(*0xf1865c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 812
    },
    "00a1c72e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1c72e(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1cc2f;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = str.5_v_[0] + L'\\xffffffff';\n        iVar4 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        uVar9 = str.5_v_[0] & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1c863;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1c86a;\ncode_r0x00a1c863:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1c86a:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1c878;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1c878:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3fae0 - str.5_v_[0]) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3fae0 < iVar12) {\n                if (iVar12 < *0xa3fadc) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + str.5_v_[3];\n                    iVar4 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = str.5_v_[3] + *0xa3fadc;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1cc2f;\n            }\n            var_10h = *0xa3fae0 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = str.5_v_[0] + L'\\xffffffff';\n            iVar12 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar10 = str.5_v_[0] & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1ca1b;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1ca1b:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = str.5_v_[1] + L'\\x01';\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1cc2f:\n    var_20h = iVar12 << (0x1fU - str.5_v_[1] & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3687
    },
    "00a1cc72": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1cc72(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1d173;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0xa3fafc - 1;\n        iVar4 = *0xa3fafc + (*0xa3fafc >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0xa3fafc & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1cda7;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1cdae;\ncode_r0x00a1cda7:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1cdae:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1cdbc;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1cdbc:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3faf8 - *0xa3fafc) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3faf8 < iVar12) {\n                if (iVar12 < *0xa3faf4) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0xa3fb08;\n                    iVar4 = *0xa3fb00 + (*0xa3fb00 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3fb00 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0xa3fb00 + (*0xa3fb00 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3fb00 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0xa3fb08 + *0xa3faf4;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1d173;\n            }\n            var_10h = *0xa3faf8 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0xa3fafc - 1;\n            iVar12 = *0xa3fafc + (*0xa3fafc >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0xa3fafc & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1cf5f;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1cf5f:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0xa3fb00 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1d173:\n    var_20h = iVar12 << (0x1fU - *0xa3fb00 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0xa3fb04 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0xa3fb04 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3654
    },
    "004010af": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __thiscall fcn.004010af(uint param_1, uint8_t param_2)\n\n{\n    fcn.0040108c();\n    if ((param_2 & 1) != 0) {\n        fcn.009f73c2(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 70
    },
    "00401131": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00401131(uint param_1)\n\n{\n    uint32_t unaff_ESI;\n    \n    fcn.004010e6(1, 0);\n    if ((unaff_ESI & 1) != 0) {\n        fcn.009f73c2(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 78
    },
    "009f409d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.009f409d(int32_t *arg_8h, int32_t arg_ch, uint noname_2, int32_t arg_14h, uint noname_4, uint noname_5, \n            uint noname_6, uint32_t arg_24h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    \n    arg_14h = arg_14h + arg_ch;\n    uVar1 = **(in_ECX + 0x24);\n    if ((uVar1 != 0) && (*(in_ECX + 0x3c) < uVar1)) {\n        *(in_ECX + 0x3c) = uVar1;\n    }\n    iVar4 = arg_14h;\n    if (arg_14h != *0xa35408) {\n        iVar4 = *0xa35408;\n        if (((arg_24h & 1) == 0) || (**(in_ECX + 0x20) == 0)) {\n            if (((arg_24h & 2) != 0) &&\n               (((uVar1 = **(in_ECX + 0x24),  uVar1 != 0 && (-1 < arg_14h)) &&\n                (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))))) {\n                iVar4 = (**(in_ECX + 0x10) - uVar1) + arg_14h;\n                **(in_ECX + 0x34) = **(in_ECX + 0x34) - iVar4;\n                **(in_ECX + 0x24) = **(in_ECX + 0x24) + iVar4;\n                iVar4 = arg_14h;\n            }\n        }\n        else if ((-1 < arg_14h) && (arg_14h <= *(in_ECX + 0x3c) - **(in_ECX + 0x10))) {\n            iVar4 = (**(in_ECX + 0x10) - **(in_ECX + 0x20)) + arg_14h;\n            **(in_ECX + 0x30) = **(in_ECX + 0x30) - iVar4;\n            **(in_ECX + 0x20) = **(in_ECX + 0x20) + iVar4;\n            iVar4 = arg_14h;\n            if ((arg_24h & 2) != 0) {\n                iVar2 = **(in_ECX + 0x24);\n                if (iVar2 != 0) {\n                    iVar4 = **(in_ECX + 0x20);\n                    iVar3 = **(in_ECX + 0x34);\n                    **(in_ECX + 0x24) = iVar4;\n                    **(in_ECX + 0x34) = (iVar3 + iVar2) - iVar4;\n                    iVar4 = arg_14h;\n                }\n            }\n        }\n    }\n    *arg_8h = iVar4;\n    arg_8h[2] = 0;\n    arg_8h[3] = 0;\n    arg_8h[4] = 0;\n    return;\n}\n",
        "token_count": 746
    },
    "0040130c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.0040130c(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if ((param_1 & 1) == 0) {\n        uVar1 = 4;\n    }\n    if ((param_1 & 2) == 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((param_1 & 8) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((param_1 & 4) != 0) {\n        uVar1 = uVar1 | 0x10;\n    }\n    return uVar1;\n}\n",
        "token_count": 157
    },
    "004013d9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004013d9(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint var_94h;\n    uint var_20h;\n    uint var_4h;\n    \n    var_4h = 0;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar1 = fcn.009f786d(0x18);\n        if (iVar1 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            fcn.00401537(*arg_ch + 0x18);\n            uVar2 = fcn.004013fc(&var_20h, 0);\n            iVar3 = fcn.00401578(uVar2);\n        }\n        *arg_8h = iVar3;\n        if (iVar1 != 0) {\n            fcn.00401082();\n            fcn.004013ac(1, 0);\n        }\n    }\n    return 2;\n}\n",
        "token_count": 241
    },
    "0040155a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040155a(int32_t param_1)\n\n{\n    if ((*(param_1 + 0x40) & 1) != 0) {\n        fcn.009f73c2(**(param_1 + 0x10));\n    }\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    **(param_1 + 0x14) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    *(param_1 + 0x40) = *(param_1 + 0x40) & 0xfffffffe;\n    *(param_1 + 0x3c) = 0;\n    return;\n}\n",
        "token_count": 207
    },
    "00a132fe": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nunkbyte5 __fastcall fcn.00a132fe(uint param_1, uchar param_2)\n\n{\n    uint in_EAX;\n    int32_t unaff_EBP;\n    float10 in_ST0;\n    float10 fVar1;\n    uint unaff_retaddr;\n    uint var_9fh;\n    uint var_90h;\n    \n    *(unaff_EBP + -0xa0) = (*0xa3f8de < ABS(in_ST0)) << 8 | (*0xa3f8de == ABS(in_ST0)) << 0xe;\n    if ((*(unaff_EBP + -0x9f) & 0x41) == 0) {\n        fVar1 = ROUND(in_ST0);\n        *(unaff_EBP + -0xa0) = (fVar1 < 0) << 8 | (fVar1 == 0) << 0xe;\n        fVar1 = in_ST0 - fVar1;\n        *(unaff_EBP + -0xa0) = (fVar1 < 0) << 8 | (fVar1 == 0) << 0xe;\n        f2xm1(ABS(fVar1));\n        return CONCAT14(*(unaff_EBP + -0x9f), in_EAX);\n    }\n    *(unaff_EBP + -0xa0) = (in_ST0 < 0) << 8 | (in_ST0 == 0) << 0xe;\n    if ((*(unaff_EBP + -0x9f) & 1) == 0) {\n        return CONCAT14(param_2, unaff_retaddr);\n    }\n    *(unaff_EBP + -0x90) = 4;\n    return CONCAT14(param_2, unaff_retaddr);\n}\n",
        "token_count": 388
    },
    "00a1540c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a1540c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3c3a8, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.009fb28f();\n        *puVar2 = 0;\n        puVar2 = fcn.009fb27c();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xf18764)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xf187c0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00a14962(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.009fb27c();\n                    *puVar2 = 9;\n                    puVar2 = fcn.009fb28f();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00a14cd9(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.00a154de(0xa3c3a8);\n                goto code_r0x00a154d8;\n            }\n        }\n        puVar2 = fcn.009fb28f();\n        *puVar2 = 0;\n        puVar2 = fcn.009fb27c();\n        *puVar2 = 9;\n        fcn.009f7811(0, 0, 0, 0, 0);\n    }\ncode_r0x00a154d8:\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 639
    },
    "00401091": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_d8h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401091(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint unaff_EBX;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint arg_ch;\n    uint var_d8h;\n    uint var_50h;\n    uint var_48h;\n    int32_t var_3ch;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_24h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0x3e6;\n    iVar3 = 0;\n    if (var_3ch == 0x23c91b) {\n        (**0xf1a244)();\n        (**0xf1a240)(0);\n        var_10h = 0;\n        var_8h = 0;\n        (**0xf1a23c)(0, &var_14h, 0, 0, &var_50h);\n        fcn.009f8447(0xa406d0, \"%s %c\", \"sadarejinaja pediyeroba\");\n        fcn.00401596(3, 1);\n        fcn.0040126c();\n        fcn.0040112c(\n                    L\"gibaxayilurijeselizuwaceco secasawogupurozova pefoveluladayekejelalifi noravejoyabotasofotiwi be donoruleyubuze hi johuyokojuzezise gewiza dawitozotodu\"\n                    );\n        fcn.004011a4(&var_48h);\n        arg_ch = 1;\n        fcn.004010e6(1, 0);\n        fcn.009f831d(L\"nuxukazahajomuvukasubenelugixo yifezazowuzunotuzilaleyobemuxa\", arg_ch);\n        fcn.009f7480(*0xa351c0);\n        fcn.009f82a1(0);\n        fcn.009f81a8(0, 0, 0);\n        fcn.009f8034(0, 0);\n        fcn.009f7f4a(*0xa351b0, *0xa351b0 >> 0x20);\n        fcn.004015cd();\n        fcn.009f73c2();\n        fcn.00401497();\n    }\n    iVar4 = 0;\n    while( true ) {\n        (**0xf1a238)();\n        (**0xf1a234)();\n        pcVar1 = *0xf1a220;\n        if (((0xe60ad9 < iVar4) && (var_24h != 'i')) && (var_30h != 0x16838de3)) break;\n        iVar4 = iVar4 + 1;\n        if (0xe4a4b34 < iVar4) {\ncode_r0x009f2dda:\n            iVar4 = 0;\n            do {\n                if (iVar4 == 0x516c56) {\n                    *0xe22714 = *0xa3d414;\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x55bd1c);\n            *0xe22714 = *0xe22714 + 0x638b9;\n            *0xe1e090 = (**0xf1a220)(0, *0xe22714, unaff_EBX);\n            *0xe1e090 = (*pcVar1)(0, *0xe22714);\n            uVar2 = 0;\n            *0xe49160 = *0xa3d008;\n            if (*0xe22714 != 0) {\n                do {\n                    var_8h = *0xe49160 + 0x638b9;\n                    *(uVar2 + *0xe1e090) = *(var_8h + uVar2);\n                    uVar2 = uVar2 + 1;\n                } while (uVar2 < *0xe22714);\n            }\n            fcn.00401415(0xe1e090, 0xe22714);\n            (**0xf1a230)(0xa406d0, \"Virtual\");\n            (**0xf1a22c)(0xa406d0, \"Protect\");\n            *0xe1b20c = (**0xf1a228)(*0xe1eb84, 0xa406d0);\n            var_ch = 0x40;\n            do {\n                if (iVar3 == 0x658c4) {\n                    (**0xe1b20c)(*0xe1e090, *0xe22714, var_ch, &var_8h);\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x667c97);\n            fcn.00401523(*0xe1e090, *0xe22714, 0xa3d010);\n            return;\n        }\n    }\n    *0xe226f8 = 0x9251f4de;\n    if (*0xe22714 == 0x187) {\n        *0xe1eb80 = 0;\n        var_8h = *0xe1eb80;\n    }\n    *0xe1eb50 = 0xf5dec666;\n    var_14h = *0xe226f8;\n    var_10h = *0xe1eb50;\n    goto code_r0x009f2dda;\n}\n",
        "token_count": 1258
    },
    "00401415": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.00401415(int32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    uint unaff_EDI;\n    uchar auStackY4276 [4];\n    int32_t *piStackY4272;\n    uchar auStackY4268 [4];\n    uchar auStackY4264 [4];\n    uint uStackY4260;\n    uint uStackY4256;\n    uint32_t uStackY4252;\n    uint32_t *puStackY4248;\n    uint8_t uStackY4244;\n    uint8_t uStackY4243;\n    uint8_t uStackY4242;\n    uint8_t uStackY4241;\n    uint uStackY4240;\n    uint uStackY4236;\n    uint uStackY4232;\n    uint uStackY4228;\n    uint uStackY4224;\n    uint uStackY4220;\n    uint uStackY4216;\n    uint uStackY4212;\n    uint uStackY4208;\n    uint uStackY4204;\n    uint uStackY4200;\n    uint uStackY4196;\n    uint uStackY4192;\n    uint uStackY4188;\n    uint uStackY4184;\n    uint uStackY4180;\n    uint uStackY4176;\n    uint uStackY4172;\n    uint uStackY4168;\n    int32_t iStackY4164;\n    uint uStackY4160;\n    uint uStackY4156;\n    uint uStackY4152;\n    uint uStackY4148;\n    uint uStackY4144;\n    uint uStackY4140;\n    uint uStackY4136;\n    uint uStackY4132;\n    uint uStackY4128;\n    uint uStackY4124;\n    uint uStackY4120;\n    uint uStackY4116;\n    uint uStackY4112;\n    uint uStackY4108;\n    uchar auStackY4104 [2048];\n    uchar auStackY2056 [1992];\n    uint uStackY64;\n    char16_t *pcStackY60;\n    uchar *puStackY56;\n    uint uStackY52;\n    uchar *puStackY48;\n    uchar *puStackY44;\n    uchar *puStackY40;\n    uchar *puStackY36;\n    uint uStackY32;\n    uint uStackY28;\n    uint32_t uStackY24;\n    uint uStackY20;\n    \n    fcn.009f7670();\n    piStackY4272 = param_1;\n    puStackY4248 = param_2;\n    *0xe1ff4f = 0x32;\n    *0xe1b1e0 = 0;\n    *0xe1ff4b = 0x6e;\n    *0xe1b240 = 0;\n    *0xe1ff49 = 0x65;\n    *0xe1e094 = 0xf3f9f346;\n    *0xe1ff51 = 100;\n    *0xe1cdd8 = 0;\n    *0xe1cddc = 0;\n    *0xe1ff53 = 0x6c;\n    *0xe1eb20 = 0;\n    *0xe1ff4e = 0x33;\n    *0xe1b23c = 0xd57c7618;\n    *0xe1ff50 = 0x2e;\n    *0xe1b200 = 0xba248176;\n    *0xe1b204 = 0xffffffff;\n    *0xe1ff52 = 0x6c;\n    *0xe1eb60 = 0;\n    *0xe1eb64 = 0;\n    *0xe1ff48 = 0x6b;\n    *0xe1eb10 = 0;\n    *0xe1ff4d = 0x6c;\n    *0xe1eaec = 0xdafc2b0c;\n    *0xe1ff4c = 0x65;\n    *0xe1e0b0 = 0xbb6aa30c;\n    *0xe1ff4a = 0x72;\n    *0xe1eb18 = 0;\n    *0xe1eb1c = 0;\n    uStackY20 = 0xe1ff48;\n    *0xe1ff54 = 0;\n    uStackY24 = 0x9f20e5;\n    uStackY4200 = *0xe1e0b0;\n    uStackY4196 = *0xe1eb20;\n    uStackY4192 = *0xe1eb18;\n    uStackY4168 = *0xe1b1e0;\n    uStackY4156 = *0xe1e094;\n    uStackY4152 = *0xe1b23c;\n    uStackY4148 = *0xe1eaec;\n    uStackY4140 = *0xe1eb60;\n    uStackY4136 = *0xe1cdd8;\n    uStackY4120 = *0xe1b240;\n    uStackY4116 = *0xe1b200;\n    uStackY4112 = *0xe1eb10;\n    *0xe1eb84 = (**0xf1a224)();\n    *0xe1eb92 = 0x6f;\n    *0xa4ef28 = 0xb756ec50;\n    *0xe1eb95 = 0x6c;\n    *0xe49178 = 0;\n    *0xe1eb96 = 0x41;\n    *0xa4ef24 = 0;\n    *0xe1eb93 = 0x62;\n    *0xe1b214 = 0x8a2a9718;\n    *0xe1eb99 = 0x6f;\n    *0xe1b248 = 0;\n    *0xe1b24c = 0;\n    *0xe1eb90 = 0x47;\n    *0xe1eb3c = 0xd855589a;\n    *0xe1eb91 = 0x6c;\n    *0xe1e0a0 = 0;\n    *0xe1e0a4 = 0;\n    *0xe1eb98 = 0x6c;\n    *0xe22708 = 0;\n    *0xe2270c = 0;\n    *0xe1eb94 = 0x61;\n    *0xe1eaf0 = 0;\n    *0xe1eaf4 = 0;\n    *0xe1eb9a = 99;\n    *0xe1b210 = 0;\n    *0xe1eb97 = 0x6c;\n    *0xe1ead8 = 0;\n    *0xe1eadc = 0;\n    *0xe1eb9b = 0;\n    uStackY24 = *param_2;\n    uStackY28 = 0;\n    uStackY32 = 0x9f23dc;\n    uStackY4188 = *0xe1eb3c;\n    uStackY4184 = *0xe1ead8;\n    uStackY4180 = *0xe49178;\n    uStackY4176 = *0xa4ef28;\n    uStackY4172 = *0xe1b214;\n    uStackY4160 = *0xe1b248;\n    uStackY4144 = *0xe1b210;\n    uStackY4132 = *0xe22708;\n    uStackY4128 = *0xe1eaf0;\n    uStackY4124 = *0xe1e0a0;\n    uStackY4108 = *0xa4ef24;\n    iVar2 = (**0xf1a220)();\n    uVar4 = 0;\n    iStackY4164 = 4;\n    uStackY4252 = 0;\n    if (*puStackY4248 != 0) {\n        do {\n            puVar3 = *piStackY4272 + uStackY4252;\n            uVar1 = puVar3[3];\n            uStackY4228 = 2;\n            uStackY4244 = uVar1 << 2;\n            uStackY4240 = 0xc0;\n            uStackY4242 = *puVar3 | uStackY4244 & 0xc0;\n            uStackY4224 = 4;\n            uStackY4220 = 0xc0;\n            uStackY4243 = puVar3[1] | (uVar1 & 0xc) << 4;\n            uStackY4212 = 6;\n            uStackY4236 = 0xc0;\n            uStackY4241 = puVar3[2] | uVar1 << 6;\n            *(uVar4 + iVar2) = uStackY4242;\n            *(uVar4 + 1 + iVar2) = uStackY4243;\n            uStackY4216 = 0xb6f4c84c;\n            if (*0xe22714 == 0x34e) {\n                *0xe1e0a8 = 0;\n                *0xe1e0ac = 0;\n                uStackY4260 = *0xe1e0a8;\n            }\n            uStackY4232 = 0xfaace874;\n            *0xa4ef20 = uStackY4232;\n            *0xe1eae0 = uStackY4216;\n            *(uVar4 + 2 + iVar2) = uStackY4241;\n            *0xe1b220 = 0xe0cdb12a;\n            *0xe1b224 = 0xffffffff;\n            uStackY4208 = *0xe1b220;\n            if (*0xe22714 == 0x390) {\n                uStackY32 = 0;\n                puStackY36 = &stack0xfffff7f8;\n                puStackY40 = &stack0xffffef4c;\n                puStackY44 = &stack0xffffef58;\n                puStackY48 = &stack0xffffef54;\n                uStackY52 = 0;\n                puStackY56 = &stack0xffffeff8;\n                pcStackY60 = L\"viwesejolojukudolu\";\n                uStackY64 = 0x9f27b4;\n                (**0xf1a21c)();\n                *0xe4917c = 0x83df3254;\n                uStackY4256 = *0xe4917c;\n            }\n            *0xe1b1e8 = 0xac276670;\n            uStackY4252 = uStackY4252 + iStackY4164;\n            uVar4 = uVar4 + 3;\n            uStackY4204 = *0xe1b1e8;\n        } while (uStackY4252 < *puStackY4248);\n    }\n    *piStackY4272 = iVar2;\n    *puStackY4248 = uVar4;\n    uStackY20 = 0x9f28a6;\n    fcn.009f765f(unaff_EDI);\n    return;\n}\n",
        "token_count": 2514
    },
    "00a24060": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.00a24060(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 591
    },
    "004010be": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid __cdecl fcn.004010be(uint noname_0, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint32_t arg_ch_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t extraout_ECX;\n    int32_t iVar7;\n    int32_t extraout_ECX_00;\n    int32_t unaff_EBP;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_4h;\n    \n    fcn.009f7ed5(0x34);\n    *(unaff_EBP + -0x40) = extraout_ECX;\n    *(unaff_EBP + -0x38) = *(unaff_EBP + 0x14);\n    uVar2 = fcn.004013bb();\n    arg_ch_00 = *(unaff_EBP + 0x10);\n    if (arg_ch_00 != 0) {\n        iVar3 = (*(extraout_ECX + 0x10) - *(extraout_ECX + 0xc)) / 0x1c;\n        iVar7 = 0x9249249;\n        if (0x9249249U - iVar3 < arg_ch_00) {\n            iVar3 = fcn.004011b3();\n            iVar7 = extraout_ECX_00;\n        }\n        uVar4 = iVar3 + arg_ch_00;\n        if (uVar2 < uVar4) {\n            if (iVar7 - (uVar2 >> 1) < uVar2) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = uVar2 + (uVar2 >> 1);\n            }\n            if (uVar2 < uVar4) {\n                uVar2 = uVar4;\n            }\n            uVar5 = fcn.004010b9(uVar2);\n            *(unaff_EBP + -0x34) = uVar5;\n            *(unaff_EBP + -0x3c) = uVar5;\n            *(unaff_EBP + -4) = 0;\n            uVar5 = fcn.0040136b(*(extraout_ECX + 0xc), *(unaff_EBP + 0xc), uVar5);\n            *(unaff_EBP + -0x3c) = uVar5;\n            uVar5 = fcn.004014ce(uVar5, arg_ch_00, *(unaff_EBP + -0x38));\n            *(unaff_EBP + -0x3c) = uVar5;\n            fcn.0040136b(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), uVar5);\n            *(unaff_EBP + -4) = 0xffffffff;\n            iVar7 = *(extraout_ECX + 0xc);\n            iVar3 = *(extraout_ECX + 0x10);\n            if (*(extraout_ECX + 0xc) != 0) {\n                fcn.00401294(*(extraout_ECX + 0xc), *(extraout_ECX + 0x10));\n                fcn.009f73c2(*(extraout_ECX + 0xc));\n            }\n            iVar1 = *(unaff_EBP + -0x34);\n            *(extraout_ECX + 0x14) = uVar2 * 0x1c + iVar1;\n            *(extraout_ECX + 0x10) = (arg_ch_00 + (iVar3 - iVar7) / 0x1c) * 0x1c + iVar1;\n            *(extraout_ECX + 0xc) = iVar1;\n        }\n        else {\n            if ((*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c < arg_ch_00) {\n                fcn.0040140b(*(unaff_EBP + -0x38));\n                fcn.0040136b(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc));\n                *(unaff_EBP + -4) = 2;\n                fcn.004014ce(*(extraout_ECX + 0x10), arg_ch_00 - (*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c, \n                             unaff_EBP + -0x30);\n                *(unaff_EBP + -4) = 0xffffffff;\n                *(extraout_ECX + 0x10) = *(extraout_ECX + 0x10) + arg_ch_00 * 0x1c;\n                fcn.00401343(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10) + arg_ch_00 * -0x1c, unaff_EBP + -0x30);\n            }\n            else {\n                fcn.0040140b(*(unaff_EBP + -0x38));\n                uVar5 = *(extraout_ECX + 0x10);\n                *(unaff_EBP + -0x34) = uVar5;\n                *(unaff_EBP + -0x34) = *(unaff_EBP + -0x34) + arg_ch_00 * -0x1c;\n                uVar6 = fcn.0040136b(*(unaff_EBP + -0x34), uVar5, uVar5);\n                *(extraout_ECX + 0x10) = uVar6;\n                fcn.004015a0(*(unaff_EBP + 0xc), *(unaff_EBP + -0x34), uVar5);\n                fcn.00401343(*(unaff_EBP + 0xc), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc), unaff_EBP + -0x30);\n            }\n            fcn.004010e6(1, 0);\n        }\n    }\n    fcn.009f7f31();\n    return;\n}\n",
        "token_count": 1437
    },
    "00401352": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401352(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7e69(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 0xf;\n    if (uVar4 == 0xffffffff) {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    else {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= -uVar2 - 2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.0040146a(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 0x10) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.0040143d(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004013ac(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.0040149c(*(unaff_EBP + 0xc));\n    fcn.009f7f0e();\n    return;\n}\n",
        "token_count": 595
    },
    "004014d3": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004014d3(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f7e69(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 7;\n    if (uVar4 < 0x7fffffff) {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= 0x7ffffffe - uVar2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    else {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00401235(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 8) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.0040106e(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004010e6(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401325(*(unaff_EBP + 0xc));\n    fcn.009f7f0e();\n    return;\n}\n",
        "token_count": 597
    },
    "0040133e": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040133e(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *extraout_EDX;\n    int32_t iVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if (0 < arg_ch) {\n        do {\n            uVar1 = fcn.0040141a();\n            *extraout_EDX = *extraout_EDX ^ uVar1;\n            *0xe226f0 = 0xfc7352ee;\n            *0xe226f4 = 0xffffffff;\n            if (arg_ch == 0x649) {\n                *0xe49158 = 0;\n                *0xe4915c = 0;\n            }\n            *0xa4ef00 = 0xaa6d9b4e;\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "009fc2e7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009fc2e7(uint param_1, int32_t param_2)\n\n{\n    float10 fVar1;\n    char cVar2;\n    uint8_t uVar3;\n    ushort uVar4;\n    int32_t unaff_EBP;\n    float10 in_ST0;\n    float10 in_ST1;\n    uint var_a2h;\n    uint var_94h;\n    uint var_90h;\n    \n    if (*(param_2 + 0xe) == '\\x05') {\n        uVar4 = CONCAT31(*(unaff_EBP + -0xa4) >> 8 & 0xfe | 2, 0x3f);\n    }\n    else {\n        uVar4 = 0x133f;\n    }\n    *(unaff_EBP + -0xa2) = uVar4;\n    fVar1 = 0;\n    *(unaff_EBP + -0x94) = param_2;\n    *(unaff_EBP + -0xa0) = (in_ST0 < fVar1) << 9 | (in_ST0 != fVar1) << 10 | (in_ST0 == fVar1) << 0xe;\n    *(unaff_EBP + -0x90) = 0;\n    fVar1 = 0;\n    *(unaff_EBP + -0xa0) = (in_ST1 < fVar1) << 9 | (in_ST1 != fVar1) << 10 | (in_ST1 == fVar1) << 0xe;\n    uVar3 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    cVar2 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    // WARNING: Could not recover jumptable at 0x009fc371. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(param_2 + (*(((cVar2 << 1 | cVar2 < '\\0') & 0xf) + 0xa3ebfc) |\n                  *(((uVar3 & 7) << 1 | uVar3 < '\\0') + 0xa3ebfc) << 2) + 0x10))();\n    return;\n}\n",
        "token_count": 503
    },
    "009fc4f5": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.009fc4f5(uint param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_2 + 4) & 0x7ff00000;\n    if (uVar1 != 0x7ff00000) {\n        return uVar1;\n    }\n    return *(param_2 + 4);\n}\n",
        "token_count": 93
    },
    "00401523": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401523(uint arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe1b234 = *arg_10h;\n    *0xe1eb70 = 0xd15e210a;\n    *0xe1eb74 = 0xffffffff;\n    if (*0xe22714 == 0x6dc) {\n        *0xe49150 = 0xe2eeb842;\n        *0xe49154 = 0xffffffff;\n    }\n    *0xa4ef04 = 0xd885057e;\n    fcn.0040133e(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 163
    },
    "00a0cf36": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00a0d35e)\n// WARNING: Removing unreachable block (ram,0x00a0d31e)\n// WARNING: Removing unreachable block (ram,0x00a0d336)\n// WARNING: Removing unreachable block (ram,0x00a0d2de)\n// WARNING: Removing unreachable block (ram,0x00a0d376)\n// WARNING: Removing unreachable block (ram,0x00a0d2f6)\n// WARNING: Removing unreachable block (ram,0x00a0d1ca)\n\nuint32_t fcn.00a0cf36(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    do {\n        uVar5 = 0;\n        if (**0xf185f4 == '_') {\n            *0xf185f4 = *0xf185f4 + 1;\n            uVar5 = 0x4000;\n        }\n        cVar1 = **0xf185f4;\n        if (('@' < cVar1) && (cVar1 < '[')) {\n            uVar2 = **0xf185f4 - 0x41;\n            *0xf185f4 = *0xf185f4 + 1;\n            if ((uVar2 & 1) == 0) {\n                uVar5 = uVar5 | 0x8000;\n            }\n            else {\n                uVar5 = uVar5 | 0xa000;\n            }\n            if (0x17 < uVar2) {\n                return uVar5;\n            }\n            if ((uVar5 & 0x8000) == 0) {\n                uVar5 = uVar5 & 0xffff9fff;\n            }\n            else {\n                uVar5 = uVar5 | 0x800;\n            }\n            uVar4 = uVar2 & 0x18;\n            if (uVar4 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar4 == 8) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar4 != 0x10) {\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            uVar2 = uVar2 & 6;\n            if (uVar2 != 0) {\n                if (uVar2 == 2) {\n                    if ((uVar5 & 0x8000) == 0) {\n                        return uVar5 & 0xffff9fff;\n                    }\n                    return uVar5 | 0x200;\n                }\n                if (uVar2 != 4) {\n                    if (uVar2 != 6) {\n                        return 0xffff;\n                    }\n                    return uVar5 | 0x400;\n                }\n                return uVar5 | 0x100;\n            }\n            return uVar5;\n        }\n        if (cVar1 != '$') {\n            cVar1 = **0xf185f4;\n            if (('/' < cVar1) && (cVar1 < '9')) {\n                *0xf185f4 = *0xf185f4 + 1;\n    // switch table (9 cases) at 0xa0d3fe\n                switch(cVar1) {\n                case '0':\n                    return 0x800;\n                case '1':\n                    return 0x1000;\n                case '2':\n                    return 0;\n                case '3':\n                    return 0x4000;\n                case '4':\n                    return 0x2000;\n                case '5':\n                    return 0x6000;\n                case '6':\n                    return 0x6800;\n                case '7':\n                    return 0x7000;\n                case '8':\n                    return 0x7800;\n                default:\n                    return 0xffff;\n                }\n            }\n            if (cVar1 != '9') {\n                return (cVar1 != '\\0') + 0xfffe;\n            }\n            *0xf185f4 = *0xf185f4 + 1;\n            return 0xfffd;\n        }\n        bVar6 = false;\n        pcVar3 = *0xf185f4 + 1;\n        cVar1 = *pcVar3;\n        if ('B' < cVar1) {\n            if (cVar1 == 'C') {\n                uVar5 = 0x7c00;\n                goto code_r0x00a0d294;\n            }\n            if (cVar1 == 'D') {\n                uVar5 = uVar5 | 0x9100;\n                goto code_r0x00a0d294;\n            }\n            if (cVar1 == 'E') {\n                uVar5 = uVar5 | 0x9200;\n                goto code_r0x00a0d294;\n            }\n            if (cVar1 != 'R') {\n                *0xf185f4 = pcVar3;\n                return 0xffff;\n            }\n            pcVar3 = *0xf185f4 + 2;\n            cVar1 = *pcVar3;\n            bVar6 = true;\n            if ((cVar1 < '0') || ('5' < cVar1)) {\n                *0xf185f4 = pcVar3;\n                return (cVar1 == '\\0') + 0xfffe;\n            }\ncode_r0x00a0d1aa:\n            if (bVar6) {\n                uVar5 = uVar5 | 0x8e00;\n            }\n            else {\n                uVar5 = uVar5 | 0x8d00;\n            }\n            if ((*pcVar3 - 0x30U & 1) != 0) {\n                uVar5 = uVar5 | 0x2000;\n            }\n            uVar2 = *pcVar3 - 0x30U & 6;\n            if (uVar2 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar2 == 2) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar2 != 4) {\n                    *0xf185f4 = pcVar3;\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            goto code_r0x00a0d294;\n        }\n        if (cVar1 == 'B') {\n            uVar5 = uVar5 | 0x9800;\n            goto code_r0x00a0d294;\n        }\n        if (cVar1 == '\\0') {\n            uVar5 = 0xfffe;\n            pcVar3 = *0xf185f4;\n            goto code_r0x00a0d294;\n        }\n        if (cVar1 != '$') {\n            if (cVar1 < '0') {\n                *0xf185f4 = pcVar3;\n                return 0xffff;\n            }\n            if ('5' < cVar1) {\n                if (cVar1 != 'A') {\n                    *0xf185f4 = pcVar3;\n                    return 0xffff;\n                }\n                uVar5 = uVar5 | 0x9000;\n                goto code_r0x00a0d294;\n            }\n            goto code_r0x00a0d1aa;\n        }\n        if ((*0xf185f4)[2] == 'P') {\n            pcVar3 = *0xf185f4 + 2;\n        }\n        *0xf185f4 = pcVar3 + 1;\n        cVar1 = **0xf185f4;\n        if (cVar1 < 'K') {\n            if (cVar1 == 'J') {\ncode_r0x00a0d123:\n                cVar1 = pcVar3[2];\n                if (('/' < cVar1) && (cVar1 < ':')) {\n                    *0xf185f4 = pcVar3 + cVar1 + -0x2d;\n                    uVar5 = fcn.00a0cf36();\n                    return uVar5 | 0x10000;\n                }\n                uVar5 = 0xffff;\n                pcVar3 = pcVar3 + 2;\ncode_r0x00a0d294:\n                *0xf185f4 = pcVar3 + 1;\n                return uVar5;\n            }\n            if (cVar1 == '\\0') {\n                return 0xfffe;\n            }\n            if (cVar1 != 'F') {\n                bVar6 = cVar1 == 'H';\ncode_r0x00a0cfdd:\n                if (!bVar6) {\n                    return 0xffff;\n                }\n            }\n        }\n        else {\n            if (cVar1 < 'L') {\n                return 0xffff;\n            }\n            if ('M' < cVar1) {\n                if ('O' < cVar1) {\n                    bVar6 = cVar1 == 'Q';\n                    goto code_r0x00a0cfdd;\n                }\n                goto code_r0x00a0d123;\n            }\n        }\n        *0xf185f4 = pcVar3 + 2;\n    } while( true );\n}\n",
        "token_count": 2291
    },
    "00a11f92": {
        "rules": [
            "check for trap flag exception/d5d4160e77a5474aa5157e4631e4f1b3"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a11f92(uint arg_8h, int32_t *arg_ch)\n\n{\n    char cVar1;\n    uint arg_ch_00;\n    char *pcVar2;\n    uint var_18h;\n    int32_t var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    cVar1 = **0xf185f4;\n    var_4h = var_4h & 0xffff0000;\n    var_8h = 0;\n    pcVar2 = *0xf185f4;\n    if (cVar1 != '\\0') {\n        if (cVar1 != '$') {\n            if (cVar1 != 'A') {\n                if (cVar1 != 'B') {\n                    fcn.00a11bdb(arg_8h, arg_ch);\n                    return arg_8h;\n                }\n                fcn.00a0e181(\"volatile\");\n                if (*arg_ch != 0) {\n                    fcn.00a0e2e1(0x20);\n                }\n            }\n            var_10h = *arg_ch;\n            *0xf185f4 = *0xf185f4 + 1;\n            var_ch = arg_ch[1] | 0x100;\n            fcn.00a11a8a(arg_8h, &var_8h, &var_10h);\n            return arg_8h;\n        }\n        if ((*0xf185f4)[1] == '$') {\n            pcVar2 = *0xf185f4 + 2;\n            cVar1 = *pcVar2;\n            if (cVar1 != '\\0') {\n                if (cVar1 == 'A') {\n                    *0xf185f4 = *0xf185f4 + 3;\n                    fcn.00a1100b(arg_8h, arg_ch);\n                    return arg_8h;\n                }\n                if (cVar1 == 'B') {\n                    *0xf185f4 = *0xf185f4 + 3;\n                    fcn.00a0f188(arg_8h, arg_ch, 1);\n                    return arg_8h;\n                }\n                if (cVar1 == 'C') {\n                    *0xf185f4 = *0xf185f4 + 3;\n                    var_8h = 0;\n                    arg_ch_00 = fcn.00a1135f(&var_18h, arg_ch, 0, &var_8h, 0);\n                    fcn.00a11bdb(arg_8h, arg_ch_00);\n                    return arg_8h;\n                }\n                goto code_r0x00a12030;\n            }\n        }\n        else if ((*0xf185f4)[1] != '\\0') {\ncode_r0x00a12030:\n            *0xf185f4 = pcVar2;\n            fcn.00a0dab9(2);\n            return arg_8h;\n        }\n    }\n    *0xf185f4 = pcVar2;\n    fcn.00a0e511(arg_8h, 1, arg_ch);\n    return arg_8h;\n}\n",
        "token_count": 706
    },
    "00a13be1": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a13be1(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != unaff_ESI) {\n        if (*(unaff_EBP + -0x24) != unaff_ESI) {\n            puVar1 = *((*(unaff_EBP + -0x1c) >> 5) * 4 + 0xf187c0) + 4 + (*(unaff_EBP + -0x1c) & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a14a02(*(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 208
    },
    "00a13cb9": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a13cb9(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0xf187c0) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a14a02(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "00a14cb1": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a14cb1(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0xf187c0) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.00a14a02(unaff_ESI);\n    return;\n}\n",
        "token_count": 160
    },
    "00401037": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401037(int32_t param_1, int32_t param_2)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.00401131();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0040106e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040106e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00401145(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "009f6534": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f6534(int32_t *param_1)\n\n{\n    if (*param_1 < 4) {\n        fcn.009f6eee(*param_1 * 0x18 + 0xf17a10);\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "004010e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.004010e1(code **param_1, int32_t param_2)\n\n{\n    fcn.009f70a4(param_2);\n    *param_1 = vtable.std::runtime_error.0;\n    fcn.00401537(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 77
    },
    "004010eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.004010eb(int32_t **param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    piVar1 = *param_1;\n    if (piVar1 == NULL) {\n        fcn.009f7837();\n        piVar1 = *param_1;\n        if (piVar1 != NULL) goto code_r0x009f37e4;\n        iVar2 = 0;\n    }\n    else {\ncode_r0x009f37e4:\n        iVar2 = *piVar1;\n    }\n    piVar3 = param_1[1] + param_2 * 7;\n    if (piVar3 < *(iVar2 + 0x10) || piVar3 == *(iVar2 + 0x10)) {\n        if (piVar1 == NULL) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = *piVar1;\n        }\n        if (*(iVar2 + 0xc) <= piVar3) goto code_r0x009f380f;\n    }\n    fcn.009f7837();\ncode_r0x009f380f:\n    param_1[1] = param_1[1] + param_2 * 7;\n    return param_1;\n}\n",
        "token_count": 305
    },
    "00401136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401136(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa35158;\n        in_ECX[2] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_istream_char__struct_std::char_traits_char__.0;\n    in_ECX[1] = 0;\n    fcn.00401217(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 160
    },
    "00401145": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401145(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f6f49(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 68
    },
    "00401177": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401177(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t unaff_EBP;\n    int32_t iVar1;\n    int32_t arg_8h_00;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_18h;\n    uint var_4h;\n    \n    fcn.009f7ed5(0x30);\n    arg_8h_00 = *(unaff_EBP + 8);\n    iVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -0x34) = iVar1;\n    *(unaff_EBP + -0x38) = iVar1;\n    *(unaff_EBP + -0x18) = 7;\n    fcn.00401325(0);\n    *(unaff_EBP + -4) = 0;\n    while (arg_8h_00 != *(unaff_EBP + 0xc)) {\n        if (iVar1 != 0) {\n            fcn.0040140b(unaff_EBP + -0x30);\n        }\n        fcn.00401389(arg_8h_00);\n        iVar1 = iVar1 + 0x1c;\n        *(unaff_EBP + -0x34) = iVar1;\n        arg_8h_00 = arg_8h_00 + 0x1c;\n        *(unaff_EBP + -0x3c) = arg_8h_00;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004010e6(1, 0);\n    fcn.009f7f31();\n    return;\n}\n",
        "token_count": 412
    },
    "004011c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011c2(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.004013e3(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.00401375(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 0x10) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.0040143d(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.0040149c(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 0x10) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.00401492(in_ECX, arg_8h - iVar2, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 276
    },
    "00401271": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401271(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint noname_3, uint arg_18h)\n\n{\n    uint var_4h;\n    \n    fcn.0040127b(arg_8h, arg_ch, arg_10h);\n    return arg_10h + ((arg_ch - arg_8h) / 0x1c) * -0x1c;\n}\n",
        "token_count": 107
    },
    "00401294": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401294(int32_t param_1, uint param_2, uint param_3)\n\n{\n    fcn.00401591(param_2, param_3, param_1 + 8);\n    return;\n}\n",
        "token_count": 55
    },
    "00401299": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.00401299(code **param_1, int32_t param_2)\n\n{\n    fcn.009f70a4(param_2);\n    *param_1 = vtable.std::logic_error.0;\n    fcn.00401537(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 76
    },
    "004012ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012ee(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t in_ECX;\n    uint var_10h;\n    \n    puVar1 = fcn.0040110e(&var_10h);\n    *(in_ECX + 8) = *puVar1;\n    *(in_ECX + 0xc) = puVar1[1];\n    *(in_ECX + 0x10) = puVar1[2];\n    *(in_ECX + 0x14) = puVar1[3];\n    return;\n}\n",
        "token_count": 130
    },
    "00401325": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401325(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 8) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2 * 2) = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "00401334": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401334(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040146f(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "00401343": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401343(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.00401433(param_3, 0, 0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "0040136b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040136b(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.00401505(param_2, param_3, param_4, param_1 + 8);\n    return;\n}\n",
        "token_count": 65
    },
    "009f3b89": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f3b89(int32_t arg_8h, int32_t arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    if (arg_14h < arg_ch - arg_8h) {\n        fcn.009f7837();\n    }\n    fcn.009f6f49(arg_10h, arg_14h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 109
    },
    "0040141a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint32_t fcn.0040141a(void)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe1b234 = *0xe1b234 * 0x343fd + 0x269ec3;\n    return *0xe1b234 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 83
    },
    "0040141f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040141f(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.0040159b(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.004014e7(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 8) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.0040106e(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401325(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 8) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.00401433(in_ECX, arg_8h - iVar2 >> 1, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 275
    },
    "00401429": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401429(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.00401221(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 70
    },
    "00401433": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401433(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f6dd9();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.004011cc(arg_14h + arg_ch, 0xffffffff);\n        fcn.004011cc(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.004014e7(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 8) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 8) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.0040106e(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch * 2, arg_14h);\n            fcn.00401325(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 397
    },
    "0040143d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040143d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f6f49(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 69
    },
    "009f3bef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.009f3bef(int32_t arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h, uint32_t arg_18h)\n\n{\n    if (arg_18h < arg_ch - arg_8h) {\n        fcn.009f7837();\n    }\n    fcn.009f6f49(arg_14h, arg_18h, arg_8h, arg_ch - arg_8h);\n    return arg_ch;\n}\n",
        "token_count": 114
    },
    "0040146f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040146f(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f6fc6(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 69
    },
    "00401492": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401492(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f6dd9();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.004012b7(arg_14h + arg_ch, 0xffffffff);\n        fcn.004012b7(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.00401375(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 0x10) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 0x10) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.0040143d(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch, arg_14h);\n            fcn.0040149c(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 400
    },
    "0040149c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040149c(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 0x10) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2) = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "004014ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004014ce(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    fcn.00401429(arg_8h, arg_ch, arg_10h, in_ECX + 8);\n    return arg_ch * 0x1c + arg_8h;\n}\n",
        "token_count": 86
    },
    "004014f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004014f6(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f6fc6(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 69
    },
    "00401505": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401505(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.00401177(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "00401591": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401591(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401037(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 59
    },
    "004015a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004015a0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401271(arg_8h, arg_ch, arg_10h, arg_ch, arg_ch);\n    return;\n}\n",
        "token_count": 66
    },
    "009f3605": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f3605(uint noname_0, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_10h != 0) {\n        *in_ECX = 0xa34fbc;\n        in_ECX[1] = vtable.std::basic_ios_char__struct_std::char_traits_char__.0;\n    }\n    *(in_ECX + *(*in_ECX + 4)) = vtable.std::basic_ostream_char__struct_std::char_traits_char__.0;\n    if (arg_ch != '\\0') {\n        fcn.009f6ac5(*(*in_ECX + 4) + in_ECX);\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "009f6593": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f6593(uint32_t arg_8h)\n\n{\n    fcn.009f6ede((arg_8h & 3) * 0x18 + 0xf17a10);\n    return;\n}\n",
        "token_count": 54
    },
    "009f65af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f65af(uint32_t arg_8h)\n\n{\n    fcn.009f6eee((arg_8h & 3) * 0x18 + 0xf17a10);\n    return;\n}\n",
        "token_count": 54
    },
    "009f7f4a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7f4a(uint arg_8h, uint arg_ch)\n\n{\n    uint var_2c8h;\n    \n    fcn.00a00504(arg_8h, arg_ch);\n    fcn.009fc280();\n    fcn.00a00383();\n    return;\n}\n",
        "token_count": 71
    },
    "009f8034": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8034(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009f7f70(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 48
    },
    "009f81a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f81a8(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f809e(fcn.00a00ffb, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 66
    },
    "009f81c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f81c8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f809e(fcn.00a00ffb, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 74
    },
    "009f81e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f81e9(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f809e(fcn.00a02082, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 66
    },
    "009f8209": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8209(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f809e(fcn.00a02082, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 73
    },
    "009f831d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009f831d(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3bbf8, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.00a00540();\n        fcn.00a00658(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.00a00540();\n        arg_8h_00 = fcn.00a03526(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.00a00540();\n        uVar4 = fcn.00a036c5(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.00a00540();\n        fcn.00a035c2(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009f83b9();\n    }\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 467
    },
    "009f83b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009f83b9(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a00540();\n    fcn.00a006c6(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 57
    },
    "009f83cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f83cc(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a042ed(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009f83e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f83e5(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0430a(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 56
    },
    "009f83fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f83fe(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0430a(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "009f8416": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8416(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a04327(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "009f842f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f842f(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a04327(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "009f8560": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8560(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00a055c2(arg_8h, arg_ch, arg_10h, 0, &arg_14h);\n    return;\n}\n",
        "token_count": 69
    },
    "009f857e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f857e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a055c2(arg_8h, arg_ch, arg_10h, arg_14h, &arg_18h);\n    return;\n}\n",
        "token_count": 77
    },
    "009f85c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f85c7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a05258(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f85e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f85e0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a05291(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a0033b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0033b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_2c8h;\n    uint var_8fh;\n    \n    fcn.00a00504(arg_8h, arg_ch);\n    fcn.00a00504(arg_10h, arg_14h);\n    fcn.009fc2e7();\n    fcn.00a00383();\n    return;\n}\n",
        "token_count": 109
    },
    "00a0425d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a0425d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3c0e0, 0x10);\n    iVar1 = fcn.00a00540();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009fb27c();\n        *puVar2 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.00a00617(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00a03526(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.00a035c2(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a042e5();\n    }\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 447
    },
    "00a042ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a042ed(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0425d(fcn.00a036c5, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a0430a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0430a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0425d(fcn.00a15aed, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a04327": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a04327(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a0425d(fcn.00a1688b, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a04344": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a04344(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0425d(fcn.00a036c5, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a04360": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a04360(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0425d(fcn.00a15aed, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00a0437c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0437c(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0425d(fcn.00a1688b, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "00a0523c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0523c(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a051e5(fcn.00a045b5, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "00a05258": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a05258(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a051e5(fcn.00a045b5, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a05275": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a05275(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a051e5(fcn.00a18124, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00a05291": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a05291(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a051e5(fcn.00a18124, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "00a0537a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a0537a(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a052ae(fcn.00a045b5, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 111
    },
    "00a053a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a053a3(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a052ae(fcn.00a045b5, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 119
    },
    "00a05599": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a05599(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a052ae(fcn.00a18124, arg_8h, arg_ch, arg_10h, 0, arg_14h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 109
    },
    "00a055c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00a055c2(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a052ae(fcn.00a18124, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "00a0572b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a0572b(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf18038 == 0)) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf18038;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "00a05767": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a05767(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf18034 == 0)) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf18034;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 148
    },
    "00a05954": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a05954(uint arg_8h)\n\n{\n    fcn.00a05828(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 41
    },
    "00a0613b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a0613b(void)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = 0xa3b170;\n    do {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n        ppcVar1 = ppcVar1 + 1;\n    } while (ppcVar1 < 0xa3b270);\n    return;\n}\n",
        "token_count": 92
    },
    "00a0b61d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.00a0b61d(int32_t *arg_8h, int32_t *arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg_10h == 0) {\n        return 0;\n    }\n    if (arg_10h == 1) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n    }\n    else if (arg_10h == 2) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n    }\n    else if (arg_10h == 3) {\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n    }\n    else {\n        if (arg_10h != 4) {\ncode_r0x00a0bacf:\n    // switch table (32 cases) at 0xa0cc1d\n            switch(arg_10h) {\n            case 0:\n                break;\n            case 1:\n                goto code_r0x00a0c2b0;\n            case 2:\n                goto code_r0x00a0c6bc;\n            case 3:\n                goto code_r0x00a0cadd;\n            case 4:\n                goto code_r0x00a0be41;\n            case 5:\n                goto code_r0x00a0c221;\n            case 6:\n                goto code_r0x00a0c62d;\n            case 7:\n                goto code_r0x00a0ca4e;\n            case 8:\n                goto code_r0x00a0bdb2;\n            case 9:\n                goto code_r0x00a0c191;\n            case 10:\n                goto code_r0x00a0c59d;\n            case 0xb:\n                goto code_r0x00a0c9bf;\n            case 0xc:\n                goto code_r0x00a0bd22;\n            case 0xd:\n                goto code_r0x00a0c102;\n            case 0xe:\n                goto code_r0x00a0c50e;\n            case 0xf:\n                goto code_r0x00a0c92f;\n            case 0x10:\n                goto code_r0x00a0bc93;\n            case 0x11:\n                goto code_r0x00a0c073;\n            case 0x12:\n                goto code_r0x00a0c47f;\n            case 0x13:\n                goto code_r0x00a0c8a0;\n            case 0x14:\n                goto code_r0x00a0bc04;\n            case 0x15:\n                goto code_r0x00a0bfe4;\n            case 0x16:\n                goto code_r0x00a0c3f0;\n            case 0x17:\n                goto code_r0x00a0c811;\n            case 0x1a:\n                goto code_r0x00a0c361;\n            case 0x1b:\n                goto code_r0x00a0c782;\n            case 0x1c:\n                uVar1 = *(arg_8h + arg_10h + -0x1c);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1c)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x19) - *(arg_ch + arg_10h + -0x19);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x18:\n                uVar1 = *(arg_8h + arg_10h + -0x18);\n                if (uVar1 == *(arg_ch + arg_10h + -0x18)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x15) - *(arg_ch + arg_10h + -0x15);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0bc04:\n                uVar1 = *(arg_8h + arg_10h + -0x14);\n                if (uVar1 == *(arg_ch + arg_10h + -0x14)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x11) - *(arg_ch + arg_10h + -0x11);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0bc93:\n                uVar1 = *(arg_8h + arg_10h + -0x10);\n                if (uVar1 == *(arg_ch + arg_10h + -0x10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xd) - *(arg_ch + arg_10h + -0xd);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0bd22:\n                if (*(arg_8h + arg_10h + -0xc) == *(arg_ch + arg_10h + -0xc)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -9) - *(arg_ch + arg_10h + -9);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0bdb2:\n                uVar1 = *(arg_8h + arg_10h + -8);\n                if (uVar1 == *(arg_ch + arg_10h + -8)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -8);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -5) - *(arg_ch + arg_10h + -5);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0be41:\n                uVar1 = *(arg_8h + arg_10h + -4);\n                if (uVar1 == *(arg_ch + arg_10h + -4)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -4);\n                    if ((uVar1 == uVar2) || (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 == 0)) {\n                        uVar2 = *(arg_8h + arg_10h + -3);\n                        uVar1 = *(arg_ch + arg_10h + -3);\n                        if ((uVar2 == uVar1) || (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0))\n                        {\n                            uVar2 = *(arg_8h + arg_10h + -2);\n                            uVar1 = *(arg_ch + arg_10h + -2);\n                            if (((uVar2 == uVar1) ||\n                                (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 == 0)) &&\n                               (iVar3 = *(arg_8h + arg_10h + -1) - *(arg_ch + arg_10h + -1),  iVar3 != 0)) {\n                                iVar3 = (0 < iVar3) * 2 + -1;\n                            }\n                        }\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n                break;\n            case 0x1d:\n                uVar1 = *(arg_8h + arg_10h + -0x1d);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1d)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1b);\n                    uVar1 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1a) - *(arg_ch + arg_10h + -0x1a);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\n            case 0x19:\n                uVar1 = *(arg_8h + arg_10h + -0x19);\n                if (uVar1 == *(arg_ch + arg_10h + -0x19)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x17);\n                    uVar1 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x16) - *(arg_ch + arg_10h + -0x16);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0bfe4:\n                uVar1 = *(arg_8h + arg_10h + -0x15);\n                if (uVar1 == *(arg_ch + arg_10h + -0x15)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x13);\n                    uVar1 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x12) - *(arg_ch + arg_10h + -0x12);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c073:\n                uVar1 = *(arg_8h + arg_10h + -0x11);\n                if (uVar1 == *(arg_ch + arg_10h + -0x11)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xe) - *(arg_ch + arg_10h + -0xe);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c102:\n                uVar1 = *(arg_8h + arg_10h + -0xd);\n                if (uVar1 == *(arg_ch + arg_10h + -0xd)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xb);\n                    uVar1 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -10) - *(arg_ch + arg_10h + -10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c191:\n                if (*(arg_8h + arg_10h + -9) == *(arg_ch + arg_10h + -9)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -7);\n                    uVar1 = *(arg_ch + arg_10h + -7);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -6) - *(arg_ch + arg_10h + -6);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c221:\n                uVar1 = *(arg_8h + arg_10h + -5);\n                if (uVar1 == *(arg_ch + arg_10h + -5)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -5);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -3);\n                    uVar1 = *(arg_ch + arg_10h + -3);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -2) - *(arg_ch + arg_10h + -2);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\njoined_r0x00a0c2aa:\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c2b0:\n                uVar2 = *(arg_ch + arg_10h + -1);\n                uVar1 = *(arg_8h + arg_10h + -1);\n                if (uVar1 == uVar2) {\n                    return 0;\n                }\n                return (0 < uVar1 - uVar2) * 2 + -1;\n            case 0x1e:\n                uVar1 = *(arg_8h + arg_10h + -0x1e);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1e)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1c);\n                    uVar1 = *(arg_ch + arg_10h + -0x1c);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1b) - *(arg_ch + arg_10h + -0x1b);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c361:\n                uVar1 = *(arg_8h + arg_10h + -0x1a);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1a)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x18);\n                    uVar1 = *(arg_ch + arg_10h + -0x18);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x17) - *(arg_ch + arg_10h + -0x17);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c3f0:\n                uVar1 = *(arg_8h + arg_10h + -0x16);\n                if (uVar1 == *(arg_ch + arg_10h + -0x16)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x14);\n                    uVar1 = *(arg_ch + arg_10h + -0x14);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x13) - *(arg_ch + arg_10h + -0x13);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c47f:\n                uVar1 = *(arg_8h + arg_10h + -0x12);\n                if (uVar1 == *(arg_ch + arg_10h + -0x12)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x10);\n                    uVar1 = *(arg_ch + arg_10h + -0x10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xf) - *(arg_ch + arg_10h + -0xf);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c50e:\n                uVar1 = *(arg_8h + arg_10h + -0xe);\n                if (uVar1 == *(arg_ch + arg_10h + -0xe)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xc);\n                    uVar1 = *(arg_ch + arg_10h + -0xc);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xb) - *(arg_ch + arg_10h + -0xb);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c59d:\n                if (*(arg_8h + arg_10h + -10) == *(arg_ch + arg_10h + -10)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar1 = *(arg_ch + arg_10h + -8);\n                    uVar2 = *(arg_8h + arg_10h + -8);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -7) - *(arg_ch + arg_10h + -7);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c62d:\n                uVar1 = *(arg_8h + arg_10h + -6);\n                if (uVar1 == *(arg_ch + arg_10h + -6)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -6);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -4);\n                    uVar1 = *(arg_ch + arg_10h + -4);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -3) - *(arg_ch + arg_10h + -3);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c6bc:\n                if (*(arg_8h + arg_10h + -2) != *(arg_ch + arg_10h + -2)) {\ncode_r0x00a0c6ca:\n                    uVar1 = *(arg_ch + arg_10h + -2);\n                    uVar2 = *(arg_8h + arg_10h + -2);\n                    if (uVar2 == uVar1) goto code_r0x00a0c2b0;\n                    iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1;\n                    goto joined_r0x00a0c2aa;\n                }\n                break;\n            case 0x1f:\n                if (*(arg_8h + arg_10h + -0x1f) == *(arg_ch + arg_10h + -0x1f)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0x1f);\n                    uVar2 = *(arg_8h + arg_10h + -0x1f);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1e);\n                    uVar1 = *(arg_ch + arg_10h + -0x1e);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1d);\n                    uVar1 = *(arg_ch + arg_10h + -0x1d);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x1c) - *(arg_ch + arg_10h + -0x1c);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c782:\n                uVar1 = *(arg_8h + arg_10h + -0x1b);\n                if (uVar1 == *(arg_ch + arg_10h + -0x1b)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x1b);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x1a);\n                    uVar1 = *(arg_ch + arg_10h + -0x1a);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x19);\n                    uVar1 = *(arg_ch + arg_10h + -0x19);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x18) - *(arg_ch + arg_10h + -0x18);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c811:\n                uVar1 = *(arg_8h + arg_10h + -0x17);\n                if (uVar1 == *(arg_ch + arg_10h + -0x17)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x17);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x16);\n                    uVar1 = *(arg_ch + arg_10h + -0x16);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x15);\n                    uVar1 = *(arg_ch + arg_10h + -0x15);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x14) - *(arg_ch + arg_10h + -0x14);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c8a0:\n                uVar1 = *(arg_8h + arg_10h + -0x13);\n                if (uVar1 == *(arg_ch + arg_10h + -0x13)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0x13);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x12);\n                    uVar1 = *(arg_ch + arg_10h + -0x12);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0x11);\n                    uVar1 = *(arg_ch + arg_10h + -0x11);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0x10) - *(arg_ch + arg_10h + -0x10);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c92f:\n                if (*(arg_8h + arg_10h + -0xf) == *(arg_ch + arg_10h + -0xf)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = *(arg_ch + arg_10h + -0xf);\n                    uVar2 = *(arg_8h + arg_10h + -0xf);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xe);\n                    uVar1 = *(arg_ch + arg_10h + -0xe);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -0xd);\n                    uVar1 = *(arg_ch + arg_10h + -0xd);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -0xc) - *(arg_ch + arg_10h + -0xc);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0c9bf:\n                uVar1 = *(arg_8h + arg_10h + -0xb);\n                if (uVar1 == *(arg_ch + arg_10h + -0xb)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -0xb);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -10);\n                    uVar1 = *(arg_ch + arg_10h + -10);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -9);\n                    uVar1 = *(arg_ch + arg_10h + -9);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -8) - *(arg_ch + arg_10h + -8);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0ca4e:\n                uVar1 = *(arg_8h + arg_10h + -7);\n                if (uVar1 == *(arg_ch + arg_10h + -7)) {\n                    iVar3 = 0;\n                }\n                else {\n                    uVar1 = uVar1 & 0xff;\n                    uVar2 = *(arg_ch + arg_10h + -7);\n                    if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -6);\n                    uVar1 = *(arg_ch + arg_10h + -6);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    uVar2 = *(arg_8h + arg_10h + -5);\n                    uVar1 = *(arg_ch + arg_10h + -5);\n                    if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                        return iVar3;\n                    }\n                    iVar3 = *(arg_8h + arg_10h + -4) - *(arg_ch + arg_10h + -4);\n                    if (iVar3 != 0) {\n                        iVar3 = (0 < iVar3) * 2 + -1;\n                    }\n                }\n                if (iVar3 != 0) {\n                    return iVar3;\n                }\ncode_r0x00a0cadd:\n                uVar2 = *(arg_8h + arg_10h + -3);\n                uVar1 = *(arg_ch + arg_10h + -3);\n                if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n                    return iVar3;\n                }\n                goto code_r0x00a0c6ca;\n            default:\n                goto code_r0x00a0b65d;\n            }\n            return 0;\n        }\n        uVar1 = *arg_8h;\n        uVar2 = *arg_ch;\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 1);\n        uVar2 = *(arg_ch + 1);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 2);\n        uVar2 = *(arg_ch + 2);\n        if ((uVar1 != uVar2) && (iVar3 = (uVar1 != uVar2 && -1 < uVar1 - uVar2) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar1 = *(arg_8h + 3);\n        uVar2 = *(arg_ch + 3);\n    }\n    iVar3 = uVar1 - uVar2;\n    if (iVar3 != 0) {\n        iVar3 = (0 < iVar3) * 2 + -1;\n    }\n    return iVar3;\ncode_r0x00a0b65d:\n    if (*arg_8h == *arg_ch) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *arg_8h;\n        uVar1 = *arg_ch;\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 3) - *(arg_ch + 3);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[1] == arg_ch[1]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 1);\n        uVar1 = *(arg_ch + 1);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 7) - *(arg_ch + 7);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[2] == arg_ch[2]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 2);\n        uVar1 = *(arg_ch + 2);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 9);\n        uVar1 = *(arg_ch + 9);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 10);\n        uVar1 = *(arg_ch + 10);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xb) - *(arg_ch + 0xb);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[3] == arg_ch[3]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 3);\n        uVar1 = *(arg_ch + 3);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xd);\n        uVar1 = *(arg_ch + 0xd);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0xe);\n        uVar1 = *(arg_ch + 0xe);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0xf) - *(arg_ch + 0xf);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[4] == arg_ch[4]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar1 = *(arg_ch + 4);\n        uVar2 = *(arg_8h + 4);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x11);\n        uVar1 = *(arg_ch + 0x11);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x12);\n        uVar1 = *(arg_ch + 0x12);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x13) - *(arg_ch + 0x13);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[5] == arg_ch[5]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 5);\n        uVar1 = *(arg_ch + 5);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x15);\n        uVar1 = *(arg_ch + 0x15);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x16);\n        uVar1 = *(arg_ch + 0x16);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x17) - *(arg_ch + 0x17);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[6] == arg_ch[6]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 6);\n        uVar1 = *(arg_ch + 6);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x19);\n        uVar1 = *(arg_ch + 0x19);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1a);\n        uVar1 = *(arg_ch + 0x1a);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1b) - *(arg_ch + 0x1b);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    if (arg_8h[7] == arg_ch[7]) {\n        iVar3 = 0;\n    }\n    else {\n        uVar2 = *(arg_8h + 7);\n        uVar1 = *(arg_ch + 7);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1d);\n        uVar1 = *(arg_ch + 0x1d);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        uVar2 = *(arg_8h + 0x1e);\n        uVar1 = *(arg_ch + 0x1e);\n        if ((uVar2 != uVar1) && (iVar3 = (uVar2 != uVar1 && -1 < uVar2 - uVar1) * 2 + -1,  iVar3 != 0)) {\n            return iVar3;\n        }\n        iVar3 = *(arg_8h + 0x1f) - *(arg_ch + 0x1f);\n        if (iVar3 != 0) {\n            iVar3 = (0 < iVar3) * 2 + -1;\n        }\n    }\n    if (iVar3 != 0) {\n        return iVar3;\n    }\n    arg_8h = arg_8h + 8;\n    arg_ch = arg_ch + 8;\n    arg_10h = arg_10h + -0x20;\n    goto code_r0x00a0bacf;\n}\n",
        "token_count": 16588
    },
    "00a0e6f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00a0e6f3(uint *arg_8h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    char *arg_8h_00;\n    uint arg_8h_01;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = var_4h & 0xffff0000;\n    if (**0xf185f4 == '\\0') {\n        arg_8h_01 = 1;\ncode_r0x00a0e79a:\n        fcn.00a0dab9(arg_8h_01);\n        return arg_8h;\n    }\n    // switch table (8 cases) at 0xa0e7a7\n    switch(**0xf185f4) {\n    case '0':\n    case '1':\n        arg_8h_00 = \"char \";\n        break;\n    case '2':\n    case '3':\n        arg_8h_00 = \"short \";\n        break;\n    case '4':\n        goto code_r0x00a0e749;\n    case '5':\n        arg_8h_00 = \"int \";\n        break;\n    case '6':\n    case '7':\n        arg_8h_00 = \"long \";\n        break;\n    default:\n        arg_8h_01 = 2;\n        goto code_r0x00a0e79a;\n    }\n    fcn.00a0e181(arg_8h_00);\ncode_r0x00a0e749:\n    cVar1 = **0xf185f4;\n    *0xf185f4 = *0xf185f4 + 1;\n    if ((((cVar1 == '1') || (cVar1 == '3')) || (cVar1 == '5')) || (cVar1 == '7')) {\n        puVar2 = fcn.00a0e535(&var_10h, \"unsigned \", &var_8h);\n        var_8h = *puVar2;\n        var_4h = puVar2[1];\n    }\n    *arg_8h = var_8h;\n    arg_8h[1] = var_4h;\n    return arg_8h;\n}\n",
        "token_count": 512
    },
    "00a12903": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a12903(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1285b(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 46
    },
    "00a12a82": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a12a82(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a129da(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 46
    },
    "00a13c1b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a13c1b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3c300, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.00a13446(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a13cb9();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 458
    },
    "00a13ce7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a13ce7(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = fcn.00a13c1b(arg_8h, arg_ch, arg_10h, arg_14h, &var_4h, 0);\n    if (iVar1 != 0) {\n        return 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 126
    },
    "00a13d19": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a13d19(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a13c1b(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 81
    },
    "00a158d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a158d4(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00a00540();\n    fcn.00a006c6(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 57
    },
    "00a158e7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a158e7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21aeb(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 56
    },
    "00a15900": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a15900(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21b08(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a15919": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a15919(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a21b08(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "00a15931": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a15931(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21b25(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a1594a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1594a(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a21b25(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "00a1a5e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1a5e6(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3f924;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 140
    },
    "00a1a61f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1a61f(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3f928;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "00a1a658": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1a658(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3f920;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a21502": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a21502(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009fb27c();\n        *puVar1 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf18730;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 136
    },
    "00a21a5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a21a5b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3c5a8, 0x10);\n    iVar1 = fcn.00a00540();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009fb27c();\n        *puVar2 = 0x16;\n        fcn.009f7811(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.00a00617(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00a03526(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.00a035c2(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a21ae3();\n    }\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 448
    },
    "00a21aeb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21aeb(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21a5b(fcn.00a045b5, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "00a21b08": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21b08(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21a5b(fcn.00a1948a, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 65
    },
    "00a21b25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21b25(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a21a5b(fcn.00a18124, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "00a21b42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21b42(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a21a5b(fcn.00a045b5, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 57
    },
    "00a21b5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21b5e(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a21a5b(fcn.00a1948a, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 58
    },
    "00a21b7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a21b7a(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a21a5b(fcn.00a18124, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 57
    },
    "009f7a88": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009f7a88(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.009fffed(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 111
    },
    "004011a4": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004011a4(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    arg_8h_00 = *(in_ECX + 0x10);\n    var_8h = in_ECX;\n    var_4h = in_ECX;\n    uVar1 = fcn.004013bb();\n    if ((arg_8h_00 - *(in_ECX + 0xc)) / 0x1c < uVar1) {\n        uVar2 = fcn.004014ce(arg_8h_00, 1, arg_8h);\n        *(in_ECX + 0x10) = uVar2;\n    }\n    else {\n        fcn.0040119a(arg_8h_00);\n        fcn.004012e4(&var_8h, var_8h, var_4h, arg_8h);\n    }\n    return;\n}\n",
        "token_count": 248
    },
    "0040127b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040127b(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    if (arg_8h != arg_ch) {\n        do {\n            arg_10h = arg_10h + -0x1c;\n            arg_ch = arg_ch + -0x1c;\n            fcn.00401389(arg_ch);\n        } while (arg_ch != arg_8h);\n    }\n    return arg_10h;\n}\n",
        "token_count": 113
    },
    "00401389": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.00401389(int32_t arg_8h)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    uint var_14h;\n    uint var_4h;\n    \n    if (in_ECX != arg_8h) {\n        var_14h = *(in_ECX + 4);\n        uVar1 = *(in_ECX + 8);\n        uVar2 = *(in_ECX + 0xc);\n        uVar3 = *(in_ECX + 0x10);\n        *(in_ECX + 4) = *(arg_8h + 4);\n        *(in_ECX + 8) = *(arg_8h + 8);\n        *(in_ECX + 0xc) = *(arg_8h + 0xc);\n        *(in_ECX + 0x10) = *(arg_8h + 0x10);\n        *(arg_8h + 4) = var_14h;\n        *(arg_8h + 8) = uVar1;\n        *(arg_8h + 0xc) = uVar2;\n        *(arg_8h + 0x10) = uVar3;\n        uVar1 = *(in_ECX + 0x14);\n        *(in_ECX + 0x14) = *(arg_8h + 0x14);\n        *(arg_8h + 0x14) = uVar1;\n        uVar1 = *(in_ECX + 0x18);\n        *(in_ECX + 0x18) = *(arg_8h + 0x18);\n        *(arg_8h + 0x18) = uVar1;\n    }\n    fcn.009f765f(var_14h);\n    return;\n}\n",
        "token_count": 420
    },
    "004010fa": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004010fa(int32_t param_1)\n\n{\n    *(param_1 + 0x20) = param_1 + 0x18;\n    *(param_1 + 0x24) = param_1 + 0x1c;\n    *(param_1 + 0x30) = param_1 + 0x28;\n    *(param_1 + 0x10) = param_1 + 8;\n    *(param_1 + 0x34) = param_1 + 0x2c;\n    *(param_1 + 0x14) = param_1 + 0xc;\n    *(param_1 + 0xc) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 241
    },
    "0040126c": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040126c(int32_t param_1)\n\n{\n    fcn.004012f8();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return param_1;\n}\n",
        "token_count": 81
    },
    "00401276": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401276(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    *(param_1 + 0x24) = 0;\n    *(param_1 + 4) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0x201;\n    *(param_1 + 0x14) = 6;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    fcn.004015c8(0, 0);\n    iVar1 = fcn.009f786d(4);\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.004015e1();\n    }\n    *(param_1 + 0x24) = uVar2;\n    return;\n}\n",
        "token_count": 238
    },
    "004015cd": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004015cd(int32_t param_1)\n\n{\n    if (*(param_1 + 0xc) != 0) {\n        fcn.00401294(*(param_1 + 0xc), *(param_1 + 0x10));\n        fcn.009f73c2(*(param_1 + 0xc));\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 128
    },
    "00a23168": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00a23168(void)\n\n{\n    *0xa400c8 = (**0xf1a34c)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 57
    },
    "004015c8": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004015c8(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint *arg_8h_00;\n    int32_t in_ECX;\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    char *pcVar2;\n    uint arg_ch_00;\n    code *var_44h;\n    uint var_1ch;\n    \n    *(in_ECX + 8) = arg_8h & 0x17;\n    uVar1 = *(in_ECX + 0xc) & arg_8h & 0x17;\n    if (uVar1 != 0) {\n        arg_8h_00 = NULL;\n        if (arg_ch == '\\0') goto code_r0x009f585f;\n        arg_ch_00 = 0;\n        do {\n            fcn.009f78d2(arg_8h_00, arg_ch_00);\n            uVar1 = extraout_ECX;\ncode_r0x009f585f:\n            if ((uVar1 & 4) == 0) {\n                if ((uVar1 & 2) == 0) {\n                    pcVar2 = \"ios_base::eofbit set\";\n                }\n                else {\n                    pcVar2 = \"ios_base::failbit set\";\n                }\n            }\n            else {\n                pcVar2 = \"ios_base::badbit set\";\n            }\n            fcn.0040155f(pcVar2);\n            fcn.0040123a(&var_1ch);\n            var_44h = vtable.std::ios_base::failure.0;\n            arg_ch_00 = 0xa3b7c8;\n            arg_8h_00 = &var_44h;\n        } while( true );\n    }\n    return;\n}\n",
        "token_count": 393
    },
    "009fb8d0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fb8d0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3bd28, 0xc);\n    fcn.009fdc73(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf17b68;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf17b64;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fb914;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f7929(arg_8h_00);\ncode_r0x009fb914:\n        fcn.009f7929(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fb937();\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 394
    },
    "009fba35": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fba35(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009fecc8(0xa3bd68, 0xc);\n    fcn.009fdc73(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf17b68;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf17b64;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009fba79;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f7929(arg_8h_00);\ncode_r0x009fba79:\n        fcn.009f7929(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009fba9c();\n    fcn.009fed0d();\n    return;\n}\n",
        "token_count": 397
    },
    "00a1a41d": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1a41d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0xf1a36c)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 67
    }
}