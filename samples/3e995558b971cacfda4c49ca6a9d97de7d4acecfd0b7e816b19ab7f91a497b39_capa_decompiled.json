{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401a0e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401a0e(uint32_t arg_8h)\n\n{\n    fcn.00401bd9();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402081();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00401a2f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401a2f(uint32_t arg_8h)\n\n{\n    fcn.00401bd9();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402081();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00401a50": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401a50(uint32_t arg_8h)\n\n{\n    fcn.00401bd9();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402081();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "00401be4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401be4(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x459204;\n    fcn.00401b5f();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402081();\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "004023a4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004039ab": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401068": {
        "rules": [
            "check HTTP status code/09dd97b2e76544bcbbe79d95da398605"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.00401068(uint32_t *arg_8h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint unaff_EDI;\n    uint32_t uVar3;\n    ulong uVar4;\n    uint var_1874h;\n    uint var_1074h;\n    uint var_c74h;\n    uint var_474h;\n    uint var_74h;\n    uint uStack96;\n    uint uStack92;\n    uint *puStack88;\n    uint uStack84;\n    uint *puStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint *puStack64;\n    uint uStack60;\n    uint uStack56;\n    int32_t var_30h;\n    uint var_2ch;\n    uint *var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint *var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    \n    func_0x00407880();\n    uVar2 = *arg_8h;\n    uVar3 = arg_8h[1];\n    var_14h = uVar2;\n    var_ch = unaff_EDI;\n    if (*0x2f1f784 == 0xee) {\n        var_10h = NULL;\n        var_14h = 0x401098;\n        (**0x459014)();\n        var_14h = 0;\n        var_18h = 0;\n        var_1ch = 0x45b248;\n        var_20h = 0x4010a5;\n        (**0x459008)();\n    }\n    var_28h = *0x45ef60;\n    var_24h = *0x45ef64;\n    var_8h = 0;\n    var_30h = -0x61c88647;\n    var_10h = 0x4010c7;\n    fcn.0040105b();\n    var_8h = var_8h + 0xe;\n    if (*0x2f1f784 == 200) {\n        var_10h = &fcn.00401068::var_74h;\n        var_14h = 0x45b2d0;\n        var_18h = 0;\n        var_1ch = 0;\n        var_20h = 0;\n        var_24h = 0x4010e9;\n        (**0x459024)();\n        var_24h = 0x45b2f0;\n        var_28h = &fcn.00401068::var_c74h;\n        var_2ch = 0x4010fb;\n        (**0x459084)();\n        var_2ch = 0;\n        var_30h = 0;\n        uStack56 = 0;\n        uStack60 = 0x401104;\n        (**0x459068)();\n        uStack60 = 0;\n        puStack64 = &fcn.00401068::var_1074h;\n        uStack68 = 0;\n        uStack72 = 0x401113;\n        (**0x459080)();\n        uStack72 = 0;\n        uStack76 = 0;\n        puStack80 = &fcn.00401068::var_474h;\n        uStack84 = 0x401122;\n        (**0x459080)();\n        uStack84 = 0;\n        puStack88 = &fcn.00401068::var_1874h;\n        uStack92 = 0;\n        uStack96 = 0x401131;\n        (**0x459030)();\n    }\n    var_2ch = *0x45ef68;\n    var_20h = *0x45ef6c;\n    var_1ch = 0x20;\n    do {\n        var_10h = 0x401164;\n        fcn.0040102d();\n        if (*0x2f1f784 == 0xfa9) {\n            *0x2f1f780 = 0xedeb2e40;\n        }\n        if (*0x2f1f784 == 0x3eb) {\n            *0x46053c = 0;\n        }\n        uVar1 = var_10h;\n        var_10h = var_8h + uVar2;\n        uVar2 = (uVar2 >> (uVar1 & 0x1f)) + var_20h;\n        *0x2f1f77c = 0x9150ce2e;\n        var_14h = 0x4011af;\n        uVar4 = fcn.00401054();\n        var_ch = uVar4;\n        if (uVar4 >> 0x20 == 0x9e6) {\n            var_14h = 0x4011c0;\n            (**0x459048)();\n        }\n        uVar3 = uVar3 - (uVar2 ^ var_ch);\n        var_14h = 0x4011d4;\n        fcn.0040102d();\n        var_18h = uVar3 >> 5;\n        var_14h = 0x4011e7;\n        fcn.00401062();\n        var_14h = var_8h + uVar3;\n        var_18h = 0x4011f8;\n        var_ch = fcn.00401054();\n        var_1ch = 0x401206;\n        fcn.00401033();\n        *0x460538 = 0;\n        var_1ch = 0x401218;\n        fcn.00401065();\n        var_8h = var_8h - var_30h;\n        var_1ch = var_1ch + -1;\n        uVar2 = var_14h;\n    } while (var_1ch != 0);\n    arg_8h[1] = uVar3;\n    *arg_8h = var_14h;\n    return;\n}\n",
        "token_count": 1394
    },
    "00401239": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.00401239(void)\n\n{\n    uint32_t uVar1;\n    int32_t arg_8h;\n    uint uStack3680;\n    uchar *puStack3676;\n    uchar auStack3656 [572];\n    uchar auStack3084 [1004];\n    uchar auStack2080 [2076];\n    \n    arg_8h = *0x2f1c57c;\n    for (uVar1 = *0x2f1f784 >> 3; uVar1 != 0; uVar1 = uVar1 - 1) {\n        if (*0x2f1f784 == 0xae9) {\n            puStack3676 = 0x401276;\n            (**0x45900c)();\n            puStack3676 = &stack0xfffff1b8;\n            uStack3680 = 0x401281;\n            (**0x459028)();\n            uStack3680 = 0;\n            (**0x459020)(0, &stack0xfffff3f4, 0, &stack0xfffff1b0);\n            (**0x45903c)(0, &stack0xfffff7e0, 0);\n            (**0x45908c)(0x45b360);\n            (**0x459060)(0, 0);\n            (**0x459064)(0x45b380, 0x45b364);\n            (**0x459044)(0, 0, &stack0xfffff1a0);\n            (**0x459074)(0, 0);\n        }\n        uStack3680 = 0x4012e5;\n        fcn.00401068(arg_8h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 386
    },
    "00401b5f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401b5f(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != '\\0') {\n        fcn.004039ab(*(param_1 + 4));\n    }\n    *(param_1 + 4) = 0;\n    *(param_1 + 8) = 0;\n    return;\n}\n",
        "token_count": 82
    },
    "00403920": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0040105b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040105b(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + -0x3910c8ee;\n    return;\n}\n",
        "token_count": 46
    },
    "00401062": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401062(int32_t param_1)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + param_1;\n    return;\n}\n",
        "token_count": 47
    },
    "004012f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004012f6(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint var_4h;\n    \n    iVar2 = *0x2f20b74;\n    iVar1 = *0x2f1c57c;\n    uVar3 = 0;\n    if (*0x2f1f784 != 0) {\n        do {\n            *(uVar3 + iVar1) = *(iVar2 + 0xb2d3b + uVar3);\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < *0x2f1f784);\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "00401748": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401748(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t in_EAX;\n    uint32_t uVar3;\n    uint32_t extraout_ECX;\n    uint *puVar4;\n    uint *unaff_ESI;\n    \n    uVar3 = unaff_ESI[4];\n    if (uVar3 < param_1) {\n        uVar3 = fcn.004019c1(0x45b404);\n        param_1 = extraout_ECX;\n    }\n    uVar3 = uVar3 - param_1;\n    if (uVar3 < in_EAX) {\n        in_EAX = uVar3;\n    }\n    if (in_EAX != 0) {\n        puVar4 = unaff_ESI;\n        puVar2 = unaff_ESI;\n        if (7 < unaff_ESI[5]) {\n            puVar4 = *unaff_ESI;\n            puVar2 = *unaff_ESI;\n        }\n        fcn.00401c30(puVar4 + param_1 * 2, puVar2 + (param_1 + in_EAX) * 2, (uVar3 - in_EAX) * 2);\n        iVar1 = unaff_ESI[4];\n        unaff_ESI[4] = iVar1 - in_EAX;\n        if (7 < unaff_ESI[5]) {\n            unaff_ESI = *unaff_ESI;\n        }\n        *(unaff_ESI + (iVar1 - in_EAX) * 2) = 0;\n    }\n    return;\n}\n",
        "token_count": 365
    },
    "0045776c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004015e2": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004015e2(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    char cVar1;\n    uint *in_EAX;\n    uint32_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint *unaff_EDI;\n    \n    uVar4 = in_EAX[4];\n    uVar2 = arg_8h;\n    if (uVar4 < arg_8h) {\n        uVar2 = fcn.004019c1(0x45b404);\n    }\n    uVar4 = uVar4 - uVar2;\n    if (arg_ch < uVar4) {\n        uVar4 = arg_ch;\n    }\n    if (unaff_EDI == in_EAX) {\n        fcn.00401748();\n        fcn.00401748();\n    }\n    else {\n        cVar1 = fcn.004017b9();\n        if (cVar1 != '\\0') {\n            if (7 < in_EAX[5]) {\n                in_EAX = *in_EAX;\n            }\n            puVar3 = unaff_EDI;\n            if (7 < unaff_EDI[5]) {\n                puVar3 = *unaff_EDI;\n            }\n            fcn.00409230(puVar3, in_EAX + arg_8h * 2, uVar4 * 2);\n            unaff_EDI[4] = uVar4;\n            if (7 < unaff_EDI[5]) {\n                unaff_EDI = *unaff_EDI;\n            }\n            *(uVar4 * 2 + unaff_EDI) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 375
    }
}