{
    "18000100": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nulong fcn.180001000(uint32_t *arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    \n    // [00] -r-x section size 49152 named .text\n    if (arg2 < 4) {\n        return 0;\n    }\n    uVar2 = arg2 >> 2;\n    if (arg2 >> 2 != 0) {\n        do {\n            uVar1 = *arg1;\n            if ((uVar1 != 0) && (uVar1 != 0xd2a69f1d)) {\n                *arg1 = uVar1 ^ 0xd2a69f1d;\n            }\n            arg1 = arg1 + 1;\n            uVar2 = uVar2 - 1;\n        } while (uVar2 != 0);\n    }\n    return 1;\n}\n",
        "token_count": 196
    },
    "18000104": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180001040(int64_t *arg1)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uchar auVar3 [16];\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    ulong arg2;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    int64_t *piVar10;\n    uint64_t *puVar11;\n    uint32_t *puVar12;\n    \n    iVar2 = arg1[1];\n    if (*(*arg1 + 0x94) == 0) {\n        return 1;\n    }\n    puVar12 = *(*arg1 + 0x90) + iVar2;\n    iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar12, 0x14);\n    if (iVar4 == 0) {\n        while( true ) {\n            if (puVar12[3] == 0) {\n                return 1;\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(puVar12[3] + iVar2);\n            if (iVar6 == -1) break;\n            auVar3 = ZEXT816(8) * ZEXT816(*(arg1 + 3) + 1);\n            arg2 = SUB168(auVar3, 0);\n            if (SUB168(auVar3 >> 0x40, 0) != 0) {\n                arg2 = 0xffffffffffffffff;\n            }\n            iVar7 = fcn.1800039bc(arg1[2], arg2);\n            arg1[2] = iVar7;\n            if (iVar7 == 0) {\n                return 0;\n            }\n            *(iVar7 + *(arg1 + 3) * 8) = iVar6;\n            *(arg1 + 3) = *(arg1 + 3) + 1;\n            uVar8 = *puVar12;\n            if (uVar8 == 0) {\n                uVar8 = puVar12[4];\n                uVar5 = uVar8;\n            }\n            else {\n                uVar5 = puVar12[4];\n            }\n            piVar10 = uVar5 + iVar2;\n            puVar11 = uVar8 + iVar2;\n            uVar9 = *puVar11;\n            while (uVar9 != 0) {\n                if (uVar9 < 0) {\n                    uVar9 = uVar9 & 0xffff;\n                }\n                else {\n                    uVar9 = iVar2 + 2 + uVar9;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar6, uVar9);\n                *piVar10 = iVar7;\n                if (iVar7 == 0) {\n                    return 0;\n                }\n                puVar1 = puVar11 + 1;\n                puVar11 = puVar11 + 1;\n                piVar10 = piVar10 + 1;\n                uVar9 = *puVar1;\n            }\n            puVar12 = puVar12 + 5;\n            iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar12, 0x14);\n            if (iVar4 != 0) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 745
    },
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t entry0(uint64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    uint64_t arg2_00;\n    \n    arg2_00 = arg2;\n    if (arg2 == 1) {\n        fcn.180001f30();\n    }\n    if ((arg2 == 0) && (*0x1800169e0 < 1)) {\n        iVar1 = 0;\n    }\n    else if ((1 < arg2 - 1) ||\n            (((*0x18000d330 == 0 || (iVar1 = (**0x18000d2a0)(),  iVar1 != 0)) &&\n             (iVar1 = fcn.180001934(arg1, arg2_00, arg3),  iVar1 != 0)))) {\n        iVar1 = fcn.1800018a0(arg1, arg2_00);\n        if ((arg2 == 1) && (iVar1 == 0)) {\n            uVar2 = arg1;\n            fcn.1800018a0(arg1, 0);\n            fcn.180001a9c(uVar2 & 0xffffffffffffff00 | arg3 != 0);\n            if (*0x18000d330 != 0) {\n                (**0x18000d2a0)(arg1, 0, arg3);\n            }\n        }\n        if (((arg2 == 0) || (arg2 == 3)) && (iVar1 = fcn.180001934(arg1, arg2_00, arg3),  iVar1 != 0)) {\n            if (*0x18000d330 == 0) {\n                iVar1 = 1;\n            }\n            else {\n                iVar1 = (**0x18000d2a0)(arg1, arg2_00, arg3);\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 423
    },
    "18000400": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180003ebd)\n// WARNING: Removing unreachable block (ram,0x000180003eca)\n// WARNING: Removing unreachable block (ram,0x000180003ed4)\n// WARNING: Removing unreachable block (ram,0x000180003ee3)\n// WARNING: Removing unreachable block (ram,0x000180003eee)\n// WARNING: Removing unreachable block (ram,0x000180003ef7)\n// WARNING: Removing unreachable block (ram,0x000180003f00)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.18000400c(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    uint *var_20h;\n    int32_t *var_bp_18h;\n    ulong *var_bp_10h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = auStackX16;\n    var_28h._0_1_ = 0;\n    var_bp_18h = aiStackX24;\n    var_bp_10h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.180003d98(var_30h, &var_2ch + 4, &var_20h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.180003f5c(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 406
    },
    "1800048f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800048f0(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x18000e4e0;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x18000d2a0)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x18000e5e0);\n    if (piVar3 == 0x18000e5e0) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x18000e4e0) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x18000d2a0)(0);\n                }\n                bVar4 = piVar3 != 0x18000e4e8;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 286
    },
    "180007dc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.180007dc8(void)\n\n{\n    char acStackX8 [8];\n    ulong var_18h_2;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_20h_2;\n    ulong *var_18h;\n    char *var_10h;\n    ulong *var_bp_8h;\n    \n    acStackX8[0] = '\\x01';\n    var_28h._0_4_ = 0;\n    var_18h = &var_28h;\n    var_20h._0_4_ = 0;\n    var_10h = acStackX8;\n    var_bp_8h = &var_20h;\n    var_20h_2._0_4_ = 8;\n    var_20h_2._4_4_ = 8;\n    fcn.180007bc0(&var_18h_2, &var_20h_2 + 4, &var_18h, &var_20h_2);\n    if (acStackX8[0] != '\\0') {\n        var_20h._0_4_ = var_28h;\n    }\n    return var_20h;\n}\n",
        "token_count": 280
    },
    "18000814": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180008144(uint16_t *arg1, uint8_t *arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int64_t iStack40;\n    int64_t aiStack32 [2];\n    char cStack16;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x180017b78 = 0;\n        return 0;\n    }\n    if (*arg2 == 0) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    fcn.1800039c4(&iStack40, 0);\n    if (*(aiStack32[0] + 0xc) == 0xfde9) {\n        iVar1 = fcn.18000aa88(arg1);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        goto code_r0x000180008061;\n    }\n    if (*(aiStack32[0] + 0x138) == 0) {\n        if (arg1 != NULL) {\n            *arg1 = *arg2;\n        }\ncode_r0x00018000805c:\n        iVar1 = 1;\n    }\n    else {\n        iVar1 = fcn.18000aa3c(*arg2, aiStack32);\n        if (iVar1 == 0) {\n            iVar1 = fcn.180006bc0(*(aiStack32[0] + 0xc), 9);\n            if (iVar1 != 0) goto code_r0x00018000805c;\n        }\n        else if ((((1 < *(aiStack32[0] + 8)) && (*(aiStack32[0] + 8) <= arg3)) &&\n                 (iVar1 = fcn.180006bc0(*(aiStack32[0] + 0xc), 9),  iVar1 != 0)) ||\n                ((*(aiStack32[0] + 8) <= arg3 && (arg2[1] != 0)))) {\n            iVar1 = *(aiStack32[0] + 8);\n            goto code_r0x000180008061;\n        }\n        puVar2 = fcn.18000399c();\n        iVar1 = -1;\n        *puVar2 = 0x2a;\n    }\ncode_r0x000180008061:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        return iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 596
    },
    "18000930": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.180009308(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.18000399c();\n        *puVar1 = 0x16;\n        fcn.18000387c();\n    }\n    else if (arg1 < arg2) {\n        fcn.1800039c4(aiStack40, 0);\n        puVar2 = arg2 + -1;\n        if (*(iStack24 + 8) != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            puVar2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return puVar2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return puVar2;\n    }\n    return NULL;\n}\n",
        "token_count": 318
    },
    "1800011c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.1800011c0(int16_t *arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    int64_t *arg1_00;\n    int64_t iVar7;\n    code *pcVar8;\n    uint64_t uVar9;\n    uint32_t *puVar10;\n    int64_t iVar11;\n    uint64_t uVar12;\n    int32_t *piVar13;\n    uint64_t uVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    uchar auStack120 [32];\n    ulong uStack88;\n    int64_t iStack80;\n    uint64_t uStack72;\n    \n    uStack72 = *0x180016008 ^ auStack120;\n    uStack88 = arg2;\n    if (((*arg1 != 0x5a4d) || (piVar13 = *(arg1 + 0x1e) + arg1,  *piVar13 != 0x4550)) ||\n       ((iVar5 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(*(piVar13 + 0xc), piVar13[0x14], 0x2000),  iVar5 == 0 &&\n        (iStack80 = iVar5,  iVar5 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, piVar13[0x14], 0x2000),  iStack80 = iVar5, \n        iVar5 == 0)))) goto code_r0x00018000156b;\n    iStack80 = iVar5;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    arg1_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6, 0, 0x20);\n    uVar12 = 0;\n    arg1_00[1] = iVar5;\n    arg1_00[3] = 0;\n    arg1_00[2] = 0;\n    (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar5, piVar13[0x14], 0x1000);\n    iVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar5, piVar13[0x15]);\n    fcn.180002ea0(iVar7, arg1, piVar13[0x15] + *(arg1 + 0x1e));\n    iVar4 = *(arg1 + 0x1e);\n    *arg1_00 = iVar4 + iVar7;\n    *(iVar4 + iVar7 + 0x30) = iVar5;\n    iVar5 = *arg1_00;\n    iVar7 = arg1_00[1];\n    if (*(iVar5 + 6) != 0) {\n        puVar15 = *(iVar5 + 0x14) + 0x28 + iVar5;\n        uVar14 = uVar12;\n        do {\n            if (*puVar15 == 0) {\n                iVar4 = piVar13[0xe];\n                if (0 < iVar4) {\n                    uVar6 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar15[-1] + iVar7, iVar4, 0x1000);\n                    puVar15[-2] = uVar6;\n                    fcn.180002a40(uVar6, 0, iVar4);\n                }\n            }\n            else {\n                uVar6 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar15[-1] + iVar7);\n                fcn.180002ea0(uVar6, puVar15[1] + arg1, *puVar15);\n                puVar15[-2] = uVar6;\n            }\n            iVar5 = *arg1_00;\n            uVar16 = uVar14 + 1;\n            uVar14 = uVar16;\n            puVar15 = puVar15 + 10;\n        } while (uVar16 < *(iVar5 + 6));\n    }\n    iVar7 = iStack80;\n    iVar11 = iStack80 - *(piVar13 + 0xc);\n    if ((iVar11 != 0) && (*(iVar5 + 0xb4) != 0)) {\n        iVar2 = arg1_00[1];\n        puVar15 = *(iVar5 + 0xb0) + iVar2;\n        uVar16 = *puVar15;\n        while (uVar16 != 0) {\n            uVar9 = puVar15[1];\n            puVar10 = puVar15 + 2;\n            iVar5 = uVar16 + iVar2;\n            uVar14 = uVar12;\n            if ((uVar9 - 8 & 0xfffffffffffffffe) != 0) {\n                do {\n                    uVar3 = *puVar10 >> 0xc;\n                    uVar9 = *puVar10 & 0xfff;\n                    if (uVar3 == 3) {\n                        piVar13 = uVar9 + iVar5;\n                        *piVar13 = *piVar13 + iVar11;\n                    }\n                    else if (uVar3 == 10) {\n                        piVar1 = uVar9 + iVar5;\n                        *piVar1 = *piVar1 + iVar11;\n                    }\n                    uVar9 = puVar15[1];\n                    uVar14 = uVar14 + 1;\n                    puVar10 = puVar10 + 2;\n                } while (uVar14 < uVar9 - 8 >> 1);\n            }\n            puVar15 = puVar15 + uVar9;\n            uVar16 = *puVar15;\n        }\n    }\n    iVar4 = fcn.180001040(arg1_00);\n    if (iVar4 != 0) {\n        iVar5 = *arg1_00;\n        uVar14 = *(iVar5 + 0x30) & 0xffffffff00000000;\n        if (*(iVar5 + 6) != 0) {\n            piVar13 = *(iVar5 + 0x14) + 0x28 + iVar5;\n            uVar9 = uVar12;\n            do {\n                uVar16 = piVar13[5];\n                iVar4 = *piVar13;\n                if ((uVar16 >> 0x19 & 1) == 0) {\n                    if (iVar4 == 0) {\n                        if ((uVar16 & 0x40) == 0) {\n                            if (-1 < uVar16) goto code_r0x000180001514;\n                            iVar4 = *(iVar5 + 0x24);\n                        }\n                        else {\n                            iVar4 = *(iVar5 + 0x20);\n                        }\n                        if (iVar4 == 0) goto code_r0x000180001514;\n                    }\n                    (*_sym.imp.KERNEL32.dll_VirtualProtect)(piVar13[-2] | uVar14, iVar4);\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar13[-2] | uVar14);\n                }\ncode_r0x000180001514:\n                iVar5 = *arg1_00;\n                uVar16 = uVar9 + 1;\n                uVar9 = uVar16;\n                piVar13 = piVar13 + 10;\n            } while (uVar16 < *(iVar5 + 6));\n        }\n        if (*(iVar5 + 0x28) == 0) goto code_r0x00018000156b;\n        pcVar8 = *(iVar5 + 0x28) + iVar7;\n        if ((pcVar8 != NULL) && (iVar4 = (*pcVar8)(iVar7, 1, uStack88),  iVar4 != 0)) {\n            *(arg1_00 + 0x1c) = 1;\n            goto code_r0x00018000156b;\n        }\n    }\n    if (*(arg1_00 + 0x1c) != 0) {\n        (*(*(*arg1_00 + 0x28) + arg1_00[1]))(arg1_00[1], 0, 0);\n        *(arg1_00 + 0x1c) = 0;\n    }\n    iVar5 = arg1_00[2];\n    if (iVar5 != 0) {\n        uVar14 = uVar12;\n        if (0 < *(arg1_00 + 3)) {\n            do {\n                iVar5 = arg1_00[2];\n                if (*(uVar12 + iVar5) != -1) {\n                    (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(uVar12 + iVar5));\n                    iVar5 = arg1_00[2];\n                }\n                uVar16 = uVar14 + 1;\n                uVar12 = uVar12 + 8;\n                uVar14 = uVar16;\n            } while (uVar16 < *(arg1_00 + 3));\n        }\n        fcn.180003a60(iVar5);\n    }\n    if (arg1_00[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(arg1_00[1], 0, 0x8000);\n    }\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6, 0, arg1_00);\ncode_r0x00018000156b:\n    fcn.180001910(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 2116
    },
    "18000b7a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.18000b7a0(int64_t arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    uint32_t auStackX8 [2];\n    uchar auStackX16 [8];\n    uint32_t auStackX24 [2];\n    uint32_t auStackX32 [2];\n    uint32_t *apuStack24 [3];\n    \n    auStackX8[0] = arg1;\n    if (auStackX8[0] == 0xfffffffe) {\n        puVar1 = fcn.18000397c(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.18000399c();\n        *puVar1 = 9;\n    }\n    else {\n        if (((-1 < auStackX8[0]) && (auStackX8[0] < *0x180017b20)) &&\n           (arg1 = (auStackX8[0] & 0x3f) * 9, \n           (*(*((auStackX8[0] >> 6) * 8 + 0x180017720) + 0x38 + (auStackX8[0] & 0x3f) * 0x48) & 1) != 0)) {\n            apuStack24[0] = auStackX8;\n            auStackX24[0] = auStackX8[0];\n            auStackX32[0] = auStackX8[0];\n            uVar2 = fcn.18000b72c(auStackX16, auStackX32, apuStack24, auStackX24);\n            return uVar2;\n        }\n        puVar1 = fcn.18000397c(arg1);\n        *puVar1 = 0;\n        puVar1 = fcn.18000399c();\n        *puVar1 = 9;\n        fcn.18000387c();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 437
    },
    "180002a4": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.180002a40(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x180019000\n        switch(*(arg3 * 4 + 0x180019000) + 0x180000000) {\n        case 0x180002b70:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x180002b74:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x180002b77:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x180002b7b:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x180002b7e:\n            return arg1;\n        case 0x180002b80:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x180002b84:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x180002b88:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x180002b90:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x180002b94:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x180002ba0:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x180002ba4:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x180002ba7:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x180002bac:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x180002bb0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x180002bc0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x180002bc8:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x180016fcc & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x180016028 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1930
    },
    "180002ea": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nulong * fcn.180002ea0(ulong *arg1, ulong *arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    ulong *puVar4;\n    ulong *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint uVar14;\n    uint uVar15;\n    uint uVar16;\n    uint uVar17;\n    uint uVar18;\n    uint uVar19;\n    uint uVar20;\n    \n    if (arg3 < 0x11) {\n    // switch table (17 cases) at 0x180019050\n        switch(*(arg3 * 4 + 0x180019050) + 0x180000000) {\n        case 0x180002f20:\n            return arg1;\n        case 0x180002f21:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180002f28:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180002f2f:\n            uVar2 = *(arg2 + 2);\n            *arg1 = *arg2;\n            *(arg1 + 2) = uVar2;\n            return arg1;\n        case 0x180002f3f:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180002f45:\n            uVar17 = *(arg2 + 4);\n            uVar18 = *(arg2 + 1);\n            uVar19 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar17;\n            *(arg1 + 1) = uVar18;\n            *(arg1 + 0xc) = uVar19;\n            return arg1;\n        case 0x180002f50:\n            uVar3 = *(arg2 + 1);\n            uVar2 = *(arg2 + 10);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            *(arg1 + 10) = uVar2;\n            return arg1;\n        case 0x180002f68:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180002f70:\n            uVar2 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar2;\n            return arg1;\n        case 0x180002f80:\n            uVar3 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            return arg1;\n        case 0x180002f90:\n            uVar3 = *(arg2 + 4);\n            uVar2 = *(arg2 + 6);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            *(arg1 + 6) = uVar2;\n            return arg1;\n        case 0x180002fa8:\n            uVar17 = *(arg2 + 1);\n            uVar2 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar2;\n            return arg1;\n        case 0x180002fc0:\n            uVar2 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar2;\n            return arg1;\n        case 0x180002fd0:\n            uVar3 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            return arg1;\n        case 0x180002fe0:\n            uVar17 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            return arg1;\n        case 0x180002ff0:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            return arg1;\n        case 0x180003010:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            uVar2 = *(arg2 + 0xe);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            *(arg1 + 0xe) = uVar2;\n            return arg1;\n        }\n    }\n    if (0x20 < arg3) {\n        iVar9 = arg2 - arg1;\n        if ((arg2 < arg1) && (arg1 < arg3 + arg2)) {\n            puVar8 = arg1 + iVar9 + (arg3 - 0x10);\n            uVar17 = puVar8[1];\n            uVar18 = puVar8[2];\n            uVar19 = puVar8[3];\n            puVar6 = arg1 + (arg3 - 0x10);\n            uVar11 = arg3 - 0x10;\n            puVar7 = puVar6;\n            uVar20 = *puVar8;\n            uVar13 = uVar17;\n            uVar14 = uVar18;\n            uVar15 = uVar19;\n            if ((puVar6 & 0xf) != 0) {\n                puVar7 = puVar6 & 0xfffffffffffffff0;\n                puVar1 = puVar7 + iVar9;\n                uVar20 = *puVar1;\n                uVar13 = puVar1[1];\n                uVar14 = puVar1[2];\n                uVar15 = puVar1[3];\n                *puVar6 = *puVar8;\n                *(arg1 + (arg3 - 0xc)) = uVar17;\n                *(arg1 + (arg3 - 8)) = uVar18;\n                *(arg1 + (arg3 - 4)) = uVar19;\n                uVar11 = puVar7 - arg1;\n            }\n            uVar12 = uVar11 >> 7;\n            if (uVar12 != 0) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar8 = puVar7;\n                while( true ) {\n                    puVar6 = puVar8 + iVar9 + -0x10;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar7 = puVar8 + iVar9 + -0x20;\n                    uVar20 = *puVar7;\n                    uVar13 = puVar7[1];\n                    uVar14 = puVar7[2];\n                    uVar15 = puVar7[3];\n                    puVar7 = puVar8 + -0x20;\n                    puVar8[-4] = *puVar6;\n                    puVar8[-3] = uVar17;\n                    puVar8[-2] = uVar18;\n                    puVar8[-1] = uVar19;\n                    puVar8[-8] = uVar20;\n                    puVar8[-7] = uVar13;\n                    puVar8[-6] = uVar14;\n                    puVar8[-5] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x30;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x40;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    uVar12 = uVar12 - 1;\n                    puVar8[-0xc] = *puVar6;\n                    puVar8[-0xb] = uVar17;\n                    puVar8[-10] = uVar18;\n                    puVar8[-9] = uVar19;\n                    puVar8[-0x10] = uVar20;\n                    puVar8[-0xf] = uVar13;\n                    puVar8[-0xe] = uVar14;\n                    puVar8[-0xd] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x50;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x60;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    puVar8[-0x14] = *puVar6;\n                    puVar8[-0x13] = uVar17;\n                    puVar8[-0x12] = uVar18;\n                    puVar8[-0x11] = uVar19;\n                    puVar8[-0x18] = uVar20;\n                    puVar8[-0x17] = uVar13;\n                    puVar8[-0x16] = uVar14;\n                    puVar8[-0x15] = uVar15;\n                    puVar1 = puVar8 + iVar9 + -0x70;\n                    uVar17 = puVar1[1];\n                    uVar18 = puVar1[2];\n                    uVar19 = puVar1[3];\n                    puVar6 = puVar7 + iVar9;\n                    uVar20 = *puVar6;\n                    uVar13 = puVar6[1];\n                    uVar14 = puVar6[2];\n                    uVar15 = puVar6[3];\n                    if (uVar12 == 0) break;\n                    puVar8[-0x1c] = *puVar1;\n                    puVar8[-0x1b] = uVar17;\n                    puVar8[-0x1a] = uVar18;\n                    puVar8[-0x19] = uVar19;\n                    *puVar7 = uVar20;\n                    puVar8[-0x1f] = uVar13;\n                    puVar8[-0x1e] = uVar14;\n                    puVar8[-0x1d] = uVar15;\n                    puVar8 = puVar7;\n                }\n                puVar8[-0x1c] = *puVar1;\n                puVar8[-0x1b] = uVar17;\n                puVar8[-0x1a] = uVar18;\n                puVar8[-0x19] = uVar19;\n                uVar11 = uVar11 & 0x7f;\n            }\n            for (uVar12 = uVar11 >> 4; uVar12 != 0; uVar12 = uVar12 - 1) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar7 = puVar7 + -4;\n                puVar8 = puVar7 + iVar9;\n                uVar20 = *puVar8;\n                uVar13 = puVar8[1];\n                uVar14 = puVar8[2];\n                uVar15 = puVar8[3];\n            }\n            if ((uVar11 & 0xf) != 0) {\n                uVar17 = *(arg2 + 4);\n                uVar18 = *(arg2 + 1);\n                uVar19 = *(arg2 + 0xc);\n                *arg1 = *arg2;\n                *(arg1 + 4) = uVar17;\n                *(arg1 + 1) = uVar18;\n                *(arg1 + 0xc) = uVar19;\n            }\n            *puVar7 = uVar20;\n            puVar7[1] = uVar13;\n            puVar7[2] = uVar14;\n            puVar7[3] = uVar15;\n            return arg1;\n        }\n        if (arg3 < 0x81) {\n            puVar8 = arg1 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = arg1 + 2;\n            puVar10 = arg3 - 0x10;\n        }\n        else {\n            if ((*0x180016fcc & 2) != 0) {\n                puVar5 = arg1;\n                for (; arg3 != 0; arg3 = arg3 - 1) {\n                    *puVar5 = *arg2;\n                    arg2 = arg2 + 1;\n                    puVar5 = puVar5 + 1;\n                }\n                return arg1;\n            }\n            puVar8 = arg1 + iVar9;\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            puVar4 = arg1 + 2;\n            uVar17 = *puVar8;\n            uVar18 = uVar13;\n            uVar19 = uVar14;\n            uVar20 = uVar15;\n            if ((arg1 & 0xf) != 0) {\n                puVar7 = (puVar4 & 0xfffffffffffffff0) + iVar9;\n                uVar17 = *puVar7;\n                uVar18 = puVar7[1];\n                uVar19 = puVar7[2];\n                uVar20 = puVar7[3];\n                puVar4 = (puVar4 & 0xfffffffffffffff0) + 0x10;\n                *arg1 = *puVar8;\n                *(arg1 + 4) = uVar13;\n                *(arg1 + 1) = uVar14;\n                *(arg1 + 0xc) = uVar15;\n            }\n            puVar10 = arg1 + (arg3 - puVar4);\n            uVar11 = puVar10 >> 7;\n            puVar5 = puVar4;\n            if (uVar11 != 0) {\n                *(puVar4 + -2) = uVar17;\n                *(puVar4 + -0xc) = uVar18;\n                *(puVar4 + -1) = uVar19;\n                *(puVar4 + -4) = uVar20;\n                if (*0x180016020 < uVar11) {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                else {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                *(puVar5 + -4) = uVar13;\n                *(puVar5 + -0x1c) = uVar14;\n                *(puVar5 + -3) = uVar15;\n                *(puVar5 + -0x14) = uVar16;\n                puVar10 = puVar10 & 0x7f;\n            }\n        }\n        for (uVar11 = puVar10 >> 4; uVar11 != 0; uVar11 = uVar11 - 1) {\n            *(puVar5 + -2) = uVar17;\n            *(puVar5 + -0xc) = uVar18;\n            *(puVar5 + -1) = uVar19;\n            *(puVar5 + -4) = uVar20;\n            puVar8 = puVar5 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = puVar5 + 2;\n        }\n        uVar11 = puVar10 & 0xf;\n        if (uVar11 != 0) {\n            puVar8 = puVar5 + iVar9 + (uVar11 - 0x10);\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            *(puVar5 + (uVar11 - 0x10)) = *puVar8;\n            *(puVar5 + (uVar11 - 0xc)) = uVar13;\n            *(puVar5 + (uVar11 - 8)) = uVar14;\n            *(puVar5 + (uVar11 - 4)) = uVar15;\n        }\n        *(puVar5 + -2) = uVar17;\n        *(puVar5 + -0xc) = uVar18;\n        *(puVar5 + -1) = uVar19;\n        *(puVar5 + -4) = uVar20;\n        return arg1;\n    }\n    uVar17 = *(arg2 + 4);\n    uVar18 = *(arg2 + 1);\n    uVar19 = *(arg2 + 0xc);\n    puVar8 = arg2 + (arg3 - 0x10);\n    uVar20 = *puVar8;\n    uVar13 = puVar8[1];\n    uVar14 = puVar8[2];\n    uVar15 = puVar8[3];\n    *arg1 = *arg2;\n    *(arg1 + 4) = uVar17;\n    *(arg1 + 1) = uVar18;\n    *(arg1 + 0xc) = uVar19;\n    puVar8 = arg1 + (arg3 - 0x10);\n    *puVar8 = uVar20;\n    puVar8[1] = uVar13;\n    puVar8[2] = uVar14;\n    puVar8[3] = uVar15;\n    return arg1;\n}\n",
        "token_count": 6042
    },
    "180002de": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.180002de0(void)\n\n{\n    if (*0x180016030 != 0xffffffff) {\n        fcn.18000340c(*0x180016030);\n        *0x180016030 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 61
    },
    "18000515": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.180005154(void)\n\n{\n    if (*0x180016050 != 0xffffffff) {\n        fcn.180007114(*0x180016050);\n        *0x180016050 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 59
    },
    "180005e7": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.180005e70(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    ulong uStackX24;\n    int64_t iStackX32;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    \n    uVar9 = 0;\n    if (arg2 == NULL) {\n        puVar4 = fcn.18000399c();\n        *puVar4 = 0x16;\n        fcn.18000387c();\n        uVar5 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar6 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar6 != 0) {\n            uStackX24 = CONCAT53(uStackX24._3_5_, 0x3f2a);\n            iVar6 = fcn.180008f40(iVar6, &uStackX24);\n            if (iVar6 == 0) {\n                uVar2 = fcn.1800059d8(*arg1, 0, 0, auStack88);\n            }\n            else {\n                uVar2 = fcn.180005b60(*arg1, iVar6, auStack88);\n            }\n            uVar5 = uVar2;\n            if (uVar2 != 0) {\n                goto code_r0x00018000596d;\n            }\n            arg1 = arg1 + 1;\n            iVar6 = *arg1;\n        }\n        uStackX24 = 0;\n        iVar6 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        uVar5 = (auStack88._8_8_ - auStack88._0_8_) + 7U >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar5 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        uVar10 = uVar9;\n        uVar11 = uVar9;\n        if (uVar5 != 0) {\n            do {\n                iVar7 = -1;\n                do {\n                    iVar7 = iVar7 + 1;\n                } while (*(*piVar8 + iVar7) != '\\0');\n                piVar8 = piVar8 + 1;\n                uVar11 = uVar11 + 1 + iVar7;\n                uVar10 = uVar10 + 1;\n                uStackX24 = uVar11;\n            } while (uVar10 != uVar5);\n        }\n        iVar7 = fcn.1800041f0(iVar6, uStackX24);\n        uVar5 = 0xffffffffffffffff;\n        if (iVar7 != 0) {\n            iVar6 = iVar7 + iVar6 * 8;\n            iStackX32 = iVar6;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                piVar8 = auStack88._0_8_;\n                do {\n                    iVar12 = -1;\n                    do {\n                        iVar13 = iVar12;\n                        iVar12 = iVar13 + 1;\n                    } while (*(*piVar8 + iVar12) != '\\0');\n                    iVar13 = iVar13 + 2;\n                    iVar3 = fcn.180008dc0(iStackX32, (iVar6 - iStackX32) + uStackX24, *piVar8, iVar13);\n                    if (iVar3 != 0) {\n                        fcn.18000389c(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar9 = (*pcVar1)();\n                        return uVar9;\n                    }\n                    *((iVar7 - auStack88._0_8_) + piVar8) = iStackX32;\n                    iStackX32 = iStackX32 + iVar13;\n                    piVar8 = piVar8 + 1;\n                } while (piVar8 != auStack88._8_8_);\n            }\n            *arg2 = iVar7;\n            uVar5 = uVar9;\n        }\n        fcn.180005308(0);\ncode_r0x00018000596d:\n        uVar10 = auStack88._8_8_ + (7 - auStack88._0_8_) >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar10 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        if (uVar10 != 0) {\n            do {\n                fcn.180005308(*piVar8);\n                uVar9 = uVar9 + 1;\n                piVar8 = piVar8 + 1;\n            } while (uVar9 != uVar10);\n        }\n        fcn.180005308(auStack88._0_8_);\n        uVar5 = uVar5 & 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 1355
    },
    "180006e6": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.180006e68(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x180016008 ^ *(uVar7 * 8 + 0x180017600);\n    uVar3 = *0x180016008 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x180017560);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x18000ecc0);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if (iVar5 == 0) {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (((iVar4 == 0x57) && (iVar4 = fcn.180004ae8(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                           (iVar4 = fcn.180004ae8(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) {\n                            iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0);\n                        }\n                        else {\n                            iVar5 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        piVar1 = uVar6 * 8 + 0x180017560;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x000180006f9a;\n                    }\n                    *(uVar6 * 8 + 0x180017560) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x000180006f9a:\n                    if (iVar5 != 0) goto code_r0x000180006fb5;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        iVar5 = 0;\ncode_r0x000180006fb5:\n        if ((iVar5 != 0) && (uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2),  uVar6 != 0)) {\n            uVar3 = 0x40 - (*0x180016008 & 0x3f) & 0x3f;\n            *(uVar7 * 8 + 0x180017600) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x180016008;\n            return uVar6;\n        }\n        uVar3 = 0x40 - (*0x180016008 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x180017600) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x180016008;\n    }\n    return 0;\n}\n",
        "token_count": 859
    },
    "1800077c": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.1800077c8(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.180005390(*arg2);\n    uVar1 = *0x180016008 & 0x3f;\n    uVar2 = *0x180016008 ^ *0x180017b40;\n    fcn.1800053e4(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 143
    },
    "1800099f": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.1800099f8(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180009a18. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x180017720) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "180009a2": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.180009a20(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180009a40. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x180017720) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "18000ad4": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.18000ad44(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int64_t iStackX32;\n    \n    iVar4 = fcn.180009b04(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        puVar5 = fcn.18000399c();\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.18000392c(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x180017720) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 290
    },
    "180007f4": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007f4c(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180007f50. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "180007f5": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007f58(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000180007f5c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 77
    },
    "1800018a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800018a0(ulong arg1, ulong arg2)\n\n{\n    (*_sym.imp.KERNEL32.dll_SetErrorMode)(0x8003);\n    if (arg2 == 1) {\n        *0x180017ba0 = arg1;\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "1800018e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1800018e0(int16_t *arg1, int64_t arg2)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    \n    iVar3 = 0x208;\n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            piVar5 = arg1;\n            do {\n                iVar1 = *((arg2 - arg1) + piVar5);\n                *piVar5 = iVar1;\n                piVar5 = piVar5 + 1;\n                if (iVar1 == 0) break;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n            if (iVar3 != 0) {\n                return 0;\n            }\n            *arg1 = 0;\n            puVar2 = fcn.18000399c();\n            uVar4 = 0x22;\n            goto code_r0x000180003a98;\n        }\n        *arg1 = 0;\n    }\n    puVar2 = fcn.18000399c();\n    uVar4 = 0x16;\ncode_r0x000180003a98:\n    *puVar2 = uVar4;\n    fcn.18000387c();\n    return uVar4;\n}\n",
        "token_count": 299
    },
    "1800018f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1800018f0(int16_t *arg1, int64_t arg2)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int16_t *piVar3;\n    int64_t iVar4;\n    uint uVar5;\n    \n    iVar4 = 0x208;\n    if (arg1 != NULL) {\n        piVar3 = arg1;\n        if (arg2 == 0) {\n            *arg1 = 0;\n        }\n        else {\n            do {\n                if (*piVar3 == 0) break;\n                piVar3 = piVar3 + 1;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            if (iVar4 != 0) {\n                arg2 = arg2 - piVar3;\n                do {\n                    iVar1 = *(arg2 + piVar3);\n                    *piVar3 = iVar1;\n                    piVar3 = piVar3 + 1;\n                    if (iVar1 == 0) break;\n                    iVar4 = iVar4 + -1;\n                } while (iVar4 != 0);\n                if (iVar4 != 0) {\n                    return 0;\n                }\n                *arg1 = 0;\n                puVar2 = fcn.18000399c();\n                uVar5 = 0x22;\n                goto code_r0x000180003b03;\n            }\n            *arg1 = 0;\n        }\n    }\n    puVar2 = fcn.18000399c();\n    uVar5 = 0x16;\ncode_r0x000180003b03:\n    *puVar2 = uVar5;\n    fcn.18000387c();\n    return uVar5;\n}\n",
        "token_count": 378
    },
    "180001fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001fec(void)\n\n{\n    ulong *puVar1;\n    ulong *arg1;\n    \n    arg1 = (*_sym.imp.KERNEL32.dll_InterlockedFlushSList)(0x180016f60);\n    while (arg1 != NULL) {\n        puVar1 = *arg1;\n        fcn.180003a60(arg1);\n        arg1 = puVar1;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "1800024a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800024ac(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x180014a48; piVar1 < 0x180014a48; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x18000d2a0)();\n        }\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "1800024e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800024e8(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x180014a58; piVar1 < 0x180014a58; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x18000d2a0)();\n        }\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "18000217": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.18000217c(void)\n\n{\n    fcn.180004960(0);\n    fcn.180002de0();\n    return 1;\n}\n",
        "token_count": 37
    },
    "180002e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180002e38(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x1800170e8;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x1800170c0);\n        *0x1800170e8 = *0x1800170e8 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 118
    },
    "18000459": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180004590(int64_t *arg1)\n\n{\n    if (*arg1 != *0x180017280) {\n        fcn.18000454c(*arg1);\n    }\n    return;\n}\n",
        "token_count": 48
    },
    "1800045a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800045ac(int64_t *arg1)\n\n{\n    if (*arg1 != *0x180017278) {\n        fcn.18000454c(*arg1);\n    }\n    return;\n}\n",
        "token_count": 49
    },
    "18000460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180004600(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x180017268 == 0) {\n        fcn.1800067d4();\n        arg1 = fcn.180006ccc();\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.180004444(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x180017268;\n                iVar1 = *0x180017280;\n            }\n            *0x180017280 = iVar1;\n            *0x180017268 = iVar3;\n            fcn.180005308(0);\n        }\n        fcn.180005308(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 234
    },
    "18000496": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180004960(void)\n\n{\n    fcn.180005154();\n    return 1;\n}\n",
        "token_count": 25
    },
    "1800051f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800051f4(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x1800172c0) && ((*0x180016818 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1800084d8(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "18000522": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180005228(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x180017518) && ((*0x180016818 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.180006834(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 94
    },
    "1800053a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800053ac(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x180017500;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x1800172d0);\n        *0x180017500 = *0x180017500 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 112
    },
    "1800085b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800085b8(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x180016838) {\n            fcn.180005308(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x180016840) {\n            fcn.180005308(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x180016848) {\n            fcn.180005308(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x180016850) {\n            fcn.180005308(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x180016858) {\n            fcn.180005308(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x180016860) {\n            fcn.180005308(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x180016868) {\n            fcn.180005308(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x180016888) {\n            fcn.180005308(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x180016890) {\n            fcn.180005308(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x180016898) {\n            fcn.180005308(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x1800168a0) {\n            fcn.180005308(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x1800168a8) {\n            fcn.180005308(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x1800168b0) {\n            fcn.180005308(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 533
    },
    "1800086c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800086c4(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x180016820) {\n            fcn.180005308(*arg1);\n        }\n        if (arg1[1] != *0x180016828) {\n            fcn.180005308(arg1[1]);\n        }\n        if (arg1[2] != *0x180016830) {\n            fcn.180005308(arg1[2]);\n        }\n        if (arg1[0xb] != *0x180016878) {\n            fcn.180005308(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x180016880) {\n            fcn.180005308(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 188
    },
    "18000401": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.18000401c(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    uint *puStack40;\n    int32_t *piStack32;\n    uchar *puStack24;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.180003fa8(arg1);\n    }\n    puStack40 = auStackX16;\n    auStackX32[0] = 0;\n    piStack32 = aiStackX24;\n    puStack24 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.180003d98(auStack56, auStack48, &puStack40, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.180003f5c(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 415
    }
}