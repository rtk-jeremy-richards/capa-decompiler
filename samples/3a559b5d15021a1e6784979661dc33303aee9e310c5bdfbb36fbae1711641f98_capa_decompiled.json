{
    "004cc700": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint fcn.004cc700(uint8_t *param_1, uint8_t *param_2, int32_t param_3, int32_t *param_4, int32_t param_5, \n                 uint32_t param_6, uint32_t *param_7)\n\n{\n    ushort *puVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t uVar5;\n    uint16_t uVar6;\n    ushort *puVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    uint8_t *puVar14;\n    uint8_t *puVar15;\n    uint16_t *puVar16;\n    uint32_t uVar17;\n    uint8_t *puVar18;\n    uint32_t uVar19;\n    uint32_t uStack140;\n    ushort *puStack136;\n    uint16_t *puStack124;\n    uint32_t uStack112;\n    int32_t iStack108;\n    int32_t iStack104;\n    int32_t iStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    uint32_t uStack76;\n    uint32_t uStack68;\n    uint32_t uStack60;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack44;\n    uint8_t uStack25;\n    uint32_t uStack24;\n    \n    uStack24 = 0;\n    uStack25 = 0;\n    puVar1 = param_1 + 4;\n    uVar2 = param_1[2];\n    uVar3 = param_1[1];\n    uVar4 = *param_1;\n    *param_4 = 0;\n    uStack44 = 0;\n    *param_7 = 0;\n    uStack48 = 1;\n    uStack52 = 1;\n    uStack56 = 1;\n    uStack60 = 1;\n    puVar7 = puVar1;\n    for (iVar11 = (0x300 << (param_1[1] + uVar4 & 0x1f)) + 0x736; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar7 = 0x400;\n        puVar7 = puVar7 + 1;\n    }\n    uVar19 = 0;\n    uStack68 = 0xffffffff;\n    puVar13 = param_2 + param_3;\n    iVar11 = 0;\n    puVar15 = param_2;\n    do {\n        if (puVar15 == puVar13) {\n            return 1;\n        }\n        uVar5 = *puVar15;\n        iVar11 = iVar11 + 1;\n        puVar15 = puVar15 + 1;\n        uVar19 = uVar19 << 8 | uVar5;\n    } while (iVar11 < 5);\n    if (param_6 != 0) {\ncode_r0x004cc7fc:\n        uVar12 = uStack60;\n        uVar17 = uStack24 & (1 << (uVar2 & 0x1f)) - 1U;\n        puVar16 = puVar1 + uStack44 * 0x10 + uVar17;\n        if (uStack68 < 0x1000000) {\n            if (puVar15 == puVar13) {\n                return 1;\n            }\n            uStack68 = uStack68 << 8;\n            uVar5 = *puVar15;\n            puVar15 = puVar15 + 1;\n            uVar19 = uVar19 << 8 | uVar5;\n        }\n        uVar6 = *puVar16;\n        uVar8 = (uStack68 >> 0xb) * uVar6;\n        if (uVar19 < uVar8) {\n            *puVar16 = (0x800 - uVar6 >> 5) + uVar6;\n            iVar9 = ((uStack24 & (1 << (uVar3 & 0x1f)) - 1U) << (uVar4 & 0x1f)) + (uStack25 >> (8 - uVar4 & 0x1f));\n            iVar11 = 1;\n            uStack68 = uVar8;\n            if (uStack44 < 7) goto code_r0x004cc977;\n            uStack76 = *((uStack24 - uStack48) + param_5);\n            do {\n                uStack76 = uStack76 << 1;\n                iVar10 = iVar11 * 2;\n                uVar12 = uStack76 & 0x100;\n                if (uStack68 < 0x1000000) {\n                    if (puVar15 == puVar13) {\n                        return 1;\n                    }\n                    uStack68 = uStack68 << 8;\n                    uVar5 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    uVar19 = uVar19 << 8 | uVar5;\n                }\n                uVar6 = puVar1[iVar9 * 0x300 + uVar12 + iVar11 + 0x836];\n                uVar17 = (uStack68 >> 0xb) * uVar6;\n                if (uVar19 < uVar17) {\n                    puVar1[iVar9 * 0x300 + uVar12 + iVar11 + 0x836] = (0x800 - uVar6 >> 5) + uVar6;\n                    uStack68 = uVar17;\n                    if (uVar12 != 0) goto code_r0x004cc96f;\n                }\n                else {\n                    uStack68 = uStack68 - uVar17;\n                    uVar19 = uVar19 - uVar17;\n                    iVar10 = iVar10 + 1;\n                    puVar1[iVar9 * 0x300 + uVar12 + iVar11 + 0x836] = uVar6 - (uVar6 >> 5);\n                    if (uVar12 == 0) goto code_r0x004cc96f;\n                }\n                iVar11 = iVar10;\n            } while (iVar10 < 0x100);\n            goto code_r0x004cc9e8;\n        }\n        uVar19 = uVar19 - uVar8;\n        uStack68 = uStack68 - uVar8;\n        *puVar16 = uVar6 - (uVar6 >> 5);\n        if (uStack68 < 0x1000000) {\n            if (puVar15 == puVar13) {\n                return 1;\n            }\n            uVar5 = *puVar15;\n            uStack68 = uStack68 * 0x100;\n            puVar15 = puVar15 + 1;\n            uVar19 = uVar19 * 0x100 | uVar5;\n        }\n        uVar6 = puVar1[uStack44 + 0xc0];\n        uVar8 = (uStack68 >> 0xb) * uVar6;\n        if (uVar19 < uVar8) {\n            uStack60 = uStack56;\n            puVar1[uStack44 + 0xc0] = (0x800 - uVar6 >> 5) + uVar6;\n            uStack56 = uStack52;\n            uStack52 = uStack48;\n            puStack124 = param_1 + 0x668;\n            uStack44 = (6 < uStack44) * 3;\ncode_r0x004ccd53:\n            if (uVar8 < 0x1000000) {\n                if (puVar15 == puVar13) {\n                    return 1;\n                }\n                uVar5 = *puVar15;\n                uVar8 = uVar8 << 8;\n                puVar15 = puVar15 + 1;\n                uVar19 = uVar19 << 8 | uVar5;\n            }\n            uVar6 = *puStack124;\n            uStack68 = (uVar8 >> 0xb) * uVar6;\n            if (uVar19 < uStack68) {\n                iStack96 = 0;\n                *puStack124 = (0x800 - uVar6 >> 5) + uVar6;\n                iVar11 = uVar17 * 0x10 + 4;\ncode_r0x004cce24:\n                puStack124 = iVar11 + puStack124;\n                iStack92 = 3;\n            }\n            else {\n                uVar8 = uVar8 - uStack68;\n                uVar19 = uVar19 - uStack68;\n                *puStack124 = uVar6 - (uVar6 >> 5);\n                if (uVar8 < 0x1000000) {\n                    if (puVar15 == puVar13) {\n                        return 1;\n                    }\n                    uVar5 = *puVar15;\n                    uVar8 = uVar8 * 0x100;\n                    puVar15 = puVar15 + 1;\n                    uVar19 = uVar19 * 0x100 | uVar5;\n                }\n                uVar6 = puStack124[1];\n                uVar12 = (uVar8 >> 0xb) * uVar6;\n                if (uVar19 < uVar12) {\n                    iStack96 = 8;\n                    puStack124[1] = (0x800 - uVar6 >> 5) + uVar6;\n                    iVar11 = uVar17 * 0x10 + 0x104;\n                    uStack68 = uVar12;\n                    goto code_r0x004cce24;\n                }\n                uStack68 = uVar8 - uVar12;\n                uVar19 = uVar19 - uVar12;\n                iStack96 = 0x10;\n                iStack92 = 8;\n                puStack124[1] = uVar6 - (uVar6 >> 5);\n                puStack124 = puStack124 + 0x102;\n            }\n            iStack100 = iStack92;\n            iVar11 = 1;\n            do {\n                iVar9 = iVar11 * 2;\n                puVar16 = puStack124 + iVar11;\n                if (uStack68 < 0x1000000) {\n                    if (puVar15 == puVar13) {\n                        return 1;\n                    }\n                    uStack68 = uStack68 << 8;\n                    uVar5 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    uVar19 = uVar19 << 8 | uVar5;\n                }\n                uVar6 = *puVar16;\n                uVar12 = (uStack68 >> 0xb) * uVar6;\n                if (uVar19 < uVar12) {\n                    *puVar16 = (0x800 - uVar6 >> 5) + uVar6;\n                    uStack68 = uVar12;\n                }\n                else {\n                    uStack68 = uStack68 - uVar12;\n                    uVar19 = uVar19 - uVar12;\n                    *puVar16 = uVar6 - (uVar6 >> 5);\n                    iVar9 = iVar9 + 1;\n                }\n                iStack100 = iStack100 + -1;\n                iVar11 = iVar9;\n            } while (iStack100 != 0);\n            iStack96 = (iVar9 - (1 << iStack92)) + iStack96;\n            if (uStack44 < 4) {\n                uStack44 = uStack44 + 7;\n                iVar11 = iStack96;\n                if (3 < iStack96) {\n                    iVar11 = 3;\n                }\n                iStack104 = 6;\n                iVar9 = 1;\n                do {\n                    iVar10 = iVar9 * 2;\n                    puVar16 = puVar1 + iVar11 * 0x40 + iVar9 + 0x1b0;\n                    if (uStack68 < 0x1000000) {\n                        if (puVar15 == puVar13) {\n                            return 1;\n                        }\n                        uStack68 = uStack68 << 8;\n                        uVar5 = *puVar15;\n                        puVar15 = puVar15 + 1;\n                        uVar19 = uVar19 << 8 | uVar5;\n                    }\n                    uVar6 = *puVar16;\n                    uVar12 = (uStack68 >> 0xb) * uVar6;\n                    if (uVar19 < uVar12) {\n                        *puVar16 = (0x800 - uVar6 >> 5) + uVar6;\n                        uStack68 = uVar12;\n                    }\n                    else {\n                        uStack68 = uStack68 - uVar12;\n                        uVar19 = uVar19 - uVar12;\n                        iVar10 = iVar10 + 1;\n                        *puVar16 = uVar6 - (uVar6 >> 5);\n                    }\n                    iStack104 = iStack104 + -1;\n                    iVar9 = iVar10;\n                } while (iStack104 != 0);\n                uVar12 = iVar10 - 0x40;\n                uStack140 = uVar12;\n                if (3 < uVar12) {\n                    iStack108 = (uVar12 >> 1) + -1;\n                    uStack140 = uVar12 & 1 | 2;\n                    if (uVar12 < 0xe) {\n                        uStack140 = uStack140 << (iStack108 & 0x1f);\n                        puStack136 = puVar1 + uStack140 + (0x2af - uVar12);\n                    }\n                    else {\n                        iVar11 = (uVar12 >> 1) + -5;\n                        do {\n                            if (uStack68 < 0x1000000) {\n                                if (puVar15 == puVar13) {\n                                    return 1;\n                                }\n                                uStack68 = uStack68 << 8;\n                                uVar5 = *puVar15;\n                                puVar15 = puVar15 + 1;\n                                uVar19 = uVar19 << 8 | uVar5;\n                            }\n                            uStack68 = uStack68 >> 1;\n                            uStack140 = uStack140 * 2;\n                            if (uStack68 <= uVar19) {\n                                uVar19 = uVar19 - uStack68;\n                                uStack140 = uStack140 | 1;\n                            }\n                            iVar11 = iVar11 + -1;\n                        } while (iVar11 != 0);\n                        uStack140 = uStack140 << 4;\n                        puStack136 = param_1 + 0x648;\n                        iStack108 = 4;\n                    }\n                    uStack112 = 1;\n                    iVar11 = 1;\n                    do {\n                        iVar9 = iVar11 * 2;\n                        puVar16 = puStack136 + iVar11;\n                        if (uStack68 < 0x1000000) {\n                            if (puVar15 == puVar13) {\n                                return 1;\n                            }\n                            uStack68 = uStack68 << 8;\n                            uVar5 = *puVar15;\n                            puVar15 = puVar15 + 1;\n                            uVar19 = uVar19 << 8 | uVar5;\n                        }\n                        uVar6 = *puVar16;\n                        uVar12 = (uStack68 >> 0xb) * uVar6;\n                        if (uVar19 < uVar12) {\n                            *puVar16 = (0x800 - uVar6 >> 5) + uVar6;\n                            uStack68 = uVar12;\n                        }\n                        else {\n                            uStack68 = uStack68 - uVar12;\n                            uVar19 = uVar19 - uVar12;\n                            *puVar16 = uVar6 - (uVar6 >> 5);\n                            iVar9 = iVar9 + 1;\n                            uStack140 = uStack140 | uStack112;\n                        }\n                        uStack112 = uStack112 << 1;\n                        iStack108 = iStack108 + -1;\n                        iVar11 = iVar9;\n                    } while (iStack108 != 0);\n                }\n                uStack48 = uStack140 + 1;\n                if (uStack48 == 0) goto code_r0x004cd142;\n            }\n            iStack96 = iStack96 + 2;\n            if (uStack24 < uStack48) {\n                return 1;\n            }\n            puVar14 = uStack24 + param_5;\n            puVar18 = uStack24 + (param_5 - uStack48);\n            while( true ) {\n                uStack25 = *puVar18;\n                puVar18 = puVar18 + 1;\n                *puVar14 = uStack25;\n                puVar14 = puVar14 + 1;\n                uStack24 = uStack24 + 1;\n                iStack96 = iStack96 + -1;\n                if (iStack96 == 0) break;\n                if (param_6 <= uStack24) goto code_r0x004cd142;\n            }\n            goto code_r0x004cd131;\n        }\n        uVar19 = uVar19 - uVar8;\n        uStack68 = uStack68 - uVar8;\n        puVar1[uStack44 + 0xc0] = uVar6 - (uVar6 >> 5);\n        if (uStack68 < 0x1000000) {\n            if (puVar15 == puVar13) {\n                return 1;\n            }\n            uVar5 = *puVar15;\n            uStack68 = uStack68 * 0x100;\n            puVar15 = puVar15 + 1;\n            uVar19 = uVar19 * 0x100 | uVar5;\n        }\n        uVar6 = puVar1[uStack44 + 0xcc];\n        uVar8 = (uStack68 >> 0xb) * uVar6;\n        if (uVar8 <= uVar19) {\n            uStack68 = uStack68 - uVar8;\n            uVar19 = uVar19 - uVar8;\n            puVar1[uStack44 + 0xcc] = uVar6 - (uVar6 >> 5);\n            if (uStack68 < 0x1000000) {\n                if (puVar15 == puVar13) {\n                    return 1;\n                }\n                uVar5 = *puVar15;\n                uStack68 = uStack68 * 0x100;\n                puVar15 = puVar15 + 1;\n                uVar19 = uVar19 * 0x100 | uVar5;\n            }\n            uVar6 = puVar1[uStack44 + 0xd8];\n            uVar8 = (uStack68 >> 0xb) * uVar6;\n            if (uVar19 < uVar8) {\n                puVar1[uStack44 + 0xd8] = (0x800 - uVar6 >> 5) + uVar6;\n                uVar12 = uStack52;\n            }\n            else {\n                uVar19 = uVar19 - uVar8;\n                uStack68 = uStack68 - uVar8;\n                puVar1[uStack44 + 0xd8] = uVar6 - (uVar6 >> 5);\n                if (uStack68 < 0x1000000) {\n                    if (puVar15 == puVar13) {\n                        return 1;\n                    }\n                    uVar5 = *puVar15;\n                    uStack68 = uStack68 * 0x100;\n                    puVar15 = puVar15 + 1;\n                    uVar19 = uVar19 * 0x100 | uVar5;\n                }\n                uVar6 = puVar1[uStack44 + 0xe4];\n                uVar8 = (uStack68 >> 0xb) * uVar6;\n                if (uVar19 < uVar8) {\n                    puVar1[uStack44 + 0xe4] = (0x800 - uVar6 >> 5) + uVar6;\n                    uVar12 = uStack56;\n                }\n                else {\n                    uVar19 = uVar19 - uVar8;\n                    uVar8 = uStack68 - uVar8;\n                    puVar1[uStack44 + 0xe4] = uVar6 - (uVar6 >> 5);\n                    uStack60 = uStack56;\n                }\n                uStack56 = uStack52;\n            }\n            uStack52 = uStack48;\n            uStack48 = uVar12;\ncode_r0x004ccd37:\n            puStack124 = param_1 + 0xa6c;\n            uStack44 = (6 < uStack44) * 3 + 8;\n            goto code_r0x004ccd53;\n        }\n        puVar1[uStack44 + 0xcc] = (0x800 - uVar6 >> 5) + uVar6;\n        if (uVar8 < 0x1000000) {\n            if (puVar15 == puVar13) {\n                return 1;\n            }\n            uVar5 = *puVar15;\n            uVar8 = uVar8 * 0x100;\n            puVar15 = puVar15 + 1;\n            uVar19 = uVar19 << 8 | uVar5;\n        }\n        uVar6 = puVar1[uStack44 * 0x10 + uVar17 + 0xf0];\n        uStack68 = (uVar8 >> 0xb) * uVar6;\n        if (uStack68 <= uVar19) {\n            uVar8 = uVar8 - uStack68;\n            uVar19 = uVar19 - uStack68;\n            puVar1[uStack44 * 0x10 + uVar17 + 0xf0] = uVar6 - (uVar6 >> 5);\n            goto code_r0x004ccd37;\n        }\n        puVar1[uStack44 * 0x10 + uVar17 + 0xf0] = (0x800 - uVar6 >> 5) + uVar6;\n        if (uStack24 == 0) {\n            return 1;\n        }\n        uStack44 = (6 < uStack44) * 2 + 9;\n        uStack25 = *((uStack24 - uStack48) + param_5);\n        *(param_5 + uStack24) = uStack25;\n        uStack24 = uStack24 + 1;\n        goto code_r0x004cd131;\n    }\n    goto code_r0x004cd161;\ncode_r0x004cc96f:\n    while (iVar11 = iVar10,  iVar10 < 0x100) {\ncode_r0x004cc977:\n        iVar10 = iVar11 * 2;\n        puVar16 = puVar1 + iVar9 * 0x300 + iVar11 + 0x736;\n        if (uStack68 < 0x1000000) {\n            if (puVar15 == puVar13) {\n                return 1;\n            }\n            uStack68 = uStack68 << 8;\n            uVar5 = *puVar15;\n            puVar15 = puVar15 + 1;\n            uVar19 = uVar19 << 8 | uVar5;\n        }\n        uVar6 = *puVar16;\n        uVar12 = (uStack68 >> 0xb) * uVar6;\n        if (uVar19 < uVar12) {\n            *puVar16 = (0x800 - uVar6 >> 5) + uVar6;\n            uStack68 = uVar12;\n        }\n        else {\n            uVar19 = uVar19 - uVar12;\n            iVar10 = iVar10 + 1;\n            *puVar16 = uVar6 - (uVar6 >> 5);\n            uStack68 = uStack68 - uVar12;\n        }\n    }\ncode_r0x004cc9e8:\n    uStack25 = iVar10;\n    *(param_5 + uStack24) = uStack25;\n    uStack24 = uStack24 + 1;\n    if (uStack44 < 4) {\n        uStack44 = 0;\n    }\n    else if (uStack44 < 10) {\n        uStack44 = uStack44 - 3;\n    }\n    else {\n        uStack44 = uStack44 - 6;\n    }\ncode_r0x004cd131:\n    if (param_6 <= uStack24) goto code_r0x004cd142;\n    goto code_r0x004cc7fc;\ncode_r0x004cd142:\n    if (uStack68 < 0x1000000) {\n        if (puVar15 == puVar13) {\n            return 1;\n        }\n        puVar15 = puVar15 + 1;\n    }\ncode_r0x004cd161:\n    *param_4 = puVar15 - param_2;\n    *param_7 = uStack24;\n    return 0;\n}\n",
        "token_count": 5512
    },
    "004ccd2b": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint fcn.004ccd2b(void)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_EAX;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint8_t *puVar8;\n    uint8_t *unaff_EBX;\n    uint32_t unaff_ESI;\n    uint16_t *puVar9;\n    uint8_t *puVar10;\n    uint32_t unaff_EDI;\n    int32_t iStack00000004;\n    uint16_t *puStack00000010;\n    uint32_t uStack0000001c;\n    int32_t iStack00000020;\n    int32_t iStack00000024;\n    int32_t iStack00000028;\n    int32_t iStack0000002c;\n    int32_t iStack00000030;\n    uint32_t uStack00000040;\n    uint32_t in_stack_00000044;\n    uint32_t uStack00000048;\n    uint8_t *in_stack_0000004c;\n    uint32_t in_stack_00000050;\n    uint32_t in_stack_00000054;\n    uint32_t uStack00000058;\n    uint32_t in_stack_0000005c;\n    uint32_t in_stack_00000060;\n    uint8_t in_stack_00000064;\n    uint32_t in_stack_00000068;\n    uint32_t in_stack_0000006c;\n    uint8_t uStack00000073;\n    uint32_t in_stack_00000074;\n    int32_t in_stack_00000078;\n    int32_t in_stack_00000094;\n    int32_t *in_stack_0000009c;\n    int32_t in_stack_000000a0;\n    uint32_t in_stack_000000a4;\n    uint32_t *in_stack_000000a8;\n    \ncode_r0x004ccd2b:\n    uStack00000058 = in_stack_0000005c;\n    in_stack_0000005c = in_EAX;\ncode_r0x004ccd37:\n    puStack00000010 = in_stack_00000078 + 0xa68;\n    in_stack_00000060 = (6 < in_stack_00000060) * 3 + 8;\n    do {\n        in_EAX = in_stack_00000050;\n        if (unaff_ESI < 0x1000000) {\n            if (unaff_EBX == in_stack_0000004c) {\n                return 1;\n            }\n            uVar2 = *unaff_EBX;\n            unaff_ESI = unaff_ESI << 8;\n            unaff_EBX = unaff_EBX + 1;\n            unaff_EDI = unaff_EDI << 8 | uVar2;\n        }\n        uVar3 = *puStack00000010;\n        uStack00000048 = (unaff_ESI >> 0xb) * uVar3;\n        if (unaff_EDI < uStack00000048) {\n            iStack0000002c = 0;\n            *puStack00000010 = (0x800 - uVar3 >> 5) + uVar3;\n            iVar6 = in_stack_00000044 * 0x10 + 4;\ncode_r0x004cce24:\n            puStack00000010 = iVar6 + puStack00000010;\n            iStack00000030 = 3;\n        }\n        else {\n            uVar5 = unaff_ESI - uStack00000048;\n            unaff_EDI = unaff_EDI - uStack00000048;\n            *puStack00000010 = uVar3 - (uVar3 >> 5);\n            if (uVar5 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uVar2 = *unaff_EBX;\n                uVar5 = uVar5 * 0x100;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI * 0x100 | uVar2;\n            }\n            uVar3 = puStack00000010[1];\n            uVar4 = (uVar5 >> 0xb) * uVar3;\n            if (unaff_EDI < uVar4) {\n                iStack0000002c = 8;\n                puStack00000010[1] = (0x800 - uVar3 >> 5) + uVar3;\n                iVar6 = in_stack_00000044 * 0x10 + 0x104;\n                uStack00000048 = uVar4;\n                goto code_r0x004cce24;\n            }\n            uStack00000048 = uVar5 - uVar4;\n            unaff_EDI = unaff_EDI - uVar4;\n            iStack0000002c = 0x10;\n            iStack00000030 = 8;\n            puStack00000010[1] = uVar3 - (uVar3 >> 5);\n            puStack00000010 = puStack00000010 + 0x102;\n        }\n        iStack00000028 = iStack00000030;\n        iVar6 = 1;\n        do {\n            iVar7 = iVar6 * 2;\n            puVar9 = puStack00000010 + iVar6;\n            if (uStack00000048 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uStack00000048 = uStack00000048 << 8;\n                uVar2 = *unaff_EBX;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI << 8 | uVar2;\n            }\n            uVar3 = *puVar9;\n            uVar5 = (uStack00000048 >> 0xb) * uVar3;\n            if (unaff_EDI < uVar5) {\n                *puVar9 = (0x800 - uVar3 >> 5) + uVar3;\n                uStack00000048 = uVar5;\n            }\n            else {\n                uStack00000048 = uStack00000048 - uVar5;\n                unaff_EDI = unaff_EDI - uVar5;\n                *puVar9 = uVar3 - (uVar3 >> 5);\n                iVar7 = iVar7 + 1;\n            }\n            iStack00000028 = iStack00000028 + -1;\n            iVar6 = iVar7;\n        } while (iStack00000028 != 0);\n        iStack0000002c = (iVar7 - (1 << iStack00000030)) + iStack0000002c;\n        if (in_stack_00000060 < 4) {\n            in_stack_00000060 = in_stack_00000060 + 7;\n            iVar6 = iStack0000002c;\n            if (3 < iStack0000002c) {\n                iVar6 = 3;\n            }\n            iStack00000024 = 6;\n            iVar7 = 1;\n            do {\n                iVar7 = iVar7 * 2;\n                puVar9 = iVar6 * 0x80 + 0x360 + in_stack_00000078 + iVar7;\n                if (uStack00000048 < 0x1000000) {\n                    if (unaff_EBX == in_stack_0000004c) {\n                        return 1;\n                    }\n                    uStack00000048 = uStack00000048 << 8;\n                    uVar2 = *unaff_EBX;\n                    unaff_EBX = unaff_EBX + 1;\n                    unaff_EDI = unaff_EDI << 8 | uVar2;\n                }\n                uVar3 = *puVar9;\n                uVar5 = (uStack00000048 >> 0xb) * uVar3;\n                if (unaff_EDI < uVar5) {\n                    *puVar9 = (0x800 - uVar3 >> 5) + uVar3;\n                    uStack00000048 = uVar5;\n                }\n                else {\n                    uStack00000048 = uStack00000048 - uVar5;\n                    unaff_EDI = unaff_EDI - uVar5;\n                    iVar7 = iVar7 + 1;\n                    *puVar9 = uVar3 - (uVar3 >> 5);\n                }\n                iStack00000024 = iStack00000024 + -1;\n            } while (iStack00000024 != 0);\n            in_stack_0000005c = iVar7 - 0x40;\n            if (3 < in_stack_0000005c) {\n                iStack00000020 = (in_stack_0000005c >> 1) + -1;\n                uVar5 = in_stack_0000005c & 1 | 2;\n                if (in_stack_0000005c < 0xe) {\n                    uVar5 = uVar5 << (iStack00000020 & 0x1f);\n                    iStack00000004 = in_stack_00000078 + uVar5 * 2 + in_stack_0000005c * -2 + 0x55e;\n                }\n                else {\n                    iVar6 = (in_stack_0000005c >> 1) + -5;\n                    do {\n                        if (uStack00000048 < 0x1000000) {\n                            if (unaff_EBX == in_stack_0000004c) {\n                                return 1;\n                            }\n                            uStack00000048 = uStack00000048 << 8;\n                            uVar2 = *unaff_EBX;\n                            unaff_EBX = unaff_EBX + 1;\n                            unaff_EDI = unaff_EDI << 8 | uVar2;\n                        }\n                        uStack00000048 = uStack00000048 >> 1;\n                        uVar5 = uVar5 * 2;\n                        if (uStack00000048 <= unaff_EDI) {\n                            unaff_EDI = unaff_EDI - uStack00000048;\n                            uVar5 = uVar5 | 1;\n                        }\n                        iVar6 = iVar6 + -1;\n                    } while (iVar6 != 0);\n                    uVar5 = uVar5 << 4;\n                    iStack00000004 = in_stack_00000078 + 0x644;\n                    iStack00000020 = 4;\n                }\n                uStack0000001c = 1;\n                iVar6 = 1;\n                in_stack_0000005c = uVar5;\n                do {\n                    iVar6 = iVar6 * 2;\n                    puVar9 = iStack00000004 + iVar6;\n                    if (uStack00000048 < 0x1000000) {\n                        if (unaff_EBX == in_stack_0000004c) {\n                            return 1;\n                        }\n                        uStack00000048 = uStack00000048 << 8;\n                        uVar2 = *unaff_EBX;\n                        unaff_EBX = unaff_EBX + 1;\n                        unaff_EDI = unaff_EDI << 8 | uVar2;\n                    }\n                    uVar3 = *puVar9;\n                    uVar5 = (uStack00000048 >> 0xb) * uVar3;\n                    if (unaff_EDI < uVar5) {\n                        *puVar9 = (0x800 - uVar3 >> 5) + uVar3;\n                        uStack00000048 = uVar5;\n                    }\n                    else {\n                        uStack00000048 = uStack00000048 - uVar5;\n                        unaff_EDI = unaff_EDI - uVar5;\n                        *puVar9 = uVar3 - (uVar3 >> 5);\n                        iVar6 = iVar6 + 1;\n                        in_stack_0000005c = in_stack_0000005c | uStack0000001c;\n                    }\n                    uStack0000001c = uStack0000001c << 1;\n                    iStack00000020 = iStack00000020 + -1;\n                } while (iStack00000020 != 0);\n            }\n            in_stack_0000005c = in_stack_0000005c + 1;\n            if (in_stack_0000005c == 0) {\ncode_r0x004cd142:\n                if (uStack00000048 < 0x1000000) {\n                    if (unaff_EBX == in_stack_0000004c) {\n                        return 1;\n                    }\n                    unaff_EBX = unaff_EBX + 1;\n                }\n                *in_stack_0000009c = unaff_EBX - in_stack_00000094;\n                *in_stack_000000a8 = in_stack_00000074;\n                return 0;\n            }\n        }\n        iStack0000002c = iStack0000002c + 2;\n        if (in_stack_00000074 < in_stack_0000005c) {\n            return 1;\n        }\n        puVar8 = in_stack_00000074 + in_stack_000000a0;\n        puVar10 = in_stack_00000074 + (in_stack_000000a0 - in_stack_0000005c);\n        while( true ) {\n            uStack00000073 = *puVar10;\n            puVar10 = puVar10 + 1;\n            *puVar8 = uStack00000073;\n            puVar8 = puVar8 + 1;\n            in_stack_00000074 = in_stack_00000074 + 1;\n            iStack0000002c = iStack0000002c + -1;\n            if (iStack0000002c == 0) break;\n            if (in_stack_000000a4 <= in_stack_00000074) goto code_r0x004cd142;\n        }\ncode_r0x004cd131:\n        while( true ) {\n            if (in_stack_000000a4 <= in_stack_00000074) goto code_r0x004cd142;\n            in_stack_00000044 = in_stack_00000074 & in_stack_0000006c;\n            puVar9 = in_stack_00000078 + (in_stack_00000060 * 0x10 + in_stack_00000044) * 2;\n            if (uStack00000048 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uStack00000048 = uStack00000048 << 8;\n                uVar2 = *unaff_EBX;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI << 8 | uVar2;\n            }\n            uVar3 = *puVar9;\n            uVar5 = (uStack00000048 >> 0xb) * uVar3;\n            if (unaff_EDI < uVar5) {\n                iVar6 = 1;\n                *puVar9 = (0x800 - uVar3 >> 5) + uVar3;\n                iVar7 = (((in_stack_00000074 & in_stack_00000068) << (in_stack_00000064 & 0x1f)) +\n                        (uStack00000073 >> (8 - in_stack_00000064 & 0x1f))) * 0x600 + 0xe6c + in_stack_00000078;\n                uStack00000048 = uVar5;\n                if (in_stack_00000060 < 7) goto code_r0x004cc977;\n                uStack00000040 = *((in_stack_00000074 - in_stack_0000005c) + in_stack_000000a0);\n                do {\n                    uStack00000040 = uStack00000040 << 1;\n                    iVar6 = iVar6 * 2;\n                    uVar5 = uStack00000040 & 0x100;\n                    iVar1 = iVar6 + iVar7 + uVar5 * 2;\n                    if (uStack00000048 < 0x1000000) {\n                        if (unaff_EBX == in_stack_0000004c) {\n                            return 1;\n                        }\n                        uStack00000048 = uStack00000048 << 8;\n                        uVar2 = *unaff_EBX;\n                        unaff_EBX = unaff_EBX + 1;\n                        unaff_EDI = unaff_EDI << 8 | uVar2;\n                    }\n                    uVar3 = *(iVar1 + 0x200);\n                    uVar4 = (uStack00000048 >> 0xb) * uVar3;\n                    if (unaff_EDI < uVar4) {\n                        *(iVar1 + 0x200) = (0x800 - uVar3 >> 5) + uVar3;\n                        uStack00000048 = uVar4;\n                        if (uVar5 != 0) goto code_r0x004cc96f;\n                    }\n                    else {\n                        uStack00000048 = uStack00000048 - uVar4;\n                        unaff_EDI = unaff_EDI - uVar4;\n                        iVar6 = iVar6 + 1;\n                        *(iVar1 + 0x200) = uVar3 - (uVar3 >> 5);\n                        if (uVar5 == 0) goto code_r0x004cc96f;\n                    }\n                } while (iVar6 < 0x100);\n                goto code_r0x004cc9e8;\n            }\n            unaff_EDI = unaff_EDI - uVar5;\n            uStack00000048 = uStack00000048 - uVar5;\n            *puVar9 = uVar3 - (uVar3 >> 5);\n            iVar6 = in_stack_00000078 + in_stack_00000060 * 2;\n            if (uStack00000048 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uVar2 = *unaff_EBX;\n                uStack00000048 = uStack00000048 * 0x100;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI * 0x100 | uVar2;\n            }\n            uVar3 = *(iVar6 + 0x180);\n            unaff_ESI = (uStack00000048 >> 0xb) * uVar3;\n            if (unaff_EDI < unaff_ESI) break;\n            unaff_EDI = unaff_EDI - unaff_ESI;\n            uStack00000048 = uStack00000048 - unaff_ESI;\n            *(iVar6 + 0x180) = uVar3 - (uVar3 >> 5);\n            if (uStack00000048 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uVar2 = *unaff_EBX;\n                uStack00000048 = uStack00000048 * 0x100;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI * 0x100 | uVar2;\n            }\n            uVar3 = *(iVar6 + 0x198);\n            uVar5 = (uStack00000048 >> 0xb) * uVar3;\n            if (uVar5 <= unaff_EDI) {\n                uStack00000048 = uStack00000048 - uVar5;\n                unaff_EDI = unaff_EDI - uVar5;\n                *(iVar6 + 0x198) = uVar3 - (uVar3 >> 5);\n                if (uStack00000048 < 0x1000000) {\n                    if (unaff_EBX == in_stack_0000004c) {\n                        return 1;\n                    }\n                    uVar2 = *unaff_EBX;\n                    uStack00000048 = uStack00000048 * 0x100;\n                    unaff_EBX = unaff_EBX + 1;\n                    unaff_EDI = unaff_EDI * 0x100 | uVar2;\n                }\n                uVar3 = *(iVar6 + 0x1b0);\n                unaff_ESI = (uStack00000048 >> 0xb) * uVar3;\n                if (unaff_EDI < unaff_ESI) {\n                    *(iVar6 + 0x1b0) = (0x800 - uVar3 >> 5) + uVar3;\n                    in_EAX = uStack00000058;\n                }\n                else {\n                    unaff_EDI = unaff_EDI - unaff_ESI;\n                    uStack00000048 = uStack00000048 - unaff_ESI;\n                    *(iVar6 + 0x1b0) = uVar3 - (uVar3 >> 5);\n                    if (uStack00000048 < 0x1000000) {\n                        if (unaff_EBX == in_stack_0000004c) {\n                            return 1;\n                        }\n                        uVar2 = *unaff_EBX;\n                        uStack00000048 = uStack00000048 * 0x100;\n                        unaff_EBX = unaff_EBX + 1;\n                        unaff_EDI = unaff_EDI * 0x100 | uVar2;\n                    }\n                    uVar3 = *(iVar6 + 0x1c8);\n                    unaff_ESI = (uStack00000048 >> 0xb) * uVar3;\n                    if (unaff_EDI < unaff_ESI) {\n                        *(iVar6 + 0x1c8) = (0x800 - uVar3 >> 5) + uVar3;\n                        in_EAX = in_stack_00000054;\n                    }\n                    else {\n                        unaff_EDI = unaff_EDI - unaff_ESI;\n                        unaff_ESI = uStack00000048 - unaff_ESI;\n                        *(iVar6 + 0x1c8) = uVar3 - (uVar3 >> 5);\n                        in_stack_00000050 = in_stack_00000054;\n                    }\n                    in_stack_00000054 = uStack00000058;\n                }\n                goto code_r0x004ccd2b;\n            }\n            *(iVar6 + 0x198) = (0x800 - uVar3 >> 5) + uVar3;\n            iVar6 = in_stack_00000060 * 0x20 + in_stack_00000078 + in_stack_00000044 * 2;\n            if (uVar5 < 0x1000000) {\n                if (unaff_EBX == in_stack_0000004c) {\n                    return 1;\n                }\n                uVar2 = *unaff_EBX;\n                uVar5 = uVar5 * 0x100;\n                unaff_EBX = unaff_EBX + 1;\n                unaff_EDI = unaff_EDI << 8 | uVar2;\n            }\n            uVar3 = *(iVar6 + 0x1e0);\n            uStack00000048 = (uVar5 >> 0xb) * uVar3;\n            if (uStack00000048 <= unaff_EDI) {\n                unaff_ESI = uVar5 - uStack00000048;\n                unaff_EDI = unaff_EDI - uStack00000048;\n                *(iVar6 + 0x1e0) = uVar3 - (uVar3 >> 5);\n                goto code_r0x004ccd37;\n            }\n            *(iVar6 + 0x1e0) = (0x800 - uVar3 >> 5) + uVar3;\n            if (in_stack_00000074 == 0) {\n                return 1;\n            }\n            in_stack_00000060 = (6 < in_stack_00000060) * 2 + 9;\n            uStack00000073 = *((in_stack_00000074 - in_stack_0000005c) + in_stack_000000a0);\n            *(in_stack_000000a0 + in_stack_00000074) = uStack00000073;\n            in_stack_00000074 = in_stack_00000074 + 1;\n        }\n        in_stack_00000050 = in_stack_00000054;\n        *(iVar6 + 0x180) = (0x800 - uVar3 >> 5) + uVar3;\n        in_stack_00000054 = uStack00000058;\n        uStack00000058 = in_stack_0000005c;\n        puStack00000010 = in_stack_00000078 + 0x664;\n        in_stack_00000060 = (6 < in_stack_00000060) * 3;\n    } while( true );\ncode_r0x004cc96f:\n    while (iVar6 < 0x100) {\ncode_r0x004cc977:\n        iVar6 = iVar6 * 2;\n        puVar9 = iVar7 + iVar6;\n        if (uStack00000048 < 0x1000000) {\n            if (unaff_EBX == in_stack_0000004c) {\n                return 1;\n            }\n            uStack00000048 = uStack00000048 << 8;\n            uVar2 = *unaff_EBX;\n            unaff_EBX = unaff_EBX + 1;\n            unaff_EDI = unaff_EDI << 8 | uVar2;\n        }\n        uVar3 = *puVar9;\n        uVar5 = (uStack00000048 >> 0xb) * uVar3;\n        if (unaff_EDI < uVar5) {\n            *puVar9 = (0x800 - uVar3 >> 5) + uVar3;\n            uStack00000048 = uVar5;\n        }\n        else {\n            unaff_EDI = unaff_EDI - uVar5;\n            iVar6 = iVar6 + 1;\n            *puVar9 = uVar3 - (uVar3 >> 5);\n            uStack00000048 = uStack00000048 - uVar5;\n        }\n    }\ncode_r0x004cc9e8:\n    uStack00000073 = iVar6;\n    *(in_stack_000000a0 + in_stack_00000074) = uStack00000073;\n    in_stack_00000074 = in_stack_00000074 + 1;\n    if (in_stack_00000060 < 4) {\n        in_stack_00000060 = 0;\n    }\n    else if (in_stack_00000060 < 10) {\n        in_stack_00000060 = in_stack_00000060 - 3;\n    }\n    else {\n        in_stack_00000060 = in_stack_00000060 - 6;\n    }\n    goto code_r0x004cd131;\n}\n",
        "token_count": 5969
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    }
}