{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004e871a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e871a(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x40138c;\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "004e881a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e881a(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x40138c;\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "004e883c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e883c(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x40138c;\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "004e885e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e885e(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x40138c;\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "004e8ddb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e8ddb(uint32_t arg_8h)\n\n{\n    fcn.004e90c8();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 61
    },
    "004e8dfc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e8dfc(uint32_t arg_8h)\n\n{\n    fcn.004e90c8();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "004e8e1d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e8e1d(uint32_t arg_8h)\n\n{\n    fcn.004e90c8();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "004e90d3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e90d3(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x40148c;\n    fcn.004e904e();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "004e912f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e912f(uint32_t arg_8h)\n\n{\n    fcn.004e911f();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "004ec2fd": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004ec2fd(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x401f90;\n    fcn.004e90c8();\n    if ((arg_8h & 1) != 0) {\n        fcn.004e9170();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "004ee607": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004ee607(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004ed4a0(0x4f6868, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.004ea57e();\n        *puVar2 = 0;\n        puVar2 = fcn.004ea56b();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x722764)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x722780;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.004f1273(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.004ea56b();\n                    *puVar2 = 9;\n                    puVar2 = fcn.004ea57e();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.004ee592(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004ee6d3();\n                goto code_r0x004ee6ca;\n            }\n        }\n        puVar2 = fcn.004ea57e();\n        *puVar2 = 0;\n        puVar2 = fcn.004ea56b();\n        *puVar2 = 9;\n        fcn.004ee88b();\n    }\ncode_r0x004ee6ca:\n    fcn.004ed4e5();\n    return;\n}\n",
        "token_count": 610
    },
    "004f086e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.004f086e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x507b10 ^ &stack0xfffffffc;\n    fcn.004e9c62(arg_10h);\n    var_14h = fcn.004f2aa0(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.004f1ffe(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x004f08c7:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x004f0907;\n        }\n        if (iVar1 != 2) {\ncode_r0x004f08f9:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x004f0907;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x004f08f9;\n        goto code_r0x004f08c7;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x004f0907:\n    fcn.004ea6ee(unaff_EBX);\n    return;\n}\n",
        "token_count": 509
    },
    "004f0916": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.004f0916(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0x507b10 ^ &stack0xfffffffc;\n    fcn.004e9c62(arg_10h);\n    var_14h = fcn.004f2aa0(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.004f254f(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x004f096f:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x004f09af;\n        }\n        if (iVar1 != 2) {\ncode_r0x004f09a1:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x004f09af;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x004f09a1;\n        goto code_r0x004f096f;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x004f09af:\n    fcn.004ea6ee(unaff_EBX);\n    return;\n}\n",
        "token_count": 507
    },
    "004f157f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.004f157f(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    code *pcVar6;\n    uint unaff_EBX;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x507b10 ^ &stack0xfffffffc;\n    var_20h = arg_8h;\n    var_1ch = arg_ch;\n    var_18h = fcn.004ecfcf();\n    var_14h = 0;\n    if (*0x72171c == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x405198);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar1 == 0) ||\n           (iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x40518c), \n           pcVar4 = _sym.imp.KERNEL32.dll_EncodePointer,  iVar2 == 0)) goto code_r0x004f16dc;\n        *0x72171c = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar2);\n        uVar3 = (*pcVar6)(iVar1, 0x40517c);\n        *0x721720 = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x405168);\n        *0x721724 = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x40514c);\n        *0x72172c = (*pcVar4)(uVar3);\n        if (*0x72172c != 0) {\n            uVar3 = (*pcVar6)(iVar1, 0x405134);\n            *0x721728 = (*pcVar4)(uVar3);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if ((*0x721728 == var_18h) || (*0x72172c == var_18h)) {\ncode_r0x004f168b:\n        if ((((*0x721720 != var_18h) && (pcVar4 = (*pcVar6)(*0x721720),  pcVar4 != NULL)) &&\n            (var_14h = (*pcVar4)(),  var_14h != 0)) &&\n           ((*0x721724 != var_18h && (pcVar4 = (*pcVar6)(*0x721724),  pcVar4 != NULL)))) {\n            var_14h = (*pcVar4)(var_14h);\n        }\n    }\n    else {\n        pcVar4 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x721728);\n        pcVar5 = (*pcVar6)(*0x72172c);\n        if (((pcVar4 == NULL) || (pcVar5 == NULL)) ||\n           (((iVar1 = (*pcVar4)(),  iVar1 != 0 && (iVar1 = (*pcVar5)(iVar1, 1, &var_10h, 0xc, &var_24h),  iVar1 != 0))\n            && ((var_8h & 1) != 0)))) goto code_r0x004f168b;\n        arg_10h = arg_10h | 0x200000;\n    }\n    pcVar6 = (*pcVar6)(*0x72171c);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(var_14h, var_20h, var_1ch, arg_10h);\n    }\ncode_r0x004f16dc:\n    fcn.004ea6ee(unaff_EBX);\n    return;\n}\n",
        "token_count": 922
    },
    "004f4692": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004f4692(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004ed4a0(0x4f69b0, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.004ea57e();\n        *puVar2 = 0;\n        puVar2 = fcn.004ea56b();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x722764)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x722780;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.004f1273(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.004ea56b();\n                    *puVar2 = 9;\n                    puVar2 = fcn.004ea57e();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.004f3f95(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.004f475e();\n                goto code_r0x004f4755;\n            }\n        }\n        puVar2 = fcn.004ea57e();\n        *puVar2 = 0;\n        puVar2 = fcn.004ea56b();\n        *puVar2 = 9;\n        fcn.004ee88b();\n    }\ncode_r0x004f4755:\n    fcn.004ed4e5();\n    return;\n}\n",
        "token_count": 613
    },
    "004e6a20": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004e6a20(uint32_t *param_1, uint32_t param_2, int32_t *param_3)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint uStack2504;\n    uint uStack2500;\n    uchar *puStack2496;\n    uint uStack2492;\n    uchar *puStack2488;\n    uchar *puStack2484;\n    uint uStack2480;\n    uint uStack2476;\n    uchar *puStack2472;\n    uchar *puStack2468;\n    int32_t iStack2448;\n    uint32_t uStack2440;\n    uint32_t uStack2436;\n    uint32_t uStack2432;\n    uint uStack2428;\n    uint32_t *puStack2424;\n    uint32_t uStack2420;\n    uint32_t uStack2412;\n    int32_t iStack2408;\n    int32_t iStack2404;\n    int32_t iStack2400;\n    int32_t iStack2396;\n    int32_t iStack2392;\n    uchar auStack2376 [16];\n    uchar auStack2360 [20];\n    uchar auStack2340 [224];\n    uchar auStack2116 [64];\n    uchar auStack2052 [2052];\n    \n    uStack2412 = param_2 >> 3;\n    if (uStack2412 != 0) {\n        iStack2392 = -0x61c88647;\n        puStack2424 = param_1;\n        do {\n            puVar1 = puStack2424;\n            if (*0x720744 == 0x5d) {\n                puStack2468 = NULL;\n                puStack2472 = 0x4e6a64;\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthW)();\n                puStack2472 = &stack0xfffff6b8;\n                uStack2476 = 0;\n                uStack2480 = 0;\n                puStack2484 = &stack0xfffff7fc;\n                puStack2488 = NULL;\n                uStack2420 = 0;\n                uStack2492 = 0x4e6a80;\n                (*_sym.imp.KERNEL32.dll_ReadConsoleOutputCharacterW)();\n                uStack2492 = 0x401288;\n                puStack2496 = 0x401294;\n                uStack2500 = 0x4e6a90;\n                (*_sym.imp.KERNEL32.dll_MoveFileA)();\n                uStack2500 = 0;\n                uStack2504 = 0x4e6a97;\n                (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                uStack2504 = 0;\n                (*_sym.imp.KERNEL32.dll_EnumTimeFormatsA)(0, 0);\n                (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthA)();\n                (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, 0, 0);\n                (*_sym.imp.KERNEL32.dll_GetCPInfoExA)(0, 0, &stack0xfffff6a8);\n                (*_sym.imp.KERNEL32.dll_CancelTimerQueueTimer)(0, 0);\n                (*_sym.imp.KERNEL32.dll_BeginUpdateResourceA)(0, 0);\n            }\n            uStack2440 = *puVar1;\n            uVar5 = puVar1[1];\n            iStack2400 = *param_3;\n            iStack2404 = param_3[1];\n            puStack2468 = 0x4e6af9;\n            iVar2 = fcn.004e6a10();\n            iStack2396 = *(iVar2 + 8);\n            iStack2448 = 0x23f;\n            iVar2 = *(iVar2 + 0xc);\n            iStack2408 = 0x20;\n            do {\n                uStack2428 = 5;\n                uVar3 = uStack2440 * 0x10 + iStack2396;\n                if (*0x720744 == 0xfa9) {\n                    *0x71819c = 0xedeb2e40;\n                    uStack2428 = 5;\n                }\n                else if (*0x720744 == 0x3eb) {\n                    puStack2468 = &stack0xfffff6c8;\n                    puStack2472 = 0x401280;\n                    uStack2476 = 0x4e6b5a;\n                    uStack2428 = 5;\n                    (*_sym.imp.KERNEL32.dll_BuildCommDCBW)();\n                    *0x714c98 = 0;\n                }\n                uStack2436 = iStack2448 + uStack2440;\n                uVar3 = uVar3 ^ uStack2436;\n                *0x718198 = 0xf4ea3dee;\n                if (*0x720744 == 0x516) {\n                    puStack2468 = NULL;\n                    puStack2472 = NULL;\n                    uStack2476 = 0x4e6ba9;\n                    (*_sym.imp.KERNEL32.dll_WaitNamedPipeA)();\n                    uStack2476 = 0;\n                    uStack2480 = 0;\n                    puStack2484 = NULL;\n                    puStack2488 = &stack0xfffff6dc;\n                    uStack2492 = 0x4e6bba;\n                    (*_sym.imp.KERNEL32.dll_VerifyVersionInfoW)();\n                    uStack2492 = 0;\n                    puStack2496 = &stack0xfffff69c;\n                    uStack2500 = 0;\n                    uStack2504 = 0x4e6bc7;\n                    (*_sym.imp.KERNEL32.dll_FreeUserPhysicalPages)();\n                    uStack2504 = 0;\n                    (*_sym.imp.KERNEL32.dll_WriteConsoleW)(0, 0, 0, &stack0xfffff69c);\n                    (*_sym.imp.KERNEL32.dll_MoveFileExW)(0, 0, 0);\n                    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&stack0xfffff7bc, 0);\n                    (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)(0, &stack0xfffff67c, 0, &stack0xfffff660);\n                    (*_sym.imp.KERNEL32.dll_WriteConsoleInputA)(0, 0, 0, &stack0xfffff668);\n                    (*_sym.imp.KERNEL32.dll_InterlockedIncrement)(&stack0xfffff644);\n                    (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExW)(0, 0, 0, 0);\n                    (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(&stack0xfffff638);\n                }\n                uVar5 = uVar5 - ((uStack2440 >> 5) + iVar2 ^ uVar3);\n                uStack2436 = iStack2448 + uVar5;\n                uVar3 = (uVar5 >> (uStack2428 & 0x1f)) + iStack2404;\n                uVar4 = uVar5 * 0x10 + iStack2400 ^ uStack2436;\n                uStack2432 = uStack2436;\n                if (*0x720744 == 0x121) {\n                    puStack2468 = NULL;\n                    puStack2472 = NULL;\n                    uStack2476 = 0;\n                    uStack2480 = 0x4e6c8a;\n                    uStack2420 = uVar5;\n                    (*_sym.imp.KERNEL32.dll_OpenEventA)();\n                }\n                uStack2420 = uVar4 ^ uVar3;\n                *0x524324 = 0;\n                uStack2440 = uStack2440 - uStack2420;\n                iStack2448 = iStack2448 - iStack2392;\n                iStack2408 = iStack2408 + -1;\n            } while (iStack2408 != 0);\n            *puStack2424 = uStack2440;\n            puStack2424[1] = uVar5;\n            puStack2424 = puStack2424 + 2;\n            uStack2412 = uStack2412 - 1;\n        } while (uStack2412 != 0);\n    }\n    return;\n}\n",
        "token_count": 1830
    },
    "004e7140": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nvoid fcn.004e7140(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint uStack1808;\n    uint uStack1204;\n    uint uStack1200;\n    uint uStack1196;\n    uint uStack1192;\n    uint uStack1188;\n    uint uStack1184;\n    uint uStack1180;\n    uint uStack1176;\n    uint uStack1172;\n    uint uStack1168;\n    uint uStack1164;\n    uint uStack1160;\n    uint uStack1156;\n    uint uStack1152;\n    uint uStack1148;\n    uint uStack1144;\n    uint uStack1140;\n    uint uStack1136;\n    uint uStack1132;\n    uint uStack1128;\n    uint uStack1124;\n    uint uStack1120;\n    uchar auStack1104 [48];\n    uchar auStack1056 [1056];\n    \n    iVar5 = *0x720744;\n    *0x720744 = *0x720744 + 0xb2d3b;\n    if (iVar5 == -0xb2d25) {\n        (*_sym.imp.USER32.dll_ClientToScreen)();\n        uStack1808 = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpWriteData)(0);\n        (*_sym.imp.KERNEL32.dll_SetConsoleCP)(0);\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(&stack0xfffffbb0);\n        (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesA)(&stack0xfffffbe0, 0);\n        (*_sym.imp.KERNEL32.dll_GetDiskFreeSpaceW)\n                  (0, &stack0xfffff8f0, &stack0xfffff8f4, &stack0xfffff8fc, &stack0xfffff8f8);\n        (*_sym.imp.KERNEL32.dll_GetConsoleMode)(0, 0);\n        (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExW)(0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_AddRefActCtx)(0);\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(0);\n        uStack1200 = 0;\n        uStack1196 = 0;\n        uStack1192 = 0;\n        uStack1188 = 0;\n        uStack1204 = 0;\n        (*_sym.imp.KERNEL32.dll_BuildCommDCBAndTimeoutsW)(0x4012c8, &stack0xfffffb78, &stack0xfffffb4c);\n        (*_sym.imp.KERNEL32.dll_GetProcAddress)(0, 0);\n        fcn.004e9628(0, 0);\n        uStack1808 = 0x4e723d;\n        fcn.004e95e8(0xea, 0x929);\n        fcn.004e8e40();\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_GetCommMask;\n    pcVar2 = _sym.imp.KERNEL32.dll_SetLastError;\n    pcVar1 = _sym.imp.KERNEL32.dll_GetConsoleProcessList;\n    iVar5 = 0;\n    do {\n        (*pcVar3)();\n        (*pcVar2)();\n        uStack1808 = 0;\n        (*pcVar1)();\n        if (iVar5 < 0x20bf76f) {\n            uStack1176 = 0x4ca02c3d;\n            uStack1184 = 0x671d6b62;\n            uStack1140 = 0x200f35b6;\n            uStack1136 = 0x3ead18ae;\n            uStack1120 = 0x5ed9d4a3;\n            uStack1132 = 0xed803c;\n            uStack1144 = 0x3f1d7511;\n            uStack1192 = 0x72799a71;\n            uStack1200 = 0x3b15a212;\n            uStack1152 = 0x5ad71818;\n            uStack1172 = 0x2bd542a4;\n            uStack1148 = 0x1e64f77a;\n            uStack1204 = 0x11b60b4b;\n            uStack1164 = 0x67f5e58e;\n            uStack1124 = 0x7b544563;\n            uStack1160 = 0x633ad599;\n            uStack1128 = 0x2f727378;\n            uStack1156 = 0xe0f481e8;\n            uStack1188 = 0xfaba8389;\n            uStack1180 = 0x536cba5d;\n            uStack1168 = 0x790eca41;\n            uStack1196 = 0xc91b5ac0;\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        }\n        (*_sym.imp.KERNEL32.dll_GetSystemDefaultLangID)();\n    } while ((iVar5 < 0x309494) && (iVar5 = iVar5 + 1,  iVar5 < 0x21b344a));\n    *0x7181a2 = 0x65;\n    *0x7181b4 = 0x6c;\n    *0x7181a4 = 0x72;\n    *0x7181aa = 0x6c;\n    *0x7181b6 = 0x6c;\n    *0x7181ac = 0x320033;\n    *0x7181b0 = 0x64002e;\n    *0x7181a6 = 0x65006e;\n    *0x7181a0 = 0x6b;\n    *0x714ca4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)();\n    fcn.004e70c0();\n    *0x720748 = *0x502794;\n    fcn.004e6ce0();\n    pcVar4 = _sym.imp.KERNEL32.dll_CreateHardLinkW;\n    pcVar3 = _sym.imp.KERNEL32.dll_SetConsoleTitleW;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetFileAttributesA;\n    pcVar1 = _sym.imp.KERNEL32.dll_LCMapStringA;\n    iVar5 = 0;\n    do {\n        if (iVar5 + *0x720744 == 0x5e) {\n            uStack1808 = 0;\n            (*pcVar4)(0);\n            (*pcVar3)(0);\n            (*pcVar2)(0);\n            (*pcVar1)(0, 0, 0x401348, 0, &stack0xfffffbe0, 0);\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthW)(0);\n            (*_sym.imp.KERNEL32.dll_OpenJobObjectA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_AreFileApisANSI)();\n            (*_sym.imp.KERNEL32.dll_SetFileAttributesW)(0, 0);\n            (*_sym.imp.KERNEL32.dll_CommConfigDialogA)(0, 0, 0);\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x40c893);\n    uStack1808 = 0x4e83cd;\n    fcn.004e6a20();\n    pcVar4 = _sym.imp.KERNEL32.dll_RemoveDirectoryA;\n    pcVar3 = _sym.imp.KERNEL32.dll_CreateDirectoryW;\n    pcVar2 = _sym.imp.KERNEL32.dll_EnumResourceNamesW;\n    pcVar1 = _sym.imp.KERNEL32.dll_lstrlenW;\n    iVar5 = 0x7b;\n    do {\n        if (*0x720744 == 0xd) {\n            uStack1808 = 0;\n            (*pcVar4)();\n            (*pcVar3)(0, 0);\n            (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0, 0);\n            (*pcVar2)(0, 0x401358, 0, 0);\n            (*pcVar1)(0);\n            (*_sym.imp.ADVAPI32.dll_CloseEventLog)(0);\n            (*_sym.imp.ADVAPI32.dll_DeregisterEventSource)(0);\n            (*_sym.imp.ADVAPI32.dll_BackupEventLogW)(0, 0);\n            (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_LoadResource)(0, 0);\n        }\n        if (*0x720744 == 0xf) {\n            uStack1808 = 0;\n            (*_sym.imp.KERNEL32.dll_LockResource)();\n            (*_sym.imp.KERNEL32.dll_GetUserDefaultLangID)();\n        }\n        iVar5 = iVar5 + -1;\n    } while (iVar5 != 0);\n    *0x718194 = *0x714ca4;\n    // WARNING: Could not recover jumptable at 0x004e8498. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x714ca4)();\n    return;\n}\n",
        "token_count": 2062
    },
    "004e904e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004e904e(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != '\\0') {\n        fcn.004e96d5(*(param_1 + 4));\n    }\n    *(param_1 + 4) = 0;\n    *(param_1 + 8) = 0;\n    return;\n}\n",
        "token_count": 83
    },
    "004e96d5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004e96d5(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x72099c, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.004ea56b();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.004ea529(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "004e9813": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.004e9813(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x4e98be;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.004e98ea;\n        uStack36 = *0x507b10 ^ &fcn.004e9813::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.004e9813::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.004ed17f();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.004e9813::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 724
    },
    "004ea6ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004ea6ee(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x507b10) {\n        return;\n    }\n    *0x721358 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x72135c = &arg_8h;\n    *0x721298 = 0x10001;\n    *0x721240 = 0xc0000409;\n    *0x721244 = 1;\n    var_328h = *0x507b10;\n    var_324h = *0x507b14;\n    *0x72124c = unaff_retaddr;\n    *0x721324 = in_GS;\n    *0x721328 = in_FS;\n    *0x72132c = in_ES;\n    *0x721330 = in_DS;\n    *0x721334 = unaff_EDI;\n    *0x721338 = unaff_ESI;\n    *0x72133c = unaff_EBX;\n    *0x721340 = in_EDX;\n    *0x721344 = in_ECX;\n    *0x721348 = in_EAX;\n    *0x72134c = unaff_EBP;\n    *0x721350 = unaff_retaddr;\n    *0x721354 = in_CS;\n    *0x721360 = in_SS;\n    *0x721290 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.004f1339(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x402dfc);\n    if (*0x721290 == 0) {\n        fcn.004f1339(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 809
    },
    "004ec494": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004ec494(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004ed17f();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.004ed17f();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "004ec75b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004ec75b(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.004e9a4f(*(unaff_EBP + -0x28));\n    iVar1 = fcn.004ed17f();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.004ed17f();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.004e9a28(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.004ec4f3(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 386
    },
    "004eebdd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x004eece3: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x004eece8)\n// WARNING: Removing unreachable block (ram,0x004eed17)\n// WARNING: Removing unreachable block (ram,0x004eecee)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004eebdd(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t unaff_EBP;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004ed4a0(0x4f6888, 0x20);\n    fcn.004efefb(8);\n    *(unaff_EBP + -4) = 0;\n    pcVar1 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if (*0x720a04 != 1) {\n        *0x720a00 = 1;\n        *0x7209fc = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar2 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x721740);\n            *(unaff_EBP + -0x30) = piVar2;\n            if (piVar2 != NULL) {\n                piVar3 = (*pcVar1)(*0x72173c);\n                *(unaff_EBP + -0x2c) = piVar3;\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x28) = piVar3;\n                while( true ) {\n                    piVar3 = piVar3 + -1;\n                    *(unaff_EBP + -0x2c) = piVar3;\n                    if (piVar3 < piVar2) break;\n                    iVar4 = fcn.004ecfcf();\n                    if (*piVar3 != iVar4) {\n                        if (piVar3 < piVar2) break;\n                        pcVar5 = (*pcVar1)(*piVar3);\n                        iVar4 = fcn.004ecfcf();\n                        *piVar3 = iVar4;\n                        (*pcVar5)();\n                        iVar4 = (*pcVar1)(*0x721740);\n                        piVar2 = (*pcVar1)(*0x72173c);\n                        if ((*(unaff_EBP + -0x24) != iVar4) || (*(unaff_EBP + -0x28) != piVar2)) {\n                            *(unaff_EBP + -0x24) = iVar4;\n                            *(unaff_EBP + -0x30) = iVar4;\n                            *(unaff_EBP + -0x28) = piVar2;\n                            *(unaff_EBP + -0x2c) = piVar2;\n                            piVar3 = piVar2;\n                        }\n                        piVar2 = *(unaff_EBP + -0x30);\n                    }\n                }\n            }\n            *(unaff_EBP + -0x1c) = 0x40123c;\n            while (*(unaff_EBP + -0x1c) < 0x401248) {\n                if (**(unaff_EBP + -0x1c) != NULL) {\n                    (***(unaff_EBP + -0x1c))();\n                }\n                *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n            }\n        }\n        *(unaff_EBP + -0x20) = 0x40124c;\n        while (*(unaff_EBP + -0x20) < 0x401250) {\n            if (**(unaff_EBP + -0x20) != NULL) {\n                (***(unaff_EBP + -0x20))();\n            }\n            *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 4;\n        }\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.004efe22(8);\n    }\n    return;\n}\n",
        "token_count": 1009
    },
    "004f02ae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004f02ae(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.004efe22(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "004f1ffe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_38h\n\nvoid __cdecl fcn.004f1ffe(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    bool bVar6;\n    int32_t iVar7;\n    uint8_t uVar8;\n    uint32_t *puVar9;\n    uint *puVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    uint32_t uVar15;\n    int32_t iVar16;\n    bool bVar17;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x507b10 ^ &stack0xfffffffc;\n    uVar2 = arg_8h[5];\n    uVar15 = *(arg_8h + 3);\n    var_10h = uVar15;\n    uVar4 = *(arg_8h + 1);\n    uVar3 = *arg_8h;\n    uVar12 = uVar2 & 0x7fff;\n    iVar13 = uVar12 - 0x3fff;\n    var_ch = uVar4;\n    var_8h = uVar3 << 0x10;\n    uVar5 = str.5_v_[1];\n    if (iVar13 == -0x3fff) {\n        iVar14 = 0;\n        iVar13 = 0;\n        do {\n            if ((&var_10h)[iVar13] != 0) {\n                var_10h = 0;\n                var_ch = 0;\n                var_8h = 0;\n                break;\n            }\n            iVar13 = iVar13 + 1;\n        } while (iVar13 < 3);\n    }\n    else {\n        bVar6 = false;\n        iVar16 = str.5_v_[0] + L'\\xffffffff';\n        iVar14 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        puVar1 = &var_10h + iVar14;\n        uVar8 = 0x1f - (str.5_v_[0] & 0x1f);\n        if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n            uVar11 = (&var_10h)[iVar14] & ~(-1 << (uVar8 & 0x1f));\n            iVar7 = iVar14;\n            while( true ) {\n                if (uVar11 != 0) {\n                    iVar7 = iVar16 + (iVar16 >> 0x1f & 0x1fU) >> 5;\n                    uVar11 = 1 << (0x1f - (iVar16 & 0x1f) & 0x1f);\n                    puVar9 = &var_10h + iVar7;\n                    var_20h = *puVar9 + uVar11;\n                    if (var_20h < *puVar9) goto code_r0x004f2142;\n                    bVar17 = var_20h < uVar11;\n                    do {\n                        bVar6 = false;\n                        if (!bVar17) goto code_r0x004f2149;\ncode_r0x004f2142:\n                        do {\n                            bVar6 = true;\ncode_r0x004f2149:\n                            iVar7 = iVar7 + -1;\n                            *puVar9 = var_20h;\n                            if ((iVar7 < 0) || (!bVar6)) goto code_r0x004f2157;\n                            puVar9 = &var_10h + iVar7;\n                            var_20h = *puVar9 + 1;\n                        } while (var_20h < *puVar9);\n                        bVar17 = var_20h == 0;\n                    } while( true );\n                }\n                iVar7 = iVar7 + 1;\n                if (2 < iVar7) break;\n                uVar11 = (&var_10h)[iVar7];\n            }\n        }\ncode_r0x004f2157:\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar14 = iVar14 + 1;\n        if (iVar14 < 3) {\n            puVar10 = &var_10h + iVar14;\n            for (iVar16 = 3 - iVar14; iVar16 != 0; iVar16 = iVar16 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n        }\n        iVar14 = iVar13;\n        if (bVar6) {\n            iVar14 = uVar12 - 0x3ffe;\n        }\n        if (iVar14 < *0x508930 - str.5_v_[0]) {\n            var_10h = 0;\n            var_ch = 0;\n            var_8h = 0;\n        }\n        else {\n            if (*0x508930 < iVar14) {\n                if (iVar14 < *0x50892c) {\n                    iVar14 = iVar14 + str.5_v_[3];\n                    var_10h = var_10h & 0x7fffffff;\n                    iVar13 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar16 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar16 < iVar13) {\n                            (&var_10h)[iVar16] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar16] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar16 = iVar16 + -1;\n                    } while (-1 < iVar16);\n                }\n                else {\n                    var_ch = 0;\n                    var_8h = 0;\n                    var_10h = 0x80000000;\n                    iVar13 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar14 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar14 < iVar13) {\n                            (&var_10h)[iVar14] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar14] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar14 = iVar14 + -1;\n                    } while (-1 < iVar14);\n                    iVar14 = str.5_v_[3] + *0x50892c;\n                }\n                goto code_r0x004f2502;\n            }\n            iVar13 = *0x508930 - iVar13;\n            var_10h = uVar15;\n            var_ch = uVar4;\n            iVar14 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = iVar13 & 0x1f;\n            var_8h = uVar3 << 0x10;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar13 = 2;\n            puVar10 = &var_8h + -iVar14;\n            do {\n                if (iVar13 < iVar14) {\n                    (&var_10h)[iVar13] = 0;\n                }\n                else {\n                    (&var_10h)[iVar13] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar13 = iVar13 + -1;\n            } while (-1 < iVar13);\n            iVar14 = str.5_v_[0] + L'\\xffffffff';\n            iVar13 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar8 = 0x1f - (str.5_v_[0] & 0x1f);\n            puVar1 = &var_10h + iVar13;\n            if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n                uVar15 = (&var_10h)[iVar13] & ~(-1 << (uVar8 & 0x1f));\n                iVar16 = iVar13;\n                while (uVar15 == 0) {\n                    iVar16 = iVar16 + 1;\n                    if (2 < iVar16) goto code_r0x004f22f6;\n                    uVar15 = (&var_10h)[iVar16];\n                }\n                iVar16 = iVar14 + (iVar14 >> 0x1f & 0x1fU) >> 5;\n                bVar6 = false;\n                uVar12 = 1 << (0x1f - (iVar14 & 0x1f) & 0x1f);\n                uVar4 = (&var_10h)[iVar16];\n                uVar15 = uVar4 + uVar12;\n                if ((uVar15 < uVar4) || (uVar15 < uVar12)) {\n                    bVar6 = true;\n                }\n                (&var_10h)[iVar16] = uVar15;\n                while ((iVar16 = iVar16 + -1,  -1 < iVar16 && (bVar6))) {\n                    uVar4 = (&var_10h)[iVar16];\n                    uVar15 = uVar4 + 1;\n                    bVar6 = false;\n                    if ((uVar15 < uVar4) || (uVar15 == 0)) {\n                        bVar6 = true;\n                    }\n                    (&var_10h)[iVar16] = uVar15;\n                }\n            }\ncode_r0x004f22f6:\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar13 = iVar13 + 1;\n            if (iVar13 < 3) {\n                puVar10 = &var_10h + iVar13;\n                for (iVar14 = 3 - iVar13; iVar14 != 0; iVar14 = iVar14 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n            }\n            iVar13 = str.5_v_[1] + L'\\x01' + (str.5_v_[1] + L'\\x01' >> 0x1f & 0x1fU) >> 5;\n            uVar8 = uVar5 + 1 & 0x1f;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar14 = 2;\n            puVar10 = &var_8h + -iVar13;\n            do {\n                if (iVar14 < iVar13) {\n                    (&var_10h)[iVar14] = 0;\n                }\n                else {\n                    (&var_10h)[iVar14] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar14 = iVar14 + -1;\n            } while (-1 < iVar14);\n        }\n        iVar14 = 0;\n    }\ncode_r0x004f2502:\n    uVar15 = iVar14 << (0x1f - uVar5 & 0x1f) | -((uVar2 & 0x8000) != 0) & 0x80000000 | var_10h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = uVar15;\n        *arg_ch = var_ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = uVar15;\n    }\n    fcn.004ea6ee(uVar2 & 0x8000);\n    return;\n}\n",
        "token_count": 3260
    },
    "004f254f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_38h\n\nvoid __cdecl fcn.004f254f(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    bool bVar6;\n    int32_t iVar7;\n    uint8_t uVar8;\n    uint32_t *puVar9;\n    uint *puVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    uint32_t uVar15;\n    int32_t iVar16;\n    bool bVar17;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x507b10 ^ &stack0xfffffffc;\n    uVar2 = arg_8h[5];\n    uVar15 = *(arg_8h + 3);\n    var_10h = uVar15;\n    uVar4 = *(arg_8h + 1);\n    uVar3 = *arg_8h;\n    uVar12 = uVar2 & 0x7fff;\n    iVar13 = uVar12 - 0x3fff;\n    var_ch = uVar4;\n    var_8h = uVar3 << 0x10;\n    uVar5 = *0x508950;\n    if (iVar13 == -0x3fff) {\n        iVar14 = 0;\n        iVar13 = 0;\n        do {\n            if ((&var_10h)[iVar13] != 0) {\n                var_10h = 0;\n                var_ch = 0;\n                var_8h = 0;\n                break;\n            }\n            iVar13 = iVar13 + 1;\n        } while (iVar13 < 3);\n    }\n    else {\n        bVar6 = false;\n        iVar16 = *0x50894c + -1;\n        iVar14 = *0x50894c + (*0x50894c >> 0x1f & 0x1fU) >> 5;\n        puVar1 = &var_10h + iVar14;\n        uVar8 = 0x1f - (*0x50894c & 0x1f);\n        if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n            uVar11 = (&var_10h)[iVar14] & ~(-1 << (uVar8 & 0x1f));\n            iVar7 = iVar14;\n            while( true ) {\n                if (uVar11 != 0) {\n                    iVar7 = iVar16 + (iVar16 >> 0x1f & 0x1fU) >> 5;\n                    uVar11 = 1 << (0x1f - (iVar16 & 0x1f) & 0x1f);\n                    puVar9 = &var_10h + iVar7;\n                    var_20h = *puVar9 + uVar11;\n                    if (var_20h < *puVar9) goto code_r0x004f2693;\n                    bVar17 = var_20h < uVar11;\n                    do {\n                        bVar6 = false;\n                        if (!bVar17) goto code_r0x004f269a;\ncode_r0x004f2693:\n                        do {\n                            bVar6 = true;\ncode_r0x004f269a:\n                            iVar7 = iVar7 + -1;\n                            *puVar9 = var_20h;\n                            if ((iVar7 < 0) || (!bVar6)) goto code_r0x004f26a8;\n                            puVar9 = &var_10h + iVar7;\n                            var_20h = *puVar9 + 1;\n                        } while (var_20h < *puVar9);\n                        bVar17 = var_20h == 0;\n                    } while( true );\n                }\n                iVar7 = iVar7 + 1;\n                if (2 < iVar7) break;\n                uVar11 = (&var_10h)[iVar7];\n            }\n        }\ncode_r0x004f26a8:\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar14 = iVar14 + 1;\n        if (iVar14 < 3) {\n            puVar10 = &var_10h + iVar14;\n            for (iVar16 = 3 - iVar14; iVar16 != 0; iVar16 = iVar16 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n        }\n        iVar14 = iVar13;\n        if (bVar6) {\n            iVar14 = uVar12 - 0x3ffe;\n        }\n        if (iVar14 < *0x508948 - *0x50894c) {\n            var_10h = 0;\n            var_ch = 0;\n            var_8h = 0;\n        }\n        else {\n            if (*0x508948 < iVar14) {\n                if (iVar14 < *0x508944) {\n                    iVar14 = iVar14 + *0x508958;\n                    var_10h = var_10h & 0x7fffffff;\n                    iVar13 = *0x508950 + (*0x508950 >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar16 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar16 < iVar13) {\n                            (&var_10h)[iVar16] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar16] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar16 = iVar16 + -1;\n                    } while (-1 < iVar16);\n                }\n                else {\n                    var_ch = 0;\n                    var_8h = 0;\n                    var_10h = 0x80000000;\n                    iVar13 = *0x508950 + (*0x508950 >> 0x1f & 0x1fU) >> 5;\n                    uVar8 = uVar5 & 0x1f;\n                    var_28h = 0;\n                    var_20h = 0;\n                    do {\n                        uVar15 = (&var_10h)[var_20h];\n                        (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                        var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                        var_20h = var_20h + 1;\n                    } while (var_20h < 3);\n                    iVar14 = 2;\n                    puVar10 = &var_8h + -iVar13;\n                    do {\n                        if (iVar14 < iVar13) {\n                            (&var_10h)[iVar14] = 0;\n                        }\n                        else {\n                            (&var_10h)[iVar14] = *puVar10;\n                        }\n                        puVar10 = puVar10 + -1;\n                        iVar14 = iVar14 + -1;\n                    } while (-1 < iVar14);\n                    iVar14 = *0x508958 + *0x508944;\n                }\n                goto code_r0x004f2a53;\n            }\n            iVar13 = *0x508948 - iVar13;\n            var_10h = uVar15;\n            var_ch = uVar4;\n            iVar14 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = iVar13 & 0x1f;\n            var_8h = uVar3 << 0x10;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar13 = 2;\n            puVar10 = &var_8h + -iVar14;\n            do {\n                if (iVar13 < iVar14) {\n                    (&var_10h)[iVar13] = 0;\n                }\n                else {\n                    (&var_10h)[iVar13] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar13 = iVar13 + -1;\n            } while (-1 < iVar13);\n            iVar14 = *0x50894c + -1;\n            iVar13 = *0x50894c + (*0x50894c >> 0x1f & 0x1fU) >> 5;\n            uVar8 = 0x1f - (*0x50894c & 0x1f);\n            puVar1 = &var_10h + iVar13;\n            if ((*puVar1 & 1 << (uVar8 & 0x1f)) != 0) {\n                uVar15 = (&var_10h)[iVar13] & ~(-1 << (uVar8 & 0x1f));\n                iVar16 = iVar13;\n                while (uVar15 == 0) {\n                    iVar16 = iVar16 + 1;\n                    if (2 < iVar16) goto code_r0x004f2847;\n                    uVar15 = (&var_10h)[iVar16];\n                }\n                iVar16 = iVar14 + (iVar14 >> 0x1f & 0x1fU) >> 5;\n                bVar6 = false;\n                uVar12 = 1 << (0x1f - (iVar14 & 0x1f) & 0x1f);\n                uVar4 = (&var_10h)[iVar16];\n                uVar15 = uVar4 + uVar12;\n                if ((uVar15 < uVar4) || (uVar15 < uVar12)) {\n                    bVar6 = true;\n                }\n                (&var_10h)[iVar16] = uVar15;\n                while ((iVar16 = iVar16 + -1,  -1 < iVar16 && (bVar6))) {\n                    uVar4 = (&var_10h)[iVar16];\n                    uVar15 = uVar4 + 1;\n                    bVar6 = false;\n                    if ((uVar15 < uVar4) || (uVar15 == 0)) {\n                        bVar6 = true;\n                    }\n                    (&var_10h)[iVar16] = uVar15;\n                }\n            }\ncode_r0x004f2847:\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar13 = iVar13 + 1;\n            if (iVar13 < 3) {\n                puVar10 = &var_10h + iVar13;\n                for (iVar14 = 3 - iVar13; iVar14 != 0; iVar14 = iVar14 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n            }\n            iVar13 = *0x508950 + 1 + (*0x508950 + 1 >> 0x1f & 0x1fU) >> 5;\n            uVar8 = uVar5 + 1 & 0x1f;\n            var_28h = 0;\n            var_20h = 0;\n            do {\n                uVar15 = (&var_10h)[var_20h];\n                (&var_10h)[var_20h] = uVar15 >> uVar8 | var_28h;\n                var_28h = (uVar15 & ~(-1 << uVar8)) << (0x20 - uVar8 & 0x1f);\n                var_20h = var_20h + 1;\n            } while (var_20h < 3);\n            iVar14 = 2;\n            puVar10 = &var_8h + -iVar13;\n            do {\n                if (iVar14 < iVar13) {\n                    (&var_10h)[iVar14] = 0;\n                }\n                else {\n                    (&var_10h)[iVar14] = *puVar10;\n                }\n                puVar10 = puVar10 + -1;\n                iVar14 = iVar14 + -1;\n            } while (-1 < iVar14);\n        }\n        iVar14 = 0;\n    }\ncode_r0x004f2a53:\n    uVar15 = iVar14 << (0x1f - uVar5 & 0x1f) | -((uVar2 & 0x8000) != 0) & 0x80000000 | var_10h;\n    if (*0x508954 == 0x40) {\n        arg_ch[1] = uVar15;\n        *arg_ch = var_ch;\n    }\n    else if (*0x508954 == 0x20) {\n        *arg_ch = uVar15;\n    }\n    fcn.004ea6ee(uVar2 & 0x8000);\n    return;\n}\n",
        "token_count": 3218
    },
    "004eb2f5": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.004eb2f5(uint param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_2 + 4) & 0x7ff00000;\n    if (uVar1 != 0x7ff00000) {\n        return uVar1;\n    }\n    return *(param_2 + 4);\n}\n",
        "token_count": 93
    },
    "004e6a10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004e6a10(int32_t *param_1)\n\n{\n    *param_1 = *param_1 + -0x3910cb1f;\n    return;\n}\n",
        "token_count": 45
    },
    "004e6ce0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251",
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004e6ce0(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if (*0x720744 != 0) {\n        do {\n            *(uVar1 + param_1) = *(param_2 + 0xb2d3b + uVar1);\n            uVar1 = uVar1 + 1;\n        } while (uVar1 < *0x720744);\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "004e70c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.004e70c0(void)\n\n{\n    uint uStack16;\n    uint uStack12;\n    \n    uStack12 = 0x7181a0;\n    uStack16 = 0x4e70ce;\n    *0x71818c = (*_sym.imp.KERNEL32.dll_LoadLibraryW)();\n    uStack16 = 0x508c60;\n    *0x508c60 = 0x74726956;\n    *0x508c64 = 0x506c6175;\n    *0x508c68 = 0x65746f72;\n    *0x508c6c = 0x7463;\n    *0x508c6e = 0;\n    *0x714c8c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x71818c);\n    (**0x714c8c)(*0x714ca4, *0x720744, 0x40, &stack0xfffffff0);\n    return;\n}\n",
        "token_count": 221
    },
    "004eae0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004eb0b2)\n\nfloat10 fcn.004eae0e(double param_1)\n\n{\n    int32_t iVar1;\n    double dVar2;\n    double dVar3;\n    int32_t iVar4;\n    double dVar5;\n    double dVar6;\n    uchar auVar7 [16];\n    double dVar8;\n    double in_XMM7_Qa;\n    \n    dVar2 = in_XMM7_Qa & *0x401dc0;\n    dVar3 = in_XMM7_Qa & *0x401dc8;\n    if (*0x401ee8 <= dVar2) {\n        return *0x401ef8 + *((param_1._4_4_ >> 0x1f) * -8 + 0x401dd0);\n    }\n    if (*0x401ed8 <= dVar2) {\n        if (*0x401ed0 <= dVar2) {\n            if (*0x401ec8 <= dVar2) {\n                iVar1 = 0x300;\n                dVar3 = *0x401eb0 / dVar2;\n            }\n            else {\n                iVar4 = (dVar2 + *0x401ec0 >> 0x2c) - *0x401ea0;\n                iVar1 = iVar4 * 3;\n                dVar3 = *(iVar4 * 0x18 + 0x403210);\n                dVar3 = (dVar2 - dVar3) / (dVar2 * dVar3 + *0x401eb8);\n            }\n            dVar5 = dVar3 * dVar3;\n            dVar6 = dVar5 * dVar5;\n            dVar8 = dVar3 * dVar3 * dVar3 * dVar3;\n            dVar5 = (((*0x401e90 * dVar6 + *0x401e80) * dVar6 + *0x401e70) * dVar6 + *0x401e60) * dVar5;\n            auVar7 = CONCAT88(((*0x401e98 * dVar8 + *0x401e88) * dVar8 + *0x401e78) * dVar8 + *0x401e68, dVar5);\n            auVar7 = shufpd(auVar7, auVar7, 1);\n            return *(iVar1 * 8 + 0x403200) - (((dVar5 + SUB168(auVar7, 0)) * dVar3 - *(iVar1 * 8 + 0x403208)) - dVar3) |\n                   in_XMM7_Qa ^ dVar2;\n        }\n        dVar2 = dVar2 * dVar2;\n        dVar5 = dVar2 * dVar2;\n        dVar3 = dVar3 * dVar3 * dVar3 * dVar3;\n        dVar2 = (((((((*0x401e50 * dVar5 + *0x401e40) * dVar5 + *0x401e30) * dVar5 + *0x401e20) * dVar5 + *0x401e10) *\n                   dVar5 + *0x401e00) * dVar5 + *0x401df0) * dVar5 + *0x401de0) * dVar2;\n        auVar7 = CONCAT88(((((((*0x401e58 * dVar3 + *0x401e48) * dVar3 + *0x401e38) * dVar3 + *0x401e28) * dVar3 +\n                            *0x401e18) * dVar3 + *0x401e08) * dVar3 + *0x401df8) * dVar3 + *0x401de8, dVar2);\n        auVar7 = shufpd(auVar7, auVar7, 1);\n        return in_XMM7_Qa - (dVar2 + SUB168(auVar7, 0)) * in_XMM7_Qa;\n    }\n    if (*0x401ee0 <= dVar2) {\n        dVar2 = dVar2 * dVar2;\n        dVar5 = dVar2 * dVar2;\n        dVar3 = dVar3 * dVar3 * dVar3 * dVar3;\n        dVar2 = (((*0x401e90 * dVar5 + *0x401e80) * dVar5 + *0x401e70) * dVar5 + *0x401e60) * dVar2;\n        auVar7 = CONCAT88(((*0x401e98 * dVar3 + *0x401e88) * dVar3 + *0x401e78) * dVar3 + *0x401e68, dVar2);\n        auVar7 = shufpd(auVar7, auVar7, 1);\n        return in_XMM7_Qa - (dVar2 + SUB168(auVar7, 0)) * in_XMM7_Qa;\n    }\n    if (dVar2 != *0x401ea8) {\n        if (*0x401ef0 <= dVar2) {\n            return *0x401ef8 * *0x401ef8 + param_1;\n        }\n        return *0x401ef8 * *0x401ef8 + param_1;\n    }\n    return param_1;\n}\n",
        "token_count": 1204
    },
    "004eed1d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004eed1d(uint arg_8h)\n\n{\n    fcn.004eebdd(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 40
    },
    "004ef45b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004ef46f)\n// WARNING: Removing unreachable block (ram,0x004ef475)\n// WARNING: Removing unreachable block (ram,0x004ef477)\n\nvoid fcn.004ef45b(void)\n\n{\n    return;\n}\n",
        "token_count": 62
    },
    "004ea17e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004ea17e(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.004e96d5(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "004f4f53": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.004f4f53(void)\n\n{\n    *0x508c44 = (*_sym.imp.KERNEL32.dll_CreateFileW)(0x405248, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "004ec00a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004ec00a(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004ed4a0(0x4f6658, 0xc);\n    fcn.004efefb(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x720990;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x72098c;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x004ec04e;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.004e96d5(arg_8h_00);\ncode_r0x004ec04e:\n        fcn.004e96d5(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.004ec071();\n    fcn.004ed4e5();\n    return;\n}\n",
        "token_count": 400
    }
}