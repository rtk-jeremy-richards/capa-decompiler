{
    "00401000": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040108c)\n// WARNING: Removing unreachable block (ram,0x00401037)\n// WARNING: Removing unreachable block (ram,0x00401067)\n// WARNING: Removing unreachable block (ram,0x00401251)\n// WARNING: Removing unreachable block (ram,0x0040101e)\n// WARNING: Removing unreachable block (ram,0x00401121)\n// WARNING: Removing unreachable block (ram,0x0040113b)\n// WARNING: Removing unreachable block (ram,0x004010d5)\n\nuint32_t fcn.00401000(void)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint var_24h;\n    uint var_20h;\n    uint lpExistingFileName;\n    uint lpApplicationName;\n    int32_t var_14h;\n    uint var_10h;\n    uchar *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    // [00] -r-x section size 110592 named .text\n    iVar3 = 0x41c0b0;\n    var_ch = *0x439010;\n    var_14h = 0x6508;\n    while( true ) {\n        if (var_14h == 0) {\n            *0x439010 = var_ch;\n            return 0x64e4ff16;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n        if (uVar2 != 0) {\n            (*_sym.imp.KERNEL32.dll_GetBinaryTypeA)(0x52000000, 0x8029497);\n        }\n        *var_ch = *(iVar3 + uVar2);\n        var_ch = var_ch + (1 - uVar2);\n        uVar1 = uVar2;\n        iVar3 = iVar3 + (uVar1 | 0x52000000) + 0xae000001;\n        if ('\\0' < uVar1) break;\n        var_14h = var_14h - ((uVar1 & uVar2 + 0xc600) + 1);\n        if (uVar1 != 0) {\n            return (uVar2 & 0xff) - (uVar2 + 0xc600);\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 529
    },
    "00401275": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.00401275(uint32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint var_4h;\n    \n    uVar3 = arg_10h & 0xff;\n    uVar2 = uVar3 * uVar3;\n    if ((uVar2 != 0xd5e3) && (uVar1 = arg_10h + arg_ch * uVar2,  uVar3 = uVar2,  0xd5e3 < uVar2)) {\n        uVar1 = uVar1 / uVar1;\n        if ((arg_ch & 0xff) == 0xe9) {\n            uVar3 = uVar1 & 0xff;\n        }\n        else {\n            uVar2 = uVar2 >> 3 & 0xff;\n            uVar3 = uVar2;\n            if (uVar1 < '\\x02') {\n                uVar3 = arg_10h - (uVar1 & 0xff) & 0xffff;\n                if (uVar3 < 0xea) {\n                    if ((arg_8h | 0x4689022c) < 0x4689022d) {\n                        if ((arg_8h | 0x4689022c) == 0x4689022c) {\n                            uVar3 = fcn.00401428(uVar2, uVar2, uVar1 & 0xff, uVar3);\n                            uVar3 = uVar3 & 0xffff;\n                        }\n                        if (arg_ch < -0x6ea94415) {\n                            if (-0x6ea94417 < arg_ch) {\n                                var_4h._0_1_ = arg_ch;\n                                if (uVar2 == 0xbc) {\n                                    var_4h._0_1_ = fcn.004036c4(0xbc, arg_ch, uVar3);\n                                }\n                                if (var_4h < '\\x01') {\n                                    uVar2 = arg_ch & 0xff | var_4h;\n                                    if (uVar3 == 0x554b) {\n                                        uVar3 = var_4h;\n                                    }\n                                    else {\n                                        uVar3 = uVar2;\n                                        if (uVar2 == 0xe9) {\n                                            uVar3 = var_4h;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            uVar3 = uVar1 & 0xff;\n                        }\n                    }\n                    else {\n                        uVar3 = uVar1 & 0xff;\n                    }\n                }\n                else {\n                    uVar3 = uVar1 & 0xff;\n                }\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 635
    },
    "00401428": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040148a)\n// WARNING: Removing unreachable block (ram,0x00401a1d)\n// WARNING: Removing unreachable block (ram,0x004019e6)\n// WARNING: Removing unreachable block (ram,0x004018a4)\n// WARNING: Removing unreachable block (ram,0x004017ee)\n// WARNING: Removing unreachable block (ram,0x004017c1)\n// WARNING: Removing unreachable block (ram,0x00401822)\n// WARNING: Removing unreachable block (ram,0x0040192c)\n// WARNING: Removing unreachable block (ram,0x004019ff)\n// WARNING: Removing unreachable block (ram,0x00401b18)\n// WARNING: Removing unreachable block (ram,0x004017a7)\n// WARNING: Removing unreachable block (ram,0x00401c95)\n\nuint32_t __cdecl fcn.00401428(uint32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    uint32_t uVar6;\n    uint8_t uVar7;\n    uint16_t uVar8;\n    int32_t iVar9;\n    bool bVar10;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint dwFlags;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint lpszDeviceName;\n    uint var_5ch;\n    uint lpDevMode;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint nInBufferSize;\n    uint nOutBufferSize;\n    uint var_2ch;\n    uint lpNewFileName;\n    uint lpExistingFileName;\n    uint hWnd;\n    uint nReserved;\n    uint uFlags;\n    int32_t var_14h;\n    uint var_10h;\n    uint8_t *var_ch;\n    uint var_8h;\n    uint8_t *var_4h;\n    \n    var_4h = *0x43900c;\n    var_ch = *0x43900c;\n    var_14h = 0x1f928;\n    while( true ) {\n        while( true ) {\n            if (var_14h == 0) {\n                *0x439014 = var_ch - *0x43900c >> 3;\n                uVar4 = arg_8h * -0x34804fe3 & 0xffff;\n                if (uVar4 != 0x554b) {\n                    return uVar4;\n                }\n                return 0xe7;\n            }\n            uVar7 = arg_10h;\n            uVar3 = uVar7 >> 2;\n            uVar8 = uVar7 * uVar7;\n            if ('\\x01' < uVar7) {\n                return uVar8;\n            }\n            uVar5 = (uVar7 >> 2) * arg_14h;\n            uVar1 = uVar5 >> 2;\n            uVar8 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(uVar5 & uVar1, (uVar5 | uVar8) - 1, (uVar5 | uVar8) - 1);\n            if (uVar8 != 0) {\n                (*_sym.imp.USER32.dll_TrackPopupMenu)\n                          (uVar1, uVar1 * uVar8, uVar8 ^ 0xe136babc, uVar3 * 0x9d00 + uVar3, uVar3, \n                           uVar8 * 0xa000000 * uVar1, (uVar5 - uVar1) + 0xd6);\n            }\n            if (var_14h < uVar5 + uVar1 + 8) break;\n            iVar9 = *var_4h * 0x1000000 + *var_4h * 0x10000 + var_4h[-arg_ch - 0xff44] * 0x100 + *var_4h;\n            bVar10 = false;\n            if (*(var_4h + -((-arg_ch | 0xffed0000) + 0x1200bc)) == iVar9) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                                  (0, (uVar7 | arg_10h & 0xff) - 1, (arg_10h & 0xff) * uVar7 + -1);\n                if (uVar3 != 0) {\n                    (*_sym.imp.USER32.dll_EnumDisplaySettingsW)(uVar3 + 0x9a, uVar3 + 0x32, arg_10h & 0xff);\n                }\n                bVar10 = *(var_4h + -((-arg_ch | 0xffed0000) + 0x1200bc) + 4) == iVar9;\n                if ('\\x01' < uVar7) {\n                    return arg_10h & 0xff;\n                }\n            }\n            if (bVar10) {\n                cVar2 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n                if (cVar2 != '\\0') {\n                    (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n                }\n                var_14h = var_14h + -8;\n                var_4h = var_4h + 8;\n            }\n            else {\n                uVar4 = arg_10h & arg_8h ^ 0x176b;\n                if (uVar4 == 0x176a) {\n                    return 0x176a;\n                }\n                uVar6 = arg_ch * -0x6ad60000;\n                *var_ch = var_4h[(uVar4 ^ uVar6) + 0x7527e895];\n                var_ch = var_ch + uVar4 * uVar6 + -0x7047ffff;\n                if (uVar6 < -0x75280000) {\n                    return uVar4 >> 3;\n                }\n                var_4h = var_4h + uVar6 * uVar4 + -0x7047ffff;\n                if (uVar4 == 0x176a) {\n                    return arg_14h + uVar6;\n                }\n                var_14h = var_14h - ((uVar4 ^ uVar6) + 0x7527e896);\n            }\n        }\n        uVar7 = (arg_ch & uVar7 + arg_ch * -0x6b) - uVar7;\n        if ('+' < uVar7) {\n            return uVar7;\n        }\n        uVar3 = (arg_14h ^ uVar7) + 0xbf86;\n        if (uVar3 == 0xc047) {\n            return uVar7;\n        }\n        var_ch[(uVar3 / arg_ch) * uVar3 + -0x3c168] = *var_4h;\n        if (arg_ch == 0xbb) {\n            return arg_8h & 0xff;\n        }\n        var_ch = var_ch + (uVar3 - arg_ch) + -0xbf8b;\n        uVar6 = (arg_ch ^ arg_14h) & uVar3;\n        uVar4 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                          ((arg_8h & 0xff) * uVar6 + -0x2f00, (arg_8h & 0xff) * arg_ch + -0x8a10, \n                           (arg_8h & 0xff & uVar3) - 8);\n        if (uVar4 != 0) {\n            (*_sym.imp.USER32.dll_FlashWindowEx)(uVar4 - uVar6);\n        }\n        var_4h = var_4h + 1;\n        uVar7 = uVar6 * arg_14h;\n        if (uVar4 == 0xffffffff) break;\n        uVar6 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, uVar6 + uVar4 + -0x40, (uVar7 | uVar3) - 0xc048);\n        if (uVar6 != 0) {\n            (*_sym.imp.KERNEL32.dll_TransactNamedPipe)\n                      ((uVar3 | uVar4) & 0x31, uVar7 * -0x69bcd78e, uVar6 * uVar7, uVar3 ^ uVar4 ^ 0x8170, uVar7, \n                       uVar7 + (uVar6 | 0xcae), uVar6 * 100 - uVar4);\n        }\n        var_14h = var_14h + -1;\n        if (uVar7 < '@') {\n            return uVar6;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 2064
    },
    "null": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401fdf)\n// WARNING: Removing unreachable block (ram,0x00401f73)\n// WARNING: Removing unreachable block (ram,0x00401f1a)\n// WARNING: Removing unreachable block (ram,0x00401ef1)\n// WARNING: Removing unreachable block (ram,0x00401ed5)\n// WARNING: Removing unreachable block (ram,0x00401f04)\n// WARNING: Removing unreachable block (ram,0x00401f5a)\n// WARNING: Removing unreachable block (ram,0x00401eb9)\n// WARNING: Removing unreachable block (ram,0x00401f3f)\n\nuint32_t main(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint var_ch;\n    uint lpExistingFileName;\n    uint lpNewFileName;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(0xfad4595d);\n    }\n    uVar2 = fcn.00402084(0x5800, 0xfad4595d);\n    uVar4 = uVar2 ^ 0xc8000000;\n    if (uVar2 < 1) {\n        uVar5 = uVar4 * 2 & 0xff;\n        uVar3 = fcn.0040314d(uVar4);\n        uVar4 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                          ((uVar5 - (uVar3 & 0xffff)) + 0x2882, uVar4 + (uVar3 & 0xffff) + 0x37ffd77e, \n                           (uVar2 - 1 | uVar5) + 1);\n        uVar4 = uVar4 & 0xffff;\n        if (uVar4 != 0) {\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(uVar4 - 0xa3);\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 489
    },
    "00402084": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004020b1)\n// WARNING: Removing unreachable block (ram,0x004023fe)\n// WARNING: Removing unreachable block (ram,0x004023df)\n// WARNING: Removing unreachable block (ram,0x0040270a)\n// WARNING: Removing unreachable block (ram,0x004021a8)\n// WARNING: Removing unreachable block (ram,0x0040228b)\n// WARNING: Removing unreachable block (ram,0x004025e5)\n// WARNING: Removing unreachable block (ram,0x00402268)\n\nuint32_t __cdecl fcn.00402084(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint16_t uVar2;\n    uint16_t uVar3;\n    uint8_t uVar4;\n    uint8_t uVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint lpExistingFileName;\n    uint var_44h;\n    uint32_t var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar12 = arg_ch * 0x18 & 0xff;\n    uVar6 = (*_sym.imp.KERNEL32.dll_MoveFileExA)((uVar12 ^ 0x18) - 0xa0, 0, 0);\n    if (uVar6 != 0) {\n        (*_sym.imp.USER32.dll_CreateWindowExA)\n                  (uVar6, 0, uVar12 * (uVar12 | 0x79d5), uVar12 ^ uVar6, 0, uVar12, 0, uVar6 & 0xde46, 0, uVar6, uVar12\n                   , uVar6 | 0x80000000);\n    }\n    uVar6 = (*_sym.imp.KERNEL32.dll_MoveFileExA)((uVar12 | uVar6) - 0xb8, uVar12 - 0xb8, 0);\n    if (uVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetBinaryTypeA)(uVar12, uVar12 * 0x181eb249);\n    }\n    uVar8 = *(0x4a781ef2 - uVar12 ^ 0x4a39de2e) - ((uVar6 ^ uVar12) - 0xb8);\n    if (arg_8h < 0x5801) {\n        for (var_14h = (uVar8 - (uVar8 & 0xffff)) + (uVar6 & 0xffff);\n            *(var_14h + ((uVar12 | uVar6 & 0xffff) - 0xb8) * 2) != 0x5a4d; var_14h = var_14h + -0x10000) {\n            uVar4 = arg_8h - 1;\n            if (uVar4 != 0xff) {\n                return uVar4;\n            }\n        }\n        iVar9 = var_14h - ((uVar6 & 0xffff | uVar12) - 0xb8);\n        uVar8 = arg_ch & uVar12 | uVar6 & 0xffff;\n        if (uVar8 < 0x18) {\n            uVar12 = uVar6 & 0xffff;\n        }\n        else {\n            iVar9 = (var_14h +\n                    *(((iVar9 + *(iVar9 + (uVar12 - 0xa9) * 4)) - ((uVar6 & 0xffff | uVar12) - 0xb8)) + (uVar8 + 6) * 4)\n                    ) - (uVar8 * uVar12 + -0x1140);\n            uVar10 = uVar8 | 0xd79e;\n            var_ch = *(iVar9 + ((uVar6 & 0xffff & uVar10) + 6) * 4) - (uVar8 + uVar12 + -0xd0);\n            if (uVar12 % uVar10 != 0xb7) {\n                var_2ch = var_14h + *(iVar9 + (uVar10 - 0xd796) * 4);\n                if ((arg_ch * (arg_8h & arg_ch) & 0xffff) == 0xf800) {\n                    for (; var_ch != uVar12 * uVar10 - 0x9af990;\n                        var_ch = var_ch - ((uVar2 & 0x2951 | uVar3) * 0xf9 + -0x56eb74)) {\n                        iVar1 = -(arg_ch * 0x7c + -0x3b1f);\n                        uVar8 = iVar1 + 0xf9;\n                        if (uVar8 < -0x7edb0cf4) {\n                            return 0x7c;\n                        }\n                        var_40h = uVar8 * 0x3e + 0xb90d2318;\n                        for (var_3ch = *(var_2ch + ((uVar8 | 0xf9) + 0x7edb0c03) * 4) + var_14h + iVar1 + 0x7edb0ded;\n                            uVar4 = arg_ch,  *(var_3ch + uVar8 * 0x3e + -0x46f2dce8) != uVar8 * 0x3e + 0xb90d2318;\n                            var_3ch = var_3ch + uVar5 + (uVar5 >> 2) + 1) {\n                            if (uVar4 < ']') {\n                                return arg_ch & 0xff;\n                            }\n                            uVar5 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, (arg_ch & 0xff) - 0x5d);\n                            if (uVar5 != 0) {\n                                (*_sym.imp.USER32.dll_GetCursorPos)(uVar4 | uVar5);\n                            }\n                            var_40h = (var_40h << 7 | var_40h >> 0x19) + (*(var_3ch + ((uVar5 | uVar4) - 0x5d)) ^ 0x75);\n                        }\n                        uVar3 = arg_ch;\n                        uVar2 = arg_8h;\n                        if (var_40h == 0xc42b04e4) {\n                            if (uVar4 != 0x5d) {\n                                return arg_ch & 0xff;\n                            }\n                            uVar11 = (uVar3 * uVar3) % arg_ch;\n                            var_ch = *(*(iVar9 + ((uVar2 & uVar3) * (arg_ch & 0xff) + -0x1ff7f7) * 4) +\n                                       (arg_ch - (uVar2 & uVar3)) + var_14h +\n                                       (arg_ch & 0xff) + uVar3 * uVar3 + 0x52b327d +\n                                      (((*(iVar9 + 0x18) - var_ch) + ((uVar4 * uVar4 + 0x7f & arg_ch & 0xff) - 0x48)) -\n                                      ((arg_ch | uVar11) + 0x52b2423)) * 2);\n                            uVar11 = uVar11 * uVar2;\n                            var_2ch = (var_14h + *(iVar9 + ((arg_ch ^ uVar11) + 0x52bbeaa) * 4)) -\n                                      ((uVar11 | arg_ch & 0xff) - 0x185d);\n                            uVar11 = (uVar3 ^ 0x74) & uVar3;\n                            uVar7 = (*(var_14h + *(var_2ch + (var_ch - ((uVar11 ^ arg_ch & 0xff) - 0x5954)) * 4)))\n                                              ((uVar11 | arg_ch & 0xff) - 0x595d, (arg_ch & 0xff) * arg_ch + -0x1f227da1\n                                               , arg_ch + 0x52bb6a3, 0x40);\n                            if (arg_ch == 0xfad4595c) {\n                                return 0xfad4595c;\n                            }\n                            *((arg_ch & 0xff) * uVar11 + 0xc149dc38 ^ 0xc129a471) = uVar7;\n                        }\n                        var_2ch = var_2ch + uVar8 + arg_ch + -0x7bf94c65;\n                    }\n                    uVar12 = uVar6 & 0xffff;\n                }\n                else {\n                    uVar12 = uVar6 & 0xffff;\n                }\n            }\n        }\n    }\n    else {\n        uVar12 = uVar6 & 0xffff;\n    }\n    return uVar12;\n}\n",
        "token_count": 2174
    },
    "004027f8": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004027f8(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint16_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint16_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint32_t *var_8h;\n    uint var_4h;\n    \n    uVar7 = (arg_8h & 0xf4ee) + arg_8h & 0xffff;\n    uVar3 = arg_8h;\n    if (-1 < uVar7) {\n        uVar6 = uVar7 + (uVar7 | 0x9dba);\n        uVar5 = uVar6 * 0x100;\n        uVar3 = uVar7;\n        if ((uVar7 == 0) && (var_8h = *(((uVar7 | uVar5) - 0xba00) * 4 + 0x43900c),  uVar3 = uVar6,  uVar6 < -0x45)) {\n            uVar3 = uVar7 >> 3;\n            var_10h = *((((uVar6 & 0xff) - uVar6) + 0xfc3d65a3 ^ 0xfc7f58b7) + (uVar7 + uVar5 + -0xba00) * 4);\n            if (uVar3 == -1) {\n                uVar3 = uVar3 & 0xff;\n            }\n            else {\n                for (; var_10h != (uVar6 & uVar5) - 0x9800; var_10h = var_10h + -1) {\n                    uVar4 = arg_8h;\n                    if (uVar4 >> 3 != 0) {\n                        return uVar4 >> 3;\n                    }\n                    uVar2 = uVar4 >> 5;\n                    uVar1 = uVar2;\n                    if (uVar4 < '\\0') {\n                        return arg_8h & 0xff;\n                    }\n                    *var_8h = *var_8h ^ (arg_8h & 0xff & uVar1) + 0x39a94250;\n                    var_8h[1] = var_8h[uVar1 * 0x10000 + (uVar4 | uVar2) + 1] ^ 0xcb64c9af;\n                    var_8h = var_8h + (-uVar2 | uVar1) + 8;\n                }\n                (**((uVar3 & 0xff) + 0xc16a347d ^ 0xc129a471))();\n                uVar3 = uVar6 >> 3 & 0xff;\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 713
    },
    "004036c4": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00403742)\n\nuint32_t __cdecl fcn.004036c4(uint32_t arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    uint var_4h;\n    \n    uVar2 = (arg_8h & 0xffff) - (arg_8h & 0xffff ^ 0x7e3202e2) & 0xffff;\n    if ((arg_8h < 0xbd) && (bVar1 = 0xfe5d < uVar2,  uVar2 = arg_8h + 1,  bVar1)) {\n        uVar2 = fcn.004027f8(0, 0);\n        uVar2 = arg_10h & uVar2 & 0xff;\n        if ((uVar2 != 3) && (uVar2 = 0,  arg_10h != 0x554c)) {\n            uVar2 = arg_10h & 0xffff;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 252
    },
    "00401cf4": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00401cf4(uint noname_0, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint lpExistingFileName;\n    uint32_t dwFlags;\n    uint hFile;\n    uint cChar;\n    \n    uVar4 = (arg_ch & 0xff) * 2 - 0xe05b & 0xff;\n    uVar2 = arg_ch & uVar4 ^ 0xdcf100;\n    uVar3 = arg_10h & 0xff;\n    if ((uVar3 == '\\0') && (uVar4 < 0xa4)) {\n        if (uVar4 == 0xa3) {\n            uVar2 = fcn.00402c1c(0xa3);\n        }\n        uVar5 = arg_10h >> 2 & 0xff;\n        uVar4 = uVar3;\n        if ((-1 < (uVar2 & 0xffff)) && (uVar2 = arg_10h | 0x9156bbea,  uVar3 != 0xff)) {\n            cVar1 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(uVar5 - uVar3, uVar5 + uVar3, uVar2 & uVar3);\n            if (cVar1 != '\\0') {\n                (*_sym.imp.KERNEL32.dll_TransmitCommChar)(cVar1, (arg_10h & 0xffff) - 0x5e9b);\n            }\n            dwFlags = uVar2;\n            if (uVar2 == 0x9156bbea) {\n                dwFlags = fcn.00401275(arg_10h & 0xffff, 0x9156bbea, 0xea);\n            }\n            uVar4 = (uVar2 & 0xff) + 480000 + dwFlags;\n            uVar4 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                              ((dwFlags ^ uVar4) - 0x7543e, (arg_10h & 0xffff ^ uVar4) - 0x754d4, uVar5 * (uVar2 & 0xff)\n                              );\n            uVar4 = uVar4 & 0xff;\n            if (uVar4 != '\\0') {\n                (*_sym.imp.KERNEL32.dll_ExitThread)((uVar4 | 0x32) & arg_10h & 0xffff);\n            }\n            if (uVar2 < -0x15) {\n                uVar4 = dwFlags + (arg_10h & 0xffff) * -0x9a & 0xffff;\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 636
    },
    "00402c1c": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00402ccb)\n// WARNING: Removing unreachable block (ram,0x00402d4f)\n\nuint __cdecl fcn.00402c1c(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint var_28h;\n    uint var_24h;\n    uint lpExistingFileName;\n    uint dwFlags;\n    uint var_18h;\n    int32_t var_14h;\n    uchar *var_10h;\n    uint lpString;\n    uint var_8h;\n    uchar *var_4h;\n    \n    uVar5 = arg_8h & 0xff;\n    uVar2 = (arg_8h & 0xffff) >> 2;\n    var_4h = (uVar5 - (arg_8h & 0xffff)) + 0x9716f809 ^ 0x97555bc9;\n    uVar4 = uVar2 + 0x62100000 & 0xffff;\n    uVar3 = 0xed;\n    if (0x27 < uVar4) {\n        var_10h = *((uVar4 + uVar5 + 0xcaf011c7 ^ 0xcab38282) + (uVar4 * uVar5 + -0x1978) * 4);\n        uVar3 = 0;\n        for (var_14h = uVar2 + 0x1919; var_14h != (uVar4 ^ 0xed) - 0xc5; var_14h = var_14h + -1) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n            if (iVar1 != 0) {\n                (*_sym.imp.USER32.dll_MessageBeep)(iVar1);\n            }\n            *var_10h = *var_4h;\n            var_10h = var_10h + -(iVar1 + -1);\n            var_4h = var_4h + 1;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n        uVar2 = uVar2 & 0xff;\n        if (uVar2 != '\\0') {\n            (*_sym.imp.USER32.dll_GetWindowTextW)(0xd41fed, uVar2 | 0xed, 0);\n        }\n        *(uVar2 + 0xcaf01292 ^ 0xcab38282) = var_10h;\n    }\n    return uVar3;\n}\n",
        "token_count": 596
    },
    "0040314d": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00403164)\n\nuint32_t fcn.0040314d(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t unaff_EBX;\n    \n    uVar1 = fcn.0040323f(0x1f0000, 0x1f0000, 0x7c000, 0x1f00);\n    uVar2 = 0x1f00 / uVar1;\n    if (uVar2 == 0xffffffff) {\n        uVar2 = 0x1f00;\n    }\n    else {\n        uVar2 = uVar2 >> 1;\n        if (uVar1 == 0xc000) {\n            if (unaff_EBX == 0xc8000000) {\n                uVar1 = fcn.00402a49(0xc8000000, 0x1f00);\n                uVar2 = unaff_EBX % uVar1 & 0xffff;\n                iVar3 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                                  (uVar2 + uVar1 + -0x12875, unaff_EBX + uVar1 + 0x37ff000d, (uVar2 & uVar1) - 0x2882);\n                if (iVar3 != 0) {\n                    (*_sym.imp.USER32.dll_CheckMenuItem)(0, iVar3, iVar3);\n                }\n            }\n            else {\n                uVar2 = 0x1f00;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 361
    },
    "00403521": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00403694)\n// WARNING: Removing unreachable block (ram,0x0040367f)\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.00403521(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t arg_ch_00;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar4 = (arg_ch ^ 0xbc) + 0xbc & 0xff;\n    if (0xfe < uVar4) {\n        uVar4 = (arg_8h ^ 0x8f9500) * uVar4;\n        uVar1 = uVar4 * 0xca;\n        if (uVar1 != 0xc8c9) {\n            if (uVar4 < -0x71246bfe) {\n                var_8h._0_2_ = uVar1 + (uVar4 | 100);\n                uVar2 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                                  (uVar4 + uVar1 + 0x7123a335, 0, (uVar1 - (arg_8h & 0xff)) + 0x35);\n                uVar2 = uVar2 & 0xff;\n                if (uVar2 != '\\0') {\n                    (*_sym.imp.KERNEL32.dll_GetConsoleCursorInfo)(uVar2, uVar1 - 0xa2);\n                }\n                if (var_8h == 0x5d2f) {\n                    var_8h._0_2_ = fcn.00402e5c();\n                }\n                arg_ch_00 = (uVar4 | arg_ch) & 0xff;\n                uVar4 = uVar2;\n                if (((var_8h < 0x4101) &&\n                    (iVar3 = fcn.00401cf4(0, arg_ch_00, uVar2),  uVar4 = arg_ch_00,  arg_ch_00 == 0xff)) &&\n                   (uVar4 = iVar3 + 1,  arg_ch < -1)) {\n                    uVar4 = arg_ch_00;\n                }\n            }\n            else {\n                uVar4 = arg_8h & 0xff & uVar1;\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 555
    },
    "00402a49": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00402a9e)\n// WARNING: Removing unreachable block (ram,0x00402a7d)\n// WARNING: Removing unreachable block (ram,0x00402a6b)\n\nuint32_t __cdecl fcn.00402a49(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_4h;\n    \n    uVar4 = (arg_8h & 0xffff) + 1 & 0xffff;\n    fcn.00401000();\n    uVar3 = (arg_ch ^ 0xc3) & 0xffff;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MoveFileExA)((uVar4 ^ 0xcde4) - 0xcde5, uVar3 - 0x1fc3, (uVar4 ^ uVar3) - 0x1fc2);\n    uVar3 = uVar3 & 0xffff;\n    if (uVar3 != 0) {\n        (*_sym.imp.KERNEL32.dll_FindFirstFileExA)(uVar3, uVar4, uVar3, uVar3, uVar4 + (uVar4 | 0xcde4), 0xcde4);\n    }\n    if (uVar3 != 0xffff) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, (uVar3 - uVar4) + 1, uVar4 - 1);\n        uVar1 = uVar1 & 0xffff;\n        if (uVar1 != 0) {\n            (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExA)(0, uVar4, 0, uVar4 * 0x8bdd);\n        }\n        uVar3 = fcn.00403521(0xffff, 0xffff);\n        uVar2 = (uVar3 & 0xffff) / 0x11;\n        uVar3 = uVar4;\n        if ((uVar2 < 0xe) && (uVar3 = -uVar2 & 0xffff,  uVar4 != 0)) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                              (uVar1 + uVar3 + -0xfff3, (uVar4 | uVar3) - 0xfff3, uVar3 + uVar4 + -0xfff4);\n            if ((uVar4 & 0xffff) != 0) {\n                (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(uVar1 & uVar3, (uVar4 & 0xffff) - uVar1);\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 633
    },
    "00402e5c": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00402f55)\n// WARNING: Removing unreachable block (ram,0x00402ed6)\n// WARNING: Removing unreachable block (ram,0x00402e9b)\n// WARNING: Removing unreachable block (ram,0x00402f08)\n// WARNING: Removing unreachable block (ram,0x004030d4)\n// WARNING: Removing unreachable block (ram,0x00402e87)\n// WARNING: Removing unreachable block (ram,0x00403015)\n// WARNING: Removing unreachable block (ram,0x00402fd3)\n// WARNING: Removing unreachable block (ram,0x004030f1)\n// WARNING: Removing unreachable block (ram,0x00402fb2)\n// WARNING: Removing unreachable block (ram,0x00402fee)\n// WARNING: Removing unreachable block (ram,0x00403045)\n// WARNING: Removing unreachable block (ram,0x00402f8b)\n// WARNING: Removing unreachable block (ram,0x0040309f)\n\nuint fcn.00402e5c(void)\n\n{\n    uint16_t uVar1;\n    uchar *puVar2;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uchar *var_ch;\n    uint var_8h;\n    uint lpExistingFileName;\n    \n    puVar2 = 0x425166;\n    var_ch = *0x439010;\n    for (var_10h = 1; var_10h != 0; var_10h = var_10h + -1) {\n        *var_ch = *puVar2;\n        var_ch = var_ch + 1;\n        puVar2 = puVar2 + 1;\n    }\n    *0x439010 = var_ch;\n    uVar1 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, 0, 0);\n    if (uVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_FindFirstFileA)(uVar1 ^ 0x4100, 0x4100);\n    }\n    return 0x4100;\n}\n",
        "token_count": 505
    },
    "0040323f": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x004034b8)\n// WARNING: Removing unreachable block (ram,0x0040328a)\n// WARNING: Removing unreachable block (ram,0x0040333f)\n// WARNING: Removing unreachable block (ram,0x00403461)\n// WARNING: Removing unreachable block (ram,0x00403327)\n\nuint32_t __cdecl fcn.0040323f(uint noname_0, uint32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    uint16_t uVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uchar *puVar5;\n    uint8_t uVar6;\n    uint16_t uVar7;\n    uint32_t uVar8;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint lpFindFileData;\n    uint lpExistingFileName;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar5 = 0x403999;\n    uVar8 = (arg_10h ^ arg_ch & 0xffff) & 0xff;\n    if (uVar8 != 0xff) {\n        var_ch = *(((arg_ch & 0xffff) + 0xc16a347d ^ 0xc129a471) + (arg_ch & 0xf700) * 4);\n        uVar1 = arg_ch ^ arg_10h;\n        var_14h = (arg_ch & 0xffff) + uVar1 + 0xbade;\n        while (var_14h != arg_10h - 0x7c000) {\n            uVar6 = arg_ch ^ arg_14h;\n            iVar3 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                              (arg_ch + uVar6 + -0x1f0000, (arg_ch | uVar6) - 0x1f0000, uVar6 & arg_ch);\n            if (iVar3 != 0) {\n                (*_sym.imp.KERNEL32.dll_SetSystemTime)(iVar3 - uVar6);\n            }\n            *(var_ch + uVar6 + iVar3) = *puVar5;\n            uVar8 = iVar3 << 8;\n            if (uVar6 < '\\0') {\n                return uVar8 & 0xffff;\n            }\n            uVar4 = (*_sym.imp.KERNEL32.dll_MoveFileExA)(0, uVar6 - iVar3, (uVar8 & 0xffff) * iVar3);\n            if (uVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_FindFirstFileA)(uVar6, uVar6 | uVar8 & 0xffff);\n            }\n            var_ch = var_ch + 1;\n            puVar5 = puVar5 + (uVar8 & 0xffff) * arg_10h + 1;\n            if (uVar4 != 0) {\n                return uVar4 & 0xffff;\n            }\n            var_14h = var_14h - ((uVar6 | uVar4) + 1);\n            iVar2 = (*_sym.imp.KERNEL32.dll_MoveFileExA)\n                              (uVar4 - uVar6, uVar6 ^ uVar4 & 0xffff, uVar6 * (uVar4 & 0xffff));\n            if (iVar2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n            }\n        }\n        uVar7 = arg_14h & 0xf44 | arg_10h;\n        if (uVar7 < -0x4000) {\n            uVar8 = uVar1;\n        }\n        else {\n            *(uVar1 + arg_14h + 0xcaef5292 ^ 0xcab38282) = var_ch;\n            uVar8 = arg_10h * 3;\n            if (uVar1 < -0x3fff) {\n                uVar8 = uVar7;\n            }\n        }\n    }\n    return uVar8;\n}\n",
        "token_count": 939
    }
}