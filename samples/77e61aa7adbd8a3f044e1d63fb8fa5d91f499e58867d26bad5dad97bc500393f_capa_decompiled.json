{
    "79bf1000": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.79bf1000(void)\n\n{\n    char *in_EAX;\n    char *pcVar1;\n    \n    // [00] -rwx section size 12288 named .text\n    for (pcVar1 = in_EAX; *pcVar1 != '\\0'; pcVar1 = pcVar1 + 1) {\n    }\n    return pcVar1 - in_EAX;\n}\n",
        "token_count": 90
    },
    "79bf14ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl fcn.79bf14ce(uint32_t arg_8h, uint lpString2)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar8 = arg_8h;\n    puVar3 = *(arg_8h + 0x3c) + 0x78 + arg_8h;\n    uVar4 = *puVar3;\n    if ((uVar4 != 0) && (0x27 < puVar3[1])) {\n        iVar1 = uVar4 + arg_8h;\n        if ((*(iVar1 + 0x18) != 0) &&\n           ((uVar4 <= *(iVar1 + 0x20) && (*(iVar1 + 0x20) + *(iVar1 + 0x18) * 4 <= puVar3[1] + uVar4)))) {\n            iVar5 = *(iVar1 + 0x20);\n            arg_8h = 0;\n            iVar6 = *(iVar1 + 0x1c);\n            iVar7 = *(iVar1 + 0x24);\n            if (*(iVar1 + 0x18) != 0) {\n                do {\n                    puVar2 = iVar5 + iVar8 + arg_8h * 4;\n                    if (*puVar3 < *puVar2 || *puVar3 == *puVar2) {\n                        uVar4 = *puVar2;\n                        iVar9 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString2);\n                        if ((iVar9 + 1 + uVar4 <= *puVar3 + puVar3[1]) &&\n                           (iVar9 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(uVar4 + iVar8, lpString2),  iVar9 == 0)) {\n                            if (*(iVar1 + 0x14) < arg_8h || *(iVar1 + 0x14) == arg_8h) {\n                                return 0;\n                            }\n                            if (*(iVar1 + 0x1c) < *puVar3) {\n                                return 0;\n                            }\n                            if (puVar3[1] + *puVar3 < *(iVar1 + 0x1c) + 4 + arg_8h * 4) {\n                                return 0;\n                            }\n                            return *(iVar6 + iVar8 + *(iVar7 + iVar8 + arg_8h * 2) * 4);\n                        }\n                    }\n                    arg_8h = arg_8h + 1;\n                } while (arg_8h < *(iVar1 + 0x18));\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 659
    },
    "79bf15cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint __cdecl fcn.79bf15cc(uint32_t arg_8h, uint *arg_ch, uint arg_10h, uint *arg_14h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h < 2) {\n        var_8h = 0;\n        var_4h = 0;\n        var_ch = arg_ch;\n        arg_ch = &var_ch;\n    }\n    *0x79bf15c4 = fcn.79bf209d(arg_ch, 0, arg_10h, 1);\n    if ((*0x79bf15c4 == 0) || (iVar2 = fcn.79bf14ce(*0x79bf15c4, 0x79bf163e),  iVar2 == 0)) {\n        uVar1 = 0;\n    }\n    else {\n        *arg_14h = 0x79bf15b1;\n        uVar1 = (*(iVar2 + *0x79bf15c4))(0x17, *arg_ch, 0x79bf15c8);\n    }\n    return uVar1;\n}\n",
        "token_count": 274
    },
    "79bf250e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.79bf250e(uint32_t *param_1, char *param_2)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    char *pcVar8;\n    char *pcVar9;\n    bool bVar10;\n    char cStack16;\n    int32_t iStack12;\n    int32_t iStack8;\n    \n    uVar5 = 0x80000000;\n    iStack8 = 8;\n    uVar6 = 1;\n    pcVar9 = param_2;\ncode_r0x79bf2530:\n    do {\n        while( true ) {\n            bVar10 = CARRY4(uVar5, uVar5);\n            uVar5 = uVar5 * 2;\n            if (uVar5 == 0) {\n                uVar5 = *param_1;\n                param_1 = param_1 + 1;\n                bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                uVar5 = uVar5 * 2 + 1;\n            }\n            if (!bVar10) break;\n            cVar1 = '\\0';\n            iVar3 = iStack12;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                cVar1 = cVar1 * '\\x02' + bVar10;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n            uVar2 = cVar1 + cStack16;\ncode_r0x79bf2565:\n            *pcVar9 = uVar2;\n            pcVar9 = pcVar9 + 1;\n        }\n        bVar10 = CARRY4(uVar5, uVar5);\n        uVar5 = uVar5 * 2;\n        if (uVar5 == 0) {\n            uVar5 = *param_1;\n            param_1 = param_1 + 1;\n            bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n            uVar5 = uVar5 * 2 + 1;\n        }\n        if (bVar10) {\n            iVar3 = 1;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                iVar3 = iVar3 * 2 + bVar10;\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n            } while (bVar10);\n            if (iVar3 == 2) {\n                iVar4 = 1;\n                do {\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                    iVar4 = iVar4 * 2 + bVar10;\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                    uVar2 = uVar6;\n                    uVar7 = uVar6;\n                } while (bVar10);\n            }\n            else {\n                uVar2 = 0;\n                iVar4 = iStack8;\n                do {\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                    uVar2 = uVar2 * 2 + bVar10;\n                    iVar4 = iVar4 + -1;\n                } while (iVar4 != 0);\n                uVar2 = uVar2 | iVar3 + -3 << (iStack8 & 0x1f);\n                iVar4 = 1;\n                do {\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                    iVar4 = iVar4 * 2 + bVar10;\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                } while (bVar10);\n                uVar6 = uVar2;\n                if (uVar2 < 0x10000) {\n                    if (uVar2 < 0x37ff) {\n                        if (0x27e < uVar2) goto code_r0x79bf27a9;\n                        uVar7 = uVar2;\n                        if (0x7f < uVar2) goto code_r0x79bf27aa;\n                        iVar4 = iVar4 + 1;\n                        goto code_r0x79bf27a7;\n                    }\n                }\n                else {\ncode_r0x79bf27a7:\n                    iVar4 = iVar4 + 1;\n                }\n                iVar4 = iVar4 + 1;\ncode_r0x79bf27a9:\n                iVar4 = iVar4 + 1;\n                uVar7 = uVar6;\n            }\ncode_r0x79bf27aa:\n            pcVar8 = pcVar9 + -uVar2;\n            for (; uVar6 = uVar7,  iVar4 != 0; iVar4 = iVar4 + -1) {\n                *pcVar9 = *pcVar8;\n                pcVar8 = pcVar8 + 1;\n                pcVar9 = pcVar9 + 1;\n            }\n            goto code_r0x79bf2530;\n        }\n        bVar10 = CARRY4(uVar5, uVar5);\n        uVar5 = uVar5 * 2;\n        if (uVar5 == 0) {\n            uVar5 = *param_1;\n            param_1 = param_1 + 1;\n            bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n            uVar5 = uVar5 * 2 + 1;\n        }\n        if (bVar10) {\n            iVar4 = 4;\n            iVar3 = 0;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                iVar3 = iVar3 * 2 + bVar10;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            uVar2 = iVar3 - 1;\n            if (uVar2 == 0) goto code_r0x79bf2565;\n            if (-1 < uVar2) goto code_r0x79bf27a9;\n            bVar10 = CARRY4(uVar5, uVar5);\n            uVar5 = uVar5 * 2;\n            if (uVar5 == 0) {\n                uVar5 = *param_1;\n                param_1 = param_1 + 1;\n                bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                uVar5 = uVar5 * 2 + 1;\n            }\n            if (bVar10) {\n                do {\n                    iVar3 = 0x100;\n                    do {\n                        iVar4 = 8;\n                        cVar1 = '\\0';\n                        do {\n                            bVar10 = CARRY4(uVar5, uVar5);\n                            uVar5 = uVar5 * 2;\n                            if (uVar5 == 0) {\n                                uVar5 = *param_1;\n                                param_1 = param_1 + 1;\n                                bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                                uVar5 = uVar5 * 2 + 1;\n                            }\n                            cVar1 = cVar1 * '\\x02' + bVar10;\n                            iVar4 = iVar4 + -1;\n                        } while (iVar4 != 0);\n                        *pcVar9 = cVar1;\n                        pcVar9 = pcVar9 + 1;\n                        iVar3 = iVar3 + -1;\n                    } while (iVar3 != 0);\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                } while (bVar10);\n            }\n            else {\n                iVar4 = 1;\n                iVar3 = 0;\n                do {\n                    bVar10 = CARRY4(uVar5, uVar5);\n                    uVar5 = uVar5 * 2;\n                    if (uVar5 == 0) {\n                        uVar5 = *param_1;\n                        param_1 = param_1 + 1;\n                        bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                        uVar5 = uVar5 * 2 + 1;\n                    }\n                    iVar3 = iVar3 * 2 + bVar10;\n                    iVar4 = iVar4 + -1;\n                } while (iVar4 != 0);\n                iStack12 = iVar3 + 7;\n                cStack16 = '\\0';\n                if (iStack12 != 8) {\n                    cStack16 = '\\0';\n                    iVar3 = 8;\n                    do {\n                        bVar10 = CARRY4(uVar5, uVar5);\n                        uVar5 = uVar5 * 2;\n                        if (uVar5 == 0) {\n                            uVar5 = *param_1;\n                            param_1 = param_1 + 1;\n                            bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                            uVar5 = uVar5 * 2 + 1;\n                        }\n                        cStack16 = cStack16 * '\\x02' + bVar10;\n                        iVar3 = iVar3 + -1;\n                    } while (iVar3 != 0);\n                }\n            }\n        }\n        else {\n            iVar3 = 7;\n            uVar2 = 0;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                uVar2 = uVar2 * 2 + bVar10;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n            iVar4 = 2;\n            iVar3 = 0;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                iVar3 = iVar3 * 2 + bVar10;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            iVar4 = iVar3 + 2;\n            uVar7 = uVar2;\n            if (uVar2 != 0) goto code_r0x79bf27aa;\n            if (iVar4 == 2) {\n                return pcVar9 - param_2;\n            }\n            iVar3 = iVar3 + 3;\n            iStack8 = 0;\n            do {\n                bVar10 = CARRY4(uVar5, uVar5);\n                uVar5 = uVar5 * 2;\n                if (uVar5 == 0) {\n                    uVar5 = *param_1;\n                    param_1 = param_1 + 1;\n                    bVar10 = CARRY4(uVar5, uVar5) || 0xfffffffe < uVar5 * 2;\n                    uVar5 = uVar5 * 2 + 1;\n                }\n                iStack8 = iStack8 * 2 + bVar10;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n        }\n    } while( true );\n}\n",
        "token_count": 3552
    },
    "79bf100d": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.79bf100d(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t in_FS_OFFSET;\n    uint var_220h;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint *var_8h;\n    char *var_4h;\n    \n    iVar2 = arg_8h;\n    if (*(*(*(in_FS_OFFSET + 0x18) + 0x30) + 8) != arg_8h) {\n        piVar3 = *(*(arg_8h + 0x3c) + 0x80 + arg_8h) + arg_8h;\n        iVar1 = piVar3[3];\n        while (iVar1 != 0) {\n            var_4h = iVar1 + iVar2;\n            piVar4 = piVar3[4] + iVar2;\n            arg_8h = *piVar3 + iVar2;\n            if (*piVar3 == 0) {\n                arg_8h = piVar4;\n            }\n            var_ch._0_2_ = 0;\n            var_ch._2_2_ = 0x208;\n            var_8h = &var_220h;\n            for (; *var_4h != '\\0'; var_4h = var_4h + 1) {\n                if (var_ch < 0x208) {\n                    *(var_8h + (var_ch >> 1) * 2) = *var_4h;\n                    var_ch._0_2_ = var_ch + 2;\n                }\n            }\n            (*_sym.imp.ntdll.dll_LdrLoadDll)(0, 0, &var_ch, &var_10h);\n            while (*arg_8h != 0) {\n                var_4h = NULL;\n                var_14h = *arg_8h + 2 + iVar2;\n                var_18h._0_2_ = fcn.79bf1000();\n                (*_sym.imp.ntdll.dll_LdrGetProcedureAddress)(var_10h, &var_18h, 0, &var_4h);\n                arg_8h = arg_8h + 1;\n                *piVar4 = var_4h;\n                piVar4 = piVar4 + 1;\n            }\n            piVar4 = piVar3 + 8;\n            piVar3 = piVar3 + 5;\n            iVar1 = *piVar4;\n        }\n    }\n    return;\n}\n",
        "token_count": 601
    },
    "79bf1107": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.79bf1107(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    \n    if (arg_14h - arg_10h != 0) {\n        piVar3 = arg_ch + arg_14h;\n        while (piVar3 < arg_8h + arg_ch + arg_14h) {\n            iVar1 = *piVar3;\n            piVar4 = piVar3 + 2;\n            for (uVar2 = piVar3[1] - 8U >> 1; piVar3 = piVar4,  uVar2 != 0; uVar2 = uVar2 - 1) {\n                piVar3 = (*piVar4 & 0xfff) + iVar1 + arg_14h;\n                if ((*piVar4 & 0xf000) == 0x3000) {\n                    *piVar3 = *piVar3 + (arg_14h - arg_10h);\n                }\n                piVar4 = piVar4 + 2;\n            }\n        }\n    }\n    fcn.79bf100d(arg_14h);\n    fcn.79bf1e9e(arg_14h);\n    return;\n}\n",
        "token_count": 314
    },
    "79bf194b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "link function at runtime on Windows",
            "link many functions at runtime"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.79bf194b(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    bool bVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uchar *puVar8;\n    int16_t iVar9;\n    uint32_t uVar10;\n    uint *puVar11;\n    uint32_t uVar12;\n    uint32_t *puVar13;\n    uint var_2b0h;\n    uint lpLibFileName;\n    code *var_28h;\n    code *var_24h;\n    code *var_20h;\n    code *var_1ch;\n    code *var_18h;\n    code *var_14h;\n    uint var_10h;\n    uint var_ch;\n    code *var_8h;\n    code *hModule;\n    \n    if (((arg_ch < 0x180) || (*(arg_8h + 0x3c) < 0x180)) || (*(arg_8h + 0x50) != 0x61546d56)) {\n        return 0;\n    }\n    uVar12 = *(arg_8h + 0xe4);\n    if (arg_ch < uVar12 * 8 + 0x100) {\n        return 0;\n    }\n    uVar10 = 0;\n    if (uVar12 != 0) {\n        piVar2 = arg_8h + 0x104;\n        do {\n            if (*piVar2 != 0) {\n                if (arg_ch < piVar2[-1]) {\n                    return 0;\n                }\n                if (arg_ch < piVar2[-1] + *piVar2) {\n                    return 0;\n                }\n            }\n            uVar10 = uVar10 + 1;\n            piVar2 = piVar2 + 2;\n        } while (uVar10 < uVar12);\n    }\n    bVar1 = false;\n    uVar10 = 0;\n    puVar13 = arg_8h + 0x100;\n    do {\n        if (uVar12 <= uVar10) break;\n        if ((*puVar13 < 0x101) && (0x17f < puVar13[1] + *puVar13)) {\n            bVar1 = true;\n        }\n        uVar10 = uVar10 + 1;\n        puVar13 = puVar13 + 2;\n    } while (!bVar1);\n    if (!bVar1) {\n        return 0;\n    }\n    pcVar3 = fcn.79bf1731();\n    if (pcVar3 == NULL) {\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    }\n    lpLibFileName._0_2_ = 0;\n    if (hModule != NULL) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(hModule, &lpLibFileName, 0x104);\n        if (iVar4 != 0) {\n            puVar11 = NULL;\n            puVar5 = &lpLibFileName;\n            iVar9 = lpLibFileName;\n            if (lpLibFileName != 0) {\n                do {\n                    if (iVar9 == 0x5c) {\n                        puVar11 = puVar5;\n                    }\n                    puVar5 = puVar5 + 2;\n                    iVar9 = *puVar5;\n                } while (*puVar5 != 0);\n                if (puVar11 != NULL) {\n                    *(puVar11 + 2) = 0;\n                    goto code_r0x79bf1a77;\n                }\n            }\n            lpLibFileName._0_2_ = 0;\n        }\ncode_r0x79bf1a77:\n        if ((lpLibFileName != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpLibFileName),  iVar4 + 0xcU < 0x104))\n        {\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(&lpLibFileName, 0x79bf1d7f);\n            iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(&lpLibFileName, 0, 8);\n            if (iVar4 != 0) goto code_r0x79bf1ad1;\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x79bf1d7f);\n    if (iVar4 == 0) {\n        return 0;\n    }\ncode_r0x79bf1ad1:\n    hModule = (*pcVar3)(iVar4, 0x79bf1d6a);\n    var_1ch = (*pcVar3)(iVar4, 0x79bf1d5b);\n    var_24h = (*pcVar3)(iVar4, 0x79bf1d4b);\n    var_28h = (*pcVar3)(iVar4, 0x79bf1d3d);\n    var_20h = (*pcVar3)(iVar4, 0x79bf1d27);\n    var_18h = (*pcVar3)(iVar4, 0x79bf1d16);\n    var_14h = (*pcVar3)(iVar4, 0x79bf1d06);\n    var_8h = (*pcVar3)(iVar4, 0x79bf1cf2);\n    if (((((hModule != NULL) && (var_1ch != NULL)) && (var_24h != NULL)) && ((var_28h != NULL && (var_20h != NULL)))) &&\n       ((var_18h != NULL && ((var_14h != NULL && (var_8h != NULL)))))) {\n        arg_ch = 0;\n        iVar6 = (*hModule)(&arg_ch, 0, 0, 1, 0xf0000000);\n        if (iVar6 != 0) {\n            hModule = *0x79bf2a14 + 0x14;\n            uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, hModule);\n            puVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar7);\n            if (puVar8 != NULL) {\n                *(puVar8 + 2) = 0;\n                *puVar8 = 6;\n                puVar8[1] = 2;\n                *(puVar8 + 4) = 0x2400;\n                *(puVar8 + 8) = 0x31415352;\n                *(puVar8 + 0xc) = *0x79bf2a14 << 3;\n                *(puVar8 + 0x10) = *0x79bf2a10;\n                fcn.79bf168f();\n                var_10h = 0;\n                iVar6 = (*var_1ch)(arg_ch, puVar8, hModule, 0, 0, &var_10h);\n                if (iVar6 == 0) {\n                    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n                }\n                else {\n                    uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar8);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n                    var_ch = 0;\n                    iVar6 = (*var_24h)(arg_ch, 0x8004, 0, 0, &var_ch);\n                    if (iVar6 != 0) {\n                        fcn.79bf168f();\n                        uVar12 = 0;\n                        hModule = NULL;\n                        if (*(arg_8h + 0xe4) != 0) {\n                            puVar13 = arg_8h + 0x100;\n                            do {\n                                if (puVar13[1] != 0) {\n                                    uVar10 = *puVar13;\n                                    if (uVar12 < uVar10) {\n                                        for (puVar8 = arg_8h + uVar12; puVar8 < (uVar10 - uVar12) + arg_8h;\n                                            puVar8 = puVar8 + 1) {\n                                            *puVar8 = 0;\n                                            uVar10 = *puVar13;\n                                        }\n                                    }\n                                    iVar6 = (*var_28h)(var_ch, *puVar13 + arg_8h, puVar13[1], 0);\n                                    if (iVar6 == 0) goto code_r0x79bf1cea;\n                                    uVar12 = *puVar13 + puVar13[1];\n                                }\n                                hModule = hModule + 1;\n                                puVar13 = puVar13 + 2;\n                            } while (hModule < *(arg_8h + 0xe4));\n                        }\n                        iVar6 = (*var_20h)(var_ch, &var_2b0h, 0x80, var_10h, 0, 0);\n                        if (iVar6 != 0) {\n                            (*var_18h)();\n                            (*var_14h)(var_10h);\n                            (*var_8h)(arg_ch, 0);\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar4);\n                            return 1;\n                        }\ncode_r0x79bf1cea:\n                        (*var_18h)(var_ch);\n                    }\n                    (*var_14h)(var_10h);\n                }\n            }\n            (*var_8h)(arg_ch, 0);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar4);\n    return 0;\n}\n",
        "token_count": 2154
    },
    "79bf1eec": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "read file via mapping"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.79bf1eec(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t in_EAX;\n    int32_t iVar3;\n    int32_t arg_8h_00;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (*(in_EAX + 0x38) == 0) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(2);\n        return 0;\n    }\n    iVar3 = fcn.79bf1d99(arg_8h, &var_18h, 0xc);\n    if (iVar3 == 0) {\n        return 0;\n    }\n    var_4h = fcn.79bf1654(var_14h);\n    if (var_4h == 0) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n        return 0;\n    }\n    var_ch = *(in_EAX + 0x30) + 0xc;\n    var_8h = *(in_EAX + 0x34) + (0xfffffff3 < *(in_EAX + 0x30));\n    fcn.79bf1d99(arg_8h, var_4h, var_14h);\n    pcVar1 = _sym.imp.KERNEL32.dll_CreateFileMappingW;\n    var_8h = var_18h;\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 0x40, 0, var_18h, 0);\n    if ((iVar3 != 0) || (iVar3 = (*pcVar1)(0xffffffff, 0, 4, 0, var_8h, 0),  iVar3 != 0)) {\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(iVar3, 0x26, 0, 0, 0);\n        if ((arg_8h_00 != 0) || (arg_8h_00 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(iVar3, 6, 0, 0, 0),  arg_8h_00 != 0)\n           ) {\n            if (var_10h == 0) {\n                fcn.79bf168f();\n            }\n            else {\n                fcn.79bf2490(var_4h, arg_8h_00, var_18h);\n            }\n            fcn.79bf167d(var_4h);\n            if (arg_8h_00 == *(*(arg_8h_00 + 0x3c) + 0x34 + arg_8h_00)) {\ncode_r0x79bf2045:\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                if ((arg_10h == '\\0') || (cVar2 = fcn.79bf194b(arg_8h_00, var_18h),  cVar2 != '\\0')) {\n                    iVar3 = *(arg_8h_00 + 0x3c) + 0x18 + arg_8h_00;\n                    fcn.79bf16a3(arg_8h_00 - *(iVar3 + 0x1c));\n                    cVar2 = fcn.79bf1779(iVar3, *(iVar3 + 0x68));\n                    if (cVar2 != '\\0') {\n                        fcn.79bf1e9e(arg_8h_00);\n                        return arg_8h_00;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_UnmapViewOfFile)(arg_8h_00);\n                return 0;\n            }\n            (*_sym.imp.KERNEL32.dll_UnmapViewOfFile)(arg_8h_00);\n            arg_8h_00 = (*_sym.imp.KERNEL32.dll_MapViewOfFileEx)(iVar3, 0x26, 0, 0, 0, arg_8h_00);\n            if ((arg_8h_00 != 0) ||\n               (arg_8h_00 = (*_sym.imp.KERNEL32.dll_MapViewOfFileEx)(iVar3, 0x26, 0, 0, 0, 0),  arg_8h_00 != 0))\n            goto code_r0x79bf2045;\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n            goto code_r0x79bf203b;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    fcn.79bf167d(var_4h);\ncode_r0x79bf203b:\n    (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n    return 0;\n}\n",
        "token_count": 1099
    },
    "79bf1731": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.79bf1731(void)\n\n{\n    int32_t iVar1;\n    int32_t *unaff_ESI;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0x79bf176c);\n    *unaff_ESI = iVar1;\n    if (iVar1 != 0) {\n        iVar1 = fcn.79bf14ce(iVar1, 0x79bf175d);\n        if (iVar1 != 0) {\n            return *unaff_ESI + iVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 130
    },
    "79bf1d99": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.79bf1d99(uint hFile, uint lpBuffer, uint32_t arg_10h)\n\n{\n    uint32_t *in_EAX;\n    int32_t iVar1;\n    uint32_t in_ECX;\n    uint32_t uVar2;\n    uint32_t lpNumberOfBytesRead;\n    uint32_t lpDistanceToMoveHigh;\n    \n    if (*(in_ECX + 4) == 0) {\n        lpDistanceToMoveHigh = in_EAX[1];\n        lpNumberOfBytesRead = in_ECX;\n        (*_sym.imp.KERNEL32.dll_SetFilePointer)(hFile, *in_EAX, &lpDistanceToMoveHigh, 0);\n        iVar1 = (*_sym.imp.KERNEL32.dll_ReadFile)(hFile, lpBuffer, arg_10h, &lpNumberOfBytesRead, 0);\n        if ((iVar1 != 0) && (lpNumberOfBytesRead == arg_10h)) {\n            return 1;\n        }\n    }\n    else {\n        uVar2 = in_EAX[1] + CARRY4(arg_10h, *in_EAX);\n        if ((0x7fffffff < uVar2) || ((uVar2 < 1 && (arg_10h + *in_EAX <= *(in_ECX + 8))))) {\n            fcn.79bf168f();\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0xd);\n    }\n    return 0;\n}\n",
        "token_count": 325
    },
    "79bf1e9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.79bf1e9e(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    \n    iVar2 = *(param_1 + 0x3c) + param_1;\n    uVar1 = 0;\n    if (*(iVar2 + 6) != 0) {\n        puVar3 = *(iVar2 + 0x14) + iVar2 + 0x20;\n        do {\n            if ((puVar3[7] & 0x20000020) != 0) {\n                fcn.79bf1e7c(puVar3[1] + param_1, *puVar3, 0x20);\n            }\n            uVar1 = uVar1 + 1;\n            puVar3 = puVar3 + 10;\n        } while (uVar1 < *(iVar2 + 6));\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "79bf1654": {
        "rules": [
            "allocate memory",
            "allocate RWX memory",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d"
        ],
        "decompiled_code": "\nvoid fcn.79bf1654(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_VirtualAlloc;\n    uVar3 = 0x40;\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, param_1, 0x101000, 0x40);\n    if (iVar2 == 0) {\n        (*pcVar1)(0, uVar3, 0x101000, 4);\n    }\n    return;\n}\n",
        "token_count": 132
    },
    "79bf2490": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\nvoid fcn.79bf2490(char *param_1, uchar *param_2, int32_t param_3)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    cVar1 = *param_1;\n    if ((cVar1 == -0x28) || (cVar1 == -0x29)) {\n        fcn.79bf250e(param_1 + 1, param_2);\n        if ((cVar1 == -0x28) && (iVar2 = 0,  0 < param_1)) {\n            do {\n                param_2[iVar2] = param_2[iVar2] ^ 0xf0;\n                iVar2 = iVar2 + 1;\n            } while (iVar2 < param_1);\n        }\n    }\n    else if (0 < param_3) {\n        iVar2 = 1 - param_2;\n        do {\n            *param_2 = param_2[param_1 + iVar2];\n            param_2 = param_2 + 1;\n            param_3 = param_3 + -1;\n        } while (param_3 != 0);\n        return;\n    }\n    return;\n}\n",
        "token_count": 258
    },
    "79bf168f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.79bf168f(int32_t param_1, int32_t param_2)\n\n{\n    uchar *in_EAX;\n    \n    if (0 < param_2) {\n        param_1 = param_1 - in_EAX;\n        do {\n            *in_EAX = in_EAX[param_1];\n            in_EAX = in_EAX + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 114
    }
}